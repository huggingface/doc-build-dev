import{S as f7t,i as m7t,s as g7t,e as a,k as l,w as F,t as o,M as h7t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as p7t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as eOr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function _7t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,hA,pf,je,We,gi,yn,pA,Ln,xn,_A,hi,$n,uA,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),hA=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),pA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),_A=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),uA=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var B$=s(p);m=r(B$,"NewModelConfig"),B$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var I$=s(ci);hf=r(I$,"model_type"),I$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var q$=s(fi);mi=r(q$,'"new-model"'),q$.forEach(t),hA=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),pA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var N$=s(Ln);xn=r(N$,"PreTrainedModel"),N$.forEach(t),_A=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),uA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var j$=s(pi);_f=r(j$,"NewModelConfig"),j$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,hA),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,pA),e(je,Ln),e(Ln,xn),e(je,_A),e(je,hi),e(hi,$n),e(je,uA),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function u7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v7t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function F7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T7t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function M7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z7t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,hA,pf,je,We,gi,yn,pA,Ln,xn,_A,hi,$n,uA,pi,_f,Ca,Qe,Ae,B$,_i,I$,q$,Eo,wa,N$,uf,j$,AGe,pqe,ui,bf,jee,bA,yGe,Dee,LGe,_qe,kn,xGe,Gee,$Ge,kGe,Oee,SGe,RGe,uqe,vA,bqe,D$,PGe,vqe,vf,Fqe,bi,Ff,Vee,FA,BGe,Xee,IGe,Tqe,Co,TA,qGe,MA,NGe,G$,jGe,DGe,GGe,EA,OGe,zee,VGe,XGe,zGe,Er,CA,WGe,Wee,QGe,HGe,vi,UGe,Qee,JGe,YGe,Hee,KGe,ZGe,eOe,A,Tf,Uee,oOe,rOe,O$,tOe,aOe,nOe,Mf,Jee,sOe,lOe,V$,iOe,dOe,cOe,Ef,Yee,fOe,mOe,X$,gOe,hOe,pOe,Cf,Kee,_Oe,uOe,z$,bOe,vOe,FOe,wf,Zee,TOe,MOe,W$,EOe,COe,wOe,Af,eoe,AOe,yOe,Q$,LOe,xOe,$Oe,yf,ooe,kOe,SOe,H$,ROe,POe,BOe,Lf,roe,IOe,qOe,U$,NOe,jOe,DOe,xf,toe,GOe,OOe,J$,VOe,XOe,zOe,$f,aoe,WOe,QOe,Y$,HOe,UOe,JOe,kf,noe,YOe,KOe,K$,ZOe,eVe,oVe,Sf,soe,rVe,tVe,Z$,aVe,nVe,sVe,Rf,loe,lVe,iVe,ek,dVe,cVe,fVe,Pf,ioe,mVe,gVe,ok,hVe,pVe,_Ve,Bf,doe,uVe,bVe,rk,vVe,FVe,TVe,If,coe,MVe,EVe,tk,CVe,wVe,AVe,qf,foe,yVe,LVe,ak,xVe,$Ve,kVe,Nf,moe,SVe,RVe,nk,PVe,BVe,IVe,jf,goe,qVe,NVe,sk,jVe,DVe,GVe,Df,hoe,OVe,VVe,lk,XVe,zVe,WVe,Gf,poe,QVe,HVe,ik,UVe,JVe,YVe,Of,_oe,KVe,ZVe,dk,eXe,oXe,rXe,Vf,uoe,tXe,aXe,ck,nXe,sXe,lXe,Xf,boe,iXe,dXe,fk,cXe,fXe,mXe,zf,voe,gXe,hXe,mk,pXe,_Xe,uXe,Wf,Foe,bXe,vXe,gk,FXe,TXe,MXe,Qf,Toe,EXe,CXe,hk,wXe,AXe,yXe,Hf,Moe,LXe,xXe,pk,$Xe,kXe,SXe,Uf,Eoe,RXe,PXe,_k,BXe,IXe,qXe,Jf,Coe,NXe,jXe,uk,DXe,GXe,OXe,Yf,woe,VXe,XXe,bk,zXe,WXe,QXe,Kf,Aoe,HXe,UXe,vk,JXe,YXe,KXe,Zf,yoe,ZXe,eze,Fk,oze,rze,tze,em,Loe,aze,nze,Tk,sze,lze,ize,om,xoe,dze,cze,Mk,fze,mze,gze,rm,$oe,hze,pze,Ek,_ze,uze,bze,tm,koe,vze,Fze,Ck,Tze,Mze,Eze,am,Soe,Cze,wze,wk,Aze,yze,Lze,nm,Roe,xze,$ze,Ak,kze,Sze,Rze,sm,Poe,Pze,Bze,yk,Ize,qze,Nze,lm,Boe,jze,Dze,Lk,Gze,Oze,Vze,im,Ioe,Xze,zze,xk,Wze,Qze,Hze,dm,qoe,Uze,Jze,$k,Yze,Kze,Zze,cm,Noe,eWe,oWe,kk,rWe,tWe,aWe,fm,joe,nWe,sWe,Sk,lWe,iWe,dWe,mm,Doe,cWe,fWe,Rk,mWe,gWe,hWe,gm,Goe,pWe,_We,Pk,uWe,bWe,vWe,hm,Ooe,FWe,TWe,Bk,MWe,EWe,CWe,pm,Voe,wWe,AWe,Ik,yWe,LWe,xWe,_m,Xoe,$We,kWe,qk,SWe,RWe,PWe,um,zoe,BWe,IWe,Nk,qWe,NWe,jWe,bm,Woe,DWe,GWe,jk,OWe,VWe,XWe,vm,Qoe,zWe,WWe,Dk,QWe,HWe,UWe,Fm,Hoe,JWe,YWe,Gk,KWe,ZWe,eQe,Tm,Uoe,oQe,rQe,Ok,tQe,aQe,nQe,Mm,Joe,sQe,lQe,Vk,iQe,dQe,cQe,Em,Yoe,fQe,mQe,Xk,gQe,hQe,pQe,Cm,Koe,_Qe,uQe,zk,bQe,vQe,FQe,wm,Zoe,TQe,MQe,Wk,EQe,CQe,wQe,Am,ere,AQe,yQe,Qk,LQe,xQe,$Qe,ym,ore,kQe,SQe,Hk,RQe,PQe,BQe,Lm,rre,IQe,qQe,Uk,NQe,jQe,DQe,xm,tre,GQe,OQe,Jk,VQe,XQe,zQe,$m,are,WQe,QQe,Yk,HQe,UQe,JQe,km,nre,YQe,KQe,Kk,ZQe,eHe,oHe,Sm,sre,rHe,tHe,Zk,aHe,nHe,sHe,Rm,lre,lHe,iHe,eS,dHe,cHe,fHe,Pm,ire,mHe,gHe,oS,hHe,pHe,_He,Bm,dre,uHe,bHe,rS,vHe,FHe,THe,Im,cre,MHe,EHe,tS,CHe,wHe,AHe,qm,fre,yHe,LHe,aS,xHe,$He,kHe,Nm,mre,SHe,RHe,nS,PHe,BHe,IHe,jm,gre,qHe,NHe,sS,jHe,DHe,GHe,Dm,hre,OHe,VHe,lS,XHe,zHe,WHe,Gm,pre,QHe,HHe,iS,UHe,JHe,YHe,Om,_re,KHe,ZHe,dS,eUe,oUe,rUe,Vm,ure,tUe,aUe,cS,nUe,sUe,lUe,Xm,bre,iUe,dUe,fS,cUe,fUe,mUe,zm,vre,gUe,hUe,mS,pUe,_Ue,uUe,Wm,Fre,bUe,vUe,gS,FUe,TUe,MUe,Qm,Tre,EUe,CUe,hS,wUe,AUe,yUe,Hm,Mre,LUe,xUe,pS,$Ue,kUe,SUe,Um,Ere,RUe,PUe,_S,BUe,IUe,qUe,Jm,Cre,NUe,jUe,uS,DUe,GUe,OUe,Ym,wre,VUe,XUe,bS,zUe,WUe,QUe,Km,Are,HUe,UUe,vS,JUe,YUe,KUe,Zm,yre,ZUe,eJe,FS,oJe,rJe,tJe,eg,Lre,aJe,nJe,TS,sJe,lJe,iJe,og,xre,dJe,cJe,MS,fJe,mJe,gJe,rg,$re,hJe,pJe,ES,_Je,uJe,bJe,tg,kre,vJe,FJe,CS,TJe,MJe,EJe,ag,Sre,CJe,wJe,wS,AJe,yJe,LJe,ng,Rre,xJe,$Je,AS,kJe,SJe,RJe,sg,Pre,PJe,BJe,yS,IJe,qJe,NJe,lg,Bre,jJe,DJe,LS,GJe,OJe,VJe,ig,Ire,XJe,zJe,xS,WJe,QJe,HJe,dg,qre,UJe,JJe,$S,YJe,KJe,ZJe,cg,Nre,eYe,oYe,kS,rYe,tYe,aYe,fg,jre,nYe,sYe,SS,lYe,iYe,dYe,mg,Dre,cYe,fYe,RS,mYe,gYe,hYe,gg,Gre,pYe,_Ye,PS,uYe,bYe,vYe,hg,Ore,FYe,TYe,BS,MYe,EYe,CYe,pg,Vre,wYe,AYe,IS,yYe,LYe,xYe,_g,Xre,$Ye,kYe,qS,SYe,RYe,PYe,ug,zre,BYe,IYe,NS,qYe,NYe,jYe,bg,Wre,DYe,GYe,jS,OYe,VYe,XYe,vg,Qre,zYe,WYe,DS,QYe,HYe,UYe,Fg,JYe,Tg,wA,YYe,Hre,KYe,Mqe,Fi,Mg,Ure,AA,ZYe,Jre,eKe,Eqe,wo,yA,oKe,LA,rKe,GS,tKe,aKe,nKe,xA,sKe,Yre,lKe,iKe,dKe,Cr,$A,cKe,Kre,fKe,mKe,Aa,gKe,Zre,hKe,pKe,ete,_Ke,uKe,ote,bKe,vKe,FKe,k,Sn,rte,TKe,MKe,OS,EKe,CKe,VS,wKe,AKe,yKe,Rn,tte,LKe,xKe,XS,$Ke,kKe,zS,SKe,RKe,PKe,Pn,ate,BKe,IKe,WS,qKe,NKe,QS,jKe,DKe,GKe,Eg,nte,OKe,VKe,HS,XKe,zKe,WKe,Bn,ste,QKe,HKe,US,UKe,JKe,JS,YKe,KKe,ZKe,Cg,lte,eZe,oZe,YS,rZe,tZe,aZe,wg,ite,nZe,sZe,KS,lZe,iZe,dZe,Ag,dte,cZe,fZe,ZS,mZe,gZe,hZe,In,cte,pZe,_Ze,eR,uZe,bZe,oR,vZe,FZe,TZe,qn,fte,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,Nn,mte,xZe,$Ze,aR,kZe,SZe,nR,RZe,PZe,BZe,yg,gte,IZe,qZe,sR,NZe,jZe,DZe,Lg,hte,GZe,OZe,lR,VZe,XZe,zZe,jn,pte,WZe,QZe,iR,HZe,UZe,dR,JZe,YZe,KZe,xg,_te,ZZe,eeo,cR,oeo,reo,teo,Dn,ute,aeo,neo,fR,seo,leo,mR,ieo,deo,ceo,Gn,bte,feo,meo,gR,geo,heo,hR,peo,_eo,ueo,On,vte,beo,veo,pR,Feo,Teo,_R,Meo,Eeo,Ceo,$g,Fte,weo,Aeo,uR,yeo,Leo,xeo,Vn,Tte,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,Xn,Mte,qeo,Neo,FR,jeo,Deo,TR,Geo,Oeo,Veo,zn,Ete,Xeo,zeo,MR,Weo,Qeo,ER,Heo,Ueo,Jeo,Wn,Cte,Yeo,Keo,CR,Zeo,eoo,wR,ooo,roo,too,Qn,wte,aoo,noo,AR,soo,loo,yR,ioo,doo,coo,Hn,Ate,foo,moo,LR,goo,hoo,xR,poo,_oo,uoo,kg,yte,boo,voo,$R,Foo,Too,Moo,Un,Lte,Eoo,Coo,kR,woo,Aoo,SR,yoo,Loo,xoo,Sg,xte,$oo,koo,RR,Soo,Roo,Poo,Jn,$te,Boo,Ioo,PR,qoo,Noo,BR,joo,Doo,Goo,Yn,kte,Ooo,Voo,IR,Xoo,zoo,qR,Woo,Qoo,Hoo,Kn,Ste,Uoo,Joo,NR,Yoo,Koo,jR,Zoo,ero,oro,Rg,Rte,rro,tro,DR,aro,nro,sro,Zn,Pte,lro,iro,GR,dro,cro,OR,fro,mro,gro,es,Bte,hro,pro,VR,_ro,uro,XR,bro,vro,Fro,Pg,Ite,Tro,Mro,zR,Ero,Cro,wro,os,qte,Aro,yro,WR,Lro,xro,QR,$ro,kro,Sro,rs,Nte,Rro,Pro,HR,Bro,Iro,UR,qro,Nro,jro,ts,jte,Dro,Gro,JR,Oro,Vro,YR,Xro,zro,Wro,as,Dte,Qro,Hro,KR,Uro,Jro,ZR,Yro,Kro,Zro,ns,Gte,eto,oto,eP,rto,tto,oP,ato,nto,sto,ss,Ote,lto,ito,rP,dto,cto,tP,fto,mto,gto,Bg,Vte,hto,pto,aP,_to,uto,bto,ls,Xte,vto,Fto,nP,Tto,Mto,sP,Eto,Cto,wto,Ig,zte,Ato,yto,lP,Lto,xto,$to,qg,Wte,kto,Sto,iP,Rto,Pto,Bto,is,Qte,Ito,qto,dP,Nto,jto,cP,Dto,Gto,Oto,ds,Hte,Vto,Xto,fP,zto,Wto,mP,Qto,Hto,Uto,cs,Ute,Jto,Yto,gP,Kto,Zto,hP,eao,oao,rao,Ng,Jte,tao,aao,pP,nao,sao,lao,fs,Yte,iao,dao,_P,cao,fao,uP,mao,gao,hao,ms,Kte,pao,_ao,bP,uao,bao,vP,vao,Fao,Tao,gs,Zte,Mao,Eao,FP,Cao,wao,TP,Aao,yao,Lao,hs,eae,xao,$ao,MP,kao,Sao,EP,Rao,Pao,Bao,ps,oae,Iao,qao,CP,Nao,jao,wP,Dao,Gao,Oao,jg,rae,Vao,Xao,AP,zao,Wao,Qao,_s,tae,Hao,Uao,yP,Jao,Yao,LP,Kao,Zao,eno,Dg,aae,ono,rno,xP,tno,ano,nno,Gg,nae,sno,lno,$P,ino,dno,cno,Og,sae,fno,mno,kP,gno,hno,pno,Vg,lae,_no,uno,SP,bno,vno,Fno,us,iae,Tno,Mno,RP,Eno,Cno,PP,wno,Ano,yno,Xg,dae,Lno,xno,BP,$no,kno,Sno,bs,cae,Rno,Pno,IP,Bno,Ino,qP,qno,Nno,jno,vs,fae,Dno,Gno,NP,Ono,Vno,jP,Xno,zno,Wno,Fs,mae,Qno,Hno,DP,Uno,Jno,GP,Yno,Kno,Zno,Ts,gae,eso,oso,OP,rso,tso,VP,aso,nso,sso,Ms,hae,lso,iso,XP,dso,cso,zP,fso,mso,gso,Es,pae,hso,pso,WP,_so,uso,QP,bso,vso,Fso,zg,_ae,Tso,Mso,HP,Eso,Cso,wso,Wg,uae,Aso,yso,UP,Lso,xso,$so,Cs,bae,kso,Sso,JP,Rso,Pso,YP,Bso,Iso,qso,ws,vae,Nso,jso,KP,Dso,Gso,ZP,Oso,Vso,Xso,As,Fae,zso,Wso,eB,Qso,Hso,oB,Uso,Jso,Yso,Qg,Tae,Kso,Zso,rB,elo,olo,rlo,Hg,Mae,tlo,alo,tB,nlo,slo,llo,Ug,Eae,ilo,dlo,aB,clo,flo,mlo,ys,Cae,glo,hlo,nB,plo,_lo,sB,ulo,blo,vlo,Jg,wae,Flo,Tlo,lB,Mlo,Elo,Clo,Yg,Aae,wlo,Alo,iB,ylo,Llo,xlo,Kg,yae,$lo,klo,dB,Slo,Rlo,Plo,Ls,Lae,Blo,Ilo,cB,qlo,Nlo,fB,jlo,Dlo,Glo,Zg,xae,Olo,Vlo,mB,Xlo,zlo,Wlo,eh,$ae,Qlo,Hlo,gB,Ulo,Jlo,Ylo,xs,kae,Klo,Zlo,hB,eio,oio,pB,rio,tio,aio,$s,Sae,nio,sio,_B,lio,iio,uB,dio,cio,fio,ks,Rae,mio,gio,bB,hio,pio,vB,_io,uio,bio,Ss,Pae,vio,Fio,FB,Tio,Mio,TB,Eio,Cio,wio,oh,Aio,rh,kA,yio,Bae,Lio,Cqe,Ti,th,Iae,SA,xio,qae,$io,wqe,Ao,RA,kio,PA,Sio,MB,Rio,Pio,Bio,BA,Iio,Nae,qio,Nio,jio,He,IA,Dio,jae,Gio,Oio,ya,Vio,Dae,Xio,zio,Gae,Wio,Qio,Oae,Hio,Uio,Jio,Z,ah,Vae,Yio,Kio,EB,Zio,edo,odo,nh,Xae,rdo,tdo,CB,ado,ndo,sdo,sh,zae,ldo,ido,wB,ddo,cdo,fdo,lh,Wae,mdo,gdo,AB,hdo,pdo,_do,ih,Qae,udo,bdo,yB,vdo,Fdo,Tdo,dh,Hae,Mdo,Edo,LB,Cdo,wdo,Ado,ch,Uae,ydo,Ldo,xB,xdo,$do,kdo,fh,Jae,Sdo,Rdo,$B,Pdo,Bdo,Ido,mh,Yae,qdo,Ndo,kB,jdo,Ddo,Gdo,gh,Kae,Odo,Vdo,SB,Xdo,zdo,Wdo,hh,Zae,Qdo,Hdo,RB,Udo,Jdo,Ydo,ph,ene,Kdo,Zdo,PB,eco,oco,rco,_h,one,tco,aco,BB,nco,sco,lco,uh,rne,ico,dco,IB,cco,fco,mco,bh,tne,gco,hco,qB,pco,_co,uco,vh,ane,bco,vco,NB,Fco,Tco,Mco,Fh,nne,Eco,Cco,jB,wco,Aco,yco,Th,sne,Lco,xco,DB,$co,kco,Sco,Mh,lne,Rco,Pco,GB,Bco,Ico,qco,Eh,ine,Nco,jco,OB,Dco,Gco,Oco,Ch,dne,Vco,Xco,VB,zco,Wco,Qco,wh,cne,Hco,Uco,XB,Jco,Yco,Kco,Ah,fne,Zco,efo,zB,ofo,rfo,tfo,yh,mne,afo,nfo,WB,sfo,lfo,ifo,Lh,gne,dfo,cfo,QB,ffo,mfo,gfo,xh,hne,hfo,pfo,HB,_fo,ufo,bfo,$h,pne,vfo,Ffo,UB,Tfo,Mfo,Efo,kh,Cfo,Sh,wfo,Rh,qA,Afo,_ne,yfo,Aqe,Mi,Ph,une,NA,Lfo,bne,xfo,yqe,yo,jA,$fo,DA,kfo,JB,Sfo,Rfo,Pfo,GA,Bfo,vne,Ifo,qfo,Nfo,Ue,OA,jfo,Fne,Dfo,Gfo,Ei,Ofo,Tne,Vfo,Xfo,Mne,zfo,Wfo,Qfo,pe,Bh,Ene,Hfo,Ufo,YB,Jfo,Yfo,Kfo,Ih,Cne,Zfo,emo,wne,omo,rmo,tmo,qh,Ane,amo,nmo,KB,smo,lmo,imo,Nh,yne,dmo,cmo,ZB,fmo,mmo,gmo,jh,Lne,hmo,pmo,eI,_mo,umo,bmo,Dh,xne,vmo,Fmo,oI,Tmo,Mmo,Emo,Gh,$ne,Cmo,wmo,rI,Amo,ymo,Lmo,Oh,kne,xmo,$mo,tI,kmo,Smo,Rmo,Vh,Sne,Pmo,Bmo,aI,Imo,qmo,Nmo,Xh,Rne,jmo,Dmo,nI,Gmo,Omo,Vmo,zh,Pne,Xmo,zmo,sI,Wmo,Qmo,Hmo,Wh,Bne,Umo,Jmo,lI,Ymo,Kmo,Zmo,Qh,Ine,ego,ogo,iI,rgo,tgo,ago,Hh,qne,ngo,sgo,dI,lgo,igo,dgo,Uh,Nne,cgo,fgo,cI,mgo,ggo,hgo,Jh,jne,pgo,_go,fI,ugo,bgo,vgo,Yh,Fgo,Kh,Tgo,Zh,VA,Mgo,Dne,Ego,Lqe,Ci,ep,Gne,XA,Cgo,One,wgo,xqe,Lo,zA,Ago,wi,ygo,mI,Lgo,xgo,gI,$go,kgo,Sgo,WA,Rgo,Vne,Pgo,Bgo,Igo,tt,QA,qgo,Xne,Ngo,jgo,Ai,Dgo,zne,Ggo,Ogo,hI,Vgo,Xgo,zgo,op,Wgo,Je,HA,Qgo,Wne,Hgo,Ugo,La,Jgo,Qne,Ygo,Kgo,Hne,Zgo,eho,Une,oho,rho,tho,x,rp,Jne,aho,nho,pI,sho,lho,iho,tp,Yne,dho,cho,_I,fho,mho,gho,ap,Kne,hho,pho,uI,_ho,uho,bho,np,Zne,vho,Fho,bI,Tho,Mho,Eho,sp,ese,Cho,who,vI,Aho,yho,Lho,lp,ose,xho,$ho,FI,kho,Sho,Rho,ip,rse,Pho,Bho,TI,Iho,qho,Nho,dp,tse,jho,Dho,MI,Gho,Oho,Vho,cp,ase,Xho,zho,EI,Who,Qho,Hho,fp,nse,Uho,Jho,CI,Yho,Kho,Zho,mp,sse,epo,opo,wI,rpo,tpo,apo,gp,lse,npo,spo,AI,lpo,ipo,dpo,hp,ise,cpo,fpo,yI,mpo,gpo,hpo,pp,dse,ppo,_po,LI,upo,bpo,vpo,_p,cse,Fpo,Tpo,xI,Mpo,Epo,Cpo,up,fse,wpo,Apo,$I,ypo,Lpo,xpo,bp,mse,$po,kpo,kI,Spo,Rpo,Ppo,vp,gse,Bpo,Ipo,SI,qpo,Npo,jpo,Fp,hse,Dpo,Gpo,RI,Opo,Vpo,Xpo,Tp,pse,zpo,Wpo,PI,Qpo,Hpo,Upo,Mp,_se,Jpo,Ypo,BI,Kpo,Zpo,e_o,Ep,use,o_o,r_o,II,t_o,a_o,n_o,Cp,bse,s_o,l_o,qI,i_o,d_o,c_o,wp,vse,f_o,m_o,NI,g_o,h_o,p_o,Ap,Fse,__o,u_o,jI,b_o,v_o,F_o,yp,Tse,T_o,M_o,DI,E_o,C_o,w_o,Lp,Mse,A_o,y_o,GI,L_o,x_o,$_o,xp,Ese,k_o,S_o,OI,R_o,P_o,B_o,$p,Cse,I_o,q_o,VI,N_o,j_o,D_o,kp,wse,G_o,O_o,XI,V_o,X_o,z_o,Sp,Ase,W_o,Q_o,zI,H_o,U_o,J_o,Rp,yse,Y_o,K_o,WI,Z_o,euo,ouo,Rs,Lse,ruo,tuo,QI,auo,nuo,HI,suo,luo,iuo,Pp,xse,duo,cuo,UI,fuo,muo,guo,Bp,$se,huo,puo,JI,_uo,uuo,buo,Ip,kse,vuo,Fuo,YI,Tuo,Muo,Euo,qp,Sse,Cuo,wuo,KI,Auo,yuo,Luo,Np,Rse,xuo,$uo,ZI,kuo,Suo,Ruo,jp,Pse,Puo,Buo,eq,Iuo,quo,Nuo,Dp,Bse,juo,Duo,oq,Guo,Ouo,Vuo,Gp,Ise,Xuo,zuo,rq,Wuo,Quo,Huo,Op,qse,Uuo,Juo,tq,Yuo,Kuo,Zuo,Vp,Nse,e6o,o6o,aq,r6o,t6o,a6o,Xp,jse,n6o,s6o,nq,l6o,i6o,d6o,zp,Dse,c6o,f6o,sq,m6o,g6o,h6o,Wp,Gse,p6o,_6o,lq,u6o,b6o,v6o,Qp,Ose,F6o,T6o,iq,M6o,E6o,C6o,Hp,Vse,w6o,A6o,dq,y6o,L6o,x6o,Up,Xse,$6o,k6o,cq,S6o,R6o,P6o,Jp,zse,B6o,I6o,fq,q6o,N6o,j6o,Yp,Wse,D6o,G6o,mq,O6o,V6o,X6o,Kp,Qse,z6o,W6o,gq,Q6o,H6o,U6o,Zp,Hse,J6o,Y6o,hq,K6o,Z6o,e1o,e_,Use,o1o,r1o,pq,t1o,a1o,n1o,o_,Jse,s1o,l1o,_q,i1o,d1o,c1o,r_,Yse,f1o,m1o,uq,g1o,h1o,p1o,t_,Kse,_1o,u1o,bq,b1o,v1o,F1o,a_,Zse,T1o,M1o,vq,E1o,C1o,w1o,n_,ele,A1o,y1o,Fq,L1o,x1o,$1o,s_,ole,k1o,S1o,Tq,R1o,P1o,B1o,l_,rle,I1o,q1o,Mq,N1o,j1o,D1o,i_,tle,G1o,O1o,Eq,V1o,X1o,z1o,d_,ale,W1o,Q1o,Cq,H1o,U1o,J1o,c_,nle,Y1o,K1o,wq,Z1o,ebo,obo,f_,sle,rbo,tbo,Aq,abo,nbo,sbo,m_,lle,lbo,ibo,yq,dbo,cbo,fbo,g_,ile,mbo,gbo,Lq,hbo,pbo,_bo,h_,dle,ubo,bbo,xq,vbo,Fbo,Tbo,p_,cle,Mbo,Ebo,$q,Cbo,wbo,Abo,__,fle,ybo,Lbo,kq,xbo,$bo,kbo,u_,mle,Sbo,Rbo,Sq,Pbo,Bbo,Ibo,b_,gle,qbo,Nbo,Rq,jbo,Dbo,Gbo,v_,hle,Obo,Vbo,Pq,Xbo,zbo,Wbo,F_,ple,Qbo,Hbo,Bq,Ubo,Jbo,Ybo,T_,_le,Kbo,Zbo,Iq,e2o,o2o,r2o,M_,ule,t2o,a2o,qq,n2o,s2o,l2o,E_,ble,i2o,d2o,Nq,c2o,f2o,m2o,C_,vle,g2o,h2o,jq,p2o,_2o,u2o,w_,Fle,b2o,v2o,Dq,F2o,T2o,M2o,A_,Tle,E2o,C2o,Gq,w2o,A2o,y2o,y_,Mle,L2o,x2o,Oq,$2o,k2o,S2o,L_,Ele,R2o,P2o,Vq,B2o,I2o,q2o,x_,Cle,N2o,j2o,Xq,D2o,G2o,O2o,$_,wle,V2o,X2o,zq,z2o,W2o,Q2o,k_,Ale,H2o,U2o,Wq,J2o,Y2o,K2o,S_,yle,Z2o,e5o,Qq,o5o,r5o,t5o,R_,Lle,a5o,n5o,Hq,s5o,l5o,i5o,P_,xle,d5o,c5o,Uq,f5o,m5o,g5o,B_,$le,h5o,p5o,Jq,_5o,u5o,b5o,I_,kle,v5o,F5o,Yq,T5o,M5o,E5o,q_,Sle,C5o,w5o,Kq,A5o,y5o,L5o,N_,Rle,x5o,$5o,Zq,k5o,S5o,R5o,j_,Ple,P5o,B5o,eN,I5o,q5o,N5o,D_,Ble,j5o,D5o,oN,G5o,O5o,V5o,G_,Ile,X5o,z5o,rN,W5o,Q5o,H5o,O_,qle,U5o,J5o,tN,Y5o,K5o,Z5o,V_,Nle,evo,ovo,aN,rvo,tvo,avo,X_,jle,nvo,svo,nN,lvo,ivo,dvo,z_,Dle,cvo,fvo,sN,mvo,gvo,hvo,W_,Gle,pvo,_vo,lN,uvo,bvo,vvo,Q_,Ole,Fvo,Tvo,iN,Mvo,Evo,Cvo,H_,wvo,Vle,Avo,yvo,Xle,Lvo,xvo,U_,$qe,yi,J_,zle,UA,$vo,Wle,kvo,kqe,xo,JA,Svo,Li,Rvo,dN,Pvo,Bvo,cN,Ivo,qvo,Nvo,YA,jvo,Qle,Dvo,Gvo,Ovo,at,KA,Vvo,Hle,Xvo,zvo,xi,Wvo,Ule,Qvo,Hvo,fN,Uvo,Jvo,Yvo,Y_,Kvo,Ye,ZA,Zvo,Jle,eFo,oFo,xa,rFo,Yle,tFo,aFo,Kle,nFo,sFo,Zle,lFo,iFo,dFo,G,K_,eie,cFo,fFo,mN,mFo,gFo,hFo,Z_,oie,pFo,_Fo,gN,uFo,bFo,vFo,eu,rie,FFo,TFo,hN,MFo,EFo,CFo,ou,tie,wFo,AFo,pN,yFo,LFo,xFo,ru,aie,$Fo,kFo,_N,SFo,RFo,PFo,tu,nie,BFo,IFo,uN,qFo,NFo,jFo,au,sie,DFo,GFo,bN,OFo,VFo,XFo,nu,lie,zFo,WFo,vN,QFo,HFo,UFo,su,iie,JFo,YFo,FN,KFo,ZFo,eTo,lu,die,oTo,rTo,TN,tTo,aTo,nTo,iu,cie,sTo,lTo,MN,iTo,dTo,cTo,du,fie,fTo,mTo,EN,gTo,hTo,pTo,cu,mie,_To,uTo,CN,bTo,vTo,FTo,fu,gie,TTo,MTo,wN,ETo,CTo,wTo,mu,hie,ATo,yTo,AN,LTo,xTo,$To,gu,pie,kTo,STo,yN,RTo,PTo,BTo,hu,_ie,ITo,qTo,LN,NTo,jTo,DTo,pu,uie,GTo,OTo,xN,VTo,XTo,zTo,_u,bie,WTo,QTo,$N,HTo,UTo,JTo,uu,vie,YTo,KTo,kN,ZTo,e9o,o9o,bu,Fie,r9o,t9o,SN,a9o,n9o,s9o,vu,Tie,l9o,i9o,RN,d9o,c9o,f9o,Fu,Mie,m9o,g9o,PN,h9o,p9o,_9o,Tu,Eie,u9o,b9o,BN,v9o,F9o,T9o,Mu,Cie,M9o,E9o,IN,C9o,w9o,A9o,Eu,wie,y9o,L9o,qN,x9o,$9o,k9o,Cu,Aie,S9o,R9o,NN,P9o,B9o,I9o,wu,yie,q9o,N9o,jN,j9o,D9o,G9o,Au,Lie,O9o,V9o,DN,X9o,z9o,W9o,yu,xie,Q9o,H9o,GN,U9o,J9o,Y9o,Lu,$ie,K9o,Z9o,ON,eMo,oMo,rMo,xu,kie,tMo,aMo,VN,nMo,sMo,lMo,$u,Sie,iMo,dMo,XN,cMo,fMo,mMo,ku,Rie,gMo,hMo,zN,pMo,_Mo,uMo,Su,Pie,bMo,vMo,WN,FMo,TMo,MMo,Ru,Bie,EMo,CMo,QN,wMo,AMo,yMo,Pu,Iie,LMo,xMo,HN,$Mo,kMo,SMo,Bu,qie,RMo,PMo,UN,BMo,IMo,qMo,Iu,Nie,NMo,jMo,JN,DMo,GMo,OMo,qu,jie,VMo,XMo,YN,zMo,WMo,QMo,Nu,Die,HMo,UMo,KN,JMo,YMo,KMo,ju,Gie,ZMo,e4o,ZN,o4o,r4o,t4o,Du,a4o,Oie,n4o,s4o,Vie,l4o,i4o,Gu,Sqe,$i,Ou,Xie,ey,d4o,zie,c4o,Rqe,$o,oy,f4o,ki,m4o,ej,g4o,h4o,oj,p4o,_4o,u4o,ry,b4o,Wie,v4o,F4o,T4o,nt,ty,M4o,Qie,E4o,C4o,Si,w4o,Hie,A4o,y4o,rj,L4o,x4o,$4o,Vu,k4o,Ke,ay,S4o,Uie,R4o,P4o,$a,B4o,Jie,I4o,q4o,Yie,N4o,j4o,Kie,D4o,G4o,O4o,z,Xu,Zie,V4o,X4o,tj,z4o,W4o,Q4o,zu,ede,H4o,U4o,aj,J4o,Y4o,K4o,Wu,ode,Z4o,eEo,nj,oEo,rEo,tEo,Qu,rde,aEo,nEo,sj,sEo,lEo,iEo,Hu,tde,dEo,cEo,lj,fEo,mEo,gEo,Uu,ade,hEo,pEo,ij,_Eo,uEo,bEo,Ju,nde,vEo,FEo,dj,TEo,MEo,EEo,Yu,sde,CEo,wEo,cj,AEo,yEo,LEo,Ku,lde,xEo,$Eo,fj,kEo,SEo,REo,Zu,ide,PEo,BEo,mj,IEo,qEo,NEo,e6,dde,jEo,DEo,gj,GEo,OEo,VEo,o6,cde,XEo,zEo,hj,WEo,QEo,HEo,r6,fde,UEo,JEo,pj,YEo,KEo,ZEo,t6,mde,eCo,oCo,_j,rCo,tCo,aCo,a6,gde,nCo,sCo,uj,lCo,iCo,dCo,n6,hde,cCo,fCo,bj,mCo,gCo,hCo,s6,pde,pCo,_Co,vj,uCo,bCo,vCo,l6,_de,FCo,TCo,Fj,MCo,ECo,CCo,i6,ude,wCo,ACo,Tj,yCo,LCo,xCo,d6,bde,$Co,kCo,Mj,SCo,RCo,PCo,c6,vde,BCo,ICo,Ej,qCo,NCo,jCo,f6,Fde,DCo,GCo,Cj,OCo,VCo,XCo,m6,Tde,zCo,WCo,wj,QCo,HCo,UCo,g6,Mde,JCo,YCo,Aj,KCo,ZCo,e3o,h6,Ede,o3o,r3o,yj,t3o,a3o,n3o,p6,Cde,s3o,l3o,Lj,i3o,d3o,c3o,_6,wde,f3o,m3o,xj,g3o,h3o,p3o,u6,Ade,_3o,u3o,$j,b3o,v3o,F3o,b6,yde,T3o,M3o,kj,E3o,C3o,w3o,v6,Lde,A3o,y3o,Sj,L3o,x3o,$3o,F6,xde,k3o,S3o,Rj,R3o,P3o,B3o,T6,$de,I3o,q3o,Pj,N3o,j3o,D3o,M6,kde,G3o,O3o,Bj,V3o,X3o,z3o,E6,Sde,W3o,Q3o,Ij,H3o,U3o,J3o,C6,Rde,Y3o,K3o,qj,Z3o,ewo,owo,w6,Pde,rwo,two,Nj,awo,nwo,swo,A6,Bde,lwo,iwo,jj,dwo,cwo,fwo,y6,mwo,Ide,gwo,hwo,qde,pwo,_wo,L6,Pqe,Ri,x6,Nde,ny,uwo,jde,bwo,Bqe,ko,sy,vwo,Pi,Fwo,Dj,Two,Mwo,Gj,Ewo,Cwo,wwo,ly,Awo,Dde,ywo,Lwo,xwo,st,iy,$wo,Gde,kwo,Swo,Bi,Rwo,Ode,Pwo,Bwo,Oj,Iwo,qwo,Nwo,$6,jwo,Ze,dy,Dwo,Vde,Gwo,Owo,ka,Vwo,Xde,Xwo,zwo,zde,Wwo,Qwo,Wde,Hwo,Uwo,Jwo,Q,k6,Qde,Ywo,Kwo,Vj,Zwo,e0o,o0o,S6,Hde,r0o,t0o,Xj,a0o,n0o,s0o,R6,Ude,l0o,i0o,zj,d0o,c0o,f0o,P6,Jde,m0o,g0o,Wj,h0o,p0o,_0o,B6,Yde,u0o,b0o,Qj,v0o,F0o,T0o,I6,Kde,M0o,E0o,Hj,C0o,w0o,A0o,q6,Zde,y0o,L0o,Uj,x0o,$0o,k0o,N6,ece,S0o,R0o,Jj,P0o,B0o,I0o,j6,oce,q0o,N0o,Yj,j0o,D0o,G0o,D6,rce,O0o,V0o,Kj,X0o,z0o,W0o,G6,tce,Q0o,H0o,Zj,U0o,J0o,Y0o,O6,ace,K0o,Z0o,eD,eAo,oAo,rAo,V6,nce,tAo,aAo,oD,nAo,sAo,lAo,X6,sce,iAo,dAo,rD,cAo,fAo,mAo,z6,lce,gAo,hAo,tD,pAo,_Ao,uAo,W6,ice,bAo,vAo,aD,FAo,TAo,MAo,Q6,dce,EAo,CAo,nD,wAo,AAo,yAo,H6,cce,LAo,xAo,sD,$Ao,kAo,SAo,U6,fce,RAo,PAo,lD,BAo,IAo,qAo,J6,mce,NAo,jAo,iD,DAo,GAo,OAo,Y6,gce,VAo,XAo,dD,zAo,WAo,QAo,K6,hce,HAo,UAo,cD,JAo,YAo,KAo,Z6,pce,ZAo,eyo,fD,oyo,ryo,tyo,e1,_ce,ayo,nyo,mD,syo,lyo,iyo,o1,uce,dyo,cyo,gD,fyo,myo,gyo,r1,bce,hyo,pyo,hD,_yo,uyo,byo,t1,vce,vyo,Fyo,pD,Tyo,Myo,Eyo,a1,Fce,Cyo,wyo,_D,Ayo,yyo,Lyo,n1,Tce,xyo,$yo,uD,kyo,Syo,Ryo,s1,Mce,Pyo,Byo,bD,Iyo,qyo,Nyo,l1,Ece,jyo,Dyo,Cce,Gyo,Oyo,Vyo,i1,wce,Xyo,zyo,vD,Wyo,Qyo,Hyo,d1,Ace,Uyo,Jyo,FD,Yyo,Kyo,Zyo,c1,yce,e8o,o8o,TD,r8o,t8o,a8o,f1,Lce,n8o,s8o,MD,l8o,i8o,d8o,m1,c8o,xce,f8o,m8o,$ce,g8o,h8o,g1,Iqe,Ii,h1,kce,cy,p8o,Sce,_8o,qqe,So,fy,u8o,qi,b8o,ED,v8o,F8o,CD,T8o,M8o,E8o,my,C8o,Rce,w8o,A8o,y8o,lt,gy,L8o,Pce,x8o,$8o,Ni,k8o,Bce,S8o,R8o,wD,P8o,B8o,I8o,p1,q8o,eo,hy,N8o,Ice,j8o,D8o,Sa,G8o,qce,O8o,V8o,Nce,X8o,z8o,jce,W8o,Q8o,H8o,_e,_1,Dce,U8o,J8o,AD,Y8o,K8o,Z8o,u1,Gce,eLo,oLo,yD,rLo,tLo,aLo,b1,Oce,nLo,sLo,LD,lLo,iLo,dLo,v1,Vce,cLo,fLo,xD,mLo,gLo,hLo,F1,Xce,pLo,_Lo,$D,uLo,bLo,vLo,T1,zce,FLo,TLo,kD,MLo,ELo,CLo,M1,Wce,wLo,ALo,SD,yLo,LLo,xLo,E1,Qce,$Lo,kLo,RD,SLo,RLo,PLo,C1,Hce,BLo,ILo,PD,qLo,NLo,jLo,w1,Uce,DLo,GLo,BD,OLo,VLo,XLo,A1,Jce,zLo,WLo,ID,QLo,HLo,ULo,y1,Yce,JLo,YLo,qD,KLo,ZLo,e7o,L1,Kce,o7o,r7o,ND,t7o,a7o,n7o,x1,Zce,s7o,l7o,jD,i7o,d7o,c7o,$1,efe,f7o,m7o,DD,g7o,h7o,p7o,k1,ofe,_7o,u7o,GD,b7o,v7o,F7o,S1,T7o,rfe,M7o,E7o,tfe,C7o,w7o,R1,Nqe,ji,P1,afe,py,A7o,nfe,y7o,jqe,Ro,_y,L7o,Di,x7o,OD,$7o,k7o,VD,S7o,R7o,P7o,uy,B7o,sfe,I7o,q7o,N7o,it,by,j7o,lfe,D7o,G7o,Gi,O7o,ife,V7o,X7o,XD,z7o,W7o,Q7o,B1,H7o,oo,vy,U7o,dfe,J7o,Y7o,Ra,K7o,cfe,Z7o,exo,ffe,oxo,rxo,mfe,txo,axo,nxo,q,I1,gfe,sxo,lxo,zD,ixo,dxo,cxo,q1,hfe,fxo,mxo,WD,gxo,hxo,pxo,N1,pfe,_xo,uxo,QD,bxo,vxo,Fxo,j1,_fe,Txo,Mxo,HD,Exo,Cxo,wxo,D1,ufe,Axo,yxo,UD,Lxo,xxo,$xo,G1,bfe,kxo,Sxo,JD,Rxo,Pxo,Bxo,O1,vfe,Ixo,qxo,YD,Nxo,jxo,Dxo,V1,Ffe,Gxo,Oxo,KD,Vxo,Xxo,zxo,X1,Tfe,Wxo,Qxo,ZD,Hxo,Uxo,Jxo,z1,Mfe,Yxo,Kxo,eG,Zxo,e$o,o$o,W1,Efe,r$o,t$o,oG,a$o,n$o,s$o,Q1,Cfe,l$o,i$o,rG,d$o,c$o,f$o,H1,wfe,m$o,g$o,tG,h$o,p$o,_$o,U1,Afe,u$o,b$o,aG,v$o,F$o,T$o,J1,yfe,M$o,E$o,nG,C$o,w$o,A$o,Y1,Lfe,y$o,L$o,sG,x$o,$$o,k$o,K1,xfe,S$o,R$o,lG,P$o,B$o,I$o,Z1,$fe,q$o,N$o,iG,j$o,D$o,G$o,eb,kfe,O$o,V$o,dG,X$o,z$o,W$o,ob,Sfe,Q$o,H$o,Rfe,U$o,J$o,Y$o,rb,Pfe,K$o,Z$o,cG,eko,oko,rko,tb,Bfe,tko,ako,fG,nko,sko,lko,ab,Ife,iko,dko,mG,cko,fko,mko,nb,qfe,gko,hko,gG,pko,_ko,uko,sb,Nfe,bko,vko,hG,Fko,Tko,Mko,lb,jfe,Eko,Cko,pG,wko,Ako,yko,ib,Dfe,Lko,xko,_G,$ko,kko,Sko,db,Gfe,Rko,Pko,uG,Bko,Iko,qko,cb,Ofe,Nko,jko,bG,Dko,Gko,Oko,fb,Vfe,Vko,Xko,vG,zko,Wko,Qko,mb,Xfe,Hko,Uko,FG,Jko,Yko,Kko,gb,zfe,Zko,eSo,TG,oSo,rSo,tSo,hb,Wfe,aSo,nSo,MG,sSo,lSo,iSo,pb,Qfe,dSo,cSo,EG,fSo,mSo,gSo,_b,Hfe,hSo,pSo,CG,_So,uSo,bSo,ub,Ufe,vSo,FSo,wG,TSo,MSo,ESo,bb,Jfe,CSo,wSo,AG,ASo,ySo,LSo,vb,Yfe,xSo,$So,yG,kSo,SSo,RSo,Fb,Kfe,PSo,BSo,LG,ISo,qSo,NSo,Tb,Zfe,jSo,DSo,xG,GSo,OSo,VSo,Mb,eme,XSo,zSo,$G,WSo,QSo,HSo,Eb,ome,USo,JSo,kG,YSo,KSo,ZSo,Cb,rme,eRo,oRo,SG,rRo,tRo,aRo,wb,tme,nRo,sRo,RG,lRo,iRo,dRo,Ab,ame,cRo,fRo,PG,mRo,gRo,hRo,yb,nme,pRo,_Ro,BG,uRo,bRo,vRo,Lb,sme,FRo,TRo,IG,MRo,ERo,CRo,xb,wRo,lme,ARo,yRo,ime,LRo,xRo,$b,Dqe,Oi,kb,dme,Fy,$Ro,cme,kRo,Gqe,Po,Ty,SRo,Vi,RRo,qG,PRo,BRo,NG,IRo,qRo,NRo,My,jRo,fme,DRo,GRo,ORo,dt,Ey,VRo,mme,XRo,zRo,Xi,WRo,gme,QRo,HRo,jG,URo,JRo,YRo,Sb,KRo,ro,Cy,ZRo,hme,ePo,oPo,Pa,rPo,pme,tPo,aPo,_me,nPo,sPo,ume,lPo,iPo,dPo,Y,Rb,bme,cPo,fPo,DG,mPo,gPo,hPo,Pb,vme,pPo,_Po,GG,uPo,bPo,vPo,Bb,Fme,FPo,TPo,OG,MPo,EPo,CPo,Ib,Tme,wPo,APo,VG,yPo,LPo,xPo,qb,Mme,$Po,kPo,XG,SPo,RPo,PPo,Nb,Eme,BPo,IPo,zG,qPo,NPo,jPo,jb,Cme,DPo,GPo,WG,OPo,VPo,XPo,Db,wme,zPo,WPo,QG,QPo,HPo,UPo,Gb,Ame,JPo,YPo,HG,KPo,ZPo,eBo,Ob,yme,oBo,rBo,UG,tBo,aBo,nBo,Vb,Lme,sBo,lBo,JG,iBo,dBo,cBo,Xb,xme,fBo,mBo,YG,gBo,hBo,pBo,zb,$me,_Bo,uBo,KG,bBo,vBo,FBo,Wb,kme,TBo,MBo,ZG,EBo,CBo,wBo,Qb,Sme,ABo,yBo,eO,LBo,xBo,$Bo,Hb,Rme,kBo,SBo,oO,RBo,PBo,BBo,Ub,Pme,IBo,qBo,rO,NBo,jBo,DBo,Jb,Bme,GBo,OBo,tO,VBo,XBo,zBo,Yb,Ime,WBo,QBo,aO,HBo,UBo,JBo,Kb,qme,YBo,KBo,nO,ZBo,eIo,oIo,Zb,Nme,rIo,tIo,sO,aIo,nIo,sIo,e2,jme,lIo,iIo,lO,dIo,cIo,fIo,o2,Dme,mIo,gIo,iO,hIo,pIo,_Io,r2,Gme,uIo,bIo,dO,vIo,FIo,TIo,t2,Ome,MIo,EIo,cO,CIo,wIo,AIo,a2,Vme,yIo,LIo,fO,xIo,$Io,kIo,n2,Xme,SIo,RIo,mO,PIo,BIo,IIo,s2,zme,qIo,NIo,gO,jIo,DIo,GIo,l2,Wme,OIo,VIo,hO,XIo,zIo,WIo,i2,QIo,Qme,HIo,UIo,Hme,JIo,YIo,d2,Oqe,zi,c2,Ume,wy,KIo,Jme,ZIo,Vqe,Bo,Ay,eqo,Wi,oqo,pO,rqo,tqo,_O,aqo,nqo,sqo,yy,lqo,Yme,iqo,dqo,cqo,ct,Ly,fqo,Kme,mqo,gqo,Qi,hqo,Zme,pqo,_qo,uO,uqo,bqo,vqo,f2,Fqo,to,xy,Tqo,ege,Mqo,Eqo,Ba,Cqo,oge,wqo,Aqo,rge,yqo,Lqo,tge,xqo,$qo,kqo,Yr,m2,age,Sqo,Rqo,bO,Pqo,Bqo,Iqo,g2,nge,qqo,Nqo,vO,jqo,Dqo,Gqo,h2,sge,Oqo,Vqo,FO,Xqo,zqo,Wqo,p2,lge,Qqo,Hqo,TO,Uqo,Jqo,Yqo,_2,ige,Kqo,Zqo,MO,eNo,oNo,rNo,u2,tNo,dge,aNo,nNo,cge,sNo,lNo,b2,Xqe,Hi,v2,fge,$y,iNo,mge,dNo,zqe,Io,ky,cNo,Ui,fNo,EO,mNo,gNo,CO,hNo,pNo,_No,Sy,uNo,gge,bNo,vNo,FNo,ft,Ry,TNo,hge,MNo,ENo,Ji,CNo,pge,wNo,ANo,wO,yNo,LNo,xNo,F2,$No,ao,Py,kNo,_ge,SNo,RNo,Ia,PNo,uge,BNo,INo,bge,qNo,NNo,vge,jNo,DNo,GNo,U,T2,Fge,ONo,VNo,AO,XNo,zNo,WNo,M2,Tge,QNo,HNo,yO,UNo,JNo,YNo,E2,Mge,KNo,ZNo,LO,ejo,ojo,rjo,C2,Ege,tjo,ajo,xO,njo,sjo,ljo,w2,Cge,ijo,djo,$O,cjo,fjo,mjo,A2,wge,gjo,hjo,kO,pjo,_jo,ujo,y2,Age,bjo,vjo,SO,Fjo,Tjo,Mjo,L2,yge,Ejo,Cjo,RO,wjo,Ajo,yjo,x2,Lge,Ljo,xjo,PO,$jo,kjo,Sjo,$2,xge,Rjo,Pjo,BO,Bjo,Ijo,qjo,k2,$ge,Njo,jjo,IO,Djo,Gjo,Ojo,S2,kge,Vjo,Xjo,qO,zjo,Wjo,Qjo,R2,Sge,Hjo,Ujo,NO,Jjo,Yjo,Kjo,P2,Rge,Zjo,eDo,jO,oDo,rDo,tDo,B2,Pge,aDo,nDo,DO,sDo,lDo,iDo,I2,Bge,dDo,cDo,GO,fDo,mDo,gDo,q2,Ige,hDo,pDo,OO,_Do,uDo,bDo,N2,qge,vDo,FDo,VO,TDo,MDo,EDo,j2,Nge,CDo,wDo,XO,ADo,yDo,LDo,D2,jge,xDo,$Do,zO,kDo,SDo,RDo,G2,Dge,PDo,BDo,WO,IDo,qDo,NDo,O2,Gge,jDo,DDo,QO,GDo,ODo,VDo,V2,Oge,XDo,zDo,HO,WDo,QDo,HDo,X2,Vge,UDo,JDo,UO,YDo,KDo,ZDo,z2,Xge,eGo,oGo,JO,rGo,tGo,aGo,W2,zge,nGo,sGo,YO,lGo,iGo,dGo,Q2,Wge,cGo,fGo,KO,mGo,gGo,hGo,H2,Qge,pGo,_Go,ZO,uGo,bGo,vGo,U2,Hge,FGo,TGo,eV,MGo,EGo,CGo,J2,Uge,wGo,AGo,oV,yGo,LGo,xGo,Y2,Jge,$Go,kGo,rV,SGo,RGo,PGo,K2,Yge,BGo,IGo,tV,qGo,NGo,jGo,Z2,Kge,DGo,GGo,aV,OGo,VGo,XGo,e5,zGo,Zge,WGo,QGo,ehe,HGo,UGo,o5,Wqe,Yi,r5,ohe,By,JGo,rhe,YGo,Qqe,qo,Iy,KGo,Ki,ZGo,nV,eOo,oOo,sV,rOo,tOo,aOo,qy,nOo,the,sOo,lOo,iOo,mt,Ny,dOo,ahe,cOo,fOo,Zi,mOo,nhe,gOo,hOo,lV,pOo,_Oo,uOo,t5,bOo,no,jy,vOo,she,FOo,TOo,qa,MOo,lhe,EOo,COo,ihe,wOo,AOo,dhe,yOo,LOo,xOo,V,a5,che,$Oo,kOo,iV,SOo,ROo,POo,n5,fhe,BOo,IOo,dV,qOo,NOo,jOo,s5,mhe,DOo,GOo,cV,OOo,VOo,XOo,l5,ghe,zOo,WOo,fV,QOo,HOo,UOo,i5,hhe,JOo,YOo,mV,KOo,ZOo,eVo,d5,phe,oVo,rVo,gV,tVo,aVo,nVo,c5,_he,sVo,lVo,hV,iVo,dVo,cVo,f5,uhe,fVo,mVo,pV,gVo,hVo,pVo,m5,bhe,_Vo,uVo,_V,bVo,vVo,FVo,g5,vhe,TVo,MVo,uV,EVo,CVo,wVo,h5,Fhe,AVo,yVo,bV,LVo,xVo,$Vo,p5,The,kVo,SVo,vV,RVo,PVo,BVo,_5,Mhe,IVo,qVo,FV,NVo,jVo,DVo,u5,Ehe,GVo,OVo,TV,VVo,XVo,zVo,b5,Che,WVo,QVo,MV,HVo,UVo,JVo,v5,whe,YVo,KVo,EV,ZVo,eXo,oXo,F5,Ahe,rXo,tXo,CV,aXo,nXo,sXo,T5,yhe,lXo,iXo,wV,dXo,cXo,fXo,M5,Lhe,mXo,gXo,AV,hXo,pXo,_Xo,E5,xhe,uXo,bXo,yV,vXo,FXo,TXo,C5,$he,MXo,EXo,LV,CXo,wXo,AXo,w5,khe,yXo,LXo,xV,xXo,$Xo,kXo,A5,She,SXo,RXo,$V,PXo,BXo,IXo,y5,Rhe,qXo,NXo,kV,jXo,DXo,GXo,L5,Phe,OXo,VXo,SV,XXo,zXo,WXo,x5,Bhe,QXo,HXo,RV,UXo,JXo,YXo,$5,Ihe,KXo,ZXo,PV,ezo,ozo,rzo,k5,qhe,tzo,azo,BV,nzo,szo,lzo,S5,Nhe,izo,dzo,IV,czo,fzo,mzo,R5,jhe,gzo,hzo,qV,pzo,_zo,uzo,P5,Dhe,bzo,vzo,NV,Fzo,Tzo,Mzo,B5,Ghe,Ezo,Czo,jV,wzo,Azo,yzo,I5,Ohe,Lzo,xzo,DV,$zo,kzo,Szo,q5,Vhe,Rzo,Pzo,GV,Bzo,Izo,qzo,N5,Xhe,Nzo,jzo,OV,Dzo,Gzo,Ozo,j5,zhe,Vzo,Xzo,VV,zzo,Wzo,Qzo,D5,Whe,Hzo,Uzo,XV,Jzo,Yzo,Kzo,G5,Qhe,Zzo,eWo,zV,oWo,rWo,tWo,O5,Hhe,aWo,nWo,WV,sWo,lWo,iWo,V5,dWo,Uhe,cWo,fWo,Jhe,mWo,gWo,X5,Hqe,ed,z5,Yhe,Dy,hWo,Khe,pWo,Uqe,No,Gy,_Wo,od,uWo,QV,bWo,vWo,HV,FWo,TWo,MWo,Oy,EWo,Zhe,CWo,wWo,AWo,gt,Vy,yWo,epe,LWo,xWo,rd,$Wo,ope,kWo,SWo,UV,RWo,PWo,BWo,W5,IWo,so,Xy,qWo,rpe,NWo,jWo,Na,DWo,tpe,GWo,OWo,ape,VWo,XWo,npe,zWo,WWo,QWo,spe,Q5,lpe,HWo,UWo,JV,JWo,YWo,KWo,H5,ZWo,ipe,eQo,oQo,dpe,rQo,tQo,U5,Jqe,td,J5,cpe,zy,aQo,fpe,nQo,Yqe,jo,Wy,sQo,ad,lQo,YV,iQo,dQo,KV,cQo,fQo,mQo,Qy,gQo,mpe,hQo,pQo,_Qo,ht,Hy,uQo,gpe,bQo,vQo,nd,FQo,hpe,TQo,MQo,ZV,EQo,CQo,wQo,Y5,AQo,lo,Uy,yQo,ppe,LQo,xQo,ja,$Qo,_pe,kQo,SQo,upe,RQo,PQo,bpe,BQo,IQo,qQo,Fe,K5,vpe,NQo,jQo,eX,DQo,GQo,OQo,Z5,Fpe,VQo,XQo,oX,zQo,WQo,QQo,ev,Tpe,HQo,UQo,rX,JQo,YQo,KQo,ov,Mpe,ZQo,eHo,tX,oHo,rHo,tHo,Ps,Epe,aHo,nHo,aX,sHo,lHo,nX,iHo,dHo,cHo,rv,Cpe,fHo,mHo,sX,gHo,hHo,pHo,pt,wpe,_Ho,uHo,lX,bHo,vHo,iX,FHo,THo,dX,MHo,EHo,CHo,tv,Ape,wHo,AHo,cX,yHo,LHo,xHo,av,ype,$Ho,kHo,fX,SHo,RHo,PHo,nv,Lpe,BHo,IHo,mX,qHo,NHo,jHo,sv,xpe,DHo,GHo,gX,OHo,VHo,XHo,lv,$pe,zHo,WHo,hX,QHo,HHo,UHo,iv,kpe,JHo,YHo,pX,KHo,ZHo,eUo,dv,Spe,oUo,rUo,_X,tUo,aUo,nUo,cv,sUo,Rpe,lUo,iUo,Ppe,dUo,cUo,fv,Kqe,sd,mv,Bpe,Jy,fUo,Ipe,mUo,Zqe,Do,Yy,gUo,ld,hUo,uX,pUo,_Uo,bX,uUo,bUo,vUo,Ky,FUo,qpe,TUo,MUo,EUo,_t,Zy,CUo,Npe,wUo,AUo,id,yUo,jpe,LUo,xUo,vX,$Uo,kUo,SUo,gv,RUo,io,e8,PUo,Dpe,BUo,IUo,Da,qUo,Gpe,NUo,jUo,Ope,DUo,GUo,Vpe,OUo,VUo,XUo,Xpe,hv,zpe,zUo,WUo,FX,QUo,HUo,UUo,pv,JUo,Wpe,YUo,KUo,Qpe,ZUo,eJo,_v,eNe,dd,uv,Hpe,o8,oJo,Upe,rJo,oNe,Go,r8,tJo,cd,aJo,TX,nJo,sJo,MX,lJo,iJo,dJo,t8,cJo,Jpe,fJo,mJo,gJo,ut,a8,hJo,Ype,pJo,_Jo,fd,uJo,Kpe,bJo,vJo,EX,FJo,TJo,MJo,bv,EJo,co,n8,CJo,Zpe,wJo,AJo,Ga,yJo,e_e,LJo,xJo,o_e,$Jo,kJo,r_e,SJo,RJo,PJo,ke,vv,t_e,BJo,IJo,CX,qJo,NJo,jJo,Fv,a_e,DJo,GJo,wX,OJo,VJo,XJo,Tv,n_e,zJo,WJo,AX,QJo,HJo,UJo,Mv,s_e,JJo,YJo,yX,KJo,ZJo,eYo,Ev,l_e,oYo,rYo,LX,tYo,aYo,nYo,Cv,i_e,sYo,lYo,xX,iYo,dYo,cYo,wv,d_e,fYo,mYo,$X,gYo,hYo,pYo,Av,c_e,_Yo,uYo,kX,bYo,vYo,FYo,yv,f_e,TYo,MYo,SX,EYo,CYo,wYo,Lv,AYo,m_e,yYo,LYo,g_e,xYo,$Yo,xv,rNe,md,$v,h_e,s8,kYo,p_e,SYo,tNe,Oo,l8,RYo,gd,PYo,RX,BYo,IYo,PX,qYo,NYo,jYo,i8,DYo,__e,GYo,OYo,VYo,bt,d8,XYo,u_e,zYo,WYo,hd,QYo,b_e,HYo,UYo,BX,JYo,YYo,KYo,kv,ZYo,fo,c8,eKo,v_e,oKo,rKo,Oa,tKo,F_e,aKo,nKo,T_e,sKo,lKo,M_e,iKo,dKo,cKo,Kr,Sv,E_e,fKo,mKo,IX,gKo,hKo,pKo,Rv,C_e,_Ko,uKo,qX,bKo,vKo,FKo,Pv,w_e,TKo,MKo,NX,EKo,CKo,wKo,Bv,A_e,AKo,yKo,jX,LKo,xKo,$Ko,Iv,y_e,kKo,SKo,DX,RKo,PKo,BKo,qv,IKo,L_e,qKo,NKo,x_e,jKo,DKo,Nv,aNe,pd,jv,$_e,f8,GKo,k_e,OKo,nNe,Vo,m8,VKo,_d,XKo,GX,zKo,WKo,OX,QKo,HKo,UKo,g8,JKo,S_e,YKo,KKo,ZKo,vt,h8,eZo,R_e,oZo,rZo,ud,tZo,P_e,aZo,nZo,VX,sZo,lZo,iZo,Dv,dZo,mo,p8,cZo,B_e,fZo,mZo,Va,gZo,I_e,hZo,pZo,q_e,_Zo,uZo,N_e,bZo,vZo,FZo,Se,Gv,j_e,TZo,MZo,XX,EZo,CZo,wZo,Ov,D_e,AZo,yZo,zX,LZo,xZo,$Zo,Vv,G_e,kZo,SZo,WX,RZo,PZo,BZo,Xv,O_e,IZo,qZo,QX,NZo,jZo,DZo,zv,V_e,GZo,OZo,HX,VZo,XZo,zZo,Wv,X_e,WZo,QZo,UX,HZo,UZo,JZo,Qv,z_e,YZo,KZo,JX,ZZo,eer,oer,Hv,W_e,rer,ter,YX,aer,ner,ser,Uv,Q_e,ler,ier,KX,der,cer,fer,Jv,mer,H_e,ger,her,U_e,per,_er,Yv,sNe,bd,Kv,J_e,_8,uer,Y_e,ber,lNe,Xo,u8,ver,vd,Fer,ZX,Ter,Mer,ez,Eer,Cer,wer,b8,Aer,K_e,yer,Ler,xer,Ft,v8,$er,Z_e,ker,Ser,Fd,Rer,eue,Per,Ber,oz,Ier,qer,Ner,Zv,jer,go,F8,Der,oue,Ger,Oer,Xa,Ver,rue,Xer,zer,tue,Wer,Qer,aue,Her,Uer,Jer,T8,eF,nue,Yer,Ker,rz,Zer,eor,oor,oF,sue,ror,tor,tz,aor,nor,sor,rF,lor,lue,ior,dor,iue,cor,mor,tF,iNe,Td,aF,due,M8,gor,cue,hor,dNe,zo,E8,por,Md,_or,az,uor,bor,nz,vor,For,Tor,C8,Mor,fue,Eor,Cor,wor,Tt,w8,Aor,mue,yor,Lor,Ed,xor,gue,$or,kor,sz,Sor,Ror,Por,nF,Bor,ho,A8,Ior,hue,qor,Nor,za,jor,pue,Dor,Gor,_ue,Oor,Vor,uue,Xor,zor,Wor,Zr,sF,bue,Qor,Hor,lz,Uor,Jor,Yor,lF,vue,Kor,Zor,iz,err,orr,rrr,iF,Fue,trr,arr,dz,nrr,srr,lrr,dF,Tue,irr,drr,cz,crr,frr,mrr,cF,Mue,grr,hrr,fz,prr,_rr,urr,fF,brr,Eue,vrr,Frr,Cue,Trr,Mrr,mF,cNe,Cd,gF,wue,y8,Err,Aue,Crr,fNe,Wo,L8,wrr,wd,Arr,mz,yrr,Lrr,gz,xrr,$rr,krr,x8,Srr,yue,Rrr,Prr,Brr,Mt,$8,Irr,Lue,qrr,Nrr,Ad,jrr,xue,Drr,Grr,hz,Orr,Vrr,Xrr,hF,zrr,po,k8,Wrr,$ue,Qrr,Hrr,Wa,Urr,kue,Jrr,Yrr,Sue,Krr,Zrr,Rue,etr,otr,rtr,yd,pF,Pue,ttr,atr,pz,ntr,str,ltr,_F,Bue,itr,dtr,_z,ctr,ftr,mtr,uF,Iue,gtr,htr,uz,ptr,_tr,utr,bF,btr,que,vtr,Ftr,Nue,Ttr,Mtr,vF,mNe,Ld,FF,jue,S8,Etr,Due,Ctr,gNe,Qo,R8,wtr,xd,Atr,bz,ytr,Ltr,vz,xtr,$tr,ktr,P8,Str,Gue,Rtr,Ptr,Btr,Et,B8,Itr,Oue,qtr,Ntr,$d,jtr,Vue,Dtr,Gtr,Fz,Otr,Vtr,Xtr,TF,ztr,_o,I8,Wtr,Xue,Qtr,Htr,Qa,Utr,zue,Jtr,Ytr,Wue,Ktr,Ztr,Que,ear,oar,rar,q8,MF,Hue,tar,aar,Tz,nar,sar,lar,EF,Uue,iar,dar,Mz,car,far,mar,CF,gar,Jue,har,par,Yue,_ar,uar,wF,hNe,kd,AF,Kue,N8,bar,Zue,Far,pNe,Ho,j8,Tar,Sd,Mar,Ez,Ear,Car,Cz,war,Aar,yar,D8,Lar,e6e,xar,$ar,kar,Ct,G8,Sar,o6e,Rar,Par,Rd,Bar,r6e,Iar,qar,wz,Nar,jar,Dar,yF,Gar,uo,O8,Oar,t6e,Var,Xar,Ha,zar,a6e,War,Qar,n6e,Har,Uar,s6e,Jar,Yar,Kar,l6e,LF,i6e,Zar,enr,Az,onr,rnr,tnr,xF,anr,d6e,nnr,snr,c6e,lnr,inr,$F,_Ne,Pd,kF,f6e,V8,dnr,m6e,cnr,uNe,Uo,X8,fnr,Bd,mnr,yz,gnr,hnr,Lz,pnr,_nr,unr,z8,bnr,g6e,vnr,Fnr,Tnr,wt,W8,Mnr,h6e,Enr,Cnr,Id,wnr,p6e,Anr,ynr,xz,Lnr,xnr,$nr,SF,knr,bo,Q8,Snr,_6e,Rnr,Pnr,Ua,Bnr,u6e,Inr,qnr,b6e,Nnr,jnr,v6e,Dnr,Gnr,Onr,Ja,RF,F6e,Vnr,Xnr,$z,znr,Wnr,Qnr,PF,T6e,Hnr,Unr,kz,Jnr,Ynr,Knr,BF,M6e,Znr,esr,Sz,osr,rsr,tsr,IF,E6e,asr,nsr,Rz,ssr,lsr,isr,qF,dsr,C6e,csr,fsr,w6e,msr,gsr,NF,bNe,qd,jF,A6e,H8,hsr,y6e,psr,vNe,Jo,U8,_sr,Nd,usr,Pz,bsr,vsr,Bz,Fsr,Tsr,Msr,J8,Esr,L6e,Csr,wsr,Asr,At,Y8,ysr,x6e,Lsr,xsr,jd,$sr,$6e,ksr,Ssr,Iz,Rsr,Psr,Bsr,DF,Isr,vo,K8,qsr,k6e,Nsr,jsr,Ya,Dsr,S6e,Gsr,Osr,R6e,Vsr,Xsr,P6e,zsr,Wsr,Qsr,B6e,GF,I6e,Hsr,Usr,qz,Jsr,Ysr,Ksr,OF,Zsr,q6e,elr,olr,N6e,rlr,tlr,VF,FNe,Dd,XF,j6e,Z8,alr,D6e,nlr,TNe,Yo,eL,slr,Gd,llr,Nz,ilr,dlr,jz,clr,flr,mlr,oL,glr,G6e,hlr,plr,_lr,yt,rL,ulr,O6e,blr,vlr,Od,Flr,V6e,Tlr,Mlr,Dz,Elr,Clr,wlr,zF,Alr,wr,tL,ylr,X6e,Llr,xlr,Ka,$lr,z6e,klr,Slr,W6e,Rlr,Plr,Q6e,Blr,Ilr,qlr,N,WF,H6e,Nlr,jlr,Gz,Dlr,Glr,Olr,QF,U6e,Vlr,Xlr,Oz,zlr,Wlr,Qlr,HF,J6e,Hlr,Ulr,Vz,Jlr,Ylr,Klr,UF,Y6e,Zlr,eir,Xz,oir,rir,tir,JF,K6e,air,nir,zz,sir,lir,iir,YF,Z6e,dir,cir,Wz,fir,mir,gir,KF,e1e,hir,pir,Qz,_ir,uir,bir,ZF,o1e,vir,Fir,Hz,Tir,Mir,Eir,eT,r1e,Cir,wir,Uz,Air,yir,Lir,oT,t1e,xir,$ir,Jz,kir,Sir,Rir,rT,a1e,Pir,Bir,Yz,Iir,qir,Nir,tT,n1e,jir,Dir,Kz,Gir,Oir,Vir,aT,s1e,Xir,zir,Zz,Wir,Qir,Hir,nT,l1e,Uir,Jir,eW,Yir,Kir,Zir,sT,i1e,edr,odr,oW,rdr,tdr,adr,lT,d1e,ndr,sdr,rW,ldr,idr,ddr,iT,c1e,cdr,fdr,tW,mdr,gdr,hdr,Bs,f1e,pdr,_dr,aW,udr,bdr,nW,vdr,Fdr,Tdr,dT,m1e,Mdr,Edr,sW,Cdr,wdr,Adr,cT,g1e,ydr,Ldr,lW,xdr,$dr,kdr,fT,h1e,Sdr,Rdr,iW,Pdr,Bdr,Idr,mT,p1e,qdr,Ndr,dW,jdr,Ddr,Gdr,gT,_1e,Odr,Vdr,cW,Xdr,zdr,Wdr,hT,u1e,Qdr,Hdr,fW,Udr,Jdr,Ydr,pT,b1e,Kdr,Zdr,mW,ecr,ocr,rcr,_T,v1e,tcr,acr,gW,ncr,scr,lcr,uT,F1e,icr,dcr,hW,ccr,fcr,mcr,bT,T1e,gcr,hcr,pW,pcr,_cr,ucr,vT,M1e,bcr,vcr,_W,Fcr,Tcr,Mcr,FT,E1e,Ecr,Ccr,uW,wcr,Acr,ycr,TT,C1e,Lcr,xcr,bW,$cr,kcr,Scr,MT,w1e,Rcr,Pcr,vW,Bcr,Icr,qcr,ET,A1e,Ncr,jcr,FW,Dcr,Gcr,Ocr,CT,y1e,Vcr,Xcr,TW,zcr,Wcr,Qcr,wT,L1e,Hcr,Ucr,MW,Jcr,Ycr,Kcr,AT,x1e,Zcr,efr,EW,ofr,rfr,tfr,yT,$1e,afr,nfr,CW,sfr,lfr,ifr,LT,k1e,dfr,cfr,wW,ffr,mfr,gfr,xT,S1e,hfr,pfr,AW,_fr,ufr,bfr,$T,R1e,vfr,Ffr,yW,Tfr,Mfr,Efr,kT,P1e,Cfr,wfr,LW,Afr,yfr,Lfr,ST,B1e,xfr,$fr,xW,kfr,Sfr,Rfr,RT,I1e,Pfr,Bfr,$W,Ifr,qfr,Nfr,PT,q1e,jfr,Dfr,kW,Gfr,Ofr,Vfr,BT,N1e,Xfr,zfr,SW,Wfr,Qfr,Hfr,IT,j1e,Ufr,Jfr,RW,Yfr,Kfr,Zfr,qT,MNe,Vd,NT,D1e,aL,emr,G1e,omr,ENe,Ko,nL,rmr,Xd,tmr,PW,amr,nmr,BW,smr,lmr,imr,sL,dmr,O1e,cmr,fmr,mmr,Lt,lL,gmr,V1e,hmr,pmr,zd,_mr,X1e,umr,bmr,IW,vmr,Fmr,Tmr,jT,Mmr,Ar,iL,Emr,z1e,Cmr,wmr,Za,Amr,W1e,ymr,Lmr,Q1e,xmr,$mr,H1e,kmr,Smr,Rmr,se,DT,U1e,Pmr,Bmr,qW,Imr,qmr,Nmr,GT,J1e,jmr,Dmr,NW,Gmr,Omr,Vmr,OT,Y1e,Xmr,zmr,jW,Wmr,Qmr,Hmr,VT,K1e,Umr,Jmr,DW,Ymr,Kmr,Zmr,XT,Z1e,egr,ogr,GW,rgr,tgr,agr,zT,ebe,ngr,sgr,OW,lgr,igr,dgr,WT,obe,cgr,fgr,VW,mgr,ggr,hgr,QT,rbe,pgr,_gr,XW,ugr,bgr,vgr,HT,tbe,Fgr,Tgr,zW,Mgr,Egr,Cgr,UT,abe,wgr,Agr,WW,ygr,Lgr,xgr,JT,nbe,$gr,kgr,QW,Sgr,Rgr,Pgr,YT,sbe,Bgr,Igr,HW,qgr,Ngr,jgr,KT,lbe,Dgr,Ggr,UW,Ogr,Vgr,Xgr,ZT,ibe,zgr,Wgr,JW,Qgr,Hgr,Ugr,e9,dbe,Jgr,Ygr,YW,Kgr,Zgr,ehr,o9,cbe,ohr,rhr,KW,thr,ahr,nhr,r9,fbe,shr,lhr,ZW,ihr,dhr,chr,t9,mbe,fhr,mhr,eQ,ghr,hhr,phr,a9,gbe,_hr,uhr,oQ,bhr,vhr,Fhr,n9,hbe,Thr,Mhr,rQ,Ehr,Chr,whr,s9,pbe,Ahr,yhr,tQ,Lhr,xhr,$hr,l9,_be,khr,Shr,aQ,Rhr,Phr,Bhr,i9,ube,Ihr,qhr,nQ,Nhr,jhr,Dhr,d9,CNe,Wd,c9,bbe,dL,Ghr,vbe,Ohr,wNe,Zo,cL,Vhr,Qd,Xhr,sQ,zhr,Whr,lQ,Qhr,Hhr,Uhr,fL,Jhr,Fbe,Yhr,Khr,Zhr,xt,mL,epr,Tbe,opr,rpr,Hd,tpr,Mbe,apr,npr,iQ,spr,lpr,ipr,f9,dpr,yr,gL,cpr,Ebe,fpr,mpr,en,gpr,Cbe,hpr,ppr,wbe,_pr,upr,Abe,bpr,vpr,Fpr,Me,m9,ybe,Tpr,Mpr,dQ,Epr,Cpr,wpr,g9,Lbe,Apr,ypr,cQ,Lpr,xpr,$pr,h9,xbe,kpr,Spr,fQ,Rpr,Ppr,Bpr,p9,$be,Ipr,qpr,mQ,Npr,jpr,Dpr,_9,kbe,Gpr,Opr,gQ,Vpr,Xpr,zpr,u9,Sbe,Wpr,Qpr,hQ,Hpr,Upr,Jpr,b9,Rbe,Ypr,Kpr,pQ,Zpr,e_r,o_r,v9,Pbe,r_r,t_r,_Q,a_r,n_r,s_r,F9,Bbe,l_r,i_r,uQ,d_r,c_r,f_r,T9,Ibe,m_r,g_r,bQ,h_r,p_r,__r,M9,qbe,u_r,b_r,vQ,v_r,F_r,T_r,E9,Nbe,M_r,E_r,FQ,C_r,w_r,A_r,C9,ANe,Ud,w9,jbe,hL,y_r,Dbe,L_r,yNe,er,pL,x_r,Jd,$_r,TQ,k_r,S_r,MQ,R_r,P_r,B_r,_L,I_r,Gbe,q_r,N_r,j_r,$t,uL,D_r,Obe,G_r,O_r,Yd,V_r,Vbe,X_r,z_r,EQ,W_r,Q_r,H_r,A9,U_r,Lr,bL,J_r,Xbe,Y_r,K_r,on,Z_r,zbe,eur,our,Wbe,rur,tur,Qbe,aur,nur,sur,rn,y9,Hbe,lur,iur,CQ,dur,cur,fur,L9,Ube,mur,gur,wQ,hur,pur,_ur,x9,Jbe,uur,bur,AQ,vur,Fur,Tur,$9,Ybe,Mur,Eur,yQ,Cur,wur,Aur,k9,LNe,Kd,S9,Kbe,vL,yur,Zbe,Lur,xNe,or,FL,xur,Zd,$ur,LQ,kur,Sur,xQ,Rur,Pur,Bur,TL,Iur,e2e,qur,Nur,jur,kt,ML,Dur,o2e,Gur,Our,ec,Vur,r2e,Xur,zur,$Q,Wur,Qur,Hur,R9,Uur,xr,EL,Jur,t2e,Yur,Kur,tn,Zur,a2e,e6r,o6r,n2e,r6r,t6r,s2e,a6r,n6r,s6r,ie,P9,l2e,l6r,i6r,kQ,d6r,c6r,f6r,B9,i2e,m6r,g6r,SQ,h6r,p6r,_6r,I9,d2e,u6r,b6r,RQ,v6r,F6r,T6r,q9,c2e,M6r,E6r,PQ,C6r,w6r,A6r,N9,f2e,y6r,L6r,BQ,x6r,$6r,k6r,j9,m2e,S6r,R6r,IQ,P6r,B6r,I6r,D9,g2e,q6r,N6r,qQ,j6r,D6r,G6r,G9,h2e,O6r,V6r,NQ,X6r,z6r,W6r,O9,p2e,Q6r,H6r,jQ,U6r,J6r,Y6r,V9,_2e,K6r,Z6r,DQ,e1r,o1r,r1r,X9,u2e,t1r,a1r,GQ,n1r,s1r,l1r,z9,b2e,i1r,d1r,OQ,c1r,f1r,m1r,W9,v2e,g1r,h1r,VQ,p1r,_1r,u1r,Q9,F2e,b1r,v1r,XQ,F1r,T1r,M1r,H9,T2e,E1r,C1r,zQ,w1r,A1r,y1r,U9,M2e,L1r,x1r,WQ,$1r,k1r,S1r,J9,E2e,R1r,P1r,QQ,B1r,I1r,q1r,Y9,C2e,N1r,j1r,HQ,D1r,G1r,O1r,K9,w2e,V1r,X1r,UQ,z1r,W1r,Q1r,Z9,A2e,H1r,U1r,JQ,J1r,Y1r,K1r,eM,$Ne,oc,oM,y2e,CL,Z1r,L2e,ebr,kNe,rr,wL,obr,rc,rbr,YQ,tbr,abr,KQ,nbr,sbr,lbr,AL,ibr,x2e,dbr,cbr,fbr,St,yL,mbr,$2e,gbr,hbr,tc,pbr,k2e,_br,ubr,ZQ,bbr,vbr,Fbr,rM,Tbr,$r,LL,Mbr,S2e,Ebr,Cbr,an,wbr,R2e,Abr,ybr,P2e,Lbr,xbr,B2e,$br,kbr,Sbr,ye,tM,I2e,Rbr,Pbr,eH,Bbr,Ibr,qbr,aM,q2e,Nbr,jbr,oH,Dbr,Gbr,Obr,nM,N2e,Vbr,Xbr,rH,zbr,Wbr,Qbr,sM,j2e,Hbr,Ubr,tH,Jbr,Ybr,Kbr,lM,D2e,Zbr,e2r,aH,o2r,r2r,t2r,iM,G2e,a2r,n2r,nH,s2r,l2r,i2r,dM,O2e,d2r,c2r,sH,f2r,m2r,g2r,cM,V2e,h2r,p2r,lH,_2r,u2r,b2r,fM,X2e,v2r,F2r,iH,T2r,M2r,E2r,mM,z2e,C2r,w2r,dH,A2r,y2r,L2r,gM,SNe,ac,hM,W2e,xL,x2r,Q2e,$2r,RNe,tr,$L,k2r,nc,S2r,cH,R2r,P2r,fH,B2r,I2r,q2r,kL,N2r,H2e,j2r,D2r,G2r,Rt,SL,O2r,U2e,V2r,X2r,sc,z2r,J2e,W2r,Q2r,mH,H2r,U2r,J2r,pM,Y2r,kr,RL,K2r,Y2e,Z2r,e5r,nn,o5r,K2e,r5r,t5r,Z2e,a5r,n5r,e5e,s5r,l5r,i5r,ee,_M,o5e,d5r,c5r,gH,f5r,m5r,g5r,uM,r5e,h5r,p5r,hH,_5r,u5r,b5r,bM,t5e,v5r,F5r,pH,T5r,M5r,E5r,vM,a5e,C5r,w5r,_H,A5r,y5r,L5r,FM,n5e,x5r,$5r,uH,k5r,S5r,R5r,TM,s5e,P5r,B5r,bH,I5r,q5r,N5r,MM,l5e,j5r,D5r,vH,G5r,O5r,V5r,EM,i5e,X5r,z5r,FH,W5r,Q5r,H5r,CM,d5e,U5r,J5r,TH,Y5r,K5r,Z5r,wM,c5e,evr,ovr,MH,rvr,tvr,avr,AM,f5e,nvr,svr,EH,lvr,ivr,dvr,yM,m5e,cvr,fvr,CH,mvr,gvr,hvr,LM,g5e,pvr,_vr,wH,uvr,bvr,vvr,xM,h5e,Fvr,Tvr,AH,Mvr,Evr,Cvr,$M,p5e,wvr,Avr,yH,yvr,Lvr,xvr,kM,_5e,$vr,kvr,LH,Svr,Rvr,Pvr,SM,u5e,Bvr,Ivr,xH,qvr,Nvr,jvr,RM,b5e,Dvr,Gvr,$H,Ovr,Vvr,Xvr,PM,v5e,zvr,Wvr,kH,Qvr,Hvr,Uvr,BM,F5e,Jvr,Yvr,SH,Kvr,Zvr,eFr,IM,T5e,oFr,rFr,RH,tFr,aFr,nFr,qM,M5e,sFr,lFr,PH,iFr,dFr,cFr,NM,E5e,fFr,mFr,BH,gFr,hFr,pFr,jM,C5e,_Fr,uFr,IH,bFr,vFr,FFr,DM,w5e,TFr,MFr,qH,EFr,CFr,wFr,GM,A5e,AFr,yFr,NH,LFr,xFr,$Fr,OM,PNe,lc,VM,y5e,PL,kFr,L5e,SFr,BNe,ar,BL,RFr,ic,PFr,jH,BFr,IFr,DH,qFr,NFr,jFr,IL,DFr,x5e,GFr,OFr,VFr,Pt,qL,XFr,$5e,zFr,WFr,dc,QFr,k5e,HFr,UFr,GH,JFr,YFr,KFr,XM,ZFr,Sr,NL,eTr,S5e,oTr,rTr,sn,tTr,R5e,aTr,nTr,P5e,sTr,lTr,B5e,iTr,dTr,cTr,he,zM,I5e,fTr,mTr,OH,gTr,hTr,pTr,WM,q5e,_Tr,uTr,VH,bTr,vTr,FTr,QM,N5e,TTr,MTr,XH,ETr,CTr,wTr,HM,j5e,ATr,yTr,zH,LTr,xTr,$Tr,UM,D5e,kTr,STr,WH,RTr,PTr,BTr,JM,G5e,ITr,qTr,QH,NTr,jTr,DTr,YM,O5e,GTr,OTr,HH,VTr,XTr,zTr,KM,V5e,WTr,QTr,UH,HTr,UTr,JTr,ZM,X5e,YTr,KTr,JH,ZTr,e9r,o9r,e4,z5e,r9r,t9r,YH,a9r,n9r,s9r,o4,W5e,l9r,i9r,KH,d9r,c9r,f9r,r4,Q5e,m9r,g9r,ZH,h9r,p9r,_9r,t4,H5e,u9r,b9r,eU,v9r,F9r,T9r,a4,U5e,M9r,E9r,oU,C9r,w9r,A9r,n4,J5e,y9r,L9r,rU,x9r,$9r,k9r,s4,Y5e,S9r,R9r,tU,P9r,B9r,I9r,l4,K5e,q9r,N9r,aU,j9r,D9r,G9r,i4,INe,cc,d4,Z5e,jL,O9r,eve,V9r,qNe,nr,DL,X9r,fc,z9r,nU,W9r,Q9r,sU,H9r,U9r,J9r,GL,Y9r,ove,K9r,Z9r,eMr,Bt,OL,oMr,rve,rMr,tMr,mc,aMr,tve,nMr,sMr,lU,lMr,iMr,dMr,c4,cMr,Rr,VL,fMr,ave,mMr,gMr,ln,hMr,nve,pMr,_Mr,sve,uMr,bMr,lve,vMr,FMr,TMr,XL,f4,ive,MMr,EMr,iU,CMr,wMr,AMr,m4,dve,yMr,LMr,dU,xMr,$Mr,kMr,g4,NNe,gc,h4,cve,zL,SMr,fve,RMr,jNe,sr,WL,PMr,hc,BMr,cU,IMr,qMr,fU,NMr,jMr,DMr,QL,GMr,mve,OMr,VMr,XMr,It,HL,zMr,gve,WMr,QMr,pc,HMr,hve,UMr,JMr,mU,YMr,KMr,ZMr,p4,e4r,Pr,UL,o4r,pve,r4r,t4r,dn,a4r,_ve,n4r,s4r,uve,l4r,i4r,bve,d4r,c4r,f4r,vve,_4,Fve,m4r,g4r,gU,h4r,p4r,_4r,u4,DNe,_c,b4,Tve,JL,u4r,Mve,b4r,GNe,lr,YL,v4r,uc,F4r,hU,T4r,M4r,pU,E4r,C4r,w4r,KL,A4r,Eve,y4r,L4r,x4r,qt,ZL,$4r,Cve,k4r,S4r,bc,R4r,wve,P4r,B4r,_U,I4r,q4r,N4r,v4,j4r,Br,e7,D4r,Ave,G4r,O4r,cn,V4r,yve,X4r,z4r,Lve,W4r,Q4r,xve,H4r,U4r,J4r,de,F4,$ve,Y4r,K4r,uU,Z4r,eEr,oEr,T4,kve,rEr,tEr,bU,aEr,nEr,sEr,M4,Sve,lEr,iEr,vU,dEr,cEr,fEr,E4,Rve,mEr,gEr,FU,hEr,pEr,_Er,C4,Pve,uEr,bEr,TU,vEr,FEr,TEr,w4,Bve,MEr,EEr,MU,CEr,wEr,AEr,A4,Ive,yEr,LEr,EU,xEr,$Er,kEr,y4,qve,SEr,REr,CU,PEr,BEr,IEr,L4,Nve,qEr,NEr,wU,jEr,DEr,GEr,x4,jve,OEr,VEr,AU,XEr,zEr,WEr,$4,Dve,QEr,HEr,yU,UEr,JEr,YEr,k4,Gve,KEr,ZEr,LU,eCr,oCr,rCr,S4,Ove,tCr,aCr,xU,nCr,sCr,lCr,R4,Vve,iCr,dCr,$U,cCr,fCr,mCr,P4,Xve,gCr,hCr,kU,pCr,_Cr,uCr,B4,zve,bCr,vCr,SU,FCr,TCr,MCr,I4,Wve,ECr,CCr,RU,wCr,ACr,yCr,q4,Qve,LCr,xCr,PU,$Cr,kCr,SCr,N4,Hve,RCr,PCr,BU,BCr,ICr,qCr,j4,Uve,NCr,jCr,IU,DCr,GCr,OCr,D4,ONe,vc,G4,Jve,o7,VCr,Yve,XCr,VNe,ir,r7,zCr,Fc,WCr,qU,QCr,HCr,NU,UCr,JCr,YCr,t7,KCr,Kve,ZCr,e3r,o3r,Nt,a7,r3r,Zve,t3r,a3r,Tc,n3r,eFe,s3r,l3r,jU,i3r,d3r,c3r,O4,f3r,Ir,n7,m3r,oFe,g3r,h3r,fn,p3r,rFe,_3r,u3r,tFe,b3r,v3r,aFe,F3r,T3r,M3r,ce,V4,nFe,E3r,C3r,DU,w3r,A3r,y3r,X4,sFe,L3r,x3r,GU,$3r,k3r,S3r,z4,lFe,R3r,P3r,OU,B3r,I3r,q3r,W4,iFe,N3r,j3r,VU,D3r,G3r,O3r,Q4,dFe,V3r,X3r,XU,z3r,W3r,Q3r,H4,cFe,H3r,U3r,zU,J3r,Y3r,K3r,U4,fFe,Z3r,ewr,WU,owr,rwr,twr,J4,mFe,awr,nwr,QU,swr,lwr,iwr,Y4,gFe,dwr,cwr,HU,fwr,mwr,gwr,K4,hFe,hwr,pwr,UU,_wr,uwr,bwr,Z4,pFe,vwr,Fwr,JU,Twr,Mwr,Ewr,eE,_Fe,Cwr,wwr,YU,Awr,ywr,Lwr,oE,uFe,xwr,$wr,KU,kwr,Swr,Rwr,rE,bFe,Pwr,Bwr,ZU,Iwr,qwr,Nwr,tE,vFe,jwr,Dwr,eJ,Gwr,Owr,Vwr,aE,FFe,Xwr,zwr,oJ,Wwr,Qwr,Hwr,nE,TFe,Uwr,Jwr,rJ,Ywr,Kwr,Zwr,sE,MFe,e0r,o0r,tJ,r0r,t0r,a0r,lE,EFe,n0r,s0r,aJ,l0r,i0r,d0r,iE,CFe,c0r,f0r,nJ,m0r,g0r,h0r,dE,XNe,Mc,cE,wFe,s7,p0r,AFe,_0r,zNe,dr,l7,u0r,Ec,b0r,sJ,v0r,F0r,lJ,T0r,M0r,E0r,i7,C0r,yFe,w0r,A0r,y0r,jt,d7,L0r,LFe,x0r,$0r,Cc,k0r,xFe,S0r,R0r,iJ,P0r,B0r,I0r,fE,q0r,qr,c7,N0r,$Fe,j0r,D0r,mn,G0r,kFe,O0r,V0r,SFe,X0r,z0r,RFe,W0r,Q0r,H0r,PFe,mE,BFe,U0r,J0r,dJ,Y0r,K0r,Z0r,gE,WNe,wc,hE,IFe,f7,eAr,qFe,oAr,QNe,cr,m7,rAr,Ac,tAr,cJ,aAr,nAr,fJ,sAr,lAr,iAr,g7,dAr,NFe,cAr,fAr,mAr,Dt,h7,gAr,jFe,hAr,pAr,yc,_Ar,DFe,uAr,bAr,mJ,vAr,FAr,TAr,pE,MAr,Nr,p7,EAr,GFe,CAr,wAr,gn,AAr,OFe,yAr,LAr,VFe,xAr,$Ar,XFe,kAr,SAr,RAr,zFe,_E,WFe,PAr,BAr,gJ,IAr,qAr,NAr,uE,HNe,Lc,bE,QFe,_7,jAr,HFe,DAr,UNe,fr,u7,GAr,xc,OAr,hJ,VAr,XAr,pJ,zAr,WAr,QAr,b7,HAr,UFe,UAr,JAr,YAr,Gt,v7,KAr,JFe,ZAr,eyr,$c,oyr,YFe,ryr,tyr,_J,ayr,nyr,syr,vE,lyr,jr,F7,iyr,KFe,dyr,cyr,hn,fyr,ZFe,myr,gyr,eTe,hyr,pyr,oTe,_yr,uyr,byr,te,FE,rTe,vyr,Fyr,uJ,Tyr,Myr,Eyr,TE,tTe,Cyr,wyr,bJ,Ayr,yyr,Lyr,ME,aTe,xyr,$yr,vJ,kyr,Syr,Ryr,EE,nTe,Pyr,Byr,FJ,Iyr,qyr,Nyr,CE,sTe,jyr,Dyr,TJ,Gyr,Oyr,Vyr,wE,lTe,Xyr,zyr,MJ,Wyr,Qyr,Hyr,AE,iTe,Uyr,Jyr,EJ,Yyr,Kyr,Zyr,yE,dTe,e8r,o8r,CJ,r8r,t8r,a8r,LE,cTe,n8r,s8r,wJ,l8r,i8r,d8r,xE,fTe,c8r,f8r,AJ,m8r,g8r,h8r,$E,mTe,p8r,_8r,yJ,u8r,b8r,v8r,kE,gTe,F8r,T8r,LJ,M8r,E8r,C8r,SE,hTe,w8r,A8r,xJ,y8r,L8r,x8r,RE,pTe,$8r,k8r,$J,S8r,R8r,P8r,PE,_Te,B8r,I8r,kJ,q8r,N8r,j8r,BE,uTe,D8r,G8r,SJ,O8r,V8r,X8r,IE,bTe,z8r,W8r,RJ,Q8r,H8r,U8r,qE,vTe,J8r,Y8r,PJ,K8r,Z8r,eLr,NE,FTe,oLr,rLr,BJ,tLr,aLr,nLr,jE,TTe,sLr,lLr,IJ,iLr,dLr,cLr,DE,MTe,fLr,mLr,qJ,gLr,hLr,pLr,GE,ETe,_Lr,uLr,NJ,bLr,vLr,FLr,OE,CTe,TLr,MLr,jJ,ELr,CLr,wLr,VE,wTe,ALr,yLr,DJ,LLr,xLr,$Lr,XE,ATe,kLr,SLr,GJ,RLr,PLr,BLr,zE,JNe,kc,WE,yTe,T7,ILr,LTe,qLr,YNe,mr,M7,NLr,Sc,jLr,OJ,DLr,GLr,VJ,OLr,VLr,XLr,E7,zLr,xTe,WLr,QLr,HLr,Ot,C7,ULr,$Te,JLr,YLr,Rc,KLr,kTe,ZLr,e7r,XJ,o7r,r7r,t7r,QE,a7r,Dr,w7,n7r,STe,s7r,l7r,pn,i7r,RTe,d7r,c7r,PTe,f7r,m7r,BTe,g7r,h7r,p7r,Re,HE,ITe,_7r,u7r,zJ,b7r,v7r,F7r,UE,qTe,T7r,M7r,WJ,E7r,C7r,w7r,JE,NTe,A7r,y7r,QJ,L7r,x7r,$7r,YE,jTe,k7r,S7r,HJ,R7r,P7r,B7r,KE,DTe,I7r,q7r,UJ,N7r,j7r,D7r,ZE,GTe,G7r,O7r,JJ,V7r,X7r,z7r,eC,OTe,W7r,Q7r,YJ,H7r,U7r,J7r,oC,VTe,Y7r,K7r,KJ,Z7r,exr,oxr,rC,XTe,rxr,txr,ZJ,axr,nxr,sxr,tC,KNe,Pc,aC,zTe,A7,lxr,WTe,ixr,ZNe,gr,y7,dxr,Bc,cxr,eY,fxr,mxr,oY,gxr,hxr,pxr,L7,_xr,QTe,uxr,bxr,vxr,Vt,x7,Fxr,HTe,Txr,Mxr,Ic,Exr,UTe,Cxr,wxr,rY,Axr,yxr,Lxr,nC,xxr,Gr,$7,$xr,JTe,kxr,Sxr,_n,Rxr,YTe,Pxr,Bxr,KTe,Ixr,qxr,ZTe,Nxr,jxr,Dxr,Ee,sC,e9e,Gxr,Oxr,tY,Vxr,Xxr,zxr,lC,o9e,Wxr,Qxr,aY,Hxr,Uxr,Jxr,iC,r9e,Yxr,Kxr,nY,Zxr,e$r,o$r,dC,t9e,r$r,t$r,sY,a$r,n$r,s$r,cC,a9e,l$r,i$r,lY,d$r,c$r,f$r,fC,n9e,m$r,g$r,iY,h$r,p$r,_$r,mC,s9e,u$r,b$r,dY,v$r,F$r,T$r,gC,l9e,M$r,E$r,cY,C$r,w$r,A$r,hC,i9e,y$r,L$r,fY,x$r,$$r,k$r,pC,d9e,S$r,R$r,mY,P$r,B$r,I$r,_C,c9e,q$r,N$r,gY,j$r,D$r,G$r,uC,f9e,O$r,V$r,hY,X$r,z$r,W$r,bC,eje,qc,vC,m9e,k7,Q$r,g9e,H$r,oje,hr,S7,U$r,Nc,J$r,pY,Y$r,K$r,_Y,Z$r,ekr,okr,R7,rkr,h9e,tkr,akr,nkr,Xt,P7,skr,p9e,lkr,ikr,jc,dkr,_9e,ckr,fkr,uY,mkr,gkr,hkr,FC,pkr,Or,B7,_kr,u9e,ukr,bkr,un,vkr,b9e,Fkr,Tkr,v9e,Mkr,Ekr,F9e,Ckr,wkr,Akr,Le,TC,T9e,ykr,Lkr,bY,xkr,$kr,kkr,MC,M9e,Skr,Rkr,vY,Pkr,Bkr,Ikr,EC,E9e,qkr,Nkr,FY,jkr,Dkr,Gkr,CC,C9e,Okr,Vkr,TY,Xkr,zkr,Wkr,wC,w9e,Qkr,Hkr,MY,Ukr,Jkr,Ykr,AC,A9e,Kkr,Zkr,EY,eSr,oSr,rSr,yC,y9e,tSr,aSr,CY,nSr,sSr,lSr,LC,L9e,iSr,dSr,wY,cSr,fSr,mSr,xC,x9e,gSr,hSr,AY,pSr,_Sr,uSr,$C,$9e,bSr,vSr,yY,FSr,TSr,MSr,kC,rje,Dc,SC,k9e,I7,ESr,S9e,CSr,tje,pr,q7,wSr,Gc,ASr,LY,ySr,LSr,xY,xSr,$Sr,kSr,N7,SSr,R9e,RSr,PSr,BSr,zt,j7,ISr,P9e,qSr,NSr,Oc,jSr,B9e,DSr,GSr,$Y,OSr,VSr,XSr,RC,zSr,Vr,D7,WSr,I9e,QSr,HSr,bn,USr,q9e,JSr,YSr,N9e,KSr,ZSr,j9e,eRr,oRr,rRr,Pe,PC,D9e,tRr,aRr,kY,nRr,sRr,lRr,BC,G9e,iRr,dRr,SY,cRr,fRr,mRr,IC,O9e,gRr,hRr,RY,pRr,_Rr,uRr,qC,V9e,bRr,vRr,PY,FRr,TRr,MRr,NC,X9e,ERr,CRr,BY,wRr,ARr,yRr,jC,z9e,LRr,xRr,IY,$Rr,kRr,SRr,DC,W9e,RRr,PRr,qY,BRr,IRr,qRr,GC,Q9e,NRr,jRr,NY,DRr,GRr,ORr,OC,H9e,VRr,XRr,jY,zRr,WRr,QRr,VC,aje,Vc,XC,U9e,G7,HRr,J9e,URr,nje,_r,O7,JRr,Xc,YRr,DY,KRr,ZRr,GY,ePr,oPr,rPr,V7,tPr,Y9e,aPr,nPr,sPr,Wt,X7,lPr,K9e,iPr,dPr,zc,cPr,Z9e,fPr,mPr,OY,gPr,hPr,pPr,zC,_Pr,Xr,z7,uPr,eMe,bPr,vPr,vn,FPr,oMe,TPr,MPr,rMe,EPr,CPr,tMe,wPr,APr,yPr,xe,WC,aMe,LPr,xPr,VY,$Pr,kPr,SPr,QC,nMe,RPr,PPr,XY,BPr,IPr,qPr,HC,sMe,NPr,jPr,zY,DPr,GPr,OPr,UC,lMe,VPr,XPr,WY,zPr,WPr,QPr,JC,iMe,HPr,UPr,QY,JPr,YPr,KPr,YC,dMe,ZPr,eBr,HY,oBr,rBr,tBr,KC,cMe,aBr,nBr,UY,sBr,lBr,iBr,ZC,fMe,dBr,cBr,JY,fBr,mBr,gBr,e3,mMe,hBr,pBr,YY,_Br,uBr,bBr,o3,gMe,vBr,FBr,KY,TBr,MBr,EBr,r3,sje,Wc,t3,hMe,W7,CBr,pMe,wBr,lje,ur,Q7,ABr,Qc,yBr,ZY,LBr,xBr,eK,$Br,kBr,SBr,H7,RBr,_Me,PBr,BBr,IBr,Qt,U7,qBr,uMe,NBr,jBr,Hc,DBr,bMe,GBr,OBr,oK,VBr,XBr,zBr,a3,WBr,zr,J7,QBr,vMe,HBr,UBr,Fn,JBr,FMe,YBr,KBr,TMe,ZBr,eIr,MMe,oIr,rIr,tIr,$e,n3,EMe,aIr,nIr,rK,sIr,lIr,iIr,s3,CMe,dIr,cIr,tK,fIr,mIr,gIr,l3,wMe,hIr,pIr,aK,_Ir,uIr,bIr,i3,AMe,vIr,FIr,nK,TIr,MIr,EIr,d3,yMe,CIr,wIr,sK,AIr,yIr,LIr,c3,LMe,xIr,$Ir,lK,kIr,SIr,RIr,f3,xMe,PIr,BIr,iK,IIr,qIr,NIr,m3,$Me,jIr,DIr,dK,GIr,OIr,VIr,g3,kMe,XIr,zIr,cK,WIr,QIr,HIr,h3,SMe,UIr,JIr,fK,YIr,KIr,ZIr,p3,ije,Uc,_3,RMe,Y7,eqr,PMe,oqr,dje,br,K7,rqr,Jc,tqr,mK,aqr,nqr,gK,sqr,lqr,iqr,Z7,dqr,BMe,cqr,fqr,mqr,Ht,ex,gqr,IMe,hqr,pqr,Yc,_qr,qMe,uqr,bqr,hK,vqr,Fqr,Tqr,u3,Mqr,Wr,ox,Eqr,NMe,Cqr,wqr,Tn,Aqr,jMe,yqr,Lqr,DMe,xqr,$qr,GMe,kqr,Sqr,Rqr,De,b3,OMe,Pqr,Bqr,pK,Iqr,qqr,Nqr,v3,VMe,jqr,Dqr,_K,Gqr,Oqr,Vqr,F3,XMe,Xqr,zqr,uK,Wqr,Qqr,Hqr,T3,zMe,Uqr,Jqr,bK,Yqr,Kqr,Zqr,M3,WMe,eNr,oNr,vK,rNr,tNr,aNr,E3,QMe,nNr,sNr,FK,lNr,iNr,dNr,C3,HMe,cNr,fNr,TK,mNr,gNr,hNr,w3,UMe,pNr,_Nr,MK,uNr,bNr,vNr,A3,cje,Kc,y3,JMe,rx,FNr,YMe,TNr,fje,vr,tx,MNr,Zc,ENr,EK,CNr,wNr,CK,ANr,yNr,LNr,ax,xNr,KMe,$Nr,kNr,SNr,Ut,nx,RNr,ZMe,PNr,BNr,ef,INr,e4e,qNr,NNr,wK,jNr,DNr,GNr,L3,ONr,Qr,sx,VNr,o4e,XNr,zNr,Mn,WNr,r4e,QNr,HNr,t4e,UNr,JNr,a4e,YNr,KNr,ZNr,Ge,x3,n4e,ejr,ojr,AK,rjr,tjr,ajr,$3,s4e,njr,sjr,yK,ljr,ijr,djr,k3,l4e,cjr,fjr,LK,mjr,gjr,hjr,S3,i4e,pjr,_jr,xK,ujr,bjr,vjr,R3,d4e,Fjr,Tjr,$K,Mjr,Ejr,Cjr,P3,c4e,wjr,Ajr,kK,yjr,Ljr,xjr,B3,f4e,$jr,kjr,SK,Sjr,Rjr,Pjr,I3,m4e,Bjr,Ijr,RK,qjr,Njr,jjr,q3,mje,of,N3,g4e,lx,Djr,h4e,Gjr,gje,Fr,ix,Ojr,rf,Vjr,PK,Xjr,zjr,BK,Wjr,Qjr,Hjr,dx,Ujr,p4e,Jjr,Yjr,Kjr,Jt,cx,Zjr,_4e,eDr,oDr,tf,rDr,u4e,tDr,aDr,IK,nDr,sDr,lDr,j3,iDr,Hr,fx,dDr,b4e,cDr,fDr,En,mDr,v4e,gDr,hDr,F4e,pDr,_Dr,T4e,uDr,bDr,vDr,M4e,D3,E4e,FDr,TDr,qK,MDr,EDr,CDr,G3,hje,af,O3,C4e,mx,wDr,w4e,ADr,pje,Tr,gx,yDr,nf,LDr,NK,xDr,$Dr,jK,kDr,SDr,RDr,hx,PDr,A4e,BDr,IDr,qDr,Yt,px,NDr,y4e,jDr,DDr,sf,GDr,L4e,ODr,VDr,DK,XDr,zDr,WDr,V3,QDr,Ur,_x,HDr,x4e,UDr,JDr,Cn,YDr,$4e,KDr,ZDr,k4e,eGr,oGr,S4e,rGr,tGr,aGr,ux,X3,R4e,nGr,sGr,GK,lGr,iGr,dGr,z3,P4e,cGr,fGr,OK,mGr,gGr,hGr,W3,_je,lf,Q3,B4e,bx,pGr,I4e,_Gr,uje,Mr,vx,uGr,df,bGr,VK,vGr,FGr,XK,TGr,MGr,EGr,Fx,CGr,q4e,wGr,AGr,yGr,Kt,Tx,LGr,N4e,xGr,$Gr,cf,kGr,j4e,SGr,RGr,zK,PGr,BGr,IGr,H3,qGr,Jr,Mx,NGr,D4e,jGr,DGr,wn,GGr,G4e,OGr,VGr,O4e,XGr,zGr,V4e,WGr,QGr,HGr,X4e,U3,z4e,UGr,JGr,WK,YGr,KGr,ZGr,J3,bje;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),bA=new oe({}),vA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new eOr({props:{warning:!0,$$slots:{default:[_7t]},$$scope:{ctx:L}}}),FA=new oe({}),TA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/configuration_auto.py#L580"}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/configuration_auto.py#L603"}}),Fg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[u7t]},$$scope:{ctx:L}}}),wA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/configuration_auto.py#L726"}}),AA=new oe({}),yA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/tokenization_auto.py#L402"}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16659/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/tokenization_auto.py#L416"}}),oh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[b7t]},$$scope:{ctx:L}}}),kA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/tokenization_auto.py#L612"}}),SA=new oe({}),RA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),IA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),kh=new eOr({props:{$$slots:{default:[v7t]},$$scope:{ctx:L}}}),Sh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[F7t]},$$scope:{ctx:L}}}),qA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),NA=new oe({}),jA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/processing_auto.py#L87"}}),OA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/processing_auto.py#L101"}}),Yh=new eOr({props:{$$slots:{default:[T7t]},$$scope:{ctx:L}}}),Kh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[M7t]},$$scope:{ctx:L}}}),VA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/processing_auto.py#L254"}}),XA=new oe({}),zA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L733"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),op=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[E7t]},$$scope:{ctx:L}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),U_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[C7t]},$$scope:{ctx:L}}}),UA=new oe({}),JA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L740"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Y_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[w7t]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Gu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[A7t]},$$scope:{ctx:L}}}),ey=new oe({}),oy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L755"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Vu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[y7t]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[L7t]},$$scope:{ctx:L}}}),ny=new oe({}),sy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L762"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[x7t]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),g1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$7t]},$$scope:{ctx:L}}}),cy=new oe({}),fy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L769"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),p1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[k7t]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[S7t]},$$scope:{ctx:L}}}),py=new oe({}),_y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L778"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[R7t]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[P7t]},$$scope:{ctx:L}}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L812"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[B7t]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),d2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[I7t]},$$scope:{ctx:L}}}),wy=new oe({}),Ay=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L819"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),f2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[q7t]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),b2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[N7t]},$$scope:{ctx:L}}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L805"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),F2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[j7t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[D7t]},$$scope:{ctx:L}}}),By=new oe({}),Iy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L787"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[G7t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[O7t]},$$scope:{ctx:L}}}),Dy=new oe({}),Gy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L794"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[V7t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[X7t]},$$scope:{ctx:L}}}),zy=new oe({}),Wy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L828"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[z7t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[W7t]},$$scope:{ctx:L}}}),Jy=new oe({}),Yy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L867"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),gv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Q7t]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),_v=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[H7t]},$$scope:{ctx:L}}}),o8=new oe({}),r8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L874"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),bv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[U7t]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[J7t]},$$scope:{ctx:L}}}),s8=new oe({}),l8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L897"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Y7t]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[K7t]},$$scope:{ctx:L}}}),f8=new oe({}),m8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L881"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Z7t]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),_8=new oe({}),u8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L888"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),M8=new oe({}),E8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L906"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),y8=new oe({}),L8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L913"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),S8=new oe({}),R8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L860"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),N8=new oe({}),j8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L835"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),V8=new oe({}),X8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L842"}}),W8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),H8=new oe({}),U8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L851"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),Z8=new oe({}),eL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),rL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),aL=new oe({}),nL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),lL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),d9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),dL=new oe({}),cL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),f9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),C9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),hL=new oe({}),pL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),A9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),k9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),R9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),zL=new oe({}),WL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),HL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),JL=new oe({}),YL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),o7=new oe({}),r7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),a7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),n7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),s7=new oe({}),l7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),d7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),c7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),f7=new oe({}),m7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),h7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),p7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),_7=new oe({}),u7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),v7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),T7=new oe({}),M7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),C7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),w7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),A7=new oe({}),y7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),x7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),$7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),k7=new oe({}),S7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),P7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),I7=new oe({}),q7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),j7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),D7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),G7=new oe({}),O7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),X7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),z7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),W7=new oe({}),Q7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),U7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),J7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),Y7=new oe({}),K7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),rx=new oe({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),lx=new oe({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),mx=new oe({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),hA=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),pA=o("AutoConfig"),Ln=o(", "),xn=a("a"),_A=o("AutoModel"),hi=o(`, and
`),$n=a("a"),uA=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),B$=o("will create a model that is an instance of "),_i=a("a"),I$=o("BertModel"),q$=o("."),Eo=l(),wa=a("p"),N$=o("There is one class of "),uf=a("code"),j$=o("AutoModel"),AGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pqe=l(),ui=a("h2"),bf=a("a"),jee=a("span"),F(bA.$$.fragment),yGe=l(),Dee=a("span"),LGe=o("Extending the Auto Classes"),_qe=l(),kn=a("p"),xGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Gee=a("code"),$Ge=o("NewModel"),kGe=o(", make sure you have a "),Oee=a("code"),SGe=o("NewModelConfig"),RGe=o(` then you can add those to the auto
classes like this:`),uqe=l(),F(vA.$$.fragment),bqe=l(),D$=a("p"),PGe=o("You will then be able to use the auto classes like you would usually do!"),vqe=l(),F(vf.$$.fragment),Fqe=l(),bi=a("h2"),Ff=a("a"),Vee=a("span"),F(FA.$$.fragment),BGe=l(),Xee=a("span"),IGe=o("AutoConfig"),Tqe=l(),Co=a("div"),F(TA.$$.fragment),qGe=l(),MA=a("p"),NGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),G$=a("a"),jGe=o("from_pretrained()"),DGe=o(" class method."),GGe=l(),EA=a("p"),OGe=o("This class cannot be instantiated directly using "),zee=a("code"),VGe=o("__init__()"),XGe=o(" (throws an error)."),zGe=l(),Er=a("div"),F(CA.$$.fragment),WGe=l(),Wee=a("p"),QGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),HGe=l(),vi=a("p"),UGe=o("The configuration class to instantiate is selected based on the "),Qee=a("code"),JGe=o("model_type"),YGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hee=a("code"),KGe=o("pretrained_model_name_or_path"),ZGe=o(":"),eOe=l(),A=a("ul"),Tf=a("li"),Uee=a("strong"),oOe=o("albert"),rOe=o(" \u2014 "),O$=a("a"),tOe=o("AlbertConfig"),aOe=o(" (ALBERT model)"),nOe=l(),Mf=a("li"),Jee=a("strong"),sOe=o("bart"),lOe=o(" \u2014 "),V$=a("a"),iOe=o("BartConfig"),dOe=o(" (BART model)"),cOe=l(),Ef=a("li"),Yee=a("strong"),fOe=o("beit"),mOe=o(" \u2014 "),X$=a("a"),gOe=o("BeitConfig"),hOe=o(" (BEiT model)"),pOe=l(),Cf=a("li"),Kee=a("strong"),_Oe=o("bert"),uOe=o(" \u2014 "),z$=a("a"),bOe=o("BertConfig"),vOe=o(" (BERT model)"),FOe=l(),wf=a("li"),Zee=a("strong"),TOe=o("bert-generation"),MOe=o(" \u2014 "),W$=a("a"),EOe=o("BertGenerationConfig"),COe=o(" (Bert Generation model)"),wOe=l(),Af=a("li"),eoe=a("strong"),AOe=o("big_bird"),yOe=o(" \u2014 "),Q$=a("a"),LOe=o("BigBirdConfig"),xOe=o(" (BigBird model)"),$Oe=l(),yf=a("li"),ooe=a("strong"),kOe=o("bigbird_pegasus"),SOe=o(" \u2014 "),H$=a("a"),ROe=o("BigBirdPegasusConfig"),POe=o(" (BigBirdPegasus model)"),BOe=l(),Lf=a("li"),roe=a("strong"),IOe=o("blenderbot"),qOe=o(" \u2014 "),U$=a("a"),NOe=o("BlenderbotConfig"),jOe=o(" (Blenderbot model)"),DOe=l(),xf=a("li"),toe=a("strong"),GOe=o("blenderbot-small"),OOe=o(" \u2014 "),J$=a("a"),VOe=o("BlenderbotSmallConfig"),XOe=o(" (BlenderbotSmall model)"),zOe=l(),$f=a("li"),aoe=a("strong"),WOe=o("camembert"),QOe=o(" \u2014 "),Y$=a("a"),HOe=o("CamembertConfig"),UOe=o(" (CamemBERT model)"),JOe=l(),kf=a("li"),noe=a("strong"),YOe=o("canine"),KOe=o(" \u2014 "),K$=a("a"),ZOe=o("CanineConfig"),eVe=o(" (Canine model)"),oVe=l(),Sf=a("li"),soe=a("strong"),rVe=o("clip"),tVe=o(" \u2014 "),Z$=a("a"),aVe=o("CLIPConfig"),nVe=o(" (CLIP model)"),sVe=l(),Rf=a("li"),loe=a("strong"),lVe=o("convbert"),iVe=o(" \u2014 "),ek=a("a"),dVe=o("ConvBertConfig"),cVe=o(" (ConvBERT model)"),fVe=l(),Pf=a("li"),ioe=a("strong"),mVe=o("convnext"),gVe=o(" \u2014 "),ok=a("a"),hVe=o("ConvNextConfig"),pVe=o(" (ConvNext model)"),_Ve=l(),Bf=a("li"),doe=a("strong"),uVe=o("ctrl"),bVe=o(" \u2014 "),rk=a("a"),vVe=o("CTRLConfig"),FVe=o(" (CTRL model)"),TVe=l(),If=a("li"),coe=a("strong"),MVe=o("cvt"),EVe=o(" \u2014 "),tk=a("a"),CVe=o("CvtConfig"),wVe=o(" (CvT model)"),AVe=l(),qf=a("li"),foe=a("strong"),yVe=o("data2vec-audio"),LVe=o(" \u2014 "),ak=a("a"),xVe=o("Data2VecAudioConfig"),$Ve=o(" (Data2VecAudio model)"),kVe=l(),Nf=a("li"),moe=a("strong"),SVe=o("data2vec-text"),RVe=o(" \u2014 "),nk=a("a"),PVe=o("Data2VecTextConfig"),BVe=o(" (Data2VecText model)"),IVe=l(),jf=a("li"),goe=a("strong"),qVe=o("data2vec-vision"),NVe=o(" \u2014 "),sk=a("a"),jVe=o("Data2VecVisionConfig"),DVe=o(" (Data2VecVision model)"),GVe=l(),Df=a("li"),hoe=a("strong"),OVe=o("deberta"),VVe=o(" \u2014 "),lk=a("a"),XVe=o("DebertaConfig"),zVe=o(" (DeBERTa model)"),WVe=l(),Gf=a("li"),poe=a("strong"),QVe=o("deberta-v2"),HVe=o(" \u2014 "),ik=a("a"),UVe=o("DebertaV2Config"),JVe=o(" (DeBERTa-v2 model)"),YVe=l(),Of=a("li"),_oe=a("strong"),KVe=o("decision_transformer"),ZVe=o(" \u2014 "),dk=a("a"),eXe=o("DecisionTransformerConfig"),oXe=o(" (Decision Transformer model)"),rXe=l(),Vf=a("li"),uoe=a("strong"),tXe=o("deit"),aXe=o(" \u2014 "),ck=a("a"),nXe=o("DeiTConfig"),sXe=o(" (DeiT model)"),lXe=l(),Xf=a("li"),boe=a("strong"),iXe=o("detr"),dXe=o(" \u2014 "),fk=a("a"),cXe=o("DetrConfig"),fXe=o(" (DETR model)"),mXe=l(),zf=a("li"),voe=a("strong"),gXe=o("distilbert"),hXe=o(" \u2014 "),mk=a("a"),pXe=o("DistilBertConfig"),_Xe=o(" (DistilBERT model)"),uXe=l(),Wf=a("li"),Foe=a("strong"),bXe=o("dpr"),vXe=o(" \u2014 "),gk=a("a"),FXe=o("DPRConfig"),TXe=o(" (DPR model)"),MXe=l(),Qf=a("li"),Toe=a("strong"),EXe=o("dpt"),CXe=o(" \u2014 "),hk=a("a"),wXe=o("DPTConfig"),AXe=o(" (DPT model)"),yXe=l(),Hf=a("li"),Moe=a("strong"),LXe=o("electra"),xXe=o(" \u2014 "),pk=a("a"),$Xe=o("ElectraConfig"),kXe=o(" (ELECTRA model)"),SXe=l(),Uf=a("li"),Eoe=a("strong"),RXe=o("encoder-decoder"),PXe=o(" \u2014 "),_k=a("a"),BXe=o("EncoderDecoderConfig"),IXe=o(" (Encoder decoder model)"),qXe=l(),Jf=a("li"),Coe=a("strong"),NXe=o("flaubert"),jXe=o(" \u2014 "),uk=a("a"),DXe=o("FlaubertConfig"),GXe=o(" (FlauBERT model)"),OXe=l(),Yf=a("li"),woe=a("strong"),VXe=o("flava"),XXe=o(" \u2014 "),bk=a("a"),zXe=o("FlavaConfig"),WXe=o(" (Flava model)"),QXe=l(),Kf=a("li"),Aoe=a("strong"),HXe=o("fnet"),UXe=o(" \u2014 "),vk=a("a"),JXe=o("FNetConfig"),YXe=o(" (FNet model)"),KXe=l(),Zf=a("li"),yoe=a("strong"),ZXe=o("fsmt"),eze=o(" \u2014 "),Fk=a("a"),oze=o("FSMTConfig"),rze=o(" (FairSeq Machine-Translation model)"),tze=l(),em=a("li"),Loe=a("strong"),aze=o("funnel"),nze=o(" \u2014 "),Tk=a("a"),sze=o("FunnelConfig"),lze=o(" (Funnel Transformer model)"),ize=l(),om=a("li"),xoe=a("strong"),dze=o("glpn"),cze=o(" \u2014 "),Mk=a("a"),fze=o("GLPNConfig"),mze=o(" (GLPN model)"),gze=l(),rm=a("li"),$oe=a("strong"),hze=o("gpt2"),pze=o(" \u2014 "),Ek=a("a"),_ze=o("GPT2Config"),uze=o(" (OpenAI GPT-2 model)"),bze=l(),tm=a("li"),koe=a("strong"),vze=o("gpt_neo"),Fze=o(" \u2014 "),Ck=a("a"),Tze=o("GPTNeoConfig"),Mze=o(" (GPT Neo model)"),Eze=l(),am=a("li"),Soe=a("strong"),Cze=o("gptj"),wze=o(" \u2014 "),wk=a("a"),Aze=o("GPTJConfig"),yze=o(" (GPT-J model)"),Lze=l(),nm=a("li"),Roe=a("strong"),xze=o("hubert"),$ze=o(" \u2014 "),Ak=a("a"),kze=o("HubertConfig"),Sze=o(" (Hubert model)"),Rze=l(),sm=a("li"),Poe=a("strong"),Pze=o("ibert"),Bze=o(" \u2014 "),yk=a("a"),Ize=o("IBertConfig"),qze=o(" (I-BERT model)"),Nze=l(),lm=a("li"),Boe=a("strong"),jze=o("imagegpt"),Dze=o(" \u2014 "),Lk=a("a"),Gze=o("ImageGPTConfig"),Oze=o(" (ImageGPT model)"),Vze=l(),im=a("li"),Ioe=a("strong"),Xze=o("layoutlm"),zze=o(" \u2014 "),xk=a("a"),Wze=o("LayoutLMConfig"),Qze=o(" (LayoutLM model)"),Hze=l(),dm=a("li"),qoe=a("strong"),Uze=o("layoutlmv2"),Jze=o(" \u2014 "),$k=a("a"),Yze=o("LayoutLMv2Config"),Kze=o(" (LayoutLMv2 model)"),Zze=l(),cm=a("li"),Noe=a("strong"),eWe=o("led"),oWe=o(" \u2014 "),kk=a("a"),rWe=o("LEDConfig"),tWe=o(" (LED model)"),aWe=l(),fm=a("li"),joe=a("strong"),nWe=o("longformer"),sWe=o(" \u2014 "),Sk=a("a"),lWe=o("LongformerConfig"),iWe=o(" (Longformer model)"),dWe=l(),mm=a("li"),Doe=a("strong"),cWe=o("luke"),fWe=o(" \u2014 "),Rk=a("a"),mWe=o("LukeConfig"),gWe=o(" (LUKE model)"),hWe=l(),gm=a("li"),Goe=a("strong"),pWe=o("lxmert"),_We=o(" \u2014 "),Pk=a("a"),uWe=o("LxmertConfig"),bWe=o(" (LXMERT model)"),vWe=l(),hm=a("li"),Ooe=a("strong"),FWe=o("m2m_100"),TWe=o(" \u2014 "),Bk=a("a"),MWe=o("M2M100Config"),EWe=o(" (M2M100 model)"),CWe=l(),pm=a("li"),Voe=a("strong"),wWe=o("marian"),AWe=o(" \u2014 "),Ik=a("a"),yWe=o("MarianConfig"),LWe=o(" (Marian model)"),xWe=l(),_m=a("li"),Xoe=a("strong"),$We=o("maskformer"),kWe=o(" \u2014 "),qk=a("a"),SWe=o("MaskFormerConfig"),RWe=o(" (MaskFormer model)"),PWe=l(),um=a("li"),zoe=a("strong"),BWe=o("mbart"),IWe=o(" \u2014 "),Nk=a("a"),qWe=o("MBartConfig"),NWe=o(" (mBART model)"),jWe=l(),bm=a("li"),Woe=a("strong"),DWe=o("megatron-bert"),GWe=o(" \u2014 "),jk=a("a"),OWe=o("MegatronBertConfig"),VWe=o(" (MegatronBert model)"),XWe=l(),vm=a("li"),Qoe=a("strong"),zWe=o("mobilebert"),WWe=o(" \u2014 "),Dk=a("a"),QWe=o("MobileBertConfig"),HWe=o(" (MobileBERT model)"),UWe=l(),Fm=a("li"),Hoe=a("strong"),JWe=o("mpnet"),YWe=o(" \u2014 "),Gk=a("a"),KWe=o("MPNetConfig"),ZWe=o(" (MPNet model)"),eQe=l(),Tm=a("li"),Uoe=a("strong"),oQe=o("mt5"),rQe=o(" \u2014 "),Ok=a("a"),tQe=o("MT5Config"),aQe=o(" (mT5 model)"),nQe=l(),Mm=a("li"),Joe=a("strong"),sQe=o("nystromformer"),lQe=o(" \u2014 "),Vk=a("a"),iQe=o("NystromformerConfig"),dQe=o(" (Nystromformer model)"),cQe=l(),Em=a("li"),Yoe=a("strong"),fQe=o("openai-gpt"),mQe=o(" \u2014 "),Xk=a("a"),gQe=o("OpenAIGPTConfig"),hQe=o(" (OpenAI GPT model)"),pQe=l(),Cm=a("li"),Koe=a("strong"),_Qe=o("opt"),uQe=o(" \u2014 "),zk=a("a"),bQe=o("OPTConfig"),vQe=o(" (OPT model)"),FQe=l(),wm=a("li"),Zoe=a("strong"),TQe=o("pegasus"),MQe=o(" \u2014 "),Wk=a("a"),EQe=o("PegasusConfig"),CQe=o(" (Pegasus model)"),wQe=l(),Am=a("li"),ere=a("strong"),AQe=o("perceiver"),yQe=o(" \u2014 "),Qk=a("a"),LQe=o("PerceiverConfig"),xQe=o(" (Perceiver model)"),$Qe=l(),ym=a("li"),ore=a("strong"),kQe=o("plbart"),SQe=o(" \u2014 "),Hk=a("a"),RQe=o("PLBartConfig"),PQe=o(" (PLBart model)"),BQe=l(),Lm=a("li"),rre=a("strong"),IQe=o("poolformer"),qQe=o(" \u2014 "),Uk=a("a"),NQe=o("PoolFormerConfig"),jQe=o(" (PoolFormer model)"),DQe=l(),xm=a("li"),tre=a("strong"),GQe=o("prophetnet"),OQe=o(" \u2014 "),Jk=a("a"),VQe=o("ProphetNetConfig"),XQe=o(" (ProphetNet model)"),zQe=l(),$m=a("li"),are=a("strong"),WQe=o("qdqbert"),QQe=o(" \u2014 "),Yk=a("a"),HQe=o("QDQBertConfig"),UQe=o(" (QDQBert model)"),JQe=l(),km=a("li"),nre=a("strong"),YQe=o("rag"),KQe=o(" \u2014 "),Kk=a("a"),ZQe=o("RagConfig"),eHe=o(" (RAG model)"),oHe=l(),Sm=a("li"),sre=a("strong"),rHe=o("realm"),tHe=o(" \u2014 "),Zk=a("a"),aHe=o("RealmConfig"),nHe=o(" (Realm model)"),sHe=l(),Rm=a("li"),lre=a("strong"),lHe=o("reformer"),iHe=o(" \u2014 "),eS=a("a"),dHe=o("ReformerConfig"),cHe=o(" (Reformer model)"),fHe=l(),Pm=a("li"),ire=a("strong"),mHe=o("regnet"),gHe=o(" \u2014 "),oS=a("a"),hHe=o("RegNetConfig"),pHe=o(" (RegNet model)"),_He=l(),Bm=a("li"),dre=a("strong"),uHe=o("rembert"),bHe=o(" \u2014 "),rS=a("a"),vHe=o("RemBertConfig"),FHe=o(" (RemBERT model)"),THe=l(),Im=a("li"),cre=a("strong"),MHe=o("resnet"),EHe=o(" \u2014 "),tS=a("a"),CHe=o("ResNetConfig"),wHe=o(" (ResNet model)"),AHe=l(),qm=a("li"),fre=a("strong"),yHe=o("retribert"),LHe=o(" \u2014 "),aS=a("a"),xHe=o("RetriBertConfig"),$He=o(" (RetriBERT model)"),kHe=l(),Nm=a("li"),mre=a("strong"),SHe=o("roberta"),RHe=o(" \u2014 "),nS=a("a"),PHe=o("RobertaConfig"),BHe=o(" (RoBERTa model)"),IHe=l(),jm=a("li"),gre=a("strong"),qHe=o("roformer"),NHe=o(" \u2014 "),sS=a("a"),jHe=o("RoFormerConfig"),DHe=o(" (RoFormer model)"),GHe=l(),Dm=a("li"),hre=a("strong"),OHe=o("segformer"),VHe=o(" \u2014 "),lS=a("a"),XHe=o("SegformerConfig"),zHe=o(" (SegFormer model)"),WHe=l(),Gm=a("li"),pre=a("strong"),QHe=o("sew"),HHe=o(" \u2014 "),iS=a("a"),UHe=o("SEWConfig"),JHe=o(" (SEW model)"),YHe=l(),Om=a("li"),_re=a("strong"),KHe=o("sew-d"),ZHe=o(" \u2014 "),dS=a("a"),eUe=o("SEWDConfig"),oUe=o(" (SEW-D model)"),rUe=l(),Vm=a("li"),ure=a("strong"),tUe=o("speech-encoder-decoder"),aUe=o(" \u2014 "),cS=a("a"),nUe=o("SpeechEncoderDecoderConfig"),sUe=o(" (Speech Encoder decoder model)"),lUe=l(),Xm=a("li"),bre=a("strong"),iUe=o("speech_to_text"),dUe=o(" \u2014 "),fS=a("a"),cUe=o("Speech2TextConfig"),fUe=o(" (Speech2Text model)"),mUe=l(),zm=a("li"),vre=a("strong"),gUe=o("speech_to_text_2"),hUe=o(" \u2014 "),mS=a("a"),pUe=o("Speech2Text2Config"),_Ue=o(" (Speech2Text2 model)"),uUe=l(),Wm=a("li"),Fre=a("strong"),bUe=o("splinter"),vUe=o(" \u2014 "),gS=a("a"),FUe=o("SplinterConfig"),TUe=o(" (Splinter model)"),MUe=l(),Qm=a("li"),Tre=a("strong"),EUe=o("squeezebert"),CUe=o(" \u2014 "),hS=a("a"),wUe=o("SqueezeBertConfig"),AUe=o(" (SqueezeBERT model)"),yUe=l(),Hm=a("li"),Mre=a("strong"),LUe=o("swin"),xUe=o(" \u2014 "),pS=a("a"),$Ue=o("SwinConfig"),kUe=o(" (Swin model)"),SUe=l(),Um=a("li"),Ere=a("strong"),RUe=o("t5"),PUe=o(" \u2014 "),_S=a("a"),BUe=o("T5Config"),IUe=o(" (T5 model)"),qUe=l(),Jm=a("li"),Cre=a("strong"),NUe=o("tapas"),jUe=o(" \u2014 "),uS=a("a"),DUe=o("TapasConfig"),GUe=o(" (TAPAS model)"),OUe=l(),Ym=a("li"),wre=a("strong"),VUe=o("trajectory_transformer"),XUe=o(" \u2014 "),bS=a("a"),zUe=o("TrajectoryTransformerConfig"),WUe=o(" (Trajectory Transformer model)"),QUe=l(),Km=a("li"),Are=a("strong"),HUe=o("transfo-xl"),UUe=o(" \u2014 "),vS=a("a"),JUe=o("TransfoXLConfig"),YUe=o(" (Transformer-XL model)"),KUe=l(),Zm=a("li"),yre=a("strong"),ZUe=o("trocr"),eJe=o(" \u2014 "),FS=a("a"),oJe=o("TrOCRConfig"),rJe=o(" (TrOCR model)"),tJe=l(),eg=a("li"),Lre=a("strong"),aJe=o("unispeech"),nJe=o(" \u2014 "),TS=a("a"),sJe=o("UniSpeechConfig"),lJe=o(" (UniSpeech model)"),iJe=l(),og=a("li"),xre=a("strong"),dJe=o("unispeech-sat"),cJe=o(" \u2014 "),MS=a("a"),fJe=o("UniSpeechSatConfig"),mJe=o(" (UniSpeechSat model)"),gJe=l(),rg=a("li"),$re=a("strong"),hJe=o("van"),pJe=o(" \u2014 "),ES=a("a"),_Je=o("VanConfig"),uJe=o(" (VAN model)"),bJe=l(),tg=a("li"),kre=a("strong"),vJe=o("vilt"),FJe=o(" \u2014 "),CS=a("a"),TJe=o("ViltConfig"),MJe=o(" (ViLT model)"),EJe=l(),ag=a("li"),Sre=a("strong"),CJe=o("vision-encoder-decoder"),wJe=o(" \u2014 "),wS=a("a"),AJe=o("VisionEncoderDecoderConfig"),yJe=o(" (Vision Encoder decoder model)"),LJe=l(),ng=a("li"),Rre=a("strong"),xJe=o("vision-text-dual-encoder"),$Je=o(" \u2014 "),AS=a("a"),kJe=o("VisionTextDualEncoderConfig"),SJe=o(" (VisionTextDualEncoder model)"),RJe=l(),sg=a("li"),Pre=a("strong"),PJe=o("visual_bert"),BJe=o(" \u2014 "),yS=a("a"),IJe=o("VisualBertConfig"),qJe=o(" (VisualBert model)"),NJe=l(),lg=a("li"),Bre=a("strong"),jJe=o("vit"),DJe=o(" \u2014 "),LS=a("a"),GJe=o("ViTConfig"),OJe=o(" (ViT model)"),VJe=l(),ig=a("li"),Ire=a("strong"),XJe=o("vit_mae"),zJe=o(" \u2014 "),xS=a("a"),WJe=o("ViTMAEConfig"),QJe=o(" (ViTMAE model)"),HJe=l(),dg=a("li"),qre=a("strong"),UJe=o("wav2vec2"),JJe=o(" \u2014 "),$S=a("a"),YJe=o("Wav2Vec2Config"),KJe=o(" (Wav2Vec2 model)"),ZJe=l(),cg=a("li"),Nre=a("strong"),eYe=o("wav2vec2-conformer"),oYe=o(" \u2014 "),kS=a("a"),rYe=o("Wav2Vec2ConformerConfig"),tYe=o(" (Wav2Vec2-Conformer model)"),aYe=l(),fg=a("li"),jre=a("strong"),nYe=o("wavlm"),sYe=o(" \u2014 "),SS=a("a"),lYe=o("WavLMConfig"),iYe=o(" (WavLM model)"),dYe=l(),mg=a("li"),Dre=a("strong"),cYe=o("xglm"),fYe=o(" \u2014 "),RS=a("a"),mYe=o("XGLMConfig"),gYe=o(" (XGLM model)"),hYe=l(),gg=a("li"),Gre=a("strong"),pYe=o("xlm"),_Ye=o(" \u2014 "),PS=a("a"),uYe=o("XLMConfig"),bYe=o(" (XLM model)"),vYe=l(),hg=a("li"),Ore=a("strong"),FYe=o("xlm-prophetnet"),TYe=o(" \u2014 "),BS=a("a"),MYe=o("XLMProphetNetConfig"),EYe=o(" (XLMProphetNet model)"),CYe=l(),pg=a("li"),Vre=a("strong"),wYe=o("xlm-roberta"),AYe=o(" \u2014 "),IS=a("a"),yYe=o("XLMRobertaConfig"),LYe=o(" (XLM-RoBERTa model)"),xYe=l(),_g=a("li"),Xre=a("strong"),$Ye=o("xlm-roberta-xl"),kYe=o(" \u2014 "),qS=a("a"),SYe=o("XLMRobertaXLConfig"),RYe=o(" (XLM-RoBERTa-XL model)"),PYe=l(),ug=a("li"),zre=a("strong"),BYe=o("xlnet"),IYe=o(" \u2014 "),NS=a("a"),qYe=o("XLNetConfig"),NYe=o(" (XLNet model)"),jYe=l(),bg=a("li"),Wre=a("strong"),DYe=o("yolos"),GYe=o(" \u2014 "),jS=a("a"),OYe=o("YolosConfig"),VYe=o(" (YOLOS model)"),XYe=l(),vg=a("li"),Qre=a("strong"),zYe=o("yoso"),WYe=o(" \u2014 "),DS=a("a"),QYe=o("YosoConfig"),HYe=o(" (YOSO model)"),UYe=l(),F(Fg.$$.fragment),JYe=l(),Tg=a("div"),F(wA.$$.fragment),YYe=l(),Hre=a("p"),KYe=o("Register a new configuration for this class."),Mqe=l(),Fi=a("h2"),Mg=a("a"),Ure=a("span"),F(AA.$$.fragment),ZYe=l(),Jre=a("span"),eKe=o("AutoTokenizer"),Eqe=l(),wo=a("div"),F(yA.$$.fragment),oKe=l(),LA=a("p"),rKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GS=a("a"),tKe=o("AutoTokenizer.from_pretrained()"),aKe=o(" class method."),nKe=l(),xA=a("p"),sKe=o("This class cannot be instantiated directly using "),Yre=a("code"),lKe=o("__init__()"),iKe=o(" (throws an error)."),dKe=l(),Cr=a("div"),F($A.$$.fragment),cKe=l(),Kre=a("p"),fKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mKe=l(),Aa=a("p"),gKe=o("The tokenizer class to instantiate is selected based on the "),Zre=a("code"),hKe=o("model_type"),pKe=o(` property of the config object (either
passed as an argument or loaded from `),ete=a("code"),_Ke=o("pretrained_model_name_or_path"),uKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ote=a("code"),bKe=o("pretrained_model_name_or_path"),vKe=o(":"),FKe=l(),k=a("ul"),Sn=a("li"),rte=a("strong"),TKe=o("albert"),MKe=o(" \u2014 "),OS=a("a"),EKe=o("AlbertTokenizer"),CKe=o(" or "),VS=a("a"),wKe=o("AlbertTokenizerFast"),AKe=o(" (ALBERT model)"),yKe=l(),Rn=a("li"),tte=a("strong"),LKe=o("bart"),xKe=o(" \u2014 "),XS=a("a"),$Ke=o("BartTokenizer"),kKe=o(" or "),zS=a("a"),SKe=o("BartTokenizerFast"),RKe=o(" (BART model)"),PKe=l(),Pn=a("li"),ate=a("strong"),BKe=o("barthez"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("BarthezTokenizer"),NKe=o(" or "),QS=a("a"),jKe=o("BarthezTokenizerFast"),DKe=o(" (BARThez model)"),GKe=l(),Eg=a("li"),nte=a("strong"),OKe=o("bartpho"),VKe=o(" \u2014 "),HS=a("a"),XKe=o("BartphoTokenizer"),zKe=o(" (BARTpho model)"),WKe=l(),Bn=a("li"),ste=a("strong"),QKe=o("bert"),HKe=o(" \u2014 "),US=a("a"),UKe=o("BertTokenizer"),JKe=o(" or "),JS=a("a"),YKe=o("BertTokenizerFast"),KKe=o(" (BERT model)"),ZKe=l(),Cg=a("li"),lte=a("strong"),eZe=o("bert-generation"),oZe=o(" \u2014 "),YS=a("a"),rZe=o("BertGenerationTokenizer"),tZe=o(" (Bert Generation model)"),aZe=l(),wg=a("li"),ite=a("strong"),nZe=o("bert-japanese"),sZe=o(" \u2014 "),KS=a("a"),lZe=o("BertJapaneseTokenizer"),iZe=o(" (BertJapanese model)"),dZe=l(),Ag=a("li"),dte=a("strong"),cZe=o("bertweet"),fZe=o(" \u2014 "),ZS=a("a"),mZe=o("BertweetTokenizer"),gZe=o(" (Bertweet model)"),hZe=l(),In=a("li"),cte=a("strong"),pZe=o("big_bird"),_Ze=o(" \u2014 "),eR=a("a"),uZe=o("BigBirdTokenizer"),bZe=o(" or "),oR=a("a"),vZe=o("BigBirdTokenizerFast"),FZe=o(" (BigBird model)"),TZe=l(),qn=a("li"),fte=a("strong"),MZe=o("bigbird_pegasus"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("PegasusTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("PegasusTokenizerFast"),yZe=o(" (BigBirdPegasus model)"),LZe=l(),Nn=a("li"),mte=a("strong"),xZe=o("blenderbot"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("BlenderbotTokenizer"),SZe=o(" or "),nR=a("a"),RZe=o("BlenderbotTokenizerFast"),PZe=o(" (Blenderbot model)"),BZe=l(),yg=a("li"),gte=a("strong"),IZe=o("blenderbot-small"),qZe=o(" \u2014 "),sR=a("a"),NZe=o("BlenderbotSmallTokenizer"),jZe=o(" (BlenderbotSmall model)"),DZe=l(),Lg=a("li"),hte=a("strong"),GZe=o("byt5"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("ByT5Tokenizer"),XZe=o(" (ByT5 model)"),zZe=l(),jn=a("li"),pte=a("strong"),WZe=o("camembert"),QZe=o(" \u2014 "),iR=a("a"),HZe=o("CamembertTokenizer"),UZe=o(" or "),dR=a("a"),JZe=o("CamembertTokenizerFast"),YZe=o(" (CamemBERT model)"),KZe=l(),xg=a("li"),_te=a("strong"),ZZe=o("canine"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("CanineTokenizer"),reo=o(" (Canine model)"),teo=l(),Dn=a("li"),ute=a("strong"),aeo=o("clip"),neo=o(" \u2014 "),fR=a("a"),seo=o("CLIPTokenizer"),leo=o(" or "),mR=a("a"),ieo=o("CLIPTokenizerFast"),deo=o(" (CLIP model)"),ceo=l(),Gn=a("li"),bte=a("strong"),feo=o("convbert"),meo=o(" \u2014 "),gR=a("a"),geo=o("ConvBertTokenizer"),heo=o(" or "),hR=a("a"),peo=o("ConvBertTokenizerFast"),_eo=o(" (ConvBERT model)"),ueo=l(),On=a("li"),vte=a("strong"),beo=o("cpm"),veo=o(" \u2014 "),pR=a("a"),Feo=o("CpmTokenizer"),Teo=o(" or "),_R=a("a"),Meo=o("CpmTokenizerFast"),Eeo=o(" (CPM model)"),Ceo=l(),$g=a("li"),Fte=a("strong"),weo=o("ctrl"),Aeo=o(" \u2014 "),uR=a("a"),yeo=o("CTRLTokenizer"),Leo=o(" (CTRL model)"),xeo=l(),Vn=a("li"),Tte=a("strong"),$eo=o("data2vec-text"),keo=o(" \u2014 "),bR=a("a"),Seo=o("RobertaTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("RobertaTokenizerFast"),Beo=o(" (Data2VecText model)"),Ieo=l(),Xn=a("li"),Mte=a("strong"),qeo=o("deberta"),Neo=o(" \u2014 "),FR=a("a"),jeo=o("DebertaTokenizer"),Deo=o(" or "),TR=a("a"),Geo=o("DebertaTokenizerFast"),Oeo=o(" (DeBERTa model)"),Veo=l(),zn=a("li"),Ete=a("strong"),Xeo=o("deberta-v2"),zeo=o(" \u2014 "),MR=a("a"),Weo=o("DebertaV2Tokenizer"),Qeo=o(" or "),ER=a("a"),Heo=o("DebertaV2TokenizerFast"),Ueo=o(" (DeBERTa-v2 model)"),Jeo=l(),Wn=a("li"),Cte=a("strong"),Yeo=o("distilbert"),Keo=o(" \u2014 "),CR=a("a"),Zeo=o("DistilBertTokenizer"),eoo=o(" or "),wR=a("a"),ooo=o("DistilBertTokenizerFast"),roo=o(" (DistilBERT model)"),too=l(),Qn=a("li"),wte=a("strong"),aoo=o("dpr"),noo=o(" \u2014 "),AR=a("a"),soo=o("DPRQuestionEncoderTokenizer"),loo=o(" or "),yR=a("a"),ioo=o("DPRQuestionEncoderTokenizerFast"),doo=o(" (DPR model)"),coo=l(),Hn=a("li"),Ate=a("strong"),foo=o("electra"),moo=o(" \u2014 "),LR=a("a"),goo=o("ElectraTokenizer"),hoo=o(" or "),xR=a("a"),poo=o("ElectraTokenizerFast"),_oo=o(" (ELECTRA model)"),uoo=l(),kg=a("li"),yte=a("strong"),boo=o("flaubert"),voo=o(" \u2014 "),$R=a("a"),Foo=o("FlaubertTokenizer"),Too=o(" (FlauBERT model)"),Moo=l(),Un=a("li"),Lte=a("strong"),Eoo=o("fnet"),Coo=o(" \u2014 "),kR=a("a"),woo=o("FNetTokenizer"),Aoo=o(" or "),SR=a("a"),yoo=o("FNetTokenizerFast"),Loo=o(" (FNet model)"),xoo=l(),Sg=a("li"),xte=a("strong"),$oo=o("fsmt"),koo=o(" \u2014 "),RR=a("a"),Soo=o("FSMTTokenizer"),Roo=o(" (FairSeq Machine-Translation model)"),Poo=l(),Jn=a("li"),$te=a("strong"),Boo=o("funnel"),Ioo=o(" \u2014 "),PR=a("a"),qoo=o("FunnelTokenizer"),Noo=o(" or "),BR=a("a"),joo=o("FunnelTokenizerFast"),Doo=o(" (Funnel Transformer model)"),Goo=l(),Yn=a("li"),kte=a("strong"),Ooo=o("gpt2"),Voo=o(" \u2014 "),IR=a("a"),Xoo=o("GPT2Tokenizer"),zoo=o(" or "),qR=a("a"),Woo=o("GPT2TokenizerFast"),Qoo=o(" (OpenAI GPT-2 model)"),Hoo=l(),Kn=a("li"),Ste=a("strong"),Uoo=o("gpt_neo"),Joo=o(" \u2014 "),NR=a("a"),Yoo=o("GPT2Tokenizer"),Koo=o(" or "),jR=a("a"),Zoo=o("GPT2TokenizerFast"),ero=o(" (GPT Neo model)"),oro=l(),Rg=a("li"),Rte=a("strong"),rro=o("gpt_neox"),tro=o(" \u2014 "),DR=a("a"),aro=o("GPTNeoXTokenizerFast"),nro=o(" (GPT NeoX model)"),sro=l(),Zn=a("li"),Pte=a("strong"),lro=o("gptj"),iro=o(" \u2014 "),GR=a("a"),dro=o("GPT2Tokenizer"),cro=o(" or "),OR=a("a"),fro=o("GPT2TokenizerFast"),mro=o(" (GPT-J model)"),gro=l(),es=a("li"),Bte=a("strong"),hro=o("herbert"),pro=o(" \u2014 "),VR=a("a"),_ro=o("HerbertTokenizer"),uro=o(" or "),XR=a("a"),bro=o("HerbertTokenizerFast"),vro=o(" (HerBERT model)"),Fro=l(),Pg=a("li"),Ite=a("strong"),Tro=o("hubert"),Mro=o(" \u2014 "),zR=a("a"),Ero=o("Wav2Vec2CTCTokenizer"),Cro=o(" (Hubert model)"),wro=l(),os=a("li"),qte=a("strong"),Aro=o("ibert"),yro=o(" \u2014 "),WR=a("a"),Lro=o("RobertaTokenizer"),xro=o(" or "),QR=a("a"),$ro=o("RobertaTokenizerFast"),kro=o(" (I-BERT model)"),Sro=l(),rs=a("li"),Nte=a("strong"),Rro=o("layoutlm"),Pro=o(" \u2014 "),HR=a("a"),Bro=o("LayoutLMTokenizer"),Iro=o(" or "),UR=a("a"),qro=o("LayoutLMTokenizerFast"),Nro=o(" (LayoutLM model)"),jro=l(),ts=a("li"),jte=a("strong"),Dro=o("layoutlmv2"),Gro=o(" \u2014 "),JR=a("a"),Oro=o("LayoutLMv2Tokenizer"),Vro=o(" or "),YR=a("a"),Xro=o("LayoutLMv2TokenizerFast"),zro=o(" (LayoutLMv2 model)"),Wro=l(),as=a("li"),Dte=a("strong"),Qro=o("layoutxlm"),Hro=o(" \u2014 "),KR=a("a"),Uro=o("LayoutXLMTokenizer"),Jro=o(" or "),ZR=a("a"),Yro=o("LayoutXLMTokenizerFast"),Kro=o(" (LayoutXLM model)"),Zro=l(),ns=a("li"),Gte=a("strong"),eto=o("led"),oto=o(" \u2014 "),eP=a("a"),rto=o("LEDTokenizer"),tto=o(" or "),oP=a("a"),ato=o("LEDTokenizerFast"),nto=o(" (LED model)"),sto=l(),ss=a("li"),Ote=a("strong"),lto=o("longformer"),ito=o(" \u2014 "),rP=a("a"),dto=o("LongformerTokenizer"),cto=o(" or "),tP=a("a"),fto=o("LongformerTokenizerFast"),mto=o(" (Longformer model)"),gto=l(),Bg=a("li"),Vte=a("strong"),hto=o("luke"),pto=o(" \u2014 "),aP=a("a"),_to=o("LukeTokenizer"),uto=o(" (LUKE model)"),bto=l(),ls=a("li"),Xte=a("strong"),vto=o("lxmert"),Fto=o(" \u2014 "),nP=a("a"),Tto=o("LxmertTokenizer"),Mto=o(" or "),sP=a("a"),Eto=o("LxmertTokenizerFast"),Cto=o(" (LXMERT model)"),wto=l(),Ig=a("li"),zte=a("strong"),Ato=o("m2m_100"),yto=o(" \u2014 "),lP=a("a"),Lto=o("M2M100Tokenizer"),xto=o(" (M2M100 model)"),$to=l(),qg=a("li"),Wte=a("strong"),kto=o("marian"),Sto=o(" \u2014 "),iP=a("a"),Rto=o("MarianTokenizer"),Pto=o(" (Marian model)"),Bto=l(),is=a("li"),Qte=a("strong"),Ito=o("mbart"),qto=o(" \u2014 "),dP=a("a"),Nto=o("MBartTokenizer"),jto=o(" or "),cP=a("a"),Dto=o("MBartTokenizerFast"),Gto=o(" (mBART model)"),Oto=l(),ds=a("li"),Hte=a("strong"),Vto=o("mbart50"),Xto=o(" \u2014 "),fP=a("a"),zto=o("MBart50Tokenizer"),Wto=o(" or "),mP=a("a"),Qto=o("MBart50TokenizerFast"),Hto=o(" (mBART-50 model)"),Uto=l(),cs=a("li"),Ute=a("strong"),Jto=o("megatron-bert"),Yto=o(" \u2014 "),gP=a("a"),Kto=o("BertTokenizer"),Zto=o(" or "),hP=a("a"),eao=o("BertTokenizerFast"),oao=o(" (MegatronBert model)"),rao=l(),Ng=a("li"),Jte=a("strong"),tao=o("mluke"),aao=o(" \u2014 "),pP=a("a"),nao=o("MLukeTokenizer"),sao=o(" (mLUKE model)"),lao=l(),fs=a("li"),Yte=a("strong"),iao=o("mobilebert"),dao=o(" \u2014 "),_P=a("a"),cao=o("MobileBertTokenizer"),fao=o(" or "),uP=a("a"),mao=o("MobileBertTokenizerFast"),gao=o(" (MobileBERT model)"),hao=l(),ms=a("li"),Kte=a("strong"),pao=o("mpnet"),_ao=o(" \u2014 "),bP=a("a"),uao=o("MPNetTokenizer"),bao=o(" or "),vP=a("a"),vao=o("MPNetTokenizerFast"),Fao=o(" (MPNet model)"),Tao=l(),gs=a("li"),Zte=a("strong"),Mao=o("mt5"),Eao=o(" \u2014 "),FP=a("a"),Cao=o("MT5Tokenizer"),wao=o(" or "),TP=a("a"),Aao=o("MT5TokenizerFast"),yao=o(" (mT5 model)"),Lao=l(),hs=a("li"),eae=a("strong"),xao=o("nystromformer"),$ao=o(" \u2014 "),MP=a("a"),kao=o("AlbertTokenizer"),Sao=o(" or "),EP=a("a"),Rao=o("AlbertTokenizerFast"),Pao=o(" (Nystromformer model)"),Bao=l(),ps=a("li"),oae=a("strong"),Iao=o("openai-gpt"),qao=o(" \u2014 "),CP=a("a"),Nao=o("OpenAIGPTTokenizer"),jao=o(" or "),wP=a("a"),Dao=o("OpenAIGPTTokenizerFast"),Gao=o(" (OpenAI GPT model)"),Oao=l(),jg=a("li"),rae=a("strong"),Vao=o("opt"),Xao=o(" \u2014 "),AP=a("a"),zao=o("GPT2Tokenizer"),Wao=o(" (OPT model)"),Qao=l(),_s=a("li"),tae=a("strong"),Hao=o("pegasus"),Uao=o(" \u2014 "),yP=a("a"),Jao=o("PegasusTokenizer"),Yao=o(" or "),LP=a("a"),Kao=o("PegasusTokenizerFast"),Zao=o(" (Pegasus model)"),eno=l(),Dg=a("li"),aae=a("strong"),ono=o("perceiver"),rno=o(" \u2014 "),xP=a("a"),tno=o("PerceiverTokenizer"),ano=o(" (Perceiver model)"),nno=l(),Gg=a("li"),nae=a("strong"),sno=o("phobert"),lno=o(" \u2014 "),$P=a("a"),ino=o("PhobertTokenizer"),dno=o(" (PhoBERT model)"),cno=l(),Og=a("li"),sae=a("strong"),fno=o("plbart"),mno=o(" \u2014 "),kP=a("a"),gno=o("PLBartTokenizer"),hno=o(" (PLBart model)"),pno=l(),Vg=a("li"),lae=a("strong"),_no=o("prophetnet"),uno=o(" \u2014 "),SP=a("a"),bno=o("ProphetNetTokenizer"),vno=o(" (ProphetNet model)"),Fno=l(),us=a("li"),iae=a("strong"),Tno=o("qdqbert"),Mno=o(" \u2014 "),RP=a("a"),Eno=o("BertTokenizer"),Cno=o(" or "),PP=a("a"),wno=o("BertTokenizerFast"),Ano=o(" (QDQBert model)"),yno=l(),Xg=a("li"),dae=a("strong"),Lno=o("rag"),xno=o(" \u2014 "),BP=a("a"),$no=o("RagTokenizer"),kno=o(" (RAG model)"),Sno=l(),bs=a("li"),cae=a("strong"),Rno=o("realm"),Pno=o(" \u2014 "),IP=a("a"),Bno=o("RealmTokenizer"),Ino=o(" or "),qP=a("a"),qno=o("RealmTokenizerFast"),Nno=o(" (Realm model)"),jno=l(),vs=a("li"),fae=a("strong"),Dno=o("reformer"),Gno=o(" \u2014 "),NP=a("a"),Ono=o("ReformerTokenizer"),Vno=o(" or "),jP=a("a"),Xno=o("ReformerTokenizerFast"),zno=o(" (Reformer model)"),Wno=l(),Fs=a("li"),mae=a("strong"),Qno=o("rembert"),Hno=o(" \u2014 "),DP=a("a"),Uno=o("RemBertTokenizer"),Jno=o(" or "),GP=a("a"),Yno=o("RemBertTokenizerFast"),Kno=o(" (RemBERT model)"),Zno=l(),Ts=a("li"),gae=a("strong"),eso=o("retribert"),oso=o(" \u2014 "),OP=a("a"),rso=o("RetriBertTokenizer"),tso=o(" or "),VP=a("a"),aso=o("RetriBertTokenizerFast"),nso=o(" (RetriBERT model)"),sso=l(),Ms=a("li"),hae=a("strong"),lso=o("roberta"),iso=o(" \u2014 "),XP=a("a"),dso=o("RobertaTokenizer"),cso=o(" or "),zP=a("a"),fso=o("RobertaTokenizerFast"),mso=o(" (RoBERTa model)"),gso=l(),Es=a("li"),pae=a("strong"),hso=o("roformer"),pso=o(" \u2014 "),WP=a("a"),_so=o("RoFormerTokenizer"),uso=o(" or "),QP=a("a"),bso=o("RoFormerTokenizerFast"),vso=o(" (RoFormer model)"),Fso=l(),zg=a("li"),_ae=a("strong"),Tso=o("speech_to_text"),Mso=o(" \u2014 "),HP=a("a"),Eso=o("Speech2TextTokenizer"),Cso=o(" (Speech2Text model)"),wso=l(),Wg=a("li"),uae=a("strong"),Aso=o("speech_to_text_2"),yso=o(" \u2014 "),UP=a("a"),Lso=o("Speech2Text2Tokenizer"),xso=o(" (Speech2Text2 model)"),$so=l(),Cs=a("li"),bae=a("strong"),kso=o("splinter"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("SplinterTokenizer"),Pso=o(" or "),YP=a("a"),Bso=o("SplinterTokenizerFast"),Iso=o(" (Splinter model)"),qso=l(),ws=a("li"),vae=a("strong"),Nso=o("squeezebert"),jso=o(" \u2014 "),KP=a("a"),Dso=o("SqueezeBertTokenizer"),Gso=o(" or "),ZP=a("a"),Oso=o("SqueezeBertTokenizerFast"),Vso=o(" (SqueezeBERT model)"),Xso=l(),As=a("li"),Fae=a("strong"),zso=o("t5"),Wso=o(" \u2014 "),eB=a("a"),Qso=o("T5Tokenizer"),Hso=o(" or "),oB=a("a"),Uso=o("T5TokenizerFast"),Jso=o(" (T5 model)"),Yso=l(),Qg=a("li"),Tae=a("strong"),Kso=o("tapas"),Zso=o(" \u2014 "),rB=a("a"),elo=o("TapasTokenizer"),olo=o(" (TAPAS model)"),rlo=l(),Hg=a("li"),Mae=a("strong"),tlo=o("tapex"),alo=o(" \u2014 "),tB=a("a"),nlo=o("TapexTokenizer"),slo=o(" (TAPEX model)"),llo=l(),Ug=a("li"),Eae=a("strong"),ilo=o("transfo-xl"),dlo=o(" \u2014 "),aB=a("a"),clo=o("TransfoXLTokenizer"),flo=o(" (Transformer-XL model)"),mlo=l(),ys=a("li"),Cae=a("strong"),glo=o("visual_bert"),hlo=o(" \u2014 "),nB=a("a"),plo=o("BertTokenizer"),_lo=o(" or "),sB=a("a"),ulo=o("BertTokenizerFast"),blo=o(" (VisualBert model)"),vlo=l(),Jg=a("li"),wae=a("strong"),Flo=o("wav2vec2"),Tlo=o(" \u2014 "),lB=a("a"),Mlo=o("Wav2Vec2CTCTokenizer"),Elo=o(" (Wav2Vec2 model)"),Clo=l(),Yg=a("li"),Aae=a("strong"),wlo=o("wav2vec2-conformer"),Alo=o(" \u2014 "),iB=a("a"),ylo=o("Wav2Vec2CTCTokenizer"),Llo=o(" (Wav2Vec2-Conformer model)"),xlo=l(),Kg=a("li"),yae=a("strong"),$lo=o("wav2vec2_phoneme"),klo=o(" \u2014 "),dB=a("a"),Slo=o("Wav2Vec2PhonemeCTCTokenizer"),Rlo=o(" (Wav2Vec2Phoneme model)"),Plo=l(),Ls=a("li"),Lae=a("strong"),Blo=o("xglm"),Ilo=o(" \u2014 "),cB=a("a"),qlo=o("XGLMTokenizer"),Nlo=o(" or "),fB=a("a"),jlo=o("XGLMTokenizerFast"),Dlo=o(" (XGLM model)"),Glo=l(),Zg=a("li"),xae=a("strong"),Olo=o("xlm"),Vlo=o(" \u2014 "),mB=a("a"),Xlo=o("XLMTokenizer"),zlo=o(" (XLM model)"),Wlo=l(),eh=a("li"),$ae=a("strong"),Qlo=o("xlm-prophetnet"),Hlo=o(" \u2014 "),gB=a("a"),Ulo=o("XLMProphetNetTokenizer"),Jlo=o(" (XLMProphetNet model)"),Ylo=l(),xs=a("li"),kae=a("strong"),Klo=o("xlm-roberta"),Zlo=o(" \u2014 "),hB=a("a"),eio=o("XLMRobertaTokenizer"),oio=o(" or "),pB=a("a"),rio=o("XLMRobertaTokenizerFast"),tio=o(" (XLM-RoBERTa model)"),aio=l(),$s=a("li"),Sae=a("strong"),nio=o("xlm-roberta-xl"),sio=o(" \u2014 "),_B=a("a"),lio=o("RobertaTokenizer"),iio=o(" or "),uB=a("a"),dio=o("RobertaTokenizerFast"),cio=o(" (XLM-RoBERTa-XL model)"),fio=l(),ks=a("li"),Rae=a("strong"),mio=o("xlnet"),gio=o(" \u2014 "),bB=a("a"),hio=o("XLNetTokenizer"),pio=o(" or "),vB=a("a"),_io=o("XLNetTokenizerFast"),uio=o(" (XLNet model)"),bio=l(),Ss=a("li"),Pae=a("strong"),vio=o("yoso"),Fio=o(" \u2014 "),FB=a("a"),Tio=o("AlbertTokenizer"),Mio=o(" or "),TB=a("a"),Eio=o("AlbertTokenizerFast"),Cio=o(" (YOSO model)"),wio=l(),F(oh.$$.fragment),Aio=l(),rh=a("div"),F(kA.$$.fragment),yio=l(),Bae=a("p"),Lio=o("Register a new tokenizer in this mapping."),Cqe=l(),Ti=a("h2"),th=a("a"),Iae=a("span"),F(SA.$$.fragment),xio=l(),qae=a("span"),$io=o("AutoFeatureExtractor"),wqe=l(),Ao=a("div"),F(RA.$$.fragment),kio=l(),PA=a("p"),Sio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MB=a("a"),Rio=o("AutoFeatureExtractor.from_pretrained()"),Pio=o(" class method."),Bio=l(),BA=a("p"),Iio=o("This class cannot be instantiated directly using "),Nae=a("code"),qio=o("__init__()"),Nio=o(" (throws an error)."),jio=l(),He=a("div"),F(IA.$$.fragment),Dio=l(),jae=a("p"),Gio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Oio=l(),ya=a("p"),Vio=o("The feature extractor class to instantiate is selected based on the "),Dae=a("code"),Xio=o("model_type"),zio=o(` property of the config object
(either passed as an argument or loaded from `),Gae=a("code"),Wio=o("pretrained_model_name_or_path"),Qio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Oae=a("code"),Hio=o("pretrained_model_name_or_path"),Uio=o(":"),Jio=l(),Z=a("ul"),ah=a("li"),Vae=a("strong"),Yio=o("beit"),Kio=o(" \u2014 "),EB=a("a"),Zio=o("BeitFeatureExtractor"),edo=o(" (BEiT model)"),odo=l(),nh=a("li"),Xae=a("strong"),rdo=o("clip"),tdo=o(" \u2014 "),CB=a("a"),ado=o("CLIPFeatureExtractor"),ndo=o(" (CLIP model)"),sdo=l(),sh=a("li"),zae=a("strong"),ldo=o("convnext"),ido=o(" \u2014 "),wB=a("a"),ddo=o("ConvNextFeatureExtractor"),cdo=o(" (ConvNext model)"),fdo=l(),lh=a("li"),Wae=a("strong"),mdo=o("cvt"),gdo=o(" \u2014 "),AB=a("a"),hdo=o("ConvNextFeatureExtractor"),pdo=o(" (CvT model)"),_do=l(),ih=a("li"),Qae=a("strong"),udo=o("data2vec-audio"),bdo=o(" \u2014 "),yB=a("a"),vdo=o("Wav2Vec2FeatureExtractor"),Fdo=o(" (Data2VecAudio model)"),Tdo=l(),dh=a("li"),Hae=a("strong"),Mdo=o("data2vec-vision"),Edo=o(" \u2014 "),LB=a("a"),Cdo=o("BeitFeatureExtractor"),wdo=o(" (Data2VecVision model)"),Ado=l(),ch=a("li"),Uae=a("strong"),ydo=o("deit"),Ldo=o(" \u2014 "),xB=a("a"),xdo=o("DeiTFeatureExtractor"),$do=o(" (DeiT model)"),kdo=l(),fh=a("li"),Jae=a("strong"),Sdo=o("detr"),Rdo=o(" \u2014 "),$B=a("a"),Pdo=o("DetrFeatureExtractor"),Bdo=o(" (DETR model)"),Ido=l(),mh=a("li"),Yae=a("strong"),qdo=o("dpt"),Ndo=o(" \u2014 "),kB=a("a"),jdo=o("DPTFeatureExtractor"),Ddo=o(" (DPT model)"),Gdo=l(),gh=a("li"),Kae=a("strong"),Odo=o("flava"),Vdo=o(" \u2014 "),SB=a("a"),Xdo=o("FlavaFeatureExtractor"),zdo=o(" (Flava model)"),Wdo=l(),hh=a("li"),Zae=a("strong"),Qdo=o("glpn"),Hdo=o(" \u2014 "),RB=a("a"),Udo=o("GLPNFeatureExtractor"),Jdo=o(" (GLPN model)"),Ydo=l(),ph=a("li"),ene=a("strong"),Kdo=o("hubert"),Zdo=o(" \u2014 "),PB=a("a"),eco=o("Wav2Vec2FeatureExtractor"),oco=o(" (Hubert model)"),rco=l(),_h=a("li"),one=a("strong"),tco=o("layoutlmv2"),aco=o(" \u2014 "),BB=a("a"),nco=o("LayoutLMv2FeatureExtractor"),sco=o(" (LayoutLMv2 model)"),lco=l(),uh=a("li"),rne=a("strong"),ico=o("maskformer"),dco=o(" \u2014 "),IB=a("a"),cco=o("MaskFormerFeatureExtractor"),fco=o(" (MaskFormer model)"),mco=l(),bh=a("li"),tne=a("strong"),gco=o("perceiver"),hco=o(" \u2014 "),qB=a("a"),pco=o("PerceiverFeatureExtractor"),_co=o(" (Perceiver model)"),uco=l(),vh=a("li"),ane=a("strong"),bco=o("poolformer"),vco=o(" \u2014 "),NB=a("a"),Fco=o("PoolFormerFeatureExtractor"),Tco=o(" (PoolFormer model)"),Mco=l(),Fh=a("li"),nne=a("strong"),Eco=o("regnet"),Cco=o(" \u2014 "),jB=a("a"),wco=o("ConvNextFeatureExtractor"),Aco=o(" (RegNet model)"),yco=l(),Th=a("li"),sne=a("strong"),Lco=o("resnet"),xco=o(" \u2014 "),DB=a("a"),$co=o("ConvNextFeatureExtractor"),kco=o(" (ResNet model)"),Sco=l(),Mh=a("li"),lne=a("strong"),Rco=o("segformer"),Pco=o(" \u2014 "),GB=a("a"),Bco=o("SegformerFeatureExtractor"),Ico=o(" (SegFormer model)"),qco=l(),Eh=a("li"),ine=a("strong"),Nco=o("speech_to_text"),jco=o(" \u2014 "),OB=a("a"),Dco=o("Speech2TextFeatureExtractor"),Gco=o(" (Speech2Text model)"),Oco=l(),Ch=a("li"),dne=a("strong"),Vco=o("swin"),Xco=o(" \u2014 "),VB=a("a"),zco=o("ViTFeatureExtractor"),Wco=o(" (Swin model)"),Qco=l(),wh=a("li"),cne=a("strong"),Hco=o("van"),Uco=o(" \u2014 "),XB=a("a"),Jco=o("ConvNextFeatureExtractor"),Yco=o(" (VAN model)"),Kco=l(),Ah=a("li"),fne=a("strong"),Zco=o("vit"),efo=o(" \u2014 "),zB=a("a"),ofo=o("ViTFeatureExtractor"),rfo=o(" (ViT model)"),tfo=l(),yh=a("li"),mne=a("strong"),afo=o("vit_mae"),nfo=o(" \u2014 "),WB=a("a"),sfo=o("ViTFeatureExtractor"),lfo=o(" (ViTMAE model)"),ifo=l(),Lh=a("li"),gne=a("strong"),dfo=o("wav2vec2"),cfo=o(" \u2014 "),QB=a("a"),ffo=o("Wav2Vec2FeatureExtractor"),mfo=o(" (Wav2Vec2 model)"),gfo=l(),xh=a("li"),hne=a("strong"),hfo=o("wav2vec2-conformer"),pfo=o(" \u2014 "),HB=a("a"),_fo=o("Wav2Vec2FeatureExtractor"),ufo=o(" (Wav2Vec2-Conformer model)"),bfo=l(),$h=a("li"),pne=a("strong"),vfo=o("yolos"),Ffo=o(" \u2014 "),UB=a("a"),Tfo=o("YolosFeatureExtractor"),Mfo=o(" (YOLOS model)"),Efo=l(),F(kh.$$.fragment),Cfo=l(),F(Sh.$$.fragment),wfo=l(),Rh=a("div"),F(qA.$$.fragment),Afo=l(),_ne=a("p"),yfo=o("Register a new feature extractor for this class."),Aqe=l(),Mi=a("h2"),Ph=a("a"),une=a("span"),F(NA.$$.fragment),Lfo=l(),bne=a("span"),xfo=o("AutoProcessor"),yqe=l(),yo=a("div"),F(jA.$$.fragment),$fo=l(),DA=a("p"),kfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),JB=a("a"),Sfo=o("AutoProcessor.from_pretrained()"),Rfo=o(" class method."),Pfo=l(),GA=a("p"),Bfo=o("This class cannot be instantiated directly using "),vne=a("code"),Ifo=o("__init__()"),qfo=o(" (throws an error)."),Nfo=l(),Ue=a("div"),F(OA.$$.fragment),jfo=l(),Fne=a("p"),Dfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Gfo=l(),Ei=a("p"),Ofo=o("The processor class to instantiate is selected based on the "),Tne=a("code"),Vfo=o("model_type"),Xfo=o(` property of the config object (either
passed as an argument or loaded from `),Mne=a("code"),zfo=o("pretrained_model_name_or_path"),Wfo=o(" if possible):"),Qfo=l(),pe=a("ul"),Bh=a("li"),Ene=a("strong"),Hfo=o("clip"),Ufo=o(" \u2014 "),YB=a("a"),Jfo=o("CLIPProcessor"),Yfo=o(" (CLIP model)"),Kfo=l(),Ih=a("li"),Cne=a("strong"),Zfo=o("flava"),emo=o(" \u2014 "),wne=a("code"),omo=o("FLAVAProcessor"),rmo=o(" (Flava model)"),tmo=l(),qh=a("li"),Ane=a("strong"),amo=o("layoutlmv2"),nmo=o(" \u2014 "),KB=a("a"),smo=o("LayoutLMv2Processor"),lmo=o(" (LayoutLMv2 model)"),imo=l(),Nh=a("li"),yne=a("strong"),dmo=o("layoutxlm"),cmo=o(" \u2014 "),ZB=a("a"),fmo=o("LayoutXLMProcessor"),mmo=o(" (LayoutXLM model)"),gmo=l(),jh=a("li"),Lne=a("strong"),hmo=o("sew"),pmo=o(" \u2014 "),eI=a("a"),_mo=o("Wav2Vec2Processor"),umo=o(" (SEW model)"),bmo=l(),Dh=a("li"),xne=a("strong"),vmo=o("sew-d"),Fmo=o(" \u2014 "),oI=a("a"),Tmo=o("Wav2Vec2Processor"),Mmo=o(" (SEW-D model)"),Emo=l(),Gh=a("li"),$ne=a("strong"),Cmo=o("speech_to_text"),wmo=o(" \u2014 "),rI=a("a"),Amo=o("Speech2TextProcessor"),ymo=o(" (Speech2Text model)"),Lmo=l(),Oh=a("li"),kne=a("strong"),xmo=o("speech_to_text_2"),$mo=o(" \u2014 "),tI=a("a"),kmo=o("Speech2Text2Processor"),Smo=o(" (Speech2Text2 model)"),Rmo=l(),Vh=a("li"),Sne=a("strong"),Pmo=o("trocr"),Bmo=o(" \u2014 "),aI=a("a"),Imo=o("TrOCRProcessor"),qmo=o(" (TrOCR model)"),Nmo=l(),Xh=a("li"),Rne=a("strong"),jmo=o("unispeech"),Dmo=o(" \u2014 "),nI=a("a"),Gmo=o("Wav2Vec2Processor"),Omo=o(" (UniSpeech model)"),Vmo=l(),zh=a("li"),Pne=a("strong"),Xmo=o("unispeech-sat"),zmo=o(" \u2014 "),sI=a("a"),Wmo=o("Wav2Vec2Processor"),Qmo=o(" (UniSpeechSat model)"),Hmo=l(),Wh=a("li"),Bne=a("strong"),Umo=o("vilt"),Jmo=o(" \u2014 "),lI=a("a"),Ymo=o("ViltProcessor"),Kmo=o(" (ViLT model)"),Zmo=l(),Qh=a("li"),Ine=a("strong"),ego=o("vision-text-dual-encoder"),ogo=o(" \u2014 "),iI=a("a"),rgo=o("VisionTextDualEncoderProcessor"),tgo=o(" (VisionTextDualEncoder model)"),ago=l(),Hh=a("li"),qne=a("strong"),ngo=o("wav2vec2"),sgo=o(" \u2014 "),dI=a("a"),lgo=o("Wav2Vec2Processor"),igo=o(" (Wav2Vec2 model)"),dgo=l(),Uh=a("li"),Nne=a("strong"),cgo=o("wav2vec2-conformer"),fgo=o(" \u2014 "),cI=a("a"),mgo=o("Wav2Vec2Processor"),ggo=o(" (Wav2Vec2-Conformer model)"),hgo=l(),Jh=a("li"),jne=a("strong"),pgo=o("wavlm"),_go=o(" \u2014 "),fI=a("a"),ugo=o("Wav2Vec2Processor"),bgo=o(" (WavLM model)"),vgo=l(),F(Yh.$$.fragment),Fgo=l(),F(Kh.$$.fragment),Tgo=l(),Zh=a("div"),F(VA.$$.fragment),Mgo=l(),Dne=a("p"),Ego=o("Register a new processor for this class."),Lqe=l(),Ci=a("h2"),ep=a("a"),Gne=a("span"),F(XA.$$.fragment),Cgo=l(),One=a("span"),wgo=o("AutoModel"),xqe=l(),Lo=a("div"),F(zA.$$.fragment),Ago=l(),wi=a("p"),ygo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mI=a("a"),Lgo=o("from_pretrained()"),xgo=o(" class method or the "),gI=a("a"),$go=o("from_config()"),kgo=o(` class
method.`),Sgo=l(),WA=a("p"),Rgo=o("This class cannot be instantiated directly using "),Vne=a("code"),Pgo=o("__init__()"),Bgo=o(" (throws an error)."),Igo=l(),tt=a("div"),F(QA.$$.fragment),qgo=l(),Xne=a("p"),Ngo=o("Instantiates one of the base model classes of the library from a configuration."),jgo=l(),Ai=a("p"),Dgo=o(`Note:
Loading a model from its configuration file does `),zne=a("strong"),Ggo=o("not"),Ogo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hI=a("a"),Vgo=o("from_pretrained()"),Xgo=o(" to load the model weights."),zgo=l(),F(op.$$.fragment),Wgo=l(),Je=a("div"),F(HA.$$.fragment),Qgo=l(),Wne=a("p"),Hgo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ugo=l(),La=a("p"),Jgo=o("The model class to instantiate is selected based on the "),Qne=a("code"),Ygo=o("model_type"),Kgo=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),Zgo=o("pretrained_model_name_or_path"),eho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=a("code"),oho=o("pretrained_model_name_or_path"),rho=o(":"),tho=l(),x=a("ul"),rp=a("li"),Jne=a("strong"),aho=o("albert"),nho=o(" \u2014 "),pI=a("a"),sho=o("AlbertModel"),lho=o(" (ALBERT model)"),iho=l(),tp=a("li"),Yne=a("strong"),dho=o("bart"),cho=o(" \u2014 "),_I=a("a"),fho=o("BartModel"),mho=o(" (BART model)"),gho=l(),ap=a("li"),Kne=a("strong"),hho=o("beit"),pho=o(" \u2014 "),uI=a("a"),_ho=o("BeitModel"),uho=o(" (BEiT model)"),bho=l(),np=a("li"),Zne=a("strong"),vho=o("bert"),Fho=o(" \u2014 "),bI=a("a"),Tho=o("BertModel"),Mho=o(" (BERT model)"),Eho=l(),sp=a("li"),ese=a("strong"),Cho=o("bert-generation"),who=o(" \u2014 "),vI=a("a"),Aho=o("BertGenerationEncoder"),yho=o(" (Bert Generation model)"),Lho=l(),lp=a("li"),ose=a("strong"),xho=o("big_bird"),$ho=o(" \u2014 "),FI=a("a"),kho=o("BigBirdModel"),Sho=o(" (BigBird model)"),Rho=l(),ip=a("li"),rse=a("strong"),Pho=o("bigbird_pegasus"),Bho=o(" \u2014 "),TI=a("a"),Iho=o("BigBirdPegasusModel"),qho=o(" (BigBirdPegasus model)"),Nho=l(),dp=a("li"),tse=a("strong"),jho=o("blenderbot"),Dho=o(" \u2014 "),MI=a("a"),Gho=o("BlenderbotModel"),Oho=o(" (Blenderbot model)"),Vho=l(),cp=a("li"),ase=a("strong"),Xho=o("blenderbot-small"),zho=o(" \u2014 "),EI=a("a"),Who=o("BlenderbotSmallModel"),Qho=o(" (BlenderbotSmall model)"),Hho=l(),fp=a("li"),nse=a("strong"),Uho=o("camembert"),Jho=o(" \u2014 "),CI=a("a"),Yho=o("CamembertModel"),Kho=o(" (CamemBERT model)"),Zho=l(),mp=a("li"),sse=a("strong"),epo=o("canine"),opo=o(" \u2014 "),wI=a("a"),rpo=o("CanineModel"),tpo=o(" (Canine model)"),apo=l(),gp=a("li"),lse=a("strong"),npo=o("clip"),spo=o(" \u2014 "),AI=a("a"),lpo=o("CLIPModel"),ipo=o(" (CLIP model)"),dpo=l(),hp=a("li"),ise=a("strong"),cpo=o("convbert"),fpo=o(" \u2014 "),yI=a("a"),mpo=o("ConvBertModel"),gpo=o(" (ConvBERT model)"),hpo=l(),pp=a("li"),dse=a("strong"),ppo=o("convnext"),_po=o(" \u2014 "),LI=a("a"),upo=o("ConvNextModel"),bpo=o(" (ConvNext model)"),vpo=l(),_p=a("li"),cse=a("strong"),Fpo=o("ctrl"),Tpo=o(" \u2014 "),xI=a("a"),Mpo=o("CTRLModel"),Epo=o(" (CTRL model)"),Cpo=l(),up=a("li"),fse=a("strong"),wpo=o("cvt"),Apo=o(" \u2014 "),$I=a("a"),ypo=o("CvtModel"),Lpo=o(" (CvT model)"),xpo=l(),bp=a("li"),mse=a("strong"),$po=o("data2vec-audio"),kpo=o(" \u2014 "),kI=a("a"),Spo=o("Data2VecAudioModel"),Rpo=o(" (Data2VecAudio model)"),Ppo=l(),vp=a("li"),gse=a("strong"),Bpo=o("data2vec-text"),Ipo=o(" \u2014 "),SI=a("a"),qpo=o("Data2VecTextModel"),Npo=o(" (Data2VecText model)"),jpo=l(),Fp=a("li"),hse=a("strong"),Dpo=o("data2vec-vision"),Gpo=o(" \u2014 "),RI=a("a"),Opo=o("Data2VecVisionModel"),Vpo=o(" (Data2VecVision model)"),Xpo=l(),Tp=a("li"),pse=a("strong"),zpo=o("deberta"),Wpo=o(" \u2014 "),PI=a("a"),Qpo=o("DebertaModel"),Hpo=o(" (DeBERTa model)"),Upo=l(),Mp=a("li"),_se=a("strong"),Jpo=o("deberta-v2"),Ypo=o(" \u2014 "),BI=a("a"),Kpo=o("DebertaV2Model"),Zpo=o(" (DeBERTa-v2 model)"),e_o=l(),Ep=a("li"),use=a("strong"),o_o=o("decision_transformer"),r_o=o(" \u2014 "),II=a("a"),t_o=o("DecisionTransformerModel"),a_o=o(" (Decision Transformer model)"),n_o=l(),Cp=a("li"),bse=a("strong"),s_o=o("deit"),l_o=o(" \u2014 "),qI=a("a"),i_o=o("DeiTModel"),d_o=o(" (DeiT model)"),c_o=l(),wp=a("li"),vse=a("strong"),f_o=o("detr"),m_o=o(" \u2014 "),NI=a("a"),g_o=o("DetrModel"),h_o=o(" (DETR model)"),p_o=l(),Ap=a("li"),Fse=a("strong"),__o=o("distilbert"),u_o=o(" \u2014 "),jI=a("a"),b_o=o("DistilBertModel"),v_o=o(" (DistilBERT model)"),F_o=l(),yp=a("li"),Tse=a("strong"),T_o=o("dpr"),M_o=o(" \u2014 "),DI=a("a"),E_o=o("DPRQuestionEncoder"),C_o=o(" (DPR model)"),w_o=l(),Lp=a("li"),Mse=a("strong"),A_o=o("dpt"),y_o=o(" \u2014 "),GI=a("a"),L_o=o("DPTModel"),x_o=o(" (DPT model)"),$_o=l(),xp=a("li"),Ese=a("strong"),k_o=o("electra"),S_o=o(" \u2014 "),OI=a("a"),R_o=o("ElectraModel"),P_o=o(" (ELECTRA model)"),B_o=l(),$p=a("li"),Cse=a("strong"),I_o=o("flaubert"),q_o=o(" \u2014 "),VI=a("a"),N_o=o("FlaubertModel"),j_o=o(" (FlauBERT model)"),D_o=l(),kp=a("li"),wse=a("strong"),G_o=o("flava"),O_o=o(" \u2014 "),XI=a("a"),V_o=o("FlavaModel"),X_o=o(" (Flava model)"),z_o=l(),Sp=a("li"),Ase=a("strong"),W_o=o("fnet"),Q_o=o(" \u2014 "),zI=a("a"),H_o=o("FNetModel"),U_o=o(" (FNet model)"),J_o=l(),Rp=a("li"),yse=a("strong"),Y_o=o("fsmt"),K_o=o(" \u2014 "),WI=a("a"),Z_o=o("FSMTModel"),euo=o(" (FairSeq Machine-Translation model)"),ouo=l(),Rs=a("li"),Lse=a("strong"),ruo=o("funnel"),tuo=o(" \u2014 "),QI=a("a"),auo=o("FunnelModel"),nuo=o(" or "),HI=a("a"),suo=o("FunnelBaseModel"),luo=o(" (Funnel Transformer model)"),iuo=l(),Pp=a("li"),xse=a("strong"),duo=o("glpn"),cuo=o(" \u2014 "),UI=a("a"),fuo=o("GLPNModel"),muo=o(" (GLPN model)"),guo=l(),Bp=a("li"),$se=a("strong"),huo=o("gpt2"),puo=o(" \u2014 "),JI=a("a"),_uo=o("GPT2Model"),uuo=o(" (OpenAI GPT-2 model)"),buo=l(),Ip=a("li"),kse=a("strong"),vuo=o("gpt_neo"),Fuo=o(" \u2014 "),YI=a("a"),Tuo=o("GPTNeoModel"),Muo=o(" (GPT Neo model)"),Euo=l(),qp=a("li"),Sse=a("strong"),Cuo=o("gpt_neox"),wuo=o(" \u2014 "),KI=a("a"),Auo=o("GPTNeoXModel"),yuo=o(" (GPT NeoX model)"),Luo=l(),Np=a("li"),Rse=a("strong"),xuo=o("gptj"),$uo=o(" \u2014 "),ZI=a("a"),kuo=o("GPTJModel"),Suo=o(" (GPT-J model)"),Ruo=l(),jp=a("li"),Pse=a("strong"),Puo=o("hubert"),Buo=o(" \u2014 "),eq=a("a"),Iuo=o("HubertModel"),quo=o(" (Hubert model)"),Nuo=l(),Dp=a("li"),Bse=a("strong"),juo=o("ibert"),Duo=o(" \u2014 "),oq=a("a"),Guo=o("IBertModel"),Ouo=o(" (I-BERT model)"),Vuo=l(),Gp=a("li"),Ise=a("strong"),Xuo=o("imagegpt"),zuo=o(" \u2014 "),rq=a("a"),Wuo=o("ImageGPTModel"),Quo=o(" (ImageGPT model)"),Huo=l(),Op=a("li"),qse=a("strong"),Uuo=o("layoutlm"),Juo=o(" \u2014 "),tq=a("a"),Yuo=o("LayoutLMModel"),Kuo=o(" (LayoutLM model)"),Zuo=l(),Vp=a("li"),Nse=a("strong"),e6o=o("layoutlmv2"),o6o=o(" \u2014 "),aq=a("a"),r6o=o("LayoutLMv2Model"),t6o=o(" (LayoutLMv2 model)"),a6o=l(),Xp=a("li"),jse=a("strong"),n6o=o("led"),s6o=o(" \u2014 "),nq=a("a"),l6o=o("LEDModel"),i6o=o(" (LED model)"),d6o=l(),zp=a("li"),Dse=a("strong"),c6o=o("longformer"),f6o=o(" \u2014 "),sq=a("a"),m6o=o("LongformerModel"),g6o=o(" (Longformer model)"),h6o=l(),Wp=a("li"),Gse=a("strong"),p6o=o("luke"),_6o=o(" \u2014 "),lq=a("a"),u6o=o("LukeModel"),b6o=o(" (LUKE model)"),v6o=l(),Qp=a("li"),Ose=a("strong"),F6o=o("lxmert"),T6o=o(" \u2014 "),iq=a("a"),M6o=o("LxmertModel"),E6o=o(" (LXMERT model)"),C6o=l(),Hp=a("li"),Vse=a("strong"),w6o=o("m2m_100"),A6o=o(" \u2014 "),dq=a("a"),y6o=o("M2M100Model"),L6o=o(" (M2M100 model)"),x6o=l(),Up=a("li"),Xse=a("strong"),$6o=o("marian"),k6o=o(" \u2014 "),cq=a("a"),S6o=o("MarianModel"),R6o=o(" (Marian model)"),P6o=l(),Jp=a("li"),zse=a("strong"),B6o=o("maskformer"),I6o=o(" \u2014 "),fq=a("a"),q6o=o("MaskFormerModel"),N6o=o(" (MaskFormer model)"),j6o=l(),Yp=a("li"),Wse=a("strong"),D6o=o("mbart"),G6o=o(" \u2014 "),mq=a("a"),O6o=o("MBartModel"),V6o=o(" (mBART model)"),X6o=l(),Kp=a("li"),Qse=a("strong"),z6o=o("megatron-bert"),W6o=o(" \u2014 "),gq=a("a"),Q6o=o("MegatronBertModel"),H6o=o(" (MegatronBert model)"),U6o=l(),Zp=a("li"),Hse=a("strong"),J6o=o("mobilebert"),Y6o=o(" \u2014 "),hq=a("a"),K6o=o("MobileBertModel"),Z6o=o(" (MobileBERT model)"),e1o=l(),e_=a("li"),Use=a("strong"),o1o=o("mpnet"),r1o=o(" \u2014 "),pq=a("a"),t1o=o("MPNetModel"),a1o=o(" (MPNet model)"),n1o=l(),o_=a("li"),Jse=a("strong"),s1o=o("mt5"),l1o=o(" \u2014 "),_q=a("a"),i1o=o("MT5Model"),d1o=o(" (mT5 model)"),c1o=l(),r_=a("li"),Yse=a("strong"),f1o=o("nystromformer"),m1o=o(" \u2014 "),uq=a("a"),g1o=o("NystromformerModel"),h1o=o(" (Nystromformer model)"),p1o=l(),t_=a("li"),Kse=a("strong"),_1o=o("openai-gpt"),u1o=o(" \u2014 "),bq=a("a"),b1o=o("OpenAIGPTModel"),v1o=o(" (OpenAI GPT model)"),F1o=l(),a_=a("li"),Zse=a("strong"),T1o=o("opt"),M1o=o(" \u2014 "),vq=a("a"),E1o=o("OPTModel"),C1o=o(" (OPT model)"),w1o=l(),n_=a("li"),ele=a("strong"),A1o=o("pegasus"),y1o=o(" \u2014 "),Fq=a("a"),L1o=o("PegasusModel"),x1o=o(" (Pegasus model)"),$1o=l(),s_=a("li"),ole=a("strong"),k1o=o("perceiver"),S1o=o(" \u2014 "),Tq=a("a"),R1o=o("PerceiverModel"),P1o=o(" (Perceiver model)"),B1o=l(),l_=a("li"),rle=a("strong"),I1o=o("plbart"),q1o=o(" \u2014 "),Mq=a("a"),N1o=o("PLBartModel"),j1o=o(" (PLBart model)"),D1o=l(),i_=a("li"),tle=a("strong"),G1o=o("poolformer"),O1o=o(" \u2014 "),Eq=a("a"),V1o=o("PoolFormerModel"),X1o=o(" (PoolFormer model)"),z1o=l(),d_=a("li"),ale=a("strong"),W1o=o("prophetnet"),Q1o=o(" \u2014 "),Cq=a("a"),H1o=o("ProphetNetModel"),U1o=o(" (ProphetNet model)"),J1o=l(),c_=a("li"),nle=a("strong"),Y1o=o("qdqbert"),K1o=o(" \u2014 "),wq=a("a"),Z1o=o("QDQBertModel"),ebo=o(" (QDQBert model)"),obo=l(),f_=a("li"),sle=a("strong"),rbo=o("reformer"),tbo=o(" \u2014 "),Aq=a("a"),abo=o("ReformerModel"),nbo=o(" (Reformer model)"),sbo=l(),m_=a("li"),lle=a("strong"),lbo=o("regnet"),ibo=o(" \u2014 "),yq=a("a"),dbo=o("RegNetModel"),cbo=o(" (RegNet model)"),fbo=l(),g_=a("li"),ile=a("strong"),mbo=o("rembert"),gbo=o(" \u2014 "),Lq=a("a"),hbo=o("RemBertModel"),pbo=o(" (RemBERT model)"),_bo=l(),h_=a("li"),dle=a("strong"),ubo=o("resnet"),bbo=o(" \u2014 "),xq=a("a"),vbo=o("ResNetModel"),Fbo=o(" (ResNet model)"),Tbo=l(),p_=a("li"),cle=a("strong"),Mbo=o("retribert"),Ebo=o(" \u2014 "),$q=a("a"),Cbo=o("RetriBertModel"),wbo=o(" (RetriBERT model)"),Abo=l(),__=a("li"),fle=a("strong"),ybo=o("roberta"),Lbo=o(" \u2014 "),kq=a("a"),xbo=o("RobertaModel"),$bo=o(" (RoBERTa model)"),kbo=l(),u_=a("li"),mle=a("strong"),Sbo=o("roformer"),Rbo=o(" \u2014 "),Sq=a("a"),Pbo=o("RoFormerModel"),Bbo=o(" (RoFormer model)"),Ibo=l(),b_=a("li"),gle=a("strong"),qbo=o("segformer"),Nbo=o(" \u2014 "),Rq=a("a"),jbo=o("SegformerModel"),Dbo=o(" (SegFormer model)"),Gbo=l(),v_=a("li"),hle=a("strong"),Obo=o("sew"),Vbo=o(" \u2014 "),Pq=a("a"),Xbo=o("SEWModel"),zbo=o(" (SEW model)"),Wbo=l(),F_=a("li"),ple=a("strong"),Qbo=o("sew-d"),Hbo=o(" \u2014 "),Bq=a("a"),Ubo=o("SEWDModel"),Jbo=o(" (SEW-D model)"),Ybo=l(),T_=a("li"),_le=a("strong"),Kbo=o("speech_to_text"),Zbo=o(" \u2014 "),Iq=a("a"),e2o=o("Speech2TextModel"),o2o=o(" (Speech2Text model)"),r2o=l(),M_=a("li"),ule=a("strong"),t2o=o("splinter"),a2o=o(" \u2014 "),qq=a("a"),n2o=o("SplinterModel"),s2o=o(" (Splinter model)"),l2o=l(),E_=a("li"),ble=a("strong"),i2o=o("squeezebert"),d2o=o(" \u2014 "),Nq=a("a"),c2o=o("SqueezeBertModel"),f2o=o(" (SqueezeBERT model)"),m2o=l(),C_=a("li"),vle=a("strong"),g2o=o("swin"),h2o=o(" \u2014 "),jq=a("a"),p2o=o("SwinModel"),_2o=o(" (Swin model)"),u2o=l(),w_=a("li"),Fle=a("strong"),b2o=o("t5"),v2o=o(" \u2014 "),Dq=a("a"),F2o=o("T5Model"),T2o=o(" (T5 model)"),M2o=l(),A_=a("li"),Tle=a("strong"),E2o=o("tapas"),C2o=o(" \u2014 "),Gq=a("a"),w2o=o("TapasModel"),A2o=o(" (TAPAS model)"),y2o=l(),y_=a("li"),Mle=a("strong"),L2o=o("trajectory_transformer"),x2o=o(" \u2014 "),Oq=a("a"),$2o=o("TrajectoryTransformerModel"),k2o=o(" (Trajectory Transformer model)"),S2o=l(),L_=a("li"),Ele=a("strong"),R2o=o("transfo-xl"),P2o=o(" \u2014 "),Vq=a("a"),B2o=o("TransfoXLModel"),I2o=o(" (Transformer-XL model)"),q2o=l(),x_=a("li"),Cle=a("strong"),N2o=o("unispeech"),j2o=o(" \u2014 "),Xq=a("a"),D2o=o("UniSpeechModel"),G2o=o(" (UniSpeech model)"),O2o=l(),$_=a("li"),wle=a("strong"),V2o=o("unispeech-sat"),X2o=o(" \u2014 "),zq=a("a"),z2o=o("UniSpeechSatModel"),W2o=o(" (UniSpeechSat model)"),Q2o=l(),k_=a("li"),Ale=a("strong"),H2o=o("van"),U2o=o(" \u2014 "),Wq=a("a"),J2o=o("VanModel"),Y2o=o(" (VAN model)"),K2o=l(),S_=a("li"),yle=a("strong"),Z2o=o("vilt"),e5o=o(" \u2014 "),Qq=a("a"),o5o=o("ViltModel"),r5o=o(" (ViLT model)"),t5o=l(),R_=a("li"),Lle=a("strong"),a5o=o("vision-text-dual-encoder"),n5o=o(" \u2014 "),Hq=a("a"),s5o=o("VisionTextDualEncoderModel"),l5o=o(" (VisionTextDualEncoder model)"),i5o=l(),P_=a("li"),xle=a("strong"),d5o=o("visual_bert"),c5o=o(" \u2014 "),Uq=a("a"),f5o=o("VisualBertModel"),m5o=o(" (VisualBert model)"),g5o=l(),B_=a("li"),$le=a("strong"),h5o=o("vit"),p5o=o(" \u2014 "),Jq=a("a"),_5o=o("ViTModel"),u5o=o(" (ViT model)"),b5o=l(),I_=a("li"),kle=a("strong"),v5o=o("vit_mae"),F5o=o(" \u2014 "),Yq=a("a"),T5o=o("ViTMAEModel"),M5o=o(" (ViTMAE model)"),E5o=l(),q_=a("li"),Sle=a("strong"),C5o=o("wav2vec2"),w5o=o(" \u2014 "),Kq=a("a"),A5o=o("Wav2Vec2Model"),y5o=o(" (Wav2Vec2 model)"),L5o=l(),N_=a("li"),Rle=a("strong"),x5o=o("wav2vec2-conformer"),$5o=o(" \u2014 "),Zq=a("a"),k5o=o("Wav2Vec2ConformerModel"),S5o=o(" (Wav2Vec2-Conformer model)"),R5o=l(),j_=a("li"),Ple=a("strong"),P5o=o("wavlm"),B5o=o(" \u2014 "),eN=a("a"),I5o=o("WavLMModel"),q5o=o(" (WavLM model)"),N5o=l(),D_=a("li"),Ble=a("strong"),j5o=o("xglm"),D5o=o(" \u2014 "),oN=a("a"),G5o=o("XGLMModel"),O5o=o(" (XGLM model)"),V5o=l(),G_=a("li"),Ile=a("strong"),X5o=o("xlm"),z5o=o(" \u2014 "),rN=a("a"),W5o=o("XLMModel"),Q5o=o(" (XLM model)"),H5o=l(),O_=a("li"),qle=a("strong"),U5o=o("xlm-prophetnet"),J5o=o(" \u2014 "),tN=a("a"),Y5o=o("XLMProphetNetModel"),K5o=o(" (XLMProphetNet model)"),Z5o=l(),V_=a("li"),Nle=a("strong"),evo=o("xlm-roberta"),ovo=o(" \u2014 "),aN=a("a"),rvo=o("XLMRobertaModel"),tvo=o(" (XLM-RoBERTa model)"),avo=l(),X_=a("li"),jle=a("strong"),nvo=o("xlm-roberta-xl"),svo=o(" \u2014 "),nN=a("a"),lvo=o("XLMRobertaXLModel"),ivo=o(" (XLM-RoBERTa-XL model)"),dvo=l(),z_=a("li"),Dle=a("strong"),cvo=o("xlnet"),fvo=o(" \u2014 "),sN=a("a"),mvo=o("XLNetModel"),gvo=o(" (XLNet model)"),hvo=l(),W_=a("li"),Gle=a("strong"),pvo=o("yolos"),_vo=o(" \u2014 "),lN=a("a"),uvo=o("YolosModel"),bvo=o(" (YOLOS model)"),vvo=l(),Q_=a("li"),Ole=a("strong"),Fvo=o("yoso"),Tvo=o(" \u2014 "),iN=a("a"),Mvo=o("YosoModel"),Evo=o(" (YOSO model)"),Cvo=l(),H_=a("p"),wvo=o("The model is set in evaluation mode by default using "),Vle=a("code"),Avo=o("model.eval()"),yvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xle=a("code"),Lvo=o("model.train()"),xvo=l(),F(U_.$$.fragment),$qe=l(),yi=a("h2"),J_=a("a"),zle=a("span"),F(UA.$$.fragment),$vo=l(),Wle=a("span"),kvo=o("AutoModelForPreTraining"),kqe=l(),xo=a("div"),F(JA.$$.fragment),Svo=l(),Li=a("p"),Rvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dN=a("a"),Pvo=o("from_pretrained()"),Bvo=o(" class method or the "),cN=a("a"),Ivo=o("from_config()"),qvo=o(` class
method.`),Nvo=l(),YA=a("p"),jvo=o("This class cannot be instantiated directly using "),Qle=a("code"),Dvo=o("__init__()"),Gvo=o(" (throws an error)."),Ovo=l(),at=a("div"),F(KA.$$.fragment),Vvo=l(),Hle=a("p"),Xvo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zvo=l(),xi=a("p"),Wvo=o(`Note:
Loading a model from its configuration file does `),Ule=a("strong"),Qvo=o("not"),Hvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=a("a"),Uvo=o("from_pretrained()"),Jvo=o(" to load the model weights."),Yvo=l(),F(Y_.$$.fragment),Kvo=l(),Ye=a("div"),F(ZA.$$.fragment),Zvo=l(),Jle=a("p"),eFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oFo=l(),xa=a("p"),rFo=o("The model class to instantiate is selected based on the "),Yle=a("code"),tFo=o("model_type"),aFo=o(` property of the config object (either
passed as an argument or loaded from `),Kle=a("code"),nFo=o("pretrained_model_name_or_path"),sFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zle=a("code"),lFo=o("pretrained_model_name_or_path"),iFo=o(":"),dFo=l(),G=a("ul"),K_=a("li"),eie=a("strong"),cFo=o("albert"),fFo=o(" \u2014 "),mN=a("a"),mFo=o("AlbertForPreTraining"),gFo=o(" (ALBERT model)"),hFo=l(),Z_=a("li"),oie=a("strong"),pFo=o("bart"),_Fo=o(" \u2014 "),gN=a("a"),uFo=o("BartForConditionalGeneration"),bFo=o(" (BART model)"),vFo=l(),eu=a("li"),rie=a("strong"),FFo=o("bert"),TFo=o(" \u2014 "),hN=a("a"),MFo=o("BertForPreTraining"),EFo=o(" (BERT model)"),CFo=l(),ou=a("li"),tie=a("strong"),wFo=o("big_bird"),AFo=o(" \u2014 "),pN=a("a"),yFo=o("BigBirdForPreTraining"),LFo=o(" (BigBird model)"),xFo=l(),ru=a("li"),aie=a("strong"),$Fo=o("camembert"),kFo=o(" \u2014 "),_N=a("a"),SFo=o("CamembertForMaskedLM"),RFo=o(" (CamemBERT model)"),PFo=l(),tu=a("li"),nie=a("strong"),BFo=o("ctrl"),IFo=o(" \u2014 "),uN=a("a"),qFo=o("CTRLLMHeadModel"),NFo=o(" (CTRL model)"),jFo=l(),au=a("li"),sie=a("strong"),DFo=o("data2vec-text"),GFo=o(" \u2014 "),bN=a("a"),OFo=o("Data2VecTextForMaskedLM"),VFo=o(" (Data2VecText model)"),XFo=l(),nu=a("li"),lie=a("strong"),zFo=o("deberta"),WFo=o(" \u2014 "),vN=a("a"),QFo=o("DebertaForMaskedLM"),HFo=o(" (DeBERTa model)"),UFo=l(),su=a("li"),iie=a("strong"),JFo=o("deberta-v2"),YFo=o(" \u2014 "),FN=a("a"),KFo=o("DebertaV2ForMaskedLM"),ZFo=o(" (DeBERTa-v2 model)"),eTo=l(),lu=a("li"),die=a("strong"),oTo=o("distilbert"),rTo=o(" \u2014 "),TN=a("a"),tTo=o("DistilBertForMaskedLM"),aTo=o(" (DistilBERT model)"),nTo=l(),iu=a("li"),cie=a("strong"),sTo=o("electra"),lTo=o(" \u2014 "),MN=a("a"),iTo=o("ElectraForPreTraining"),dTo=o(" (ELECTRA model)"),cTo=l(),du=a("li"),fie=a("strong"),fTo=o("flaubert"),mTo=o(" \u2014 "),EN=a("a"),gTo=o("FlaubertWithLMHeadModel"),hTo=o(" (FlauBERT model)"),pTo=l(),cu=a("li"),mie=a("strong"),_To=o("flava"),uTo=o(" \u2014 "),CN=a("a"),bTo=o("FlavaForPreTraining"),vTo=o(" (Flava model)"),FTo=l(),fu=a("li"),gie=a("strong"),TTo=o("fnet"),MTo=o(" \u2014 "),wN=a("a"),ETo=o("FNetForPreTraining"),CTo=o(" (FNet model)"),wTo=l(),mu=a("li"),hie=a("strong"),ATo=o("fsmt"),yTo=o(" \u2014 "),AN=a("a"),LTo=o("FSMTForConditionalGeneration"),xTo=o(" (FairSeq Machine-Translation model)"),$To=l(),gu=a("li"),pie=a("strong"),kTo=o("funnel"),STo=o(" \u2014 "),yN=a("a"),RTo=o("FunnelForPreTraining"),PTo=o(" (Funnel Transformer model)"),BTo=l(),hu=a("li"),_ie=a("strong"),ITo=o("gpt2"),qTo=o(" \u2014 "),LN=a("a"),NTo=o("GPT2LMHeadModel"),jTo=o(" (OpenAI GPT-2 model)"),DTo=l(),pu=a("li"),uie=a("strong"),GTo=o("ibert"),OTo=o(" \u2014 "),xN=a("a"),VTo=o("IBertForMaskedLM"),XTo=o(" (I-BERT model)"),zTo=l(),_u=a("li"),bie=a("strong"),WTo=o("layoutlm"),QTo=o(" \u2014 "),$N=a("a"),HTo=o("LayoutLMForMaskedLM"),UTo=o(" (LayoutLM model)"),JTo=l(),uu=a("li"),vie=a("strong"),YTo=o("longformer"),KTo=o(" \u2014 "),kN=a("a"),ZTo=o("LongformerForMaskedLM"),e9o=o(" (Longformer model)"),o9o=l(),bu=a("li"),Fie=a("strong"),r9o=o("lxmert"),t9o=o(" \u2014 "),SN=a("a"),a9o=o("LxmertForPreTraining"),n9o=o(" (LXMERT model)"),s9o=l(),vu=a("li"),Tie=a("strong"),l9o=o("megatron-bert"),i9o=o(" \u2014 "),RN=a("a"),d9o=o("MegatronBertForPreTraining"),c9o=o(" (MegatronBert model)"),f9o=l(),Fu=a("li"),Mie=a("strong"),m9o=o("mobilebert"),g9o=o(" \u2014 "),PN=a("a"),h9o=o("MobileBertForPreTraining"),p9o=o(" (MobileBERT model)"),_9o=l(),Tu=a("li"),Eie=a("strong"),u9o=o("mpnet"),b9o=o(" \u2014 "),BN=a("a"),v9o=o("MPNetForMaskedLM"),F9o=o(" (MPNet model)"),T9o=l(),Mu=a("li"),Cie=a("strong"),M9o=o("openai-gpt"),E9o=o(" \u2014 "),IN=a("a"),C9o=o("OpenAIGPTLMHeadModel"),w9o=o(" (OpenAI GPT model)"),A9o=l(),Eu=a("li"),wie=a("strong"),y9o=o("retribert"),L9o=o(" \u2014 "),qN=a("a"),x9o=o("RetriBertModel"),$9o=o(" (RetriBERT model)"),k9o=l(),Cu=a("li"),Aie=a("strong"),S9o=o("roberta"),R9o=o(" \u2014 "),NN=a("a"),P9o=o("RobertaForMaskedLM"),B9o=o(" (RoBERTa model)"),I9o=l(),wu=a("li"),yie=a("strong"),q9o=o("splinter"),N9o=o(" \u2014 "),jN=a("a"),j9o=o("SplinterForPreTraining"),D9o=o(" (Splinter model)"),G9o=l(),Au=a("li"),Lie=a("strong"),O9o=o("squeezebert"),V9o=o(" \u2014 "),DN=a("a"),X9o=o("SqueezeBertForMaskedLM"),z9o=o(" (SqueezeBERT model)"),W9o=l(),yu=a("li"),xie=a("strong"),Q9o=o("t5"),H9o=o(" \u2014 "),GN=a("a"),U9o=o("T5ForConditionalGeneration"),J9o=o(" (T5 model)"),Y9o=l(),Lu=a("li"),$ie=a("strong"),K9o=o("tapas"),Z9o=o(" \u2014 "),ON=a("a"),eMo=o("TapasForMaskedLM"),oMo=o(" (TAPAS model)"),rMo=l(),xu=a("li"),kie=a("strong"),tMo=o("transfo-xl"),aMo=o(" \u2014 "),VN=a("a"),nMo=o("TransfoXLLMHeadModel"),sMo=o(" (Transformer-XL model)"),lMo=l(),$u=a("li"),Sie=a("strong"),iMo=o("unispeech"),dMo=o(" \u2014 "),XN=a("a"),cMo=o("UniSpeechForPreTraining"),fMo=o(" (UniSpeech model)"),mMo=l(),ku=a("li"),Rie=a("strong"),gMo=o("unispeech-sat"),hMo=o(" \u2014 "),zN=a("a"),pMo=o("UniSpeechSatForPreTraining"),_Mo=o(" (UniSpeechSat model)"),uMo=l(),Su=a("li"),Pie=a("strong"),bMo=o("visual_bert"),vMo=o(" \u2014 "),WN=a("a"),FMo=o("VisualBertForPreTraining"),TMo=o(" (VisualBert model)"),MMo=l(),Ru=a("li"),Bie=a("strong"),EMo=o("vit_mae"),CMo=o(" \u2014 "),QN=a("a"),wMo=o("ViTMAEForPreTraining"),AMo=o(" (ViTMAE model)"),yMo=l(),Pu=a("li"),Iie=a("strong"),LMo=o("wav2vec2"),xMo=o(" \u2014 "),HN=a("a"),$Mo=o("Wav2Vec2ForPreTraining"),kMo=o(" (Wav2Vec2 model)"),SMo=l(),Bu=a("li"),qie=a("strong"),RMo=o("wav2vec2-conformer"),PMo=o(" \u2014 "),UN=a("a"),BMo=o("Wav2Vec2ConformerForPreTraining"),IMo=o(" (Wav2Vec2-Conformer model)"),qMo=l(),Iu=a("li"),Nie=a("strong"),NMo=o("xlm"),jMo=o(" \u2014 "),JN=a("a"),DMo=o("XLMWithLMHeadModel"),GMo=o(" (XLM model)"),OMo=l(),qu=a("li"),jie=a("strong"),VMo=o("xlm-roberta"),XMo=o(" \u2014 "),YN=a("a"),zMo=o("XLMRobertaForMaskedLM"),WMo=o(" (XLM-RoBERTa model)"),QMo=l(),Nu=a("li"),Die=a("strong"),HMo=o("xlm-roberta-xl"),UMo=o(" \u2014 "),KN=a("a"),JMo=o("XLMRobertaXLForMaskedLM"),YMo=o(" (XLM-RoBERTa-XL model)"),KMo=l(),ju=a("li"),Gie=a("strong"),ZMo=o("xlnet"),e4o=o(" \u2014 "),ZN=a("a"),o4o=o("XLNetLMHeadModel"),r4o=o(" (XLNet model)"),t4o=l(),Du=a("p"),a4o=o("The model is set in evaluation mode by default using "),Oie=a("code"),n4o=o("model.eval()"),s4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=a("code"),l4o=o("model.train()"),i4o=l(),F(Gu.$$.fragment),Sqe=l(),$i=a("h2"),Ou=a("a"),Xie=a("span"),F(ey.$$.fragment),d4o=l(),zie=a("span"),c4o=o("AutoModelForCausalLM"),Rqe=l(),$o=a("div"),F(oy.$$.fragment),f4o=l(),ki=a("p"),m4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ej=a("a"),g4o=o("from_pretrained()"),h4o=o(" class method or the "),oj=a("a"),p4o=o("from_config()"),_4o=o(` class
method.`),u4o=l(),ry=a("p"),b4o=o("This class cannot be instantiated directly using "),Wie=a("code"),v4o=o("__init__()"),F4o=o(" (throws an error)."),T4o=l(),nt=a("div"),F(ty.$$.fragment),M4o=l(),Qie=a("p"),E4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C4o=l(),Si=a("p"),w4o=o(`Note:
Loading a model from its configuration file does `),Hie=a("strong"),A4o=o("not"),y4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=a("a"),L4o=o("from_pretrained()"),x4o=o(" to load the model weights."),$4o=l(),F(Vu.$$.fragment),k4o=l(),Ke=a("div"),F(ay.$$.fragment),S4o=l(),Uie=a("p"),R4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P4o=l(),$a=a("p"),B4o=o("The model class to instantiate is selected based on the "),Jie=a("code"),I4o=o("model_type"),q4o=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),N4o=o("pretrained_model_name_or_path"),j4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),D4o=o("pretrained_model_name_or_path"),G4o=o(":"),O4o=l(),z=a("ul"),Xu=a("li"),Zie=a("strong"),V4o=o("bart"),X4o=o(" \u2014 "),tj=a("a"),z4o=o("BartForCausalLM"),W4o=o(" (BART model)"),Q4o=l(),zu=a("li"),ede=a("strong"),H4o=o("bert"),U4o=o(" \u2014 "),aj=a("a"),J4o=o("BertLMHeadModel"),Y4o=o(" (BERT model)"),K4o=l(),Wu=a("li"),ode=a("strong"),Z4o=o("bert-generation"),eEo=o(" \u2014 "),nj=a("a"),oEo=o("BertGenerationDecoder"),rEo=o(" (Bert Generation model)"),tEo=l(),Qu=a("li"),rde=a("strong"),aEo=o("big_bird"),nEo=o(" \u2014 "),sj=a("a"),sEo=o("BigBirdForCausalLM"),lEo=o(" (BigBird model)"),iEo=l(),Hu=a("li"),tde=a("strong"),dEo=o("bigbird_pegasus"),cEo=o(" \u2014 "),lj=a("a"),fEo=o("BigBirdPegasusForCausalLM"),mEo=o(" (BigBirdPegasus model)"),gEo=l(),Uu=a("li"),ade=a("strong"),hEo=o("blenderbot"),pEo=o(" \u2014 "),ij=a("a"),_Eo=o("BlenderbotForCausalLM"),uEo=o(" (Blenderbot model)"),bEo=l(),Ju=a("li"),nde=a("strong"),vEo=o("blenderbot-small"),FEo=o(" \u2014 "),dj=a("a"),TEo=o("BlenderbotSmallForCausalLM"),MEo=o(" (BlenderbotSmall model)"),EEo=l(),Yu=a("li"),sde=a("strong"),CEo=o("camembert"),wEo=o(" \u2014 "),cj=a("a"),AEo=o("CamembertForCausalLM"),yEo=o(" (CamemBERT model)"),LEo=l(),Ku=a("li"),lde=a("strong"),xEo=o("ctrl"),$Eo=o(" \u2014 "),fj=a("a"),kEo=o("CTRLLMHeadModel"),SEo=o(" (CTRL model)"),REo=l(),Zu=a("li"),ide=a("strong"),PEo=o("data2vec-text"),BEo=o(" \u2014 "),mj=a("a"),IEo=o("Data2VecTextForCausalLM"),qEo=o(" (Data2VecText model)"),NEo=l(),e6=a("li"),dde=a("strong"),jEo=o("electra"),DEo=o(" \u2014 "),gj=a("a"),GEo=o("ElectraForCausalLM"),OEo=o(" (ELECTRA model)"),VEo=l(),o6=a("li"),cde=a("strong"),XEo=o("gpt2"),zEo=o(" \u2014 "),hj=a("a"),WEo=o("GPT2LMHeadModel"),QEo=o(" (OpenAI GPT-2 model)"),HEo=l(),r6=a("li"),fde=a("strong"),UEo=o("gpt_neo"),JEo=o(" \u2014 "),pj=a("a"),YEo=o("GPTNeoForCausalLM"),KEo=o(" (GPT Neo model)"),ZEo=l(),t6=a("li"),mde=a("strong"),eCo=o("gpt_neox"),oCo=o(" \u2014 "),_j=a("a"),rCo=o("GPTNeoXForCausalLM"),tCo=o(" (GPT NeoX model)"),aCo=l(),a6=a("li"),gde=a("strong"),nCo=o("gptj"),sCo=o(" \u2014 "),uj=a("a"),lCo=o("GPTJForCausalLM"),iCo=o(" (GPT-J model)"),dCo=l(),n6=a("li"),hde=a("strong"),cCo=o("marian"),fCo=o(" \u2014 "),bj=a("a"),mCo=o("MarianForCausalLM"),gCo=o(" (Marian model)"),hCo=l(),s6=a("li"),pde=a("strong"),pCo=o("mbart"),_Co=o(" \u2014 "),vj=a("a"),uCo=o("MBartForCausalLM"),bCo=o(" (mBART model)"),vCo=l(),l6=a("li"),_de=a("strong"),FCo=o("megatron-bert"),TCo=o(" \u2014 "),Fj=a("a"),MCo=o("MegatronBertForCausalLM"),ECo=o(" (MegatronBert model)"),CCo=l(),i6=a("li"),ude=a("strong"),wCo=o("openai-gpt"),ACo=o(" \u2014 "),Tj=a("a"),yCo=o("OpenAIGPTLMHeadModel"),LCo=o(" (OpenAI GPT model)"),xCo=l(),d6=a("li"),bde=a("strong"),$Co=o("opt"),kCo=o(" \u2014 "),Mj=a("a"),SCo=o("OPTForCausalLM"),RCo=o(" (OPT model)"),PCo=l(),c6=a("li"),vde=a("strong"),BCo=o("pegasus"),ICo=o(" \u2014 "),Ej=a("a"),qCo=o("PegasusForCausalLM"),NCo=o(" (Pegasus model)"),jCo=l(),f6=a("li"),Fde=a("strong"),DCo=o("plbart"),GCo=o(" \u2014 "),Cj=a("a"),OCo=o("PLBartForCausalLM"),VCo=o(" (PLBart model)"),XCo=l(),m6=a("li"),Tde=a("strong"),zCo=o("prophetnet"),WCo=o(" \u2014 "),wj=a("a"),QCo=o("ProphetNetForCausalLM"),HCo=o(" (ProphetNet model)"),UCo=l(),g6=a("li"),Mde=a("strong"),JCo=o("qdqbert"),YCo=o(" \u2014 "),Aj=a("a"),KCo=o("QDQBertLMHeadModel"),ZCo=o(" (QDQBert model)"),e3o=l(),h6=a("li"),Ede=a("strong"),o3o=o("reformer"),r3o=o(" \u2014 "),yj=a("a"),t3o=o("ReformerModelWithLMHead"),a3o=o(" (Reformer model)"),n3o=l(),p6=a("li"),Cde=a("strong"),s3o=o("rembert"),l3o=o(" \u2014 "),Lj=a("a"),i3o=o("RemBertForCausalLM"),d3o=o(" (RemBERT model)"),c3o=l(),_6=a("li"),wde=a("strong"),f3o=o("roberta"),m3o=o(" \u2014 "),xj=a("a"),g3o=o("RobertaForCausalLM"),h3o=o(" (RoBERTa model)"),p3o=l(),u6=a("li"),Ade=a("strong"),_3o=o("roformer"),u3o=o(" \u2014 "),$j=a("a"),b3o=o("RoFormerForCausalLM"),v3o=o(" (RoFormer model)"),F3o=l(),b6=a("li"),yde=a("strong"),T3o=o("speech_to_text_2"),M3o=o(" \u2014 "),kj=a("a"),E3o=o("Speech2Text2ForCausalLM"),C3o=o(" (Speech2Text2 model)"),w3o=l(),v6=a("li"),Lde=a("strong"),A3o=o("transfo-xl"),y3o=o(" \u2014 "),Sj=a("a"),L3o=o("TransfoXLLMHeadModel"),x3o=o(" (Transformer-XL model)"),$3o=l(),F6=a("li"),xde=a("strong"),k3o=o("trocr"),S3o=o(" \u2014 "),Rj=a("a"),R3o=o("TrOCRForCausalLM"),P3o=o(" (TrOCR model)"),B3o=l(),T6=a("li"),$de=a("strong"),I3o=o("xglm"),q3o=o(" \u2014 "),Pj=a("a"),N3o=o("XGLMForCausalLM"),j3o=o(" (XGLM model)"),D3o=l(),M6=a("li"),kde=a("strong"),G3o=o("xlm"),O3o=o(" \u2014 "),Bj=a("a"),V3o=o("XLMWithLMHeadModel"),X3o=o(" (XLM model)"),z3o=l(),E6=a("li"),Sde=a("strong"),W3o=o("xlm-prophetnet"),Q3o=o(" \u2014 "),Ij=a("a"),H3o=o("XLMProphetNetForCausalLM"),U3o=o(" (XLMProphetNet model)"),J3o=l(),C6=a("li"),Rde=a("strong"),Y3o=o("xlm-roberta"),K3o=o(" \u2014 "),qj=a("a"),Z3o=o("XLMRobertaForCausalLM"),ewo=o(" (XLM-RoBERTa model)"),owo=l(),w6=a("li"),Pde=a("strong"),rwo=o("xlm-roberta-xl"),two=o(" \u2014 "),Nj=a("a"),awo=o("XLMRobertaXLForCausalLM"),nwo=o(" (XLM-RoBERTa-XL model)"),swo=l(),A6=a("li"),Bde=a("strong"),lwo=o("xlnet"),iwo=o(" \u2014 "),jj=a("a"),dwo=o("XLNetLMHeadModel"),cwo=o(" (XLNet model)"),fwo=l(),y6=a("p"),mwo=o("The model is set in evaluation mode by default using "),Ide=a("code"),gwo=o("model.eval()"),hwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=a("code"),pwo=o("model.train()"),_wo=l(),F(L6.$$.fragment),Pqe=l(),Ri=a("h2"),x6=a("a"),Nde=a("span"),F(ny.$$.fragment),uwo=l(),jde=a("span"),bwo=o("AutoModelForMaskedLM"),Bqe=l(),ko=a("div"),F(sy.$$.fragment),vwo=l(),Pi=a("p"),Fwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Dj=a("a"),Two=o("from_pretrained()"),Mwo=o(" class method or the "),Gj=a("a"),Ewo=o("from_config()"),Cwo=o(` class
method.`),wwo=l(),ly=a("p"),Awo=o("This class cannot be instantiated directly using "),Dde=a("code"),ywo=o("__init__()"),Lwo=o(" (throws an error)."),xwo=l(),st=a("div"),F(iy.$$.fragment),$wo=l(),Gde=a("p"),kwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Swo=l(),Bi=a("p"),Rwo=o(`Note:
Loading a model from its configuration file does `),Ode=a("strong"),Pwo=o("not"),Bwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=a("a"),Iwo=o("from_pretrained()"),qwo=o(" to load the model weights."),Nwo=l(),F($6.$$.fragment),jwo=l(),Ze=a("div"),F(dy.$$.fragment),Dwo=l(),Vde=a("p"),Gwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Owo=l(),ka=a("p"),Vwo=o("The model class to instantiate is selected based on the "),Xde=a("code"),Xwo=o("model_type"),zwo=o(` property of the config object (either
passed as an argument or loaded from `),zde=a("code"),Wwo=o("pretrained_model_name_or_path"),Qwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=a("code"),Hwo=o("pretrained_model_name_or_path"),Uwo=o(":"),Jwo=l(),Q=a("ul"),k6=a("li"),Qde=a("strong"),Ywo=o("albert"),Kwo=o(" \u2014 "),Vj=a("a"),Zwo=o("AlbertForMaskedLM"),e0o=o(" (ALBERT model)"),o0o=l(),S6=a("li"),Hde=a("strong"),r0o=o("bart"),t0o=o(" \u2014 "),Xj=a("a"),a0o=o("BartForConditionalGeneration"),n0o=o(" (BART model)"),s0o=l(),R6=a("li"),Ude=a("strong"),l0o=o("bert"),i0o=o(" \u2014 "),zj=a("a"),d0o=o("BertForMaskedLM"),c0o=o(" (BERT model)"),f0o=l(),P6=a("li"),Jde=a("strong"),m0o=o("big_bird"),g0o=o(" \u2014 "),Wj=a("a"),h0o=o("BigBirdForMaskedLM"),p0o=o(" (BigBird model)"),_0o=l(),B6=a("li"),Yde=a("strong"),u0o=o("camembert"),b0o=o(" \u2014 "),Qj=a("a"),v0o=o("CamembertForMaskedLM"),F0o=o(" (CamemBERT model)"),T0o=l(),I6=a("li"),Kde=a("strong"),M0o=o("convbert"),E0o=o(" \u2014 "),Hj=a("a"),C0o=o("ConvBertForMaskedLM"),w0o=o(" (ConvBERT model)"),A0o=l(),q6=a("li"),Zde=a("strong"),y0o=o("data2vec-text"),L0o=o(" \u2014 "),Uj=a("a"),x0o=o("Data2VecTextForMaskedLM"),$0o=o(" (Data2VecText model)"),k0o=l(),N6=a("li"),ece=a("strong"),S0o=o("deberta"),R0o=o(" \u2014 "),Jj=a("a"),P0o=o("DebertaForMaskedLM"),B0o=o(" (DeBERTa model)"),I0o=l(),j6=a("li"),oce=a("strong"),q0o=o("deberta-v2"),N0o=o(" \u2014 "),Yj=a("a"),j0o=o("DebertaV2ForMaskedLM"),D0o=o(" (DeBERTa-v2 model)"),G0o=l(),D6=a("li"),rce=a("strong"),O0o=o("distilbert"),V0o=o(" \u2014 "),Kj=a("a"),X0o=o("DistilBertForMaskedLM"),z0o=o(" (DistilBERT model)"),W0o=l(),G6=a("li"),tce=a("strong"),Q0o=o("electra"),H0o=o(" \u2014 "),Zj=a("a"),U0o=o("ElectraForMaskedLM"),J0o=o(" (ELECTRA model)"),Y0o=l(),O6=a("li"),ace=a("strong"),K0o=o("flaubert"),Z0o=o(" \u2014 "),eD=a("a"),eAo=o("FlaubertWithLMHeadModel"),oAo=o(" (FlauBERT model)"),rAo=l(),V6=a("li"),nce=a("strong"),tAo=o("fnet"),aAo=o(" \u2014 "),oD=a("a"),nAo=o("FNetForMaskedLM"),sAo=o(" (FNet model)"),lAo=l(),X6=a("li"),sce=a("strong"),iAo=o("funnel"),dAo=o(" \u2014 "),rD=a("a"),cAo=o("FunnelForMaskedLM"),fAo=o(" (Funnel Transformer model)"),mAo=l(),z6=a("li"),lce=a("strong"),gAo=o("ibert"),hAo=o(" \u2014 "),tD=a("a"),pAo=o("IBertForMaskedLM"),_Ao=o(" (I-BERT model)"),uAo=l(),W6=a("li"),ice=a("strong"),bAo=o("layoutlm"),vAo=o(" \u2014 "),aD=a("a"),FAo=o("LayoutLMForMaskedLM"),TAo=o(" (LayoutLM model)"),MAo=l(),Q6=a("li"),dce=a("strong"),EAo=o("longformer"),CAo=o(" \u2014 "),nD=a("a"),wAo=o("LongformerForMaskedLM"),AAo=o(" (Longformer model)"),yAo=l(),H6=a("li"),cce=a("strong"),LAo=o("mbart"),xAo=o(" \u2014 "),sD=a("a"),$Ao=o("MBartForConditionalGeneration"),kAo=o(" (mBART model)"),SAo=l(),U6=a("li"),fce=a("strong"),RAo=o("megatron-bert"),PAo=o(" \u2014 "),lD=a("a"),BAo=o("MegatronBertForMaskedLM"),IAo=o(" (MegatronBert model)"),qAo=l(),J6=a("li"),mce=a("strong"),NAo=o("mobilebert"),jAo=o(" \u2014 "),iD=a("a"),DAo=o("MobileBertForMaskedLM"),GAo=o(" (MobileBERT model)"),OAo=l(),Y6=a("li"),gce=a("strong"),VAo=o("mpnet"),XAo=o(" \u2014 "),dD=a("a"),zAo=o("MPNetForMaskedLM"),WAo=o(" (MPNet model)"),QAo=l(),K6=a("li"),hce=a("strong"),HAo=o("nystromformer"),UAo=o(" \u2014 "),cD=a("a"),JAo=o("NystromformerForMaskedLM"),YAo=o(" (Nystromformer model)"),KAo=l(),Z6=a("li"),pce=a("strong"),ZAo=o("perceiver"),eyo=o(" \u2014 "),fD=a("a"),oyo=o("PerceiverForMaskedLM"),ryo=o(" (Perceiver model)"),tyo=l(),e1=a("li"),_ce=a("strong"),ayo=o("qdqbert"),nyo=o(" \u2014 "),mD=a("a"),syo=o("QDQBertForMaskedLM"),lyo=o(" (QDQBert model)"),iyo=l(),o1=a("li"),uce=a("strong"),dyo=o("reformer"),cyo=o(" \u2014 "),gD=a("a"),fyo=o("ReformerForMaskedLM"),myo=o(" (Reformer model)"),gyo=l(),r1=a("li"),bce=a("strong"),hyo=o("rembert"),pyo=o(" \u2014 "),hD=a("a"),_yo=o("RemBertForMaskedLM"),uyo=o(" (RemBERT model)"),byo=l(),t1=a("li"),vce=a("strong"),vyo=o("roberta"),Fyo=o(" \u2014 "),pD=a("a"),Tyo=o("RobertaForMaskedLM"),Myo=o(" (RoBERTa model)"),Eyo=l(),a1=a("li"),Fce=a("strong"),Cyo=o("roformer"),wyo=o(" \u2014 "),_D=a("a"),Ayo=o("RoFormerForMaskedLM"),yyo=o(" (RoFormer model)"),Lyo=l(),n1=a("li"),Tce=a("strong"),xyo=o("squeezebert"),$yo=o(" \u2014 "),uD=a("a"),kyo=o("SqueezeBertForMaskedLM"),Syo=o(" (SqueezeBERT model)"),Ryo=l(),s1=a("li"),Mce=a("strong"),Pyo=o("tapas"),Byo=o(" \u2014 "),bD=a("a"),Iyo=o("TapasForMaskedLM"),qyo=o(" (TAPAS model)"),Nyo=l(),l1=a("li"),Ece=a("strong"),jyo=o("wav2vec2"),Dyo=o(" \u2014 "),Cce=a("code"),Gyo=o("Wav2Vec2ForMaskedLM"),Oyo=o(" (Wav2Vec2 model)"),Vyo=l(),i1=a("li"),wce=a("strong"),Xyo=o("xlm"),zyo=o(" \u2014 "),vD=a("a"),Wyo=o("XLMWithLMHeadModel"),Qyo=o(" (XLM model)"),Hyo=l(),d1=a("li"),Ace=a("strong"),Uyo=o("xlm-roberta"),Jyo=o(" \u2014 "),FD=a("a"),Yyo=o("XLMRobertaForMaskedLM"),Kyo=o(" (XLM-RoBERTa model)"),Zyo=l(),c1=a("li"),yce=a("strong"),e8o=o("xlm-roberta-xl"),o8o=o(" \u2014 "),TD=a("a"),r8o=o("XLMRobertaXLForMaskedLM"),t8o=o(" (XLM-RoBERTa-XL model)"),a8o=l(),f1=a("li"),Lce=a("strong"),n8o=o("yoso"),s8o=o(" \u2014 "),MD=a("a"),l8o=o("YosoForMaskedLM"),i8o=o(" (YOSO model)"),d8o=l(),m1=a("p"),c8o=o("The model is set in evaluation mode by default using "),xce=a("code"),f8o=o("model.eval()"),m8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),g8o=o("model.train()"),h8o=l(),F(g1.$$.fragment),Iqe=l(),Ii=a("h2"),h1=a("a"),kce=a("span"),F(cy.$$.fragment),p8o=l(),Sce=a("span"),_8o=o("AutoModelForSeq2SeqLM"),qqe=l(),So=a("div"),F(fy.$$.fragment),u8o=l(),qi=a("p"),b8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ED=a("a"),v8o=o("from_pretrained()"),F8o=o(" class method or the "),CD=a("a"),T8o=o("from_config()"),M8o=o(` class
method.`),E8o=l(),my=a("p"),C8o=o("This class cannot be instantiated directly using "),Rce=a("code"),w8o=o("__init__()"),A8o=o(" (throws an error)."),y8o=l(),lt=a("div"),F(gy.$$.fragment),L8o=l(),Pce=a("p"),x8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$8o=l(),Ni=a("p"),k8o=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),S8o=o("not"),R8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=a("a"),P8o=o("from_pretrained()"),B8o=o(" to load the model weights."),I8o=l(),F(p1.$$.fragment),q8o=l(),eo=a("div"),F(hy.$$.fragment),N8o=l(),Ice=a("p"),j8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D8o=l(),Sa=a("p"),G8o=o("The model class to instantiate is selected based on the "),qce=a("code"),O8o=o("model_type"),V8o=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),X8o=o("pretrained_model_name_or_path"),z8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),W8o=o("pretrained_model_name_or_path"),Q8o=o(":"),H8o=l(),_e=a("ul"),_1=a("li"),Dce=a("strong"),U8o=o("bart"),J8o=o(" \u2014 "),AD=a("a"),Y8o=o("BartForConditionalGeneration"),K8o=o(" (BART model)"),Z8o=l(),u1=a("li"),Gce=a("strong"),eLo=o("bigbird_pegasus"),oLo=o(" \u2014 "),yD=a("a"),rLo=o("BigBirdPegasusForConditionalGeneration"),tLo=o(" (BigBirdPegasus model)"),aLo=l(),b1=a("li"),Oce=a("strong"),nLo=o("blenderbot"),sLo=o(" \u2014 "),LD=a("a"),lLo=o("BlenderbotForConditionalGeneration"),iLo=o(" (Blenderbot model)"),dLo=l(),v1=a("li"),Vce=a("strong"),cLo=o("blenderbot-small"),fLo=o(" \u2014 "),xD=a("a"),mLo=o("BlenderbotSmallForConditionalGeneration"),gLo=o(" (BlenderbotSmall model)"),hLo=l(),F1=a("li"),Xce=a("strong"),pLo=o("encoder-decoder"),_Lo=o(" \u2014 "),$D=a("a"),uLo=o("EncoderDecoderModel"),bLo=o(" (Encoder decoder model)"),vLo=l(),T1=a("li"),zce=a("strong"),FLo=o("fsmt"),TLo=o(" \u2014 "),kD=a("a"),MLo=o("FSMTForConditionalGeneration"),ELo=o(" (FairSeq Machine-Translation model)"),CLo=l(),M1=a("li"),Wce=a("strong"),wLo=o("led"),ALo=o(" \u2014 "),SD=a("a"),yLo=o("LEDForConditionalGeneration"),LLo=o(" (LED model)"),xLo=l(),E1=a("li"),Qce=a("strong"),$Lo=o("m2m_100"),kLo=o(" \u2014 "),RD=a("a"),SLo=o("M2M100ForConditionalGeneration"),RLo=o(" (M2M100 model)"),PLo=l(),C1=a("li"),Hce=a("strong"),BLo=o("marian"),ILo=o(" \u2014 "),PD=a("a"),qLo=o("MarianMTModel"),NLo=o(" (Marian model)"),jLo=l(),w1=a("li"),Uce=a("strong"),DLo=o("mbart"),GLo=o(" \u2014 "),BD=a("a"),OLo=o("MBartForConditionalGeneration"),VLo=o(" (mBART model)"),XLo=l(),A1=a("li"),Jce=a("strong"),zLo=o("mt5"),WLo=o(" \u2014 "),ID=a("a"),QLo=o("MT5ForConditionalGeneration"),HLo=o(" (mT5 model)"),ULo=l(),y1=a("li"),Yce=a("strong"),JLo=o("pegasus"),YLo=o(" \u2014 "),qD=a("a"),KLo=o("PegasusForConditionalGeneration"),ZLo=o(" (Pegasus model)"),e7o=l(),L1=a("li"),Kce=a("strong"),o7o=o("plbart"),r7o=o(" \u2014 "),ND=a("a"),t7o=o("PLBartForConditionalGeneration"),a7o=o(" (PLBart model)"),n7o=l(),x1=a("li"),Zce=a("strong"),s7o=o("prophetnet"),l7o=o(" \u2014 "),jD=a("a"),i7o=o("ProphetNetForConditionalGeneration"),d7o=o(" (ProphetNet model)"),c7o=l(),$1=a("li"),efe=a("strong"),f7o=o("t5"),m7o=o(" \u2014 "),DD=a("a"),g7o=o("T5ForConditionalGeneration"),h7o=o(" (T5 model)"),p7o=l(),k1=a("li"),ofe=a("strong"),_7o=o("xlm-prophetnet"),u7o=o(" \u2014 "),GD=a("a"),b7o=o("XLMProphetNetForConditionalGeneration"),v7o=o(" (XLMProphetNet model)"),F7o=l(),S1=a("p"),T7o=o("The model is set in evaluation mode by default using "),rfe=a("code"),M7o=o("model.eval()"),E7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=a("code"),C7o=o("model.train()"),w7o=l(),F(R1.$$.fragment),Nqe=l(),ji=a("h2"),P1=a("a"),afe=a("span"),F(py.$$.fragment),A7o=l(),nfe=a("span"),y7o=o("AutoModelForSequenceClassification"),jqe=l(),Ro=a("div"),F(_y.$$.fragment),L7o=l(),Di=a("p"),x7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OD=a("a"),$7o=o("from_pretrained()"),k7o=o(" class method or the "),VD=a("a"),S7o=o("from_config()"),R7o=o(` class
method.`),P7o=l(),uy=a("p"),B7o=o("This class cannot be instantiated directly using "),sfe=a("code"),I7o=o("__init__()"),q7o=o(" (throws an error)."),N7o=l(),it=a("div"),F(by.$$.fragment),j7o=l(),lfe=a("p"),D7o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),G7o=l(),Gi=a("p"),O7o=o(`Note:
Loading a model from its configuration file does `),ife=a("strong"),V7o=o("not"),X7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),z7o=o("from_pretrained()"),W7o=o(" to load the model weights."),Q7o=l(),F(B1.$$.fragment),H7o=l(),oo=a("div"),F(vy.$$.fragment),U7o=l(),dfe=a("p"),J7o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Y7o=l(),Ra=a("p"),K7o=o("The model class to instantiate is selected based on the "),cfe=a("code"),Z7o=o("model_type"),exo=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),txo=o("pretrained_model_name_or_path"),axo=o(":"),nxo=l(),q=a("ul"),I1=a("li"),gfe=a("strong"),sxo=o("albert"),lxo=o(" \u2014 "),zD=a("a"),ixo=o("AlbertForSequenceClassification"),dxo=o(" (ALBERT model)"),cxo=l(),q1=a("li"),hfe=a("strong"),fxo=o("bart"),mxo=o(" \u2014 "),WD=a("a"),gxo=o("BartForSequenceClassification"),hxo=o(" (BART model)"),pxo=l(),N1=a("li"),pfe=a("strong"),_xo=o("bert"),uxo=o(" \u2014 "),QD=a("a"),bxo=o("BertForSequenceClassification"),vxo=o(" (BERT model)"),Fxo=l(),j1=a("li"),_fe=a("strong"),Txo=o("big_bird"),Mxo=o(" \u2014 "),HD=a("a"),Exo=o("BigBirdForSequenceClassification"),Cxo=o(" (BigBird model)"),wxo=l(),D1=a("li"),ufe=a("strong"),Axo=o("bigbird_pegasus"),yxo=o(" \u2014 "),UD=a("a"),Lxo=o("BigBirdPegasusForSequenceClassification"),xxo=o(" (BigBirdPegasus model)"),$xo=l(),G1=a("li"),bfe=a("strong"),kxo=o("camembert"),Sxo=o(" \u2014 "),JD=a("a"),Rxo=o("CamembertForSequenceClassification"),Pxo=o(" (CamemBERT model)"),Bxo=l(),O1=a("li"),vfe=a("strong"),Ixo=o("canine"),qxo=o(" \u2014 "),YD=a("a"),Nxo=o("CanineForSequenceClassification"),jxo=o(" (Canine model)"),Dxo=l(),V1=a("li"),Ffe=a("strong"),Gxo=o("convbert"),Oxo=o(" \u2014 "),KD=a("a"),Vxo=o("ConvBertForSequenceClassification"),Xxo=o(" (ConvBERT model)"),zxo=l(),X1=a("li"),Tfe=a("strong"),Wxo=o("ctrl"),Qxo=o(" \u2014 "),ZD=a("a"),Hxo=o("CTRLForSequenceClassification"),Uxo=o(" (CTRL model)"),Jxo=l(),z1=a("li"),Mfe=a("strong"),Yxo=o("data2vec-text"),Kxo=o(" \u2014 "),eG=a("a"),Zxo=o("Data2VecTextForSequenceClassification"),e$o=o(" (Data2VecText model)"),o$o=l(),W1=a("li"),Efe=a("strong"),r$o=o("deberta"),t$o=o(" \u2014 "),oG=a("a"),a$o=o("DebertaForSequenceClassification"),n$o=o(" (DeBERTa model)"),s$o=l(),Q1=a("li"),Cfe=a("strong"),l$o=o("deberta-v2"),i$o=o(" \u2014 "),rG=a("a"),d$o=o("DebertaV2ForSequenceClassification"),c$o=o(" (DeBERTa-v2 model)"),f$o=l(),H1=a("li"),wfe=a("strong"),m$o=o("distilbert"),g$o=o(" \u2014 "),tG=a("a"),h$o=o("DistilBertForSequenceClassification"),p$o=o(" (DistilBERT model)"),_$o=l(),U1=a("li"),Afe=a("strong"),u$o=o("electra"),b$o=o(" \u2014 "),aG=a("a"),v$o=o("ElectraForSequenceClassification"),F$o=o(" (ELECTRA model)"),T$o=l(),J1=a("li"),yfe=a("strong"),M$o=o("flaubert"),E$o=o(" \u2014 "),nG=a("a"),C$o=o("FlaubertForSequenceClassification"),w$o=o(" (FlauBERT model)"),A$o=l(),Y1=a("li"),Lfe=a("strong"),y$o=o("fnet"),L$o=o(" \u2014 "),sG=a("a"),x$o=o("FNetForSequenceClassification"),$$o=o(" (FNet model)"),k$o=l(),K1=a("li"),xfe=a("strong"),S$o=o("funnel"),R$o=o(" \u2014 "),lG=a("a"),P$o=o("FunnelForSequenceClassification"),B$o=o(" (Funnel Transformer model)"),I$o=l(),Z1=a("li"),$fe=a("strong"),q$o=o("gpt2"),N$o=o(" \u2014 "),iG=a("a"),j$o=o("GPT2ForSequenceClassification"),D$o=o(" (OpenAI GPT-2 model)"),G$o=l(),eb=a("li"),kfe=a("strong"),O$o=o("gpt_neo"),V$o=o(" \u2014 "),dG=a("a"),X$o=o("GPTNeoForSequenceClassification"),z$o=o(" (GPT Neo model)"),W$o=l(),ob=a("li"),Sfe=a("strong"),Q$o=o("gpt_neox"),H$o=o(" \u2014 "),Rfe=a("code"),U$o=o("GPTNeoXForSequenceClassification"),J$o=o(" (GPT NeoX model)"),Y$o=l(),rb=a("li"),Pfe=a("strong"),K$o=o("gptj"),Z$o=o(" \u2014 "),cG=a("a"),eko=o("GPTJForSequenceClassification"),oko=o(" (GPT-J model)"),rko=l(),tb=a("li"),Bfe=a("strong"),tko=o("ibert"),ako=o(" \u2014 "),fG=a("a"),nko=o("IBertForSequenceClassification"),sko=o(" (I-BERT model)"),lko=l(),ab=a("li"),Ife=a("strong"),iko=o("layoutlm"),dko=o(" \u2014 "),mG=a("a"),cko=o("LayoutLMForSequenceClassification"),fko=o(" (LayoutLM model)"),mko=l(),nb=a("li"),qfe=a("strong"),gko=o("layoutlmv2"),hko=o(" \u2014 "),gG=a("a"),pko=o("LayoutLMv2ForSequenceClassification"),_ko=o(" (LayoutLMv2 model)"),uko=l(),sb=a("li"),Nfe=a("strong"),bko=o("led"),vko=o(" \u2014 "),hG=a("a"),Fko=o("LEDForSequenceClassification"),Tko=o(" (LED model)"),Mko=l(),lb=a("li"),jfe=a("strong"),Eko=o("longformer"),Cko=o(" \u2014 "),pG=a("a"),wko=o("LongformerForSequenceClassification"),Ako=o(" (Longformer model)"),yko=l(),ib=a("li"),Dfe=a("strong"),Lko=o("mbart"),xko=o(" \u2014 "),_G=a("a"),$ko=o("MBartForSequenceClassification"),kko=o(" (mBART model)"),Sko=l(),db=a("li"),Gfe=a("strong"),Rko=o("megatron-bert"),Pko=o(" \u2014 "),uG=a("a"),Bko=o("MegatronBertForSequenceClassification"),Iko=o(" (MegatronBert model)"),qko=l(),cb=a("li"),Ofe=a("strong"),Nko=o("mobilebert"),jko=o(" \u2014 "),bG=a("a"),Dko=o("MobileBertForSequenceClassification"),Gko=o(" (MobileBERT model)"),Oko=l(),fb=a("li"),Vfe=a("strong"),Vko=o("mpnet"),Xko=o(" \u2014 "),vG=a("a"),zko=o("MPNetForSequenceClassification"),Wko=o(" (MPNet model)"),Qko=l(),mb=a("li"),Xfe=a("strong"),Hko=o("nystromformer"),Uko=o(" \u2014 "),FG=a("a"),Jko=o("NystromformerForSequenceClassification"),Yko=o(" (Nystromformer model)"),Kko=l(),gb=a("li"),zfe=a("strong"),Zko=o("openai-gpt"),eSo=o(" \u2014 "),TG=a("a"),oSo=o("OpenAIGPTForSequenceClassification"),rSo=o(" (OpenAI GPT model)"),tSo=l(),hb=a("li"),Wfe=a("strong"),aSo=o("perceiver"),nSo=o(" \u2014 "),MG=a("a"),sSo=o("PerceiverForSequenceClassification"),lSo=o(" (Perceiver model)"),iSo=l(),pb=a("li"),Qfe=a("strong"),dSo=o("plbart"),cSo=o(" \u2014 "),EG=a("a"),fSo=o("PLBartForSequenceClassification"),mSo=o(" (PLBart model)"),gSo=l(),_b=a("li"),Hfe=a("strong"),hSo=o("qdqbert"),pSo=o(" \u2014 "),CG=a("a"),_So=o("QDQBertForSequenceClassification"),uSo=o(" (QDQBert model)"),bSo=l(),ub=a("li"),Ufe=a("strong"),vSo=o("reformer"),FSo=o(" \u2014 "),wG=a("a"),TSo=o("ReformerForSequenceClassification"),MSo=o(" (Reformer model)"),ESo=l(),bb=a("li"),Jfe=a("strong"),CSo=o("rembert"),wSo=o(" \u2014 "),AG=a("a"),ASo=o("RemBertForSequenceClassification"),ySo=o(" (RemBERT model)"),LSo=l(),vb=a("li"),Yfe=a("strong"),xSo=o("roberta"),$So=o(" \u2014 "),yG=a("a"),kSo=o("RobertaForSequenceClassification"),SSo=o(" (RoBERTa model)"),RSo=l(),Fb=a("li"),Kfe=a("strong"),PSo=o("roformer"),BSo=o(" \u2014 "),LG=a("a"),ISo=o("RoFormerForSequenceClassification"),qSo=o(" (RoFormer model)"),NSo=l(),Tb=a("li"),Zfe=a("strong"),jSo=o("squeezebert"),DSo=o(" \u2014 "),xG=a("a"),GSo=o("SqueezeBertForSequenceClassification"),OSo=o(" (SqueezeBERT model)"),VSo=l(),Mb=a("li"),eme=a("strong"),XSo=o("tapas"),zSo=o(" \u2014 "),$G=a("a"),WSo=o("TapasForSequenceClassification"),QSo=o(" (TAPAS model)"),HSo=l(),Eb=a("li"),ome=a("strong"),USo=o("transfo-xl"),JSo=o(" \u2014 "),kG=a("a"),YSo=o("TransfoXLForSequenceClassification"),KSo=o(" (Transformer-XL model)"),ZSo=l(),Cb=a("li"),rme=a("strong"),eRo=o("xlm"),oRo=o(" \u2014 "),SG=a("a"),rRo=o("XLMForSequenceClassification"),tRo=o(" (XLM model)"),aRo=l(),wb=a("li"),tme=a("strong"),nRo=o("xlm-roberta"),sRo=o(" \u2014 "),RG=a("a"),lRo=o("XLMRobertaForSequenceClassification"),iRo=o(" (XLM-RoBERTa model)"),dRo=l(),Ab=a("li"),ame=a("strong"),cRo=o("xlm-roberta-xl"),fRo=o(" \u2014 "),PG=a("a"),mRo=o("XLMRobertaXLForSequenceClassification"),gRo=o(" (XLM-RoBERTa-XL model)"),hRo=l(),yb=a("li"),nme=a("strong"),pRo=o("xlnet"),_Ro=o(" \u2014 "),BG=a("a"),uRo=o("XLNetForSequenceClassification"),bRo=o(" (XLNet model)"),vRo=l(),Lb=a("li"),sme=a("strong"),FRo=o("yoso"),TRo=o(" \u2014 "),IG=a("a"),MRo=o("YosoForSequenceClassification"),ERo=o(" (YOSO model)"),CRo=l(),xb=a("p"),wRo=o("The model is set in evaluation mode by default using "),lme=a("code"),ARo=o("model.eval()"),yRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=a("code"),LRo=o("model.train()"),xRo=l(),F($b.$$.fragment),Dqe=l(),Oi=a("h2"),kb=a("a"),dme=a("span"),F(Fy.$$.fragment),$Ro=l(),cme=a("span"),kRo=o("AutoModelForMultipleChoice"),Gqe=l(),Po=a("div"),F(Ty.$$.fragment),SRo=l(),Vi=a("p"),RRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qG=a("a"),PRo=o("from_pretrained()"),BRo=o(" class method or the "),NG=a("a"),IRo=o("from_config()"),qRo=o(` class
method.`),NRo=l(),My=a("p"),jRo=o("This class cannot be instantiated directly using "),fme=a("code"),DRo=o("__init__()"),GRo=o(" (throws an error)."),ORo=l(),dt=a("div"),F(Ey.$$.fragment),VRo=l(),mme=a("p"),XRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zRo=l(),Xi=a("p"),WRo=o(`Note:
Loading a model from its configuration file does `),gme=a("strong"),QRo=o("not"),HRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),URo=o("from_pretrained()"),JRo=o(" to load the model weights."),YRo=l(),F(Sb.$$.fragment),KRo=l(),ro=a("div"),F(Cy.$$.fragment),ZRo=l(),hme=a("p"),ePo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oPo=l(),Pa=a("p"),rPo=o("The model class to instantiate is selected based on the "),pme=a("code"),tPo=o("model_type"),aPo=o(` property of the config object (either
passed as an argument or loaded from `),_me=a("code"),nPo=o("pretrained_model_name_or_path"),sPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),lPo=o("pretrained_model_name_or_path"),iPo=o(":"),dPo=l(),Y=a("ul"),Rb=a("li"),bme=a("strong"),cPo=o("albert"),fPo=o(" \u2014 "),DG=a("a"),mPo=o("AlbertForMultipleChoice"),gPo=o(" (ALBERT model)"),hPo=l(),Pb=a("li"),vme=a("strong"),pPo=o("bert"),_Po=o(" \u2014 "),GG=a("a"),uPo=o("BertForMultipleChoice"),bPo=o(" (BERT model)"),vPo=l(),Bb=a("li"),Fme=a("strong"),FPo=o("big_bird"),TPo=o(" \u2014 "),OG=a("a"),MPo=o("BigBirdForMultipleChoice"),EPo=o(" (BigBird model)"),CPo=l(),Ib=a("li"),Tme=a("strong"),wPo=o("camembert"),APo=o(" \u2014 "),VG=a("a"),yPo=o("CamembertForMultipleChoice"),LPo=o(" (CamemBERT model)"),xPo=l(),qb=a("li"),Mme=a("strong"),$Po=o("canine"),kPo=o(" \u2014 "),XG=a("a"),SPo=o("CanineForMultipleChoice"),RPo=o(" (Canine model)"),PPo=l(),Nb=a("li"),Eme=a("strong"),BPo=o("convbert"),IPo=o(" \u2014 "),zG=a("a"),qPo=o("ConvBertForMultipleChoice"),NPo=o(" (ConvBERT model)"),jPo=l(),jb=a("li"),Cme=a("strong"),DPo=o("data2vec-text"),GPo=o(" \u2014 "),WG=a("a"),OPo=o("Data2VecTextForMultipleChoice"),VPo=o(" (Data2VecText model)"),XPo=l(),Db=a("li"),wme=a("strong"),zPo=o("deberta-v2"),WPo=o(" \u2014 "),QG=a("a"),QPo=o("DebertaV2ForMultipleChoice"),HPo=o(" (DeBERTa-v2 model)"),UPo=l(),Gb=a("li"),Ame=a("strong"),JPo=o("distilbert"),YPo=o(" \u2014 "),HG=a("a"),KPo=o("DistilBertForMultipleChoice"),ZPo=o(" (DistilBERT model)"),eBo=l(),Ob=a("li"),yme=a("strong"),oBo=o("electra"),rBo=o(" \u2014 "),UG=a("a"),tBo=o("ElectraForMultipleChoice"),aBo=o(" (ELECTRA model)"),nBo=l(),Vb=a("li"),Lme=a("strong"),sBo=o("flaubert"),lBo=o(" \u2014 "),JG=a("a"),iBo=o("FlaubertForMultipleChoice"),dBo=o(" (FlauBERT model)"),cBo=l(),Xb=a("li"),xme=a("strong"),fBo=o("fnet"),mBo=o(" \u2014 "),YG=a("a"),gBo=o("FNetForMultipleChoice"),hBo=o(" (FNet model)"),pBo=l(),zb=a("li"),$me=a("strong"),_Bo=o("funnel"),uBo=o(" \u2014 "),KG=a("a"),bBo=o("FunnelForMultipleChoice"),vBo=o(" (Funnel Transformer model)"),FBo=l(),Wb=a("li"),kme=a("strong"),TBo=o("ibert"),MBo=o(" \u2014 "),ZG=a("a"),EBo=o("IBertForMultipleChoice"),CBo=o(" (I-BERT model)"),wBo=l(),Qb=a("li"),Sme=a("strong"),ABo=o("longformer"),yBo=o(" \u2014 "),eO=a("a"),LBo=o("LongformerForMultipleChoice"),xBo=o(" (Longformer model)"),$Bo=l(),Hb=a("li"),Rme=a("strong"),kBo=o("megatron-bert"),SBo=o(" \u2014 "),oO=a("a"),RBo=o("MegatronBertForMultipleChoice"),PBo=o(" (MegatronBert model)"),BBo=l(),Ub=a("li"),Pme=a("strong"),IBo=o("mobilebert"),qBo=o(" \u2014 "),rO=a("a"),NBo=o("MobileBertForMultipleChoice"),jBo=o(" (MobileBERT model)"),DBo=l(),Jb=a("li"),Bme=a("strong"),GBo=o("mpnet"),OBo=o(" \u2014 "),tO=a("a"),VBo=o("MPNetForMultipleChoice"),XBo=o(" (MPNet model)"),zBo=l(),Yb=a("li"),Ime=a("strong"),WBo=o("nystromformer"),QBo=o(" \u2014 "),aO=a("a"),HBo=o("NystromformerForMultipleChoice"),UBo=o(" (Nystromformer model)"),JBo=l(),Kb=a("li"),qme=a("strong"),YBo=o("qdqbert"),KBo=o(" \u2014 "),nO=a("a"),ZBo=o("QDQBertForMultipleChoice"),eIo=o(" (QDQBert model)"),oIo=l(),Zb=a("li"),Nme=a("strong"),rIo=o("rembert"),tIo=o(" \u2014 "),sO=a("a"),aIo=o("RemBertForMultipleChoice"),nIo=o(" (RemBERT model)"),sIo=l(),e2=a("li"),jme=a("strong"),lIo=o("roberta"),iIo=o(" \u2014 "),lO=a("a"),dIo=o("RobertaForMultipleChoice"),cIo=o(" (RoBERTa model)"),fIo=l(),o2=a("li"),Dme=a("strong"),mIo=o("roformer"),gIo=o(" \u2014 "),iO=a("a"),hIo=o("RoFormerForMultipleChoice"),pIo=o(" (RoFormer model)"),_Io=l(),r2=a("li"),Gme=a("strong"),uIo=o("squeezebert"),bIo=o(" \u2014 "),dO=a("a"),vIo=o("SqueezeBertForMultipleChoice"),FIo=o(" (SqueezeBERT model)"),TIo=l(),t2=a("li"),Ome=a("strong"),MIo=o("xlm"),EIo=o(" \u2014 "),cO=a("a"),CIo=o("XLMForMultipleChoice"),wIo=o(" (XLM model)"),AIo=l(),a2=a("li"),Vme=a("strong"),yIo=o("xlm-roberta"),LIo=o(" \u2014 "),fO=a("a"),xIo=o("XLMRobertaForMultipleChoice"),$Io=o(" (XLM-RoBERTa model)"),kIo=l(),n2=a("li"),Xme=a("strong"),SIo=o("xlm-roberta-xl"),RIo=o(" \u2014 "),mO=a("a"),PIo=o("XLMRobertaXLForMultipleChoice"),BIo=o(" (XLM-RoBERTa-XL model)"),IIo=l(),s2=a("li"),zme=a("strong"),qIo=o("xlnet"),NIo=o(" \u2014 "),gO=a("a"),jIo=o("XLNetForMultipleChoice"),DIo=o(" (XLNet model)"),GIo=l(),l2=a("li"),Wme=a("strong"),OIo=o("yoso"),VIo=o(" \u2014 "),hO=a("a"),XIo=o("YosoForMultipleChoice"),zIo=o(" (YOSO model)"),WIo=l(),i2=a("p"),QIo=o("The model is set in evaluation mode by default using "),Qme=a("code"),HIo=o("model.eval()"),UIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),JIo=o("model.train()"),YIo=l(),F(d2.$$.fragment),Oqe=l(),zi=a("h2"),c2=a("a"),Ume=a("span"),F(wy.$$.fragment),KIo=l(),Jme=a("span"),ZIo=o("AutoModelForNextSentencePrediction"),Vqe=l(),Bo=a("div"),F(Ay.$$.fragment),eqo=l(),Wi=a("p"),oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pO=a("a"),rqo=o("from_pretrained()"),tqo=o(" class method or the "),_O=a("a"),aqo=o("from_config()"),nqo=o(` class
method.`),sqo=l(),yy=a("p"),lqo=o("This class cannot be instantiated directly using "),Yme=a("code"),iqo=o("__init__()"),dqo=o(" (throws an error)."),cqo=l(),ct=a("div"),F(Ly.$$.fragment),fqo=l(),Kme=a("p"),mqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gqo=l(),Qi=a("p"),hqo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),pqo=o("not"),_qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),uqo=o("from_pretrained()"),bqo=o(" to load the model weights."),vqo=l(),F(f2.$$.fragment),Fqo=l(),to=a("div"),F(xy.$$.fragment),Tqo=l(),ege=a("p"),Mqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Eqo=l(),Ba=a("p"),Cqo=o("The model class to instantiate is selected based on the "),oge=a("code"),wqo=o("model_type"),Aqo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),yqo=o("pretrained_model_name_or_path"),Lqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),xqo=o("pretrained_model_name_or_path"),$qo=o(":"),kqo=l(),Yr=a("ul"),m2=a("li"),age=a("strong"),Sqo=o("bert"),Rqo=o(" \u2014 "),bO=a("a"),Pqo=o("BertForNextSentencePrediction"),Bqo=o(" (BERT model)"),Iqo=l(),g2=a("li"),nge=a("strong"),qqo=o("fnet"),Nqo=o(" \u2014 "),vO=a("a"),jqo=o("FNetForNextSentencePrediction"),Dqo=o(" (FNet model)"),Gqo=l(),h2=a("li"),sge=a("strong"),Oqo=o("megatron-bert"),Vqo=o(" \u2014 "),FO=a("a"),Xqo=o("MegatronBertForNextSentencePrediction"),zqo=o(" (MegatronBert model)"),Wqo=l(),p2=a("li"),lge=a("strong"),Qqo=o("mobilebert"),Hqo=o(" \u2014 "),TO=a("a"),Uqo=o("MobileBertForNextSentencePrediction"),Jqo=o(" (MobileBERT model)"),Yqo=l(),_2=a("li"),ige=a("strong"),Kqo=o("qdqbert"),Zqo=o(" \u2014 "),MO=a("a"),eNo=o("QDQBertForNextSentencePrediction"),oNo=o(" (QDQBert model)"),rNo=l(),u2=a("p"),tNo=o("The model is set in evaluation mode by default using "),dge=a("code"),aNo=o("model.eval()"),nNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=a("code"),sNo=o("model.train()"),lNo=l(),F(b2.$$.fragment),Xqe=l(),Hi=a("h2"),v2=a("a"),fge=a("span"),F($y.$$.fragment),iNo=l(),mge=a("span"),dNo=o("AutoModelForTokenClassification"),zqe=l(),Io=a("div"),F(ky.$$.fragment),cNo=l(),Ui=a("p"),fNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EO=a("a"),mNo=o("from_pretrained()"),gNo=o(" class method or the "),CO=a("a"),hNo=o("from_config()"),pNo=o(` class
method.`),_No=l(),Sy=a("p"),uNo=o("This class cannot be instantiated directly using "),gge=a("code"),bNo=o("__init__()"),vNo=o(" (throws an error)."),FNo=l(),ft=a("div"),F(Ry.$$.fragment),TNo=l(),hge=a("p"),MNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ENo=l(),Ji=a("p"),CNo=o(`Note:
Loading a model from its configuration file does `),pge=a("strong"),wNo=o("not"),ANo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),yNo=o("from_pretrained()"),LNo=o(" to load the model weights."),xNo=l(),F(F2.$$.fragment),$No=l(),ao=a("div"),F(Py.$$.fragment),kNo=l(),_ge=a("p"),SNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),RNo=l(),Ia=a("p"),PNo=o("The model class to instantiate is selected based on the "),uge=a("code"),BNo=o("model_type"),INo=o(` property of the config object (either
passed as an argument or loaded from `),bge=a("code"),qNo=o("pretrained_model_name_or_path"),NNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=a("code"),jNo=o("pretrained_model_name_or_path"),DNo=o(":"),GNo=l(),U=a("ul"),T2=a("li"),Fge=a("strong"),ONo=o("albert"),VNo=o(" \u2014 "),AO=a("a"),XNo=o("AlbertForTokenClassification"),zNo=o(" (ALBERT model)"),WNo=l(),M2=a("li"),Tge=a("strong"),QNo=o("bert"),HNo=o(" \u2014 "),yO=a("a"),UNo=o("BertForTokenClassification"),JNo=o(" (BERT model)"),YNo=l(),E2=a("li"),Mge=a("strong"),KNo=o("big_bird"),ZNo=o(" \u2014 "),LO=a("a"),ejo=o("BigBirdForTokenClassification"),ojo=o(" (BigBird model)"),rjo=l(),C2=a("li"),Ege=a("strong"),tjo=o("camembert"),ajo=o(" \u2014 "),xO=a("a"),njo=o("CamembertForTokenClassification"),sjo=o(" (CamemBERT model)"),ljo=l(),w2=a("li"),Cge=a("strong"),ijo=o("canine"),djo=o(" \u2014 "),$O=a("a"),cjo=o("CanineForTokenClassification"),fjo=o(" (Canine model)"),mjo=l(),A2=a("li"),wge=a("strong"),gjo=o("convbert"),hjo=o(" \u2014 "),kO=a("a"),pjo=o("ConvBertForTokenClassification"),_jo=o(" (ConvBERT model)"),ujo=l(),y2=a("li"),Age=a("strong"),bjo=o("data2vec-text"),vjo=o(" \u2014 "),SO=a("a"),Fjo=o("Data2VecTextForTokenClassification"),Tjo=o(" (Data2VecText model)"),Mjo=l(),L2=a("li"),yge=a("strong"),Ejo=o("deberta"),Cjo=o(" \u2014 "),RO=a("a"),wjo=o("DebertaForTokenClassification"),Ajo=o(" (DeBERTa model)"),yjo=l(),x2=a("li"),Lge=a("strong"),Ljo=o("deberta-v2"),xjo=o(" \u2014 "),PO=a("a"),$jo=o("DebertaV2ForTokenClassification"),kjo=o(" (DeBERTa-v2 model)"),Sjo=l(),$2=a("li"),xge=a("strong"),Rjo=o("distilbert"),Pjo=o(" \u2014 "),BO=a("a"),Bjo=o("DistilBertForTokenClassification"),Ijo=o(" (DistilBERT model)"),qjo=l(),k2=a("li"),$ge=a("strong"),Njo=o("electra"),jjo=o(" \u2014 "),IO=a("a"),Djo=o("ElectraForTokenClassification"),Gjo=o(" (ELECTRA model)"),Ojo=l(),S2=a("li"),kge=a("strong"),Vjo=o("flaubert"),Xjo=o(" \u2014 "),qO=a("a"),zjo=o("FlaubertForTokenClassification"),Wjo=o(" (FlauBERT model)"),Qjo=l(),R2=a("li"),Sge=a("strong"),Hjo=o("fnet"),Ujo=o(" \u2014 "),NO=a("a"),Jjo=o("FNetForTokenClassification"),Yjo=o(" (FNet model)"),Kjo=l(),P2=a("li"),Rge=a("strong"),Zjo=o("funnel"),eDo=o(" \u2014 "),jO=a("a"),oDo=o("FunnelForTokenClassification"),rDo=o(" (Funnel Transformer model)"),tDo=l(),B2=a("li"),Pge=a("strong"),aDo=o("gpt2"),nDo=o(" \u2014 "),DO=a("a"),sDo=o("GPT2ForTokenClassification"),lDo=o(" (OpenAI GPT-2 model)"),iDo=l(),I2=a("li"),Bge=a("strong"),dDo=o("ibert"),cDo=o(" \u2014 "),GO=a("a"),fDo=o("IBertForTokenClassification"),mDo=o(" (I-BERT model)"),gDo=l(),q2=a("li"),Ige=a("strong"),hDo=o("layoutlm"),pDo=o(" \u2014 "),OO=a("a"),_Do=o("LayoutLMForTokenClassification"),uDo=o(" (LayoutLM model)"),bDo=l(),N2=a("li"),qge=a("strong"),vDo=o("layoutlmv2"),FDo=o(" \u2014 "),VO=a("a"),TDo=o("LayoutLMv2ForTokenClassification"),MDo=o(" (LayoutLMv2 model)"),EDo=l(),j2=a("li"),Nge=a("strong"),CDo=o("longformer"),wDo=o(" \u2014 "),XO=a("a"),ADo=o("LongformerForTokenClassification"),yDo=o(" (Longformer model)"),LDo=l(),D2=a("li"),jge=a("strong"),xDo=o("megatron-bert"),$Do=o(" \u2014 "),zO=a("a"),kDo=o("MegatronBertForTokenClassification"),SDo=o(" (MegatronBert model)"),RDo=l(),G2=a("li"),Dge=a("strong"),PDo=o("mobilebert"),BDo=o(" \u2014 "),WO=a("a"),IDo=o("MobileBertForTokenClassification"),qDo=o(" (MobileBERT model)"),NDo=l(),O2=a("li"),Gge=a("strong"),jDo=o("mpnet"),DDo=o(" \u2014 "),QO=a("a"),GDo=o("MPNetForTokenClassification"),ODo=o(" (MPNet model)"),VDo=l(),V2=a("li"),Oge=a("strong"),XDo=o("nystromformer"),zDo=o(" \u2014 "),HO=a("a"),WDo=o("NystromformerForTokenClassification"),QDo=o(" (Nystromformer model)"),HDo=l(),X2=a("li"),Vge=a("strong"),UDo=o("qdqbert"),JDo=o(" \u2014 "),UO=a("a"),YDo=o("QDQBertForTokenClassification"),KDo=o(" (QDQBert model)"),ZDo=l(),z2=a("li"),Xge=a("strong"),eGo=o("rembert"),oGo=o(" \u2014 "),JO=a("a"),rGo=o("RemBertForTokenClassification"),tGo=o(" (RemBERT model)"),aGo=l(),W2=a("li"),zge=a("strong"),nGo=o("roberta"),sGo=o(" \u2014 "),YO=a("a"),lGo=o("RobertaForTokenClassification"),iGo=o(" (RoBERTa model)"),dGo=l(),Q2=a("li"),Wge=a("strong"),cGo=o("roformer"),fGo=o(" \u2014 "),KO=a("a"),mGo=o("RoFormerForTokenClassification"),gGo=o(" (RoFormer model)"),hGo=l(),H2=a("li"),Qge=a("strong"),pGo=o("squeezebert"),_Go=o(" \u2014 "),ZO=a("a"),uGo=o("SqueezeBertForTokenClassification"),bGo=o(" (SqueezeBERT model)"),vGo=l(),U2=a("li"),Hge=a("strong"),FGo=o("xlm"),TGo=o(" \u2014 "),eV=a("a"),MGo=o("XLMForTokenClassification"),EGo=o(" (XLM model)"),CGo=l(),J2=a("li"),Uge=a("strong"),wGo=o("xlm-roberta"),AGo=o(" \u2014 "),oV=a("a"),yGo=o("XLMRobertaForTokenClassification"),LGo=o(" (XLM-RoBERTa model)"),xGo=l(),Y2=a("li"),Jge=a("strong"),$Go=o("xlm-roberta-xl"),kGo=o(" \u2014 "),rV=a("a"),SGo=o("XLMRobertaXLForTokenClassification"),RGo=o(" (XLM-RoBERTa-XL model)"),PGo=l(),K2=a("li"),Yge=a("strong"),BGo=o("xlnet"),IGo=o(" \u2014 "),tV=a("a"),qGo=o("XLNetForTokenClassification"),NGo=o(" (XLNet model)"),jGo=l(),Z2=a("li"),Kge=a("strong"),DGo=o("yoso"),GGo=o(" \u2014 "),aV=a("a"),OGo=o("YosoForTokenClassification"),VGo=o(" (YOSO model)"),XGo=l(),e5=a("p"),zGo=o("The model is set in evaluation mode by default using "),Zge=a("code"),WGo=o("model.eval()"),QGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=a("code"),HGo=o("model.train()"),UGo=l(),F(o5.$$.fragment),Wqe=l(),Yi=a("h2"),r5=a("a"),ohe=a("span"),F(By.$$.fragment),JGo=l(),rhe=a("span"),YGo=o("AutoModelForQuestionAnswering"),Qqe=l(),qo=a("div"),F(Iy.$$.fragment),KGo=l(),Ki=a("p"),ZGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nV=a("a"),eOo=o("from_pretrained()"),oOo=o(" class method or the "),sV=a("a"),rOo=o("from_config()"),tOo=o(` class
method.`),aOo=l(),qy=a("p"),nOo=o("This class cannot be instantiated directly using "),the=a("code"),sOo=o("__init__()"),lOo=o(" (throws an error)."),iOo=l(),mt=a("div"),F(Ny.$$.fragment),dOo=l(),ahe=a("p"),cOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fOo=l(),Zi=a("p"),mOo=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),gOo=o("not"),hOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lV=a("a"),pOo=o("from_pretrained()"),_Oo=o(" to load the model weights."),uOo=l(),F(t5.$$.fragment),bOo=l(),no=a("div"),F(jy.$$.fragment),vOo=l(),she=a("p"),FOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TOo=l(),qa=a("p"),MOo=o("The model class to instantiate is selected based on the "),lhe=a("code"),EOo=o("model_type"),COo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),wOo=o("pretrained_model_name_or_path"),AOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),yOo=o("pretrained_model_name_or_path"),LOo=o(":"),xOo=l(),V=a("ul"),a5=a("li"),che=a("strong"),$Oo=o("albert"),kOo=o(" \u2014 "),iV=a("a"),SOo=o("AlbertForQuestionAnswering"),ROo=o(" (ALBERT model)"),POo=l(),n5=a("li"),fhe=a("strong"),BOo=o("bart"),IOo=o(" \u2014 "),dV=a("a"),qOo=o("BartForQuestionAnswering"),NOo=o(" (BART model)"),jOo=l(),s5=a("li"),mhe=a("strong"),DOo=o("bert"),GOo=o(" \u2014 "),cV=a("a"),OOo=o("BertForQuestionAnswering"),VOo=o(" (BERT model)"),XOo=l(),l5=a("li"),ghe=a("strong"),zOo=o("big_bird"),WOo=o(" \u2014 "),fV=a("a"),QOo=o("BigBirdForQuestionAnswering"),HOo=o(" (BigBird model)"),UOo=l(),i5=a("li"),hhe=a("strong"),JOo=o("bigbird_pegasus"),YOo=o(" \u2014 "),mV=a("a"),KOo=o("BigBirdPegasusForQuestionAnswering"),ZOo=o(" (BigBirdPegasus model)"),eVo=l(),d5=a("li"),phe=a("strong"),oVo=o("camembert"),rVo=o(" \u2014 "),gV=a("a"),tVo=o("CamembertForQuestionAnswering"),aVo=o(" (CamemBERT model)"),nVo=l(),c5=a("li"),_he=a("strong"),sVo=o("canine"),lVo=o(" \u2014 "),hV=a("a"),iVo=o("CanineForQuestionAnswering"),dVo=o(" (Canine model)"),cVo=l(),f5=a("li"),uhe=a("strong"),fVo=o("convbert"),mVo=o(" \u2014 "),pV=a("a"),gVo=o("ConvBertForQuestionAnswering"),hVo=o(" (ConvBERT model)"),pVo=l(),m5=a("li"),bhe=a("strong"),_Vo=o("data2vec-text"),uVo=o(" \u2014 "),_V=a("a"),bVo=o("Data2VecTextForQuestionAnswering"),vVo=o(" (Data2VecText model)"),FVo=l(),g5=a("li"),vhe=a("strong"),TVo=o("deberta"),MVo=o(" \u2014 "),uV=a("a"),EVo=o("DebertaForQuestionAnswering"),CVo=o(" (DeBERTa model)"),wVo=l(),h5=a("li"),Fhe=a("strong"),AVo=o("deberta-v2"),yVo=o(" \u2014 "),bV=a("a"),LVo=o("DebertaV2ForQuestionAnswering"),xVo=o(" (DeBERTa-v2 model)"),$Vo=l(),p5=a("li"),The=a("strong"),kVo=o("distilbert"),SVo=o(" \u2014 "),vV=a("a"),RVo=o("DistilBertForQuestionAnswering"),PVo=o(" (DistilBERT model)"),BVo=l(),_5=a("li"),Mhe=a("strong"),IVo=o("electra"),qVo=o(" \u2014 "),FV=a("a"),NVo=o("ElectraForQuestionAnswering"),jVo=o(" (ELECTRA model)"),DVo=l(),u5=a("li"),Ehe=a("strong"),GVo=o("flaubert"),OVo=o(" \u2014 "),TV=a("a"),VVo=o("FlaubertForQuestionAnsweringSimple"),XVo=o(" (FlauBERT model)"),zVo=l(),b5=a("li"),Che=a("strong"),WVo=o("fnet"),QVo=o(" \u2014 "),MV=a("a"),HVo=o("FNetForQuestionAnswering"),UVo=o(" (FNet model)"),JVo=l(),v5=a("li"),whe=a("strong"),YVo=o("funnel"),KVo=o(" \u2014 "),EV=a("a"),ZVo=o("FunnelForQuestionAnswering"),eXo=o(" (Funnel Transformer model)"),oXo=l(),F5=a("li"),Ahe=a("strong"),rXo=o("gptj"),tXo=o(" \u2014 "),CV=a("a"),aXo=o("GPTJForQuestionAnswering"),nXo=o(" (GPT-J model)"),sXo=l(),T5=a("li"),yhe=a("strong"),lXo=o("ibert"),iXo=o(" \u2014 "),wV=a("a"),dXo=o("IBertForQuestionAnswering"),cXo=o(" (I-BERT model)"),fXo=l(),M5=a("li"),Lhe=a("strong"),mXo=o("layoutlmv2"),gXo=o(" \u2014 "),AV=a("a"),hXo=o("LayoutLMv2ForQuestionAnswering"),pXo=o(" (LayoutLMv2 model)"),_Xo=l(),E5=a("li"),xhe=a("strong"),uXo=o("led"),bXo=o(" \u2014 "),yV=a("a"),vXo=o("LEDForQuestionAnswering"),FXo=o(" (LED model)"),TXo=l(),C5=a("li"),$he=a("strong"),MXo=o("longformer"),EXo=o(" \u2014 "),LV=a("a"),CXo=o("LongformerForQuestionAnswering"),wXo=o(" (Longformer model)"),AXo=l(),w5=a("li"),khe=a("strong"),yXo=o("lxmert"),LXo=o(" \u2014 "),xV=a("a"),xXo=o("LxmertForQuestionAnswering"),$Xo=o(" (LXMERT model)"),kXo=l(),A5=a("li"),She=a("strong"),SXo=o("mbart"),RXo=o(" \u2014 "),$V=a("a"),PXo=o("MBartForQuestionAnswering"),BXo=o(" (mBART model)"),IXo=l(),y5=a("li"),Rhe=a("strong"),qXo=o("megatron-bert"),NXo=o(" \u2014 "),kV=a("a"),jXo=o("MegatronBertForQuestionAnswering"),DXo=o(" (MegatronBert model)"),GXo=l(),L5=a("li"),Phe=a("strong"),OXo=o("mobilebert"),VXo=o(" \u2014 "),SV=a("a"),XXo=o("MobileBertForQuestionAnswering"),zXo=o(" (MobileBERT model)"),WXo=l(),x5=a("li"),Bhe=a("strong"),QXo=o("mpnet"),HXo=o(" \u2014 "),RV=a("a"),UXo=o("MPNetForQuestionAnswering"),JXo=o(" (MPNet model)"),YXo=l(),$5=a("li"),Ihe=a("strong"),KXo=o("nystromformer"),ZXo=o(" \u2014 "),PV=a("a"),ezo=o("NystromformerForQuestionAnswering"),ozo=o(" (Nystromformer model)"),rzo=l(),k5=a("li"),qhe=a("strong"),tzo=o("qdqbert"),azo=o(" \u2014 "),BV=a("a"),nzo=o("QDQBertForQuestionAnswering"),szo=o(" (QDQBert model)"),lzo=l(),S5=a("li"),Nhe=a("strong"),izo=o("reformer"),dzo=o(" \u2014 "),IV=a("a"),czo=o("ReformerForQuestionAnswering"),fzo=o(" (Reformer model)"),mzo=l(),R5=a("li"),jhe=a("strong"),gzo=o("rembert"),hzo=o(" \u2014 "),qV=a("a"),pzo=o("RemBertForQuestionAnswering"),_zo=o(" (RemBERT model)"),uzo=l(),P5=a("li"),Dhe=a("strong"),bzo=o("roberta"),vzo=o(" \u2014 "),NV=a("a"),Fzo=o("RobertaForQuestionAnswering"),Tzo=o(" (RoBERTa model)"),Mzo=l(),B5=a("li"),Ghe=a("strong"),Ezo=o("roformer"),Czo=o(" \u2014 "),jV=a("a"),wzo=o("RoFormerForQuestionAnswering"),Azo=o(" (RoFormer model)"),yzo=l(),I5=a("li"),Ohe=a("strong"),Lzo=o("splinter"),xzo=o(" \u2014 "),DV=a("a"),$zo=o("SplinterForQuestionAnswering"),kzo=o(" (Splinter model)"),Szo=l(),q5=a("li"),Vhe=a("strong"),Rzo=o("squeezebert"),Pzo=o(" \u2014 "),GV=a("a"),Bzo=o("SqueezeBertForQuestionAnswering"),Izo=o(" (SqueezeBERT model)"),qzo=l(),N5=a("li"),Xhe=a("strong"),Nzo=o("xlm"),jzo=o(" \u2014 "),OV=a("a"),Dzo=o("XLMForQuestionAnsweringSimple"),Gzo=o(" (XLM model)"),Ozo=l(),j5=a("li"),zhe=a("strong"),Vzo=o("xlm-roberta"),Xzo=o(" \u2014 "),VV=a("a"),zzo=o("XLMRobertaForQuestionAnswering"),Wzo=o(" (XLM-RoBERTa model)"),Qzo=l(),D5=a("li"),Whe=a("strong"),Hzo=o("xlm-roberta-xl"),Uzo=o(" \u2014 "),XV=a("a"),Jzo=o("XLMRobertaXLForQuestionAnswering"),Yzo=o(" (XLM-RoBERTa-XL model)"),Kzo=l(),G5=a("li"),Qhe=a("strong"),Zzo=o("xlnet"),eWo=o(" \u2014 "),zV=a("a"),oWo=o("XLNetForQuestionAnsweringSimple"),rWo=o(" (XLNet model)"),tWo=l(),O5=a("li"),Hhe=a("strong"),aWo=o("yoso"),nWo=o(" \u2014 "),WV=a("a"),sWo=o("YosoForQuestionAnswering"),lWo=o(" (YOSO model)"),iWo=l(),V5=a("p"),dWo=o("The model is set in evaluation mode by default using "),Uhe=a("code"),cWo=o("model.eval()"),fWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=a("code"),mWo=o("model.train()"),gWo=l(),F(X5.$$.fragment),Hqe=l(),ed=a("h2"),z5=a("a"),Yhe=a("span"),F(Dy.$$.fragment),hWo=l(),Khe=a("span"),pWo=o("AutoModelForTableQuestionAnswering"),Uqe=l(),No=a("div"),F(Gy.$$.fragment),_Wo=l(),od=a("p"),uWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QV=a("a"),bWo=o("from_pretrained()"),vWo=o(" class method or the "),HV=a("a"),FWo=o("from_config()"),TWo=o(` class
method.`),MWo=l(),Oy=a("p"),EWo=o("This class cannot be instantiated directly using "),Zhe=a("code"),CWo=o("__init__()"),wWo=o(" (throws an error)."),AWo=l(),gt=a("div"),F(Vy.$$.fragment),yWo=l(),epe=a("p"),LWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xWo=l(),rd=a("p"),$Wo=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),RWo=o("from_pretrained()"),PWo=o(" to load the model weights."),BWo=l(),F(W5.$$.fragment),IWo=l(),so=a("div"),F(Xy.$$.fragment),qWo=l(),rpe=a("p"),NWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jWo=l(),Na=a("p"),DWo=o("The model class to instantiate is selected based on the "),tpe=a("code"),GWo=o("model_type"),OWo=o(` property of the config object (either
passed as an argument or loaded from `),ape=a("code"),VWo=o("pretrained_model_name_or_path"),XWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=a("code"),zWo=o("pretrained_model_name_or_path"),WWo=o(":"),QWo=l(),spe=a("ul"),Q5=a("li"),lpe=a("strong"),HWo=o("tapas"),UWo=o(" \u2014 "),JV=a("a"),JWo=o("TapasForQuestionAnswering"),YWo=o(" (TAPAS model)"),KWo=l(),H5=a("p"),ZWo=o("The model is set in evaluation mode by default using "),ipe=a("code"),eQo=o("model.eval()"),oQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=a("code"),rQo=o("model.train()"),tQo=l(),F(U5.$$.fragment),Jqe=l(),td=a("h2"),J5=a("a"),cpe=a("span"),F(zy.$$.fragment),aQo=l(),fpe=a("span"),nQo=o("AutoModelForImageClassification"),Yqe=l(),jo=a("div"),F(Wy.$$.fragment),sQo=l(),ad=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),KV=a("a"),cQo=o("from_config()"),fQo=o(` class
method.`),mQo=l(),Qy=a("p"),gQo=o("This class cannot be instantiated directly using "),mpe=a("code"),hQo=o("__init__()"),pQo=o(" (throws an error)."),_Qo=l(),ht=a("div"),F(Hy.$$.fragment),uQo=l(),gpe=a("p"),bQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vQo=l(),nd=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),F(Y5.$$.fragment),AQo=l(),lo=a("div"),F(Uy.$$.fragment),yQo=l(),ppe=a("p"),LQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xQo=l(),ja=a("p"),$Qo=o("The model class to instantiate is selected based on the "),_pe=a("code"),kQo=o("model_type"),SQo=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),RQo=o("pretrained_model_name_or_path"),PQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=a("code"),BQo=o("pretrained_model_name_or_path"),IQo=o(":"),qQo=l(),Fe=a("ul"),K5=a("li"),vpe=a("strong"),NQo=o("beit"),jQo=o(" \u2014 "),eX=a("a"),DQo=o("BeitForImageClassification"),GQo=o(" (BEiT model)"),OQo=l(),Z5=a("li"),Fpe=a("strong"),VQo=o("convnext"),XQo=o(" \u2014 "),oX=a("a"),zQo=o("ConvNextForImageClassification"),WQo=o(" (ConvNext model)"),QQo=l(),ev=a("li"),Tpe=a("strong"),HQo=o("cvt"),UQo=o(" \u2014 "),rX=a("a"),JQo=o("CvtForImageClassification"),YQo=o(" (CvT model)"),KQo=l(),ov=a("li"),Mpe=a("strong"),ZQo=o("data2vec-vision"),eHo=o(" \u2014 "),tX=a("a"),oHo=o("Data2VecVisionForImageClassification"),rHo=o(" (Data2VecVision model)"),tHo=l(),Ps=a("li"),Epe=a("strong"),aHo=o("deit"),nHo=o(" \u2014 "),aX=a("a"),sHo=o("DeiTForImageClassification"),lHo=o(" or "),nX=a("a"),iHo=o("DeiTForImageClassificationWithTeacher"),dHo=o(" (DeiT model)"),cHo=l(),rv=a("li"),Cpe=a("strong"),fHo=o("imagegpt"),mHo=o(" \u2014 "),sX=a("a"),gHo=o("ImageGPTForImageClassification"),hHo=o(" (ImageGPT model)"),pHo=l(),pt=a("li"),wpe=a("strong"),_Ho=o("perceiver"),uHo=o(" \u2014 "),lX=a("a"),bHo=o("PerceiverForImageClassificationLearned"),vHo=o(" or "),iX=a("a"),FHo=o("PerceiverForImageClassificationFourier"),THo=o(" or "),dX=a("a"),MHo=o("PerceiverForImageClassificationConvProcessing"),EHo=o(" (Perceiver model)"),CHo=l(),tv=a("li"),Ape=a("strong"),wHo=o("poolformer"),AHo=o(" \u2014 "),cX=a("a"),yHo=o("PoolFormerForImageClassification"),LHo=o(" (PoolFormer model)"),xHo=l(),av=a("li"),ype=a("strong"),$Ho=o("regnet"),kHo=o(" \u2014 "),fX=a("a"),SHo=o("RegNetForImageClassification"),RHo=o(" (RegNet model)"),PHo=l(),nv=a("li"),Lpe=a("strong"),BHo=o("resnet"),IHo=o(" \u2014 "),mX=a("a"),qHo=o("ResNetForImageClassification"),NHo=o(" (ResNet model)"),jHo=l(),sv=a("li"),xpe=a("strong"),DHo=o("segformer"),GHo=o(" \u2014 "),gX=a("a"),OHo=o("SegformerForImageClassification"),VHo=o(" (SegFormer model)"),XHo=l(),lv=a("li"),$pe=a("strong"),zHo=o("swin"),WHo=o(" \u2014 "),hX=a("a"),QHo=o("SwinForImageClassification"),HHo=o(" (Swin model)"),UHo=l(),iv=a("li"),kpe=a("strong"),JHo=o("van"),YHo=o(" \u2014 "),pX=a("a"),KHo=o("VanForImageClassification"),ZHo=o(" (VAN model)"),eUo=l(),dv=a("li"),Spe=a("strong"),oUo=o("vit"),rUo=o(" \u2014 "),_X=a("a"),tUo=o("ViTForImageClassification"),aUo=o(" (ViT model)"),nUo=l(),cv=a("p"),sUo=o("The model is set in evaluation mode by default using "),Rpe=a("code"),lUo=o("model.eval()"),iUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=a("code"),dUo=o("model.train()"),cUo=l(),F(fv.$$.fragment),Kqe=l(),sd=a("h2"),mv=a("a"),Bpe=a("span"),F(Jy.$$.fragment),fUo=l(),Ipe=a("span"),mUo=o("AutoModelForVision2Seq"),Zqe=l(),Do=a("div"),F(Yy.$$.fragment),gUo=l(),ld=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uX=a("a"),pUo=o("from_pretrained()"),_Uo=o(" class method or the "),bX=a("a"),uUo=o("from_config()"),bUo=o(` class
method.`),vUo=l(),Ky=a("p"),FUo=o("This class cannot be instantiated directly using "),qpe=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),_t=a("div"),F(Zy.$$.fragment),CUo=l(),Npe=a("p"),wUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AUo=l(),id=a("p"),yUo=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),LUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),$Uo=o("from_pretrained()"),kUo=o(" to load the model weights."),SUo=l(),F(gv.$$.fragment),RUo=l(),io=a("div"),F(e8.$$.fragment),PUo=l(),Dpe=a("p"),BUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IUo=l(),Da=a("p"),qUo=o("The model class to instantiate is selected based on the "),Gpe=a("code"),NUo=o("model_type"),jUo=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(":"),XUo=l(),Xpe=a("ul"),hv=a("li"),zpe=a("strong"),zUo=o("vision-encoder-decoder"),WUo=o(" \u2014 "),FX=a("a"),QUo=o("VisionEncoderDecoderModel"),HUo=o(" (Vision Encoder decoder model)"),UUo=l(),pv=a("p"),JUo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),YUo=o("model.eval()"),KUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),ZUo=o("model.train()"),eJo=l(),F(_v.$$.fragment),eNe=l(),dd=a("h2"),uv=a("a"),Hpe=a("span"),F(o8.$$.fragment),oJo=l(),Upe=a("span"),rJo=o("AutoModelForAudioClassification"),oNe=l(),Go=a("div"),F(r8.$$.fragment),tJo=l(),cd=a("p"),aJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),TX=a("a"),nJo=o("from_pretrained()"),sJo=o(" class method or the "),MX=a("a"),lJo=o("from_config()"),iJo=o(` class
method.`),dJo=l(),t8=a("p"),cJo=o("This class cannot be instantiated directly using "),Jpe=a("code"),fJo=o("__init__()"),mJo=o(" (throws an error)."),gJo=l(),ut=a("div"),F(a8.$$.fragment),hJo=l(),Ype=a("p"),pJo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Jo=l(),fd=a("p"),uJo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),bJo=o("not"),vJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=a("a"),FJo=o("from_pretrained()"),TJo=o(" to load the model weights."),MJo=l(),F(bv.$$.fragment),EJo=l(),co=a("div"),F(n8.$$.fragment),CJo=l(),Zpe=a("p"),wJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),AJo=l(),Ga=a("p"),yJo=o("The model class to instantiate is selected based on the "),e_e=a("code"),LJo=o("model_type"),xJo=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),$Jo=o("pretrained_model_name_or_path"),kJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),SJo=o("pretrained_model_name_or_path"),RJo=o(":"),PJo=l(),ke=a("ul"),vv=a("li"),t_e=a("strong"),BJo=o("data2vec-audio"),IJo=o(" \u2014 "),CX=a("a"),qJo=o("Data2VecAudioForSequenceClassification"),NJo=o(" (Data2VecAudio model)"),jJo=l(),Fv=a("li"),a_e=a("strong"),DJo=o("hubert"),GJo=o(" \u2014 "),wX=a("a"),OJo=o("HubertForSequenceClassification"),VJo=o(" (Hubert model)"),XJo=l(),Tv=a("li"),n_e=a("strong"),zJo=o("sew"),WJo=o(" \u2014 "),AX=a("a"),QJo=o("SEWForSequenceClassification"),HJo=o(" (SEW model)"),UJo=l(),Mv=a("li"),s_e=a("strong"),JJo=o("sew-d"),YJo=o(" \u2014 "),yX=a("a"),KJo=o("SEWDForSequenceClassification"),ZJo=o(" (SEW-D model)"),eYo=l(),Ev=a("li"),l_e=a("strong"),oYo=o("unispeech"),rYo=o(" \u2014 "),LX=a("a"),tYo=o("UniSpeechForSequenceClassification"),aYo=o(" (UniSpeech model)"),nYo=l(),Cv=a("li"),i_e=a("strong"),sYo=o("unispeech-sat"),lYo=o(" \u2014 "),xX=a("a"),iYo=o("UniSpeechSatForSequenceClassification"),dYo=o(" (UniSpeechSat model)"),cYo=l(),wv=a("li"),d_e=a("strong"),fYo=o("wav2vec2"),mYo=o(" \u2014 "),$X=a("a"),gYo=o("Wav2Vec2ForSequenceClassification"),hYo=o(" (Wav2Vec2 model)"),pYo=l(),Av=a("li"),c_e=a("strong"),_Yo=o("wav2vec2-conformer"),uYo=o(" \u2014 "),kX=a("a"),bYo=o("Wav2Vec2ConformerForSequenceClassification"),vYo=o(" (Wav2Vec2-Conformer model)"),FYo=l(),yv=a("li"),f_e=a("strong"),TYo=o("wavlm"),MYo=o(" \u2014 "),SX=a("a"),EYo=o("WavLMForSequenceClassification"),CYo=o(" (WavLM model)"),wYo=l(),Lv=a("p"),AYo=o("The model is set in evaluation mode by default using "),m_e=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=a("code"),xYo=o("model.train()"),$Yo=l(),F(xv.$$.fragment),rNe=l(),md=a("h2"),$v=a("a"),h_e=a("span"),F(s8.$$.fragment),kYo=l(),p_e=a("span"),SYo=o("AutoModelForAudioFrameClassification"),tNe=l(),Oo=a("div"),F(l8.$$.fragment),RYo=l(),gd=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),RX=a("a"),BYo=o("from_pretrained()"),IYo=o(" class method or the "),PX=a("a"),qYo=o("from_config()"),NYo=o(` class
method.`),jYo=l(),i8=a("p"),DYo=o("This class cannot be instantiated directly using "),__e=a("code"),GYo=o("__init__()"),OYo=o(" (throws an error)."),VYo=l(),bt=a("div"),F(d8.$$.fragment),XYo=l(),u_e=a("p"),zYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WYo=l(),hd=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),HYo=o("not"),UYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),JYo=o("from_pretrained()"),YYo=o(" to load the model weights."),KYo=l(),F(kv.$$.fragment),ZYo=l(),fo=a("div"),F(c8.$$.fragment),eKo=l(),v_e=a("p"),oKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rKo=l(),Oa=a("p"),tKo=o("The model class to instantiate is selected based on the "),F_e=a("code"),aKo=o("model_type"),nKo=o(` property of the config object (either
passed as an argument or loaded from `),T_e=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(":"),cKo=l(),Kr=a("ul"),Sv=a("li"),E_e=a("strong"),fKo=o("data2vec-audio"),mKo=o(" \u2014 "),IX=a("a"),gKo=o("Data2VecAudioForAudioFrameClassification"),hKo=o(" (Data2VecAudio model)"),pKo=l(),Rv=a("li"),C_e=a("strong"),_Ko=o("unispeech-sat"),uKo=o(" \u2014 "),qX=a("a"),bKo=o("UniSpeechSatForAudioFrameClassification"),vKo=o(" (UniSpeechSat model)"),FKo=l(),Pv=a("li"),w_e=a("strong"),TKo=o("wav2vec2"),MKo=o(" \u2014 "),NX=a("a"),EKo=o("Wav2Vec2ForAudioFrameClassification"),CKo=o(" (Wav2Vec2 model)"),wKo=l(),Bv=a("li"),A_e=a("strong"),AKo=o("wav2vec2-conformer"),yKo=o(" \u2014 "),jX=a("a"),LKo=o("Wav2Vec2ConformerForAudioFrameClassification"),xKo=o(" (Wav2Vec2-Conformer model)"),$Ko=l(),Iv=a("li"),y_e=a("strong"),kKo=o("wavlm"),SKo=o(" \u2014 "),DX=a("a"),RKo=o("WavLMForAudioFrameClassification"),PKo=o(" (WavLM model)"),BKo=l(),qv=a("p"),IKo=o("The model is set in evaluation mode by default using "),L_e=a("code"),qKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),jKo=o("model.train()"),DKo=l(),F(Nv.$$.fragment),aNe=l(),pd=a("h2"),jv=a("a"),$_e=a("span"),F(f8.$$.fragment),GKo=l(),k_e=a("span"),OKo=o("AutoModelForCTC"),nNe=l(),Vo=a("div"),F(m8.$$.fragment),VKo=l(),_d=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),GX=a("a"),zKo=o("from_pretrained()"),WKo=o(" class method or the "),OX=a("a"),QKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),g8=a("p"),JKo=o("This class cannot be instantiated directly using "),S_e=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),vt=a("div"),F(h8.$$.fragment),eZo=l(),R_e=a("p"),oZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rZo=l(),ud=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),P_e=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),F(Dv.$$.fragment),dZo=l(),mo=a("div"),F(p8.$$.fragment),cZo=l(),B_e=a("p"),fZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mZo=l(),Va=a("p"),gZo=o("The model class to instantiate is selected based on the "),I_e=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),Se=a("ul"),Gv=a("li"),j_e=a("strong"),TZo=o("data2vec-audio"),MZo=o(" \u2014 "),XX=a("a"),EZo=o("Data2VecAudioForCTC"),CZo=o(" (Data2VecAudio model)"),wZo=l(),Ov=a("li"),D_e=a("strong"),AZo=o("hubert"),yZo=o(" \u2014 "),zX=a("a"),LZo=o("HubertForCTC"),xZo=o(" (Hubert model)"),$Zo=l(),Vv=a("li"),G_e=a("strong"),kZo=o("sew"),SZo=o(" \u2014 "),WX=a("a"),RZo=o("SEWForCTC"),PZo=o(" (SEW model)"),BZo=l(),Xv=a("li"),O_e=a("strong"),IZo=o("sew-d"),qZo=o(" \u2014 "),QX=a("a"),NZo=o("SEWDForCTC"),jZo=o(" (SEW-D model)"),DZo=l(),zv=a("li"),V_e=a("strong"),GZo=o("unispeech"),OZo=o(" \u2014 "),HX=a("a"),VZo=o("UniSpeechForCTC"),XZo=o(" (UniSpeech model)"),zZo=l(),Wv=a("li"),X_e=a("strong"),WZo=o("unispeech-sat"),QZo=o(" \u2014 "),UX=a("a"),HZo=o("UniSpeechSatForCTC"),UZo=o(" (UniSpeechSat model)"),JZo=l(),Qv=a("li"),z_e=a("strong"),YZo=o("wav2vec2"),KZo=o(" \u2014 "),JX=a("a"),ZZo=o("Wav2Vec2ForCTC"),eer=o(" (Wav2Vec2 model)"),oer=l(),Hv=a("li"),W_e=a("strong"),rer=o("wav2vec2-conformer"),ter=o(" \u2014 "),YX=a("a"),aer=o("Wav2Vec2ConformerForCTC"),ner=o(" (Wav2Vec2-Conformer model)"),ser=l(),Uv=a("li"),Q_e=a("strong"),ler=o("wavlm"),ier=o(" \u2014 "),KX=a("a"),der=o("WavLMForCTC"),cer=o(" (WavLM model)"),fer=l(),Jv=a("p"),mer=o("The model is set in evaluation mode by default using "),H_e=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),per=o("model.train()"),_er=l(),F(Yv.$$.fragment),sNe=l(),bd=a("h2"),Kv=a("a"),J_e=a("span"),F(_8.$$.fragment),uer=l(),Y_e=a("span"),ber=o("AutoModelForSpeechSeq2Seq"),lNe=l(),Xo=a("div"),F(u8.$$.fragment),ver=l(),vd=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZX=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),ez=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),b8=a("p"),Aer=o("This class cannot be instantiated directly using "),K_e=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),Ft=a("div"),F(v8.$$.fragment),$er=l(),Z_e=a("p"),ker=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ser=l(),Fd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Ier=o("from_pretrained()"),qer=o(" to load the model weights."),Ner=l(),F(Zv.$$.fragment),jer=l(),go=a("div"),F(F8.$$.fragment),Der=l(),oue=a("p"),Ger=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Oer=l(),Xa=a("p"),Ver=o("The model class to instantiate is selected based on the "),rue=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),T8=a("ul"),eF=a("li"),nue=a("strong"),Yer=o("speech-encoder-decoder"),Ker=o(" \u2014 "),rz=a("a"),Zer=o("SpeechEncoderDecoderModel"),eor=o(" (Speech Encoder decoder model)"),oor=l(),oF=a("li"),sue=a("strong"),ror=o("speech_to_text"),tor=o(" \u2014 "),tz=a("a"),aor=o("Speech2TextForConditionalGeneration"),nor=o(" (Speech2Text model)"),sor=l(),rF=a("p"),lor=o("The model is set in evaluation mode by default using "),lue=a("code"),ior=o("model.eval()"),dor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),cor=o("model.train()"),mor=l(),F(tF.$$.fragment),iNe=l(),Td=a("h2"),aF=a("a"),due=a("span"),F(M8.$$.fragment),gor=l(),cue=a("span"),hor=o("AutoModelForAudioXVector"),dNe=l(),zo=a("div"),F(E8.$$.fragment),por=l(),Md=a("p"),_or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),az=a("a"),uor=o("from_pretrained()"),bor=o(" class method or the "),nz=a("a"),vor=o("from_config()"),For=o(` class
method.`),Tor=l(),C8=a("p"),Mor=o("This class cannot be instantiated directly using "),fue=a("code"),Eor=o("__init__()"),Cor=o(" (throws an error)."),wor=l(),Tt=a("div"),F(w8.$$.fragment),Aor=l(),mue=a("p"),yor=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Lor=l(),Ed=a("p"),xor=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),$or=o("not"),kor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),Sor=o("from_pretrained()"),Ror=o(" to load the model weights."),Por=l(),F(nF.$$.fragment),Bor=l(),ho=a("div"),F(A8.$$.fragment),Ior=l(),hue=a("p"),qor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Nor=l(),za=a("p"),jor=o("The model class to instantiate is selected based on the "),pue=a("code"),Dor=o("model_type"),Gor=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(":"),Wor=l(),Zr=a("ul"),sF=a("li"),bue=a("strong"),Qor=o("data2vec-audio"),Hor=o(" \u2014 "),lz=a("a"),Uor=o("Data2VecAudioForXVector"),Jor=o(" (Data2VecAudio model)"),Yor=l(),lF=a("li"),vue=a("strong"),Kor=o("unispeech-sat"),Zor=o(" \u2014 "),iz=a("a"),err=o("UniSpeechSatForXVector"),orr=o(" (UniSpeechSat model)"),rrr=l(),iF=a("li"),Fue=a("strong"),trr=o("wav2vec2"),arr=o(" \u2014 "),dz=a("a"),nrr=o("Wav2Vec2ForXVector"),srr=o(" (Wav2Vec2 model)"),lrr=l(),dF=a("li"),Tue=a("strong"),irr=o("wav2vec2-conformer"),drr=o(" \u2014 "),cz=a("a"),crr=o("Wav2Vec2ConformerForXVector"),frr=o(" (Wav2Vec2-Conformer model)"),mrr=l(),cF=a("li"),Mue=a("strong"),grr=o("wavlm"),hrr=o(" \u2014 "),fz=a("a"),prr=o("WavLMForXVector"),_rr=o(" (WavLM model)"),urr=l(),fF=a("p"),brr=o("The model is set in evaluation mode by default using "),Eue=a("code"),vrr=o("model.eval()"),Frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),Trr=o("model.train()"),Mrr=l(),F(mF.$$.fragment),cNe=l(),Cd=a("h2"),gF=a("a"),wue=a("span"),F(y8.$$.fragment),Err=l(),Aue=a("span"),Crr=o("AutoModelForMaskedImageModeling"),fNe=l(),Wo=a("div"),F(L8.$$.fragment),wrr=l(),wd=a("p"),Arr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mz=a("a"),yrr=o("from_pretrained()"),Lrr=o(" class method or the "),gz=a("a"),xrr=o("from_config()"),$rr=o(` class
method.`),krr=l(),x8=a("p"),Srr=o("This class cannot be instantiated directly using "),yue=a("code"),Rrr=o("__init__()"),Prr=o(" (throws an error)."),Brr=l(),Mt=a("div"),F($8.$$.fragment),Irr=l(),Lue=a("p"),qrr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Nrr=l(),Ad=a("p"),jrr=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),Drr=o("not"),Grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),Orr=o("from_pretrained()"),Vrr=o(" to load the model weights."),Xrr=l(),F(hF.$$.fragment),zrr=l(),po=a("div"),F(k8.$$.fragment),Wrr=l(),$ue=a("p"),Qrr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Hrr=l(),Wa=a("p"),Urr=o("The model class to instantiate is selected based on the "),kue=a("code"),Jrr=o("model_type"),Yrr=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(":"),rtr=l(),yd=a("ul"),pF=a("li"),Pue=a("strong"),ttr=o("deit"),atr=o(" \u2014 "),pz=a("a"),ntr=o("DeiTForMaskedImageModeling"),str=o(" (DeiT model)"),ltr=l(),_F=a("li"),Bue=a("strong"),itr=o("swin"),dtr=o(" \u2014 "),_z=a("a"),ctr=o("SwinForMaskedImageModeling"),ftr=o(" (Swin model)"),mtr=l(),uF=a("li"),Iue=a("strong"),gtr=o("vit"),htr=o(" \u2014 "),uz=a("a"),ptr=o("ViTForMaskedImageModeling"),_tr=o(" (ViT model)"),utr=l(),bF=a("p"),btr=o("The model is set in evaluation mode by default using "),que=a("code"),vtr=o("model.eval()"),Ftr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),Ttr=o("model.train()"),Mtr=l(),F(vF.$$.fragment),mNe=l(),Ld=a("h2"),FF=a("a"),jue=a("span"),F(S8.$$.fragment),Etr=l(),Due=a("span"),Ctr=o("AutoModelForObjectDetection"),gNe=l(),Qo=a("div"),F(R8.$$.fragment),wtr=l(),xd=a("p"),Atr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bz=a("a"),ytr=o("from_pretrained()"),Ltr=o(" class method or the "),vz=a("a"),xtr=o("from_config()"),$tr=o(` class
method.`),ktr=l(),P8=a("p"),Str=o("This class cannot be instantiated directly using "),Gue=a("code"),Rtr=o("__init__()"),Ptr=o(" (throws an error)."),Btr=l(),Et=a("div"),F(B8.$$.fragment),Itr=l(),Oue=a("p"),qtr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ntr=l(),$d=a("p"),jtr=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),Dtr=o("not"),Gtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),Otr=o("from_pretrained()"),Vtr=o(" to load the model weights."),Xtr=l(),F(TF.$$.fragment),ztr=l(),_o=a("div"),F(I8.$$.fragment),Wtr=l(),Xue=a("p"),Qtr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Htr=l(),Qa=a("p"),Utr=o("The model class to instantiate is selected based on the "),zue=a("code"),Jtr=o("model_type"),Ytr=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),Ktr=o("pretrained_model_name_or_path"),Ztr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(":"),rar=l(),q8=a("ul"),MF=a("li"),Hue=a("strong"),tar=o("detr"),aar=o(" \u2014 "),Tz=a("a"),nar=o("DetrForObjectDetection"),sar=o(" (DETR model)"),lar=l(),EF=a("li"),Uue=a("strong"),iar=o("yolos"),dar=o(" \u2014 "),Mz=a("a"),car=o("YolosForObjectDetection"),far=o(" (YOLOS model)"),mar=l(),CF=a("p"),gar=o("The model is set in evaluation mode by default using "),Jue=a("code"),har=o("model.eval()"),par=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),_ar=o("model.train()"),uar=l(),F(wF.$$.fragment),hNe=l(),kd=a("h2"),AF=a("a"),Kue=a("span"),F(N8.$$.fragment),bar=l(),Zue=a("span"),Far=o("AutoModelForImageSegmentation"),pNe=l(),Ho=a("div"),F(j8.$$.fragment),Tar=l(),Sd=a("p"),Mar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Ez=a("a"),Ear=o("from_pretrained()"),Car=o(" class method or the "),Cz=a("a"),war=o("from_config()"),Aar=o(` class
method.`),yar=l(),D8=a("p"),Lar=o("This class cannot be instantiated directly using "),e6e=a("code"),xar=o("__init__()"),$ar=o(" (throws an error)."),kar=l(),Ct=a("div"),F(G8.$$.fragment),Sar=l(),o6e=a("p"),Rar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Par=l(),Rd=a("p"),Bar=o(`Note:
Loading a model from its configuration file does `),r6e=a("strong"),Iar=o("not"),qar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),Nar=o("from_pretrained()"),jar=o(" to load the model weights."),Dar=l(),F(yF.$$.fragment),Gar=l(),uo=a("div"),F(O8.$$.fragment),Oar=l(),t6e=a("p"),Var=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Xar=l(),Ha=a("p"),zar=o("The model class to instantiate is selected based on the "),a6e=a("code"),War=o("model_type"),Qar=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),Har=o("pretrained_model_name_or_path"),Uar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),Jar=o("pretrained_model_name_or_path"),Yar=o(":"),Kar=l(),l6e=a("ul"),LF=a("li"),i6e=a("strong"),Zar=o("detr"),enr=o(" \u2014 "),Az=a("a"),onr=o("DetrForSegmentation"),rnr=o(" (DETR model)"),tnr=l(),xF=a("p"),anr=o("The model is set in evaluation mode by default using "),d6e=a("code"),nnr=o("model.eval()"),snr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c6e=a("code"),lnr=o("model.train()"),inr=l(),F($F.$$.fragment),_Ne=l(),Pd=a("h2"),kF=a("a"),f6e=a("span"),F(V8.$$.fragment),dnr=l(),m6e=a("span"),cnr=o("AutoModelForSemanticSegmentation"),uNe=l(),Uo=a("div"),F(X8.$$.fragment),fnr=l(),Bd=a("p"),mnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yz=a("a"),gnr=o("from_pretrained()"),hnr=o(" class method or the "),Lz=a("a"),pnr=o("from_config()"),_nr=o(` class
method.`),unr=l(),z8=a("p"),bnr=o("This class cannot be instantiated directly using "),g6e=a("code"),vnr=o("__init__()"),Fnr=o(" (throws an error)."),Tnr=l(),wt=a("div"),F(W8.$$.fragment),Mnr=l(),h6e=a("p"),Enr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Cnr=l(),Id=a("p"),wnr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),Anr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Lnr=o("from_pretrained()"),xnr=o(" to load the model weights."),$nr=l(),F(SF.$$.fragment),knr=l(),bo=a("div"),F(Q8.$$.fragment),Snr=l(),_6e=a("p"),Rnr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Pnr=l(),Ua=a("p"),Bnr=o("The model class to instantiate is selected based on the "),u6e=a("code"),Inr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),Nnr=o("pretrained_model_name_or_path"),jnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),Dnr=o("pretrained_model_name_or_path"),Gnr=o(":"),Onr=l(),Ja=a("ul"),RF=a("li"),F6e=a("strong"),Vnr=o("beit"),Xnr=o(" \u2014 "),$z=a("a"),znr=o("BeitForSemanticSegmentation"),Wnr=o(" (BEiT model)"),Qnr=l(),PF=a("li"),T6e=a("strong"),Hnr=o("data2vec-vision"),Unr=o(" \u2014 "),kz=a("a"),Jnr=o("Data2VecVisionForSemanticSegmentation"),Ynr=o(" (Data2VecVision model)"),Knr=l(),BF=a("li"),M6e=a("strong"),Znr=o("dpt"),esr=o(" \u2014 "),Sz=a("a"),osr=o("DPTForSemanticSegmentation"),rsr=o(" (DPT model)"),tsr=l(),IF=a("li"),E6e=a("strong"),asr=o("segformer"),nsr=o(" \u2014 "),Rz=a("a"),ssr=o("SegformerForSemanticSegmentation"),lsr=o(" (SegFormer model)"),isr=l(),qF=a("p"),dsr=o("The model is set in evaluation mode by default using "),C6e=a("code"),csr=o("model.eval()"),fsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w6e=a("code"),msr=o("model.train()"),gsr=l(),F(NF.$$.fragment),bNe=l(),qd=a("h2"),jF=a("a"),A6e=a("span"),F(H8.$$.fragment),hsr=l(),y6e=a("span"),psr=o("AutoModelForInstanceSegmentation"),vNe=l(),Jo=a("div"),F(U8.$$.fragment),_sr=l(),Nd=a("p"),usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Pz=a("a"),bsr=o("from_pretrained()"),vsr=o(" class method or the "),Bz=a("a"),Fsr=o("from_config()"),Tsr=o(` class
method.`),Msr=l(),J8=a("p"),Esr=o("This class cannot be instantiated directly using "),L6e=a("code"),Csr=o("__init__()"),wsr=o(" (throws an error)."),Asr=l(),At=a("div"),F(Y8.$$.fragment),ysr=l(),x6e=a("p"),Lsr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xsr=l(),jd=a("p"),$sr=o(`Note:
Loading a model from its configuration file does `),$6e=a("strong"),ksr=o("not"),Ssr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Rsr=o("from_pretrained()"),Psr=o(" to load the model weights."),Bsr=l(),F(DF.$$.fragment),Isr=l(),vo=a("div"),F(K8.$$.fragment),qsr=l(),k6e=a("p"),Nsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jsr=l(),Ya=a("p"),Dsr=o("The model class to instantiate is selected based on the "),S6e=a("code"),Gsr=o("model_type"),Osr=o(` property of the config object (either
passed as an argument or loaded from `),R6e=a("code"),Vsr=o("pretrained_model_name_or_path"),Xsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),zsr=o("pretrained_model_name_or_path"),Wsr=o(":"),Qsr=l(),B6e=a("ul"),GF=a("li"),I6e=a("strong"),Hsr=o("maskformer"),Usr=o(" \u2014 "),qz=a("a"),Jsr=o("MaskFormerForInstanceSegmentation"),Ysr=o(" (MaskFormer model)"),Ksr=l(),OF=a("p"),Zsr=o("The model is set in evaluation mode by default using "),q6e=a("code"),elr=o("model.eval()"),olr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N6e=a("code"),rlr=o("model.train()"),tlr=l(),F(VF.$$.fragment),FNe=l(),Dd=a("h2"),XF=a("a"),j6e=a("span"),F(Z8.$$.fragment),alr=l(),D6e=a("span"),nlr=o("TFAutoModel"),TNe=l(),Yo=a("div"),F(eL.$$.fragment),slr=l(),Gd=a("p"),llr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Nz=a("a"),ilr=o("from_pretrained()"),dlr=o(" class method or the "),jz=a("a"),clr=o("from_config()"),flr=o(` class
method.`),mlr=l(),oL=a("p"),glr=o("This class cannot be instantiated directly using "),G6e=a("code"),hlr=o("__init__()"),plr=o(" (throws an error)."),_lr=l(),yt=a("div"),F(rL.$$.fragment),ulr=l(),O6e=a("p"),blr=o("Instantiates one of the base model classes of the library from a configuration."),vlr=l(),Od=a("p"),Flr=o(`Note:
Loading a model from its configuration file does `),V6e=a("strong"),Tlr=o("not"),Mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),Elr=o("from_pretrained()"),Clr=o(" to load the model weights."),wlr=l(),F(zF.$$.fragment),Alr=l(),wr=a("div"),F(tL.$$.fragment),ylr=l(),X6e=a("p"),Llr=o("Instantiate one of the base model classes of the library from a pretrained model."),xlr=l(),Ka=a("p"),$lr=o("The model class to instantiate is selected based on the "),z6e=a("code"),klr=o("model_type"),Slr=o(` property of the config object (either
passed as an argument or loaded from `),W6e=a("code"),Rlr=o("pretrained_model_name_or_path"),Plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=a("code"),Blr=o("pretrained_model_name_or_path"),Ilr=o(":"),qlr=l(),N=a("ul"),WF=a("li"),H6e=a("strong"),Nlr=o("albert"),jlr=o(" \u2014 "),Gz=a("a"),Dlr=o("TFAlbertModel"),Glr=o(" (ALBERT model)"),Olr=l(),QF=a("li"),U6e=a("strong"),Vlr=o("bart"),Xlr=o(" \u2014 "),Oz=a("a"),zlr=o("TFBartModel"),Wlr=o(" (BART model)"),Qlr=l(),HF=a("li"),J6e=a("strong"),Hlr=o("bert"),Ulr=o(" \u2014 "),Vz=a("a"),Jlr=o("TFBertModel"),Ylr=o(" (BERT model)"),Klr=l(),UF=a("li"),Y6e=a("strong"),Zlr=o("blenderbot"),eir=o(" \u2014 "),Xz=a("a"),oir=o("TFBlenderbotModel"),rir=o(" (Blenderbot model)"),tir=l(),JF=a("li"),K6e=a("strong"),air=o("blenderbot-small"),nir=o(" \u2014 "),zz=a("a"),sir=o("TFBlenderbotSmallModel"),lir=o(" (BlenderbotSmall model)"),iir=l(),YF=a("li"),Z6e=a("strong"),dir=o("camembert"),cir=o(" \u2014 "),Wz=a("a"),fir=o("TFCamembertModel"),mir=o(" (CamemBERT model)"),gir=l(),KF=a("li"),e1e=a("strong"),hir=o("clip"),pir=o(" \u2014 "),Qz=a("a"),_ir=o("TFCLIPModel"),uir=o(" (CLIP model)"),bir=l(),ZF=a("li"),o1e=a("strong"),vir=o("convbert"),Fir=o(" \u2014 "),Hz=a("a"),Tir=o("TFConvBertModel"),Mir=o(" (ConvBERT model)"),Eir=l(),eT=a("li"),r1e=a("strong"),Cir=o("convnext"),wir=o(" \u2014 "),Uz=a("a"),Air=o("TFConvNextModel"),yir=o(" (ConvNext model)"),Lir=l(),oT=a("li"),t1e=a("strong"),xir=o("ctrl"),$ir=o(" \u2014 "),Jz=a("a"),kir=o("TFCTRLModel"),Sir=o(" (CTRL model)"),Rir=l(),rT=a("li"),a1e=a("strong"),Pir=o("data2vec-vision"),Bir=o(" \u2014 "),Yz=a("a"),Iir=o("TFData2VecVisionModel"),qir=o(" (Data2VecVision model)"),Nir=l(),tT=a("li"),n1e=a("strong"),jir=o("deberta"),Dir=o(" \u2014 "),Kz=a("a"),Gir=o("TFDebertaModel"),Oir=o(" (DeBERTa model)"),Vir=l(),aT=a("li"),s1e=a("strong"),Xir=o("deberta-v2"),zir=o(" \u2014 "),Zz=a("a"),Wir=o("TFDebertaV2Model"),Qir=o(" (DeBERTa-v2 model)"),Hir=l(),nT=a("li"),l1e=a("strong"),Uir=o("distilbert"),Jir=o(" \u2014 "),eW=a("a"),Yir=o("TFDistilBertModel"),Kir=o(" (DistilBERT model)"),Zir=l(),sT=a("li"),i1e=a("strong"),edr=o("dpr"),odr=o(" \u2014 "),oW=a("a"),rdr=o("TFDPRQuestionEncoder"),tdr=o(" (DPR model)"),adr=l(),lT=a("li"),d1e=a("strong"),ndr=o("electra"),sdr=o(" \u2014 "),rW=a("a"),ldr=o("TFElectraModel"),idr=o(" (ELECTRA model)"),ddr=l(),iT=a("li"),c1e=a("strong"),cdr=o("flaubert"),fdr=o(" \u2014 "),tW=a("a"),mdr=o("TFFlaubertModel"),gdr=o(" (FlauBERT model)"),hdr=l(),Bs=a("li"),f1e=a("strong"),pdr=o("funnel"),_dr=o(" \u2014 "),aW=a("a"),udr=o("TFFunnelModel"),bdr=o(" or "),nW=a("a"),vdr=o("TFFunnelBaseModel"),Fdr=o(" (Funnel Transformer model)"),Tdr=l(),dT=a("li"),m1e=a("strong"),Mdr=o("gpt2"),Edr=o(" \u2014 "),sW=a("a"),Cdr=o("TFGPT2Model"),wdr=o(" (OpenAI GPT-2 model)"),Adr=l(),cT=a("li"),g1e=a("strong"),ydr=o("gptj"),Ldr=o(" \u2014 "),lW=a("a"),xdr=o("TFGPTJModel"),$dr=o(" (GPT-J model)"),kdr=l(),fT=a("li"),h1e=a("strong"),Sdr=o("hubert"),Rdr=o(" \u2014 "),iW=a("a"),Pdr=o("TFHubertModel"),Bdr=o(" (Hubert model)"),Idr=l(),mT=a("li"),p1e=a("strong"),qdr=o("layoutlm"),Ndr=o(" \u2014 "),dW=a("a"),jdr=o("TFLayoutLMModel"),Ddr=o(" (LayoutLM model)"),Gdr=l(),gT=a("li"),_1e=a("strong"),Odr=o("led"),Vdr=o(" \u2014 "),cW=a("a"),Xdr=o("TFLEDModel"),zdr=o(" (LED model)"),Wdr=l(),hT=a("li"),u1e=a("strong"),Qdr=o("longformer"),Hdr=o(" \u2014 "),fW=a("a"),Udr=o("TFLongformerModel"),Jdr=o(" (Longformer model)"),Ydr=l(),pT=a("li"),b1e=a("strong"),Kdr=o("lxmert"),Zdr=o(" \u2014 "),mW=a("a"),ecr=o("TFLxmertModel"),ocr=o(" (LXMERT model)"),rcr=l(),_T=a("li"),v1e=a("strong"),tcr=o("marian"),acr=o(" \u2014 "),gW=a("a"),ncr=o("TFMarianModel"),scr=o(" (Marian model)"),lcr=l(),uT=a("li"),F1e=a("strong"),icr=o("mbart"),dcr=o(" \u2014 "),hW=a("a"),ccr=o("TFMBartModel"),fcr=o(" (mBART model)"),mcr=l(),bT=a("li"),T1e=a("strong"),gcr=o("mobilebert"),hcr=o(" \u2014 "),pW=a("a"),pcr=o("TFMobileBertModel"),_cr=o(" (MobileBERT model)"),ucr=l(),vT=a("li"),M1e=a("strong"),bcr=o("mpnet"),vcr=o(" \u2014 "),_W=a("a"),Fcr=o("TFMPNetModel"),Tcr=o(" (MPNet model)"),Mcr=l(),FT=a("li"),E1e=a("strong"),Ecr=o("mt5"),Ccr=o(" \u2014 "),uW=a("a"),wcr=o("TFMT5Model"),Acr=o(" (mT5 model)"),ycr=l(),TT=a("li"),C1e=a("strong"),Lcr=o("openai-gpt"),xcr=o(" \u2014 "),bW=a("a"),$cr=o("TFOpenAIGPTModel"),kcr=o(" (OpenAI GPT model)"),Scr=l(),MT=a("li"),w1e=a("strong"),Rcr=o("pegasus"),Pcr=o(" \u2014 "),vW=a("a"),Bcr=o("TFPegasusModel"),Icr=o(" (Pegasus model)"),qcr=l(),ET=a("li"),A1e=a("strong"),Ncr=o("rembert"),jcr=o(" \u2014 "),FW=a("a"),Dcr=o("TFRemBertModel"),Gcr=o(" (RemBERT model)"),Ocr=l(),CT=a("li"),y1e=a("strong"),Vcr=o("roberta"),Xcr=o(" \u2014 "),TW=a("a"),zcr=o("TFRobertaModel"),Wcr=o(" (RoBERTa model)"),Qcr=l(),wT=a("li"),L1e=a("strong"),Hcr=o("roformer"),Ucr=o(" \u2014 "),MW=a("a"),Jcr=o("TFRoFormerModel"),Ycr=o(" (RoFormer model)"),Kcr=l(),AT=a("li"),x1e=a("strong"),Zcr=o("speech_to_text"),efr=o(" \u2014 "),EW=a("a"),ofr=o("TFSpeech2TextModel"),rfr=o(" (Speech2Text model)"),tfr=l(),yT=a("li"),$1e=a("strong"),afr=o("swin"),nfr=o(" \u2014 "),CW=a("a"),sfr=o("TFSwinModel"),lfr=o(" (Swin model)"),ifr=l(),LT=a("li"),k1e=a("strong"),dfr=o("t5"),cfr=o(" \u2014 "),wW=a("a"),ffr=o("TFT5Model"),mfr=o(" (T5 model)"),gfr=l(),xT=a("li"),S1e=a("strong"),hfr=o("tapas"),pfr=o(" \u2014 "),AW=a("a"),_fr=o("TFTapasModel"),ufr=o(" (TAPAS model)"),bfr=l(),$T=a("li"),R1e=a("strong"),vfr=o("transfo-xl"),Ffr=o(" \u2014 "),yW=a("a"),Tfr=o("TFTransfoXLModel"),Mfr=o(" (Transformer-XL model)"),Efr=l(),kT=a("li"),P1e=a("strong"),Cfr=o("vit"),wfr=o(" \u2014 "),LW=a("a"),Afr=o("TFViTModel"),yfr=o(" (ViT model)"),Lfr=l(),ST=a("li"),B1e=a("strong"),xfr=o("vit_mae"),$fr=o(" \u2014 "),xW=a("a"),kfr=o("TFViTMAEModel"),Sfr=o(" (ViTMAE model)"),Rfr=l(),RT=a("li"),I1e=a("strong"),Pfr=o("wav2vec2"),Bfr=o(" \u2014 "),$W=a("a"),Ifr=o("TFWav2Vec2Model"),qfr=o(" (Wav2Vec2 model)"),Nfr=l(),PT=a("li"),q1e=a("strong"),jfr=o("xlm"),Dfr=o(" \u2014 "),kW=a("a"),Gfr=o("TFXLMModel"),Ofr=o(" (XLM model)"),Vfr=l(),BT=a("li"),N1e=a("strong"),Xfr=o("xlm-roberta"),zfr=o(" \u2014 "),SW=a("a"),Wfr=o("TFXLMRobertaModel"),Qfr=o(" (XLM-RoBERTa model)"),Hfr=l(),IT=a("li"),j1e=a("strong"),Ufr=o("xlnet"),Jfr=o(" \u2014 "),RW=a("a"),Yfr=o("TFXLNetModel"),Kfr=o(" (XLNet model)"),Zfr=l(),F(qT.$$.fragment),MNe=l(),Vd=a("h2"),NT=a("a"),D1e=a("span"),F(aL.$$.fragment),emr=l(),G1e=a("span"),omr=o("TFAutoModelForPreTraining"),ENe=l(),Ko=a("div"),F(nL.$$.fragment),rmr=l(),Xd=a("p"),tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PW=a("a"),amr=o("from_pretrained()"),nmr=o(" class method or the "),BW=a("a"),smr=o("from_config()"),lmr=o(` class
method.`),imr=l(),sL=a("p"),dmr=o("This class cannot be instantiated directly using "),O1e=a("code"),cmr=o("__init__()"),fmr=o(" (throws an error)."),mmr=l(),Lt=a("div"),F(lL.$$.fragment),gmr=l(),V1e=a("p"),hmr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pmr=l(),zd=a("p"),_mr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),umr=o("not"),bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),vmr=o("from_pretrained()"),Fmr=o(" to load the model weights."),Tmr=l(),F(jT.$$.fragment),Mmr=l(),Ar=a("div"),F(iL.$$.fragment),Emr=l(),z1e=a("p"),Cmr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wmr=l(),Za=a("p"),Amr=o("The model class to instantiate is selected based on the "),W1e=a("code"),ymr=o("model_type"),Lmr=o(` property of the config object (either
passed as an argument or loaded from `),Q1e=a("code"),xmr=o("pretrained_model_name_or_path"),$mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),kmr=o("pretrained_model_name_or_path"),Smr=o(":"),Rmr=l(),se=a("ul"),DT=a("li"),U1e=a("strong"),Pmr=o("albert"),Bmr=o(" \u2014 "),qW=a("a"),Imr=o("TFAlbertForPreTraining"),qmr=o(" (ALBERT model)"),Nmr=l(),GT=a("li"),J1e=a("strong"),jmr=o("bart"),Dmr=o(" \u2014 "),NW=a("a"),Gmr=o("TFBartForConditionalGeneration"),Omr=o(" (BART model)"),Vmr=l(),OT=a("li"),Y1e=a("strong"),Xmr=o("bert"),zmr=o(" \u2014 "),jW=a("a"),Wmr=o("TFBertForPreTraining"),Qmr=o(" (BERT model)"),Hmr=l(),VT=a("li"),K1e=a("strong"),Umr=o("camembert"),Jmr=o(" \u2014 "),DW=a("a"),Ymr=o("TFCamembertForMaskedLM"),Kmr=o(" (CamemBERT model)"),Zmr=l(),XT=a("li"),Z1e=a("strong"),egr=o("ctrl"),ogr=o(" \u2014 "),GW=a("a"),rgr=o("TFCTRLLMHeadModel"),tgr=o(" (CTRL model)"),agr=l(),zT=a("li"),ebe=a("strong"),ngr=o("distilbert"),sgr=o(" \u2014 "),OW=a("a"),lgr=o("TFDistilBertForMaskedLM"),igr=o(" (DistilBERT model)"),dgr=l(),WT=a("li"),obe=a("strong"),cgr=o("electra"),fgr=o(" \u2014 "),VW=a("a"),mgr=o("TFElectraForPreTraining"),ggr=o(" (ELECTRA model)"),hgr=l(),QT=a("li"),rbe=a("strong"),pgr=o("flaubert"),_gr=o(" \u2014 "),XW=a("a"),ugr=o("TFFlaubertWithLMHeadModel"),bgr=o(" (FlauBERT model)"),vgr=l(),HT=a("li"),tbe=a("strong"),Fgr=o("funnel"),Tgr=o(" \u2014 "),zW=a("a"),Mgr=o("TFFunnelForPreTraining"),Egr=o(" (Funnel Transformer model)"),Cgr=l(),UT=a("li"),abe=a("strong"),wgr=o("gpt2"),Agr=o(" \u2014 "),WW=a("a"),ygr=o("TFGPT2LMHeadModel"),Lgr=o(" (OpenAI GPT-2 model)"),xgr=l(),JT=a("li"),nbe=a("strong"),$gr=o("layoutlm"),kgr=o(" \u2014 "),QW=a("a"),Sgr=o("TFLayoutLMForMaskedLM"),Rgr=o(" (LayoutLM model)"),Pgr=l(),YT=a("li"),sbe=a("strong"),Bgr=o("lxmert"),Igr=o(" \u2014 "),HW=a("a"),qgr=o("TFLxmertForPreTraining"),Ngr=o(" (LXMERT model)"),jgr=l(),KT=a("li"),lbe=a("strong"),Dgr=o("mobilebert"),Ggr=o(" \u2014 "),UW=a("a"),Ogr=o("TFMobileBertForPreTraining"),Vgr=o(" (MobileBERT model)"),Xgr=l(),ZT=a("li"),ibe=a("strong"),zgr=o("mpnet"),Wgr=o(" \u2014 "),JW=a("a"),Qgr=o("TFMPNetForMaskedLM"),Hgr=o(" (MPNet model)"),Ugr=l(),e9=a("li"),dbe=a("strong"),Jgr=o("openai-gpt"),Ygr=o(" \u2014 "),YW=a("a"),Kgr=o("TFOpenAIGPTLMHeadModel"),Zgr=o(" (OpenAI GPT model)"),ehr=l(),o9=a("li"),cbe=a("strong"),ohr=o("roberta"),rhr=o(" \u2014 "),KW=a("a"),thr=o("TFRobertaForMaskedLM"),ahr=o(" (RoBERTa model)"),nhr=l(),r9=a("li"),fbe=a("strong"),shr=o("t5"),lhr=o(" \u2014 "),ZW=a("a"),ihr=o("TFT5ForConditionalGeneration"),dhr=o(" (T5 model)"),chr=l(),t9=a("li"),mbe=a("strong"),fhr=o("tapas"),mhr=o(" \u2014 "),eQ=a("a"),ghr=o("TFTapasForMaskedLM"),hhr=o(" (TAPAS model)"),phr=l(),a9=a("li"),gbe=a("strong"),_hr=o("transfo-xl"),uhr=o(" \u2014 "),oQ=a("a"),bhr=o("TFTransfoXLLMHeadModel"),vhr=o(" (Transformer-XL model)"),Fhr=l(),n9=a("li"),hbe=a("strong"),Thr=o("vit_mae"),Mhr=o(" \u2014 "),rQ=a("a"),Ehr=o("TFViTMAEForPreTraining"),Chr=o(" (ViTMAE model)"),whr=l(),s9=a("li"),pbe=a("strong"),Ahr=o("xlm"),yhr=o(" \u2014 "),tQ=a("a"),Lhr=o("TFXLMWithLMHeadModel"),xhr=o(" (XLM model)"),$hr=l(),l9=a("li"),_be=a("strong"),khr=o("xlm-roberta"),Shr=o(" \u2014 "),aQ=a("a"),Rhr=o("TFXLMRobertaForMaskedLM"),Phr=o(" (XLM-RoBERTa model)"),Bhr=l(),i9=a("li"),ube=a("strong"),Ihr=o("xlnet"),qhr=o(" \u2014 "),nQ=a("a"),Nhr=o("TFXLNetLMHeadModel"),jhr=o(" (XLNet model)"),Dhr=l(),F(d9.$$.fragment),CNe=l(),Wd=a("h2"),c9=a("a"),bbe=a("span"),F(dL.$$.fragment),Ghr=l(),vbe=a("span"),Ohr=o("TFAutoModelForCausalLM"),wNe=l(),Zo=a("div"),F(cL.$$.fragment),Vhr=l(),Qd=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sQ=a("a"),zhr=o("from_pretrained()"),Whr=o(" class method or the "),lQ=a("a"),Qhr=o("from_config()"),Hhr=o(` class
method.`),Uhr=l(),fL=a("p"),Jhr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),xt=a("div"),F(mL.$$.fragment),epr=l(),Tbe=a("p"),opr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rpr=l(),Hd=a("p"),tpr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),apr=o("not"),npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),spr=o("from_pretrained()"),lpr=o(" to load the model weights."),ipr=l(),F(f9.$$.fragment),dpr=l(),yr=a("div"),F(gL.$$.fragment),cpr=l(),Ebe=a("p"),fpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mpr=l(),en=a("p"),gpr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),hpr=o("model_type"),ppr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),_pr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(":"),Fpr=l(),Me=a("ul"),m9=a("li"),ybe=a("strong"),Tpr=o("bert"),Mpr=o(" \u2014 "),dQ=a("a"),Epr=o("TFBertLMHeadModel"),Cpr=o(" (BERT model)"),wpr=l(),g9=a("li"),Lbe=a("strong"),Apr=o("camembert"),ypr=o(" \u2014 "),cQ=a("a"),Lpr=o("TFCamembertForCausalLM"),xpr=o(" (CamemBERT model)"),$pr=l(),h9=a("li"),xbe=a("strong"),kpr=o("ctrl"),Spr=o(" \u2014 "),fQ=a("a"),Rpr=o("TFCTRLLMHeadModel"),Ppr=o(" (CTRL model)"),Bpr=l(),p9=a("li"),$be=a("strong"),Ipr=o("gpt2"),qpr=o(" \u2014 "),mQ=a("a"),Npr=o("TFGPT2LMHeadModel"),jpr=o(" (OpenAI GPT-2 model)"),Dpr=l(),_9=a("li"),kbe=a("strong"),Gpr=o("gptj"),Opr=o(" \u2014 "),gQ=a("a"),Vpr=o("TFGPTJForCausalLM"),Xpr=o(" (GPT-J model)"),zpr=l(),u9=a("li"),Sbe=a("strong"),Wpr=o("openai-gpt"),Qpr=o(" \u2014 "),hQ=a("a"),Hpr=o("TFOpenAIGPTLMHeadModel"),Upr=o(" (OpenAI GPT model)"),Jpr=l(),b9=a("li"),Rbe=a("strong"),Ypr=o("rembert"),Kpr=o(" \u2014 "),pQ=a("a"),Zpr=o("TFRemBertForCausalLM"),e_r=o(" (RemBERT model)"),o_r=l(),v9=a("li"),Pbe=a("strong"),r_r=o("roberta"),t_r=o(" \u2014 "),_Q=a("a"),a_r=o("TFRobertaForCausalLM"),n_r=o(" (RoBERTa model)"),s_r=l(),F9=a("li"),Bbe=a("strong"),l_r=o("roformer"),i_r=o(" \u2014 "),uQ=a("a"),d_r=o("TFRoFormerForCausalLM"),c_r=o(" (RoFormer model)"),f_r=l(),T9=a("li"),Ibe=a("strong"),m_r=o("transfo-xl"),g_r=o(" \u2014 "),bQ=a("a"),h_r=o("TFTransfoXLLMHeadModel"),p_r=o(" (Transformer-XL model)"),__r=l(),M9=a("li"),qbe=a("strong"),u_r=o("xlm"),b_r=o(" \u2014 "),vQ=a("a"),v_r=o("TFXLMWithLMHeadModel"),F_r=o(" (XLM model)"),T_r=l(),E9=a("li"),Nbe=a("strong"),M_r=o("xlnet"),E_r=o(" \u2014 "),FQ=a("a"),C_r=o("TFXLNetLMHeadModel"),w_r=o(" (XLNet model)"),A_r=l(),F(C9.$$.fragment),ANe=l(),Ud=a("h2"),w9=a("a"),jbe=a("span"),F(hL.$$.fragment),y_r=l(),Dbe=a("span"),L_r=o("TFAutoModelForImageClassification"),yNe=l(),er=a("div"),F(pL.$$.fragment),x_r=l(),Jd=a("p"),$_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TQ=a("a"),k_r=o("from_pretrained()"),S_r=o(" class method or the "),MQ=a("a"),R_r=o("from_config()"),P_r=o(` class
method.`),B_r=l(),_L=a("p"),I_r=o("This class cannot be instantiated directly using "),Gbe=a("code"),q_r=o("__init__()"),N_r=o(" (throws an error)."),j_r=l(),$t=a("div"),F(uL.$$.fragment),D_r=l(),Obe=a("p"),G_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),O_r=l(),Yd=a("p"),V_r=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),X_r=o("not"),z_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),W_r=o("from_pretrained()"),Q_r=o(" to load the model weights."),H_r=l(),F(A9.$$.fragment),U_r=l(),Lr=a("div"),F(bL.$$.fragment),J_r=l(),Xbe=a("p"),Y_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),K_r=l(),on=a("p"),Z_r=o("The model class to instantiate is selected based on the "),zbe=a("code"),eur=o("model_type"),our=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(":"),sur=l(),rn=a("ul"),y9=a("li"),Hbe=a("strong"),lur=o("convnext"),iur=o(" \u2014 "),CQ=a("a"),dur=o("TFConvNextForImageClassification"),cur=o(" (ConvNext model)"),fur=l(),L9=a("li"),Ube=a("strong"),mur=o("data2vec-vision"),gur=o(" \u2014 "),wQ=a("a"),hur=o("TFData2VecVisionForImageClassification"),pur=o(" (Data2VecVision model)"),_ur=l(),x9=a("li"),Jbe=a("strong"),uur=o("swin"),bur=o(" \u2014 "),AQ=a("a"),vur=o("TFSwinForImageClassification"),Fur=o(" (Swin model)"),Tur=l(),$9=a("li"),Ybe=a("strong"),Mur=o("vit"),Eur=o(" \u2014 "),yQ=a("a"),Cur=o("TFViTForImageClassification"),wur=o(" (ViT model)"),Aur=l(),F(k9.$$.fragment),LNe=l(),Kd=a("h2"),S9=a("a"),Kbe=a("span"),F(vL.$$.fragment),yur=l(),Zbe=a("span"),Lur=o("TFAutoModelForMaskedLM"),xNe=l(),or=a("div"),F(FL.$$.fragment),xur=l(),Zd=a("p"),$ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LQ=a("a"),kur=o("from_pretrained()"),Sur=o(" class method or the "),xQ=a("a"),Rur=o("from_config()"),Pur=o(` class
method.`),Bur=l(),TL=a("p"),Iur=o("This class cannot be instantiated directly using "),e2e=a("code"),qur=o("__init__()"),Nur=o(" (throws an error)."),jur=l(),kt=a("div"),F(ML.$$.fragment),Dur=l(),o2e=a("p"),Gur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Our=l(),ec=a("p"),Vur=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),Xur=o("not"),zur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Wur=o("from_pretrained()"),Qur=o(" to load the model weights."),Hur=l(),F(R9.$$.fragment),Uur=l(),xr=a("div"),F(EL.$$.fragment),Jur=l(),t2e=a("p"),Yur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kur=l(),tn=a("p"),Zur=o("The model class to instantiate is selected based on the "),a2e=a("code"),e6r=o("model_type"),o6r=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),r6r=o("pretrained_model_name_or_path"),t6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),a6r=o("pretrained_model_name_or_path"),n6r=o(":"),s6r=l(),ie=a("ul"),P9=a("li"),l2e=a("strong"),l6r=o("albert"),i6r=o(" \u2014 "),kQ=a("a"),d6r=o("TFAlbertForMaskedLM"),c6r=o(" (ALBERT model)"),f6r=l(),B9=a("li"),i2e=a("strong"),m6r=o("bert"),g6r=o(" \u2014 "),SQ=a("a"),h6r=o("TFBertForMaskedLM"),p6r=o(" (BERT model)"),_6r=l(),I9=a("li"),d2e=a("strong"),u6r=o("camembert"),b6r=o(" \u2014 "),RQ=a("a"),v6r=o("TFCamembertForMaskedLM"),F6r=o(" (CamemBERT model)"),T6r=l(),q9=a("li"),c2e=a("strong"),M6r=o("convbert"),E6r=o(" \u2014 "),PQ=a("a"),C6r=o("TFConvBertForMaskedLM"),w6r=o(" (ConvBERT model)"),A6r=l(),N9=a("li"),f2e=a("strong"),y6r=o("deberta"),L6r=o(" \u2014 "),BQ=a("a"),x6r=o("TFDebertaForMaskedLM"),$6r=o(" (DeBERTa model)"),k6r=l(),j9=a("li"),m2e=a("strong"),S6r=o("deberta-v2"),R6r=o(" \u2014 "),IQ=a("a"),P6r=o("TFDebertaV2ForMaskedLM"),B6r=o(" (DeBERTa-v2 model)"),I6r=l(),D9=a("li"),g2e=a("strong"),q6r=o("distilbert"),N6r=o(" \u2014 "),qQ=a("a"),j6r=o("TFDistilBertForMaskedLM"),D6r=o(" (DistilBERT model)"),G6r=l(),G9=a("li"),h2e=a("strong"),O6r=o("electra"),V6r=o(" \u2014 "),NQ=a("a"),X6r=o("TFElectraForMaskedLM"),z6r=o(" (ELECTRA model)"),W6r=l(),O9=a("li"),p2e=a("strong"),Q6r=o("flaubert"),H6r=o(" \u2014 "),jQ=a("a"),U6r=o("TFFlaubertWithLMHeadModel"),J6r=o(" (FlauBERT model)"),Y6r=l(),V9=a("li"),_2e=a("strong"),K6r=o("funnel"),Z6r=o(" \u2014 "),DQ=a("a"),e1r=o("TFFunnelForMaskedLM"),o1r=o(" (Funnel Transformer model)"),r1r=l(),X9=a("li"),u2e=a("strong"),t1r=o("layoutlm"),a1r=o(" \u2014 "),GQ=a("a"),n1r=o("TFLayoutLMForMaskedLM"),s1r=o(" (LayoutLM model)"),l1r=l(),z9=a("li"),b2e=a("strong"),i1r=o("longformer"),d1r=o(" \u2014 "),OQ=a("a"),c1r=o("TFLongformerForMaskedLM"),f1r=o(" (Longformer model)"),m1r=l(),W9=a("li"),v2e=a("strong"),g1r=o("mobilebert"),h1r=o(" \u2014 "),VQ=a("a"),p1r=o("TFMobileBertForMaskedLM"),_1r=o(" (MobileBERT model)"),u1r=l(),Q9=a("li"),F2e=a("strong"),b1r=o("mpnet"),v1r=o(" \u2014 "),XQ=a("a"),F1r=o("TFMPNetForMaskedLM"),T1r=o(" (MPNet model)"),M1r=l(),H9=a("li"),T2e=a("strong"),E1r=o("rembert"),C1r=o(" \u2014 "),zQ=a("a"),w1r=o("TFRemBertForMaskedLM"),A1r=o(" (RemBERT model)"),y1r=l(),U9=a("li"),M2e=a("strong"),L1r=o("roberta"),x1r=o(" \u2014 "),WQ=a("a"),$1r=o("TFRobertaForMaskedLM"),k1r=o(" (RoBERTa model)"),S1r=l(),J9=a("li"),E2e=a("strong"),R1r=o("roformer"),P1r=o(" \u2014 "),QQ=a("a"),B1r=o("TFRoFormerForMaskedLM"),I1r=o(" (RoFormer model)"),q1r=l(),Y9=a("li"),C2e=a("strong"),N1r=o("tapas"),j1r=o(" \u2014 "),HQ=a("a"),D1r=o("TFTapasForMaskedLM"),G1r=o(" (TAPAS model)"),O1r=l(),K9=a("li"),w2e=a("strong"),V1r=o("xlm"),X1r=o(" \u2014 "),UQ=a("a"),z1r=o("TFXLMWithLMHeadModel"),W1r=o(" (XLM model)"),Q1r=l(),Z9=a("li"),A2e=a("strong"),H1r=o("xlm-roberta"),U1r=o(" \u2014 "),JQ=a("a"),J1r=o("TFXLMRobertaForMaskedLM"),Y1r=o(" (XLM-RoBERTa model)"),K1r=l(),F(eM.$$.fragment),$Ne=l(),oc=a("h2"),oM=a("a"),y2e=a("span"),F(CL.$$.fragment),Z1r=l(),L2e=a("span"),ebr=o("TFAutoModelForSeq2SeqLM"),kNe=l(),rr=a("div"),F(wL.$$.fragment),obr=l(),rc=a("p"),rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YQ=a("a"),tbr=o("from_pretrained()"),abr=o(" class method or the "),KQ=a("a"),nbr=o("from_config()"),sbr=o(` class
method.`),lbr=l(),AL=a("p"),ibr=o("This class cannot be instantiated directly using "),x2e=a("code"),dbr=o("__init__()"),cbr=o(" (throws an error)."),fbr=l(),St=a("div"),F(yL.$$.fragment),mbr=l(),$2e=a("p"),gbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hbr=l(),tc=a("p"),pbr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),_br=o("not"),ubr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),bbr=o("from_pretrained()"),vbr=o(" to load the model weights."),Fbr=l(),F(rM.$$.fragment),Tbr=l(),$r=a("div"),F(LL.$$.fragment),Mbr=l(),S2e=a("p"),Ebr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cbr=l(),an=a("p"),wbr=o("The model class to instantiate is selected based on the "),R2e=a("code"),Abr=o("model_type"),ybr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),Lbr=o("pretrained_model_name_or_path"),xbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),$br=o("pretrained_model_name_or_path"),kbr=o(":"),Sbr=l(),ye=a("ul"),tM=a("li"),I2e=a("strong"),Rbr=o("bart"),Pbr=o(" \u2014 "),eH=a("a"),Bbr=o("TFBartForConditionalGeneration"),Ibr=o(" (BART model)"),qbr=l(),aM=a("li"),q2e=a("strong"),Nbr=o("blenderbot"),jbr=o(" \u2014 "),oH=a("a"),Dbr=o("TFBlenderbotForConditionalGeneration"),Gbr=o(" (Blenderbot model)"),Obr=l(),nM=a("li"),N2e=a("strong"),Vbr=o("blenderbot-small"),Xbr=o(" \u2014 "),rH=a("a"),zbr=o("TFBlenderbotSmallForConditionalGeneration"),Wbr=o(" (BlenderbotSmall model)"),Qbr=l(),sM=a("li"),j2e=a("strong"),Hbr=o("encoder-decoder"),Ubr=o(" \u2014 "),tH=a("a"),Jbr=o("TFEncoderDecoderModel"),Ybr=o(" (Encoder decoder model)"),Kbr=l(),lM=a("li"),D2e=a("strong"),Zbr=o("led"),e2r=o(" \u2014 "),aH=a("a"),o2r=o("TFLEDForConditionalGeneration"),r2r=o(" (LED model)"),t2r=l(),iM=a("li"),G2e=a("strong"),a2r=o("marian"),n2r=o(" \u2014 "),nH=a("a"),s2r=o("TFMarianMTModel"),l2r=o(" (Marian model)"),i2r=l(),dM=a("li"),O2e=a("strong"),d2r=o("mbart"),c2r=o(" \u2014 "),sH=a("a"),f2r=o("TFMBartForConditionalGeneration"),m2r=o(" (mBART model)"),g2r=l(),cM=a("li"),V2e=a("strong"),h2r=o("mt5"),p2r=o(" \u2014 "),lH=a("a"),_2r=o("TFMT5ForConditionalGeneration"),u2r=o(" (mT5 model)"),b2r=l(),fM=a("li"),X2e=a("strong"),v2r=o("pegasus"),F2r=o(" \u2014 "),iH=a("a"),T2r=o("TFPegasusForConditionalGeneration"),M2r=o(" (Pegasus model)"),E2r=l(),mM=a("li"),z2e=a("strong"),C2r=o("t5"),w2r=o(" \u2014 "),dH=a("a"),A2r=o("TFT5ForConditionalGeneration"),y2r=o(" (T5 model)"),L2r=l(),F(gM.$$.fragment),SNe=l(),ac=a("h2"),hM=a("a"),W2e=a("span"),F(xL.$$.fragment),x2r=l(),Q2e=a("span"),$2r=o("TFAutoModelForSequenceClassification"),RNe=l(),tr=a("div"),F($L.$$.fragment),k2r=l(),nc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cH=a("a"),R2r=o("from_pretrained()"),P2r=o(" class method or the "),fH=a("a"),B2r=o("from_config()"),I2r=o(` class
method.`),q2r=l(),kL=a("p"),N2r=o("This class cannot be instantiated directly using "),H2e=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),Rt=a("div"),F(SL.$$.fragment),O2r=l(),U2e=a("p"),V2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X2r=l(),sc=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),W2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),F(pM.$$.fragment),Y2r=l(),kr=a("div"),F(RL.$$.fragment),K2r=l(),Y2e=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e5r=l(),nn=a("p"),o5r=o("The model class to instantiate is selected based on the "),K2e=a("code"),r5r=o("model_type"),t5r=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),s5r=o("pretrained_model_name_or_path"),l5r=o(":"),i5r=l(),ee=a("ul"),_M=a("li"),o5e=a("strong"),d5r=o("albert"),c5r=o(" \u2014 "),gH=a("a"),f5r=o("TFAlbertForSequenceClassification"),m5r=o(" (ALBERT model)"),g5r=l(),uM=a("li"),r5e=a("strong"),h5r=o("bert"),p5r=o(" \u2014 "),hH=a("a"),_5r=o("TFBertForSequenceClassification"),u5r=o(" (BERT model)"),b5r=l(),bM=a("li"),t5e=a("strong"),v5r=o("camembert"),F5r=o(" \u2014 "),pH=a("a"),T5r=o("TFCamembertForSequenceClassification"),M5r=o(" (CamemBERT model)"),E5r=l(),vM=a("li"),a5e=a("strong"),C5r=o("convbert"),w5r=o(" \u2014 "),_H=a("a"),A5r=o("TFConvBertForSequenceClassification"),y5r=o(" (ConvBERT model)"),L5r=l(),FM=a("li"),n5e=a("strong"),x5r=o("ctrl"),$5r=o(" \u2014 "),uH=a("a"),k5r=o("TFCTRLForSequenceClassification"),S5r=o(" (CTRL model)"),R5r=l(),TM=a("li"),s5e=a("strong"),P5r=o("deberta"),B5r=o(" \u2014 "),bH=a("a"),I5r=o("TFDebertaForSequenceClassification"),q5r=o(" (DeBERTa model)"),N5r=l(),MM=a("li"),l5e=a("strong"),j5r=o("deberta-v2"),D5r=o(" \u2014 "),vH=a("a"),G5r=o("TFDebertaV2ForSequenceClassification"),O5r=o(" (DeBERTa-v2 model)"),V5r=l(),EM=a("li"),i5e=a("strong"),X5r=o("distilbert"),z5r=o(" \u2014 "),FH=a("a"),W5r=o("TFDistilBertForSequenceClassification"),Q5r=o(" (DistilBERT model)"),H5r=l(),CM=a("li"),d5e=a("strong"),U5r=o("electra"),J5r=o(" \u2014 "),TH=a("a"),Y5r=o("TFElectraForSequenceClassification"),K5r=o(" (ELECTRA model)"),Z5r=l(),wM=a("li"),c5e=a("strong"),evr=o("flaubert"),ovr=o(" \u2014 "),MH=a("a"),rvr=o("TFFlaubertForSequenceClassification"),tvr=o(" (FlauBERT model)"),avr=l(),AM=a("li"),f5e=a("strong"),nvr=o("funnel"),svr=o(" \u2014 "),EH=a("a"),lvr=o("TFFunnelForSequenceClassification"),ivr=o(" (Funnel Transformer model)"),dvr=l(),yM=a("li"),m5e=a("strong"),cvr=o("gpt2"),fvr=o(" \u2014 "),CH=a("a"),mvr=o("TFGPT2ForSequenceClassification"),gvr=o(" (OpenAI GPT-2 model)"),hvr=l(),LM=a("li"),g5e=a("strong"),pvr=o("gptj"),_vr=o(" \u2014 "),wH=a("a"),uvr=o("TFGPTJForSequenceClassification"),bvr=o(" (GPT-J model)"),vvr=l(),xM=a("li"),h5e=a("strong"),Fvr=o("layoutlm"),Tvr=o(" \u2014 "),AH=a("a"),Mvr=o("TFLayoutLMForSequenceClassification"),Evr=o(" (LayoutLM model)"),Cvr=l(),$M=a("li"),p5e=a("strong"),wvr=o("longformer"),Avr=o(" \u2014 "),yH=a("a"),yvr=o("TFLongformerForSequenceClassification"),Lvr=o(" (Longformer model)"),xvr=l(),kM=a("li"),_5e=a("strong"),$vr=o("mobilebert"),kvr=o(" \u2014 "),LH=a("a"),Svr=o("TFMobileBertForSequenceClassification"),Rvr=o(" (MobileBERT model)"),Pvr=l(),SM=a("li"),u5e=a("strong"),Bvr=o("mpnet"),Ivr=o(" \u2014 "),xH=a("a"),qvr=o("TFMPNetForSequenceClassification"),Nvr=o(" (MPNet model)"),jvr=l(),RM=a("li"),b5e=a("strong"),Dvr=o("openai-gpt"),Gvr=o(" \u2014 "),$H=a("a"),Ovr=o("TFOpenAIGPTForSequenceClassification"),Vvr=o(" (OpenAI GPT model)"),Xvr=l(),PM=a("li"),v5e=a("strong"),zvr=o("rembert"),Wvr=o(" \u2014 "),kH=a("a"),Qvr=o("TFRemBertForSequenceClassification"),Hvr=o(" (RemBERT model)"),Uvr=l(),BM=a("li"),F5e=a("strong"),Jvr=o("roberta"),Yvr=o(" \u2014 "),SH=a("a"),Kvr=o("TFRobertaForSequenceClassification"),Zvr=o(" (RoBERTa model)"),eFr=l(),IM=a("li"),T5e=a("strong"),oFr=o("roformer"),rFr=o(" \u2014 "),RH=a("a"),tFr=o("TFRoFormerForSequenceClassification"),aFr=o(" (RoFormer model)"),nFr=l(),qM=a("li"),M5e=a("strong"),sFr=o("tapas"),lFr=o(" \u2014 "),PH=a("a"),iFr=o("TFTapasForSequenceClassification"),dFr=o(" (TAPAS model)"),cFr=l(),NM=a("li"),E5e=a("strong"),fFr=o("transfo-xl"),mFr=o(" \u2014 "),BH=a("a"),gFr=o("TFTransfoXLForSequenceClassification"),hFr=o(" (Transformer-XL model)"),pFr=l(),jM=a("li"),C5e=a("strong"),_Fr=o("xlm"),uFr=o(" \u2014 "),IH=a("a"),bFr=o("TFXLMForSequenceClassification"),vFr=o(" (XLM model)"),FFr=l(),DM=a("li"),w5e=a("strong"),TFr=o("xlm-roberta"),MFr=o(" \u2014 "),qH=a("a"),EFr=o("TFXLMRobertaForSequenceClassification"),CFr=o(" (XLM-RoBERTa model)"),wFr=l(),GM=a("li"),A5e=a("strong"),AFr=o("xlnet"),yFr=o(" \u2014 "),NH=a("a"),LFr=o("TFXLNetForSequenceClassification"),xFr=o(" (XLNet model)"),$Fr=l(),F(OM.$$.fragment),PNe=l(),lc=a("h2"),VM=a("a"),y5e=a("span"),F(PL.$$.fragment),kFr=l(),L5e=a("span"),SFr=o("TFAutoModelForMultipleChoice"),BNe=l(),ar=a("div"),F(BL.$$.fragment),RFr=l(),ic=a("p"),PFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jH=a("a"),BFr=o("from_pretrained()"),IFr=o(" class method or the "),DH=a("a"),qFr=o("from_config()"),NFr=o(` class
method.`),jFr=l(),IL=a("p"),DFr=o("This class cannot be instantiated directly using "),x5e=a("code"),GFr=o("__init__()"),OFr=o(" (throws an error)."),VFr=l(),Pt=a("div"),F(qL.$$.fragment),XFr=l(),$5e=a("p"),zFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WFr=l(),dc=a("p"),QFr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),HFr=o("not"),UFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),JFr=o("from_pretrained()"),YFr=o(" to load the model weights."),KFr=l(),F(XM.$$.fragment),ZFr=l(),Sr=a("div"),F(NL.$$.fragment),eTr=l(),S5e=a("p"),oTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rTr=l(),sn=a("p"),tTr=o("The model class to instantiate is selected based on the "),R5e=a("code"),aTr=o("model_type"),nTr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),sTr=o("pretrained_model_name_or_path"),lTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),iTr=o("pretrained_model_name_or_path"),dTr=o(":"),cTr=l(),he=a("ul"),zM=a("li"),I5e=a("strong"),fTr=o("albert"),mTr=o(" \u2014 "),OH=a("a"),gTr=o("TFAlbertForMultipleChoice"),hTr=o(" (ALBERT model)"),pTr=l(),WM=a("li"),q5e=a("strong"),_Tr=o("bert"),uTr=o(" \u2014 "),VH=a("a"),bTr=o("TFBertForMultipleChoice"),vTr=o(" (BERT model)"),FTr=l(),QM=a("li"),N5e=a("strong"),TTr=o("camembert"),MTr=o(" \u2014 "),XH=a("a"),ETr=o("TFCamembertForMultipleChoice"),CTr=o(" (CamemBERT model)"),wTr=l(),HM=a("li"),j5e=a("strong"),ATr=o("convbert"),yTr=o(" \u2014 "),zH=a("a"),LTr=o("TFConvBertForMultipleChoice"),xTr=o(" (ConvBERT model)"),$Tr=l(),UM=a("li"),D5e=a("strong"),kTr=o("distilbert"),STr=o(" \u2014 "),WH=a("a"),RTr=o("TFDistilBertForMultipleChoice"),PTr=o(" (DistilBERT model)"),BTr=l(),JM=a("li"),G5e=a("strong"),ITr=o("electra"),qTr=o(" \u2014 "),QH=a("a"),NTr=o("TFElectraForMultipleChoice"),jTr=o(" (ELECTRA model)"),DTr=l(),YM=a("li"),O5e=a("strong"),GTr=o("flaubert"),OTr=o(" \u2014 "),HH=a("a"),VTr=o("TFFlaubertForMultipleChoice"),XTr=o(" (FlauBERT model)"),zTr=l(),KM=a("li"),V5e=a("strong"),WTr=o("funnel"),QTr=o(" \u2014 "),UH=a("a"),HTr=o("TFFunnelForMultipleChoice"),UTr=o(" (Funnel Transformer model)"),JTr=l(),ZM=a("li"),X5e=a("strong"),YTr=o("longformer"),KTr=o(" \u2014 "),JH=a("a"),ZTr=o("TFLongformerForMultipleChoice"),e9r=o(" (Longformer model)"),o9r=l(),e4=a("li"),z5e=a("strong"),r9r=o("mobilebert"),t9r=o(" \u2014 "),YH=a("a"),a9r=o("TFMobileBertForMultipleChoice"),n9r=o(" (MobileBERT model)"),s9r=l(),o4=a("li"),W5e=a("strong"),l9r=o("mpnet"),i9r=o(" \u2014 "),KH=a("a"),d9r=o("TFMPNetForMultipleChoice"),c9r=o(" (MPNet model)"),f9r=l(),r4=a("li"),Q5e=a("strong"),m9r=o("rembert"),g9r=o(" \u2014 "),ZH=a("a"),h9r=o("TFRemBertForMultipleChoice"),p9r=o(" (RemBERT model)"),_9r=l(),t4=a("li"),H5e=a("strong"),u9r=o("roberta"),b9r=o(" \u2014 "),eU=a("a"),v9r=o("TFRobertaForMultipleChoice"),F9r=o(" (RoBERTa model)"),T9r=l(),a4=a("li"),U5e=a("strong"),M9r=o("roformer"),E9r=o(" \u2014 "),oU=a("a"),C9r=o("TFRoFormerForMultipleChoice"),w9r=o(" (RoFormer model)"),A9r=l(),n4=a("li"),J5e=a("strong"),y9r=o("xlm"),L9r=o(" \u2014 "),rU=a("a"),x9r=o("TFXLMForMultipleChoice"),$9r=o(" (XLM model)"),k9r=l(),s4=a("li"),Y5e=a("strong"),S9r=o("xlm-roberta"),R9r=o(" \u2014 "),tU=a("a"),P9r=o("TFXLMRobertaForMultipleChoice"),B9r=o(" (XLM-RoBERTa model)"),I9r=l(),l4=a("li"),K5e=a("strong"),q9r=o("xlnet"),N9r=o(" \u2014 "),aU=a("a"),j9r=o("TFXLNetForMultipleChoice"),D9r=o(" (XLNet model)"),G9r=l(),F(i4.$$.fragment),INe=l(),cc=a("h2"),d4=a("a"),Z5e=a("span"),F(jL.$$.fragment),O9r=l(),eve=a("span"),V9r=o("TFAutoModelForNextSentencePrediction"),qNe=l(),nr=a("div"),F(DL.$$.fragment),X9r=l(),fc=a("p"),z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nU=a("a"),W9r=o("from_pretrained()"),Q9r=o(" class method or the "),sU=a("a"),H9r=o("from_config()"),U9r=o(` class
method.`),J9r=l(),GL=a("p"),Y9r=o("This class cannot be instantiated directly using "),ove=a("code"),K9r=o("__init__()"),Z9r=o(" (throws an error)."),eMr=l(),Bt=a("div"),F(OL.$$.fragment),oMr=l(),rve=a("p"),rMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tMr=l(),mc=a("p"),aMr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),nMr=o("not"),sMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),lMr=o("from_pretrained()"),iMr=o(" to load the model weights."),dMr=l(),F(c4.$$.fragment),cMr=l(),Rr=a("div"),F(VL.$$.fragment),fMr=l(),ave=a("p"),mMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gMr=l(),ln=a("p"),hMr=o("The model class to instantiate is selected based on the "),nve=a("code"),pMr=o("model_type"),_Mr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(":"),TMr=l(),XL=a("ul"),f4=a("li"),ive=a("strong"),MMr=o("bert"),EMr=o(" \u2014 "),iU=a("a"),CMr=o("TFBertForNextSentencePrediction"),wMr=o(" (BERT model)"),AMr=l(),m4=a("li"),dve=a("strong"),yMr=o("mobilebert"),LMr=o(" \u2014 "),dU=a("a"),xMr=o("TFMobileBertForNextSentencePrediction"),$Mr=o(" (MobileBERT model)"),kMr=l(),F(g4.$$.fragment),NNe=l(),gc=a("h2"),h4=a("a"),cve=a("span"),F(zL.$$.fragment),SMr=l(),fve=a("span"),RMr=o("TFAutoModelForTableQuestionAnswering"),jNe=l(),sr=a("div"),F(WL.$$.fragment),PMr=l(),hc=a("p"),BMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cU=a("a"),IMr=o("from_pretrained()"),qMr=o(" class method or the "),fU=a("a"),NMr=o("from_config()"),jMr=o(` class
method.`),DMr=l(),QL=a("p"),GMr=o("This class cannot be instantiated directly using "),mve=a("code"),OMr=o("__init__()"),VMr=o(" (throws an error)."),XMr=l(),It=a("div"),F(HL.$$.fragment),zMr=l(),gve=a("p"),WMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QMr=l(),pc=a("p"),HMr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),UMr=o("not"),JMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),YMr=o("from_pretrained()"),KMr=o(" to load the model weights."),ZMr=l(),F(p4.$$.fragment),e4r=l(),Pr=a("div"),F(UL.$$.fragment),o4r=l(),pve=a("p"),r4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),t4r=l(),dn=a("p"),a4r=o("The model class to instantiate is selected based on the "),_ve=a("code"),n4r=o("model_type"),s4r=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),l4r=o("pretrained_model_name_or_path"),i4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),d4r=o("pretrained_model_name_or_path"),c4r=o(":"),f4r=l(),vve=a("ul"),_4=a("li"),Fve=a("strong"),m4r=o("tapas"),g4r=o(" \u2014 "),gU=a("a"),h4r=o("TFTapasForQuestionAnswering"),p4r=o(" (TAPAS model)"),_4r=l(),F(u4.$$.fragment),DNe=l(),_c=a("h2"),b4=a("a"),Tve=a("span"),F(JL.$$.fragment),u4r=l(),Mve=a("span"),b4r=o("TFAutoModelForTokenClassification"),GNe=l(),lr=a("div"),F(YL.$$.fragment),v4r=l(),uc=a("p"),F4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hU=a("a"),T4r=o("from_pretrained()"),M4r=o(" class method or the "),pU=a("a"),E4r=o("from_config()"),C4r=o(` class
method.`),w4r=l(),KL=a("p"),A4r=o("This class cannot be instantiated directly using "),Eve=a("code"),y4r=o("__init__()"),L4r=o(" (throws an error)."),x4r=l(),qt=a("div"),F(ZL.$$.fragment),$4r=l(),Cve=a("p"),k4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S4r=l(),bc=a("p"),R4r=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),P4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),I4r=o("from_pretrained()"),q4r=o(" to load the model weights."),N4r=l(),F(v4.$$.fragment),j4r=l(),Br=a("div"),F(e7.$$.fragment),D4r=l(),Ave=a("p"),G4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O4r=l(),cn=a("p"),V4r=o("The model class to instantiate is selected based on the "),yve=a("code"),X4r=o("model_type"),z4r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),W4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(":"),J4r=l(),de=a("ul"),F4=a("li"),$ve=a("strong"),Y4r=o("albert"),K4r=o(" \u2014 "),uU=a("a"),Z4r=o("TFAlbertForTokenClassification"),eEr=o(" (ALBERT model)"),oEr=l(),T4=a("li"),kve=a("strong"),rEr=o("bert"),tEr=o(" \u2014 "),bU=a("a"),aEr=o("TFBertForTokenClassification"),nEr=o(" (BERT model)"),sEr=l(),M4=a("li"),Sve=a("strong"),lEr=o("camembert"),iEr=o(" \u2014 "),vU=a("a"),dEr=o("TFCamembertForTokenClassification"),cEr=o(" (CamemBERT model)"),fEr=l(),E4=a("li"),Rve=a("strong"),mEr=o("convbert"),gEr=o(" \u2014 "),FU=a("a"),hEr=o("TFConvBertForTokenClassification"),pEr=o(" (ConvBERT model)"),_Er=l(),C4=a("li"),Pve=a("strong"),uEr=o("deberta"),bEr=o(" \u2014 "),TU=a("a"),vEr=o("TFDebertaForTokenClassification"),FEr=o(" (DeBERTa model)"),TEr=l(),w4=a("li"),Bve=a("strong"),MEr=o("deberta-v2"),EEr=o(" \u2014 "),MU=a("a"),CEr=o("TFDebertaV2ForTokenClassification"),wEr=o(" (DeBERTa-v2 model)"),AEr=l(),A4=a("li"),Ive=a("strong"),yEr=o("distilbert"),LEr=o(" \u2014 "),EU=a("a"),xEr=o("TFDistilBertForTokenClassification"),$Er=o(" (DistilBERT model)"),kEr=l(),y4=a("li"),qve=a("strong"),SEr=o("electra"),REr=o(" \u2014 "),CU=a("a"),PEr=o("TFElectraForTokenClassification"),BEr=o(" (ELECTRA model)"),IEr=l(),L4=a("li"),Nve=a("strong"),qEr=o("flaubert"),NEr=o(" \u2014 "),wU=a("a"),jEr=o("TFFlaubertForTokenClassification"),DEr=o(" (FlauBERT model)"),GEr=l(),x4=a("li"),jve=a("strong"),OEr=o("funnel"),VEr=o(" \u2014 "),AU=a("a"),XEr=o("TFFunnelForTokenClassification"),zEr=o(" (Funnel Transformer model)"),WEr=l(),$4=a("li"),Dve=a("strong"),QEr=o("layoutlm"),HEr=o(" \u2014 "),yU=a("a"),UEr=o("TFLayoutLMForTokenClassification"),JEr=o(" (LayoutLM model)"),YEr=l(),k4=a("li"),Gve=a("strong"),KEr=o("longformer"),ZEr=o(" \u2014 "),LU=a("a"),eCr=o("TFLongformerForTokenClassification"),oCr=o(" (Longformer model)"),rCr=l(),S4=a("li"),Ove=a("strong"),tCr=o("mobilebert"),aCr=o(" \u2014 "),xU=a("a"),nCr=o("TFMobileBertForTokenClassification"),sCr=o(" (MobileBERT model)"),lCr=l(),R4=a("li"),Vve=a("strong"),iCr=o("mpnet"),dCr=o(" \u2014 "),$U=a("a"),cCr=o("TFMPNetForTokenClassification"),fCr=o(" (MPNet model)"),mCr=l(),P4=a("li"),Xve=a("strong"),gCr=o("rembert"),hCr=o(" \u2014 "),kU=a("a"),pCr=o("TFRemBertForTokenClassification"),_Cr=o(" (RemBERT model)"),uCr=l(),B4=a("li"),zve=a("strong"),bCr=o("roberta"),vCr=o(" \u2014 "),SU=a("a"),FCr=o("TFRobertaForTokenClassification"),TCr=o(" (RoBERTa model)"),MCr=l(),I4=a("li"),Wve=a("strong"),ECr=o("roformer"),CCr=o(" \u2014 "),RU=a("a"),wCr=o("TFRoFormerForTokenClassification"),ACr=o(" (RoFormer model)"),yCr=l(),q4=a("li"),Qve=a("strong"),LCr=o("xlm"),xCr=o(" \u2014 "),PU=a("a"),$Cr=o("TFXLMForTokenClassification"),kCr=o(" (XLM model)"),SCr=l(),N4=a("li"),Hve=a("strong"),RCr=o("xlm-roberta"),PCr=o(" \u2014 "),BU=a("a"),BCr=o("TFXLMRobertaForTokenClassification"),ICr=o(" (XLM-RoBERTa model)"),qCr=l(),j4=a("li"),Uve=a("strong"),NCr=o("xlnet"),jCr=o(" \u2014 "),IU=a("a"),DCr=o("TFXLNetForTokenClassification"),GCr=o(" (XLNet model)"),OCr=l(),F(D4.$$.fragment),ONe=l(),vc=a("h2"),G4=a("a"),Jve=a("span"),F(o7.$$.fragment),VCr=l(),Yve=a("span"),XCr=o("TFAutoModelForQuestionAnswering"),VNe=l(),ir=a("div"),F(r7.$$.fragment),zCr=l(),Fc=a("p"),WCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qU=a("a"),QCr=o("from_pretrained()"),HCr=o(" class method or the "),NU=a("a"),UCr=o("from_config()"),JCr=o(` class
method.`),YCr=l(),t7=a("p"),KCr=o("This class cannot be instantiated directly using "),Kve=a("code"),ZCr=o("__init__()"),e3r=o(" (throws an error)."),o3r=l(),Nt=a("div"),F(a7.$$.fragment),r3r=l(),Zve=a("p"),t3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a3r=l(),Tc=a("p"),n3r=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),s3r=o("not"),l3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),i3r=o("from_pretrained()"),d3r=o(" to load the model weights."),c3r=l(),F(O4.$$.fragment),f3r=l(),Ir=a("div"),F(n7.$$.fragment),m3r=l(),oFe=a("p"),g3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h3r=l(),fn=a("p"),p3r=o("The model class to instantiate is selected based on the "),rFe=a("code"),_3r=o("model_type"),u3r=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),b3r=o("pretrained_model_name_or_path"),v3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),F3r=o("pretrained_model_name_or_path"),T3r=o(":"),M3r=l(),ce=a("ul"),V4=a("li"),nFe=a("strong"),E3r=o("albert"),C3r=o(" \u2014 "),DU=a("a"),w3r=o("TFAlbertForQuestionAnswering"),A3r=o(" (ALBERT model)"),y3r=l(),X4=a("li"),sFe=a("strong"),L3r=o("bert"),x3r=o(" \u2014 "),GU=a("a"),$3r=o("TFBertForQuestionAnswering"),k3r=o(" (BERT model)"),S3r=l(),z4=a("li"),lFe=a("strong"),R3r=o("camembert"),P3r=o(" \u2014 "),OU=a("a"),B3r=o("TFCamembertForQuestionAnswering"),I3r=o(" (CamemBERT model)"),q3r=l(),W4=a("li"),iFe=a("strong"),N3r=o("convbert"),j3r=o(" \u2014 "),VU=a("a"),D3r=o("TFConvBertForQuestionAnswering"),G3r=o(" (ConvBERT model)"),O3r=l(),Q4=a("li"),dFe=a("strong"),V3r=o("deberta"),X3r=o(" \u2014 "),XU=a("a"),z3r=o("TFDebertaForQuestionAnswering"),W3r=o(" (DeBERTa model)"),Q3r=l(),H4=a("li"),cFe=a("strong"),H3r=o("deberta-v2"),U3r=o(" \u2014 "),zU=a("a"),J3r=o("TFDebertaV2ForQuestionAnswering"),Y3r=o(" (DeBERTa-v2 model)"),K3r=l(),U4=a("li"),fFe=a("strong"),Z3r=o("distilbert"),ewr=o(" \u2014 "),WU=a("a"),owr=o("TFDistilBertForQuestionAnswering"),rwr=o(" (DistilBERT model)"),twr=l(),J4=a("li"),mFe=a("strong"),awr=o("electra"),nwr=o(" \u2014 "),QU=a("a"),swr=o("TFElectraForQuestionAnswering"),lwr=o(" (ELECTRA model)"),iwr=l(),Y4=a("li"),gFe=a("strong"),dwr=o("flaubert"),cwr=o(" \u2014 "),HU=a("a"),fwr=o("TFFlaubertForQuestionAnsweringSimple"),mwr=o(" (FlauBERT model)"),gwr=l(),K4=a("li"),hFe=a("strong"),hwr=o("funnel"),pwr=o(" \u2014 "),UU=a("a"),_wr=o("TFFunnelForQuestionAnswering"),uwr=o(" (Funnel Transformer model)"),bwr=l(),Z4=a("li"),pFe=a("strong"),vwr=o("gptj"),Fwr=o(" \u2014 "),JU=a("a"),Twr=o("TFGPTJForQuestionAnswering"),Mwr=o(" (GPT-J model)"),Ewr=l(),eE=a("li"),_Fe=a("strong"),Cwr=o("longformer"),wwr=o(" \u2014 "),YU=a("a"),Awr=o("TFLongformerForQuestionAnswering"),ywr=o(" (Longformer model)"),Lwr=l(),oE=a("li"),uFe=a("strong"),xwr=o("mobilebert"),$wr=o(" \u2014 "),KU=a("a"),kwr=o("TFMobileBertForQuestionAnswering"),Swr=o(" (MobileBERT model)"),Rwr=l(),rE=a("li"),bFe=a("strong"),Pwr=o("mpnet"),Bwr=o(" \u2014 "),ZU=a("a"),Iwr=o("TFMPNetForQuestionAnswering"),qwr=o(" (MPNet model)"),Nwr=l(),tE=a("li"),vFe=a("strong"),jwr=o("rembert"),Dwr=o(" \u2014 "),eJ=a("a"),Gwr=o("TFRemBertForQuestionAnswering"),Owr=o(" (RemBERT model)"),Vwr=l(),aE=a("li"),FFe=a("strong"),Xwr=o("roberta"),zwr=o(" \u2014 "),oJ=a("a"),Wwr=o("TFRobertaForQuestionAnswering"),Qwr=o(" (RoBERTa model)"),Hwr=l(),nE=a("li"),TFe=a("strong"),Uwr=o("roformer"),Jwr=o(" \u2014 "),rJ=a("a"),Ywr=o("TFRoFormerForQuestionAnswering"),Kwr=o(" (RoFormer model)"),Zwr=l(),sE=a("li"),MFe=a("strong"),e0r=o("xlm"),o0r=o(" \u2014 "),tJ=a("a"),r0r=o("TFXLMForQuestionAnsweringSimple"),t0r=o(" (XLM model)"),a0r=l(),lE=a("li"),EFe=a("strong"),n0r=o("xlm-roberta"),s0r=o(" \u2014 "),aJ=a("a"),l0r=o("TFXLMRobertaForQuestionAnswering"),i0r=o(" (XLM-RoBERTa model)"),d0r=l(),iE=a("li"),CFe=a("strong"),c0r=o("xlnet"),f0r=o(" \u2014 "),nJ=a("a"),m0r=o("TFXLNetForQuestionAnsweringSimple"),g0r=o(" (XLNet model)"),h0r=l(),F(dE.$$.fragment),XNe=l(),Mc=a("h2"),cE=a("a"),wFe=a("span"),F(s7.$$.fragment),p0r=l(),AFe=a("span"),_0r=o("TFAutoModelForVision2Seq"),zNe=l(),dr=a("div"),F(l7.$$.fragment),u0r=l(),Ec=a("p"),b0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sJ=a("a"),v0r=o("from_pretrained()"),F0r=o(" class method or the "),lJ=a("a"),T0r=o("from_config()"),M0r=o(` class
method.`),E0r=l(),i7=a("p"),C0r=o("This class cannot be instantiated directly using "),yFe=a("code"),w0r=o("__init__()"),A0r=o(" (throws an error)."),y0r=l(),jt=a("div"),F(d7.$$.fragment),L0r=l(),LFe=a("p"),x0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$0r=l(),Cc=a("p"),k0r=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),S0r=o("not"),R0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),P0r=o("from_pretrained()"),B0r=o(" to load the model weights."),I0r=l(),F(fE.$$.fragment),q0r=l(),qr=a("div"),F(c7.$$.fragment),N0r=l(),$Fe=a("p"),j0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D0r=l(),mn=a("p"),G0r=o("The model class to instantiate is selected based on the "),kFe=a("code"),O0r=o("model_type"),V0r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),X0r=o("pretrained_model_name_or_path"),z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),W0r=o("pretrained_model_name_or_path"),Q0r=o(":"),H0r=l(),PFe=a("ul"),mE=a("li"),BFe=a("strong"),U0r=o("vision-encoder-decoder"),J0r=o(" \u2014 "),dJ=a("a"),Y0r=o("TFVisionEncoderDecoderModel"),K0r=o(" (Vision Encoder decoder model)"),Z0r=l(),F(gE.$$.fragment),WNe=l(),wc=a("h2"),hE=a("a"),IFe=a("span"),F(f7.$$.fragment),eAr=l(),qFe=a("span"),oAr=o("TFAutoModelForSpeechSeq2Seq"),QNe=l(),cr=a("div"),F(m7.$$.fragment),rAr=l(),Ac=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cJ=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),fJ=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),g7=a("p"),dAr=o("This class cannot be instantiated directly using "),NFe=a("code"),cAr=o("__init__()"),fAr=o(" (throws an error)."),mAr=l(),Dt=a("div"),F(h7.$$.fragment),gAr=l(),jFe=a("p"),hAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pAr=l(),yc=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),uAr=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(pE.$$.fragment),MAr=l(),Nr=a("div"),F(p7.$$.fragment),EAr=l(),GFe=a("p"),CAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wAr=l(),gn=a("p"),AAr=o("The model class to instantiate is selected based on the "),OFe=a("code"),yAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),zFe=a("ul"),_E=a("li"),WFe=a("strong"),PAr=o("speech_to_text"),BAr=o(" \u2014 "),gJ=a("a"),IAr=o("TFSpeech2TextForConditionalGeneration"),qAr=o(" (Speech2Text model)"),NAr=l(),F(uE.$$.fragment),HNe=l(),Lc=a("h2"),bE=a("a"),QFe=a("span"),F(_7.$$.fragment),jAr=l(),HFe=a("span"),DAr=o("FlaxAutoModel"),UNe=l(),fr=a("div"),F(u7.$$.fragment),GAr=l(),xc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hJ=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),pJ=a("a"),zAr=o("from_config()"),WAr=o(` class
method.`),QAr=l(),b7=a("p"),HAr=o("This class cannot be instantiated directly using "),UFe=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),Gt=a("div"),F(v7.$$.fragment),KAr=l(),JFe=a("p"),ZAr=o("Instantiates one of the base model classes of the library from a configuration."),eyr=l(),$c=a("p"),oyr=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),ryr=o("not"),tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),ayr=o("from_pretrained()"),nyr=o(" to load the model weights."),syr=l(),F(vE.$$.fragment),lyr=l(),jr=a("div"),F(F7.$$.fragment),iyr=l(),KFe=a("p"),dyr=o("Instantiate one of the base model classes of the library from a pretrained model."),cyr=l(),hn=a("p"),fyr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(":"),byr=l(),te=a("ul"),FE=a("li"),rTe=a("strong"),vyr=o("albert"),Fyr=o(" \u2014 "),uJ=a("a"),Tyr=o("FlaxAlbertModel"),Myr=o(" (ALBERT model)"),Eyr=l(),TE=a("li"),tTe=a("strong"),Cyr=o("bart"),wyr=o(" \u2014 "),bJ=a("a"),Ayr=o("FlaxBartModel"),yyr=o(" (BART model)"),Lyr=l(),ME=a("li"),aTe=a("strong"),xyr=o("beit"),$yr=o(" \u2014 "),vJ=a("a"),kyr=o("FlaxBeitModel"),Syr=o(" (BEiT model)"),Ryr=l(),EE=a("li"),nTe=a("strong"),Pyr=o("bert"),Byr=o(" \u2014 "),FJ=a("a"),Iyr=o("FlaxBertModel"),qyr=o(" (BERT model)"),Nyr=l(),CE=a("li"),sTe=a("strong"),jyr=o("big_bird"),Dyr=o(" \u2014 "),TJ=a("a"),Gyr=o("FlaxBigBirdModel"),Oyr=o(" (BigBird model)"),Vyr=l(),wE=a("li"),lTe=a("strong"),Xyr=o("blenderbot"),zyr=o(" \u2014 "),MJ=a("a"),Wyr=o("FlaxBlenderbotModel"),Qyr=o(" (Blenderbot model)"),Hyr=l(),AE=a("li"),iTe=a("strong"),Uyr=o("blenderbot-small"),Jyr=o(" \u2014 "),EJ=a("a"),Yyr=o("FlaxBlenderbotSmallModel"),Kyr=o(" (BlenderbotSmall model)"),Zyr=l(),yE=a("li"),dTe=a("strong"),e8r=o("clip"),o8r=o(" \u2014 "),CJ=a("a"),r8r=o("FlaxCLIPModel"),t8r=o(" (CLIP model)"),a8r=l(),LE=a("li"),cTe=a("strong"),n8r=o("distilbert"),s8r=o(" \u2014 "),wJ=a("a"),l8r=o("FlaxDistilBertModel"),i8r=o(" (DistilBERT model)"),d8r=l(),xE=a("li"),fTe=a("strong"),c8r=o("electra"),f8r=o(" \u2014 "),AJ=a("a"),m8r=o("FlaxElectraModel"),g8r=o(" (ELECTRA model)"),h8r=l(),$E=a("li"),mTe=a("strong"),p8r=o("gpt2"),_8r=o(" \u2014 "),yJ=a("a"),u8r=o("FlaxGPT2Model"),b8r=o(" (OpenAI GPT-2 model)"),v8r=l(),kE=a("li"),gTe=a("strong"),F8r=o("gpt_neo"),T8r=o(" \u2014 "),LJ=a("a"),M8r=o("FlaxGPTNeoModel"),E8r=o(" (GPT Neo model)"),C8r=l(),SE=a("li"),hTe=a("strong"),w8r=o("gptj"),A8r=o(" \u2014 "),xJ=a("a"),y8r=o("FlaxGPTJModel"),L8r=o(" (GPT-J model)"),x8r=l(),RE=a("li"),pTe=a("strong"),$8r=o("marian"),k8r=o(" \u2014 "),$J=a("a"),S8r=o("FlaxMarianModel"),R8r=o(" (Marian model)"),P8r=l(),PE=a("li"),_Te=a("strong"),B8r=o("mbart"),I8r=o(" \u2014 "),kJ=a("a"),q8r=o("FlaxMBartModel"),N8r=o(" (mBART model)"),j8r=l(),BE=a("li"),uTe=a("strong"),D8r=o("mt5"),G8r=o(" \u2014 "),SJ=a("a"),O8r=o("FlaxMT5Model"),V8r=o(" (mT5 model)"),X8r=l(),IE=a("li"),bTe=a("strong"),z8r=o("pegasus"),W8r=o(" \u2014 "),RJ=a("a"),Q8r=o("FlaxPegasusModel"),H8r=o(" (Pegasus model)"),U8r=l(),qE=a("li"),vTe=a("strong"),J8r=o("roberta"),Y8r=o(" \u2014 "),PJ=a("a"),K8r=o("FlaxRobertaModel"),Z8r=o(" (RoBERTa model)"),eLr=l(),NE=a("li"),FTe=a("strong"),oLr=o("roformer"),rLr=o(" \u2014 "),BJ=a("a"),tLr=o("FlaxRoFormerModel"),aLr=o(" (RoFormer model)"),nLr=l(),jE=a("li"),TTe=a("strong"),sLr=o("t5"),lLr=o(" \u2014 "),IJ=a("a"),iLr=o("FlaxT5Model"),dLr=o(" (T5 model)"),cLr=l(),DE=a("li"),MTe=a("strong"),fLr=o("vision-text-dual-encoder"),mLr=o(" \u2014 "),qJ=a("a"),gLr=o("FlaxVisionTextDualEncoderModel"),hLr=o(" (VisionTextDualEncoder model)"),pLr=l(),GE=a("li"),ETe=a("strong"),_Lr=o("vit"),uLr=o(" \u2014 "),NJ=a("a"),bLr=o("FlaxViTModel"),vLr=o(" (ViT model)"),FLr=l(),OE=a("li"),CTe=a("strong"),TLr=o("wav2vec2"),MLr=o(" \u2014 "),jJ=a("a"),ELr=o("FlaxWav2Vec2Model"),CLr=o(" (Wav2Vec2 model)"),wLr=l(),VE=a("li"),wTe=a("strong"),ALr=o("xglm"),yLr=o(" \u2014 "),DJ=a("a"),LLr=o("FlaxXGLMModel"),xLr=o(" (XGLM model)"),$Lr=l(),XE=a("li"),ATe=a("strong"),kLr=o("xlm-roberta"),SLr=o(" \u2014 "),GJ=a("a"),RLr=o("FlaxXLMRobertaModel"),PLr=o(" (XLM-RoBERTa model)"),BLr=l(),F(zE.$$.fragment),JNe=l(),kc=a("h2"),WE=a("a"),yTe=a("span"),F(T7.$$.fragment),ILr=l(),LTe=a("span"),qLr=o("FlaxAutoModelForCausalLM"),YNe=l(),mr=a("div"),F(M7.$$.fragment),NLr=l(),Sc=a("p"),jLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OJ=a("a"),DLr=o("from_pretrained()"),GLr=o(" class method or the "),VJ=a("a"),OLr=o("from_config()"),VLr=o(` class
method.`),XLr=l(),E7=a("p"),zLr=o("This class cannot be instantiated directly using "),xTe=a("code"),WLr=o("__init__()"),QLr=o(" (throws an error)."),HLr=l(),Ot=a("div"),F(C7.$$.fragment),ULr=l(),$Te=a("p"),JLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YLr=l(),Rc=a("p"),KLr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),ZLr=o("not"),e7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),o7r=o("from_pretrained()"),r7r=o(" to load the model weights."),t7r=l(),F(QE.$$.fragment),a7r=l(),Dr=a("div"),F(w7.$$.fragment),n7r=l(),STe=a("p"),s7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l7r=l(),pn=a("p"),i7r=o("The model class to instantiate is selected based on the "),RTe=a("code"),d7r=o("model_type"),c7r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),f7r=o("pretrained_model_name_or_path"),m7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(":"),p7r=l(),Re=a("ul"),HE=a("li"),ITe=a("strong"),_7r=o("bart"),u7r=o(" \u2014 "),zJ=a("a"),b7r=o("FlaxBartForCausalLM"),v7r=o(" (BART model)"),F7r=l(),UE=a("li"),qTe=a("strong"),T7r=o("bert"),M7r=o(" \u2014 "),WJ=a("a"),E7r=o("FlaxBertForCausalLM"),C7r=o(" (BERT model)"),w7r=l(),JE=a("li"),NTe=a("strong"),A7r=o("big_bird"),y7r=o(" \u2014 "),QJ=a("a"),L7r=o("FlaxBigBirdForCausalLM"),x7r=o(" (BigBird model)"),$7r=l(),YE=a("li"),jTe=a("strong"),k7r=o("electra"),S7r=o(" \u2014 "),HJ=a("a"),R7r=o("FlaxElectraForCausalLM"),P7r=o(" (ELECTRA model)"),B7r=l(),KE=a("li"),DTe=a("strong"),I7r=o("gpt2"),q7r=o(" \u2014 "),UJ=a("a"),N7r=o("FlaxGPT2LMHeadModel"),j7r=o(" (OpenAI GPT-2 model)"),D7r=l(),ZE=a("li"),GTe=a("strong"),G7r=o("gpt_neo"),O7r=o(" \u2014 "),JJ=a("a"),V7r=o("FlaxGPTNeoForCausalLM"),X7r=o(" (GPT Neo model)"),z7r=l(),eC=a("li"),OTe=a("strong"),W7r=o("gptj"),Q7r=o(" \u2014 "),YJ=a("a"),H7r=o("FlaxGPTJForCausalLM"),U7r=o(" (GPT-J model)"),J7r=l(),oC=a("li"),VTe=a("strong"),Y7r=o("roberta"),K7r=o(" \u2014 "),KJ=a("a"),Z7r=o("FlaxRobertaForCausalLM"),exr=o(" (RoBERTa model)"),oxr=l(),rC=a("li"),XTe=a("strong"),rxr=o("xglm"),txr=o(" \u2014 "),ZJ=a("a"),axr=o("FlaxXGLMForCausalLM"),nxr=o(" (XGLM model)"),sxr=l(),F(tC.$$.fragment),KNe=l(),Pc=a("h2"),aC=a("a"),zTe=a("span"),F(A7.$$.fragment),lxr=l(),WTe=a("span"),ixr=o("FlaxAutoModelForPreTraining"),ZNe=l(),gr=a("div"),F(y7.$$.fragment),dxr=l(),Bc=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eY=a("a"),fxr=o("from_pretrained()"),mxr=o(" class method or the "),oY=a("a"),gxr=o("from_config()"),hxr=o(` class
method.`),pxr=l(),L7=a("p"),_xr=o("This class cannot be instantiated directly using "),QTe=a("code"),uxr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),Vt=a("div"),F(x7.$$.fragment),Fxr=l(),HTe=a("p"),Txr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mxr=l(),Ic=a("p"),Exr=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),Cxr=o("not"),wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),Axr=o("from_pretrained()"),yxr=o(" to load the model weights."),Lxr=l(),F(nC.$$.fragment),xxr=l(),Gr=a("div"),F($7.$$.fragment),$xr=l(),JTe=a("p"),kxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sxr=l(),_n=a("p"),Rxr=o("The model class to instantiate is selected based on the "),YTe=a("code"),Pxr=o("model_type"),Bxr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),Ixr=o("pretrained_model_name_or_path"),qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),Nxr=o("pretrained_model_name_or_path"),jxr=o(":"),Dxr=l(),Ee=a("ul"),sC=a("li"),e9e=a("strong"),Gxr=o("albert"),Oxr=o(" \u2014 "),tY=a("a"),Vxr=o("FlaxAlbertForPreTraining"),Xxr=o(" (ALBERT model)"),zxr=l(),lC=a("li"),o9e=a("strong"),Wxr=o("bart"),Qxr=o(" \u2014 "),aY=a("a"),Hxr=o("FlaxBartForConditionalGeneration"),Uxr=o(" (BART model)"),Jxr=l(),iC=a("li"),r9e=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),nY=a("a"),Zxr=o("FlaxBertForPreTraining"),e$r=o(" (BERT model)"),o$r=l(),dC=a("li"),t9e=a("strong"),r$r=o("big_bird"),t$r=o(" \u2014 "),sY=a("a"),a$r=o("FlaxBigBirdForPreTraining"),n$r=o(" (BigBird model)"),s$r=l(),cC=a("li"),a9e=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),lY=a("a"),d$r=o("FlaxElectraForPreTraining"),c$r=o(" (ELECTRA model)"),f$r=l(),fC=a("li"),n9e=a("strong"),m$r=o("mbart"),g$r=o(" \u2014 "),iY=a("a"),h$r=o("FlaxMBartForConditionalGeneration"),p$r=o(" (mBART model)"),_$r=l(),mC=a("li"),s9e=a("strong"),u$r=o("mt5"),b$r=o(" \u2014 "),dY=a("a"),v$r=o("FlaxMT5ForConditionalGeneration"),F$r=o(" (mT5 model)"),T$r=l(),gC=a("li"),l9e=a("strong"),M$r=o("roberta"),E$r=o(" \u2014 "),cY=a("a"),C$r=o("FlaxRobertaForMaskedLM"),w$r=o(" (RoBERTa model)"),A$r=l(),hC=a("li"),i9e=a("strong"),y$r=o("roformer"),L$r=o(" \u2014 "),fY=a("a"),x$r=o("FlaxRoFormerForMaskedLM"),$$r=o(" (RoFormer model)"),k$r=l(),pC=a("li"),d9e=a("strong"),S$r=o("t5"),R$r=o(" \u2014 "),mY=a("a"),P$r=o("FlaxT5ForConditionalGeneration"),B$r=o(" (T5 model)"),I$r=l(),_C=a("li"),c9e=a("strong"),q$r=o("wav2vec2"),N$r=o(" \u2014 "),gY=a("a"),j$r=o("FlaxWav2Vec2ForPreTraining"),D$r=o(" (Wav2Vec2 model)"),G$r=l(),uC=a("li"),f9e=a("strong"),O$r=o("xlm-roberta"),V$r=o(" \u2014 "),hY=a("a"),X$r=o("FlaxXLMRobertaForMaskedLM"),z$r=o(" (XLM-RoBERTa model)"),W$r=l(),F(bC.$$.fragment),eje=l(),qc=a("h2"),vC=a("a"),m9e=a("span"),F(k7.$$.fragment),Q$r=l(),g9e=a("span"),H$r=o("FlaxAutoModelForMaskedLM"),oje=l(),hr=a("div"),F(S7.$$.fragment),U$r=l(),Nc=a("p"),J$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=a("a"),Y$r=o("from_pretrained()"),K$r=o(" class method or the "),_Y=a("a"),Z$r=o("from_config()"),ekr=o(` class
method.`),okr=l(),R7=a("p"),rkr=o("This class cannot be instantiated directly using "),h9e=a("code"),tkr=o("__init__()"),akr=o(" (throws an error)."),nkr=l(),Xt=a("div"),F(P7.$$.fragment),skr=l(),p9e=a("p"),lkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ikr=l(),jc=a("p"),dkr=o(`Note:
Loading a model from its configuration file does `),_9e=a("strong"),ckr=o("not"),fkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),mkr=o("from_pretrained()"),gkr=o(" to load the model weights."),hkr=l(),F(FC.$$.fragment),pkr=l(),Or=a("div"),F(B7.$$.fragment),_kr=l(),u9e=a("p"),ukr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bkr=l(),un=a("p"),vkr=o("The model class to instantiate is selected based on the "),b9e=a("code"),Fkr=o("model_type"),Tkr=o(` property of the config object (either
passed as an argument or loaded from `),v9e=a("code"),Mkr=o("pretrained_model_name_or_path"),Ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F9e=a("code"),Ckr=o("pretrained_model_name_or_path"),wkr=o(":"),Akr=l(),Le=a("ul"),TC=a("li"),T9e=a("strong"),ykr=o("albert"),Lkr=o(" \u2014 "),bY=a("a"),xkr=o("FlaxAlbertForMaskedLM"),$kr=o(" (ALBERT model)"),kkr=l(),MC=a("li"),M9e=a("strong"),Skr=o("bart"),Rkr=o(" \u2014 "),vY=a("a"),Pkr=o("FlaxBartForConditionalGeneration"),Bkr=o(" (BART model)"),Ikr=l(),EC=a("li"),E9e=a("strong"),qkr=o("bert"),Nkr=o(" \u2014 "),FY=a("a"),jkr=o("FlaxBertForMaskedLM"),Dkr=o(" (BERT model)"),Gkr=l(),CC=a("li"),C9e=a("strong"),Okr=o("big_bird"),Vkr=o(" \u2014 "),TY=a("a"),Xkr=o("FlaxBigBirdForMaskedLM"),zkr=o(" (BigBird model)"),Wkr=l(),wC=a("li"),w9e=a("strong"),Qkr=o("distilbert"),Hkr=o(" \u2014 "),MY=a("a"),Ukr=o("FlaxDistilBertForMaskedLM"),Jkr=o(" (DistilBERT model)"),Ykr=l(),AC=a("li"),A9e=a("strong"),Kkr=o("electra"),Zkr=o(" \u2014 "),EY=a("a"),eSr=o("FlaxElectraForMaskedLM"),oSr=o(" (ELECTRA model)"),rSr=l(),yC=a("li"),y9e=a("strong"),tSr=o("mbart"),aSr=o(" \u2014 "),CY=a("a"),nSr=o("FlaxMBartForConditionalGeneration"),sSr=o(" (mBART model)"),lSr=l(),LC=a("li"),L9e=a("strong"),iSr=o("roberta"),dSr=o(" \u2014 "),wY=a("a"),cSr=o("FlaxRobertaForMaskedLM"),fSr=o(" (RoBERTa model)"),mSr=l(),xC=a("li"),x9e=a("strong"),gSr=o("roformer"),hSr=o(" \u2014 "),AY=a("a"),pSr=o("FlaxRoFormerForMaskedLM"),_Sr=o(" (RoFormer model)"),uSr=l(),$C=a("li"),$9e=a("strong"),bSr=o("xlm-roberta"),vSr=o(" \u2014 "),yY=a("a"),FSr=o("FlaxXLMRobertaForMaskedLM"),TSr=o(" (XLM-RoBERTa model)"),MSr=l(),F(kC.$$.fragment),rje=l(),Dc=a("h2"),SC=a("a"),k9e=a("span"),F(I7.$$.fragment),ESr=l(),S9e=a("span"),CSr=o("FlaxAutoModelForSeq2SeqLM"),tje=l(),pr=a("div"),F(q7.$$.fragment),wSr=l(),Gc=a("p"),ASr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=a("a"),ySr=o("from_pretrained()"),LSr=o(" class method or the "),xY=a("a"),xSr=o("from_config()"),$Sr=o(` class
method.`),kSr=l(),N7=a("p"),SSr=o("This class cannot be instantiated directly using "),R9e=a("code"),RSr=o("__init__()"),PSr=o(" (throws an error)."),BSr=l(),zt=a("div"),F(j7.$$.fragment),ISr=l(),P9e=a("p"),qSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NSr=l(),Oc=a("p"),jSr=o(`Note:
Loading a model from its configuration file does `),B9e=a("strong"),DSr=o("not"),GSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),OSr=o("from_pretrained()"),VSr=o(" to load the model weights."),XSr=l(),F(RC.$$.fragment),zSr=l(),Vr=a("div"),F(D7.$$.fragment),WSr=l(),I9e=a("p"),QSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HSr=l(),bn=a("p"),USr=o("The model class to instantiate is selected based on the "),q9e=a("code"),JSr=o("model_type"),YSr=o(` property of the config object (either
passed as an argument or loaded from `),N9e=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=a("code"),eRr=o("pretrained_model_name_or_path"),oRr=o(":"),rRr=l(),Pe=a("ul"),PC=a("li"),D9e=a("strong"),tRr=o("bart"),aRr=o(" \u2014 "),kY=a("a"),nRr=o("FlaxBartForConditionalGeneration"),sRr=o(" (BART model)"),lRr=l(),BC=a("li"),G9e=a("strong"),iRr=o("blenderbot"),dRr=o(" \u2014 "),SY=a("a"),cRr=o("FlaxBlenderbotForConditionalGeneration"),fRr=o(" (Blenderbot model)"),mRr=l(),IC=a("li"),O9e=a("strong"),gRr=o("blenderbot-small"),hRr=o(" \u2014 "),RY=a("a"),pRr=o("FlaxBlenderbotSmallForConditionalGeneration"),_Rr=o(" (BlenderbotSmall model)"),uRr=l(),qC=a("li"),V9e=a("strong"),bRr=o("encoder-decoder"),vRr=o(" \u2014 "),PY=a("a"),FRr=o("FlaxEncoderDecoderModel"),TRr=o(" (Encoder decoder model)"),MRr=l(),NC=a("li"),X9e=a("strong"),ERr=o("marian"),CRr=o(" \u2014 "),BY=a("a"),wRr=o("FlaxMarianMTModel"),ARr=o(" (Marian model)"),yRr=l(),jC=a("li"),z9e=a("strong"),LRr=o("mbart"),xRr=o(" \u2014 "),IY=a("a"),$Rr=o("FlaxMBartForConditionalGeneration"),kRr=o(" (mBART model)"),SRr=l(),DC=a("li"),W9e=a("strong"),RRr=o("mt5"),PRr=o(" \u2014 "),qY=a("a"),BRr=o("FlaxMT5ForConditionalGeneration"),IRr=o(" (mT5 model)"),qRr=l(),GC=a("li"),Q9e=a("strong"),NRr=o("pegasus"),jRr=o(" \u2014 "),NY=a("a"),DRr=o("FlaxPegasusForConditionalGeneration"),GRr=o(" (Pegasus model)"),ORr=l(),OC=a("li"),H9e=a("strong"),VRr=o("t5"),XRr=o(" \u2014 "),jY=a("a"),zRr=o("FlaxT5ForConditionalGeneration"),WRr=o(" (T5 model)"),QRr=l(),F(VC.$$.fragment),aje=l(),Vc=a("h2"),XC=a("a"),U9e=a("span"),F(G7.$$.fragment),HRr=l(),J9e=a("span"),URr=o("FlaxAutoModelForSequenceClassification"),nje=l(),_r=a("div"),F(O7.$$.fragment),JRr=l(),Xc=a("p"),YRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=a("a"),KRr=o("from_pretrained()"),ZRr=o(" class method or the "),GY=a("a"),ePr=o("from_config()"),oPr=o(` class
method.`),rPr=l(),V7=a("p"),tPr=o("This class cannot be instantiated directly using "),Y9e=a("code"),aPr=o("__init__()"),nPr=o(" (throws an error)."),sPr=l(),Wt=a("div"),F(X7.$$.fragment),lPr=l(),K9e=a("p"),iPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dPr=l(),zc=a("p"),cPr=o(`Note:
Loading a model from its configuration file does `),Z9e=a("strong"),fPr=o("not"),mPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),gPr=o("from_pretrained()"),hPr=o(" to load the model weights."),pPr=l(),F(zC.$$.fragment),_Pr=l(),Xr=a("div"),F(z7.$$.fragment),uPr=l(),eMe=a("p"),bPr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vPr=l(),vn=a("p"),FPr=o("The model class to instantiate is selected based on the "),oMe=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),yPr=l(),xe=a("ul"),WC=a("li"),aMe=a("strong"),LPr=o("albert"),xPr=o(" \u2014 "),VY=a("a"),$Pr=o("FlaxAlbertForSequenceClassification"),kPr=o(" (ALBERT model)"),SPr=l(),QC=a("li"),nMe=a("strong"),RPr=o("bart"),PPr=o(" \u2014 "),XY=a("a"),BPr=o("FlaxBartForSequenceClassification"),IPr=o(" (BART model)"),qPr=l(),HC=a("li"),sMe=a("strong"),NPr=o("bert"),jPr=o(" \u2014 "),zY=a("a"),DPr=o("FlaxBertForSequenceClassification"),GPr=o(" (BERT model)"),OPr=l(),UC=a("li"),lMe=a("strong"),VPr=o("big_bird"),XPr=o(" \u2014 "),WY=a("a"),zPr=o("FlaxBigBirdForSequenceClassification"),WPr=o(" (BigBird model)"),QPr=l(),JC=a("li"),iMe=a("strong"),HPr=o("distilbert"),UPr=o(" \u2014 "),QY=a("a"),JPr=o("FlaxDistilBertForSequenceClassification"),YPr=o(" (DistilBERT model)"),KPr=l(),YC=a("li"),dMe=a("strong"),ZPr=o("electra"),eBr=o(" \u2014 "),HY=a("a"),oBr=o("FlaxElectraForSequenceClassification"),rBr=o(" (ELECTRA model)"),tBr=l(),KC=a("li"),cMe=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),UY=a("a"),sBr=o("FlaxMBartForSequenceClassification"),lBr=o(" (mBART model)"),iBr=l(),ZC=a("li"),fMe=a("strong"),dBr=o("roberta"),cBr=o(" \u2014 "),JY=a("a"),fBr=o("FlaxRobertaForSequenceClassification"),mBr=o(" (RoBERTa model)"),gBr=l(),e3=a("li"),mMe=a("strong"),hBr=o("roformer"),pBr=o(" \u2014 "),YY=a("a"),_Br=o("FlaxRoFormerForSequenceClassification"),uBr=o(" (RoFormer model)"),bBr=l(),o3=a("li"),gMe=a("strong"),vBr=o("xlm-roberta"),FBr=o(" \u2014 "),KY=a("a"),TBr=o("FlaxXLMRobertaForSequenceClassification"),MBr=o(" (XLM-RoBERTa model)"),EBr=l(),F(r3.$$.fragment),sje=l(),Wc=a("h2"),t3=a("a"),hMe=a("span"),F(W7.$$.fragment),CBr=l(),pMe=a("span"),wBr=o("FlaxAutoModelForQuestionAnswering"),lje=l(),ur=a("div"),F(Q7.$$.fragment),ABr=l(),Qc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZY=a("a"),LBr=o("from_pretrained()"),xBr=o(" class method or the "),eK=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),H7=a("p"),RBr=o("This class cannot be instantiated directly using "),_Me=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Qt=a("div"),F(U7.$$.fragment),qBr=l(),uMe=a("p"),NBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jBr=l(),Hc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(a3.$$.fragment),WBr=l(),zr=a("div"),F(J7.$$.fragment),QBr=l(),vMe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UBr=l(),Fn=a("p"),JBr=o("The model class to instantiate is selected based on the "),FMe=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),$e=a("ul"),n3=a("li"),EMe=a("strong"),aIr=o("albert"),nIr=o(" \u2014 "),rK=a("a"),sIr=o("FlaxAlbertForQuestionAnswering"),lIr=o(" (ALBERT model)"),iIr=l(),s3=a("li"),CMe=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),tK=a("a"),fIr=o("FlaxBartForQuestionAnswering"),mIr=o(" (BART model)"),gIr=l(),l3=a("li"),wMe=a("strong"),hIr=o("bert"),pIr=o(" \u2014 "),aK=a("a"),_Ir=o("FlaxBertForQuestionAnswering"),uIr=o(" (BERT model)"),bIr=l(),i3=a("li"),AMe=a("strong"),vIr=o("big_bird"),FIr=o(" \u2014 "),nK=a("a"),TIr=o("FlaxBigBirdForQuestionAnswering"),MIr=o(" (BigBird model)"),EIr=l(),d3=a("li"),yMe=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),sK=a("a"),AIr=o("FlaxDistilBertForQuestionAnswering"),yIr=o(" (DistilBERT model)"),LIr=l(),c3=a("li"),LMe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),lK=a("a"),kIr=o("FlaxElectraForQuestionAnswering"),SIr=o(" (ELECTRA model)"),RIr=l(),f3=a("li"),xMe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),iK=a("a"),IIr=o("FlaxMBartForQuestionAnswering"),qIr=o(" (mBART model)"),NIr=l(),m3=a("li"),$Me=a("strong"),jIr=o("roberta"),DIr=o(" \u2014 "),dK=a("a"),GIr=o("FlaxRobertaForQuestionAnswering"),OIr=o(" (RoBERTa model)"),VIr=l(),g3=a("li"),kMe=a("strong"),XIr=o("roformer"),zIr=o(" \u2014 "),cK=a("a"),WIr=o("FlaxRoFormerForQuestionAnswering"),QIr=o(" (RoFormer model)"),HIr=l(),h3=a("li"),SMe=a("strong"),UIr=o("xlm-roberta"),JIr=o(" \u2014 "),fK=a("a"),YIr=o("FlaxXLMRobertaForQuestionAnswering"),KIr=o(" (XLM-RoBERTa model)"),ZIr=l(),F(p3.$$.fragment),ije=l(),Uc=a("h2"),_3=a("a"),RMe=a("span"),F(Y7.$$.fragment),eqr=l(),PMe=a("span"),oqr=o("FlaxAutoModelForTokenClassification"),dje=l(),br=a("div"),F(K7.$$.fragment),rqr=l(),Jc=a("p"),tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mK=a("a"),aqr=o("from_pretrained()"),nqr=o(" class method or the "),gK=a("a"),sqr=o("from_config()"),lqr=o(` class
method.`),iqr=l(),Z7=a("p"),dqr=o("This class cannot be instantiated directly using "),BMe=a("code"),cqr=o("__init__()"),fqr=o(" (throws an error)."),mqr=l(),Ht=a("div"),F(ex.$$.fragment),gqr=l(),IMe=a("p"),hqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pqr=l(),Yc=a("p"),_qr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),uqr=o("not"),bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),vqr=o("from_pretrained()"),Fqr=o(" to load the model weights."),Tqr=l(),F(u3.$$.fragment),Mqr=l(),Wr=a("div"),F(ox.$$.fragment),Eqr=l(),NMe=a("p"),Cqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wqr=l(),Tn=a("p"),Aqr=o("The model class to instantiate is selected based on the "),jMe=a("code"),yqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(":"),Rqr=l(),De=a("ul"),b3=a("li"),OMe=a("strong"),Pqr=o("albert"),Bqr=o(" \u2014 "),pK=a("a"),Iqr=o("FlaxAlbertForTokenClassification"),qqr=o(" (ALBERT model)"),Nqr=l(),v3=a("li"),VMe=a("strong"),jqr=o("bert"),Dqr=o(" \u2014 "),_K=a("a"),Gqr=o("FlaxBertForTokenClassification"),Oqr=o(" (BERT model)"),Vqr=l(),F3=a("li"),XMe=a("strong"),Xqr=o("big_bird"),zqr=o(" \u2014 "),uK=a("a"),Wqr=o("FlaxBigBirdForTokenClassification"),Qqr=o(" (BigBird model)"),Hqr=l(),T3=a("li"),zMe=a("strong"),Uqr=o("distilbert"),Jqr=o(" \u2014 "),bK=a("a"),Yqr=o("FlaxDistilBertForTokenClassification"),Kqr=o(" (DistilBERT model)"),Zqr=l(),M3=a("li"),WMe=a("strong"),eNr=o("electra"),oNr=o(" \u2014 "),vK=a("a"),rNr=o("FlaxElectraForTokenClassification"),tNr=o(" (ELECTRA model)"),aNr=l(),E3=a("li"),QMe=a("strong"),nNr=o("roberta"),sNr=o(" \u2014 "),FK=a("a"),lNr=o("FlaxRobertaForTokenClassification"),iNr=o(" (RoBERTa model)"),dNr=l(),C3=a("li"),HMe=a("strong"),cNr=o("roformer"),fNr=o(" \u2014 "),TK=a("a"),mNr=o("FlaxRoFormerForTokenClassification"),gNr=o(" (RoFormer model)"),hNr=l(),w3=a("li"),UMe=a("strong"),pNr=o("xlm-roberta"),_Nr=o(" \u2014 "),MK=a("a"),uNr=o("FlaxXLMRobertaForTokenClassification"),bNr=o(" (XLM-RoBERTa model)"),vNr=l(),F(A3.$$.fragment),cje=l(),Kc=a("h2"),y3=a("a"),JMe=a("span"),F(rx.$$.fragment),FNr=l(),YMe=a("span"),TNr=o("FlaxAutoModelForMultipleChoice"),fje=l(),vr=a("div"),F(tx.$$.fragment),MNr=l(),Zc=a("p"),ENr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EK=a("a"),CNr=o("from_pretrained()"),wNr=o(" class method or the "),CK=a("a"),ANr=o("from_config()"),yNr=o(` class
method.`),LNr=l(),ax=a("p"),xNr=o("This class cannot be instantiated directly using "),KMe=a("code"),$Nr=o("__init__()"),kNr=o(" (throws an error)."),SNr=l(),Ut=a("div"),F(nx.$$.fragment),RNr=l(),ZMe=a("p"),PNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BNr=l(),ef=a("p"),INr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),qNr=o("not"),NNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),jNr=o("from_pretrained()"),DNr=o(" to load the model weights."),GNr=l(),F(L3.$$.fragment),ONr=l(),Qr=a("div"),F(sx.$$.fragment),VNr=l(),o4e=a("p"),XNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zNr=l(),Mn=a("p"),WNr=o("The model class to instantiate is selected based on the "),r4e=a("code"),QNr=o("model_type"),HNr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),YNr=o("pretrained_model_name_or_path"),KNr=o(":"),ZNr=l(),Ge=a("ul"),x3=a("li"),n4e=a("strong"),ejr=o("albert"),ojr=o(" \u2014 "),AK=a("a"),rjr=o("FlaxAlbertForMultipleChoice"),tjr=o(" (ALBERT model)"),ajr=l(),$3=a("li"),s4e=a("strong"),njr=o("bert"),sjr=o(" \u2014 "),yK=a("a"),ljr=o("FlaxBertForMultipleChoice"),ijr=o(" (BERT model)"),djr=l(),k3=a("li"),l4e=a("strong"),cjr=o("big_bird"),fjr=o(" \u2014 "),LK=a("a"),mjr=o("FlaxBigBirdForMultipleChoice"),gjr=o(" (BigBird model)"),hjr=l(),S3=a("li"),i4e=a("strong"),pjr=o("distilbert"),_jr=o(" \u2014 "),xK=a("a"),ujr=o("FlaxDistilBertForMultipleChoice"),bjr=o(" (DistilBERT model)"),vjr=l(),R3=a("li"),d4e=a("strong"),Fjr=o("electra"),Tjr=o(" \u2014 "),$K=a("a"),Mjr=o("FlaxElectraForMultipleChoice"),Ejr=o(" (ELECTRA model)"),Cjr=l(),P3=a("li"),c4e=a("strong"),wjr=o("roberta"),Ajr=o(" \u2014 "),kK=a("a"),yjr=o("FlaxRobertaForMultipleChoice"),Ljr=o(" (RoBERTa model)"),xjr=l(),B3=a("li"),f4e=a("strong"),$jr=o("roformer"),kjr=o(" \u2014 "),SK=a("a"),Sjr=o("FlaxRoFormerForMultipleChoice"),Rjr=o(" (RoFormer model)"),Pjr=l(),I3=a("li"),m4e=a("strong"),Bjr=o("xlm-roberta"),Ijr=o(" \u2014 "),RK=a("a"),qjr=o("FlaxXLMRobertaForMultipleChoice"),Njr=o(" (XLM-RoBERTa model)"),jjr=l(),F(q3.$$.fragment),mje=l(),of=a("h2"),N3=a("a"),g4e=a("span"),F(lx.$$.fragment),Djr=l(),h4e=a("span"),Gjr=o("FlaxAutoModelForNextSentencePrediction"),gje=l(),Fr=a("div"),F(ix.$$.fragment),Ojr=l(),rf=a("p"),Vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PK=a("a"),Xjr=o("from_pretrained()"),zjr=o(" class method or the "),BK=a("a"),Wjr=o("from_config()"),Qjr=o(` class
method.`),Hjr=l(),dx=a("p"),Ujr=o("This class cannot be instantiated directly using "),p4e=a("code"),Jjr=o("__init__()"),Yjr=o(" (throws an error)."),Kjr=l(),Jt=a("div"),F(cx.$$.fragment),Zjr=l(),_4e=a("p"),eDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oDr=l(),tf=a("p"),rDr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),tDr=o("not"),aDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),nDr=o("from_pretrained()"),sDr=o(" to load the model weights."),lDr=l(),F(j3.$$.fragment),iDr=l(),Hr=a("div"),F(fx.$$.fragment),dDr=l(),b4e=a("p"),cDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fDr=l(),En=a("p"),mDr=o("The model class to instantiate is selected based on the "),v4e=a("code"),gDr=o("model_type"),hDr=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),pDr=o("pretrained_model_name_or_path"),_Dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),uDr=o("pretrained_model_name_or_path"),bDr=o(":"),vDr=l(),M4e=a("ul"),D3=a("li"),E4e=a("strong"),FDr=o("bert"),TDr=o(" \u2014 "),qK=a("a"),MDr=o("FlaxBertForNextSentencePrediction"),EDr=o(" (BERT model)"),CDr=l(),F(G3.$$.fragment),hje=l(),af=a("h2"),O3=a("a"),C4e=a("span"),F(mx.$$.fragment),wDr=l(),w4e=a("span"),ADr=o("FlaxAutoModelForImageClassification"),pje=l(),Tr=a("div"),F(gx.$$.fragment),yDr=l(),nf=a("p"),LDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NK=a("a"),xDr=o("from_pretrained()"),$Dr=o(" class method or the "),jK=a("a"),kDr=o("from_config()"),SDr=o(` class
method.`),RDr=l(),hx=a("p"),PDr=o("This class cannot be instantiated directly using "),A4e=a("code"),BDr=o("__init__()"),IDr=o(" (throws an error)."),qDr=l(),Yt=a("div"),F(px.$$.fragment),NDr=l(),y4e=a("p"),jDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DDr=l(),sf=a("p"),GDr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),ODr=o("not"),VDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),XDr=o("from_pretrained()"),zDr=o(" to load the model weights."),WDr=l(),F(V3.$$.fragment),QDr=l(),Ur=a("div"),F(_x.$$.fragment),HDr=l(),x4e=a("p"),UDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JDr=l(),Cn=a("p"),YDr=o("The model class to instantiate is selected based on the "),$4e=a("code"),KDr=o("model_type"),ZDr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),eGr=o("pretrained_model_name_or_path"),oGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(":"),aGr=l(),ux=a("ul"),X3=a("li"),R4e=a("strong"),nGr=o("beit"),sGr=o(" \u2014 "),GK=a("a"),lGr=o("FlaxBeitForImageClassification"),iGr=o(" (BEiT model)"),dGr=l(),z3=a("li"),P4e=a("strong"),cGr=o("vit"),fGr=o(" \u2014 "),OK=a("a"),mGr=o("FlaxViTForImageClassification"),gGr=o(" (ViT model)"),hGr=l(),F(W3.$$.fragment),_je=l(),lf=a("h2"),Q3=a("a"),B4e=a("span"),F(bx.$$.fragment),pGr=l(),I4e=a("span"),_Gr=o("FlaxAutoModelForVision2Seq"),uje=l(),Mr=a("div"),F(vx.$$.fragment),uGr=l(),df=a("p"),bGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VK=a("a"),vGr=o("from_pretrained()"),FGr=o(" class method or the "),XK=a("a"),TGr=o("from_config()"),MGr=o(` class
method.`),EGr=l(),Fx=a("p"),CGr=o("This class cannot be instantiated directly using "),q4e=a("code"),wGr=o("__init__()"),AGr=o(" (throws an error)."),yGr=l(),Kt=a("div"),F(Tx.$$.fragment),LGr=l(),N4e=a("p"),xGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Gr=l(),cf=a("p"),kGr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),SGr=o("not"),RGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),PGr=o("from_pretrained()"),BGr=o(" to load the model weights."),IGr=l(),F(H3.$$.fragment),qGr=l(),Jr=a("div"),F(Mx.$$.fragment),NGr=l(),D4e=a("p"),jGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DGr=l(),wn=a("p"),GGr=o("The model class to instantiate is selected based on the "),G4e=a("code"),OGr=o("model_type"),VGr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),XGr=o("pretrained_model_name_or_path"),zGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),WGr=o("pretrained_model_name_or_path"),QGr=o(":"),HGr=l(),X4e=a("ul"),U3=a("li"),z4e=a("strong"),UGr=o("vision-encoder-decoder"),JGr=o(" \u2014 "),WK=a("a"),YGr=o("FlaxVisionEncoderDecoderModel"),KGr=o(" (Vision Encoder decoder model)"),ZGr=l(),F(J3.$$.fragment),this.h()},l(f){const u=h7t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ex=s(p);m=n(Ex,"A",{id:!0,class:!0,href:!0});var W4e=s(m);_=n(W4e,"SPAN",{});var Q4e=s(_);T(d.$$.fragment,Q4e),Q4e.forEach(t),W4e.forEach(t),h=i(Ex),Mo=n(Ex,"SPAN",{});var H4e=s(Mo);ci=r(H4e,"Auto Classes"),H4e.forEach(t),Ex.forEach(t),hf=i(f),rt=n(f,"P",{});var Cx=s(rt);fi=r(Cx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(Cx,"CODE",{});var U4e=s(mi);hA=r(U4e,"from_pretrained()"),U4e.forEach(t),pf=r(Cx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Cx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var J4e=s(yn);pA=r(J4e,"AutoConfig"),J4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var Y4e=s(xn);_A=r(Y4e,"AutoModel"),Y4e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var K4e=s($n);uA=r(K4e,"AutoTokenizer"),K4e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var wx=s(Ae);B$=r(wx,"will create a model that is an instance of "),_i=n(wx,"A",{href:!0});var Z4e=s(_i);I$=r(Z4e,"BertModel"),Z4e.forEach(t),q$=r(wx,"."),wx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Ax=s(wa);N$=r(Ax,"There is one class of "),uf=n(Ax,"CODE",{});var eEe=s(uf);j$=r(eEe,"AutoModel"),eEe.forEach(t),AGe=r(Ax," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ax.forEach(t),pqe=i(f),ui=n(f,"H2",{class:!0});var yx=s(ui);bf=n(yx,"A",{id:!0,class:!0,href:!0});var oEe=s(bf);jee=n(oEe,"SPAN",{});var rEe=s(jee);T(bA.$$.fragment,rEe),rEe.forEach(t),oEe.forEach(t),yGe=i(yx),Dee=n(yx,"SPAN",{});var tEe=s(Dee);LGe=r(tEe,"Extending the Auto Classes"),tEe.forEach(t),yx.forEach(t),_qe=i(f),kn=n(f,"P",{});var ff=s(kn);xGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Gee=n(ff,"CODE",{});var aEe=s(Gee);$Ge=r(aEe,"NewModel"),aEe.forEach(t),kGe=r(ff,", make sure you have a "),Oee=n(ff,"CODE",{});var nEe=s(Oee);SGe=r(nEe,"NewModelConfig"),nEe.forEach(t),RGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),uqe=i(f),T(vA.$$.fragment,f),bqe=i(f),D$=n(f,"P",{});var sEe=s(D$);PGe=r(sEe,"You will then be able to use the auto classes like you would usually do!"),sEe.forEach(t),vqe=i(f),T(vf.$$.fragment,f),Fqe=i(f),bi=n(f,"H2",{class:!0});var Lx=s(bi);Ff=n(Lx,"A",{id:!0,class:!0,href:!0});var lEe=s(Ff);Vee=n(lEe,"SPAN",{});var iEe=s(Vee);T(FA.$$.fragment,iEe),iEe.forEach(t),lEe.forEach(t),BGe=i(Lx),Xee=n(Lx,"SPAN",{});var dEe=s(Xee);IGe=r(dEe,"AutoConfig"),dEe.forEach(t),Lx.forEach(t),Tqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(TA.$$.fragment,et),qGe=i(et),MA=n(et,"P",{});var xx=s(MA);NGe=r(xx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),G$=n(xx,"A",{href:!0});var cEe=s(G$);jGe=r(cEe,"from_pretrained()"),cEe.forEach(t),DGe=r(xx," class method."),xx.forEach(t),GGe=i(et),EA=n(et,"P",{});var $x=s(EA);OGe=r($x,"This class cannot be instantiated directly using "),zee=n($x,"CODE",{});var fEe=s(zee);VGe=r(fEe,"__init__()"),fEe.forEach(t),XGe=r($x," (throws an error)."),$x.forEach(t),zGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(CA.$$.fragment,ot),WGe=i(ot),Wee=n(ot,"P",{});var mEe=s(Wee);QGe=r(mEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),mEe.forEach(t),HGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);UGe=r(mf,"The configuration class to instantiate is selected based on the "),Qee=n(mf,"CODE",{});var gEe=s(Qee);JGe=r(gEe,"model_type"),gEe.forEach(t),YGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Hee=n(mf,"CODE",{});var hEe=s(Hee);KGe=r(hEe,"pretrained_model_name_or_path"),hEe.forEach(t),ZGe=r(mf,":"),mf.forEach(t),eOe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var Y3=s(Tf);Uee=n(Y3,"STRONG",{});var pEe=s(Uee);oOe=r(pEe,"albert"),pEe.forEach(t),rOe=r(Y3," \u2014 "),O$=n(Y3,"A",{href:!0});var _Ee=s(O$);tOe=r(_Ee,"AlbertConfig"),_Ee.forEach(t),aOe=r(Y3," (ALBERT model)"),Y3.forEach(t),nOe=i(y),Mf=n(y,"LI",{});var K3=s(Mf);Jee=n(K3,"STRONG",{});var uEe=s(Jee);sOe=r(uEe,"bart"),uEe.forEach(t),lOe=r(K3," \u2014 "),V$=n(K3,"A",{href:!0});var bEe=s(V$);iOe=r(bEe,"BartConfig"),bEe.forEach(t),dOe=r(K3," (BART model)"),K3.forEach(t),cOe=i(y),Ef=n(y,"LI",{});var Z3=s(Ef);Yee=n(Z3,"STRONG",{});var vEe=s(Yee);fOe=r(vEe,"beit"),vEe.forEach(t),mOe=r(Z3," \u2014 "),X$=n(Z3,"A",{href:!0});var FEe=s(X$);gOe=r(FEe,"BeitConfig"),FEe.forEach(t),hOe=r(Z3," (BEiT model)"),Z3.forEach(t),pOe=i(y),Cf=n(y,"LI",{});var ew=s(Cf);Kee=n(ew,"STRONG",{});var TEe=s(Kee);_Oe=r(TEe,"bert"),TEe.forEach(t),uOe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var MEe=s(z$);bOe=r(MEe,"BertConfig"),MEe.forEach(t),vOe=r(ew," (BERT model)"),ew.forEach(t),FOe=i(y),wf=n(y,"LI",{});var ow=s(wf);Zee=n(ow,"STRONG",{});var EEe=s(Zee);TOe=r(EEe,"bert-generation"),EEe.forEach(t),MOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var CEe=s(W$);EOe=r(CEe,"BertGenerationConfig"),CEe.forEach(t),COe=r(ow," (Bert Generation model)"),ow.forEach(t),wOe=i(y),Af=n(y,"LI",{});var rw=s(Af);eoe=n(rw,"STRONG",{});var wEe=s(eoe);AOe=r(wEe,"big_bird"),wEe.forEach(t),yOe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var AEe=s(Q$);LOe=r(AEe,"BigBirdConfig"),AEe.forEach(t),xOe=r(rw," (BigBird model)"),rw.forEach(t),$Oe=i(y),yf=n(y,"LI",{});var tw=s(yf);ooe=n(tw,"STRONG",{});var yEe=s(ooe);kOe=r(yEe,"bigbird_pegasus"),yEe.forEach(t),SOe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var LEe=s(H$);ROe=r(LEe,"BigBirdPegasusConfig"),LEe.forEach(t),POe=r(tw," (BigBirdPegasus model)"),tw.forEach(t),BOe=i(y),Lf=n(y,"LI",{});var aw=s(Lf);roe=n(aw,"STRONG",{});var xEe=s(roe);IOe=r(xEe,"blenderbot"),xEe.forEach(t),qOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var $Ee=s(U$);NOe=r($Ee,"BlenderbotConfig"),$Ee.forEach(t),jOe=r(aw," (Blenderbot model)"),aw.forEach(t),DOe=i(y),xf=n(y,"LI",{});var nw=s(xf);toe=n(nw,"STRONG",{});var kEe=s(toe);GOe=r(kEe,"blenderbot-small"),kEe.forEach(t),OOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var SEe=s(J$);VOe=r(SEe,"BlenderbotSmallConfig"),SEe.forEach(t),XOe=r(nw," (BlenderbotSmall model)"),nw.forEach(t),zOe=i(y),$f=n(y,"LI",{});var sw=s($f);aoe=n(sw,"STRONG",{});var REe=s(aoe);WOe=r(REe,"camembert"),REe.forEach(t),QOe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var PEe=s(Y$);HOe=r(PEe,"CamembertConfig"),PEe.forEach(t),UOe=r(sw," (CamemBERT model)"),sw.forEach(t),JOe=i(y),kf=n(y,"LI",{});var lw=s(kf);noe=n(lw,"STRONG",{});var BEe=s(noe);YOe=r(BEe,"canine"),BEe.forEach(t),KOe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var IEe=s(K$);ZOe=r(IEe,"CanineConfig"),IEe.forEach(t),eVe=r(lw," (Canine model)"),lw.forEach(t),oVe=i(y),Sf=n(y,"LI",{});var iw=s(Sf);soe=n(iw,"STRONG",{});var qEe=s(soe);rVe=r(qEe,"clip"),qEe.forEach(t),tVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var NEe=s(Z$);aVe=r(NEe,"CLIPConfig"),NEe.forEach(t),nVe=r(iw," (CLIP model)"),iw.forEach(t),sVe=i(y),Rf=n(y,"LI",{});var dw=s(Rf);loe=n(dw,"STRONG",{});var jEe=s(loe);lVe=r(jEe,"convbert"),jEe.forEach(t),iVe=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var DEe=s(ek);dVe=r(DEe,"ConvBertConfig"),DEe.forEach(t),cVe=r(dw," (ConvBERT model)"),dw.forEach(t),fVe=i(y),Pf=n(y,"LI",{});var cw=s(Pf);ioe=n(cw,"STRONG",{});var GEe=s(ioe);mVe=r(GEe,"convnext"),GEe.forEach(t),gVe=r(cw," \u2014 "),ok=n(cw,"A",{href:!0});var OEe=s(ok);hVe=r(OEe,"ConvNextConfig"),OEe.forEach(t),pVe=r(cw," (ConvNext model)"),cw.forEach(t),_Ve=i(y),Bf=n(y,"LI",{});var fw=s(Bf);doe=n(fw,"STRONG",{});var VEe=s(doe);uVe=r(VEe,"ctrl"),VEe.forEach(t),bVe=r(fw," \u2014 "),rk=n(fw,"A",{href:!0});var XEe=s(rk);vVe=r(XEe,"CTRLConfig"),XEe.forEach(t),FVe=r(fw," (CTRL model)"),fw.forEach(t),TVe=i(y),If=n(y,"LI",{});var mw=s(If);coe=n(mw,"STRONG",{});var zEe=s(coe);MVe=r(zEe,"cvt"),zEe.forEach(t),EVe=r(mw," \u2014 "),tk=n(mw,"A",{href:!0});var WEe=s(tk);CVe=r(WEe,"CvtConfig"),WEe.forEach(t),wVe=r(mw," (CvT model)"),mw.forEach(t),AVe=i(y),qf=n(y,"LI",{});var gw=s(qf);foe=n(gw,"STRONG",{});var QEe=s(foe);yVe=r(QEe,"data2vec-audio"),QEe.forEach(t),LVe=r(gw," \u2014 "),ak=n(gw,"A",{href:!0});var HEe=s(ak);xVe=r(HEe,"Data2VecAudioConfig"),HEe.forEach(t),$Ve=r(gw," (Data2VecAudio model)"),gw.forEach(t),kVe=i(y),Nf=n(y,"LI",{});var hw=s(Nf);moe=n(hw,"STRONG",{});var UEe=s(moe);SVe=r(UEe,"data2vec-text"),UEe.forEach(t),RVe=r(hw," \u2014 "),nk=n(hw,"A",{href:!0});var JEe=s(nk);PVe=r(JEe,"Data2VecTextConfig"),JEe.forEach(t),BVe=r(hw," (Data2VecText model)"),hw.forEach(t),IVe=i(y),jf=n(y,"LI",{});var pw=s(jf);goe=n(pw,"STRONG",{});var YEe=s(goe);qVe=r(YEe,"data2vec-vision"),YEe.forEach(t),NVe=r(pw," \u2014 "),sk=n(pw,"A",{href:!0});var KEe=s(sk);jVe=r(KEe,"Data2VecVisionConfig"),KEe.forEach(t),DVe=r(pw," (Data2VecVision model)"),pw.forEach(t),GVe=i(y),Df=n(y,"LI",{});var _w=s(Df);hoe=n(_w,"STRONG",{});var ZEe=s(hoe);OVe=r(ZEe,"deberta"),ZEe.forEach(t),VVe=r(_w," \u2014 "),lk=n(_w,"A",{href:!0});var eCe=s(lk);XVe=r(eCe,"DebertaConfig"),eCe.forEach(t),zVe=r(_w," (DeBERTa model)"),_w.forEach(t),WVe=i(y),Gf=n(y,"LI",{});var uw=s(Gf);poe=n(uw,"STRONG",{});var oCe=s(poe);QVe=r(oCe,"deberta-v2"),oCe.forEach(t),HVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var rCe=s(ik);UVe=r(rCe,"DebertaV2Config"),rCe.forEach(t),JVe=r(uw," (DeBERTa-v2 model)"),uw.forEach(t),YVe=i(y),Of=n(y,"LI",{});var bw=s(Of);_oe=n(bw,"STRONG",{});var tCe=s(_oe);KVe=r(tCe,"decision_transformer"),tCe.forEach(t),ZVe=r(bw," \u2014 "),dk=n(bw,"A",{href:!0});var aCe=s(dk);eXe=r(aCe,"DecisionTransformerConfig"),aCe.forEach(t),oXe=r(bw," (Decision Transformer model)"),bw.forEach(t),rXe=i(y),Vf=n(y,"LI",{});var vw=s(Vf);uoe=n(vw,"STRONG",{});var nCe=s(uoe);tXe=r(nCe,"deit"),nCe.forEach(t),aXe=r(vw," \u2014 "),ck=n(vw,"A",{href:!0});var oOr=s(ck);nXe=r(oOr,"DeiTConfig"),oOr.forEach(t),sXe=r(vw," (DeiT model)"),vw.forEach(t),lXe=i(y),Xf=n(y,"LI",{});var sCe=s(Xf);boe=n(sCe,"STRONG",{});var rOr=s(boe);iXe=r(rOr,"detr"),rOr.forEach(t),dXe=r(sCe," \u2014 "),fk=n(sCe,"A",{href:!0});var tOr=s(fk);cXe=r(tOr,"DetrConfig"),tOr.forEach(t),fXe=r(sCe," (DETR model)"),sCe.forEach(t),mXe=i(y),zf=n(y,"LI",{});var lCe=s(zf);voe=n(lCe,"STRONG",{});var aOr=s(voe);gXe=r(aOr,"distilbert"),aOr.forEach(t),hXe=r(lCe," \u2014 "),mk=n(lCe,"A",{href:!0});var nOr=s(mk);pXe=r(nOr,"DistilBertConfig"),nOr.forEach(t),_Xe=r(lCe," (DistilBERT model)"),lCe.forEach(t),uXe=i(y),Wf=n(y,"LI",{});var iCe=s(Wf);Foe=n(iCe,"STRONG",{});var sOr=s(Foe);bXe=r(sOr,"dpr"),sOr.forEach(t),vXe=r(iCe," \u2014 "),gk=n(iCe,"A",{href:!0});var lOr=s(gk);FXe=r(lOr,"DPRConfig"),lOr.forEach(t),TXe=r(iCe," (DPR model)"),iCe.forEach(t),MXe=i(y),Qf=n(y,"LI",{});var dCe=s(Qf);Toe=n(dCe,"STRONG",{});var iOr=s(Toe);EXe=r(iOr,"dpt"),iOr.forEach(t),CXe=r(dCe," \u2014 "),hk=n(dCe,"A",{href:!0});var dOr=s(hk);wXe=r(dOr,"DPTConfig"),dOr.forEach(t),AXe=r(dCe," (DPT model)"),dCe.forEach(t),yXe=i(y),Hf=n(y,"LI",{});var cCe=s(Hf);Moe=n(cCe,"STRONG",{});var cOr=s(Moe);LXe=r(cOr,"electra"),cOr.forEach(t),xXe=r(cCe," \u2014 "),pk=n(cCe,"A",{href:!0});var fOr=s(pk);$Xe=r(fOr,"ElectraConfig"),fOr.forEach(t),kXe=r(cCe," (ELECTRA model)"),cCe.forEach(t),SXe=i(y),Uf=n(y,"LI",{});var fCe=s(Uf);Eoe=n(fCe,"STRONG",{});var mOr=s(Eoe);RXe=r(mOr,"encoder-decoder"),mOr.forEach(t),PXe=r(fCe," \u2014 "),_k=n(fCe,"A",{href:!0});var gOr=s(_k);BXe=r(gOr,"EncoderDecoderConfig"),gOr.forEach(t),IXe=r(fCe," (Encoder decoder model)"),fCe.forEach(t),qXe=i(y),Jf=n(y,"LI",{});var mCe=s(Jf);Coe=n(mCe,"STRONG",{});var hOr=s(Coe);NXe=r(hOr,"flaubert"),hOr.forEach(t),jXe=r(mCe," \u2014 "),uk=n(mCe,"A",{href:!0});var pOr=s(uk);DXe=r(pOr,"FlaubertConfig"),pOr.forEach(t),GXe=r(mCe," (FlauBERT model)"),mCe.forEach(t),OXe=i(y),Yf=n(y,"LI",{});var gCe=s(Yf);woe=n(gCe,"STRONG",{});var _Or=s(woe);VXe=r(_Or,"flava"),_Or.forEach(t),XXe=r(gCe," \u2014 "),bk=n(gCe,"A",{href:!0});var uOr=s(bk);zXe=r(uOr,"FlavaConfig"),uOr.forEach(t),WXe=r(gCe," (Flava model)"),gCe.forEach(t),QXe=i(y),Kf=n(y,"LI",{});var hCe=s(Kf);Aoe=n(hCe,"STRONG",{});var bOr=s(Aoe);HXe=r(bOr,"fnet"),bOr.forEach(t),UXe=r(hCe," \u2014 "),vk=n(hCe,"A",{href:!0});var vOr=s(vk);JXe=r(vOr,"FNetConfig"),vOr.forEach(t),YXe=r(hCe," (FNet model)"),hCe.forEach(t),KXe=i(y),Zf=n(y,"LI",{});var pCe=s(Zf);yoe=n(pCe,"STRONG",{});var FOr=s(yoe);ZXe=r(FOr,"fsmt"),FOr.forEach(t),eze=r(pCe," \u2014 "),Fk=n(pCe,"A",{href:!0});var TOr=s(Fk);oze=r(TOr,"FSMTConfig"),TOr.forEach(t),rze=r(pCe," (FairSeq Machine-Translation model)"),pCe.forEach(t),tze=i(y),em=n(y,"LI",{});var _Ce=s(em);Loe=n(_Ce,"STRONG",{});var MOr=s(Loe);aze=r(MOr,"funnel"),MOr.forEach(t),nze=r(_Ce," \u2014 "),Tk=n(_Ce,"A",{href:!0});var EOr=s(Tk);sze=r(EOr,"FunnelConfig"),EOr.forEach(t),lze=r(_Ce," (Funnel Transformer model)"),_Ce.forEach(t),ize=i(y),om=n(y,"LI",{});var uCe=s(om);xoe=n(uCe,"STRONG",{});var COr=s(xoe);dze=r(COr,"glpn"),COr.forEach(t),cze=r(uCe," \u2014 "),Mk=n(uCe,"A",{href:!0});var wOr=s(Mk);fze=r(wOr,"GLPNConfig"),wOr.forEach(t),mze=r(uCe," (GLPN model)"),uCe.forEach(t),gze=i(y),rm=n(y,"LI",{});var bCe=s(rm);$oe=n(bCe,"STRONG",{});var AOr=s($oe);hze=r(AOr,"gpt2"),AOr.forEach(t),pze=r(bCe," \u2014 "),Ek=n(bCe,"A",{href:!0});var yOr=s(Ek);_ze=r(yOr,"GPT2Config"),yOr.forEach(t),uze=r(bCe," (OpenAI GPT-2 model)"),bCe.forEach(t),bze=i(y),tm=n(y,"LI",{});var vCe=s(tm);koe=n(vCe,"STRONG",{});var LOr=s(koe);vze=r(LOr,"gpt_neo"),LOr.forEach(t),Fze=r(vCe," \u2014 "),Ck=n(vCe,"A",{href:!0});var xOr=s(Ck);Tze=r(xOr,"GPTNeoConfig"),xOr.forEach(t),Mze=r(vCe," (GPT Neo model)"),vCe.forEach(t),Eze=i(y),am=n(y,"LI",{});var FCe=s(am);Soe=n(FCe,"STRONG",{});var $Or=s(Soe);Cze=r($Or,"gptj"),$Or.forEach(t),wze=r(FCe," \u2014 "),wk=n(FCe,"A",{href:!0});var kOr=s(wk);Aze=r(kOr,"GPTJConfig"),kOr.forEach(t),yze=r(FCe," (GPT-J model)"),FCe.forEach(t),Lze=i(y),nm=n(y,"LI",{});var TCe=s(nm);Roe=n(TCe,"STRONG",{});var SOr=s(Roe);xze=r(SOr,"hubert"),SOr.forEach(t),$ze=r(TCe," \u2014 "),Ak=n(TCe,"A",{href:!0});var ROr=s(Ak);kze=r(ROr,"HubertConfig"),ROr.forEach(t),Sze=r(TCe," (Hubert model)"),TCe.forEach(t),Rze=i(y),sm=n(y,"LI",{});var MCe=s(sm);Poe=n(MCe,"STRONG",{});var POr=s(Poe);Pze=r(POr,"ibert"),POr.forEach(t),Bze=r(MCe," \u2014 "),yk=n(MCe,"A",{href:!0});var BOr=s(yk);Ize=r(BOr,"IBertConfig"),BOr.forEach(t),qze=r(MCe," (I-BERT model)"),MCe.forEach(t),Nze=i(y),lm=n(y,"LI",{});var ECe=s(lm);Boe=n(ECe,"STRONG",{});var IOr=s(Boe);jze=r(IOr,"imagegpt"),IOr.forEach(t),Dze=r(ECe," \u2014 "),Lk=n(ECe,"A",{href:!0});var qOr=s(Lk);Gze=r(qOr,"ImageGPTConfig"),qOr.forEach(t),Oze=r(ECe," (ImageGPT model)"),ECe.forEach(t),Vze=i(y),im=n(y,"LI",{});var CCe=s(im);Ioe=n(CCe,"STRONG",{});var NOr=s(Ioe);Xze=r(NOr,"layoutlm"),NOr.forEach(t),zze=r(CCe," \u2014 "),xk=n(CCe,"A",{href:!0});var jOr=s(xk);Wze=r(jOr,"LayoutLMConfig"),jOr.forEach(t),Qze=r(CCe," (LayoutLM model)"),CCe.forEach(t),Hze=i(y),dm=n(y,"LI",{});var wCe=s(dm);qoe=n(wCe,"STRONG",{});var DOr=s(qoe);Uze=r(DOr,"layoutlmv2"),DOr.forEach(t),Jze=r(wCe," \u2014 "),$k=n(wCe,"A",{href:!0});var GOr=s($k);Yze=r(GOr,"LayoutLMv2Config"),GOr.forEach(t),Kze=r(wCe," (LayoutLMv2 model)"),wCe.forEach(t),Zze=i(y),cm=n(y,"LI",{});var ACe=s(cm);Noe=n(ACe,"STRONG",{});var OOr=s(Noe);eWe=r(OOr,"led"),OOr.forEach(t),oWe=r(ACe," \u2014 "),kk=n(ACe,"A",{href:!0});var VOr=s(kk);rWe=r(VOr,"LEDConfig"),VOr.forEach(t),tWe=r(ACe," (LED model)"),ACe.forEach(t),aWe=i(y),fm=n(y,"LI",{});var yCe=s(fm);joe=n(yCe,"STRONG",{});var XOr=s(joe);nWe=r(XOr,"longformer"),XOr.forEach(t),sWe=r(yCe," \u2014 "),Sk=n(yCe,"A",{href:!0});var zOr=s(Sk);lWe=r(zOr,"LongformerConfig"),zOr.forEach(t),iWe=r(yCe," (Longformer model)"),yCe.forEach(t),dWe=i(y),mm=n(y,"LI",{});var LCe=s(mm);Doe=n(LCe,"STRONG",{});var WOr=s(Doe);cWe=r(WOr,"luke"),WOr.forEach(t),fWe=r(LCe," \u2014 "),Rk=n(LCe,"A",{href:!0});var QOr=s(Rk);mWe=r(QOr,"LukeConfig"),QOr.forEach(t),gWe=r(LCe," (LUKE model)"),LCe.forEach(t),hWe=i(y),gm=n(y,"LI",{});var xCe=s(gm);Goe=n(xCe,"STRONG",{});var HOr=s(Goe);pWe=r(HOr,"lxmert"),HOr.forEach(t),_We=r(xCe," \u2014 "),Pk=n(xCe,"A",{href:!0});var UOr=s(Pk);uWe=r(UOr,"LxmertConfig"),UOr.forEach(t),bWe=r(xCe," (LXMERT model)"),xCe.forEach(t),vWe=i(y),hm=n(y,"LI",{});var $Ce=s(hm);Ooe=n($Ce,"STRONG",{});var JOr=s(Ooe);FWe=r(JOr,"m2m_100"),JOr.forEach(t),TWe=r($Ce," \u2014 "),Bk=n($Ce,"A",{href:!0});var YOr=s(Bk);MWe=r(YOr,"M2M100Config"),YOr.forEach(t),EWe=r($Ce," (M2M100 model)"),$Ce.forEach(t),CWe=i(y),pm=n(y,"LI",{});var kCe=s(pm);Voe=n(kCe,"STRONG",{});var KOr=s(Voe);wWe=r(KOr,"marian"),KOr.forEach(t),AWe=r(kCe," \u2014 "),Ik=n(kCe,"A",{href:!0});var ZOr=s(Ik);yWe=r(ZOr,"MarianConfig"),ZOr.forEach(t),LWe=r(kCe," (Marian model)"),kCe.forEach(t),xWe=i(y),_m=n(y,"LI",{});var SCe=s(_m);Xoe=n(SCe,"STRONG",{});var eVr=s(Xoe);$We=r(eVr,"maskformer"),eVr.forEach(t),kWe=r(SCe," \u2014 "),qk=n(SCe,"A",{href:!0});var oVr=s(qk);SWe=r(oVr,"MaskFormerConfig"),oVr.forEach(t),RWe=r(SCe," (MaskFormer model)"),SCe.forEach(t),PWe=i(y),um=n(y,"LI",{});var RCe=s(um);zoe=n(RCe,"STRONG",{});var rVr=s(zoe);BWe=r(rVr,"mbart"),rVr.forEach(t),IWe=r(RCe," \u2014 "),Nk=n(RCe,"A",{href:!0});var tVr=s(Nk);qWe=r(tVr,"MBartConfig"),tVr.forEach(t),NWe=r(RCe," (mBART model)"),RCe.forEach(t),jWe=i(y),bm=n(y,"LI",{});var PCe=s(bm);Woe=n(PCe,"STRONG",{});var aVr=s(Woe);DWe=r(aVr,"megatron-bert"),aVr.forEach(t),GWe=r(PCe," \u2014 "),jk=n(PCe,"A",{href:!0});var nVr=s(jk);OWe=r(nVr,"MegatronBertConfig"),nVr.forEach(t),VWe=r(PCe," (MegatronBert model)"),PCe.forEach(t),XWe=i(y),vm=n(y,"LI",{});var BCe=s(vm);Qoe=n(BCe,"STRONG",{});var sVr=s(Qoe);zWe=r(sVr,"mobilebert"),sVr.forEach(t),WWe=r(BCe," \u2014 "),Dk=n(BCe,"A",{href:!0});var lVr=s(Dk);QWe=r(lVr,"MobileBertConfig"),lVr.forEach(t),HWe=r(BCe," (MobileBERT model)"),BCe.forEach(t),UWe=i(y),Fm=n(y,"LI",{});var ICe=s(Fm);Hoe=n(ICe,"STRONG",{});var iVr=s(Hoe);JWe=r(iVr,"mpnet"),iVr.forEach(t),YWe=r(ICe," \u2014 "),Gk=n(ICe,"A",{href:!0});var dVr=s(Gk);KWe=r(dVr,"MPNetConfig"),dVr.forEach(t),ZWe=r(ICe," (MPNet model)"),ICe.forEach(t),eQe=i(y),Tm=n(y,"LI",{});var qCe=s(Tm);Uoe=n(qCe,"STRONG",{});var cVr=s(Uoe);oQe=r(cVr,"mt5"),cVr.forEach(t),rQe=r(qCe," \u2014 "),Ok=n(qCe,"A",{href:!0});var fVr=s(Ok);tQe=r(fVr,"MT5Config"),fVr.forEach(t),aQe=r(qCe," (mT5 model)"),qCe.forEach(t),nQe=i(y),Mm=n(y,"LI",{});var NCe=s(Mm);Joe=n(NCe,"STRONG",{});var mVr=s(Joe);sQe=r(mVr,"nystromformer"),mVr.forEach(t),lQe=r(NCe," \u2014 "),Vk=n(NCe,"A",{href:!0});var gVr=s(Vk);iQe=r(gVr,"NystromformerConfig"),gVr.forEach(t),dQe=r(NCe," (Nystromformer model)"),NCe.forEach(t),cQe=i(y),Em=n(y,"LI",{});var jCe=s(Em);Yoe=n(jCe,"STRONG",{});var hVr=s(Yoe);fQe=r(hVr,"openai-gpt"),hVr.forEach(t),mQe=r(jCe," \u2014 "),Xk=n(jCe,"A",{href:!0});var pVr=s(Xk);gQe=r(pVr,"OpenAIGPTConfig"),pVr.forEach(t),hQe=r(jCe," (OpenAI GPT model)"),jCe.forEach(t),pQe=i(y),Cm=n(y,"LI",{});var DCe=s(Cm);Koe=n(DCe,"STRONG",{});var _Vr=s(Koe);_Qe=r(_Vr,"opt"),_Vr.forEach(t),uQe=r(DCe," \u2014 "),zk=n(DCe,"A",{href:!0});var uVr=s(zk);bQe=r(uVr,"OPTConfig"),uVr.forEach(t),vQe=r(DCe," (OPT model)"),DCe.forEach(t),FQe=i(y),wm=n(y,"LI",{});var GCe=s(wm);Zoe=n(GCe,"STRONG",{});var bVr=s(Zoe);TQe=r(bVr,"pegasus"),bVr.forEach(t),MQe=r(GCe," \u2014 "),Wk=n(GCe,"A",{href:!0});var vVr=s(Wk);EQe=r(vVr,"PegasusConfig"),vVr.forEach(t),CQe=r(GCe," (Pegasus model)"),GCe.forEach(t),wQe=i(y),Am=n(y,"LI",{});var OCe=s(Am);ere=n(OCe,"STRONG",{});var FVr=s(ere);AQe=r(FVr,"perceiver"),FVr.forEach(t),yQe=r(OCe," \u2014 "),Qk=n(OCe,"A",{href:!0});var TVr=s(Qk);LQe=r(TVr,"PerceiverConfig"),TVr.forEach(t),xQe=r(OCe," (Perceiver model)"),OCe.forEach(t),$Qe=i(y),ym=n(y,"LI",{});var VCe=s(ym);ore=n(VCe,"STRONG",{});var MVr=s(ore);kQe=r(MVr,"plbart"),MVr.forEach(t),SQe=r(VCe," \u2014 "),Hk=n(VCe,"A",{href:!0});var EVr=s(Hk);RQe=r(EVr,"PLBartConfig"),EVr.forEach(t),PQe=r(VCe," (PLBart model)"),VCe.forEach(t),BQe=i(y),Lm=n(y,"LI",{});var XCe=s(Lm);rre=n(XCe,"STRONG",{});var CVr=s(rre);IQe=r(CVr,"poolformer"),CVr.forEach(t),qQe=r(XCe," \u2014 "),Uk=n(XCe,"A",{href:!0});var wVr=s(Uk);NQe=r(wVr,"PoolFormerConfig"),wVr.forEach(t),jQe=r(XCe," (PoolFormer model)"),XCe.forEach(t),DQe=i(y),xm=n(y,"LI",{});var zCe=s(xm);tre=n(zCe,"STRONG",{});var AVr=s(tre);GQe=r(AVr,"prophetnet"),AVr.forEach(t),OQe=r(zCe," \u2014 "),Jk=n(zCe,"A",{href:!0});var yVr=s(Jk);VQe=r(yVr,"ProphetNetConfig"),yVr.forEach(t),XQe=r(zCe," (ProphetNet model)"),zCe.forEach(t),zQe=i(y),$m=n(y,"LI",{});var WCe=s($m);are=n(WCe,"STRONG",{});var LVr=s(are);WQe=r(LVr,"qdqbert"),LVr.forEach(t),QQe=r(WCe," \u2014 "),Yk=n(WCe,"A",{href:!0});var xVr=s(Yk);HQe=r(xVr,"QDQBertConfig"),xVr.forEach(t),UQe=r(WCe," (QDQBert model)"),WCe.forEach(t),JQe=i(y),km=n(y,"LI",{});var QCe=s(km);nre=n(QCe,"STRONG",{});var $Vr=s(nre);YQe=r($Vr,"rag"),$Vr.forEach(t),KQe=r(QCe," \u2014 "),Kk=n(QCe,"A",{href:!0});var kVr=s(Kk);ZQe=r(kVr,"RagConfig"),kVr.forEach(t),eHe=r(QCe," (RAG model)"),QCe.forEach(t),oHe=i(y),Sm=n(y,"LI",{});var HCe=s(Sm);sre=n(HCe,"STRONG",{});var SVr=s(sre);rHe=r(SVr,"realm"),SVr.forEach(t),tHe=r(HCe," \u2014 "),Zk=n(HCe,"A",{href:!0});var RVr=s(Zk);aHe=r(RVr,"RealmConfig"),RVr.forEach(t),nHe=r(HCe," (Realm model)"),HCe.forEach(t),sHe=i(y),Rm=n(y,"LI",{});var UCe=s(Rm);lre=n(UCe,"STRONG",{});var PVr=s(lre);lHe=r(PVr,"reformer"),PVr.forEach(t),iHe=r(UCe," \u2014 "),eS=n(UCe,"A",{href:!0});var BVr=s(eS);dHe=r(BVr,"ReformerConfig"),BVr.forEach(t),cHe=r(UCe," (Reformer model)"),UCe.forEach(t),fHe=i(y),Pm=n(y,"LI",{});var JCe=s(Pm);ire=n(JCe,"STRONG",{});var IVr=s(ire);mHe=r(IVr,"regnet"),IVr.forEach(t),gHe=r(JCe," \u2014 "),oS=n(JCe,"A",{href:!0});var qVr=s(oS);hHe=r(qVr,"RegNetConfig"),qVr.forEach(t),pHe=r(JCe," (RegNet model)"),JCe.forEach(t),_He=i(y),Bm=n(y,"LI",{});var YCe=s(Bm);dre=n(YCe,"STRONG",{});var NVr=s(dre);uHe=r(NVr,"rembert"),NVr.forEach(t),bHe=r(YCe," \u2014 "),rS=n(YCe,"A",{href:!0});var jVr=s(rS);vHe=r(jVr,"RemBertConfig"),jVr.forEach(t),FHe=r(YCe," (RemBERT model)"),YCe.forEach(t),THe=i(y),Im=n(y,"LI",{});var KCe=s(Im);cre=n(KCe,"STRONG",{});var DVr=s(cre);MHe=r(DVr,"resnet"),DVr.forEach(t),EHe=r(KCe," \u2014 "),tS=n(KCe,"A",{href:!0});var GVr=s(tS);CHe=r(GVr,"ResNetConfig"),GVr.forEach(t),wHe=r(KCe," (ResNet model)"),KCe.forEach(t),AHe=i(y),qm=n(y,"LI",{});var ZCe=s(qm);fre=n(ZCe,"STRONG",{});var OVr=s(fre);yHe=r(OVr,"retribert"),OVr.forEach(t),LHe=r(ZCe," \u2014 "),aS=n(ZCe,"A",{href:!0});var VVr=s(aS);xHe=r(VVr,"RetriBertConfig"),VVr.forEach(t),$He=r(ZCe," (RetriBERT model)"),ZCe.forEach(t),kHe=i(y),Nm=n(y,"LI",{});var e3e=s(Nm);mre=n(e3e,"STRONG",{});var XVr=s(mre);SHe=r(XVr,"roberta"),XVr.forEach(t),RHe=r(e3e," \u2014 "),nS=n(e3e,"A",{href:!0});var zVr=s(nS);PHe=r(zVr,"RobertaConfig"),zVr.forEach(t),BHe=r(e3e," (RoBERTa model)"),e3e.forEach(t),IHe=i(y),jm=n(y,"LI",{});var o3e=s(jm);gre=n(o3e,"STRONG",{});var WVr=s(gre);qHe=r(WVr,"roformer"),WVr.forEach(t),NHe=r(o3e," \u2014 "),sS=n(o3e,"A",{href:!0});var QVr=s(sS);jHe=r(QVr,"RoFormerConfig"),QVr.forEach(t),DHe=r(o3e," (RoFormer model)"),o3e.forEach(t),GHe=i(y),Dm=n(y,"LI",{});var r3e=s(Dm);hre=n(r3e,"STRONG",{});var HVr=s(hre);OHe=r(HVr,"segformer"),HVr.forEach(t),VHe=r(r3e," \u2014 "),lS=n(r3e,"A",{href:!0});var UVr=s(lS);XHe=r(UVr,"SegformerConfig"),UVr.forEach(t),zHe=r(r3e," (SegFormer model)"),r3e.forEach(t),WHe=i(y),Gm=n(y,"LI",{});var t3e=s(Gm);pre=n(t3e,"STRONG",{});var JVr=s(pre);QHe=r(JVr,"sew"),JVr.forEach(t),HHe=r(t3e," \u2014 "),iS=n(t3e,"A",{href:!0});var YVr=s(iS);UHe=r(YVr,"SEWConfig"),YVr.forEach(t),JHe=r(t3e," (SEW model)"),t3e.forEach(t),YHe=i(y),Om=n(y,"LI",{});var a3e=s(Om);_re=n(a3e,"STRONG",{});var KVr=s(_re);KHe=r(KVr,"sew-d"),KVr.forEach(t),ZHe=r(a3e," \u2014 "),dS=n(a3e,"A",{href:!0});var ZVr=s(dS);eUe=r(ZVr,"SEWDConfig"),ZVr.forEach(t),oUe=r(a3e," (SEW-D model)"),a3e.forEach(t),rUe=i(y),Vm=n(y,"LI",{});var n3e=s(Vm);ure=n(n3e,"STRONG",{});var eXr=s(ure);tUe=r(eXr,"speech-encoder-decoder"),eXr.forEach(t),aUe=r(n3e," \u2014 "),cS=n(n3e,"A",{href:!0});var oXr=s(cS);nUe=r(oXr,"SpeechEncoderDecoderConfig"),oXr.forEach(t),sUe=r(n3e," (Speech Encoder decoder model)"),n3e.forEach(t),lUe=i(y),Xm=n(y,"LI",{});var s3e=s(Xm);bre=n(s3e,"STRONG",{});var rXr=s(bre);iUe=r(rXr,"speech_to_text"),rXr.forEach(t),dUe=r(s3e," \u2014 "),fS=n(s3e,"A",{href:!0});var tXr=s(fS);cUe=r(tXr,"Speech2TextConfig"),tXr.forEach(t),fUe=r(s3e," (Speech2Text model)"),s3e.forEach(t),mUe=i(y),zm=n(y,"LI",{});var l3e=s(zm);vre=n(l3e,"STRONG",{});var aXr=s(vre);gUe=r(aXr,"speech_to_text_2"),aXr.forEach(t),hUe=r(l3e," \u2014 "),mS=n(l3e,"A",{href:!0});var nXr=s(mS);pUe=r(nXr,"Speech2Text2Config"),nXr.forEach(t),_Ue=r(l3e," (Speech2Text2 model)"),l3e.forEach(t),uUe=i(y),Wm=n(y,"LI",{});var i3e=s(Wm);Fre=n(i3e,"STRONG",{});var sXr=s(Fre);bUe=r(sXr,"splinter"),sXr.forEach(t),vUe=r(i3e," \u2014 "),gS=n(i3e,"A",{href:!0});var lXr=s(gS);FUe=r(lXr,"SplinterConfig"),lXr.forEach(t),TUe=r(i3e," (Splinter model)"),i3e.forEach(t),MUe=i(y),Qm=n(y,"LI",{});var d3e=s(Qm);Tre=n(d3e,"STRONG",{});var iXr=s(Tre);EUe=r(iXr,"squeezebert"),iXr.forEach(t),CUe=r(d3e," \u2014 "),hS=n(d3e,"A",{href:!0});var dXr=s(hS);wUe=r(dXr,"SqueezeBertConfig"),dXr.forEach(t),AUe=r(d3e," (SqueezeBERT model)"),d3e.forEach(t),yUe=i(y),Hm=n(y,"LI",{});var c3e=s(Hm);Mre=n(c3e,"STRONG",{});var cXr=s(Mre);LUe=r(cXr,"swin"),cXr.forEach(t),xUe=r(c3e," \u2014 "),pS=n(c3e,"A",{href:!0});var fXr=s(pS);$Ue=r(fXr,"SwinConfig"),fXr.forEach(t),kUe=r(c3e," (Swin model)"),c3e.forEach(t),SUe=i(y),Um=n(y,"LI",{});var f3e=s(Um);Ere=n(f3e,"STRONG",{});var mXr=s(Ere);RUe=r(mXr,"t5"),mXr.forEach(t),PUe=r(f3e," \u2014 "),_S=n(f3e,"A",{href:!0});var gXr=s(_S);BUe=r(gXr,"T5Config"),gXr.forEach(t),IUe=r(f3e," (T5 model)"),f3e.forEach(t),qUe=i(y),Jm=n(y,"LI",{});var m3e=s(Jm);Cre=n(m3e,"STRONG",{});var hXr=s(Cre);NUe=r(hXr,"tapas"),hXr.forEach(t),jUe=r(m3e," \u2014 "),uS=n(m3e,"A",{href:!0});var pXr=s(uS);DUe=r(pXr,"TapasConfig"),pXr.forEach(t),GUe=r(m3e," (TAPAS model)"),m3e.forEach(t),OUe=i(y),Ym=n(y,"LI",{});var g3e=s(Ym);wre=n(g3e,"STRONG",{});var _Xr=s(wre);VUe=r(_Xr,"trajectory_transformer"),_Xr.forEach(t),XUe=r(g3e," \u2014 "),bS=n(g3e,"A",{href:!0});var uXr=s(bS);zUe=r(uXr,"TrajectoryTransformerConfig"),uXr.forEach(t),WUe=r(g3e," (Trajectory Transformer model)"),g3e.forEach(t),QUe=i(y),Km=n(y,"LI",{});var h3e=s(Km);Are=n(h3e,"STRONG",{});var bXr=s(Are);HUe=r(bXr,"transfo-xl"),bXr.forEach(t),UUe=r(h3e," \u2014 "),vS=n(h3e,"A",{href:!0});var vXr=s(vS);JUe=r(vXr,"TransfoXLConfig"),vXr.forEach(t),YUe=r(h3e," (Transformer-XL model)"),h3e.forEach(t),KUe=i(y),Zm=n(y,"LI",{});var p3e=s(Zm);yre=n(p3e,"STRONG",{});var FXr=s(yre);ZUe=r(FXr,"trocr"),FXr.forEach(t),eJe=r(p3e," \u2014 "),FS=n(p3e,"A",{href:!0});var TXr=s(FS);oJe=r(TXr,"TrOCRConfig"),TXr.forEach(t),rJe=r(p3e," (TrOCR model)"),p3e.forEach(t),tJe=i(y),eg=n(y,"LI",{});var _3e=s(eg);Lre=n(_3e,"STRONG",{});var MXr=s(Lre);aJe=r(MXr,"unispeech"),MXr.forEach(t),nJe=r(_3e," \u2014 "),TS=n(_3e,"A",{href:!0});var EXr=s(TS);sJe=r(EXr,"UniSpeechConfig"),EXr.forEach(t),lJe=r(_3e," (UniSpeech model)"),_3e.forEach(t),iJe=i(y),og=n(y,"LI",{});var u3e=s(og);xre=n(u3e,"STRONG",{});var CXr=s(xre);dJe=r(CXr,"unispeech-sat"),CXr.forEach(t),cJe=r(u3e," \u2014 "),MS=n(u3e,"A",{href:!0});var wXr=s(MS);fJe=r(wXr,"UniSpeechSatConfig"),wXr.forEach(t),mJe=r(u3e," (UniSpeechSat model)"),u3e.forEach(t),gJe=i(y),rg=n(y,"LI",{});var b3e=s(rg);$re=n(b3e,"STRONG",{});var AXr=s($re);hJe=r(AXr,"van"),AXr.forEach(t),pJe=r(b3e," \u2014 "),ES=n(b3e,"A",{href:!0});var yXr=s(ES);_Je=r(yXr,"VanConfig"),yXr.forEach(t),uJe=r(b3e," (VAN model)"),b3e.forEach(t),bJe=i(y),tg=n(y,"LI",{});var v3e=s(tg);kre=n(v3e,"STRONG",{});var LXr=s(kre);vJe=r(LXr,"vilt"),LXr.forEach(t),FJe=r(v3e," \u2014 "),CS=n(v3e,"A",{href:!0});var xXr=s(CS);TJe=r(xXr,"ViltConfig"),xXr.forEach(t),MJe=r(v3e," (ViLT model)"),v3e.forEach(t),EJe=i(y),ag=n(y,"LI",{});var F3e=s(ag);Sre=n(F3e,"STRONG",{});var $Xr=s(Sre);CJe=r($Xr,"vision-encoder-decoder"),$Xr.forEach(t),wJe=r(F3e," \u2014 "),wS=n(F3e,"A",{href:!0});var kXr=s(wS);AJe=r(kXr,"VisionEncoderDecoderConfig"),kXr.forEach(t),yJe=r(F3e," (Vision Encoder decoder model)"),F3e.forEach(t),LJe=i(y),ng=n(y,"LI",{});var T3e=s(ng);Rre=n(T3e,"STRONG",{});var SXr=s(Rre);xJe=r(SXr,"vision-text-dual-encoder"),SXr.forEach(t),$Je=r(T3e," \u2014 "),AS=n(T3e,"A",{href:!0});var RXr=s(AS);kJe=r(RXr,"VisionTextDualEncoderConfig"),RXr.forEach(t),SJe=r(T3e," (VisionTextDualEncoder model)"),T3e.forEach(t),RJe=i(y),sg=n(y,"LI",{});var M3e=s(sg);Pre=n(M3e,"STRONG",{});var PXr=s(Pre);PJe=r(PXr,"visual_bert"),PXr.forEach(t),BJe=r(M3e," \u2014 "),yS=n(M3e,"A",{href:!0});var BXr=s(yS);IJe=r(BXr,"VisualBertConfig"),BXr.forEach(t),qJe=r(M3e," (VisualBert model)"),M3e.forEach(t),NJe=i(y),lg=n(y,"LI",{});var E3e=s(lg);Bre=n(E3e,"STRONG",{});var IXr=s(Bre);jJe=r(IXr,"vit"),IXr.forEach(t),DJe=r(E3e," \u2014 "),LS=n(E3e,"A",{href:!0});var qXr=s(LS);GJe=r(qXr,"ViTConfig"),qXr.forEach(t),OJe=r(E3e," (ViT model)"),E3e.forEach(t),VJe=i(y),ig=n(y,"LI",{});var C3e=s(ig);Ire=n(C3e,"STRONG",{});var NXr=s(Ire);XJe=r(NXr,"vit_mae"),NXr.forEach(t),zJe=r(C3e," \u2014 "),xS=n(C3e,"A",{href:!0});var jXr=s(xS);WJe=r(jXr,"ViTMAEConfig"),jXr.forEach(t),QJe=r(C3e," (ViTMAE model)"),C3e.forEach(t),HJe=i(y),dg=n(y,"LI",{});var w3e=s(dg);qre=n(w3e,"STRONG",{});var DXr=s(qre);UJe=r(DXr,"wav2vec2"),DXr.forEach(t),JJe=r(w3e," \u2014 "),$S=n(w3e,"A",{href:!0});var GXr=s($S);YJe=r(GXr,"Wav2Vec2Config"),GXr.forEach(t),KJe=r(w3e," (Wav2Vec2 model)"),w3e.forEach(t),ZJe=i(y),cg=n(y,"LI",{});var A3e=s(cg);Nre=n(A3e,"STRONG",{});var OXr=s(Nre);eYe=r(OXr,"wav2vec2-conformer"),OXr.forEach(t),oYe=r(A3e," \u2014 "),kS=n(A3e,"A",{href:!0});var VXr=s(kS);rYe=r(VXr,"Wav2Vec2ConformerConfig"),VXr.forEach(t),tYe=r(A3e," (Wav2Vec2-Conformer model)"),A3e.forEach(t),aYe=i(y),fg=n(y,"LI",{});var y3e=s(fg);jre=n(y3e,"STRONG",{});var XXr=s(jre);nYe=r(XXr,"wavlm"),XXr.forEach(t),sYe=r(y3e," \u2014 "),SS=n(y3e,"A",{href:!0});var zXr=s(SS);lYe=r(zXr,"WavLMConfig"),zXr.forEach(t),iYe=r(y3e," (WavLM model)"),y3e.forEach(t),dYe=i(y),mg=n(y,"LI",{});var L3e=s(mg);Dre=n(L3e,"STRONG",{});var WXr=s(Dre);cYe=r(WXr,"xglm"),WXr.forEach(t),fYe=r(L3e," \u2014 "),RS=n(L3e,"A",{href:!0});var QXr=s(RS);mYe=r(QXr,"XGLMConfig"),QXr.forEach(t),gYe=r(L3e," (XGLM model)"),L3e.forEach(t),hYe=i(y),gg=n(y,"LI",{});var x3e=s(gg);Gre=n(x3e,"STRONG",{});var HXr=s(Gre);pYe=r(HXr,"xlm"),HXr.forEach(t),_Ye=r(x3e," \u2014 "),PS=n(x3e,"A",{href:!0});var UXr=s(PS);uYe=r(UXr,"XLMConfig"),UXr.forEach(t),bYe=r(x3e," (XLM model)"),x3e.forEach(t),vYe=i(y),hg=n(y,"LI",{});var $3e=s(hg);Ore=n($3e,"STRONG",{});var JXr=s(Ore);FYe=r(JXr,"xlm-prophetnet"),JXr.forEach(t),TYe=r($3e," \u2014 "),BS=n($3e,"A",{href:!0});var YXr=s(BS);MYe=r(YXr,"XLMProphetNetConfig"),YXr.forEach(t),EYe=r($3e," (XLMProphetNet model)"),$3e.forEach(t),CYe=i(y),pg=n(y,"LI",{});var k3e=s(pg);Vre=n(k3e,"STRONG",{});var KXr=s(Vre);wYe=r(KXr,"xlm-roberta"),KXr.forEach(t),AYe=r(k3e," \u2014 "),IS=n(k3e,"A",{href:!0});var ZXr=s(IS);yYe=r(ZXr,"XLMRobertaConfig"),ZXr.forEach(t),LYe=r(k3e," (XLM-RoBERTa model)"),k3e.forEach(t),xYe=i(y),_g=n(y,"LI",{});var S3e=s(_g);Xre=n(S3e,"STRONG",{});var ezr=s(Xre);$Ye=r(ezr,"xlm-roberta-xl"),ezr.forEach(t),kYe=r(S3e," \u2014 "),qS=n(S3e,"A",{href:!0});var ozr=s(qS);SYe=r(ozr,"XLMRobertaXLConfig"),ozr.forEach(t),RYe=r(S3e," (XLM-RoBERTa-XL model)"),S3e.forEach(t),PYe=i(y),ug=n(y,"LI",{});var R3e=s(ug);zre=n(R3e,"STRONG",{});var rzr=s(zre);BYe=r(rzr,"xlnet"),rzr.forEach(t),IYe=r(R3e," \u2014 "),NS=n(R3e,"A",{href:!0});var tzr=s(NS);qYe=r(tzr,"XLNetConfig"),tzr.forEach(t),NYe=r(R3e," (XLNet model)"),R3e.forEach(t),jYe=i(y),bg=n(y,"LI",{});var P3e=s(bg);Wre=n(P3e,"STRONG",{});var azr=s(Wre);DYe=r(azr,"yolos"),azr.forEach(t),GYe=r(P3e," \u2014 "),jS=n(P3e,"A",{href:!0});var nzr=s(jS);OYe=r(nzr,"YolosConfig"),nzr.forEach(t),VYe=r(P3e," (YOLOS model)"),P3e.forEach(t),XYe=i(y),vg=n(y,"LI",{});var B3e=s(vg);Qre=n(B3e,"STRONG",{});var szr=s(Qre);zYe=r(szr,"yoso"),szr.forEach(t),WYe=r(B3e," \u2014 "),DS=n(B3e,"A",{href:!0});var lzr=s(DS);QYe=r(lzr,"YosoConfig"),lzr.forEach(t),HYe=r(B3e," (YOSO model)"),B3e.forEach(t),y.forEach(t),UYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),JYe=i(et),Tg=n(et,"DIV",{class:!0});var vje=s(Tg);T(wA.$$.fragment,vje),YYe=i(vje),Hre=n(vje,"P",{});var izr=s(Hre);KYe=r(izr,"Register a new configuration for this class."),izr.forEach(t),vje.forEach(t),et.forEach(t),Mqe=i(f),Fi=n(f,"H2",{class:!0});var Fje=s(Fi);Mg=n(Fje,"A",{id:!0,class:!0,href:!0});var dzr=s(Mg);Ure=n(dzr,"SPAN",{});var czr=s(Ure);T(AA.$$.fragment,czr),czr.forEach(t),dzr.forEach(t),ZYe=i(Fje),Jre=n(Fje,"SPAN",{});var fzr=s(Jre);eKe=r(fzr,"AutoTokenizer"),fzr.forEach(t),Fje.forEach(t),Eqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(yA.$$.fragment,Is),oKe=i(Is),LA=n(Is,"P",{});var Tje=s(LA);rKe=r(Tje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),GS=n(Tje,"A",{href:!0});var mzr=s(GS);tKe=r(mzr,"AutoTokenizer.from_pretrained()"),mzr.forEach(t),aKe=r(Tje," class method."),Tje.forEach(t),nKe=i(Is),xA=n(Is,"P",{});var Mje=s(xA);sKe=r(Mje,"This class cannot be instantiated directly using "),Yre=n(Mje,"CODE",{});var gzr=s(Yre);lKe=r(gzr,"__init__()"),gzr.forEach(t),iKe=r(Mje," (throws an error)."),Mje.forEach(t),dKe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T($A.$$.fragment,qs),cKe=i(qs),Kre=n(qs,"P",{});var hzr=s(Kre);fKe=r(hzr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hzr.forEach(t),mKe=i(qs),Aa=n(qs,"P",{});var Fw=s(Aa);gKe=r(Fw,"The tokenizer class to instantiate is selected based on the "),Zre=n(Fw,"CODE",{});var pzr=s(Zre);hKe=r(pzr,"model_type"),pzr.forEach(t),pKe=r(Fw,` property of the config object (either
passed as an argument or loaded from `),ete=n(Fw,"CODE",{});var _zr=s(ete);_Ke=r(_zr,"pretrained_model_name_or_path"),_zr.forEach(t),uKe=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ote=n(Fw,"CODE",{});var uzr=s(ote);bKe=r(uzr,"pretrained_model_name_or_path"),uzr.forEach(t),vKe=r(Fw,":"),Fw.forEach(t),FKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var kx=s(Sn);rte=n(kx,"STRONG",{});var bzr=s(rte);TKe=r(bzr,"albert"),bzr.forEach(t),MKe=r(kx," \u2014 "),OS=n(kx,"A",{href:!0});var vzr=s(OS);EKe=r(vzr,"AlbertTokenizer"),vzr.forEach(t),CKe=r(kx," or "),VS=n(kx,"A",{href:!0});var Fzr=s(VS);wKe=r(Fzr,"AlbertTokenizerFast"),Fzr.forEach(t),AKe=r(kx," (ALBERT model)"),kx.forEach(t),yKe=i(S),Rn=n(S,"LI",{});var Sx=s(Rn);tte=n(Sx,"STRONG",{});var Tzr=s(tte);LKe=r(Tzr,"bart"),Tzr.forEach(t),xKe=r(Sx," \u2014 "),XS=n(Sx,"A",{href:!0});var Mzr=s(XS);$Ke=r(Mzr,"BartTokenizer"),Mzr.forEach(t),kKe=r(Sx," or "),zS=n(Sx,"A",{href:!0});var Ezr=s(zS);SKe=r(Ezr,"BartTokenizerFast"),Ezr.forEach(t),RKe=r(Sx," (BART model)"),Sx.forEach(t),PKe=i(S),Pn=n(S,"LI",{});var Rx=s(Pn);ate=n(Rx,"STRONG",{});var Czr=s(ate);BKe=r(Czr,"barthez"),Czr.forEach(t),IKe=r(Rx," \u2014 "),WS=n(Rx,"A",{href:!0});var wzr=s(WS);qKe=r(wzr,"BarthezTokenizer"),wzr.forEach(t),NKe=r(Rx," or "),QS=n(Rx,"A",{href:!0});var Azr=s(QS);jKe=r(Azr,"BarthezTokenizerFast"),Azr.forEach(t),DKe=r(Rx," (BARThez model)"),Rx.forEach(t),GKe=i(S),Eg=n(S,"LI",{});var I3e=s(Eg);nte=n(I3e,"STRONG",{});var yzr=s(nte);OKe=r(yzr,"bartpho"),yzr.forEach(t),VKe=r(I3e," \u2014 "),HS=n(I3e,"A",{href:!0});var Lzr=s(HS);XKe=r(Lzr,"BartphoTokenizer"),Lzr.forEach(t),zKe=r(I3e," (BARTpho model)"),I3e.forEach(t),WKe=i(S),Bn=n(S,"LI",{});var Px=s(Bn);ste=n(Px,"STRONG",{});var xzr=s(ste);QKe=r(xzr,"bert"),xzr.forEach(t),HKe=r(Px," \u2014 "),US=n(Px,"A",{href:!0});var $zr=s(US);UKe=r($zr,"BertTokenizer"),$zr.forEach(t),JKe=r(Px," or "),JS=n(Px,"A",{href:!0});var kzr=s(JS);YKe=r(kzr,"BertTokenizerFast"),kzr.forEach(t),KKe=r(Px," (BERT model)"),Px.forEach(t),ZKe=i(S),Cg=n(S,"LI",{});var q3e=s(Cg);lte=n(q3e,"STRONG",{});var Szr=s(lte);eZe=r(Szr,"bert-generation"),Szr.forEach(t),oZe=r(q3e," \u2014 "),YS=n(q3e,"A",{href:!0});var Rzr=s(YS);rZe=r(Rzr,"BertGenerationTokenizer"),Rzr.forEach(t),tZe=r(q3e," (Bert Generation model)"),q3e.forEach(t),aZe=i(S),wg=n(S,"LI",{});var N3e=s(wg);ite=n(N3e,"STRONG",{});var Pzr=s(ite);nZe=r(Pzr,"bert-japanese"),Pzr.forEach(t),sZe=r(N3e," \u2014 "),KS=n(N3e,"A",{href:!0});var Bzr=s(KS);lZe=r(Bzr,"BertJapaneseTokenizer"),Bzr.forEach(t),iZe=r(N3e," (BertJapanese model)"),N3e.forEach(t),dZe=i(S),Ag=n(S,"LI",{});var j3e=s(Ag);dte=n(j3e,"STRONG",{});var Izr=s(dte);cZe=r(Izr,"bertweet"),Izr.forEach(t),fZe=r(j3e," \u2014 "),ZS=n(j3e,"A",{href:!0});var qzr=s(ZS);mZe=r(qzr,"BertweetTokenizer"),qzr.forEach(t),gZe=r(j3e," (Bertweet model)"),j3e.forEach(t),hZe=i(S),In=n(S,"LI",{});var Bx=s(In);cte=n(Bx,"STRONG",{});var Nzr=s(cte);pZe=r(Nzr,"big_bird"),Nzr.forEach(t),_Ze=r(Bx," \u2014 "),eR=n(Bx,"A",{href:!0});var jzr=s(eR);uZe=r(jzr,"BigBirdTokenizer"),jzr.forEach(t),bZe=r(Bx," or "),oR=n(Bx,"A",{href:!0});var Dzr=s(oR);vZe=r(Dzr,"BigBirdTokenizerFast"),Dzr.forEach(t),FZe=r(Bx," (BigBird model)"),Bx.forEach(t),TZe=i(S),qn=n(S,"LI",{});var Ix=s(qn);fte=n(Ix,"STRONG",{});var Gzr=s(fte);MZe=r(Gzr,"bigbird_pegasus"),Gzr.forEach(t),EZe=r(Ix," \u2014 "),rR=n(Ix,"A",{href:!0});var Ozr=s(rR);CZe=r(Ozr,"PegasusTokenizer"),Ozr.forEach(t),wZe=r(Ix," or "),tR=n(Ix,"A",{href:!0});var Vzr=s(tR);AZe=r(Vzr,"PegasusTokenizerFast"),Vzr.forEach(t),yZe=r(Ix," (BigBirdPegasus model)"),Ix.forEach(t),LZe=i(S),Nn=n(S,"LI",{});var qx=s(Nn);mte=n(qx,"STRONG",{});var Xzr=s(mte);xZe=r(Xzr,"blenderbot"),Xzr.forEach(t),$Ze=r(qx," \u2014 "),aR=n(qx,"A",{href:!0});var zzr=s(aR);kZe=r(zzr,"BlenderbotTokenizer"),zzr.forEach(t),SZe=r(qx," or "),nR=n(qx,"A",{href:!0});var Wzr=s(nR);RZe=r(Wzr,"BlenderbotTokenizerFast"),Wzr.forEach(t),PZe=r(qx," (Blenderbot model)"),qx.forEach(t),BZe=i(S),yg=n(S,"LI",{});var D3e=s(yg);gte=n(D3e,"STRONG",{});var Qzr=s(gte);IZe=r(Qzr,"blenderbot-small"),Qzr.forEach(t),qZe=r(D3e," \u2014 "),sR=n(D3e,"A",{href:!0});var Hzr=s(sR);NZe=r(Hzr,"BlenderbotSmallTokenizer"),Hzr.forEach(t),jZe=r(D3e," (BlenderbotSmall model)"),D3e.forEach(t),DZe=i(S),Lg=n(S,"LI",{});var G3e=s(Lg);hte=n(G3e,"STRONG",{});var Uzr=s(hte);GZe=r(Uzr,"byt5"),Uzr.forEach(t),OZe=r(G3e," \u2014 "),lR=n(G3e,"A",{href:!0});var Jzr=s(lR);VZe=r(Jzr,"ByT5Tokenizer"),Jzr.forEach(t),XZe=r(G3e," (ByT5 model)"),G3e.forEach(t),zZe=i(S),jn=n(S,"LI",{});var Nx=s(jn);pte=n(Nx,"STRONG",{});var Yzr=s(pte);WZe=r(Yzr,"camembert"),Yzr.forEach(t),QZe=r(Nx," \u2014 "),iR=n(Nx,"A",{href:!0});var Kzr=s(iR);HZe=r(Kzr,"CamembertTokenizer"),Kzr.forEach(t),UZe=r(Nx," or "),dR=n(Nx,"A",{href:!0});var Zzr=s(dR);JZe=r(Zzr,"CamembertTokenizerFast"),Zzr.forEach(t),YZe=r(Nx," (CamemBERT model)"),Nx.forEach(t),KZe=i(S),xg=n(S,"LI",{});var O3e=s(xg);_te=n(O3e,"STRONG",{});var eWr=s(_te);ZZe=r(eWr,"canine"),eWr.forEach(t),eeo=r(O3e," \u2014 "),cR=n(O3e,"A",{href:!0});var oWr=s(cR);oeo=r(oWr,"CanineTokenizer"),oWr.forEach(t),reo=r(O3e," (Canine model)"),O3e.forEach(t),teo=i(S),Dn=n(S,"LI",{});var jx=s(Dn);ute=n(jx,"STRONG",{});var rWr=s(ute);aeo=r(rWr,"clip"),rWr.forEach(t),neo=r(jx," \u2014 "),fR=n(jx,"A",{href:!0});var tWr=s(fR);seo=r(tWr,"CLIPTokenizer"),tWr.forEach(t),leo=r(jx," or "),mR=n(jx,"A",{href:!0});var aWr=s(mR);ieo=r(aWr,"CLIPTokenizerFast"),aWr.forEach(t),deo=r(jx," (CLIP model)"),jx.forEach(t),ceo=i(S),Gn=n(S,"LI",{});var Dx=s(Gn);bte=n(Dx,"STRONG",{});var nWr=s(bte);feo=r(nWr,"convbert"),nWr.forEach(t),meo=r(Dx," \u2014 "),gR=n(Dx,"A",{href:!0});var sWr=s(gR);geo=r(sWr,"ConvBertTokenizer"),sWr.forEach(t),heo=r(Dx," or "),hR=n(Dx,"A",{href:!0});var lWr=s(hR);peo=r(lWr,"ConvBertTokenizerFast"),lWr.forEach(t),_eo=r(Dx," (ConvBERT model)"),Dx.forEach(t),ueo=i(S),On=n(S,"LI",{});var Gx=s(On);vte=n(Gx,"STRONG",{});var iWr=s(vte);beo=r(iWr,"cpm"),iWr.forEach(t),veo=r(Gx," \u2014 "),pR=n(Gx,"A",{href:!0});var dWr=s(pR);Feo=r(dWr,"CpmTokenizer"),dWr.forEach(t),Teo=r(Gx," or "),_R=n(Gx,"A",{href:!0});var cWr=s(_R);Meo=r(cWr,"CpmTokenizerFast"),cWr.forEach(t),Eeo=r(Gx," (CPM model)"),Gx.forEach(t),Ceo=i(S),$g=n(S,"LI",{});var V3e=s($g);Fte=n(V3e,"STRONG",{});var fWr=s(Fte);weo=r(fWr,"ctrl"),fWr.forEach(t),Aeo=r(V3e," \u2014 "),uR=n(V3e,"A",{href:!0});var mWr=s(uR);yeo=r(mWr,"CTRLTokenizer"),mWr.forEach(t),Leo=r(V3e," (CTRL model)"),V3e.forEach(t),xeo=i(S),Vn=n(S,"LI",{});var Ox=s(Vn);Tte=n(Ox,"STRONG",{});var gWr=s(Tte);$eo=r(gWr,"data2vec-text"),gWr.forEach(t),keo=r(Ox," \u2014 "),bR=n(Ox,"A",{href:!0});var hWr=s(bR);Seo=r(hWr,"RobertaTokenizer"),hWr.forEach(t),Reo=r(Ox," or "),vR=n(Ox,"A",{href:!0});var pWr=s(vR);Peo=r(pWr,"RobertaTokenizerFast"),pWr.forEach(t),Beo=r(Ox," (Data2VecText model)"),Ox.forEach(t),Ieo=i(S),Xn=n(S,"LI",{});var Vx=s(Xn);Mte=n(Vx,"STRONG",{});var _Wr=s(Mte);qeo=r(_Wr,"deberta"),_Wr.forEach(t),Neo=r(Vx," \u2014 "),FR=n(Vx,"A",{href:!0});var uWr=s(FR);jeo=r(uWr,"DebertaTokenizer"),uWr.forEach(t),Deo=r(Vx," or "),TR=n(Vx,"A",{href:!0});var bWr=s(TR);Geo=r(bWr,"DebertaTokenizerFast"),bWr.forEach(t),Oeo=r(Vx," (DeBERTa model)"),Vx.forEach(t),Veo=i(S),zn=n(S,"LI",{});var Xx=s(zn);Ete=n(Xx,"STRONG",{});var vWr=s(Ete);Xeo=r(vWr,"deberta-v2"),vWr.forEach(t),zeo=r(Xx," \u2014 "),MR=n(Xx,"A",{href:!0});var FWr=s(MR);Weo=r(FWr,"DebertaV2Tokenizer"),FWr.forEach(t),Qeo=r(Xx," or "),ER=n(Xx,"A",{href:!0});var TWr=s(ER);Heo=r(TWr,"DebertaV2TokenizerFast"),TWr.forEach(t),Ueo=r(Xx," (DeBERTa-v2 model)"),Xx.forEach(t),Jeo=i(S),Wn=n(S,"LI",{});var zx=s(Wn);Cte=n(zx,"STRONG",{});var MWr=s(Cte);Yeo=r(MWr,"distilbert"),MWr.forEach(t),Keo=r(zx," \u2014 "),CR=n(zx,"A",{href:!0});var EWr=s(CR);Zeo=r(EWr,"DistilBertTokenizer"),EWr.forEach(t),eoo=r(zx," or "),wR=n(zx,"A",{href:!0});var CWr=s(wR);ooo=r(CWr,"DistilBertTokenizerFast"),CWr.forEach(t),roo=r(zx," (DistilBERT model)"),zx.forEach(t),too=i(S),Qn=n(S,"LI",{});var Wx=s(Qn);wte=n(Wx,"STRONG",{});var wWr=s(wte);aoo=r(wWr,"dpr"),wWr.forEach(t),noo=r(Wx," \u2014 "),AR=n(Wx,"A",{href:!0});var AWr=s(AR);soo=r(AWr,"DPRQuestionEncoderTokenizer"),AWr.forEach(t),loo=r(Wx," or "),yR=n(Wx,"A",{href:!0});var yWr=s(yR);ioo=r(yWr,"DPRQuestionEncoderTokenizerFast"),yWr.forEach(t),doo=r(Wx," (DPR model)"),Wx.forEach(t),coo=i(S),Hn=n(S,"LI",{});var Qx=s(Hn);Ate=n(Qx,"STRONG",{});var LWr=s(Ate);foo=r(LWr,"electra"),LWr.forEach(t),moo=r(Qx," \u2014 "),LR=n(Qx,"A",{href:!0});var xWr=s(LR);goo=r(xWr,"ElectraTokenizer"),xWr.forEach(t),hoo=r(Qx," or "),xR=n(Qx,"A",{href:!0});var $Wr=s(xR);poo=r($Wr,"ElectraTokenizerFast"),$Wr.forEach(t),_oo=r(Qx," (ELECTRA model)"),Qx.forEach(t),uoo=i(S),kg=n(S,"LI",{});var X3e=s(kg);yte=n(X3e,"STRONG",{});var kWr=s(yte);boo=r(kWr,"flaubert"),kWr.forEach(t),voo=r(X3e," \u2014 "),$R=n(X3e,"A",{href:!0});var SWr=s($R);Foo=r(SWr,"FlaubertTokenizer"),SWr.forEach(t),Too=r(X3e," (FlauBERT model)"),X3e.forEach(t),Moo=i(S),Un=n(S,"LI",{});var Hx=s(Un);Lte=n(Hx,"STRONG",{});var RWr=s(Lte);Eoo=r(RWr,"fnet"),RWr.forEach(t),Coo=r(Hx," \u2014 "),kR=n(Hx,"A",{href:!0});var PWr=s(kR);woo=r(PWr,"FNetTokenizer"),PWr.forEach(t),Aoo=r(Hx," or "),SR=n(Hx,"A",{href:!0});var BWr=s(SR);yoo=r(BWr,"FNetTokenizerFast"),BWr.forEach(t),Loo=r(Hx," (FNet model)"),Hx.forEach(t),xoo=i(S),Sg=n(S,"LI",{});var z3e=s(Sg);xte=n(z3e,"STRONG",{});var IWr=s(xte);$oo=r(IWr,"fsmt"),IWr.forEach(t),koo=r(z3e," \u2014 "),RR=n(z3e,"A",{href:!0});var qWr=s(RR);Soo=r(qWr,"FSMTTokenizer"),qWr.forEach(t),Roo=r(z3e," (FairSeq Machine-Translation model)"),z3e.forEach(t),Poo=i(S),Jn=n(S,"LI",{});var Ux=s(Jn);$te=n(Ux,"STRONG",{});var NWr=s($te);Boo=r(NWr,"funnel"),NWr.forEach(t),Ioo=r(Ux," \u2014 "),PR=n(Ux,"A",{href:!0});var jWr=s(PR);qoo=r(jWr,"FunnelTokenizer"),jWr.forEach(t),Noo=r(Ux," or "),BR=n(Ux,"A",{href:!0});var DWr=s(BR);joo=r(DWr,"FunnelTokenizerFast"),DWr.forEach(t),Doo=r(Ux," (Funnel Transformer model)"),Ux.forEach(t),Goo=i(S),Yn=n(S,"LI",{});var Jx=s(Yn);kte=n(Jx,"STRONG",{});var GWr=s(kte);Ooo=r(GWr,"gpt2"),GWr.forEach(t),Voo=r(Jx," \u2014 "),IR=n(Jx,"A",{href:!0});var OWr=s(IR);Xoo=r(OWr,"GPT2Tokenizer"),OWr.forEach(t),zoo=r(Jx," or "),qR=n(Jx,"A",{href:!0});var VWr=s(qR);Woo=r(VWr,"GPT2TokenizerFast"),VWr.forEach(t),Qoo=r(Jx," (OpenAI GPT-2 model)"),Jx.forEach(t),Hoo=i(S),Kn=n(S,"LI",{});var Yx=s(Kn);Ste=n(Yx,"STRONG",{});var XWr=s(Ste);Uoo=r(XWr,"gpt_neo"),XWr.forEach(t),Joo=r(Yx," \u2014 "),NR=n(Yx,"A",{href:!0});var zWr=s(NR);Yoo=r(zWr,"GPT2Tokenizer"),zWr.forEach(t),Koo=r(Yx," or "),jR=n(Yx,"A",{href:!0});var WWr=s(jR);Zoo=r(WWr,"GPT2TokenizerFast"),WWr.forEach(t),ero=r(Yx," (GPT Neo model)"),Yx.forEach(t),oro=i(S),Rg=n(S,"LI",{});var W3e=s(Rg);Rte=n(W3e,"STRONG",{});var QWr=s(Rte);rro=r(QWr,"gpt_neox"),QWr.forEach(t),tro=r(W3e," \u2014 "),DR=n(W3e,"A",{href:!0});var HWr=s(DR);aro=r(HWr,"GPTNeoXTokenizerFast"),HWr.forEach(t),nro=r(W3e," (GPT NeoX model)"),W3e.forEach(t),sro=i(S),Zn=n(S,"LI",{});var Kx=s(Zn);Pte=n(Kx,"STRONG",{});var UWr=s(Pte);lro=r(UWr,"gptj"),UWr.forEach(t),iro=r(Kx," \u2014 "),GR=n(Kx,"A",{href:!0});var JWr=s(GR);dro=r(JWr,"GPT2Tokenizer"),JWr.forEach(t),cro=r(Kx," or "),OR=n(Kx,"A",{href:!0});var YWr=s(OR);fro=r(YWr,"GPT2TokenizerFast"),YWr.forEach(t),mro=r(Kx," (GPT-J model)"),Kx.forEach(t),gro=i(S),es=n(S,"LI",{});var Zx=s(es);Bte=n(Zx,"STRONG",{});var KWr=s(Bte);hro=r(KWr,"herbert"),KWr.forEach(t),pro=r(Zx," \u2014 "),VR=n(Zx,"A",{href:!0});var ZWr=s(VR);_ro=r(ZWr,"HerbertTokenizer"),ZWr.forEach(t),uro=r(Zx," or "),XR=n(Zx,"A",{href:!0});var eQr=s(XR);bro=r(eQr,"HerbertTokenizerFast"),eQr.forEach(t),vro=r(Zx," (HerBERT model)"),Zx.forEach(t),Fro=i(S),Pg=n(S,"LI",{});var Q3e=s(Pg);Ite=n(Q3e,"STRONG",{});var oQr=s(Ite);Tro=r(oQr,"hubert"),oQr.forEach(t),Mro=r(Q3e," \u2014 "),zR=n(Q3e,"A",{href:!0});var rQr=s(zR);Ero=r(rQr,"Wav2Vec2CTCTokenizer"),rQr.forEach(t),Cro=r(Q3e," (Hubert model)"),Q3e.forEach(t),wro=i(S),os=n(S,"LI",{});var e$=s(os);qte=n(e$,"STRONG",{});var tQr=s(qte);Aro=r(tQr,"ibert"),tQr.forEach(t),yro=r(e$," \u2014 "),WR=n(e$,"A",{href:!0});var aQr=s(WR);Lro=r(aQr,"RobertaTokenizer"),aQr.forEach(t),xro=r(e$," or "),QR=n(e$,"A",{href:!0});var nQr=s(QR);$ro=r(nQr,"RobertaTokenizerFast"),nQr.forEach(t),kro=r(e$," (I-BERT model)"),e$.forEach(t),Sro=i(S),rs=n(S,"LI",{});var o$=s(rs);Nte=n(o$,"STRONG",{});var sQr=s(Nte);Rro=r(sQr,"layoutlm"),sQr.forEach(t),Pro=r(o$," \u2014 "),HR=n(o$,"A",{href:!0});var lQr=s(HR);Bro=r(lQr,"LayoutLMTokenizer"),lQr.forEach(t),Iro=r(o$," or "),UR=n(o$,"A",{href:!0});var iQr=s(UR);qro=r(iQr,"LayoutLMTokenizerFast"),iQr.forEach(t),Nro=r(o$," (LayoutLM model)"),o$.forEach(t),jro=i(S),ts=n(S,"LI",{});var r$=s(ts);jte=n(r$,"STRONG",{});var dQr=s(jte);Dro=r(dQr,"layoutlmv2"),dQr.forEach(t),Gro=r(r$," \u2014 "),JR=n(r$,"A",{href:!0});var cQr=s(JR);Oro=r(cQr,"LayoutLMv2Tokenizer"),cQr.forEach(t),Vro=r(r$," or "),YR=n(r$,"A",{href:!0});var fQr=s(YR);Xro=r(fQr,"LayoutLMv2TokenizerFast"),fQr.forEach(t),zro=r(r$," (LayoutLMv2 model)"),r$.forEach(t),Wro=i(S),as=n(S,"LI",{});var t$=s(as);Dte=n(t$,"STRONG",{});var mQr=s(Dte);Qro=r(mQr,"layoutxlm"),mQr.forEach(t),Hro=r(t$," \u2014 "),KR=n(t$,"A",{href:!0});var gQr=s(KR);Uro=r(gQr,"LayoutXLMTokenizer"),gQr.forEach(t),Jro=r(t$," or "),ZR=n(t$,"A",{href:!0});var hQr=s(ZR);Yro=r(hQr,"LayoutXLMTokenizerFast"),hQr.forEach(t),Kro=r(t$," (LayoutXLM model)"),t$.forEach(t),Zro=i(S),ns=n(S,"LI",{});var a$=s(ns);Gte=n(a$,"STRONG",{});var pQr=s(Gte);eto=r(pQr,"led"),pQr.forEach(t),oto=r(a$," \u2014 "),eP=n(a$,"A",{href:!0});var _Qr=s(eP);rto=r(_Qr,"LEDTokenizer"),_Qr.forEach(t),tto=r(a$," or "),oP=n(a$,"A",{href:!0});var uQr=s(oP);ato=r(uQr,"LEDTokenizerFast"),uQr.forEach(t),nto=r(a$," (LED model)"),a$.forEach(t),sto=i(S),ss=n(S,"LI",{});var n$=s(ss);Ote=n(n$,"STRONG",{});var bQr=s(Ote);lto=r(bQr,"longformer"),bQr.forEach(t),ito=r(n$," \u2014 "),rP=n(n$,"A",{href:!0});var vQr=s(rP);dto=r(vQr,"LongformerTokenizer"),vQr.forEach(t),cto=r(n$," or "),tP=n(n$,"A",{href:!0});var FQr=s(tP);fto=r(FQr,"LongformerTokenizerFast"),FQr.forEach(t),mto=r(n$," (Longformer model)"),n$.forEach(t),gto=i(S),Bg=n(S,"LI",{});var H3e=s(Bg);Vte=n(H3e,"STRONG",{});var TQr=s(Vte);hto=r(TQr,"luke"),TQr.forEach(t),pto=r(H3e," \u2014 "),aP=n(H3e,"A",{href:!0});var MQr=s(aP);_to=r(MQr,"LukeTokenizer"),MQr.forEach(t),uto=r(H3e," (LUKE model)"),H3e.forEach(t),bto=i(S),ls=n(S,"LI",{});var s$=s(ls);Xte=n(s$,"STRONG",{});var EQr=s(Xte);vto=r(EQr,"lxmert"),EQr.forEach(t),Fto=r(s$," \u2014 "),nP=n(s$,"A",{href:!0});var CQr=s(nP);Tto=r(CQr,"LxmertTokenizer"),CQr.forEach(t),Mto=r(s$," or "),sP=n(s$,"A",{href:!0});var wQr=s(sP);Eto=r(wQr,"LxmertTokenizerFast"),wQr.forEach(t),Cto=r(s$," (LXMERT model)"),s$.forEach(t),wto=i(S),Ig=n(S,"LI",{});var U3e=s(Ig);zte=n(U3e,"STRONG",{});var AQr=s(zte);Ato=r(AQr,"m2m_100"),AQr.forEach(t),yto=r(U3e," \u2014 "),lP=n(U3e,"A",{href:!0});var yQr=s(lP);Lto=r(yQr,"M2M100Tokenizer"),yQr.forEach(t),xto=r(U3e," (M2M100 model)"),U3e.forEach(t),$to=i(S),qg=n(S,"LI",{});var J3e=s(qg);Wte=n(J3e,"STRONG",{});var LQr=s(Wte);kto=r(LQr,"marian"),LQr.forEach(t),Sto=r(J3e," \u2014 "),iP=n(J3e,"A",{href:!0});var xQr=s(iP);Rto=r(xQr,"MarianTokenizer"),xQr.forEach(t),Pto=r(J3e," (Marian model)"),J3e.forEach(t),Bto=i(S),is=n(S,"LI",{});var l$=s(is);Qte=n(l$,"STRONG",{});var $Qr=s(Qte);Ito=r($Qr,"mbart"),$Qr.forEach(t),qto=r(l$," \u2014 "),dP=n(l$,"A",{href:!0});var kQr=s(dP);Nto=r(kQr,"MBartTokenizer"),kQr.forEach(t),jto=r(l$," or "),cP=n(l$,"A",{href:!0});var SQr=s(cP);Dto=r(SQr,"MBartTokenizerFast"),SQr.forEach(t),Gto=r(l$," (mBART model)"),l$.forEach(t),Oto=i(S),ds=n(S,"LI",{});var i$=s(ds);Hte=n(i$,"STRONG",{});var RQr=s(Hte);Vto=r(RQr,"mbart50"),RQr.forEach(t),Xto=r(i$," \u2014 "),fP=n(i$,"A",{href:!0});var PQr=s(fP);zto=r(PQr,"MBart50Tokenizer"),PQr.forEach(t),Wto=r(i$," or "),mP=n(i$,"A",{href:!0});var BQr=s(mP);Qto=r(BQr,"MBart50TokenizerFast"),BQr.forEach(t),Hto=r(i$," (mBART-50 model)"),i$.forEach(t),Uto=i(S),cs=n(S,"LI",{});var d$=s(cs);Ute=n(d$,"STRONG",{});var IQr=s(Ute);Jto=r(IQr,"megatron-bert"),IQr.forEach(t),Yto=r(d$," \u2014 "),gP=n(d$,"A",{href:!0});var qQr=s(gP);Kto=r(qQr,"BertTokenizer"),qQr.forEach(t),Zto=r(d$," or "),hP=n(d$,"A",{href:!0});var NQr=s(hP);eao=r(NQr,"BertTokenizerFast"),NQr.forEach(t),oao=r(d$," (MegatronBert model)"),d$.forEach(t),rao=i(S),Ng=n(S,"LI",{});var Y3e=s(Ng);Jte=n(Y3e,"STRONG",{});var jQr=s(Jte);tao=r(jQr,"mluke"),jQr.forEach(t),aao=r(Y3e," \u2014 "),pP=n(Y3e,"A",{href:!0});var DQr=s(pP);nao=r(DQr,"MLukeTokenizer"),DQr.forEach(t),sao=r(Y3e," (mLUKE model)"),Y3e.forEach(t),lao=i(S),fs=n(S,"LI",{});var c$=s(fs);Yte=n(c$,"STRONG",{});var GQr=s(Yte);iao=r(GQr,"mobilebert"),GQr.forEach(t),dao=r(c$," \u2014 "),_P=n(c$,"A",{href:!0});var OQr=s(_P);cao=r(OQr,"MobileBertTokenizer"),OQr.forEach(t),fao=r(c$," or "),uP=n(c$,"A",{href:!0});var VQr=s(uP);mao=r(VQr,"MobileBertTokenizerFast"),VQr.forEach(t),gao=r(c$," (MobileBERT model)"),c$.forEach(t),hao=i(S),ms=n(S,"LI",{});var f$=s(ms);Kte=n(f$,"STRONG",{});var XQr=s(Kte);pao=r(XQr,"mpnet"),XQr.forEach(t),_ao=r(f$," \u2014 "),bP=n(f$,"A",{href:!0});var zQr=s(bP);uao=r(zQr,"MPNetTokenizer"),zQr.forEach(t),bao=r(f$," or "),vP=n(f$,"A",{href:!0});var WQr=s(vP);vao=r(WQr,"MPNetTokenizerFast"),WQr.forEach(t),Fao=r(f$," (MPNet model)"),f$.forEach(t),Tao=i(S),gs=n(S,"LI",{});var m$=s(gs);Zte=n(m$,"STRONG",{});var QQr=s(Zte);Mao=r(QQr,"mt5"),QQr.forEach(t),Eao=r(m$," \u2014 "),FP=n(m$,"A",{href:!0});var HQr=s(FP);Cao=r(HQr,"MT5Tokenizer"),HQr.forEach(t),wao=r(m$," or "),TP=n(m$,"A",{href:!0});var UQr=s(TP);Aao=r(UQr,"MT5TokenizerFast"),UQr.forEach(t),yao=r(m$," (mT5 model)"),m$.forEach(t),Lao=i(S),hs=n(S,"LI",{});var g$=s(hs);eae=n(g$,"STRONG",{});var JQr=s(eae);xao=r(JQr,"nystromformer"),JQr.forEach(t),$ao=r(g$," \u2014 "),MP=n(g$,"A",{href:!0});var YQr=s(MP);kao=r(YQr,"AlbertTokenizer"),YQr.forEach(t),Sao=r(g$," or "),EP=n(g$,"A",{href:!0});var KQr=s(EP);Rao=r(KQr,"AlbertTokenizerFast"),KQr.forEach(t),Pao=r(g$," (Nystromformer model)"),g$.forEach(t),Bao=i(S),ps=n(S,"LI",{});var h$=s(ps);oae=n(h$,"STRONG",{});var ZQr=s(oae);Iao=r(ZQr,"openai-gpt"),ZQr.forEach(t),qao=r(h$," \u2014 "),CP=n(h$,"A",{href:!0});var eHr=s(CP);Nao=r(eHr,"OpenAIGPTTokenizer"),eHr.forEach(t),jao=r(h$," or "),wP=n(h$,"A",{href:!0});var oHr=s(wP);Dao=r(oHr,"OpenAIGPTTokenizerFast"),oHr.forEach(t),Gao=r(h$," (OpenAI GPT model)"),h$.forEach(t),Oao=i(S),jg=n(S,"LI",{});var K3e=s(jg);rae=n(K3e,"STRONG",{});var rHr=s(rae);Vao=r(rHr,"opt"),rHr.forEach(t),Xao=r(K3e," \u2014 "),AP=n(K3e,"A",{href:!0});var tHr=s(AP);zao=r(tHr,"GPT2Tokenizer"),tHr.forEach(t),Wao=r(K3e," (OPT model)"),K3e.forEach(t),Qao=i(S),_s=n(S,"LI",{});var p$=s(_s);tae=n(p$,"STRONG",{});var aHr=s(tae);Hao=r(aHr,"pegasus"),aHr.forEach(t),Uao=r(p$," \u2014 "),yP=n(p$,"A",{href:!0});var nHr=s(yP);Jao=r(nHr,"PegasusTokenizer"),nHr.forEach(t),Yao=r(p$," or "),LP=n(p$,"A",{href:!0});var sHr=s(LP);Kao=r(sHr,"PegasusTokenizerFast"),sHr.forEach(t),Zao=r(p$," (Pegasus model)"),p$.forEach(t),eno=i(S),Dg=n(S,"LI",{});var Z3e=s(Dg);aae=n(Z3e,"STRONG",{});var lHr=s(aae);ono=r(lHr,"perceiver"),lHr.forEach(t),rno=r(Z3e," \u2014 "),xP=n(Z3e,"A",{href:!0});var iHr=s(xP);tno=r(iHr,"PerceiverTokenizer"),iHr.forEach(t),ano=r(Z3e," (Perceiver model)"),Z3e.forEach(t),nno=i(S),Gg=n(S,"LI",{});var ewe=s(Gg);nae=n(ewe,"STRONG",{});var dHr=s(nae);sno=r(dHr,"phobert"),dHr.forEach(t),lno=r(ewe," \u2014 "),$P=n(ewe,"A",{href:!0});var cHr=s($P);ino=r(cHr,"PhobertTokenizer"),cHr.forEach(t),dno=r(ewe," (PhoBERT model)"),ewe.forEach(t),cno=i(S),Og=n(S,"LI",{});var owe=s(Og);sae=n(owe,"STRONG",{});var fHr=s(sae);fno=r(fHr,"plbart"),fHr.forEach(t),mno=r(owe," \u2014 "),kP=n(owe,"A",{href:!0});var mHr=s(kP);gno=r(mHr,"PLBartTokenizer"),mHr.forEach(t),hno=r(owe," (PLBart model)"),owe.forEach(t),pno=i(S),Vg=n(S,"LI",{});var rwe=s(Vg);lae=n(rwe,"STRONG",{});var gHr=s(lae);_no=r(gHr,"prophetnet"),gHr.forEach(t),uno=r(rwe," \u2014 "),SP=n(rwe,"A",{href:!0});var hHr=s(SP);bno=r(hHr,"ProphetNetTokenizer"),hHr.forEach(t),vno=r(rwe," (ProphetNet model)"),rwe.forEach(t),Fno=i(S),us=n(S,"LI",{});var _$=s(us);iae=n(_$,"STRONG",{});var pHr=s(iae);Tno=r(pHr,"qdqbert"),pHr.forEach(t),Mno=r(_$," \u2014 "),RP=n(_$,"A",{href:!0});var _Hr=s(RP);Eno=r(_Hr,"BertTokenizer"),_Hr.forEach(t),Cno=r(_$," or "),PP=n(_$,"A",{href:!0});var uHr=s(PP);wno=r(uHr,"BertTokenizerFast"),uHr.forEach(t),Ano=r(_$," (QDQBert model)"),_$.forEach(t),yno=i(S),Xg=n(S,"LI",{});var twe=s(Xg);dae=n(twe,"STRONG",{});var bHr=s(dae);Lno=r(bHr,"rag"),bHr.forEach(t),xno=r(twe," \u2014 "),BP=n(twe,"A",{href:!0});var vHr=s(BP);$no=r(vHr,"RagTokenizer"),vHr.forEach(t),kno=r(twe," (RAG model)"),twe.forEach(t),Sno=i(S),bs=n(S,"LI",{});var u$=s(bs);cae=n(u$,"STRONG",{});var FHr=s(cae);Rno=r(FHr,"realm"),FHr.forEach(t),Pno=r(u$," \u2014 "),IP=n(u$,"A",{href:!0});var THr=s(IP);Bno=r(THr,"RealmTokenizer"),THr.forEach(t),Ino=r(u$," or "),qP=n(u$,"A",{href:!0});var MHr=s(qP);qno=r(MHr,"RealmTokenizerFast"),MHr.forEach(t),Nno=r(u$," (Realm model)"),u$.forEach(t),jno=i(S),vs=n(S,"LI",{});var b$=s(vs);fae=n(b$,"STRONG",{});var EHr=s(fae);Dno=r(EHr,"reformer"),EHr.forEach(t),Gno=r(b$," \u2014 "),NP=n(b$,"A",{href:!0});var CHr=s(NP);Ono=r(CHr,"ReformerTokenizer"),CHr.forEach(t),Vno=r(b$," or "),jP=n(b$,"A",{href:!0});var wHr=s(jP);Xno=r(wHr,"ReformerTokenizerFast"),wHr.forEach(t),zno=r(b$," (Reformer model)"),b$.forEach(t),Wno=i(S),Fs=n(S,"LI",{});var v$=s(Fs);mae=n(v$,"STRONG",{});var AHr=s(mae);Qno=r(AHr,"rembert"),AHr.forEach(t),Hno=r(v$," \u2014 "),DP=n(v$,"A",{href:!0});var yHr=s(DP);Uno=r(yHr,"RemBertTokenizer"),yHr.forEach(t),Jno=r(v$," or "),GP=n(v$,"A",{href:!0});var LHr=s(GP);Yno=r(LHr,"RemBertTokenizerFast"),LHr.forEach(t),Kno=r(v$," (RemBERT model)"),v$.forEach(t),Zno=i(S),Ts=n(S,"LI",{});var F$=s(Ts);gae=n(F$,"STRONG",{});var xHr=s(gae);eso=r(xHr,"retribert"),xHr.forEach(t),oso=r(F$," \u2014 "),OP=n(F$,"A",{href:!0});var $Hr=s(OP);rso=r($Hr,"RetriBertTokenizer"),$Hr.forEach(t),tso=r(F$," or "),VP=n(F$,"A",{href:!0});var kHr=s(VP);aso=r(kHr,"RetriBertTokenizerFast"),kHr.forEach(t),nso=r(F$," (RetriBERT model)"),F$.forEach(t),sso=i(S),Ms=n(S,"LI",{});var T$=s(Ms);hae=n(T$,"STRONG",{});var SHr=s(hae);lso=r(SHr,"roberta"),SHr.forEach(t),iso=r(T$," \u2014 "),XP=n(T$,"A",{href:!0});var RHr=s(XP);dso=r(RHr,"RobertaTokenizer"),RHr.forEach(t),cso=r(T$," or "),zP=n(T$,"A",{href:!0});var PHr=s(zP);fso=r(PHr,"RobertaTokenizerFast"),PHr.forEach(t),mso=r(T$," (RoBERTa model)"),T$.forEach(t),gso=i(S),Es=n(S,"LI",{});var M$=s(Es);pae=n(M$,"STRONG",{});var BHr=s(pae);hso=r(BHr,"roformer"),BHr.forEach(t),pso=r(M$," \u2014 "),WP=n(M$,"A",{href:!0});var IHr=s(WP);_so=r(IHr,"RoFormerTokenizer"),IHr.forEach(t),uso=r(M$," or "),QP=n(M$,"A",{href:!0});var qHr=s(QP);bso=r(qHr,"RoFormerTokenizerFast"),qHr.forEach(t),vso=r(M$," (RoFormer model)"),M$.forEach(t),Fso=i(S),zg=n(S,"LI",{});var awe=s(zg);_ae=n(awe,"STRONG",{});var NHr=s(_ae);Tso=r(NHr,"speech_to_text"),NHr.forEach(t),Mso=r(awe," \u2014 "),HP=n(awe,"A",{href:!0});var jHr=s(HP);Eso=r(jHr,"Speech2TextTokenizer"),jHr.forEach(t),Cso=r(awe," (Speech2Text model)"),awe.forEach(t),wso=i(S),Wg=n(S,"LI",{});var nwe=s(Wg);uae=n(nwe,"STRONG",{});var DHr=s(uae);Aso=r(DHr,"speech_to_text_2"),DHr.forEach(t),yso=r(nwe," \u2014 "),UP=n(nwe,"A",{href:!0});var GHr=s(UP);Lso=r(GHr,"Speech2Text2Tokenizer"),GHr.forEach(t),xso=r(nwe," (Speech2Text2 model)"),nwe.forEach(t),$so=i(S),Cs=n(S,"LI",{});var E$=s(Cs);bae=n(E$,"STRONG",{});var OHr=s(bae);kso=r(OHr,"splinter"),OHr.forEach(t),Sso=r(E$," \u2014 "),JP=n(E$,"A",{href:!0});var VHr=s(JP);Rso=r(VHr,"SplinterTokenizer"),VHr.forEach(t),Pso=r(E$," or "),YP=n(E$,"A",{href:!0});var XHr=s(YP);Bso=r(XHr,"SplinterTokenizerFast"),XHr.forEach(t),Iso=r(E$," (Splinter model)"),E$.forEach(t),qso=i(S),ws=n(S,"LI",{});var C$=s(ws);vae=n(C$,"STRONG",{});var zHr=s(vae);Nso=r(zHr,"squeezebert"),zHr.forEach(t),jso=r(C$," \u2014 "),KP=n(C$,"A",{href:!0});var WHr=s(KP);Dso=r(WHr,"SqueezeBertTokenizer"),WHr.forEach(t),Gso=r(C$," or "),ZP=n(C$,"A",{href:!0});var QHr=s(ZP);Oso=r(QHr,"SqueezeBertTokenizerFast"),QHr.forEach(t),Vso=r(C$," (SqueezeBERT model)"),C$.forEach(t),Xso=i(S),As=n(S,"LI",{});var w$=s(As);Fae=n(w$,"STRONG",{});var HHr=s(Fae);zso=r(HHr,"t5"),HHr.forEach(t),Wso=r(w$," \u2014 "),eB=n(w$,"A",{href:!0});var UHr=s(eB);Qso=r(UHr,"T5Tokenizer"),UHr.forEach(t),Hso=r(w$," or "),oB=n(w$,"A",{href:!0});var JHr=s(oB);Uso=r(JHr,"T5TokenizerFast"),JHr.forEach(t),Jso=r(w$," (T5 model)"),w$.forEach(t),Yso=i(S),Qg=n(S,"LI",{});var swe=s(Qg);Tae=n(swe,"STRONG",{});var YHr=s(Tae);Kso=r(YHr,"tapas"),YHr.forEach(t),Zso=r(swe," \u2014 "),rB=n(swe,"A",{href:!0});var KHr=s(rB);elo=r(KHr,"TapasTokenizer"),KHr.forEach(t),olo=r(swe," (TAPAS model)"),swe.forEach(t),rlo=i(S),Hg=n(S,"LI",{});var lwe=s(Hg);Mae=n(lwe,"STRONG",{});var ZHr=s(Mae);tlo=r(ZHr,"tapex"),ZHr.forEach(t),alo=r(lwe," \u2014 "),tB=n(lwe,"A",{href:!0});var eUr=s(tB);nlo=r(eUr,"TapexTokenizer"),eUr.forEach(t),slo=r(lwe," (TAPEX model)"),lwe.forEach(t),llo=i(S),Ug=n(S,"LI",{});var iwe=s(Ug);Eae=n(iwe,"STRONG",{});var oUr=s(Eae);ilo=r(oUr,"transfo-xl"),oUr.forEach(t),dlo=r(iwe," \u2014 "),aB=n(iwe,"A",{href:!0});var rUr=s(aB);clo=r(rUr,"TransfoXLTokenizer"),rUr.forEach(t),flo=r(iwe," (Transformer-XL model)"),iwe.forEach(t),mlo=i(S),ys=n(S,"LI",{});var A$=s(ys);Cae=n(A$,"STRONG",{});var tUr=s(Cae);glo=r(tUr,"visual_bert"),tUr.forEach(t),hlo=r(A$," \u2014 "),nB=n(A$,"A",{href:!0});var aUr=s(nB);plo=r(aUr,"BertTokenizer"),aUr.forEach(t),_lo=r(A$," or "),sB=n(A$,"A",{href:!0});var nUr=s(sB);ulo=r(nUr,"BertTokenizerFast"),nUr.forEach(t),blo=r(A$," (VisualBert model)"),A$.forEach(t),vlo=i(S),Jg=n(S,"LI",{});var dwe=s(Jg);wae=n(dwe,"STRONG",{});var sUr=s(wae);Flo=r(sUr,"wav2vec2"),sUr.forEach(t),Tlo=r(dwe," \u2014 "),lB=n(dwe,"A",{href:!0});var lUr=s(lB);Mlo=r(lUr,"Wav2Vec2CTCTokenizer"),lUr.forEach(t),Elo=r(dwe," (Wav2Vec2 model)"),dwe.forEach(t),Clo=i(S),Yg=n(S,"LI",{});var cwe=s(Yg);Aae=n(cwe,"STRONG",{});var iUr=s(Aae);wlo=r(iUr,"wav2vec2-conformer"),iUr.forEach(t),Alo=r(cwe," \u2014 "),iB=n(cwe,"A",{href:!0});var dUr=s(iB);ylo=r(dUr,"Wav2Vec2CTCTokenizer"),dUr.forEach(t),Llo=r(cwe," (Wav2Vec2-Conformer model)"),cwe.forEach(t),xlo=i(S),Kg=n(S,"LI",{});var fwe=s(Kg);yae=n(fwe,"STRONG",{});var cUr=s(yae);$lo=r(cUr,"wav2vec2_phoneme"),cUr.forEach(t),klo=r(fwe," \u2014 "),dB=n(fwe,"A",{href:!0});var fUr=s(dB);Slo=r(fUr,"Wav2Vec2PhonemeCTCTokenizer"),fUr.forEach(t),Rlo=r(fwe," (Wav2Vec2Phoneme model)"),fwe.forEach(t),Plo=i(S),Ls=n(S,"LI",{});var y$=s(Ls);Lae=n(y$,"STRONG",{});var mUr=s(Lae);Blo=r(mUr,"xglm"),mUr.forEach(t),Ilo=r(y$," \u2014 "),cB=n(y$,"A",{href:!0});var gUr=s(cB);qlo=r(gUr,"XGLMTokenizer"),gUr.forEach(t),Nlo=r(y$," or "),fB=n(y$,"A",{href:!0});var hUr=s(fB);jlo=r(hUr,"XGLMTokenizerFast"),hUr.forEach(t),Dlo=r(y$," (XGLM model)"),y$.forEach(t),Glo=i(S),Zg=n(S,"LI",{});var mwe=s(Zg);xae=n(mwe,"STRONG",{});var pUr=s(xae);Olo=r(pUr,"xlm"),pUr.forEach(t),Vlo=r(mwe," \u2014 "),mB=n(mwe,"A",{href:!0});var _Ur=s(mB);Xlo=r(_Ur,"XLMTokenizer"),_Ur.forEach(t),zlo=r(mwe," (XLM model)"),mwe.forEach(t),Wlo=i(S),eh=n(S,"LI",{});var gwe=s(eh);$ae=n(gwe,"STRONG",{});var uUr=s($ae);Qlo=r(uUr,"xlm-prophetnet"),uUr.forEach(t),Hlo=r(gwe," \u2014 "),gB=n(gwe,"A",{href:!0});var bUr=s(gB);Ulo=r(bUr,"XLMProphetNetTokenizer"),bUr.forEach(t),Jlo=r(gwe," (XLMProphetNet model)"),gwe.forEach(t),Ylo=i(S),xs=n(S,"LI",{});var L$=s(xs);kae=n(L$,"STRONG",{});var vUr=s(kae);Klo=r(vUr,"xlm-roberta"),vUr.forEach(t),Zlo=r(L$," \u2014 "),hB=n(L$,"A",{href:!0});var FUr=s(hB);eio=r(FUr,"XLMRobertaTokenizer"),FUr.forEach(t),oio=r(L$," or "),pB=n(L$,"A",{href:!0});var TUr=s(pB);rio=r(TUr,"XLMRobertaTokenizerFast"),TUr.forEach(t),tio=r(L$," (XLM-RoBERTa model)"),L$.forEach(t),aio=i(S),$s=n(S,"LI",{});var x$=s($s);Sae=n(x$,"STRONG",{});var MUr=s(Sae);nio=r(MUr,"xlm-roberta-xl"),MUr.forEach(t),sio=r(x$," \u2014 "),_B=n(x$,"A",{href:!0});var EUr=s(_B);lio=r(EUr,"RobertaTokenizer"),EUr.forEach(t),iio=r(x$," or "),uB=n(x$,"A",{href:!0});var CUr=s(uB);dio=r(CUr,"RobertaTokenizerFast"),CUr.forEach(t),cio=r(x$," (XLM-RoBERTa-XL model)"),x$.forEach(t),fio=i(S),ks=n(S,"LI",{});var $$=s(ks);Rae=n($$,"STRONG",{});var wUr=s(Rae);mio=r(wUr,"xlnet"),wUr.forEach(t),gio=r($$," \u2014 "),bB=n($$,"A",{href:!0});var AUr=s(bB);hio=r(AUr,"XLNetTokenizer"),AUr.forEach(t),pio=r($$," or "),vB=n($$,"A",{href:!0});var yUr=s(vB);_io=r(yUr,"XLNetTokenizerFast"),yUr.forEach(t),uio=r($$," (XLNet model)"),$$.forEach(t),bio=i(S),Ss=n(S,"LI",{});var k$=s(Ss);Pae=n(k$,"STRONG",{});var LUr=s(Pae);vio=r(LUr,"yoso"),LUr.forEach(t),Fio=r(k$," \u2014 "),FB=n(k$,"A",{href:!0});var xUr=s(FB);Tio=r(xUr,"AlbertTokenizer"),xUr.forEach(t),Mio=r(k$," or "),TB=n(k$,"A",{href:!0});var $Ur=s(TB);Eio=r($Ur,"AlbertTokenizerFast"),$Ur.forEach(t),Cio=r(k$," (YOSO model)"),k$.forEach(t),S.forEach(t),wio=i(qs),T(oh.$$.fragment,qs),qs.forEach(t),Aio=i(Is),rh=n(Is,"DIV",{class:!0});var Eje=s(rh);T(kA.$$.fragment,Eje),yio=i(Eje),Bae=n(Eje,"P",{});var kUr=s(Bae);Lio=r(kUr,"Register a new tokenizer in this mapping."),kUr.forEach(t),Eje.forEach(t),Is.forEach(t),Cqe=i(f),Ti=n(f,"H2",{class:!0});var Cje=s(Ti);th=n(Cje,"A",{id:!0,class:!0,href:!0});var SUr=s(th);Iae=n(SUr,"SPAN",{});var RUr=s(Iae);T(SA.$$.fragment,RUr),RUr.forEach(t),SUr.forEach(t),xio=i(Cje),qae=n(Cje,"SPAN",{});var PUr=s(qae);$io=r(PUr,"AutoFeatureExtractor"),PUr.forEach(t),Cje.forEach(t),wqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(RA.$$.fragment,Ns),kio=i(Ns),PA=n(Ns,"P",{});var wje=s(PA);Sio=r(wje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MB=n(wje,"A",{href:!0});var BUr=s(MB);Rio=r(BUr,"AutoFeatureExtractor.from_pretrained()"),BUr.forEach(t),Pio=r(wje," class method."),wje.forEach(t),Bio=i(Ns),BA=n(Ns,"P",{});var Aje=s(BA);Iio=r(Aje,"This class cannot be instantiated directly using "),Nae=n(Aje,"CODE",{});var IUr=s(Nae);qio=r(IUr,"__init__()"),IUr.forEach(t),Nio=r(Aje," (throws an error)."),Aje.forEach(t),jio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(IA.$$.fragment,Zt),Dio=i(Zt),jae=n(Zt,"P",{});var qUr=s(jae);Gio=r(qUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qUr.forEach(t),Oio=i(Zt),ya=n(Zt,"P",{});var Tw=s(ya);Vio=r(Tw,"The feature extractor class to instantiate is selected based on the "),Dae=n(Tw,"CODE",{});var NUr=s(Dae);Xio=r(NUr,"model_type"),NUr.forEach(t),zio=r(Tw,` property of the config object
(either passed as an argument or loaded from `),Gae=n(Tw,"CODE",{});var jUr=s(Gae);Wio=r(jUr,"pretrained_model_name_or_path"),jUr.forEach(t),Qio=r(Tw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Oae=n(Tw,"CODE",{});var DUr=s(Oae);Hio=r(DUr,"pretrained_model_name_or_path"),DUr.forEach(t),Uio=r(Tw,":"),Tw.forEach(t),Jio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);ah=n(re,"LI",{});var hwe=s(ah);Vae=n(hwe,"STRONG",{});var GUr=s(Vae);Yio=r(GUr,"beit"),GUr.forEach(t),Kio=r(hwe," \u2014 "),EB=n(hwe,"A",{href:!0});var OUr=s(EB);Zio=r(OUr,"BeitFeatureExtractor"),OUr.forEach(t),edo=r(hwe," (BEiT model)"),hwe.forEach(t),odo=i(re),nh=n(re,"LI",{});var pwe=s(nh);Xae=n(pwe,"STRONG",{});var VUr=s(Xae);rdo=r(VUr,"clip"),VUr.forEach(t),tdo=r(pwe," \u2014 "),CB=n(pwe,"A",{href:!0});var XUr=s(CB);ado=r(XUr,"CLIPFeatureExtractor"),XUr.forEach(t),ndo=r(pwe," (CLIP model)"),pwe.forEach(t),sdo=i(re),sh=n(re,"LI",{});var _we=s(sh);zae=n(_we,"STRONG",{});var zUr=s(zae);ldo=r(zUr,"convnext"),zUr.forEach(t),ido=r(_we," \u2014 "),wB=n(_we,"A",{href:!0});var WUr=s(wB);ddo=r(WUr,"ConvNextFeatureExtractor"),WUr.forEach(t),cdo=r(_we," (ConvNext model)"),_we.forEach(t),fdo=i(re),lh=n(re,"LI",{});var uwe=s(lh);Wae=n(uwe,"STRONG",{});var QUr=s(Wae);mdo=r(QUr,"cvt"),QUr.forEach(t),gdo=r(uwe," \u2014 "),AB=n(uwe,"A",{href:!0});var HUr=s(AB);hdo=r(HUr,"ConvNextFeatureExtractor"),HUr.forEach(t),pdo=r(uwe," (CvT model)"),uwe.forEach(t),_do=i(re),ih=n(re,"LI",{});var bwe=s(ih);Qae=n(bwe,"STRONG",{});var UUr=s(Qae);udo=r(UUr,"data2vec-audio"),UUr.forEach(t),bdo=r(bwe," \u2014 "),yB=n(bwe,"A",{href:!0});var JUr=s(yB);vdo=r(JUr,"Wav2Vec2FeatureExtractor"),JUr.forEach(t),Fdo=r(bwe," (Data2VecAudio model)"),bwe.forEach(t),Tdo=i(re),dh=n(re,"LI",{});var vwe=s(dh);Hae=n(vwe,"STRONG",{});var YUr=s(Hae);Mdo=r(YUr,"data2vec-vision"),YUr.forEach(t),Edo=r(vwe," \u2014 "),LB=n(vwe,"A",{href:!0});var KUr=s(LB);Cdo=r(KUr,"BeitFeatureExtractor"),KUr.forEach(t),wdo=r(vwe," (Data2VecVision model)"),vwe.forEach(t),Ado=i(re),ch=n(re,"LI",{});var Fwe=s(ch);Uae=n(Fwe,"STRONG",{});var ZUr=s(Uae);ydo=r(ZUr,"deit"),ZUr.forEach(t),Ldo=r(Fwe," \u2014 "),xB=n(Fwe,"A",{href:!0});var eJr=s(xB);xdo=r(eJr,"DeiTFeatureExtractor"),eJr.forEach(t),$do=r(Fwe," (DeiT model)"),Fwe.forEach(t),kdo=i(re),fh=n(re,"LI",{});var Twe=s(fh);Jae=n(Twe,"STRONG",{});var oJr=s(Jae);Sdo=r(oJr,"detr"),oJr.forEach(t),Rdo=r(Twe," \u2014 "),$B=n(Twe,"A",{href:!0});var rJr=s($B);Pdo=r(rJr,"DetrFeatureExtractor"),rJr.forEach(t),Bdo=r(Twe," (DETR model)"),Twe.forEach(t),Ido=i(re),mh=n(re,"LI",{});var Mwe=s(mh);Yae=n(Mwe,"STRONG",{});var tJr=s(Yae);qdo=r(tJr,"dpt"),tJr.forEach(t),Ndo=r(Mwe," \u2014 "),kB=n(Mwe,"A",{href:!0});var aJr=s(kB);jdo=r(aJr,"DPTFeatureExtractor"),aJr.forEach(t),Ddo=r(Mwe," (DPT model)"),Mwe.forEach(t),Gdo=i(re),gh=n(re,"LI",{});var Ewe=s(gh);Kae=n(Ewe,"STRONG",{});var nJr=s(Kae);Odo=r(nJr,"flava"),nJr.forEach(t),Vdo=r(Ewe," \u2014 "),SB=n(Ewe,"A",{href:!0});var sJr=s(SB);Xdo=r(sJr,"FlavaFeatureExtractor"),sJr.forEach(t),zdo=r(Ewe," (Flava model)"),Ewe.forEach(t),Wdo=i(re),hh=n(re,"LI",{});var Cwe=s(hh);Zae=n(Cwe,"STRONG",{});var lJr=s(Zae);Qdo=r(lJr,"glpn"),lJr.forEach(t),Hdo=r(Cwe," \u2014 "),RB=n(Cwe,"A",{href:!0});var iJr=s(RB);Udo=r(iJr,"GLPNFeatureExtractor"),iJr.forEach(t),Jdo=r(Cwe," (GLPN model)"),Cwe.forEach(t),Ydo=i(re),ph=n(re,"LI",{});var wwe=s(ph);ene=n(wwe,"STRONG",{});var dJr=s(ene);Kdo=r(dJr,"hubert"),dJr.forEach(t),Zdo=r(wwe," \u2014 "),PB=n(wwe,"A",{href:!0});var cJr=s(PB);eco=r(cJr,"Wav2Vec2FeatureExtractor"),cJr.forEach(t),oco=r(wwe," (Hubert model)"),wwe.forEach(t),rco=i(re),_h=n(re,"LI",{});var Awe=s(_h);one=n(Awe,"STRONG",{});var fJr=s(one);tco=r(fJr,"layoutlmv2"),fJr.forEach(t),aco=r(Awe," \u2014 "),BB=n(Awe,"A",{href:!0});var mJr=s(BB);nco=r(mJr,"LayoutLMv2FeatureExtractor"),mJr.forEach(t),sco=r(Awe," (LayoutLMv2 model)"),Awe.forEach(t),lco=i(re),uh=n(re,"LI",{});var ywe=s(uh);rne=n(ywe,"STRONG",{});var gJr=s(rne);ico=r(gJr,"maskformer"),gJr.forEach(t),dco=r(ywe," \u2014 "),IB=n(ywe,"A",{href:!0});var hJr=s(IB);cco=r(hJr,"MaskFormerFeatureExtractor"),hJr.forEach(t),fco=r(ywe," (MaskFormer model)"),ywe.forEach(t),mco=i(re),bh=n(re,"LI",{});var Lwe=s(bh);tne=n(Lwe,"STRONG",{});var pJr=s(tne);gco=r(pJr,"perceiver"),pJr.forEach(t),hco=r(Lwe," \u2014 "),qB=n(Lwe,"A",{href:!0});var _Jr=s(qB);pco=r(_Jr,"PerceiverFeatureExtractor"),_Jr.forEach(t),_co=r(Lwe," (Perceiver model)"),Lwe.forEach(t),uco=i(re),vh=n(re,"LI",{});var xwe=s(vh);ane=n(xwe,"STRONG",{});var uJr=s(ane);bco=r(uJr,"poolformer"),uJr.forEach(t),vco=r(xwe," \u2014 "),NB=n(xwe,"A",{href:!0});var bJr=s(NB);Fco=r(bJr,"PoolFormerFeatureExtractor"),bJr.forEach(t),Tco=r(xwe," (PoolFormer model)"),xwe.forEach(t),Mco=i(re),Fh=n(re,"LI",{});var $we=s(Fh);nne=n($we,"STRONG",{});var vJr=s(nne);Eco=r(vJr,"regnet"),vJr.forEach(t),Cco=r($we," \u2014 "),jB=n($we,"A",{href:!0});var FJr=s(jB);wco=r(FJr,"ConvNextFeatureExtractor"),FJr.forEach(t),Aco=r($we," (RegNet model)"),$we.forEach(t),yco=i(re),Th=n(re,"LI",{});var kwe=s(Th);sne=n(kwe,"STRONG",{});var TJr=s(sne);Lco=r(TJr,"resnet"),TJr.forEach(t),xco=r(kwe," \u2014 "),DB=n(kwe,"A",{href:!0});var MJr=s(DB);$co=r(MJr,"ConvNextFeatureExtractor"),MJr.forEach(t),kco=r(kwe," (ResNet model)"),kwe.forEach(t),Sco=i(re),Mh=n(re,"LI",{});var Swe=s(Mh);lne=n(Swe,"STRONG",{});var EJr=s(lne);Rco=r(EJr,"segformer"),EJr.forEach(t),Pco=r(Swe," \u2014 "),GB=n(Swe,"A",{href:!0});var CJr=s(GB);Bco=r(CJr,"SegformerFeatureExtractor"),CJr.forEach(t),Ico=r(Swe," (SegFormer model)"),Swe.forEach(t),qco=i(re),Eh=n(re,"LI",{});var Rwe=s(Eh);ine=n(Rwe,"STRONG",{});var wJr=s(ine);Nco=r(wJr,"speech_to_text"),wJr.forEach(t),jco=r(Rwe," \u2014 "),OB=n(Rwe,"A",{href:!0});var AJr=s(OB);Dco=r(AJr,"Speech2TextFeatureExtractor"),AJr.forEach(t),Gco=r(Rwe," (Speech2Text model)"),Rwe.forEach(t),Oco=i(re),Ch=n(re,"LI",{});var Pwe=s(Ch);dne=n(Pwe,"STRONG",{});var yJr=s(dne);Vco=r(yJr,"swin"),yJr.forEach(t),Xco=r(Pwe," \u2014 "),VB=n(Pwe,"A",{href:!0});var LJr=s(VB);zco=r(LJr,"ViTFeatureExtractor"),LJr.forEach(t),Wco=r(Pwe," (Swin model)"),Pwe.forEach(t),Qco=i(re),wh=n(re,"LI",{});var Bwe=s(wh);cne=n(Bwe,"STRONG",{});var xJr=s(cne);Hco=r(xJr,"van"),xJr.forEach(t),Uco=r(Bwe," \u2014 "),XB=n(Bwe,"A",{href:!0});var $Jr=s(XB);Jco=r($Jr,"ConvNextFeatureExtractor"),$Jr.forEach(t),Yco=r(Bwe," (VAN model)"),Bwe.forEach(t),Kco=i(re),Ah=n(re,"LI",{});var Iwe=s(Ah);fne=n(Iwe,"STRONG",{});var kJr=s(fne);Zco=r(kJr,"vit"),kJr.forEach(t),efo=r(Iwe," \u2014 "),zB=n(Iwe,"A",{href:!0});var SJr=s(zB);ofo=r(SJr,"ViTFeatureExtractor"),SJr.forEach(t),rfo=r(Iwe," (ViT model)"),Iwe.forEach(t),tfo=i(re),yh=n(re,"LI",{});var qwe=s(yh);mne=n(qwe,"STRONG",{});var RJr=s(mne);afo=r(RJr,"vit_mae"),RJr.forEach(t),nfo=r(qwe," \u2014 "),WB=n(qwe,"A",{href:!0});var PJr=s(WB);sfo=r(PJr,"ViTFeatureExtractor"),PJr.forEach(t),lfo=r(qwe," (ViTMAE model)"),qwe.forEach(t),ifo=i(re),Lh=n(re,"LI",{});var Nwe=s(Lh);gne=n(Nwe,"STRONG",{});var BJr=s(gne);dfo=r(BJr,"wav2vec2"),BJr.forEach(t),cfo=r(Nwe," \u2014 "),QB=n(Nwe,"A",{href:!0});var IJr=s(QB);ffo=r(IJr,"Wav2Vec2FeatureExtractor"),IJr.forEach(t),mfo=r(Nwe," (Wav2Vec2 model)"),Nwe.forEach(t),gfo=i(re),xh=n(re,"LI",{});var jwe=s(xh);hne=n(jwe,"STRONG",{});var qJr=s(hne);hfo=r(qJr,"wav2vec2-conformer"),qJr.forEach(t),pfo=r(jwe," \u2014 "),HB=n(jwe,"A",{href:!0});var NJr=s(HB);_fo=r(NJr,"Wav2Vec2FeatureExtractor"),NJr.forEach(t),ufo=r(jwe," (Wav2Vec2-Conformer model)"),jwe.forEach(t),bfo=i(re),$h=n(re,"LI",{});var Dwe=s($h);pne=n(Dwe,"STRONG",{});var jJr=s(pne);vfo=r(jJr,"yolos"),jJr.forEach(t),Ffo=r(Dwe," \u2014 "),UB=n(Dwe,"A",{href:!0});var DJr=s(UB);Tfo=r(DJr,"YolosFeatureExtractor"),DJr.forEach(t),Mfo=r(Dwe," (YOLOS model)"),Dwe.forEach(t),re.forEach(t),Efo=i(Zt),T(kh.$$.fragment,Zt),Cfo=i(Zt),T(Sh.$$.fragment,Zt),Zt.forEach(t),wfo=i(Ns),Rh=n(Ns,"DIV",{class:!0});var yje=s(Rh);T(qA.$$.fragment,yje),Afo=i(yje),_ne=n(yje,"P",{});var GJr=s(_ne);yfo=r(GJr,"Register a new feature extractor for this class."),GJr.forEach(t),yje.forEach(t),Ns.forEach(t),Aqe=i(f),Mi=n(f,"H2",{class:!0});var Lje=s(Mi);Ph=n(Lje,"A",{id:!0,class:!0,href:!0});var OJr=s(Ph);une=n(OJr,"SPAN",{});var VJr=s(une);T(NA.$$.fragment,VJr),VJr.forEach(t),OJr.forEach(t),Lfo=i(Lje),bne=n(Lje,"SPAN",{});var XJr=s(bne);xfo=r(XJr,"AutoProcessor"),XJr.forEach(t),Lje.forEach(t),yqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(jA.$$.fragment,js),$fo=i(js),DA=n(js,"P",{});var xje=s(DA);kfo=r(xje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),JB=n(xje,"A",{href:!0});var zJr=s(JB);Sfo=r(zJr,"AutoProcessor.from_pretrained()"),zJr.forEach(t),Rfo=r(xje," class method."),xje.forEach(t),Pfo=i(js),GA=n(js,"P",{});var $je=s(GA);Bfo=r($je,"This class cannot be instantiated directly using "),vne=n($je,"CODE",{});var WJr=s(vne);Ifo=r(WJr,"__init__()"),WJr.forEach(t),qfo=r($je," (throws an error)."),$je.forEach(t),Nfo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(OA.$$.fragment,ea),jfo=i(ea),Fne=n(ea,"P",{});var QJr=s(Fne);Dfo=r(QJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),QJr.forEach(t),Gfo=i(ea),Ei=n(ea,"P",{});var QK=s(Ei);Ofo=r(QK,"The processor class to instantiate is selected based on the "),Tne=n(QK,"CODE",{});var HJr=s(Tne);Vfo=r(HJr,"model_type"),HJr.forEach(t),Xfo=r(QK,` property of the config object (either
passed as an argument or loaded from `),Mne=n(QK,"CODE",{});var UJr=s(Mne);zfo=r(UJr,"pretrained_model_name_or_path"),UJr.forEach(t),Wfo=r(QK," if possible):"),QK.forEach(t),Qfo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Bh=n(be,"LI",{});var Gwe=s(Bh);Ene=n(Gwe,"STRONG",{});var JJr=s(Ene);Hfo=r(JJr,"clip"),JJr.forEach(t),Ufo=r(Gwe," \u2014 "),YB=n(Gwe,"A",{href:!0});var YJr=s(YB);Jfo=r(YJr,"CLIPProcessor"),YJr.forEach(t),Yfo=r(Gwe," (CLIP model)"),Gwe.forEach(t),Kfo=i(be),Ih=n(be,"LI",{});var Owe=s(Ih);Cne=n(Owe,"STRONG",{});var KJr=s(Cne);Zfo=r(KJr,"flava"),KJr.forEach(t),emo=r(Owe," \u2014 "),wne=n(Owe,"CODE",{});var ZJr=s(wne);omo=r(ZJr,"FLAVAProcessor"),ZJr.forEach(t),rmo=r(Owe," (Flava model)"),Owe.forEach(t),tmo=i(be),qh=n(be,"LI",{});var Vwe=s(qh);Ane=n(Vwe,"STRONG",{});var eYr=s(Ane);amo=r(eYr,"layoutlmv2"),eYr.forEach(t),nmo=r(Vwe," \u2014 "),KB=n(Vwe,"A",{href:!0});var oYr=s(KB);smo=r(oYr,"LayoutLMv2Processor"),oYr.forEach(t),lmo=r(Vwe," (LayoutLMv2 model)"),Vwe.forEach(t),imo=i(be),Nh=n(be,"LI",{});var Xwe=s(Nh);yne=n(Xwe,"STRONG",{});var rYr=s(yne);dmo=r(rYr,"layoutxlm"),rYr.forEach(t),cmo=r(Xwe," \u2014 "),ZB=n(Xwe,"A",{href:!0});var tYr=s(ZB);fmo=r(tYr,"LayoutXLMProcessor"),tYr.forEach(t),mmo=r(Xwe," (LayoutXLM model)"),Xwe.forEach(t),gmo=i(be),jh=n(be,"LI",{});var zwe=s(jh);Lne=n(zwe,"STRONG",{});var aYr=s(Lne);hmo=r(aYr,"sew"),aYr.forEach(t),pmo=r(zwe," \u2014 "),eI=n(zwe,"A",{href:!0});var nYr=s(eI);_mo=r(nYr,"Wav2Vec2Processor"),nYr.forEach(t),umo=r(zwe," (SEW model)"),zwe.forEach(t),bmo=i(be),Dh=n(be,"LI",{});var Wwe=s(Dh);xne=n(Wwe,"STRONG",{});var sYr=s(xne);vmo=r(sYr,"sew-d"),sYr.forEach(t),Fmo=r(Wwe," \u2014 "),oI=n(Wwe,"A",{href:!0});var lYr=s(oI);Tmo=r(lYr,"Wav2Vec2Processor"),lYr.forEach(t),Mmo=r(Wwe," (SEW-D model)"),Wwe.forEach(t),Emo=i(be),Gh=n(be,"LI",{});var Qwe=s(Gh);$ne=n(Qwe,"STRONG",{});var iYr=s($ne);Cmo=r(iYr,"speech_to_text"),iYr.forEach(t),wmo=r(Qwe," \u2014 "),rI=n(Qwe,"A",{href:!0});var dYr=s(rI);Amo=r(dYr,"Speech2TextProcessor"),dYr.forEach(t),ymo=r(Qwe," (Speech2Text model)"),Qwe.forEach(t),Lmo=i(be),Oh=n(be,"LI",{});var Hwe=s(Oh);kne=n(Hwe,"STRONG",{});var cYr=s(kne);xmo=r(cYr,"speech_to_text_2"),cYr.forEach(t),$mo=r(Hwe," \u2014 "),tI=n(Hwe,"A",{href:!0});var fYr=s(tI);kmo=r(fYr,"Speech2Text2Processor"),fYr.forEach(t),Smo=r(Hwe," (Speech2Text2 model)"),Hwe.forEach(t),Rmo=i(be),Vh=n(be,"LI",{});var Uwe=s(Vh);Sne=n(Uwe,"STRONG",{});var mYr=s(Sne);Pmo=r(mYr,"trocr"),mYr.forEach(t),Bmo=r(Uwe," \u2014 "),aI=n(Uwe,"A",{href:!0});var gYr=s(aI);Imo=r(gYr,"TrOCRProcessor"),gYr.forEach(t),qmo=r(Uwe," (TrOCR model)"),Uwe.forEach(t),Nmo=i(be),Xh=n(be,"LI",{});var Jwe=s(Xh);Rne=n(Jwe,"STRONG",{});var hYr=s(Rne);jmo=r(hYr,"unispeech"),hYr.forEach(t),Dmo=r(Jwe," \u2014 "),nI=n(Jwe,"A",{href:!0});var pYr=s(nI);Gmo=r(pYr,"Wav2Vec2Processor"),pYr.forEach(t),Omo=r(Jwe," (UniSpeech model)"),Jwe.forEach(t),Vmo=i(be),zh=n(be,"LI",{});var Ywe=s(zh);Pne=n(Ywe,"STRONG",{});var _Yr=s(Pne);Xmo=r(_Yr,"unispeech-sat"),_Yr.forEach(t),zmo=r(Ywe," \u2014 "),sI=n(Ywe,"A",{href:!0});var uYr=s(sI);Wmo=r(uYr,"Wav2Vec2Processor"),uYr.forEach(t),Qmo=r(Ywe," (UniSpeechSat model)"),Ywe.forEach(t),Hmo=i(be),Wh=n(be,"LI",{});var Kwe=s(Wh);Bne=n(Kwe,"STRONG",{});var bYr=s(Bne);Umo=r(bYr,"vilt"),bYr.forEach(t),Jmo=r(Kwe," \u2014 "),lI=n(Kwe,"A",{href:!0});var vYr=s(lI);Ymo=r(vYr,"ViltProcessor"),vYr.forEach(t),Kmo=r(Kwe," (ViLT model)"),Kwe.forEach(t),Zmo=i(be),Qh=n(be,"LI",{});var Zwe=s(Qh);Ine=n(Zwe,"STRONG",{});var FYr=s(Ine);ego=r(FYr,"vision-text-dual-encoder"),FYr.forEach(t),ogo=r(Zwe," \u2014 "),iI=n(Zwe,"A",{href:!0});var TYr=s(iI);rgo=r(TYr,"VisionTextDualEncoderProcessor"),TYr.forEach(t),tgo=r(Zwe," (VisionTextDualEncoder model)"),Zwe.forEach(t),ago=i(be),Hh=n(be,"LI",{});var e0e=s(Hh);qne=n(e0e,"STRONG",{});var MYr=s(qne);ngo=r(MYr,"wav2vec2"),MYr.forEach(t),sgo=r(e0e," \u2014 "),dI=n(e0e,"A",{href:!0});var EYr=s(dI);lgo=r(EYr,"Wav2Vec2Processor"),EYr.forEach(t),igo=r(e0e," (Wav2Vec2 model)"),e0e.forEach(t),dgo=i(be),Uh=n(be,"LI",{});var o0e=s(Uh);Nne=n(o0e,"STRONG",{});var CYr=s(Nne);cgo=r(CYr,"wav2vec2-conformer"),CYr.forEach(t),fgo=r(o0e," \u2014 "),cI=n(o0e,"A",{href:!0});var wYr=s(cI);mgo=r(wYr,"Wav2Vec2Processor"),wYr.forEach(t),ggo=r(o0e," (Wav2Vec2-Conformer model)"),o0e.forEach(t),hgo=i(be),Jh=n(be,"LI",{});var r0e=s(Jh);jne=n(r0e,"STRONG",{});var AYr=s(jne);pgo=r(AYr,"wavlm"),AYr.forEach(t),_go=r(r0e," \u2014 "),fI=n(r0e,"A",{href:!0});var yYr=s(fI);ugo=r(yYr,"Wav2Vec2Processor"),yYr.forEach(t),bgo=r(r0e," (WavLM model)"),r0e.forEach(t),be.forEach(t),vgo=i(ea),T(Yh.$$.fragment,ea),Fgo=i(ea),T(Kh.$$.fragment,ea),ea.forEach(t),Tgo=i(js),Zh=n(js,"DIV",{class:!0});var kje=s(Zh);T(VA.$$.fragment,kje),Mgo=i(kje),Dne=n(kje,"P",{});var LYr=s(Dne);Ego=r(LYr,"Register a new processor for this class."),LYr.forEach(t),kje.forEach(t),js.forEach(t),Lqe=i(f),Ci=n(f,"H2",{class:!0});var Sje=s(Ci);ep=n(Sje,"A",{id:!0,class:!0,href:!0});var xYr=s(ep);Gne=n(xYr,"SPAN",{});var $Yr=s(Gne);T(XA.$$.fragment,$Yr),$Yr.forEach(t),xYr.forEach(t),Cgo=i(Sje),One=n(Sje,"SPAN",{});var kYr=s(One);wgo=r(kYr,"AutoModel"),kYr.forEach(t),Sje.forEach(t),xqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(zA.$$.fragment,Ds),Ago=i(Ds),wi=n(Ds,"P",{});var HK=s(wi);ygo=r(HK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mI=n(HK,"A",{href:!0});var SYr=s(mI);Lgo=r(SYr,"from_pretrained()"),SYr.forEach(t),xgo=r(HK," class method or the "),gI=n(HK,"A",{href:!0});var RYr=s(gI);$go=r(RYr,"from_config()"),RYr.forEach(t),kgo=r(HK,` class
method.`),HK.forEach(t),Sgo=i(Ds),WA=n(Ds,"P",{});var Rje=s(WA);Rgo=r(Rje,"This class cannot be instantiated directly using "),Vne=n(Rje,"CODE",{});var PYr=s(Vne);Pgo=r(PYr,"__init__()"),PYr.forEach(t),Bgo=r(Rje," (throws an error)."),Rje.forEach(t),Igo=i(Ds),tt=n(Ds,"DIV",{class:!0});var Mw=s(tt);T(QA.$$.fragment,Mw),qgo=i(Mw),Xne=n(Mw,"P",{});var BYr=s(Xne);Ngo=r(BYr,"Instantiates one of the base model classes of the library from a configuration."),BYr.forEach(t),jgo=i(Mw),Ai=n(Mw,"P",{});var UK=s(Ai);Dgo=r(UK,`Note:
Loading a model from its configuration file does `),zne=n(UK,"STRONG",{});var IYr=s(zne);Ggo=r(IYr,"not"),IYr.forEach(t),Ogo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hI=n(UK,"A",{href:!0});var qYr=s(hI);Vgo=r(qYr,"from_pretrained()"),qYr.forEach(t),Xgo=r(UK," to load the model weights."),UK.forEach(t),zgo=i(Mw),T(op.$$.fragment,Mw),Mw.forEach(t),Wgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(HA.$$.fragment,oa),Qgo=i(oa),Wne=n(oa,"P",{});var NYr=s(Wne);Hgo=r(NYr,"Instantiate one of the base model classes of the library from a pretrained model."),NYr.forEach(t),Ugo=i(oa),La=n(oa,"P",{});var Ew=s(La);Jgo=r(Ew,"The model class to instantiate is selected based on the "),Qne=n(Ew,"CODE",{});var jYr=s(Qne);Ygo=r(jYr,"model_type"),jYr.forEach(t),Kgo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Hne=n(Ew,"CODE",{});var DYr=s(Hne);Zgo=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),eho=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=n(Ew,"CODE",{});var GYr=s(Une);oho=r(GYr,"pretrained_model_name_or_path"),GYr.forEach(t),rho=r(Ew,":"),Ew.forEach(t),tho=i(oa),x=n(oa,"UL",{});var $=s(x);rp=n($,"LI",{});var t0e=s(rp);Jne=n(t0e,"STRONG",{});var OYr=s(Jne);aho=r(OYr,"albert"),OYr.forEach(t),nho=r(t0e," \u2014 "),pI=n(t0e,"A",{href:!0});var VYr=s(pI);sho=r(VYr,"AlbertModel"),VYr.forEach(t),lho=r(t0e," (ALBERT model)"),t0e.forEach(t),iho=i($),tp=n($,"LI",{});var a0e=s(tp);Yne=n(a0e,"STRONG",{});var XYr=s(Yne);dho=r(XYr,"bart"),XYr.forEach(t),cho=r(a0e," \u2014 "),_I=n(a0e,"A",{href:!0});var zYr=s(_I);fho=r(zYr,"BartModel"),zYr.forEach(t),mho=r(a0e," (BART model)"),a0e.forEach(t),gho=i($),ap=n($,"LI",{});var n0e=s(ap);Kne=n(n0e,"STRONG",{});var WYr=s(Kne);hho=r(WYr,"beit"),WYr.forEach(t),pho=r(n0e," \u2014 "),uI=n(n0e,"A",{href:!0});var QYr=s(uI);_ho=r(QYr,"BeitModel"),QYr.forEach(t),uho=r(n0e," (BEiT model)"),n0e.forEach(t),bho=i($),np=n($,"LI",{});var s0e=s(np);Zne=n(s0e,"STRONG",{});var HYr=s(Zne);vho=r(HYr,"bert"),HYr.forEach(t),Fho=r(s0e," \u2014 "),bI=n(s0e,"A",{href:!0});var UYr=s(bI);Tho=r(UYr,"BertModel"),UYr.forEach(t),Mho=r(s0e," (BERT model)"),s0e.forEach(t),Eho=i($),sp=n($,"LI",{});var l0e=s(sp);ese=n(l0e,"STRONG",{});var JYr=s(ese);Cho=r(JYr,"bert-generation"),JYr.forEach(t),who=r(l0e," \u2014 "),vI=n(l0e,"A",{href:!0});var YYr=s(vI);Aho=r(YYr,"BertGenerationEncoder"),YYr.forEach(t),yho=r(l0e," (Bert Generation model)"),l0e.forEach(t),Lho=i($),lp=n($,"LI",{});var i0e=s(lp);ose=n(i0e,"STRONG",{});var KYr=s(ose);xho=r(KYr,"big_bird"),KYr.forEach(t),$ho=r(i0e," \u2014 "),FI=n(i0e,"A",{href:!0});var ZYr=s(FI);kho=r(ZYr,"BigBirdModel"),ZYr.forEach(t),Sho=r(i0e," (BigBird model)"),i0e.forEach(t),Rho=i($),ip=n($,"LI",{});var d0e=s(ip);rse=n(d0e,"STRONG",{});var eKr=s(rse);Pho=r(eKr,"bigbird_pegasus"),eKr.forEach(t),Bho=r(d0e," \u2014 "),TI=n(d0e,"A",{href:!0});var oKr=s(TI);Iho=r(oKr,"BigBirdPegasusModel"),oKr.forEach(t),qho=r(d0e," (BigBirdPegasus model)"),d0e.forEach(t),Nho=i($),dp=n($,"LI",{});var c0e=s(dp);tse=n(c0e,"STRONG",{});var rKr=s(tse);jho=r(rKr,"blenderbot"),rKr.forEach(t),Dho=r(c0e," \u2014 "),MI=n(c0e,"A",{href:!0});var tKr=s(MI);Gho=r(tKr,"BlenderbotModel"),tKr.forEach(t),Oho=r(c0e," (Blenderbot model)"),c0e.forEach(t),Vho=i($),cp=n($,"LI",{});var f0e=s(cp);ase=n(f0e,"STRONG",{});var aKr=s(ase);Xho=r(aKr,"blenderbot-small"),aKr.forEach(t),zho=r(f0e," \u2014 "),EI=n(f0e,"A",{href:!0});var nKr=s(EI);Who=r(nKr,"BlenderbotSmallModel"),nKr.forEach(t),Qho=r(f0e," (BlenderbotSmall model)"),f0e.forEach(t),Hho=i($),fp=n($,"LI",{});var m0e=s(fp);nse=n(m0e,"STRONG",{});var sKr=s(nse);Uho=r(sKr,"camembert"),sKr.forEach(t),Jho=r(m0e," \u2014 "),CI=n(m0e,"A",{href:!0});var lKr=s(CI);Yho=r(lKr,"CamembertModel"),lKr.forEach(t),Kho=r(m0e," (CamemBERT model)"),m0e.forEach(t),Zho=i($),mp=n($,"LI",{});var g0e=s(mp);sse=n(g0e,"STRONG",{});var iKr=s(sse);epo=r(iKr,"canine"),iKr.forEach(t),opo=r(g0e," \u2014 "),wI=n(g0e,"A",{href:!0});var dKr=s(wI);rpo=r(dKr,"CanineModel"),dKr.forEach(t),tpo=r(g0e," (Canine model)"),g0e.forEach(t),apo=i($),gp=n($,"LI",{});var h0e=s(gp);lse=n(h0e,"STRONG",{});var cKr=s(lse);npo=r(cKr,"clip"),cKr.forEach(t),spo=r(h0e," \u2014 "),AI=n(h0e,"A",{href:!0});var fKr=s(AI);lpo=r(fKr,"CLIPModel"),fKr.forEach(t),ipo=r(h0e," (CLIP model)"),h0e.forEach(t),dpo=i($),hp=n($,"LI",{});var p0e=s(hp);ise=n(p0e,"STRONG",{});var mKr=s(ise);cpo=r(mKr,"convbert"),mKr.forEach(t),fpo=r(p0e," \u2014 "),yI=n(p0e,"A",{href:!0});var gKr=s(yI);mpo=r(gKr,"ConvBertModel"),gKr.forEach(t),gpo=r(p0e," (ConvBERT model)"),p0e.forEach(t),hpo=i($),pp=n($,"LI",{});var _0e=s(pp);dse=n(_0e,"STRONG",{});var hKr=s(dse);ppo=r(hKr,"convnext"),hKr.forEach(t),_po=r(_0e," \u2014 "),LI=n(_0e,"A",{href:!0});var pKr=s(LI);upo=r(pKr,"ConvNextModel"),pKr.forEach(t),bpo=r(_0e," (ConvNext model)"),_0e.forEach(t),vpo=i($),_p=n($,"LI",{});var u0e=s(_p);cse=n(u0e,"STRONG",{});var _Kr=s(cse);Fpo=r(_Kr,"ctrl"),_Kr.forEach(t),Tpo=r(u0e," \u2014 "),xI=n(u0e,"A",{href:!0});var uKr=s(xI);Mpo=r(uKr,"CTRLModel"),uKr.forEach(t),Epo=r(u0e," (CTRL model)"),u0e.forEach(t),Cpo=i($),up=n($,"LI",{});var b0e=s(up);fse=n(b0e,"STRONG",{});var bKr=s(fse);wpo=r(bKr,"cvt"),bKr.forEach(t),Apo=r(b0e," \u2014 "),$I=n(b0e,"A",{href:!0});var vKr=s($I);ypo=r(vKr,"CvtModel"),vKr.forEach(t),Lpo=r(b0e," (CvT model)"),b0e.forEach(t),xpo=i($),bp=n($,"LI",{});var v0e=s(bp);mse=n(v0e,"STRONG",{});var FKr=s(mse);$po=r(FKr,"data2vec-audio"),FKr.forEach(t),kpo=r(v0e," \u2014 "),kI=n(v0e,"A",{href:!0});var TKr=s(kI);Spo=r(TKr,"Data2VecAudioModel"),TKr.forEach(t),Rpo=r(v0e," (Data2VecAudio model)"),v0e.forEach(t),Ppo=i($),vp=n($,"LI",{});var F0e=s(vp);gse=n(F0e,"STRONG",{});var MKr=s(gse);Bpo=r(MKr,"data2vec-text"),MKr.forEach(t),Ipo=r(F0e," \u2014 "),SI=n(F0e,"A",{href:!0});var EKr=s(SI);qpo=r(EKr,"Data2VecTextModel"),EKr.forEach(t),Npo=r(F0e," (Data2VecText model)"),F0e.forEach(t),jpo=i($),Fp=n($,"LI",{});var T0e=s(Fp);hse=n(T0e,"STRONG",{});var CKr=s(hse);Dpo=r(CKr,"data2vec-vision"),CKr.forEach(t),Gpo=r(T0e," \u2014 "),RI=n(T0e,"A",{href:!0});var wKr=s(RI);Opo=r(wKr,"Data2VecVisionModel"),wKr.forEach(t),Vpo=r(T0e," (Data2VecVision model)"),T0e.forEach(t),Xpo=i($),Tp=n($,"LI",{});var M0e=s(Tp);pse=n(M0e,"STRONG",{});var AKr=s(pse);zpo=r(AKr,"deberta"),AKr.forEach(t),Wpo=r(M0e," \u2014 "),PI=n(M0e,"A",{href:!0});var yKr=s(PI);Qpo=r(yKr,"DebertaModel"),yKr.forEach(t),Hpo=r(M0e," (DeBERTa model)"),M0e.forEach(t),Upo=i($),Mp=n($,"LI",{});var E0e=s(Mp);_se=n(E0e,"STRONG",{});var LKr=s(_se);Jpo=r(LKr,"deberta-v2"),LKr.forEach(t),Ypo=r(E0e," \u2014 "),BI=n(E0e,"A",{href:!0});var xKr=s(BI);Kpo=r(xKr,"DebertaV2Model"),xKr.forEach(t),Zpo=r(E0e," (DeBERTa-v2 model)"),E0e.forEach(t),e_o=i($),Ep=n($,"LI",{});var C0e=s(Ep);use=n(C0e,"STRONG",{});var $Kr=s(use);o_o=r($Kr,"decision_transformer"),$Kr.forEach(t),r_o=r(C0e," \u2014 "),II=n(C0e,"A",{href:!0});var kKr=s(II);t_o=r(kKr,"DecisionTransformerModel"),kKr.forEach(t),a_o=r(C0e," (Decision Transformer model)"),C0e.forEach(t),n_o=i($),Cp=n($,"LI",{});var w0e=s(Cp);bse=n(w0e,"STRONG",{});var SKr=s(bse);s_o=r(SKr,"deit"),SKr.forEach(t),l_o=r(w0e," \u2014 "),qI=n(w0e,"A",{href:!0});var RKr=s(qI);i_o=r(RKr,"DeiTModel"),RKr.forEach(t),d_o=r(w0e," (DeiT model)"),w0e.forEach(t),c_o=i($),wp=n($,"LI",{});var A0e=s(wp);vse=n(A0e,"STRONG",{});var PKr=s(vse);f_o=r(PKr,"detr"),PKr.forEach(t),m_o=r(A0e," \u2014 "),NI=n(A0e,"A",{href:!0});var BKr=s(NI);g_o=r(BKr,"DetrModel"),BKr.forEach(t),h_o=r(A0e," (DETR model)"),A0e.forEach(t),p_o=i($),Ap=n($,"LI",{});var y0e=s(Ap);Fse=n(y0e,"STRONG",{});var IKr=s(Fse);__o=r(IKr,"distilbert"),IKr.forEach(t),u_o=r(y0e," \u2014 "),jI=n(y0e,"A",{href:!0});var qKr=s(jI);b_o=r(qKr,"DistilBertModel"),qKr.forEach(t),v_o=r(y0e," (DistilBERT model)"),y0e.forEach(t),F_o=i($),yp=n($,"LI",{});var L0e=s(yp);Tse=n(L0e,"STRONG",{});var NKr=s(Tse);T_o=r(NKr,"dpr"),NKr.forEach(t),M_o=r(L0e," \u2014 "),DI=n(L0e,"A",{href:!0});var jKr=s(DI);E_o=r(jKr,"DPRQuestionEncoder"),jKr.forEach(t),C_o=r(L0e," (DPR model)"),L0e.forEach(t),w_o=i($),Lp=n($,"LI",{});var x0e=s(Lp);Mse=n(x0e,"STRONG",{});var DKr=s(Mse);A_o=r(DKr,"dpt"),DKr.forEach(t),y_o=r(x0e," \u2014 "),GI=n(x0e,"A",{href:!0});var GKr=s(GI);L_o=r(GKr,"DPTModel"),GKr.forEach(t),x_o=r(x0e," (DPT model)"),x0e.forEach(t),$_o=i($),xp=n($,"LI",{});var $0e=s(xp);Ese=n($0e,"STRONG",{});var OKr=s(Ese);k_o=r(OKr,"electra"),OKr.forEach(t),S_o=r($0e," \u2014 "),OI=n($0e,"A",{href:!0});var VKr=s(OI);R_o=r(VKr,"ElectraModel"),VKr.forEach(t),P_o=r($0e," (ELECTRA model)"),$0e.forEach(t),B_o=i($),$p=n($,"LI",{});var k0e=s($p);Cse=n(k0e,"STRONG",{});var XKr=s(Cse);I_o=r(XKr,"flaubert"),XKr.forEach(t),q_o=r(k0e," \u2014 "),VI=n(k0e,"A",{href:!0});var zKr=s(VI);N_o=r(zKr,"FlaubertModel"),zKr.forEach(t),j_o=r(k0e," (FlauBERT model)"),k0e.forEach(t),D_o=i($),kp=n($,"LI",{});var S0e=s(kp);wse=n(S0e,"STRONG",{});var WKr=s(wse);G_o=r(WKr,"flava"),WKr.forEach(t),O_o=r(S0e," \u2014 "),XI=n(S0e,"A",{href:!0});var QKr=s(XI);V_o=r(QKr,"FlavaModel"),QKr.forEach(t),X_o=r(S0e," (Flava model)"),S0e.forEach(t),z_o=i($),Sp=n($,"LI",{});var R0e=s(Sp);Ase=n(R0e,"STRONG",{});var HKr=s(Ase);W_o=r(HKr,"fnet"),HKr.forEach(t),Q_o=r(R0e," \u2014 "),zI=n(R0e,"A",{href:!0});var UKr=s(zI);H_o=r(UKr,"FNetModel"),UKr.forEach(t),U_o=r(R0e," (FNet model)"),R0e.forEach(t),J_o=i($),Rp=n($,"LI",{});var P0e=s(Rp);yse=n(P0e,"STRONG",{});var JKr=s(yse);Y_o=r(JKr,"fsmt"),JKr.forEach(t),K_o=r(P0e," \u2014 "),WI=n(P0e,"A",{href:!0});var YKr=s(WI);Z_o=r(YKr,"FSMTModel"),YKr.forEach(t),euo=r(P0e," (FairSeq Machine-Translation model)"),P0e.forEach(t),ouo=i($),Rs=n($,"LI",{});var S$=s(Rs);Lse=n(S$,"STRONG",{});var KKr=s(Lse);ruo=r(KKr,"funnel"),KKr.forEach(t),tuo=r(S$," \u2014 "),QI=n(S$,"A",{href:!0});var ZKr=s(QI);auo=r(ZKr,"FunnelModel"),ZKr.forEach(t),nuo=r(S$," or "),HI=n(S$,"A",{href:!0});var eZr=s(HI);suo=r(eZr,"FunnelBaseModel"),eZr.forEach(t),luo=r(S$," (Funnel Transformer model)"),S$.forEach(t),iuo=i($),Pp=n($,"LI",{});var B0e=s(Pp);xse=n(B0e,"STRONG",{});var oZr=s(xse);duo=r(oZr,"glpn"),oZr.forEach(t),cuo=r(B0e," \u2014 "),UI=n(B0e,"A",{href:!0});var rZr=s(UI);fuo=r(rZr,"GLPNModel"),rZr.forEach(t),muo=r(B0e," (GLPN model)"),B0e.forEach(t),guo=i($),Bp=n($,"LI",{});var I0e=s(Bp);$se=n(I0e,"STRONG",{});var tZr=s($se);huo=r(tZr,"gpt2"),tZr.forEach(t),puo=r(I0e," \u2014 "),JI=n(I0e,"A",{href:!0});var aZr=s(JI);_uo=r(aZr,"GPT2Model"),aZr.forEach(t),uuo=r(I0e," (OpenAI GPT-2 model)"),I0e.forEach(t),buo=i($),Ip=n($,"LI",{});var q0e=s(Ip);kse=n(q0e,"STRONG",{});var nZr=s(kse);vuo=r(nZr,"gpt_neo"),nZr.forEach(t),Fuo=r(q0e," \u2014 "),YI=n(q0e,"A",{href:!0});var sZr=s(YI);Tuo=r(sZr,"GPTNeoModel"),sZr.forEach(t),Muo=r(q0e," (GPT Neo model)"),q0e.forEach(t),Euo=i($),qp=n($,"LI",{});var N0e=s(qp);Sse=n(N0e,"STRONG",{});var lZr=s(Sse);Cuo=r(lZr,"gpt_neox"),lZr.forEach(t),wuo=r(N0e," \u2014 "),KI=n(N0e,"A",{href:!0});var iZr=s(KI);Auo=r(iZr,"GPTNeoXModel"),iZr.forEach(t),yuo=r(N0e," (GPT NeoX model)"),N0e.forEach(t),Luo=i($),Np=n($,"LI",{});var j0e=s(Np);Rse=n(j0e,"STRONG",{});var dZr=s(Rse);xuo=r(dZr,"gptj"),dZr.forEach(t),$uo=r(j0e," \u2014 "),ZI=n(j0e,"A",{href:!0});var cZr=s(ZI);kuo=r(cZr,"GPTJModel"),cZr.forEach(t),Suo=r(j0e," (GPT-J model)"),j0e.forEach(t),Ruo=i($),jp=n($,"LI",{});var D0e=s(jp);Pse=n(D0e,"STRONG",{});var fZr=s(Pse);Puo=r(fZr,"hubert"),fZr.forEach(t),Buo=r(D0e," \u2014 "),eq=n(D0e,"A",{href:!0});var mZr=s(eq);Iuo=r(mZr,"HubertModel"),mZr.forEach(t),quo=r(D0e," (Hubert model)"),D0e.forEach(t),Nuo=i($),Dp=n($,"LI",{});var G0e=s(Dp);Bse=n(G0e,"STRONG",{});var gZr=s(Bse);juo=r(gZr,"ibert"),gZr.forEach(t),Duo=r(G0e," \u2014 "),oq=n(G0e,"A",{href:!0});var hZr=s(oq);Guo=r(hZr,"IBertModel"),hZr.forEach(t),Ouo=r(G0e," (I-BERT model)"),G0e.forEach(t),Vuo=i($),Gp=n($,"LI",{});var O0e=s(Gp);Ise=n(O0e,"STRONG",{});var pZr=s(Ise);Xuo=r(pZr,"imagegpt"),pZr.forEach(t),zuo=r(O0e," \u2014 "),rq=n(O0e,"A",{href:!0});var _Zr=s(rq);Wuo=r(_Zr,"ImageGPTModel"),_Zr.forEach(t),Quo=r(O0e," (ImageGPT model)"),O0e.forEach(t),Huo=i($),Op=n($,"LI",{});var V0e=s(Op);qse=n(V0e,"STRONG",{});var uZr=s(qse);Uuo=r(uZr,"layoutlm"),uZr.forEach(t),Juo=r(V0e," \u2014 "),tq=n(V0e,"A",{href:!0});var bZr=s(tq);Yuo=r(bZr,"LayoutLMModel"),bZr.forEach(t),Kuo=r(V0e," (LayoutLM model)"),V0e.forEach(t),Zuo=i($),Vp=n($,"LI",{});var X0e=s(Vp);Nse=n(X0e,"STRONG",{});var vZr=s(Nse);e6o=r(vZr,"layoutlmv2"),vZr.forEach(t),o6o=r(X0e," \u2014 "),aq=n(X0e,"A",{href:!0});var FZr=s(aq);r6o=r(FZr,"LayoutLMv2Model"),FZr.forEach(t),t6o=r(X0e," (LayoutLMv2 model)"),X0e.forEach(t),a6o=i($),Xp=n($,"LI",{});var z0e=s(Xp);jse=n(z0e,"STRONG",{});var TZr=s(jse);n6o=r(TZr,"led"),TZr.forEach(t),s6o=r(z0e," \u2014 "),nq=n(z0e,"A",{href:!0});var MZr=s(nq);l6o=r(MZr,"LEDModel"),MZr.forEach(t),i6o=r(z0e," (LED model)"),z0e.forEach(t),d6o=i($),zp=n($,"LI",{});var W0e=s(zp);Dse=n(W0e,"STRONG",{});var EZr=s(Dse);c6o=r(EZr,"longformer"),EZr.forEach(t),f6o=r(W0e," \u2014 "),sq=n(W0e,"A",{href:!0});var CZr=s(sq);m6o=r(CZr,"LongformerModel"),CZr.forEach(t),g6o=r(W0e," (Longformer model)"),W0e.forEach(t),h6o=i($),Wp=n($,"LI",{});var Q0e=s(Wp);Gse=n(Q0e,"STRONG",{});var wZr=s(Gse);p6o=r(wZr,"luke"),wZr.forEach(t),_6o=r(Q0e," \u2014 "),lq=n(Q0e,"A",{href:!0});var AZr=s(lq);u6o=r(AZr,"LukeModel"),AZr.forEach(t),b6o=r(Q0e," (LUKE model)"),Q0e.forEach(t),v6o=i($),Qp=n($,"LI",{});var H0e=s(Qp);Ose=n(H0e,"STRONG",{});var yZr=s(Ose);F6o=r(yZr,"lxmert"),yZr.forEach(t),T6o=r(H0e," \u2014 "),iq=n(H0e,"A",{href:!0});var LZr=s(iq);M6o=r(LZr,"LxmertModel"),LZr.forEach(t),E6o=r(H0e," (LXMERT model)"),H0e.forEach(t),C6o=i($),Hp=n($,"LI",{});var U0e=s(Hp);Vse=n(U0e,"STRONG",{});var xZr=s(Vse);w6o=r(xZr,"m2m_100"),xZr.forEach(t),A6o=r(U0e," \u2014 "),dq=n(U0e,"A",{href:!0});var $Zr=s(dq);y6o=r($Zr,"M2M100Model"),$Zr.forEach(t),L6o=r(U0e," (M2M100 model)"),U0e.forEach(t),x6o=i($),Up=n($,"LI",{});var J0e=s(Up);Xse=n(J0e,"STRONG",{});var kZr=s(Xse);$6o=r(kZr,"marian"),kZr.forEach(t),k6o=r(J0e," \u2014 "),cq=n(J0e,"A",{href:!0});var SZr=s(cq);S6o=r(SZr,"MarianModel"),SZr.forEach(t),R6o=r(J0e," (Marian model)"),J0e.forEach(t),P6o=i($),Jp=n($,"LI",{});var Y0e=s(Jp);zse=n(Y0e,"STRONG",{});var RZr=s(zse);B6o=r(RZr,"maskformer"),RZr.forEach(t),I6o=r(Y0e," \u2014 "),fq=n(Y0e,"A",{href:!0});var PZr=s(fq);q6o=r(PZr,"MaskFormerModel"),PZr.forEach(t),N6o=r(Y0e," (MaskFormer model)"),Y0e.forEach(t),j6o=i($),Yp=n($,"LI",{});var K0e=s(Yp);Wse=n(K0e,"STRONG",{});var BZr=s(Wse);D6o=r(BZr,"mbart"),BZr.forEach(t),G6o=r(K0e," \u2014 "),mq=n(K0e,"A",{href:!0});var IZr=s(mq);O6o=r(IZr,"MBartModel"),IZr.forEach(t),V6o=r(K0e," (mBART model)"),K0e.forEach(t),X6o=i($),Kp=n($,"LI",{});var Z0e=s(Kp);Qse=n(Z0e,"STRONG",{});var qZr=s(Qse);z6o=r(qZr,"megatron-bert"),qZr.forEach(t),W6o=r(Z0e," \u2014 "),gq=n(Z0e,"A",{href:!0});var NZr=s(gq);Q6o=r(NZr,"MegatronBertModel"),NZr.forEach(t),H6o=r(Z0e," (MegatronBert model)"),Z0e.forEach(t),U6o=i($),Zp=n($,"LI",{});var eAe=s(Zp);Hse=n(eAe,"STRONG",{});var jZr=s(Hse);J6o=r(jZr,"mobilebert"),jZr.forEach(t),Y6o=r(eAe," \u2014 "),hq=n(eAe,"A",{href:!0});var DZr=s(hq);K6o=r(DZr,"MobileBertModel"),DZr.forEach(t),Z6o=r(eAe," (MobileBERT model)"),eAe.forEach(t),e1o=i($),e_=n($,"LI",{});var oAe=s(e_);Use=n(oAe,"STRONG",{});var GZr=s(Use);o1o=r(GZr,"mpnet"),GZr.forEach(t),r1o=r(oAe," \u2014 "),pq=n(oAe,"A",{href:!0});var OZr=s(pq);t1o=r(OZr,"MPNetModel"),OZr.forEach(t),a1o=r(oAe," (MPNet model)"),oAe.forEach(t),n1o=i($),o_=n($,"LI",{});var rAe=s(o_);Jse=n(rAe,"STRONG",{});var VZr=s(Jse);s1o=r(VZr,"mt5"),VZr.forEach(t),l1o=r(rAe," \u2014 "),_q=n(rAe,"A",{href:!0});var XZr=s(_q);i1o=r(XZr,"MT5Model"),XZr.forEach(t),d1o=r(rAe," (mT5 model)"),rAe.forEach(t),c1o=i($),r_=n($,"LI",{});var tAe=s(r_);Yse=n(tAe,"STRONG",{});var zZr=s(Yse);f1o=r(zZr,"nystromformer"),zZr.forEach(t),m1o=r(tAe," \u2014 "),uq=n(tAe,"A",{href:!0});var WZr=s(uq);g1o=r(WZr,"NystromformerModel"),WZr.forEach(t),h1o=r(tAe," (Nystromformer model)"),tAe.forEach(t),p1o=i($),t_=n($,"LI",{});var aAe=s(t_);Kse=n(aAe,"STRONG",{});var QZr=s(Kse);_1o=r(QZr,"openai-gpt"),QZr.forEach(t),u1o=r(aAe," \u2014 "),bq=n(aAe,"A",{href:!0});var HZr=s(bq);b1o=r(HZr,"OpenAIGPTModel"),HZr.forEach(t),v1o=r(aAe," (OpenAI GPT model)"),aAe.forEach(t),F1o=i($),a_=n($,"LI",{});var nAe=s(a_);Zse=n(nAe,"STRONG",{});var UZr=s(Zse);T1o=r(UZr,"opt"),UZr.forEach(t),M1o=r(nAe," \u2014 "),vq=n(nAe,"A",{href:!0});var JZr=s(vq);E1o=r(JZr,"OPTModel"),JZr.forEach(t),C1o=r(nAe," (OPT model)"),nAe.forEach(t),w1o=i($),n_=n($,"LI",{});var sAe=s(n_);ele=n(sAe,"STRONG",{});var YZr=s(ele);A1o=r(YZr,"pegasus"),YZr.forEach(t),y1o=r(sAe," \u2014 "),Fq=n(sAe,"A",{href:!0});var KZr=s(Fq);L1o=r(KZr,"PegasusModel"),KZr.forEach(t),x1o=r(sAe," (Pegasus model)"),sAe.forEach(t),$1o=i($),s_=n($,"LI",{});var lAe=s(s_);ole=n(lAe,"STRONG",{});var ZZr=s(ole);k1o=r(ZZr,"perceiver"),ZZr.forEach(t),S1o=r(lAe," \u2014 "),Tq=n(lAe,"A",{href:!0});var eet=s(Tq);R1o=r(eet,"PerceiverModel"),eet.forEach(t),P1o=r(lAe," (Perceiver model)"),lAe.forEach(t),B1o=i($),l_=n($,"LI",{});var iAe=s(l_);rle=n(iAe,"STRONG",{});var oet=s(rle);I1o=r(oet,"plbart"),oet.forEach(t),q1o=r(iAe," \u2014 "),Mq=n(iAe,"A",{href:!0});var ret=s(Mq);N1o=r(ret,"PLBartModel"),ret.forEach(t),j1o=r(iAe," (PLBart model)"),iAe.forEach(t),D1o=i($),i_=n($,"LI",{});var dAe=s(i_);tle=n(dAe,"STRONG",{});var tet=s(tle);G1o=r(tet,"poolformer"),tet.forEach(t),O1o=r(dAe," \u2014 "),Eq=n(dAe,"A",{href:!0});var aet=s(Eq);V1o=r(aet,"PoolFormerModel"),aet.forEach(t),X1o=r(dAe," (PoolFormer model)"),dAe.forEach(t),z1o=i($),d_=n($,"LI",{});var cAe=s(d_);ale=n(cAe,"STRONG",{});var net=s(ale);W1o=r(net,"prophetnet"),net.forEach(t),Q1o=r(cAe," \u2014 "),Cq=n(cAe,"A",{href:!0});var set=s(Cq);H1o=r(set,"ProphetNetModel"),set.forEach(t),U1o=r(cAe," (ProphetNet model)"),cAe.forEach(t),J1o=i($),c_=n($,"LI",{});var fAe=s(c_);nle=n(fAe,"STRONG",{});var iet=s(nle);Y1o=r(iet,"qdqbert"),iet.forEach(t),K1o=r(fAe," \u2014 "),wq=n(fAe,"A",{href:!0});var det=s(wq);Z1o=r(det,"QDQBertModel"),det.forEach(t),ebo=r(fAe," (QDQBert model)"),fAe.forEach(t),obo=i($),f_=n($,"LI",{});var mAe=s(f_);sle=n(mAe,"STRONG",{});var cet=s(sle);rbo=r(cet,"reformer"),cet.forEach(t),tbo=r(mAe," \u2014 "),Aq=n(mAe,"A",{href:!0});var fet=s(Aq);abo=r(fet,"ReformerModel"),fet.forEach(t),nbo=r(mAe," (Reformer model)"),mAe.forEach(t),sbo=i($),m_=n($,"LI",{});var gAe=s(m_);lle=n(gAe,"STRONG",{});var met=s(lle);lbo=r(met,"regnet"),met.forEach(t),ibo=r(gAe," \u2014 "),yq=n(gAe,"A",{href:!0});var get=s(yq);dbo=r(get,"RegNetModel"),get.forEach(t),cbo=r(gAe," (RegNet model)"),gAe.forEach(t),fbo=i($),g_=n($,"LI",{});var hAe=s(g_);ile=n(hAe,"STRONG",{});var het=s(ile);mbo=r(het,"rembert"),het.forEach(t),gbo=r(hAe," \u2014 "),Lq=n(hAe,"A",{href:!0});var pet=s(Lq);hbo=r(pet,"RemBertModel"),pet.forEach(t),pbo=r(hAe," (RemBERT model)"),hAe.forEach(t),_bo=i($),h_=n($,"LI",{});var pAe=s(h_);dle=n(pAe,"STRONG",{});var _et=s(dle);ubo=r(_et,"resnet"),_et.forEach(t),bbo=r(pAe," \u2014 "),xq=n(pAe,"A",{href:!0});var uet=s(xq);vbo=r(uet,"ResNetModel"),uet.forEach(t),Fbo=r(pAe," (ResNet model)"),pAe.forEach(t),Tbo=i($),p_=n($,"LI",{});var _Ae=s(p_);cle=n(_Ae,"STRONG",{});var bet=s(cle);Mbo=r(bet,"retribert"),bet.forEach(t),Ebo=r(_Ae," \u2014 "),$q=n(_Ae,"A",{href:!0});var vet=s($q);Cbo=r(vet,"RetriBertModel"),vet.forEach(t),wbo=r(_Ae," (RetriBERT model)"),_Ae.forEach(t),Abo=i($),__=n($,"LI",{});var uAe=s(__);fle=n(uAe,"STRONG",{});var Fet=s(fle);ybo=r(Fet,"roberta"),Fet.forEach(t),Lbo=r(uAe," \u2014 "),kq=n(uAe,"A",{href:!0});var Tet=s(kq);xbo=r(Tet,"RobertaModel"),Tet.forEach(t),$bo=r(uAe," (RoBERTa model)"),uAe.forEach(t),kbo=i($),u_=n($,"LI",{});var bAe=s(u_);mle=n(bAe,"STRONG",{});var Met=s(mle);Sbo=r(Met,"roformer"),Met.forEach(t),Rbo=r(bAe," \u2014 "),Sq=n(bAe,"A",{href:!0});var Eet=s(Sq);Pbo=r(Eet,"RoFormerModel"),Eet.forEach(t),Bbo=r(bAe," (RoFormer model)"),bAe.forEach(t),Ibo=i($),b_=n($,"LI",{});var vAe=s(b_);gle=n(vAe,"STRONG",{});var Cet=s(gle);qbo=r(Cet,"segformer"),Cet.forEach(t),Nbo=r(vAe," \u2014 "),Rq=n(vAe,"A",{href:!0});var wet=s(Rq);jbo=r(wet,"SegformerModel"),wet.forEach(t),Dbo=r(vAe," (SegFormer model)"),vAe.forEach(t),Gbo=i($),v_=n($,"LI",{});var FAe=s(v_);hle=n(FAe,"STRONG",{});var Aet=s(hle);Obo=r(Aet,"sew"),Aet.forEach(t),Vbo=r(FAe," \u2014 "),Pq=n(FAe,"A",{href:!0});var yet=s(Pq);Xbo=r(yet,"SEWModel"),yet.forEach(t),zbo=r(FAe," (SEW model)"),FAe.forEach(t),Wbo=i($),F_=n($,"LI",{});var TAe=s(F_);ple=n(TAe,"STRONG",{});var Let=s(ple);Qbo=r(Let,"sew-d"),Let.forEach(t),Hbo=r(TAe," \u2014 "),Bq=n(TAe,"A",{href:!0});var xet=s(Bq);Ubo=r(xet,"SEWDModel"),xet.forEach(t),Jbo=r(TAe," (SEW-D model)"),TAe.forEach(t),Ybo=i($),T_=n($,"LI",{});var MAe=s(T_);_le=n(MAe,"STRONG",{});var $et=s(_le);Kbo=r($et,"speech_to_text"),$et.forEach(t),Zbo=r(MAe," \u2014 "),Iq=n(MAe,"A",{href:!0});var ket=s(Iq);e2o=r(ket,"Speech2TextModel"),ket.forEach(t),o2o=r(MAe," (Speech2Text model)"),MAe.forEach(t),r2o=i($),M_=n($,"LI",{});var EAe=s(M_);ule=n(EAe,"STRONG",{});var Set=s(ule);t2o=r(Set,"splinter"),Set.forEach(t),a2o=r(EAe," \u2014 "),qq=n(EAe,"A",{href:!0});var Ret=s(qq);n2o=r(Ret,"SplinterModel"),Ret.forEach(t),s2o=r(EAe," (Splinter model)"),EAe.forEach(t),l2o=i($),E_=n($,"LI",{});var CAe=s(E_);ble=n(CAe,"STRONG",{});var Pet=s(ble);i2o=r(Pet,"squeezebert"),Pet.forEach(t),d2o=r(CAe," \u2014 "),Nq=n(CAe,"A",{href:!0});var Bet=s(Nq);c2o=r(Bet,"SqueezeBertModel"),Bet.forEach(t),f2o=r(CAe," (SqueezeBERT model)"),CAe.forEach(t),m2o=i($),C_=n($,"LI",{});var wAe=s(C_);vle=n(wAe,"STRONG",{});var Iet=s(vle);g2o=r(Iet,"swin"),Iet.forEach(t),h2o=r(wAe," \u2014 "),jq=n(wAe,"A",{href:!0});var qet=s(jq);p2o=r(qet,"SwinModel"),qet.forEach(t),_2o=r(wAe," (Swin model)"),wAe.forEach(t),u2o=i($),w_=n($,"LI",{});var AAe=s(w_);Fle=n(AAe,"STRONG",{});var Net=s(Fle);b2o=r(Net,"t5"),Net.forEach(t),v2o=r(AAe," \u2014 "),Dq=n(AAe,"A",{href:!0});var jet=s(Dq);F2o=r(jet,"T5Model"),jet.forEach(t),T2o=r(AAe," (T5 model)"),AAe.forEach(t),M2o=i($),A_=n($,"LI",{});var yAe=s(A_);Tle=n(yAe,"STRONG",{});var Det=s(Tle);E2o=r(Det,"tapas"),Det.forEach(t),C2o=r(yAe," \u2014 "),Gq=n(yAe,"A",{href:!0});var Get=s(Gq);w2o=r(Get,"TapasModel"),Get.forEach(t),A2o=r(yAe," (TAPAS model)"),yAe.forEach(t),y2o=i($),y_=n($,"LI",{});var LAe=s(y_);Mle=n(LAe,"STRONG",{});var Oet=s(Mle);L2o=r(Oet,"trajectory_transformer"),Oet.forEach(t),x2o=r(LAe," \u2014 "),Oq=n(LAe,"A",{href:!0});var Vet=s(Oq);$2o=r(Vet,"TrajectoryTransformerModel"),Vet.forEach(t),k2o=r(LAe," (Trajectory Transformer model)"),LAe.forEach(t),S2o=i($),L_=n($,"LI",{});var xAe=s(L_);Ele=n(xAe,"STRONG",{});var Xet=s(Ele);R2o=r(Xet,"transfo-xl"),Xet.forEach(t),P2o=r(xAe," \u2014 "),Vq=n(xAe,"A",{href:!0});var zet=s(Vq);B2o=r(zet,"TransfoXLModel"),zet.forEach(t),I2o=r(xAe," (Transformer-XL model)"),xAe.forEach(t),q2o=i($),x_=n($,"LI",{});var $Ae=s(x_);Cle=n($Ae,"STRONG",{});var Wet=s(Cle);N2o=r(Wet,"unispeech"),Wet.forEach(t),j2o=r($Ae," \u2014 "),Xq=n($Ae,"A",{href:!0});var Qet=s(Xq);D2o=r(Qet,"UniSpeechModel"),Qet.forEach(t),G2o=r($Ae," (UniSpeech model)"),$Ae.forEach(t),O2o=i($),$_=n($,"LI",{});var kAe=s($_);wle=n(kAe,"STRONG",{});var Het=s(wle);V2o=r(Het,"unispeech-sat"),Het.forEach(t),X2o=r(kAe," \u2014 "),zq=n(kAe,"A",{href:!0});var Uet=s(zq);z2o=r(Uet,"UniSpeechSatModel"),Uet.forEach(t),W2o=r(kAe," (UniSpeechSat model)"),kAe.forEach(t),Q2o=i($),k_=n($,"LI",{});var SAe=s(k_);Ale=n(SAe,"STRONG",{});var Jet=s(Ale);H2o=r(Jet,"van"),Jet.forEach(t),U2o=r(SAe," \u2014 "),Wq=n(SAe,"A",{href:!0});var Yet=s(Wq);J2o=r(Yet,"VanModel"),Yet.forEach(t),Y2o=r(SAe," (VAN model)"),SAe.forEach(t),K2o=i($),S_=n($,"LI",{});var RAe=s(S_);yle=n(RAe,"STRONG",{});var Ket=s(yle);Z2o=r(Ket,"vilt"),Ket.forEach(t),e5o=r(RAe," \u2014 "),Qq=n(RAe,"A",{href:!0});var Zet=s(Qq);o5o=r(Zet,"ViltModel"),Zet.forEach(t),r5o=r(RAe," (ViLT model)"),RAe.forEach(t),t5o=i($),R_=n($,"LI",{});var PAe=s(R_);Lle=n(PAe,"STRONG",{});var eot=s(Lle);a5o=r(eot,"vision-text-dual-encoder"),eot.forEach(t),n5o=r(PAe," \u2014 "),Hq=n(PAe,"A",{href:!0});var oot=s(Hq);s5o=r(oot,"VisionTextDualEncoderModel"),oot.forEach(t),l5o=r(PAe," (VisionTextDualEncoder model)"),PAe.forEach(t),i5o=i($),P_=n($,"LI",{});var BAe=s(P_);xle=n(BAe,"STRONG",{});var rot=s(xle);d5o=r(rot,"visual_bert"),rot.forEach(t),c5o=r(BAe," \u2014 "),Uq=n(BAe,"A",{href:!0});var tot=s(Uq);f5o=r(tot,"VisualBertModel"),tot.forEach(t),m5o=r(BAe," (VisualBert model)"),BAe.forEach(t),g5o=i($),B_=n($,"LI",{});var IAe=s(B_);$le=n(IAe,"STRONG",{});var aot=s($le);h5o=r(aot,"vit"),aot.forEach(t),p5o=r(IAe," \u2014 "),Jq=n(IAe,"A",{href:!0});var not=s(Jq);_5o=r(not,"ViTModel"),not.forEach(t),u5o=r(IAe," (ViT model)"),IAe.forEach(t),b5o=i($),I_=n($,"LI",{});var qAe=s(I_);kle=n(qAe,"STRONG",{});var sot=s(kle);v5o=r(sot,"vit_mae"),sot.forEach(t),F5o=r(qAe," \u2014 "),Yq=n(qAe,"A",{href:!0});var lot=s(Yq);T5o=r(lot,"ViTMAEModel"),lot.forEach(t),M5o=r(qAe," (ViTMAE model)"),qAe.forEach(t),E5o=i($),q_=n($,"LI",{});var NAe=s(q_);Sle=n(NAe,"STRONG",{});var iot=s(Sle);C5o=r(iot,"wav2vec2"),iot.forEach(t),w5o=r(NAe," \u2014 "),Kq=n(NAe,"A",{href:!0});var dot=s(Kq);A5o=r(dot,"Wav2Vec2Model"),dot.forEach(t),y5o=r(NAe," (Wav2Vec2 model)"),NAe.forEach(t),L5o=i($),N_=n($,"LI",{});var jAe=s(N_);Rle=n(jAe,"STRONG",{});var cot=s(Rle);x5o=r(cot,"wav2vec2-conformer"),cot.forEach(t),$5o=r(jAe," \u2014 "),Zq=n(jAe,"A",{href:!0});var fot=s(Zq);k5o=r(fot,"Wav2Vec2ConformerModel"),fot.forEach(t),S5o=r(jAe," (Wav2Vec2-Conformer model)"),jAe.forEach(t),R5o=i($),j_=n($,"LI",{});var DAe=s(j_);Ple=n(DAe,"STRONG",{});var mot=s(Ple);P5o=r(mot,"wavlm"),mot.forEach(t),B5o=r(DAe," \u2014 "),eN=n(DAe,"A",{href:!0});var got=s(eN);I5o=r(got,"WavLMModel"),got.forEach(t),q5o=r(DAe," (WavLM model)"),DAe.forEach(t),N5o=i($),D_=n($,"LI",{});var GAe=s(D_);Ble=n(GAe,"STRONG",{});var hot=s(Ble);j5o=r(hot,"xglm"),hot.forEach(t),D5o=r(GAe," \u2014 "),oN=n(GAe,"A",{href:!0});var pot=s(oN);G5o=r(pot,"XGLMModel"),pot.forEach(t),O5o=r(GAe," (XGLM model)"),GAe.forEach(t),V5o=i($),G_=n($,"LI",{});var OAe=s(G_);Ile=n(OAe,"STRONG",{});var _ot=s(Ile);X5o=r(_ot,"xlm"),_ot.forEach(t),z5o=r(OAe," \u2014 "),rN=n(OAe,"A",{href:!0});var uot=s(rN);W5o=r(uot,"XLMModel"),uot.forEach(t),Q5o=r(OAe," (XLM model)"),OAe.forEach(t),H5o=i($),O_=n($,"LI",{});var VAe=s(O_);qle=n(VAe,"STRONG",{});var bot=s(qle);U5o=r(bot,"xlm-prophetnet"),bot.forEach(t),J5o=r(VAe," \u2014 "),tN=n(VAe,"A",{href:!0});var vot=s(tN);Y5o=r(vot,"XLMProphetNetModel"),vot.forEach(t),K5o=r(VAe," (XLMProphetNet model)"),VAe.forEach(t),Z5o=i($),V_=n($,"LI",{});var XAe=s(V_);Nle=n(XAe,"STRONG",{});var Fot=s(Nle);evo=r(Fot,"xlm-roberta"),Fot.forEach(t),ovo=r(XAe," \u2014 "),aN=n(XAe,"A",{href:!0});var Tot=s(aN);rvo=r(Tot,"XLMRobertaModel"),Tot.forEach(t),tvo=r(XAe," (XLM-RoBERTa model)"),XAe.forEach(t),avo=i($),X_=n($,"LI",{});var zAe=s(X_);jle=n(zAe,"STRONG",{});var Mot=s(jle);nvo=r(Mot,"xlm-roberta-xl"),Mot.forEach(t),svo=r(zAe," \u2014 "),nN=n(zAe,"A",{href:!0});var Eot=s(nN);lvo=r(Eot,"XLMRobertaXLModel"),Eot.forEach(t),ivo=r(zAe," (XLM-RoBERTa-XL model)"),zAe.forEach(t),dvo=i($),z_=n($,"LI",{});var WAe=s(z_);Dle=n(WAe,"STRONG",{});var Cot=s(Dle);cvo=r(Cot,"xlnet"),Cot.forEach(t),fvo=r(WAe," \u2014 "),sN=n(WAe,"A",{href:!0});var wot=s(sN);mvo=r(wot,"XLNetModel"),wot.forEach(t),gvo=r(WAe," (XLNet model)"),WAe.forEach(t),hvo=i($),W_=n($,"LI",{});var QAe=s(W_);Gle=n(QAe,"STRONG",{});var Aot=s(Gle);pvo=r(Aot,"yolos"),Aot.forEach(t),_vo=r(QAe," \u2014 "),lN=n(QAe,"A",{href:!0});var yot=s(lN);uvo=r(yot,"YolosModel"),yot.forEach(t),bvo=r(QAe," (YOLOS model)"),QAe.forEach(t),vvo=i($),Q_=n($,"LI",{});var HAe=s(Q_);Ole=n(HAe,"STRONG",{});var Lot=s(Ole);Fvo=r(Lot,"yoso"),Lot.forEach(t),Tvo=r(HAe," \u2014 "),iN=n(HAe,"A",{href:!0});var xot=s(iN);Mvo=r(xot,"YosoModel"),xot.forEach(t),Evo=r(HAe," (YOSO model)"),HAe.forEach(t),$.forEach(t),Cvo=i(oa),H_=n(oa,"P",{});var UAe=s(H_);wvo=r(UAe,"The model is set in evaluation mode by default using "),Vle=n(UAe,"CODE",{});var $ot=s(Vle);Avo=r($ot,"model.eval()"),$ot.forEach(t),yvo=r(UAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xle=n(UAe,"CODE",{});var kot=s(Xle);Lvo=r(kot,"model.train()"),kot.forEach(t),UAe.forEach(t),xvo=i(oa),T(U_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),$qe=i(f),yi=n(f,"H2",{class:!0});var Pje=s(yi);J_=n(Pje,"A",{id:!0,class:!0,href:!0});var Sot=s(J_);zle=n(Sot,"SPAN",{});var Rot=s(zle);T(UA.$$.fragment,Rot),Rot.forEach(t),Sot.forEach(t),$vo=i(Pje),Wle=n(Pje,"SPAN",{});var Pot=s(Wle);kvo=r(Pot,"AutoModelForPreTraining"),Pot.forEach(t),Pje.forEach(t),kqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(JA.$$.fragment,Gs),Svo=i(Gs),Li=n(Gs,"P",{});var JK=s(Li);Rvo=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dN=n(JK,"A",{href:!0});var Bot=s(dN);Pvo=r(Bot,"from_pretrained()"),Bot.forEach(t),Bvo=r(JK," class method or the "),cN=n(JK,"A",{href:!0});var Iot=s(cN);Ivo=r(Iot,"from_config()"),Iot.forEach(t),qvo=r(JK,` class
method.`),JK.forEach(t),Nvo=i(Gs),YA=n(Gs,"P",{});var Bje=s(YA);jvo=r(Bje,"This class cannot be instantiated directly using "),Qle=n(Bje,"CODE",{});var qot=s(Qle);Dvo=r(qot,"__init__()"),qot.forEach(t),Gvo=r(Bje," (throws an error)."),Bje.forEach(t),Ovo=i(Gs),at=n(Gs,"DIV",{class:!0});var Cw=s(at);T(KA.$$.fragment,Cw),Vvo=i(Cw),Hle=n(Cw,"P",{});var Not=s(Hle);Xvo=r(Not,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Not.forEach(t),zvo=i(Cw),xi=n(Cw,"P",{});var YK=s(xi);Wvo=r(YK,`Note:
Loading a model from its configuration file does `),Ule=n(YK,"STRONG",{});var jot=s(Ule);Qvo=r(jot,"not"),jot.forEach(t),Hvo=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=n(YK,"A",{href:!0});var Dot=s(fN);Uvo=r(Dot,"from_pretrained()"),Dot.forEach(t),Jvo=r(YK," to load the model weights."),YK.forEach(t),Yvo=i(Cw),T(Y_.$$.fragment,Cw),Cw.forEach(t),Kvo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(ZA.$$.fragment,ra),Zvo=i(ra),Jle=n(ra,"P",{});var Got=s(Jle);eFo=r(Got,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Got.forEach(t),oFo=i(ra),xa=n(ra,"P",{});var ww=s(xa);rFo=r(ww,"The model class to instantiate is selected based on the "),Yle=n(ww,"CODE",{});var Oot=s(Yle);tFo=r(Oot,"model_type"),Oot.forEach(t),aFo=r(ww,` property of the config object (either
passed as an argument or loaded from `),Kle=n(ww,"CODE",{});var Vot=s(Kle);nFo=r(Vot,"pretrained_model_name_or_path"),Vot.forEach(t),sFo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zle=n(ww,"CODE",{});var Xot=s(Zle);lFo=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),iFo=r(ww,":"),ww.forEach(t),dFo=i(ra),G=n(ra,"UL",{});var O=s(G);K_=n(O,"LI",{});var JAe=s(K_);eie=n(JAe,"STRONG",{});var zot=s(eie);cFo=r(zot,"albert"),zot.forEach(t),fFo=r(JAe," \u2014 "),mN=n(JAe,"A",{href:!0});var Wot=s(mN);mFo=r(Wot,"AlbertForPreTraining"),Wot.forEach(t),gFo=r(JAe," (ALBERT model)"),JAe.forEach(t),hFo=i(O),Z_=n(O,"LI",{});var YAe=s(Z_);oie=n(YAe,"STRONG",{});var Qot=s(oie);pFo=r(Qot,"bart"),Qot.forEach(t),_Fo=r(YAe," \u2014 "),gN=n(YAe,"A",{href:!0});var Hot=s(gN);uFo=r(Hot,"BartForConditionalGeneration"),Hot.forEach(t),bFo=r(YAe," (BART model)"),YAe.forEach(t),vFo=i(O),eu=n(O,"LI",{});var KAe=s(eu);rie=n(KAe,"STRONG",{});var Uot=s(rie);FFo=r(Uot,"bert"),Uot.forEach(t),TFo=r(KAe," \u2014 "),hN=n(KAe,"A",{href:!0});var Jot=s(hN);MFo=r(Jot,"BertForPreTraining"),Jot.forEach(t),EFo=r(KAe," (BERT model)"),KAe.forEach(t),CFo=i(O),ou=n(O,"LI",{});var ZAe=s(ou);tie=n(ZAe,"STRONG",{});var Yot=s(tie);wFo=r(Yot,"big_bird"),Yot.forEach(t),AFo=r(ZAe," \u2014 "),pN=n(ZAe,"A",{href:!0});var Kot=s(pN);yFo=r(Kot,"BigBirdForPreTraining"),Kot.forEach(t),LFo=r(ZAe," (BigBird model)"),ZAe.forEach(t),xFo=i(O),ru=n(O,"LI",{});var eye=s(ru);aie=n(eye,"STRONG",{});var Zot=s(aie);$Fo=r(Zot,"camembert"),Zot.forEach(t),kFo=r(eye," \u2014 "),_N=n(eye,"A",{href:!0});var ert=s(_N);SFo=r(ert,"CamembertForMaskedLM"),ert.forEach(t),RFo=r(eye," (CamemBERT model)"),eye.forEach(t),PFo=i(O),tu=n(O,"LI",{});var oye=s(tu);nie=n(oye,"STRONG",{});var ort=s(nie);BFo=r(ort,"ctrl"),ort.forEach(t),IFo=r(oye," \u2014 "),uN=n(oye,"A",{href:!0});var rrt=s(uN);qFo=r(rrt,"CTRLLMHeadModel"),rrt.forEach(t),NFo=r(oye," (CTRL model)"),oye.forEach(t),jFo=i(O),au=n(O,"LI",{});var rye=s(au);sie=n(rye,"STRONG",{});var trt=s(sie);DFo=r(trt,"data2vec-text"),trt.forEach(t),GFo=r(rye," \u2014 "),bN=n(rye,"A",{href:!0});var art=s(bN);OFo=r(art,"Data2VecTextForMaskedLM"),art.forEach(t),VFo=r(rye," (Data2VecText model)"),rye.forEach(t),XFo=i(O),nu=n(O,"LI",{});var tye=s(nu);lie=n(tye,"STRONG",{});var nrt=s(lie);zFo=r(nrt,"deberta"),nrt.forEach(t),WFo=r(tye," \u2014 "),vN=n(tye,"A",{href:!0});var srt=s(vN);QFo=r(srt,"DebertaForMaskedLM"),srt.forEach(t),HFo=r(tye," (DeBERTa model)"),tye.forEach(t),UFo=i(O),su=n(O,"LI",{});var aye=s(su);iie=n(aye,"STRONG",{});var lrt=s(iie);JFo=r(lrt,"deberta-v2"),lrt.forEach(t),YFo=r(aye," \u2014 "),FN=n(aye,"A",{href:!0});var irt=s(FN);KFo=r(irt,"DebertaV2ForMaskedLM"),irt.forEach(t),ZFo=r(aye," (DeBERTa-v2 model)"),aye.forEach(t),eTo=i(O),lu=n(O,"LI",{});var nye=s(lu);die=n(nye,"STRONG",{});var drt=s(die);oTo=r(drt,"distilbert"),drt.forEach(t),rTo=r(nye," \u2014 "),TN=n(nye,"A",{href:!0});var crt=s(TN);tTo=r(crt,"DistilBertForMaskedLM"),crt.forEach(t),aTo=r(nye," (DistilBERT model)"),nye.forEach(t),nTo=i(O),iu=n(O,"LI",{});var sye=s(iu);cie=n(sye,"STRONG",{});var frt=s(cie);sTo=r(frt,"electra"),frt.forEach(t),lTo=r(sye," \u2014 "),MN=n(sye,"A",{href:!0});var mrt=s(MN);iTo=r(mrt,"ElectraForPreTraining"),mrt.forEach(t),dTo=r(sye," (ELECTRA model)"),sye.forEach(t),cTo=i(O),du=n(O,"LI",{});var lye=s(du);fie=n(lye,"STRONG",{});var grt=s(fie);fTo=r(grt,"flaubert"),grt.forEach(t),mTo=r(lye," \u2014 "),EN=n(lye,"A",{href:!0});var hrt=s(EN);gTo=r(hrt,"FlaubertWithLMHeadModel"),hrt.forEach(t),hTo=r(lye," (FlauBERT model)"),lye.forEach(t),pTo=i(O),cu=n(O,"LI",{});var iye=s(cu);mie=n(iye,"STRONG",{});var prt=s(mie);_To=r(prt,"flava"),prt.forEach(t),uTo=r(iye," \u2014 "),CN=n(iye,"A",{href:!0});var _rt=s(CN);bTo=r(_rt,"FlavaForPreTraining"),_rt.forEach(t),vTo=r(iye," (Flava model)"),iye.forEach(t),FTo=i(O),fu=n(O,"LI",{});var dye=s(fu);gie=n(dye,"STRONG",{});var urt=s(gie);TTo=r(urt,"fnet"),urt.forEach(t),MTo=r(dye," \u2014 "),wN=n(dye,"A",{href:!0});var brt=s(wN);ETo=r(brt,"FNetForPreTraining"),brt.forEach(t),CTo=r(dye," (FNet model)"),dye.forEach(t),wTo=i(O),mu=n(O,"LI",{});var cye=s(mu);hie=n(cye,"STRONG",{});var vrt=s(hie);ATo=r(vrt,"fsmt"),vrt.forEach(t),yTo=r(cye," \u2014 "),AN=n(cye,"A",{href:!0});var Frt=s(AN);LTo=r(Frt,"FSMTForConditionalGeneration"),Frt.forEach(t),xTo=r(cye," (FairSeq Machine-Translation model)"),cye.forEach(t),$To=i(O),gu=n(O,"LI",{});var fye=s(gu);pie=n(fye,"STRONG",{});var Trt=s(pie);kTo=r(Trt,"funnel"),Trt.forEach(t),STo=r(fye," \u2014 "),yN=n(fye,"A",{href:!0});var Mrt=s(yN);RTo=r(Mrt,"FunnelForPreTraining"),Mrt.forEach(t),PTo=r(fye," (Funnel Transformer model)"),fye.forEach(t),BTo=i(O),hu=n(O,"LI",{});var mye=s(hu);_ie=n(mye,"STRONG",{});var Ert=s(_ie);ITo=r(Ert,"gpt2"),Ert.forEach(t),qTo=r(mye," \u2014 "),LN=n(mye,"A",{href:!0});var Crt=s(LN);NTo=r(Crt,"GPT2LMHeadModel"),Crt.forEach(t),jTo=r(mye," (OpenAI GPT-2 model)"),mye.forEach(t),DTo=i(O),pu=n(O,"LI",{});var gye=s(pu);uie=n(gye,"STRONG",{});var wrt=s(uie);GTo=r(wrt,"ibert"),wrt.forEach(t),OTo=r(gye," \u2014 "),xN=n(gye,"A",{href:!0});var Art=s(xN);VTo=r(Art,"IBertForMaskedLM"),Art.forEach(t),XTo=r(gye," (I-BERT model)"),gye.forEach(t),zTo=i(O),_u=n(O,"LI",{});var hye=s(_u);bie=n(hye,"STRONG",{});var yrt=s(bie);WTo=r(yrt,"layoutlm"),yrt.forEach(t),QTo=r(hye," \u2014 "),$N=n(hye,"A",{href:!0});var Lrt=s($N);HTo=r(Lrt,"LayoutLMForMaskedLM"),Lrt.forEach(t),UTo=r(hye," (LayoutLM model)"),hye.forEach(t),JTo=i(O),uu=n(O,"LI",{});var pye=s(uu);vie=n(pye,"STRONG",{});var xrt=s(vie);YTo=r(xrt,"longformer"),xrt.forEach(t),KTo=r(pye," \u2014 "),kN=n(pye,"A",{href:!0});var $rt=s(kN);ZTo=r($rt,"LongformerForMaskedLM"),$rt.forEach(t),e9o=r(pye," (Longformer model)"),pye.forEach(t),o9o=i(O),bu=n(O,"LI",{});var _ye=s(bu);Fie=n(_ye,"STRONG",{});var krt=s(Fie);r9o=r(krt,"lxmert"),krt.forEach(t),t9o=r(_ye," \u2014 "),SN=n(_ye,"A",{href:!0});var Srt=s(SN);a9o=r(Srt,"LxmertForPreTraining"),Srt.forEach(t),n9o=r(_ye," (LXMERT model)"),_ye.forEach(t),s9o=i(O),vu=n(O,"LI",{});var uye=s(vu);Tie=n(uye,"STRONG",{});var Rrt=s(Tie);l9o=r(Rrt,"megatron-bert"),Rrt.forEach(t),i9o=r(uye," \u2014 "),RN=n(uye,"A",{href:!0});var Prt=s(RN);d9o=r(Prt,"MegatronBertForPreTraining"),Prt.forEach(t),c9o=r(uye," (MegatronBert model)"),uye.forEach(t),f9o=i(O),Fu=n(O,"LI",{});var bye=s(Fu);Mie=n(bye,"STRONG",{});var Brt=s(Mie);m9o=r(Brt,"mobilebert"),Brt.forEach(t),g9o=r(bye," \u2014 "),PN=n(bye,"A",{href:!0});var Irt=s(PN);h9o=r(Irt,"MobileBertForPreTraining"),Irt.forEach(t),p9o=r(bye," (MobileBERT model)"),bye.forEach(t),_9o=i(O),Tu=n(O,"LI",{});var vye=s(Tu);Eie=n(vye,"STRONG",{});var qrt=s(Eie);u9o=r(qrt,"mpnet"),qrt.forEach(t),b9o=r(vye," \u2014 "),BN=n(vye,"A",{href:!0});var Nrt=s(BN);v9o=r(Nrt,"MPNetForMaskedLM"),Nrt.forEach(t),F9o=r(vye," (MPNet model)"),vye.forEach(t),T9o=i(O),Mu=n(O,"LI",{});var Fye=s(Mu);Cie=n(Fye,"STRONG",{});var jrt=s(Cie);M9o=r(jrt,"openai-gpt"),jrt.forEach(t),E9o=r(Fye," \u2014 "),IN=n(Fye,"A",{href:!0});var Drt=s(IN);C9o=r(Drt,"OpenAIGPTLMHeadModel"),Drt.forEach(t),w9o=r(Fye," (OpenAI GPT model)"),Fye.forEach(t),A9o=i(O),Eu=n(O,"LI",{});var Tye=s(Eu);wie=n(Tye,"STRONG",{});var Grt=s(wie);y9o=r(Grt,"retribert"),Grt.forEach(t),L9o=r(Tye," \u2014 "),qN=n(Tye,"A",{href:!0});var Ort=s(qN);x9o=r(Ort,"RetriBertModel"),Ort.forEach(t),$9o=r(Tye," (RetriBERT model)"),Tye.forEach(t),k9o=i(O),Cu=n(O,"LI",{});var Mye=s(Cu);Aie=n(Mye,"STRONG",{});var Vrt=s(Aie);S9o=r(Vrt,"roberta"),Vrt.forEach(t),R9o=r(Mye," \u2014 "),NN=n(Mye,"A",{href:!0});var Xrt=s(NN);P9o=r(Xrt,"RobertaForMaskedLM"),Xrt.forEach(t),B9o=r(Mye," (RoBERTa model)"),Mye.forEach(t),I9o=i(O),wu=n(O,"LI",{});var Eye=s(wu);yie=n(Eye,"STRONG",{});var zrt=s(yie);q9o=r(zrt,"splinter"),zrt.forEach(t),N9o=r(Eye," \u2014 "),jN=n(Eye,"A",{href:!0});var Wrt=s(jN);j9o=r(Wrt,"SplinterForPreTraining"),Wrt.forEach(t),D9o=r(Eye," (Splinter model)"),Eye.forEach(t),G9o=i(O),Au=n(O,"LI",{});var Cye=s(Au);Lie=n(Cye,"STRONG",{});var Qrt=s(Lie);O9o=r(Qrt,"squeezebert"),Qrt.forEach(t),V9o=r(Cye," \u2014 "),DN=n(Cye,"A",{href:!0});var Hrt=s(DN);X9o=r(Hrt,"SqueezeBertForMaskedLM"),Hrt.forEach(t),z9o=r(Cye," (SqueezeBERT model)"),Cye.forEach(t),W9o=i(O),yu=n(O,"LI",{});var wye=s(yu);xie=n(wye,"STRONG",{});var Urt=s(xie);Q9o=r(Urt,"t5"),Urt.forEach(t),H9o=r(wye," \u2014 "),GN=n(wye,"A",{href:!0});var Jrt=s(GN);U9o=r(Jrt,"T5ForConditionalGeneration"),Jrt.forEach(t),J9o=r(wye," (T5 model)"),wye.forEach(t),Y9o=i(O),Lu=n(O,"LI",{});var Aye=s(Lu);$ie=n(Aye,"STRONG",{});var Yrt=s($ie);K9o=r(Yrt,"tapas"),Yrt.forEach(t),Z9o=r(Aye," \u2014 "),ON=n(Aye,"A",{href:!0});var Krt=s(ON);eMo=r(Krt,"TapasForMaskedLM"),Krt.forEach(t),oMo=r(Aye," (TAPAS model)"),Aye.forEach(t),rMo=i(O),xu=n(O,"LI",{});var yye=s(xu);kie=n(yye,"STRONG",{});var Zrt=s(kie);tMo=r(Zrt,"transfo-xl"),Zrt.forEach(t),aMo=r(yye," \u2014 "),VN=n(yye,"A",{href:!0});var ett=s(VN);nMo=r(ett,"TransfoXLLMHeadModel"),ett.forEach(t),sMo=r(yye," (Transformer-XL model)"),yye.forEach(t),lMo=i(O),$u=n(O,"LI",{});var Lye=s($u);Sie=n(Lye,"STRONG",{});var ott=s(Sie);iMo=r(ott,"unispeech"),ott.forEach(t),dMo=r(Lye," \u2014 "),XN=n(Lye,"A",{href:!0});var rtt=s(XN);cMo=r(rtt,"UniSpeechForPreTraining"),rtt.forEach(t),fMo=r(Lye," (UniSpeech model)"),Lye.forEach(t),mMo=i(O),ku=n(O,"LI",{});var xye=s(ku);Rie=n(xye,"STRONG",{});var ttt=s(Rie);gMo=r(ttt,"unispeech-sat"),ttt.forEach(t),hMo=r(xye," \u2014 "),zN=n(xye,"A",{href:!0});var att=s(zN);pMo=r(att,"UniSpeechSatForPreTraining"),att.forEach(t),_Mo=r(xye," (UniSpeechSat model)"),xye.forEach(t),uMo=i(O),Su=n(O,"LI",{});var $ye=s(Su);Pie=n($ye,"STRONG",{});var ntt=s(Pie);bMo=r(ntt,"visual_bert"),ntt.forEach(t),vMo=r($ye," \u2014 "),WN=n($ye,"A",{href:!0});var stt=s(WN);FMo=r(stt,"VisualBertForPreTraining"),stt.forEach(t),TMo=r($ye," (VisualBert model)"),$ye.forEach(t),MMo=i(O),Ru=n(O,"LI",{});var kye=s(Ru);Bie=n(kye,"STRONG",{});var ltt=s(Bie);EMo=r(ltt,"vit_mae"),ltt.forEach(t),CMo=r(kye," \u2014 "),QN=n(kye,"A",{href:!0});var itt=s(QN);wMo=r(itt,"ViTMAEForPreTraining"),itt.forEach(t),AMo=r(kye," (ViTMAE model)"),kye.forEach(t),yMo=i(O),Pu=n(O,"LI",{});var Sye=s(Pu);Iie=n(Sye,"STRONG",{});var dtt=s(Iie);LMo=r(dtt,"wav2vec2"),dtt.forEach(t),xMo=r(Sye," \u2014 "),HN=n(Sye,"A",{href:!0});var ctt=s(HN);$Mo=r(ctt,"Wav2Vec2ForPreTraining"),ctt.forEach(t),kMo=r(Sye," (Wav2Vec2 model)"),Sye.forEach(t),SMo=i(O),Bu=n(O,"LI",{});var Rye=s(Bu);qie=n(Rye,"STRONG",{});var ftt=s(qie);RMo=r(ftt,"wav2vec2-conformer"),ftt.forEach(t),PMo=r(Rye," \u2014 "),UN=n(Rye,"A",{href:!0});var mtt=s(UN);BMo=r(mtt,"Wav2Vec2ConformerForPreTraining"),mtt.forEach(t),IMo=r(Rye," (Wav2Vec2-Conformer model)"),Rye.forEach(t),qMo=i(O),Iu=n(O,"LI",{});var Pye=s(Iu);Nie=n(Pye,"STRONG",{});var gtt=s(Nie);NMo=r(gtt,"xlm"),gtt.forEach(t),jMo=r(Pye," \u2014 "),JN=n(Pye,"A",{href:!0});var htt=s(JN);DMo=r(htt,"XLMWithLMHeadModel"),htt.forEach(t),GMo=r(Pye," (XLM model)"),Pye.forEach(t),OMo=i(O),qu=n(O,"LI",{});var Bye=s(qu);jie=n(Bye,"STRONG",{});var ptt=s(jie);VMo=r(ptt,"xlm-roberta"),ptt.forEach(t),XMo=r(Bye," \u2014 "),YN=n(Bye,"A",{href:!0});var _tt=s(YN);zMo=r(_tt,"XLMRobertaForMaskedLM"),_tt.forEach(t),WMo=r(Bye," (XLM-RoBERTa model)"),Bye.forEach(t),QMo=i(O),Nu=n(O,"LI",{});var Iye=s(Nu);Die=n(Iye,"STRONG",{});var utt=s(Die);HMo=r(utt,"xlm-roberta-xl"),utt.forEach(t),UMo=r(Iye," \u2014 "),KN=n(Iye,"A",{href:!0});var btt=s(KN);JMo=r(btt,"XLMRobertaXLForMaskedLM"),btt.forEach(t),YMo=r(Iye," (XLM-RoBERTa-XL model)"),Iye.forEach(t),KMo=i(O),ju=n(O,"LI",{});var qye=s(ju);Gie=n(qye,"STRONG",{});var vtt=s(Gie);ZMo=r(vtt,"xlnet"),vtt.forEach(t),e4o=r(qye," \u2014 "),ZN=n(qye,"A",{href:!0});var Ftt=s(ZN);o4o=r(Ftt,"XLNetLMHeadModel"),Ftt.forEach(t),r4o=r(qye," (XLNet model)"),qye.forEach(t),O.forEach(t),t4o=i(ra),Du=n(ra,"P",{});var Nye=s(Du);a4o=r(Nye,"The model is set in evaluation mode by default using "),Oie=n(Nye,"CODE",{});var Ttt=s(Oie);n4o=r(Ttt,"model.eval()"),Ttt.forEach(t),s4o=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=n(Nye,"CODE",{});var Mtt=s(Vie);l4o=r(Mtt,"model.train()"),Mtt.forEach(t),Nye.forEach(t),i4o=i(ra),T(Gu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Sqe=i(f),$i=n(f,"H2",{class:!0});var Ije=s($i);Ou=n(Ije,"A",{id:!0,class:!0,href:!0});var Ett=s(Ou);Xie=n(Ett,"SPAN",{});var Ctt=s(Xie);T(ey.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),d4o=i(Ije),zie=n(Ije,"SPAN",{});var wtt=s(zie);c4o=r(wtt,"AutoModelForCausalLM"),wtt.forEach(t),Ije.forEach(t),Rqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(oy.$$.fragment,Os),f4o=i(Os),ki=n(Os,"P",{});var KK=s(ki);m4o=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ej=n(KK,"A",{href:!0});var Att=s(ej);g4o=r(Att,"from_pretrained()"),Att.forEach(t),h4o=r(KK," class method or the "),oj=n(KK,"A",{href:!0});var ytt=s(oj);p4o=r(ytt,"from_config()"),ytt.forEach(t),_4o=r(KK,` class
method.`),KK.forEach(t),u4o=i(Os),ry=n(Os,"P",{});var qje=s(ry);b4o=r(qje,"This class cannot be instantiated directly using "),Wie=n(qje,"CODE",{});var Ltt=s(Wie);v4o=r(Ltt,"__init__()"),Ltt.forEach(t),F4o=r(qje," (throws an error)."),qje.forEach(t),T4o=i(Os),nt=n(Os,"DIV",{class:!0});var Aw=s(nt);T(ty.$$.fragment,Aw),M4o=i(Aw),Qie=n(Aw,"P",{});var xtt=s(Qie);E4o=r(xtt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xtt.forEach(t),C4o=i(Aw),Si=n(Aw,"P",{});var ZK=s(Si);w4o=r(ZK,`Note:
Loading a model from its configuration file does `),Hie=n(ZK,"STRONG",{});var $tt=s(Hie);A4o=r($tt,"not"),$tt.forEach(t),y4o=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=n(ZK,"A",{href:!0});var ktt=s(rj);L4o=r(ktt,"from_pretrained()"),ktt.forEach(t),x4o=r(ZK," to load the model weights."),ZK.forEach(t),$4o=i(Aw),T(Vu.$$.fragment,Aw),Aw.forEach(t),k4o=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(ay.$$.fragment,ta),S4o=i(ta),Uie=n(ta,"P",{});var Stt=s(Uie);R4o=r(Stt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Stt.forEach(t),P4o=i(ta),$a=n(ta,"P",{});var yw=s($a);B4o=r(yw,"The model class to instantiate is selected based on the "),Jie=n(yw,"CODE",{});var Rtt=s(Jie);I4o=r(Rtt,"model_type"),Rtt.forEach(t),q4o=r(yw,` property of the config object (either
passed as an argument or loaded from `),Yie=n(yw,"CODE",{});var Ptt=s(Yie);N4o=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),j4o=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(yw,"CODE",{});var Btt=s(Kie);D4o=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),G4o=r(yw,":"),yw.forEach(t),O4o=i(ta),z=n(ta,"UL",{});var W=s(z);Xu=n(W,"LI",{});var jye=s(Xu);Zie=n(jye,"STRONG",{});var Itt=s(Zie);V4o=r(Itt,"bart"),Itt.forEach(t),X4o=r(jye," \u2014 "),tj=n(jye,"A",{href:!0});var qtt=s(tj);z4o=r(qtt,"BartForCausalLM"),qtt.forEach(t),W4o=r(jye," (BART model)"),jye.forEach(t),Q4o=i(W),zu=n(W,"LI",{});var Dye=s(zu);ede=n(Dye,"STRONG",{});var Ntt=s(ede);H4o=r(Ntt,"bert"),Ntt.forEach(t),U4o=r(Dye," \u2014 "),aj=n(Dye,"A",{href:!0});var jtt=s(aj);J4o=r(jtt,"BertLMHeadModel"),jtt.forEach(t),Y4o=r(Dye," (BERT model)"),Dye.forEach(t),K4o=i(W),Wu=n(W,"LI",{});var Gye=s(Wu);ode=n(Gye,"STRONG",{});var Dtt=s(ode);Z4o=r(Dtt,"bert-generation"),Dtt.forEach(t),eEo=r(Gye," \u2014 "),nj=n(Gye,"A",{href:!0});var Gtt=s(nj);oEo=r(Gtt,"BertGenerationDecoder"),Gtt.forEach(t),rEo=r(Gye," (Bert Generation model)"),Gye.forEach(t),tEo=i(W),Qu=n(W,"LI",{});var Oye=s(Qu);rde=n(Oye,"STRONG",{});var Ott=s(rde);aEo=r(Ott,"big_bird"),Ott.forEach(t),nEo=r(Oye," \u2014 "),sj=n(Oye,"A",{href:!0});var Vtt=s(sj);sEo=r(Vtt,"BigBirdForCausalLM"),Vtt.forEach(t),lEo=r(Oye," (BigBird model)"),Oye.forEach(t),iEo=i(W),Hu=n(W,"LI",{});var Vye=s(Hu);tde=n(Vye,"STRONG",{});var Xtt=s(tde);dEo=r(Xtt,"bigbird_pegasus"),Xtt.forEach(t),cEo=r(Vye," \u2014 "),lj=n(Vye,"A",{href:!0});var ztt=s(lj);fEo=r(ztt,"BigBirdPegasusForCausalLM"),ztt.forEach(t),mEo=r(Vye," (BigBirdPegasus model)"),Vye.forEach(t),gEo=i(W),Uu=n(W,"LI",{});var Xye=s(Uu);ade=n(Xye,"STRONG",{});var Wtt=s(ade);hEo=r(Wtt,"blenderbot"),Wtt.forEach(t),pEo=r(Xye," \u2014 "),ij=n(Xye,"A",{href:!0});var Qtt=s(ij);_Eo=r(Qtt,"BlenderbotForCausalLM"),Qtt.forEach(t),uEo=r(Xye," (Blenderbot model)"),Xye.forEach(t),bEo=i(W),Ju=n(W,"LI",{});var zye=s(Ju);nde=n(zye,"STRONG",{});var Htt=s(nde);vEo=r(Htt,"blenderbot-small"),Htt.forEach(t),FEo=r(zye," \u2014 "),dj=n(zye,"A",{href:!0});var Utt=s(dj);TEo=r(Utt,"BlenderbotSmallForCausalLM"),Utt.forEach(t),MEo=r(zye," (BlenderbotSmall model)"),zye.forEach(t),EEo=i(W),Yu=n(W,"LI",{});var Wye=s(Yu);sde=n(Wye,"STRONG",{});var Jtt=s(sde);CEo=r(Jtt,"camembert"),Jtt.forEach(t),wEo=r(Wye," \u2014 "),cj=n(Wye,"A",{href:!0});var Ytt=s(cj);AEo=r(Ytt,"CamembertForCausalLM"),Ytt.forEach(t),yEo=r(Wye," (CamemBERT model)"),Wye.forEach(t),LEo=i(W),Ku=n(W,"LI",{});var Qye=s(Ku);lde=n(Qye,"STRONG",{});var Ktt=s(lde);xEo=r(Ktt,"ctrl"),Ktt.forEach(t),$Eo=r(Qye," \u2014 "),fj=n(Qye,"A",{href:!0});var Ztt=s(fj);kEo=r(Ztt,"CTRLLMHeadModel"),Ztt.forEach(t),SEo=r(Qye," (CTRL model)"),Qye.forEach(t),REo=i(W),Zu=n(W,"LI",{});var Hye=s(Zu);ide=n(Hye,"STRONG",{});var eat=s(ide);PEo=r(eat,"data2vec-text"),eat.forEach(t),BEo=r(Hye," \u2014 "),mj=n(Hye,"A",{href:!0});var oat=s(mj);IEo=r(oat,"Data2VecTextForCausalLM"),oat.forEach(t),qEo=r(Hye," (Data2VecText model)"),Hye.forEach(t),NEo=i(W),e6=n(W,"LI",{});var Uye=s(e6);dde=n(Uye,"STRONG",{});var rat=s(dde);jEo=r(rat,"electra"),rat.forEach(t),DEo=r(Uye," \u2014 "),gj=n(Uye,"A",{href:!0});var tat=s(gj);GEo=r(tat,"ElectraForCausalLM"),tat.forEach(t),OEo=r(Uye," (ELECTRA model)"),Uye.forEach(t),VEo=i(W),o6=n(W,"LI",{});var Jye=s(o6);cde=n(Jye,"STRONG",{});var aat=s(cde);XEo=r(aat,"gpt2"),aat.forEach(t),zEo=r(Jye," \u2014 "),hj=n(Jye,"A",{href:!0});var nat=s(hj);WEo=r(nat,"GPT2LMHeadModel"),nat.forEach(t),QEo=r(Jye," (OpenAI GPT-2 model)"),Jye.forEach(t),HEo=i(W),r6=n(W,"LI",{});var Yye=s(r6);fde=n(Yye,"STRONG",{});var sat=s(fde);UEo=r(sat,"gpt_neo"),sat.forEach(t),JEo=r(Yye," \u2014 "),pj=n(Yye,"A",{href:!0});var lat=s(pj);YEo=r(lat,"GPTNeoForCausalLM"),lat.forEach(t),KEo=r(Yye," (GPT Neo model)"),Yye.forEach(t),ZEo=i(W),t6=n(W,"LI",{});var Kye=s(t6);mde=n(Kye,"STRONG",{});var iat=s(mde);eCo=r(iat,"gpt_neox"),iat.forEach(t),oCo=r(Kye," \u2014 "),_j=n(Kye,"A",{href:!0});var dat=s(_j);rCo=r(dat,"GPTNeoXForCausalLM"),dat.forEach(t),tCo=r(Kye," (GPT NeoX model)"),Kye.forEach(t),aCo=i(W),a6=n(W,"LI",{});var Zye=s(a6);gde=n(Zye,"STRONG",{});var cat=s(gde);nCo=r(cat,"gptj"),cat.forEach(t),sCo=r(Zye," \u2014 "),uj=n(Zye,"A",{href:!0});var fat=s(uj);lCo=r(fat,"GPTJForCausalLM"),fat.forEach(t),iCo=r(Zye," (GPT-J model)"),Zye.forEach(t),dCo=i(W),n6=n(W,"LI",{});var e8e=s(n6);hde=n(e8e,"STRONG",{});var mat=s(hde);cCo=r(mat,"marian"),mat.forEach(t),fCo=r(e8e," \u2014 "),bj=n(e8e,"A",{href:!0});var gat=s(bj);mCo=r(gat,"MarianForCausalLM"),gat.forEach(t),gCo=r(e8e," (Marian model)"),e8e.forEach(t),hCo=i(W),s6=n(W,"LI",{});var o8e=s(s6);pde=n(o8e,"STRONG",{});var hat=s(pde);pCo=r(hat,"mbart"),hat.forEach(t),_Co=r(o8e," \u2014 "),vj=n(o8e,"A",{href:!0});var pat=s(vj);uCo=r(pat,"MBartForCausalLM"),pat.forEach(t),bCo=r(o8e," (mBART model)"),o8e.forEach(t),vCo=i(W),l6=n(W,"LI",{});var r8e=s(l6);_de=n(r8e,"STRONG",{});var _at=s(_de);FCo=r(_at,"megatron-bert"),_at.forEach(t),TCo=r(r8e," \u2014 "),Fj=n(r8e,"A",{href:!0});var uat=s(Fj);MCo=r(uat,"MegatronBertForCausalLM"),uat.forEach(t),ECo=r(r8e," (MegatronBert model)"),r8e.forEach(t),CCo=i(W),i6=n(W,"LI",{});var t8e=s(i6);ude=n(t8e,"STRONG",{});var bat=s(ude);wCo=r(bat,"openai-gpt"),bat.forEach(t),ACo=r(t8e," \u2014 "),Tj=n(t8e,"A",{href:!0});var vat=s(Tj);yCo=r(vat,"OpenAIGPTLMHeadModel"),vat.forEach(t),LCo=r(t8e," (OpenAI GPT model)"),t8e.forEach(t),xCo=i(W),d6=n(W,"LI",{});var a8e=s(d6);bde=n(a8e,"STRONG",{});var Fat=s(bde);$Co=r(Fat,"opt"),Fat.forEach(t),kCo=r(a8e," \u2014 "),Mj=n(a8e,"A",{href:!0});var Tat=s(Mj);SCo=r(Tat,"OPTForCausalLM"),Tat.forEach(t),RCo=r(a8e," (OPT model)"),a8e.forEach(t),PCo=i(W),c6=n(W,"LI",{});var n8e=s(c6);vde=n(n8e,"STRONG",{});var Mat=s(vde);BCo=r(Mat,"pegasus"),Mat.forEach(t),ICo=r(n8e," \u2014 "),Ej=n(n8e,"A",{href:!0});var Eat=s(Ej);qCo=r(Eat,"PegasusForCausalLM"),Eat.forEach(t),NCo=r(n8e," (Pegasus model)"),n8e.forEach(t),jCo=i(W),f6=n(W,"LI",{});var s8e=s(f6);Fde=n(s8e,"STRONG",{});var Cat=s(Fde);DCo=r(Cat,"plbart"),Cat.forEach(t),GCo=r(s8e," \u2014 "),Cj=n(s8e,"A",{href:!0});var wat=s(Cj);OCo=r(wat,"PLBartForCausalLM"),wat.forEach(t),VCo=r(s8e," (PLBart model)"),s8e.forEach(t),XCo=i(W),m6=n(W,"LI",{});var l8e=s(m6);Tde=n(l8e,"STRONG",{});var Aat=s(Tde);zCo=r(Aat,"prophetnet"),Aat.forEach(t),WCo=r(l8e," \u2014 "),wj=n(l8e,"A",{href:!0});var yat=s(wj);QCo=r(yat,"ProphetNetForCausalLM"),yat.forEach(t),HCo=r(l8e," (ProphetNet model)"),l8e.forEach(t),UCo=i(W),g6=n(W,"LI",{});var i8e=s(g6);Mde=n(i8e,"STRONG",{});var Lat=s(Mde);JCo=r(Lat,"qdqbert"),Lat.forEach(t),YCo=r(i8e," \u2014 "),Aj=n(i8e,"A",{href:!0});var xat=s(Aj);KCo=r(xat,"QDQBertLMHeadModel"),xat.forEach(t),ZCo=r(i8e," (QDQBert model)"),i8e.forEach(t),e3o=i(W),h6=n(W,"LI",{});var d8e=s(h6);Ede=n(d8e,"STRONG",{});var $at=s(Ede);o3o=r($at,"reformer"),$at.forEach(t),r3o=r(d8e," \u2014 "),yj=n(d8e,"A",{href:!0});var kat=s(yj);t3o=r(kat,"ReformerModelWithLMHead"),kat.forEach(t),a3o=r(d8e," (Reformer model)"),d8e.forEach(t),n3o=i(W),p6=n(W,"LI",{});var c8e=s(p6);Cde=n(c8e,"STRONG",{});var Sat=s(Cde);s3o=r(Sat,"rembert"),Sat.forEach(t),l3o=r(c8e," \u2014 "),Lj=n(c8e,"A",{href:!0});var Rat=s(Lj);i3o=r(Rat,"RemBertForCausalLM"),Rat.forEach(t),d3o=r(c8e," (RemBERT model)"),c8e.forEach(t),c3o=i(W),_6=n(W,"LI",{});var f8e=s(_6);wde=n(f8e,"STRONG",{});var Pat=s(wde);f3o=r(Pat,"roberta"),Pat.forEach(t),m3o=r(f8e," \u2014 "),xj=n(f8e,"A",{href:!0});var Bat=s(xj);g3o=r(Bat,"RobertaForCausalLM"),Bat.forEach(t),h3o=r(f8e," (RoBERTa model)"),f8e.forEach(t),p3o=i(W),u6=n(W,"LI",{});var m8e=s(u6);Ade=n(m8e,"STRONG",{});var Iat=s(Ade);_3o=r(Iat,"roformer"),Iat.forEach(t),u3o=r(m8e," \u2014 "),$j=n(m8e,"A",{href:!0});var qat=s($j);b3o=r(qat,"RoFormerForCausalLM"),qat.forEach(t),v3o=r(m8e," (RoFormer model)"),m8e.forEach(t),F3o=i(W),b6=n(W,"LI",{});var g8e=s(b6);yde=n(g8e,"STRONG",{});var Nat=s(yde);T3o=r(Nat,"speech_to_text_2"),Nat.forEach(t),M3o=r(g8e," \u2014 "),kj=n(g8e,"A",{href:!0});var jat=s(kj);E3o=r(jat,"Speech2Text2ForCausalLM"),jat.forEach(t),C3o=r(g8e," (Speech2Text2 model)"),g8e.forEach(t),w3o=i(W),v6=n(W,"LI",{});var h8e=s(v6);Lde=n(h8e,"STRONG",{});var Dat=s(Lde);A3o=r(Dat,"transfo-xl"),Dat.forEach(t),y3o=r(h8e," \u2014 "),Sj=n(h8e,"A",{href:!0});var Gat=s(Sj);L3o=r(Gat,"TransfoXLLMHeadModel"),Gat.forEach(t),x3o=r(h8e," (Transformer-XL model)"),h8e.forEach(t),$3o=i(W),F6=n(W,"LI",{});var p8e=s(F6);xde=n(p8e,"STRONG",{});var Oat=s(xde);k3o=r(Oat,"trocr"),Oat.forEach(t),S3o=r(p8e," \u2014 "),Rj=n(p8e,"A",{href:!0});var Vat=s(Rj);R3o=r(Vat,"TrOCRForCausalLM"),Vat.forEach(t),P3o=r(p8e," (TrOCR model)"),p8e.forEach(t),B3o=i(W),T6=n(W,"LI",{});var _8e=s(T6);$de=n(_8e,"STRONG",{});var Xat=s($de);I3o=r(Xat,"xglm"),Xat.forEach(t),q3o=r(_8e," \u2014 "),Pj=n(_8e,"A",{href:!0});var zat=s(Pj);N3o=r(zat,"XGLMForCausalLM"),zat.forEach(t),j3o=r(_8e," (XGLM model)"),_8e.forEach(t),D3o=i(W),M6=n(W,"LI",{});var u8e=s(M6);kde=n(u8e,"STRONG",{});var Wat=s(kde);G3o=r(Wat,"xlm"),Wat.forEach(t),O3o=r(u8e," \u2014 "),Bj=n(u8e,"A",{href:!0});var Qat=s(Bj);V3o=r(Qat,"XLMWithLMHeadModel"),Qat.forEach(t),X3o=r(u8e," (XLM model)"),u8e.forEach(t),z3o=i(W),E6=n(W,"LI",{});var b8e=s(E6);Sde=n(b8e,"STRONG",{});var Hat=s(Sde);W3o=r(Hat,"xlm-prophetnet"),Hat.forEach(t),Q3o=r(b8e," \u2014 "),Ij=n(b8e,"A",{href:!0});var Uat=s(Ij);H3o=r(Uat,"XLMProphetNetForCausalLM"),Uat.forEach(t),U3o=r(b8e," (XLMProphetNet model)"),b8e.forEach(t),J3o=i(W),C6=n(W,"LI",{});var v8e=s(C6);Rde=n(v8e,"STRONG",{});var Jat=s(Rde);Y3o=r(Jat,"xlm-roberta"),Jat.forEach(t),K3o=r(v8e," \u2014 "),qj=n(v8e,"A",{href:!0});var Yat=s(qj);Z3o=r(Yat,"XLMRobertaForCausalLM"),Yat.forEach(t),ewo=r(v8e," (XLM-RoBERTa model)"),v8e.forEach(t),owo=i(W),w6=n(W,"LI",{});var F8e=s(w6);Pde=n(F8e,"STRONG",{});var Kat=s(Pde);rwo=r(Kat,"xlm-roberta-xl"),Kat.forEach(t),two=r(F8e," \u2014 "),Nj=n(F8e,"A",{href:!0});var Zat=s(Nj);awo=r(Zat,"XLMRobertaXLForCausalLM"),Zat.forEach(t),nwo=r(F8e," (XLM-RoBERTa-XL model)"),F8e.forEach(t),swo=i(W),A6=n(W,"LI",{});var T8e=s(A6);Bde=n(T8e,"STRONG",{});var ent=s(Bde);lwo=r(ent,"xlnet"),ent.forEach(t),iwo=r(T8e," \u2014 "),jj=n(T8e,"A",{href:!0});var ont=s(jj);dwo=r(ont,"XLNetLMHeadModel"),ont.forEach(t),cwo=r(T8e," (XLNet model)"),T8e.forEach(t),W.forEach(t),fwo=i(ta),y6=n(ta,"P",{});var M8e=s(y6);mwo=r(M8e,"The model is set in evaluation mode by default using "),Ide=n(M8e,"CODE",{});var rnt=s(Ide);gwo=r(rnt,"model.eval()"),rnt.forEach(t),hwo=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=n(M8e,"CODE",{});var tnt=s(qde);pwo=r(tnt,"model.train()"),tnt.forEach(t),M8e.forEach(t),_wo=i(ta),T(L6.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Pqe=i(f),Ri=n(f,"H2",{class:!0});var Nje=s(Ri);x6=n(Nje,"A",{id:!0,class:!0,href:!0});var ant=s(x6);Nde=n(ant,"SPAN",{});var nnt=s(Nde);T(ny.$$.fragment,nnt),nnt.forEach(t),ant.forEach(t),uwo=i(Nje),jde=n(Nje,"SPAN",{});var snt=s(jde);bwo=r(snt,"AutoModelForMaskedLM"),snt.forEach(t),Nje.forEach(t),Bqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(sy.$$.fragment,Vs),vwo=i(Vs),Pi=n(Vs,"P",{});var eZ=s(Pi);Fwo=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Dj=n(eZ,"A",{href:!0});var lnt=s(Dj);Two=r(lnt,"from_pretrained()"),lnt.forEach(t),Mwo=r(eZ," class method or the "),Gj=n(eZ,"A",{href:!0});var int=s(Gj);Ewo=r(int,"from_config()"),int.forEach(t),Cwo=r(eZ,` class
method.`),eZ.forEach(t),wwo=i(Vs),ly=n(Vs,"P",{});var jje=s(ly);Awo=r(jje,"This class cannot be instantiated directly using "),Dde=n(jje,"CODE",{});var dnt=s(Dde);ywo=r(dnt,"__init__()"),dnt.forEach(t),Lwo=r(jje," (throws an error)."),jje.forEach(t),xwo=i(Vs),st=n(Vs,"DIV",{class:!0});var Lw=s(st);T(iy.$$.fragment,Lw),$wo=i(Lw),Gde=n(Lw,"P",{});var cnt=s(Gde);kwo=r(cnt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cnt.forEach(t),Swo=i(Lw),Bi=n(Lw,"P",{});var oZ=s(Bi);Rwo=r(oZ,`Note:
Loading a model from its configuration file does `),Ode=n(oZ,"STRONG",{});var fnt=s(Ode);Pwo=r(fnt,"not"),fnt.forEach(t),Bwo=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=n(oZ,"A",{href:!0});var mnt=s(Oj);Iwo=r(mnt,"from_pretrained()"),mnt.forEach(t),qwo=r(oZ," to load the model weights."),oZ.forEach(t),Nwo=i(Lw),T($6.$$.fragment,Lw),Lw.forEach(t),jwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(dy.$$.fragment,aa),Dwo=i(aa),Vde=n(aa,"P",{});var gnt=s(Vde);Gwo=r(gnt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gnt.forEach(t),Owo=i(aa),ka=n(aa,"P",{});var xw=s(ka);Vwo=r(xw,"The model class to instantiate is selected based on the "),Xde=n(xw,"CODE",{});var hnt=s(Xde);Xwo=r(hnt,"model_type"),hnt.forEach(t),zwo=r(xw,` property of the config object (either
passed as an argument or loaded from `),zde=n(xw,"CODE",{});var pnt=s(zde);Wwo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),Qwo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=n(xw,"CODE",{});var _nt=s(Wde);Hwo=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),Uwo=r(xw,":"),xw.forEach(t),Jwo=i(aa),Q=n(aa,"UL",{});var H=s(Q);k6=n(H,"LI",{});var E8e=s(k6);Qde=n(E8e,"STRONG",{});var unt=s(Qde);Ywo=r(unt,"albert"),unt.forEach(t),Kwo=r(E8e," \u2014 "),Vj=n(E8e,"A",{href:!0});var bnt=s(Vj);Zwo=r(bnt,"AlbertForMaskedLM"),bnt.forEach(t),e0o=r(E8e," (ALBERT model)"),E8e.forEach(t),o0o=i(H),S6=n(H,"LI",{});var C8e=s(S6);Hde=n(C8e,"STRONG",{});var vnt=s(Hde);r0o=r(vnt,"bart"),vnt.forEach(t),t0o=r(C8e," \u2014 "),Xj=n(C8e,"A",{href:!0});var Fnt=s(Xj);a0o=r(Fnt,"BartForConditionalGeneration"),Fnt.forEach(t),n0o=r(C8e," (BART model)"),C8e.forEach(t),s0o=i(H),R6=n(H,"LI",{});var w8e=s(R6);Ude=n(w8e,"STRONG",{});var Tnt=s(Ude);l0o=r(Tnt,"bert"),Tnt.forEach(t),i0o=r(w8e," \u2014 "),zj=n(w8e,"A",{href:!0});var Mnt=s(zj);d0o=r(Mnt,"BertForMaskedLM"),Mnt.forEach(t),c0o=r(w8e," (BERT model)"),w8e.forEach(t),f0o=i(H),P6=n(H,"LI",{});var A8e=s(P6);Jde=n(A8e,"STRONG",{});var Ent=s(Jde);m0o=r(Ent,"big_bird"),Ent.forEach(t),g0o=r(A8e," \u2014 "),Wj=n(A8e,"A",{href:!0});var Cnt=s(Wj);h0o=r(Cnt,"BigBirdForMaskedLM"),Cnt.forEach(t),p0o=r(A8e," (BigBird model)"),A8e.forEach(t),_0o=i(H),B6=n(H,"LI",{});var y8e=s(B6);Yde=n(y8e,"STRONG",{});var wnt=s(Yde);u0o=r(wnt,"camembert"),wnt.forEach(t),b0o=r(y8e," \u2014 "),Qj=n(y8e,"A",{href:!0});var Ant=s(Qj);v0o=r(Ant,"CamembertForMaskedLM"),Ant.forEach(t),F0o=r(y8e," (CamemBERT model)"),y8e.forEach(t),T0o=i(H),I6=n(H,"LI",{});var L8e=s(I6);Kde=n(L8e,"STRONG",{});var ynt=s(Kde);M0o=r(ynt,"convbert"),ynt.forEach(t),E0o=r(L8e," \u2014 "),Hj=n(L8e,"A",{href:!0});var Lnt=s(Hj);C0o=r(Lnt,"ConvBertForMaskedLM"),Lnt.forEach(t),w0o=r(L8e," (ConvBERT model)"),L8e.forEach(t),A0o=i(H),q6=n(H,"LI",{});var x8e=s(q6);Zde=n(x8e,"STRONG",{});var xnt=s(Zde);y0o=r(xnt,"data2vec-text"),xnt.forEach(t),L0o=r(x8e," \u2014 "),Uj=n(x8e,"A",{href:!0});var $nt=s(Uj);x0o=r($nt,"Data2VecTextForMaskedLM"),$nt.forEach(t),$0o=r(x8e," (Data2VecText model)"),x8e.forEach(t),k0o=i(H),N6=n(H,"LI",{});var $8e=s(N6);ece=n($8e,"STRONG",{});var knt=s(ece);S0o=r(knt,"deberta"),knt.forEach(t),R0o=r($8e," \u2014 "),Jj=n($8e,"A",{href:!0});var Snt=s(Jj);P0o=r(Snt,"DebertaForMaskedLM"),Snt.forEach(t),B0o=r($8e," (DeBERTa model)"),$8e.forEach(t),I0o=i(H),j6=n(H,"LI",{});var k8e=s(j6);oce=n(k8e,"STRONG",{});var Rnt=s(oce);q0o=r(Rnt,"deberta-v2"),Rnt.forEach(t),N0o=r(k8e," \u2014 "),Yj=n(k8e,"A",{href:!0});var Pnt=s(Yj);j0o=r(Pnt,"DebertaV2ForMaskedLM"),Pnt.forEach(t),D0o=r(k8e," (DeBERTa-v2 model)"),k8e.forEach(t),G0o=i(H),D6=n(H,"LI",{});var S8e=s(D6);rce=n(S8e,"STRONG",{});var Bnt=s(rce);O0o=r(Bnt,"distilbert"),Bnt.forEach(t),V0o=r(S8e," \u2014 "),Kj=n(S8e,"A",{href:!0});var Int=s(Kj);X0o=r(Int,"DistilBertForMaskedLM"),Int.forEach(t),z0o=r(S8e," (DistilBERT model)"),S8e.forEach(t),W0o=i(H),G6=n(H,"LI",{});var R8e=s(G6);tce=n(R8e,"STRONG",{});var qnt=s(tce);Q0o=r(qnt,"electra"),qnt.forEach(t),H0o=r(R8e," \u2014 "),Zj=n(R8e,"A",{href:!0});var Nnt=s(Zj);U0o=r(Nnt,"ElectraForMaskedLM"),Nnt.forEach(t),J0o=r(R8e," (ELECTRA model)"),R8e.forEach(t),Y0o=i(H),O6=n(H,"LI",{});var P8e=s(O6);ace=n(P8e,"STRONG",{});var jnt=s(ace);K0o=r(jnt,"flaubert"),jnt.forEach(t),Z0o=r(P8e," \u2014 "),eD=n(P8e,"A",{href:!0});var Dnt=s(eD);eAo=r(Dnt,"FlaubertWithLMHeadModel"),Dnt.forEach(t),oAo=r(P8e," (FlauBERT model)"),P8e.forEach(t),rAo=i(H),V6=n(H,"LI",{});var B8e=s(V6);nce=n(B8e,"STRONG",{});var Gnt=s(nce);tAo=r(Gnt,"fnet"),Gnt.forEach(t),aAo=r(B8e," \u2014 "),oD=n(B8e,"A",{href:!0});var Ont=s(oD);nAo=r(Ont,"FNetForMaskedLM"),Ont.forEach(t),sAo=r(B8e," (FNet model)"),B8e.forEach(t),lAo=i(H),X6=n(H,"LI",{});var I8e=s(X6);sce=n(I8e,"STRONG",{});var Vnt=s(sce);iAo=r(Vnt,"funnel"),Vnt.forEach(t),dAo=r(I8e," \u2014 "),rD=n(I8e,"A",{href:!0});var Xnt=s(rD);cAo=r(Xnt,"FunnelForMaskedLM"),Xnt.forEach(t),fAo=r(I8e," (Funnel Transformer model)"),I8e.forEach(t),mAo=i(H),z6=n(H,"LI",{});var q8e=s(z6);lce=n(q8e,"STRONG",{});var znt=s(lce);gAo=r(znt,"ibert"),znt.forEach(t),hAo=r(q8e," \u2014 "),tD=n(q8e,"A",{href:!0});var Wnt=s(tD);pAo=r(Wnt,"IBertForMaskedLM"),Wnt.forEach(t),_Ao=r(q8e," (I-BERT model)"),q8e.forEach(t),uAo=i(H),W6=n(H,"LI",{});var N8e=s(W6);ice=n(N8e,"STRONG",{});var Qnt=s(ice);bAo=r(Qnt,"layoutlm"),Qnt.forEach(t),vAo=r(N8e," \u2014 "),aD=n(N8e,"A",{href:!0});var Hnt=s(aD);FAo=r(Hnt,"LayoutLMForMaskedLM"),Hnt.forEach(t),TAo=r(N8e," (LayoutLM model)"),N8e.forEach(t),MAo=i(H),Q6=n(H,"LI",{});var j8e=s(Q6);dce=n(j8e,"STRONG",{});var Unt=s(dce);EAo=r(Unt,"longformer"),Unt.forEach(t),CAo=r(j8e," \u2014 "),nD=n(j8e,"A",{href:!0});var Jnt=s(nD);wAo=r(Jnt,"LongformerForMaskedLM"),Jnt.forEach(t),AAo=r(j8e," (Longformer model)"),j8e.forEach(t),yAo=i(H),H6=n(H,"LI",{});var D8e=s(H6);cce=n(D8e,"STRONG",{});var Ynt=s(cce);LAo=r(Ynt,"mbart"),Ynt.forEach(t),xAo=r(D8e," \u2014 "),sD=n(D8e,"A",{href:!0});var Knt=s(sD);$Ao=r(Knt,"MBartForConditionalGeneration"),Knt.forEach(t),kAo=r(D8e," (mBART model)"),D8e.forEach(t),SAo=i(H),U6=n(H,"LI",{});var G8e=s(U6);fce=n(G8e,"STRONG",{});var Znt=s(fce);RAo=r(Znt,"megatron-bert"),Znt.forEach(t),PAo=r(G8e," \u2014 "),lD=n(G8e,"A",{href:!0});var est=s(lD);BAo=r(est,"MegatronBertForMaskedLM"),est.forEach(t),IAo=r(G8e," (MegatronBert model)"),G8e.forEach(t),qAo=i(H),J6=n(H,"LI",{});var O8e=s(J6);mce=n(O8e,"STRONG",{});var ost=s(mce);NAo=r(ost,"mobilebert"),ost.forEach(t),jAo=r(O8e," \u2014 "),iD=n(O8e,"A",{href:!0});var rst=s(iD);DAo=r(rst,"MobileBertForMaskedLM"),rst.forEach(t),GAo=r(O8e," (MobileBERT model)"),O8e.forEach(t),OAo=i(H),Y6=n(H,"LI",{});var V8e=s(Y6);gce=n(V8e,"STRONG",{});var tst=s(gce);VAo=r(tst,"mpnet"),tst.forEach(t),XAo=r(V8e," \u2014 "),dD=n(V8e,"A",{href:!0});var ast=s(dD);zAo=r(ast,"MPNetForMaskedLM"),ast.forEach(t),WAo=r(V8e," (MPNet model)"),V8e.forEach(t),QAo=i(H),K6=n(H,"LI",{});var X8e=s(K6);hce=n(X8e,"STRONG",{});var nst=s(hce);HAo=r(nst,"nystromformer"),nst.forEach(t),UAo=r(X8e," \u2014 "),cD=n(X8e,"A",{href:!0});var sst=s(cD);JAo=r(sst,"NystromformerForMaskedLM"),sst.forEach(t),YAo=r(X8e," (Nystromformer model)"),X8e.forEach(t),KAo=i(H),Z6=n(H,"LI",{});var z8e=s(Z6);pce=n(z8e,"STRONG",{});var lst=s(pce);ZAo=r(lst,"perceiver"),lst.forEach(t),eyo=r(z8e," \u2014 "),fD=n(z8e,"A",{href:!0});var ist=s(fD);oyo=r(ist,"PerceiverForMaskedLM"),ist.forEach(t),ryo=r(z8e," (Perceiver model)"),z8e.forEach(t),tyo=i(H),e1=n(H,"LI",{});var W8e=s(e1);_ce=n(W8e,"STRONG",{});var dst=s(_ce);ayo=r(dst,"qdqbert"),dst.forEach(t),nyo=r(W8e," \u2014 "),mD=n(W8e,"A",{href:!0});var cst=s(mD);syo=r(cst,"QDQBertForMaskedLM"),cst.forEach(t),lyo=r(W8e," (QDQBert model)"),W8e.forEach(t),iyo=i(H),o1=n(H,"LI",{});var Q8e=s(o1);uce=n(Q8e,"STRONG",{});var fst=s(uce);dyo=r(fst,"reformer"),fst.forEach(t),cyo=r(Q8e," \u2014 "),gD=n(Q8e,"A",{href:!0});var mst=s(gD);fyo=r(mst,"ReformerForMaskedLM"),mst.forEach(t),myo=r(Q8e," (Reformer model)"),Q8e.forEach(t),gyo=i(H),r1=n(H,"LI",{});var H8e=s(r1);bce=n(H8e,"STRONG",{});var gst=s(bce);hyo=r(gst,"rembert"),gst.forEach(t),pyo=r(H8e," \u2014 "),hD=n(H8e,"A",{href:!0});var hst=s(hD);_yo=r(hst,"RemBertForMaskedLM"),hst.forEach(t),uyo=r(H8e," (RemBERT model)"),H8e.forEach(t),byo=i(H),t1=n(H,"LI",{});var U8e=s(t1);vce=n(U8e,"STRONG",{});var pst=s(vce);vyo=r(pst,"roberta"),pst.forEach(t),Fyo=r(U8e," \u2014 "),pD=n(U8e,"A",{href:!0});var _st=s(pD);Tyo=r(_st,"RobertaForMaskedLM"),_st.forEach(t),Myo=r(U8e," (RoBERTa model)"),U8e.forEach(t),Eyo=i(H),a1=n(H,"LI",{});var J8e=s(a1);Fce=n(J8e,"STRONG",{});var ust=s(Fce);Cyo=r(ust,"roformer"),ust.forEach(t),wyo=r(J8e," \u2014 "),_D=n(J8e,"A",{href:!0});var bst=s(_D);Ayo=r(bst,"RoFormerForMaskedLM"),bst.forEach(t),yyo=r(J8e," (RoFormer model)"),J8e.forEach(t),Lyo=i(H),n1=n(H,"LI",{});var Y8e=s(n1);Tce=n(Y8e,"STRONG",{});var vst=s(Tce);xyo=r(vst,"squeezebert"),vst.forEach(t),$yo=r(Y8e," \u2014 "),uD=n(Y8e,"A",{href:!0});var Fst=s(uD);kyo=r(Fst,"SqueezeBertForMaskedLM"),Fst.forEach(t),Syo=r(Y8e," (SqueezeBERT model)"),Y8e.forEach(t),Ryo=i(H),s1=n(H,"LI",{});var K8e=s(s1);Mce=n(K8e,"STRONG",{});var Tst=s(Mce);Pyo=r(Tst,"tapas"),Tst.forEach(t),Byo=r(K8e," \u2014 "),bD=n(K8e,"A",{href:!0});var Mst=s(bD);Iyo=r(Mst,"TapasForMaskedLM"),Mst.forEach(t),qyo=r(K8e," (TAPAS model)"),K8e.forEach(t),Nyo=i(H),l1=n(H,"LI",{});var Z8e=s(l1);Ece=n(Z8e,"STRONG",{});var Est=s(Ece);jyo=r(Est,"wav2vec2"),Est.forEach(t),Dyo=r(Z8e," \u2014 "),Cce=n(Z8e,"CODE",{});var Cst=s(Cce);Gyo=r(Cst,"Wav2Vec2ForMaskedLM"),Cst.forEach(t),Oyo=r(Z8e," (Wav2Vec2 model)"),Z8e.forEach(t),Vyo=i(H),i1=n(H,"LI",{});var eLe=s(i1);wce=n(eLe,"STRONG",{});var wst=s(wce);Xyo=r(wst,"xlm"),wst.forEach(t),zyo=r(eLe," \u2014 "),vD=n(eLe,"A",{href:!0});var Ast=s(vD);Wyo=r(Ast,"XLMWithLMHeadModel"),Ast.forEach(t),Qyo=r(eLe," (XLM model)"),eLe.forEach(t),Hyo=i(H),d1=n(H,"LI",{});var oLe=s(d1);Ace=n(oLe,"STRONG",{});var yst=s(Ace);Uyo=r(yst,"xlm-roberta"),yst.forEach(t),Jyo=r(oLe," \u2014 "),FD=n(oLe,"A",{href:!0});var Lst=s(FD);Yyo=r(Lst,"XLMRobertaForMaskedLM"),Lst.forEach(t),Kyo=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),Zyo=i(H),c1=n(H,"LI",{});var rLe=s(c1);yce=n(rLe,"STRONG",{});var xst=s(yce);e8o=r(xst,"xlm-roberta-xl"),xst.forEach(t),o8o=r(rLe," \u2014 "),TD=n(rLe,"A",{href:!0});var $st=s(TD);r8o=r($st,"XLMRobertaXLForMaskedLM"),$st.forEach(t),t8o=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),a8o=i(H),f1=n(H,"LI",{});var tLe=s(f1);Lce=n(tLe,"STRONG",{});var kst=s(Lce);n8o=r(kst,"yoso"),kst.forEach(t),s8o=r(tLe," \u2014 "),MD=n(tLe,"A",{href:!0});var Sst=s(MD);l8o=r(Sst,"YosoForMaskedLM"),Sst.forEach(t),i8o=r(tLe," (YOSO model)"),tLe.forEach(t),H.forEach(t),d8o=i(aa),m1=n(aa,"P",{});var aLe=s(m1);c8o=r(aLe,"The model is set in evaluation mode by default using "),xce=n(aLe,"CODE",{});var Rst=s(xce);f8o=r(Rst,"model.eval()"),Rst.forEach(t),m8o=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(aLe,"CODE",{});var Pst=s($ce);g8o=r(Pst,"model.train()"),Pst.forEach(t),aLe.forEach(t),h8o=i(aa),T(g1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Iqe=i(f),Ii=n(f,"H2",{class:!0});var Dje=s(Ii);h1=n(Dje,"A",{id:!0,class:!0,href:!0});var Bst=s(h1);kce=n(Bst,"SPAN",{});var Ist=s(kce);T(cy.$$.fragment,Ist),Ist.forEach(t),Bst.forEach(t),p8o=i(Dje),Sce=n(Dje,"SPAN",{});var qst=s(Sce);_8o=r(qst,"AutoModelForSeq2SeqLM"),qst.forEach(t),Dje.forEach(t),qqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(fy.$$.fragment,Xs),u8o=i(Xs),qi=n(Xs,"P",{});var rZ=s(qi);b8o=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ED=n(rZ,"A",{href:!0});var Nst=s(ED);v8o=r(Nst,"from_pretrained()"),Nst.forEach(t),F8o=r(rZ," class method or the "),CD=n(rZ,"A",{href:!0});var jst=s(CD);T8o=r(jst,"from_config()"),jst.forEach(t),M8o=r(rZ,` class
method.`),rZ.forEach(t),E8o=i(Xs),my=n(Xs,"P",{});var Gje=s(my);C8o=r(Gje,"This class cannot be instantiated directly using "),Rce=n(Gje,"CODE",{});var Dst=s(Rce);w8o=r(Dst,"__init__()"),Dst.forEach(t),A8o=r(Gje," (throws an error)."),Gje.forEach(t),y8o=i(Xs),lt=n(Xs,"DIV",{class:!0});var $w=s(lt);T(gy.$$.fragment,$w),L8o=i($w),Pce=n($w,"P",{});var Gst=s(Pce);x8o=r(Gst,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gst.forEach(t),$8o=i($w),Ni=n($w,"P",{});var tZ=s(Ni);k8o=r(tZ,`Note:
Loading a model from its configuration file does `),Bce=n(tZ,"STRONG",{});var Ost=s(Bce);S8o=r(Ost,"not"),Ost.forEach(t),R8o=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=n(tZ,"A",{href:!0});var Vst=s(wD);P8o=r(Vst,"from_pretrained()"),Vst.forEach(t),B8o=r(tZ," to load the model weights."),tZ.forEach(t),I8o=i($w),T(p1.$$.fragment,$w),$w.forEach(t),q8o=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(hy.$$.fragment,na),N8o=i(na),Ice=n(na,"P",{});var Xst=s(Ice);j8o=r(Xst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xst.forEach(t),D8o=i(na),Sa=n(na,"P",{});var kw=s(Sa);G8o=r(kw,"The model class to instantiate is selected based on the "),qce=n(kw,"CODE",{});var zst=s(qce);O8o=r(zst,"model_type"),zst.forEach(t),V8o=r(kw,` property of the config object (either
passed as an argument or loaded from `),Nce=n(kw,"CODE",{});var Wst=s(Nce);X8o=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),z8o=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(kw,"CODE",{});var Qst=s(jce);W8o=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),Q8o=r(kw,":"),kw.forEach(t),H8o=i(na),_e=n(na,"UL",{});var ve=s(_e);_1=n(ve,"LI",{});var nLe=s(_1);Dce=n(nLe,"STRONG",{});var Hst=s(Dce);U8o=r(Hst,"bart"),Hst.forEach(t),J8o=r(nLe," \u2014 "),AD=n(nLe,"A",{href:!0});var Ust=s(AD);Y8o=r(Ust,"BartForConditionalGeneration"),Ust.forEach(t),K8o=r(nLe," (BART model)"),nLe.forEach(t),Z8o=i(ve),u1=n(ve,"LI",{});var sLe=s(u1);Gce=n(sLe,"STRONG",{});var Jst=s(Gce);eLo=r(Jst,"bigbird_pegasus"),Jst.forEach(t),oLo=r(sLe," \u2014 "),yD=n(sLe,"A",{href:!0});var Yst=s(yD);rLo=r(Yst,"BigBirdPegasusForConditionalGeneration"),Yst.forEach(t),tLo=r(sLe," (BigBirdPegasus model)"),sLe.forEach(t),aLo=i(ve),b1=n(ve,"LI",{});var lLe=s(b1);Oce=n(lLe,"STRONG",{});var Kst=s(Oce);nLo=r(Kst,"blenderbot"),Kst.forEach(t),sLo=r(lLe," \u2014 "),LD=n(lLe,"A",{href:!0});var Zst=s(LD);lLo=r(Zst,"BlenderbotForConditionalGeneration"),Zst.forEach(t),iLo=r(lLe," (Blenderbot model)"),lLe.forEach(t),dLo=i(ve),v1=n(ve,"LI",{});var iLe=s(v1);Vce=n(iLe,"STRONG",{});var elt=s(Vce);cLo=r(elt,"blenderbot-small"),elt.forEach(t),fLo=r(iLe," \u2014 "),xD=n(iLe,"A",{href:!0});var olt=s(xD);mLo=r(olt,"BlenderbotSmallForConditionalGeneration"),olt.forEach(t),gLo=r(iLe," (BlenderbotSmall model)"),iLe.forEach(t),hLo=i(ve),F1=n(ve,"LI",{});var dLe=s(F1);Xce=n(dLe,"STRONG",{});var rlt=s(Xce);pLo=r(rlt,"encoder-decoder"),rlt.forEach(t),_Lo=r(dLe," \u2014 "),$D=n(dLe,"A",{href:!0});var tlt=s($D);uLo=r(tlt,"EncoderDecoderModel"),tlt.forEach(t),bLo=r(dLe," (Encoder decoder model)"),dLe.forEach(t),vLo=i(ve),T1=n(ve,"LI",{});var cLe=s(T1);zce=n(cLe,"STRONG",{});var alt=s(zce);FLo=r(alt,"fsmt"),alt.forEach(t),TLo=r(cLe," \u2014 "),kD=n(cLe,"A",{href:!0});var nlt=s(kD);MLo=r(nlt,"FSMTForConditionalGeneration"),nlt.forEach(t),ELo=r(cLe," (FairSeq Machine-Translation model)"),cLe.forEach(t),CLo=i(ve),M1=n(ve,"LI",{});var fLe=s(M1);Wce=n(fLe,"STRONG",{});var slt=s(Wce);wLo=r(slt,"led"),slt.forEach(t),ALo=r(fLe," \u2014 "),SD=n(fLe,"A",{href:!0});var llt=s(SD);yLo=r(llt,"LEDForConditionalGeneration"),llt.forEach(t),LLo=r(fLe," (LED model)"),fLe.forEach(t),xLo=i(ve),E1=n(ve,"LI",{});var mLe=s(E1);Qce=n(mLe,"STRONG",{});var ilt=s(Qce);$Lo=r(ilt,"m2m_100"),ilt.forEach(t),kLo=r(mLe," \u2014 "),RD=n(mLe,"A",{href:!0});var dlt=s(RD);SLo=r(dlt,"M2M100ForConditionalGeneration"),dlt.forEach(t),RLo=r(mLe," (M2M100 model)"),mLe.forEach(t),PLo=i(ve),C1=n(ve,"LI",{});var gLe=s(C1);Hce=n(gLe,"STRONG",{});var clt=s(Hce);BLo=r(clt,"marian"),clt.forEach(t),ILo=r(gLe," \u2014 "),PD=n(gLe,"A",{href:!0});var flt=s(PD);qLo=r(flt,"MarianMTModel"),flt.forEach(t),NLo=r(gLe," (Marian model)"),gLe.forEach(t),jLo=i(ve),w1=n(ve,"LI",{});var hLe=s(w1);Uce=n(hLe,"STRONG",{});var mlt=s(Uce);DLo=r(mlt,"mbart"),mlt.forEach(t),GLo=r(hLe," \u2014 "),BD=n(hLe,"A",{href:!0});var glt=s(BD);OLo=r(glt,"MBartForConditionalGeneration"),glt.forEach(t),VLo=r(hLe," (mBART model)"),hLe.forEach(t),XLo=i(ve),A1=n(ve,"LI",{});var pLe=s(A1);Jce=n(pLe,"STRONG",{});var hlt=s(Jce);zLo=r(hlt,"mt5"),hlt.forEach(t),WLo=r(pLe," \u2014 "),ID=n(pLe,"A",{href:!0});var plt=s(ID);QLo=r(plt,"MT5ForConditionalGeneration"),plt.forEach(t),HLo=r(pLe," (mT5 model)"),pLe.forEach(t),ULo=i(ve),y1=n(ve,"LI",{});var _Le=s(y1);Yce=n(_Le,"STRONG",{});var _lt=s(Yce);JLo=r(_lt,"pegasus"),_lt.forEach(t),YLo=r(_Le," \u2014 "),qD=n(_Le,"A",{href:!0});var ult=s(qD);KLo=r(ult,"PegasusForConditionalGeneration"),ult.forEach(t),ZLo=r(_Le," (Pegasus model)"),_Le.forEach(t),e7o=i(ve),L1=n(ve,"LI",{});var uLe=s(L1);Kce=n(uLe,"STRONG",{});var blt=s(Kce);o7o=r(blt,"plbart"),blt.forEach(t),r7o=r(uLe," \u2014 "),ND=n(uLe,"A",{href:!0});var vlt=s(ND);t7o=r(vlt,"PLBartForConditionalGeneration"),vlt.forEach(t),a7o=r(uLe," (PLBart model)"),uLe.forEach(t),n7o=i(ve),x1=n(ve,"LI",{});var bLe=s(x1);Zce=n(bLe,"STRONG",{});var Flt=s(Zce);s7o=r(Flt,"prophetnet"),Flt.forEach(t),l7o=r(bLe," \u2014 "),jD=n(bLe,"A",{href:!0});var Tlt=s(jD);i7o=r(Tlt,"ProphetNetForConditionalGeneration"),Tlt.forEach(t),d7o=r(bLe," (ProphetNet model)"),bLe.forEach(t),c7o=i(ve),$1=n(ve,"LI",{});var vLe=s($1);efe=n(vLe,"STRONG",{});var Mlt=s(efe);f7o=r(Mlt,"t5"),Mlt.forEach(t),m7o=r(vLe," \u2014 "),DD=n(vLe,"A",{href:!0});var Elt=s(DD);g7o=r(Elt,"T5ForConditionalGeneration"),Elt.forEach(t),h7o=r(vLe," (T5 model)"),vLe.forEach(t),p7o=i(ve),k1=n(ve,"LI",{});var FLe=s(k1);ofe=n(FLe,"STRONG",{});var Clt=s(ofe);_7o=r(Clt,"xlm-prophetnet"),Clt.forEach(t),u7o=r(FLe," \u2014 "),GD=n(FLe,"A",{href:!0});var wlt=s(GD);b7o=r(wlt,"XLMProphetNetForConditionalGeneration"),wlt.forEach(t),v7o=r(FLe," (XLMProphetNet model)"),FLe.forEach(t),ve.forEach(t),F7o=i(na),S1=n(na,"P",{});var TLe=s(S1);T7o=r(TLe,"The model is set in evaluation mode by default using "),rfe=n(TLe,"CODE",{});var Alt=s(rfe);M7o=r(Alt,"model.eval()"),Alt.forEach(t),E7o=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=n(TLe,"CODE",{});var ylt=s(tfe);C7o=r(ylt,"model.train()"),ylt.forEach(t),TLe.forEach(t),w7o=i(na),T(R1.$$.fragment,na),na.forEach(t),Xs.forEach(t),Nqe=i(f),ji=n(f,"H2",{class:!0});var Oje=s(ji);P1=n(Oje,"A",{id:!0,class:!0,href:!0});var Llt=s(P1);afe=n(Llt,"SPAN",{});var xlt=s(afe);T(py.$$.fragment,xlt),xlt.forEach(t),Llt.forEach(t),A7o=i(Oje),nfe=n(Oje,"SPAN",{});var $lt=s(nfe);y7o=r($lt,"AutoModelForSequenceClassification"),$lt.forEach(t),Oje.forEach(t),jqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(_y.$$.fragment,zs),L7o=i(zs),Di=n(zs,"P",{});var aZ=s(Di);x7o=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OD=n(aZ,"A",{href:!0});var klt=s(OD);$7o=r(klt,"from_pretrained()"),klt.forEach(t),k7o=r(aZ," class method or the "),VD=n(aZ,"A",{href:!0});var Slt=s(VD);S7o=r(Slt,"from_config()"),Slt.forEach(t),R7o=r(aZ,` class
method.`),aZ.forEach(t),P7o=i(zs),uy=n(zs,"P",{});var Vje=s(uy);B7o=r(Vje,"This class cannot be instantiated directly using "),sfe=n(Vje,"CODE",{});var Rlt=s(sfe);I7o=r(Rlt,"__init__()"),Rlt.forEach(t),q7o=r(Vje," (throws an error)."),Vje.forEach(t),N7o=i(zs),it=n(zs,"DIV",{class:!0});var Sw=s(it);T(by.$$.fragment,Sw),j7o=i(Sw),lfe=n(Sw,"P",{});var Plt=s(lfe);D7o=r(Plt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Plt.forEach(t),G7o=i(Sw),Gi=n(Sw,"P",{});var nZ=s(Gi);O7o=r(nZ,`Note:
Loading a model from its configuration file does `),ife=n(nZ,"STRONG",{});var Blt=s(ife);V7o=r(Blt,"not"),Blt.forEach(t),X7o=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(nZ,"A",{href:!0});var Ilt=s(XD);z7o=r(Ilt,"from_pretrained()"),Ilt.forEach(t),W7o=r(nZ," to load the model weights."),nZ.forEach(t),Q7o=i(Sw),T(B1.$$.fragment,Sw),Sw.forEach(t),H7o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(vy.$$.fragment,sa),U7o=i(sa),dfe=n(sa,"P",{});var qlt=s(dfe);J7o=r(qlt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qlt.forEach(t),Y7o=i(sa),Ra=n(sa,"P",{});var Rw=s(Ra);K7o=r(Rw,"The model class to instantiate is selected based on the "),cfe=n(Rw,"CODE",{});var Nlt=s(cfe);Z7o=r(Nlt,"model_type"),Nlt.forEach(t),exo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),ffe=n(Rw,"CODE",{});var jlt=s(ffe);oxo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),rxo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(Rw,"CODE",{});var Dlt=s(mfe);txo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),axo=r(Rw,":"),Rw.forEach(t),nxo=i(sa),q=n(sa,"UL",{});var j=s(q);I1=n(j,"LI",{});var MLe=s(I1);gfe=n(MLe,"STRONG",{});var Glt=s(gfe);sxo=r(Glt,"albert"),Glt.forEach(t),lxo=r(MLe," \u2014 "),zD=n(MLe,"A",{href:!0});var Olt=s(zD);ixo=r(Olt,"AlbertForSequenceClassification"),Olt.forEach(t),dxo=r(MLe," (ALBERT model)"),MLe.forEach(t),cxo=i(j),q1=n(j,"LI",{});var ELe=s(q1);hfe=n(ELe,"STRONG",{});var Vlt=s(hfe);fxo=r(Vlt,"bart"),Vlt.forEach(t),mxo=r(ELe," \u2014 "),WD=n(ELe,"A",{href:!0});var Xlt=s(WD);gxo=r(Xlt,"BartForSequenceClassification"),Xlt.forEach(t),hxo=r(ELe," (BART model)"),ELe.forEach(t),pxo=i(j),N1=n(j,"LI",{});var CLe=s(N1);pfe=n(CLe,"STRONG",{});var zlt=s(pfe);_xo=r(zlt,"bert"),zlt.forEach(t),uxo=r(CLe," \u2014 "),QD=n(CLe,"A",{href:!0});var Wlt=s(QD);bxo=r(Wlt,"BertForSequenceClassification"),Wlt.forEach(t),vxo=r(CLe," (BERT model)"),CLe.forEach(t),Fxo=i(j),j1=n(j,"LI",{});var wLe=s(j1);_fe=n(wLe,"STRONG",{});var Qlt=s(_fe);Txo=r(Qlt,"big_bird"),Qlt.forEach(t),Mxo=r(wLe," \u2014 "),HD=n(wLe,"A",{href:!0});var Hlt=s(HD);Exo=r(Hlt,"BigBirdForSequenceClassification"),Hlt.forEach(t),Cxo=r(wLe," (BigBird model)"),wLe.forEach(t),wxo=i(j),D1=n(j,"LI",{});var ALe=s(D1);ufe=n(ALe,"STRONG",{});var Ult=s(ufe);Axo=r(Ult,"bigbird_pegasus"),Ult.forEach(t),yxo=r(ALe," \u2014 "),UD=n(ALe,"A",{href:!0});var Jlt=s(UD);Lxo=r(Jlt,"BigBirdPegasusForSequenceClassification"),Jlt.forEach(t),xxo=r(ALe," (BigBirdPegasus model)"),ALe.forEach(t),$xo=i(j),G1=n(j,"LI",{});var yLe=s(G1);bfe=n(yLe,"STRONG",{});var Ylt=s(bfe);kxo=r(Ylt,"camembert"),Ylt.forEach(t),Sxo=r(yLe," \u2014 "),JD=n(yLe,"A",{href:!0});var Klt=s(JD);Rxo=r(Klt,"CamembertForSequenceClassification"),Klt.forEach(t),Pxo=r(yLe," (CamemBERT model)"),yLe.forEach(t),Bxo=i(j),O1=n(j,"LI",{});var LLe=s(O1);vfe=n(LLe,"STRONG",{});var Zlt=s(vfe);Ixo=r(Zlt,"canine"),Zlt.forEach(t),qxo=r(LLe," \u2014 "),YD=n(LLe,"A",{href:!0});var eit=s(YD);Nxo=r(eit,"CanineForSequenceClassification"),eit.forEach(t),jxo=r(LLe," (Canine model)"),LLe.forEach(t),Dxo=i(j),V1=n(j,"LI",{});var xLe=s(V1);Ffe=n(xLe,"STRONG",{});var oit=s(Ffe);Gxo=r(oit,"convbert"),oit.forEach(t),Oxo=r(xLe," \u2014 "),KD=n(xLe,"A",{href:!0});var rit=s(KD);Vxo=r(rit,"ConvBertForSequenceClassification"),rit.forEach(t),Xxo=r(xLe," (ConvBERT model)"),xLe.forEach(t),zxo=i(j),X1=n(j,"LI",{});var $Le=s(X1);Tfe=n($Le,"STRONG",{});var tit=s(Tfe);Wxo=r(tit,"ctrl"),tit.forEach(t),Qxo=r($Le," \u2014 "),ZD=n($Le,"A",{href:!0});var ait=s(ZD);Hxo=r(ait,"CTRLForSequenceClassification"),ait.forEach(t),Uxo=r($Le," (CTRL model)"),$Le.forEach(t),Jxo=i(j),z1=n(j,"LI",{});var kLe=s(z1);Mfe=n(kLe,"STRONG",{});var nit=s(Mfe);Yxo=r(nit,"data2vec-text"),nit.forEach(t),Kxo=r(kLe," \u2014 "),eG=n(kLe,"A",{href:!0});var sit=s(eG);Zxo=r(sit,"Data2VecTextForSequenceClassification"),sit.forEach(t),e$o=r(kLe," (Data2VecText model)"),kLe.forEach(t),o$o=i(j),W1=n(j,"LI",{});var SLe=s(W1);Efe=n(SLe,"STRONG",{});var lit=s(Efe);r$o=r(lit,"deberta"),lit.forEach(t),t$o=r(SLe," \u2014 "),oG=n(SLe,"A",{href:!0});var iit=s(oG);a$o=r(iit,"DebertaForSequenceClassification"),iit.forEach(t),n$o=r(SLe," (DeBERTa model)"),SLe.forEach(t),s$o=i(j),Q1=n(j,"LI",{});var RLe=s(Q1);Cfe=n(RLe,"STRONG",{});var dit=s(Cfe);l$o=r(dit,"deberta-v2"),dit.forEach(t),i$o=r(RLe," \u2014 "),rG=n(RLe,"A",{href:!0});var cit=s(rG);d$o=r(cit,"DebertaV2ForSequenceClassification"),cit.forEach(t),c$o=r(RLe," (DeBERTa-v2 model)"),RLe.forEach(t),f$o=i(j),H1=n(j,"LI",{});var PLe=s(H1);wfe=n(PLe,"STRONG",{});var fit=s(wfe);m$o=r(fit,"distilbert"),fit.forEach(t),g$o=r(PLe," \u2014 "),tG=n(PLe,"A",{href:!0});var mit=s(tG);h$o=r(mit,"DistilBertForSequenceClassification"),mit.forEach(t),p$o=r(PLe," (DistilBERT model)"),PLe.forEach(t),_$o=i(j),U1=n(j,"LI",{});var BLe=s(U1);Afe=n(BLe,"STRONG",{});var git=s(Afe);u$o=r(git,"electra"),git.forEach(t),b$o=r(BLe," \u2014 "),aG=n(BLe,"A",{href:!0});var hit=s(aG);v$o=r(hit,"ElectraForSequenceClassification"),hit.forEach(t),F$o=r(BLe," (ELECTRA model)"),BLe.forEach(t),T$o=i(j),J1=n(j,"LI",{});var ILe=s(J1);yfe=n(ILe,"STRONG",{});var pit=s(yfe);M$o=r(pit,"flaubert"),pit.forEach(t),E$o=r(ILe," \u2014 "),nG=n(ILe,"A",{href:!0});var _it=s(nG);C$o=r(_it,"FlaubertForSequenceClassification"),_it.forEach(t),w$o=r(ILe," (FlauBERT model)"),ILe.forEach(t),A$o=i(j),Y1=n(j,"LI",{});var qLe=s(Y1);Lfe=n(qLe,"STRONG",{});var uit=s(Lfe);y$o=r(uit,"fnet"),uit.forEach(t),L$o=r(qLe," \u2014 "),sG=n(qLe,"A",{href:!0});var bit=s(sG);x$o=r(bit,"FNetForSequenceClassification"),bit.forEach(t),$$o=r(qLe," (FNet model)"),qLe.forEach(t),k$o=i(j),K1=n(j,"LI",{});var NLe=s(K1);xfe=n(NLe,"STRONG",{});var vit=s(xfe);S$o=r(vit,"funnel"),vit.forEach(t),R$o=r(NLe," \u2014 "),lG=n(NLe,"A",{href:!0});var Fit=s(lG);P$o=r(Fit,"FunnelForSequenceClassification"),Fit.forEach(t),B$o=r(NLe," (Funnel Transformer model)"),NLe.forEach(t),I$o=i(j),Z1=n(j,"LI",{});var jLe=s(Z1);$fe=n(jLe,"STRONG",{});var Tit=s($fe);q$o=r(Tit,"gpt2"),Tit.forEach(t),N$o=r(jLe," \u2014 "),iG=n(jLe,"A",{href:!0});var Mit=s(iG);j$o=r(Mit,"GPT2ForSequenceClassification"),Mit.forEach(t),D$o=r(jLe," (OpenAI GPT-2 model)"),jLe.forEach(t),G$o=i(j),eb=n(j,"LI",{});var DLe=s(eb);kfe=n(DLe,"STRONG",{});var Eit=s(kfe);O$o=r(Eit,"gpt_neo"),Eit.forEach(t),V$o=r(DLe," \u2014 "),dG=n(DLe,"A",{href:!0});var Cit=s(dG);X$o=r(Cit,"GPTNeoForSequenceClassification"),Cit.forEach(t),z$o=r(DLe," (GPT Neo model)"),DLe.forEach(t),W$o=i(j),ob=n(j,"LI",{});var GLe=s(ob);Sfe=n(GLe,"STRONG",{});var wit=s(Sfe);Q$o=r(wit,"gpt_neox"),wit.forEach(t),H$o=r(GLe," \u2014 "),Rfe=n(GLe,"CODE",{});var Ait=s(Rfe);U$o=r(Ait,"GPTNeoXForSequenceClassification"),Ait.forEach(t),J$o=r(GLe," (GPT NeoX model)"),GLe.forEach(t),Y$o=i(j),rb=n(j,"LI",{});var OLe=s(rb);Pfe=n(OLe,"STRONG",{});var yit=s(Pfe);K$o=r(yit,"gptj"),yit.forEach(t),Z$o=r(OLe," \u2014 "),cG=n(OLe,"A",{href:!0});var Lit=s(cG);eko=r(Lit,"GPTJForSequenceClassification"),Lit.forEach(t),oko=r(OLe," (GPT-J model)"),OLe.forEach(t),rko=i(j),tb=n(j,"LI",{});var VLe=s(tb);Bfe=n(VLe,"STRONG",{});var xit=s(Bfe);tko=r(xit,"ibert"),xit.forEach(t),ako=r(VLe," \u2014 "),fG=n(VLe,"A",{href:!0});var $it=s(fG);nko=r($it,"IBertForSequenceClassification"),$it.forEach(t),sko=r(VLe," (I-BERT model)"),VLe.forEach(t),lko=i(j),ab=n(j,"LI",{});var XLe=s(ab);Ife=n(XLe,"STRONG",{});var kit=s(Ife);iko=r(kit,"layoutlm"),kit.forEach(t),dko=r(XLe," \u2014 "),mG=n(XLe,"A",{href:!0});var Sit=s(mG);cko=r(Sit,"LayoutLMForSequenceClassification"),Sit.forEach(t),fko=r(XLe," (LayoutLM model)"),XLe.forEach(t),mko=i(j),nb=n(j,"LI",{});var zLe=s(nb);qfe=n(zLe,"STRONG",{});var Rit=s(qfe);gko=r(Rit,"layoutlmv2"),Rit.forEach(t),hko=r(zLe," \u2014 "),gG=n(zLe,"A",{href:!0});var Pit=s(gG);pko=r(Pit,"LayoutLMv2ForSequenceClassification"),Pit.forEach(t),_ko=r(zLe," (LayoutLMv2 model)"),zLe.forEach(t),uko=i(j),sb=n(j,"LI",{});var WLe=s(sb);Nfe=n(WLe,"STRONG",{});var Bit=s(Nfe);bko=r(Bit,"led"),Bit.forEach(t),vko=r(WLe," \u2014 "),hG=n(WLe,"A",{href:!0});var Iit=s(hG);Fko=r(Iit,"LEDForSequenceClassification"),Iit.forEach(t),Tko=r(WLe," (LED model)"),WLe.forEach(t),Mko=i(j),lb=n(j,"LI",{});var QLe=s(lb);jfe=n(QLe,"STRONG",{});var qit=s(jfe);Eko=r(qit,"longformer"),qit.forEach(t),Cko=r(QLe," \u2014 "),pG=n(QLe,"A",{href:!0});var Nit=s(pG);wko=r(Nit,"LongformerForSequenceClassification"),Nit.forEach(t),Ako=r(QLe," (Longformer model)"),QLe.forEach(t),yko=i(j),ib=n(j,"LI",{});var HLe=s(ib);Dfe=n(HLe,"STRONG",{});var jit=s(Dfe);Lko=r(jit,"mbart"),jit.forEach(t),xko=r(HLe," \u2014 "),_G=n(HLe,"A",{href:!0});var Dit=s(_G);$ko=r(Dit,"MBartForSequenceClassification"),Dit.forEach(t),kko=r(HLe," (mBART model)"),HLe.forEach(t),Sko=i(j),db=n(j,"LI",{});var ULe=s(db);Gfe=n(ULe,"STRONG",{});var Git=s(Gfe);Rko=r(Git,"megatron-bert"),Git.forEach(t),Pko=r(ULe," \u2014 "),uG=n(ULe,"A",{href:!0});var Oit=s(uG);Bko=r(Oit,"MegatronBertForSequenceClassification"),Oit.forEach(t),Iko=r(ULe," (MegatronBert model)"),ULe.forEach(t),qko=i(j),cb=n(j,"LI",{});var JLe=s(cb);Ofe=n(JLe,"STRONG",{});var Vit=s(Ofe);Nko=r(Vit,"mobilebert"),Vit.forEach(t),jko=r(JLe," \u2014 "),bG=n(JLe,"A",{href:!0});var Xit=s(bG);Dko=r(Xit,"MobileBertForSequenceClassification"),Xit.forEach(t),Gko=r(JLe," (MobileBERT model)"),JLe.forEach(t),Oko=i(j),fb=n(j,"LI",{});var YLe=s(fb);Vfe=n(YLe,"STRONG",{});var zit=s(Vfe);Vko=r(zit,"mpnet"),zit.forEach(t),Xko=r(YLe," \u2014 "),vG=n(YLe,"A",{href:!0});var Wit=s(vG);zko=r(Wit,"MPNetForSequenceClassification"),Wit.forEach(t),Wko=r(YLe," (MPNet model)"),YLe.forEach(t),Qko=i(j),mb=n(j,"LI",{});var KLe=s(mb);Xfe=n(KLe,"STRONG",{});var Qit=s(Xfe);Hko=r(Qit,"nystromformer"),Qit.forEach(t),Uko=r(KLe," \u2014 "),FG=n(KLe,"A",{href:!0});var Hit=s(FG);Jko=r(Hit,"NystromformerForSequenceClassification"),Hit.forEach(t),Yko=r(KLe," (Nystromformer model)"),KLe.forEach(t),Kko=i(j),gb=n(j,"LI",{});var ZLe=s(gb);zfe=n(ZLe,"STRONG",{});var Uit=s(zfe);Zko=r(Uit,"openai-gpt"),Uit.forEach(t),eSo=r(ZLe," \u2014 "),TG=n(ZLe,"A",{href:!0});var Jit=s(TG);oSo=r(Jit,"OpenAIGPTForSequenceClassification"),Jit.forEach(t),rSo=r(ZLe," (OpenAI GPT model)"),ZLe.forEach(t),tSo=i(j),hb=n(j,"LI",{});var e7e=s(hb);Wfe=n(e7e,"STRONG",{});var Yit=s(Wfe);aSo=r(Yit,"perceiver"),Yit.forEach(t),nSo=r(e7e," \u2014 "),MG=n(e7e,"A",{href:!0});var Kit=s(MG);sSo=r(Kit,"PerceiverForSequenceClassification"),Kit.forEach(t),lSo=r(e7e," (Perceiver model)"),e7e.forEach(t),iSo=i(j),pb=n(j,"LI",{});var o7e=s(pb);Qfe=n(o7e,"STRONG",{});var Zit=s(Qfe);dSo=r(Zit,"plbart"),Zit.forEach(t),cSo=r(o7e," \u2014 "),EG=n(o7e,"A",{href:!0});var edt=s(EG);fSo=r(edt,"PLBartForSequenceClassification"),edt.forEach(t),mSo=r(o7e," (PLBart model)"),o7e.forEach(t),gSo=i(j),_b=n(j,"LI",{});var r7e=s(_b);Hfe=n(r7e,"STRONG",{});var odt=s(Hfe);hSo=r(odt,"qdqbert"),odt.forEach(t),pSo=r(r7e," \u2014 "),CG=n(r7e,"A",{href:!0});var rdt=s(CG);_So=r(rdt,"QDQBertForSequenceClassification"),rdt.forEach(t),uSo=r(r7e," (QDQBert model)"),r7e.forEach(t),bSo=i(j),ub=n(j,"LI",{});var t7e=s(ub);Ufe=n(t7e,"STRONG",{});var tdt=s(Ufe);vSo=r(tdt,"reformer"),tdt.forEach(t),FSo=r(t7e," \u2014 "),wG=n(t7e,"A",{href:!0});var adt=s(wG);TSo=r(adt,"ReformerForSequenceClassification"),adt.forEach(t),MSo=r(t7e," (Reformer model)"),t7e.forEach(t),ESo=i(j),bb=n(j,"LI",{});var a7e=s(bb);Jfe=n(a7e,"STRONG",{});var ndt=s(Jfe);CSo=r(ndt,"rembert"),ndt.forEach(t),wSo=r(a7e," \u2014 "),AG=n(a7e,"A",{href:!0});var sdt=s(AG);ASo=r(sdt,"RemBertForSequenceClassification"),sdt.forEach(t),ySo=r(a7e," (RemBERT model)"),a7e.forEach(t),LSo=i(j),vb=n(j,"LI",{});var n7e=s(vb);Yfe=n(n7e,"STRONG",{});var ldt=s(Yfe);xSo=r(ldt,"roberta"),ldt.forEach(t),$So=r(n7e," \u2014 "),yG=n(n7e,"A",{href:!0});var idt=s(yG);kSo=r(idt,"RobertaForSequenceClassification"),idt.forEach(t),SSo=r(n7e," (RoBERTa model)"),n7e.forEach(t),RSo=i(j),Fb=n(j,"LI",{});var s7e=s(Fb);Kfe=n(s7e,"STRONG",{});var ddt=s(Kfe);PSo=r(ddt,"roformer"),ddt.forEach(t),BSo=r(s7e," \u2014 "),LG=n(s7e,"A",{href:!0});var cdt=s(LG);ISo=r(cdt,"RoFormerForSequenceClassification"),cdt.forEach(t),qSo=r(s7e," (RoFormer model)"),s7e.forEach(t),NSo=i(j),Tb=n(j,"LI",{});var l7e=s(Tb);Zfe=n(l7e,"STRONG",{});var fdt=s(Zfe);jSo=r(fdt,"squeezebert"),fdt.forEach(t),DSo=r(l7e," \u2014 "),xG=n(l7e,"A",{href:!0});var mdt=s(xG);GSo=r(mdt,"SqueezeBertForSequenceClassification"),mdt.forEach(t),OSo=r(l7e," (SqueezeBERT model)"),l7e.forEach(t),VSo=i(j),Mb=n(j,"LI",{});var i7e=s(Mb);eme=n(i7e,"STRONG",{});var gdt=s(eme);XSo=r(gdt,"tapas"),gdt.forEach(t),zSo=r(i7e," \u2014 "),$G=n(i7e,"A",{href:!0});var hdt=s($G);WSo=r(hdt,"TapasForSequenceClassification"),hdt.forEach(t),QSo=r(i7e," (TAPAS model)"),i7e.forEach(t),HSo=i(j),Eb=n(j,"LI",{});var d7e=s(Eb);ome=n(d7e,"STRONG",{});var pdt=s(ome);USo=r(pdt,"transfo-xl"),pdt.forEach(t),JSo=r(d7e," \u2014 "),kG=n(d7e,"A",{href:!0});var _dt=s(kG);YSo=r(_dt,"TransfoXLForSequenceClassification"),_dt.forEach(t),KSo=r(d7e," (Transformer-XL model)"),d7e.forEach(t),ZSo=i(j),Cb=n(j,"LI",{});var c7e=s(Cb);rme=n(c7e,"STRONG",{});var udt=s(rme);eRo=r(udt,"xlm"),udt.forEach(t),oRo=r(c7e," \u2014 "),SG=n(c7e,"A",{href:!0});var bdt=s(SG);rRo=r(bdt,"XLMForSequenceClassification"),bdt.forEach(t),tRo=r(c7e," (XLM model)"),c7e.forEach(t),aRo=i(j),wb=n(j,"LI",{});var f7e=s(wb);tme=n(f7e,"STRONG",{});var vdt=s(tme);nRo=r(vdt,"xlm-roberta"),vdt.forEach(t),sRo=r(f7e," \u2014 "),RG=n(f7e,"A",{href:!0});var Fdt=s(RG);lRo=r(Fdt,"XLMRobertaForSequenceClassification"),Fdt.forEach(t),iRo=r(f7e," (XLM-RoBERTa model)"),f7e.forEach(t),dRo=i(j),Ab=n(j,"LI",{});var m7e=s(Ab);ame=n(m7e,"STRONG",{});var Tdt=s(ame);cRo=r(Tdt,"xlm-roberta-xl"),Tdt.forEach(t),fRo=r(m7e," \u2014 "),PG=n(m7e,"A",{href:!0});var Mdt=s(PG);mRo=r(Mdt,"XLMRobertaXLForSequenceClassification"),Mdt.forEach(t),gRo=r(m7e," (XLM-RoBERTa-XL model)"),m7e.forEach(t),hRo=i(j),yb=n(j,"LI",{});var g7e=s(yb);nme=n(g7e,"STRONG",{});var Edt=s(nme);pRo=r(Edt,"xlnet"),Edt.forEach(t),_Ro=r(g7e," \u2014 "),BG=n(g7e,"A",{href:!0});var Cdt=s(BG);uRo=r(Cdt,"XLNetForSequenceClassification"),Cdt.forEach(t),bRo=r(g7e," (XLNet model)"),g7e.forEach(t),vRo=i(j),Lb=n(j,"LI",{});var h7e=s(Lb);sme=n(h7e,"STRONG",{});var wdt=s(sme);FRo=r(wdt,"yoso"),wdt.forEach(t),TRo=r(h7e," \u2014 "),IG=n(h7e,"A",{href:!0});var Adt=s(IG);MRo=r(Adt,"YosoForSequenceClassification"),Adt.forEach(t),ERo=r(h7e," (YOSO model)"),h7e.forEach(t),j.forEach(t),CRo=i(sa),xb=n(sa,"P",{});var p7e=s(xb);wRo=r(p7e,"The model is set in evaluation mode by default using "),lme=n(p7e,"CODE",{});var ydt=s(lme);ARo=r(ydt,"model.eval()"),ydt.forEach(t),yRo=r(p7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=n(p7e,"CODE",{});var Ldt=s(ime);LRo=r(Ldt,"model.train()"),Ldt.forEach(t),p7e.forEach(t),xRo=i(sa),T($b.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Dqe=i(f),Oi=n(f,"H2",{class:!0});var Xje=s(Oi);kb=n(Xje,"A",{id:!0,class:!0,href:!0});var xdt=s(kb);dme=n(xdt,"SPAN",{});var $dt=s(dme);T(Fy.$$.fragment,$dt),$dt.forEach(t),xdt.forEach(t),$Ro=i(Xje),cme=n(Xje,"SPAN",{});var kdt=s(cme);kRo=r(kdt,"AutoModelForMultipleChoice"),kdt.forEach(t),Xje.forEach(t),Gqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(Ty.$$.fragment,Ws),SRo=i(Ws),Vi=n(Ws,"P",{});var sZ=s(Vi);RRo=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qG=n(sZ,"A",{href:!0});var Sdt=s(qG);PRo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),BRo=r(sZ," class method or the "),NG=n(sZ,"A",{href:!0});var Rdt=s(NG);IRo=r(Rdt,"from_config()"),Rdt.forEach(t),qRo=r(sZ,` class
method.`),sZ.forEach(t),NRo=i(Ws),My=n(Ws,"P",{});var zje=s(My);jRo=r(zje,"This class cannot be instantiated directly using "),fme=n(zje,"CODE",{});var Pdt=s(fme);DRo=r(Pdt,"__init__()"),Pdt.forEach(t),GRo=r(zje," (throws an error)."),zje.forEach(t),ORo=i(Ws),dt=n(Ws,"DIV",{class:!0});var Pw=s(dt);T(Ey.$$.fragment,Pw),VRo=i(Pw),mme=n(Pw,"P",{});var Bdt=s(mme);XRo=r(Bdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bdt.forEach(t),zRo=i(Pw),Xi=n(Pw,"P",{});var lZ=s(Xi);WRo=r(lZ,`Note:
Loading a model from its configuration file does `),gme=n(lZ,"STRONG",{});var Idt=s(gme);QRo=r(Idt,"not"),Idt.forEach(t),HRo=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(lZ,"A",{href:!0});var qdt=s(jG);URo=r(qdt,"from_pretrained()"),qdt.forEach(t),JRo=r(lZ," to load the model weights."),lZ.forEach(t),YRo=i(Pw),T(Sb.$$.fragment,Pw),Pw.forEach(t),KRo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(Cy.$$.fragment,la),ZRo=i(la),hme=n(la,"P",{});var Ndt=s(hme);ePo=r(Ndt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ndt.forEach(t),oPo=i(la),Pa=n(la,"P",{});var Bw=s(Pa);rPo=r(Bw,"The model class to instantiate is selected based on the "),pme=n(Bw,"CODE",{});var jdt=s(pme);tPo=r(jdt,"model_type"),jdt.forEach(t),aPo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),_me=n(Bw,"CODE",{});var Ddt=s(_me);nPo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),sPo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n(Bw,"CODE",{});var Gdt=s(ume);lPo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),iPo=r(Bw,":"),Bw.forEach(t),dPo=i(la),Y=n(la,"UL",{});var K=s(Y);Rb=n(K,"LI",{});var _7e=s(Rb);bme=n(_7e,"STRONG",{});var Odt=s(bme);cPo=r(Odt,"albert"),Odt.forEach(t),fPo=r(_7e," \u2014 "),DG=n(_7e,"A",{href:!0});var Vdt=s(DG);mPo=r(Vdt,"AlbertForMultipleChoice"),Vdt.forEach(t),gPo=r(_7e," (ALBERT model)"),_7e.forEach(t),hPo=i(K),Pb=n(K,"LI",{});var u7e=s(Pb);vme=n(u7e,"STRONG",{});var Xdt=s(vme);pPo=r(Xdt,"bert"),Xdt.forEach(t),_Po=r(u7e," \u2014 "),GG=n(u7e,"A",{href:!0});var zdt=s(GG);uPo=r(zdt,"BertForMultipleChoice"),zdt.forEach(t),bPo=r(u7e," (BERT model)"),u7e.forEach(t),vPo=i(K),Bb=n(K,"LI",{});var b7e=s(Bb);Fme=n(b7e,"STRONG",{});var Wdt=s(Fme);FPo=r(Wdt,"big_bird"),Wdt.forEach(t),TPo=r(b7e," \u2014 "),OG=n(b7e,"A",{href:!0});var Qdt=s(OG);MPo=r(Qdt,"BigBirdForMultipleChoice"),Qdt.forEach(t),EPo=r(b7e," (BigBird model)"),b7e.forEach(t),CPo=i(K),Ib=n(K,"LI",{});var v7e=s(Ib);Tme=n(v7e,"STRONG",{});var Hdt=s(Tme);wPo=r(Hdt,"camembert"),Hdt.forEach(t),APo=r(v7e," \u2014 "),VG=n(v7e,"A",{href:!0});var Udt=s(VG);yPo=r(Udt,"CamembertForMultipleChoice"),Udt.forEach(t),LPo=r(v7e," (CamemBERT model)"),v7e.forEach(t),xPo=i(K),qb=n(K,"LI",{});var F7e=s(qb);Mme=n(F7e,"STRONG",{});var Jdt=s(Mme);$Po=r(Jdt,"canine"),Jdt.forEach(t),kPo=r(F7e," \u2014 "),XG=n(F7e,"A",{href:!0});var Ydt=s(XG);SPo=r(Ydt,"CanineForMultipleChoice"),Ydt.forEach(t),RPo=r(F7e," (Canine model)"),F7e.forEach(t),PPo=i(K),Nb=n(K,"LI",{});var T7e=s(Nb);Eme=n(T7e,"STRONG",{});var Kdt=s(Eme);BPo=r(Kdt,"convbert"),Kdt.forEach(t),IPo=r(T7e," \u2014 "),zG=n(T7e,"A",{href:!0});var Zdt=s(zG);qPo=r(Zdt,"ConvBertForMultipleChoice"),Zdt.forEach(t),NPo=r(T7e," (ConvBERT model)"),T7e.forEach(t),jPo=i(K),jb=n(K,"LI",{});var M7e=s(jb);Cme=n(M7e,"STRONG",{});var ect=s(Cme);DPo=r(ect,"data2vec-text"),ect.forEach(t),GPo=r(M7e," \u2014 "),WG=n(M7e,"A",{href:!0});var oct=s(WG);OPo=r(oct,"Data2VecTextForMultipleChoice"),oct.forEach(t),VPo=r(M7e," (Data2VecText model)"),M7e.forEach(t),XPo=i(K),Db=n(K,"LI",{});var E7e=s(Db);wme=n(E7e,"STRONG",{});var rct=s(wme);zPo=r(rct,"deberta-v2"),rct.forEach(t),WPo=r(E7e," \u2014 "),QG=n(E7e,"A",{href:!0});var tct=s(QG);QPo=r(tct,"DebertaV2ForMultipleChoice"),tct.forEach(t),HPo=r(E7e," (DeBERTa-v2 model)"),E7e.forEach(t),UPo=i(K),Gb=n(K,"LI",{});var C7e=s(Gb);Ame=n(C7e,"STRONG",{});var act=s(Ame);JPo=r(act,"distilbert"),act.forEach(t),YPo=r(C7e," \u2014 "),HG=n(C7e,"A",{href:!0});var nct=s(HG);KPo=r(nct,"DistilBertForMultipleChoice"),nct.forEach(t),ZPo=r(C7e," (DistilBERT model)"),C7e.forEach(t),eBo=i(K),Ob=n(K,"LI",{});var w7e=s(Ob);yme=n(w7e,"STRONG",{});var sct=s(yme);oBo=r(sct,"electra"),sct.forEach(t),rBo=r(w7e," \u2014 "),UG=n(w7e,"A",{href:!0});var lct=s(UG);tBo=r(lct,"ElectraForMultipleChoice"),lct.forEach(t),aBo=r(w7e," (ELECTRA model)"),w7e.forEach(t),nBo=i(K),Vb=n(K,"LI",{});var A7e=s(Vb);Lme=n(A7e,"STRONG",{});var ict=s(Lme);sBo=r(ict,"flaubert"),ict.forEach(t),lBo=r(A7e," \u2014 "),JG=n(A7e,"A",{href:!0});var dct=s(JG);iBo=r(dct,"FlaubertForMultipleChoice"),dct.forEach(t),dBo=r(A7e," (FlauBERT model)"),A7e.forEach(t),cBo=i(K),Xb=n(K,"LI",{});var y7e=s(Xb);xme=n(y7e,"STRONG",{});var cct=s(xme);fBo=r(cct,"fnet"),cct.forEach(t),mBo=r(y7e," \u2014 "),YG=n(y7e,"A",{href:!0});var fct=s(YG);gBo=r(fct,"FNetForMultipleChoice"),fct.forEach(t),hBo=r(y7e," (FNet model)"),y7e.forEach(t),pBo=i(K),zb=n(K,"LI",{});var L7e=s(zb);$me=n(L7e,"STRONG",{});var mct=s($me);_Bo=r(mct,"funnel"),mct.forEach(t),uBo=r(L7e," \u2014 "),KG=n(L7e,"A",{href:!0});var gct=s(KG);bBo=r(gct,"FunnelForMultipleChoice"),gct.forEach(t),vBo=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),FBo=i(K),Wb=n(K,"LI",{});var x7e=s(Wb);kme=n(x7e,"STRONG",{});var hct=s(kme);TBo=r(hct,"ibert"),hct.forEach(t),MBo=r(x7e," \u2014 "),ZG=n(x7e,"A",{href:!0});var pct=s(ZG);EBo=r(pct,"IBertForMultipleChoice"),pct.forEach(t),CBo=r(x7e," (I-BERT model)"),x7e.forEach(t),wBo=i(K),Qb=n(K,"LI",{});var $7e=s(Qb);Sme=n($7e,"STRONG",{});var _ct=s(Sme);ABo=r(_ct,"longformer"),_ct.forEach(t),yBo=r($7e," \u2014 "),eO=n($7e,"A",{href:!0});var uct=s(eO);LBo=r(uct,"LongformerForMultipleChoice"),uct.forEach(t),xBo=r($7e," (Longformer model)"),$7e.forEach(t),$Bo=i(K),Hb=n(K,"LI",{});var k7e=s(Hb);Rme=n(k7e,"STRONG",{});var bct=s(Rme);kBo=r(bct,"megatron-bert"),bct.forEach(t),SBo=r(k7e," \u2014 "),oO=n(k7e,"A",{href:!0});var vct=s(oO);RBo=r(vct,"MegatronBertForMultipleChoice"),vct.forEach(t),PBo=r(k7e," (MegatronBert model)"),k7e.forEach(t),BBo=i(K),Ub=n(K,"LI",{});var S7e=s(Ub);Pme=n(S7e,"STRONG",{});var Fct=s(Pme);IBo=r(Fct,"mobilebert"),Fct.forEach(t),qBo=r(S7e," \u2014 "),rO=n(S7e,"A",{href:!0});var Tct=s(rO);NBo=r(Tct,"MobileBertForMultipleChoice"),Tct.forEach(t),jBo=r(S7e," (MobileBERT model)"),S7e.forEach(t),DBo=i(K),Jb=n(K,"LI",{});var R7e=s(Jb);Bme=n(R7e,"STRONG",{});var Mct=s(Bme);GBo=r(Mct,"mpnet"),Mct.forEach(t),OBo=r(R7e," \u2014 "),tO=n(R7e,"A",{href:!0});var Ect=s(tO);VBo=r(Ect,"MPNetForMultipleChoice"),Ect.forEach(t),XBo=r(R7e," (MPNet model)"),R7e.forEach(t),zBo=i(K),Yb=n(K,"LI",{});var P7e=s(Yb);Ime=n(P7e,"STRONG",{});var Cct=s(Ime);WBo=r(Cct,"nystromformer"),Cct.forEach(t),QBo=r(P7e," \u2014 "),aO=n(P7e,"A",{href:!0});var wct=s(aO);HBo=r(wct,"NystromformerForMultipleChoice"),wct.forEach(t),UBo=r(P7e," (Nystromformer model)"),P7e.forEach(t),JBo=i(K),Kb=n(K,"LI",{});var B7e=s(Kb);qme=n(B7e,"STRONG",{});var Act=s(qme);YBo=r(Act,"qdqbert"),Act.forEach(t),KBo=r(B7e," \u2014 "),nO=n(B7e,"A",{href:!0});var yct=s(nO);ZBo=r(yct,"QDQBertForMultipleChoice"),yct.forEach(t),eIo=r(B7e," (QDQBert model)"),B7e.forEach(t),oIo=i(K),Zb=n(K,"LI",{});var I7e=s(Zb);Nme=n(I7e,"STRONG",{});var Lct=s(Nme);rIo=r(Lct,"rembert"),Lct.forEach(t),tIo=r(I7e," \u2014 "),sO=n(I7e,"A",{href:!0});var xct=s(sO);aIo=r(xct,"RemBertForMultipleChoice"),xct.forEach(t),nIo=r(I7e," (RemBERT model)"),I7e.forEach(t),sIo=i(K),e2=n(K,"LI",{});var q7e=s(e2);jme=n(q7e,"STRONG",{});var $ct=s(jme);lIo=r($ct,"roberta"),$ct.forEach(t),iIo=r(q7e," \u2014 "),lO=n(q7e,"A",{href:!0});var kct=s(lO);dIo=r(kct,"RobertaForMultipleChoice"),kct.forEach(t),cIo=r(q7e," (RoBERTa model)"),q7e.forEach(t),fIo=i(K),o2=n(K,"LI",{});var N7e=s(o2);Dme=n(N7e,"STRONG",{});var Sct=s(Dme);mIo=r(Sct,"roformer"),Sct.forEach(t),gIo=r(N7e," \u2014 "),iO=n(N7e,"A",{href:!0});var Rct=s(iO);hIo=r(Rct,"RoFormerForMultipleChoice"),Rct.forEach(t),pIo=r(N7e," (RoFormer model)"),N7e.forEach(t),_Io=i(K),r2=n(K,"LI",{});var j7e=s(r2);Gme=n(j7e,"STRONG",{});var Pct=s(Gme);uIo=r(Pct,"squeezebert"),Pct.forEach(t),bIo=r(j7e," \u2014 "),dO=n(j7e,"A",{href:!0});var Bct=s(dO);vIo=r(Bct,"SqueezeBertForMultipleChoice"),Bct.forEach(t),FIo=r(j7e," (SqueezeBERT model)"),j7e.forEach(t),TIo=i(K),t2=n(K,"LI",{});var D7e=s(t2);Ome=n(D7e,"STRONG",{});var Ict=s(Ome);MIo=r(Ict,"xlm"),Ict.forEach(t),EIo=r(D7e," \u2014 "),cO=n(D7e,"A",{href:!0});var qct=s(cO);CIo=r(qct,"XLMForMultipleChoice"),qct.forEach(t),wIo=r(D7e," (XLM model)"),D7e.forEach(t),AIo=i(K),a2=n(K,"LI",{});var G7e=s(a2);Vme=n(G7e,"STRONG",{});var Nct=s(Vme);yIo=r(Nct,"xlm-roberta"),Nct.forEach(t),LIo=r(G7e," \u2014 "),fO=n(G7e,"A",{href:!0});var jct=s(fO);xIo=r(jct,"XLMRobertaForMultipleChoice"),jct.forEach(t),$Io=r(G7e," (XLM-RoBERTa model)"),G7e.forEach(t),kIo=i(K),n2=n(K,"LI",{});var O7e=s(n2);Xme=n(O7e,"STRONG",{});var Dct=s(Xme);SIo=r(Dct,"xlm-roberta-xl"),Dct.forEach(t),RIo=r(O7e," \u2014 "),mO=n(O7e,"A",{href:!0});var Gct=s(mO);PIo=r(Gct,"XLMRobertaXLForMultipleChoice"),Gct.forEach(t),BIo=r(O7e," (XLM-RoBERTa-XL model)"),O7e.forEach(t),IIo=i(K),s2=n(K,"LI",{});var V7e=s(s2);zme=n(V7e,"STRONG",{});var Oct=s(zme);qIo=r(Oct,"xlnet"),Oct.forEach(t),NIo=r(V7e," \u2014 "),gO=n(V7e,"A",{href:!0});var Vct=s(gO);jIo=r(Vct,"XLNetForMultipleChoice"),Vct.forEach(t),DIo=r(V7e," (XLNet model)"),V7e.forEach(t),GIo=i(K),l2=n(K,"LI",{});var X7e=s(l2);Wme=n(X7e,"STRONG",{});var Xct=s(Wme);OIo=r(Xct,"yoso"),Xct.forEach(t),VIo=r(X7e," \u2014 "),hO=n(X7e,"A",{href:!0});var zct=s(hO);XIo=r(zct,"YosoForMultipleChoice"),zct.forEach(t),zIo=r(X7e," (YOSO model)"),X7e.forEach(t),K.forEach(t),WIo=i(la),i2=n(la,"P",{});var z7e=s(i2);QIo=r(z7e,"The model is set in evaluation mode by default using "),Qme=n(z7e,"CODE",{});var Wct=s(Qme);HIo=r(Wct,"model.eval()"),Wct.forEach(t),UIo=r(z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(z7e,"CODE",{});var Qct=s(Hme);JIo=r(Qct,"model.train()"),Qct.forEach(t),z7e.forEach(t),YIo=i(la),T(d2.$$.fragment,la),la.forEach(t),Ws.forEach(t),Oqe=i(f),zi=n(f,"H2",{class:!0});var Wje=s(zi);c2=n(Wje,"A",{id:!0,class:!0,href:!0});var Hct=s(c2);Ume=n(Hct,"SPAN",{});var Uct=s(Ume);T(wy.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),KIo=i(Wje),Jme=n(Wje,"SPAN",{});var Jct=s(Jme);ZIo=r(Jct,"AutoModelForNextSentencePrediction"),Jct.forEach(t),Wje.forEach(t),Vqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(Ay.$$.fragment,Qs),eqo=i(Qs),Wi=n(Qs,"P",{});var iZ=s(Wi);oqo=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pO=n(iZ,"A",{href:!0});var Yct=s(pO);rqo=r(Yct,"from_pretrained()"),Yct.forEach(t),tqo=r(iZ," class method or the "),_O=n(iZ,"A",{href:!0});var Kct=s(_O);aqo=r(Kct,"from_config()"),Kct.forEach(t),nqo=r(iZ,` class
method.`),iZ.forEach(t),sqo=i(Qs),yy=n(Qs,"P",{});var Qje=s(yy);lqo=r(Qje,"This class cannot be instantiated directly using "),Yme=n(Qje,"CODE",{});var Zct=s(Yme);iqo=r(Zct,"__init__()"),Zct.forEach(t),dqo=r(Qje," (throws an error)."),Qje.forEach(t),cqo=i(Qs),ct=n(Qs,"DIV",{class:!0});var Iw=s(ct);T(Ly.$$.fragment,Iw),fqo=i(Iw),Kme=n(Iw,"P",{});var eft=s(Kme);mqo=r(eft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eft.forEach(t),gqo=i(Iw),Qi=n(Iw,"P",{});var dZ=s(Qi);hqo=r(dZ,`Note:
Loading a model from its configuration file does `),Zme=n(dZ,"STRONG",{});var oft=s(Zme);pqo=r(oft,"not"),oft.forEach(t),_qo=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(dZ,"A",{href:!0});var rft=s(uO);uqo=r(rft,"from_pretrained()"),rft.forEach(t),bqo=r(dZ," to load the model weights."),dZ.forEach(t),vqo=i(Iw),T(f2.$$.fragment,Iw),Iw.forEach(t),Fqo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(xy.$$.fragment,ia),Tqo=i(ia),ege=n(ia,"P",{});var tft=s(ege);Mqo=r(tft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tft.forEach(t),Eqo=i(ia),Ba=n(ia,"P",{});var qw=s(Ba);Cqo=r(qw,"The model class to instantiate is selected based on the "),oge=n(qw,"CODE",{});var aft=s(oge);wqo=r(aft,"model_type"),aft.forEach(t),Aqo=r(qw,` property of the config object (either
passed as an argument or loaded from `),rge=n(qw,"CODE",{});var nft=s(rge);yqo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),Lqo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(qw,"CODE",{});var sft=s(tge);xqo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),$qo=r(qw,":"),qw.forEach(t),kqo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);m2=n(Hs,"LI",{});var W7e=s(m2);age=n(W7e,"STRONG",{});var lft=s(age);Sqo=r(lft,"bert"),lft.forEach(t),Rqo=r(W7e," \u2014 "),bO=n(W7e,"A",{href:!0});var ift=s(bO);Pqo=r(ift,"BertForNextSentencePrediction"),ift.forEach(t),Bqo=r(W7e," (BERT model)"),W7e.forEach(t),Iqo=i(Hs),g2=n(Hs,"LI",{});var Q7e=s(g2);nge=n(Q7e,"STRONG",{});var dft=s(nge);qqo=r(dft,"fnet"),dft.forEach(t),Nqo=r(Q7e," \u2014 "),vO=n(Q7e,"A",{href:!0});var cft=s(vO);jqo=r(cft,"FNetForNextSentencePrediction"),cft.forEach(t),Dqo=r(Q7e," (FNet model)"),Q7e.forEach(t),Gqo=i(Hs),h2=n(Hs,"LI",{});var H7e=s(h2);sge=n(H7e,"STRONG",{});var fft=s(sge);Oqo=r(fft,"megatron-bert"),fft.forEach(t),Vqo=r(H7e," \u2014 "),FO=n(H7e,"A",{href:!0});var mft=s(FO);Xqo=r(mft,"MegatronBertForNextSentencePrediction"),mft.forEach(t),zqo=r(H7e," (MegatronBert model)"),H7e.forEach(t),Wqo=i(Hs),p2=n(Hs,"LI",{});var U7e=s(p2);lge=n(U7e,"STRONG",{});var gft=s(lge);Qqo=r(gft,"mobilebert"),gft.forEach(t),Hqo=r(U7e," \u2014 "),TO=n(U7e,"A",{href:!0});var hft=s(TO);Uqo=r(hft,"MobileBertForNextSentencePrediction"),hft.forEach(t),Jqo=r(U7e," (MobileBERT model)"),U7e.forEach(t),Yqo=i(Hs),_2=n(Hs,"LI",{});var J7e=s(_2);ige=n(J7e,"STRONG",{});var pft=s(ige);Kqo=r(pft,"qdqbert"),pft.forEach(t),Zqo=r(J7e," \u2014 "),MO=n(J7e,"A",{href:!0});var _ft=s(MO);eNo=r(_ft,"QDQBertForNextSentencePrediction"),_ft.forEach(t),oNo=r(J7e," (QDQBert model)"),J7e.forEach(t),Hs.forEach(t),rNo=i(ia),u2=n(ia,"P",{});var Y7e=s(u2);tNo=r(Y7e,"The model is set in evaluation mode by default using "),dge=n(Y7e,"CODE",{});var uft=s(dge);aNo=r(uft,"model.eval()"),uft.forEach(t),nNo=r(Y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=n(Y7e,"CODE",{});var bft=s(cge);sNo=r(bft,"model.train()"),bft.forEach(t),Y7e.forEach(t),lNo=i(ia),T(b2.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Xqe=i(f),Hi=n(f,"H2",{class:!0});var Hje=s(Hi);v2=n(Hje,"A",{id:!0,class:!0,href:!0});var vft=s(v2);fge=n(vft,"SPAN",{});var Fft=s(fge);T($y.$$.fragment,Fft),Fft.forEach(t),vft.forEach(t),iNo=i(Hje),mge=n(Hje,"SPAN",{});var Tft=s(mge);dNo=r(Tft,"AutoModelForTokenClassification"),Tft.forEach(t),Hje.forEach(t),zqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(ky.$$.fragment,Us),cNo=i(Us),Ui=n(Us,"P",{});var cZ=s(Ui);fNo=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EO=n(cZ,"A",{href:!0});var Mft=s(EO);mNo=r(Mft,"from_pretrained()"),Mft.forEach(t),gNo=r(cZ," class method or the "),CO=n(cZ,"A",{href:!0});var Eft=s(CO);hNo=r(Eft,"from_config()"),Eft.forEach(t),pNo=r(cZ,` class
method.`),cZ.forEach(t),_No=i(Us),Sy=n(Us,"P",{});var Uje=s(Sy);uNo=r(Uje,"This class cannot be instantiated directly using "),gge=n(Uje,"CODE",{});var Cft=s(gge);bNo=r(Cft,"__init__()"),Cft.forEach(t),vNo=r(Uje," (throws an error)."),Uje.forEach(t),FNo=i(Us),ft=n(Us,"DIV",{class:!0});var Nw=s(ft);T(Ry.$$.fragment,Nw),TNo=i(Nw),hge=n(Nw,"P",{});var wft=s(hge);MNo=r(wft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wft.forEach(t),ENo=i(Nw),Ji=n(Nw,"P",{});var fZ=s(Ji);CNo=r(fZ,`Note:
Loading a model from its configuration file does `),pge=n(fZ,"STRONG",{});var Aft=s(pge);wNo=r(Aft,"not"),Aft.forEach(t),ANo=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(fZ,"A",{href:!0});var yft=s(wO);yNo=r(yft,"from_pretrained()"),yft.forEach(t),LNo=r(fZ," to load the model weights."),fZ.forEach(t),xNo=i(Nw),T(F2.$$.fragment,Nw),Nw.forEach(t),$No=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(Py.$$.fragment,da),kNo=i(da),_ge=n(da,"P",{});var Lft=s(_ge);SNo=r(Lft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Lft.forEach(t),RNo=i(da),Ia=n(da,"P",{});var jw=s(Ia);PNo=r(jw,"The model class to instantiate is selected based on the "),uge=n(jw,"CODE",{});var xft=s(uge);BNo=r(xft,"model_type"),xft.forEach(t),INo=r(jw,` property of the config object (either
passed as an argument or loaded from `),bge=n(jw,"CODE",{});var $ft=s(bge);qNo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),NNo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=n(jw,"CODE",{});var kft=s(vge);jNo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),DNo=r(jw,":"),jw.forEach(t),GNo=i(da),U=n(da,"UL",{});var J=s(U);T2=n(J,"LI",{});var K7e=s(T2);Fge=n(K7e,"STRONG",{});var Sft=s(Fge);ONo=r(Sft,"albert"),Sft.forEach(t),VNo=r(K7e," \u2014 "),AO=n(K7e,"A",{href:!0});var Rft=s(AO);XNo=r(Rft,"AlbertForTokenClassification"),Rft.forEach(t),zNo=r(K7e," (ALBERT model)"),K7e.forEach(t),WNo=i(J),M2=n(J,"LI",{});var Z7e=s(M2);Tge=n(Z7e,"STRONG",{});var Pft=s(Tge);QNo=r(Pft,"bert"),Pft.forEach(t),HNo=r(Z7e," \u2014 "),yO=n(Z7e,"A",{href:!0});var Bft=s(yO);UNo=r(Bft,"BertForTokenClassification"),Bft.forEach(t),JNo=r(Z7e," (BERT model)"),Z7e.forEach(t),YNo=i(J),E2=n(J,"LI",{});var exe=s(E2);Mge=n(exe,"STRONG",{});var Ift=s(Mge);KNo=r(Ift,"big_bird"),Ift.forEach(t),ZNo=r(exe," \u2014 "),LO=n(exe,"A",{href:!0});var qft=s(LO);ejo=r(qft,"BigBirdForTokenClassification"),qft.forEach(t),ojo=r(exe," (BigBird model)"),exe.forEach(t),rjo=i(J),C2=n(J,"LI",{});var oxe=s(C2);Ege=n(oxe,"STRONG",{});var Nft=s(Ege);tjo=r(Nft,"camembert"),Nft.forEach(t),ajo=r(oxe," \u2014 "),xO=n(oxe,"A",{href:!0});var jft=s(xO);njo=r(jft,"CamembertForTokenClassification"),jft.forEach(t),sjo=r(oxe," (CamemBERT model)"),oxe.forEach(t),ljo=i(J),w2=n(J,"LI",{});var rxe=s(w2);Cge=n(rxe,"STRONG",{});var Dft=s(Cge);ijo=r(Dft,"canine"),Dft.forEach(t),djo=r(rxe," \u2014 "),$O=n(rxe,"A",{href:!0});var Gft=s($O);cjo=r(Gft,"CanineForTokenClassification"),Gft.forEach(t),fjo=r(rxe," (Canine model)"),rxe.forEach(t),mjo=i(J),A2=n(J,"LI",{});var txe=s(A2);wge=n(txe,"STRONG",{});var Oft=s(wge);gjo=r(Oft,"convbert"),Oft.forEach(t),hjo=r(txe," \u2014 "),kO=n(txe,"A",{href:!0});var Vft=s(kO);pjo=r(Vft,"ConvBertForTokenClassification"),Vft.forEach(t),_jo=r(txe," (ConvBERT model)"),txe.forEach(t),ujo=i(J),y2=n(J,"LI",{});var axe=s(y2);Age=n(axe,"STRONG",{});var Xft=s(Age);bjo=r(Xft,"data2vec-text"),Xft.forEach(t),vjo=r(axe," \u2014 "),SO=n(axe,"A",{href:!0});var zft=s(SO);Fjo=r(zft,"Data2VecTextForTokenClassification"),zft.forEach(t),Tjo=r(axe," (Data2VecText model)"),axe.forEach(t),Mjo=i(J),L2=n(J,"LI",{});var nxe=s(L2);yge=n(nxe,"STRONG",{});var Wft=s(yge);Ejo=r(Wft,"deberta"),Wft.forEach(t),Cjo=r(nxe," \u2014 "),RO=n(nxe,"A",{href:!0});var Qft=s(RO);wjo=r(Qft,"DebertaForTokenClassification"),Qft.forEach(t),Ajo=r(nxe," (DeBERTa model)"),nxe.forEach(t),yjo=i(J),x2=n(J,"LI",{});var sxe=s(x2);Lge=n(sxe,"STRONG",{});var Hft=s(Lge);Ljo=r(Hft,"deberta-v2"),Hft.forEach(t),xjo=r(sxe," \u2014 "),PO=n(sxe,"A",{href:!0});var Uft=s(PO);$jo=r(Uft,"DebertaV2ForTokenClassification"),Uft.forEach(t),kjo=r(sxe," (DeBERTa-v2 model)"),sxe.forEach(t),Sjo=i(J),$2=n(J,"LI",{});var lxe=s($2);xge=n(lxe,"STRONG",{});var Jft=s(xge);Rjo=r(Jft,"distilbert"),Jft.forEach(t),Pjo=r(lxe," \u2014 "),BO=n(lxe,"A",{href:!0});var Yft=s(BO);Bjo=r(Yft,"DistilBertForTokenClassification"),Yft.forEach(t),Ijo=r(lxe," (DistilBERT model)"),lxe.forEach(t),qjo=i(J),k2=n(J,"LI",{});var ixe=s(k2);$ge=n(ixe,"STRONG",{});var Kft=s($ge);Njo=r(Kft,"electra"),Kft.forEach(t),jjo=r(ixe," \u2014 "),IO=n(ixe,"A",{href:!0});var Zft=s(IO);Djo=r(Zft,"ElectraForTokenClassification"),Zft.forEach(t),Gjo=r(ixe," (ELECTRA model)"),ixe.forEach(t),Ojo=i(J),S2=n(J,"LI",{});var dxe=s(S2);kge=n(dxe,"STRONG",{});var emt=s(kge);Vjo=r(emt,"flaubert"),emt.forEach(t),Xjo=r(dxe," \u2014 "),qO=n(dxe,"A",{href:!0});var omt=s(qO);zjo=r(omt,"FlaubertForTokenClassification"),omt.forEach(t),Wjo=r(dxe," (FlauBERT model)"),dxe.forEach(t),Qjo=i(J),R2=n(J,"LI",{});var cxe=s(R2);Sge=n(cxe,"STRONG",{});var rmt=s(Sge);Hjo=r(rmt,"fnet"),rmt.forEach(t),Ujo=r(cxe," \u2014 "),NO=n(cxe,"A",{href:!0});var tmt=s(NO);Jjo=r(tmt,"FNetForTokenClassification"),tmt.forEach(t),Yjo=r(cxe," (FNet model)"),cxe.forEach(t),Kjo=i(J),P2=n(J,"LI",{});var fxe=s(P2);Rge=n(fxe,"STRONG",{});var amt=s(Rge);Zjo=r(amt,"funnel"),amt.forEach(t),eDo=r(fxe," \u2014 "),jO=n(fxe,"A",{href:!0});var nmt=s(jO);oDo=r(nmt,"FunnelForTokenClassification"),nmt.forEach(t),rDo=r(fxe," (Funnel Transformer model)"),fxe.forEach(t),tDo=i(J),B2=n(J,"LI",{});var mxe=s(B2);Pge=n(mxe,"STRONG",{});var smt=s(Pge);aDo=r(smt,"gpt2"),smt.forEach(t),nDo=r(mxe," \u2014 "),DO=n(mxe,"A",{href:!0});var lmt=s(DO);sDo=r(lmt,"GPT2ForTokenClassification"),lmt.forEach(t),lDo=r(mxe," (OpenAI GPT-2 model)"),mxe.forEach(t),iDo=i(J),I2=n(J,"LI",{});var gxe=s(I2);Bge=n(gxe,"STRONG",{});var imt=s(Bge);dDo=r(imt,"ibert"),imt.forEach(t),cDo=r(gxe," \u2014 "),GO=n(gxe,"A",{href:!0});var dmt=s(GO);fDo=r(dmt,"IBertForTokenClassification"),dmt.forEach(t),mDo=r(gxe," (I-BERT model)"),gxe.forEach(t),gDo=i(J),q2=n(J,"LI",{});var hxe=s(q2);Ige=n(hxe,"STRONG",{});var cmt=s(Ige);hDo=r(cmt,"layoutlm"),cmt.forEach(t),pDo=r(hxe," \u2014 "),OO=n(hxe,"A",{href:!0});var fmt=s(OO);_Do=r(fmt,"LayoutLMForTokenClassification"),fmt.forEach(t),uDo=r(hxe," (LayoutLM model)"),hxe.forEach(t),bDo=i(J),N2=n(J,"LI",{});var pxe=s(N2);qge=n(pxe,"STRONG",{});var mmt=s(qge);vDo=r(mmt,"layoutlmv2"),mmt.forEach(t),FDo=r(pxe," \u2014 "),VO=n(pxe,"A",{href:!0});var gmt=s(VO);TDo=r(gmt,"LayoutLMv2ForTokenClassification"),gmt.forEach(t),MDo=r(pxe," (LayoutLMv2 model)"),pxe.forEach(t),EDo=i(J),j2=n(J,"LI",{});var _xe=s(j2);Nge=n(_xe,"STRONG",{});var hmt=s(Nge);CDo=r(hmt,"longformer"),hmt.forEach(t),wDo=r(_xe," \u2014 "),XO=n(_xe,"A",{href:!0});var pmt=s(XO);ADo=r(pmt,"LongformerForTokenClassification"),pmt.forEach(t),yDo=r(_xe," (Longformer model)"),_xe.forEach(t),LDo=i(J),D2=n(J,"LI",{});var uxe=s(D2);jge=n(uxe,"STRONG",{});var _mt=s(jge);xDo=r(_mt,"megatron-bert"),_mt.forEach(t),$Do=r(uxe," \u2014 "),zO=n(uxe,"A",{href:!0});var umt=s(zO);kDo=r(umt,"MegatronBertForTokenClassification"),umt.forEach(t),SDo=r(uxe," (MegatronBert model)"),uxe.forEach(t),RDo=i(J),G2=n(J,"LI",{});var bxe=s(G2);Dge=n(bxe,"STRONG",{});var bmt=s(Dge);PDo=r(bmt,"mobilebert"),bmt.forEach(t),BDo=r(bxe," \u2014 "),WO=n(bxe,"A",{href:!0});var vmt=s(WO);IDo=r(vmt,"MobileBertForTokenClassification"),vmt.forEach(t),qDo=r(bxe," (MobileBERT model)"),bxe.forEach(t),NDo=i(J),O2=n(J,"LI",{});var vxe=s(O2);Gge=n(vxe,"STRONG",{});var Fmt=s(Gge);jDo=r(Fmt,"mpnet"),Fmt.forEach(t),DDo=r(vxe," \u2014 "),QO=n(vxe,"A",{href:!0});var Tmt=s(QO);GDo=r(Tmt,"MPNetForTokenClassification"),Tmt.forEach(t),ODo=r(vxe," (MPNet model)"),vxe.forEach(t),VDo=i(J),V2=n(J,"LI",{});var Fxe=s(V2);Oge=n(Fxe,"STRONG",{});var Mmt=s(Oge);XDo=r(Mmt,"nystromformer"),Mmt.forEach(t),zDo=r(Fxe," \u2014 "),HO=n(Fxe,"A",{href:!0});var Emt=s(HO);WDo=r(Emt,"NystromformerForTokenClassification"),Emt.forEach(t),QDo=r(Fxe," (Nystromformer model)"),Fxe.forEach(t),HDo=i(J),X2=n(J,"LI",{});var Txe=s(X2);Vge=n(Txe,"STRONG",{});var Cmt=s(Vge);UDo=r(Cmt,"qdqbert"),Cmt.forEach(t),JDo=r(Txe," \u2014 "),UO=n(Txe,"A",{href:!0});var wmt=s(UO);YDo=r(wmt,"QDQBertForTokenClassification"),wmt.forEach(t),KDo=r(Txe," (QDQBert model)"),Txe.forEach(t),ZDo=i(J),z2=n(J,"LI",{});var Mxe=s(z2);Xge=n(Mxe,"STRONG",{});var Amt=s(Xge);eGo=r(Amt,"rembert"),Amt.forEach(t),oGo=r(Mxe," \u2014 "),JO=n(Mxe,"A",{href:!0});var ymt=s(JO);rGo=r(ymt,"RemBertForTokenClassification"),ymt.forEach(t),tGo=r(Mxe," (RemBERT model)"),Mxe.forEach(t),aGo=i(J),W2=n(J,"LI",{});var Exe=s(W2);zge=n(Exe,"STRONG",{});var Lmt=s(zge);nGo=r(Lmt,"roberta"),Lmt.forEach(t),sGo=r(Exe," \u2014 "),YO=n(Exe,"A",{href:!0});var xmt=s(YO);lGo=r(xmt,"RobertaForTokenClassification"),xmt.forEach(t),iGo=r(Exe," (RoBERTa model)"),Exe.forEach(t),dGo=i(J),Q2=n(J,"LI",{});var Cxe=s(Q2);Wge=n(Cxe,"STRONG",{});var $mt=s(Wge);cGo=r($mt,"roformer"),$mt.forEach(t),fGo=r(Cxe," \u2014 "),KO=n(Cxe,"A",{href:!0});var kmt=s(KO);mGo=r(kmt,"RoFormerForTokenClassification"),kmt.forEach(t),gGo=r(Cxe," (RoFormer model)"),Cxe.forEach(t),hGo=i(J),H2=n(J,"LI",{});var wxe=s(H2);Qge=n(wxe,"STRONG",{});var Smt=s(Qge);pGo=r(Smt,"squeezebert"),Smt.forEach(t),_Go=r(wxe," \u2014 "),ZO=n(wxe,"A",{href:!0});var Rmt=s(ZO);uGo=r(Rmt,"SqueezeBertForTokenClassification"),Rmt.forEach(t),bGo=r(wxe," (SqueezeBERT model)"),wxe.forEach(t),vGo=i(J),U2=n(J,"LI",{});var Axe=s(U2);Hge=n(Axe,"STRONG",{});var Pmt=s(Hge);FGo=r(Pmt,"xlm"),Pmt.forEach(t),TGo=r(Axe," \u2014 "),eV=n(Axe,"A",{href:!0});var Bmt=s(eV);MGo=r(Bmt,"XLMForTokenClassification"),Bmt.forEach(t),EGo=r(Axe," (XLM model)"),Axe.forEach(t),CGo=i(J),J2=n(J,"LI",{});var yxe=s(J2);Uge=n(yxe,"STRONG",{});var Imt=s(Uge);wGo=r(Imt,"xlm-roberta"),Imt.forEach(t),AGo=r(yxe," \u2014 "),oV=n(yxe,"A",{href:!0});var qmt=s(oV);yGo=r(qmt,"XLMRobertaForTokenClassification"),qmt.forEach(t),LGo=r(yxe," (XLM-RoBERTa model)"),yxe.forEach(t),xGo=i(J),Y2=n(J,"LI",{});var Lxe=s(Y2);Jge=n(Lxe,"STRONG",{});var Nmt=s(Jge);$Go=r(Nmt,"xlm-roberta-xl"),Nmt.forEach(t),kGo=r(Lxe," \u2014 "),rV=n(Lxe,"A",{href:!0});var jmt=s(rV);SGo=r(jmt,"XLMRobertaXLForTokenClassification"),jmt.forEach(t),RGo=r(Lxe," (XLM-RoBERTa-XL model)"),Lxe.forEach(t),PGo=i(J),K2=n(J,"LI",{});var xxe=s(K2);Yge=n(xxe,"STRONG",{});var Dmt=s(Yge);BGo=r(Dmt,"xlnet"),Dmt.forEach(t),IGo=r(xxe," \u2014 "),tV=n(xxe,"A",{href:!0});var Gmt=s(tV);qGo=r(Gmt,"XLNetForTokenClassification"),Gmt.forEach(t),NGo=r(xxe," (XLNet model)"),xxe.forEach(t),jGo=i(J),Z2=n(J,"LI",{});var $xe=s(Z2);Kge=n($xe,"STRONG",{});var Omt=s(Kge);DGo=r(Omt,"yoso"),Omt.forEach(t),GGo=r($xe," \u2014 "),aV=n($xe,"A",{href:!0});var Vmt=s(aV);OGo=r(Vmt,"YosoForTokenClassification"),Vmt.forEach(t),VGo=r($xe," (YOSO model)"),$xe.forEach(t),J.forEach(t),XGo=i(da),e5=n(da,"P",{});var kxe=s(e5);zGo=r(kxe,"The model is set in evaluation mode by default using "),Zge=n(kxe,"CODE",{});var Xmt=s(Zge);WGo=r(Xmt,"model.eval()"),Xmt.forEach(t),QGo=r(kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=n(kxe,"CODE",{});var zmt=s(ehe);HGo=r(zmt,"model.train()"),zmt.forEach(t),kxe.forEach(t),UGo=i(da),T(o5.$$.fragment,da),da.forEach(t),Us.forEach(t),Wqe=i(f),Yi=n(f,"H2",{class:!0});var Jje=s(Yi);r5=n(Jje,"A",{id:!0,class:!0,href:!0});var Wmt=s(r5);ohe=n(Wmt,"SPAN",{});var Qmt=s(ohe);T(By.$$.fragment,Qmt),Qmt.forEach(t),Wmt.forEach(t),JGo=i(Jje),rhe=n(Jje,"SPAN",{});var Hmt=s(rhe);YGo=r(Hmt,"AutoModelForQuestionAnswering"),Hmt.forEach(t),Jje.forEach(t),Qqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(Iy.$$.fragment,Js),KGo=i(Js),Ki=n(Js,"P",{});var mZ=s(Ki);ZGo=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nV=n(mZ,"A",{href:!0});var Umt=s(nV);eOo=r(Umt,"from_pretrained()"),Umt.forEach(t),oOo=r(mZ," class method or the "),sV=n(mZ,"A",{href:!0});var Jmt=s(sV);rOo=r(Jmt,"from_config()"),Jmt.forEach(t),tOo=r(mZ,` class
method.`),mZ.forEach(t),aOo=i(Js),qy=n(Js,"P",{});var Yje=s(qy);nOo=r(Yje,"This class cannot be instantiated directly using "),the=n(Yje,"CODE",{});var Ymt=s(the);sOo=r(Ymt,"__init__()"),Ymt.forEach(t),lOo=r(Yje," (throws an error)."),Yje.forEach(t),iOo=i(Js),mt=n(Js,"DIV",{class:!0});var Dw=s(mt);T(Ny.$$.fragment,Dw),dOo=i(Dw),ahe=n(Dw,"P",{});var Kmt=s(ahe);cOo=r(Kmt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kmt.forEach(t),fOo=i(Dw),Zi=n(Dw,"P",{});var gZ=s(Zi);mOo=r(gZ,`Note:
Loading a model from its configuration file does `),nhe=n(gZ,"STRONG",{});var Zmt=s(nhe);gOo=r(Zmt,"not"),Zmt.forEach(t),hOo=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lV=n(gZ,"A",{href:!0});var egt=s(lV);pOo=r(egt,"from_pretrained()"),egt.forEach(t),_Oo=r(gZ," to load the model weights."),gZ.forEach(t),uOo=i(Dw),T(t5.$$.fragment,Dw),Dw.forEach(t),bOo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(jy.$$.fragment,ca),vOo=i(ca),she=n(ca,"P",{});var ogt=s(she);FOo=r(ogt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ogt.forEach(t),TOo=i(ca),qa=n(ca,"P",{});var Gw=s(qa);MOo=r(Gw,"The model class to instantiate is selected based on the "),lhe=n(Gw,"CODE",{});var rgt=s(lhe);EOo=r(rgt,"model_type"),rgt.forEach(t),COo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),ihe=n(Gw,"CODE",{});var tgt=s(ihe);wOo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),AOo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(Gw,"CODE",{});var agt=s(dhe);yOo=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),LOo=r(Gw,":"),Gw.forEach(t),xOo=i(ca),V=n(ca,"UL",{});var X=s(V);a5=n(X,"LI",{});var Sxe=s(a5);che=n(Sxe,"STRONG",{});var ngt=s(che);$Oo=r(ngt,"albert"),ngt.forEach(t),kOo=r(Sxe," \u2014 "),iV=n(Sxe,"A",{href:!0});var sgt=s(iV);SOo=r(sgt,"AlbertForQuestionAnswering"),sgt.forEach(t),ROo=r(Sxe," (ALBERT model)"),Sxe.forEach(t),POo=i(X),n5=n(X,"LI",{});var Rxe=s(n5);fhe=n(Rxe,"STRONG",{});var lgt=s(fhe);BOo=r(lgt,"bart"),lgt.forEach(t),IOo=r(Rxe," \u2014 "),dV=n(Rxe,"A",{href:!0});var igt=s(dV);qOo=r(igt,"BartForQuestionAnswering"),igt.forEach(t),NOo=r(Rxe," (BART model)"),Rxe.forEach(t),jOo=i(X),s5=n(X,"LI",{});var Pxe=s(s5);mhe=n(Pxe,"STRONG",{});var dgt=s(mhe);DOo=r(dgt,"bert"),dgt.forEach(t),GOo=r(Pxe," \u2014 "),cV=n(Pxe,"A",{href:!0});var cgt=s(cV);OOo=r(cgt,"BertForQuestionAnswering"),cgt.forEach(t),VOo=r(Pxe," (BERT model)"),Pxe.forEach(t),XOo=i(X),l5=n(X,"LI",{});var Bxe=s(l5);ghe=n(Bxe,"STRONG",{});var fgt=s(ghe);zOo=r(fgt,"big_bird"),fgt.forEach(t),WOo=r(Bxe," \u2014 "),fV=n(Bxe,"A",{href:!0});var mgt=s(fV);QOo=r(mgt,"BigBirdForQuestionAnswering"),mgt.forEach(t),HOo=r(Bxe," (BigBird model)"),Bxe.forEach(t),UOo=i(X),i5=n(X,"LI",{});var Ixe=s(i5);hhe=n(Ixe,"STRONG",{});var ggt=s(hhe);JOo=r(ggt,"bigbird_pegasus"),ggt.forEach(t),YOo=r(Ixe," \u2014 "),mV=n(Ixe,"A",{href:!0});var hgt=s(mV);KOo=r(hgt,"BigBirdPegasusForQuestionAnswering"),hgt.forEach(t),ZOo=r(Ixe," (BigBirdPegasus model)"),Ixe.forEach(t),eVo=i(X),d5=n(X,"LI",{});var qxe=s(d5);phe=n(qxe,"STRONG",{});var pgt=s(phe);oVo=r(pgt,"camembert"),pgt.forEach(t),rVo=r(qxe," \u2014 "),gV=n(qxe,"A",{href:!0});var _gt=s(gV);tVo=r(_gt,"CamembertForQuestionAnswering"),_gt.forEach(t),aVo=r(qxe," (CamemBERT model)"),qxe.forEach(t),nVo=i(X),c5=n(X,"LI",{});var Nxe=s(c5);_he=n(Nxe,"STRONG",{});var ugt=s(_he);sVo=r(ugt,"canine"),ugt.forEach(t),lVo=r(Nxe," \u2014 "),hV=n(Nxe,"A",{href:!0});var bgt=s(hV);iVo=r(bgt,"CanineForQuestionAnswering"),bgt.forEach(t),dVo=r(Nxe," (Canine model)"),Nxe.forEach(t),cVo=i(X),f5=n(X,"LI",{});var jxe=s(f5);uhe=n(jxe,"STRONG",{});var vgt=s(uhe);fVo=r(vgt,"convbert"),vgt.forEach(t),mVo=r(jxe," \u2014 "),pV=n(jxe,"A",{href:!0});var Fgt=s(pV);gVo=r(Fgt,"ConvBertForQuestionAnswering"),Fgt.forEach(t),hVo=r(jxe," (ConvBERT model)"),jxe.forEach(t),pVo=i(X),m5=n(X,"LI",{});var Dxe=s(m5);bhe=n(Dxe,"STRONG",{});var Tgt=s(bhe);_Vo=r(Tgt,"data2vec-text"),Tgt.forEach(t),uVo=r(Dxe," \u2014 "),_V=n(Dxe,"A",{href:!0});var Mgt=s(_V);bVo=r(Mgt,"Data2VecTextForQuestionAnswering"),Mgt.forEach(t),vVo=r(Dxe," (Data2VecText model)"),Dxe.forEach(t),FVo=i(X),g5=n(X,"LI",{});var Gxe=s(g5);vhe=n(Gxe,"STRONG",{});var Egt=s(vhe);TVo=r(Egt,"deberta"),Egt.forEach(t),MVo=r(Gxe," \u2014 "),uV=n(Gxe,"A",{href:!0});var Cgt=s(uV);EVo=r(Cgt,"DebertaForQuestionAnswering"),Cgt.forEach(t),CVo=r(Gxe," (DeBERTa model)"),Gxe.forEach(t),wVo=i(X),h5=n(X,"LI",{});var Oxe=s(h5);Fhe=n(Oxe,"STRONG",{});var wgt=s(Fhe);AVo=r(wgt,"deberta-v2"),wgt.forEach(t),yVo=r(Oxe," \u2014 "),bV=n(Oxe,"A",{href:!0});var Agt=s(bV);LVo=r(Agt,"DebertaV2ForQuestionAnswering"),Agt.forEach(t),xVo=r(Oxe," (DeBERTa-v2 model)"),Oxe.forEach(t),$Vo=i(X),p5=n(X,"LI",{});var Vxe=s(p5);The=n(Vxe,"STRONG",{});var ygt=s(The);kVo=r(ygt,"distilbert"),ygt.forEach(t),SVo=r(Vxe," \u2014 "),vV=n(Vxe,"A",{href:!0});var Lgt=s(vV);RVo=r(Lgt,"DistilBertForQuestionAnswering"),Lgt.forEach(t),PVo=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),BVo=i(X),_5=n(X,"LI",{});var Xxe=s(_5);Mhe=n(Xxe,"STRONG",{});var xgt=s(Mhe);IVo=r(xgt,"electra"),xgt.forEach(t),qVo=r(Xxe," \u2014 "),FV=n(Xxe,"A",{href:!0});var $gt=s(FV);NVo=r($gt,"ElectraForQuestionAnswering"),$gt.forEach(t),jVo=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),DVo=i(X),u5=n(X,"LI",{});var zxe=s(u5);Ehe=n(zxe,"STRONG",{});var kgt=s(Ehe);GVo=r(kgt,"flaubert"),kgt.forEach(t),OVo=r(zxe," \u2014 "),TV=n(zxe,"A",{href:!0});var Sgt=s(TV);VVo=r(Sgt,"FlaubertForQuestionAnsweringSimple"),Sgt.forEach(t),XVo=r(zxe," (FlauBERT model)"),zxe.forEach(t),zVo=i(X),b5=n(X,"LI",{});var Wxe=s(b5);Che=n(Wxe,"STRONG",{});var Rgt=s(Che);WVo=r(Rgt,"fnet"),Rgt.forEach(t),QVo=r(Wxe," \u2014 "),MV=n(Wxe,"A",{href:!0});var Pgt=s(MV);HVo=r(Pgt,"FNetForQuestionAnswering"),Pgt.forEach(t),UVo=r(Wxe," (FNet model)"),Wxe.forEach(t),JVo=i(X),v5=n(X,"LI",{});var Qxe=s(v5);whe=n(Qxe,"STRONG",{});var Bgt=s(whe);YVo=r(Bgt,"funnel"),Bgt.forEach(t),KVo=r(Qxe," \u2014 "),EV=n(Qxe,"A",{href:!0});var Igt=s(EV);ZVo=r(Igt,"FunnelForQuestionAnswering"),Igt.forEach(t),eXo=r(Qxe," (Funnel Transformer model)"),Qxe.forEach(t),oXo=i(X),F5=n(X,"LI",{});var Hxe=s(F5);Ahe=n(Hxe,"STRONG",{});var qgt=s(Ahe);rXo=r(qgt,"gptj"),qgt.forEach(t),tXo=r(Hxe," \u2014 "),CV=n(Hxe,"A",{href:!0});var Ngt=s(CV);aXo=r(Ngt,"GPTJForQuestionAnswering"),Ngt.forEach(t),nXo=r(Hxe," (GPT-J model)"),Hxe.forEach(t),sXo=i(X),T5=n(X,"LI",{});var Uxe=s(T5);yhe=n(Uxe,"STRONG",{});var jgt=s(yhe);lXo=r(jgt,"ibert"),jgt.forEach(t),iXo=r(Uxe," \u2014 "),wV=n(Uxe,"A",{href:!0});var Dgt=s(wV);dXo=r(Dgt,"IBertForQuestionAnswering"),Dgt.forEach(t),cXo=r(Uxe," (I-BERT model)"),Uxe.forEach(t),fXo=i(X),M5=n(X,"LI",{});var Jxe=s(M5);Lhe=n(Jxe,"STRONG",{});var Ggt=s(Lhe);mXo=r(Ggt,"layoutlmv2"),Ggt.forEach(t),gXo=r(Jxe," \u2014 "),AV=n(Jxe,"A",{href:!0});var Ogt=s(AV);hXo=r(Ogt,"LayoutLMv2ForQuestionAnswering"),Ogt.forEach(t),pXo=r(Jxe," (LayoutLMv2 model)"),Jxe.forEach(t),_Xo=i(X),E5=n(X,"LI",{});var Yxe=s(E5);xhe=n(Yxe,"STRONG",{});var Vgt=s(xhe);uXo=r(Vgt,"led"),Vgt.forEach(t),bXo=r(Yxe," \u2014 "),yV=n(Yxe,"A",{href:!0});var Xgt=s(yV);vXo=r(Xgt,"LEDForQuestionAnswering"),Xgt.forEach(t),FXo=r(Yxe," (LED model)"),Yxe.forEach(t),TXo=i(X),C5=n(X,"LI",{});var Kxe=s(C5);$he=n(Kxe,"STRONG",{});var zgt=s($he);MXo=r(zgt,"longformer"),zgt.forEach(t),EXo=r(Kxe," \u2014 "),LV=n(Kxe,"A",{href:!0});var Wgt=s(LV);CXo=r(Wgt,"LongformerForQuestionAnswering"),Wgt.forEach(t),wXo=r(Kxe," (Longformer model)"),Kxe.forEach(t),AXo=i(X),w5=n(X,"LI",{});var Zxe=s(w5);khe=n(Zxe,"STRONG",{});var Qgt=s(khe);yXo=r(Qgt,"lxmert"),Qgt.forEach(t),LXo=r(Zxe," \u2014 "),xV=n(Zxe,"A",{href:!0});var Hgt=s(xV);xXo=r(Hgt,"LxmertForQuestionAnswering"),Hgt.forEach(t),$Xo=r(Zxe," (LXMERT model)"),Zxe.forEach(t),kXo=i(X),A5=n(X,"LI",{});var e$e=s(A5);She=n(e$e,"STRONG",{});var Ugt=s(She);SXo=r(Ugt,"mbart"),Ugt.forEach(t),RXo=r(e$e," \u2014 "),$V=n(e$e,"A",{href:!0});var Jgt=s($V);PXo=r(Jgt,"MBartForQuestionAnswering"),Jgt.forEach(t),BXo=r(e$e," (mBART model)"),e$e.forEach(t),IXo=i(X),y5=n(X,"LI",{});var o$e=s(y5);Rhe=n(o$e,"STRONG",{});var Ygt=s(Rhe);qXo=r(Ygt,"megatron-bert"),Ygt.forEach(t),NXo=r(o$e," \u2014 "),kV=n(o$e,"A",{href:!0});var Kgt=s(kV);jXo=r(Kgt,"MegatronBertForQuestionAnswering"),Kgt.forEach(t),DXo=r(o$e," (MegatronBert model)"),o$e.forEach(t),GXo=i(X),L5=n(X,"LI",{});var r$e=s(L5);Phe=n(r$e,"STRONG",{});var Zgt=s(Phe);OXo=r(Zgt,"mobilebert"),Zgt.forEach(t),VXo=r(r$e," \u2014 "),SV=n(r$e,"A",{href:!0});var eht=s(SV);XXo=r(eht,"MobileBertForQuestionAnswering"),eht.forEach(t),zXo=r(r$e," (MobileBERT model)"),r$e.forEach(t),WXo=i(X),x5=n(X,"LI",{});var t$e=s(x5);Bhe=n(t$e,"STRONG",{});var oht=s(Bhe);QXo=r(oht,"mpnet"),oht.forEach(t),HXo=r(t$e," \u2014 "),RV=n(t$e,"A",{href:!0});var rht=s(RV);UXo=r(rht,"MPNetForQuestionAnswering"),rht.forEach(t),JXo=r(t$e," (MPNet model)"),t$e.forEach(t),YXo=i(X),$5=n(X,"LI",{});var a$e=s($5);Ihe=n(a$e,"STRONG",{});var tht=s(Ihe);KXo=r(tht,"nystromformer"),tht.forEach(t),ZXo=r(a$e," \u2014 "),PV=n(a$e,"A",{href:!0});var aht=s(PV);ezo=r(aht,"NystromformerForQuestionAnswering"),aht.forEach(t),ozo=r(a$e," (Nystromformer model)"),a$e.forEach(t),rzo=i(X),k5=n(X,"LI",{});var n$e=s(k5);qhe=n(n$e,"STRONG",{});var nht=s(qhe);tzo=r(nht,"qdqbert"),nht.forEach(t),azo=r(n$e," \u2014 "),BV=n(n$e,"A",{href:!0});var sht=s(BV);nzo=r(sht,"QDQBertForQuestionAnswering"),sht.forEach(t),szo=r(n$e," (QDQBert model)"),n$e.forEach(t),lzo=i(X),S5=n(X,"LI",{});var s$e=s(S5);Nhe=n(s$e,"STRONG",{});var lht=s(Nhe);izo=r(lht,"reformer"),lht.forEach(t),dzo=r(s$e," \u2014 "),IV=n(s$e,"A",{href:!0});var iht=s(IV);czo=r(iht,"ReformerForQuestionAnswering"),iht.forEach(t),fzo=r(s$e," (Reformer model)"),s$e.forEach(t),mzo=i(X),R5=n(X,"LI",{});var l$e=s(R5);jhe=n(l$e,"STRONG",{});var dht=s(jhe);gzo=r(dht,"rembert"),dht.forEach(t),hzo=r(l$e," \u2014 "),qV=n(l$e,"A",{href:!0});var cht=s(qV);pzo=r(cht,"RemBertForQuestionAnswering"),cht.forEach(t),_zo=r(l$e," (RemBERT model)"),l$e.forEach(t),uzo=i(X),P5=n(X,"LI",{});var i$e=s(P5);Dhe=n(i$e,"STRONG",{});var fht=s(Dhe);bzo=r(fht,"roberta"),fht.forEach(t),vzo=r(i$e," \u2014 "),NV=n(i$e,"A",{href:!0});var mht=s(NV);Fzo=r(mht,"RobertaForQuestionAnswering"),mht.forEach(t),Tzo=r(i$e," (RoBERTa model)"),i$e.forEach(t),Mzo=i(X),B5=n(X,"LI",{});var d$e=s(B5);Ghe=n(d$e,"STRONG",{});var ght=s(Ghe);Ezo=r(ght,"roformer"),ght.forEach(t),Czo=r(d$e," \u2014 "),jV=n(d$e,"A",{href:!0});var hht=s(jV);wzo=r(hht,"RoFormerForQuestionAnswering"),hht.forEach(t),Azo=r(d$e," (RoFormer model)"),d$e.forEach(t),yzo=i(X),I5=n(X,"LI",{});var c$e=s(I5);Ohe=n(c$e,"STRONG",{});var pht=s(Ohe);Lzo=r(pht,"splinter"),pht.forEach(t),xzo=r(c$e," \u2014 "),DV=n(c$e,"A",{href:!0});var _ht=s(DV);$zo=r(_ht,"SplinterForQuestionAnswering"),_ht.forEach(t),kzo=r(c$e," (Splinter model)"),c$e.forEach(t),Szo=i(X),q5=n(X,"LI",{});var f$e=s(q5);Vhe=n(f$e,"STRONG",{});var uht=s(Vhe);Rzo=r(uht,"squeezebert"),uht.forEach(t),Pzo=r(f$e," \u2014 "),GV=n(f$e,"A",{href:!0});var bht=s(GV);Bzo=r(bht,"SqueezeBertForQuestionAnswering"),bht.forEach(t),Izo=r(f$e," (SqueezeBERT model)"),f$e.forEach(t),qzo=i(X),N5=n(X,"LI",{});var m$e=s(N5);Xhe=n(m$e,"STRONG",{});var vht=s(Xhe);Nzo=r(vht,"xlm"),vht.forEach(t),jzo=r(m$e," \u2014 "),OV=n(m$e,"A",{href:!0});var Fht=s(OV);Dzo=r(Fht,"XLMForQuestionAnsweringSimple"),Fht.forEach(t),Gzo=r(m$e," (XLM model)"),m$e.forEach(t),Ozo=i(X),j5=n(X,"LI",{});var g$e=s(j5);zhe=n(g$e,"STRONG",{});var Tht=s(zhe);Vzo=r(Tht,"xlm-roberta"),Tht.forEach(t),Xzo=r(g$e," \u2014 "),VV=n(g$e,"A",{href:!0});var Mht=s(VV);zzo=r(Mht,"XLMRobertaForQuestionAnswering"),Mht.forEach(t),Wzo=r(g$e," (XLM-RoBERTa model)"),g$e.forEach(t),Qzo=i(X),D5=n(X,"LI",{});var h$e=s(D5);Whe=n(h$e,"STRONG",{});var Eht=s(Whe);Hzo=r(Eht,"xlm-roberta-xl"),Eht.forEach(t),Uzo=r(h$e," \u2014 "),XV=n(h$e,"A",{href:!0});var Cht=s(XV);Jzo=r(Cht,"XLMRobertaXLForQuestionAnswering"),Cht.forEach(t),Yzo=r(h$e," (XLM-RoBERTa-XL model)"),h$e.forEach(t),Kzo=i(X),G5=n(X,"LI",{});var p$e=s(G5);Qhe=n(p$e,"STRONG",{});var wht=s(Qhe);Zzo=r(wht,"xlnet"),wht.forEach(t),eWo=r(p$e," \u2014 "),zV=n(p$e,"A",{href:!0});var Aht=s(zV);oWo=r(Aht,"XLNetForQuestionAnsweringSimple"),Aht.forEach(t),rWo=r(p$e," (XLNet model)"),p$e.forEach(t),tWo=i(X),O5=n(X,"LI",{});var _$e=s(O5);Hhe=n(_$e,"STRONG",{});var yht=s(Hhe);aWo=r(yht,"yoso"),yht.forEach(t),nWo=r(_$e," \u2014 "),WV=n(_$e,"A",{href:!0});var Lht=s(WV);sWo=r(Lht,"YosoForQuestionAnswering"),Lht.forEach(t),lWo=r(_$e," (YOSO model)"),_$e.forEach(t),X.forEach(t),iWo=i(ca),V5=n(ca,"P",{});var u$e=s(V5);dWo=r(u$e,"The model is set in evaluation mode by default using "),Uhe=n(u$e,"CODE",{});var xht=s(Uhe);cWo=r(xht,"model.eval()"),xht.forEach(t),fWo=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jhe=n(u$e,"CODE",{});var $ht=s(Jhe);mWo=r($ht,"model.train()"),$ht.forEach(t),u$e.forEach(t),gWo=i(ca),T(X5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Hqe=i(f),ed=n(f,"H2",{class:!0});var Kje=s(ed);z5=n(Kje,"A",{id:!0,class:!0,href:!0});var kht=s(z5);Yhe=n(kht,"SPAN",{});var Sht=s(Yhe);T(Dy.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),hWo=i(Kje),Khe=n(Kje,"SPAN",{});var Rht=s(Khe);pWo=r(Rht,"AutoModelForTableQuestionAnswering"),Rht.forEach(t),Kje.forEach(t),Uqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Gy.$$.fragment,Ys),_Wo=i(Ys),od=n(Ys,"P",{});var hZ=s(od);uWo=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QV=n(hZ,"A",{href:!0});var Pht=s(QV);bWo=r(Pht,"from_pretrained()"),Pht.forEach(t),vWo=r(hZ," class method or the "),HV=n(hZ,"A",{href:!0});var Bht=s(HV);FWo=r(Bht,"from_config()"),Bht.forEach(t),TWo=r(hZ,` class
method.`),hZ.forEach(t),MWo=i(Ys),Oy=n(Ys,"P",{});var Zje=s(Oy);EWo=r(Zje,"This class cannot be instantiated directly using "),Zhe=n(Zje,"CODE",{});var Iht=s(Zhe);CWo=r(Iht,"__init__()"),Iht.forEach(t),wWo=r(Zje," (throws an error)."),Zje.forEach(t),AWo=i(Ys),gt=n(Ys,"DIV",{class:!0});var Ow=s(gt);T(Vy.$$.fragment,Ow),yWo=i(Ow),epe=n(Ow,"P",{});var qht=s(epe);LWo=r(qht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qht.forEach(t),xWo=i(Ow),rd=n(Ow,"P",{});var pZ=s(rd);$Wo=r(pZ,`Note:
Loading a model from its configuration file does `),ope=n(pZ,"STRONG",{});var Nht=s(ope);kWo=r(Nht,"not"),Nht.forEach(t),SWo=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(pZ,"A",{href:!0});var jht=s(UV);RWo=r(jht,"from_pretrained()"),jht.forEach(t),PWo=r(pZ," to load the model weights."),pZ.forEach(t),BWo=i(Ow),T(W5.$$.fragment,Ow),Ow.forEach(t),IWo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Xy.$$.fragment,fa),qWo=i(fa),rpe=n(fa,"P",{});var Dht=s(rpe);NWo=r(Dht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dht.forEach(t),jWo=i(fa),Na=n(fa,"P",{});var Vw=s(Na);DWo=r(Vw,"The model class to instantiate is selected based on the "),tpe=n(Vw,"CODE",{});var Ght=s(tpe);GWo=r(Ght,"model_type"),Ght.forEach(t),OWo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),ape=n(Vw,"CODE",{});var Oht=s(ape);VWo=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),XWo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),npe=n(Vw,"CODE",{});var Vht=s(npe);zWo=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),WWo=r(Vw,":"),Vw.forEach(t),QWo=i(fa),spe=n(fa,"UL",{});var Xht=s(spe);Q5=n(Xht,"LI",{});var b$e=s(Q5);lpe=n(b$e,"STRONG",{});var zht=s(lpe);HWo=r(zht,"tapas"),zht.forEach(t),UWo=r(b$e," \u2014 "),JV=n(b$e,"A",{href:!0});var Wht=s(JV);JWo=r(Wht,"TapasForQuestionAnswering"),Wht.forEach(t),YWo=r(b$e," (TAPAS model)"),b$e.forEach(t),Xht.forEach(t),KWo=i(fa),H5=n(fa,"P",{});var v$e=s(H5);ZWo=r(v$e,"The model is set in evaluation mode by default using "),ipe=n(v$e,"CODE",{});var Qht=s(ipe);eQo=r(Qht,"model.eval()"),Qht.forEach(t),oQo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=n(v$e,"CODE",{});var Hht=s(dpe);rQo=r(Hht,"model.train()"),Hht.forEach(t),v$e.forEach(t),tQo=i(fa),T(U5.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Jqe=i(f),td=n(f,"H2",{class:!0});var eDe=s(td);J5=n(eDe,"A",{id:!0,class:!0,href:!0});var Uht=s(J5);cpe=n(Uht,"SPAN",{});var Jht=s(cpe);T(zy.$$.fragment,Jht),Jht.forEach(t),Uht.forEach(t),aQo=i(eDe),fpe=n(eDe,"SPAN",{});var Yht=s(fpe);nQo=r(Yht,"AutoModelForImageClassification"),Yht.forEach(t),eDe.forEach(t),Yqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Wy.$$.fragment,Ks),sQo=i(Ks),ad=n(Ks,"P",{});var _Z=s(ad);lQo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YV=n(_Z,"A",{href:!0});var Kht=s(YV);iQo=r(Kht,"from_pretrained()"),Kht.forEach(t),dQo=r(_Z," class method or the "),KV=n(_Z,"A",{href:!0});var Zht=s(KV);cQo=r(Zht,"from_config()"),Zht.forEach(t),fQo=r(_Z,` class
method.`),_Z.forEach(t),mQo=i(Ks),Qy=n(Ks,"P",{});var oDe=s(Qy);gQo=r(oDe,"This class cannot be instantiated directly using "),mpe=n(oDe,"CODE",{});var ept=s(mpe);hQo=r(ept,"__init__()"),ept.forEach(t),pQo=r(oDe," (throws an error)."),oDe.forEach(t),_Qo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Xw=s(ht);T(Hy.$$.fragment,Xw),uQo=i(Xw),gpe=n(Xw,"P",{});var opt=s(gpe);bQo=r(opt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),opt.forEach(t),vQo=i(Xw),nd=n(Xw,"P",{});var uZ=s(nd);FQo=r(uZ,`Note:
Loading a model from its configuration file does `),hpe=n(uZ,"STRONG",{});var rpt=s(hpe);TQo=r(rpt,"not"),rpt.forEach(t),MQo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(uZ,"A",{href:!0});var tpt=s(ZV);EQo=r(tpt,"from_pretrained()"),tpt.forEach(t),CQo=r(uZ," to load the model weights."),uZ.forEach(t),wQo=i(Xw),T(Y5.$$.fragment,Xw),Xw.forEach(t),AQo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Uy.$$.fragment,ma),yQo=i(ma),ppe=n(ma,"P",{});var apt=s(ppe);LQo=r(apt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),apt.forEach(t),xQo=i(ma),ja=n(ma,"P",{});var zw=s(ja);$Qo=r(zw,"The model class to instantiate is selected based on the "),_pe=n(zw,"CODE",{});var npt=s(_pe);kQo=r(npt,"model_type"),npt.forEach(t),SQo=r(zw,` property of the config object (either
passed as an argument or loaded from `),upe=n(zw,"CODE",{});var spt=s(upe);RQo=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),PQo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=n(zw,"CODE",{});var lpt=s(bpe);BQo=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),IQo=r(zw,":"),zw.forEach(t),qQo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);K5=n(Te,"LI",{});var F$e=s(K5);vpe=n(F$e,"STRONG",{});var ipt=s(vpe);NQo=r(ipt,"beit"),ipt.forEach(t),jQo=r(F$e," \u2014 "),eX=n(F$e,"A",{href:!0});var dpt=s(eX);DQo=r(dpt,"BeitForImageClassification"),dpt.forEach(t),GQo=r(F$e," (BEiT model)"),F$e.forEach(t),OQo=i(Te),Z5=n(Te,"LI",{});var T$e=s(Z5);Fpe=n(T$e,"STRONG",{});var cpt=s(Fpe);VQo=r(cpt,"convnext"),cpt.forEach(t),XQo=r(T$e," \u2014 "),oX=n(T$e,"A",{href:!0});var fpt=s(oX);zQo=r(fpt,"ConvNextForImageClassification"),fpt.forEach(t),WQo=r(T$e," (ConvNext model)"),T$e.forEach(t),QQo=i(Te),ev=n(Te,"LI",{});var M$e=s(ev);Tpe=n(M$e,"STRONG",{});var mpt=s(Tpe);HQo=r(mpt,"cvt"),mpt.forEach(t),UQo=r(M$e," \u2014 "),rX=n(M$e,"A",{href:!0});var gpt=s(rX);JQo=r(gpt,"CvtForImageClassification"),gpt.forEach(t),YQo=r(M$e," (CvT model)"),M$e.forEach(t),KQo=i(Te),ov=n(Te,"LI",{});var E$e=s(ov);Mpe=n(E$e,"STRONG",{});var hpt=s(Mpe);ZQo=r(hpt,"data2vec-vision"),hpt.forEach(t),eHo=r(E$e," \u2014 "),tX=n(E$e,"A",{href:!0});var ppt=s(tX);oHo=r(ppt,"Data2VecVisionForImageClassification"),ppt.forEach(t),rHo=r(E$e," (Data2VecVision model)"),E$e.forEach(t),tHo=i(Te),Ps=n(Te,"LI",{});var R$=s(Ps);Epe=n(R$,"STRONG",{});var _pt=s(Epe);aHo=r(_pt,"deit"),_pt.forEach(t),nHo=r(R$," \u2014 "),aX=n(R$,"A",{href:!0});var upt=s(aX);sHo=r(upt,"DeiTForImageClassification"),upt.forEach(t),lHo=r(R$," or "),nX=n(R$,"A",{href:!0});var bpt=s(nX);iHo=r(bpt,"DeiTForImageClassificationWithTeacher"),bpt.forEach(t),dHo=r(R$," (DeiT model)"),R$.forEach(t),cHo=i(Te),rv=n(Te,"LI",{});var C$e=s(rv);Cpe=n(C$e,"STRONG",{});var vpt=s(Cpe);fHo=r(vpt,"imagegpt"),vpt.forEach(t),mHo=r(C$e," \u2014 "),sX=n(C$e,"A",{href:!0});var Fpt=s(sX);gHo=r(Fpt,"ImageGPTForImageClassification"),Fpt.forEach(t),hHo=r(C$e," (ImageGPT model)"),C$e.forEach(t),pHo=i(Te),pt=n(Te,"LI",{});var gf=s(pt);wpe=n(gf,"STRONG",{});var Tpt=s(wpe);_Ho=r(Tpt,"perceiver"),Tpt.forEach(t),uHo=r(gf," \u2014 "),lX=n(gf,"A",{href:!0});var Mpt=s(lX);bHo=r(Mpt,"PerceiverForImageClassificationLearned"),Mpt.forEach(t),vHo=r(gf," or "),iX=n(gf,"A",{href:!0});var Ept=s(iX);FHo=r(Ept,"PerceiverForImageClassificationFourier"),Ept.forEach(t),THo=r(gf," or "),dX=n(gf,"A",{href:!0});var Cpt=s(dX);MHo=r(Cpt,"PerceiverForImageClassificationConvProcessing"),Cpt.forEach(t),EHo=r(gf," (Perceiver model)"),gf.forEach(t),CHo=i(Te),tv=n(Te,"LI",{});var w$e=s(tv);Ape=n(w$e,"STRONG",{});var wpt=s(Ape);wHo=r(wpt,"poolformer"),wpt.forEach(t),AHo=r(w$e," \u2014 "),cX=n(w$e,"A",{href:!0});var Apt=s(cX);yHo=r(Apt,"PoolFormerForImageClassification"),Apt.forEach(t),LHo=r(w$e," (PoolFormer model)"),w$e.forEach(t),xHo=i(Te),av=n(Te,"LI",{});var A$e=s(av);ype=n(A$e,"STRONG",{});var ypt=s(ype);$Ho=r(ypt,"regnet"),ypt.forEach(t),kHo=r(A$e," \u2014 "),fX=n(A$e,"A",{href:!0});var Lpt=s(fX);SHo=r(Lpt,"RegNetForImageClassification"),Lpt.forEach(t),RHo=r(A$e," (RegNet model)"),A$e.forEach(t),PHo=i(Te),nv=n(Te,"LI",{});var y$e=s(nv);Lpe=n(y$e,"STRONG",{});var xpt=s(Lpe);BHo=r(xpt,"resnet"),xpt.forEach(t),IHo=r(y$e," \u2014 "),mX=n(y$e,"A",{href:!0});var $pt=s(mX);qHo=r($pt,"ResNetForImageClassification"),$pt.forEach(t),NHo=r(y$e," (ResNet model)"),y$e.forEach(t),jHo=i(Te),sv=n(Te,"LI",{});var L$e=s(sv);xpe=n(L$e,"STRONG",{});var kpt=s(xpe);DHo=r(kpt,"segformer"),kpt.forEach(t),GHo=r(L$e," \u2014 "),gX=n(L$e,"A",{href:!0});var Spt=s(gX);OHo=r(Spt,"SegformerForImageClassification"),Spt.forEach(t),VHo=r(L$e," (SegFormer model)"),L$e.forEach(t),XHo=i(Te),lv=n(Te,"LI",{});var x$e=s(lv);$pe=n(x$e,"STRONG",{});var Rpt=s($pe);zHo=r(Rpt,"swin"),Rpt.forEach(t),WHo=r(x$e," \u2014 "),hX=n(x$e,"A",{href:!0});var Ppt=s(hX);QHo=r(Ppt,"SwinForImageClassification"),Ppt.forEach(t),HHo=r(x$e," (Swin model)"),x$e.forEach(t),UHo=i(Te),iv=n(Te,"LI",{});var $$e=s(iv);kpe=n($$e,"STRONG",{});var Bpt=s(kpe);JHo=r(Bpt,"van"),Bpt.forEach(t),YHo=r($$e," \u2014 "),pX=n($$e,"A",{href:!0});var Ipt=s(pX);KHo=r(Ipt,"VanForImageClassification"),Ipt.forEach(t),ZHo=r($$e," (VAN model)"),$$e.forEach(t),eUo=i(Te),dv=n(Te,"LI",{});var k$e=s(dv);Spe=n(k$e,"STRONG",{});var qpt=s(Spe);oUo=r(qpt,"vit"),qpt.forEach(t),rUo=r(k$e," \u2014 "),_X=n(k$e,"A",{href:!0});var Npt=s(_X);tUo=r(Npt,"ViTForImageClassification"),Npt.forEach(t),aUo=r(k$e," (ViT model)"),k$e.forEach(t),Te.forEach(t),nUo=i(ma),cv=n(ma,"P",{});var S$e=s(cv);sUo=r(S$e,"The model is set in evaluation mode by default using "),Rpe=n(S$e,"CODE",{});var jpt=s(Rpe);lUo=r(jpt,"model.eval()"),jpt.forEach(t),iUo=r(S$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=n(S$e,"CODE",{});var Dpt=s(Ppe);dUo=r(Dpt,"model.train()"),Dpt.forEach(t),S$e.forEach(t),cUo=i(ma),T(fv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Kqe=i(f),sd=n(f,"H2",{class:!0});var rDe=s(sd);mv=n(rDe,"A",{id:!0,class:!0,href:!0});var Gpt=s(mv);Bpe=n(Gpt,"SPAN",{});var Opt=s(Bpe);T(Jy.$$.fragment,Opt),Opt.forEach(t),Gpt.forEach(t),fUo=i(rDe),Ipe=n(rDe,"SPAN",{});var Vpt=s(Ipe);mUo=r(Vpt,"AutoModelForVision2Seq"),Vpt.forEach(t),rDe.forEach(t),Zqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Yy.$$.fragment,Zs),gUo=i(Zs),ld=n(Zs,"P",{});var bZ=s(ld);hUo=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uX=n(bZ,"A",{href:!0});var Xpt=s(uX);pUo=r(Xpt,"from_pretrained()"),Xpt.forEach(t),_Uo=r(bZ," class method or the "),bX=n(bZ,"A",{href:!0});var zpt=s(bX);uUo=r(zpt,"from_config()"),zpt.forEach(t),bUo=r(bZ,` class
method.`),bZ.forEach(t),vUo=i(Zs),Ky=n(Zs,"P",{});var tDe=s(Ky);FUo=r(tDe,"This class cannot be instantiated directly using "),qpe=n(tDe,"CODE",{});var Wpt=s(qpe);TUo=r(Wpt,"__init__()"),Wpt.forEach(t),MUo=r(tDe," (throws an error)."),tDe.forEach(t),EUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var Ww=s(_t);T(Zy.$$.fragment,Ww),CUo=i(Ww),Npe=n(Ww,"P",{});var Qpt=s(Npe);wUo=r(Qpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Qpt.forEach(t),AUo=i(Ww),id=n(Ww,"P",{});var vZ=s(id);yUo=r(vZ,`Note:
Loading a model from its configuration file does `),jpe=n(vZ,"STRONG",{});var Hpt=s(jpe);LUo=r(Hpt,"not"),Hpt.forEach(t),xUo=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(vZ,"A",{href:!0});var Upt=s(vX);$Uo=r(Upt,"from_pretrained()"),Upt.forEach(t),kUo=r(vZ," to load the model weights."),vZ.forEach(t),SUo=i(Ww),T(gv.$$.fragment,Ww),Ww.forEach(t),RUo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(e8.$$.fragment,ga),PUo=i(ga),Dpe=n(ga,"P",{});var Jpt=s(Dpe);BUo=r(Jpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jpt.forEach(t),IUo=i(ga),Da=n(ga,"P",{});var Qw=s(Da);qUo=r(Qw,"The model class to instantiate is selected based on the "),Gpe=n(Qw,"CODE",{});var Ypt=s(Gpe);NUo=r(Ypt,"model_type"),Ypt.forEach(t),jUo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Ope=n(Qw,"CODE",{});var Kpt=s(Ope);DUo=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),GUo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(Qw,"CODE",{});var Zpt=s(Vpe);OUo=r(Zpt,"pretrained_model_name_or_path"),Zpt.forEach(t),VUo=r(Qw,":"),Qw.forEach(t),XUo=i(ga),Xpe=n(ga,"UL",{});var e_t=s(Xpe);hv=n(e_t,"LI",{});var R$e=s(hv);zpe=n(R$e,"STRONG",{});var o_t=s(zpe);zUo=r(o_t,"vision-encoder-decoder"),o_t.forEach(t),WUo=r(R$e," \u2014 "),FX=n(R$e,"A",{href:!0});var r_t=s(FX);QUo=r(r_t,"VisionEncoderDecoderModel"),r_t.forEach(t),HUo=r(R$e," (Vision Encoder decoder model)"),R$e.forEach(t),e_t.forEach(t),UUo=i(ga),pv=n(ga,"P",{});var P$e=s(pv);JUo=r(P$e,"The model is set in evaluation mode by default using "),Wpe=n(P$e,"CODE",{});var t_t=s(Wpe);YUo=r(t_t,"model.eval()"),t_t.forEach(t),KUo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(P$e,"CODE",{});var a_t=s(Qpe);ZUo=r(a_t,"model.train()"),a_t.forEach(t),P$e.forEach(t),eJo=i(ga),T(_v.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),eNe=i(f),dd=n(f,"H2",{class:!0});var aDe=s(dd);uv=n(aDe,"A",{id:!0,class:!0,href:!0});var n_t=s(uv);Hpe=n(n_t,"SPAN",{});var s_t=s(Hpe);T(o8.$$.fragment,s_t),s_t.forEach(t),n_t.forEach(t),oJo=i(aDe),Upe=n(aDe,"SPAN",{});var l_t=s(Upe);rJo=r(l_t,"AutoModelForAudioClassification"),l_t.forEach(t),aDe.forEach(t),oNe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(r8.$$.fragment,el),tJo=i(el),cd=n(el,"P",{});var FZ=s(cd);aJo=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),TX=n(FZ,"A",{href:!0});var i_t=s(TX);nJo=r(i_t,"from_pretrained()"),i_t.forEach(t),sJo=r(FZ," class method or the "),MX=n(FZ,"A",{href:!0});var d_t=s(MX);lJo=r(d_t,"from_config()"),d_t.forEach(t),iJo=r(FZ,` class
method.`),FZ.forEach(t),dJo=i(el),t8=n(el,"P",{});var nDe=s(t8);cJo=r(nDe,"This class cannot be instantiated directly using "),Jpe=n(nDe,"CODE",{});var c_t=s(Jpe);fJo=r(c_t,"__init__()"),c_t.forEach(t),mJo=r(nDe," (throws an error)."),nDe.forEach(t),gJo=i(el),ut=n(el,"DIV",{class:!0});var Hw=s(ut);T(a8.$$.fragment,Hw),hJo=i(Hw),Ype=n(Hw,"P",{});var f_t=s(Ype);pJo=r(f_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),f_t.forEach(t),_Jo=i(Hw),fd=n(Hw,"P",{});var TZ=s(fd);uJo=r(TZ,`Note:
Loading a model from its configuration file does `),Kpe=n(TZ,"STRONG",{});var m_t=s(Kpe);bJo=r(m_t,"not"),m_t.forEach(t),vJo=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EX=n(TZ,"A",{href:!0});var g_t=s(EX);FJo=r(g_t,"from_pretrained()"),g_t.forEach(t),TJo=r(TZ," to load the model weights."),TZ.forEach(t),MJo=i(Hw),T(bv.$$.fragment,Hw),Hw.forEach(t),EJo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(n8.$$.fragment,ha),CJo=i(ha),Zpe=n(ha,"P",{});var h_t=s(Zpe);wJo=r(h_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),h_t.forEach(t),AJo=i(ha),Ga=n(ha,"P",{});var Uw=s(Ga);yJo=r(Uw,"The model class to instantiate is selected based on the "),e_e=n(Uw,"CODE",{});var p_t=s(e_e);LJo=r(p_t,"model_type"),p_t.forEach(t),xJo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),o_e=n(Uw,"CODE",{});var __t=s(o_e);$Jo=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),kJo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(Uw,"CODE",{});var u_t=s(r_e);SJo=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),RJo=r(Uw,":"),Uw.forEach(t),PJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);vv=n(Oe,"LI",{});var B$e=s(vv);t_e=n(B$e,"STRONG",{});var b_t=s(t_e);BJo=r(b_t,"data2vec-audio"),b_t.forEach(t),IJo=r(B$e," \u2014 "),CX=n(B$e,"A",{href:!0});var v_t=s(CX);qJo=r(v_t,"Data2VecAudioForSequenceClassification"),v_t.forEach(t),NJo=r(B$e," (Data2VecAudio model)"),B$e.forEach(t),jJo=i(Oe),Fv=n(Oe,"LI",{});var I$e=s(Fv);a_e=n(I$e,"STRONG",{});var F_t=s(a_e);DJo=r(F_t,"hubert"),F_t.forEach(t),GJo=r(I$e," \u2014 "),wX=n(I$e,"A",{href:!0});var T_t=s(wX);OJo=r(T_t,"HubertForSequenceClassification"),T_t.forEach(t),VJo=r(I$e," (Hubert model)"),I$e.forEach(t),XJo=i(Oe),Tv=n(Oe,"LI",{});var q$e=s(Tv);n_e=n(q$e,"STRONG",{});var M_t=s(n_e);zJo=r(M_t,"sew"),M_t.forEach(t),WJo=r(q$e," \u2014 "),AX=n(q$e,"A",{href:!0});var E_t=s(AX);QJo=r(E_t,"SEWForSequenceClassification"),E_t.forEach(t),HJo=r(q$e," (SEW model)"),q$e.forEach(t),UJo=i(Oe),Mv=n(Oe,"LI",{});var N$e=s(Mv);s_e=n(N$e,"STRONG",{});var C_t=s(s_e);JJo=r(C_t,"sew-d"),C_t.forEach(t),YJo=r(N$e," \u2014 "),yX=n(N$e,"A",{href:!0});var w_t=s(yX);KJo=r(w_t,"SEWDForSequenceClassification"),w_t.forEach(t),ZJo=r(N$e," (SEW-D model)"),N$e.forEach(t),eYo=i(Oe),Ev=n(Oe,"LI",{});var j$e=s(Ev);l_e=n(j$e,"STRONG",{});var A_t=s(l_e);oYo=r(A_t,"unispeech"),A_t.forEach(t),rYo=r(j$e," \u2014 "),LX=n(j$e,"A",{href:!0});var y_t=s(LX);tYo=r(y_t,"UniSpeechForSequenceClassification"),y_t.forEach(t),aYo=r(j$e," (UniSpeech model)"),j$e.forEach(t),nYo=i(Oe),Cv=n(Oe,"LI",{});var D$e=s(Cv);i_e=n(D$e,"STRONG",{});var L_t=s(i_e);sYo=r(L_t,"unispeech-sat"),L_t.forEach(t),lYo=r(D$e," \u2014 "),xX=n(D$e,"A",{href:!0});var x_t=s(xX);iYo=r(x_t,"UniSpeechSatForSequenceClassification"),x_t.forEach(t),dYo=r(D$e," (UniSpeechSat model)"),D$e.forEach(t),cYo=i(Oe),wv=n(Oe,"LI",{});var G$e=s(wv);d_e=n(G$e,"STRONG",{});var $_t=s(d_e);fYo=r($_t,"wav2vec2"),$_t.forEach(t),mYo=r(G$e," \u2014 "),$X=n(G$e,"A",{href:!0});var k_t=s($X);gYo=r(k_t,"Wav2Vec2ForSequenceClassification"),k_t.forEach(t),hYo=r(G$e," (Wav2Vec2 model)"),G$e.forEach(t),pYo=i(Oe),Av=n(Oe,"LI",{});var O$e=s(Av);c_e=n(O$e,"STRONG",{});var S_t=s(c_e);_Yo=r(S_t,"wav2vec2-conformer"),S_t.forEach(t),uYo=r(O$e," \u2014 "),kX=n(O$e,"A",{href:!0});var R_t=s(kX);bYo=r(R_t,"Wav2Vec2ConformerForSequenceClassification"),R_t.forEach(t),vYo=r(O$e," (Wav2Vec2-Conformer model)"),O$e.forEach(t),FYo=i(Oe),yv=n(Oe,"LI",{});var V$e=s(yv);f_e=n(V$e,"STRONG",{});var P_t=s(f_e);TYo=r(P_t,"wavlm"),P_t.forEach(t),MYo=r(V$e," \u2014 "),SX=n(V$e,"A",{href:!0});var B_t=s(SX);EYo=r(B_t,"WavLMForSequenceClassification"),B_t.forEach(t),CYo=r(V$e," (WavLM model)"),V$e.forEach(t),Oe.forEach(t),wYo=i(ha),Lv=n(ha,"P",{});var X$e=s(Lv);AYo=r(X$e,"The model is set in evaluation mode by default using "),m_e=n(X$e,"CODE",{});var I_t=s(m_e);yYo=r(I_t,"model.eval()"),I_t.forEach(t),LYo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=n(X$e,"CODE",{});var q_t=s(g_e);xYo=r(q_t,"model.train()"),q_t.forEach(t),X$e.forEach(t),$Yo=i(ha),T(xv.$$.fragment,ha),ha.forEach(t),el.forEach(t),rNe=i(f),md=n(f,"H2",{class:!0});var sDe=s(md);$v=n(sDe,"A",{id:!0,class:!0,href:!0});var N_t=s($v);h_e=n(N_t,"SPAN",{});var j_t=s(h_e);T(s8.$$.fragment,j_t),j_t.forEach(t),N_t.forEach(t),kYo=i(sDe),p_e=n(sDe,"SPAN",{});var D_t=s(p_e);SYo=r(D_t,"AutoModelForAudioFrameClassification"),D_t.forEach(t),sDe.forEach(t),tNe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(l8.$$.fragment,ol),RYo=i(ol),gd=n(ol,"P",{});var MZ=s(gd);PYo=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),RX=n(MZ,"A",{href:!0});var G_t=s(RX);BYo=r(G_t,"from_pretrained()"),G_t.forEach(t),IYo=r(MZ," class method or the "),PX=n(MZ,"A",{href:!0});var O_t=s(PX);qYo=r(O_t,"from_config()"),O_t.forEach(t),NYo=r(MZ,` class
method.`),MZ.forEach(t),jYo=i(ol),i8=n(ol,"P",{});var lDe=s(i8);DYo=r(lDe,"This class cannot be instantiated directly using "),__e=n(lDe,"CODE",{});var V_t=s(__e);GYo=r(V_t,"__init__()"),V_t.forEach(t),OYo=r(lDe," (throws an error)."),lDe.forEach(t),VYo=i(ol),bt=n(ol,"DIV",{class:!0});var Jw=s(bt);T(d8.$$.fragment,Jw),XYo=i(Jw),u_e=n(Jw,"P",{});var X_t=s(u_e);zYo=r(X_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),X_t.forEach(t),WYo=i(Jw),hd=n(Jw,"P",{});var EZ=s(hd);QYo=r(EZ,`Note:
Loading a model from its configuration file does `),b_e=n(EZ,"STRONG",{});var z_t=s(b_e);HYo=r(z_t,"not"),z_t.forEach(t),UYo=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(EZ,"A",{href:!0});var W_t=s(BX);JYo=r(W_t,"from_pretrained()"),W_t.forEach(t),YYo=r(EZ," to load the model weights."),EZ.forEach(t),KYo=i(Jw),T(kv.$$.fragment,Jw),Jw.forEach(t),ZYo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(c8.$$.fragment,pa),eKo=i(pa),v_e=n(pa,"P",{});var Q_t=s(v_e);oKo=r(Q_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Q_t.forEach(t),rKo=i(pa),Oa=n(pa,"P",{});var Yw=s(Oa);tKo=r(Yw,"The model class to instantiate is selected based on the "),F_e=n(Yw,"CODE",{});var H_t=s(F_e);aKo=r(H_t,"model_type"),H_t.forEach(t),nKo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),T_e=n(Yw,"CODE",{});var U_t=s(T_e);sKo=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),lKo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(Yw,"CODE",{});var J_t=s(M_e);iKo=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),dKo=r(Yw,":"),Yw.forEach(t),cKo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);Sv=n(rl,"LI",{});var z$e=s(Sv);E_e=n(z$e,"STRONG",{});var Y_t=s(E_e);fKo=r(Y_t,"data2vec-audio"),Y_t.forEach(t),mKo=r(z$e," \u2014 "),IX=n(z$e,"A",{href:!0});var K_t=s(IX);gKo=r(K_t,"Data2VecAudioForAudioFrameClassification"),K_t.forEach(t),hKo=r(z$e," (Data2VecAudio model)"),z$e.forEach(t),pKo=i(rl),Rv=n(rl,"LI",{});var W$e=s(Rv);C_e=n(W$e,"STRONG",{});var Z_t=s(C_e);_Ko=r(Z_t,"unispeech-sat"),Z_t.forEach(t),uKo=r(W$e," \u2014 "),qX=n(W$e,"A",{href:!0});var eut=s(qX);bKo=r(eut,"UniSpeechSatForAudioFrameClassification"),eut.forEach(t),vKo=r(W$e," (UniSpeechSat model)"),W$e.forEach(t),FKo=i(rl),Pv=n(rl,"LI",{});var Q$e=s(Pv);w_e=n(Q$e,"STRONG",{});var out=s(w_e);TKo=r(out,"wav2vec2"),out.forEach(t),MKo=r(Q$e," \u2014 "),NX=n(Q$e,"A",{href:!0});var rut=s(NX);EKo=r(rut,"Wav2Vec2ForAudioFrameClassification"),rut.forEach(t),CKo=r(Q$e," (Wav2Vec2 model)"),Q$e.forEach(t),wKo=i(rl),Bv=n(rl,"LI",{});var H$e=s(Bv);A_e=n(H$e,"STRONG",{});var tut=s(A_e);AKo=r(tut,"wav2vec2-conformer"),tut.forEach(t),yKo=r(H$e," \u2014 "),jX=n(H$e,"A",{href:!0});var aut=s(jX);LKo=r(aut,"Wav2Vec2ConformerForAudioFrameClassification"),aut.forEach(t),xKo=r(H$e," (Wav2Vec2-Conformer model)"),H$e.forEach(t),$Ko=i(rl),Iv=n(rl,"LI",{});var U$e=s(Iv);y_e=n(U$e,"STRONG",{});var nut=s(y_e);kKo=r(nut,"wavlm"),nut.forEach(t),SKo=r(U$e," \u2014 "),DX=n(U$e,"A",{href:!0});var sut=s(DX);RKo=r(sut,"WavLMForAudioFrameClassification"),sut.forEach(t),PKo=r(U$e," (WavLM model)"),U$e.forEach(t),rl.forEach(t),BKo=i(pa),qv=n(pa,"P",{});var J$e=s(qv);IKo=r(J$e,"The model is set in evaluation mode by default using "),L_e=n(J$e,"CODE",{});var lut=s(L_e);qKo=r(lut,"model.eval()"),lut.forEach(t),NKo=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(J$e,"CODE",{});var iut=s(x_e);jKo=r(iut,"model.train()"),iut.forEach(t),J$e.forEach(t),DKo=i(pa),T(Nv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),aNe=i(f),pd=n(f,"H2",{class:!0});var iDe=s(pd);jv=n(iDe,"A",{id:!0,class:!0,href:!0});var dut=s(jv);$_e=n(dut,"SPAN",{});var cut=s($_e);T(f8.$$.fragment,cut),cut.forEach(t),dut.forEach(t),GKo=i(iDe),k_e=n(iDe,"SPAN",{});var fut=s(k_e);OKo=r(fut,"AutoModelForCTC"),fut.forEach(t),iDe.forEach(t),nNe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(m8.$$.fragment,tl),VKo=i(tl),_d=n(tl,"P",{});var CZ=s(_d);XKo=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),GX=n(CZ,"A",{href:!0});var mut=s(GX);zKo=r(mut,"from_pretrained()"),mut.forEach(t),WKo=r(CZ," class method or the "),OX=n(CZ,"A",{href:!0});var gut=s(OX);QKo=r(gut,"from_config()"),gut.forEach(t),HKo=r(CZ,` class
method.`),CZ.forEach(t),UKo=i(tl),g8=n(tl,"P",{});var dDe=s(g8);JKo=r(dDe,"This class cannot be instantiated directly using "),S_e=n(dDe,"CODE",{});var hut=s(S_e);YKo=r(hut,"__init__()"),hut.forEach(t),KKo=r(dDe," (throws an error)."),dDe.forEach(t),ZKo=i(tl),vt=n(tl,"DIV",{class:!0});var Kw=s(vt);T(h8.$$.fragment,Kw),eZo=i(Kw),R_e=n(Kw,"P",{});var put=s(R_e);oZo=r(put,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),put.forEach(t),rZo=i(Kw),ud=n(Kw,"P",{});var wZ=s(ud);tZo=r(wZ,`Note:
Loading a model from its configuration file does `),P_e=n(wZ,"STRONG",{});var _ut=s(P_e);aZo=r(_ut,"not"),_ut.forEach(t),nZo=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VX=n(wZ,"A",{href:!0});var uut=s(VX);sZo=r(uut,"from_pretrained()"),uut.forEach(t),lZo=r(wZ," to load the model weights."),wZ.forEach(t),iZo=i(Kw),T(Dv.$$.fragment,Kw),Kw.forEach(t),dZo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(p8.$$.fragment,_a),cZo=i(_a),B_e=n(_a,"P",{});var but=s(B_e);fZo=r(but,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),but.forEach(t),mZo=i(_a),Va=n(_a,"P",{});var Zw=s(Va);gZo=r(Zw,"The model class to instantiate is selected based on the "),I_e=n(Zw,"CODE",{});var vut=s(I_e);hZo=r(vut,"model_type"),vut.forEach(t),pZo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),q_e=n(Zw,"CODE",{});var Fut=s(q_e);_Zo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),uZo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(Zw,"CODE",{});var Tut=s(N_e);bZo=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),vZo=r(Zw,":"),Zw.forEach(t),FZo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);Gv=n(Ve,"LI",{});var Y$e=s(Gv);j_e=n(Y$e,"STRONG",{});var Mut=s(j_e);TZo=r(Mut,"data2vec-audio"),Mut.forEach(t),MZo=r(Y$e," \u2014 "),XX=n(Y$e,"A",{href:!0});var Eut=s(XX);EZo=r(Eut,"Data2VecAudioForCTC"),Eut.forEach(t),CZo=r(Y$e," (Data2VecAudio model)"),Y$e.forEach(t),wZo=i(Ve),Ov=n(Ve,"LI",{});var K$e=s(Ov);D_e=n(K$e,"STRONG",{});var Cut=s(D_e);AZo=r(Cut,"hubert"),Cut.forEach(t),yZo=r(K$e," \u2014 "),zX=n(K$e,"A",{href:!0});var wut=s(zX);LZo=r(wut,"HubertForCTC"),wut.forEach(t),xZo=r(K$e," (Hubert model)"),K$e.forEach(t),$Zo=i(Ve),Vv=n(Ve,"LI",{});var Z$e=s(Vv);G_e=n(Z$e,"STRONG",{});var Aut=s(G_e);kZo=r(Aut,"sew"),Aut.forEach(t),SZo=r(Z$e," \u2014 "),WX=n(Z$e,"A",{href:!0});var yut=s(WX);RZo=r(yut,"SEWForCTC"),yut.forEach(t),PZo=r(Z$e," (SEW model)"),Z$e.forEach(t),BZo=i(Ve),Xv=n(Ve,"LI",{});var eke=s(Xv);O_e=n(eke,"STRONG",{});var Lut=s(O_e);IZo=r(Lut,"sew-d"),Lut.forEach(t),qZo=r(eke," \u2014 "),QX=n(eke,"A",{href:!0});var xut=s(QX);NZo=r(xut,"SEWDForCTC"),xut.forEach(t),jZo=r(eke," (SEW-D model)"),eke.forEach(t),DZo=i(Ve),zv=n(Ve,"LI",{});var oke=s(zv);V_e=n(oke,"STRONG",{});var $ut=s(V_e);GZo=r($ut,"unispeech"),$ut.forEach(t),OZo=r(oke," \u2014 "),HX=n(oke,"A",{href:!0});var kut=s(HX);VZo=r(kut,"UniSpeechForCTC"),kut.forEach(t),XZo=r(oke," (UniSpeech model)"),oke.forEach(t),zZo=i(Ve),Wv=n(Ve,"LI",{});var rke=s(Wv);X_e=n(rke,"STRONG",{});var Sut=s(X_e);WZo=r(Sut,"unispeech-sat"),Sut.forEach(t),QZo=r(rke," \u2014 "),UX=n(rke,"A",{href:!0});var Rut=s(UX);HZo=r(Rut,"UniSpeechSatForCTC"),Rut.forEach(t),UZo=r(rke," (UniSpeechSat model)"),rke.forEach(t),JZo=i(Ve),Qv=n(Ve,"LI",{});var tke=s(Qv);z_e=n(tke,"STRONG",{});var Put=s(z_e);YZo=r(Put,"wav2vec2"),Put.forEach(t),KZo=r(tke," \u2014 "),JX=n(tke,"A",{href:!0});var But=s(JX);ZZo=r(But,"Wav2Vec2ForCTC"),But.forEach(t),eer=r(tke," (Wav2Vec2 model)"),tke.forEach(t),oer=i(Ve),Hv=n(Ve,"LI",{});var ake=s(Hv);W_e=n(ake,"STRONG",{});var Iut=s(W_e);rer=r(Iut,"wav2vec2-conformer"),Iut.forEach(t),ter=r(ake," \u2014 "),YX=n(ake,"A",{href:!0});var qut=s(YX);aer=r(qut,"Wav2Vec2ConformerForCTC"),qut.forEach(t),ner=r(ake," (Wav2Vec2-Conformer model)"),ake.forEach(t),ser=i(Ve),Uv=n(Ve,"LI",{});var nke=s(Uv);Q_e=n(nke,"STRONG",{});var Nut=s(Q_e);ler=r(Nut,"wavlm"),Nut.forEach(t),ier=r(nke," \u2014 "),KX=n(nke,"A",{href:!0});var jut=s(KX);der=r(jut,"WavLMForCTC"),jut.forEach(t),cer=r(nke," (WavLM model)"),nke.forEach(t),Ve.forEach(t),fer=i(_a),Jv=n(_a,"P",{});var ske=s(Jv);mer=r(ske,"The model is set in evaluation mode by default using "),H_e=n(ske,"CODE",{});var Dut=s(H_e);ger=r(Dut,"model.eval()"),Dut.forEach(t),her=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(ske,"CODE",{});var Gut=s(U_e);per=r(Gut,"model.train()"),Gut.forEach(t),ske.forEach(t),_er=i(_a),T(Yv.$$.fragment,_a),_a.forEach(t),tl.forEach(t),sNe=i(f),bd=n(f,"H2",{class:!0});var cDe=s(bd);Kv=n(cDe,"A",{id:!0,class:!0,href:!0});var Out=s(Kv);J_e=n(Out,"SPAN",{});var Vut=s(J_e);T(_8.$$.fragment,Vut),Vut.forEach(t),Out.forEach(t),uer=i(cDe),Y_e=n(cDe,"SPAN",{});var Xut=s(Y_e);ber=r(Xut,"AutoModelForSpeechSeq2Seq"),Xut.forEach(t),cDe.forEach(t),lNe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(u8.$$.fragment,al),ver=i(al),vd=n(al,"P",{});var AZ=s(vd);Fer=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZX=n(AZ,"A",{href:!0});var zut=s(ZX);Ter=r(zut,"from_pretrained()"),zut.forEach(t),Mer=r(AZ," class method or the "),ez=n(AZ,"A",{href:!0});var Wut=s(ez);Eer=r(Wut,"from_config()"),Wut.forEach(t),Cer=r(AZ,` class
method.`),AZ.forEach(t),wer=i(al),b8=n(al,"P",{});var fDe=s(b8);Aer=r(fDe,"This class cannot be instantiated directly using "),K_e=n(fDe,"CODE",{});var Qut=s(K_e);yer=r(Qut,"__init__()"),Qut.forEach(t),Ler=r(fDe," (throws an error)."),fDe.forEach(t),xer=i(al),Ft=n(al,"DIV",{class:!0});var e0=s(Ft);T(v8.$$.fragment,e0),$er=i(e0),Z_e=n(e0,"P",{});var Hut=s(Z_e);ker=r(Hut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hut.forEach(t),Ser=i(e0),Fd=n(e0,"P",{});var yZ=s(Fd);Rer=r(yZ,`Note:
Loading a model from its configuration file does `),eue=n(yZ,"STRONG",{});var Uut=s(eue);Per=r(Uut,"not"),Uut.forEach(t),Ber=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(yZ,"A",{href:!0});var Jut=s(oz);Ier=r(Jut,"from_pretrained()"),Jut.forEach(t),qer=r(yZ," to load the model weights."),yZ.forEach(t),Ner=i(e0),T(Zv.$$.fragment,e0),e0.forEach(t),jer=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(F8.$$.fragment,ua),Der=i(ua),oue=n(ua,"P",{});var Yut=s(oue);Ger=r(Yut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yut.forEach(t),Oer=i(ua),Xa=n(ua,"P",{});var o0=s(Xa);Ver=r(o0,"The model class to instantiate is selected based on the "),rue=n(o0,"CODE",{});var Kut=s(rue);Xer=r(Kut,"model_type"),Kut.forEach(t),zer=r(o0,` property of the config object (either
passed as an argument or loaded from `),tue=n(o0,"CODE",{});var Zut=s(tue);Wer=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),Qer=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(o0,"CODE",{});var e6t=s(aue);Her=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),Uer=r(o0,":"),o0.forEach(t),Jer=i(ua),T8=n(ua,"UL",{});var mDe=s(T8);eF=n(mDe,"LI",{});var lke=s(eF);nue=n(lke,"STRONG",{});var o6t=s(nue);Yer=r(o6t,"speech-encoder-decoder"),o6t.forEach(t),Ker=r(lke," \u2014 "),rz=n(lke,"A",{href:!0});var r6t=s(rz);Zer=r(r6t,"SpeechEncoderDecoderModel"),r6t.forEach(t),eor=r(lke," (Speech Encoder decoder model)"),lke.forEach(t),oor=i(mDe),oF=n(mDe,"LI",{});var ike=s(oF);sue=n(ike,"STRONG",{});var t6t=s(sue);ror=r(t6t,"speech_to_text"),t6t.forEach(t),tor=r(ike," \u2014 "),tz=n(ike,"A",{href:!0});var a6t=s(tz);aor=r(a6t,"Speech2TextForConditionalGeneration"),a6t.forEach(t),nor=r(ike," (Speech2Text model)"),ike.forEach(t),mDe.forEach(t),sor=i(ua),rF=n(ua,"P",{});var dke=s(rF);lor=r(dke,"The model is set in evaluation mode by default using "),lue=n(dke,"CODE",{});var n6t=s(lue);ior=r(n6t,"model.eval()"),n6t.forEach(t),dor=r(dke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(dke,"CODE",{});var s6t=s(iue);cor=r(s6t,"model.train()"),s6t.forEach(t),dke.forEach(t),mor=i(ua),T(tF.$$.fragment,ua),ua.forEach(t),al.forEach(t),iNe=i(f),Td=n(f,"H2",{class:!0});var gDe=s(Td);aF=n(gDe,"A",{id:!0,class:!0,href:!0});var l6t=s(aF);due=n(l6t,"SPAN",{});var i6t=s(due);T(M8.$$.fragment,i6t),i6t.forEach(t),l6t.forEach(t),gor=i(gDe),cue=n(gDe,"SPAN",{});var d6t=s(cue);hor=r(d6t,"AutoModelForAudioXVector"),d6t.forEach(t),gDe.forEach(t),dNe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(E8.$$.fragment,nl),por=i(nl),Md=n(nl,"P",{});var LZ=s(Md);_or=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),az=n(LZ,"A",{href:!0});var c6t=s(az);uor=r(c6t,"from_pretrained()"),c6t.forEach(t),bor=r(LZ," class method or the "),nz=n(LZ,"A",{href:!0});var f6t=s(nz);vor=r(f6t,"from_config()"),f6t.forEach(t),For=r(LZ,` class
method.`),LZ.forEach(t),Tor=i(nl),C8=n(nl,"P",{});var hDe=s(C8);Mor=r(hDe,"This class cannot be instantiated directly using "),fue=n(hDe,"CODE",{});var m6t=s(fue);Eor=r(m6t,"__init__()"),m6t.forEach(t),Cor=r(hDe," (throws an error)."),hDe.forEach(t),wor=i(nl),Tt=n(nl,"DIV",{class:!0});var r0=s(Tt);T(w8.$$.fragment,r0),Aor=i(r0),mue=n(r0,"P",{});var g6t=s(mue);yor=r(g6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),g6t.forEach(t),Lor=i(r0),Ed=n(r0,"P",{});var xZ=s(Ed);xor=r(xZ,`Note:
Loading a model from its configuration file does `),gue=n(xZ,"STRONG",{});var h6t=s(gue);$or=r(h6t,"not"),h6t.forEach(t),kor=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(xZ,"A",{href:!0});var p6t=s(sz);Sor=r(p6t,"from_pretrained()"),p6t.forEach(t),Ror=r(xZ," to load the model weights."),xZ.forEach(t),Por=i(r0),T(nF.$$.fragment,r0),r0.forEach(t),Bor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(A8.$$.fragment,ba),Ior=i(ba),hue=n(ba,"P",{});var _6t=s(hue);qor=r(_6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_6t.forEach(t),Nor=i(ba),za=n(ba,"P",{});var t0=s(za);jor=r(t0,"The model class to instantiate is selected based on the "),pue=n(t0,"CODE",{});var u6t=s(pue);Dor=r(u6t,"model_type"),u6t.forEach(t),Gor=r(t0,` property of the config object (either
passed as an argument or loaded from `),_ue=n(t0,"CODE",{});var b6t=s(_ue);Oor=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),Vor=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(t0,"CODE",{});var v6t=s(uue);Xor=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),zor=r(t0,":"),t0.forEach(t),Wor=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);sF=n(sl,"LI",{});var cke=s(sF);bue=n(cke,"STRONG",{});var F6t=s(bue);Qor=r(F6t,"data2vec-audio"),F6t.forEach(t),Hor=r(cke," \u2014 "),lz=n(cke,"A",{href:!0});var T6t=s(lz);Uor=r(T6t,"Data2VecAudioForXVector"),T6t.forEach(t),Jor=r(cke," (Data2VecAudio model)"),cke.forEach(t),Yor=i(sl),lF=n(sl,"LI",{});var fke=s(lF);vue=n(fke,"STRONG",{});var M6t=s(vue);Kor=r(M6t,"unispeech-sat"),M6t.forEach(t),Zor=r(fke," \u2014 "),iz=n(fke,"A",{href:!0});var E6t=s(iz);err=r(E6t,"UniSpeechSatForXVector"),E6t.forEach(t),orr=r(fke," (UniSpeechSat model)"),fke.forEach(t),rrr=i(sl),iF=n(sl,"LI",{});var mke=s(iF);Fue=n(mke,"STRONG",{});var C6t=s(Fue);trr=r(C6t,"wav2vec2"),C6t.forEach(t),arr=r(mke," \u2014 "),dz=n(mke,"A",{href:!0});var w6t=s(dz);nrr=r(w6t,"Wav2Vec2ForXVector"),w6t.forEach(t),srr=r(mke," (Wav2Vec2 model)"),mke.forEach(t),lrr=i(sl),dF=n(sl,"LI",{});var gke=s(dF);Tue=n(gke,"STRONG",{});var A6t=s(Tue);irr=r(A6t,"wav2vec2-conformer"),A6t.forEach(t),drr=r(gke," \u2014 "),cz=n(gke,"A",{href:!0});var y6t=s(cz);crr=r(y6t,"Wav2Vec2ConformerForXVector"),y6t.forEach(t),frr=r(gke," (Wav2Vec2-Conformer model)"),gke.forEach(t),mrr=i(sl),cF=n(sl,"LI",{});var hke=s(cF);Mue=n(hke,"STRONG",{});var L6t=s(Mue);grr=r(L6t,"wavlm"),L6t.forEach(t),hrr=r(hke," \u2014 "),fz=n(hke,"A",{href:!0});var x6t=s(fz);prr=r(x6t,"WavLMForXVector"),x6t.forEach(t),_rr=r(hke," (WavLM model)"),hke.forEach(t),sl.forEach(t),urr=i(ba),fF=n(ba,"P",{});var pke=s(fF);brr=r(pke,"The model is set in evaluation mode by default using "),Eue=n(pke,"CODE",{});var $6t=s(Eue);vrr=r($6t,"model.eval()"),$6t.forEach(t),Frr=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(pke,"CODE",{});var k6t=s(Cue);Trr=r(k6t,"model.train()"),k6t.forEach(t),pke.forEach(t),Mrr=i(ba),T(mF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),cNe=i(f),Cd=n(f,"H2",{class:!0});var pDe=s(Cd);gF=n(pDe,"A",{id:!0,class:!0,href:!0});var S6t=s(gF);wue=n(S6t,"SPAN",{});var R6t=s(wue);T(y8.$$.fragment,R6t),R6t.forEach(t),S6t.forEach(t),Err=i(pDe),Aue=n(pDe,"SPAN",{});var P6t=s(Aue);Crr=r(P6t,"AutoModelForMaskedImageModeling"),P6t.forEach(t),pDe.forEach(t),fNe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(L8.$$.fragment,ll),wrr=i(ll),wd=n(ll,"P",{});var $Z=s(wd);Arr=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mz=n($Z,"A",{href:!0});var B6t=s(mz);yrr=r(B6t,"from_pretrained()"),B6t.forEach(t),Lrr=r($Z," class method or the "),gz=n($Z,"A",{href:!0});var I6t=s(gz);xrr=r(I6t,"from_config()"),I6t.forEach(t),$rr=r($Z,` class
method.`),$Z.forEach(t),krr=i(ll),x8=n(ll,"P",{});var _De=s(x8);Srr=r(_De,"This class cannot be instantiated directly using "),yue=n(_De,"CODE",{});var q6t=s(yue);Rrr=r(q6t,"__init__()"),q6t.forEach(t),Prr=r(_De," (throws an error)."),_De.forEach(t),Brr=i(ll),Mt=n(ll,"DIV",{class:!0});var a0=s(Mt);T($8.$$.fragment,a0),Irr=i(a0),Lue=n(a0,"P",{});var N6t=s(Lue);qrr=r(N6t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),N6t.forEach(t),Nrr=i(a0),Ad=n(a0,"P",{});var kZ=s(Ad);jrr=r(kZ,`Note:
Loading a model from its configuration file does `),xue=n(kZ,"STRONG",{});var j6t=s(xue);Drr=r(j6t,"not"),j6t.forEach(t),Grr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(kZ,"A",{href:!0});var D6t=s(hz);Orr=r(D6t,"from_pretrained()"),D6t.forEach(t),Vrr=r(kZ," to load the model weights."),kZ.forEach(t),Xrr=i(a0),T(hF.$$.fragment,a0),a0.forEach(t),zrr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(k8.$$.fragment,va),Wrr=i(va),$ue=n(va,"P",{});var G6t=s($ue);Qrr=r(G6t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),G6t.forEach(t),Hrr=i(va),Wa=n(va,"P",{});var n0=s(Wa);Urr=r(n0,"The model class to instantiate is selected based on the "),kue=n(n0,"CODE",{});var O6t=s(kue);Jrr=r(O6t,"model_type"),O6t.forEach(t),Yrr=r(n0,` property of the config object (either
passed as an argument or loaded from `),Sue=n(n0,"CODE",{});var V6t=s(Sue);Krr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),Zrr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(n0,"CODE",{});var X6t=s(Rue);etr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),otr=r(n0,":"),n0.forEach(t),rtr=i(va),yd=n(va,"UL",{});var SZ=s(yd);pF=n(SZ,"LI",{});var _ke=s(pF);Pue=n(_ke,"STRONG",{});var z6t=s(Pue);ttr=r(z6t,"deit"),z6t.forEach(t),atr=r(_ke," \u2014 "),pz=n(_ke,"A",{href:!0});var W6t=s(pz);ntr=r(W6t,"DeiTForMaskedImageModeling"),W6t.forEach(t),str=r(_ke," (DeiT model)"),_ke.forEach(t),ltr=i(SZ),_F=n(SZ,"LI",{});var uke=s(_F);Bue=n(uke,"STRONG",{});var Q6t=s(Bue);itr=r(Q6t,"swin"),Q6t.forEach(t),dtr=r(uke," \u2014 "),_z=n(uke,"A",{href:!0});var H6t=s(_z);ctr=r(H6t,"SwinForMaskedImageModeling"),H6t.forEach(t),ftr=r(uke," (Swin model)"),uke.forEach(t),mtr=i(SZ),uF=n(SZ,"LI",{});var bke=s(uF);Iue=n(bke,"STRONG",{});var U6t=s(Iue);gtr=r(U6t,"vit"),U6t.forEach(t),htr=r(bke," \u2014 "),uz=n(bke,"A",{href:!0});var J6t=s(uz);ptr=r(J6t,"ViTForMaskedImageModeling"),J6t.forEach(t),_tr=r(bke," (ViT model)"),bke.forEach(t),SZ.forEach(t),utr=i(va),bF=n(va,"P",{});var vke=s(bF);btr=r(vke,"The model is set in evaluation mode by default using "),que=n(vke,"CODE",{});var Y6t=s(que);vtr=r(Y6t,"model.eval()"),Y6t.forEach(t),Ftr=r(vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(vke,"CODE",{});var K6t=s(Nue);Ttr=r(K6t,"model.train()"),K6t.forEach(t),vke.forEach(t),Mtr=i(va),T(vF.$$.fragment,va),va.forEach(t),ll.forEach(t),mNe=i(f),Ld=n(f,"H2",{class:!0});var uDe=s(Ld);FF=n(uDe,"A",{id:!0,class:!0,href:!0});var Z6t=s(FF);jue=n(Z6t,"SPAN",{});var e1t=s(jue);T(S8.$$.fragment,e1t),e1t.forEach(t),Z6t.forEach(t),Etr=i(uDe),Due=n(uDe,"SPAN",{});var o1t=s(Due);Ctr=r(o1t,"AutoModelForObjectDetection"),o1t.forEach(t),uDe.forEach(t),gNe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(R8.$$.fragment,il),wtr=i(il),xd=n(il,"P",{});var RZ=s(xd);Atr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bz=n(RZ,"A",{href:!0});var r1t=s(bz);ytr=r(r1t,"from_pretrained()"),r1t.forEach(t),Ltr=r(RZ," class method or the "),vz=n(RZ,"A",{href:!0});var t1t=s(vz);xtr=r(t1t,"from_config()"),t1t.forEach(t),$tr=r(RZ,` class
method.`),RZ.forEach(t),ktr=i(il),P8=n(il,"P",{});var bDe=s(P8);Str=r(bDe,"This class cannot be instantiated directly using "),Gue=n(bDe,"CODE",{});var a1t=s(Gue);Rtr=r(a1t,"__init__()"),a1t.forEach(t),Ptr=r(bDe," (throws an error)."),bDe.forEach(t),Btr=i(il),Et=n(il,"DIV",{class:!0});var s0=s(Et);T(B8.$$.fragment,s0),Itr=i(s0),Oue=n(s0,"P",{});var n1t=s(Oue);qtr=r(n1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),n1t.forEach(t),Ntr=i(s0),$d=n(s0,"P",{});var PZ=s($d);jtr=r(PZ,`Note:
Loading a model from its configuration file does `),Vue=n(PZ,"STRONG",{});var s1t=s(Vue);Dtr=r(s1t,"not"),s1t.forEach(t),Gtr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(PZ,"A",{href:!0});var l1t=s(Fz);Otr=r(l1t,"from_pretrained()"),l1t.forEach(t),Vtr=r(PZ," to load the model weights."),PZ.forEach(t),Xtr=i(s0),T(TF.$$.fragment,s0),s0.forEach(t),ztr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(I8.$$.fragment,Fa),Wtr=i(Fa),Xue=n(Fa,"P",{});var i1t=s(Xue);Qtr=r(i1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),i1t.forEach(t),Htr=i(Fa),Qa=n(Fa,"P",{});var l0=s(Qa);Utr=r(l0,"The model class to instantiate is selected based on the "),zue=n(l0,"CODE",{});var d1t=s(zue);Jtr=r(d1t,"model_type"),d1t.forEach(t),Ytr=r(l0,` property of the config object (either
passed as an argument or loaded from `),Wue=n(l0,"CODE",{});var c1t=s(Wue);Ktr=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),Ztr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(l0,"CODE",{});var f1t=s(Que);ear=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),oar=r(l0,":"),l0.forEach(t),rar=i(Fa),q8=n(Fa,"UL",{});var vDe=s(q8);MF=n(vDe,"LI",{});var Fke=s(MF);Hue=n(Fke,"STRONG",{});var m1t=s(Hue);tar=r(m1t,"detr"),m1t.forEach(t),aar=r(Fke," \u2014 "),Tz=n(Fke,"A",{href:!0});var g1t=s(Tz);nar=r(g1t,"DetrForObjectDetection"),g1t.forEach(t),sar=r(Fke," (DETR model)"),Fke.forEach(t),lar=i(vDe),EF=n(vDe,"LI",{});var Tke=s(EF);Uue=n(Tke,"STRONG",{});var h1t=s(Uue);iar=r(h1t,"yolos"),h1t.forEach(t),dar=r(Tke," \u2014 "),Mz=n(Tke,"A",{href:!0});var p1t=s(Mz);car=r(p1t,"YolosForObjectDetection"),p1t.forEach(t),far=r(Tke," (YOLOS model)"),Tke.forEach(t),vDe.forEach(t),mar=i(Fa),CF=n(Fa,"P",{});var Mke=s(CF);gar=r(Mke,"The model is set in evaluation mode by default using "),Jue=n(Mke,"CODE",{});var _1t=s(Jue);har=r(_1t,"model.eval()"),_1t.forEach(t),par=r(Mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(Mke,"CODE",{});var u1t=s(Yue);_ar=r(u1t,"model.train()"),u1t.forEach(t),Mke.forEach(t),uar=i(Fa),T(wF.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),hNe=i(f),kd=n(f,"H2",{class:!0});var FDe=s(kd);AF=n(FDe,"A",{id:!0,class:!0,href:!0});var b1t=s(AF);Kue=n(b1t,"SPAN",{});var v1t=s(Kue);T(N8.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),bar=i(FDe),Zue=n(FDe,"SPAN",{});var F1t=s(Zue);Far=r(F1t,"AutoModelForImageSegmentation"),F1t.forEach(t),FDe.forEach(t),pNe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(j8.$$.fragment,dl),Tar=i(dl),Sd=n(dl,"P",{});var BZ=s(Sd);Mar=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Ez=n(BZ,"A",{href:!0});var T1t=s(Ez);Ear=r(T1t,"from_pretrained()"),T1t.forEach(t),Car=r(BZ," class method or the "),Cz=n(BZ,"A",{href:!0});var M1t=s(Cz);war=r(M1t,"from_config()"),M1t.forEach(t),Aar=r(BZ,` class
method.`),BZ.forEach(t),yar=i(dl),D8=n(dl,"P",{});var TDe=s(D8);Lar=r(TDe,"This class cannot be instantiated directly using "),e6e=n(TDe,"CODE",{});var E1t=s(e6e);xar=r(E1t,"__init__()"),E1t.forEach(t),$ar=r(TDe," (throws an error)."),TDe.forEach(t),kar=i(dl),Ct=n(dl,"DIV",{class:!0});var i0=s(Ct);T(G8.$$.fragment,i0),Sar=i(i0),o6e=n(i0,"P",{});var C1t=s(o6e);Rar=r(C1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),C1t.forEach(t),Par=i(i0),Rd=n(i0,"P",{});var IZ=s(Rd);Bar=r(IZ,`Note:
Loading a model from its configuration file does `),r6e=n(IZ,"STRONG",{});var w1t=s(r6e);Iar=r(w1t,"not"),w1t.forEach(t),qar=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(IZ,"A",{href:!0});var A1t=s(wz);Nar=r(A1t,"from_pretrained()"),A1t.forEach(t),jar=r(IZ," to load the model weights."),IZ.forEach(t),Dar=i(i0),T(yF.$$.fragment,i0),i0.forEach(t),Gar=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(O8.$$.fragment,Ta),Oar=i(Ta),t6e=n(Ta,"P",{});var y1t=s(t6e);Var=r(y1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),y1t.forEach(t),Xar=i(Ta),Ha=n(Ta,"P",{});var d0=s(Ha);zar=r(d0,"The model class to instantiate is selected based on the "),a6e=n(d0,"CODE",{});var L1t=s(a6e);War=r(L1t,"model_type"),L1t.forEach(t),Qar=r(d0,` property of the config object (either
passed as an argument or loaded from `),n6e=n(d0,"CODE",{});var x1t=s(n6e);Har=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),Uar=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(d0,"CODE",{});var $1t=s(s6e);Jar=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),Yar=r(d0,":"),d0.forEach(t),Kar=i(Ta),l6e=n(Ta,"UL",{});var k1t=s(l6e);LF=n(k1t,"LI",{});var Eke=s(LF);i6e=n(Eke,"STRONG",{});var S1t=s(i6e);Zar=r(S1t,"detr"),S1t.forEach(t),enr=r(Eke," \u2014 "),Az=n(Eke,"A",{href:!0});var R1t=s(Az);onr=r(R1t,"DetrForSegmentation"),R1t.forEach(t),rnr=r(Eke," (DETR model)"),Eke.forEach(t),k1t.forEach(t),tnr=i(Ta),xF=n(Ta,"P",{});var Cke=s(xF);anr=r(Cke,"The model is set in evaluation mode by default using "),d6e=n(Cke,"CODE",{});var P1t=s(d6e);nnr=r(P1t,"model.eval()"),P1t.forEach(t),snr=r(Cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c6e=n(Cke,"CODE",{});var B1t=s(c6e);lnr=r(B1t,"model.train()"),B1t.forEach(t),Cke.forEach(t),inr=i(Ta),T($F.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),_Ne=i(f),Pd=n(f,"H2",{class:!0});var MDe=s(Pd);kF=n(MDe,"A",{id:!0,class:!0,href:!0});var I1t=s(kF);f6e=n(I1t,"SPAN",{});var q1t=s(f6e);T(V8.$$.fragment,q1t),q1t.forEach(t),I1t.forEach(t),dnr=i(MDe),m6e=n(MDe,"SPAN",{});var N1t=s(m6e);cnr=r(N1t,"AutoModelForSemanticSegmentation"),N1t.forEach(t),MDe.forEach(t),uNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(X8.$$.fragment,cl),fnr=i(cl),Bd=n(cl,"P",{});var qZ=s(Bd);mnr=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yz=n(qZ,"A",{href:!0});var j1t=s(yz);gnr=r(j1t,"from_pretrained()"),j1t.forEach(t),hnr=r(qZ," class method or the "),Lz=n(qZ,"A",{href:!0});var D1t=s(Lz);pnr=r(D1t,"from_config()"),D1t.forEach(t),_nr=r(qZ,` class
method.`),qZ.forEach(t),unr=i(cl),z8=n(cl,"P",{});var EDe=s(z8);bnr=r(EDe,"This class cannot be instantiated directly using "),g6e=n(EDe,"CODE",{});var G1t=s(g6e);vnr=r(G1t,"__init__()"),G1t.forEach(t),Fnr=r(EDe," (throws an error)."),EDe.forEach(t),Tnr=i(cl),wt=n(cl,"DIV",{class:!0});var c0=s(wt);T(W8.$$.fragment,c0),Mnr=i(c0),h6e=n(c0,"P",{});var O1t=s(h6e);Enr=r(O1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),O1t.forEach(t),Cnr=i(c0),Id=n(c0,"P",{});var NZ=s(Id);wnr=r(NZ,`Note:
Loading a model from its configuration file does `),p6e=n(NZ,"STRONG",{});var V1t=s(p6e);Anr=r(V1t,"not"),V1t.forEach(t),ynr=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(NZ,"A",{href:!0});var X1t=s(xz);Lnr=r(X1t,"from_pretrained()"),X1t.forEach(t),xnr=r(NZ," to load the model weights."),NZ.forEach(t),$nr=i(c0),T(SF.$$.fragment,c0),c0.forEach(t),knr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(Q8.$$.fragment,Ma),Snr=i(Ma),_6e=n(Ma,"P",{});var z1t=s(_6e);Rnr=r(z1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),z1t.forEach(t),Pnr=i(Ma),Ua=n(Ma,"P",{});var f0=s(Ua);Bnr=r(f0,"The model class to instantiate is selected based on the "),u6e=n(f0,"CODE",{});var W1t=s(u6e);Inr=r(W1t,"model_type"),W1t.forEach(t),qnr=r(f0,` property of the config object (either
passed as an argument or loaded from `),b6e=n(f0,"CODE",{});var Q1t=s(b6e);Nnr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),jnr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(f0,"CODE",{});var H1t=s(v6e);Dnr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),Gnr=r(f0,":"),f0.forEach(t),Onr=i(Ma),Ja=n(Ma,"UL",{});var m0=s(Ja);RF=n(m0,"LI",{});var wke=s(RF);F6e=n(wke,"STRONG",{});var U1t=s(F6e);Vnr=r(U1t,"beit"),U1t.forEach(t),Xnr=r(wke," \u2014 "),$z=n(wke,"A",{href:!0});var J1t=s($z);znr=r(J1t,"BeitForSemanticSegmentation"),J1t.forEach(t),Wnr=r(wke," (BEiT model)"),wke.forEach(t),Qnr=i(m0),PF=n(m0,"LI",{});var Ake=s(PF);T6e=n(Ake,"STRONG",{});var Y1t=s(T6e);Hnr=r(Y1t,"data2vec-vision"),Y1t.forEach(t),Unr=r(Ake," \u2014 "),kz=n(Ake,"A",{href:!0});var K1t=s(kz);Jnr=r(K1t,"Data2VecVisionForSemanticSegmentation"),K1t.forEach(t),Ynr=r(Ake," (Data2VecVision model)"),Ake.forEach(t),Knr=i(m0),BF=n(m0,"LI",{});var yke=s(BF);M6e=n(yke,"STRONG",{});var Z1t=s(M6e);Znr=r(Z1t,"dpt"),Z1t.forEach(t),esr=r(yke," \u2014 "),Sz=n(yke,"A",{href:!0});var ebt=s(Sz);osr=r(ebt,"DPTForSemanticSegmentation"),ebt.forEach(t),rsr=r(yke," (DPT model)"),yke.forEach(t),tsr=i(m0),IF=n(m0,"LI",{});var Lke=s(IF);E6e=n(Lke,"STRONG",{});var obt=s(E6e);asr=r(obt,"segformer"),obt.forEach(t),nsr=r(Lke," \u2014 "),Rz=n(Lke,"A",{href:!0});var rbt=s(Rz);ssr=r(rbt,"SegformerForSemanticSegmentation"),rbt.forEach(t),lsr=r(Lke," (SegFormer model)"),Lke.forEach(t),m0.forEach(t),isr=i(Ma),qF=n(Ma,"P",{});var xke=s(qF);dsr=r(xke,"The model is set in evaluation mode by default using "),C6e=n(xke,"CODE",{});var tbt=s(C6e);csr=r(tbt,"model.eval()"),tbt.forEach(t),fsr=r(xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w6e=n(xke,"CODE",{});var abt=s(w6e);msr=r(abt,"model.train()"),abt.forEach(t),xke.forEach(t),gsr=i(Ma),T(NF.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),bNe=i(f),qd=n(f,"H2",{class:!0});var CDe=s(qd);jF=n(CDe,"A",{id:!0,class:!0,href:!0});var nbt=s(jF);A6e=n(nbt,"SPAN",{});var sbt=s(A6e);T(H8.$$.fragment,sbt),sbt.forEach(t),nbt.forEach(t),hsr=i(CDe),y6e=n(CDe,"SPAN",{});var lbt=s(y6e);psr=r(lbt,"AutoModelForInstanceSegmentation"),lbt.forEach(t),CDe.forEach(t),vNe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(U8.$$.fragment,fl),_sr=i(fl),Nd=n(fl,"P",{});var jZ=s(Nd);usr=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Pz=n(jZ,"A",{href:!0});var ibt=s(Pz);bsr=r(ibt,"from_pretrained()"),ibt.forEach(t),vsr=r(jZ," class method or the "),Bz=n(jZ,"A",{href:!0});var dbt=s(Bz);Fsr=r(dbt,"from_config()"),dbt.forEach(t),Tsr=r(jZ,` class
method.`),jZ.forEach(t),Msr=i(fl),J8=n(fl,"P",{});var wDe=s(J8);Esr=r(wDe,"This class cannot be instantiated directly using "),L6e=n(wDe,"CODE",{});var cbt=s(L6e);Csr=r(cbt,"__init__()"),cbt.forEach(t),wsr=r(wDe," (throws an error)."),wDe.forEach(t),Asr=i(fl),At=n(fl,"DIV",{class:!0});var g0=s(At);T(Y8.$$.fragment,g0),ysr=i(g0),x6e=n(g0,"P",{});var fbt=s(x6e);Lsr=r(fbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fbt.forEach(t),xsr=i(g0),jd=n(g0,"P",{});var DZ=s(jd);$sr=r(DZ,`Note:
Loading a model from its configuration file does `),$6e=n(DZ,"STRONG",{});var mbt=s($6e);ksr=r(mbt,"not"),mbt.forEach(t),Ssr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(DZ,"A",{href:!0});var gbt=s(Iz);Rsr=r(gbt,"from_pretrained()"),gbt.forEach(t),Psr=r(DZ," to load the model weights."),DZ.forEach(t),Bsr=i(g0),T(DF.$$.fragment,g0),g0.forEach(t),Isr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(K8.$$.fragment,Ea),qsr=i(Ea),k6e=n(Ea,"P",{});var hbt=s(k6e);Nsr=r(hbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hbt.forEach(t),jsr=i(Ea),Ya=n(Ea,"P",{});var h0=s(Ya);Dsr=r(h0,"The model class to instantiate is selected based on the "),S6e=n(h0,"CODE",{});var pbt=s(S6e);Gsr=r(pbt,"model_type"),pbt.forEach(t),Osr=r(h0,` property of the config object (either
passed as an argument or loaded from `),R6e=n(h0,"CODE",{});var _bt=s(R6e);Vsr=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),Xsr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(h0,"CODE",{});var ubt=s(P6e);zsr=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),Wsr=r(h0,":"),h0.forEach(t),Qsr=i(Ea),B6e=n(Ea,"UL",{});var bbt=s(B6e);GF=n(bbt,"LI",{});var $ke=s(GF);I6e=n($ke,"STRONG",{});var vbt=s(I6e);Hsr=r(vbt,"maskformer"),vbt.forEach(t),Usr=r($ke," \u2014 "),qz=n($ke,"A",{href:!0});var Fbt=s(qz);Jsr=r(Fbt,"MaskFormerForInstanceSegmentation"),Fbt.forEach(t),Ysr=r($ke," (MaskFormer model)"),$ke.forEach(t),bbt.forEach(t),Ksr=i(Ea),OF=n(Ea,"P",{});var kke=s(OF);Zsr=r(kke,"The model is set in evaluation mode by default using "),q6e=n(kke,"CODE",{});var Tbt=s(q6e);elr=r(Tbt,"model.eval()"),Tbt.forEach(t),olr=r(kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N6e=n(kke,"CODE",{});var Mbt=s(N6e);rlr=r(Mbt,"model.train()"),Mbt.forEach(t),kke.forEach(t),tlr=i(Ea),T(VF.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),FNe=i(f),Dd=n(f,"H2",{class:!0});var ADe=s(Dd);XF=n(ADe,"A",{id:!0,class:!0,href:!0});var Ebt=s(XF);j6e=n(Ebt,"SPAN",{});var Cbt=s(j6e);T(Z8.$$.fragment,Cbt),Cbt.forEach(t),Ebt.forEach(t),alr=i(ADe),D6e=n(ADe,"SPAN",{});var wbt=s(D6e);nlr=r(wbt,"TFAutoModel"),wbt.forEach(t),ADe.forEach(t),TNe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(eL.$$.fragment,ml),slr=i(ml),Gd=n(ml,"P",{});var GZ=s(Gd);llr=r(GZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Nz=n(GZ,"A",{href:!0});var Abt=s(Nz);ilr=r(Abt,"from_pretrained()"),Abt.forEach(t),dlr=r(GZ," class method or the "),jz=n(GZ,"A",{href:!0});var ybt=s(jz);clr=r(ybt,"from_config()"),ybt.forEach(t),flr=r(GZ,` class
method.`),GZ.forEach(t),mlr=i(ml),oL=n(ml,"P",{});var yDe=s(oL);glr=r(yDe,"This class cannot be instantiated directly using "),G6e=n(yDe,"CODE",{});var Lbt=s(G6e);hlr=r(Lbt,"__init__()"),Lbt.forEach(t),plr=r(yDe," (throws an error)."),yDe.forEach(t),_lr=i(ml),yt=n(ml,"DIV",{class:!0});var p0=s(yt);T(rL.$$.fragment,p0),ulr=i(p0),O6e=n(p0,"P",{});var xbt=s(O6e);blr=r(xbt,"Instantiates one of the base model classes of the library from a configuration."),xbt.forEach(t),vlr=i(p0),Od=n(p0,"P",{});var OZ=s(Od);Flr=r(OZ,`Note:
Loading a model from its configuration file does `),V6e=n(OZ,"STRONG",{});var $bt=s(V6e);Tlr=r($bt,"not"),$bt.forEach(t),Mlr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(OZ,"A",{href:!0});var kbt=s(Dz);Elr=r(kbt,"from_pretrained()"),kbt.forEach(t),Clr=r(OZ," to load the model weights."),OZ.forEach(t),wlr=i(p0),T(zF.$$.fragment,p0),p0.forEach(t),Alr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(tL.$$.fragment,gl),ylr=i(gl),X6e=n(gl,"P",{});var Sbt=s(X6e);Llr=r(Sbt,"Instantiate one of the base model classes of the library from a pretrained model."),Sbt.forEach(t),xlr=i(gl),Ka=n(gl,"P",{});var _0=s(Ka);$lr=r(_0,"The model class to instantiate is selected based on the "),z6e=n(_0,"CODE",{});var Rbt=s(z6e);klr=r(Rbt,"model_type"),Rbt.forEach(t),Slr=r(_0,` property of the config object (either
passed as an argument or loaded from `),W6e=n(_0,"CODE",{});var Pbt=s(W6e);Rlr=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),Plr=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=n(_0,"CODE",{});var Bbt=s(Q6e);Blr=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),Ilr=r(_0,":"),_0.forEach(t),qlr=i(gl),N=n(gl,"UL",{});var D=s(N);WF=n(D,"LI",{});var Ske=s(WF);H6e=n(Ske,"STRONG",{});var Ibt=s(H6e);Nlr=r(Ibt,"albert"),Ibt.forEach(t),jlr=r(Ske," \u2014 "),Gz=n(Ske,"A",{href:!0});var qbt=s(Gz);Dlr=r(qbt,"TFAlbertModel"),qbt.forEach(t),Glr=r(Ske," (ALBERT model)"),Ske.forEach(t),Olr=i(D),QF=n(D,"LI",{});var Rke=s(QF);U6e=n(Rke,"STRONG",{});var Nbt=s(U6e);Vlr=r(Nbt,"bart"),Nbt.forEach(t),Xlr=r(Rke," \u2014 "),Oz=n(Rke,"A",{href:!0});var jbt=s(Oz);zlr=r(jbt,"TFBartModel"),jbt.forEach(t),Wlr=r(Rke," (BART model)"),Rke.forEach(t),Qlr=i(D),HF=n(D,"LI",{});var Pke=s(HF);J6e=n(Pke,"STRONG",{});var Dbt=s(J6e);Hlr=r(Dbt,"bert"),Dbt.forEach(t),Ulr=r(Pke," \u2014 "),Vz=n(Pke,"A",{href:!0});var Gbt=s(Vz);Jlr=r(Gbt,"TFBertModel"),Gbt.forEach(t),Ylr=r(Pke," (BERT model)"),Pke.forEach(t),Klr=i(D),UF=n(D,"LI",{});var Bke=s(UF);Y6e=n(Bke,"STRONG",{});var Obt=s(Y6e);Zlr=r(Obt,"blenderbot"),Obt.forEach(t),eir=r(Bke," \u2014 "),Xz=n(Bke,"A",{href:!0});var Vbt=s(Xz);oir=r(Vbt,"TFBlenderbotModel"),Vbt.forEach(t),rir=r(Bke," (Blenderbot model)"),Bke.forEach(t),tir=i(D),JF=n(D,"LI",{});var Ike=s(JF);K6e=n(Ike,"STRONG",{});var Xbt=s(K6e);air=r(Xbt,"blenderbot-small"),Xbt.forEach(t),nir=r(Ike," \u2014 "),zz=n(Ike,"A",{href:!0});var zbt=s(zz);sir=r(zbt,"TFBlenderbotSmallModel"),zbt.forEach(t),lir=r(Ike," (BlenderbotSmall model)"),Ike.forEach(t),iir=i(D),YF=n(D,"LI",{});var qke=s(YF);Z6e=n(qke,"STRONG",{});var Wbt=s(Z6e);dir=r(Wbt,"camembert"),Wbt.forEach(t),cir=r(qke," \u2014 "),Wz=n(qke,"A",{href:!0});var Qbt=s(Wz);fir=r(Qbt,"TFCamembertModel"),Qbt.forEach(t),mir=r(qke," (CamemBERT model)"),qke.forEach(t),gir=i(D),KF=n(D,"LI",{});var Nke=s(KF);e1e=n(Nke,"STRONG",{});var Hbt=s(e1e);hir=r(Hbt,"clip"),Hbt.forEach(t),pir=r(Nke," \u2014 "),Qz=n(Nke,"A",{href:!0});var Ubt=s(Qz);_ir=r(Ubt,"TFCLIPModel"),Ubt.forEach(t),uir=r(Nke," (CLIP model)"),Nke.forEach(t),bir=i(D),ZF=n(D,"LI",{});var jke=s(ZF);o1e=n(jke,"STRONG",{});var Jbt=s(o1e);vir=r(Jbt,"convbert"),Jbt.forEach(t),Fir=r(jke," \u2014 "),Hz=n(jke,"A",{href:!0});var Ybt=s(Hz);Tir=r(Ybt,"TFConvBertModel"),Ybt.forEach(t),Mir=r(jke," (ConvBERT model)"),jke.forEach(t),Eir=i(D),eT=n(D,"LI",{});var Dke=s(eT);r1e=n(Dke,"STRONG",{});var Kbt=s(r1e);Cir=r(Kbt,"convnext"),Kbt.forEach(t),wir=r(Dke," \u2014 "),Uz=n(Dke,"A",{href:!0});var Zbt=s(Uz);Air=r(Zbt,"TFConvNextModel"),Zbt.forEach(t),yir=r(Dke," (ConvNext model)"),Dke.forEach(t),Lir=i(D),oT=n(D,"LI",{});var Gke=s(oT);t1e=n(Gke,"STRONG",{});var e2t=s(t1e);xir=r(e2t,"ctrl"),e2t.forEach(t),$ir=r(Gke," \u2014 "),Jz=n(Gke,"A",{href:!0});var o2t=s(Jz);kir=r(o2t,"TFCTRLModel"),o2t.forEach(t),Sir=r(Gke," (CTRL model)"),Gke.forEach(t),Rir=i(D),rT=n(D,"LI",{});var Oke=s(rT);a1e=n(Oke,"STRONG",{});var r2t=s(a1e);Pir=r(r2t,"data2vec-vision"),r2t.forEach(t),Bir=r(Oke," \u2014 "),Yz=n(Oke,"A",{href:!0});var t2t=s(Yz);Iir=r(t2t,"TFData2VecVisionModel"),t2t.forEach(t),qir=r(Oke," (Data2VecVision model)"),Oke.forEach(t),Nir=i(D),tT=n(D,"LI",{});var Vke=s(tT);n1e=n(Vke,"STRONG",{});var a2t=s(n1e);jir=r(a2t,"deberta"),a2t.forEach(t),Dir=r(Vke," \u2014 "),Kz=n(Vke,"A",{href:!0});var n2t=s(Kz);Gir=r(n2t,"TFDebertaModel"),n2t.forEach(t),Oir=r(Vke," (DeBERTa model)"),Vke.forEach(t),Vir=i(D),aT=n(D,"LI",{});var Xke=s(aT);s1e=n(Xke,"STRONG",{});var s2t=s(s1e);Xir=r(s2t,"deberta-v2"),s2t.forEach(t),zir=r(Xke," \u2014 "),Zz=n(Xke,"A",{href:!0});var l2t=s(Zz);Wir=r(l2t,"TFDebertaV2Model"),l2t.forEach(t),Qir=r(Xke," (DeBERTa-v2 model)"),Xke.forEach(t),Hir=i(D),nT=n(D,"LI",{});var zke=s(nT);l1e=n(zke,"STRONG",{});var i2t=s(l1e);Uir=r(i2t,"distilbert"),i2t.forEach(t),Jir=r(zke," \u2014 "),eW=n(zke,"A",{href:!0});var d2t=s(eW);Yir=r(d2t,"TFDistilBertModel"),d2t.forEach(t),Kir=r(zke," (DistilBERT model)"),zke.forEach(t),Zir=i(D),sT=n(D,"LI",{});var Wke=s(sT);i1e=n(Wke,"STRONG",{});var c2t=s(i1e);edr=r(c2t,"dpr"),c2t.forEach(t),odr=r(Wke," \u2014 "),oW=n(Wke,"A",{href:!0});var f2t=s(oW);rdr=r(f2t,"TFDPRQuestionEncoder"),f2t.forEach(t),tdr=r(Wke," (DPR model)"),Wke.forEach(t),adr=i(D),lT=n(D,"LI",{});var Qke=s(lT);d1e=n(Qke,"STRONG",{});var m2t=s(d1e);ndr=r(m2t,"electra"),m2t.forEach(t),sdr=r(Qke," \u2014 "),rW=n(Qke,"A",{href:!0});var g2t=s(rW);ldr=r(g2t,"TFElectraModel"),g2t.forEach(t),idr=r(Qke," (ELECTRA model)"),Qke.forEach(t),ddr=i(D),iT=n(D,"LI",{});var Hke=s(iT);c1e=n(Hke,"STRONG",{});var h2t=s(c1e);cdr=r(h2t,"flaubert"),h2t.forEach(t),fdr=r(Hke," \u2014 "),tW=n(Hke,"A",{href:!0});var p2t=s(tW);mdr=r(p2t,"TFFlaubertModel"),p2t.forEach(t),gdr=r(Hke," (FlauBERT model)"),Hke.forEach(t),hdr=i(D),Bs=n(D,"LI",{});var P$=s(Bs);f1e=n(P$,"STRONG",{});var _2t=s(f1e);pdr=r(_2t,"funnel"),_2t.forEach(t),_dr=r(P$," \u2014 "),aW=n(P$,"A",{href:!0});var u2t=s(aW);udr=r(u2t,"TFFunnelModel"),u2t.forEach(t),bdr=r(P$," or "),nW=n(P$,"A",{href:!0});var b2t=s(nW);vdr=r(b2t,"TFFunnelBaseModel"),b2t.forEach(t),Fdr=r(P$," (Funnel Transformer model)"),P$.forEach(t),Tdr=i(D),dT=n(D,"LI",{});var Uke=s(dT);m1e=n(Uke,"STRONG",{});var v2t=s(m1e);Mdr=r(v2t,"gpt2"),v2t.forEach(t),Edr=r(Uke," \u2014 "),sW=n(Uke,"A",{href:!0});var F2t=s(sW);Cdr=r(F2t,"TFGPT2Model"),F2t.forEach(t),wdr=r(Uke," (OpenAI GPT-2 model)"),Uke.forEach(t),Adr=i(D),cT=n(D,"LI",{});var Jke=s(cT);g1e=n(Jke,"STRONG",{});var T2t=s(g1e);ydr=r(T2t,"gptj"),T2t.forEach(t),Ldr=r(Jke," \u2014 "),lW=n(Jke,"A",{href:!0});var M2t=s(lW);xdr=r(M2t,"TFGPTJModel"),M2t.forEach(t),$dr=r(Jke," (GPT-J model)"),Jke.forEach(t),kdr=i(D),fT=n(D,"LI",{});var Yke=s(fT);h1e=n(Yke,"STRONG",{});var E2t=s(h1e);Sdr=r(E2t,"hubert"),E2t.forEach(t),Rdr=r(Yke," \u2014 "),iW=n(Yke,"A",{href:!0});var C2t=s(iW);Pdr=r(C2t,"TFHubertModel"),C2t.forEach(t),Bdr=r(Yke," (Hubert model)"),Yke.forEach(t),Idr=i(D),mT=n(D,"LI",{});var Kke=s(mT);p1e=n(Kke,"STRONG",{});var w2t=s(p1e);qdr=r(w2t,"layoutlm"),w2t.forEach(t),Ndr=r(Kke," \u2014 "),dW=n(Kke,"A",{href:!0});var A2t=s(dW);jdr=r(A2t,"TFLayoutLMModel"),A2t.forEach(t),Ddr=r(Kke," (LayoutLM model)"),Kke.forEach(t),Gdr=i(D),gT=n(D,"LI",{});var Zke=s(gT);_1e=n(Zke,"STRONG",{});var y2t=s(_1e);Odr=r(y2t,"led"),y2t.forEach(t),Vdr=r(Zke," \u2014 "),cW=n(Zke,"A",{href:!0});var L2t=s(cW);Xdr=r(L2t,"TFLEDModel"),L2t.forEach(t),zdr=r(Zke," (LED model)"),Zke.forEach(t),Wdr=i(D),hT=n(D,"LI",{});var eSe=s(hT);u1e=n(eSe,"STRONG",{});var x2t=s(u1e);Qdr=r(x2t,"longformer"),x2t.forEach(t),Hdr=r(eSe," \u2014 "),fW=n(eSe,"A",{href:!0});var $2t=s(fW);Udr=r($2t,"TFLongformerModel"),$2t.forEach(t),Jdr=r(eSe," (Longformer model)"),eSe.forEach(t),Ydr=i(D),pT=n(D,"LI",{});var oSe=s(pT);b1e=n(oSe,"STRONG",{});var k2t=s(b1e);Kdr=r(k2t,"lxmert"),k2t.forEach(t),Zdr=r(oSe," \u2014 "),mW=n(oSe,"A",{href:!0});var S2t=s(mW);ecr=r(S2t,"TFLxmertModel"),S2t.forEach(t),ocr=r(oSe," (LXMERT model)"),oSe.forEach(t),rcr=i(D),_T=n(D,"LI",{});var rSe=s(_T);v1e=n(rSe,"STRONG",{});var R2t=s(v1e);tcr=r(R2t,"marian"),R2t.forEach(t),acr=r(rSe," \u2014 "),gW=n(rSe,"A",{href:!0});var P2t=s(gW);ncr=r(P2t,"TFMarianModel"),P2t.forEach(t),scr=r(rSe," (Marian model)"),rSe.forEach(t),lcr=i(D),uT=n(D,"LI",{});var tSe=s(uT);F1e=n(tSe,"STRONG",{});var B2t=s(F1e);icr=r(B2t,"mbart"),B2t.forEach(t),dcr=r(tSe," \u2014 "),hW=n(tSe,"A",{href:!0});var I2t=s(hW);ccr=r(I2t,"TFMBartModel"),I2t.forEach(t),fcr=r(tSe," (mBART model)"),tSe.forEach(t),mcr=i(D),bT=n(D,"LI",{});var aSe=s(bT);T1e=n(aSe,"STRONG",{});var q2t=s(T1e);gcr=r(q2t,"mobilebert"),q2t.forEach(t),hcr=r(aSe," \u2014 "),pW=n(aSe,"A",{href:!0});var N2t=s(pW);pcr=r(N2t,"TFMobileBertModel"),N2t.forEach(t),_cr=r(aSe," (MobileBERT model)"),aSe.forEach(t),ucr=i(D),vT=n(D,"LI",{});var nSe=s(vT);M1e=n(nSe,"STRONG",{});var j2t=s(M1e);bcr=r(j2t,"mpnet"),j2t.forEach(t),vcr=r(nSe," \u2014 "),_W=n(nSe,"A",{href:!0});var D2t=s(_W);Fcr=r(D2t,"TFMPNetModel"),D2t.forEach(t),Tcr=r(nSe," (MPNet model)"),nSe.forEach(t),Mcr=i(D),FT=n(D,"LI",{});var sSe=s(FT);E1e=n(sSe,"STRONG",{});var G2t=s(E1e);Ecr=r(G2t,"mt5"),G2t.forEach(t),Ccr=r(sSe," \u2014 "),uW=n(sSe,"A",{href:!0});var O2t=s(uW);wcr=r(O2t,"TFMT5Model"),O2t.forEach(t),Acr=r(sSe," (mT5 model)"),sSe.forEach(t),ycr=i(D),TT=n(D,"LI",{});var lSe=s(TT);C1e=n(lSe,"STRONG",{});var V2t=s(C1e);Lcr=r(V2t,"openai-gpt"),V2t.forEach(t),xcr=r(lSe," \u2014 "),bW=n(lSe,"A",{href:!0});var X2t=s(bW);$cr=r(X2t,"TFOpenAIGPTModel"),X2t.forEach(t),kcr=r(lSe," (OpenAI GPT model)"),lSe.forEach(t),Scr=i(D),MT=n(D,"LI",{});var iSe=s(MT);w1e=n(iSe,"STRONG",{});var z2t=s(w1e);Rcr=r(z2t,"pegasus"),z2t.forEach(t),Pcr=r(iSe," \u2014 "),vW=n(iSe,"A",{href:!0});var W2t=s(vW);Bcr=r(W2t,"TFPegasusModel"),W2t.forEach(t),Icr=r(iSe," (Pegasus model)"),iSe.forEach(t),qcr=i(D),ET=n(D,"LI",{});var dSe=s(ET);A1e=n(dSe,"STRONG",{});var Q2t=s(A1e);Ncr=r(Q2t,"rembert"),Q2t.forEach(t),jcr=r(dSe," \u2014 "),FW=n(dSe,"A",{href:!0});var H2t=s(FW);Dcr=r(H2t,"TFRemBertModel"),H2t.forEach(t),Gcr=r(dSe," (RemBERT model)"),dSe.forEach(t),Ocr=i(D),CT=n(D,"LI",{});var cSe=s(CT);y1e=n(cSe,"STRONG",{});var U2t=s(y1e);Vcr=r(U2t,"roberta"),U2t.forEach(t),Xcr=r(cSe," \u2014 "),TW=n(cSe,"A",{href:!0});var J2t=s(TW);zcr=r(J2t,"TFRobertaModel"),J2t.forEach(t),Wcr=r(cSe," (RoBERTa model)"),cSe.forEach(t),Qcr=i(D),wT=n(D,"LI",{});var fSe=s(wT);L1e=n(fSe,"STRONG",{});var Y2t=s(L1e);Hcr=r(Y2t,"roformer"),Y2t.forEach(t),Ucr=r(fSe," \u2014 "),MW=n(fSe,"A",{href:!0});var K2t=s(MW);Jcr=r(K2t,"TFRoFormerModel"),K2t.forEach(t),Ycr=r(fSe," (RoFormer model)"),fSe.forEach(t),Kcr=i(D),AT=n(D,"LI",{});var mSe=s(AT);x1e=n(mSe,"STRONG",{});var Z2t=s(x1e);Zcr=r(Z2t,"speech_to_text"),Z2t.forEach(t),efr=r(mSe," \u2014 "),EW=n(mSe,"A",{href:!0});var e5t=s(EW);ofr=r(e5t,"TFSpeech2TextModel"),e5t.forEach(t),rfr=r(mSe," (Speech2Text model)"),mSe.forEach(t),tfr=i(D),yT=n(D,"LI",{});var gSe=s(yT);$1e=n(gSe,"STRONG",{});var o5t=s($1e);afr=r(o5t,"swin"),o5t.forEach(t),nfr=r(gSe," \u2014 "),CW=n(gSe,"A",{href:!0});var r5t=s(CW);sfr=r(r5t,"TFSwinModel"),r5t.forEach(t),lfr=r(gSe," (Swin model)"),gSe.forEach(t),ifr=i(D),LT=n(D,"LI",{});var hSe=s(LT);k1e=n(hSe,"STRONG",{});var t5t=s(k1e);dfr=r(t5t,"t5"),t5t.forEach(t),cfr=r(hSe," \u2014 "),wW=n(hSe,"A",{href:!0});var a5t=s(wW);ffr=r(a5t,"TFT5Model"),a5t.forEach(t),mfr=r(hSe," (T5 model)"),hSe.forEach(t),gfr=i(D),xT=n(D,"LI",{});var pSe=s(xT);S1e=n(pSe,"STRONG",{});var n5t=s(S1e);hfr=r(n5t,"tapas"),n5t.forEach(t),pfr=r(pSe," \u2014 "),AW=n(pSe,"A",{href:!0});var s5t=s(AW);_fr=r(s5t,"TFTapasModel"),s5t.forEach(t),ufr=r(pSe," (TAPAS model)"),pSe.forEach(t),bfr=i(D),$T=n(D,"LI",{});var _Se=s($T);R1e=n(_Se,"STRONG",{});var l5t=s(R1e);vfr=r(l5t,"transfo-xl"),l5t.forEach(t),Ffr=r(_Se," \u2014 "),yW=n(_Se,"A",{href:!0});var i5t=s(yW);Tfr=r(i5t,"TFTransfoXLModel"),i5t.forEach(t),Mfr=r(_Se," (Transformer-XL model)"),_Se.forEach(t),Efr=i(D),kT=n(D,"LI",{});var uSe=s(kT);P1e=n(uSe,"STRONG",{});var d5t=s(P1e);Cfr=r(d5t,"vit"),d5t.forEach(t),wfr=r(uSe," \u2014 "),LW=n(uSe,"A",{href:!0});var c5t=s(LW);Afr=r(c5t,"TFViTModel"),c5t.forEach(t),yfr=r(uSe," (ViT model)"),uSe.forEach(t),Lfr=i(D),ST=n(D,"LI",{});var bSe=s(ST);B1e=n(bSe,"STRONG",{});var f5t=s(B1e);xfr=r(f5t,"vit_mae"),f5t.forEach(t),$fr=r(bSe," \u2014 "),xW=n(bSe,"A",{href:!0});var m5t=s(xW);kfr=r(m5t,"TFViTMAEModel"),m5t.forEach(t),Sfr=r(bSe," (ViTMAE model)"),bSe.forEach(t),Rfr=i(D),RT=n(D,"LI",{});var vSe=s(RT);I1e=n(vSe,"STRONG",{});var g5t=s(I1e);Pfr=r(g5t,"wav2vec2"),g5t.forEach(t),Bfr=r(vSe," \u2014 "),$W=n(vSe,"A",{href:!0});var h5t=s($W);Ifr=r(h5t,"TFWav2Vec2Model"),h5t.forEach(t),qfr=r(vSe," (Wav2Vec2 model)"),vSe.forEach(t),Nfr=i(D),PT=n(D,"LI",{});var FSe=s(PT);q1e=n(FSe,"STRONG",{});var p5t=s(q1e);jfr=r(p5t,"xlm"),p5t.forEach(t),Dfr=r(FSe," \u2014 "),kW=n(FSe,"A",{href:!0});var _5t=s(kW);Gfr=r(_5t,"TFXLMModel"),_5t.forEach(t),Ofr=r(FSe," (XLM model)"),FSe.forEach(t),Vfr=i(D),BT=n(D,"LI",{});var TSe=s(BT);N1e=n(TSe,"STRONG",{});var u5t=s(N1e);Xfr=r(u5t,"xlm-roberta"),u5t.forEach(t),zfr=r(TSe," \u2014 "),SW=n(TSe,"A",{href:!0});var b5t=s(SW);Wfr=r(b5t,"TFXLMRobertaModel"),b5t.forEach(t),Qfr=r(TSe," (XLM-RoBERTa model)"),TSe.forEach(t),Hfr=i(D),IT=n(D,"LI",{});var MSe=s(IT);j1e=n(MSe,"STRONG",{});var v5t=s(j1e);Ufr=r(v5t,"xlnet"),v5t.forEach(t),Jfr=r(MSe," \u2014 "),RW=n(MSe,"A",{href:!0});var F5t=s(RW);Yfr=r(F5t,"TFXLNetModel"),F5t.forEach(t),Kfr=r(MSe," (XLNet model)"),MSe.forEach(t),D.forEach(t),Zfr=i(gl),T(qT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),MNe=i(f),Vd=n(f,"H2",{class:!0});var LDe=s(Vd);NT=n(LDe,"A",{id:!0,class:!0,href:!0});var T5t=s(NT);D1e=n(T5t,"SPAN",{});var M5t=s(D1e);T(aL.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),emr=i(LDe),G1e=n(LDe,"SPAN",{});var E5t=s(G1e);omr=r(E5t,"TFAutoModelForPreTraining"),E5t.forEach(t),LDe.forEach(t),ENe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(nL.$$.fragment,hl),rmr=i(hl),Xd=n(hl,"P",{});var VZ=s(Xd);tmr=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PW=n(VZ,"A",{href:!0});var C5t=s(PW);amr=r(C5t,"from_pretrained()"),C5t.forEach(t),nmr=r(VZ," class method or the "),BW=n(VZ,"A",{href:!0});var w5t=s(BW);smr=r(w5t,"from_config()"),w5t.forEach(t),lmr=r(VZ,` class
method.`),VZ.forEach(t),imr=i(hl),sL=n(hl,"P",{});var xDe=s(sL);dmr=r(xDe,"This class cannot be instantiated directly using "),O1e=n(xDe,"CODE",{});var A5t=s(O1e);cmr=r(A5t,"__init__()"),A5t.forEach(t),fmr=r(xDe," (throws an error)."),xDe.forEach(t),mmr=i(hl),Lt=n(hl,"DIV",{class:!0});var u0=s(Lt);T(lL.$$.fragment,u0),gmr=i(u0),V1e=n(u0,"P",{});var y5t=s(V1e);hmr=r(y5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y5t.forEach(t),pmr=i(u0),zd=n(u0,"P",{});var XZ=s(zd);_mr=r(XZ,`Note:
Loading a model from its configuration file does `),X1e=n(XZ,"STRONG",{});var L5t=s(X1e);umr=r(L5t,"not"),L5t.forEach(t),bmr=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(XZ,"A",{href:!0});var x5t=s(IW);vmr=r(x5t,"from_pretrained()"),x5t.forEach(t),Fmr=r(XZ," to load the model weights."),XZ.forEach(t),Tmr=i(u0),T(jT.$$.fragment,u0),u0.forEach(t),Mmr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(iL.$$.fragment,pl),Emr=i(pl),z1e=n(pl,"P",{});var $5t=s(z1e);Cmr=r($5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$5t.forEach(t),wmr=i(pl),Za=n(pl,"P",{});var b0=s(Za);Amr=r(b0,"The model class to instantiate is selected based on the "),W1e=n(b0,"CODE",{});var k5t=s(W1e);ymr=r(k5t,"model_type"),k5t.forEach(t),Lmr=r(b0,` property of the config object (either
passed as an argument or loaded from `),Q1e=n(b0,"CODE",{});var S5t=s(Q1e);xmr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),$mr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(b0,"CODE",{});var R5t=s(H1e);kmr=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),Smr=r(b0,":"),b0.forEach(t),Rmr=i(pl),se=n(pl,"UL",{});var le=s(se);DT=n(le,"LI",{});var ESe=s(DT);U1e=n(ESe,"STRONG",{});var P5t=s(U1e);Pmr=r(P5t,"albert"),P5t.forEach(t),Bmr=r(ESe," \u2014 "),qW=n(ESe,"A",{href:!0});var B5t=s(qW);Imr=r(B5t,"TFAlbertForPreTraining"),B5t.forEach(t),qmr=r(ESe," (ALBERT model)"),ESe.forEach(t),Nmr=i(le),GT=n(le,"LI",{});var CSe=s(GT);J1e=n(CSe,"STRONG",{});var I5t=s(J1e);jmr=r(I5t,"bart"),I5t.forEach(t),Dmr=r(CSe," \u2014 "),NW=n(CSe,"A",{href:!0});var q5t=s(NW);Gmr=r(q5t,"TFBartForConditionalGeneration"),q5t.forEach(t),Omr=r(CSe," (BART model)"),CSe.forEach(t),Vmr=i(le),OT=n(le,"LI",{});var wSe=s(OT);Y1e=n(wSe,"STRONG",{});var N5t=s(Y1e);Xmr=r(N5t,"bert"),N5t.forEach(t),zmr=r(wSe," \u2014 "),jW=n(wSe,"A",{href:!0});var j5t=s(jW);Wmr=r(j5t,"TFBertForPreTraining"),j5t.forEach(t),Qmr=r(wSe," (BERT model)"),wSe.forEach(t),Hmr=i(le),VT=n(le,"LI",{});var ASe=s(VT);K1e=n(ASe,"STRONG",{});var D5t=s(K1e);Umr=r(D5t,"camembert"),D5t.forEach(t),Jmr=r(ASe," \u2014 "),DW=n(ASe,"A",{href:!0});var G5t=s(DW);Ymr=r(G5t,"TFCamembertForMaskedLM"),G5t.forEach(t),Kmr=r(ASe," (CamemBERT model)"),ASe.forEach(t),Zmr=i(le),XT=n(le,"LI",{});var ySe=s(XT);Z1e=n(ySe,"STRONG",{});var O5t=s(Z1e);egr=r(O5t,"ctrl"),O5t.forEach(t),ogr=r(ySe," \u2014 "),GW=n(ySe,"A",{href:!0});var V5t=s(GW);rgr=r(V5t,"TFCTRLLMHeadModel"),V5t.forEach(t),tgr=r(ySe," (CTRL model)"),ySe.forEach(t),agr=i(le),zT=n(le,"LI",{});var LSe=s(zT);ebe=n(LSe,"STRONG",{});var X5t=s(ebe);ngr=r(X5t,"distilbert"),X5t.forEach(t),sgr=r(LSe," \u2014 "),OW=n(LSe,"A",{href:!0});var z5t=s(OW);lgr=r(z5t,"TFDistilBertForMaskedLM"),z5t.forEach(t),igr=r(LSe," (DistilBERT model)"),LSe.forEach(t),dgr=i(le),WT=n(le,"LI",{});var xSe=s(WT);obe=n(xSe,"STRONG",{});var W5t=s(obe);cgr=r(W5t,"electra"),W5t.forEach(t),fgr=r(xSe," \u2014 "),VW=n(xSe,"A",{href:!0});var Q5t=s(VW);mgr=r(Q5t,"TFElectraForPreTraining"),Q5t.forEach(t),ggr=r(xSe," (ELECTRA model)"),xSe.forEach(t),hgr=i(le),QT=n(le,"LI",{});var $Se=s(QT);rbe=n($Se,"STRONG",{});var H5t=s(rbe);pgr=r(H5t,"flaubert"),H5t.forEach(t),_gr=r($Se," \u2014 "),XW=n($Se,"A",{href:!0});var U5t=s(XW);ugr=r(U5t,"TFFlaubertWithLMHeadModel"),U5t.forEach(t),bgr=r($Se," (FlauBERT model)"),$Se.forEach(t),vgr=i(le),HT=n(le,"LI",{});var kSe=s(HT);tbe=n(kSe,"STRONG",{});var J5t=s(tbe);Fgr=r(J5t,"funnel"),J5t.forEach(t),Tgr=r(kSe," \u2014 "),zW=n(kSe,"A",{href:!0});var Y5t=s(zW);Mgr=r(Y5t,"TFFunnelForPreTraining"),Y5t.forEach(t),Egr=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),Cgr=i(le),UT=n(le,"LI",{});var SSe=s(UT);abe=n(SSe,"STRONG",{});var K5t=s(abe);wgr=r(K5t,"gpt2"),K5t.forEach(t),Agr=r(SSe," \u2014 "),WW=n(SSe,"A",{href:!0});var Z5t=s(WW);ygr=r(Z5t,"TFGPT2LMHeadModel"),Z5t.forEach(t),Lgr=r(SSe," (OpenAI GPT-2 model)"),SSe.forEach(t),xgr=i(le),JT=n(le,"LI",{});var RSe=s(JT);nbe=n(RSe,"STRONG",{});var evt=s(nbe);$gr=r(evt,"layoutlm"),evt.forEach(t),kgr=r(RSe," \u2014 "),QW=n(RSe,"A",{href:!0});var ovt=s(QW);Sgr=r(ovt,"TFLayoutLMForMaskedLM"),ovt.forEach(t),Rgr=r(RSe," (LayoutLM model)"),RSe.forEach(t),Pgr=i(le),YT=n(le,"LI",{});var PSe=s(YT);sbe=n(PSe,"STRONG",{});var rvt=s(sbe);Bgr=r(rvt,"lxmert"),rvt.forEach(t),Igr=r(PSe," \u2014 "),HW=n(PSe,"A",{href:!0});var tvt=s(HW);qgr=r(tvt,"TFLxmertForPreTraining"),tvt.forEach(t),Ngr=r(PSe," (LXMERT model)"),PSe.forEach(t),jgr=i(le),KT=n(le,"LI",{});var BSe=s(KT);lbe=n(BSe,"STRONG",{});var avt=s(lbe);Dgr=r(avt,"mobilebert"),avt.forEach(t),Ggr=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var nvt=s(UW);Ogr=r(nvt,"TFMobileBertForPreTraining"),nvt.forEach(t),Vgr=r(BSe," (MobileBERT model)"),BSe.forEach(t),Xgr=i(le),ZT=n(le,"LI",{});var ISe=s(ZT);ibe=n(ISe,"STRONG",{});var svt=s(ibe);zgr=r(svt,"mpnet"),svt.forEach(t),Wgr=r(ISe," \u2014 "),JW=n(ISe,"A",{href:!0});var lvt=s(JW);Qgr=r(lvt,"TFMPNetForMaskedLM"),lvt.forEach(t),Hgr=r(ISe," (MPNet model)"),ISe.forEach(t),Ugr=i(le),e9=n(le,"LI",{});var qSe=s(e9);dbe=n(qSe,"STRONG",{});var ivt=s(dbe);Jgr=r(ivt,"openai-gpt"),ivt.forEach(t),Ygr=r(qSe," \u2014 "),YW=n(qSe,"A",{href:!0});var dvt=s(YW);Kgr=r(dvt,"TFOpenAIGPTLMHeadModel"),dvt.forEach(t),Zgr=r(qSe," (OpenAI GPT model)"),qSe.forEach(t),ehr=i(le),o9=n(le,"LI",{});var NSe=s(o9);cbe=n(NSe,"STRONG",{});var cvt=s(cbe);ohr=r(cvt,"roberta"),cvt.forEach(t),rhr=r(NSe," \u2014 "),KW=n(NSe,"A",{href:!0});var fvt=s(KW);thr=r(fvt,"TFRobertaForMaskedLM"),fvt.forEach(t),ahr=r(NSe," (RoBERTa model)"),NSe.forEach(t),nhr=i(le),r9=n(le,"LI",{});var jSe=s(r9);fbe=n(jSe,"STRONG",{});var mvt=s(fbe);shr=r(mvt,"t5"),mvt.forEach(t),lhr=r(jSe," \u2014 "),ZW=n(jSe,"A",{href:!0});var gvt=s(ZW);ihr=r(gvt,"TFT5ForConditionalGeneration"),gvt.forEach(t),dhr=r(jSe," (T5 model)"),jSe.forEach(t),chr=i(le),t9=n(le,"LI",{});var DSe=s(t9);mbe=n(DSe,"STRONG",{});var hvt=s(mbe);fhr=r(hvt,"tapas"),hvt.forEach(t),mhr=r(DSe," \u2014 "),eQ=n(DSe,"A",{href:!0});var pvt=s(eQ);ghr=r(pvt,"TFTapasForMaskedLM"),pvt.forEach(t),hhr=r(DSe," (TAPAS model)"),DSe.forEach(t),phr=i(le),a9=n(le,"LI",{});var GSe=s(a9);gbe=n(GSe,"STRONG",{});var _vt=s(gbe);_hr=r(_vt,"transfo-xl"),_vt.forEach(t),uhr=r(GSe," \u2014 "),oQ=n(GSe,"A",{href:!0});var uvt=s(oQ);bhr=r(uvt,"TFTransfoXLLMHeadModel"),uvt.forEach(t),vhr=r(GSe," (Transformer-XL model)"),GSe.forEach(t),Fhr=i(le),n9=n(le,"LI",{});var OSe=s(n9);hbe=n(OSe,"STRONG",{});var bvt=s(hbe);Thr=r(bvt,"vit_mae"),bvt.forEach(t),Mhr=r(OSe," \u2014 "),rQ=n(OSe,"A",{href:!0});var vvt=s(rQ);Ehr=r(vvt,"TFViTMAEForPreTraining"),vvt.forEach(t),Chr=r(OSe," (ViTMAE model)"),OSe.forEach(t),whr=i(le),s9=n(le,"LI",{});var VSe=s(s9);pbe=n(VSe,"STRONG",{});var Fvt=s(pbe);Ahr=r(Fvt,"xlm"),Fvt.forEach(t),yhr=r(VSe," \u2014 "),tQ=n(VSe,"A",{href:!0});var Tvt=s(tQ);Lhr=r(Tvt,"TFXLMWithLMHeadModel"),Tvt.forEach(t),xhr=r(VSe," (XLM model)"),VSe.forEach(t),$hr=i(le),l9=n(le,"LI",{});var XSe=s(l9);_be=n(XSe,"STRONG",{});var Mvt=s(_be);khr=r(Mvt,"xlm-roberta"),Mvt.forEach(t),Shr=r(XSe," \u2014 "),aQ=n(XSe,"A",{href:!0});var Evt=s(aQ);Rhr=r(Evt,"TFXLMRobertaForMaskedLM"),Evt.forEach(t),Phr=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),Bhr=i(le),i9=n(le,"LI",{});var zSe=s(i9);ube=n(zSe,"STRONG",{});var Cvt=s(ube);Ihr=r(Cvt,"xlnet"),Cvt.forEach(t),qhr=r(zSe," \u2014 "),nQ=n(zSe,"A",{href:!0});var wvt=s(nQ);Nhr=r(wvt,"TFXLNetLMHeadModel"),wvt.forEach(t),jhr=r(zSe," (XLNet model)"),zSe.forEach(t),le.forEach(t),Dhr=i(pl),T(d9.$$.fragment,pl),pl.forEach(t),hl.forEach(t),CNe=i(f),Wd=n(f,"H2",{class:!0});var $De=s(Wd);c9=n($De,"A",{id:!0,class:!0,href:!0});var Avt=s(c9);bbe=n(Avt,"SPAN",{});var yvt=s(bbe);T(dL.$$.fragment,yvt),yvt.forEach(t),Avt.forEach(t),Ghr=i($De),vbe=n($De,"SPAN",{});var Lvt=s(vbe);Ohr=r(Lvt,"TFAutoModelForCausalLM"),Lvt.forEach(t),$De.forEach(t),wNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(cL.$$.fragment,_l),Vhr=i(_l),Qd=n(_l,"P",{});var zZ=s(Qd);Xhr=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sQ=n(zZ,"A",{href:!0});var xvt=s(sQ);zhr=r(xvt,"from_pretrained()"),xvt.forEach(t),Whr=r(zZ," class method or the "),lQ=n(zZ,"A",{href:!0});var $vt=s(lQ);Qhr=r($vt,"from_config()"),$vt.forEach(t),Hhr=r(zZ,` class
method.`),zZ.forEach(t),Uhr=i(_l),fL=n(_l,"P",{});var kDe=s(fL);Jhr=r(kDe,"This class cannot be instantiated directly using "),Fbe=n(kDe,"CODE",{});var kvt=s(Fbe);Yhr=r(kvt,"__init__()"),kvt.forEach(t),Khr=r(kDe," (throws an error)."),kDe.forEach(t),Zhr=i(_l),xt=n(_l,"DIV",{class:!0});var v0=s(xt);T(mL.$$.fragment,v0),epr=i(v0),Tbe=n(v0,"P",{});var Svt=s(Tbe);opr=r(Svt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Svt.forEach(t),rpr=i(v0),Hd=n(v0,"P",{});var WZ=s(Hd);tpr=r(WZ,`Note:
Loading a model from its configuration file does `),Mbe=n(WZ,"STRONG",{});var Rvt=s(Mbe);apr=r(Rvt,"not"),Rvt.forEach(t),npr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(WZ,"A",{href:!0});var Pvt=s(iQ);spr=r(Pvt,"from_pretrained()"),Pvt.forEach(t),lpr=r(WZ," to load the model weights."),WZ.forEach(t),ipr=i(v0),T(f9.$$.fragment,v0),v0.forEach(t),dpr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(gL.$$.fragment,ul),cpr=i(ul),Ebe=n(ul,"P",{});var Bvt=s(Ebe);fpr=r(Bvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bvt.forEach(t),mpr=i(ul),en=n(ul,"P",{});var F0=s(en);gpr=r(F0,"The model class to instantiate is selected based on the "),Cbe=n(F0,"CODE",{});var Ivt=s(Cbe);hpr=r(Ivt,"model_type"),Ivt.forEach(t),ppr=r(F0,` property of the config object (either
passed as an argument or loaded from `),wbe=n(F0,"CODE",{});var qvt=s(wbe);_pr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),upr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(F0,"CODE",{});var Nvt=s(Abe);bpr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),vpr=r(F0,":"),F0.forEach(t),Fpr=i(ul),Me=n(ul,"UL",{});var Ce=s(Me);m9=n(Ce,"LI",{});var WSe=s(m9);ybe=n(WSe,"STRONG",{});var jvt=s(ybe);Tpr=r(jvt,"bert"),jvt.forEach(t),Mpr=r(WSe," \u2014 "),dQ=n(WSe,"A",{href:!0});var Dvt=s(dQ);Epr=r(Dvt,"TFBertLMHeadModel"),Dvt.forEach(t),Cpr=r(WSe," (BERT model)"),WSe.forEach(t),wpr=i(Ce),g9=n(Ce,"LI",{});var QSe=s(g9);Lbe=n(QSe,"STRONG",{});var Gvt=s(Lbe);Apr=r(Gvt,"camembert"),Gvt.forEach(t),ypr=r(QSe," \u2014 "),cQ=n(QSe,"A",{href:!0});var Ovt=s(cQ);Lpr=r(Ovt,"TFCamembertForCausalLM"),Ovt.forEach(t),xpr=r(QSe," (CamemBERT model)"),QSe.forEach(t),$pr=i(Ce),h9=n(Ce,"LI",{});var HSe=s(h9);xbe=n(HSe,"STRONG",{});var Vvt=s(xbe);kpr=r(Vvt,"ctrl"),Vvt.forEach(t),Spr=r(HSe," \u2014 "),fQ=n(HSe,"A",{href:!0});var Xvt=s(fQ);Rpr=r(Xvt,"TFCTRLLMHeadModel"),Xvt.forEach(t),Ppr=r(HSe," (CTRL model)"),HSe.forEach(t),Bpr=i(Ce),p9=n(Ce,"LI",{});var USe=s(p9);$be=n(USe,"STRONG",{});var zvt=s($be);Ipr=r(zvt,"gpt2"),zvt.forEach(t),qpr=r(USe," \u2014 "),mQ=n(USe,"A",{href:!0});var Wvt=s(mQ);Npr=r(Wvt,"TFGPT2LMHeadModel"),Wvt.forEach(t),jpr=r(USe," (OpenAI GPT-2 model)"),USe.forEach(t),Dpr=i(Ce),_9=n(Ce,"LI",{});var JSe=s(_9);kbe=n(JSe,"STRONG",{});var Qvt=s(kbe);Gpr=r(Qvt,"gptj"),Qvt.forEach(t),Opr=r(JSe," \u2014 "),gQ=n(JSe,"A",{href:!0});var Hvt=s(gQ);Vpr=r(Hvt,"TFGPTJForCausalLM"),Hvt.forEach(t),Xpr=r(JSe," (GPT-J model)"),JSe.forEach(t),zpr=i(Ce),u9=n(Ce,"LI",{});var YSe=s(u9);Sbe=n(YSe,"STRONG",{});var Uvt=s(Sbe);Wpr=r(Uvt,"openai-gpt"),Uvt.forEach(t),Qpr=r(YSe," \u2014 "),hQ=n(YSe,"A",{href:!0});var Jvt=s(hQ);Hpr=r(Jvt,"TFOpenAIGPTLMHeadModel"),Jvt.forEach(t),Upr=r(YSe," (OpenAI GPT model)"),YSe.forEach(t),Jpr=i(Ce),b9=n(Ce,"LI",{});var KSe=s(b9);Rbe=n(KSe,"STRONG",{});var Yvt=s(Rbe);Ypr=r(Yvt,"rembert"),Yvt.forEach(t),Kpr=r(KSe," \u2014 "),pQ=n(KSe,"A",{href:!0});var Kvt=s(pQ);Zpr=r(Kvt,"TFRemBertForCausalLM"),Kvt.forEach(t),e_r=r(KSe," (RemBERT model)"),KSe.forEach(t),o_r=i(Ce),v9=n(Ce,"LI",{});var ZSe=s(v9);Pbe=n(ZSe,"STRONG",{});var Zvt=s(Pbe);r_r=r(Zvt,"roberta"),Zvt.forEach(t),t_r=r(ZSe," \u2014 "),_Q=n(ZSe,"A",{href:!0});var eFt=s(_Q);a_r=r(eFt,"TFRobertaForCausalLM"),eFt.forEach(t),n_r=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),s_r=i(Ce),F9=n(Ce,"LI",{});var eRe=s(F9);Bbe=n(eRe,"STRONG",{});var oFt=s(Bbe);l_r=r(oFt,"roformer"),oFt.forEach(t),i_r=r(eRe," \u2014 "),uQ=n(eRe,"A",{href:!0});var rFt=s(uQ);d_r=r(rFt,"TFRoFormerForCausalLM"),rFt.forEach(t),c_r=r(eRe," (RoFormer model)"),eRe.forEach(t),f_r=i(Ce),T9=n(Ce,"LI",{});var oRe=s(T9);Ibe=n(oRe,"STRONG",{});var tFt=s(Ibe);m_r=r(tFt,"transfo-xl"),tFt.forEach(t),g_r=r(oRe," \u2014 "),bQ=n(oRe,"A",{href:!0});var aFt=s(bQ);h_r=r(aFt,"TFTransfoXLLMHeadModel"),aFt.forEach(t),p_r=r(oRe," (Transformer-XL model)"),oRe.forEach(t),__r=i(Ce),M9=n(Ce,"LI",{});var rRe=s(M9);qbe=n(rRe,"STRONG",{});var nFt=s(qbe);u_r=r(nFt,"xlm"),nFt.forEach(t),b_r=r(rRe," \u2014 "),vQ=n(rRe,"A",{href:!0});var sFt=s(vQ);v_r=r(sFt,"TFXLMWithLMHeadModel"),sFt.forEach(t),F_r=r(rRe," (XLM model)"),rRe.forEach(t),T_r=i(Ce),E9=n(Ce,"LI",{});var tRe=s(E9);Nbe=n(tRe,"STRONG",{});var lFt=s(Nbe);M_r=r(lFt,"xlnet"),lFt.forEach(t),E_r=r(tRe," \u2014 "),FQ=n(tRe,"A",{href:!0});var iFt=s(FQ);C_r=r(iFt,"TFXLNetLMHeadModel"),iFt.forEach(t),w_r=r(tRe," (XLNet model)"),tRe.forEach(t),Ce.forEach(t),A_r=i(ul),T(C9.$$.fragment,ul),ul.forEach(t),_l.forEach(t),ANe=i(f),Ud=n(f,"H2",{class:!0});var SDe=s(Ud);w9=n(SDe,"A",{id:!0,class:!0,href:!0});var dFt=s(w9);jbe=n(dFt,"SPAN",{});var cFt=s(jbe);T(hL.$$.fragment,cFt),cFt.forEach(t),dFt.forEach(t),y_r=i(SDe),Dbe=n(SDe,"SPAN",{});var fFt=s(Dbe);L_r=r(fFt,"TFAutoModelForImageClassification"),fFt.forEach(t),SDe.forEach(t),yNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(pL.$$.fragment,bl),x_r=i(bl),Jd=n(bl,"P",{});var QZ=s(Jd);$_r=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TQ=n(QZ,"A",{href:!0});var mFt=s(TQ);k_r=r(mFt,"from_pretrained()"),mFt.forEach(t),S_r=r(QZ," class method or the "),MQ=n(QZ,"A",{href:!0});var gFt=s(MQ);R_r=r(gFt,"from_config()"),gFt.forEach(t),P_r=r(QZ,` class
method.`),QZ.forEach(t),B_r=i(bl),_L=n(bl,"P",{});var RDe=s(_L);I_r=r(RDe,"This class cannot be instantiated directly using "),Gbe=n(RDe,"CODE",{});var hFt=s(Gbe);q_r=r(hFt,"__init__()"),hFt.forEach(t),N_r=r(RDe," (throws an error)."),RDe.forEach(t),j_r=i(bl),$t=n(bl,"DIV",{class:!0});var T0=s($t);T(uL.$$.fragment,T0),D_r=i(T0),Obe=n(T0,"P",{});var pFt=s(Obe);G_r=r(pFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pFt.forEach(t),O_r=i(T0),Yd=n(T0,"P",{});var HZ=s(Yd);V_r=r(HZ,`Note:
Loading a model from its configuration file does `),Vbe=n(HZ,"STRONG",{});var _Ft=s(Vbe);X_r=r(_Ft,"not"),_Ft.forEach(t),z_r=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(HZ,"A",{href:!0});var uFt=s(EQ);W_r=r(uFt,"from_pretrained()"),uFt.forEach(t),Q_r=r(HZ," to load the model weights."),HZ.forEach(t),H_r=i(T0),T(A9.$$.fragment,T0),T0.forEach(t),U_r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(bL.$$.fragment,vl),J_r=i(vl),Xbe=n(vl,"P",{});var bFt=s(Xbe);Y_r=r(bFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bFt.forEach(t),K_r=i(vl),on=n(vl,"P",{});var M0=s(on);Z_r=r(M0,"The model class to instantiate is selected based on the "),zbe=n(M0,"CODE",{});var vFt=s(zbe);eur=r(vFt,"model_type"),vFt.forEach(t),our=r(M0,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(M0,"CODE",{});var FFt=s(Wbe);rur=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),tur=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(M0,"CODE",{});var TFt=s(Qbe);aur=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),nur=r(M0,":"),M0.forEach(t),sur=i(vl),rn=n(vl,"UL",{});var E0=s(rn);y9=n(E0,"LI",{});var aRe=s(y9);Hbe=n(aRe,"STRONG",{});var MFt=s(Hbe);lur=r(MFt,"convnext"),MFt.forEach(t),iur=r(aRe," \u2014 "),CQ=n(aRe,"A",{href:!0});var EFt=s(CQ);dur=r(EFt,"TFConvNextForImageClassification"),EFt.forEach(t),cur=r(aRe," (ConvNext model)"),aRe.forEach(t),fur=i(E0),L9=n(E0,"LI",{});var nRe=s(L9);Ube=n(nRe,"STRONG",{});var CFt=s(Ube);mur=r(CFt,"data2vec-vision"),CFt.forEach(t),gur=r(nRe," \u2014 "),wQ=n(nRe,"A",{href:!0});var wFt=s(wQ);hur=r(wFt,"TFData2VecVisionForImageClassification"),wFt.forEach(t),pur=r(nRe," (Data2VecVision model)"),nRe.forEach(t),_ur=i(E0),x9=n(E0,"LI",{});var sRe=s(x9);Jbe=n(sRe,"STRONG",{});var AFt=s(Jbe);uur=r(AFt,"swin"),AFt.forEach(t),bur=r(sRe," \u2014 "),AQ=n(sRe,"A",{href:!0});var yFt=s(AQ);vur=r(yFt,"TFSwinForImageClassification"),yFt.forEach(t),Fur=r(sRe," (Swin model)"),sRe.forEach(t),Tur=i(E0),$9=n(E0,"LI",{});var lRe=s($9);Ybe=n(lRe,"STRONG",{});var LFt=s(Ybe);Mur=r(LFt,"vit"),LFt.forEach(t),Eur=r(lRe," \u2014 "),yQ=n(lRe,"A",{href:!0});var xFt=s(yQ);Cur=r(xFt,"TFViTForImageClassification"),xFt.forEach(t),wur=r(lRe," (ViT model)"),lRe.forEach(t),E0.forEach(t),Aur=i(vl),T(k9.$$.fragment,vl),vl.forEach(t),bl.forEach(t),LNe=i(f),Kd=n(f,"H2",{class:!0});var PDe=s(Kd);S9=n(PDe,"A",{id:!0,class:!0,href:!0});var $Ft=s(S9);Kbe=n($Ft,"SPAN",{});var kFt=s(Kbe);T(vL.$$.fragment,kFt),kFt.forEach(t),$Ft.forEach(t),yur=i(PDe),Zbe=n(PDe,"SPAN",{});var SFt=s(Zbe);Lur=r(SFt,"TFAutoModelForMaskedLM"),SFt.forEach(t),PDe.forEach(t),xNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(FL.$$.fragment,Fl),xur=i(Fl),Zd=n(Fl,"P",{});var UZ=s(Zd);$ur=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LQ=n(UZ,"A",{href:!0});var RFt=s(LQ);kur=r(RFt,"from_pretrained()"),RFt.forEach(t),Sur=r(UZ," class method or the "),xQ=n(UZ,"A",{href:!0});var PFt=s(xQ);Rur=r(PFt,"from_config()"),PFt.forEach(t),Pur=r(UZ,` class
method.`),UZ.forEach(t),Bur=i(Fl),TL=n(Fl,"P",{});var BDe=s(TL);Iur=r(BDe,"This class cannot be instantiated directly using "),e2e=n(BDe,"CODE",{});var BFt=s(e2e);qur=r(BFt,"__init__()"),BFt.forEach(t),Nur=r(BDe," (throws an error)."),BDe.forEach(t),jur=i(Fl),kt=n(Fl,"DIV",{class:!0});var C0=s(kt);T(ML.$$.fragment,C0),Dur=i(C0),o2e=n(C0,"P",{});var IFt=s(o2e);Gur=r(IFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),IFt.forEach(t),Our=i(C0),ec=n(C0,"P",{});var JZ=s(ec);Vur=r(JZ,`Note:
Loading a model from its configuration file does `),r2e=n(JZ,"STRONG",{});var qFt=s(r2e);Xur=r(qFt,"not"),qFt.forEach(t),zur=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(JZ,"A",{href:!0});var NFt=s($Q);Wur=r(NFt,"from_pretrained()"),NFt.forEach(t),Qur=r(JZ," to load the model weights."),JZ.forEach(t),Hur=i(C0),T(R9.$$.fragment,C0),C0.forEach(t),Uur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(EL.$$.fragment,Tl),Jur=i(Tl),t2e=n(Tl,"P",{});var jFt=s(t2e);Yur=r(jFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jFt.forEach(t),Kur=i(Tl),tn=n(Tl,"P",{});var w0=s(tn);Zur=r(w0,"The model class to instantiate is selected based on the "),a2e=n(w0,"CODE",{});var DFt=s(a2e);e6r=r(DFt,"model_type"),DFt.forEach(t),o6r=r(w0,` property of the config object (either
passed as an argument or loaded from `),n2e=n(w0,"CODE",{});var GFt=s(n2e);r6r=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),t6r=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(w0,"CODE",{});var OFt=s(s2e);a6r=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),n6r=r(w0,":"),w0.forEach(t),s6r=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);P9=n(fe,"LI",{});var iRe=s(P9);l2e=n(iRe,"STRONG",{});var VFt=s(l2e);l6r=r(VFt,"albert"),VFt.forEach(t),i6r=r(iRe," \u2014 "),kQ=n(iRe,"A",{href:!0});var XFt=s(kQ);d6r=r(XFt,"TFAlbertForMaskedLM"),XFt.forEach(t),c6r=r(iRe," (ALBERT model)"),iRe.forEach(t),f6r=i(fe),B9=n(fe,"LI",{});var dRe=s(B9);i2e=n(dRe,"STRONG",{});var zFt=s(i2e);m6r=r(zFt,"bert"),zFt.forEach(t),g6r=r(dRe," \u2014 "),SQ=n(dRe,"A",{href:!0});var WFt=s(SQ);h6r=r(WFt,"TFBertForMaskedLM"),WFt.forEach(t),p6r=r(dRe," (BERT model)"),dRe.forEach(t),_6r=i(fe),I9=n(fe,"LI",{});var cRe=s(I9);d2e=n(cRe,"STRONG",{});var QFt=s(d2e);u6r=r(QFt,"camembert"),QFt.forEach(t),b6r=r(cRe," \u2014 "),RQ=n(cRe,"A",{href:!0});var HFt=s(RQ);v6r=r(HFt,"TFCamembertForMaskedLM"),HFt.forEach(t),F6r=r(cRe," (CamemBERT model)"),cRe.forEach(t),T6r=i(fe),q9=n(fe,"LI",{});var fRe=s(q9);c2e=n(fRe,"STRONG",{});var UFt=s(c2e);M6r=r(UFt,"convbert"),UFt.forEach(t),E6r=r(fRe," \u2014 "),PQ=n(fRe,"A",{href:!0});var JFt=s(PQ);C6r=r(JFt,"TFConvBertForMaskedLM"),JFt.forEach(t),w6r=r(fRe," (ConvBERT model)"),fRe.forEach(t),A6r=i(fe),N9=n(fe,"LI",{});var mRe=s(N9);f2e=n(mRe,"STRONG",{});var YFt=s(f2e);y6r=r(YFt,"deberta"),YFt.forEach(t),L6r=r(mRe," \u2014 "),BQ=n(mRe,"A",{href:!0});var KFt=s(BQ);x6r=r(KFt,"TFDebertaForMaskedLM"),KFt.forEach(t),$6r=r(mRe," (DeBERTa model)"),mRe.forEach(t),k6r=i(fe),j9=n(fe,"LI",{});var gRe=s(j9);m2e=n(gRe,"STRONG",{});var ZFt=s(m2e);S6r=r(ZFt,"deberta-v2"),ZFt.forEach(t),R6r=r(gRe," \u2014 "),IQ=n(gRe,"A",{href:!0});var eTt=s(IQ);P6r=r(eTt,"TFDebertaV2ForMaskedLM"),eTt.forEach(t),B6r=r(gRe," (DeBERTa-v2 model)"),gRe.forEach(t),I6r=i(fe),D9=n(fe,"LI",{});var hRe=s(D9);g2e=n(hRe,"STRONG",{});var oTt=s(g2e);q6r=r(oTt,"distilbert"),oTt.forEach(t),N6r=r(hRe," \u2014 "),qQ=n(hRe,"A",{href:!0});var rTt=s(qQ);j6r=r(rTt,"TFDistilBertForMaskedLM"),rTt.forEach(t),D6r=r(hRe," (DistilBERT model)"),hRe.forEach(t),G6r=i(fe),G9=n(fe,"LI",{});var pRe=s(G9);h2e=n(pRe,"STRONG",{});var tTt=s(h2e);O6r=r(tTt,"electra"),tTt.forEach(t),V6r=r(pRe," \u2014 "),NQ=n(pRe,"A",{href:!0});var aTt=s(NQ);X6r=r(aTt,"TFElectraForMaskedLM"),aTt.forEach(t),z6r=r(pRe," (ELECTRA model)"),pRe.forEach(t),W6r=i(fe),O9=n(fe,"LI",{});var _Re=s(O9);p2e=n(_Re,"STRONG",{});var nTt=s(p2e);Q6r=r(nTt,"flaubert"),nTt.forEach(t),H6r=r(_Re," \u2014 "),jQ=n(_Re,"A",{href:!0});var sTt=s(jQ);U6r=r(sTt,"TFFlaubertWithLMHeadModel"),sTt.forEach(t),J6r=r(_Re," (FlauBERT model)"),_Re.forEach(t),Y6r=i(fe),V9=n(fe,"LI",{});var uRe=s(V9);_2e=n(uRe,"STRONG",{});var lTt=s(_2e);K6r=r(lTt,"funnel"),lTt.forEach(t),Z6r=r(uRe," \u2014 "),DQ=n(uRe,"A",{href:!0});var iTt=s(DQ);e1r=r(iTt,"TFFunnelForMaskedLM"),iTt.forEach(t),o1r=r(uRe," (Funnel Transformer model)"),uRe.forEach(t),r1r=i(fe),X9=n(fe,"LI",{});var bRe=s(X9);u2e=n(bRe,"STRONG",{});var dTt=s(u2e);t1r=r(dTt,"layoutlm"),dTt.forEach(t),a1r=r(bRe," \u2014 "),GQ=n(bRe,"A",{href:!0});var cTt=s(GQ);n1r=r(cTt,"TFLayoutLMForMaskedLM"),cTt.forEach(t),s1r=r(bRe," (LayoutLM model)"),bRe.forEach(t),l1r=i(fe),z9=n(fe,"LI",{});var vRe=s(z9);b2e=n(vRe,"STRONG",{});var fTt=s(b2e);i1r=r(fTt,"longformer"),fTt.forEach(t),d1r=r(vRe," \u2014 "),OQ=n(vRe,"A",{href:!0});var mTt=s(OQ);c1r=r(mTt,"TFLongformerForMaskedLM"),mTt.forEach(t),f1r=r(vRe," (Longformer model)"),vRe.forEach(t),m1r=i(fe),W9=n(fe,"LI",{});var FRe=s(W9);v2e=n(FRe,"STRONG",{});var gTt=s(v2e);g1r=r(gTt,"mobilebert"),gTt.forEach(t),h1r=r(FRe," \u2014 "),VQ=n(FRe,"A",{href:!0});var hTt=s(VQ);p1r=r(hTt,"TFMobileBertForMaskedLM"),hTt.forEach(t),_1r=r(FRe," (MobileBERT model)"),FRe.forEach(t),u1r=i(fe),Q9=n(fe,"LI",{});var TRe=s(Q9);F2e=n(TRe,"STRONG",{});var pTt=s(F2e);b1r=r(pTt,"mpnet"),pTt.forEach(t),v1r=r(TRe," \u2014 "),XQ=n(TRe,"A",{href:!0});var _Tt=s(XQ);F1r=r(_Tt,"TFMPNetForMaskedLM"),_Tt.forEach(t),T1r=r(TRe," (MPNet model)"),TRe.forEach(t),M1r=i(fe),H9=n(fe,"LI",{});var MRe=s(H9);T2e=n(MRe,"STRONG",{});var uTt=s(T2e);E1r=r(uTt,"rembert"),uTt.forEach(t),C1r=r(MRe," \u2014 "),zQ=n(MRe,"A",{href:!0});var bTt=s(zQ);w1r=r(bTt,"TFRemBertForMaskedLM"),bTt.forEach(t),A1r=r(MRe," (RemBERT model)"),MRe.forEach(t),y1r=i(fe),U9=n(fe,"LI",{});var ERe=s(U9);M2e=n(ERe,"STRONG",{});var vTt=s(M2e);L1r=r(vTt,"roberta"),vTt.forEach(t),x1r=r(ERe," \u2014 "),WQ=n(ERe,"A",{href:!0});var FTt=s(WQ);$1r=r(FTt,"TFRobertaForMaskedLM"),FTt.forEach(t),k1r=r(ERe," (RoBERTa model)"),ERe.forEach(t),S1r=i(fe),J9=n(fe,"LI",{});var CRe=s(J9);E2e=n(CRe,"STRONG",{});var TTt=s(E2e);R1r=r(TTt,"roformer"),TTt.forEach(t),P1r=r(CRe," \u2014 "),QQ=n(CRe,"A",{href:!0});var MTt=s(QQ);B1r=r(MTt,"TFRoFormerForMaskedLM"),MTt.forEach(t),I1r=r(CRe," (RoFormer model)"),CRe.forEach(t),q1r=i(fe),Y9=n(fe,"LI",{});var wRe=s(Y9);C2e=n(wRe,"STRONG",{});var ETt=s(C2e);N1r=r(ETt,"tapas"),ETt.forEach(t),j1r=r(wRe," \u2014 "),HQ=n(wRe,"A",{href:!0});var CTt=s(HQ);D1r=r(CTt,"TFTapasForMaskedLM"),CTt.forEach(t),G1r=r(wRe," (TAPAS model)"),wRe.forEach(t),O1r=i(fe),K9=n(fe,"LI",{});var ARe=s(K9);w2e=n(ARe,"STRONG",{});var wTt=s(w2e);V1r=r(wTt,"xlm"),wTt.forEach(t),X1r=r(ARe," \u2014 "),UQ=n(ARe,"A",{href:!0});var ATt=s(UQ);z1r=r(ATt,"TFXLMWithLMHeadModel"),ATt.forEach(t),W1r=r(ARe," (XLM model)"),ARe.forEach(t),Q1r=i(fe),Z9=n(fe,"LI",{});var yRe=s(Z9);A2e=n(yRe,"STRONG",{});var yTt=s(A2e);H1r=r(yTt,"xlm-roberta"),yTt.forEach(t),U1r=r(yRe," \u2014 "),JQ=n(yRe,"A",{href:!0});var LTt=s(JQ);J1r=r(LTt,"TFXLMRobertaForMaskedLM"),LTt.forEach(t),Y1r=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),fe.forEach(t),K1r=i(Tl),T(eM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),$Ne=i(f),oc=n(f,"H2",{class:!0});var IDe=s(oc);oM=n(IDe,"A",{id:!0,class:!0,href:!0});var xTt=s(oM);y2e=n(xTt,"SPAN",{});var $Tt=s(y2e);T(CL.$$.fragment,$Tt),$Tt.forEach(t),xTt.forEach(t),Z1r=i(IDe),L2e=n(IDe,"SPAN",{});var kTt=s(L2e);ebr=r(kTt,"TFAutoModelForSeq2SeqLM"),kTt.forEach(t),IDe.forEach(t),kNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(wL.$$.fragment,Ml),obr=i(Ml),rc=n(Ml,"P",{});var YZ=s(rc);rbr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YQ=n(YZ,"A",{href:!0});var STt=s(YQ);tbr=r(STt,"from_pretrained()"),STt.forEach(t),abr=r(YZ," class method or the "),KQ=n(YZ,"A",{href:!0});var RTt=s(KQ);nbr=r(RTt,"from_config()"),RTt.forEach(t),sbr=r(YZ,` class
method.`),YZ.forEach(t),lbr=i(Ml),AL=n(Ml,"P",{});var qDe=s(AL);ibr=r(qDe,"This class cannot be instantiated directly using "),x2e=n(qDe,"CODE",{});var PTt=s(x2e);dbr=r(PTt,"__init__()"),PTt.forEach(t),cbr=r(qDe," (throws an error)."),qDe.forEach(t),fbr=i(Ml),St=n(Ml,"DIV",{class:!0});var A0=s(St);T(yL.$$.fragment,A0),mbr=i(A0),$2e=n(A0,"P",{});var BTt=s($2e);gbr=r(BTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BTt.forEach(t),hbr=i(A0),tc=n(A0,"P",{});var KZ=s(tc);pbr=r(KZ,`Note:
Loading a model from its configuration file does `),k2e=n(KZ,"STRONG",{});var ITt=s(k2e);_br=r(ITt,"not"),ITt.forEach(t),ubr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(KZ,"A",{href:!0});var qTt=s(ZQ);bbr=r(qTt,"from_pretrained()"),qTt.forEach(t),vbr=r(KZ," to load the model weights."),KZ.forEach(t),Fbr=i(A0),T(rM.$$.fragment,A0),A0.forEach(t),Tbr=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(LL.$$.fragment,El),Mbr=i(El),S2e=n(El,"P",{});var NTt=s(S2e);Ebr=r(NTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NTt.forEach(t),Cbr=i(El),an=n(El,"P",{});var y0=s(an);wbr=r(y0,"The model class to instantiate is selected based on the "),R2e=n(y0,"CODE",{});var jTt=s(R2e);Abr=r(jTt,"model_type"),jTt.forEach(t),ybr=r(y0,` property of the config object (either
passed as an argument or loaded from `),P2e=n(y0,"CODE",{});var DTt=s(P2e);Lbr=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),xbr=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(y0,"CODE",{});var GTt=s(B2e);$br=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),kbr=r(y0,":"),y0.forEach(t),Sbr=i(El),ye=n(El,"UL",{});var Be=s(ye);tM=n(Be,"LI",{});var LRe=s(tM);I2e=n(LRe,"STRONG",{});var OTt=s(I2e);Rbr=r(OTt,"bart"),OTt.forEach(t),Pbr=r(LRe," \u2014 "),eH=n(LRe,"A",{href:!0});var VTt=s(eH);Bbr=r(VTt,"TFBartForConditionalGeneration"),VTt.forEach(t),Ibr=r(LRe," (BART model)"),LRe.forEach(t),qbr=i(Be),aM=n(Be,"LI",{});var xRe=s(aM);q2e=n(xRe,"STRONG",{});var XTt=s(q2e);Nbr=r(XTt,"blenderbot"),XTt.forEach(t),jbr=r(xRe," \u2014 "),oH=n(xRe,"A",{href:!0});var zTt=s(oH);Dbr=r(zTt,"TFBlenderbotForConditionalGeneration"),zTt.forEach(t),Gbr=r(xRe," (Blenderbot model)"),xRe.forEach(t),Obr=i(Be),nM=n(Be,"LI",{});var $Re=s(nM);N2e=n($Re,"STRONG",{});var WTt=s(N2e);Vbr=r(WTt,"blenderbot-small"),WTt.forEach(t),Xbr=r($Re," \u2014 "),rH=n($Re,"A",{href:!0});var QTt=s(rH);zbr=r(QTt,"TFBlenderbotSmallForConditionalGeneration"),QTt.forEach(t),Wbr=r($Re," (BlenderbotSmall model)"),$Re.forEach(t),Qbr=i(Be),sM=n(Be,"LI",{});var kRe=s(sM);j2e=n(kRe,"STRONG",{});var HTt=s(j2e);Hbr=r(HTt,"encoder-decoder"),HTt.forEach(t),Ubr=r(kRe," \u2014 "),tH=n(kRe,"A",{href:!0});var UTt=s(tH);Jbr=r(UTt,"TFEncoderDecoderModel"),UTt.forEach(t),Ybr=r(kRe," (Encoder decoder model)"),kRe.forEach(t),Kbr=i(Be),lM=n(Be,"LI",{});var SRe=s(lM);D2e=n(SRe,"STRONG",{});var JTt=s(D2e);Zbr=r(JTt,"led"),JTt.forEach(t),e2r=r(SRe," \u2014 "),aH=n(SRe,"A",{href:!0});var YTt=s(aH);o2r=r(YTt,"TFLEDForConditionalGeneration"),YTt.forEach(t),r2r=r(SRe," (LED model)"),SRe.forEach(t),t2r=i(Be),iM=n(Be,"LI",{});var RRe=s(iM);G2e=n(RRe,"STRONG",{});var KTt=s(G2e);a2r=r(KTt,"marian"),KTt.forEach(t),n2r=r(RRe," \u2014 "),nH=n(RRe,"A",{href:!0});var ZTt=s(nH);s2r=r(ZTt,"TFMarianMTModel"),ZTt.forEach(t),l2r=r(RRe," (Marian model)"),RRe.forEach(t),i2r=i(Be),dM=n(Be,"LI",{});var PRe=s(dM);O2e=n(PRe,"STRONG",{});var e9t=s(O2e);d2r=r(e9t,"mbart"),e9t.forEach(t),c2r=r(PRe," \u2014 "),sH=n(PRe,"A",{href:!0});var o9t=s(sH);f2r=r(o9t,"TFMBartForConditionalGeneration"),o9t.forEach(t),m2r=r(PRe," (mBART model)"),PRe.forEach(t),g2r=i(Be),cM=n(Be,"LI",{});var BRe=s(cM);V2e=n(BRe,"STRONG",{});var r9t=s(V2e);h2r=r(r9t,"mt5"),r9t.forEach(t),p2r=r(BRe," \u2014 "),lH=n(BRe,"A",{href:!0});var t9t=s(lH);_2r=r(t9t,"TFMT5ForConditionalGeneration"),t9t.forEach(t),u2r=r(BRe," (mT5 model)"),BRe.forEach(t),b2r=i(Be),fM=n(Be,"LI",{});var IRe=s(fM);X2e=n(IRe,"STRONG",{});var a9t=s(X2e);v2r=r(a9t,"pegasus"),a9t.forEach(t),F2r=r(IRe," \u2014 "),iH=n(IRe,"A",{href:!0});var n9t=s(iH);T2r=r(n9t,"TFPegasusForConditionalGeneration"),n9t.forEach(t),M2r=r(IRe," (Pegasus model)"),IRe.forEach(t),E2r=i(Be),mM=n(Be,"LI",{});var qRe=s(mM);z2e=n(qRe,"STRONG",{});var s9t=s(z2e);C2r=r(s9t,"t5"),s9t.forEach(t),w2r=r(qRe," \u2014 "),dH=n(qRe,"A",{href:!0});var l9t=s(dH);A2r=r(l9t,"TFT5ForConditionalGeneration"),l9t.forEach(t),y2r=r(qRe," (T5 model)"),qRe.forEach(t),Be.forEach(t),L2r=i(El),T(gM.$$.fragment,El),El.forEach(t),Ml.forEach(t),SNe=i(f),ac=n(f,"H2",{class:!0});var NDe=s(ac);hM=n(NDe,"A",{id:!0,class:!0,href:!0});var i9t=s(hM);W2e=n(i9t,"SPAN",{});var d9t=s(W2e);T(xL.$$.fragment,d9t),d9t.forEach(t),i9t.forEach(t),x2r=i(NDe),Q2e=n(NDe,"SPAN",{});var c9t=s(Q2e);$2r=r(c9t,"TFAutoModelForSequenceClassification"),c9t.forEach(t),NDe.forEach(t),RNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T($L.$$.fragment,Cl),k2r=i(Cl),nc=n(Cl,"P",{});var ZZ=s(nc);S2r=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cH=n(ZZ,"A",{href:!0});var f9t=s(cH);R2r=r(f9t,"from_pretrained()"),f9t.forEach(t),P2r=r(ZZ," class method or the "),fH=n(ZZ,"A",{href:!0});var m9t=s(fH);B2r=r(m9t,"from_config()"),m9t.forEach(t),I2r=r(ZZ,` class
method.`),ZZ.forEach(t),q2r=i(Cl),kL=n(Cl,"P",{});var jDe=s(kL);N2r=r(jDe,"This class cannot be instantiated directly using "),H2e=n(jDe,"CODE",{});var g9t=s(H2e);j2r=r(g9t,"__init__()"),g9t.forEach(t),D2r=r(jDe," (throws an error)."),jDe.forEach(t),G2r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var L0=s(Rt);T(SL.$$.fragment,L0),O2r=i(L0),U2e=n(L0,"P",{});var h9t=s(U2e);V2r=r(h9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h9t.forEach(t),X2r=i(L0),sc=n(L0,"P",{});var eee=s(sc);z2r=r(eee,`Note:
Loading a model from its configuration file does `),J2e=n(eee,"STRONG",{});var p9t=s(J2e);W2r=r(p9t,"not"),p9t.forEach(t),Q2r=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(eee,"A",{href:!0});var _9t=s(mH);H2r=r(_9t,"from_pretrained()"),_9t.forEach(t),U2r=r(eee," to load the model weights."),eee.forEach(t),J2r=i(L0),T(pM.$$.fragment,L0),L0.forEach(t),Y2r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(RL.$$.fragment,wl),K2r=i(wl),Y2e=n(wl,"P",{});var u9t=s(Y2e);Z2r=r(u9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),u9t.forEach(t),e5r=i(wl),nn=n(wl,"P",{});var x0=s(nn);o5r=r(x0,"The model class to instantiate is selected based on the "),K2e=n(x0,"CODE",{});var b9t=s(K2e);r5r=r(b9t,"model_type"),b9t.forEach(t),t5r=r(x0,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(x0,"CODE",{});var v9t=s(Z2e);a5r=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),n5r=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(x0,"CODE",{});var F9t=s(e5e);s5r=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),l5r=r(x0,":"),x0.forEach(t),i5r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);_M=n(ae,"LI",{});var NRe=s(_M);o5e=n(NRe,"STRONG",{});var T9t=s(o5e);d5r=r(T9t,"albert"),T9t.forEach(t),c5r=r(NRe," \u2014 "),gH=n(NRe,"A",{href:!0});var M9t=s(gH);f5r=r(M9t,"TFAlbertForSequenceClassification"),M9t.forEach(t),m5r=r(NRe," (ALBERT model)"),NRe.forEach(t),g5r=i(ae),uM=n(ae,"LI",{});var jRe=s(uM);r5e=n(jRe,"STRONG",{});var E9t=s(r5e);h5r=r(E9t,"bert"),E9t.forEach(t),p5r=r(jRe," \u2014 "),hH=n(jRe,"A",{href:!0});var C9t=s(hH);_5r=r(C9t,"TFBertForSequenceClassification"),C9t.forEach(t),u5r=r(jRe," (BERT model)"),jRe.forEach(t),b5r=i(ae),bM=n(ae,"LI",{});var DRe=s(bM);t5e=n(DRe,"STRONG",{});var w9t=s(t5e);v5r=r(w9t,"camembert"),w9t.forEach(t),F5r=r(DRe," \u2014 "),pH=n(DRe,"A",{href:!0});var A9t=s(pH);T5r=r(A9t,"TFCamembertForSequenceClassification"),A9t.forEach(t),M5r=r(DRe," (CamemBERT model)"),DRe.forEach(t),E5r=i(ae),vM=n(ae,"LI",{});var GRe=s(vM);a5e=n(GRe,"STRONG",{});var y9t=s(a5e);C5r=r(y9t,"convbert"),y9t.forEach(t),w5r=r(GRe," \u2014 "),_H=n(GRe,"A",{href:!0});var L9t=s(_H);A5r=r(L9t,"TFConvBertForSequenceClassification"),L9t.forEach(t),y5r=r(GRe," (ConvBERT model)"),GRe.forEach(t),L5r=i(ae),FM=n(ae,"LI",{});var ORe=s(FM);n5e=n(ORe,"STRONG",{});var x9t=s(n5e);x5r=r(x9t,"ctrl"),x9t.forEach(t),$5r=r(ORe," \u2014 "),uH=n(ORe,"A",{href:!0});var $9t=s(uH);k5r=r($9t,"TFCTRLForSequenceClassification"),$9t.forEach(t),S5r=r(ORe," (CTRL model)"),ORe.forEach(t),R5r=i(ae),TM=n(ae,"LI",{});var VRe=s(TM);s5e=n(VRe,"STRONG",{});var k9t=s(s5e);P5r=r(k9t,"deberta"),k9t.forEach(t),B5r=r(VRe," \u2014 "),bH=n(VRe,"A",{href:!0});var S9t=s(bH);I5r=r(S9t,"TFDebertaForSequenceClassification"),S9t.forEach(t),q5r=r(VRe," (DeBERTa model)"),VRe.forEach(t),N5r=i(ae),MM=n(ae,"LI",{});var XRe=s(MM);l5e=n(XRe,"STRONG",{});var R9t=s(l5e);j5r=r(R9t,"deberta-v2"),R9t.forEach(t),D5r=r(XRe," \u2014 "),vH=n(XRe,"A",{href:!0});var P9t=s(vH);G5r=r(P9t,"TFDebertaV2ForSequenceClassification"),P9t.forEach(t),O5r=r(XRe," (DeBERTa-v2 model)"),XRe.forEach(t),V5r=i(ae),EM=n(ae,"LI",{});var zRe=s(EM);i5e=n(zRe,"STRONG",{});var B9t=s(i5e);X5r=r(B9t,"distilbert"),B9t.forEach(t),z5r=r(zRe," \u2014 "),FH=n(zRe,"A",{href:!0});var I9t=s(FH);W5r=r(I9t,"TFDistilBertForSequenceClassification"),I9t.forEach(t),Q5r=r(zRe," (DistilBERT model)"),zRe.forEach(t),H5r=i(ae),CM=n(ae,"LI",{});var WRe=s(CM);d5e=n(WRe,"STRONG",{});var q9t=s(d5e);U5r=r(q9t,"electra"),q9t.forEach(t),J5r=r(WRe," \u2014 "),TH=n(WRe,"A",{href:!0});var N9t=s(TH);Y5r=r(N9t,"TFElectraForSequenceClassification"),N9t.forEach(t),K5r=r(WRe," (ELECTRA model)"),WRe.forEach(t),Z5r=i(ae),wM=n(ae,"LI",{});var QRe=s(wM);c5e=n(QRe,"STRONG",{});var j9t=s(c5e);evr=r(j9t,"flaubert"),j9t.forEach(t),ovr=r(QRe," \u2014 "),MH=n(QRe,"A",{href:!0});var D9t=s(MH);rvr=r(D9t,"TFFlaubertForSequenceClassification"),D9t.forEach(t),tvr=r(QRe," (FlauBERT model)"),QRe.forEach(t),avr=i(ae),AM=n(ae,"LI",{});var HRe=s(AM);f5e=n(HRe,"STRONG",{});var G9t=s(f5e);nvr=r(G9t,"funnel"),G9t.forEach(t),svr=r(HRe," \u2014 "),EH=n(HRe,"A",{href:!0});var O9t=s(EH);lvr=r(O9t,"TFFunnelForSequenceClassification"),O9t.forEach(t),ivr=r(HRe," (Funnel Transformer model)"),HRe.forEach(t),dvr=i(ae),yM=n(ae,"LI",{});var URe=s(yM);m5e=n(URe,"STRONG",{});var V9t=s(m5e);cvr=r(V9t,"gpt2"),V9t.forEach(t),fvr=r(URe," \u2014 "),CH=n(URe,"A",{href:!0});var X9t=s(CH);mvr=r(X9t,"TFGPT2ForSequenceClassification"),X9t.forEach(t),gvr=r(URe," (OpenAI GPT-2 model)"),URe.forEach(t),hvr=i(ae),LM=n(ae,"LI",{});var JRe=s(LM);g5e=n(JRe,"STRONG",{});var z9t=s(g5e);pvr=r(z9t,"gptj"),z9t.forEach(t),_vr=r(JRe," \u2014 "),wH=n(JRe,"A",{href:!0});var W9t=s(wH);uvr=r(W9t,"TFGPTJForSequenceClassification"),W9t.forEach(t),bvr=r(JRe," (GPT-J model)"),JRe.forEach(t),vvr=i(ae),xM=n(ae,"LI",{});var YRe=s(xM);h5e=n(YRe,"STRONG",{});var Q9t=s(h5e);Fvr=r(Q9t,"layoutlm"),Q9t.forEach(t),Tvr=r(YRe," \u2014 "),AH=n(YRe,"A",{href:!0});var H9t=s(AH);Mvr=r(H9t,"TFLayoutLMForSequenceClassification"),H9t.forEach(t),Evr=r(YRe," (LayoutLM model)"),YRe.forEach(t),Cvr=i(ae),$M=n(ae,"LI",{});var KRe=s($M);p5e=n(KRe,"STRONG",{});var U9t=s(p5e);wvr=r(U9t,"longformer"),U9t.forEach(t),Avr=r(KRe," \u2014 "),yH=n(KRe,"A",{href:!0});var J9t=s(yH);yvr=r(J9t,"TFLongformerForSequenceClassification"),J9t.forEach(t),Lvr=r(KRe," (Longformer model)"),KRe.forEach(t),xvr=i(ae),kM=n(ae,"LI",{});var ZRe=s(kM);_5e=n(ZRe,"STRONG",{});var Y9t=s(_5e);$vr=r(Y9t,"mobilebert"),Y9t.forEach(t),kvr=r(ZRe," \u2014 "),LH=n(ZRe,"A",{href:!0});var K9t=s(LH);Svr=r(K9t,"TFMobileBertForSequenceClassification"),K9t.forEach(t),Rvr=r(ZRe," (MobileBERT model)"),ZRe.forEach(t),Pvr=i(ae),SM=n(ae,"LI",{});var ePe=s(SM);u5e=n(ePe,"STRONG",{});var Z9t=s(u5e);Bvr=r(Z9t,"mpnet"),Z9t.forEach(t),Ivr=r(ePe," \u2014 "),xH=n(ePe,"A",{href:!0});var eMt=s(xH);qvr=r(eMt,"TFMPNetForSequenceClassification"),eMt.forEach(t),Nvr=r(ePe," (MPNet model)"),ePe.forEach(t),jvr=i(ae),RM=n(ae,"LI",{});var oPe=s(RM);b5e=n(oPe,"STRONG",{});var oMt=s(b5e);Dvr=r(oMt,"openai-gpt"),oMt.forEach(t),Gvr=r(oPe," \u2014 "),$H=n(oPe,"A",{href:!0});var rMt=s($H);Ovr=r(rMt,"TFOpenAIGPTForSequenceClassification"),rMt.forEach(t),Vvr=r(oPe," (OpenAI GPT model)"),oPe.forEach(t),Xvr=i(ae),PM=n(ae,"LI",{});var rPe=s(PM);v5e=n(rPe,"STRONG",{});var tMt=s(v5e);zvr=r(tMt,"rembert"),tMt.forEach(t),Wvr=r(rPe," \u2014 "),kH=n(rPe,"A",{href:!0});var aMt=s(kH);Qvr=r(aMt,"TFRemBertForSequenceClassification"),aMt.forEach(t),Hvr=r(rPe," (RemBERT model)"),rPe.forEach(t),Uvr=i(ae),BM=n(ae,"LI",{});var tPe=s(BM);F5e=n(tPe,"STRONG",{});var nMt=s(F5e);Jvr=r(nMt,"roberta"),nMt.forEach(t),Yvr=r(tPe," \u2014 "),SH=n(tPe,"A",{href:!0});var sMt=s(SH);Kvr=r(sMt,"TFRobertaForSequenceClassification"),sMt.forEach(t),Zvr=r(tPe," (RoBERTa model)"),tPe.forEach(t),eFr=i(ae),IM=n(ae,"LI",{});var aPe=s(IM);T5e=n(aPe,"STRONG",{});var lMt=s(T5e);oFr=r(lMt,"roformer"),lMt.forEach(t),rFr=r(aPe," \u2014 "),RH=n(aPe,"A",{href:!0});var iMt=s(RH);tFr=r(iMt,"TFRoFormerForSequenceClassification"),iMt.forEach(t),aFr=r(aPe," (RoFormer model)"),aPe.forEach(t),nFr=i(ae),qM=n(ae,"LI",{});var nPe=s(qM);M5e=n(nPe,"STRONG",{});var dMt=s(M5e);sFr=r(dMt,"tapas"),dMt.forEach(t),lFr=r(nPe," \u2014 "),PH=n(nPe,"A",{href:!0});var cMt=s(PH);iFr=r(cMt,"TFTapasForSequenceClassification"),cMt.forEach(t),dFr=r(nPe," (TAPAS model)"),nPe.forEach(t),cFr=i(ae),NM=n(ae,"LI",{});var sPe=s(NM);E5e=n(sPe,"STRONG",{});var fMt=s(E5e);fFr=r(fMt,"transfo-xl"),fMt.forEach(t),mFr=r(sPe," \u2014 "),BH=n(sPe,"A",{href:!0});var mMt=s(BH);gFr=r(mMt,"TFTransfoXLForSequenceClassification"),mMt.forEach(t),hFr=r(sPe," (Transformer-XL model)"),sPe.forEach(t),pFr=i(ae),jM=n(ae,"LI",{});var lPe=s(jM);C5e=n(lPe,"STRONG",{});var gMt=s(C5e);_Fr=r(gMt,"xlm"),gMt.forEach(t),uFr=r(lPe," \u2014 "),IH=n(lPe,"A",{href:!0});var hMt=s(IH);bFr=r(hMt,"TFXLMForSequenceClassification"),hMt.forEach(t),vFr=r(lPe," (XLM model)"),lPe.forEach(t),FFr=i(ae),DM=n(ae,"LI",{});var iPe=s(DM);w5e=n(iPe,"STRONG",{});var pMt=s(w5e);TFr=r(pMt,"xlm-roberta"),pMt.forEach(t),MFr=r(iPe," \u2014 "),qH=n(iPe,"A",{href:!0});var _Mt=s(qH);EFr=r(_Mt,"TFXLMRobertaForSequenceClassification"),_Mt.forEach(t),CFr=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),wFr=i(ae),GM=n(ae,"LI",{});var dPe=s(GM);A5e=n(dPe,"STRONG",{});var uMt=s(A5e);AFr=r(uMt,"xlnet"),uMt.forEach(t),yFr=r(dPe," \u2014 "),NH=n(dPe,"A",{href:!0});var bMt=s(NH);LFr=r(bMt,"TFXLNetForSequenceClassification"),bMt.forEach(t),xFr=r(dPe," (XLNet model)"),dPe.forEach(t),ae.forEach(t),$Fr=i(wl),T(OM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),PNe=i(f),lc=n(f,"H2",{class:!0});var DDe=s(lc);VM=n(DDe,"A",{id:!0,class:!0,href:!0});var vMt=s(VM);y5e=n(vMt,"SPAN",{});var FMt=s(y5e);T(PL.$$.fragment,FMt),FMt.forEach(t),vMt.forEach(t),kFr=i(DDe),L5e=n(DDe,"SPAN",{});var TMt=s(L5e);SFr=r(TMt,"TFAutoModelForMultipleChoice"),TMt.forEach(t),DDe.forEach(t),BNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(BL.$$.fragment,Al),RFr=i(Al),ic=n(Al,"P",{});var oee=s(ic);PFr=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jH=n(oee,"A",{href:!0});var MMt=s(jH);BFr=r(MMt,"from_pretrained()"),MMt.forEach(t),IFr=r(oee," class method or the "),DH=n(oee,"A",{href:!0});var EMt=s(DH);qFr=r(EMt,"from_config()"),EMt.forEach(t),NFr=r(oee,` class
method.`),oee.forEach(t),jFr=i(Al),IL=n(Al,"P",{});var GDe=s(IL);DFr=r(GDe,"This class cannot be instantiated directly using "),x5e=n(GDe,"CODE",{});var CMt=s(x5e);GFr=r(CMt,"__init__()"),CMt.forEach(t),OFr=r(GDe," (throws an error)."),GDe.forEach(t),VFr=i(Al),Pt=n(Al,"DIV",{class:!0});var $0=s(Pt);T(qL.$$.fragment,$0),XFr=i($0),$5e=n($0,"P",{});var wMt=s($5e);zFr=r(wMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wMt.forEach(t),WFr=i($0),dc=n($0,"P",{});var ree=s(dc);QFr=r(ree,`Note:
Loading a model from its configuration file does `),k5e=n(ree,"STRONG",{});var AMt=s(k5e);HFr=r(AMt,"not"),AMt.forEach(t),UFr=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(ree,"A",{href:!0});var yMt=s(GH);JFr=r(yMt,"from_pretrained()"),yMt.forEach(t),YFr=r(ree," to load the model weights."),ree.forEach(t),KFr=i($0),T(XM.$$.fragment,$0),$0.forEach(t),ZFr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(NL.$$.fragment,yl),eTr=i(yl),S5e=n(yl,"P",{});var LMt=s(S5e);oTr=r(LMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LMt.forEach(t),rTr=i(yl),sn=n(yl,"P",{});var k0=s(sn);tTr=r(k0,"The model class to instantiate is selected based on the "),R5e=n(k0,"CODE",{});var xMt=s(R5e);aTr=r(xMt,"model_type"),xMt.forEach(t),nTr=r(k0,` property of the config object (either
passed as an argument or loaded from `),P5e=n(k0,"CODE",{});var $Mt=s(P5e);sTr=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),lTr=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(k0,"CODE",{});var kMt=s(B5e);iTr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),dTr=r(k0,":"),k0.forEach(t),cTr=i(yl),he=n(yl,"UL",{});var ue=s(he);zM=n(ue,"LI",{});var cPe=s(zM);I5e=n(cPe,"STRONG",{});var SMt=s(I5e);fTr=r(SMt,"albert"),SMt.forEach(t),mTr=r(cPe," \u2014 "),OH=n(cPe,"A",{href:!0});var RMt=s(OH);gTr=r(RMt,"TFAlbertForMultipleChoice"),RMt.forEach(t),hTr=r(cPe," (ALBERT model)"),cPe.forEach(t),pTr=i(ue),WM=n(ue,"LI",{});var fPe=s(WM);q5e=n(fPe,"STRONG",{});var PMt=s(q5e);_Tr=r(PMt,"bert"),PMt.forEach(t),uTr=r(fPe," \u2014 "),VH=n(fPe,"A",{href:!0});var BMt=s(VH);bTr=r(BMt,"TFBertForMultipleChoice"),BMt.forEach(t),vTr=r(fPe," (BERT model)"),fPe.forEach(t),FTr=i(ue),QM=n(ue,"LI",{});var mPe=s(QM);N5e=n(mPe,"STRONG",{});var IMt=s(N5e);TTr=r(IMt,"camembert"),IMt.forEach(t),MTr=r(mPe," \u2014 "),XH=n(mPe,"A",{href:!0});var qMt=s(XH);ETr=r(qMt,"TFCamembertForMultipleChoice"),qMt.forEach(t),CTr=r(mPe," (CamemBERT model)"),mPe.forEach(t),wTr=i(ue),HM=n(ue,"LI",{});var gPe=s(HM);j5e=n(gPe,"STRONG",{});var NMt=s(j5e);ATr=r(NMt,"convbert"),NMt.forEach(t),yTr=r(gPe," \u2014 "),zH=n(gPe,"A",{href:!0});var jMt=s(zH);LTr=r(jMt,"TFConvBertForMultipleChoice"),jMt.forEach(t),xTr=r(gPe," (ConvBERT model)"),gPe.forEach(t),$Tr=i(ue),UM=n(ue,"LI",{});var hPe=s(UM);D5e=n(hPe,"STRONG",{});var DMt=s(D5e);kTr=r(DMt,"distilbert"),DMt.forEach(t),STr=r(hPe," \u2014 "),WH=n(hPe,"A",{href:!0});var GMt=s(WH);RTr=r(GMt,"TFDistilBertForMultipleChoice"),GMt.forEach(t),PTr=r(hPe," (DistilBERT model)"),hPe.forEach(t),BTr=i(ue),JM=n(ue,"LI",{});var pPe=s(JM);G5e=n(pPe,"STRONG",{});var OMt=s(G5e);ITr=r(OMt,"electra"),OMt.forEach(t),qTr=r(pPe," \u2014 "),QH=n(pPe,"A",{href:!0});var VMt=s(QH);NTr=r(VMt,"TFElectraForMultipleChoice"),VMt.forEach(t),jTr=r(pPe," (ELECTRA model)"),pPe.forEach(t),DTr=i(ue),YM=n(ue,"LI",{});var _Pe=s(YM);O5e=n(_Pe,"STRONG",{});var XMt=s(O5e);GTr=r(XMt,"flaubert"),XMt.forEach(t),OTr=r(_Pe," \u2014 "),HH=n(_Pe,"A",{href:!0});var zMt=s(HH);VTr=r(zMt,"TFFlaubertForMultipleChoice"),zMt.forEach(t),XTr=r(_Pe," (FlauBERT model)"),_Pe.forEach(t),zTr=i(ue),KM=n(ue,"LI",{});var uPe=s(KM);V5e=n(uPe,"STRONG",{});var WMt=s(V5e);WTr=r(WMt,"funnel"),WMt.forEach(t),QTr=r(uPe," \u2014 "),UH=n(uPe,"A",{href:!0});var QMt=s(UH);HTr=r(QMt,"TFFunnelForMultipleChoice"),QMt.forEach(t),UTr=r(uPe," (Funnel Transformer model)"),uPe.forEach(t),JTr=i(ue),ZM=n(ue,"LI",{});var bPe=s(ZM);X5e=n(bPe,"STRONG",{});var HMt=s(X5e);YTr=r(HMt,"longformer"),HMt.forEach(t),KTr=r(bPe," \u2014 "),JH=n(bPe,"A",{href:!0});var UMt=s(JH);ZTr=r(UMt,"TFLongformerForMultipleChoice"),UMt.forEach(t),e9r=r(bPe," (Longformer model)"),bPe.forEach(t),o9r=i(ue),e4=n(ue,"LI",{});var vPe=s(e4);z5e=n(vPe,"STRONG",{});var JMt=s(z5e);r9r=r(JMt,"mobilebert"),JMt.forEach(t),t9r=r(vPe," \u2014 "),YH=n(vPe,"A",{href:!0});var YMt=s(YH);a9r=r(YMt,"TFMobileBertForMultipleChoice"),YMt.forEach(t),n9r=r(vPe," (MobileBERT model)"),vPe.forEach(t),s9r=i(ue),o4=n(ue,"LI",{});var FPe=s(o4);W5e=n(FPe,"STRONG",{});var KMt=s(W5e);l9r=r(KMt,"mpnet"),KMt.forEach(t),i9r=r(FPe," \u2014 "),KH=n(FPe,"A",{href:!0});var ZMt=s(KH);d9r=r(ZMt,"TFMPNetForMultipleChoice"),ZMt.forEach(t),c9r=r(FPe," (MPNet model)"),FPe.forEach(t),f9r=i(ue),r4=n(ue,"LI",{});var TPe=s(r4);Q5e=n(TPe,"STRONG",{});var e4t=s(Q5e);m9r=r(e4t,"rembert"),e4t.forEach(t),g9r=r(TPe," \u2014 "),ZH=n(TPe,"A",{href:!0});var o4t=s(ZH);h9r=r(o4t,"TFRemBertForMultipleChoice"),o4t.forEach(t),p9r=r(TPe," (RemBERT model)"),TPe.forEach(t),_9r=i(ue),t4=n(ue,"LI",{});var MPe=s(t4);H5e=n(MPe,"STRONG",{});var r4t=s(H5e);u9r=r(r4t,"roberta"),r4t.forEach(t),b9r=r(MPe," \u2014 "),eU=n(MPe,"A",{href:!0});var t4t=s(eU);v9r=r(t4t,"TFRobertaForMultipleChoice"),t4t.forEach(t),F9r=r(MPe," (RoBERTa model)"),MPe.forEach(t),T9r=i(ue),a4=n(ue,"LI",{});var EPe=s(a4);U5e=n(EPe,"STRONG",{});var a4t=s(U5e);M9r=r(a4t,"roformer"),a4t.forEach(t),E9r=r(EPe," \u2014 "),oU=n(EPe,"A",{href:!0});var n4t=s(oU);C9r=r(n4t,"TFRoFormerForMultipleChoice"),n4t.forEach(t),w9r=r(EPe," (RoFormer model)"),EPe.forEach(t),A9r=i(ue),n4=n(ue,"LI",{});var CPe=s(n4);J5e=n(CPe,"STRONG",{});var s4t=s(J5e);y9r=r(s4t,"xlm"),s4t.forEach(t),L9r=r(CPe," \u2014 "),rU=n(CPe,"A",{href:!0});var l4t=s(rU);x9r=r(l4t,"TFXLMForMultipleChoice"),l4t.forEach(t),$9r=r(CPe," (XLM model)"),CPe.forEach(t),k9r=i(ue),s4=n(ue,"LI",{});var wPe=s(s4);Y5e=n(wPe,"STRONG",{});var i4t=s(Y5e);S9r=r(i4t,"xlm-roberta"),i4t.forEach(t),R9r=r(wPe," \u2014 "),tU=n(wPe,"A",{href:!0});var d4t=s(tU);P9r=r(d4t,"TFXLMRobertaForMultipleChoice"),d4t.forEach(t),B9r=r(wPe," (XLM-RoBERTa model)"),wPe.forEach(t),I9r=i(ue),l4=n(ue,"LI",{});var APe=s(l4);K5e=n(APe,"STRONG",{});var c4t=s(K5e);q9r=r(c4t,"xlnet"),c4t.forEach(t),N9r=r(APe," \u2014 "),aU=n(APe,"A",{href:!0});var f4t=s(aU);j9r=r(f4t,"TFXLNetForMultipleChoice"),f4t.forEach(t),D9r=r(APe," (XLNet model)"),APe.forEach(t),ue.forEach(t),G9r=i(yl),T(i4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),INe=i(f),cc=n(f,"H2",{class:!0});var ODe=s(cc);d4=n(ODe,"A",{id:!0,class:!0,href:!0});var m4t=s(d4);Z5e=n(m4t,"SPAN",{});var g4t=s(Z5e);T(jL.$$.fragment,g4t),g4t.forEach(t),m4t.forEach(t),O9r=i(ODe),eve=n(ODe,"SPAN",{});var h4t=s(eve);V9r=r(h4t,"TFAutoModelForNextSentencePrediction"),h4t.forEach(t),ODe.forEach(t),qNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(DL.$$.fragment,Ll),X9r=i(Ll),fc=n(Ll,"P",{});var tee=s(fc);z9r=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nU=n(tee,"A",{href:!0});var p4t=s(nU);W9r=r(p4t,"from_pretrained()"),p4t.forEach(t),Q9r=r(tee," class method or the "),sU=n(tee,"A",{href:!0});var _4t=s(sU);H9r=r(_4t,"from_config()"),_4t.forEach(t),U9r=r(tee,` class
method.`),tee.forEach(t),J9r=i(Ll),GL=n(Ll,"P",{});var VDe=s(GL);Y9r=r(VDe,"This class cannot be instantiated directly using "),ove=n(VDe,"CODE",{});var u4t=s(ove);K9r=r(u4t,"__init__()"),u4t.forEach(t),Z9r=r(VDe," (throws an error)."),VDe.forEach(t),eMr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var S0=s(Bt);T(OL.$$.fragment,S0),oMr=i(S0),rve=n(S0,"P",{});var b4t=s(rve);rMr=r(b4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b4t.forEach(t),tMr=i(S0),mc=n(S0,"P",{});var aee=s(mc);aMr=r(aee,`Note:
Loading a model from its configuration file does `),tve=n(aee,"STRONG",{});var v4t=s(tve);nMr=r(v4t,"not"),v4t.forEach(t),sMr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(aee,"A",{href:!0});var F4t=s(lU);lMr=r(F4t,"from_pretrained()"),F4t.forEach(t),iMr=r(aee," to load the model weights."),aee.forEach(t),dMr=i(S0),T(c4.$$.fragment,S0),S0.forEach(t),cMr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(VL.$$.fragment,xl),fMr=i(xl),ave=n(xl,"P",{});var T4t=s(ave);mMr=r(T4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T4t.forEach(t),gMr=i(xl),ln=n(xl,"P",{});var R0=s(ln);hMr=r(R0,"The model class to instantiate is selected based on the "),nve=n(R0,"CODE",{});var M4t=s(nve);pMr=r(M4t,"model_type"),M4t.forEach(t),_Mr=r(R0,` property of the config object (either
passed as an argument or loaded from `),sve=n(R0,"CODE",{});var E4t=s(sve);uMr=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),bMr=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(R0,"CODE",{});var C4t=s(lve);vMr=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),FMr=r(R0,":"),R0.forEach(t),TMr=i(xl),XL=n(xl,"UL",{});var XDe=s(XL);f4=n(XDe,"LI",{});var yPe=s(f4);ive=n(yPe,"STRONG",{});var w4t=s(ive);MMr=r(w4t,"bert"),w4t.forEach(t),EMr=r(yPe," \u2014 "),iU=n(yPe,"A",{href:!0});var A4t=s(iU);CMr=r(A4t,"TFBertForNextSentencePrediction"),A4t.forEach(t),wMr=r(yPe," (BERT model)"),yPe.forEach(t),AMr=i(XDe),m4=n(XDe,"LI",{});var LPe=s(m4);dve=n(LPe,"STRONG",{});var y4t=s(dve);yMr=r(y4t,"mobilebert"),y4t.forEach(t),LMr=r(LPe," \u2014 "),dU=n(LPe,"A",{href:!0});var L4t=s(dU);xMr=r(L4t,"TFMobileBertForNextSentencePrediction"),L4t.forEach(t),$Mr=r(LPe," (MobileBERT model)"),LPe.forEach(t),XDe.forEach(t),kMr=i(xl),T(g4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),NNe=i(f),gc=n(f,"H2",{class:!0});var zDe=s(gc);h4=n(zDe,"A",{id:!0,class:!0,href:!0});var x4t=s(h4);cve=n(x4t,"SPAN",{});var $4t=s(cve);T(zL.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),SMr=i(zDe),fve=n(zDe,"SPAN",{});var k4t=s(fve);RMr=r(k4t,"TFAutoModelForTableQuestionAnswering"),k4t.forEach(t),zDe.forEach(t),jNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(WL.$$.fragment,$l),PMr=i($l),hc=n($l,"P",{});var nee=s(hc);BMr=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cU=n(nee,"A",{href:!0});var S4t=s(cU);IMr=r(S4t,"from_pretrained()"),S4t.forEach(t),qMr=r(nee," class method or the "),fU=n(nee,"A",{href:!0});var R4t=s(fU);NMr=r(R4t,"from_config()"),R4t.forEach(t),jMr=r(nee,` class
method.`),nee.forEach(t),DMr=i($l),QL=n($l,"P",{});var WDe=s(QL);GMr=r(WDe,"This class cannot be instantiated directly using "),mve=n(WDe,"CODE",{});var P4t=s(mve);OMr=r(P4t,"__init__()"),P4t.forEach(t),VMr=r(WDe," (throws an error)."),WDe.forEach(t),XMr=i($l),It=n($l,"DIV",{class:!0});var P0=s(It);T(HL.$$.fragment,P0),zMr=i(P0),gve=n(P0,"P",{});var B4t=s(gve);WMr=r(B4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),B4t.forEach(t),QMr=i(P0),pc=n(P0,"P",{});var see=s(pc);HMr=r(see,`Note:
Loading a model from its configuration file does `),hve=n(see,"STRONG",{});var I4t=s(hve);UMr=r(I4t,"not"),I4t.forEach(t),JMr=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(see,"A",{href:!0});var q4t=s(mU);YMr=r(q4t,"from_pretrained()"),q4t.forEach(t),KMr=r(see," to load the model weights."),see.forEach(t),ZMr=i(P0),T(p4.$$.fragment,P0),P0.forEach(t),e4r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(UL.$$.fragment,kl),o4r=i(kl),pve=n(kl,"P",{});var N4t=s(pve);r4r=r(N4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),N4t.forEach(t),t4r=i(kl),dn=n(kl,"P",{});var B0=s(dn);a4r=r(B0,"The model class to instantiate is selected based on the "),_ve=n(B0,"CODE",{});var j4t=s(_ve);n4r=r(j4t,"model_type"),j4t.forEach(t),s4r=r(B0,` property of the config object (either
passed as an argument or loaded from `),uve=n(B0,"CODE",{});var D4t=s(uve);l4r=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),i4r=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(B0,"CODE",{});var G4t=s(bve);d4r=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),c4r=r(B0,":"),B0.forEach(t),f4r=i(kl),vve=n(kl,"UL",{});var O4t=s(vve);_4=n(O4t,"LI",{});var xPe=s(_4);Fve=n(xPe,"STRONG",{});var V4t=s(Fve);m4r=r(V4t,"tapas"),V4t.forEach(t),g4r=r(xPe," \u2014 "),gU=n(xPe,"A",{href:!0});var X4t=s(gU);h4r=r(X4t,"TFTapasForQuestionAnswering"),X4t.forEach(t),p4r=r(xPe," (TAPAS model)"),xPe.forEach(t),O4t.forEach(t),_4r=i(kl),T(u4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),DNe=i(f),_c=n(f,"H2",{class:!0});var QDe=s(_c);b4=n(QDe,"A",{id:!0,class:!0,href:!0});var z4t=s(b4);Tve=n(z4t,"SPAN",{});var W4t=s(Tve);T(JL.$$.fragment,W4t),W4t.forEach(t),z4t.forEach(t),u4r=i(QDe),Mve=n(QDe,"SPAN",{});var Q4t=s(Mve);b4r=r(Q4t,"TFAutoModelForTokenClassification"),Q4t.forEach(t),QDe.forEach(t),GNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(YL.$$.fragment,Sl),v4r=i(Sl),uc=n(Sl,"P",{});var lee=s(uc);F4r=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hU=n(lee,"A",{href:!0});var H4t=s(hU);T4r=r(H4t,"from_pretrained()"),H4t.forEach(t),M4r=r(lee," class method or the "),pU=n(lee,"A",{href:!0});var U4t=s(pU);E4r=r(U4t,"from_config()"),U4t.forEach(t),C4r=r(lee,` class
method.`),lee.forEach(t),w4r=i(Sl),KL=n(Sl,"P",{});var HDe=s(KL);A4r=r(HDe,"This class cannot be instantiated directly using "),Eve=n(HDe,"CODE",{});var J4t=s(Eve);y4r=r(J4t,"__init__()"),J4t.forEach(t),L4r=r(HDe," (throws an error)."),HDe.forEach(t),x4r=i(Sl),qt=n(Sl,"DIV",{class:!0});var I0=s(qt);T(ZL.$$.fragment,I0),$4r=i(I0),Cve=n(I0,"P",{});var Y4t=s(Cve);k4r=r(Y4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Y4t.forEach(t),S4r=i(I0),bc=n(I0,"P",{});var iee=s(bc);R4r=r(iee,`Note:
Loading a model from its configuration file does `),wve=n(iee,"STRONG",{});var K4t=s(wve);P4r=r(K4t,"not"),K4t.forEach(t),B4r=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(iee,"A",{href:!0});var Z4t=s(_U);I4r=r(Z4t,"from_pretrained()"),Z4t.forEach(t),q4r=r(iee," to load the model weights."),iee.forEach(t),N4r=i(I0),T(v4.$$.fragment,I0),I0.forEach(t),j4r=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(e7.$$.fragment,Rl),D4r=i(Rl),Ave=n(Rl,"P",{});var eEt=s(Ave);G4r=r(eEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eEt.forEach(t),O4r=i(Rl),cn=n(Rl,"P",{});var q0=s(cn);V4r=r(q0,"The model class to instantiate is selected based on the "),yve=n(q0,"CODE",{});var oEt=s(yve);X4r=r(oEt,"model_type"),oEt.forEach(t),z4r=r(q0,` property of the config object (either
passed as an argument or loaded from `),Lve=n(q0,"CODE",{});var rEt=s(Lve);W4r=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),Q4r=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(q0,"CODE",{});var tEt=s(xve);H4r=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),U4r=r(q0,":"),q0.forEach(t),J4r=i(Rl),de=n(Rl,"UL",{});var me=s(de);F4=n(me,"LI",{});var $Pe=s(F4);$ve=n($Pe,"STRONG",{});var aEt=s($ve);Y4r=r(aEt,"albert"),aEt.forEach(t),K4r=r($Pe," \u2014 "),uU=n($Pe,"A",{href:!0});var nEt=s(uU);Z4r=r(nEt,"TFAlbertForTokenClassification"),nEt.forEach(t),eEr=r($Pe," (ALBERT model)"),$Pe.forEach(t),oEr=i(me),T4=n(me,"LI",{});var kPe=s(T4);kve=n(kPe,"STRONG",{});var sEt=s(kve);rEr=r(sEt,"bert"),sEt.forEach(t),tEr=r(kPe," \u2014 "),bU=n(kPe,"A",{href:!0});var lEt=s(bU);aEr=r(lEt,"TFBertForTokenClassification"),lEt.forEach(t),nEr=r(kPe," (BERT model)"),kPe.forEach(t),sEr=i(me),M4=n(me,"LI",{});var SPe=s(M4);Sve=n(SPe,"STRONG",{});var iEt=s(Sve);lEr=r(iEt,"camembert"),iEt.forEach(t),iEr=r(SPe," \u2014 "),vU=n(SPe,"A",{href:!0});var dEt=s(vU);dEr=r(dEt,"TFCamembertForTokenClassification"),dEt.forEach(t),cEr=r(SPe," (CamemBERT model)"),SPe.forEach(t),fEr=i(me),E4=n(me,"LI",{});var RPe=s(E4);Rve=n(RPe,"STRONG",{});var cEt=s(Rve);mEr=r(cEt,"convbert"),cEt.forEach(t),gEr=r(RPe," \u2014 "),FU=n(RPe,"A",{href:!0});var fEt=s(FU);hEr=r(fEt,"TFConvBertForTokenClassification"),fEt.forEach(t),pEr=r(RPe," (ConvBERT model)"),RPe.forEach(t),_Er=i(me),C4=n(me,"LI",{});var PPe=s(C4);Pve=n(PPe,"STRONG",{});var mEt=s(Pve);uEr=r(mEt,"deberta"),mEt.forEach(t),bEr=r(PPe," \u2014 "),TU=n(PPe,"A",{href:!0});var gEt=s(TU);vEr=r(gEt,"TFDebertaForTokenClassification"),gEt.forEach(t),FEr=r(PPe," (DeBERTa model)"),PPe.forEach(t),TEr=i(me),w4=n(me,"LI",{});var BPe=s(w4);Bve=n(BPe,"STRONG",{});var hEt=s(Bve);MEr=r(hEt,"deberta-v2"),hEt.forEach(t),EEr=r(BPe," \u2014 "),MU=n(BPe,"A",{href:!0});var pEt=s(MU);CEr=r(pEt,"TFDebertaV2ForTokenClassification"),pEt.forEach(t),wEr=r(BPe," (DeBERTa-v2 model)"),BPe.forEach(t),AEr=i(me),A4=n(me,"LI",{});var IPe=s(A4);Ive=n(IPe,"STRONG",{});var _Et=s(Ive);yEr=r(_Et,"distilbert"),_Et.forEach(t),LEr=r(IPe," \u2014 "),EU=n(IPe,"A",{href:!0});var uEt=s(EU);xEr=r(uEt,"TFDistilBertForTokenClassification"),uEt.forEach(t),$Er=r(IPe," (DistilBERT model)"),IPe.forEach(t),kEr=i(me),y4=n(me,"LI",{});var qPe=s(y4);qve=n(qPe,"STRONG",{});var bEt=s(qve);SEr=r(bEt,"electra"),bEt.forEach(t),REr=r(qPe," \u2014 "),CU=n(qPe,"A",{href:!0});var vEt=s(CU);PEr=r(vEt,"TFElectraForTokenClassification"),vEt.forEach(t),BEr=r(qPe," (ELECTRA model)"),qPe.forEach(t),IEr=i(me),L4=n(me,"LI",{});var NPe=s(L4);Nve=n(NPe,"STRONG",{});var FEt=s(Nve);qEr=r(FEt,"flaubert"),FEt.forEach(t),NEr=r(NPe," \u2014 "),wU=n(NPe,"A",{href:!0});var TEt=s(wU);jEr=r(TEt,"TFFlaubertForTokenClassification"),TEt.forEach(t),DEr=r(NPe," (FlauBERT model)"),NPe.forEach(t),GEr=i(me),x4=n(me,"LI",{});var jPe=s(x4);jve=n(jPe,"STRONG",{});var MEt=s(jve);OEr=r(MEt,"funnel"),MEt.forEach(t),VEr=r(jPe," \u2014 "),AU=n(jPe,"A",{href:!0});var EEt=s(AU);XEr=r(EEt,"TFFunnelForTokenClassification"),EEt.forEach(t),zEr=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),WEr=i(me),$4=n(me,"LI",{});var DPe=s($4);Dve=n(DPe,"STRONG",{});var CEt=s(Dve);QEr=r(CEt,"layoutlm"),CEt.forEach(t),HEr=r(DPe," \u2014 "),yU=n(DPe,"A",{href:!0});var wEt=s(yU);UEr=r(wEt,"TFLayoutLMForTokenClassification"),wEt.forEach(t),JEr=r(DPe," (LayoutLM model)"),DPe.forEach(t),YEr=i(me),k4=n(me,"LI",{});var GPe=s(k4);Gve=n(GPe,"STRONG",{});var AEt=s(Gve);KEr=r(AEt,"longformer"),AEt.forEach(t),ZEr=r(GPe," \u2014 "),LU=n(GPe,"A",{href:!0});var yEt=s(LU);eCr=r(yEt,"TFLongformerForTokenClassification"),yEt.forEach(t),oCr=r(GPe," (Longformer model)"),GPe.forEach(t),rCr=i(me),S4=n(me,"LI",{});var OPe=s(S4);Ove=n(OPe,"STRONG",{});var LEt=s(Ove);tCr=r(LEt,"mobilebert"),LEt.forEach(t),aCr=r(OPe," \u2014 "),xU=n(OPe,"A",{href:!0});var xEt=s(xU);nCr=r(xEt,"TFMobileBertForTokenClassification"),xEt.forEach(t),sCr=r(OPe," (MobileBERT model)"),OPe.forEach(t),lCr=i(me),R4=n(me,"LI",{});var VPe=s(R4);Vve=n(VPe,"STRONG",{});var $Et=s(Vve);iCr=r($Et,"mpnet"),$Et.forEach(t),dCr=r(VPe," \u2014 "),$U=n(VPe,"A",{href:!0});var kEt=s($U);cCr=r(kEt,"TFMPNetForTokenClassification"),kEt.forEach(t),fCr=r(VPe," (MPNet model)"),VPe.forEach(t),mCr=i(me),P4=n(me,"LI",{});var XPe=s(P4);Xve=n(XPe,"STRONG",{});var SEt=s(Xve);gCr=r(SEt,"rembert"),SEt.forEach(t),hCr=r(XPe," \u2014 "),kU=n(XPe,"A",{href:!0});var REt=s(kU);pCr=r(REt,"TFRemBertForTokenClassification"),REt.forEach(t),_Cr=r(XPe," (RemBERT model)"),XPe.forEach(t),uCr=i(me),B4=n(me,"LI",{});var zPe=s(B4);zve=n(zPe,"STRONG",{});var PEt=s(zve);bCr=r(PEt,"roberta"),PEt.forEach(t),vCr=r(zPe," \u2014 "),SU=n(zPe,"A",{href:!0});var BEt=s(SU);FCr=r(BEt,"TFRobertaForTokenClassification"),BEt.forEach(t),TCr=r(zPe," (RoBERTa model)"),zPe.forEach(t),MCr=i(me),I4=n(me,"LI",{});var WPe=s(I4);Wve=n(WPe,"STRONG",{});var IEt=s(Wve);ECr=r(IEt,"roformer"),IEt.forEach(t),CCr=r(WPe," \u2014 "),RU=n(WPe,"A",{href:!0});var qEt=s(RU);wCr=r(qEt,"TFRoFormerForTokenClassification"),qEt.forEach(t),ACr=r(WPe," (RoFormer model)"),WPe.forEach(t),yCr=i(me),q4=n(me,"LI",{});var QPe=s(q4);Qve=n(QPe,"STRONG",{});var NEt=s(Qve);LCr=r(NEt,"xlm"),NEt.forEach(t),xCr=r(QPe," \u2014 "),PU=n(QPe,"A",{href:!0});var jEt=s(PU);$Cr=r(jEt,"TFXLMForTokenClassification"),jEt.forEach(t),kCr=r(QPe," (XLM model)"),QPe.forEach(t),SCr=i(me),N4=n(me,"LI",{});var HPe=s(N4);Hve=n(HPe,"STRONG",{});var DEt=s(Hve);RCr=r(DEt,"xlm-roberta"),DEt.forEach(t),PCr=r(HPe," \u2014 "),BU=n(HPe,"A",{href:!0});var GEt=s(BU);BCr=r(GEt,"TFXLMRobertaForTokenClassification"),GEt.forEach(t),ICr=r(HPe," (XLM-RoBERTa model)"),HPe.forEach(t),qCr=i(me),j4=n(me,"LI",{});var UPe=s(j4);Uve=n(UPe,"STRONG",{});var OEt=s(Uve);NCr=r(OEt,"xlnet"),OEt.forEach(t),jCr=r(UPe," \u2014 "),IU=n(UPe,"A",{href:!0});var VEt=s(IU);DCr=r(VEt,"TFXLNetForTokenClassification"),VEt.forEach(t),GCr=r(UPe," (XLNet model)"),UPe.forEach(t),me.forEach(t),OCr=i(Rl),T(D4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ONe=i(f),vc=n(f,"H2",{class:!0});var UDe=s(vc);G4=n(UDe,"A",{id:!0,class:!0,href:!0});var XEt=s(G4);Jve=n(XEt,"SPAN",{});var zEt=s(Jve);T(o7.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),VCr=i(UDe),Yve=n(UDe,"SPAN",{});var WEt=s(Yve);XCr=r(WEt,"TFAutoModelForQuestionAnswering"),WEt.forEach(t),UDe.forEach(t),VNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(r7.$$.fragment,Pl),zCr=i(Pl),Fc=n(Pl,"P",{});var dee=s(Fc);WCr=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qU=n(dee,"A",{href:!0});var QEt=s(qU);QCr=r(QEt,"from_pretrained()"),QEt.forEach(t),HCr=r(dee," class method or the "),NU=n(dee,"A",{href:!0});var HEt=s(NU);UCr=r(HEt,"from_config()"),HEt.forEach(t),JCr=r(dee,` class
method.`),dee.forEach(t),YCr=i(Pl),t7=n(Pl,"P",{});var JDe=s(t7);KCr=r(JDe,"This class cannot be instantiated directly using "),Kve=n(JDe,"CODE",{});var UEt=s(Kve);ZCr=r(UEt,"__init__()"),UEt.forEach(t),e3r=r(JDe," (throws an error)."),JDe.forEach(t),o3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var N0=s(Nt);T(a7.$$.fragment,N0),r3r=i(N0),Zve=n(N0,"P",{});var JEt=s(Zve);t3r=r(JEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JEt.forEach(t),a3r=i(N0),Tc=n(N0,"P",{});var cee=s(Tc);n3r=r(cee,`Note:
Loading a model from its configuration file does `),eFe=n(cee,"STRONG",{});var YEt=s(eFe);s3r=r(YEt,"not"),YEt.forEach(t),l3r=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(cee,"A",{href:!0});var KEt=s(jU);i3r=r(KEt,"from_pretrained()"),KEt.forEach(t),d3r=r(cee," to load the model weights."),cee.forEach(t),c3r=i(N0),T(O4.$$.fragment,N0),N0.forEach(t),f3r=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(n7.$$.fragment,Bl),m3r=i(Bl),oFe=n(Bl,"P",{});var ZEt=s(oFe);g3r=r(ZEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZEt.forEach(t),h3r=i(Bl),fn=n(Bl,"P",{});var j0=s(fn);p3r=r(j0,"The model class to instantiate is selected based on the "),rFe=n(j0,"CODE",{});var eCt=s(rFe);_3r=r(eCt,"model_type"),eCt.forEach(t),u3r=r(j0,` property of the config object (either
passed as an argument or loaded from `),tFe=n(j0,"CODE",{});var oCt=s(tFe);b3r=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),v3r=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(j0,"CODE",{});var rCt=s(aFe);F3r=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),T3r=r(j0,":"),j0.forEach(t),M3r=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);V4=n(ge,"LI",{});var JPe=s(V4);nFe=n(JPe,"STRONG",{});var tCt=s(nFe);E3r=r(tCt,"albert"),tCt.forEach(t),C3r=r(JPe," \u2014 "),DU=n(JPe,"A",{href:!0});var aCt=s(DU);w3r=r(aCt,"TFAlbertForQuestionAnswering"),aCt.forEach(t),A3r=r(JPe," (ALBERT model)"),JPe.forEach(t),y3r=i(ge),X4=n(ge,"LI",{});var YPe=s(X4);sFe=n(YPe,"STRONG",{});var nCt=s(sFe);L3r=r(nCt,"bert"),nCt.forEach(t),x3r=r(YPe," \u2014 "),GU=n(YPe,"A",{href:!0});var sCt=s(GU);$3r=r(sCt,"TFBertForQuestionAnswering"),sCt.forEach(t),k3r=r(YPe," (BERT model)"),YPe.forEach(t),S3r=i(ge),z4=n(ge,"LI",{});var KPe=s(z4);lFe=n(KPe,"STRONG",{});var lCt=s(lFe);R3r=r(lCt,"camembert"),lCt.forEach(t),P3r=r(KPe," \u2014 "),OU=n(KPe,"A",{href:!0});var iCt=s(OU);B3r=r(iCt,"TFCamembertForQuestionAnswering"),iCt.forEach(t),I3r=r(KPe," (CamemBERT model)"),KPe.forEach(t),q3r=i(ge),W4=n(ge,"LI",{});var ZPe=s(W4);iFe=n(ZPe,"STRONG",{});var dCt=s(iFe);N3r=r(dCt,"convbert"),dCt.forEach(t),j3r=r(ZPe," \u2014 "),VU=n(ZPe,"A",{href:!0});var cCt=s(VU);D3r=r(cCt,"TFConvBertForQuestionAnswering"),cCt.forEach(t),G3r=r(ZPe," (ConvBERT model)"),ZPe.forEach(t),O3r=i(ge),Q4=n(ge,"LI",{});var eBe=s(Q4);dFe=n(eBe,"STRONG",{});var fCt=s(dFe);V3r=r(fCt,"deberta"),fCt.forEach(t),X3r=r(eBe," \u2014 "),XU=n(eBe,"A",{href:!0});var mCt=s(XU);z3r=r(mCt,"TFDebertaForQuestionAnswering"),mCt.forEach(t),W3r=r(eBe," (DeBERTa model)"),eBe.forEach(t),Q3r=i(ge),H4=n(ge,"LI",{});var oBe=s(H4);cFe=n(oBe,"STRONG",{});var gCt=s(cFe);H3r=r(gCt,"deberta-v2"),gCt.forEach(t),U3r=r(oBe," \u2014 "),zU=n(oBe,"A",{href:!0});var hCt=s(zU);J3r=r(hCt,"TFDebertaV2ForQuestionAnswering"),hCt.forEach(t),Y3r=r(oBe," (DeBERTa-v2 model)"),oBe.forEach(t),K3r=i(ge),U4=n(ge,"LI",{});var rBe=s(U4);fFe=n(rBe,"STRONG",{});var pCt=s(fFe);Z3r=r(pCt,"distilbert"),pCt.forEach(t),ewr=r(rBe," \u2014 "),WU=n(rBe,"A",{href:!0});var _Ct=s(WU);owr=r(_Ct,"TFDistilBertForQuestionAnswering"),_Ct.forEach(t),rwr=r(rBe," (DistilBERT model)"),rBe.forEach(t),twr=i(ge),J4=n(ge,"LI",{});var tBe=s(J4);mFe=n(tBe,"STRONG",{});var uCt=s(mFe);awr=r(uCt,"electra"),uCt.forEach(t),nwr=r(tBe," \u2014 "),QU=n(tBe,"A",{href:!0});var bCt=s(QU);swr=r(bCt,"TFElectraForQuestionAnswering"),bCt.forEach(t),lwr=r(tBe," (ELECTRA model)"),tBe.forEach(t),iwr=i(ge),Y4=n(ge,"LI",{});var aBe=s(Y4);gFe=n(aBe,"STRONG",{});var vCt=s(gFe);dwr=r(vCt,"flaubert"),vCt.forEach(t),cwr=r(aBe," \u2014 "),HU=n(aBe,"A",{href:!0});var FCt=s(HU);fwr=r(FCt,"TFFlaubertForQuestionAnsweringSimple"),FCt.forEach(t),mwr=r(aBe," (FlauBERT model)"),aBe.forEach(t),gwr=i(ge),K4=n(ge,"LI",{});var nBe=s(K4);hFe=n(nBe,"STRONG",{});var TCt=s(hFe);hwr=r(TCt,"funnel"),TCt.forEach(t),pwr=r(nBe," \u2014 "),UU=n(nBe,"A",{href:!0});var MCt=s(UU);_wr=r(MCt,"TFFunnelForQuestionAnswering"),MCt.forEach(t),uwr=r(nBe," (Funnel Transformer model)"),nBe.forEach(t),bwr=i(ge),Z4=n(ge,"LI",{});var sBe=s(Z4);pFe=n(sBe,"STRONG",{});var ECt=s(pFe);vwr=r(ECt,"gptj"),ECt.forEach(t),Fwr=r(sBe," \u2014 "),JU=n(sBe,"A",{href:!0});var CCt=s(JU);Twr=r(CCt,"TFGPTJForQuestionAnswering"),CCt.forEach(t),Mwr=r(sBe," (GPT-J model)"),sBe.forEach(t),Ewr=i(ge),eE=n(ge,"LI",{});var lBe=s(eE);_Fe=n(lBe,"STRONG",{});var wCt=s(_Fe);Cwr=r(wCt,"longformer"),wCt.forEach(t),wwr=r(lBe," \u2014 "),YU=n(lBe,"A",{href:!0});var ACt=s(YU);Awr=r(ACt,"TFLongformerForQuestionAnswering"),ACt.forEach(t),ywr=r(lBe," (Longformer model)"),lBe.forEach(t),Lwr=i(ge),oE=n(ge,"LI",{});var iBe=s(oE);uFe=n(iBe,"STRONG",{});var yCt=s(uFe);xwr=r(yCt,"mobilebert"),yCt.forEach(t),$wr=r(iBe," \u2014 "),KU=n(iBe,"A",{href:!0});var LCt=s(KU);kwr=r(LCt,"TFMobileBertForQuestionAnswering"),LCt.forEach(t),Swr=r(iBe," (MobileBERT model)"),iBe.forEach(t),Rwr=i(ge),rE=n(ge,"LI",{});var dBe=s(rE);bFe=n(dBe,"STRONG",{});var xCt=s(bFe);Pwr=r(xCt,"mpnet"),xCt.forEach(t),Bwr=r(dBe," \u2014 "),ZU=n(dBe,"A",{href:!0});var $Ct=s(ZU);Iwr=r($Ct,"TFMPNetForQuestionAnswering"),$Ct.forEach(t),qwr=r(dBe," (MPNet model)"),dBe.forEach(t),Nwr=i(ge),tE=n(ge,"LI",{});var cBe=s(tE);vFe=n(cBe,"STRONG",{});var kCt=s(vFe);jwr=r(kCt,"rembert"),kCt.forEach(t),Dwr=r(cBe," \u2014 "),eJ=n(cBe,"A",{href:!0});var SCt=s(eJ);Gwr=r(SCt,"TFRemBertForQuestionAnswering"),SCt.forEach(t),Owr=r(cBe," (RemBERT model)"),cBe.forEach(t),Vwr=i(ge),aE=n(ge,"LI",{});var fBe=s(aE);FFe=n(fBe,"STRONG",{});var RCt=s(FFe);Xwr=r(RCt,"roberta"),RCt.forEach(t),zwr=r(fBe," \u2014 "),oJ=n(fBe,"A",{href:!0});var PCt=s(oJ);Wwr=r(PCt,"TFRobertaForQuestionAnswering"),PCt.forEach(t),Qwr=r(fBe," (RoBERTa model)"),fBe.forEach(t),Hwr=i(ge),nE=n(ge,"LI",{});var mBe=s(nE);TFe=n(mBe,"STRONG",{});var BCt=s(TFe);Uwr=r(BCt,"roformer"),BCt.forEach(t),Jwr=r(mBe," \u2014 "),rJ=n(mBe,"A",{href:!0});var ICt=s(rJ);Ywr=r(ICt,"TFRoFormerForQuestionAnswering"),ICt.forEach(t),Kwr=r(mBe," (RoFormer model)"),mBe.forEach(t),Zwr=i(ge),sE=n(ge,"LI",{});var gBe=s(sE);MFe=n(gBe,"STRONG",{});var qCt=s(MFe);e0r=r(qCt,"xlm"),qCt.forEach(t),o0r=r(gBe," \u2014 "),tJ=n(gBe,"A",{href:!0});var NCt=s(tJ);r0r=r(NCt,"TFXLMForQuestionAnsweringSimple"),NCt.forEach(t),t0r=r(gBe," (XLM model)"),gBe.forEach(t),a0r=i(ge),lE=n(ge,"LI",{});var hBe=s(lE);EFe=n(hBe,"STRONG",{});var jCt=s(EFe);n0r=r(jCt,"xlm-roberta"),jCt.forEach(t),s0r=r(hBe," \u2014 "),aJ=n(hBe,"A",{href:!0});var DCt=s(aJ);l0r=r(DCt,"TFXLMRobertaForQuestionAnswering"),DCt.forEach(t),i0r=r(hBe," (XLM-RoBERTa model)"),hBe.forEach(t),d0r=i(ge),iE=n(ge,"LI",{});var pBe=s(iE);CFe=n(pBe,"STRONG",{});var GCt=s(CFe);c0r=r(GCt,"xlnet"),GCt.forEach(t),f0r=r(pBe," \u2014 "),nJ=n(pBe,"A",{href:!0});var OCt=s(nJ);m0r=r(OCt,"TFXLNetForQuestionAnsweringSimple"),OCt.forEach(t),g0r=r(pBe," (XLNet model)"),pBe.forEach(t),ge.forEach(t),h0r=i(Bl),T(dE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),XNe=i(f),Mc=n(f,"H2",{class:!0});var YDe=s(Mc);cE=n(YDe,"A",{id:!0,class:!0,href:!0});var VCt=s(cE);wFe=n(VCt,"SPAN",{});var XCt=s(wFe);T(s7.$$.fragment,XCt),XCt.forEach(t),VCt.forEach(t),p0r=i(YDe),AFe=n(YDe,"SPAN",{});var zCt=s(AFe);_0r=r(zCt,"TFAutoModelForVision2Seq"),zCt.forEach(t),YDe.forEach(t),zNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(l7.$$.fragment,Il),u0r=i(Il),Ec=n(Il,"P",{});var fee=s(Ec);b0r=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sJ=n(fee,"A",{href:!0});var WCt=s(sJ);v0r=r(WCt,"from_pretrained()"),WCt.forEach(t),F0r=r(fee," class method or the "),lJ=n(fee,"A",{href:!0});var QCt=s(lJ);T0r=r(QCt,"from_config()"),QCt.forEach(t),M0r=r(fee,` class
method.`),fee.forEach(t),E0r=i(Il),i7=n(Il,"P",{});var KDe=s(i7);C0r=r(KDe,"This class cannot be instantiated directly using "),yFe=n(KDe,"CODE",{});var HCt=s(yFe);w0r=r(HCt,"__init__()"),HCt.forEach(t),A0r=r(KDe," (throws an error)."),KDe.forEach(t),y0r=i(Il),jt=n(Il,"DIV",{class:!0});var D0=s(jt);T(d7.$$.fragment,D0),L0r=i(D0),LFe=n(D0,"P",{});var UCt=s(LFe);x0r=r(UCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UCt.forEach(t),$0r=i(D0),Cc=n(D0,"P",{});var mee=s(Cc);k0r=r(mee,`Note:
Loading a model from its configuration file does `),xFe=n(mee,"STRONG",{});var JCt=s(xFe);S0r=r(JCt,"not"),JCt.forEach(t),R0r=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(mee,"A",{href:!0});var YCt=s(iJ);P0r=r(YCt,"from_pretrained()"),YCt.forEach(t),B0r=r(mee," to load the model weights."),mee.forEach(t),I0r=i(D0),T(fE.$$.fragment,D0),D0.forEach(t),q0r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(c7.$$.fragment,ql),N0r=i(ql),$Fe=n(ql,"P",{});var KCt=s($Fe);j0r=r(KCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KCt.forEach(t),D0r=i(ql),mn=n(ql,"P",{});var G0=s(mn);G0r=r(G0,"The model class to instantiate is selected based on the "),kFe=n(G0,"CODE",{});var ZCt=s(kFe);O0r=r(ZCt,"model_type"),ZCt.forEach(t),V0r=r(G0,` property of the config object (either
passed as an argument or loaded from `),SFe=n(G0,"CODE",{});var e3t=s(SFe);X0r=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),z0r=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(G0,"CODE",{});var o3t=s(RFe);W0r=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),Q0r=r(G0,":"),G0.forEach(t),H0r=i(ql),PFe=n(ql,"UL",{});var r3t=s(PFe);mE=n(r3t,"LI",{});var _Be=s(mE);BFe=n(_Be,"STRONG",{});var t3t=s(BFe);U0r=r(t3t,"vision-encoder-decoder"),t3t.forEach(t),J0r=r(_Be," \u2014 "),dJ=n(_Be,"A",{href:!0});var a3t=s(dJ);Y0r=r(a3t,"TFVisionEncoderDecoderModel"),a3t.forEach(t),K0r=r(_Be," (Vision Encoder decoder model)"),_Be.forEach(t),r3t.forEach(t),Z0r=i(ql),T(gE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),WNe=i(f),wc=n(f,"H2",{class:!0});var ZDe=s(wc);hE=n(ZDe,"A",{id:!0,class:!0,href:!0});var n3t=s(hE);IFe=n(n3t,"SPAN",{});var s3t=s(IFe);T(f7.$$.fragment,s3t),s3t.forEach(t),n3t.forEach(t),eAr=i(ZDe),qFe=n(ZDe,"SPAN",{});var l3t=s(qFe);oAr=r(l3t,"TFAutoModelForSpeechSeq2Seq"),l3t.forEach(t),ZDe.forEach(t),QNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(m7.$$.fragment,Nl),rAr=i(Nl),Ac=n(Nl,"P",{});var gee=s(Ac);tAr=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cJ=n(gee,"A",{href:!0});var i3t=s(cJ);aAr=r(i3t,"from_pretrained()"),i3t.forEach(t),nAr=r(gee," class method or the "),fJ=n(gee,"A",{href:!0});var d3t=s(fJ);sAr=r(d3t,"from_config()"),d3t.forEach(t),lAr=r(gee,` class
method.`),gee.forEach(t),iAr=i(Nl),g7=n(Nl,"P",{});var eGe=s(g7);dAr=r(eGe,"This class cannot be instantiated directly using "),NFe=n(eGe,"CODE",{});var c3t=s(NFe);cAr=r(c3t,"__init__()"),c3t.forEach(t),fAr=r(eGe," (throws an error)."),eGe.forEach(t),mAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var O0=s(Dt);T(h7.$$.fragment,O0),gAr=i(O0),jFe=n(O0,"P",{});var f3t=s(jFe);hAr=r(f3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),f3t.forEach(t),pAr=i(O0),yc=n(O0,"P",{});var hee=s(yc);_Ar=r(hee,`Note:
Loading a model from its configuration file does `),DFe=n(hee,"STRONG",{});var m3t=s(DFe);uAr=r(m3t,"not"),m3t.forEach(t),bAr=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(hee,"A",{href:!0});var g3t=s(mJ);vAr=r(g3t,"from_pretrained()"),g3t.forEach(t),FAr=r(hee," to load the model weights."),hee.forEach(t),TAr=i(O0),T(pE.$$.fragment,O0),O0.forEach(t),MAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(p7.$$.fragment,jl),EAr=i(jl),GFe=n(jl,"P",{});var h3t=s(GFe);CAr=r(h3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),h3t.forEach(t),wAr=i(jl),gn=n(jl,"P",{});var V0=s(gn);AAr=r(V0,"The model class to instantiate is selected based on the "),OFe=n(V0,"CODE",{});var p3t=s(OFe);yAr=r(p3t,"model_type"),p3t.forEach(t),LAr=r(V0,` property of the config object (either
passed as an argument or loaded from `),VFe=n(V0,"CODE",{});var _3t=s(VFe);xAr=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),$Ar=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(V0,"CODE",{});var u3t=s(XFe);kAr=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),SAr=r(V0,":"),V0.forEach(t),RAr=i(jl),zFe=n(jl,"UL",{});var b3t=s(zFe);_E=n(b3t,"LI",{});var uBe=s(_E);WFe=n(uBe,"STRONG",{});var v3t=s(WFe);PAr=r(v3t,"speech_to_text"),v3t.forEach(t),BAr=r(uBe," \u2014 "),gJ=n(uBe,"A",{href:!0});var F3t=s(gJ);IAr=r(F3t,"TFSpeech2TextForConditionalGeneration"),F3t.forEach(t),qAr=r(uBe," (Speech2Text model)"),uBe.forEach(t),b3t.forEach(t),NAr=i(jl),T(uE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),HNe=i(f),Lc=n(f,"H2",{class:!0});var oGe=s(Lc);bE=n(oGe,"A",{id:!0,class:!0,href:!0});var T3t=s(bE);QFe=n(T3t,"SPAN",{});var M3t=s(QFe);T(_7.$$.fragment,M3t),M3t.forEach(t),T3t.forEach(t),jAr=i(oGe),HFe=n(oGe,"SPAN",{});var E3t=s(HFe);DAr=r(E3t,"FlaxAutoModel"),E3t.forEach(t),oGe.forEach(t),UNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(u7.$$.fragment,Dl),GAr=i(Dl),xc=n(Dl,"P",{});var pee=s(xc);OAr=r(pee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hJ=n(pee,"A",{href:!0});var C3t=s(hJ);VAr=r(C3t,"from_pretrained()"),C3t.forEach(t),XAr=r(pee," class method or the "),pJ=n(pee,"A",{href:!0});var w3t=s(pJ);zAr=r(w3t,"from_config()"),w3t.forEach(t),WAr=r(pee,` class
method.`),pee.forEach(t),QAr=i(Dl),b7=n(Dl,"P",{});var rGe=s(b7);HAr=r(rGe,"This class cannot be instantiated directly using "),UFe=n(rGe,"CODE",{});var A3t=s(UFe);UAr=r(A3t,"__init__()"),A3t.forEach(t),JAr=r(rGe," (throws an error)."),rGe.forEach(t),YAr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var X0=s(Gt);T(v7.$$.fragment,X0),KAr=i(X0),JFe=n(X0,"P",{});var y3t=s(JFe);ZAr=r(y3t,"Instantiates one of the base model classes of the library from a configuration."),y3t.forEach(t),eyr=i(X0),$c=n(X0,"P",{});var _ee=s($c);oyr=r(_ee,`Note:
Loading a model from its configuration file does `),YFe=n(_ee,"STRONG",{});var L3t=s(YFe);ryr=r(L3t,"not"),L3t.forEach(t),tyr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(_ee,"A",{href:!0});var x3t=s(_J);ayr=r(x3t,"from_pretrained()"),x3t.forEach(t),nyr=r(_ee," to load the model weights."),_ee.forEach(t),syr=i(X0),T(vE.$$.fragment,X0),X0.forEach(t),lyr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(F7.$$.fragment,Gl),iyr=i(Gl),KFe=n(Gl,"P",{});var $3t=s(KFe);dyr=r($3t,"Instantiate one of the base model classes of the library from a pretrained model."),$3t.forEach(t),cyr=i(Gl),hn=n(Gl,"P",{});var z0=s(hn);fyr=r(z0,"The model class to instantiate is selected based on the "),ZFe=n(z0,"CODE",{});var k3t=s(ZFe);myr=r(k3t,"model_type"),k3t.forEach(t),gyr=r(z0,` property of the config object (either
passed as an argument or loaded from `),eTe=n(z0,"CODE",{});var S3t=s(eTe);hyr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),pyr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(z0,"CODE",{});var R3t=s(oTe);_yr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),uyr=r(z0,":"),z0.forEach(t),byr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);FE=n(ne,"LI",{});var bBe=s(FE);rTe=n(bBe,"STRONG",{});var P3t=s(rTe);vyr=r(P3t,"albert"),P3t.forEach(t),Fyr=r(bBe," \u2014 "),uJ=n(bBe,"A",{href:!0});var B3t=s(uJ);Tyr=r(B3t,"FlaxAlbertModel"),B3t.forEach(t),Myr=r(bBe," (ALBERT model)"),bBe.forEach(t),Eyr=i(ne),TE=n(ne,"LI",{});var vBe=s(TE);tTe=n(vBe,"STRONG",{});var I3t=s(tTe);Cyr=r(I3t,"bart"),I3t.forEach(t),wyr=r(vBe," \u2014 "),bJ=n(vBe,"A",{href:!0});var q3t=s(bJ);Ayr=r(q3t,"FlaxBartModel"),q3t.forEach(t),yyr=r(vBe," (BART model)"),vBe.forEach(t),Lyr=i(ne),ME=n(ne,"LI",{});var FBe=s(ME);aTe=n(FBe,"STRONG",{});var N3t=s(aTe);xyr=r(N3t,"beit"),N3t.forEach(t),$yr=r(FBe," \u2014 "),vJ=n(FBe,"A",{href:!0});var j3t=s(vJ);kyr=r(j3t,"FlaxBeitModel"),j3t.forEach(t),Syr=r(FBe," (BEiT model)"),FBe.forEach(t),Ryr=i(ne),EE=n(ne,"LI",{});var TBe=s(EE);nTe=n(TBe,"STRONG",{});var D3t=s(nTe);Pyr=r(D3t,"bert"),D3t.forEach(t),Byr=r(TBe," \u2014 "),FJ=n(TBe,"A",{href:!0});var G3t=s(FJ);Iyr=r(G3t,"FlaxBertModel"),G3t.forEach(t),qyr=r(TBe," (BERT model)"),TBe.forEach(t),Nyr=i(ne),CE=n(ne,"LI",{});var MBe=s(CE);sTe=n(MBe,"STRONG",{});var O3t=s(sTe);jyr=r(O3t,"big_bird"),O3t.forEach(t),Dyr=r(MBe," \u2014 "),TJ=n(MBe,"A",{href:!0});var V3t=s(TJ);Gyr=r(V3t,"FlaxBigBirdModel"),V3t.forEach(t),Oyr=r(MBe," (BigBird model)"),MBe.forEach(t),Vyr=i(ne),wE=n(ne,"LI",{});var EBe=s(wE);lTe=n(EBe,"STRONG",{});var X3t=s(lTe);Xyr=r(X3t,"blenderbot"),X3t.forEach(t),zyr=r(EBe," \u2014 "),MJ=n(EBe,"A",{href:!0});var z3t=s(MJ);Wyr=r(z3t,"FlaxBlenderbotModel"),z3t.forEach(t),Qyr=r(EBe," (Blenderbot model)"),EBe.forEach(t),Hyr=i(ne),AE=n(ne,"LI",{});var CBe=s(AE);iTe=n(CBe,"STRONG",{});var W3t=s(iTe);Uyr=r(W3t,"blenderbot-small"),W3t.forEach(t),Jyr=r(CBe," \u2014 "),EJ=n(CBe,"A",{href:!0});var Q3t=s(EJ);Yyr=r(Q3t,"FlaxBlenderbotSmallModel"),Q3t.forEach(t),Kyr=r(CBe," (BlenderbotSmall model)"),CBe.forEach(t),Zyr=i(ne),yE=n(ne,"LI",{});var wBe=s(yE);dTe=n(wBe,"STRONG",{});var H3t=s(dTe);e8r=r(H3t,"clip"),H3t.forEach(t),o8r=r(wBe," \u2014 "),CJ=n(wBe,"A",{href:!0});var U3t=s(CJ);r8r=r(U3t,"FlaxCLIPModel"),U3t.forEach(t),t8r=r(wBe," (CLIP model)"),wBe.forEach(t),a8r=i(ne),LE=n(ne,"LI",{});var ABe=s(LE);cTe=n(ABe,"STRONG",{});var J3t=s(cTe);n8r=r(J3t,"distilbert"),J3t.forEach(t),s8r=r(ABe," \u2014 "),wJ=n(ABe,"A",{href:!0});var Y3t=s(wJ);l8r=r(Y3t,"FlaxDistilBertModel"),Y3t.forEach(t),i8r=r(ABe," (DistilBERT model)"),ABe.forEach(t),d8r=i(ne),xE=n(ne,"LI",{});var yBe=s(xE);fTe=n(yBe,"STRONG",{});var K3t=s(fTe);c8r=r(K3t,"electra"),K3t.forEach(t),f8r=r(yBe," \u2014 "),AJ=n(yBe,"A",{href:!0});var Z3t=s(AJ);m8r=r(Z3t,"FlaxElectraModel"),Z3t.forEach(t),g8r=r(yBe," (ELECTRA model)"),yBe.forEach(t),h8r=i(ne),$E=n(ne,"LI",{});var LBe=s($E);mTe=n(LBe,"STRONG",{});var ewt=s(mTe);p8r=r(ewt,"gpt2"),ewt.forEach(t),_8r=r(LBe," \u2014 "),yJ=n(LBe,"A",{href:!0});var owt=s(yJ);u8r=r(owt,"FlaxGPT2Model"),owt.forEach(t),b8r=r(LBe," (OpenAI GPT-2 model)"),LBe.forEach(t),v8r=i(ne),kE=n(ne,"LI",{});var xBe=s(kE);gTe=n(xBe,"STRONG",{});var rwt=s(gTe);F8r=r(rwt,"gpt_neo"),rwt.forEach(t),T8r=r(xBe," \u2014 "),LJ=n(xBe,"A",{href:!0});var twt=s(LJ);M8r=r(twt,"FlaxGPTNeoModel"),twt.forEach(t),E8r=r(xBe," (GPT Neo model)"),xBe.forEach(t),C8r=i(ne),SE=n(ne,"LI",{});var $Be=s(SE);hTe=n($Be,"STRONG",{});var awt=s(hTe);w8r=r(awt,"gptj"),awt.forEach(t),A8r=r($Be," \u2014 "),xJ=n($Be,"A",{href:!0});var nwt=s(xJ);y8r=r(nwt,"FlaxGPTJModel"),nwt.forEach(t),L8r=r($Be," (GPT-J model)"),$Be.forEach(t),x8r=i(ne),RE=n(ne,"LI",{});var kBe=s(RE);pTe=n(kBe,"STRONG",{});var swt=s(pTe);$8r=r(swt,"marian"),swt.forEach(t),k8r=r(kBe," \u2014 "),$J=n(kBe,"A",{href:!0});var lwt=s($J);S8r=r(lwt,"FlaxMarianModel"),lwt.forEach(t),R8r=r(kBe," (Marian model)"),kBe.forEach(t),P8r=i(ne),PE=n(ne,"LI",{});var SBe=s(PE);_Te=n(SBe,"STRONG",{});var iwt=s(_Te);B8r=r(iwt,"mbart"),iwt.forEach(t),I8r=r(SBe," \u2014 "),kJ=n(SBe,"A",{href:!0});var dwt=s(kJ);q8r=r(dwt,"FlaxMBartModel"),dwt.forEach(t),N8r=r(SBe," (mBART model)"),SBe.forEach(t),j8r=i(ne),BE=n(ne,"LI",{});var RBe=s(BE);uTe=n(RBe,"STRONG",{});var cwt=s(uTe);D8r=r(cwt,"mt5"),cwt.forEach(t),G8r=r(RBe," \u2014 "),SJ=n(RBe,"A",{href:!0});var fwt=s(SJ);O8r=r(fwt,"FlaxMT5Model"),fwt.forEach(t),V8r=r(RBe," (mT5 model)"),RBe.forEach(t),X8r=i(ne),IE=n(ne,"LI",{});var PBe=s(IE);bTe=n(PBe,"STRONG",{});var mwt=s(bTe);z8r=r(mwt,"pegasus"),mwt.forEach(t),W8r=r(PBe," \u2014 "),RJ=n(PBe,"A",{href:!0});var gwt=s(RJ);Q8r=r(gwt,"FlaxPegasusModel"),gwt.forEach(t),H8r=r(PBe," (Pegasus model)"),PBe.forEach(t),U8r=i(ne),qE=n(ne,"LI",{});var BBe=s(qE);vTe=n(BBe,"STRONG",{});var hwt=s(vTe);J8r=r(hwt,"roberta"),hwt.forEach(t),Y8r=r(BBe," \u2014 "),PJ=n(BBe,"A",{href:!0});var pwt=s(PJ);K8r=r(pwt,"FlaxRobertaModel"),pwt.forEach(t),Z8r=r(BBe," (RoBERTa model)"),BBe.forEach(t),eLr=i(ne),NE=n(ne,"LI",{});var IBe=s(NE);FTe=n(IBe,"STRONG",{});var _wt=s(FTe);oLr=r(_wt,"roformer"),_wt.forEach(t),rLr=r(IBe," \u2014 "),BJ=n(IBe,"A",{href:!0});var uwt=s(BJ);tLr=r(uwt,"FlaxRoFormerModel"),uwt.forEach(t),aLr=r(IBe," (RoFormer model)"),IBe.forEach(t),nLr=i(ne),jE=n(ne,"LI",{});var qBe=s(jE);TTe=n(qBe,"STRONG",{});var bwt=s(TTe);sLr=r(bwt,"t5"),bwt.forEach(t),lLr=r(qBe," \u2014 "),IJ=n(qBe,"A",{href:!0});var vwt=s(IJ);iLr=r(vwt,"FlaxT5Model"),vwt.forEach(t),dLr=r(qBe," (T5 model)"),qBe.forEach(t),cLr=i(ne),DE=n(ne,"LI",{});var NBe=s(DE);MTe=n(NBe,"STRONG",{});var Fwt=s(MTe);fLr=r(Fwt,"vision-text-dual-encoder"),Fwt.forEach(t),mLr=r(NBe," \u2014 "),qJ=n(NBe,"A",{href:!0});var Twt=s(qJ);gLr=r(Twt,"FlaxVisionTextDualEncoderModel"),Twt.forEach(t),hLr=r(NBe," (VisionTextDualEncoder model)"),NBe.forEach(t),pLr=i(ne),GE=n(ne,"LI",{});var jBe=s(GE);ETe=n(jBe,"STRONG",{});var Mwt=s(ETe);_Lr=r(Mwt,"vit"),Mwt.forEach(t),uLr=r(jBe," \u2014 "),NJ=n(jBe,"A",{href:!0});var Ewt=s(NJ);bLr=r(Ewt,"FlaxViTModel"),Ewt.forEach(t),vLr=r(jBe," (ViT model)"),jBe.forEach(t),FLr=i(ne),OE=n(ne,"LI",{});var DBe=s(OE);CTe=n(DBe,"STRONG",{});var Cwt=s(CTe);TLr=r(Cwt,"wav2vec2"),Cwt.forEach(t),MLr=r(DBe," \u2014 "),jJ=n(DBe,"A",{href:!0});var wwt=s(jJ);ELr=r(wwt,"FlaxWav2Vec2Model"),wwt.forEach(t),CLr=r(DBe," (Wav2Vec2 model)"),DBe.forEach(t),wLr=i(ne),VE=n(ne,"LI",{});var GBe=s(VE);wTe=n(GBe,"STRONG",{});var Awt=s(wTe);ALr=r(Awt,"xglm"),Awt.forEach(t),yLr=r(GBe," \u2014 "),DJ=n(GBe,"A",{href:!0});var ywt=s(DJ);LLr=r(ywt,"FlaxXGLMModel"),ywt.forEach(t),xLr=r(GBe," (XGLM model)"),GBe.forEach(t),$Lr=i(ne),XE=n(ne,"LI",{});var OBe=s(XE);ATe=n(OBe,"STRONG",{});var Lwt=s(ATe);kLr=r(Lwt,"xlm-roberta"),Lwt.forEach(t),SLr=r(OBe," \u2014 "),GJ=n(OBe,"A",{href:!0});var xwt=s(GJ);RLr=r(xwt,"FlaxXLMRobertaModel"),xwt.forEach(t),PLr=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),ne.forEach(t),BLr=i(Gl),T(zE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),JNe=i(f),kc=n(f,"H2",{class:!0});var tGe=s(kc);WE=n(tGe,"A",{id:!0,class:!0,href:!0});var $wt=s(WE);yTe=n($wt,"SPAN",{});var kwt=s(yTe);T(T7.$$.fragment,kwt),kwt.forEach(t),$wt.forEach(t),ILr=i(tGe),LTe=n(tGe,"SPAN",{});var Swt=s(LTe);qLr=r(Swt,"FlaxAutoModelForCausalLM"),Swt.forEach(t),tGe.forEach(t),YNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(M7.$$.fragment,Ol),NLr=i(Ol),Sc=n(Ol,"P",{});var uee=s(Sc);jLr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OJ=n(uee,"A",{href:!0});var Rwt=s(OJ);DLr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),GLr=r(uee," class method or the "),VJ=n(uee,"A",{href:!0});var Pwt=s(VJ);OLr=r(Pwt,"from_config()"),Pwt.forEach(t),VLr=r(uee,` class
method.`),uee.forEach(t),XLr=i(Ol),E7=n(Ol,"P",{});var aGe=s(E7);zLr=r(aGe,"This class cannot be instantiated directly using "),xTe=n(aGe,"CODE",{});var Bwt=s(xTe);WLr=r(Bwt,"__init__()"),Bwt.forEach(t),QLr=r(aGe," (throws an error)."),aGe.forEach(t),HLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var W0=s(Ot);T(C7.$$.fragment,W0),ULr=i(W0),$Te=n(W0,"P",{});var Iwt=s($Te);JLr=r(Iwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Iwt.forEach(t),YLr=i(W0),Rc=n(W0,"P",{});var bee=s(Rc);KLr=r(bee,`Note:
Loading a model from its configuration file does `),kTe=n(bee,"STRONG",{});var qwt=s(kTe);ZLr=r(qwt,"not"),qwt.forEach(t),e7r=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(bee,"A",{href:!0});var Nwt=s(XJ);o7r=r(Nwt,"from_pretrained()"),Nwt.forEach(t),r7r=r(bee," to load the model weights."),bee.forEach(t),t7r=i(W0),T(QE.$$.fragment,W0),W0.forEach(t),a7r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(w7.$$.fragment,Vl),n7r=i(Vl),STe=n(Vl,"P",{});var jwt=s(STe);s7r=r(jwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jwt.forEach(t),l7r=i(Vl),pn=n(Vl,"P",{});var Q0=s(pn);i7r=r(Q0,"The model class to instantiate is selected based on the "),RTe=n(Q0,"CODE",{});var Dwt=s(RTe);d7r=r(Dwt,"model_type"),Dwt.forEach(t),c7r=r(Q0,` property of the config object (either
passed as an argument or loaded from `),PTe=n(Q0,"CODE",{});var Gwt=s(PTe);f7r=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),m7r=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(Q0,"CODE",{});var Owt=s(BTe);g7r=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),h7r=r(Q0,":"),Q0.forEach(t),p7r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);HE=n(Xe,"LI",{});var VBe=s(HE);ITe=n(VBe,"STRONG",{});var Vwt=s(ITe);_7r=r(Vwt,"bart"),Vwt.forEach(t),u7r=r(VBe," \u2014 "),zJ=n(VBe,"A",{href:!0});var Xwt=s(zJ);b7r=r(Xwt,"FlaxBartForCausalLM"),Xwt.forEach(t),v7r=r(VBe," (BART model)"),VBe.forEach(t),F7r=i(Xe),UE=n(Xe,"LI",{});var XBe=s(UE);qTe=n(XBe,"STRONG",{});var zwt=s(qTe);T7r=r(zwt,"bert"),zwt.forEach(t),M7r=r(XBe," \u2014 "),WJ=n(XBe,"A",{href:!0});var Wwt=s(WJ);E7r=r(Wwt,"FlaxBertForCausalLM"),Wwt.forEach(t),C7r=r(XBe," (BERT model)"),XBe.forEach(t),w7r=i(Xe),JE=n(Xe,"LI",{});var zBe=s(JE);NTe=n(zBe,"STRONG",{});var Qwt=s(NTe);A7r=r(Qwt,"big_bird"),Qwt.forEach(t),y7r=r(zBe," \u2014 "),QJ=n(zBe,"A",{href:!0});var Hwt=s(QJ);L7r=r(Hwt,"FlaxBigBirdForCausalLM"),Hwt.forEach(t),x7r=r(zBe," (BigBird model)"),zBe.forEach(t),$7r=i(Xe),YE=n(Xe,"LI",{});var WBe=s(YE);jTe=n(WBe,"STRONG",{});var Uwt=s(jTe);k7r=r(Uwt,"electra"),Uwt.forEach(t),S7r=r(WBe," \u2014 "),HJ=n(WBe,"A",{href:!0});var Jwt=s(HJ);R7r=r(Jwt,"FlaxElectraForCausalLM"),Jwt.forEach(t),P7r=r(WBe," (ELECTRA model)"),WBe.forEach(t),B7r=i(Xe),KE=n(Xe,"LI",{});var QBe=s(KE);DTe=n(QBe,"STRONG",{});var Ywt=s(DTe);I7r=r(Ywt,"gpt2"),Ywt.forEach(t),q7r=r(QBe," \u2014 "),UJ=n(QBe,"A",{href:!0});var Kwt=s(UJ);N7r=r(Kwt,"FlaxGPT2LMHeadModel"),Kwt.forEach(t),j7r=r(QBe," (OpenAI GPT-2 model)"),QBe.forEach(t),D7r=i(Xe),ZE=n(Xe,"LI",{});var HBe=s(ZE);GTe=n(HBe,"STRONG",{});var Zwt=s(GTe);G7r=r(Zwt,"gpt_neo"),Zwt.forEach(t),O7r=r(HBe," \u2014 "),JJ=n(HBe,"A",{href:!0});var e0t=s(JJ);V7r=r(e0t,"FlaxGPTNeoForCausalLM"),e0t.forEach(t),X7r=r(HBe," (GPT Neo model)"),HBe.forEach(t),z7r=i(Xe),eC=n(Xe,"LI",{});var UBe=s(eC);OTe=n(UBe,"STRONG",{});var o0t=s(OTe);W7r=r(o0t,"gptj"),o0t.forEach(t),Q7r=r(UBe," \u2014 "),YJ=n(UBe,"A",{href:!0});var r0t=s(YJ);H7r=r(r0t,"FlaxGPTJForCausalLM"),r0t.forEach(t),U7r=r(UBe," (GPT-J model)"),UBe.forEach(t),J7r=i(Xe),oC=n(Xe,"LI",{});var JBe=s(oC);VTe=n(JBe,"STRONG",{});var t0t=s(VTe);Y7r=r(t0t,"roberta"),t0t.forEach(t),K7r=r(JBe," \u2014 "),KJ=n(JBe,"A",{href:!0});var a0t=s(KJ);Z7r=r(a0t,"FlaxRobertaForCausalLM"),a0t.forEach(t),exr=r(JBe," (RoBERTa model)"),JBe.forEach(t),oxr=i(Xe),rC=n(Xe,"LI",{});var YBe=s(rC);XTe=n(YBe,"STRONG",{});var n0t=s(XTe);rxr=r(n0t,"xglm"),n0t.forEach(t),txr=r(YBe," \u2014 "),ZJ=n(YBe,"A",{href:!0});var s0t=s(ZJ);axr=r(s0t,"FlaxXGLMForCausalLM"),s0t.forEach(t),nxr=r(YBe," (XGLM model)"),YBe.forEach(t),Xe.forEach(t),sxr=i(Vl),T(tC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),KNe=i(f),Pc=n(f,"H2",{class:!0});var nGe=s(Pc);aC=n(nGe,"A",{id:!0,class:!0,href:!0});var l0t=s(aC);zTe=n(l0t,"SPAN",{});var i0t=s(zTe);T(A7.$$.fragment,i0t),i0t.forEach(t),l0t.forEach(t),lxr=i(nGe),WTe=n(nGe,"SPAN",{});var d0t=s(WTe);ixr=r(d0t,"FlaxAutoModelForPreTraining"),d0t.forEach(t),nGe.forEach(t),ZNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(y7.$$.fragment,Xl),dxr=i(Xl),Bc=n(Xl,"P",{});var vee=s(Bc);cxr=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eY=n(vee,"A",{href:!0});var c0t=s(eY);fxr=r(c0t,"from_pretrained()"),c0t.forEach(t),mxr=r(vee," class method or the "),oY=n(vee,"A",{href:!0});var f0t=s(oY);gxr=r(f0t,"from_config()"),f0t.forEach(t),hxr=r(vee,` class
method.`),vee.forEach(t),pxr=i(Xl),L7=n(Xl,"P",{});var sGe=s(L7);_xr=r(sGe,"This class cannot be instantiated directly using "),QTe=n(sGe,"CODE",{});var m0t=s(QTe);uxr=r(m0t,"__init__()"),m0t.forEach(t),bxr=r(sGe," (throws an error)."),sGe.forEach(t),vxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var H0=s(Vt);T(x7.$$.fragment,H0),Fxr=i(H0),HTe=n(H0,"P",{});var g0t=s(HTe);Txr=r(g0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g0t.forEach(t),Mxr=i(H0),Ic=n(H0,"P",{});var Fee=s(Ic);Exr=r(Fee,`Note:
Loading a model from its configuration file does `),UTe=n(Fee,"STRONG",{});var h0t=s(UTe);Cxr=r(h0t,"not"),h0t.forEach(t),wxr=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(Fee,"A",{href:!0});var p0t=s(rY);Axr=r(p0t,"from_pretrained()"),p0t.forEach(t),yxr=r(Fee," to load the model weights."),Fee.forEach(t),Lxr=i(H0),T(nC.$$.fragment,H0),H0.forEach(t),xxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T($7.$$.fragment,zl),$xr=i(zl),JTe=n(zl,"P",{});var _0t=s(JTe);kxr=r(_0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_0t.forEach(t),Sxr=i(zl),_n=n(zl,"P",{});var U0=s(_n);Rxr=r(U0,"The model class to instantiate is selected based on the "),YTe=n(U0,"CODE",{});var u0t=s(YTe);Pxr=r(u0t,"model_type"),u0t.forEach(t),Bxr=r(U0,` property of the config object (either
passed as an argument or loaded from `),KTe=n(U0,"CODE",{});var b0t=s(KTe);Ixr=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),qxr=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(U0,"CODE",{});var v0t=s(ZTe);Nxr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),jxr=r(U0,":"),U0.forEach(t),Dxr=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);sC=n(we,"LI",{});var KBe=s(sC);e9e=n(KBe,"STRONG",{});var F0t=s(e9e);Gxr=r(F0t,"albert"),F0t.forEach(t),Oxr=r(KBe," \u2014 "),tY=n(KBe,"A",{href:!0});var T0t=s(tY);Vxr=r(T0t,"FlaxAlbertForPreTraining"),T0t.forEach(t),Xxr=r(KBe," (ALBERT model)"),KBe.forEach(t),zxr=i(we),lC=n(we,"LI",{});var ZBe=s(lC);o9e=n(ZBe,"STRONG",{});var M0t=s(o9e);Wxr=r(M0t,"bart"),M0t.forEach(t),Qxr=r(ZBe," \u2014 "),aY=n(ZBe,"A",{href:!0});var E0t=s(aY);Hxr=r(E0t,"FlaxBartForConditionalGeneration"),E0t.forEach(t),Uxr=r(ZBe," (BART model)"),ZBe.forEach(t),Jxr=i(we),iC=n(we,"LI",{});var eIe=s(iC);r9e=n(eIe,"STRONG",{});var C0t=s(r9e);Yxr=r(C0t,"bert"),C0t.forEach(t),Kxr=r(eIe," \u2014 "),nY=n(eIe,"A",{href:!0});var w0t=s(nY);Zxr=r(w0t,"FlaxBertForPreTraining"),w0t.forEach(t),e$r=r(eIe," (BERT model)"),eIe.forEach(t),o$r=i(we),dC=n(we,"LI",{});var oIe=s(dC);t9e=n(oIe,"STRONG",{});var A0t=s(t9e);r$r=r(A0t,"big_bird"),A0t.forEach(t),t$r=r(oIe," \u2014 "),sY=n(oIe,"A",{href:!0});var y0t=s(sY);a$r=r(y0t,"FlaxBigBirdForPreTraining"),y0t.forEach(t),n$r=r(oIe," (BigBird model)"),oIe.forEach(t),s$r=i(we),cC=n(we,"LI",{});var rIe=s(cC);a9e=n(rIe,"STRONG",{});var L0t=s(a9e);l$r=r(L0t,"electra"),L0t.forEach(t),i$r=r(rIe," \u2014 "),lY=n(rIe,"A",{href:!0});var x0t=s(lY);d$r=r(x0t,"FlaxElectraForPreTraining"),x0t.forEach(t),c$r=r(rIe," (ELECTRA model)"),rIe.forEach(t),f$r=i(we),fC=n(we,"LI",{});var tIe=s(fC);n9e=n(tIe,"STRONG",{});var $0t=s(n9e);m$r=r($0t,"mbart"),$0t.forEach(t),g$r=r(tIe," \u2014 "),iY=n(tIe,"A",{href:!0});var k0t=s(iY);h$r=r(k0t,"FlaxMBartForConditionalGeneration"),k0t.forEach(t),p$r=r(tIe," (mBART model)"),tIe.forEach(t),_$r=i(we),mC=n(we,"LI",{});var aIe=s(mC);s9e=n(aIe,"STRONG",{});var S0t=s(s9e);u$r=r(S0t,"mt5"),S0t.forEach(t),b$r=r(aIe," \u2014 "),dY=n(aIe,"A",{href:!0});var R0t=s(dY);v$r=r(R0t,"FlaxMT5ForConditionalGeneration"),R0t.forEach(t),F$r=r(aIe," (mT5 model)"),aIe.forEach(t),T$r=i(we),gC=n(we,"LI",{});var nIe=s(gC);l9e=n(nIe,"STRONG",{});var P0t=s(l9e);M$r=r(P0t,"roberta"),P0t.forEach(t),E$r=r(nIe," \u2014 "),cY=n(nIe,"A",{href:!0});var B0t=s(cY);C$r=r(B0t,"FlaxRobertaForMaskedLM"),B0t.forEach(t),w$r=r(nIe," (RoBERTa model)"),nIe.forEach(t),A$r=i(we),hC=n(we,"LI",{});var sIe=s(hC);i9e=n(sIe,"STRONG",{});var I0t=s(i9e);y$r=r(I0t,"roformer"),I0t.forEach(t),L$r=r(sIe," \u2014 "),fY=n(sIe,"A",{href:!0});var q0t=s(fY);x$r=r(q0t,"FlaxRoFormerForMaskedLM"),q0t.forEach(t),$$r=r(sIe," (RoFormer model)"),sIe.forEach(t),k$r=i(we),pC=n(we,"LI",{});var lIe=s(pC);d9e=n(lIe,"STRONG",{});var N0t=s(d9e);S$r=r(N0t,"t5"),N0t.forEach(t),R$r=r(lIe," \u2014 "),mY=n(lIe,"A",{href:!0});var j0t=s(mY);P$r=r(j0t,"FlaxT5ForConditionalGeneration"),j0t.forEach(t),B$r=r(lIe," (T5 model)"),lIe.forEach(t),I$r=i(we),_C=n(we,"LI",{});var iIe=s(_C);c9e=n(iIe,"STRONG",{});var D0t=s(c9e);q$r=r(D0t,"wav2vec2"),D0t.forEach(t),N$r=r(iIe," \u2014 "),gY=n(iIe,"A",{href:!0});var G0t=s(gY);j$r=r(G0t,"FlaxWav2Vec2ForPreTraining"),G0t.forEach(t),D$r=r(iIe," (Wav2Vec2 model)"),iIe.forEach(t),G$r=i(we),uC=n(we,"LI",{});var dIe=s(uC);f9e=n(dIe,"STRONG",{});var O0t=s(f9e);O$r=r(O0t,"xlm-roberta"),O0t.forEach(t),V$r=r(dIe," \u2014 "),hY=n(dIe,"A",{href:!0});var V0t=s(hY);X$r=r(V0t,"FlaxXLMRobertaForMaskedLM"),V0t.forEach(t),z$r=r(dIe," (XLM-RoBERTa model)"),dIe.forEach(t),we.forEach(t),W$r=i(zl),T(bC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),eje=i(f),qc=n(f,"H2",{class:!0});var lGe=s(qc);vC=n(lGe,"A",{id:!0,class:!0,href:!0});var X0t=s(vC);m9e=n(X0t,"SPAN",{});var z0t=s(m9e);T(k7.$$.fragment,z0t),z0t.forEach(t),X0t.forEach(t),Q$r=i(lGe),g9e=n(lGe,"SPAN",{});var W0t=s(g9e);H$r=r(W0t,"FlaxAutoModelForMaskedLM"),W0t.forEach(t),lGe.forEach(t),oje=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(S7.$$.fragment,Wl),U$r=i(Wl),Nc=n(Wl,"P",{});var Tee=s(Nc);J$r=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=n(Tee,"A",{href:!0});var Q0t=s(pY);Y$r=r(Q0t,"from_pretrained()"),Q0t.forEach(t),K$r=r(Tee," class method or the "),_Y=n(Tee,"A",{href:!0});var H0t=s(_Y);Z$r=r(H0t,"from_config()"),H0t.forEach(t),ekr=r(Tee,` class
method.`),Tee.forEach(t),okr=i(Wl),R7=n(Wl,"P",{});var iGe=s(R7);rkr=r(iGe,"This class cannot be instantiated directly using "),h9e=n(iGe,"CODE",{});var U0t=s(h9e);tkr=r(U0t,"__init__()"),U0t.forEach(t),akr=r(iGe," (throws an error)."),iGe.forEach(t),nkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var J0=s(Xt);T(P7.$$.fragment,J0),skr=i(J0),p9e=n(J0,"P",{});var J0t=s(p9e);lkr=r(J0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),J0t.forEach(t),ikr=i(J0),jc=n(J0,"P",{});var Mee=s(jc);dkr=r(Mee,`Note:
Loading a model from its configuration file does `),_9e=n(Mee,"STRONG",{});var Y0t=s(_9e);ckr=r(Y0t,"not"),Y0t.forEach(t),fkr=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(Mee,"A",{href:!0});var K0t=s(uY);mkr=r(K0t,"from_pretrained()"),K0t.forEach(t),gkr=r(Mee," to load the model weights."),Mee.forEach(t),hkr=i(J0),T(FC.$$.fragment,J0),J0.forEach(t),pkr=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(B7.$$.fragment,Ql),_kr=i(Ql),u9e=n(Ql,"P",{});var Z0t=s(u9e);ukr=r(Z0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Z0t.forEach(t),bkr=i(Ql),un=n(Ql,"P",{});var Y0=s(un);vkr=r(Y0,"The model class to instantiate is selected based on the "),b9e=n(Y0,"CODE",{});var eAt=s(b9e);Fkr=r(eAt,"model_type"),eAt.forEach(t),Tkr=r(Y0,` property of the config object (either
passed as an argument or loaded from `),v9e=n(Y0,"CODE",{});var oAt=s(v9e);Mkr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),Ekr=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F9e=n(Y0,"CODE",{});var rAt=s(F9e);Ckr=r(rAt,"pretrained_model_name_or_path"),rAt.forEach(t),wkr=r(Y0,":"),Y0.forEach(t),Akr=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);TC=n(Ie,"LI",{});var cIe=s(TC);T9e=n(cIe,"STRONG",{});var tAt=s(T9e);ykr=r(tAt,"albert"),tAt.forEach(t),Lkr=r(cIe," \u2014 "),bY=n(cIe,"A",{href:!0});var aAt=s(bY);xkr=r(aAt,"FlaxAlbertForMaskedLM"),aAt.forEach(t),$kr=r(cIe," (ALBERT model)"),cIe.forEach(t),kkr=i(Ie),MC=n(Ie,"LI",{});var fIe=s(MC);M9e=n(fIe,"STRONG",{});var nAt=s(M9e);Skr=r(nAt,"bart"),nAt.forEach(t),Rkr=r(fIe," \u2014 "),vY=n(fIe,"A",{href:!0});var sAt=s(vY);Pkr=r(sAt,"FlaxBartForConditionalGeneration"),sAt.forEach(t),Bkr=r(fIe," (BART model)"),fIe.forEach(t),Ikr=i(Ie),EC=n(Ie,"LI",{});var mIe=s(EC);E9e=n(mIe,"STRONG",{});var lAt=s(E9e);qkr=r(lAt,"bert"),lAt.forEach(t),Nkr=r(mIe," \u2014 "),FY=n(mIe,"A",{href:!0});var iAt=s(FY);jkr=r(iAt,"FlaxBertForMaskedLM"),iAt.forEach(t),Dkr=r(mIe," (BERT model)"),mIe.forEach(t),Gkr=i(Ie),CC=n(Ie,"LI",{});var gIe=s(CC);C9e=n(gIe,"STRONG",{});var dAt=s(C9e);Okr=r(dAt,"big_bird"),dAt.forEach(t),Vkr=r(gIe," \u2014 "),TY=n(gIe,"A",{href:!0});var cAt=s(TY);Xkr=r(cAt,"FlaxBigBirdForMaskedLM"),cAt.forEach(t),zkr=r(gIe," (BigBird model)"),gIe.forEach(t),Wkr=i(Ie),wC=n(Ie,"LI",{});var hIe=s(wC);w9e=n(hIe,"STRONG",{});var fAt=s(w9e);Qkr=r(fAt,"distilbert"),fAt.forEach(t),Hkr=r(hIe," \u2014 "),MY=n(hIe,"A",{href:!0});var mAt=s(MY);Ukr=r(mAt,"FlaxDistilBertForMaskedLM"),mAt.forEach(t),Jkr=r(hIe," (DistilBERT model)"),hIe.forEach(t),Ykr=i(Ie),AC=n(Ie,"LI",{});var pIe=s(AC);A9e=n(pIe,"STRONG",{});var gAt=s(A9e);Kkr=r(gAt,"electra"),gAt.forEach(t),Zkr=r(pIe," \u2014 "),EY=n(pIe,"A",{href:!0});var hAt=s(EY);eSr=r(hAt,"FlaxElectraForMaskedLM"),hAt.forEach(t),oSr=r(pIe," (ELECTRA model)"),pIe.forEach(t),rSr=i(Ie),yC=n(Ie,"LI",{});var _Ie=s(yC);y9e=n(_Ie,"STRONG",{});var pAt=s(y9e);tSr=r(pAt,"mbart"),pAt.forEach(t),aSr=r(_Ie," \u2014 "),CY=n(_Ie,"A",{href:!0});var _At=s(CY);nSr=r(_At,"FlaxMBartForConditionalGeneration"),_At.forEach(t),sSr=r(_Ie," (mBART model)"),_Ie.forEach(t),lSr=i(Ie),LC=n(Ie,"LI",{});var uIe=s(LC);L9e=n(uIe,"STRONG",{});var uAt=s(L9e);iSr=r(uAt,"roberta"),uAt.forEach(t),dSr=r(uIe," \u2014 "),wY=n(uIe,"A",{href:!0});var bAt=s(wY);cSr=r(bAt,"FlaxRobertaForMaskedLM"),bAt.forEach(t),fSr=r(uIe," (RoBERTa model)"),uIe.forEach(t),mSr=i(Ie),xC=n(Ie,"LI",{});var bIe=s(xC);x9e=n(bIe,"STRONG",{});var vAt=s(x9e);gSr=r(vAt,"roformer"),vAt.forEach(t),hSr=r(bIe," \u2014 "),AY=n(bIe,"A",{href:!0});var FAt=s(AY);pSr=r(FAt,"FlaxRoFormerForMaskedLM"),FAt.forEach(t),_Sr=r(bIe," (RoFormer model)"),bIe.forEach(t),uSr=i(Ie),$C=n(Ie,"LI",{});var vIe=s($C);$9e=n(vIe,"STRONG",{});var TAt=s($9e);bSr=r(TAt,"xlm-roberta"),TAt.forEach(t),vSr=r(vIe," \u2014 "),yY=n(vIe,"A",{href:!0});var MAt=s(yY);FSr=r(MAt,"FlaxXLMRobertaForMaskedLM"),MAt.forEach(t),TSr=r(vIe," (XLM-RoBERTa model)"),vIe.forEach(t),Ie.forEach(t),MSr=i(Ql),T(kC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),rje=i(f),Dc=n(f,"H2",{class:!0});var dGe=s(Dc);SC=n(dGe,"A",{id:!0,class:!0,href:!0});var EAt=s(SC);k9e=n(EAt,"SPAN",{});var CAt=s(k9e);T(I7.$$.fragment,CAt),CAt.forEach(t),EAt.forEach(t),ESr=i(dGe),S9e=n(dGe,"SPAN",{});var wAt=s(S9e);CSr=r(wAt,"FlaxAutoModelForSeq2SeqLM"),wAt.forEach(t),dGe.forEach(t),tje=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(q7.$$.fragment,Hl),wSr=i(Hl),Gc=n(Hl,"P",{});var Eee=s(Gc);ASr=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LY=n(Eee,"A",{href:!0});var AAt=s(LY);ySr=r(AAt,"from_pretrained()"),AAt.forEach(t),LSr=r(Eee," class method or the "),xY=n(Eee,"A",{href:!0});var yAt=s(xY);xSr=r(yAt,"from_config()"),yAt.forEach(t),$Sr=r(Eee,` class
method.`),Eee.forEach(t),kSr=i(Hl),N7=n(Hl,"P",{});var cGe=s(N7);SSr=r(cGe,"This class cannot be instantiated directly using "),R9e=n(cGe,"CODE",{});var LAt=s(R9e);RSr=r(LAt,"__init__()"),LAt.forEach(t),PSr=r(cGe," (throws an error)."),cGe.forEach(t),BSr=i(Hl),zt=n(Hl,"DIV",{class:!0});var K0=s(zt);T(j7.$$.fragment,K0),ISr=i(K0),P9e=n(K0,"P",{});var xAt=s(P9e);qSr=r(xAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xAt.forEach(t),NSr=i(K0),Oc=n(K0,"P",{});var Cee=s(Oc);jSr=r(Cee,`Note:
Loading a model from its configuration file does `),B9e=n(Cee,"STRONG",{});var $At=s(B9e);DSr=r($At,"not"),$At.forEach(t),GSr=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(Cee,"A",{href:!0});var kAt=s($Y);OSr=r(kAt,"from_pretrained()"),kAt.forEach(t),VSr=r(Cee," to load the model weights."),Cee.forEach(t),XSr=i(K0),T(RC.$$.fragment,K0),K0.forEach(t),zSr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(D7.$$.fragment,Ul),WSr=i(Ul),I9e=n(Ul,"P",{});var SAt=s(I9e);QSr=r(SAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SAt.forEach(t),HSr=i(Ul),bn=n(Ul,"P",{});var Z0=s(bn);USr=r(Z0,"The model class to instantiate is selected based on the "),q9e=n(Z0,"CODE",{});var RAt=s(q9e);JSr=r(RAt,"model_type"),RAt.forEach(t),YSr=r(Z0,` property of the config object (either
passed as an argument or loaded from `),N9e=n(Z0,"CODE",{});var PAt=s(N9e);KSr=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),ZSr=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=n(Z0,"CODE",{});var BAt=s(j9e);eRr=r(BAt,"pretrained_model_name_or_path"),BAt.forEach(t),oRr=r(Z0,":"),Z0.forEach(t),rRr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);PC=n(ze,"LI",{});var FIe=s(PC);D9e=n(FIe,"STRONG",{});var IAt=s(D9e);tRr=r(IAt,"bart"),IAt.forEach(t),aRr=r(FIe," \u2014 "),kY=n(FIe,"A",{href:!0});var qAt=s(kY);nRr=r(qAt,"FlaxBartForConditionalGeneration"),qAt.forEach(t),sRr=r(FIe," (BART model)"),FIe.forEach(t),lRr=i(ze),BC=n(ze,"LI",{});var TIe=s(BC);G9e=n(TIe,"STRONG",{});var NAt=s(G9e);iRr=r(NAt,"blenderbot"),NAt.forEach(t),dRr=r(TIe," \u2014 "),SY=n(TIe,"A",{href:!0});var jAt=s(SY);cRr=r(jAt,"FlaxBlenderbotForConditionalGeneration"),jAt.forEach(t),fRr=r(TIe," (Blenderbot model)"),TIe.forEach(t),mRr=i(ze),IC=n(ze,"LI",{});var MIe=s(IC);O9e=n(MIe,"STRONG",{});var DAt=s(O9e);gRr=r(DAt,"blenderbot-small"),DAt.forEach(t),hRr=r(MIe," \u2014 "),RY=n(MIe,"A",{href:!0});var GAt=s(RY);pRr=r(GAt,"FlaxBlenderbotSmallForConditionalGeneration"),GAt.forEach(t),_Rr=r(MIe," (BlenderbotSmall model)"),MIe.forEach(t),uRr=i(ze),qC=n(ze,"LI",{});var EIe=s(qC);V9e=n(EIe,"STRONG",{});var OAt=s(V9e);bRr=r(OAt,"encoder-decoder"),OAt.forEach(t),vRr=r(EIe," \u2014 "),PY=n(EIe,"A",{href:!0});var VAt=s(PY);FRr=r(VAt,"FlaxEncoderDecoderModel"),VAt.forEach(t),TRr=r(EIe," (Encoder decoder model)"),EIe.forEach(t),MRr=i(ze),NC=n(ze,"LI",{});var CIe=s(NC);X9e=n(CIe,"STRONG",{});var XAt=s(X9e);ERr=r(XAt,"marian"),XAt.forEach(t),CRr=r(CIe," \u2014 "),BY=n(CIe,"A",{href:!0});var zAt=s(BY);wRr=r(zAt,"FlaxMarianMTModel"),zAt.forEach(t),ARr=r(CIe," (Marian model)"),CIe.forEach(t),yRr=i(ze),jC=n(ze,"LI",{});var wIe=s(jC);z9e=n(wIe,"STRONG",{});var WAt=s(z9e);LRr=r(WAt,"mbart"),WAt.forEach(t),xRr=r(wIe," \u2014 "),IY=n(wIe,"A",{href:!0});var QAt=s(IY);$Rr=r(QAt,"FlaxMBartForConditionalGeneration"),QAt.forEach(t),kRr=r(wIe," (mBART model)"),wIe.forEach(t),SRr=i(ze),DC=n(ze,"LI",{});var AIe=s(DC);W9e=n(AIe,"STRONG",{});var HAt=s(W9e);RRr=r(HAt,"mt5"),HAt.forEach(t),PRr=r(AIe," \u2014 "),qY=n(AIe,"A",{href:!0});var UAt=s(qY);BRr=r(UAt,"FlaxMT5ForConditionalGeneration"),UAt.forEach(t),IRr=r(AIe," (mT5 model)"),AIe.forEach(t),qRr=i(ze),GC=n(ze,"LI",{});var yIe=s(GC);Q9e=n(yIe,"STRONG",{});var JAt=s(Q9e);NRr=r(JAt,"pegasus"),JAt.forEach(t),jRr=r(yIe," \u2014 "),NY=n(yIe,"A",{href:!0});var YAt=s(NY);DRr=r(YAt,"FlaxPegasusForConditionalGeneration"),YAt.forEach(t),GRr=r(yIe," (Pegasus model)"),yIe.forEach(t),ORr=i(ze),OC=n(ze,"LI",{});var LIe=s(OC);H9e=n(LIe,"STRONG",{});var KAt=s(H9e);VRr=r(KAt,"t5"),KAt.forEach(t),XRr=r(LIe," \u2014 "),jY=n(LIe,"A",{href:!0});var ZAt=s(jY);zRr=r(ZAt,"FlaxT5ForConditionalGeneration"),ZAt.forEach(t),WRr=r(LIe," (T5 model)"),LIe.forEach(t),ze.forEach(t),QRr=i(Ul),T(VC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),aje=i(f),Vc=n(f,"H2",{class:!0});var fGe=s(Vc);XC=n(fGe,"A",{id:!0,class:!0,href:!0});var eyt=s(XC);U9e=n(eyt,"SPAN",{});var oyt=s(U9e);T(G7.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),HRr=i(fGe),J9e=n(fGe,"SPAN",{});var ryt=s(J9e);URr=r(ryt,"FlaxAutoModelForSequenceClassification"),ryt.forEach(t),fGe.forEach(t),nje=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(O7.$$.fragment,Jl),JRr=i(Jl),Xc=n(Jl,"P",{});var wee=s(Xc);YRr=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DY=n(wee,"A",{href:!0});var tyt=s(DY);KRr=r(tyt,"from_pretrained()"),tyt.forEach(t),ZRr=r(wee," class method or the "),GY=n(wee,"A",{href:!0});var ayt=s(GY);ePr=r(ayt,"from_config()"),ayt.forEach(t),oPr=r(wee,` class
method.`),wee.forEach(t),rPr=i(Jl),V7=n(Jl,"P",{});var mGe=s(V7);tPr=r(mGe,"This class cannot be instantiated directly using "),Y9e=n(mGe,"CODE",{});var nyt=s(Y9e);aPr=r(nyt,"__init__()"),nyt.forEach(t),nPr=r(mGe," (throws an error)."),mGe.forEach(t),sPr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var eA=s(Wt);T(X7.$$.fragment,eA),lPr=i(eA),K9e=n(eA,"P",{});var syt=s(K9e);iPr=r(syt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),syt.forEach(t),dPr=i(eA),zc=n(eA,"P",{});var Aee=s(zc);cPr=r(Aee,`Note:
Loading a model from its configuration file does `),Z9e=n(Aee,"STRONG",{});var lyt=s(Z9e);fPr=r(lyt,"not"),lyt.forEach(t),mPr=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Aee,"A",{href:!0});var iyt=s(OY);gPr=r(iyt,"from_pretrained()"),iyt.forEach(t),hPr=r(Aee," to load the model weights."),Aee.forEach(t),pPr=i(eA),T(zC.$$.fragment,eA),eA.forEach(t),_Pr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(z7.$$.fragment,Yl),uPr=i(Yl),eMe=n(Yl,"P",{});var dyt=s(eMe);bPr=r(dyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyt.forEach(t),vPr=i(Yl),vn=n(Yl,"P",{});var oA=s(vn);FPr=r(oA,"The model class to instantiate is selected based on the "),oMe=n(oA,"CODE",{});var cyt=s(oMe);TPr=r(cyt,"model_type"),cyt.forEach(t),MPr=r(oA,` property of the config object (either
passed as an argument or loaded from `),rMe=n(oA,"CODE",{});var fyt=s(rMe);EPr=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),CPr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(oA,"CODE",{});var myt=s(tMe);wPr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),APr=r(oA,":"),oA.forEach(t),yPr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);WC=n(qe,"LI",{});var xIe=s(WC);aMe=n(xIe,"STRONG",{});var gyt=s(aMe);LPr=r(gyt,"albert"),gyt.forEach(t),xPr=r(xIe," \u2014 "),VY=n(xIe,"A",{href:!0});var hyt=s(VY);$Pr=r(hyt,"FlaxAlbertForSequenceClassification"),hyt.forEach(t),kPr=r(xIe," (ALBERT model)"),xIe.forEach(t),SPr=i(qe),QC=n(qe,"LI",{});var $Ie=s(QC);nMe=n($Ie,"STRONG",{});var pyt=s(nMe);RPr=r(pyt,"bart"),pyt.forEach(t),PPr=r($Ie," \u2014 "),XY=n($Ie,"A",{href:!0});var _yt=s(XY);BPr=r(_yt,"FlaxBartForSequenceClassification"),_yt.forEach(t),IPr=r($Ie," (BART model)"),$Ie.forEach(t),qPr=i(qe),HC=n(qe,"LI",{});var kIe=s(HC);sMe=n(kIe,"STRONG",{});var uyt=s(sMe);NPr=r(uyt,"bert"),uyt.forEach(t),jPr=r(kIe," \u2014 "),zY=n(kIe,"A",{href:!0});var byt=s(zY);DPr=r(byt,"FlaxBertForSequenceClassification"),byt.forEach(t),GPr=r(kIe," (BERT model)"),kIe.forEach(t),OPr=i(qe),UC=n(qe,"LI",{});var SIe=s(UC);lMe=n(SIe,"STRONG",{});var vyt=s(lMe);VPr=r(vyt,"big_bird"),vyt.forEach(t),XPr=r(SIe," \u2014 "),WY=n(SIe,"A",{href:!0});var Fyt=s(WY);zPr=r(Fyt,"FlaxBigBirdForSequenceClassification"),Fyt.forEach(t),WPr=r(SIe," (BigBird model)"),SIe.forEach(t),QPr=i(qe),JC=n(qe,"LI",{});var RIe=s(JC);iMe=n(RIe,"STRONG",{});var Tyt=s(iMe);HPr=r(Tyt,"distilbert"),Tyt.forEach(t),UPr=r(RIe," \u2014 "),QY=n(RIe,"A",{href:!0});var Myt=s(QY);JPr=r(Myt,"FlaxDistilBertForSequenceClassification"),Myt.forEach(t),YPr=r(RIe," (DistilBERT model)"),RIe.forEach(t),KPr=i(qe),YC=n(qe,"LI",{});var PIe=s(YC);dMe=n(PIe,"STRONG",{});var Eyt=s(dMe);ZPr=r(Eyt,"electra"),Eyt.forEach(t),eBr=r(PIe," \u2014 "),HY=n(PIe,"A",{href:!0});var Cyt=s(HY);oBr=r(Cyt,"FlaxElectraForSequenceClassification"),Cyt.forEach(t),rBr=r(PIe," (ELECTRA model)"),PIe.forEach(t),tBr=i(qe),KC=n(qe,"LI",{});var BIe=s(KC);cMe=n(BIe,"STRONG",{});var wyt=s(cMe);aBr=r(wyt,"mbart"),wyt.forEach(t),nBr=r(BIe," \u2014 "),UY=n(BIe,"A",{href:!0});var Ayt=s(UY);sBr=r(Ayt,"FlaxMBartForSequenceClassification"),Ayt.forEach(t),lBr=r(BIe," (mBART model)"),BIe.forEach(t),iBr=i(qe),ZC=n(qe,"LI",{});var IIe=s(ZC);fMe=n(IIe,"STRONG",{});var yyt=s(fMe);dBr=r(yyt,"roberta"),yyt.forEach(t),cBr=r(IIe," \u2014 "),JY=n(IIe,"A",{href:!0});var Lyt=s(JY);fBr=r(Lyt,"FlaxRobertaForSequenceClassification"),Lyt.forEach(t),mBr=r(IIe," (RoBERTa model)"),IIe.forEach(t),gBr=i(qe),e3=n(qe,"LI",{});var qIe=s(e3);mMe=n(qIe,"STRONG",{});var xyt=s(mMe);hBr=r(xyt,"roformer"),xyt.forEach(t),pBr=r(qIe," \u2014 "),YY=n(qIe,"A",{href:!0});var $yt=s(YY);_Br=r($yt,"FlaxRoFormerForSequenceClassification"),$yt.forEach(t),uBr=r(qIe," (RoFormer model)"),qIe.forEach(t),bBr=i(qe),o3=n(qe,"LI",{});var NIe=s(o3);gMe=n(NIe,"STRONG",{});var kyt=s(gMe);vBr=r(kyt,"xlm-roberta"),kyt.forEach(t),FBr=r(NIe," \u2014 "),KY=n(NIe,"A",{href:!0});var Syt=s(KY);TBr=r(Syt,"FlaxXLMRobertaForSequenceClassification"),Syt.forEach(t),MBr=r(NIe," (XLM-RoBERTa model)"),NIe.forEach(t),qe.forEach(t),EBr=i(Yl),T(r3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),sje=i(f),Wc=n(f,"H2",{class:!0});var gGe=s(Wc);t3=n(gGe,"A",{id:!0,class:!0,href:!0});var Ryt=s(t3);hMe=n(Ryt,"SPAN",{});var Pyt=s(hMe);T(W7.$$.fragment,Pyt),Pyt.forEach(t),Ryt.forEach(t),CBr=i(gGe),pMe=n(gGe,"SPAN",{});var Byt=s(pMe);wBr=r(Byt,"FlaxAutoModelForQuestionAnswering"),Byt.forEach(t),gGe.forEach(t),lje=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(Q7.$$.fragment,Kl),ABr=i(Kl),Qc=n(Kl,"P",{});var yee=s(Qc);yBr=r(yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZY=n(yee,"A",{href:!0});var Iyt=s(ZY);LBr=r(Iyt,"from_pretrained()"),Iyt.forEach(t),xBr=r(yee," class method or the "),eK=n(yee,"A",{href:!0});var qyt=s(eK);$Br=r(qyt,"from_config()"),qyt.forEach(t),kBr=r(yee,` class
method.`),yee.forEach(t),SBr=i(Kl),H7=n(Kl,"P",{});var hGe=s(H7);RBr=r(hGe,"This class cannot be instantiated directly using "),_Me=n(hGe,"CODE",{});var Nyt=s(_Me);PBr=r(Nyt,"__init__()"),Nyt.forEach(t),BBr=r(hGe," (throws an error)."),hGe.forEach(t),IBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var rA=s(Qt);T(U7.$$.fragment,rA),qBr=i(rA),uMe=n(rA,"P",{});var jyt=s(uMe);NBr=r(jyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jyt.forEach(t),jBr=i(rA),Hc=n(rA,"P",{});var Lee=s(Hc);DBr=r(Lee,`Note:
Loading a model from its configuration file does `),bMe=n(Lee,"STRONG",{});var Dyt=s(bMe);GBr=r(Dyt,"not"),Dyt.forEach(t),OBr=r(Lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(Lee,"A",{href:!0});var Gyt=s(oK);VBr=r(Gyt,"from_pretrained()"),Gyt.forEach(t),XBr=r(Lee," to load the model weights."),Lee.forEach(t),zBr=i(rA),T(a3.$$.fragment,rA),rA.forEach(t),WBr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(J7.$$.fragment,Zl),QBr=i(Zl),vMe=n(Zl,"P",{});var Oyt=s(vMe);HBr=r(Oyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Oyt.forEach(t),UBr=i(Zl),Fn=n(Zl,"P",{});var tA=s(Fn);JBr=r(tA,"The model class to instantiate is selected based on the "),FMe=n(tA,"CODE",{});var Vyt=s(FMe);YBr=r(Vyt,"model_type"),Vyt.forEach(t),KBr=r(tA,` property of the config object (either
passed as an argument or loaded from `),TMe=n(tA,"CODE",{});var Xyt=s(TMe);ZBr=r(Xyt,"pretrained_model_name_or_path"),Xyt.forEach(t),eIr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(tA,"CODE",{});var zyt=s(MMe);oIr=r(zyt,"pretrained_model_name_or_path"),zyt.forEach(t),rIr=r(tA,":"),tA.forEach(t),tIr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);n3=n(Ne,"LI",{});var jIe=s(n3);EMe=n(jIe,"STRONG",{});var Wyt=s(EMe);aIr=r(Wyt,"albert"),Wyt.forEach(t),nIr=r(jIe," \u2014 "),rK=n(jIe,"A",{href:!0});var Qyt=s(rK);sIr=r(Qyt,"FlaxAlbertForQuestionAnswering"),Qyt.forEach(t),lIr=r(jIe," (ALBERT model)"),jIe.forEach(t),iIr=i(Ne),s3=n(Ne,"LI",{});var DIe=s(s3);CMe=n(DIe,"STRONG",{});var Hyt=s(CMe);dIr=r(Hyt,"bart"),Hyt.forEach(t),cIr=r(DIe," \u2014 "),tK=n(DIe,"A",{href:!0});var Uyt=s(tK);fIr=r(Uyt,"FlaxBartForQuestionAnswering"),Uyt.forEach(t),mIr=r(DIe," (BART model)"),DIe.forEach(t),gIr=i(Ne),l3=n(Ne,"LI",{});var GIe=s(l3);wMe=n(GIe,"STRONG",{});var Jyt=s(wMe);hIr=r(Jyt,"bert"),Jyt.forEach(t),pIr=r(GIe," \u2014 "),aK=n(GIe,"A",{href:!0});var Yyt=s(aK);_Ir=r(Yyt,"FlaxBertForQuestionAnswering"),Yyt.forEach(t),uIr=r(GIe," (BERT model)"),GIe.forEach(t),bIr=i(Ne),i3=n(Ne,"LI",{});var OIe=s(i3);AMe=n(OIe,"STRONG",{});var Kyt=s(AMe);vIr=r(Kyt,"big_bird"),Kyt.forEach(t),FIr=r(OIe," \u2014 "),nK=n(OIe,"A",{href:!0});var Zyt=s(nK);TIr=r(Zyt,"FlaxBigBirdForQuestionAnswering"),Zyt.forEach(t),MIr=r(OIe," (BigBird model)"),OIe.forEach(t),EIr=i(Ne),d3=n(Ne,"LI",{});var VIe=s(d3);yMe=n(VIe,"STRONG",{});var e8t=s(yMe);CIr=r(e8t,"distilbert"),e8t.forEach(t),wIr=r(VIe," \u2014 "),sK=n(VIe,"A",{href:!0});var o8t=s(sK);AIr=r(o8t,"FlaxDistilBertForQuestionAnswering"),o8t.forEach(t),yIr=r(VIe," (DistilBERT model)"),VIe.forEach(t),LIr=i(Ne),c3=n(Ne,"LI",{});var XIe=s(c3);LMe=n(XIe,"STRONG",{});var r8t=s(LMe);xIr=r(r8t,"electra"),r8t.forEach(t),$Ir=r(XIe," \u2014 "),lK=n(XIe,"A",{href:!0});var t8t=s(lK);kIr=r(t8t,"FlaxElectraForQuestionAnswering"),t8t.forEach(t),SIr=r(XIe," (ELECTRA model)"),XIe.forEach(t),RIr=i(Ne),f3=n(Ne,"LI",{});var zIe=s(f3);xMe=n(zIe,"STRONG",{});var a8t=s(xMe);PIr=r(a8t,"mbart"),a8t.forEach(t),BIr=r(zIe," \u2014 "),iK=n(zIe,"A",{href:!0});var n8t=s(iK);IIr=r(n8t,"FlaxMBartForQuestionAnswering"),n8t.forEach(t),qIr=r(zIe," (mBART model)"),zIe.forEach(t),NIr=i(Ne),m3=n(Ne,"LI",{});var WIe=s(m3);$Me=n(WIe,"STRONG",{});var s8t=s($Me);jIr=r(s8t,"roberta"),s8t.forEach(t),DIr=r(WIe," \u2014 "),dK=n(WIe,"A",{href:!0});var l8t=s(dK);GIr=r(l8t,"FlaxRobertaForQuestionAnswering"),l8t.forEach(t),OIr=r(WIe," (RoBERTa model)"),WIe.forEach(t),VIr=i(Ne),g3=n(Ne,"LI",{});var QIe=s(g3);kMe=n(QIe,"STRONG",{});var i8t=s(kMe);XIr=r(i8t,"roformer"),i8t.forEach(t),zIr=r(QIe," \u2014 "),cK=n(QIe,"A",{href:!0});var d8t=s(cK);WIr=r(d8t,"FlaxRoFormerForQuestionAnswering"),d8t.forEach(t),QIr=r(QIe," (RoFormer model)"),QIe.forEach(t),HIr=i(Ne),h3=n(Ne,"LI",{});var HIe=s(h3);SMe=n(HIe,"STRONG",{});var c8t=s(SMe);UIr=r(c8t,"xlm-roberta"),c8t.forEach(t),JIr=r(HIe," \u2014 "),fK=n(HIe,"A",{href:!0});var f8t=s(fK);YIr=r(f8t,"FlaxXLMRobertaForQuestionAnswering"),f8t.forEach(t),KIr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),Ne.forEach(t),ZIr=i(Zl),T(p3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),ije=i(f),Uc=n(f,"H2",{class:!0});var pGe=s(Uc);_3=n(pGe,"A",{id:!0,class:!0,href:!0});var m8t=s(_3);RMe=n(m8t,"SPAN",{});var g8t=s(RMe);T(Y7.$$.fragment,g8t),g8t.forEach(t),m8t.forEach(t),eqr=i(pGe),PMe=n(pGe,"SPAN",{});var h8t=s(PMe);oqr=r(h8t,"FlaxAutoModelForTokenClassification"),h8t.forEach(t),pGe.forEach(t),dje=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(K7.$$.fragment,ei),rqr=i(ei),Jc=n(ei,"P",{});var xee=s(Jc);tqr=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mK=n(xee,"A",{href:!0});var p8t=s(mK);aqr=r(p8t,"from_pretrained()"),p8t.forEach(t),nqr=r(xee," class method or the "),gK=n(xee,"A",{href:!0});var _8t=s(gK);sqr=r(_8t,"from_config()"),_8t.forEach(t),lqr=r(xee,` class
method.`),xee.forEach(t),iqr=i(ei),Z7=n(ei,"P",{});var _Ge=s(Z7);dqr=r(_Ge,"This class cannot be instantiated directly using "),BMe=n(_Ge,"CODE",{});var u8t=s(BMe);cqr=r(u8t,"__init__()"),u8t.forEach(t),fqr=r(_Ge," (throws an error)."),_Ge.forEach(t),mqr=i(ei),Ht=n(ei,"DIV",{class:!0});var aA=s(Ht);T(ex.$$.fragment,aA),gqr=i(aA),IMe=n(aA,"P",{});var b8t=s(IMe);hqr=r(b8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),b8t.forEach(t),pqr=i(aA),Yc=n(aA,"P",{});var $ee=s(Yc);_qr=r($ee,`Note:
Loading a model from its configuration file does `),qMe=n($ee,"STRONG",{});var v8t=s(qMe);uqr=r(v8t,"not"),v8t.forEach(t),bqr=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n($ee,"A",{href:!0});var F8t=s(hK);vqr=r(F8t,"from_pretrained()"),F8t.forEach(t),Fqr=r($ee," to load the model weights."),$ee.forEach(t),Tqr=i(aA),T(u3.$$.fragment,aA),aA.forEach(t),Mqr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(ox.$$.fragment,oi),Eqr=i(oi),NMe=n(oi,"P",{});var T8t=s(NMe);Cqr=r(T8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),T8t.forEach(t),wqr=i(oi),Tn=n(oi,"P",{});var nA=s(Tn);Aqr=r(nA,"The model class to instantiate is selected based on the "),jMe=n(nA,"CODE",{});var M8t=s(jMe);yqr=r(M8t,"model_type"),M8t.forEach(t),Lqr=r(nA,` property of the config object (either
passed as an argument or loaded from `),DMe=n(nA,"CODE",{});var E8t=s(DMe);xqr=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),$qr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(nA,"CODE",{});var C8t=s(GMe);kqr=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),Sqr=r(nA,":"),nA.forEach(t),Rqr=i(oi),De=n(oi,"UL",{});var Fo=s(De);b3=n(Fo,"LI",{});var UIe=s(b3);OMe=n(UIe,"STRONG",{});var w8t=s(OMe);Pqr=r(w8t,"albert"),w8t.forEach(t),Bqr=r(UIe," \u2014 "),pK=n(UIe,"A",{href:!0});var A8t=s(pK);Iqr=r(A8t,"FlaxAlbertForTokenClassification"),A8t.forEach(t),qqr=r(UIe," (ALBERT model)"),UIe.forEach(t),Nqr=i(Fo),v3=n(Fo,"LI",{});var JIe=s(v3);VMe=n(JIe,"STRONG",{});var y8t=s(VMe);jqr=r(y8t,"bert"),y8t.forEach(t),Dqr=r(JIe," \u2014 "),_K=n(JIe,"A",{href:!0});var L8t=s(_K);Gqr=r(L8t,"FlaxBertForTokenClassification"),L8t.forEach(t),Oqr=r(JIe," (BERT model)"),JIe.forEach(t),Vqr=i(Fo),F3=n(Fo,"LI",{});var YIe=s(F3);XMe=n(YIe,"STRONG",{});var x8t=s(XMe);Xqr=r(x8t,"big_bird"),x8t.forEach(t),zqr=r(YIe," \u2014 "),uK=n(YIe,"A",{href:!0});var $8t=s(uK);Wqr=r($8t,"FlaxBigBirdForTokenClassification"),$8t.forEach(t),Qqr=r(YIe," (BigBird model)"),YIe.forEach(t),Hqr=i(Fo),T3=n(Fo,"LI",{});var KIe=s(T3);zMe=n(KIe,"STRONG",{});var k8t=s(zMe);Uqr=r(k8t,"distilbert"),k8t.forEach(t),Jqr=r(KIe," \u2014 "),bK=n(KIe,"A",{href:!0});var S8t=s(bK);Yqr=r(S8t,"FlaxDistilBertForTokenClassification"),S8t.forEach(t),Kqr=r(KIe," (DistilBERT model)"),KIe.forEach(t),Zqr=i(Fo),M3=n(Fo,"LI",{});var ZIe=s(M3);WMe=n(ZIe,"STRONG",{});var R8t=s(WMe);eNr=r(R8t,"electra"),R8t.forEach(t),oNr=r(ZIe," \u2014 "),vK=n(ZIe,"A",{href:!0});var P8t=s(vK);rNr=r(P8t,"FlaxElectraForTokenClassification"),P8t.forEach(t),tNr=r(ZIe," (ELECTRA model)"),ZIe.forEach(t),aNr=i(Fo),E3=n(Fo,"LI",{});var eqe=s(E3);QMe=n(eqe,"STRONG",{});var B8t=s(QMe);nNr=r(B8t,"roberta"),B8t.forEach(t),sNr=r(eqe," \u2014 "),FK=n(eqe,"A",{href:!0});var I8t=s(FK);lNr=r(I8t,"FlaxRobertaForTokenClassification"),I8t.forEach(t),iNr=r(eqe," (RoBERTa model)"),eqe.forEach(t),dNr=i(Fo),C3=n(Fo,"LI",{});var oqe=s(C3);HMe=n(oqe,"STRONG",{});var q8t=s(HMe);cNr=r(q8t,"roformer"),q8t.forEach(t),fNr=r(oqe," \u2014 "),TK=n(oqe,"A",{href:!0});var N8t=s(TK);mNr=r(N8t,"FlaxRoFormerForTokenClassification"),N8t.forEach(t),gNr=r(oqe," (RoFormer model)"),oqe.forEach(t),hNr=i(Fo),w3=n(Fo,"LI",{});var rqe=s(w3);UMe=n(rqe,"STRONG",{});var j8t=s(UMe);pNr=r(j8t,"xlm-roberta"),j8t.forEach(t),_Nr=r(rqe," \u2014 "),MK=n(rqe,"A",{href:!0});var D8t=s(MK);uNr=r(D8t,"FlaxXLMRobertaForTokenClassification"),D8t.forEach(t),bNr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),Fo.forEach(t),vNr=i(oi),T(A3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),cje=i(f),Kc=n(f,"H2",{class:!0});var uGe=s(Kc);y3=n(uGe,"A",{id:!0,class:!0,href:!0});var G8t=s(y3);JMe=n(G8t,"SPAN",{});var O8t=s(JMe);T(rx.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),FNr=i(uGe),YMe=n(uGe,"SPAN",{});var V8t=s(YMe);TNr=r(V8t,"FlaxAutoModelForMultipleChoice"),V8t.forEach(t),uGe.forEach(t),fje=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(tx.$$.fragment,ri),MNr=i(ri),Zc=n(ri,"P",{});var kee=s(Zc);ENr=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EK=n(kee,"A",{href:!0});var X8t=s(EK);CNr=r(X8t,"from_pretrained()"),X8t.forEach(t),wNr=r(kee," class method or the "),CK=n(kee,"A",{href:!0});var z8t=s(CK);ANr=r(z8t,"from_config()"),z8t.forEach(t),yNr=r(kee,` class
method.`),kee.forEach(t),LNr=i(ri),ax=n(ri,"P",{});var bGe=s(ax);xNr=r(bGe,"This class cannot be instantiated directly using "),KMe=n(bGe,"CODE",{});var W8t=s(KMe);$Nr=r(W8t,"__init__()"),W8t.forEach(t),kNr=r(bGe," (throws an error)."),bGe.forEach(t),SNr=i(ri),Ut=n(ri,"DIV",{class:!0});var sA=s(Ut);T(nx.$$.fragment,sA),RNr=i(sA),ZMe=n(sA,"P",{});var Q8t=s(ZMe);PNr=r(Q8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q8t.forEach(t),BNr=i(sA),ef=n(sA,"P",{});var See=s(ef);INr=r(See,`Note:
Loading a model from its configuration file does `),e4e=n(See,"STRONG",{});var H8t=s(e4e);qNr=r(H8t,"not"),H8t.forEach(t),NNr=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(See,"A",{href:!0});var U8t=s(wK);jNr=r(U8t,"from_pretrained()"),U8t.forEach(t),DNr=r(See," to load the model weights."),See.forEach(t),GNr=i(sA),T(L3.$$.fragment,sA),sA.forEach(t),ONr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(sx.$$.fragment,ti),VNr=i(ti),o4e=n(ti,"P",{});var J8t=s(o4e);XNr=r(J8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J8t.forEach(t),zNr=i(ti),Mn=n(ti,"P",{});var lA=s(Mn);WNr=r(lA,"The model class to instantiate is selected based on the "),r4e=n(lA,"CODE",{});var Y8t=s(r4e);QNr=r(Y8t,"model_type"),Y8t.forEach(t),HNr=r(lA,` property of the config object (either
passed as an argument or loaded from `),t4e=n(lA,"CODE",{});var K8t=s(t4e);UNr=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),JNr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(lA,"CODE",{});var Z8t=s(a4e);YNr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),KNr=r(lA,":"),lA.forEach(t),ZNr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);x3=n(To,"LI",{});var tqe=s(x3);n4e=n(tqe,"STRONG",{});var eLt=s(n4e);ejr=r(eLt,"albert"),eLt.forEach(t),ojr=r(tqe," \u2014 "),AK=n(tqe,"A",{href:!0});var oLt=s(AK);rjr=r(oLt,"FlaxAlbertForMultipleChoice"),oLt.forEach(t),tjr=r(tqe," (ALBERT model)"),tqe.forEach(t),ajr=i(To),$3=n(To,"LI",{});var aqe=s($3);s4e=n(aqe,"STRONG",{});var rLt=s(s4e);njr=r(rLt,"bert"),rLt.forEach(t),sjr=r(aqe," \u2014 "),yK=n(aqe,"A",{href:!0});var tLt=s(yK);ljr=r(tLt,"FlaxBertForMultipleChoice"),tLt.forEach(t),ijr=r(aqe," (BERT model)"),aqe.forEach(t),djr=i(To),k3=n(To,"LI",{});var nqe=s(k3);l4e=n(nqe,"STRONG",{});var aLt=s(l4e);cjr=r(aLt,"big_bird"),aLt.forEach(t),fjr=r(nqe," \u2014 "),LK=n(nqe,"A",{href:!0});var nLt=s(LK);mjr=r(nLt,"FlaxBigBirdForMultipleChoice"),nLt.forEach(t),gjr=r(nqe," (BigBird model)"),nqe.forEach(t),hjr=i(To),S3=n(To,"LI",{});var sqe=s(S3);i4e=n(sqe,"STRONG",{});var sLt=s(i4e);pjr=r(sLt,"distilbert"),sLt.forEach(t),_jr=r(sqe," \u2014 "),xK=n(sqe,"A",{href:!0});var lLt=s(xK);ujr=r(lLt,"FlaxDistilBertForMultipleChoice"),lLt.forEach(t),bjr=r(sqe," (DistilBERT model)"),sqe.forEach(t),vjr=i(To),R3=n(To,"LI",{});var lqe=s(R3);d4e=n(lqe,"STRONG",{});var iLt=s(d4e);Fjr=r(iLt,"electra"),iLt.forEach(t),Tjr=r(lqe," \u2014 "),$K=n(lqe,"A",{href:!0});var dLt=s($K);Mjr=r(dLt,"FlaxElectraForMultipleChoice"),dLt.forEach(t),Ejr=r(lqe," (ELECTRA model)"),lqe.forEach(t),Cjr=i(To),P3=n(To,"LI",{});var iqe=s(P3);c4e=n(iqe,"STRONG",{});var cLt=s(c4e);wjr=r(cLt,"roberta"),cLt.forEach(t),Ajr=r(iqe," \u2014 "),kK=n(iqe,"A",{href:!0});var fLt=s(kK);yjr=r(fLt,"FlaxRobertaForMultipleChoice"),fLt.forEach(t),Ljr=r(iqe," (RoBERTa model)"),iqe.forEach(t),xjr=i(To),B3=n(To,"LI",{});var dqe=s(B3);f4e=n(dqe,"STRONG",{});var mLt=s(f4e);$jr=r(mLt,"roformer"),mLt.forEach(t),kjr=r(dqe," \u2014 "),SK=n(dqe,"A",{href:!0});var gLt=s(SK);Sjr=r(gLt,"FlaxRoFormerForMultipleChoice"),gLt.forEach(t),Rjr=r(dqe," (RoFormer model)"),dqe.forEach(t),Pjr=i(To),I3=n(To,"LI",{});var cqe=s(I3);m4e=n(cqe,"STRONG",{});var hLt=s(m4e);Bjr=r(hLt,"xlm-roberta"),hLt.forEach(t),Ijr=r(cqe," \u2014 "),RK=n(cqe,"A",{href:!0});var pLt=s(RK);qjr=r(pLt,"FlaxXLMRobertaForMultipleChoice"),pLt.forEach(t),Njr=r(cqe," (XLM-RoBERTa model)"),cqe.forEach(t),To.forEach(t),jjr=i(ti),T(q3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),mje=i(f),of=n(f,"H2",{class:!0});var vGe=s(of);N3=n(vGe,"A",{id:!0,class:!0,href:!0});var _Lt=s(N3);g4e=n(_Lt,"SPAN",{});var uLt=s(g4e);T(lx.$$.fragment,uLt),uLt.forEach(t),_Lt.forEach(t),Djr=i(vGe),h4e=n(vGe,"SPAN",{});var bLt=s(h4e);Gjr=r(bLt,"FlaxAutoModelForNextSentencePrediction"),bLt.forEach(t),vGe.forEach(t),gje=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(ix.$$.fragment,ai),Ojr=i(ai),rf=n(ai,"P",{});var Ree=s(rf);Vjr=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PK=n(Ree,"A",{href:!0});var vLt=s(PK);Xjr=r(vLt,"from_pretrained()"),vLt.forEach(t),zjr=r(Ree," class method or the "),BK=n(Ree,"A",{href:!0});var FLt=s(BK);Wjr=r(FLt,"from_config()"),FLt.forEach(t),Qjr=r(Ree,` class
method.`),Ree.forEach(t),Hjr=i(ai),dx=n(ai,"P",{});var FGe=s(dx);Ujr=r(FGe,"This class cannot be instantiated directly using "),p4e=n(FGe,"CODE",{});var TLt=s(p4e);Jjr=r(TLt,"__init__()"),TLt.forEach(t),Yjr=r(FGe," (throws an error)."),FGe.forEach(t),Kjr=i(ai),Jt=n(ai,"DIV",{class:!0});var iA=s(Jt);T(cx.$$.fragment,iA),Zjr=i(iA),_4e=n(iA,"P",{});var MLt=s(_4e);eDr=r(MLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MLt.forEach(t),oDr=i(iA),tf=n(iA,"P",{});var Pee=s(tf);rDr=r(Pee,`Note:
Loading a model from its configuration file does `),u4e=n(Pee,"STRONG",{});var ELt=s(u4e);tDr=r(ELt,"not"),ELt.forEach(t),aDr=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(Pee,"A",{href:!0});var CLt=s(IK);nDr=r(CLt,"from_pretrained()"),CLt.forEach(t),sDr=r(Pee," to load the model weights."),Pee.forEach(t),lDr=i(iA),T(j3.$$.fragment,iA),iA.forEach(t),iDr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(fx.$$.fragment,ni),dDr=i(ni),b4e=n(ni,"P",{});var wLt=s(b4e);cDr=r(wLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wLt.forEach(t),fDr=i(ni),En=n(ni,"P",{});var dA=s(En);mDr=r(dA,"The model class to instantiate is selected based on the "),v4e=n(dA,"CODE",{});var ALt=s(v4e);gDr=r(ALt,"model_type"),ALt.forEach(t),hDr=r(dA,` property of the config object (either
passed as an argument or loaded from `),F4e=n(dA,"CODE",{});var yLt=s(F4e);pDr=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),_Dr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(dA,"CODE",{});var LLt=s(T4e);uDr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),bDr=r(dA,":"),dA.forEach(t),vDr=i(ni),M4e=n(ni,"UL",{});var xLt=s(M4e);D3=n(xLt,"LI",{});var fqe=s(D3);E4e=n(fqe,"STRONG",{});var $Lt=s(E4e);FDr=r($Lt,"bert"),$Lt.forEach(t),TDr=r(fqe," \u2014 "),qK=n(fqe,"A",{href:!0});var kLt=s(qK);MDr=r(kLt,"FlaxBertForNextSentencePrediction"),kLt.forEach(t),EDr=r(fqe," (BERT model)"),fqe.forEach(t),xLt.forEach(t),CDr=i(ni),T(G3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),hje=i(f),af=n(f,"H2",{class:!0});var TGe=s(af);O3=n(TGe,"A",{id:!0,class:!0,href:!0});var SLt=s(O3);C4e=n(SLt,"SPAN",{});var RLt=s(C4e);T(mx.$$.fragment,RLt),RLt.forEach(t),SLt.forEach(t),wDr=i(TGe),w4e=n(TGe,"SPAN",{});var PLt=s(w4e);ADr=r(PLt,"FlaxAutoModelForImageClassification"),PLt.forEach(t),TGe.forEach(t),pje=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(gx.$$.fragment,si),yDr=i(si),nf=n(si,"P",{});var Bee=s(nf);LDr=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NK=n(Bee,"A",{href:!0});var BLt=s(NK);xDr=r(BLt,"from_pretrained()"),BLt.forEach(t),$Dr=r(Bee," class method or the "),jK=n(Bee,"A",{href:!0});var ILt=s(jK);kDr=r(ILt,"from_config()"),ILt.forEach(t),SDr=r(Bee,` class
method.`),Bee.forEach(t),RDr=i(si),hx=n(si,"P",{});var MGe=s(hx);PDr=r(MGe,"This class cannot be instantiated directly using "),A4e=n(MGe,"CODE",{});var qLt=s(A4e);BDr=r(qLt,"__init__()"),qLt.forEach(t),IDr=r(MGe," (throws an error)."),MGe.forEach(t),qDr=i(si),Yt=n(si,"DIV",{class:!0});var cA=s(Yt);T(px.$$.fragment,cA),NDr=i(cA),y4e=n(cA,"P",{});var NLt=s(y4e);jDr=r(NLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NLt.forEach(t),DDr=i(cA),sf=n(cA,"P",{});var Iee=s(sf);GDr=r(Iee,`Note:
Loading a model from its configuration file does `),L4e=n(Iee,"STRONG",{});var jLt=s(L4e);ODr=r(jLt,"not"),jLt.forEach(t),VDr=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(Iee,"A",{href:!0});var DLt=s(DK);XDr=r(DLt,"from_pretrained()"),DLt.forEach(t),zDr=r(Iee," to load the model weights."),Iee.forEach(t),WDr=i(cA),T(V3.$$.fragment,cA),cA.forEach(t),QDr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(_x.$$.fragment,li),HDr=i(li),x4e=n(li,"P",{});var GLt=s(x4e);UDr=r(GLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GLt.forEach(t),JDr=i(li),Cn=n(li,"P",{});var fA=s(Cn);YDr=r(fA,"The model class to instantiate is selected based on the "),$4e=n(fA,"CODE",{});var OLt=s($4e);KDr=r(OLt,"model_type"),OLt.forEach(t),ZDr=r(fA,` property of the config object (either
passed as an argument or loaded from `),k4e=n(fA,"CODE",{});var VLt=s(k4e);eGr=r(VLt,"pretrained_model_name_or_path"),VLt.forEach(t),oGr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(fA,"CODE",{});var XLt=s(S4e);rGr=r(XLt,"pretrained_model_name_or_path"),XLt.forEach(t),tGr=r(fA,":"),fA.forEach(t),aGr=i(li),ux=n(li,"UL",{});var EGe=s(ux);X3=n(EGe,"LI",{});var mqe=s(X3);R4e=n(mqe,"STRONG",{});var zLt=s(R4e);nGr=r(zLt,"beit"),zLt.forEach(t),sGr=r(mqe," \u2014 "),GK=n(mqe,"A",{href:!0});var WLt=s(GK);lGr=r(WLt,"FlaxBeitForImageClassification"),WLt.forEach(t),iGr=r(mqe," (BEiT model)"),mqe.forEach(t),dGr=i(EGe),z3=n(EGe,"LI",{});var gqe=s(z3);P4e=n(gqe,"STRONG",{});var QLt=s(P4e);cGr=r(QLt,"vit"),QLt.forEach(t),fGr=r(gqe," \u2014 "),OK=n(gqe,"A",{href:!0});var HLt=s(OK);mGr=r(HLt,"FlaxViTForImageClassification"),HLt.forEach(t),gGr=r(gqe," (ViT model)"),gqe.forEach(t),EGe.forEach(t),hGr=i(li),T(W3.$$.fragment,li),li.forEach(t),si.forEach(t),_je=i(f),lf=n(f,"H2",{class:!0});var CGe=s(lf);Q3=n(CGe,"A",{id:!0,class:!0,href:!0});var ULt=s(Q3);B4e=n(ULt,"SPAN",{});var JLt=s(B4e);T(bx.$$.fragment,JLt),JLt.forEach(t),ULt.forEach(t),pGr=i(CGe),I4e=n(CGe,"SPAN",{});var YLt=s(I4e);_Gr=r(YLt,"FlaxAutoModelForVision2Seq"),YLt.forEach(t),CGe.forEach(t),uje=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(vx.$$.fragment,ii),uGr=i(ii),df=n(ii,"P",{});var qee=s(df);bGr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VK=n(qee,"A",{href:!0});var KLt=s(VK);vGr=r(KLt,"from_pretrained()"),KLt.forEach(t),FGr=r(qee," class method or the "),XK=n(qee,"A",{href:!0});var ZLt=s(XK);TGr=r(ZLt,"from_config()"),ZLt.forEach(t),MGr=r(qee,` class
method.`),qee.forEach(t),EGr=i(ii),Fx=n(ii,"P",{});var wGe=s(Fx);CGr=r(wGe,"This class cannot be instantiated directly using "),q4e=n(wGe,"CODE",{});var e7t=s(q4e);wGr=r(e7t,"__init__()"),e7t.forEach(t),AGr=r(wGe," (throws an error)."),wGe.forEach(t),yGr=i(ii),Kt=n(ii,"DIV",{class:!0});var mA=s(Kt);T(Tx.$$.fragment,mA),LGr=i(mA),N4e=n(mA,"P",{});var o7t=s(N4e);xGr=r(o7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o7t.forEach(t),$Gr=i(mA),cf=n(mA,"P",{});var Nee=s(cf);kGr=r(Nee,`Note:
Loading a model from its configuration file does `),j4e=n(Nee,"STRONG",{});var r7t=s(j4e);SGr=r(r7t,"not"),r7t.forEach(t),RGr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(Nee,"A",{href:!0});var t7t=s(zK);PGr=r(t7t,"from_pretrained()"),t7t.forEach(t),BGr=r(Nee," to load the model weights."),Nee.forEach(t),IGr=i(mA),T(H3.$$.fragment,mA),mA.forEach(t),qGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(Mx.$$.fragment,di),NGr=i(di),D4e=n(di,"P",{});var a7t=s(D4e);jGr=r(a7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a7t.forEach(t),DGr=i(di),wn=n(di,"P",{});var gA=s(wn);GGr=r(gA,"The model class to instantiate is selected based on the "),G4e=n(gA,"CODE",{});var n7t=s(G4e);OGr=r(n7t,"model_type"),n7t.forEach(t),VGr=r(gA,` property of the config object (either
passed as an argument or loaded from `),O4e=n(gA,"CODE",{});var s7t=s(O4e);XGr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),zGr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(gA,"CODE",{});var l7t=s(V4e);WGr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),QGr=r(gA,":"),gA.forEach(t),HGr=i(di),X4e=n(di,"UL",{});var i7t=s(X4e);U3=n(i7t,"LI",{});var hqe=s(U3);z4e=n(hqe,"STRONG",{});var d7t=s(z4e);UGr=r(d7t,"vision-encoder-decoder"),d7t.forEach(t),JGr=r(hqe," \u2014 "),WK=n(hqe,"A",{href:!0});var c7t=s(WK);YGr=r(c7t,"FlaxVisionEncoderDecoderModel"),c7t.forEach(t),KGr=r(hqe," (Vision Encoder decoder model)"),hqe.forEach(t),i7t.forEach(t),ZGr=i(di),T(J3.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(h$t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(G$,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(O$,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig"),c(V$,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig"),c(X$,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig"),c(z$,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig"),c(W$,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Q$,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig"),c(H$,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(U$,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(J$,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Y$,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig"),c(K$,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig"),c(Z$,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig"),c(ek,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig"),c(ok,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig"),c(rk,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig"),c(tk,"href","/docs/transformers/pr_16659/en/model_doc/cvt#transformers.CvtConfig"),c(ak,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(nk,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(sk,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(lk,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig"),c(ik,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(dk,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ck,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig"),c(fk,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig"),c(mk,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig"),c(gk,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig"),c(hk,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig"),c(pk,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig"),c(_k,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(uk,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig"),c(bk,"href","/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaConfig"),c(vk,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig"),c(Fk,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig"),c(Tk,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig"),c(Mk,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig"),c(Ek,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config"),c(Ck,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(wk,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig"),c(Ak,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig"),c(yk,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig"),c(Lk,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(xk,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c($k,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(kk,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig"),c(Sk,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig"),c(Rk,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig"),c(Pk,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig"),c(Bk,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ik,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig"),c(qk,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Nk,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig"),c(jk,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Dk,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Gk,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig"),c(Ok,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config"),c(Vk,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Xk,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(zk,"href","/docs/transformers/pr_16659/en/model_doc/opt#transformers.OPTConfig"),c(Wk,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig"),c(Qk,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Hk,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig"),c(Uk,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Jk,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Yk,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Kk,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagConfig"),c(Zk,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmConfig"),c(eS,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig"),c(oS,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig"),c(rS,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig"),c(tS,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig"),c(aS,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig"),c(nS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig"),c(sS,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig"),c(lS,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig"),c(iS,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig"),c(dS,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig"),c(cS,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(fS,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(mS,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(gS,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig"),c(hS,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(pS,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig"),c(_S,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config"),c(uS,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig"),c(bS,"href","/docs/transformers/pr_16659/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(vS,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(FS,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig"),c(TS,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(MS,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(ES,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig"),c(CS,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig"),c(wS,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(AS,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(yS,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(LS,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig"),c(xS,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c($S,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(kS,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(SS,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig"),c(RS,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig"),c(PS,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig"),c(BS,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(IS,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(qS,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(NS,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig"),c(jS,"href","/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosConfig"),c(DS,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(GS,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(OS,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),c(VS,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(XS,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizer"),c(zS,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizerFast"),c(WS,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizer"),c(QS,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(HS,"href","/docs/transformers/pr_16659/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(US,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(JS,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(YS,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(KS,"href","/docs/transformers/pr_16659/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(ZS,"href","/docs/transformers/pr_16659/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(eR,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(oR,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(rR,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tR,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aR,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(nR,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(sR,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(lR,"href","/docs/transformers/pr_16659/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(iR,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizer"),c(dR,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(cR,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineTokenizer"),c(fR,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizer"),c(mR,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(gR,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(hR,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(pR,"href","/docs/transformers/pr_16659/en/model_doc/cpm#transformers.CpmTokenizer"),c(_R,"href","/docs/transformers/pr_16659/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(uR,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(bR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FR,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizer"),c(TR,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(MR,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ER,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(CR,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(wR,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(AR,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(yR,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(LR,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizer"),c(xR,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizerFast"),c($R,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(kR,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizer"),c(SR,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(RR,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(PR,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizer"),c(BR,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(IR,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qR,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NR,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(jR,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(DR,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(GR,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OR,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VR,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizer"),c(XR,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(zR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HR,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(UR,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(JR,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(YR,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(KR,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ZR,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(eP,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizer"),c(oP,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizerFast"),c(rP,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizer"),c(tP,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(aP,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeTokenizer"),c(nP,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(sP,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(lP,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(iP,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianTokenizer"),c(dP,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizer"),c(cP,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(fP,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(mP,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(gP,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(hP,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(pP,"href","/docs/transformers/pr_16659/en/model_doc/mluke#transformers.MLukeTokenizer"),c(_P,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(uP,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(bP,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(vP,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(FP,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Tokenizer"),c(TP,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5TokenizerFast"),c(MP,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),c(EP,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CP,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wP,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(AP,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yP,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(LP,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xP,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($P,"href","/docs/transformers/pr_16659/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kP,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartTokenizer"),c(SP,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(RP,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(PP,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(BP,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagTokenizer"),c(IP,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizer"),c(qP,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizerFast"),c(NP,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizer"),c(jP,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(DP,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizer"),c(GP,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(VP,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(XP,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zP,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WP,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(QP,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(HP,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(UP,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(JP,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizer"),c(YP,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(KP,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ZP,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(eB,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Tokenizer"),c(oB,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5TokenizerFast"),c(rB,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasTokenizer"),c(tB,"href","/docs/transformers/pr_16659/en/model_doc/tapex#transformers.TapexTokenizer"),c(aB,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(nB,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(cB,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizer"),c(fB,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(mB,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMTokenizer"),c(gB,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(hB,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(pB,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(_B,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uB,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bB,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(vB,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(FB,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),c(TB,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"id","transformers.AutoFeatureExtractor"),c(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(th,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(MB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(EB,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(LB,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c($B,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(IB,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(HB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoProcessor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(JB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(YB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPProcessor"),c(KB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(ZB,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(eI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(tI,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(aI,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRProcessor"),c(nI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lI,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltProcessor"),c(iI,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(dI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ep,"id","transformers.AutoModel"),c(ep,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ep,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(mI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pI,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel"),c(_I,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel"),c(uI,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel"),c(bI,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),c(vI,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(FI,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel"),c(TI,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(MI,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(EI,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(CI,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel"),c(wI,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel"),c(AI,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel"),c(yI,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel"),c(LI,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel"),c(xI,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel"),c($I,"href","/docs/transformers/pr_16659/en/model_doc/cvt#transformers.CvtModel"),c(kI,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(SI,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(RI,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(PI,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel"),c(BI,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(II,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(qI,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel"),c(NI,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel"),c(jI,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel"),c(DI,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(GI,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel"),c(OI,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel"),c(VI,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel"),c(XI,"href","/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaModel"),c(zI,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel"),c(WI,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel"),c(QI,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel"),c(HI,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel"),c(UI,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel"),c(JI,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model"),c(YI,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(KI,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(ZI,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel"),c(eq,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel"),c(oq,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel"),c(rq,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(tq,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(aq,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(nq,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel"),c(sq,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel"),c(lq,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel"),c(iq,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel"),c(dq,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model"),c(cq,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel"),c(fq,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel"),c(mq,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel"),c(gq,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(hq,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel"),c(pq,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel"),c(_q,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model"),c(uq,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel"),c(bq,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(vq,"href","/docs/transformers/pr_16659/en/model_doc/opt#transformers.OPTModel"),c(Fq,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel"),c(Tq,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel"),c(Mq,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel"),c(Eq,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Cq,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wq,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Aq,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel"),c(yq,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel"),c(Lq,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel"),c(xq,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel"),c($q,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),c(kq,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel"),c(Sq,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel"),c(Rq,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel"),c(Pq,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel"),c(Bq,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel"),c(Iq,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(qq,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel"),c(Nq,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jq,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel"),c(Dq,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model"),c(Gq,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel"),c(Oq,"href","/docs/transformers/pr_16659/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Vq,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Xq,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel"),c(zq,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Wq,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel"),c(Qq,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel"),c(Hq,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Uq,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Jq,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel"),c(Yq,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Kq,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Zq,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(eN,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel"),c(oN,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel"),c(rN,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel"),c(tN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(aN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(nN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(sN,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel"),c(lN,"href","/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosModel"),c(iN,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J_,"id","transformers.AutoModelForPreTraining"),c(J_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(dN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mN,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining"),c(gN,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hN,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining"),c(pN,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(_N,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(uN,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bN,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vN,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(FN,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TN,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(MN,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining"),c(EN,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CN,"href","/docs/transformers/pr_16659/en/model_doc/flava#transformers.FlavaForPreTraining"),c(wN,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining"),c(AN,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yN,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(LN,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(xN,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($N,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kN,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SN,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(RN,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(PN,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(BN,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(IN,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qN,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),c(NN,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jN,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(DN,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ON,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VN,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XN,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(zN,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(WN,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(QN,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(HN,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(UN,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(JN,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(YN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(KN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ZN,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ou,"id","transformers.AutoModelForCausalLM"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(ej,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tj,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM"),c(aj,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel"),c(nj,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(sj,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(lj,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(ij,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(dj,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(cj,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(fj,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mj,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(gj,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM"),c(hj,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pj,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(_j,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(uj,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(bj,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM"),c(vj,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Fj,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Tj,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Mj,"href","/docs/transformers/pr_16659/en/model_doc/opt#transformers.OPTForCausalLM"),c(Ej,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Cj,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(wj,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Aj,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(yj,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Lj,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(xj,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM"),c($j,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(kj,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Sj,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Rj,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Pj,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Bj,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Ij,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(qj,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Nj,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(jj,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.AutoModelForMaskedLM"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Dj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vj,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Qj,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jj,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yj,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kj,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(eD,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oD,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(rD,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(tD,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(aD,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(nD,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(sD,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(dD,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cD,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(fD,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(mD,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(hD,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_D,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(uD,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vD,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(TD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(MD,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h1,"id","transformers.AutoModelForSeq2SeqLM"),c(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(ED,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AD,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c($D,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(kD,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel"),c(BD,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ND,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForSequenceClassification"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(OD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zD,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dG,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kb,"id","transformers.AutoModelForMultipleChoice"),c(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kb,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(qG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DG,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(VG,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(zG,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(QG,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(HG,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(JG,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(KG,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(oO,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(rO,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(aO,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(nO,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(iO,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(dO,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(cO,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(fO,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(mO,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(gO,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(hO,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c2,"id","transformers.AutoModelForNextSentencePrediction"),c(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c2,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(pO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_O,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bO,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(vO,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(FO,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(TO,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(MO,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v2,"id","transformers.AutoModelForTokenClassification"),c(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v2,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(EO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(yO,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification"),c(LO,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(xO,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c($O,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification"),c(kO,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(RO,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(PO,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(BO,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(IO,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(qO,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(NO,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(jO,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(DO,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(GO,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(OO,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(VO,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(XO,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(zO,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(WO,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(HO,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(UO,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(JO,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(KO,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(ZO,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(eV,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(oV,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(rV,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(tV,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(aV,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.AutoModelForQuestionAnswering"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(nV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iV,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(MV,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($V,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(VV,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(WV,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.AutoModelForTableQuestionAnswering"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(QV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.AutoModelForImageClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(YV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification"),c(oX,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(rX,"href","/docs/transformers/pr_16659/en/model_doc/cvt#transformers.CvtForImageClassification"),c(tX,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(aX,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification"),c(nX,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(sX,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(lX,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(iX,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(dX,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(cX,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(fX,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(mX,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(gX,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(hX,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification"),c(pX,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification"),c(_X,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mv,"id","transformers.AutoModelForVision2Seq"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(uX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForAudioClassification"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(TX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CX,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(wX,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(AX,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(yX,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(LX,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(xX,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c($X,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(kX,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(SX,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForAudioFrameClassification"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(RX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(qX,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(NX,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(jX,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(DX,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForCTC"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(GX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XX,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(zX,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC"),c(WX,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC"),c(QX,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC"),c(HX,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(UX,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(JX,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(YX,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(KX,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tz,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.AutoModelForAudioXVector"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(az,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(iz,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(dz,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(cz,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(fz,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForMaskedImageModeling"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(mz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(_z,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(uz,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForObjectDetection"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(bz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Mz,"href","/docs/transformers/pr_16659/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForImageSegmentation"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForSemanticSegmentation"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(yz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(kz,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Sz,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Rz,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForInstanceSegmentation"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.TFAutoModel"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel"),c(Oz,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel"),c(Vz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel"),c(Xz,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(zz,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Wz,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel"),c(Qz,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel"),c(Hz,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel"),c(Uz,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel"),c(Jz,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Yz,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Kz,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel"),c(Zz,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(eW,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(oW,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(rW,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel"),c(tW,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(aW,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel"),c(nW,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(sW,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model"),c(lW,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel"),c(iW,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel"),c(dW,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(cW,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel"),c(fW,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel"),c(mW,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel"),c(gW,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel"),c(hW,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel"),c(pW,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(_W,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel"),c(uW,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model"),c(bW,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(vW,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel"),c(FW,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel"),c(TW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel"),c(MW,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel"),c(EW,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(CW,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.TFSwinModel"),c(wW,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model"),c(AW,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel"),c(yW,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(LW,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel"),c(xW,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c($W,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(kW,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel"),c(SW,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(RW,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModelForPreTraining"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(PW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(NW,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(jW,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining"),c(DW,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(GW,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(OW,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(VW,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(XW,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zW,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(WW,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(QW,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(HW,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(UW,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(JW,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(YW,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(ZW,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(eQ,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(rQ,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(tQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c9,"id","transformers.TFAutoModelForCausalLM"),c(c9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c9,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(sQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(cQ,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(fQ,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gQ,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(hQ,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(pQ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(_Q,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(uQ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(bQ,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w9,"id","transformers.TFAutoModelForImageClassification"),c(w9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w9,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(TQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(wQ,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(AQ,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(yQ,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S9,"id","transformers.TFAutoModelForMaskedLM"),c(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S9,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(VQ,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(QQ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(HQ,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(UQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(YQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(oH,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(tH,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(aH,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(nH,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel"),c(sH,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(lH,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(iH,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(dH,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForSequenceClassification"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(cH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(hH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(pH,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(uH,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(bH,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(vH,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(FH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(TH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(MH,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(EH,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(CH,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(wH,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(AH,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(yH,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(LH,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(xH,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c($H,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(kH,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(RH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(PH,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(BH,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(IH,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(qH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(NH,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForMultipleChoice"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(jH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(VH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(XH,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(zH,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(HH,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(JH,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(YH,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(KH,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(eU,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(oU,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(rU,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(tU,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(aU,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(nU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(dU,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(cU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.TFAutoModelForTokenClassification"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(hU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(bU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(FU,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(TU,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(MU,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(EU,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(CU,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(wU,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(AU,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(yU,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(LU,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(xU,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($U,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(kU,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(SU,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(RU,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(PU,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(BU,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(IU,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.TFAutoModelForQuestionAnswering"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(qU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(UU,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(aJ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForVision2Seq"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.FlaxAutoModel"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel"),c(bJ,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel"),c(vJ,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel"),c(FJ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel"),c(TJ,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(MJ,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(EJ,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(CJ,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel"),c(wJ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(AJ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel"),c(yJ,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(LJ,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(xJ,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel"),c($J,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel"),c(kJ,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel"),c(SJ,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model"),c(RJ,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(PJ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BJ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(IJ,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model"),c(qJ,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(NJ,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel"),c(jJ,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(DJ,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(GJ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.FlaxAutoModelForCausalLM"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(WJ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(QJ,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(HJ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(UJ,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JJ,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YJ,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KJ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(ZJ,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForPreTraining"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(eY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(aY,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nY,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(sY,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(lY,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(iY,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cY,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fY,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mY,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hY,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForMaskedLM"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(pY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(vY,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FY,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(TY,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(MY,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(EY,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(CY,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wY,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(AY,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(yY,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(LY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(BY,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(IY,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NY,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(DY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(XY,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(zY,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(QY,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(HY,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(UY,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(JY,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(YY,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(KY,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForTokenClassification"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(mK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(_K,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(uK,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(bK,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(vK,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(FK,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(TK,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(MK,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(EK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(yK,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(xK,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(kK,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(SK,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(RK,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(PK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForImageClassification"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(NK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(OK,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.FlaxAutoModelForVision2Seq"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(VK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,hA),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,pA),e(We,Ln),e(We,xn),e(xn,_A),e(We,hi),e(We,$n),e($n,uA),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,B$),e(Ae,_i),e(_i,I$),e(Ae,q$),b(f,Eo,u),b(f,wa,u),e(wa,N$),e(wa,uf),e(uf,j$),e(wa,AGe),b(f,pqe,u),b(f,ui,u),e(ui,bf),e(bf,jee),M(bA,jee,null),e(ui,yGe),e(ui,Dee),e(Dee,LGe),b(f,_qe,u),b(f,kn,u),e(kn,xGe),e(kn,Gee),e(Gee,$Ge),e(kn,kGe),e(kn,Oee),e(Oee,SGe),e(kn,RGe),b(f,uqe,u),M(vA,f,u),b(f,bqe,u),b(f,D$,u),e(D$,PGe),b(f,vqe,u),M(vf,f,u),b(f,Fqe,u),b(f,bi,u),e(bi,Ff),e(Ff,Vee),M(FA,Vee,null),e(bi,BGe),e(bi,Xee),e(Xee,IGe),b(f,Tqe,u),b(f,Co,u),M(TA,Co,null),e(Co,qGe),e(Co,MA),e(MA,NGe),e(MA,G$),e(G$,jGe),e(MA,DGe),e(Co,GGe),e(Co,EA),e(EA,OGe),e(EA,zee),e(zee,VGe),e(EA,XGe),e(Co,zGe),e(Co,Er),M(CA,Er,null),e(Er,WGe),e(Er,Wee),e(Wee,QGe),e(Er,HGe),e(Er,vi),e(vi,UGe),e(vi,Qee),e(Qee,JGe),e(vi,YGe),e(vi,Hee),e(Hee,KGe),e(vi,ZGe),e(Er,eOe),e(Er,A),e(A,Tf),e(Tf,Uee),e(Uee,oOe),e(Tf,rOe),e(Tf,O$),e(O$,tOe),e(Tf,aOe),e(A,nOe),e(A,Mf),e(Mf,Jee),e(Jee,sOe),e(Mf,lOe),e(Mf,V$),e(V$,iOe),e(Mf,dOe),e(A,cOe),e(A,Ef),e(Ef,Yee),e(Yee,fOe),e(Ef,mOe),e(Ef,X$),e(X$,gOe),e(Ef,hOe),e(A,pOe),e(A,Cf),e(Cf,Kee),e(Kee,_Oe),e(Cf,uOe),e(Cf,z$),e(z$,bOe),e(Cf,vOe),e(A,FOe),e(A,wf),e(wf,Zee),e(Zee,TOe),e(wf,MOe),e(wf,W$),e(W$,EOe),e(wf,COe),e(A,wOe),e(A,Af),e(Af,eoe),e(eoe,AOe),e(Af,yOe),e(Af,Q$),e(Q$,LOe),e(Af,xOe),e(A,$Oe),e(A,yf),e(yf,ooe),e(ooe,kOe),e(yf,SOe),e(yf,H$),e(H$,ROe),e(yf,POe),e(A,BOe),e(A,Lf),e(Lf,roe),e(roe,IOe),e(Lf,qOe),e(Lf,U$),e(U$,NOe),e(Lf,jOe),e(A,DOe),e(A,xf),e(xf,toe),e(toe,GOe),e(xf,OOe),e(xf,J$),e(J$,VOe),e(xf,XOe),e(A,zOe),e(A,$f),e($f,aoe),e(aoe,WOe),e($f,QOe),e($f,Y$),e(Y$,HOe),e($f,UOe),e(A,JOe),e(A,kf),e(kf,noe),e(noe,YOe),e(kf,KOe),e(kf,K$),e(K$,ZOe),e(kf,eVe),e(A,oVe),e(A,Sf),e(Sf,soe),e(soe,rVe),e(Sf,tVe),e(Sf,Z$),e(Z$,aVe),e(Sf,nVe),e(A,sVe),e(A,Rf),e(Rf,loe),e(loe,lVe),e(Rf,iVe),e(Rf,ek),e(ek,dVe),e(Rf,cVe),e(A,fVe),e(A,Pf),e(Pf,ioe),e(ioe,mVe),e(Pf,gVe),e(Pf,ok),e(ok,hVe),e(Pf,pVe),e(A,_Ve),e(A,Bf),e(Bf,doe),e(doe,uVe),e(Bf,bVe),e(Bf,rk),e(rk,vVe),e(Bf,FVe),e(A,TVe),e(A,If),e(If,coe),e(coe,MVe),e(If,EVe),e(If,tk),e(tk,CVe),e(If,wVe),e(A,AVe),e(A,qf),e(qf,foe),e(foe,yVe),e(qf,LVe),e(qf,ak),e(ak,xVe),e(qf,$Ve),e(A,kVe),e(A,Nf),e(Nf,moe),e(moe,SVe),e(Nf,RVe),e(Nf,nk),e(nk,PVe),e(Nf,BVe),e(A,IVe),e(A,jf),e(jf,goe),e(goe,qVe),e(jf,NVe),e(jf,sk),e(sk,jVe),e(jf,DVe),e(A,GVe),e(A,Df),e(Df,hoe),e(hoe,OVe),e(Df,VVe),e(Df,lk),e(lk,XVe),e(Df,zVe),e(A,WVe),e(A,Gf),e(Gf,poe),e(poe,QVe),e(Gf,HVe),e(Gf,ik),e(ik,UVe),e(Gf,JVe),e(A,YVe),e(A,Of),e(Of,_oe),e(_oe,KVe),e(Of,ZVe),e(Of,dk),e(dk,eXe),e(Of,oXe),e(A,rXe),e(A,Vf),e(Vf,uoe),e(uoe,tXe),e(Vf,aXe),e(Vf,ck),e(ck,nXe),e(Vf,sXe),e(A,lXe),e(A,Xf),e(Xf,boe),e(boe,iXe),e(Xf,dXe),e(Xf,fk),e(fk,cXe),e(Xf,fXe),e(A,mXe),e(A,zf),e(zf,voe),e(voe,gXe),e(zf,hXe),e(zf,mk),e(mk,pXe),e(zf,_Xe),e(A,uXe),e(A,Wf),e(Wf,Foe),e(Foe,bXe),e(Wf,vXe),e(Wf,gk),e(gk,FXe),e(Wf,TXe),e(A,MXe),e(A,Qf),e(Qf,Toe),e(Toe,EXe),e(Qf,CXe),e(Qf,hk),e(hk,wXe),e(Qf,AXe),e(A,yXe),e(A,Hf),e(Hf,Moe),e(Moe,LXe),e(Hf,xXe),e(Hf,pk),e(pk,$Xe),e(Hf,kXe),e(A,SXe),e(A,Uf),e(Uf,Eoe),e(Eoe,RXe),e(Uf,PXe),e(Uf,_k),e(_k,BXe),e(Uf,IXe),e(A,qXe),e(A,Jf),e(Jf,Coe),e(Coe,NXe),e(Jf,jXe),e(Jf,uk),e(uk,DXe),e(Jf,GXe),e(A,OXe),e(A,Yf),e(Yf,woe),e(woe,VXe),e(Yf,XXe),e(Yf,bk),e(bk,zXe),e(Yf,WXe),e(A,QXe),e(A,Kf),e(Kf,Aoe),e(Aoe,HXe),e(Kf,UXe),e(Kf,vk),e(vk,JXe),e(Kf,YXe),e(A,KXe),e(A,Zf),e(Zf,yoe),e(yoe,ZXe),e(Zf,eze),e(Zf,Fk),e(Fk,oze),e(Zf,rze),e(A,tze),e(A,em),e(em,Loe),e(Loe,aze),e(em,nze),e(em,Tk),e(Tk,sze),e(em,lze),e(A,ize),e(A,om),e(om,xoe),e(xoe,dze),e(om,cze),e(om,Mk),e(Mk,fze),e(om,mze),e(A,gze),e(A,rm),e(rm,$oe),e($oe,hze),e(rm,pze),e(rm,Ek),e(Ek,_ze),e(rm,uze),e(A,bze),e(A,tm),e(tm,koe),e(koe,vze),e(tm,Fze),e(tm,Ck),e(Ck,Tze),e(tm,Mze),e(A,Eze),e(A,am),e(am,Soe),e(Soe,Cze),e(am,wze),e(am,wk),e(wk,Aze),e(am,yze),e(A,Lze),e(A,nm),e(nm,Roe),e(Roe,xze),e(nm,$ze),e(nm,Ak),e(Ak,kze),e(nm,Sze),e(A,Rze),e(A,sm),e(sm,Poe),e(Poe,Pze),e(sm,Bze),e(sm,yk),e(yk,Ize),e(sm,qze),e(A,Nze),e(A,lm),e(lm,Boe),e(Boe,jze),e(lm,Dze),e(lm,Lk),e(Lk,Gze),e(lm,Oze),e(A,Vze),e(A,im),e(im,Ioe),e(Ioe,Xze),e(im,zze),e(im,xk),e(xk,Wze),e(im,Qze),e(A,Hze),e(A,dm),e(dm,qoe),e(qoe,Uze),e(dm,Jze),e(dm,$k),e($k,Yze),e(dm,Kze),e(A,Zze),e(A,cm),e(cm,Noe),e(Noe,eWe),e(cm,oWe),e(cm,kk),e(kk,rWe),e(cm,tWe),e(A,aWe),e(A,fm),e(fm,joe),e(joe,nWe),e(fm,sWe),e(fm,Sk),e(Sk,lWe),e(fm,iWe),e(A,dWe),e(A,mm),e(mm,Doe),e(Doe,cWe),e(mm,fWe),e(mm,Rk),e(Rk,mWe),e(mm,gWe),e(A,hWe),e(A,gm),e(gm,Goe),e(Goe,pWe),e(gm,_We),e(gm,Pk),e(Pk,uWe),e(gm,bWe),e(A,vWe),e(A,hm),e(hm,Ooe),e(Ooe,FWe),e(hm,TWe),e(hm,Bk),e(Bk,MWe),e(hm,EWe),e(A,CWe),e(A,pm),e(pm,Voe),e(Voe,wWe),e(pm,AWe),e(pm,Ik),e(Ik,yWe),e(pm,LWe),e(A,xWe),e(A,_m),e(_m,Xoe),e(Xoe,$We),e(_m,kWe),e(_m,qk),e(qk,SWe),e(_m,RWe),e(A,PWe),e(A,um),e(um,zoe),e(zoe,BWe),e(um,IWe),e(um,Nk),e(Nk,qWe),e(um,NWe),e(A,jWe),e(A,bm),e(bm,Woe),e(Woe,DWe),e(bm,GWe),e(bm,jk),e(jk,OWe),e(bm,VWe),e(A,XWe),e(A,vm),e(vm,Qoe),e(Qoe,zWe),e(vm,WWe),e(vm,Dk),e(Dk,QWe),e(vm,HWe),e(A,UWe),e(A,Fm),e(Fm,Hoe),e(Hoe,JWe),e(Fm,YWe),e(Fm,Gk),e(Gk,KWe),e(Fm,ZWe),e(A,eQe),e(A,Tm),e(Tm,Uoe),e(Uoe,oQe),e(Tm,rQe),e(Tm,Ok),e(Ok,tQe),e(Tm,aQe),e(A,nQe),e(A,Mm),e(Mm,Joe),e(Joe,sQe),e(Mm,lQe),e(Mm,Vk),e(Vk,iQe),e(Mm,dQe),e(A,cQe),e(A,Em),e(Em,Yoe),e(Yoe,fQe),e(Em,mQe),e(Em,Xk),e(Xk,gQe),e(Em,hQe),e(A,pQe),e(A,Cm),e(Cm,Koe),e(Koe,_Qe),e(Cm,uQe),e(Cm,zk),e(zk,bQe),e(Cm,vQe),e(A,FQe),e(A,wm),e(wm,Zoe),e(Zoe,TQe),e(wm,MQe),e(wm,Wk),e(Wk,EQe),e(wm,CQe),e(A,wQe),e(A,Am),e(Am,ere),e(ere,AQe),e(Am,yQe),e(Am,Qk),e(Qk,LQe),e(Am,xQe),e(A,$Qe),e(A,ym),e(ym,ore),e(ore,kQe),e(ym,SQe),e(ym,Hk),e(Hk,RQe),e(ym,PQe),e(A,BQe),e(A,Lm),e(Lm,rre),e(rre,IQe),e(Lm,qQe),e(Lm,Uk),e(Uk,NQe),e(Lm,jQe),e(A,DQe),e(A,xm),e(xm,tre),e(tre,GQe),e(xm,OQe),e(xm,Jk),e(Jk,VQe),e(xm,XQe),e(A,zQe),e(A,$m),e($m,are),e(are,WQe),e($m,QQe),e($m,Yk),e(Yk,HQe),e($m,UQe),e(A,JQe),e(A,km),e(km,nre),e(nre,YQe),e(km,KQe),e(km,Kk),e(Kk,ZQe),e(km,eHe),e(A,oHe),e(A,Sm),e(Sm,sre),e(sre,rHe),e(Sm,tHe),e(Sm,Zk),e(Zk,aHe),e(Sm,nHe),e(A,sHe),e(A,Rm),e(Rm,lre),e(lre,lHe),e(Rm,iHe),e(Rm,eS),e(eS,dHe),e(Rm,cHe),e(A,fHe),e(A,Pm),e(Pm,ire),e(ire,mHe),e(Pm,gHe),e(Pm,oS),e(oS,hHe),e(Pm,pHe),e(A,_He),e(A,Bm),e(Bm,dre),e(dre,uHe),e(Bm,bHe),e(Bm,rS),e(rS,vHe),e(Bm,FHe),e(A,THe),e(A,Im),e(Im,cre),e(cre,MHe),e(Im,EHe),e(Im,tS),e(tS,CHe),e(Im,wHe),e(A,AHe),e(A,qm),e(qm,fre),e(fre,yHe),e(qm,LHe),e(qm,aS),e(aS,xHe),e(qm,$He),e(A,kHe),e(A,Nm),e(Nm,mre),e(mre,SHe),e(Nm,RHe),e(Nm,nS),e(nS,PHe),e(Nm,BHe),e(A,IHe),e(A,jm),e(jm,gre),e(gre,qHe),e(jm,NHe),e(jm,sS),e(sS,jHe),e(jm,DHe),e(A,GHe),e(A,Dm),e(Dm,hre),e(hre,OHe),e(Dm,VHe),e(Dm,lS),e(lS,XHe),e(Dm,zHe),e(A,WHe),e(A,Gm),e(Gm,pre),e(pre,QHe),e(Gm,HHe),e(Gm,iS),e(iS,UHe),e(Gm,JHe),e(A,YHe),e(A,Om),e(Om,_re),e(_re,KHe),e(Om,ZHe),e(Om,dS),e(dS,eUe),e(Om,oUe),e(A,rUe),e(A,Vm),e(Vm,ure),e(ure,tUe),e(Vm,aUe),e(Vm,cS),e(cS,nUe),e(Vm,sUe),e(A,lUe),e(A,Xm),e(Xm,bre),e(bre,iUe),e(Xm,dUe),e(Xm,fS),e(fS,cUe),e(Xm,fUe),e(A,mUe),e(A,zm),e(zm,vre),e(vre,gUe),e(zm,hUe),e(zm,mS),e(mS,pUe),e(zm,_Ue),e(A,uUe),e(A,Wm),e(Wm,Fre),e(Fre,bUe),e(Wm,vUe),e(Wm,gS),e(gS,FUe),e(Wm,TUe),e(A,MUe),e(A,Qm),e(Qm,Tre),e(Tre,EUe),e(Qm,CUe),e(Qm,hS),e(hS,wUe),e(Qm,AUe),e(A,yUe),e(A,Hm),e(Hm,Mre),e(Mre,LUe),e(Hm,xUe),e(Hm,pS),e(pS,$Ue),e(Hm,kUe),e(A,SUe),e(A,Um),e(Um,Ere),e(Ere,RUe),e(Um,PUe),e(Um,_S),e(_S,BUe),e(Um,IUe),e(A,qUe),e(A,Jm),e(Jm,Cre),e(Cre,NUe),e(Jm,jUe),e(Jm,uS),e(uS,DUe),e(Jm,GUe),e(A,OUe),e(A,Ym),e(Ym,wre),e(wre,VUe),e(Ym,XUe),e(Ym,bS),e(bS,zUe),e(Ym,WUe),e(A,QUe),e(A,Km),e(Km,Are),e(Are,HUe),e(Km,UUe),e(Km,vS),e(vS,JUe),e(Km,YUe),e(A,KUe),e(A,Zm),e(Zm,yre),e(yre,ZUe),e(Zm,eJe),e(Zm,FS),e(FS,oJe),e(Zm,rJe),e(A,tJe),e(A,eg),e(eg,Lre),e(Lre,aJe),e(eg,nJe),e(eg,TS),e(TS,sJe),e(eg,lJe),e(A,iJe),e(A,og),e(og,xre),e(xre,dJe),e(og,cJe),e(og,MS),e(MS,fJe),e(og,mJe),e(A,gJe),e(A,rg),e(rg,$re),e($re,hJe),e(rg,pJe),e(rg,ES),e(ES,_Je),e(rg,uJe),e(A,bJe),e(A,tg),e(tg,kre),e(kre,vJe),e(tg,FJe),e(tg,CS),e(CS,TJe),e(tg,MJe),e(A,EJe),e(A,ag),e(ag,Sre),e(Sre,CJe),e(ag,wJe),e(ag,wS),e(wS,AJe),e(ag,yJe),e(A,LJe),e(A,ng),e(ng,Rre),e(Rre,xJe),e(ng,$Je),e(ng,AS),e(AS,kJe),e(ng,SJe),e(A,RJe),e(A,sg),e(sg,Pre),e(Pre,PJe),e(sg,BJe),e(sg,yS),e(yS,IJe),e(sg,qJe),e(A,NJe),e(A,lg),e(lg,Bre),e(Bre,jJe),e(lg,DJe),e(lg,LS),e(LS,GJe),e(lg,OJe),e(A,VJe),e(A,ig),e(ig,Ire),e(Ire,XJe),e(ig,zJe),e(ig,xS),e(xS,WJe),e(ig,QJe),e(A,HJe),e(A,dg),e(dg,qre),e(qre,UJe),e(dg,JJe),e(dg,$S),e($S,YJe),e(dg,KJe),e(A,ZJe),e(A,cg),e(cg,Nre),e(Nre,eYe),e(cg,oYe),e(cg,kS),e(kS,rYe),e(cg,tYe),e(A,aYe),e(A,fg),e(fg,jre),e(jre,nYe),e(fg,sYe),e(fg,SS),e(SS,lYe),e(fg,iYe),e(A,dYe),e(A,mg),e(mg,Dre),e(Dre,cYe),e(mg,fYe),e(mg,RS),e(RS,mYe),e(mg,gYe),e(A,hYe),e(A,gg),e(gg,Gre),e(Gre,pYe),e(gg,_Ye),e(gg,PS),e(PS,uYe),e(gg,bYe),e(A,vYe),e(A,hg),e(hg,Ore),e(Ore,FYe),e(hg,TYe),e(hg,BS),e(BS,MYe),e(hg,EYe),e(A,CYe),e(A,pg),e(pg,Vre),e(Vre,wYe),e(pg,AYe),e(pg,IS),e(IS,yYe),e(pg,LYe),e(A,xYe),e(A,_g),e(_g,Xre),e(Xre,$Ye),e(_g,kYe),e(_g,qS),e(qS,SYe),e(_g,RYe),e(A,PYe),e(A,ug),e(ug,zre),e(zre,BYe),e(ug,IYe),e(ug,NS),e(NS,qYe),e(ug,NYe),e(A,jYe),e(A,bg),e(bg,Wre),e(Wre,DYe),e(bg,GYe),e(bg,jS),e(jS,OYe),e(bg,VYe),e(A,XYe),e(A,vg),e(vg,Qre),e(Qre,zYe),e(vg,WYe),e(vg,DS),e(DS,QYe),e(vg,HYe),e(Er,UYe),M(Fg,Er,null),e(Co,JYe),e(Co,Tg),M(wA,Tg,null),e(Tg,YYe),e(Tg,Hre),e(Hre,KYe),b(f,Mqe,u),b(f,Fi,u),e(Fi,Mg),e(Mg,Ure),M(AA,Ure,null),e(Fi,ZYe),e(Fi,Jre),e(Jre,eKe),b(f,Eqe,u),b(f,wo,u),M(yA,wo,null),e(wo,oKe),e(wo,LA),e(LA,rKe),e(LA,GS),e(GS,tKe),e(LA,aKe),e(wo,nKe),e(wo,xA),e(xA,sKe),e(xA,Yre),e(Yre,lKe),e(xA,iKe),e(wo,dKe),e(wo,Cr),M($A,Cr,null),e(Cr,cKe),e(Cr,Kre),e(Kre,fKe),e(Cr,mKe),e(Cr,Aa),e(Aa,gKe),e(Aa,Zre),e(Zre,hKe),e(Aa,pKe),e(Aa,ete),e(ete,_Ke),e(Aa,uKe),e(Aa,ote),e(ote,bKe),e(Aa,vKe),e(Cr,FKe),e(Cr,k),e(k,Sn),e(Sn,rte),e(rte,TKe),e(Sn,MKe),e(Sn,OS),e(OS,EKe),e(Sn,CKe),e(Sn,VS),e(VS,wKe),e(Sn,AKe),e(k,yKe),e(k,Rn),e(Rn,tte),e(tte,LKe),e(Rn,xKe),e(Rn,XS),e(XS,$Ke),e(Rn,kKe),e(Rn,zS),e(zS,SKe),e(Rn,RKe),e(k,PKe),e(k,Pn),e(Pn,ate),e(ate,BKe),e(Pn,IKe),e(Pn,WS),e(WS,qKe),e(Pn,NKe),e(Pn,QS),e(QS,jKe),e(Pn,DKe),e(k,GKe),e(k,Eg),e(Eg,nte),e(nte,OKe),e(Eg,VKe),e(Eg,HS),e(HS,XKe),e(Eg,zKe),e(k,WKe),e(k,Bn),e(Bn,ste),e(ste,QKe),e(Bn,HKe),e(Bn,US),e(US,UKe),e(Bn,JKe),e(Bn,JS),e(JS,YKe),e(Bn,KKe),e(k,ZKe),e(k,Cg),e(Cg,lte),e(lte,eZe),e(Cg,oZe),e(Cg,YS),e(YS,rZe),e(Cg,tZe),e(k,aZe),e(k,wg),e(wg,ite),e(ite,nZe),e(wg,sZe),e(wg,KS),e(KS,lZe),e(wg,iZe),e(k,dZe),e(k,Ag),e(Ag,dte),e(dte,cZe),e(Ag,fZe),e(Ag,ZS),e(ZS,mZe),e(Ag,gZe),e(k,hZe),e(k,In),e(In,cte),e(cte,pZe),e(In,_Ze),e(In,eR),e(eR,uZe),e(In,bZe),e(In,oR),e(oR,vZe),e(In,FZe),e(k,TZe),e(k,qn),e(qn,fte),e(fte,MZe),e(qn,EZe),e(qn,rR),e(rR,CZe),e(qn,wZe),e(qn,tR),e(tR,AZe),e(qn,yZe),e(k,LZe),e(k,Nn),e(Nn,mte),e(mte,xZe),e(Nn,$Ze),e(Nn,aR),e(aR,kZe),e(Nn,SZe),e(Nn,nR),e(nR,RZe),e(Nn,PZe),e(k,BZe),e(k,yg),e(yg,gte),e(gte,IZe),e(yg,qZe),e(yg,sR),e(sR,NZe),e(yg,jZe),e(k,DZe),e(k,Lg),e(Lg,hte),e(hte,GZe),e(Lg,OZe),e(Lg,lR),e(lR,VZe),e(Lg,XZe),e(k,zZe),e(k,jn),e(jn,pte),e(pte,WZe),e(jn,QZe),e(jn,iR),e(iR,HZe),e(jn,UZe),e(jn,dR),e(dR,JZe),e(jn,YZe),e(k,KZe),e(k,xg),e(xg,_te),e(_te,ZZe),e(xg,eeo),e(xg,cR),e(cR,oeo),e(xg,reo),e(k,teo),e(k,Dn),e(Dn,ute),e(ute,aeo),e(Dn,neo),e(Dn,fR),e(fR,seo),e(Dn,leo),e(Dn,mR),e(mR,ieo),e(Dn,deo),e(k,ceo),e(k,Gn),e(Gn,bte),e(bte,feo),e(Gn,meo),e(Gn,gR),e(gR,geo),e(Gn,heo),e(Gn,hR),e(hR,peo),e(Gn,_eo),e(k,ueo),e(k,On),e(On,vte),e(vte,beo),e(On,veo),e(On,pR),e(pR,Feo),e(On,Teo),e(On,_R),e(_R,Meo),e(On,Eeo),e(k,Ceo),e(k,$g),e($g,Fte),e(Fte,weo),e($g,Aeo),e($g,uR),e(uR,yeo),e($g,Leo),e(k,xeo),e(k,Vn),e(Vn,Tte),e(Tte,$eo),e(Vn,keo),e(Vn,bR),e(bR,Seo),e(Vn,Reo),e(Vn,vR),e(vR,Peo),e(Vn,Beo),e(k,Ieo),e(k,Xn),e(Xn,Mte),e(Mte,qeo),e(Xn,Neo),e(Xn,FR),e(FR,jeo),e(Xn,Deo),e(Xn,TR),e(TR,Geo),e(Xn,Oeo),e(k,Veo),e(k,zn),e(zn,Ete),e(Ete,Xeo),e(zn,zeo),e(zn,MR),e(MR,Weo),e(zn,Qeo),e(zn,ER),e(ER,Heo),e(zn,Ueo),e(k,Jeo),e(k,Wn),e(Wn,Cte),e(Cte,Yeo),e(Wn,Keo),e(Wn,CR),e(CR,Zeo),e(Wn,eoo),e(Wn,wR),e(wR,ooo),e(Wn,roo),e(k,too),e(k,Qn),e(Qn,wte),e(wte,aoo),e(Qn,noo),e(Qn,AR),e(AR,soo),e(Qn,loo),e(Qn,yR),e(yR,ioo),e(Qn,doo),e(k,coo),e(k,Hn),e(Hn,Ate),e(Ate,foo),e(Hn,moo),e(Hn,LR),e(LR,goo),e(Hn,hoo),e(Hn,xR),e(xR,poo),e(Hn,_oo),e(k,uoo),e(k,kg),e(kg,yte),e(yte,boo),e(kg,voo),e(kg,$R),e($R,Foo),e(kg,Too),e(k,Moo),e(k,Un),e(Un,Lte),e(Lte,Eoo),e(Un,Coo),e(Un,kR),e(kR,woo),e(Un,Aoo),e(Un,SR),e(SR,yoo),e(Un,Loo),e(k,xoo),e(k,Sg),e(Sg,xte),e(xte,$oo),e(Sg,koo),e(Sg,RR),e(RR,Soo),e(Sg,Roo),e(k,Poo),e(k,Jn),e(Jn,$te),e($te,Boo),e(Jn,Ioo),e(Jn,PR),e(PR,qoo),e(Jn,Noo),e(Jn,BR),e(BR,joo),e(Jn,Doo),e(k,Goo),e(k,Yn),e(Yn,kte),e(kte,Ooo),e(Yn,Voo),e(Yn,IR),e(IR,Xoo),e(Yn,zoo),e(Yn,qR),e(qR,Woo),e(Yn,Qoo),e(k,Hoo),e(k,Kn),e(Kn,Ste),e(Ste,Uoo),e(Kn,Joo),e(Kn,NR),e(NR,Yoo),e(Kn,Koo),e(Kn,jR),e(jR,Zoo),e(Kn,ero),e(k,oro),e(k,Rg),e(Rg,Rte),e(Rte,rro),e(Rg,tro),e(Rg,DR),e(DR,aro),e(Rg,nro),e(k,sro),e(k,Zn),e(Zn,Pte),e(Pte,lro),e(Zn,iro),e(Zn,GR),e(GR,dro),e(Zn,cro),e(Zn,OR),e(OR,fro),e(Zn,mro),e(k,gro),e(k,es),e(es,Bte),e(Bte,hro),e(es,pro),e(es,VR),e(VR,_ro),e(es,uro),e(es,XR),e(XR,bro),e(es,vro),e(k,Fro),e(k,Pg),e(Pg,Ite),e(Ite,Tro),e(Pg,Mro),e(Pg,zR),e(zR,Ero),e(Pg,Cro),e(k,wro),e(k,os),e(os,qte),e(qte,Aro),e(os,yro),e(os,WR),e(WR,Lro),e(os,xro),e(os,QR),e(QR,$ro),e(os,kro),e(k,Sro),e(k,rs),e(rs,Nte),e(Nte,Rro),e(rs,Pro),e(rs,HR),e(HR,Bro),e(rs,Iro),e(rs,UR),e(UR,qro),e(rs,Nro),e(k,jro),e(k,ts),e(ts,jte),e(jte,Dro),e(ts,Gro),e(ts,JR),e(JR,Oro),e(ts,Vro),e(ts,YR),e(YR,Xro),e(ts,zro),e(k,Wro),e(k,as),e(as,Dte),e(Dte,Qro),e(as,Hro),e(as,KR),e(KR,Uro),e(as,Jro),e(as,ZR),e(ZR,Yro),e(as,Kro),e(k,Zro),e(k,ns),e(ns,Gte),e(Gte,eto),e(ns,oto),e(ns,eP),e(eP,rto),e(ns,tto),e(ns,oP),e(oP,ato),e(ns,nto),e(k,sto),e(k,ss),e(ss,Ote),e(Ote,lto),e(ss,ito),e(ss,rP),e(rP,dto),e(ss,cto),e(ss,tP),e(tP,fto),e(ss,mto),e(k,gto),e(k,Bg),e(Bg,Vte),e(Vte,hto),e(Bg,pto),e(Bg,aP),e(aP,_to),e(Bg,uto),e(k,bto),e(k,ls),e(ls,Xte),e(Xte,vto),e(ls,Fto),e(ls,nP),e(nP,Tto),e(ls,Mto),e(ls,sP),e(sP,Eto),e(ls,Cto),e(k,wto),e(k,Ig),e(Ig,zte),e(zte,Ato),e(Ig,yto),e(Ig,lP),e(lP,Lto),e(Ig,xto),e(k,$to),e(k,qg),e(qg,Wte),e(Wte,kto),e(qg,Sto),e(qg,iP),e(iP,Rto),e(qg,Pto),e(k,Bto),e(k,is),e(is,Qte),e(Qte,Ito),e(is,qto),e(is,dP),e(dP,Nto),e(is,jto),e(is,cP),e(cP,Dto),e(is,Gto),e(k,Oto),e(k,ds),e(ds,Hte),e(Hte,Vto),e(ds,Xto),e(ds,fP),e(fP,zto),e(ds,Wto),e(ds,mP),e(mP,Qto),e(ds,Hto),e(k,Uto),e(k,cs),e(cs,Ute),e(Ute,Jto),e(cs,Yto),e(cs,gP),e(gP,Kto),e(cs,Zto),e(cs,hP),e(hP,eao),e(cs,oao),e(k,rao),e(k,Ng),e(Ng,Jte),e(Jte,tao),e(Ng,aao),e(Ng,pP),e(pP,nao),e(Ng,sao),e(k,lao),e(k,fs),e(fs,Yte),e(Yte,iao),e(fs,dao),e(fs,_P),e(_P,cao),e(fs,fao),e(fs,uP),e(uP,mao),e(fs,gao),e(k,hao),e(k,ms),e(ms,Kte),e(Kte,pao),e(ms,_ao),e(ms,bP),e(bP,uao),e(ms,bao),e(ms,vP),e(vP,vao),e(ms,Fao),e(k,Tao),e(k,gs),e(gs,Zte),e(Zte,Mao),e(gs,Eao),e(gs,FP),e(FP,Cao),e(gs,wao),e(gs,TP),e(TP,Aao),e(gs,yao),e(k,Lao),e(k,hs),e(hs,eae),e(eae,xao),e(hs,$ao),e(hs,MP),e(MP,kao),e(hs,Sao),e(hs,EP),e(EP,Rao),e(hs,Pao),e(k,Bao),e(k,ps),e(ps,oae),e(oae,Iao),e(ps,qao),e(ps,CP),e(CP,Nao),e(ps,jao),e(ps,wP),e(wP,Dao),e(ps,Gao),e(k,Oao),e(k,jg),e(jg,rae),e(rae,Vao),e(jg,Xao),e(jg,AP),e(AP,zao),e(jg,Wao),e(k,Qao),e(k,_s),e(_s,tae),e(tae,Hao),e(_s,Uao),e(_s,yP),e(yP,Jao),e(_s,Yao),e(_s,LP),e(LP,Kao),e(_s,Zao),e(k,eno),e(k,Dg),e(Dg,aae),e(aae,ono),e(Dg,rno),e(Dg,xP),e(xP,tno),e(Dg,ano),e(k,nno),e(k,Gg),e(Gg,nae),e(nae,sno),e(Gg,lno),e(Gg,$P),e($P,ino),e(Gg,dno),e(k,cno),e(k,Og),e(Og,sae),e(sae,fno),e(Og,mno),e(Og,kP),e(kP,gno),e(Og,hno),e(k,pno),e(k,Vg),e(Vg,lae),e(lae,_no),e(Vg,uno),e(Vg,SP),e(SP,bno),e(Vg,vno),e(k,Fno),e(k,us),e(us,iae),e(iae,Tno),e(us,Mno),e(us,RP),e(RP,Eno),e(us,Cno),e(us,PP),e(PP,wno),e(us,Ano),e(k,yno),e(k,Xg),e(Xg,dae),e(dae,Lno),e(Xg,xno),e(Xg,BP),e(BP,$no),e(Xg,kno),e(k,Sno),e(k,bs),e(bs,cae),e(cae,Rno),e(bs,Pno),e(bs,IP),e(IP,Bno),e(bs,Ino),e(bs,qP),e(qP,qno),e(bs,Nno),e(k,jno),e(k,vs),e(vs,fae),e(fae,Dno),e(vs,Gno),e(vs,NP),e(NP,Ono),e(vs,Vno),e(vs,jP),e(jP,Xno),e(vs,zno),e(k,Wno),e(k,Fs),e(Fs,mae),e(mae,Qno),e(Fs,Hno),e(Fs,DP),e(DP,Uno),e(Fs,Jno),e(Fs,GP),e(GP,Yno),e(Fs,Kno),e(k,Zno),e(k,Ts),e(Ts,gae),e(gae,eso),e(Ts,oso),e(Ts,OP),e(OP,rso),e(Ts,tso),e(Ts,VP),e(VP,aso),e(Ts,nso),e(k,sso),e(k,Ms),e(Ms,hae),e(hae,lso),e(Ms,iso),e(Ms,XP),e(XP,dso),e(Ms,cso),e(Ms,zP),e(zP,fso),e(Ms,mso),e(k,gso),e(k,Es),e(Es,pae),e(pae,hso),e(Es,pso),e(Es,WP),e(WP,_so),e(Es,uso),e(Es,QP),e(QP,bso),e(Es,vso),e(k,Fso),e(k,zg),e(zg,_ae),e(_ae,Tso),e(zg,Mso),e(zg,HP),e(HP,Eso),e(zg,Cso),e(k,wso),e(k,Wg),e(Wg,uae),e(uae,Aso),e(Wg,yso),e(Wg,UP),e(UP,Lso),e(Wg,xso),e(k,$so),e(k,Cs),e(Cs,bae),e(bae,kso),e(Cs,Sso),e(Cs,JP),e(JP,Rso),e(Cs,Pso),e(Cs,YP),e(YP,Bso),e(Cs,Iso),e(k,qso),e(k,ws),e(ws,vae),e(vae,Nso),e(ws,jso),e(ws,KP),e(KP,Dso),e(ws,Gso),e(ws,ZP),e(ZP,Oso),e(ws,Vso),e(k,Xso),e(k,As),e(As,Fae),e(Fae,zso),e(As,Wso),e(As,eB),e(eB,Qso),e(As,Hso),e(As,oB),e(oB,Uso),e(As,Jso),e(k,Yso),e(k,Qg),e(Qg,Tae),e(Tae,Kso),e(Qg,Zso),e(Qg,rB),e(rB,elo),e(Qg,olo),e(k,rlo),e(k,Hg),e(Hg,Mae),e(Mae,tlo),e(Hg,alo),e(Hg,tB),e(tB,nlo),e(Hg,slo),e(k,llo),e(k,Ug),e(Ug,Eae),e(Eae,ilo),e(Ug,dlo),e(Ug,aB),e(aB,clo),e(Ug,flo),e(k,mlo),e(k,ys),e(ys,Cae),e(Cae,glo),e(ys,hlo),e(ys,nB),e(nB,plo),e(ys,_lo),e(ys,sB),e(sB,ulo),e(ys,blo),e(k,vlo),e(k,Jg),e(Jg,wae),e(wae,Flo),e(Jg,Tlo),e(Jg,lB),e(lB,Mlo),e(Jg,Elo),e(k,Clo),e(k,Yg),e(Yg,Aae),e(Aae,wlo),e(Yg,Alo),e(Yg,iB),e(iB,ylo),e(Yg,Llo),e(k,xlo),e(k,Kg),e(Kg,yae),e(yae,$lo),e(Kg,klo),e(Kg,dB),e(dB,Slo),e(Kg,Rlo),e(k,Plo),e(k,Ls),e(Ls,Lae),e(Lae,Blo),e(Ls,Ilo),e(Ls,cB),e(cB,qlo),e(Ls,Nlo),e(Ls,fB),e(fB,jlo),e(Ls,Dlo),e(k,Glo),e(k,Zg),e(Zg,xae),e(xae,Olo),e(Zg,Vlo),e(Zg,mB),e(mB,Xlo),e(Zg,zlo),e(k,Wlo),e(k,eh),e(eh,$ae),e($ae,Qlo),e(eh,Hlo),e(eh,gB),e(gB,Ulo),e(eh,Jlo),e(k,Ylo),e(k,xs),e(xs,kae),e(kae,Klo),e(xs,Zlo),e(xs,hB),e(hB,eio),e(xs,oio),e(xs,pB),e(pB,rio),e(xs,tio),e(k,aio),e(k,$s),e($s,Sae),e(Sae,nio),e($s,sio),e($s,_B),e(_B,lio),e($s,iio),e($s,uB),e(uB,dio),e($s,cio),e(k,fio),e(k,ks),e(ks,Rae),e(Rae,mio),e(ks,gio),e(ks,bB),e(bB,hio),e(ks,pio),e(ks,vB),e(vB,_io),e(ks,uio),e(k,bio),e(k,Ss),e(Ss,Pae),e(Pae,vio),e(Ss,Fio),e(Ss,FB),e(FB,Tio),e(Ss,Mio),e(Ss,TB),e(TB,Eio),e(Ss,Cio),e(Cr,wio),M(oh,Cr,null),e(wo,Aio),e(wo,rh),M(kA,rh,null),e(rh,yio),e(rh,Bae),e(Bae,Lio),b(f,Cqe,u),b(f,Ti,u),e(Ti,th),e(th,Iae),M(SA,Iae,null),e(Ti,xio),e(Ti,qae),e(qae,$io),b(f,wqe,u),b(f,Ao,u),M(RA,Ao,null),e(Ao,kio),e(Ao,PA),e(PA,Sio),e(PA,MB),e(MB,Rio),e(PA,Pio),e(Ao,Bio),e(Ao,BA),e(BA,Iio),e(BA,Nae),e(Nae,qio),e(BA,Nio),e(Ao,jio),e(Ao,He),M(IA,He,null),e(He,Dio),e(He,jae),e(jae,Gio),e(He,Oio),e(He,ya),e(ya,Vio),e(ya,Dae),e(Dae,Xio),e(ya,zio),e(ya,Gae),e(Gae,Wio),e(ya,Qio),e(ya,Oae),e(Oae,Hio),e(ya,Uio),e(He,Jio),e(He,Z),e(Z,ah),e(ah,Vae),e(Vae,Yio),e(ah,Kio),e(ah,EB),e(EB,Zio),e(ah,edo),e(Z,odo),e(Z,nh),e(nh,Xae),e(Xae,rdo),e(nh,tdo),e(nh,CB),e(CB,ado),e(nh,ndo),e(Z,sdo),e(Z,sh),e(sh,zae),e(zae,ldo),e(sh,ido),e(sh,wB),e(wB,ddo),e(sh,cdo),e(Z,fdo),e(Z,lh),e(lh,Wae),e(Wae,mdo),e(lh,gdo),e(lh,AB),e(AB,hdo),e(lh,pdo),e(Z,_do),e(Z,ih),e(ih,Qae),e(Qae,udo),e(ih,bdo),e(ih,yB),e(yB,vdo),e(ih,Fdo),e(Z,Tdo),e(Z,dh),e(dh,Hae),e(Hae,Mdo),e(dh,Edo),e(dh,LB),e(LB,Cdo),e(dh,wdo),e(Z,Ado),e(Z,ch),e(ch,Uae),e(Uae,ydo),e(ch,Ldo),e(ch,xB),e(xB,xdo),e(ch,$do),e(Z,kdo),e(Z,fh),e(fh,Jae),e(Jae,Sdo),e(fh,Rdo),e(fh,$B),e($B,Pdo),e(fh,Bdo),e(Z,Ido),e(Z,mh),e(mh,Yae),e(Yae,qdo),e(mh,Ndo),e(mh,kB),e(kB,jdo),e(mh,Ddo),e(Z,Gdo),e(Z,gh),e(gh,Kae),e(Kae,Odo),e(gh,Vdo),e(gh,SB),e(SB,Xdo),e(gh,zdo),e(Z,Wdo),e(Z,hh),e(hh,Zae),e(Zae,Qdo),e(hh,Hdo),e(hh,RB),e(RB,Udo),e(hh,Jdo),e(Z,Ydo),e(Z,ph),e(ph,ene),e(ene,Kdo),e(ph,Zdo),e(ph,PB),e(PB,eco),e(ph,oco),e(Z,rco),e(Z,_h),e(_h,one),e(one,tco),e(_h,aco),e(_h,BB),e(BB,nco),e(_h,sco),e(Z,lco),e(Z,uh),e(uh,rne),e(rne,ico),e(uh,dco),e(uh,IB),e(IB,cco),e(uh,fco),e(Z,mco),e(Z,bh),e(bh,tne),e(tne,gco),e(bh,hco),e(bh,qB),e(qB,pco),e(bh,_co),e(Z,uco),e(Z,vh),e(vh,ane),e(ane,bco),e(vh,vco),e(vh,NB),e(NB,Fco),e(vh,Tco),e(Z,Mco),e(Z,Fh),e(Fh,nne),e(nne,Eco),e(Fh,Cco),e(Fh,jB),e(jB,wco),e(Fh,Aco),e(Z,yco),e(Z,Th),e(Th,sne),e(sne,Lco),e(Th,xco),e(Th,DB),e(DB,$co),e(Th,kco),e(Z,Sco),e(Z,Mh),e(Mh,lne),e(lne,Rco),e(Mh,Pco),e(Mh,GB),e(GB,Bco),e(Mh,Ico),e(Z,qco),e(Z,Eh),e(Eh,ine),e(ine,Nco),e(Eh,jco),e(Eh,OB),e(OB,Dco),e(Eh,Gco),e(Z,Oco),e(Z,Ch),e(Ch,dne),e(dne,Vco),e(Ch,Xco),e(Ch,VB),e(VB,zco),e(Ch,Wco),e(Z,Qco),e(Z,wh),e(wh,cne),e(cne,Hco),e(wh,Uco),e(wh,XB),e(XB,Jco),e(wh,Yco),e(Z,Kco),e(Z,Ah),e(Ah,fne),e(fne,Zco),e(Ah,efo),e(Ah,zB),e(zB,ofo),e(Ah,rfo),e(Z,tfo),e(Z,yh),e(yh,mne),e(mne,afo),e(yh,nfo),e(yh,WB),e(WB,sfo),e(yh,lfo),e(Z,ifo),e(Z,Lh),e(Lh,gne),e(gne,dfo),e(Lh,cfo),e(Lh,QB),e(QB,ffo),e(Lh,mfo),e(Z,gfo),e(Z,xh),e(xh,hne),e(hne,hfo),e(xh,pfo),e(xh,HB),e(HB,_fo),e(xh,ufo),e(Z,bfo),e(Z,$h),e($h,pne),e(pne,vfo),e($h,Ffo),e($h,UB),e(UB,Tfo),e($h,Mfo),e(He,Efo),M(kh,He,null),e(He,Cfo),M(Sh,He,null),e(Ao,wfo),e(Ao,Rh),M(qA,Rh,null),e(Rh,Afo),e(Rh,_ne),e(_ne,yfo),b(f,Aqe,u),b(f,Mi,u),e(Mi,Ph),e(Ph,une),M(NA,une,null),e(Mi,Lfo),e(Mi,bne),e(bne,xfo),b(f,yqe,u),b(f,yo,u),M(jA,yo,null),e(yo,$fo),e(yo,DA),e(DA,kfo),e(DA,JB),e(JB,Sfo),e(DA,Rfo),e(yo,Pfo),e(yo,GA),e(GA,Bfo),e(GA,vne),e(vne,Ifo),e(GA,qfo),e(yo,Nfo),e(yo,Ue),M(OA,Ue,null),e(Ue,jfo),e(Ue,Fne),e(Fne,Dfo),e(Ue,Gfo),e(Ue,Ei),e(Ei,Ofo),e(Ei,Tne),e(Tne,Vfo),e(Ei,Xfo),e(Ei,Mne),e(Mne,zfo),e(Ei,Wfo),e(Ue,Qfo),e(Ue,pe),e(pe,Bh),e(Bh,Ene),e(Ene,Hfo),e(Bh,Ufo),e(Bh,YB),e(YB,Jfo),e(Bh,Yfo),e(pe,Kfo),e(pe,Ih),e(Ih,Cne),e(Cne,Zfo),e(Ih,emo),e(Ih,wne),e(wne,omo),e(Ih,rmo),e(pe,tmo),e(pe,qh),e(qh,Ane),e(Ane,amo),e(qh,nmo),e(qh,KB),e(KB,smo),e(qh,lmo),e(pe,imo),e(pe,Nh),e(Nh,yne),e(yne,dmo),e(Nh,cmo),e(Nh,ZB),e(ZB,fmo),e(Nh,mmo),e(pe,gmo),e(pe,jh),e(jh,Lne),e(Lne,hmo),e(jh,pmo),e(jh,eI),e(eI,_mo),e(jh,umo),e(pe,bmo),e(pe,Dh),e(Dh,xne),e(xne,vmo),e(Dh,Fmo),e(Dh,oI),e(oI,Tmo),e(Dh,Mmo),e(pe,Emo),e(pe,Gh),e(Gh,$ne),e($ne,Cmo),e(Gh,wmo),e(Gh,rI),e(rI,Amo),e(Gh,ymo),e(pe,Lmo),e(pe,Oh),e(Oh,kne),e(kne,xmo),e(Oh,$mo),e(Oh,tI),e(tI,kmo),e(Oh,Smo),e(pe,Rmo),e(pe,Vh),e(Vh,Sne),e(Sne,Pmo),e(Vh,Bmo),e(Vh,aI),e(aI,Imo),e(Vh,qmo),e(pe,Nmo),e(pe,Xh),e(Xh,Rne),e(Rne,jmo),e(Xh,Dmo),e(Xh,nI),e(nI,Gmo),e(Xh,Omo),e(pe,Vmo),e(pe,zh),e(zh,Pne),e(Pne,Xmo),e(zh,zmo),e(zh,sI),e(sI,Wmo),e(zh,Qmo),e(pe,Hmo),e(pe,Wh),e(Wh,Bne),e(Bne,Umo),e(Wh,Jmo),e(Wh,lI),e(lI,Ymo),e(Wh,Kmo),e(pe,Zmo),e(pe,Qh),e(Qh,Ine),e(Ine,ego),e(Qh,ogo),e(Qh,iI),e(iI,rgo),e(Qh,tgo),e(pe,ago),e(pe,Hh),e(Hh,qne),e(qne,ngo),e(Hh,sgo),e(Hh,dI),e(dI,lgo),e(Hh,igo),e(pe,dgo),e(pe,Uh),e(Uh,Nne),e(Nne,cgo),e(Uh,fgo),e(Uh,cI),e(cI,mgo),e(Uh,ggo),e(pe,hgo),e(pe,Jh),e(Jh,jne),e(jne,pgo),e(Jh,_go),e(Jh,fI),e(fI,ugo),e(Jh,bgo),e(Ue,vgo),M(Yh,Ue,null),e(Ue,Fgo),M(Kh,Ue,null),e(yo,Tgo),e(yo,Zh),M(VA,Zh,null),e(Zh,Mgo),e(Zh,Dne),e(Dne,Ego),b(f,Lqe,u),b(f,Ci,u),e(Ci,ep),e(ep,Gne),M(XA,Gne,null),e(Ci,Cgo),e(Ci,One),e(One,wgo),b(f,xqe,u),b(f,Lo,u),M(zA,Lo,null),e(Lo,Ago),e(Lo,wi),e(wi,ygo),e(wi,mI),e(mI,Lgo),e(wi,xgo),e(wi,gI),e(gI,$go),e(wi,kgo),e(Lo,Sgo),e(Lo,WA),e(WA,Rgo),e(WA,Vne),e(Vne,Pgo),e(WA,Bgo),e(Lo,Igo),e(Lo,tt),M(QA,tt,null),e(tt,qgo),e(tt,Xne),e(Xne,Ngo),e(tt,jgo),e(tt,Ai),e(Ai,Dgo),e(Ai,zne),e(zne,Ggo),e(Ai,Ogo),e(Ai,hI),e(hI,Vgo),e(Ai,Xgo),e(tt,zgo),M(op,tt,null),e(Lo,Wgo),e(Lo,Je),M(HA,Je,null),e(Je,Qgo),e(Je,Wne),e(Wne,Hgo),e(Je,Ugo),e(Je,La),e(La,Jgo),e(La,Qne),e(Qne,Ygo),e(La,Kgo),e(La,Hne),e(Hne,Zgo),e(La,eho),e(La,Une),e(Une,oho),e(La,rho),e(Je,tho),e(Je,x),e(x,rp),e(rp,Jne),e(Jne,aho),e(rp,nho),e(rp,pI),e(pI,sho),e(rp,lho),e(x,iho),e(x,tp),e(tp,Yne),e(Yne,dho),e(tp,cho),e(tp,_I),e(_I,fho),e(tp,mho),e(x,gho),e(x,ap),e(ap,Kne),e(Kne,hho),e(ap,pho),e(ap,uI),e(uI,_ho),e(ap,uho),e(x,bho),e(x,np),e(np,Zne),e(Zne,vho),e(np,Fho),e(np,bI),e(bI,Tho),e(np,Mho),e(x,Eho),e(x,sp),e(sp,ese),e(ese,Cho),e(sp,who),e(sp,vI),e(vI,Aho),e(sp,yho),e(x,Lho),e(x,lp),e(lp,ose),e(ose,xho),e(lp,$ho),e(lp,FI),e(FI,kho),e(lp,Sho),e(x,Rho),e(x,ip),e(ip,rse),e(rse,Pho),e(ip,Bho),e(ip,TI),e(TI,Iho),e(ip,qho),e(x,Nho),e(x,dp),e(dp,tse),e(tse,jho),e(dp,Dho),e(dp,MI),e(MI,Gho),e(dp,Oho),e(x,Vho),e(x,cp),e(cp,ase),e(ase,Xho),e(cp,zho),e(cp,EI),e(EI,Who),e(cp,Qho),e(x,Hho),e(x,fp),e(fp,nse),e(nse,Uho),e(fp,Jho),e(fp,CI),e(CI,Yho),e(fp,Kho),e(x,Zho),e(x,mp),e(mp,sse),e(sse,epo),e(mp,opo),e(mp,wI),e(wI,rpo),e(mp,tpo),e(x,apo),e(x,gp),e(gp,lse),e(lse,npo),e(gp,spo),e(gp,AI),e(AI,lpo),e(gp,ipo),e(x,dpo),e(x,hp),e(hp,ise),e(ise,cpo),e(hp,fpo),e(hp,yI),e(yI,mpo),e(hp,gpo),e(x,hpo),e(x,pp),e(pp,dse),e(dse,ppo),e(pp,_po),e(pp,LI),e(LI,upo),e(pp,bpo),e(x,vpo),e(x,_p),e(_p,cse),e(cse,Fpo),e(_p,Tpo),e(_p,xI),e(xI,Mpo),e(_p,Epo),e(x,Cpo),e(x,up),e(up,fse),e(fse,wpo),e(up,Apo),e(up,$I),e($I,ypo),e(up,Lpo),e(x,xpo),e(x,bp),e(bp,mse),e(mse,$po),e(bp,kpo),e(bp,kI),e(kI,Spo),e(bp,Rpo),e(x,Ppo),e(x,vp),e(vp,gse),e(gse,Bpo),e(vp,Ipo),e(vp,SI),e(SI,qpo),e(vp,Npo),e(x,jpo),e(x,Fp),e(Fp,hse),e(hse,Dpo),e(Fp,Gpo),e(Fp,RI),e(RI,Opo),e(Fp,Vpo),e(x,Xpo),e(x,Tp),e(Tp,pse),e(pse,zpo),e(Tp,Wpo),e(Tp,PI),e(PI,Qpo),e(Tp,Hpo),e(x,Upo),e(x,Mp),e(Mp,_se),e(_se,Jpo),e(Mp,Ypo),e(Mp,BI),e(BI,Kpo),e(Mp,Zpo),e(x,e_o),e(x,Ep),e(Ep,use),e(use,o_o),e(Ep,r_o),e(Ep,II),e(II,t_o),e(Ep,a_o),e(x,n_o),e(x,Cp),e(Cp,bse),e(bse,s_o),e(Cp,l_o),e(Cp,qI),e(qI,i_o),e(Cp,d_o),e(x,c_o),e(x,wp),e(wp,vse),e(vse,f_o),e(wp,m_o),e(wp,NI),e(NI,g_o),e(wp,h_o),e(x,p_o),e(x,Ap),e(Ap,Fse),e(Fse,__o),e(Ap,u_o),e(Ap,jI),e(jI,b_o),e(Ap,v_o),e(x,F_o),e(x,yp),e(yp,Tse),e(Tse,T_o),e(yp,M_o),e(yp,DI),e(DI,E_o),e(yp,C_o),e(x,w_o),e(x,Lp),e(Lp,Mse),e(Mse,A_o),e(Lp,y_o),e(Lp,GI),e(GI,L_o),e(Lp,x_o),e(x,$_o),e(x,xp),e(xp,Ese),e(Ese,k_o),e(xp,S_o),e(xp,OI),e(OI,R_o),e(xp,P_o),e(x,B_o),e(x,$p),e($p,Cse),e(Cse,I_o),e($p,q_o),e($p,VI),e(VI,N_o),e($p,j_o),e(x,D_o),e(x,kp),e(kp,wse),e(wse,G_o),e(kp,O_o),e(kp,XI),e(XI,V_o),e(kp,X_o),e(x,z_o),e(x,Sp),e(Sp,Ase),e(Ase,W_o),e(Sp,Q_o),e(Sp,zI),e(zI,H_o),e(Sp,U_o),e(x,J_o),e(x,Rp),e(Rp,yse),e(yse,Y_o),e(Rp,K_o),e(Rp,WI),e(WI,Z_o),e(Rp,euo),e(x,ouo),e(x,Rs),e(Rs,Lse),e(Lse,ruo),e(Rs,tuo),e(Rs,QI),e(QI,auo),e(Rs,nuo),e(Rs,HI),e(HI,suo),e(Rs,luo),e(x,iuo),e(x,Pp),e(Pp,xse),e(xse,duo),e(Pp,cuo),e(Pp,UI),e(UI,fuo),e(Pp,muo),e(x,guo),e(x,Bp),e(Bp,$se),e($se,huo),e(Bp,puo),e(Bp,JI),e(JI,_uo),e(Bp,uuo),e(x,buo),e(x,Ip),e(Ip,kse),e(kse,vuo),e(Ip,Fuo),e(Ip,YI),e(YI,Tuo),e(Ip,Muo),e(x,Euo),e(x,qp),e(qp,Sse),e(Sse,Cuo),e(qp,wuo),e(qp,KI),e(KI,Auo),e(qp,yuo),e(x,Luo),e(x,Np),e(Np,Rse),e(Rse,xuo),e(Np,$uo),e(Np,ZI),e(ZI,kuo),e(Np,Suo),e(x,Ruo),e(x,jp),e(jp,Pse),e(Pse,Puo),e(jp,Buo),e(jp,eq),e(eq,Iuo),e(jp,quo),e(x,Nuo),e(x,Dp),e(Dp,Bse),e(Bse,juo),e(Dp,Duo),e(Dp,oq),e(oq,Guo),e(Dp,Ouo),e(x,Vuo),e(x,Gp),e(Gp,Ise),e(Ise,Xuo),e(Gp,zuo),e(Gp,rq),e(rq,Wuo),e(Gp,Quo),e(x,Huo),e(x,Op),e(Op,qse),e(qse,Uuo),e(Op,Juo),e(Op,tq),e(tq,Yuo),e(Op,Kuo),e(x,Zuo),e(x,Vp),e(Vp,Nse),e(Nse,e6o),e(Vp,o6o),e(Vp,aq),e(aq,r6o),e(Vp,t6o),e(x,a6o),e(x,Xp),e(Xp,jse),e(jse,n6o),e(Xp,s6o),e(Xp,nq),e(nq,l6o),e(Xp,i6o),e(x,d6o),e(x,zp),e(zp,Dse),e(Dse,c6o),e(zp,f6o),e(zp,sq),e(sq,m6o),e(zp,g6o),e(x,h6o),e(x,Wp),e(Wp,Gse),e(Gse,p6o),e(Wp,_6o),e(Wp,lq),e(lq,u6o),e(Wp,b6o),e(x,v6o),e(x,Qp),e(Qp,Ose),e(Ose,F6o),e(Qp,T6o),e(Qp,iq),e(iq,M6o),e(Qp,E6o),e(x,C6o),e(x,Hp),e(Hp,Vse),e(Vse,w6o),e(Hp,A6o),e(Hp,dq),e(dq,y6o),e(Hp,L6o),e(x,x6o),e(x,Up),e(Up,Xse),e(Xse,$6o),e(Up,k6o),e(Up,cq),e(cq,S6o),e(Up,R6o),e(x,P6o),e(x,Jp),e(Jp,zse),e(zse,B6o),e(Jp,I6o),e(Jp,fq),e(fq,q6o),e(Jp,N6o),e(x,j6o),e(x,Yp),e(Yp,Wse),e(Wse,D6o),e(Yp,G6o),e(Yp,mq),e(mq,O6o),e(Yp,V6o),e(x,X6o),e(x,Kp),e(Kp,Qse),e(Qse,z6o),e(Kp,W6o),e(Kp,gq),e(gq,Q6o),e(Kp,H6o),e(x,U6o),e(x,Zp),e(Zp,Hse),e(Hse,J6o),e(Zp,Y6o),e(Zp,hq),e(hq,K6o),e(Zp,Z6o),e(x,e1o),e(x,e_),e(e_,Use),e(Use,o1o),e(e_,r1o),e(e_,pq),e(pq,t1o),e(e_,a1o),e(x,n1o),e(x,o_),e(o_,Jse),e(Jse,s1o),e(o_,l1o),e(o_,_q),e(_q,i1o),e(o_,d1o),e(x,c1o),e(x,r_),e(r_,Yse),e(Yse,f1o),e(r_,m1o),e(r_,uq),e(uq,g1o),e(r_,h1o),e(x,p1o),e(x,t_),e(t_,Kse),e(Kse,_1o),e(t_,u1o),e(t_,bq),e(bq,b1o),e(t_,v1o),e(x,F1o),e(x,a_),e(a_,Zse),e(Zse,T1o),e(a_,M1o),e(a_,vq),e(vq,E1o),e(a_,C1o),e(x,w1o),e(x,n_),e(n_,ele),e(ele,A1o),e(n_,y1o),e(n_,Fq),e(Fq,L1o),e(n_,x1o),e(x,$1o),e(x,s_),e(s_,ole),e(ole,k1o),e(s_,S1o),e(s_,Tq),e(Tq,R1o),e(s_,P1o),e(x,B1o),e(x,l_),e(l_,rle),e(rle,I1o),e(l_,q1o),e(l_,Mq),e(Mq,N1o),e(l_,j1o),e(x,D1o),e(x,i_),e(i_,tle),e(tle,G1o),e(i_,O1o),e(i_,Eq),e(Eq,V1o),e(i_,X1o),e(x,z1o),e(x,d_),e(d_,ale),e(ale,W1o),e(d_,Q1o),e(d_,Cq),e(Cq,H1o),e(d_,U1o),e(x,J1o),e(x,c_),e(c_,nle),e(nle,Y1o),e(c_,K1o),e(c_,wq),e(wq,Z1o),e(c_,ebo),e(x,obo),e(x,f_),e(f_,sle),e(sle,rbo),e(f_,tbo),e(f_,Aq),e(Aq,abo),e(f_,nbo),e(x,sbo),e(x,m_),e(m_,lle),e(lle,lbo),e(m_,ibo),e(m_,yq),e(yq,dbo),e(m_,cbo),e(x,fbo),e(x,g_),e(g_,ile),e(ile,mbo),e(g_,gbo),e(g_,Lq),e(Lq,hbo),e(g_,pbo),e(x,_bo),e(x,h_),e(h_,dle),e(dle,ubo),e(h_,bbo),e(h_,xq),e(xq,vbo),e(h_,Fbo),e(x,Tbo),e(x,p_),e(p_,cle),e(cle,Mbo),e(p_,Ebo),e(p_,$q),e($q,Cbo),e(p_,wbo),e(x,Abo),e(x,__),e(__,fle),e(fle,ybo),e(__,Lbo),e(__,kq),e(kq,xbo),e(__,$bo),e(x,kbo),e(x,u_),e(u_,mle),e(mle,Sbo),e(u_,Rbo),e(u_,Sq),e(Sq,Pbo),e(u_,Bbo),e(x,Ibo),e(x,b_),e(b_,gle),e(gle,qbo),e(b_,Nbo),e(b_,Rq),e(Rq,jbo),e(b_,Dbo),e(x,Gbo),e(x,v_),e(v_,hle),e(hle,Obo),e(v_,Vbo),e(v_,Pq),e(Pq,Xbo),e(v_,zbo),e(x,Wbo),e(x,F_),e(F_,ple),e(ple,Qbo),e(F_,Hbo),e(F_,Bq),e(Bq,Ubo),e(F_,Jbo),e(x,Ybo),e(x,T_),e(T_,_le),e(_le,Kbo),e(T_,Zbo),e(T_,Iq),e(Iq,e2o),e(T_,o2o),e(x,r2o),e(x,M_),e(M_,ule),e(ule,t2o),e(M_,a2o),e(M_,qq),e(qq,n2o),e(M_,s2o),e(x,l2o),e(x,E_),e(E_,ble),e(ble,i2o),e(E_,d2o),e(E_,Nq),e(Nq,c2o),e(E_,f2o),e(x,m2o),e(x,C_),e(C_,vle),e(vle,g2o),e(C_,h2o),e(C_,jq),e(jq,p2o),e(C_,_2o),e(x,u2o),e(x,w_),e(w_,Fle),e(Fle,b2o),e(w_,v2o),e(w_,Dq),e(Dq,F2o),e(w_,T2o),e(x,M2o),e(x,A_),e(A_,Tle),e(Tle,E2o),e(A_,C2o),e(A_,Gq),e(Gq,w2o),e(A_,A2o),e(x,y2o),e(x,y_),e(y_,Mle),e(Mle,L2o),e(y_,x2o),e(y_,Oq),e(Oq,$2o),e(y_,k2o),e(x,S2o),e(x,L_),e(L_,Ele),e(Ele,R2o),e(L_,P2o),e(L_,Vq),e(Vq,B2o),e(L_,I2o),e(x,q2o),e(x,x_),e(x_,Cle),e(Cle,N2o),e(x_,j2o),e(x_,Xq),e(Xq,D2o),e(x_,G2o),e(x,O2o),e(x,$_),e($_,wle),e(wle,V2o),e($_,X2o),e($_,zq),e(zq,z2o),e($_,W2o),e(x,Q2o),e(x,k_),e(k_,Ale),e(Ale,H2o),e(k_,U2o),e(k_,Wq),e(Wq,J2o),e(k_,Y2o),e(x,K2o),e(x,S_),e(S_,yle),e(yle,Z2o),e(S_,e5o),e(S_,Qq),e(Qq,o5o),e(S_,r5o),e(x,t5o),e(x,R_),e(R_,Lle),e(Lle,a5o),e(R_,n5o),e(R_,Hq),e(Hq,s5o),e(R_,l5o),e(x,i5o),e(x,P_),e(P_,xle),e(xle,d5o),e(P_,c5o),e(P_,Uq),e(Uq,f5o),e(P_,m5o),e(x,g5o),e(x,B_),e(B_,$le),e($le,h5o),e(B_,p5o),e(B_,Jq),e(Jq,_5o),e(B_,u5o),e(x,b5o),e(x,I_),e(I_,kle),e(kle,v5o),e(I_,F5o),e(I_,Yq),e(Yq,T5o),e(I_,M5o),e(x,E5o),e(x,q_),e(q_,Sle),e(Sle,C5o),e(q_,w5o),e(q_,Kq),e(Kq,A5o),e(q_,y5o),e(x,L5o),e(x,N_),e(N_,Rle),e(Rle,x5o),e(N_,$5o),e(N_,Zq),e(Zq,k5o),e(N_,S5o),e(x,R5o),e(x,j_),e(j_,Ple),e(Ple,P5o),e(j_,B5o),e(j_,eN),e(eN,I5o),e(j_,q5o),e(x,N5o),e(x,D_),e(D_,Ble),e(Ble,j5o),e(D_,D5o),e(D_,oN),e(oN,G5o),e(D_,O5o),e(x,V5o),e(x,G_),e(G_,Ile),e(Ile,X5o),e(G_,z5o),e(G_,rN),e(rN,W5o),e(G_,Q5o),e(x,H5o),e(x,O_),e(O_,qle),e(qle,U5o),e(O_,J5o),e(O_,tN),e(tN,Y5o),e(O_,K5o),e(x,Z5o),e(x,V_),e(V_,Nle),e(Nle,evo),e(V_,ovo),e(V_,aN),e(aN,rvo),e(V_,tvo),e(x,avo),e(x,X_),e(X_,jle),e(jle,nvo),e(X_,svo),e(X_,nN),e(nN,lvo),e(X_,ivo),e(x,dvo),e(x,z_),e(z_,Dle),e(Dle,cvo),e(z_,fvo),e(z_,sN),e(sN,mvo),e(z_,gvo),e(x,hvo),e(x,W_),e(W_,Gle),e(Gle,pvo),e(W_,_vo),e(W_,lN),e(lN,uvo),e(W_,bvo),e(x,vvo),e(x,Q_),e(Q_,Ole),e(Ole,Fvo),e(Q_,Tvo),e(Q_,iN),e(iN,Mvo),e(Q_,Evo),e(Je,Cvo),e(Je,H_),e(H_,wvo),e(H_,Vle),e(Vle,Avo),e(H_,yvo),e(H_,Xle),e(Xle,Lvo),e(Je,xvo),M(U_,Je,null),b(f,$qe,u),b(f,yi,u),e(yi,J_),e(J_,zle),M(UA,zle,null),e(yi,$vo),e(yi,Wle),e(Wle,kvo),b(f,kqe,u),b(f,xo,u),M(JA,xo,null),e(xo,Svo),e(xo,Li),e(Li,Rvo),e(Li,dN),e(dN,Pvo),e(Li,Bvo),e(Li,cN),e(cN,Ivo),e(Li,qvo),e(xo,Nvo),e(xo,YA),e(YA,jvo),e(YA,Qle),e(Qle,Dvo),e(YA,Gvo),e(xo,Ovo),e(xo,at),M(KA,at,null),e(at,Vvo),e(at,Hle),e(Hle,Xvo),e(at,zvo),e(at,xi),e(xi,Wvo),e(xi,Ule),e(Ule,Qvo),e(xi,Hvo),e(xi,fN),e(fN,Uvo),e(xi,Jvo),e(at,Yvo),M(Y_,at,null),e(xo,Kvo),e(xo,Ye),M(ZA,Ye,null),e(Ye,Zvo),e(Ye,Jle),e(Jle,eFo),e(Ye,oFo),e(Ye,xa),e(xa,rFo),e(xa,Yle),e(Yle,tFo),e(xa,aFo),e(xa,Kle),e(Kle,nFo),e(xa,sFo),e(xa,Zle),e(Zle,lFo),e(xa,iFo),e(Ye,dFo),e(Ye,G),e(G,K_),e(K_,eie),e(eie,cFo),e(K_,fFo),e(K_,mN),e(mN,mFo),e(K_,gFo),e(G,hFo),e(G,Z_),e(Z_,oie),e(oie,pFo),e(Z_,_Fo),e(Z_,gN),e(gN,uFo),e(Z_,bFo),e(G,vFo),e(G,eu),e(eu,rie),e(rie,FFo),e(eu,TFo),e(eu,hN),e(hN,MFo),e(eu,EFo),e(G,CFo),e(G,ou),e(ou,tie),e(tie,wFo),e(ou,AFo),e(ou,pN),e(pN,yFo),e(ou,LFo),e(G,xFo),e(G,ru),e(ru,aie),e(aie,$Fo),e(ru,kFo),e(ru,_N),e(_N,SFo),e(ru,RFo),e(G,PFo),e(G,tu),e(tu,nie),e(nie,BFo),e(tu,IFo),e(tu,uN),e(uN,qFo),e(tu,NFo),e(G,jFo),e(G,au),e(au,sie),e(sie,DFo),e(au,GFo),e(au,bN),e(bN,OFo),e(au,VFo),e(G,XFo),e(G,nu),e(nu,lie),e(lie,zFo),e(nu,WFo),e(nu,vN),e(vN,QFo),e(nu,HFo),e(G,UFo),e(G,su),e(su,iie),e(iie,JFo),e(su,YFo),e(su,FN),e(FN,KFo),e(su,ZFo),e(G,eTo),e(G,lu),e(lu,die),e(die,oTo),e(lu,rTo),e(lu,TN),e(TN,tTo),e(lu,aTo),e(G,nTo),e(G,iu),e(iu,cie),e(cie,sTo),e(iu,lTo),e(iu,MN),e(MN,iTo),e(iu,dTo),e(G,cTo),e(G,du),e(du,fie),e(fie,fTo),e(du,mTo),e(du,EN),e(EN,gTo),e(du,hTo),e(G,pTo),e(G,cu),e(cu,mie),e(mie,_To),e(cu,uTo),e(cu,CN),e(CN,bTo),e(cu,vTo),e(G,FTo),e(G,fu),e(fu,gie),e(gie,TTo),e(fu,MTo),e(fu,wN),e(wN,ETo),e(fu,CTo),e(G,wTo),e(G,mu),e(mu,hie),e(hie,ATo),e(mu,yTo),e(mu,AN),e(AN,LTo),e(mu,xTo),e(G,$To),e(G,gu),e(gu,pie),e(pie,kTo),e(gu,STo),e(gu,yN),e(yN,RTo),e(gu,PTo),e(G,BTo),e(G,hu),e(hu,_ie),e(_ie,ITo),e(hu,qTo),e(hu,LN),e(LN,NTo),e(hu,jTo),e(G,DTo),e(G,pu),e(pu,uie),e(uie,GTo),e(pu,OTo),e(pu,xN),e(xN,VTo),e(pu,XTo),e(G,zTo),e(G,_u),e(_u,bie),e(bie,WTo),e(_u,QTo),e(_u,$N),e($N,HTo),e(_u,UTo),e(G,JTo),e(G,uu),e(uu,vie),e(vie,YTo),e(uu,KTo),e(uu,kN),e(kN,ZTo),e(uu,e9o),e(G,o9o),e(G,bu),e(bu,Fie),e(Fie,r9o),e(bu,t9o),e(bu,SN),e(SN,a9o),e(bu,n9o),e(G,s9o),e(G,vu),e(vu,Tie),e(Tie,l9o),e(vu,i9o),e(vu,RN),e(RN,d9o),e(vu,c9o),e(G,f9o),e(G,Fu),e(Fu,Mie),e(Mie,m9o),e(Fu,g9o),e(Fu,PN),e(PN,h9o),e(Fu,p9o),e(G,_9o),e(G,Tu),e(Tu,Eie),e(Eie,u9o),e(Tu,b9o),e(Tu,BN),e(BN,v9o),e(Tu,F9o),e(G,T9o),e(G,Mu),e(Mu,Cie),e(Cie,M9o),e(Mu,E9o),e(Mu,IN),e(IN,C9o),e(Mu,w9o),e(G,A9o),e(G,Eu),e(Eu,wie),e(wie,y9o),e(Eu,L9o),e(Eu,qN),e(qN,x9o),e(Eu,$9o),e(G,k9o),e(G,Cu),e(Cu,Aie),e(Aie,S9o),e(Cu,R9o),e(Cu,NN),e(NN,P9o),e(Cu,B9o),e(G,I9o),e(G,wu),e(wu,yie),e(yie,q9o),e(wu,N9o),e(wu,jN),e(jN,j9o),e(wu,D9o),e(G,G9o),e(G,Au),e(Au,Lie),e(Lie,O9o),e(Au,V9o),e(Au,DN),e(DN,X9o),e(Au,z9o),e(G,W9o),e(G,yu),e(yu,xie),e(xie,Q9o),e(yu,H9o),e(yu,GN),e(GN,U9o),e(yu,J9o),e(G,Y9o),e(G,Lu),e(Lu,$ie),e($ie,K9o),e(Lu,Z9o),e(Lu,ON),e(ON,eMo),e(Lu,oMo),e(G,rMo),e(G,xu),e(xu,kie),e(kie,tMo),e(xu,aMo),e(xu,VN),e(VN,nMo),e(xu,sMo),e(G,lMo),e(G,$u),e($u,Sie),e(Sie,iMo),e($u,dMo),e($u,XN),e(XN,cMo),e($u,fMo),e(G,mMo),e(G,ku),e(ku,Rie),e(Rie,gMo),e(ku,hMo),e(ku,zN),e(zN,pMo),e(ku,_Mo),e(G,uMo),e(G,Su),e(Su,Pie),e(Pie,bMo),e(Su,vMo),e(Su,WN),e(WN,FMo),e(Su,TMo),e(G,MMo),e(G,Ru),e(Ru,Bie),e(Bie,EMo),e(Ru,CMo),e(Ru,QN),e(QN,wMo),e(Ru,AMo),e(G,yMo),e(G,Pu),e(Pu,Iie),e(Iie,LMo),e(Pu,xMo),e(Pu,HN),e(HN,$Mo),e(Pu,kMo),e(G,SMo),e(G,Bu),e(Bu,qie),e(qie,RMo),e(Bu,PMo),e(Bu,UN),e(UN,BMo),e(Bu,IMo),e(G,qMo),e(G,Iu),e(Iu,Nie),e(Nie,NMo),e(Iu,jMo),e(Iu,JN),e(JN,DMo),e(Iu,GMo),e(G,OMo),e(G,qu),e(qu,jie),e(jie,VMo),e(qu,XMo),e(qu,YN),e(YN,zMo),e(qu,WMo),e(G,QMo),e(G,Nu),e(Nu,Die),e(Die,HMo),e(Nu,UMo),e(Nu,KN),e(KN,JMo),e(Nu,YMo),e(G,KMo),e(G,ju),e(ju,Gie),e(Gie,ZMo),e(ju,e4o),e(ju,ZN),e(ZN,o4o),e(ju,r4o),e(Ye,t4o),e(Ye,Du),e(Du,a4o),e(Du,Oie),e(Oie,n4o),e(Du,s4o),e(Du,Vie),e(Vie,l4o),e(Ye,i4o),M(Gu,Ye,null),b(f,Sqe,u),b(f,$i,u),e($i,Ou),e(Ou,Xie),M(ey,Xie,null),e($i,d4o),e($i,zie),e(zie,c4o),b(f,Rqe,u),b(f,$o,u),M(oy,$o,null),e($o,f4o),e($o,ki),e(ki,m4o),e(ki,ej),e(ej,g4o),e(ki,h4o),e(ki,oj),e(oj,p4o),e(ki,_4o),e($o,u4o),e($o,ry),e(ry,b4o),e(ry,Wie),e(Wie,v4o),e(ry,F4o),e($o,T4o),e($o,nt),M(ty,nt,null),e(nt,M4o),e(nt,Qie),e(Qie,E4o),e(nt,C4o),e(nt,Si),e(Si,w4o),e(Si,Hie),e(Hie,A4o),e(Si,y4o),e(Si,rj),e(rj,L4o),e(Si,x4o),e(nt,$4o),M(Vu,nt,null),e($o,k4o),e($o,Ke),M(ay,Ke,null),e(Ke,S4o),e(Ke,Uie),e(Uie,R4o),e(Ke,P4o),e(Ke,$a),e($a,B4o),e($a,Jie),e(Jie,I4o),e($a,q4o),e($a,Yie),e(Yie,N4o),e($a,j4o),e($a,Kie),e(Kie,D4o),e($a,G4o),e(Ke,O4o),e(Ke,z),e(z,Xu),e(Xu,Zie),e(Zie,V4o),e(Xu,X4o),e(Xu,tj),e(tj,z4o),e(Xu,W4o),e(z,Q4o),e(z,zu),e(zu,ede),e(ede,H4o),e(zu,U4o),e(zu,aj),e(aj,J4o),e(zu,Y4o),e(z,K4o),e(z,Wu),e(Wu,ode),e(ode,Z4o),e(Wu,eEo),e(Wu,nj),e(nj,oEo),e(Wu,rEo),e(z,tEo),e(z,Qu),e(Qu,rde),e(rde,aEo),e(Qu,nEo),e(Qu,sj),e(sj,sEo),e(Qu,lEo),e(z,iEo),e(z,Hu),e(Hu,tde),e(tde,dEo),e(Hu,cEo),e(Hu,lj),e(lj,fEo),e(Hu,mEo),e(z,gEo),e(z,Uu),e(Uu,ade),e(ade,hEo),e(Uu,pEo),e(Uu,ij),e(ij,_Eo),e(Uu,uEo),e(z,bEo),e(z,Ju),e(Ju,nde),e(nde,vEo),e(Ju,FEo),e(Ju,dj),e(dj,TEo),e(Ju,MEo),e(z,EEo),e(z,Yu),e(Yu,sde),e(sde,CEo),e(Yu,wEo),e(Yu,cj),e(cj,AEo),e(Yu,yEo),e(z,LEo),e(z,Ku),e(Ku,lde),e(lde,xEo),e(Ku,$Eo),e(Ku,fj),e(fj,kEo),e(Ku,SEo),e(z,REo),e(z,Zu),e(Zu,ide),e(ide,PEo),e(Zu,BEo),e(Zu,mj),e(mj,IEo),e(Zu,qEo),e(z,NEo),e(z,e6),e(e6,dde),e(dde,jEo),e(e6,DEo),e(e6,gj),e(gj,GEo),e(e6,OEo),e(z,VEo),e(z,o6),e(o6,cde),e(cde,XEo),e(o6,zEo),e(o6,hj),e(hj,WEo),e(o6,QEo),e(z,HEo),e(z,r6),e(r6,fde),e(fde,UEo),e(r6,JEo),e(r6,pj),e(pj,YEo),e(r6,KEo),e(z,ZEo),e(z,t6),e(t6,mde),e(mde,eCo),e(t6,oCo),e(t6,_j),e(_j,rCo),e(t6,tCo),e(z,aCo),e(z,a6),e(a6,gde),e(gde,nCo),e(a6,sCo),e(a6,uj),e(uj,lCo),e(a6,iCo),e(z,dCo),e(z,n6),e(n6,hde),e(hde,cCo),e(n6,fCo),e(n6,bj),e(bj,mCo),e(n6,gCo),e(z,hCo),e(z,s6),e(s6,pde),e(pde,pCo),e(s6,_Co),e(s6,vj),e(vj,uCo),e(s6,bCo),e(z,vCo),e(z,l6),e(l6,_de),e(_de,FCo),e(l6,TCo),e(l6,Fj),e(Fj,MCo),e(l6,ECo),e(z,CCo),e(z,i6),e(i6,ude),e(ude,wCo),e(i6,ACo),e(i6,Tj),e(Tj,yCo),e(i6,LCo),e(z,xCo),e(z,d6),e(d6,bde),e(bde,$Co),e(d6,kCo),e(d6,Mj),e(Mj,SCo),e(d6,RCo),e(z,PCo),e(z,c6),e(c6,vde),e(vde,BCo),e(c6,ICo),e(c6,Ej),e(Ej,qCo),e(c6,NCo),e(z,jCo),e(z,f6),e(f6,Fde),e(Fde,DCo),e(f6,GCo),e(f6,Cj),e(Cj,OCo),e(f6,VCo),e(z,XCo),e(z,m6),e(m6,Tde),e(Tde,zCo),e(m6,WCo),e(m6,wj),e(wj,QCo),e(m6,HCo),e(z,UCo),e(z,g6),e(g6,Mde),e(Mde,JCo),e(g6,YCo),e(g6,Aj),e(Aj,KCo),e(g6,ZCo),e(z,e3o),e(z,h6),e(h6,Ede),e(Ede,o3o),e(h6,r3o),e(h6,yj),e(yj,t3o),e(h6,a3o),e(z,n3o),e(z,p6),e(p6,Cde),e(Cde,s3o),e(p6,l3o),e(p6,Lj),e(Lj,i3o),e(p6,d3o),e(z,c3o),e(z,_6),e(_6,wde),e(wde,f3o),e(_6,m3o),e(_6,xj),e(xj,g3o),e(_6,h3o),e(z,p3o),e(z,u6),e(u6,Ade),e(Ade,_3o),e(u6,u3o),e(u6,$j),e($j,b3o),e(u6,v3o),e(z,F3o),e(z,b6),e(b6,yde),e(yde,T3o),e(b6,M3o),e(b6,kj),e(kj,E3o),e(b6,C3o),e(z,w3o),e(z,v6),e(v6,Lde),e(Lde,A3o),e(v6,y3o),e(v6,Sj),e(Sj,L3o),e(v6,x3o),e(z,$3o),e(z,F6),e(F6,xde),e(xde,k3o),e(F6,S3o),e(F6,Rj),e(Rj,R3o),e(F6,P3o),e(z,B3o),e(z,T6),e(T6,$de),e($de,I3o),e(T6,q3o),e(T6,Pj),e(Pj,N3o),e(T6,j3o),e(z,D3o),e(z,M6),e(M6,kde),e(kde,G3o),e(M6,O3o),e(M6,Bj),e(Bj,V3o),e(M6,X3o),e(z,z3o),e(z,E6),e(E6,Sde),e(Sde,W3o),e(E6,Q3o),e(E6,Ij),e(Ij,H3o),e(E6,U3o),e(z,J3o),e(z,C6),e(C6,Rde),e(Rde,Y3o),e(C6,K3o),e(C6,qj),e(qj,Z3o),e(C6,ewo),e(z,owo),e(z,w6),e(w6,Pde),e(Pde,rwo),e(w6,two),e(w6,Nj),e(Nj,awo),e(w6,nwo),e(z,swo),e(z,A6),e(A6,Bde),e(Bde,lwo),e(A6,iwo),e(A6,jj),e(jj,dwo),e(A6,cwo),e(Ke,fwo),e(Ke,y6),e(y6,mwo),e(y6,Ide),e(Ide,gwo),e(y6,hwo),e(y6,qde),e(qde,pwo),e(Ke,_wo),M(L6,Ke,null),b(f,Pqe,u),b(f,Ri,u),e(Ri,x6),e(x6,Nde),M(ny,Nde,null),e(Ri,uwo),e(Ri,jde),e(jde,bwo),b(f,Bqe,u),b(f,ko,u),M(sy,ko,null),e(ko,vwo),e(ko,Pi),e(Pi,Fwo),e(Pi,Dj),e(Dj,Two),e(Pi,Mwo),e(Pi,Gj),e(Gj,Ewo),e(Pi,Cwo),e(ko,wwo),e(ko,ly),e(ly,Awo),e(ly,Dde),e(Dde,ywo),e(ly,Lwo),e(ko,xwo),e(ko,st),M(iy,st,null),e(st,$wo),e(st,Gde),e(Gde,kwo),e(st,Swo),e(st,Bi),e(Bi,Rwo),e(Bi,Ode),e(Ode,Pwo),e(Bi,Bwo),e(Bi,Oj),e(Oj,Iwo),e(Bi,qwo),e(st,Nwo),M($6,st,null),e(ko,jwo),e(ko,Ze),M(dy,Ze,null),e(Ze,Dwo),e(Ze,Vde),e(Vde,Gwo),e(Ze,Owo),e(Ze,ka),e(ka,Vwo),e(ka,Xde),e(Xde,Xwo),e(ka,zwo),e(ka,zde),e(zde,Wwo),e(ka,Qwo),e(ka,Wde),e(Wde,Hwo),e(ka,Uwo),e(Ze,Jwo),e(Ze,Q),e(Q,k6),e(k6,Qde),e(Qde,Ywo),e(k6,Kwo),e(k6,Vj),e(Vj,Zwo),e(k6,e0o),e(Q,o0o),e(Q,S6),e(S6,Hde),e(Hde,r0o),e(S6,t0o),e(S6,Xj),e(Xj,a0o),e(S6,n0o),e(Q,s0o),e(Q,R6),e(R6,Ude),e(Ude,l0o),e(R6,i0o),e(R6,zj),e(zj,d0o),e(R6,c0o),e(Q,f0o),e(Q,P6),e(P6,Jde),e(Jde,m0o),e(P6,g0o),e(P6,Wj),e(Wj,h0o),e(P6,p0o),e(Q,_0o),e(Q,B6),e(B6,Yde),e(Yde,u0o),e(B6,b0o),e(B6,Qj),e(Qj,v0o),e(B6,F0o),e(Q,T0o),e(Q,I6),e(I6,Kde),e(Kde,M0o),e(I6,E0o),e(I6,Hj),e(Hj,C0o),e(I6,w0o),e(Q,A0o),e(Q,q6),e(q6,Zde),e(Zde,y0o),e(q6,L0o),e(q6,Uj),e(Uj,x0o),e(q6,$0o),e(Q,k0o),e(Q,N6),e(N6,ece),e(ece,S0o),e(N6,R0o),e(N6,Jj),e(Jj,P0o),e(N6,B0o),e(Q,I0o),e(Q,j6),e(j6,oce),e(oce,q0o),e(j6,N0o),e(j6,Yj),e(Yj,j0o),e(j6,D0o),e(Q,G0o),e(Q,D6),e(D6,rce),e(rce,O0o),e(D6,V0o),e(D6,Kj),e(Kj,X0o),e(D6,z0o),e(Q,W0o),e(Q,G6),e(G6,tce),e(tce,Q0o),e(G6,H0o),e(G6,Zj),e(Zj,U0o),e(G6,J0o),e(Q,Y0o),e(Q,O6),e(O6,ace),e(ace,K0o),e(O6,Z0o),e(O6,eD),e(eD,eAo),e(O6,oAo),e(Q,rAo),e(Q,V6),e(V6,nce),e(nce,tAo),e(V6,aAo),e(V6,oD),e(oD,nAo),e(V6,sAo),e(Q,lAo),e(Q,X6),e(X6,sce),e(sce,iAo),e(X6,dAo),e(X6,rD),e(rD,cAo),e(X6,fAo),e(Q,mAo),e(Q,z6),e(z6,lce),e(lce,gAo),e(z6,hAo),e(z6,tD),e(tD,pAo),e(z6,_Ao),e(Q,uAo),e(Q,W6),e(W6,ice),e(ice,bAo),e(W6,vAo),e(W6,aD),e(aD,FAo),e(W6,TAo),e(Q,MAo),e(Q,Q6),e(Q6,dce),e(dce,EAo),e(Q6,CAo),e(Q6,nD),e(nD,wAo),e(Q6,AAo),e(Q,yAo),e(Q,H6),e(H6,cce),e(cce,LAo),e(H6,xAo),e(H6,sD),e(sD,$Ao),e(H6,kAo),e(Q,SAo),e(Q,U6),e(U6,fce),e(fce,RAo),e(U6,PAo),e(U6,lD),e(lD,BAo),e(U6,IAo),e(Q,qAo),e(Q,J6),e(J6,mce),e(mce,NAo),e(J6,jAo),e(J6,iD),e(iD,DAo),e(J6,GAo),e(Q,OAo),e(Q,Y6),e(Y6,gce),e(gce,VAo),e(Y6,XAo),e(Y6,dD),e(dD,zAo),e(Y6,WAo),e(Q,QAo),e(Q,K6),e(K6,hce),e(hce,HAo),e(K6,UAo),e(K6,cD),e(cD,JAo),e(K6,YAo),e(Q,KAo),e(Q,Z6),e(Z6,pce),e(pce,ZAo),e(Z6,eyo),e(Z6,fD),e(fD,oyo),e(Z6,ryo),e(Q,tyo),e(Q,e1),e(e1,_ce),e(_ce,ayo),e(e1,nyo),e(e1,mD),e(mD,syo),e(e1,lyo),e(Q,iyo),e(Q,o1),e(o1,uce),e(uce,dyo),e(o1,cyo),e(o1,gD),e(gD,fyo),e(o1,myo),e(Q,gyo),e(Q,r1),e(r1,bce),e(bce,hyo),e(r1,pyo),e(r1,hD),e(hD,_yo),e(r1,uyo),e(Q,byo),e(Q,t1),e(t1,vce),e(vce,vyo),e(t1,Fyo),e(t1,pD),e(pD,Tyo),e(t1,Myo),e(Q,Eyo),e(Q,a1),e(a1,Fce),e(Fce,Cyo),e(a1,wyo),e(a1,_D),e(_D,Ayo),e(a1,yyo),e(Q,Lyo),e(Q,n1),e(n1,Tce),e(Tce,xyo),e(n1,$yo),e(n1,uD),e(uD,kyo),e(n1,Syo),e(Q,Ryo),e(Q,s1),e(s1,Mce),e(Mce,Pyo),e(s1,Byo),e(s1,bD),e(bD,Iyo),e(s1,qyo),e(Q,Nyo),e(Q,l1),e(l1,Ece),e(Ece,jyo),e(l1,Dyo),e(l1,Cce),e(Cce,Gyo),e(l1,Oyo),e(Q,Vyo),e(Q,i1),e(i1,wce),e(wce,Xyo),e(i1,zyo),e(i1,vD),e(vD,Wyo),e(i1,Qyo),e(Q,Hyo),e(Q,d1),e(d1,Ace),e(Ace,Uyo),e(d1,Jyo),e(d1,FD),e(FD,Yyo),e(d1,Kyo),e(Q,Zyo),e(Q,c1),e(c1,yce),e(yce,e8o),e(c1,o8o),e(c1,TD),e(TD,r8o),e(c1,t8o),e(Q,a8o),e(Q,f1),e(f1,Lce),e(Lce,n8o),e(f1,s8o),e(f1,MD),e(MD,l8o),e(f1,i8o),e(Ze,d8o),e(Ze,m1),e(m1,c8o),e(m1,xce),e(xce,f8o),e(m1,m8o),e(m1,$ce),e($ce,g8o),e(Ze,h8o),M(g1,Ze,null),b(f,Iqe,u),b(f,Ii,u),e(Ii,h1),e(h1,kce),M(cy,kce,null),e(Ii,p8o),e(Ii,Sce),e(Sce,_8o),b(f,qqe,u),b(f,So,u),M(fy,So,null),e(So,u8o),e(So,qi),e(qi,b8o),e(qi,ED),e(ED,v8o),e(qi,F8o),e(qi,CD),e(CD,T8o),e(qi,M8o),e(So,E8o),e(So,my),e(my,C8o),e(my,Rce),e(Rce,w8o),e(my,A8o),e(So,y8o),e(So,lt),M(gy,lt,null),e(lt,L8o),e(lt,Pce),e(Pce,x8o),e(lt,$8o),e(lt,Ni),e(Ni,k8o),e(Ni,Bce),e(Bce,S8o),e(Ni,R8o),e(Ni,wD),e(wD,P8o),e(Ni,B8o),e(lt,I8o),M(p1,lt,null),e(So,q8o),e(So,eo),M(hy,eo,null),e(eo,N8o),e(eo,Ice),e(Ice,j8o),e(eo,D8o),e(eo,Sa),e(Sa,G8o),e(Sa,qce),e(qce,O8o),e(Sa,V8o),e(Sa,Nce),e(Nce,X8o),e(Sa,z8o),e(Sa,jce),e(jce,W8o),e(Sa,Q8o),e(eo,H8o),e(eo,_e),e(_e,_1),e(_1,Dce),e(Dce,U8o),e(_1,J8o),e(_1,AD),e(AD,Y8o),e(_1,K8o),e(_e,Z8o),e(_e,u1),e(u1,Gce),e(Gce,eLo),e(u1,oLo),e(u1,yD),e(yD,rLo),e(u1,tLo),e(_e,aLo),e(_e,b1),e(b1,Oce),e(Oce,nLo),e(b1,sLo),e(b1,LD),e(LD,lLo),e(b1,iLo),e(_e,dLo),e(_e,v1),e(v1,Vce),e(Vce,cLo),e(v1,fLo),e(v1,xD),e(xD,mLo),e(v1,gLo),e(_e,hLo),e(_e,F1),e(F1,Xce),e(Xce,pLo),e(F1,_Lo),e(F1,$D),e($D,uLo),e(F1,bLo),e(_e,vLo),e(_e,T1),e(T1,zce),e(zce,FLo),e(T1,TLo),e(T1,kD),e(kD,MLo),e(T1,ELo),e(_e,CLo),e(_e,M1),e(M1,Wce),e(Wce,wLo),e(M1,ALo),e(M1,SD),e(SD,yLo),e(M1,LLo),e(_e,xLo),e(_e,E1),e(E1,Qce),e(Qce,$Lo),e(E1,kLo),e(E1,RD),e(RD,SLo),e(E1,RLo),e(_e,PLo),e(_e,C1),e(C1,Hce),e(Hce,BLo),e(C1,ILo),e(C1,PD),e(PD,qLo),e(C1,NLo),e(_e,jLo),e(_e,w1),e(w1,Uce),e(Uce,DLo),e(w1,GLo),e(w1,BD),e(BD,OLo),e(w1,VLo),e(_e,XLo),e(_e,A1),e(A1,Jce),e(Jce,zLo),e(A1,WLo),e(A1,ID),e(ID,QLo),e(A1,HLo),e(_e,ULo),e(_e,y1),e(y1,Yce),e(Yce,JLo),e(y1,YLo),e(y1,qD),e(qD,KLo),e(y1,ZLo),e(_e,e7o),e(_e,L1),e(L1,Kce),e(Kce,o7o),e(L1,r7o),e(L1,ND),e(ND,t7o),e(L1,a7o),e(_e,n7o),e(_e,x1),e(x1,Zce),e(Zce,s7o),e(x1,l7o),e(x1,jD),e(jD,i7o),e(x1,d7o),e(_e,c7o),e(_e,$1),e($1,efe),e(efe,f7o),e($1,m7o),e($1,DD),e(DD,g7o),e($1,h7o),e(_e,p7o),e(_e,k1),e(k1,ofe),e(ofe,_7o),e(k1,u7o),e(k1,GD),e(GD,b7o),e(k1,v7o),e(eo,F7o),e(eo,S1),e(S1,T7o),e(S1,rfe),e(rfe,M7o),e(S1,E7o),e(S1,tfe),e(tfe,C7o),e(eo,w7o),M(R1,eo,null),b(f,Nqe,u),b(f,ji,u),e(ji,P1),e(P1,afe),M(py,afe,null),e(ji,A7o),e(ji,nfe),e(nfe,y7o),b(f,jqe,u),b(f,Ro,u),M(_y,Ro,null),e(Ro,L7o),e(Ro,Di),e(Di,x7o),e(Di,OD),e(OD,$7o),e(Di,k7o),e(Di,VD),e(VD,S7o),e(Di,R7o),e(Ro,P7o),e(Ro,uy),e(uy,B7o),e(uy,sfe),e(sfe,I7o),e(uy,q7o),e(Ro,N7o),e(Ro,it),M(by,it,null),e(it,j7o),e(it,lfe),e(lfe,D7o),e(it,G7o),e(it,Gi),e(Gi,O7o),e(Gi,ife),e(ife,V7o),e(Gi,X7o),e(Gi,XD),e(XD,z7o),e(Gi,W7o),e(it,Q7o),M(B1,it,null),e(Ro,H7o),e(Ro,oo),M(vy,oo,null),e(oo,U7o),e(oo,dfe),e(dfe,J7o),e(oo,Y7o),e(oo,Ra),e(Ra,K7o),e(Ra,cfe),e(cfe,Z7o),e(Ra,exo),e(Ra,ffe),e(ffe,oxo),e(Ra,rxo),e(Ra,mfe),e(mfe,txo),e(Ra,axo),e(oo,nxo),e(oo,q),e(q,I1),e(I1,gfe),e(gfe,sxo),e(I1,lxo),e(I1,zD),e(zD,ixo),e(I1,dxo),e(q,cxo),e(q,q1),e(q1,hfe),e(hfe,fxo),e(q1,mxo),e(q1,WD),e(WD,gxo),e(q1,hxo),e(q,pxo),e(q,N1),e(N1,pfe),e(pfe,_xo),e(N1,uxo),e(N1,QD),e(QD,bxo),e(N1,vxo),e(q,Fxo),e(q,j1),e(j1,_fe),e(_fe,Txo),e(j1,Mxo),e(j1,HD),e(HD,Exo),e(j1,Cxo),e(q,wxo),e(q,D1),e(D1,ufe),e(ufe,Axo),e(D1,yxo),e(D1,UD),e(UD,Lxo),e(D1,xxo),e(q,$xo),e(q,G1),e(G1,bfe),e(bfe,kxo),e(G1,Sxo),e(G1,JD),e(JD,Rxo),e(G1,Pxo),e(q,Bxo),e(q,O1),e(O1,vfe),e(vfe,Ixo),e(O1,qxo),e(O1,YD),e(YD,Nxo),e(O1,jxo),e(q,Dxo),e(q,V1),e(V1,Ffe),e(Ffe,Gxo),e(V1,Oxo),e(V1,KD),e(KD,Vxo),e(V1,Xxo),e(q,zxo),e(q,X1),e(X1,Tfe),e(Tfe,Wxo),e(X1,Qxo),e(X1,ZD),e(ZD,Hxo),e(X1,Uxo),e(q,Jxo),e(q,z1),e(z1,Mfe),e(Mfe,Yxo),e(z1,Kxo),e(z1,eG),e(eG,Zxo),e(z1,e$o),e(q,o$o),e(q,W1),e(W1,Efe),e(Efe,r$o),e(W1,t$o),e(W1,oG),e(oG,a$o),e(W1,n$o),e(q,s$o),e(q,Q1),e(Q1,Cfe),e(Cfe,l$o),e(Q1,i$o),e(Q1,rG),e(rG,d$o),e(Q1,c$o),e(q,f$o),e(q,H1),e(H1,wfe),e(wfe,m$o),e(H1,g$o),e(H1,tG),e(tG,h$o),e(H1,p$o),e(q,_$o),e(q,U1),e(U1,Afe),e(Afe,u$o),e(U1,b$o),e(U1,aG),e(aG,v$o),e(U1,F$o),e(q,T$o),e(q,J1),e(J1,yfe),e(yfe,M$o),e(J1,E$o),e(J1,nG),e(nG,C$o),e(J1,w$o),e(q,A$o),e(q,Y1),e(Y1,Lfe),e(Lfe,y$o),e(Y1,L$o),e(Y1,sG),e(sG,x$o),e(Y1,$$o),e(q,k$o),e(q,K1),e(K1,xfe),e(xfe,S$o),e(K1,R$o),e(K1,lG),e(lG,P$o),e(K1,B$o),e(q,I$o),e(q,Z1),e(Z1,$fe),e($fe,q$o),e(Z1,N$o),e(Z1,iG),e(iG,j$o),e(Z1,D$o),e(q,G$o),e(q,eb),e(eb,kfe),e(kfe,O$o),e(eb,V$o),e(eb,dG),e(dG,X$o),e(eb,z$o),e(q,W$o),e(q,ob),e(ob,Sfe),e(Sfe,Q$o),e(ob,H$o),e(ob,Rfe),e(Rfe,U$o),e(ob,J$o),e(q,Y$o),e(q,rb),e(rb,Pfe),e(Pfe,K$o),e(rb,Z$o),e(rb,cG),e(cG,eko),e(rb,oko),e(q,rko),e(q,tb),e(tb,Bfe),e(Bfe,tko),e(tb,ako),e(tb,fG),e(fG,nko),e(tb,sko),e(q,lko),e(q,ab),e(ab,Ife),e(Ife,iko),e(ab,dko),e(ab,mG),e(mG,cko),e(ab,fko),e(q,mko),e(q,nb),e(nb,qfe),e(qfe,gko),e(nb,hko),e(nb,gG),e(gG,pko),e(nb,_ko),e(q,uko),e(q,sb),e(sb,Nfe),e(Nfe,bko),e(sb,vko),e(sb,hG),e(hG,Fko),e(sb,Tko),e(q,Mko),e(q,lb),e(lb,jfe),e(jfe,Eko),e(lb,Cko),e(lb,pG),e(pG,wko),e(lb,Ako),e(q,yko),e(q,ib),e(ib,Dfe),e(Dfe,Lko),e(ib,xko),e(ib,_G),e(_G,$ko),e(ib,kko),e(q,Sko),e(q,db),e(db,Gfe),e(Gfe,Rko),e(db,Pko),e(db,uG),e(uG,Bko),e(db,Iko),e(q,qko),e(q,cb),e(cb,Ofe),e(Ofe,Nko),e(cb,jko),e(cb,bG),e(bG,Dko),e(cb,Gko),e(q,Oko),e(q,fb),e(fb,Vfe),e(Vfe,Vko),e(fb,Xko),e(fb,vG),e(vG,zko),e(fb,Wko),e(q,Qko),e(q,mb),e(mb,Xfe),e(Xfe,Hko),e(mb,Uko),e(mb,FG),e(FG,Jko),e(mb,Yko),e(q,Kko),e(q,gb),e(gb,zfe),e(zfe,Zko),e(gb,eSo),e(gb,TG),e(TG,oSo),e(gb,rSo),e(q,tSo),e(q,hb),e(hb,Wfe),e(Wfe,aSo),e(hb,nSo),e(hb,MG),e(MG,sSo),e(hb,lSo),e(q,iSo),e(q,pb),e(pb,Qfe),e(Qfe,dSo),e(pb,cSo),e(pb,EG),e(EG,fSo),e(pb,mSo),e(q,gSo),e(q,_b),e(_b,Hfe),e(Hfe,hSo),e(_b,pSo),e(_b,CG),e(CG,_So),e(_b,uSo),e(q,bSo),e(q,ub),e(ub,Ufe),e(Ufe,vSo),e(ub,FSo),e(ub,wG),e(wG,TSo),e(ub,MSo),e(q,ESo),e(q,bb),e(bb,Jfe),e(Jfe,CSo),e(bb,wSo),e(bb,AG),e(AG,ASo),e(bb,ySo),e(q,LSo),e(q,vb),e(vb,Yfe),e(Yfe,xSo),e(vb,$So),e(vb,yG),e(yG,kSo),e(vb,SSo),e(q,RSo),e(q,Fb),e(Fb,Kfe),e(Kfe,PSo),e(Fb,BSo),e(Fb,LG),e(LG,ISo),e(Fb,qSo),e(q,NSo),e(q,Tb),e(Tb,Zfe),e(Zfe,jSo),e(Tb,DSo),e(Tb,xG),e(xG,GSo),e(Tb,OSo),e(q,VSo),e(q,Mb),e(Mb,eme),e(eme,XSo),e(Mb,zSo),e(Mb,$G),e($G,WSo),e(Mb,QSo),e(q,HSo),e(q,Eb),e(Eb,ome),e(ome,USo),e(Eb,JSo),e(Eb,kG),e(kG,YSo),e(Eb,KSo),e(q,ZSo),e(q,Cb),e(Cb,rme),e(rme,eRo),e(Cb,oRo),e(Cb,SG),e(SG,rRo),e(Cb,tRo),e(q,aRo),e(q,wb),e(wb,tme),e(tme,nRo),e(wb,sRo),e(wb,RG),e(RG,lRo),e(wb,iRo),e(q,dRo),e(q,Ab),e(Ab,ame),e(ame,cRo),e(Ab,fRo),e(Ab,PG),e(PG,mRo),e(Ab,gRo),e(q,hRo),e(q,yb),e(yb,nme),e(nme,pRo),e(yb,_Ro),e(yb,BG),e(BG,uRo),e(yb,bRo),e(q,vRo),e(q,Lb),e(Lb,sme),e(sme,FRo),e(Lb,TRo),e(Lb,IG),e(IG,MRo),e(Lb,ERo),e(oo,CRo),e(oo,xb),e(xb,wRo),e(xb,lme),e(lme,ARo),e(xb,yRo),e(xb,ime),e(ime,LRo),e(oo,xRo),M($b,oo,null),b(f,Dqe,u),b(f,Oi,u),e(Oi,kb),e(kb,dme),M(Fy,dme,null),e(Oi,$Ro),e(Oi,cme),e(cme,kRo),b(f,Gqe,u),b(f,Po,u),M(Ty,Po,null),e(Po,SRo),e(Po,Vi),e(Vi,RRo),e(Vi,qG),e(qG,PRo),e(Vi,BRo),e(Vi,NG),e(NG,IRo),e(Vi,qRo),e(Po,NRo),e(Po,My),e(My,jRo),e(My,fme),e(fme,DRo),e(My,GRo),e(Po,ORo),e(Po,dt),M(Ey,dt,null),e(dt,VRo),e(dt,mme),e(mme,XRo),e(dt,zRo),e(dt,Xi),e(Xi,WRo),e(Xi,gme),e(gme,QRo),e(Xi,HRo),e(Xi,jG),e(jG,URo),e(Xi,JRo),e(dt,YRo),M(Sb,dt,null),e(Po,KRo),e(Po,ro),M(Cy,ro,null),e(ro,ZRo),e(ro,hme),e(hme,ePo),e(ro,oPo),e(ro,Pa),e(Pa,rPo),e(Pa,pme),e(pme,tPo),e(Pa,aPo),e(Pa,_me),e(_me,nPo),e(Pa,sPo),e(Pa,ume),e(ume,lPo),e(Pa,iPo),e(ro,dPo),e(ro,Y),e(Y,Rb),e(Rb,bme),e(bme,cPo),e(Rb,fPo),e(Rb,DG),e(DG,mPo),e(Rb,gPo),e(Y,hPo),e(Y,Pb),e(Pb,vme),e(vme,pPo),e(Pb,_Po),e(Pb,GG),e(GG,uPo),e(Pb,bPo),e(Y,vPo),e(Y,Bb),e(Bb,Fme),e(Fme,FPo),e(Bb,TPo),e(Bb,OG),e(OG,MPo),e(Bb,EPo),e(Y,CPo),e(Y,Ib),e(Ib,Tme),e(Tme,wPo),e(Ib,APo),e(Ib,VG),e(VG,yPo),e(Ib,LPo),e(Y,xPo),e(Y,qb),e(qb,Mme),e(Mme,$Po),e(qb,kPo),e(qb,XG),e(XG,SPo),e(qb,RPo),e(Y,PPo),e(Y,Nb),e(Nb,Eme),e(Eme,BPo),e(Nb,IPo),e(Nb,zG),e(zG,qPo),e(Nb,NPo),e(Y,jPo),e(Y,jb),e(jb,Cme),e(Cme,DPo),e(jb,GPo),e(jb,WG),e(WG,OPo),e(jb,VPo),e(Y,XPo),e(Y,Db),e(Db,wme),e(wme,zPo),e(Db,WPo),e(Db,QG),e(QG,QPo),e(Db,HPo),e(Y,UPo),e(Y,Gb),e(Gb,Ame),e(Ame,JPo),e(Gb,YPo),e(Gb,HG),e(HG,KPo),e(Gb,ZPo),e(Y,eBo),e(Y,Ob),e(Ob,yme),e(yme,oBo),e(Ob,rBo),e(Ob,UG),e(UG,tBo),e(Ob,aBo),e(Y,nBo),e(Y,Vb),e(Vb,Lme),e(Lme,sBo),e(Vb,lBo),e(Vb,JG),e(JG,iBo),e(Vb,dBo),e(Y,cBo),e(Y,Xb),e(Xb,xme),e(xme,fBo),e(Xb,mBo),e(Xb,YG),e(YG,gBo),e(Xb,hBo),e(Y,pBo),e(Y,zb),e(zb,$me),e($me,_Bo),e(zb,uBo),e(zb,KG),e(KG,bBo),e(zb,vBo),e(Y,FBo),e(Y,Wb),e(Wb,kme),e(kme,TBo),e(Wb,MBo),e(Wb,ZG),e(ZG,EBo),e(Wb,CBo),e(Y,wBo),e(Y,Qb),e(Qb,Sme),e(Sme,ABo),e(Qb,yBo),e(Qb,eO),e(eO,LBo),e(Qb,xBo),e(Y,$Bo),e(Y,Hb),e(Hb,Rme),e(Rme,kBo),e(Hb,SBo),e(Hb,oO),e(oO,RBo),e(Hb,PBo),e(Y,BBo),e(Y,Ub),e(Ub,Pme),e(Pme,IBo),e(Ub,qBo),e(Ub,rO),e(rO,NBo),e(Ub,jBo),e(Y,DBo),e(Y,Jb),e(Jb,Bme),e(Bme,GBo),e(Jb,OBo),e(Jb,tO),e(tO,VBo),e(Jb,XBo),e(Y,zBo),e(Y,Yb),e(Yb,Ime),e(Ime,WBo),e(Yb,QBo),e(Yb,aO),e(aO,HBo),e(Yb,UBo),e(Y,JBo),e(Y,Kb),e(Kb,qme),e(qme,YBo),e(Kb,KBo),e(Kb,nO),e(nO,ZBo),e(Kb,eIo),e(Y,oIo),e(Y,Zb),e(Zb,Nme),e(Nme,rIo),e(Zb,tIo),e(Zb,sO),e(sO,aIo),e(Zb,nIo),e(Y,sIo),e(Y,e2),e(e2,jme),e(jme,lIo),e(e2,iIo),e(e2,lO),e(lO,dIo),e(e2,cIo),e(Y,fIo),e(Y,o2),e(o2,Dme),e(Dme,mIo),e(o2,gIo),e(o2,iO),e(iO,hIo),e(o2,pIo),e(Y,_Io),e(Y,r2),e(r2,Gme),e(Gme,uIo),e(r2,bIo),e(r2,dO),e(dO,vIo),e(r2,FIo),e(Y,TIo),e(Y,t2),e(t2,Ome),e(Ome,MIo),e(t2,EIo),e(t2,cO),e(cO,CIo),e(t2,wIo),e(Y,AIo),e(Y,a2),e(a2,Vme),e(Vme,yIo),e(a2,LIo),e(a2,fO),e(fO,xIo),e(a2,$Io),e(Y,kIo),e(Y,n2),e(n2,Xme),e(Xme,SIo),e(n2,RIo),e(n2,mO),e(mO,PIo),e(n2,BIo),e(Y,IIo),e(Y,s2),e(s2,zme),e(zme,qIo),e(s2,NIo),e(s2,gO),e(gO,jIo),e(s2,DIo),e(Y,GIo),e(Y,l2),e(l2,Wme),e(Wme,OIo),e(l2,VIo),e(l2,hO),e(hO,XIo),e(l2,zIo),e(ro,WIo),e(ro,i2),e(i2,QIo),e(i2,Qme),e(Qme,HIo),e(i2,UIo),e(i2,Hme),e(Hme,JIo),e(ro,YIo),M(d2,ro,null),b(f,Oqe,u),b(f,zi,u),e(zi,c2),e(c2,Ume),M(wy,Ume,null),e(zi,KIo),e(zi,Jme),e(Jme,ZIo),b(f,Vqe,u),b(f,Bo,u),M(Ay,Bo,null),e(Bo,eqo),e(Bo,Wi),e(Wi,oqo),e(Wi,pO),e(pO,rqo),e(Wi,tqo),e(Wi,_O),e(_O,aqo),e(Wi,nqo),e(Bo,sqo),e(Bo,yy),e(yy,lqo),e(yy,Yme),e(Yme,iqo),e(yy,dqo),e(Bo,cqo),e(Bo,ct),M(Ly,ct,null),e(ct,fqo),e(ct,Kme),e(Kme,mqo),e(ct,gqo),e(ct,Qi),e(Qi,hqo),e(Qi,Zme),e(Zme,pqo),e(Qi,_qo),e(Qi,uO),e(uO,uqo),e(Qi,bqo),e(ct,vqo),M(f2,ct,null),e(Bo,Fqo),e(Bo,to),M(xy,to,null),e(to,Tqo),e(to,ege),e(ege,Mqo),e(to,Eqo),e(to,Ba),e(Ba,Cqo),e(Ba,oge),e(oge,wqo),e(Ba,Aqo),e(Ba,rge),e(rge,yqo),e(Ba,Lqo),e(Ba,tge),e(tge,xqo),e(Ba,$qo),e(to,kqo),e(to,Yr),e(Yr,m2),e(m2,age),e(age,Sqo),e(m2,Rqo),e(m2,bO),e(bO,Pqo),e(m2,Bqo),e(Yr,Iqo),e(Yr,g2),e(g2,nge),e(nge,qqo),e(g2,Nqo),e(g2,vO),e(vO,jqo),e(g2,Dqo),e(Yr,Gqo),e(Yr,h2),e(h2,sge),e(sge,Oqo),e(h2,Vqo),e(h2,FO),e(FO,Xqo),e(h2,zqo),e(Yr,Wqo),e(Yr,p2),e(p2,lge),e(lge,Qqo),e(p2,Hqo),e(p2,TO),e(TO,Uqo),e(p2,Jqo),e(Yr,Yqo),e(Yr,_2),e(_2,ige),e(ige,Kqo),e(_2,Zqo),e(_2,MO),e(MO,eNo),e(_2,oNo),e(to,rNo),e(to,u2),e(u2,tNo),e(u2,dge),e(dge,aNo),e(u2,nNo),e(u2,cge),e(cge,sNo),e(to,lNo),M(b2,to,null),b(f,Xqe,u),b(f,Hi,u),e(Hi,v2),e(v2,fge),M($y,fge,null),e(Hi,iNo),e(Hi,mge),e(mge,dNo),b(f,zqe,u),b(f,Io,u),M(ky,Io,null),e(Io,cNo),e(Io,Ui),e(Ui,fNo),e(Ui,EO),e(EO,mNo),e(Ui,gNo),e(Ui,CO),e(CO,hNo),e(Ui,pNo),e(Io,_No),e(Io,Sy),e(Sy,uNo),e(Sy,gge),e(gge,bNo),e(Sy,vNo),e(Io,FNo),e(Io,ft),M(Ry,ft,null),e(ft,TNo),e(ft,hge),e(hge,MNo),e(ft,ENo),e(ft,Ji),e(Ji,CNo),e(Ji,pge),e(pge,wNo),e(Ji,ANo),e(Ji,wO),e(wO,yNo),e(Ji,LNo),e(ft,xNo),M(F2,ft,null),e(Io,$No),e(Io,ao),M(Py,ao,null),e(ao,kNo),e(ao,_ge),e(_ge,SNo),e(ao,RNo),e(ao,Ia),e(Ia,PNo),e(Ia,uge),e(uge,BNo),e(Ia,INo),e(Ia,bge),e(bge,qNo),e(Ia,NNo),e(Ia,vge),e(vge,jNo),e(Ia,DNo),e(ao,GNo),e(ao,U),e(U,T2),e(T2,Fge),e(Fge,ONo),e(T2,VNo),e(T2,AO),e(AO,XNo),e(T2,zNo),e(U,WNo),e(U,M2),e(M2,Tge),e(Tge,QNo),e(M2,HNo),e(M2,yO),e(yO,UNo),e(M2,JNo),e(U,YNo),e(U,E2),e(E2,Mge),e(Mge,KNo),e(E2,ZNo),e(E2,LO),e(LO,ejo),e(E2,ojo),e(U,rjo),e(U,C2),e(C2,Ege),e(Ege,tjo),e(C2,ajo),e(C2,xO),e(xO,njo),e(C2,sjo),e(U,ljo),e(U,w2),e(w2,Cge),e(Cge,ijo),e(w2,djo),e(w2,$O),e($O,cjo),e(w2,fjo),e(U,mjo),e(U,A2),e(A2,wge),e(wge,gjo),e(A2,hjo),e(A2,kO),e(kO,pjo),e(A2,_jo),e(U,ujo),e(U,y2),e(y2,Age),e(Age,bjo),e(y2,vjo),e(y2,SO),e(SO,Fjo),e(y2,Tjo),e(U,Mjo),e(U,L2),e(L2,yge),e(yge,Ejo),e(L2,Cjo),e(L2,RO),e(RO,wjo),e(L2,Ajo),e(U,yjo),e(U,x2),e(x2,Lge),e(Lge,Ljo),e(x2,xjo),e(x2,PO),e(PO,$jo),e(x2,kjo),e(U,Sjo),e(U,$2),e($2,xge),e(xge,Rjo),e($2,Pjo),e($2,BO),e(BO,Bjo),e($2,Ijo),e(U,qjo),e(U,k2),e(k2,$ge),e($ge,Njo),e(k2,jjo),e(k2,IO),e(IO,Djo),e(k2,Gjo),e(U,Ojo),e(U,S2),e(S2,kge),e(kge,Vjo),e(S2,Xjo),e(S2,qO),e(qO,zjo),e(S2,Wjo),e(U,Qjo),e(U,R2),e(R2,Sge),e(Sge,Hjo),e(R2,Ujo),e(R2,NO),e(NO,Jjo),e(R2,Yjo),e(U,Kjo),e(U,P2),e(P2,Rge),e(Rge,Zjo),e(P2,eDo),e(P2,jO),e(jO,oDo),e(P2,rDo),e(U,tDo),e(U,B2),e(B2,Pge),e(Pge,aDo),e(B2,nDo),e(B2,DO),e(DO,sDo),e(B2,lDo),e(U,iDo),e(U,I2),e(I2,Bge),e(Bge,dDo),e(I2,cDo),e(I2,GO),e(GO,fDo),e(I2,mDo),e(U,gDo),e(U,q2),e(q2,Ige),e(Ige,hDo),e(q2,pDo),e(q2,OO),e(OO,_Do),e(q2,uDo),e(U,bDo),e(U,N2),e(N2,qge),e(qge,vDo),e(N2,FDo),e(N2,VO),e(VO,TDo),e(N2,MDo),e(U,EDo),e(U,j2),e(j2,Nge),e(Nge,CDo),e(j2,wDo),e(j2,XO),e(XO,ADo),e(j2,yDo),e(U,LDo),e(U,D2),e(D2,jge),e(jge,xDo),e(D2,$Do),e(D2,zO),e(zO,kDo),e(D2,SDo),e(U,RDo),e(U,G2),e(G2,Dge),e(Dge,PDo),e(G2,BDo),e(G2,WO),e(WO,IDo),e(G2,qDo),e(U,NDo),e(U,O2),e(O2,Gge),e(Gge,jDo),e(O2,DDo),e(O2,QO),e(QO,GDo),e(O2,ODo),e(U,VDo),e(U,V2),e(V2,Oge),e(Oge,XDo),e(V2,zDo),e(V2,HO),e(HO,WDo),e(V2,QDo),e(U,HDo),e(U,X2),e(X2,Vge),e(Vge,UDo),e(X2,JDo),e(X2,UO),e(UO,YDo),e(X2,KDo),e(U,ZDo),e(U,z2),e(z2,Xge),e(Xge,eGo),e(z2,oGo),e(z2,JO),e(JO,rGo),e(z2,tGo),e(U,aGo),e(U,W2),e(W2,zge),e(zge,nGo),e(W2,sGo),e(W2,YO),e(YO,lGo),e(W2,iGo),e(U,dGo),e(U,Q2),e(Q2,Wge),e(Wge,cGo),e(Q2,fGo),e(Q2,KO),e(KO,mGo),e(Q2,gGo),e(U,hGo),e(U,H2),e(H2,Qge),e(Qge,pGo),e(H2,_Go),e(H2,ZO),e(ZO,uGo),e(H2,bGo),e(U,vGo),e(U,U2),e(U2,Hge),e(Hge,FGo),e(U2,TGo),e(U2,eV),e(eV,MGo),e(U2,EGo),e(U,CGo),e(U,J2),e(J2,Uge),e(Uge,wGo),e(J2,AGo),e(J2,oV),e(oV,yGo),e(J2,LGo),e(U,xGo),e(U,Y2),e(Y2,Jge),e(Jge,$Go),e(Y2,kGo),e(Y2,rV),e(rV,SGo),e(Y2,RGo),e(U,PGo),e(U,K2),e(K2,Yge),e(Yge,BGo),e(K2,IGo),e(K2,tV),e(tV,qGo),e(K2,NGo),e(U,jGo),e(U,Z2),e(Z2,Kge),e(Kge,DGo),e(Z2,GGo),e(Z2,aV),e(aV,OGo),e(Z2,VGo),e(ao,XGo),e(ao,e5),e(e5,zGo),e(e5,Zge),e(Zge,WGo),e(e5,QGo),e(e5,ehe),e(ehe,HGo),e(ao,UGo),M(o5,ao,null),b(f,Wqe,u),b(f,Yi,u),e(Yi,r5),e(r5,ohe),M(By,ohe,null),e(Yi,JGo),e(Yi,rhe),e(rhe,YGo),b(f,Qqe,u),b(f,qo,u),M(Iy,qo,null),e(qo,KGo),e(qo,Ki),e(Ki,ZGo),e(Ki,nV),e(nV,eOo),e(Ki,oOo),e(Ki,sV),e(sV,rOo),e(Ki,tOo),e(qo,aOo),e(qo,qy),e(qy,nOo),e(qy,the),e(the,sOo),e(qy,lOo),e(qo,iOo),e(qo,mt),M(Ny,mt,null),e(mt,dOo),e(mt,ahe),e(ahe,cOo),e(mt,fOo),e(mt,Zi),e(Zi,mOo),e(Zi,nhe),e(nhe,gOo),e(Zi,hOo),e(Zi,lV),e(lV,pOo),e(Zi,_Oo),e(mt,uOo),M(t5,mt,null),e(qo,bOo),e(qo,no),M(jy,no,null),e(no,vOo),e(no,she),e(she,FOo),e(no,TOo),e(no,qa),e(qa,MOo),e(qa,lhe),e(lhe,EOo),e(qa,COo),e(qa,ihe),e(ihe,wOo),e(qa,AOo),e(qa,dhe),e(dhe,yOo),e(qa,LOo),e(no,xOo),e(no,V),e(V,a5),e(a5,che),e(che,$Oo),e(a5,kOo),e(a5,iV),e(iV,SOo),e(a5,ROo),e(V,POo),e(V,n5),e(n5,fhe),e(fhe,BOo),e(n5,IOo),e(n5,dV),e(dV,qOo),e(n5,NOo),e(V,jOo),e(V,s5),e(s5,mhe),e(mhe,DOo),e(s5,GOo),e(s5,cV),e(cV,OOo),e(s5,VOo),e(V,XOo),e(V,l5),e(l5,ghe),e(ghe,zOo),e(l5,WOo),e(l5,fV),e(fV,QOo),e(l5,HOo),e(V,UOo),e(V,i5),e(i5,hhe),e(hhe,JOo),e(i5,YOo),e(i5,mV),e(mV,KOo),e(i5,ZOo),e(V,eVo),e(V,d5),e(d5,phe),e(phe,oVo),e(d5,rVo),e(d5,gV),e(gV,tVo),e(d5,aVo),e(V,nVo),e(V,c5),e(c5,_he),e(_he,sVo),e(c5,lVo),e(c5,hV),e(hV,iVo),e(c5,dVo),e(V,cVo),e(V,f5),e(f5,uhe),e(uhe,fVo),e(f5,mVo),e(f5,pV),e(pV,gVo),e(f5,hVo),e(V,pVo),e(V,m5),e(m5,bhe),e(bhe,_Vo),e(m5,uVo),e(m5,_V),e(_V,bVo),e(m5,vVo),e(V,FVo),e(V,g5),e(g5,vhe),e(vhe,TVo),e(g5,MVo),e(g5,uV),e(uV,EVo),e(g5,CVo),e(V,wVo),e(V,h5),e(h5,Fhe),e(Fhe,AVo),e(h5,yVo),e(h5,bV),e(bV,LVo),e(h5,xVo),e(V,$Vo),e(V,p5),e(p5,The),e(The,kVo),e(p5,SVo),e(p5,vV),e(vV,RVo),e(p5,PVo),e(V,BVo),e(V,_5),e(_5,Mhe),e(Mhe,IVo),e(_5,qVo),e(_5,FV),e(FV,NVo),e(_5,jVo),e(V,DVo),e(V,u5),e(u5,Ehe),e(Ehe,GVo),e(u5,OVo),e(u5,TV),e(TV,VVo),e(u5,XVo),e(V,zVo),e(V,b5),e(b5,Che),e(Che,WVo),e(b5,QVo),e(b5,MV),e(MV,HVo),e(b5,UVo),e(V,JVo),e(V,v5),e(v5,whe),e(whe,YVo),e(v5,KVo),e(v5,EV),e(EV,ZVo),e(v5,eXo),e(V,oXo),e(V,F5),e(F5,Ahe),e(Ahe,rXo),e(F5,tXo),e(F5,CV),e(CV,aXo),e(F5,nXo),e(V,sXo),e(V,T5),e(T5,yhe),e(yhe,lXo),e(T5,iXo),e(T5,wV),e(wV,dXo),e(T5,cXo),e(V,fXo),e(V,M5),e(M5,Lhe),e(Lhe,mXo),e(M5,gXo),e(M5,AV),e(AV,hXo),e(M5,pXo),e(V,_Xo),e(V,E5),e(E5,xhe),e(xhe,uXo),e(E5,bXo),e(E5,yV),e(yV,vXo),e(E5,FXo),e(V,TXo),e(V,C5),e(C5,$he),e($he,MXo),e(C5,EXo),e(C5,LV),e(LV,CXo),e(C5,wXo),e(V,AXo),e(V,w5),e(w5,khe),e(khe,yXo),e(w5,LXo),e(w5,xV),e(xV,xXo),e(w5,$Xo),e(V,kXo),e(V,A5),e(A5,She),e(She,SXo),e(A5,RXo),e(A5,$V),e($V,PXo),e(A5,BXo),e(V,IXo),e(V,y5),e(y5,Rhe),e(Rhe,qXo),e(y5,NXo),e(y5,kV),e(kV,jXo),e(y5,DXo),e(V,GXo),e(V,L5),e(L5,Phe),e(Phe,OXo),e(L5,VXo),e(L5,SV),e(SV,XXo),e(L5,zXo),e(V,WXo),e(V,x5),e(x5,Bhe),e(Bhe,QXo),e(x5,HXo),e(x5,RV),e(RV,UXo),e(x5,JXo),e(V,YXo),e(V,$5),e($5,Ihe),e(Ihe,KXo),e($5,ZXo),e($5,PV),e(PV,ezo),e($5,ozo),e(V,rzo),e(V,k5),e(k5,qhe),e(qhe,tzo),e(k5,azo),e(k5,BV),e(BV,nzo),e(k5,szo),e(V,lzo),e(V,S5),e(S5,Nhe),e(Nhe,izo),e(S5,dzo),e(S5,IV),e(IV,czo),e(S5,fzo),e(V,mzo),e(V,R5),e(R5,jhe),e(jhe,gzo),e(R5,hzo),e(R5,qV),e(qV,pzo),e(R5,_zo),e(V,uzo),e(V,P5),e(P5,Dhe),e(Dhe,bzo),e(P5,vzo),e(P5,NV),e(NV,Fzo),e(P5,Tzo),e(V,Mzo),e(V,B5),e(B5,Ghe),e(Ghe,Ezo),e(B5,Czo),e(B5,jV),e(jV,wzo),e(B5,Azo),e(V,yzo),e(V,I5),e(I5,Ohe),e(Ohe,Lzo),e(I5,xzo),e(I5,DV),e(DV,$zo),e(I5,kzo),e(V,Szo),e(V,q5),e(q5,Vhe),e(Vhe,Rzo),e(q5,Pzo),e(q5,GV),e(GV,Bzo),e(q5,Izo),e(V,qzo),e(V,N5),e(N5,Xhe),e(Xhe,Nzo),e(N5,jzo),e(N5,OV),e(OV,Dzo),e(N5,Gzo),e(V,Ozo),e(V,j5),e(j5,zhe),e(zhe,Vzo),e(j5,Xzo),e(j5,VV),e(VV,zzo),e(j5,Wzo),e(V,Qzo),e(V,D5),e(D5,Whe),e(Whe,Hzo),e(D5,Uzo),e(D5,XV),e(XV,Jzo),e(D5,Yzo),e(V,Kzo),e(V,G5),e(G5,Qhe),e(Qhe,Zzo),e(G5,eWo),e(G5,zV),e(zV,oWo),e(G5,rWo),e(V,tWo),e(V,O5),e(O5,Hhe),e(Hhe,aWo),e(O5,nWo),e(O5,WV),e(WV,sWo),e(O5,lWo),e(no,iWo),e(no,V5),e(V5,dWo),e(V5,Uhe),e(Uhe,cWo),e(V5,fWo),e(V5,Jhe),e(Jhe,mWo),e(no,gWo),M(X5,no,null),b(f,Hqe,u),b(f,ed,u),e(ed,z5),e(z5,Yhe),M(Dy,Yhe,null),e(ed,hWo),e(ed,Khe),e(Khe,pWo),b(f,Uqe,u),b(f,No,u),M(Gy,No,null),e(No,_Wo),e(No,od),e(od,uWo),e(od,QV),e(QV,bWo),e(od,vWo),e(od,HV),e(HV,FWo),e(od,TWo),e(No,MWo),e(No,Oy),e(Oy,EWo),e(Oy,Zhe),e(Zhe,CWo),e(Oy,wWo),e(No,AWo),e(No,gt),M(Vy,gt,null),e(gt,yWo),e(gt,epe),e(epe,LWo),e(gt,xWo),e(gt,rd),e(rd,$Wo),e(rd,ope),e(ope,kWo),e(rd,SWo),e(rd,UV),e(UV,RWo),e(rd,PWo),e(gt,BWo),M(W5,gt,null),e(No,IWo),e(No,so),M(Xy,so,null),e(so,qWo),e(so,rpe),e(rpe,NWo),e(so,jWo),e(so,Na),e(Na,DWo),e(Na,tpe),e(tpe,GWo),e(Na,OWo),e(Na,ape),e(ape,VWo),e(Na,XWo),e(Na,npe),e(npe,zWo),e(Na,WWo),e(so,QWo),e(so,spe),e(spe,Q5),e(Q5,lpe),e(lpe,HWo),e(Q5,UWo),e(Q5,JV),e(JV,JWo),e(Q5,YWo),e(so,KWo),e(so,H5),e(H5,ZWo),e(H5,ipe),e(ipe,eQo),e(H5,oQo),e(H5,dpe),e(dpe,rQo),e(so,tQo),M(U5,so,null),b(f,Jqe,u),b(f,td,u),e(td,J5),e(J5,cpe),M(zy,cpe,null),e(td,aQo),e(td,fpe),e(fpe,nQo),b(f,Yqe,u),b(f,jo,u),M(Wy,jo,null),e(jo,sQo),e(jo,ad),e(ad,lQo),e(ad,YV),e(YV,iQo),e(ad,dQo),e(ad,KV),e(KV,cQo),e(ad,fQo),e(jo,mQo),e(jo,Qy),e(Qy,gQo),e(Qy,mpe),e(mpe,hQo),e(Qy,pQo),e(jo,_Qo),e(jo,ht),M(Hy,ht,null),e(ht,uQo),e(ht,gpe),e(gpe,bQo),e(ht,vQo),e(ht,nd),e(nd,FQo),e(nd,hpe),e(hpe,TQo),e(nd,MQo),e(nd,ZV),e(ZV,EQo),e(nd,CQo),e(ht,wQo),M(Y5,ht,null),e(jo,AQo),e(jo,lo),M(Uy,lo,null),e(lo,yQo),e(lo,ppe),e(ppe,LQo),e(lo,xQo),e(lo,ja),e(ja,$Qo),e(ja,_pe),e(_pe,kQo),e(ja,SQo),e(ja,upe),e(upe,RQo),e(ja,PQo),e(ja,bpe),e(bpe,BQo),e(ja,IQo),e(lo,qQo),e(lo,Fe),e(Fe,K5),e(K5,vpe),e(vpe,NQo),e(K5,jQo),e(K5,eX),e(eX,DQo),e(K5,GQo),e(Fe,OQo),e(Fe,Z5),e(Z5,Fpe),e(Fpe,VQo),e(Z5,XQo),e(Z5,oX),e(oX,zQo),e(Z5,WQo),e(Fe,QQo),e(Fe,ev),e(ev,Tpe),e(Tpe,HQo),e(ev,UQo),e(ev,rX),e(rX,JQo),e(ev,YQo),e(Fe,KQo),e(Fe,ov),e(ov,Mpe),e(Mpe,ZQo),e(ov,eHo),e(ov,tX),e(tX,oHo),e(ov,rHo),e(Fe,tHo),e(Fe,Ps),e(Ps,Epe),e(Epe,aHo),e(Ps,nHo),e(Ps,aX),e(aX,sHo),e(Ps,lHo),e(Ps,nX),e(nX,iHo),e(Ps,dHo),e(Fe,cHo),e(Fe,rv),e(rv,Cpe),e(Cpe,fHo),e(rv,mHo),e(rv,sX),e(sX,gHo),e(rv,hHo),e(Fe,pHo),e(Fe,pt),e(pt,wpe),e(wpe,_Ho),e(pt,uHo),e(pt,lX),e(lX,bHo),e(pt,vHo),e(pt,iX),e(iX,FHo),e(pt,THo),e(pt,dX),e(dX,MHo),e(pt,EHo),e(Fe,CHo),e(Fe,tv),e(tv,Ape),e(Ape,wHo),e(tv,AHo),e(tv,cX),e(cX,yHo),e(tv,LHo),e(Fe,xHo),e(Fe,av),e(av,ype),e(ype,$Ho),e(av,kHo),e(av,fX),e(fX,SHo),e(av,RHo),e(Fe,PHo),e(Fe,nv),e(nv,Lpe),e(Lpe,BHo),e(nv,IHo),e(nv,mX),e(mX,qHo),e(nv,NHo),e(Fe,jHo),e(Fe,sv),e(sv,xpe),e(xpe,DHo),e(sv,GHo),e(sv,gX),e(gX,OHo),e(sv,VHo),e(Fe,XHo),e(Fe,lv),e(lv,$pe),e($pe,zHo),e(lv,WHo),e(lv,hX),e(hX,QHo),e(lv,HHo),e(Fe,UHo),e(Fe,iv),e(iv,kpe),e(kpe,JHo),e(iv,YHo),e(iv,pX),e(pX,KHo),e(iv,ZHo),e(Fe,eUo),e(Fe,dv),e(dv,Spe),e(Spe,oUo),e(dv,rUo),e(dv,_X),e(_X,tUo),e(dv,aUo),e(lo,nUo),e(lo,cv),e(cv,sUo),e(cv,Rpe),e(Rpe,lUo),e(cv,iUo),e(cv,Ppe),e(Ppe,dUo),e(lo,cUo),M(fv,lo,null),b(f,Kqe,u),b(f,sd,u),e(sd,mv),e(mv,Bpe),M(Jy,Bpe,null),e(sd,fUo),e(sd,Ipe),e(Ipe,mUo),b(f,Zqe,u),b(f,Do,u),M(Yy,Do,null),e(Do,gUo),e(Do,ld),e(ld,hUo),e(ld,uX),e(uX,pUo),e(ld,_Uo),e(ld,bX),e(bX,uUo),e(ld,bUo),e(Do,vUo),e(Do,Ky),e(Ky,FUo),e(Ky,qpe),e(qpe,TUo),e(Ky,MUo),e(Do,EUo),e(Do,_t),M(Zy,_t,null),e(_t,CUo),e(_t,Npe),e(Npe,wUo),e(_t,AUo),e(_t,id),e(id,yUo),e(id,jpe),e(jpe,LUo),e(id,xUo),e(id,vX),e(vX,$Uo),e(id,kUo),e(_t,SUo),M(gv,_t,null),e(Do,RUo),e(Do,io),M(e8,io,null),e(io,PUo),e(io,Dpe),e(Dpe,BUo),e(io,IUo),e(io,Da),e(Da,qUo),e(Da,Gpe),e(Gpe,NUo),e(Da,jUo),e(Da,Ope),e(Ope,DUo),e(Da,GUo),e(Da,Vpe),e(Vpe,OUo),e(Da,VUo),e(io,XUo),e(io,Xpe),e(Xpe,hv),e(hv,zpe),e(zpe,zUo),e(hv,WUo),e(hv,FX),e(FX,QUo),e(hv,HUo),e(io,UUo),e(io,pv),e(pv,JUo),e(pv,Wpe),e(Wpe,YUo),e(pv,KUo),e(pv,Qpe),e(Qpe,ZUo),e(io,eJo),M(_v,io,null),b(f,eNe,u),b(f,dd,u),e(dd,uv),e(uv,Hpe),M(o8,Hpe,null),e(dd,oJo),e(dd,Upe),e(Upe,rJo),b(f,oNe,u),b(f,Go,u),M(r8,Go,null),e(Go,tJo),e(Go,cd),e(cd,aJo),e(cd,TX),e(TX,nJo),e(cd,sJo),e(cd,MX),e(MX,lJo),e(cd,iJo),e(Go,dJo),e(Go,t8),e(t8,cJo),e(t8,Jpe),e(Jpe,fJo),e(t8,mJo),e(Go,gJo),e(Go,ut),M(a8,ut,null),e(ut,hJo),e(ut,Ype),e(Ype,pJo),e(ut,_Jo),e(ut,fd),e(fd,uJo),e(fd,Kpe),e(Kpe,bJo),e(fd,vJo),e(fd,EX),e(EX,FJo),e(fd,TJo),e(ut,MJo),M(bv,ut,null),e(Go,EJo),e(Go,co),M(n8,co,null),e(co,CJo),e(co,Zpe),e(Zpe,wJo),e(co,AJo),e(co,Ga),e(Ga,yJo),e(Ga,e_e),e(e_e,LJo),e(Ga,xJo),e(Ga,o_e),e(o_e,$Jo),e(Ga,kJo),e(Ga,r_e),e(r_e,SJo),e(Ga,RJo),e(co,PJo),e(co,ke),e(ke,vv),e(vv,t_e),e(t_e,BJo),e(vv,IJo),e(vv,CX),e(CX,qJo),e(vv,NJo),e(ke,jJo),e(ke,Fv),e(Fv,a_e),e(a_e,DJo),e(Fv,GJo),e(Fv,wX),e(wX,OJo),e(Fv,VJo),e(ke,XJo),e(ke,Tv),e(Tv,n_e),e(n_e,zJo),e(Tv,WJo),e(Tv,AX),e(AX,QJo),e(Tv,HJo),e(ke,UJo),e(ke,Mv),e(Mv,s_e),e(s_e,JJo),e(Mv,YJo),e(Mv,yX),e(yX,KJo),e(Mv,ZJo),e(ke,eYo),e(ke,Ev),e(Ev,l_e),e(l_e,oYo),e(Ev,rYo),e(Ev,LX),e(LX,tYo),e(Ev,aYo),e(ke,nYo),e(ke,Cv),e(Cv,i_e),e(i_e,sYo),e(Cv,lYo),e(Cv,xX),e(xX,iYo),e(Cv,dYo),e(ke,cYo),e(ke,wv),e(wv,d_e),e(d_e,fYo),e(wv,mYo),e(wv,$X),e($X,gYo),e(wv,hYo),e(ke,pYo),e(ke,Av),e(Av,c_e),e(c_e,_Yo),e(Av,uYo),e(Av,kX),e(kX,bYo),e(Av,vYo),e(ke,FYo),e(ke,yv),e(yv,f_e),e(f_e,TYo),e(yv,MYo),e(yv,SX),e(SX,EYo),e(yv,CYo),e(co,wYo),e(co,Lv),e(Lv,AYo),e(Lv,m_e),e(m_e,yYo),e(Lv,LYo),e(Lv,g_e),e(g_e,xYo),e(co,$Yo),M(xv,co,null),b(f,rNe,u),b(f,md,u),e(md,$v),e($v,h_e),M(s8,h_e,null),e(md,kYo),e(md,p_e),e(p_e,SYo),b(f,tNe,u),b(f,Oo,u),M(l8,Oo,null),e(Oo,RYo),e(Oo,gd),e(gd,PYo),e(gd,RX),e(RX,BYo),e(gd,IYo),e(gd,PX),e(PX,qYo),e(gd,NYo),e(Oo,jYo),e(Oo,i8),e(i8,DYo),e(i8,__e),e(__e,GYo),e(i8,OYo),e(Oo,VYo),e(Oo,bt),M(d8,bt,null),e(bt,XYo),e(bt,u_e),e(u_e,zYo),e(bt,WYo),e(bt,hd),e(hd,QYo),e(hd,b_e),e(b_e,HYo),e(hd,UYo),e(hd,BX),e(BX,JYo),e(hd,YYo),e(bt,KYo),M(kv,bt,null),e(Oo,ZYo),e(Oo,fo),M(c8,fo,null),e(fo,eKo),e(fo,v_e),e(v_e,oKo),e(fo,rKo),e(fo,Oa),e(Oa,tKo),e(Oa,F_e),e(F_e,aKo),e(Oa,nKo),e(Oa,T_e),e(T_e,sKo),e(Oa,lKo),e(Oa,M_e),e(M_e,iKo),e(Oa,dKo),e(fo,cKo),e(fo,Kr),e(Kr,Sv),e(Sv,E_e),e(E_e,fKo),e(Sv,mKo),e(Sv,IX),e(IX,gKo),e(Sv,hKo),e(Kr,pKo),e(Kr,Rv),e(Rv,C_e),e(C_e,_Ko),e(Rv,uKo),e(Rv,qX),e(qX,bKo),e(Rv,vKo),e(Kr,FKo),e(Kr,Pv),e(Pv,w_e),e(w_e,TKo),e(Pv,MKo),e(Pv,NX),e(NX,EKo),e(Pv,CKo),e(Kr,wKo),e(Kr,Bv),e(Bv,A_e),e(A_e,AKo),e(Bv,yKo),e(Bv,jX),e(jX,LKo),e(Bv,xKo),e(Kr,$Ko),e(Kr,Iv),e(Iv,y_e),e(y_e,kKo),e(Iv,SKo),e(Iv,DX),e(DX,RKo),e(Iv,PKo),e(fo,BKo),e(fo,qv),e(qv,IKo),e(qv,L_e),e(L_e,qKo),e(qv,NKo),e(qv,x_e),e(x_e,jKo),e(fo,DKo),M(Nv,fo,null),b(f,aNe,u),b(f,pd,u),e(pd,jv),e(jv,$_e),M(f8,$_e,null),e(pd,GKo),e(pd,k_e),e(k_e,OKo),b(f,nNe,u),b(f,Vo,u),M(m8,Vo,null),e(Vo,VKo),e(Vo,_d),e(_d,XKo),e(_d,GX),e(GX,zKo),e(_d,WKo),e(_d,OX),e(OX,QKo),e(_d,HKo),e(Vo,UKo),e(Vo,g8),e(g8,JKo),e(g8,S_e),e(S_e,YKo),e(g8,KKo),e(Vo,ZKo),e(Vo,vt),M(h8,vt,null),e(vt,eZo),e(vt,R_e),e(R_e,oZo),e(vt,rZo),e(vt,ud),e(ud,tZo),e(ud,P_e),e(P_e,aZo),e(ud,nZo),e(ud,VX),e(VX,sZo),e(ud,lZo),e(vt,iZo),M(Dv,vt,null),e(Vo,dZo),e(Vo,mo),M(p8,mo,null),e(mo,cZo),e(mo,B_e),e(B_e,fZo),e(mo,mZo),e(mo,Va),e(Va,gZo),e(Va,I_e),e(I_e,hZo),e(Va,pZo),e(Va,q_e),e(q_e,_Zo),e(Va,uZo),e(Va,N_e),e(N_e,bZo),e(Va,vZo),e(mo,FZo),e(mo,Se),e(Se,Gv),e(Gv,j_e),e(j_e,TZo),e(Gv,MZo),e(Gv,XX),e(XX,EZo),e(Gv,CZo),e(Se,wZo),e(Se,Ov),e(Ov,D_e),e(D_e,AZo),e(Ov,yZo),e(Ov,zX),e(zX,LZo),e(Ov,xZo),e(Se,$Zo),e(Se,Vv),e(Vv,G_e),e(G_e,kZo),e(Vv,SZo),e(Vv,WX),e(WX,RZo),e(Vv,PZo),e(Se,BZo),e(Se,Xv),e(Xv,O_e),e(O_e,IZo),e(Xv,qZo),e(Xv,QX),e(QX,NZo),e(Xv,jZo),e(Se,DZo),e(Se,zv),e(zv,V_e),e(V_e,GZo),e(zv,OZo),e(zv,HX),e(HX,VZo),e(zv,XZo),e(Se,zZo),e(Se,Wv),e(Wv,X_e),e(X_e,WZo),e(Wv,QZo),e(Wv,UX),e(UX,HZo),e(Wv,UZo),e(Se,JZo),e(Se,Qv),e(Qv,z_e),e(z_e,YZo),e(Qv,KZo),e(Qv,JX),e(JX,ZZo),e(Qv,eer),e(Se,oer),e(Se,Hv),e(Hv,W_e),e(W_e,rer),e(Hv,ter),e(Hv,YX),e(YX,aer),e(Hv,ner),e(Se,ser),e(Se,Uv),e(Uv,Q_e),e(Q_e,ler),e(Uv,ier),e(Uv,KX),e(KX,der),e(Uv,cer),e(mo,fer),e(mo,Jv),e(Jv,mer),e(Jv,H_e),e(H_e,ger),e(Jv,her),e(Jv,U_e),e(U_e,per),e(mo,_er),M(Yv,mo,null),b(f,sNe,u),b(f,bd,u),e(bd,Kv),e(Kv,J_e),M(_8,J_e,null),e(bd,uer),e(bd,Y_e),e(Y_e,ber),b(f,lNe,u),b(f,Xo,u),M(u8,Xo,null),e(Xo,ver),e(Xo,vd),e(vd,Fer),e(vd,ZX),e(ZX,Ter),e(vd,Mer),e(vd,ez),e(ez,Eer),e(vd,Cer),e(Xo,wer),e(Xo,b8),e(b8,Aer),e(b8,K_e),e(K_e,yer),e(b8,Ler),e(Xo,xer),e(Xo,Ft),M(v8,Ft,null),e(Ft,$er),e(Ft,Z_e),e(Z_e,ker),e(Ft,Ser),e(Ft,Fd),e(Fd,Rer),e(Fd,eue),e(eue,Per),e(Fd,Ber),e(Fd,oz),e(oz,Ier),e(Fd,qer),e(Ft,Ner),M(Zv,Ft,null),e(Xo,jer),e(Xo,go),M(F8,go,null),e(go,Der),e(go,oue),e(oue,Ger),e(go,Oer),e(go,Xa),e(Xa,Ver),e(Xa,rue),e(rue,Xer),e(Xa,zer),e(Xa,tue),e(tue,Wer),e(Xa,Qer),e(Xa,aue),e(aue,Her),e(Xa,Uer),e(go,Jer),e(go,T8),e(T8,eF),e(eF,nue),e(nue,Yer),e(eF,Ker),e(eF,rz),e(rz,Zer),e(eF,eor),e(T8,oor),e(T8,oF),e(oF,sue),e(sue,ror),e(oF,tor),e(oF,tz),e(tz,aor),e(oF,nor),e(go,sor),e(go,rF),e(rF,lor),e(rF,lue),e(lue,ior),e(rF,dor),e(rF,iue),e(iue,cor),e(go,mor),M(tF,go,null),b(f,iNe,u),b(f,Td,u),e(Td,aF),e(aF,due),M(M8,due,null),e(Td,gor),e(Td,cue),e(cue,hor),b(f,dNe,u),b(f,zo,u),M(E8,zo,null),e(zo,por),e(zo,Md),e(Md,_or),e(Md,az),e(az,uor),e(Md,bor),e(Md,nz),e(nz,vor),e(Md,For),e(zo,Tor),e(zo,C8),e(C8,Mor),e(C8,fue),e(fue,Eor),e(C8,Cor),e(zo,wor),e(zo,Tt),M(w8,Tt,null),e(Tt,Aor),e(Tt,mue),e(mue,yor),e(Tt,Lor),e(Tt,Ed),e(Ed,xor),e(Ed,gue),e(gue,$or),e(Ed,kor),e(Ed,sz),e(sz,Sor),e(Ed,Ror),e(Tt,Por),M(nF,Tt,null),e(zo,Bor),e(zo,ho),M(A8,ho,null),e(ho,Ior),e(ho,hue),e(hue,qor),e(ho,Nor),e(ho,za),e(za,jor),e(za,pue),e(pue,Dor),e(za,Gor),e(za,_ue),e(_ue,Oor),e(za,Vor),e(za,uue),e(uue,Xor),e(za,zor),e(ho,Wor),e(ho,Zr),e(Zr,sF),e(sF,bue),e(bue,Qor),e(sF,Hor),e(sF,lz),e(lz,Uor),e(sF,Jor),e(Zr,Yor),e(Zr,lF),e(lF,vue),e(vue,Kor),e(lF,Zor),e(lF,iz),e(iz,err),e(lF,orr),e(Zr,rrr),e(Zr,iF),e(iF,Fue),e(Fue,trr),e(iF,arr),e(iF,dz),e(dz,nrr),e(iF,srr),e(Zr,lrr),e(Zr,dF),e(dF,Tue),e(Tue,irr),e(dF,drr),e(dF,cz),e(cz,crr),e(dF,frr),e(Zr,mrr),e(Zr,cF),e(cF,Mue),e(Mue,grr),e(cF,hrr),e(cF,fz),e(fz,prr),e(cF,_rr),e(ho,urr),e(ho,fF),e(fF,brr),e(fF,Eue),e(Eue,vrr),e(fF,Frr),e(fF,Cue),e(Cue,Trr),e(ho,Mrr),M(mF,ho,null),b(f,cNe,u),b(f,Cd,u),e(Cd,gF),e(gF,wue),M(y8,wue,null),e(Cd,Err),e(Cd,Aue),e(Aue,Crr),b(f,fNe,u),b(f,Wo,u),M(L8,Wo,null),e(Wo,wrr),e(Wo,wd),e(wd,Arr),e(wd,mz),e(mz,yrr),e(wd,Lrr),e(wd,gz),e(gz,xrr),e(wd,$rr),e(Wo,krr),e(Wo,x8),e(x8,Srr),e(x8,yue),e(yue,Rrr),e(x8,Prr),e(Wo,Brr),e(Wo,Mt),M($8,Mt,null),e(Mt,Irr),e(Mt,Lue),e(Lue,qrr),e(Mt,Nrr),e(Mt,Ad),e(Ad,jrr),e(Ad,xue),e(xue,Drr),e(Ad,Grr),e(Ad,hz),e(hz,Orr),e(Ad,Vrr),e(Mt,Xrr),M(hF,Mt,null),e(Wo,zrr),e(Wo,po),M(k8,po,null),e(po,Wrr),e(po,$ue),e($ue,Qrr),e(po,Hrr),e(po,Wa),e(Wa,Urr),e(Wa,kue),e(kue,Jrr),e(Wa,Yrr),e(Wa,Sue),e(Sue,Krr),e(Wa,Zrr),e(Wa,Rue),e(Rue,etr),e(Wa,otr),e(po,rtr),e(po,yd),e(yd,pF),e(pF,Pue),e(Pue,ttr),e(pF,atr),e(pF,pz),e(pz,ntr),e(pF,str),e(yd,ltr),e(yd,_F),e(_F,Bue),e(Bue,itr),e(_F,dtr),e(_F,_z),e(_z,ctr),e(_F,ftr),e(yd,mtr),e(yd,uF),e(uF,Iue),e(Iue,gtr),e(uF,htr),e(uF,uz),e(uz,ptr),e(uF,_tr),e(po,utr),e(po,bF),e(bF,btr),e(bF,que),e(que,vtr),e(bF,Ftr),e(bF,Nue),e(Nue,Ttr),e(po,Mtr),M(vF,po,null),b(f,mNe,u),b(f,Ld,u),e(Ld,FF),e(FF,jue),M(S8,jue,null),e(Ld,Etr),e(Ld,Due),e(Due,Ctr),b(f,gNe,u),b(f,Qo,u),M(R8,Qo,null),e(Qo,wtr),e(Qo,xd),e(xd,Atr),e(xd,bz),e(bz,ytr),e(xd,Ltr),e(xd,vz),e(vz,xtr),e(xd,$tr),e(Qo,ktr),e(Qo,P8),e(P8,Str),e(P8,Gue),e(Gue,Rtr),e(P8,Ptr),e(Qo,Btr),e(Qo,Et),M(B8,Et,null),e(Et,Itr),e(Et,Oue),e(Oue,qtr),e(Et,Ntr),e(Et,$d),e($d,jtr),e($d,Vue),e(Vue,Dtr),e($d,Gtr),e($d,Fz),e(Fz,Otr),e($d,Vtr),e(Et,Xtr),M(TF,Et,null),e(Qo,ztr),e(Qo,_o),M(I8,_o,null),e(_o,Wtr),e(_o,Xue),e(Xue,Qtr),e(_o,Htr),e(_o,Qa),e(Qa,Utr),e(Qa,zue),e(zue,Jtr),e(Qa,Ytr),e(Qa,Wue),e(Wue,Ktr),e(Qa,Ztr),e(Qa,Que),e(Que,ear),e(Qa,oar),e(_o,rar),e(_o,q8),e(q8,MF),e(MF,Hue),e(Hue,tar),e(MF,aar),e(MF,Tz),e(Tz,nar),e(MF,sar),e(q8,lar),e(q8,EF),e(EF,Uue),e(Uue,iar),e(EF,dar),e(EF,Mz),e(Mz,car),e(EF,far),e(_o,mar),e(_o,CF),e(CF,gar),e(CF,Jue),e(Jue,har),e(CF,par),e(CF,Yue),e(Yue,_ar),e(_o,uar),M(wF,_o,null),b(f,hNe,u),b(f,kd,u),e(kd,AF),e(AF,Kue),M(N8,Kue,null),e(kd,bar),e(kd,Zue),e(Zue,Far),b(f,pNe,u),b(f,Ho,u),M(j8,Ho,null),e(Ho,Tar),e(Ho,Sd),e(Sd,Mar),e(Sd,Ez),e(Ez,Ear),e(Sd,Car),e(Sd,Cz),e(Cz,war),e(Sd,Aar),e(Ho,yar),e(Ho,D8),e(D8,Lar),e(D8,e6e),e(e6e,xar),e(D8,$ar),e(Ho,kar),e(Ho,Ct),M(G8,Ct,null),e(Ct,Sar),e(Ct,o6e),e(o6e,Rar),e(Ct,Par),e(Ct,Rd),e(Rd,Bar),e(Rd,r6e),e(r6e,Iar),e(Rd,qar),e(Rd,wz),e(wz,Nar),e(Rd,jar),e(Ct,Dar),M(yF,Ct,null),e(Ho,Gar),e(Ho,uo),M(O8,uo,null),e(uo,Oar),e(uo,t6e),e(t6e,Var),e(uo,Xar),e(uo,Ha),e(Ha,zar),e(Ha,a6e),e(a6e,War),e(Ha,Qar),e(Ha,n6e),e(n6e,Har),e(Ha,Uar),e(Ha,s6e),e(s6e,Jar),e(Ha,Yar),e(uo,Kar),e(uo,l6e),e(l6e,LF),e(LF,i6e),e(i6e,Zar),e(LF,enr),e(LF,Az),e(Az,onr),e(LF,rnr),e(uo,tnr),e(uo,xF),e(xF,anr),e(xF,d6e),e(d6e,nnr),e(xF,snr),e(xF,c6e),e(c6e,lnr),e(uo,inr),M($F,uo,null),b(f,_Ne,u),b(f,Pd,u),e(Pd,kF),e(kF,f6e),M(V8,f6e,null),e(Pd,dnr),e(Pd,m6e),e(m6e,cnr),b(f,uNe,u),b(f,Uo,u),M(X8,Uo,null),e(Uo,fnr),e(Uo,Bd),e(Bd,mnr),e(Bd,yz),e(yz,gnr),e(Bd,hnr),e(Bd,Lz),e(Lz,pnr),e(Bd,_nr),e(Uo,unr),e(Uo,z8),e(z8,bnr),e(z8,g6e),e(g6e,vnr),e(z8,Fnr),e(Uo,Tnr),e(Uo,wt),M(W8,wt,null),e(wt,Mnr),e(wt,h6e),e(h6e,Enr),e(wt,Cnr),e(wt,Id),e(Id,wnr),e(Id,p6e),e(p6e,Anr),e(Id,ynr),e(Id,xz),e(xz,Lnr),e(Id,xnr),e(wt,$nr),M(SF,wt,null),e(Uo,knr),e(Uo,bo),M(Q8,bo,null),e(bo,Snr),e(bo,_6e),e(_6e,Rnr),e(bo,Pnr),e(bo,Ua),e(Ua,Bnr),e(Ua,u6e),e(u6e,Inr),e(Ua,qnr),e(Ua,b6e),e(b6e,Nnr),e(Ua,jnr),e(Ua,v6e),e(v6e,Dnr),e(Ua,Gnr),e(bo,Onr),e(bo,Ja),e(Ja,RF),e(RF,F6e),e(F6e,Vnr),e(RF,Xnr),e(RF,$z),e($z,znr),e(RF,Wnr),e(Ja,Qnr),e(Ja,PF),e(PF,T6e),e(T6e,Hnr),e(PF,Unr),e(PF,kz),e(kz,Jnr),e(PF,Ynr),e(Ja,Knr),e(Ja,BF),e(BF,M6e),e(M6e,Znr),e(BF,esr),e(BF,Sz),e(Sz,osr),e(BF,rsr),e(Ja,tsr),e(Ja,IF),e(IF,E6e),e(E6e,asr),e(IF,nsr),e(IF,Rz),e(Rz,ssr),e(IF,lsr),e(bo,isr),e(bo,qF),e(qF,dsr),e(qF,C6e),e(C6e,csr),e(qF,fsr),e(qF,w6e),e(w6e,msr),e(bo,gsr),M(NF,bo,null),b(f,bNe,u),b(f,qd,u),e(qd,jF),e(jF,A6e),M(H8,A6e,null),e(qd,hsr),e(qd,y6e),e(y6e,psr),b(f,vNe,u),b(f,Jo,u),M(U8,Jo,null),e(Jo,_sr),e(Jo,Nd),e(Nd,usr),e(Nd,Pz),e(Pz,bsr),e(Nd,vsr),e(Nd,Bz),e(Bz,Fsr),e(Nd,Tsr),e(Jo,Msr),e(Jo,J8),e(J8,Esr),e(J8,L6e),e(L6e,Csr),e(J8,wsr),e(Jo,Asr),e(Jo,At),M(Y8,At,null),e(At,ysr),e(At,x6e),e(x6e,Lsr),e(At,xsr),e(At,jd),e(jd,$sr),e(jd,$6e),e($6e,ksr),e(jd,Ssr),e(jd,Iz),e(Iz,Rsr),e(jd,Psr),e(At,Bsr),M(DF,At,null),e(Jo,Isr),e(Jo,vo),M(K8,vo,null),e(vo,qsr),e(vo,k6e),e(k6e,Nsr),e(vo,jsr),e(vo,Ya),e(Ya,Dsr),e(Ya,S6e),e(S6e,Gsr),e(Ya,Osr),e(Ya,R6e),e(R6e,Vsr),e(Ya,Xsr),e(Ya,P6e),e(P6e,zsr),e(Ya,Wsr),e(vo,Qsr),e(vo,B6e),e(B6e,GF),e(GF,I6e),e(I6e,Hsr),e(GF,Usr),e(GF,qz),e(qz,Jsr),e(GF,Ysr),e(vo,Ksr),e(vo,OF),e(OF,Zsr),e(OF,q6e),e(q6e,elr),e(OF,olr),e(OF,N6e),e(N6e,rlr),e(vo,tlr),M(VF,vo,null),b(f,FNe,u),b(f,Dd,u),e(Dd,XF),e(XF,j6e),M(Z8,j6e,null),e(Dd,alr),e(Dd,D6e),e(D6e,nlr),b(f,TNe,u),b(f,Yo,u),M(eL,Yo,null),e(Yo,slr),e(Yo,Gd),e(Gd,llr),e(Gd,Nz),e(Nz,ilr),e(Gd,dlr),e(Gd,jz),e(jz,clr),e(Gd,flr),e(Yo,mlr),e(Yo,oL),e(oL,glr),e(oL,G6e),e(G6e,hlr),e(oL,plr),e(Yo,_lr),e(Yo,yt),M(rL,yt,null),e(yt,ulr),e(yt,O6e),e(O6e,blr),e(yt,vlr),e(yt,Od),e(Od,Flr),e(Od,V6e),e(V6e,Tlr),e(Od,Mlr),e(Od,Dz),e(Dz,Elr),e(Od,Clr),e(yt,wlr),M(zF,yt,null),e(Yo,Alr),e(Yo,wr),M(tL,wr,null),e(wr,ylr),e(wr,X6e),e(X6e,Llr),e(wr,xlr),e(wr,Ka),e(Ka,$lr),e(Ka,z6e),e(z6e,klr),e(Ka,Slr),e(Ka,W6e),e(W6e,Rlr),e(Ka,Plr),e(Ka,Q6e),e(Q6e,Blr),e(Ka,Ilr),e(wr,qlr),e(wr,N),e(N,WF),e(WF,H6e),e(H6e,Nlr),e(WF,jlr),e(WF,Gz),e(Gz,Dlr),e(WF,Glr),e(N,Olr),e(N,QF),e(QF,U6e),e(U6e,Vlr),e(QF,Xlr),e(QF,Oz),e(Oz,zlr),e(QF,Wlr),e(N,Qlr),e(N,HF),e(HF,J6e),e(J6e,Hlr),e(HF,Ulr),e(HF,Vz),e(Vz,Jlr),e(HF,Ylr),e(N,Klr),e(N,UF),e(UF,Y6e),e(Y6e,Zlr),e(UF,eir),e(UF,Xz),e(Xz,oir),e(UF,rir),e(N,tir),e(N,JF),e(JF,K6e),e(K6e,air),e(JF,nir),e(JF,zz),e(zz,sir),e(JF,lir),e(N,iir),e(N,YF),e(YF,Z6e),e(Z6e,dir),e(YF,cir),e(YF,Wz),e(Wz,fir),e(YF,mir),e(N,gir),e(N,KF),e(KF,e1e),e(e1e,hir),e(KF,pir),e(KF,Qz),e(Qz,_ir),e(KF,uir),e(N,bir),e(N,ZF),e(ZF,o1e),e(o1e,vir),e(ZF,Fir),e(ZF,Hz),e(Hz,Tir),e(ZF,Mir),e(N,Eir),e(N,eT),e(eT,r1e),e(r1e,Cir),e(eT,wir),e(eT,Uz),e(Uz,Air),e(eT,yir),e(N,Lir),e(N,oT),e(oT,t1e),e(t1e,xir),e(oT,$ir),e(oT,Jz),e(Jz,kir),e(oT,Sir),e(N,Rir),e(N,rT),e(rT,a1e),e(a1e,Pir),e(rT,Bir),e(rT,Yz),e(Yz,Iir),e(rT,qir),e(N,Nir),e(N,tT),e(tT,n1e),e(n1e,jir),e(tT,Dir),e(tT,Kz),e(Kz,Gir),e(tT,Oir),e(N,Vir),e(N,aT),e(aT,s1e),e(s1e,Xir),e(aT,zir),e(aT,Zz),e(Zz,Wir),e(aT,Qir),e(N,Hir),e(N,nT),e(nT,l1e),e(l1e,Uir),e(nT,Jir),e(nT,eW),e(eW,Yir),e(nT,Kir),e(N,Zir),e(N,sT),e(sT,i1e),e(i1e,edr),e(sT,odr),e(sT,oW),e(oW,rdr),e(sT,tdr),e(N,adr),e(N,lT),e(lT,d1e),e(d1e,ndr),e(lT,sdr),e(lT,rW),e(rW,ldr),e(lT,idr),e(N,ddr),e(N,iT),e(iT,c1e),e(c1e,cdr),e(iT,fdr),e(iT,tW),e(tW,mdr),e(iT,gdr),e(N,hdr),e(N,Bs),e(Bs,f1e),e(f1e,pdr),e(Bs,_dr),e(Bs,aW),e(aW,udr),e(Bs,bdr),e(Bs,nW),e(nW,vdr),e(Bs,Fdr),e(N,Tdr),e(N,dT),e(dT,m1e),e(m1e,Mdr),e(dT,Edr),e(dT,sW),e(sW,Cdr),e(dT,wdr),e(N,Adr),e(N,cT),e(cT,g1e),e(g1e,ydr),e(cT,Ldr),e(cT,lW),e(lW,xdr),e(cT,$dr),e(N,kdr),e(N,fT),e(fT,h1e),e(h1e,Sdr),e(fT,Rdr),e(fT,iW),e(iW,Pdr),e(fT,Bdr),e(N,Idr),e(N,mT),e(mT,p1e),e(p1e,qdr),e(mT,Ndr),e(mT,dW),e(dW,jdr),e(mT,Ddr),e(N,Gdr),e(N,gT),e(gT,_1e),e(_1e,Odr),e(gT,Vdr),e(gT,cW),e(cW,Xdr),e(gT,zdr),e(N,Wdr),e(N,hT),e(hT,u1e),e(u1e,Qdr),e(hT,Hdr),e(hT,fW),e(fW,Udr),e(hT,Jdr),e(N,Ydr),e(N,pT),e(pT,b1e),e(b1e,Kdr),e(pT,Zdr),e(pT,mW),e(mW,ecr),e(pT,ocr),e(N,rcr),e(N,_T),e(_T,v1e),e(v1e,tcr),e(_T,acr),e(_T,gW),e(gW,ncr),e(_T,scr),e(N,lcr),e(N,uT),e(uT,F1e),e(F1e,icr),e(uT,dcr),e(uT,hW),e(hW,ccr),e(uT,fcr),e(N,mcr),e(N,bT),e(bT,T1e),e(T1e,gcr),e(bT,hcr),e(bT,pW),e(pW,pcr),e(bT,_cr),e(N,ucr),e(N,vT),e(vT,M1e),e(M1e,bcr),e(vT,vcr),e(vT,_W),e(_W,Fcr),e(vT,Tcr),e(N,Mcr),e(N,FT),e(FT,E1e),e(E1e,Ecr),e(FT,Ccr),e(FT,uW),e(uW,wcr),e(FT,Acr),e(N,ycr),e(N,TT),e(TT,C1e),e(C1e,Lcr),e(TT,xcr),e(TT,bW),e(bW,$cr),e(TT,kcr),e(N,Scr),e(N,MT),e(MT,w1e),e(w1e,Rcr),e(MT,Pcr),e(MT,vW),e(vW,Bcr),e(MT,Icr),e(N,qcr),e(N,ET),e(ET,A1e),e(A1e,Ncr),e(ET,jcr),e(ET,FW),e(FW,Dcr),e(ET,Gcr),e(N,Ocr),e(N,CT),e(CT,y1e),e(y1e,Vcr),e(CT,Xcr),e(CT,TW),e(TW,zcr),e(CT,Wcr),e(N,Qcr),e(N,wT),e(wT,L1e),e(L1e,Hcr),e(wT,Ucr),e(wT,MW),e(MW,Jcr),e(wT,Ycr),e(N,Kcr),e(N,AT),e(AT,x1e),e(x1e,Zcr),e(AT,efr),e(AT,EW),e(EW,ofr),e(AT,rfr),e(N,tfr),e(N,yT),e(yT,$1e),e($1e,afr),e(yT,nfr),e(yT,CW),e(CW,sfr),e(yT,lfr),e(N,ifr),e(N,LT),e(LT,k1e),e(k1e,dfr),e(LT,cfr),e(LT,wW),e(wW,ffr),e(LT,mfr),e(N,gfr),e(N,xT),e(xT,S1e),e(S1e,hfr),e(xT,pfr),e(xT,AW),e(AW,_fr),e(xT,ufr),e(N,bfr),e(N,$T),e($T,R1e),e(R1e,vfr),e($T,Ffr),e($T,yW),e(yW,Tfr),e($T,Mfr),e(N,Efr),e(N,kT),e(kT,P1e),e(P1e,Cfr),e(kT,wfr),e(kT,LW),e(LW,Afr),e(kT,yfr),e(N,Lfr),e(N,ST),e(ST,B1e),e(B1e,xfr),e(ST,$fr),e(ST,xW),e(xW,kfr),e(ST,Sfr),e(N,Rfr),e(N,RT),e(RT,I1e),e(I1e,Pfr),e(RT,Bfr),e(RT,$W),e($W,Ifr),e(RT,qfr),e(N,Nfr),e(N,PT),e(PT,q1e),e(q1e,jfr),e(PT,Dfr),e(PT,kW),e(kW,Gfr),e(PT,Ofr),e(N,Vfr),e(N,BT),e(BT,N1e),e(N1e,Xfr),e(BT,zfr),e(BT,SW),e(SW,Wfr),e(BT,Qfr),e(N,Hfr),e(N,IT),e(IT,j1e),e(j1e,Ufr),e(IT,Jfr),e(IT,RW),e(RW,Yfr),e(IT,Kfr),e(wr,Zfr),M(qT,wr,null),b(f,MNe,u),b(f,Vd,u),e(Vd,NT),e(NT,D1e),M(aL,D1e,null),e(Vd,emr),e(Vd,G1e),e(G1e,omr),b(f,ENe,u),b(f,Ko,u),M(nL,Ko,null),e(Ko,rmr),e(Ko,Xd),e(Xd,tmr),e(Xd,PW),e(PW,amr),e(Xd,nmr),e(Xd,BW),e(BW,smr),e(Xd,lmr),e(Ko,imr),e(Ko,sL),e(sL,dmr),e(sL,O1e),e(O1e,cmr),e(sL,fmr),e(Ko,mmr),e(Ko,Lt),M(lL,Lt,null),e(Lt,gmr),e(Lt,V1e),e(V1e,hmr),e(Lt,pmr),e(Lt,zd),e(zd,_mr),e(zd,X1e),e(X1e,umr),e(zd,bmr),e(zd,IW),e(IW,vmr),e(zd,Fmr),e(Lt,Tmr),M(jT,Lt,null),e(Ko,Mmr),e(Ko,Ar),M(iL,Ar,null),e(Ar,Emr),e(Ar,z1e),e(z1e,Cmr),e(Ar,wmr),e(Ar,Za),e(Za,Amr),e(Za,W1e),e(W1e,ymr),e(Za,Lmr),e(Za,Q1e),e(Q1e,xmr),e(Za,$mr),e(Za,H1e),e(H1e,kmr),e(Za,Smr),e(Ar,Rmr),e(Ar,se),e(se,DT),e(DT,U1e),e(U1e,Pmr),e(DT,Bmr),e(DT,qW),e(qW,Imr),e(DT,qmr),e(se,Nmr),e(se,GT),e(GT,J1e),e(J1e,jmr),e(GT,Dmr),e(GT,NW),e(NW,Gmr),e(GT,Omr),e(se,Vmr),e(se,OT),e(OT,Y1e),e(Y1e,Xmr),e(OT,zmr),e(OT,jW),e(jW,Wmr),e(OT,Qmr),e(se,Hmr),e(se,VT),e(VT,K1e),e(K1e,Umr),e(VT,Jmr),e(VT,DW),e(DW,Ymr),e(VT,Kmr),e(se,Zmr),e(se,XT),e(XT,Z1e),e(Z1e,egr),e(XT,ogr),e(XT,GW),e(GW,rgr),e(XT,tgr),e(se,agr),e(se,zT),e(zT,ebe),e(ebe,ngr),e(zT,sgr),e(zT,OW),e(OW,lgr),e(zT,igr),e(se,dgr),e(se,WT),e(WT,obe),e(obe,cgr),e(WT,fgr),e(WT,VW),e(VW,mgr),e(WT,ggr),e(se,hgr),e(se,QT),e(QT,rbe),e(rbe,pgr),e(QT,_gr),e(QT,XW),e(XW,ugr),e(QT,bgr),e(se,vgr),e(se,HT),e(HT,tbe),e(tbe,Fgr),e(HT,Tgr),e(HT,zW),e(zW,Mgr),e(HT,Egr),e(se,Cgr),e(se,UT),e(UT,abe),e(abe,wgr),e(UT,Agr),e(UT,WW),e(WW,ygr),e(UT,Lgr),e(se,xgr),e(se,JT),e(JT,nbe),e(nbe,$gr),e(JT,kgr),e(JT,QW),e(QW,Sgr),e(JT,Rgr),e(se,Pgr),e(se,YT),e(YT,sbe),e(sbe,Bgr),e(YT,Igr),e(YT,HW),e(HW,qgr),e(YT,Ngr),e(se,jgr),e(se,KT),e(KT,lbe),e(lbe,Dgr),e(KT,Ggr),e(KT,UW),e(UW,Ogr),e(KT,Vgr),e(se,Xgr),e(se,ZT),e(ZT,ibe),e(ibe,zgr),e(ZT,Wgr),e(ZT,JW),e(JW,Qgr),e(ZT,Hgr),e(se,Ugr),e(se,e9),e(e9,dbe),e(dbe,Jgr),e(e9,Ygr),e(e9,YW),e(YW,Kgr),e(e9,Zgr),e(se,ehr),e(se,o9),e(o9,cbe),e(cbe,ohr),e(o9,rhr),e(o9,KW),e(KW,thr),e(o9,ahr),e(se,nhr),e(se,r9),e(r9,fbe),e(fbe,shr),e(r9,lhr),e(r9,ZW),e(ZW,ihr),e(r9,dhr),e(se,chr),e(se,t9),e(t9,mbe),e(mbe,fhr),e(t9,mhr),e(t9,eQ),e(eQ,ghr),e(t9,hhr),e(se,phr),e(se,a9),e(a9,gbe),e(gbe,_hr),e(a9,uhr),e(a9,oQ),e(oQ,bhr),e(a9,vhr),e(se,Fhr),e(se,n9),e(n9,hbe),e(hbe,Thr),e(n9,Mhr),e(n9,rQ),e(rQ,Ehr),e(n9,Chr),e(se,whr),e(se,s9),e(s9,pbe),e(pbe,Ahr),e(s9,yhr),e(s9,tQ),e(tQ,Lhr),e(s9,xhr),e(se,$hr),e(se,l9),e(l9,_be),e(_be,khr),e(l9,Shr),e(l9,aQ),e(aQ,Rhr),e(l9,Phr),e(se,Bhr),e(se,i9),e(i9,ube),e(ube,Ihr),e(i9,qhr),e(i9,nQ),e(nQ,Nhr),e(i9,jhr),e(Ar,Dhr),M(d9,Ar,null),b(f,CNe,u),b(f,Wd,u),e(Wd,c9),e(c9,bbe),M(dL,bbe,null),e(Wd,Ghr),e(Wd,vbe),e(vbe,Ohr),b(f,wNe,u),b(f,Zo,u),M(cL,Zo,null),e(Zo,Vhr),e(Zo,Qd),e(Qd,Xhr),e(Qd,sQ),e(sQ,zhr),e(Qd,Whr),e(Qd,lQ),e(lQ,Qhr),e(Qd,Hhr),e(Zo,Uhr),e(Zo,fL),e(fL,Jhr),e(fL,Fbe),e(Fbe,Yhr),e(fL,Khr),e(Zo,Zhr),e(Zo,xt),M(mL,xt,null),e(xt,epr),e(xt,Tbe),e(Tbe,opr),e(xt,rpr),e(xt,Hd),e(Hd,tpr),e(Hd,Mbe),e(Mbe,apr),e(Hd,npr),e(Hd,iQ),e(iQ,spr),e(Hd,lpr),e(xt,ipr),M(f9,xt,null),e(Zo,dpr),e(Zo,yr),M(gL,yr,null),e(yr,cpr),e(yr,Ebe),e(Ebe,fpr),e(yr,mpr),e(yr,en),e(en,gpr),e(en,Cbe),e(Cbe,hpr),e(en,ppr),e(en,wbe),e(wbe,_pr),e(en,upr),e(en,Abe),e(Abe,bpr),e(en,vpr),e(yr,Fpr),e(yr,Me),e(Me,m9),e(m9,ybe),e(ybe,Tpr),e(m9,Mpr),e(m9,dQ),e(dQ,Epr),e(m9,Cpr),e(Me,wpr),e(Me,g9),e(g9,Lbe),e(Lbe,Apr),e(g9,ypr),e(g9,cQ),e(cQ,Lpr),e(g9,xpr),e(Me,$pr),e(Me,h9),e(h9,xbe),e(xbe,kpr),e(h9,Spr),e(h9,fQ),e(fQ,Rpr),e(h9,Ppr),e(Me,Bpr),e(Me,p9),e(p9,$be),e($be,Ipr),e(p9,qpr),e(p9,mQ),e(mQ,Npr),e(p9,jpr),e(Me,Dpr),e(Me,_9),e(_9,kbe),e(kbe,Gpr),e(_9,Opr),e(_9,gQ),e(gQ,Vpr),e(_9,Xpr),e(Me,zpr),e(Me,u9),e(u9,Sbe),e(Sbe,Wpr),e(u9,Qpr),e(u9,hQ),e(hQ,Hpr),e(u9,Upr),e(Me,Jpr),e(Me,b9),e(b9,Rbe),e(Rbe,Ypr),e(b9,Kpr),e(b9,pQ),e(pQ,Zpr),e(b9,e_r),e(Me,o_r),e(Me,v9),e(v9,Pbe),e(Pbe,r_r),e(v9,t_r),e(v9,_Q),e(_Q,a_r),e(v9,n_r),e(Me,s_r),e(Me,F9),e(F9,Bbe),e(Bbe,l_r),e(F9,i_r),e(F9,uQ),e(uQ,d_r),e(F9,c_r),e(Me,f_r),e(Me,T9),e(T9,Ibe),e(Ibe,m_r),e(T9,g_r),e(T9,bQ),e(bQ,h_r),e(T9,p_r),e(Me,__r),e(Me,M9),e(M9,qbe),e(qbe,u_r),e(M9,b_r),e(M9,vQ),e(vQ,v_r),e(M9,F_r),e(Me,T_r),e(Me,E9),e(E9,Nbe),e(Nbe,M_r),e(E9,E_r),e(E9,FQ),e(FQ,C_r),e(E9,w_r),e(yr,A_r),M(C9,yr,null),b(f,ANe,u),b(f,Ud,u),e(Ud,w9),e(w9,jbe),M(hL,jbe,null),e(Ud,y_r),e(Ud,Dbe),e(Dbe,L_r),b(f,yNe,u),b(f,er,u),M(pL,er,null),e(er,x_r),e(er,Jd),e(Jd,$_r),e(Jd,TQ),e(TQ,k_r),e(Jd,S_r),e(Jd,MQ),e(MQ,R_r),e(Jd,P_r),e(er,B_r),e(er,_L),e(_L,I_r),e(_L,Gbe),e(Gbe,q_r),e(_L,N_r),e(er,j_r),e(er,$t),M(uL,$t,null),e($t,D_r),e($t,Obe),e(Obe,G_r),e($t,O_r),e($t,Yd),e(Yd,V_r),e(Yd,Vbe),e(Vbe,X_r),e(Yd,z_r),e(Yd,EQ),e(EQ,W_r),e(Yd,Q_r),e($t,H_r),M(A9,$t,null),e(er,U_r),e(er,Lr),M(bL,Lr,null),e(Lr,J_r),e(Lr,Xbe),e(Xbe,Y_r),e(Lr,K_r),e(Lr,on),e(on,Z_r),e(on,zbe),e(zbe,eur),e(on,our),e(on,Wbe),e(Wbe,rur),e(on,tur),e(on,Qbe),e(Qbe,aur),e(on,nur),e(Lr,sur),e(Lr,rn),e(rn,y9),e(y9,Hbe),e(Hbe,lur),e(y9,iur),e(y9,CQ),e(CQ,dur),e(y9,cur),e(rn,fur),e(rn,L9),e(L9,Ube),e(Ube,mur),e(L9,gur),e(L9,wQ),e(wQ,hur),e(L9,pur),e(rn,_ur),e(rn,x9),e(x9,Jbe),e(Jbe,uur),e(x9,bur),e(x9,AQ),e(AQ,vur),e(x9,Fur),e(rn,Tur),e(rn,$9),e($9,Ybe),e(Ybe,Mur),e($9,Eur),e($9,yQ),e(yQ,Cur),e($9,wur),e(Lr,Aur),M(k9,Lr,null),b(f,LNe,u),b(f,Kd,u),e(Kd,S9),e(S9,Kbe),M(vL,Kbe,null),e(Kd,yur),e(Kd,Zbe),e(Zbe,Lur),b(f,xNe,u),b(f,or,u),M(FL,or,null),e(or,xur),e(or,Zd),e(Zd,$ur),e(Zd,LQ),e(LQ,kur),e(Zd,Sur),e(Zd,xQ),e(xQ,Rur),e(Zd,Pur),e(or,Bur),e(or,TL),e(TL,Iur),e(TL,e2e),e(e2e,qur),e(TL,Nur),e(or,jur),e(or,kt),M(ML,kt,null),e(kt,Dur),e(kt,o2e),e(o2e,Gur),e(kt,Our),e(kt,ec),e(ec,Vur),e(ec,r2e),e(r2e,Xur),e(ec,zur),e(ec,$Q),e($Q,Wur),e(ec,Qur),e(kt,Hur),M(R9,kt,null),e(or,Uur),e(or,xr),M(EL,xr,null),e(xr,Jur),e(xr,t2e),e(t2e,Yur),e(xr,Kur),e(xr,tn),e(tn,Zur),e(tn,a2e),e(a2e,e6r),e(tn,o6r),e(tn,n2e),e(n2e,r6r),e(tn,t6r),e(tn,s2e),e(s2e,a6r),e(tn,n6r),e(xr,s6r),e(xr,ie),e(ie,P9),e(P9,l2e),e(l2e,l6r),e(P9,i6r),e(P9,kQ),e(kQ,d6r),e(P9,c6r),e(ie,f6r),e(ie,B9),e(B9,i2e),e(i2e,m6r),e(B9,g6r),e(B9,SQ),e(SQ,h6r),e(B9,p6r),e(ie,_6r),e(ie,I9),e(I9,d2e),e(d2e,u6r),e(I9,b6r),e(I9,RQ),e(RQ,v6r),e(I9,F6r),e(ie,T6r),e(ie,q9),e(q9,c2e),e(c2e,M6r),e(q9,E6r),e(q9,PQ),e(PQ,C6r),e(q9,w6r),e(ie,A6r),e(ie,N9),e(N9,f2e),e(f2e,y6r),e(N9,L6r),e(N9,BQ),e(BQ,x6r),e(N9,$6r),e(ie,k6r),e(ie,j9),e(j9,m2e),e(m2e,S6r),e(j9,R6r),e(j9,IQ),e(IQ,P6r),e(j9,B6r),e(ie,I6r),e(ie,D9),e(D9,g2e),e(g2e,q6r),e(D9,N6r),e(D9,qQ),e(qQ,j6r),e(D9,D6r),e(ie,G6r),e(ie,G9),e(G9,h2e),e(h2e,O6r),e(G9,V6r),e(G9,NQ),e(NQ,X6r),e(G9,z6r),e(ie,W6r),e(ie,O9),e(O9,p2e),e(p2e,Q6r),e(O9,H6r),e(O9,jQ),e(jQ,U6r),e(O9,J6r),e(ie,Y6r),e(ie,V9),e(V9,_2e),e(_2e,K6r),e(V9,Z6r),e(V9,DQ),e(DQ,e1r),e(V9,o1r),e(ie,r1r),e(ie,X9),e(X9,u2e),e(u2e,t1r),e(X9,a1r),e(X9,GQ),e(GQ,n1r),e(X9,s1r),e(ie,l1r),e(ie,z9),e(z9,b2e),e(b2e,i1r),e(z9,d1r),e(z9,OQ),e(OQ,c1r),e(z9,f1r),e(ie,m1r),e(ie,W9),e(W9,v2e),e(v2e,g1r),e(W9,h1r),e(W9,VQ),e(VQ,p1r),e(W9,_1r),e(ie,u1r),e(ie,Q9),e(Q9,F2e),e(F2e,b1r),e(Q9,v1r),e(Q9,XQ),e(XQ,F1r),e(Q9,T1r),e(ie,M1r),e(ie,H9),e(H9,T2e),e(T2e,E1r),e(H9,C1r),e(H9,zQ),e(zQ,w1r),e(H9,A1r),e(ie,y1r),e(ie,U9),e(U9,M2e),e(M2e,L1r),e(U9,x1r),e(U9,WQ),e(WQ,$1r),e(U9,k1r),e(ie,S1r),e(ie,J9),e(J9,E2e),e(E2e,R1r),e(J9,P1r),e(J9,QQ),e(QQ,B1r),e(J9,I1r),e(ie,q1r),e(ie,Y9),e(Y9,C2e),e(C2e,N1r),e(Y9,j1r),e(Y9,HQ),e(HQ,D1r),e(Y9,G1r),e(ie,O1r),e(ie,K9),e(K9,w2e),e(w2e,V1r),e(K9,X1r),e(K9,UQ),e(UQ,z1r),e(K9,W1r),e(ie,Q1r),e(ie,Z9),e(Z9,A2e),e(A2e,H1r),e(Z9,U1r),e(Z9,JQ),e(JQ,J1r),e(Z9,Y1r),e(xr,K1r),M(eM,xr,null),b(f,$Ne,u),b(f,oc,u),e(oc,oM),e(oM,y2e),M(CL,y2e,null),e(oc,Z1r),e(oc,L2e),e(L2e,ebr),b(f,kNe,u),b(f,rr,u),M(wL,rr,null),e(rr,obr),e(rr,rc),e(rc,rbr),e(rc,YQ),e(YQ,tbr),e(rc,abr),e(rc,KQ),e(KQ,nbr),e(rc,sbr),e(rr,lbr),e(rr,AL),e(AL,ibr),e(AL,x2e),e(x2e,dbr),e(AL,cbr),e(rr,fbr),e(rr,St),M(yL,St,null),e(St,mbr),e(St,$2e),e($2e,gbr),e(St,hbr),e(St,tc),e(tc,pbr),e(tc,k2e),e(k2e,_br),e(tc,ubr),e(tc,ZQ),e(ZQ,bbr),e(tc,vbr),e(St,Fbr),M(rM,St,null),e(rr,Tbr),e(rr,$r),M(LL,$r,null),e($r,Mbr),e($r,S2e),e(S2e,Ebr),e($r,Cbr),e($r,an),e(an,wbr),e(an,R2e),e(R2e,Abr),e(an,ybr),e(an,P2e),e(P2e,Lbr),e(an,xbr),e(an,B2e),e(B2e,$br),e(an,kbr),e($r,Sbr),e($r,ye),e(ye,tM),e(tM,I2e),e(I2e,Rbr),e(tM,Pbr),e(tM,eH),e(eH,Bbr),e(tM,Ibr),e(ye,qbr),e(ye,aM),e(aM,q2e),e(q2e,Nbr),e(aM,jbr),e(aM,oH),e(oH,Dbr),e(aM,Gbr),e(ye,Obr),e(ye,nM),e(nM,N2e),e(N2e,Vbr),e(nM,Xbr),e(nM,rH),e(rH,zbr),e(nM,Wbr),e(ye,Qbr),e(ye,sM),e(sM,j2e),e(j2e,Hbr),e(sM,Ubr),e(sM,tH),e(tH,Jbr),e(sM,Ybr),e(ye,Kbr),e(ye,lM),e(lM,D2e),e(D2e,Zbr),e(lM,e2r),e(lM,aH),e(aH,o2r),e(lM,r2r),e(ye,t2r),e(ye,iM),e(iM,G2e),e(G2e,a2r),e(iM,n2r),e(iM,nH),e(nH,s2r),e(iM,l2r),e(ye,i2r),e(ye,dM),e(dM,O2e),e(O2e,d2r),e(dM,c2r),e(dM,sH),e(sH,f2r),e(dM,m2r),e(ye,g2r),e(ye,cM),e(cM,V2e),e(V2e,h2r),e(cM,p2r),e(cM,lH),e(lH,_2r),e(cM,u2r),e(ye,b2r),e(ye,fM),e(fM,X2e),e(X2e,v2r),e(fM,F2r),e(fM,iH),e(iH,T2r),e(fM,M2r),e(ye,E2r),e(ye,mM),e(mM,z2e),e(z2e,C2r),e(mM,w2r),e(mM,dH),e(dH,A2r),e(mM,y2r),e($r,L2r),M(gM,$r,null),b(f,SNe,u),b(f,ac,u),e(ac,hM),e(hM,W2e),M(xL,W2e,null),e(ac,x2r),e(ac,Q2e),e(Q2e,$2r),b(f,RNe,u),b(f,tr,u),M($L,tr,null),e(tr,k2r),e(tr,nc),e(nc,S2r),e(nc,cH),e(cH,R2r),e(nc,P2r),e(nc,fH),e(fH,B2r),e(nc,I2r),e(tr,q2r),e(tr,kL),e(kL,N2r),e(kL,H2e),e(H2e,j2r),e(kL,D2r),e(tr,G2r),e(tr,Rt),M(SL,Rt,null),e(Rt,O2r),e(Rt,U2e),e(U2e,V2r),e(Rt,X2r),e(Rt,sc),e(sc,z2r),e(sc,J2e),e(J2e,W2r),e(sc,Q2r),e(sc,mH),e(mH,H2r),e(sc,U2r),e(Rt,J2r),M(pM,Rt,null),e(tr,Y2r),e(tr,kr),M(RL,kr,null),e(kr,K2r),e(kr,Y2e),e(Y2e,Z2r),e(kr,e5r),e(kr,nn),e(nn,o5r),e(nn,K2e),e(K2e,r5r),e(nn,t5r),e(nn,Z2e),e(Z2e,a5r),e(nn,n5r),e(nn,e5e),e(e5e,s5r),e(nn,l5r),e(kr,i5r),e(kr,ee),e(ee,_M),e(_M,o5e),e(o5e,d5r),e(_M,c5r),e(_M,gH),e(gH,f5r),e(_M,m5r),e(ee,g5r),e(ee,uM),e(uM,r5e),e(r5e,h5r),e(uM,p5r),e(uM,hH),e(hH,_5r),e(uM,u5r),e(ee,b5r),e(ee,bM),e(bM,t5e),e(t5e,v5r),e(bM,F5r),e(bM,pH),e(pH,T5r),e(bM,M5r),e(ee,E5r),e(ee,vM),e(vM,a5e),e(a5e,C5r),e(vM,w5r),e(vM,_H),e(_H,A5r),e(vM,y5r),e(ee,L5r),e(ee,FM),e(FM,n5e),e(n5e,x5r),e(FM,$5r),e(FM,uH),e(uH,k5r),e(FM,S5r),e(ee,R5r),e(ee,TM),e(TM,s5e),e(s5e,P5r),e(TM,B5r),e(TM,bH),e(bH,I5r),e(TM,q5r),e(ee,N5r),e(ee,MM),e(MM,l5e),e(l5e,j5r),e(MM,D5r),e(MM,vH),e(vH,G5r),e(MM,O5r),e(ee,V5r),e(ee,EM),e(EM,i5e),e(i5e,X5r),e(EM,z5r),e(EM,FH),e(FH,W5r),e(EM,Q5r),e(ee,H5r),e(ee,CM),e(CM,d5e),e(d5e,U5r),e(CM,J5r),e(CM,TH),e(TH,Y5r),e(CM,K5r),e(ee,Z5r),e(ee,wM),e(wM,c5e),e(c5e,evr),e(wM,ovr),e(wM,MH),e(MH,rvr),e(wM,tvr),e(ee,avr),e(ee,AM),e(AM,f5e),e(f5e,nvr),e(AM,svr),e(AM,EH),e(EH,lvr),e(AM,ivr),e(ee,dvr),e(ee,yM),e(yM,m5e),e(m5e,cvr),e(yM,fvr),e(yM,CH),e(CH,mvr),e(yM,gvr),e(ee,hvr),e(ee,LM),e(LM,g5e),e(g5e,pvr),e(LM,_vr),e(LM,wH),e(wH,uvr),e(LM,bvr),e(ee,vvr),e(ee,xM),e(xM,h5e),e(h5e,Fvr),e(xM,Tvr),e(xM,AH),e(AH,Mvr),e(xM,Evr),e(ee,Cvr),e(ee,$M),e($M,p5e),e(p5e,wvr),e($M,Avr),e($M,yH),e(yH,yvr),e($M,Lvr),e(ee,xvr),e(ee,kM),e(kM,_5e),e(_5e,$vr),e(kM,kvr),e(kM,LH),e(LH,Svr),e(kM,Rvr),e(ee,Pvr),e(ee,SM),e(SM,u5e),e(u5e,Bvr),e(SM,Ivr),e(SM,xH),e(xH,qvr),e(SM,Nvr),e(ee,jvr),e(ee,RM),e(RM,b5e),e(b5e,Dvr),e(RM,Gvr),e(RM,$H),e($H,Ovr),e(RM,Vvr),e(ee,Xvr),e(ee,PM),e(PM,v5e),e(v5e,zvr),e(PM,Wvr),e(PM,kH),e(kH,Qvr),e(PM,Hvr),e(ee,Uvr),e(ee,BM),e(BM,F5e),e(F5e,Jvr),e(BM,Yvr),e(BM,SH),e(SH,Kvr),e(BM,Zvr),e(ee,eFr),e(ee,IM),e(IM,T5e),e(T5e,oFr),e(IM,rFr),e(IM,RH),e(RH,tFr),e(IM,aFr),e(ee,nFr),e(ee,qM),e(qM,M5e),e(M5e,sFr),e(qM,lFr),e(qM,PH),e(PH,iFr),e(qM,dFr),e(ee,cFr),e(ee,NM),e(NM,E5e),e(E5e,fFr),e(NM,mFr),e(NM,BH),e(BH,gFr),e(NM,hFr),e(ee,pFr),e(ee,jM),e(jM,C5e),e(C5e,_Fr),e(jM,uFr),e(jM,IH),e(IH,bFr),e(jM,vFr),e(ee,FFr),e(ee,DM),e(DM,w5e),e(w5e,TFr),e(DM,MFr),e(DM,qH),e(qH,EFr),e(DM,CFr),e(ee,wFr),e(ee,GM),e(GM,A5e),e(A5e,AFr),e(GM,yFr),e(GM,NH),e(NH,LFr),e(GM,xFr),e(kr,$Fr),M(OM,kr,null),b(f,PNe,u),b(f,lc,u),e(lc,VM),e(VM,y5e),M(PL,y5e,null),e(lc,kFr),e(lc,L5e),e(L5e,SFr),b(f,BNe,u),b(f,ar,u),M(BL,ar,null),e(ar,RFr),e(ar,ic),e(ic,PFr),e(ic,jH),e(jH,BFr),e(ic,IFr),e(ic,DH),e(DH,qFr),e(ic,NFr),e(ar,jFr),e(ar,IL),e(IL,DFr),e(IL,x5e),e(x5e,GFr),e(IL,OFr),e(ar,VFr),e(ar,Pt),M(qL,Pt,null),e(Pt,XFr),e(Pt,$5e),e($5e,zFr),e(Pt,WFr),e(Pt,dc),e(dc,QFr),e(dc,k5e),e(k5e,HFr),e(dc,UFr),e(dc,GH),e(GH,JFr),e(dc,YFr),e(Pt,KFr),M(XM,Pt,null),e(ar,ZFr),e(ar,Sr),M(NL,Sr,null),e(Sr,eTr),e(Sr,S5e),e(S5e,oTr),e(Sr,rTr),e(Sr,sn),e(sn,tTr),e(sn,R5e),e(R5e,aTr),e(sn,nTr),e(sn,P5e),e(P5e,sTr),e(sn,lTr),e(sn,B5e),e(B5e,iTr),e(sn,dTr),e(Sr,cTr),e(Sr,he),e(he,zM),e(zM,I5e),e(I5e,fTr),e(zM,mTr),e(zM,OH),e(OH,gTr),e(zM,hTr),e(he,pTr),e(he,WM),e(WM,q5e),e(q5e,_Tr),e(WM,uTr),e(WM,VH),e(VH,bTr),e(WM,vTr),e(he,FTr),e(he,QM),e(QM,N5e),e(N5e,TTr),e(QM,MTr),e(QM,XH),e(XH,ETr),e(QM,CTr),e(he,wTr),e(he,HM),e(HM,j5e),e(j5e,ATr),e(HM,yTr),e(HM,zH),e(zH,LTr),e(HM,xTr),e(he,$Tr),e(he,UM),e(UM,D5e),e(D5e,kTr),e(UM,STr),e(UM,WH),e(WH,RTr),e(UM,PTr),e(he,BTr),e(he,JM),e(JM,G5e),e(G5e,ITr),e(JM,qTr),e(JM,QH),e(QH,NTr),e(JM,jTr),e(he,DTr),e(he,YM),e(YM,O5e),e(O5e,GTr),e(YM,OTr),e(YM,HH),e(HH,VTr),e(YM,XTr),e(he,zTr),e(he,KM),e(KM,V5e),e(V5e,WTr),e(KM,QTr),e(KM,UH),e(UH,HTr),e(KM,UTr),e(he,JTr),e(he,ZM),e(ZM,X5e),e(X5e,YTr),e(ZM,KTr),e(ZM,JH),e(JH,ZTr),e(ZM,e9r),e(he,o9r),e(he,e4),e(e4,z5e),e(z5e,r9r),e(e4,t9r),e(e4,YH),e(YH,a9r),e(e4,n9r),e(he,s9r),e(he,o4),e(o4,W5e),e(W5e,l9r),e(o4,i9r),e(o4,KH),e(KH,d9r),e(o4,c9r),e(he,f9r),e(he,r4),e(r4,Q5e),e(Q5e,m9r),e(r4,g9r),e(r4,ZH),e(ZH,h9r),e(r4,p9r),e(he,_9r),e(he,t4),e(t4,H5e),e(H5e,u9r),e(t4,b9r),e(t4,eU),e(eU,v9r),e(t4,F9r),e(he,T9r),e(he,a4),e(a4,U5e),e(U5e,M9r),e(a4,E9r),e(a4,oU),e(oU,C9r),e(a4,w9r),e(he,A9r),e(he,n4),e(n4,J5e),e(J5e,y9r),e(n4,L9r),e(n4,rU),e(rU,x9r),e(n4,$9r),e(he,k9r),e(he,s4),e(s4,Y5e),e(Y5e,S9r),e(s4,R9r),e(s4,tU),e(tU,P9r),e(s4,B9r),e(he,I9r),e(he,l4),e(l4,K5e),e(K5e,q9r),e(l4,N9r),e(l4,aU),e(aU,j9r),e(l4,D9r),e(Sr,G9r),M(i4,Sr,null),b(f,INe,u),b(f,cc,u),e(cc,d4),e(d4,Z5e),M(jL,Z5e,null),e(cc,O9r),e(cc,eve),e(eve,V9r),b(f,qNe,u),b(f,nr,u),M(DL,nr,null),e(nr,X9r),e(nr,fc),e(fc,z9r),e(fc,nU),e(nU,W9r),e(fc,Q9r),e(fc,sU),e(sU,H9r),e(fc,U9r),e(nr,J9r),e(nr,GL),e(GL,Y9r),e(GL,ove),e(ove,K9r),e(GL,Z9r),e(nr,eMr),e(nr,Bt),M(OL,Bt,null),e(Bt,oMr),e(Bt,rve),e(rve,rMr),e(Bt,tMr),e(Bt,mc),e(mc,aMr),e(mc,tve),e(tve,nMr),e(mc,sMr),e(mc,lU),e(lU,lMr),e(mc,iMr),e(Bt,dMr),M(c4,Bt,null),e(nr,cMr),e(nr,Rr),M(VL,Rr,null),e(Rr,fMr),e(Rr,ave),e(ave,mMr),e(Rr,gMr),e(Rr,ln),e(ln,hMr),e(ln,nve),e(nve,pMr),e(ln,_Mr),e(ln,sve),e(sve,uMr),e(ln,bMr),e(ln,lve),e(lve,vMr),e(ln,FMr),e(Rr,TMr),e(Rr,XL),e(XL,f4),e(f4,ive),e(ive,MMr),e(f4,EMr),e(f4,iU),e(iU,CMr),e(f4,wMr),e(XL,AMr),e(XL,m4),e(m4,dve),e(dve,yMr),e(m4,LMr),e(m4,dU),e(dU,xMr),e(m4,$Mr),e(Rr,kMr),M(g4,Rr,null),b(f,NNe,u),b(f,gc,u),e(gc,h4),e(h4,cve),M(zL,cve,null),e(gc,SMr),e(gc,fve),e(fve,RMr),b(f,jNe,u),b(f,sr,u),M(WL,sr,null),e(sr,PMr),e(sr,hc),e(hc,BMr),e(hc,cU),e(cU,IMr),e(hc,qMr),e(hc,fU),e(fU,NMr),e(hc,jMr),e(sr,DMr),e(sr,QL),e(QL,GMr),e(QL,mve),e(mve,OMr),e(QL,VMr),e(sr,XMr),e(sr,It),M(HL,It,null),e(It,zMr),e(It,gve),e(gve,WMr),e(It,QMr),e(It,pc),e(pc,HMr),e(pc,hve),e(hve,UMr),e(pc,JMr),e(pc,mU),e(mU,YMr),e(pc,KMr),e(It,ZMr),M(p4,It,null),e(sr,e4r),e(sr,Pr),M(UL,Pr,null),e(Pr,o4r),e(Pr,pve),e(pve,r4r),e(Pr,t4r),e(Pr,dn),e(dn,a4r),e(dn,_ve),e(_ve,n4r),e(dn,s4r),e(dn,uve),e(uve,l4r),e(dn,i4r),e(dn,bve),e(bve,d4r),e(dn,c4r),e(Pr,f4r),e(Pr,vve),e(vve,_4),e(_4,Fve),e(Fve,m4r),e(_4,g4r),e(_4,gU),e(gU,h4r),e(_4,p4r),e(Pr,_4r),M(u4,Pr,null),b(f,DNe,u),b(f,_c,u),e(_c,b4),e(b4,Tve),M(JL,Tve,null),e(_c,u4r),e(_c,Mve),e(Mve,b4r),b(f,GNe,u),b(f,lr,u),M(YL,lr,null),e(lr,v4r),e(lr,uc),e(uc,F4r),e(uc,hU),e(hU,T4r),e(uc,M4r),e(uc,pU),e(pU,E4r),e(uc,C4r),e(lr,w4r),e(lr,KL),e(KL,A4r),e(KL,Eve),e(Eve,y4r),e(KL,L4r),e(lr,x4r),e(lr,qt),M(ZL,qt,null),e(qt,$4r),e(qt,Cve),e(Cve,k4r),e(qt,S4r),e(qt,bc),e(bc,R4r),e(bc,wve),e(wve,P4r),e(bc,B4r),e(bc,_U),e(_U,I4r),e(bc,q4r),e(qt,N4r),M(v4,qt,null),e(lr,j4r),e(lr,Br),M(e7,Br,null),e(Br,D4r),e(Br,Ave),e(Ave,G4r),e(Br,O4r),e(Br,cn),e(cn,V4r),e(cn,yve),e(yve,X4r),e(cn,z4r),e(cn,Lve),e(Lve,W4r),e(cn,Q4r),e(cn,xve),e(xve,H4r),e(cn,U4r),e(Br,J4r),e(Br,de),e(de,F4),e(F4,$ve),e($ve,Y4r),e(F4,K4r),e(F4,uU),e(uU,Z4r),e(F4,eEr),e(de,oEr),e(de,T4),e(T4,kve),e(kve,rEr),e(T4,tEr),e(T4,bU),e(bU,aEr),e(T4,nEr),e(de,sEr),e(de,M4),e(M4,Sve),e(Sve,lEr),e(M4,iEr),e(M4,vU),e(vU,dEr),e(M4,cEr),e(de,fEr),e(de,E4),e(E4,Rve),e(Rve,mEr),e(E4,gEr),e(E4,FU),e(FU,hEr),e(E4,pEr),e(de,_Er),e(de,C4),e(C4,Pve),e(Pve,uEr),e(C4,bEr),e(C4,TU),e(TU,vEr),e(C4,FEr),e(de,TEr),e(de,w4),e(w4,Bve),e(Bve,MEr),e(w4,EEr),e(w4,MU),e(MU,CEr),e(w4,wEr),e(de,AEr),e(de,A4),e(A4,Ive),e(Ive,yEr),e(A4,LEr),e(A4,EU),e(EU,xEr),e(A4,$Er),e(de,kEr),e(de,y4),e(y4,qve),e(qve,SEr),e(y4,REr),e(y4,CU),e(CU,PEr),e(y4,BEr),e(de,IEr),e(de,L4),e(L4,Nve),e(Nve,qEr),e(L4,NEr),e(L4,wU),e(wU,jEr),e(L4,DEr),e(de,GEr),e(de,x4),e(x4,jve),e(jve,OEr),e(x4,VEr),e(x4,AU),e(AU,XEr),e(x4,zEr),e(de,WEr),e(de,$4),e($4,Dve),e(Dve,QEr),e($4,HEr),e($4,yU),e(yU,UEr),e($4,JEr),e(de,YEr),e(de,k4),e(k4,Gve),e(Gve,KEr),e(k4,ZEr),e(k4,LU),e(LU,eCr),e(k4,oCr),e(de,rCr),e(de,S4),e(S4,Ove),e(Ove,tCr),e(S4,aCr),e(S4,xU),e(xU,nCr),e(S4,sCr),e(de,lCr),e(de,R4),e(R4,Vve),e(Vve,iCr),e(R4,dCr),e(R4,$U),e($U,cCr),e(R4,fCr),e(de,mCr),e(de,P4),e(P4,Xve),e(Xve,gCr),e(P4,hCr),e(P4,kU),e(kU,pCr),e(P4,_Cr),e(de,uCr),e(de,B4),e(B4,zve),e(zve,bCr),e(B4,vCr),e(B4,SU),e(SU,FCr),e(B4,TCr),e(de,MCr),e(de,I4),e(I4,Wve),e(Wve,ECr),e(I4,CCr),e(I4,RU),e(RU,wCr),e(I4,ACr),e(de,yCr),e(de,q4),e(q4,Qve),e(Qve,LCr),e(q4,xCr),e(q4,PU),e(PU,$Cr),e(q4,kCr),e(de,SCr),e(de,N4),e(N4,Hve),e(Hve,RCr),e(N4,PCr),e(N4,BU),e(BU,BCr),e(N4,ICr),e(de,qCr),e(de,j4),e(j4,Uve),e(Uve,NCr),e(j4,jCr),e(j4,IU),e(IU,DCr),e(j4,GCr),e(Br,OCr),M(D4,Br,null),b(f,ONe,u),b(f,vc,u),e(vc,G4),e(G4,Jve),M(o7,Jve,null),e(vc,VCr),e(vc,Yve),e(Yve,XCr),b(f,VNe,u),b(f,ir,u),M(r7,ir,null),e(ir,zCr),e(ir,Fc),e(Fc,WCr),e(Fc,qU),e(qU,QCr),e(Fc,HCr),e(Fc,NU),e(NU,UCr),e(Fc,JCr),e(ir,YCr),e(ir,t7),e(t7,KCr),e(t7,Kve),e(Kve,ZCr),e(t7,e3r),e(ir,o3r),e(ir,Nt),M(a7,Nt,null),e(Nt,r3r),e(Nt,Zve),e(Zve,t3r),e(Nt,a3r),e(Nt,Tc),e(Tc,n3r),e(Tc,eFe),e(eFe,s3r),e(Tc,l3r),e(Tc,jU),e(jU,i3r),e(Tc,d3r),e(Nt,c3r),M(O4,Nt,null),e(ir,f3r),e(ir,Ir),M(n7,Ir,null),e(Ir,m3r),e(Ir,oFe),e(oFe,g3r),e(Ir,h3r),e(Ir,fn),e(fn,p3r),e(fn,rFe),e(rFe,_3r),e(fn,u3r),e(fn,tFe),e(tFe,b3r),e(fn,v3r),e(fn,aFe),e(aFe,F3r),e(fn,T3r),e(Ir,M3r),e(Ir,ce),e(ce,V4),e(V4,nFe),e(nFe,E3r),e(V4,C3r),e(V4,DU),e(DU,w3r),e(V4,A3r),e(ce,y3r),e(ce,X4),e(X4,sFe),e(sFe,L3r),e(X4,x3r),e(X4,GU),e(GU,$3r),e(X4,k3r),e(ce,S3r),e(ce,z4),e(z4,lFe),e(lFe,R3r),e(z4,P3r),e(z4,OU),e(OU,B3r),e(z4,I3r),e(ce,q3r),e(ce,W4),e(W4,iFe),e(iFe,N3r),e(W4,j3r),e(W4,VU),e(VU,D3r),e(W4,G3r),e(ce,O3r),e(ce,Q4),e(Q4,dFe),e(dFe,V3r),e(Q4,X3r),e(Q4,XU),e(XU,z3r),e(Q4,W3r),e(ce,Q3r),e(ce,H4),e(H4,cFe),e(cFe,H3r),e(H4,U3r),e(H4,zU),e(zU,J3r),e(H4,Y3r),e(ce,K3r),e(ce,U4),e(U4,fFe),e(fFe,Z3r),e(U4,ewr),e(U4,WU),e(WU,owr),e(U4,rwr),e(ce,twr),e(ce,J4),e(J4,mFe),e(mFe,awr),e(J4,nwr),e(J4,QU),e(QU,swr),e(J4,lwr),e(ce,iwr),e(ce,Y4),e(Y4,gFe),e(gFe,dwr),e(Y4,cwr),e(Y4,HU),e(HU,fwr),e(Y4,mwr),e(ce,gwr),e(ce,K4),e(K4,hFe),e(hFe,hwr),e(K4,pwr),e(K4,UU),e(UU,_wr),e(K4,uwr),e(ce,bwr),e(ce,Z4),e(Z4,pFe),e(pFe,vwr),e(Z4,Fwr),e(Z4,JU),e(JU,Twr),e(Z4,Mwr),e(ce,Ewr),e(ce,eE),e(eE,_Fe),e(_Fe,Cwr),e(eE,wwr),e(eE,YU),e(YU,Awr),e(eE,ywr),e(ce,Lwr),e(ce,oE),e(oE,uFe),e(uFe,xwr),e(oE,$wr),e(oE,KU),e(KU,kwr),e(oE,Swr),e(ce,Rwr),e(ce,rE),e(rE,bFe),e(bFe,Pwr),e(rE,Bwr),e(rE,ZU),e(ZU,Iwr),e(rE,qwr),e(ce,Nwr),e(ce,tE),e(tE,vFe),e(vFe,jwr),e(tE,Dwr),e(tE,eJ),e(eJ,Gwr),e(tE,Owr),e(ce,Vwr),e(ce,aE),e(aE,FFe),e(FFe,Xwr),e(aE,zwr),e(aE,oJ),e(oJ,Wwr),e(aE,Qwr),e(ce,Hwr),e(ce,nE),e(nE,TFe),e(TFe,Uwr),e(nE,Jwr),e(nE,rJ),e(rJ,Ywr),e(nE,Kwr),e(ce,Zwr),e(ce,sE),e(sE,MFe),e(MFe,e0r),e(sE,o0r),e(sE,tJ),e(tJ,r0r),e(sE,t0r),e(ce,a0r),e(ce,lE),e(lE,EFe),e(EFe,n0r),e(lE,s0r),e(lE,aJ),e(aJ,l0r),e(lE,i0r),e(ce,d0r),e(ce,iE),e(iE,CFe),e(CFe,c0r),e(iE,f0r),e(iE,nJ),e(nJ,m0r),e(iE,g0r),e(Ir,h0r),M(dE,Ir,null),b(f,XNe,u),b(f,Mc,u),e(Mc,cE),e(cE,wFe),M(s7,wFe,null),e(Mc,p0r),e(Mc,AFe),e(AFe,_0r),b(f,zNe,u),b(f,dr,u),M(l7,dr,null),e(dr,u0r),e(dr,Ec),e(Ec,b0r),e(Ec,sJ),e(sJ,v0r),e(Ec,F0r),e(Ec,lJ),e(lJ,T0r),e(Ec,M0r),e(dr,E0r),e(dr,i7),e(i7,C0r),e(i7,yFe),e(yFe,w0r),e(i7,A0r),e(dr,y0r),e(dr,jt),M(d7,jt,null),e(jt,L0r),e(jt,LFe),e(LFe,x0r),e(jt,$0r),e(jt,Cc),e(Cc,k0r),e(Cc,xFe),e(xFe,S0r),e(Cc,R0r),e(Cc,iJ),e(iJ,P0r),e(Cc,B0r),e(jt,I0r),M(fE,jt,null),e(dr,q0r),e(dr,qr),M(c7,qr,null),e(qr,N0r),e(qr,$Fe),e($Fe,j0r),e(qr,D0r),e(qr,mn),e(mn,G0r),e(mn,kFe),e(kFe,O0r),e(mn,V0r),e(mn,SFe),e(SFe,X0r),e(mn,z0r),e(mn,RFe),e(RFe,W0r),e(mn,Q0r),e(qr,H0r),e(qr,PFe),e(PFe,mE),e(mE,BFe),e(BFe,U0r),e(mE,J0r),e(mE,dJ),e(dJ,Y0r),e(mE,K0r),e(qr,Z0r),M(gE,qr,null),b(f,WNe,u),b(f,wc,u),e(wc,hE),e(hE,IFe),M(f7,IFe,null),e(wc,eAr),e(wc,qFe),e(qFe,oAr),b(f,QNe,u),b(f,cr,u),M(m7,cr,null),e(cr,rAr),e(cr,Ac),e(Ac,tAr),e(Ac,cJ),e(cJ,aAr),e(Ac,nAr),e(Ac,fJ),e(fJ,sAr),e(Ac,lAr),e(cr,iAr),e(cr,g7),e(g7,dAr),e(g7,NFe),e(NFe,cAr),e(g7,fAr),e(cr,mAr),e(cr,Dt),M(h7,Dt,null),e(Dt,gAr),e(Dt,jFe),e(jFe,hAr),e(Dt,pAr),e(Dt,yc),e(yc,_Ar),e(yc,DFe),e(DFe,uAr),e(yc,bAr),e(yc,mJ),e(mJ,vAr),e(yc,FAr),e(Dt,TAr),M(pE,Dt,null),e(cr,MAr),e(cr,Nr),M(p7,Nr,null),e(Nr,EAr),e(Nr,GFe),e(GFe,CAr),e(Nr,wAr),e(Nr,gn),e(gn,AAr),e(gn,OFe),e(OFe,yAr),e(gn,LAr),e(gn,VFe),e(VFe,xAr),e(gn,$Ar),e(gn,XFe),e(XFe,kAr),e(gn,SAr),e(Nr,RAr),e(Nr,zFe),e(zFe,_E),e(_E,WFe),e(WFe,PAr),e(_E,BAr),e(_E,gJ),e(gJ,IAr),e(_E,qAr),e(Nr,NAr),M(uE,Nr,null),b(f,HNe,u),b(f,Lc,u),e(Lc,bE),e(bE,QFe),M(_7,QFe,null),e(Lc,jAr),e(Lc,HFe),e(HFe,DAr),b(f,UNe,u),b(f,fr,u),M(u7,fr,null),e(fr,GAr),e(fr,xc),e(xc,OAr),e(xc,hJ),e(hJ,VAr),e(xc,XAr),e(xc,pJ),e(pJ,zAr),e(xc,WAr),e(fr,QAr),e(fr,b7),e(b7,HAr),e(b7,UFe),e(UFe,UAr),e(b7,JAr),e(fr,YAr),e(fr,Gt),M(v7,Gt,null),e(Gt,KAr),e(Gt,JFe),e(JFe,ZAr),e(Gt,eyr),e(Gt,$c),e($c,oyr),e($c,YFe),e(YFe,ryr),e($c,tyr),e($c,_J),e(_J,ayr),e($c,nyr),e(Gt,syr),M(vE,Gt,null),e(fr,lyr),e(fr,jr),M(F7,jr,null),e(jr,iyr),e(jr,KFe),e(KFe,dyr),e(jr,cyr),e(jr,hn),e(hn,fyr),e(hn,ZFe),e(ZFe,myr),e(hn,gyr),e(hn,eTe),e(eTe,hyr),e(hn,pyr),e(hn,oTe),e(oTe,_yr),e(hn,uyr),e(jr,byr),e(jr,te),e(te,FE),e(FE,rTe),e(rTe,vyr),e(FE,Fyr),e(FE,uJ),e(uJ,Tyr),e(FE,Myr),e(te,Eyr),e(te,TE),e(TE,tTe),e(tTe,Cyr),e(TE,wyr),e(TE,bJ),e(bJ,Ayr),e(TE,yyr),e(te,Lyr),e(te,ME),e(ME,aTe),e(aTe,xyr),e(ME,$yr),e(ME,vJ),e(vJ,kyr),e(ME,Syr),e(te,Ryr),e(te,EE),e(EE,nTe),e(nTe,Pyr),e(EE,Byr),e(EE,FJ),e(FJ,Iyr),e(EE,qyr),e(te,Nyr),e(te,CE),e(CE,sTe),e(sTe,jyr),e(CE,Dyr),e(CE,TJ),e(TJ,Gyr),e(CE,Oyr),e(te,Vyr),e(te,wE),e(wE,lTe),e(lTe,Xyr),e(wE,zyr),e(wE,MJ),e(MJ,Wyr),e(wE,Qyr),e(te,Hyr),e(te,AE),e(AE,iTe),e(iTe,Uyr),e(AE,Jyr),e(AE,EJ),e(EJ,Yyr),e(AE,Kyr),e(te,Zyr),e(te,yE),e(yE,dTe),e(dTe,e8r),e(yE,o8r),e(yE,CJ),e(CJ,r8r),e(yE,t8r),e(te,a8r),e(te,LE),e(LE,cTe),e(cTe,n8r),e(LE,s8r),e(LE,wJ),e(wJ,l8r),e(LE,i8r),e(te,d8r),e(te,xE),e(xE,fTe),e(fTe,c8r),e(xE,f8r),e(xE,AJ),e(AJ,m8r),e(xE,g8r),e(te,h8r),e(te,$E),e($E,mTe),e(mTe,p8r),e($E,_8r),e($E,yJ),e(yJ,u8r),e($E,b8r),e(te,v8r),e(te,kE),e(kE,gTe),e(gTe,F8r),e(kE,T8r),e(kE,LJ),e(LJ,M8r),e(kE,E8r),e(te,C8r),e(te,SE),e(SE,hTe),e(hTe,w8r),e(SE,A8r),e(SE,xJ),e(xJ,y8r),e(SE,L8r),e(te,x8r),e(te,RE),e(RE,pTe),e(pTe,$8r),e(RE,k8r),e(RE,$J),e($J,S8r),e(RE,R8r),e(te,P8r),e(te,PE),e(PE,_Te),e(_Te,B8r),e(PE,I8r),e(PE,kJ),e(kJ,q8r),e(PE,N8r),e(te,j8r),e(te,BE),e(BE,uTe),e(uTe,D8r),e(BE,G8r),e(BE,SJ),e(SJ,O8r),e(BE,V8r),e(te,X8r),e(te,IE),e(IE,bTe),e(bTe,z8r),e(IE,W8r),e(IE,RJ),e(RJ,Q8r),e(IE,H8r),e(te,U8r),e(te,qE),e(qE,vTe),e(vTe,J8r),e(qE,Y8r),e(qE,PJ),e(PJ,K8r),e(qE,Z8r),e(te,eLr),e(te,NE),e(NE,FTe),e(FTe,oLr),e(NE,rLr),e(NE,BJ),e(BJ,tLr),e(NE,aLr),e(te,nLr),e(te,jE),e(jE,TTe),e(TTe,sLr),e(jE,lLr),e(jE,IJ),e(IJ,iLr),e(jE,dLr),e(te,cLr),e(te,DE),e(DE,MTe),e(MTe,fLr),e(DE,mLr),e(DE,qJ),e(qJ,gLr),e(DE,hLr),e(te,pLr),e(te,GE),e(GE,ETe),e(ETe,_Lr),e(GE,uLr),e(GE,NJ),e(NJ,bLr),e(GE,vLr),e(te,FLr),e(te,OE),e(OE,CTe),e(CTe,TLr),e(OE,MLr),e(OE,jJ),e(jJ,ELr),e(OE,CLr),e(te,wLr),e(te,VE),e(VE,wTe),e(wTe,ALr),e(VE,yLr),e(VE,DJ),e(DJ,LLr),e(VE,xLr),e(te,$Lr),e(te,XE),e(XE,ATe),e(ATe,kLr),e(XE,SLr),e(XE,GJ),e(GJ,RLr),e(XE,PLr),e(jr,BLr),M(zE,jr,null),b(f,JNe,u),b(f,kc,u),e(kc,WE),e(WE,yTe),M(T7,yTe,null),e(kc,ILr),e(kc,LTe),e(LTe,qLr),b(f,YNe,u),b(f,mr,u),M(M7,mr,null),e(mr,NLr),e(mr,Sc),e(Sc,jLr),e(Sc,OJ),e(OJ,DLr),e(Sc,GLr),e(Sc,VJ),e(VJ,OLr),e(Sc,VLr),e(mr,XLr),e(mr,E7),e(E7,zLr),e(E7,xTe),e(xTe,WLr),e(E7,QLr),e(mr,HLr),e(mr,Ot),M(C7,Ot,null),e(Ot,ULr),e(Ot,$Te),e($Te,JLr),e(Ot,YLr),e(Ot,Rc),e(Rc,KLr),e(Rc,kTe),e(kTe,ZLr),e(Rc,e7r),e(Rc,XJ),e(XJ,o7r),e(Rc,r7r),e(Ot,t7r),M(QE,Ot,null),e(mr,a7r),e(mr,Dr),M(w7,Dr,null),e(Dr,n7r),e(Dr,STe),e(STe,s7r),e(Dr,l7r),e(Dr,pn),e(pn,i7r),e(pn,RTe),e(RTe,d7r),e(pn,c7r),e(pn,PTe),e(PTe,f7r),e(pn,m7r),e(pn,BTe),e(BTe,g7r),e(pn,h7r),e(Dr,p7r),e(Dr,Re),e(Re,HE),e(HE,ITe),e(ITe,_7r),e(HE,u7r),e(HE,zJ),e(zJ,b7r),e(HE,v7r),e(Re,F7r),e(Re,UE),e(UE,qTe),e(qTe,T7r),e(UE,M7r),e(UE,WJ),e(WJ,E7r),e(UE,C7r),e(Re,w7r),e(Re,JE),e(JE,NTe),e(NTe,A7r),e(JE,y7r),e(JE,QJ),e(QJ,L7r),e(JE,x7r),e(Re,$7r),e(Re,YE),e(YE,jTe),e(jTe,k7r),e(YE,S7r),e(YE,HJ),e(HJ,R7r),e(YE,P7r),e(Re,B7r),e(Re,KE),e(KE,DTe),e(DTe,I7r),e(KE,q7r),e(KE,UJ),e(UJ,N7r),e(KE,j7r),e(Re,D7r),e(Re,ZE),e(ZE,GTe),e(GTe,G7r),e(ZE,O7r),e(ZE,JJ),e(JJ,V7r),e(ZE,X7r),e(Re,z7r),e(Re,eC),e(eC,OTe),e(OTe,W7r),e(eC,Q7r),e(eC,YJ),e(YJ,H7r),e(eC,U7r),e(Re,J7r),e(Re,oC),e(oC,VTe),e(VTe,Y7r),e(oC,K7r),e(oC,KJ),e(KJ,Z7r),e(oC,exr),e(Re,oxr),e(Re,rC),e(rC,XTe),e(XTe,rxr),e(rC,txr),e(rC,ZJ),e(ZJ,axr),e(rC,nxr),e(Dr,sxr),M(tC,Dr,null),b(f,KNe,u),b(f,Pc,u),e(Pc,aC),e(aC,zTe),M(A7,zTe,null),e(Pc,lxr),e(Pc,WTe),e(WTe,ixr),b(f,ZNe,u),b(f,gr,u),M(y7,gr,null),e(gr,dxr),e(gr,Bc),e(Bc,cxr),e(Bc,eY),e(eY,fxr),e(Bc,mxr),e(Bc,oY),e(oY,gxr),e(Bc,hxr),e(gr,pxr),e(gr,L7),e(L7,_xr),e(L7,QTe),e(QTe,uxr),e(L7,bxr),e(gr,vxr),e(gr,Vt),M(x7,Vt,null),e(Vt,Fxr),e(Vt,HTe),e(HTe,Txr),e(Vt,Mxr),e(Vt,Ic),e(Ic,Exr),e(Ic,UTe),e(UTe,Cxr),e(Ic,wxr),e(Ic,rY),e(rY,Axr),e(Ic,yxr),e(Vt,Lxr),M(nC,Vt,null),e(gr,xxr),e(gr,Gr),M($7,Gr,null),e(Gr,$xr),e(Gr,JTe),e(JTe,kxr),e(Gr,Sxr),e(Gr,_n),e(_n,Rxr),e(_n,YTe),e(YTe,Pxr),e(_n,Bxr),e(_n,KTe),e(KTe,Ixr),e(_n,qxr),e(_n,ZTe),e(ZTe,Nxr),e(_n,jxr),e(Gr,Dxr),e(Gr,Ee),e(Ee,sC),e(sC,e9e),e(e9e,Gxr),e(sC,Oxr),e(sC,tY),e(tY,Vxr),e(sC,Xxr),e(Ee,zxr),e(Ee,lC),e(lC,o9e),e(o9e,Wxr),e(lC,Qxr),e(lC,aY),e(aY,Hxr),e(lC,Uxr),e(Ee,Jxr),e(Ee,iC),e(iC,r9e),e(r9e,Yxr),e(iC,Kxr),e(iC,nY),e(nY,Zxr),e(iC,e$r),e(Ee,o$r),e(Ee,dC),e(dC,t9e),e(t9e,r$r),e(dC,t$r),e(dC,sY),e(sY,a$r),e(dC,n$r),e(Ee,s$r),e(Ee,cC),e(cC,a9e),e(a9e,l$r),e(cC,i$r),e(cC,lY),e(lY,d$r),e(cC,c$r),e(Ee,f$r),e(Ee,fC),e(fC,n9e),e(n9e,m$r),e(fC,g$r),e(fC,iY),e(iY,h$r),e(fC,p$r),e(Ee,_$r),e(Ee,mC),e(mC,s9e),e(s9e,u$r),e(mC,b$r),e(mC,dY),e(dY,v$r),e(mC,F$r),e(Ee,T$r),e(Ee,gC),e(gC,l9e),e(l9e,M$r),e(gC,E$r),e(gC,cY),e(cY,C$r),e(gC,w$r),e(Ee,A$r),e(Ee,hC),e(hC,i9e),e(i9e,y$r),e(hC,L$r),e(hC,fY),e(fY,x$r),e(hC,$$r),e(Ee,k$r),e(Ee,pC),e(pC,d9e),e(d9e,S$r),e(pC,R$r),e(pC,mY),e(mY,P$r),e(pC,B$r),e(Ee,I$r),e(Ee,_C),e(_C,c9e),e(c9e,q$r),e(_C,N$r),e(_C,gY),e(gY,j$r),e(_C,D$r),e(Ee,G$r),e(Ee,uC),e(uC,f9e),e(f9e,O$r),e(uC,V$r),e(uC,hY),e(hY,X$r),e(uC,z$r),e(Gr,W$r),M(bC,Gr,null),b(f,eje,u),b(f,qc,u),e(qc,vC),e(vC,m9e),M(k7,m9e,null),e(qc,Q$r),e(qc,g9e),e(g9e,H$r),b(f,oje,u),b(f,hr,u),M(S7,hr,null),e(hr,U$r),e(hr,Nc),e(Nc,J$r),e(Nc,pY),e(pY,Y$r),e(Nc,K$r),e(Nc,_Y),e(_Y,Z$r),e(Nc,ekr),e(hr,okr),e(hr,R7),e(R7,rkr),e(R7,h9e),e(h9e,tkr),e(R7,akr),e(hr,nkr),e(hr,Xt),M(P7,Xt,null),e(Xt,skr),e(Xt,p9e),e(p9e,lkr),e(Xt,ikr),e(Xt,jc),e(jc,dkr),e(jc,_9e),e(_9e,ckr),e(jc,fkr),e(jc,uY),e(uY,mkr),e(jc,gkr),e(Xt,hkr),M(FC,Xt,null),e(hr,pkr),e(hr,Or),M(B7,Or,null),e(Or,_kr),e(Or,u9e),e(u9e,ukr),e(Or,bkr),e(Or,un),e(un,vkr),e(un,b9e),e(b9e,Fkr),e(un,Tkr),e(un,v9e),e(v9e,Mkr),e(un,Ekr),e(un,F9e),e(F9e,Ckr),e(un,wkr),e(Or,Akr),e(Or,Le),e(Le,TC),e(TC,T9e),e(T9e,ykr),e(TC,Lkr),e(TC,bY),e(bY,xkr),e(TC,$kr),e(Le,kkr),e(Le,MC),e(MC,M9e),e(M9e,Skr),e(MC,Rkr),e(MC,vY),e(vY,Pkr),e(MC,Bkr),e(Le,Ikr),e(Le,EC),e(EC,E9e),e(E9e,qkr),e(EC,Nkr),e(EC,FY),e(FY,jkr),e(EC,Dkr),e(Le,Gkr),e(Le,CC),e(CC,C9e),e(C9e,Okr),e(CC,Vkr),e(CC,TY),e(TY,Xkr),e(CC,zkr),e(Le,Wkr),e(Le,wC),e(wC,w9e),e(w9e,Qkr),e(wC,Hkr),e(wC,MY),e(MY,Ukr),e(wC,Jkr),e(Le,Ykr),e(Le,AC),e(AC,A9e),e(A9e,Kkr),e(AC,Zkr),e(AC,EY),e(EY,eSr),e(AC,oSr),e(Le,rSr),e(Le,yC),e(yC,y9e),e(y9e,tSr),e(yC,aSr),e(yC,CY),e(CY,nSr),e(yC,sSr),e(Le,lSr),e(Le,LC),e(LC,L9e),e(L9e,iSr),e(LC,dSr),e(LC,wY),e(wY,cSr),e(LC,fSr),e(Le,mSr),e(Le,xC),e(xC,x9e),e(x9e,gSr),e(xC,hSr),e(xC,AY),e(AY,pSr),e(xC,_Sr),e(Le,uSr),e(Le,$C),e($C,$9e),e($9e,bSr),e($C,vSr),e($C,yY),e(yY,FSr),e($C,TSr),e(Or,MSr),M(kC,Or,null),b(f,rje,u),b(f,Dc,u),e(Dc,SC),e(SC,k9e),M(I7,k9e,null),e(Dc,ESr),e(Dc,S9e),e(S9e,CSr),b(f,tje,u),b(f,pr,u),M(q7,pr,null),e(pr,wSr),e(pr,Gc),e(Gc,ASr),e(Gc,LY),e(LY,ySr),e(Gc,LSr),e(Gc,xY),e(xY,xSr),e(Gc,$Sr),e(pr,kSr),e(pr,N7),e(N7,SSr),e(N7,R9e),e(R9e,RSr),e(N7,PSr),e(pr,BSr),e(pr,zt),M(j7,zt,null),e(zt,ISr),e(zt,P9e),e(P9e,qSr),e(zt,NSr),e(zt,Oc),e(Oc,jSr),e(Oc,B9e),e(B9e,DSr),e(Oc,GSr),e(Oc,$Y),e($Y,OSr),e(Oc,VSr),e(zt,XSr),M(RC,zt,null),e(pr,zSr),e(pr,Vr),M(D7,Vr,null),e(Vr,WSr),e(Vr,I9e),e(I9e,QSr),e(Vr,HSr),e(Vr,bn),e(bn,USr),e(bn,q9e),e(q9e,JSr),e(bn,YSr),e(bn,N9e),e(N9e,KSr),e(bn,ZSr),e(bn,j9e),e(j9e,eRr),e(bn,oRr),e(Vr,rRr),e(Vr,Pe),e(Pe,PC),e(PC,D9e),e(D9e,tRr),e(PC,aRr),e(PC,kY),e(kY,nRr),e(PC,sRr),e(Pe,lRr),e(Pe,BC),e(BC,G9e),e(G9e,iRr),e(BC,dRr),e(BC,SY),e(SY,cRr),e(BC,fRr),e(Pe,mRr),e(Pe,IC),e(IC,O9e),e(O9e,gRr),e(IC,hRr),e(IC,RY),e(RY,pRr),e(IC,_Rr),e(Pe,uRr),e(Pe,qC),e(qC,V9e),e(V9e,bRr),e(qC,vRr),e(qC,PY),e(PY,FRr),e(qC,TRr),e(Pe,MRr),e(Pe,NC),e(NC,X9e),e(X9e,ERr),e(NC,CRr),e(NC,BY),e(BY,wRr),e(NC,ARr),e(Pe,yRr),e(Pe,jC),e(jC,z9e),e(z9e,LRr),e(jC,xRr),e(jC,IY),e(IY,$Rr),e(jC,kRr),e(Pe,SRr),e(Pe,DC),e(DC,W9e),e(W9e,RRr),e(DC,PRr),e(DC,qY),e(qY,BRr),e(DC,IRr),e(Pe,qRr),e(Pe,GC),e(GC,Q9e),e(Q9e,NRr),e(GC,jRr),e(GC,NY),e(NY,DRr),e(GC,GRr),e(Pe,ORr),e(Pe,OC),e(OC,H9e),e(H9e,VRr),e(OC,XRr),e(OC,jY),e(jY,zRr),e(OC,WRr),e(Vr,QRr),M(VC,Vr,null),b(f,aje,u),b(f,Vc,u),e(Vc,XC),e(XC,U9e),M(G7,U9e,null),e(Vc,HRr),e(Vc,J9e),e(J9e,URr),b(f,nje,u),b(f,_r,u),M(O7,_r,null),e(_r,JRr),e(_r,Xc),e(Xc,YRr),e(Xc,DY),e(DY,KRr),e(Xc,ZRr),e(Xc,GY),e(GY,ePr),e(Xc,oPr),e(_r,rPr),e(_r,V7),e(V7,tPr),e(V7,Y9e),e(Y9e,aPr),e(V7,nPr),e(_r,sPr),e(_r,Wt),M(X7,Wt,null),e(Wt,lPr),e(Wt,K9e),e(K9e,iPr),e(Wt,dPr),e(Wt,zc),e(zc,cPr),e(zc,Z9e),e(Z9e,fPr),e(zc,mPr),e(zc,OY),e(OY,gPr),e(zc,hPr),e(Wt,pPr),M(zC,Wt,null),e(_r,_Pr),e(_r,Xr),M(z7,Xr,null),e(Xr,uPr),e(Xr,eMe),e(eMe,bPr),e(Xr,vPr),e(Xr,vn),e(vn,FPr),e(vn,oMe),e(oMe,TPr),e(vn,MPr),e(vn,rMe),e(rMe,EPr),e(vn,CPr),e(vn,tMe),e(tMe,wPr),e(vn,APr),e(Xr,yPr),e(Xr,xe),e(xe,WC),e(WC,aMe),e(aMe,LPr),e(WC,xPr),e(WC,VY),e(VY,$Pr),e(WC,kPr),e(xe,SPr),e(xe,QC),e(QC,nMe),e(nMe,RPr),e(QC,PPr),e(QC,XY),e(XY,BPr),e(QC,IPr),e(xe,qPr),e(xe,HC),e(HC,sMe),e(sMe,NPr),e(HC,jPr),e(HC,zY),e(zY,DPr),e(HC,GPr),e(xe,OPr),e(xe,UC),e(UC,lMe),e(lMe,VPr),e(UC,XPr),e(UC,WY),e(WY,zPr),e(UC,WPr),e(xe,QPr),e(xe,JC),e(JC,iMe),e(iMe,HPr),e(JC,UPr),e(JC,QY),e(QY,JPr),e(JC,YPr),e(xe,KPr),e(xe,YC),e(YC,dMe),e(dMe,ZPr),e(YC,eBr),e(YC,HY),e(HY,oBr),e(YC,rBr),e(xe,tBr),e(xe,KC),e(KC,cMe),e(cMe,aBr),e(KC,nBr),e(KC,UY),e(UY,sBr),e(KC,lBr),e(xe,iBr),e(xe,ZC),e(ZC,fMe),e(fMe,dBr),e(ZC,cBr),e(ZC,JY),e(JY,fBr),e(ZC,mBr),e(xe,gBr),e(xe,e3),e(e3,mMe),e(mMe,hBr),e(e3,pBr),e(e3,YY),e(YY,_Br),e(e3,uBr),e(xe,bBr),e(xe,o3),e(o3,gMe),e(gMe,vBr),e(o3,FBr),e(o3,KY),e(KY,TBr),e(o3,MBr),e(Xr,EBr),M(r3,Xr,null),b(f,sje,u),b(f,Wc,u),e(Wc,t3),e(t3,hMe),M(W7,hMe,null),e(Wc,CBr),e(Wc,pMe),e(pMe,wBr),b(f,lje,u),b(f,ur,u),M(Q7,ur,null),e(ur,ABr),e(ur,Qc),e(Qc,yBr),e(Qc,ZY),e(ZY,LBr),e(Qc,xBr),e(Qc,eK),e(eK,$Br),e(Qc,kBr),e(ur,SBr),e(ur,H7),e(H7,RBr),e(H7,_Me),e(_Me,PBr),e(H7,BBr),e(ur,IBr),e(ur,Qt),M(U7,Qt,null),e(Qt,qBr),e(Qt,uMe),e(uMe,NBr),e(Qt,jBr),e(Qt,Hc),e(Hc,DBr),e(Hc,bMe),e(bMe,GBr),e(Hc,OBr),e(Hc,oK),e(oK,VBr),e(Hc,XBr),e(Qt,zBr),M(a3,Qt,null),e(ur,WBr),e(ur,zr),M(J7,zr,null),e(zr,QBr),e(zr,vMe),e(vMe,HBr),e(zr,UBr),e(zr,Fn),e(Fn,JBr),e(Fn,FMe),e(FMe,YBr),e(Fn,KBr),e(Fn,TMe),e(TMe,ZBr),e(Fn,eIr),e(Fn,MMe),e(MMe,oIr),e(Fn,rIr),e(zr,tIr),e(zr,$e),e($e,n3),e(n3,EMe),e(EMe,aIr),e(n3,nIr),e(n3,rK),e(rK,sIr),e(n3,lIr),e($e,iIr),e($e,s3),e(s3,CMe),e(CMe,dIr),e(s3,cIr),e(s3,tK),e(tK,fIr),e(s3,mIr),e($e,gIr),e($e,l3),e(l3,wMe),e(wMe,hIr),e(l3,pIr),e(l3,aK),e(aK,_Ir),e(l3,uIr),e($e,bIr),e($e,i3),e(i3,AMe),e(AMe,vIr),e(i3,FIr),e(i3,nK),e(nK,TIr),e(i3,MIr),e($e,EIr),e($e,d3),e(d3,yMe),e(yMe,CIr),e(d3,wIr),e(d3,sK),e(sK,AIr),e(d3,yIr),e($e,LIr),e($e,c3),e(c3,LMe),e(LMe,xIr),e(c3,$Ir),e(c3,lK),e(lK,kIr),e(c3,SIr),e($e,RIr),e($e,f3),e(f3,xMe),e(xMe,PIr),e(f3,BIr),e(f3,iK),e(iK,IIr),e(f3,qIr),e($e,NIr),e($e,m3),e(m3,$Me),e($Me,jIr),e(m3,DIr),e(m3,dK),e(dK,GIr),e(m3,OIr),e($e,VIr),e($e,g3),e(g3,kMe),e(kMe,XIr),e(g3,zIr),e(g3,cK),e(cK,WIr),e(g3,QIr),e($e,HIr),e($e,h3),e(h3,SMe),e(SMe,UIr),e(h3,JIr),e(h3,fK),e(fK,YIr),e(h3,KIr),e(zr,ZIr),M(p3,zr,null),b(f,ije,u),b(f,Uc,u),e(Uc,_3),e(_3,RMe),M(Y7,RMe,null),e(Uc,eqr),e(Uc,PMe),e(PMe,oqr),b(f,dje,u),b(f,br,u),M(K7,br,null),e(br,rqr),e(br,Jc),e(Jc,tqr),e(Jc,mK),e(mK,aqr),e(Jc,nqr),e(Jc,gK),e(gK,sqr),e(Jc,lqr),e(br,iqr),e(br,Z7),e(Z7,dqr),e(Z7,BMe),e(BMe,cqr),e(Z7,fqr),e(br,mqr),e(br,Ht),M(ex,Ht,null),e(Ht,gqr),e(Ht,IMe),e(IMe,hqr),e(Ht,pqr),e(Ht,Yc),e(Yc,_qr),e(Yc,qMe),e(qMe,uqr),e(Yc,bqr),e(Yc,hK),e(hK,vqr),e(Yc,Fqr),e(Ht,Tqr),M(u3,Ht,null),e(br,Mqr),e(br,Wr),M(ox,Wr,null),e(Wr,Eqr),e(Wr,NMe),e(NMe,Cqr),e(Wr,wqr),e(Wr,Tn),e(Tn,Aqr),e(Tn,jMe),e(jMe,yqr),e(Tn,Lqr),e(Tn,DMe),e(DMe,xqr),e(Tn,$qr),e(Tn,GMe),e(GMe,kqr),e(Tn,Sqr),e(Wr,Rqr),e(Wr,De),e(De,b3),e(b3,OMe),e(OMe,Pqr),e(b3,Bqr),e(b3,pK),e(pK,Iqr),e(b3,qqr),e(De,Nqr),e(De,v3),e(v3,VMe),e(VMe,jqr),e(v3,Dqr),e(v3,_K),e(_K,Gqr),e(v3,Oqr),e(De,Vqr),e(De,F3),e(F3,XMe),e(XMe,Xqr),e(F3,zqr),e(F3,uK),e(uK,Wqr),e(F3,Qqr),e(De,Hqr),e(De,T3),e(T3,zMe),e(zMe,Uqr),e(T3,Jqr),e(T3,bK),e(bK,Yqr),e(T3,Kqr),e(De,Zqr),e(De,M3),e(M3,WMe),e(WMe,eNr),e(M3,oNr),e(M3,vK),e(vK,rNr),e(M3,tNr),e(De,aNr),e(De,E3),e(E3,QMe),e(QMe,nNr),e(E3,sNr),e(E3,FK),e(FK,lNr),e(E3,iNr),e(De,dNr),e(De,C3),e(C3,HMe),e(HMe,cNr),e(C3,fNr),e(C3,TK),e(TK,mNr),e(C3,gNr),e(De,hNr),e(De,w3),e(w3,UMe),e(UMe,pNr),e(w3,_Nr),e(w3,MK),e(MK,uNr),e(w3,bNr),e(Wr,vNr),M(A3,Wr,null),b(f,cje,u),b(f,Kc,u),e(Kc,y3),e(y3,JMe),M(rx,JMe,null),e(Kc,FNr),e(Kc,YMe),e(YMe,TNr),b(f,fje,u),b(f,vr,u),M(tx,vr,null),e(vr,MNr),e(vr,Zc),e(Zc,ENr),e(Zc,EK),e(EK,CNr),e(Zc,wNr),e(Zc,CK),e(CK,ANr),e(Zc,yNr),e(vr,LNr),e(vr,ax),e(ax,xNr),e(ax,KMe),e(KMe,$Nr),e(ax,kNr),e(vr,SNr),e(vr,Ut),M(nx,Ut,null),e(Ut,RNr),e(Ut,ZMe),e(ZMe,PNr),e(Ut,BNr),e(Ut,ef),e(ef,INr),e(ef,e4e),e(e4e,qNr),e(ef,NNr),e(ef,wK),e(wK,jNr),e(ef,DNr),e(Ut,GNr),M(L3,Ut,null),e(vr,ONr),e(vr,Qr),M(sx,Qr,null),e(Qr,VNr),e(Qr,o4e),e(o4e,XNr),e(Qr,zNr),e(Qr,Mn),e(Mn,WNr),e(Mn,r4e),e(r4e,QNr),e(Mn,HNr),e(Mn,t4e),e(t4e,UNr),e(Mn,JNr),e(Mn,a4e),e(a4e,YNr),e(Mn,KNr),e(Qr,ZNr),e(Qr,Ge),e(Ge,x3),e(x3,n4e),e(n4e,ejr),e(x3,ojr),e(x3,AK),e(AK,rjr),e(x3,tjr),e(Ge,ajr),e(Ge,$3),e($3,s4e),e(s4e,njr),e($3,sjr),e($3,yK),e(yK,ljr),e($3,ijr),e(Ge,djr),e(Ge,k3),e(k3,l4e),e(l4e,cjr),e(k3,fjr),e(k3,LK),e(LK,mjr),e(k3,gjr),e(Ge,hjr),e(Ge,S3),e(S3,i4e),e(i4e,pjr),e(S3,_jr),e(S3,xK),e(xK,ujr),e(S3,bjr),e(Ge,vjr),e(Ge,R3),e(R3,d4e),e(d4e,Fjr),e(R3,Tjr),e(R3,$K),e($K,Mjr),e(R3,Ejr),e(Ge,Cjr),e(Ge,P3),e(P3,c4e),e(c4e,wjr),e(P3,Ajr),e(P3,kK),e(kK,yjr),e(P3,Ljr),e(Ge,xjr),e(Ge,B3),e(B3,f4e),e(f4e,$jr),e(B3,kjr),e(B3,SK),e(SK,Sjr),e(B3,Rjr),e(Ge,Pjr),e(Ge,I3),e(I3,m4e),e(m4e,Bjr),e(I3,Ijr),e(I3,RK),e(RK,qjr),e(I3,Njr),e(Qr,jjr),M(q3,Qr,null),b(f,mje,u),b(f,of,u),e(of,N3),e(N3,g4e),M(lx,g4e,null),e(of,Djr),e(of,h4e),e(h4e,Gjr),b(f,gje,u),b(f,Fr,u),M(ix,Fr,null),e(Fr,Ojr),e(Fr,rf),e(rf,Vjr),e(rf,PK),e(PK,Xjr),e(rf,zjr),e(rf,BK),e(BK,Wjr),e(rf,Qjr),e(Fr,Hjr),e(Fr,dx),e(dx,Ujr),e(dx,p4e),e(p4e,Jjr),e(dx,Yjr),e(Fr,Kjr),e(Fr,Jt),M(cx,Jt,null),e(Jt,Zjr),e(Jt,_4e),e(_4e,eDr),e(Jt,oDr),e(Jt,tf),e(tf,rDr),e(tf,u4e),e(u4e,tDr),e(tf,aDr),e(tf,IK),e(IK,nDr),e(tf,sDr),e(Jt,lDr),M(j3,Jt,null),e(Fr,iDr),e(Fr,Hr),M(fx,Hr,null),e(Hr,dDr),e(Hr,b4e),e(b4e,cDr),e(Hr,fDr),e(Hr,En),e(En,mDr),e(En,v4e),e(v4e,gDr),e(En,hDr),e(En,F4e),e(F4e,pDr),e(En,_Dr),e(En,T4e),e(T4e,uDr),e(En,bDr),e(Hr,vDr),e(Hr,M4e),e(M4e,D3),e(D3,E4e),e(E4e,FDr),e(D3,TDr),e(D3,qK),e(qK,MDr),e(D3,EDr),e(Hr,CDr),M(G3,Hr,null),b(f,hje,u),b(f,af,u),e(af,O3),e(O3,C4e),M(mx,C4e,null),e(af,wDr),e(af,w4e),e(w4e,ADr),b(f,pje,u),b(f,Tr,u),M(gx,Tr,null),e(Tr,yDr),e(Tr,nf),e(nf,LDr),e(nf,NK),e(NK,xDr),e(nf,$Dr),e(nf,jK),e(jK,kDr),e(nf,SDr),e(Tr,RDr),e(Tr,hx),e(hx,PDr),e(hx,A4e),e(A4e,BDr),e(hx,IDr),e(Tr,qDr),e(Tr,Yt),M(px,Yt,null),e(Yt,NDr),e(Yt,y4e),e(y4e,jDr),e(Yt,DDr),e(Yt,sf),e(sf,GDr),e(sf,L4e),e(L4e,ODr),e(sf,VDr),e(sf,DK),e(DK,XDr),e(sf,zDr),e(Yt,WDr),M(V3,Yt,null),e(Tr,QDr),e(Tr,Ur),M(_x,Ur,null),e(Ur,HDr),e(Ur,x4e),e(x4e,UDr),e(Ur,JDr),e(Ur,Cn),e(Cn,YDr),e(Cn,$4e),e($4e,KDr),e(Cn,ZDr),e(Cn,k4e),e(k4e,eGr),e(Cn,oGr),e(Cn,S4e),e(S4e,rGr),e(Cn,tGr),e(Ur,aGr),e(Ur,ux),e(ux,X3),e(X3,R4e),e(R4e,nGr),e(X3,sGr),e(X3,GK),e(GK,lGr),e(X3,iGr),e(ux,dGr),e(ux,z3),e(z3,P4e),e(P4e,cGr),e(z3,fGr),e(z3,OK),e(OK,mGr),e(z3,gGr),e(Ur,hGr),M(W3,Ur,null),b(f,_je,u),b(f,lf,u),e(lf,Q3),e(Q3,B4e),M(bx,B4e,null),e(lf,pGr),e(lf,I4e),e(I4e,_Gr),b(f,uje,u),b(f,Mr,u),M(vx,Mr,null),e(Mr,uGr),e(Mr,df),e(df,bGr),e(df,VK),e(VK,vGr),e(df,FGr),e(df,XK),e(XK,TGr),e(df,MGr),e(Mr,EGr),e(Mr,Fx),e(Fx,CGr),e(Fx,q4e),e(q4e,wGr),e(Fx,AGr),e(Mr,yGr),e(Mr,Kt),M(Tx,Kt,null),e(Kt,LGr),e(Kt,N4e),e(N4e,xGr),e(Kt,$Gr),e(Kt,cf),e(cf,kGr),e(cf,j4e),e(j4e,SGr),e(cf,RGr),e(cf,zK),e(zK,PGr),e(cf,BGr),e(Kt,IGr),M(H3,Kt,null),e(Mr,qGr),e(Mr,Jr),M(Mx,Jr,null),e(Jr,NGr),e(Jr,D4e),e(D4e,jGr),e(Jr,DGr),e(Jr,wn),e(wn,GGr),e(wn,G4e),e(G4e,OGr),e(wn,VGr),e(wn,O4e),e(O4e,XGr),e(wn,zGr),e(wn,V4e),e(V4e,WGr),e(wn,QGr),e(Jr,HGr),e(Jr,X4e),e(X4e,U3),e(U3,z4e),e(z4e,UGr),e(U3,JGr),e(U3,WK),e(WK,YGr),e(U3,KGr),e(Jr,ZGr),M(J3,Jr,null),bje=!0},p(f,[u]){const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),vf.$set(Ex);const W4e={};u&2&&(W4e.$$scope={dirty:u,ctx:f}),Fg.$set(W4e);const Q4e={};u&2&&(Q4e.$$scope={dirty:u,ctx:f}),oh.$set(Q4e);const H4e={};u&2&&(H4e.$$scope={dirty:u,ctx:f}),kh.$set(H4e);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),Sh.$set(Cx);const U4e={};u&2&&(U4e.$$scope={dirty:u,ctx:f}),Yh.$set(U4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Kh.$set(An);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),op.$set(J4e);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),U_.$set(Y4e);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),Y_.$set(K4e);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),Gu.$set(wx);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),Vu.$set(Z4e);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),L6.$set(Ax);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),$6.$set(eEe);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),g1.$set(yx);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),p1.$set(oEe);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),R1.$set(rEe);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),B1.$set(tEe);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),$b.$set(ff);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),Sb.$set(aEe);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),d2.$set(nEe);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),f2.$set(sEe);const Lx={};u&2&&(Lx.$$scope={dirty:u,ctx:f}),b2.$set(Lx);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),F2.$set(lEe);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),o5.$set(iEe);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),t5.$set(dEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),X5.$set(et);const xx={};u&2&&(xx.$$scope={dirty:u,ctx:f}),W5.$set(xx);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),U5.$set(cEe);const $x={};u&2&&($x.$$scope={dirty:u,ctx:f}),Y5.$set($x);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),fv.$set(fEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),gv.$set(ot);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),_v.$set(mEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),bv.$set(mf);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),xv.$set(gEe);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),kv.$set(hEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Nv.$set(y);const Y3={};u&2&&(Y3.$$scope={dirty:u,ctx:f}),Dv.$set(Y3);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),Yv.$set(pEe);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),Zv.$set(_Ee);const K3={};u&2&&(K3.$$scope={dirty:u,ctx:f}),tF.$set(K3);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),nF.$set(uEe);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),mF.$set(bEe);const Z3={};u&2&&(Z3.$$scope={dirty:u,ctx:f}),hF.$set(Z3);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),vF.$set(vEe);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),TF.$set(FEe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),wF.$set(ew);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),yF.$set(TEe);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),$F.$set(MEe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),SF.$set(ow);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),NF.$set(EEe);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),DF.$set(CEe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),VF.$set(rw);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),zF.$set(wEe);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),qT.$set(AEe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),jT.$set(tw);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),d9.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),f9.$set(LEe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),C9.$set(aw);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),A9.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),k9.$set($Ee);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),R9.$set(nw);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),eM.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),rM.$set(SEe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),gM.$set(sw);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),pM.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),OM.$set(PEe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),XM.$set(lw);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),i4.$set(BEe);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),c4.$set(IEe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),g4.$set(iw);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),p4.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),u4.$set(NEe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),v4.$set(dw);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),D4.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),O4.$set(DEe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),dE.$set(cw);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),fE.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),gE.$set(OEe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),pE.$set(fw);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),uE.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),vE.$set(XEe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),zE.$set(mw);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),QE.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),tC.$set(WEe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),nC.$set(gw);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),bC.$set(QEe);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),FC.$set(HEe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),kC.$set(hw);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),RC.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),VC.$set(JEe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),zC.$set(pw);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),r3.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),a3.$set(KEe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),p3.$set(_w);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),u3.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),A3.$set(eCe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),L3.$set(uw);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),q3.$set(oCe);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),j3.$set(rCe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),G3.$set(bw);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),V3.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),W3.$set(aCe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),H3.$set(vw);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),J3.$set(nCe)},i(f){bje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(vf.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(CA.$$.fragment,f),E(Fg.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E($A.$$.fragment,f),E(oh.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(IA.$$.fragment,f),E(kh.$$.fragment,f),E(Sh.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(OA.$$.fragment,f),E(Yh.$$.fragment,f),E(Kh.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(op.$$.fragment,f),E(HA.$$.fragment,f),E(U_.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(Y_.$$.fragment,f),E(ZA.$$.fragment,f),E(Gu.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(Vu.$$.fragment,f),E(ay.$$.fragment,f),E(L6.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E($6.$$.fragment,f),E(dy.$$.fragment,f),E(g1.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(p1.$$.fragment,f),E(hy.$$.fragment,f),E(R1.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(B1.$$.fragment,f),E(vy.$$.fragment,f),E($b.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(Sb.$$.fragment,f),E(Cy.$$.fragment,f),E(d2.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(f2.$$.fragment,f),E(xy.$$.fragment,f),E(b2.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(F2.$$.fragment,f),E(Py.$$.fragment,f),E(o5.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(t5.$$.fragment,f),E(jy.$$.fragment,f),E(X5.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(W5.$$.fragment,f),E(Xy.$$.fragment,f),E(U5.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Y5.$$.fragment,f),E(Uy.$$.fragment,f),E(fv.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(gv.$$.fragment,f),E(e8.$$.fragment,f),E(_v.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(bv.$$.fragment,f),E(n8.$$.fragment,f),E(xv.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(kv.$$.fragment,f),E(c8.$$.fragment,f),E(Nv.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(Dv.$$.fragment,f),E(p8.$$.fragment,f),E(Yv.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(Zv.$$.fragment,f),E(F8.$$.fragment,f),E(tF.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(nF.$$.fragment,f),E(A8.$$.fragment,f),E(mF.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(hF.$$.fragment,f),E(k8.$$.fragment,f),E(vF.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(TF.$$.fragment,f),E(I8.$$.fragment,f),E(wF.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(yF.$$.fragment,f),E(O8.$$.fragment,f),E($F.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(SF.$$.fragment,f),E(Q8.$$.fragment,f),E(NF.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(DF.$$.fragment,f),E(K8.$$.fragment,f),E(VF.$$.fragment,f),E(Z8.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(zF.$$.fragment,f),E(tL.$$.fragment,f),E(qT.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(jT.$$.fragment,f),E(iL.$$.fragment,f),E(d9.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(f9.$$.fragment,f),E(gL.$$.fragment,f),E(C9.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(A9.$$.fragment,f),E(bL.$$.fragment,f),E(k9.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(R9.$$.fragment,f),E(EL.$$.fragment,f),E(eM.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(rM.$$.fragment,f),E(LL.$$.fragment,f),E(gM.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(pM.$$.fragment,f),E(RL.$$.fragment,f),E(OM.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(XM.$$.fragment,f),E(NL.$$.fragment,f),E(i4.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(c4.$$.fragment,f),E(VL.$$.fragment,f),E(g4.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(p4.$$.fragment,f),E(UL.$$.fragment,f),E(u4.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(v4.$$.fragment,f),E(e7.$$.fragment,f),E(D4.$$.fragment,f),E(o7.$$.fragment,f),E(r7.$$.fragment,f),E(a7.$$.fragment,f),E(O4.$$.fragment,f),E(n7.$$.fragment,f),E(dE.$$.fragment,f),E(s7.$$.fragment,f),E(l7.$$.fragment,f),E(d7.$$.fragment,f),E(fE.$$.fragment,f),E(c7.$$.fragment,f),E(gE.$$.fragment,f),E(f7.$$.fragment,f),E(m7.$$.fragment,f),E(h7.$$.fragment,f),E(pE.$$.fragment,f),E(p7.$$.fragment,f),E(uE.$$.fragment,f),E(_7.$$.fragment,f),E(u7.$$.fragment,f),E(v7.$$.fragment,f),E(vE.$$.fragment,f),E(F7.$$.fragment,f),E(zE.$$.fragment,f),E(T7.$$.fragment,f),E(M7.$$.fragment,f),E(C7.$$.fragment,f),E(QE.$$.fragment,f),E(w7.$$.fragment,f),E(tC.$$.fragment,f),E(A7.$$.fragment,f),E(y7.$$.fragment,f),E(x7.$$.fragment,f),E(nC.$$.fragment,f),E($7.$$.fragment,f),E(bC.$$.fragment,f),E(k7.$$.fragment,f),E(S7.$$.fragment,f),E(P7.$$.fragment,f),E(FC.$$.fragment,f),E(B7.$$.fragment,f),E(kC.$$.fragment,f),E(I7.$$.fragment,f),E(q7.$$.fragment,f),E(j7.$$.fragment,f),E(RC.$$.fragment,f),E(D7.$$.fragment,f),E(VC.$$.fragment,f),E(G7.$$.fragment,f),E(O7.$$.fragment,f),E(X7.$$.fragment,f),E(zC.$$.fragment,f),E(z7.$$.fragment,f),E(r3.$$.fragment,f),E(W7.$$.fragment,f),E(Q7.$$.fragment,f),E(U7.$$.fragment,f),E(a3.$$.fragment,f),E(J7.$$.fragment,f),E(p3.$$.fragment,f),E(Y7.$$.fragment,f),E(K7.$$.fragment,f),E(ex.$$.fragment,f),E(u3.$$.fragment,f),E(ox.$$.fragment,f),E(A3.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(L3.$$.fragment,f),E(sx.$$.fragment,f),E(q3.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(j3.$$.fragment,f),E(fx.$$.fragment,f),E(G3.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(V3.$$.fragment,f),E(_x.$$.fragment,f),E(W3.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(H3.$$.fragment,f),E(Mx.$$.fragment,f),E(J3.$$.fragment,f),bje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(vf.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(CA.$$.fragment,f),C(Fg.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C($A.$$.fragment,f),C(oh.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(IA.$$.fragment,f),C(kh.$$.fragment,f),C(Sh.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(OA.$$.fragment,f),C(Yh.$$.fragment,f),C(Kh.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(op.$$.fragment,f),C(HA.$$.fragment,f),C(U_.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(Y_.$$.fragment,f),C(ZA.$$.fragment,f),C(Gu.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(Vu.$$.fragment,f),C(ay.$$.fragment,f),C(L6.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C($6.$$.fragment,f),C(dy.$$.fragment,f),C(g1.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(p1.$$.fragment,f),C(hy.$$.fragment,f),C(R1.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(B1.$$.fragment,f),C(vy.$$.fragment,f),C($b.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(Sb.$$.fragment,f),C(Cy.$$.fragment,f),C(d2.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(f2.$$.fragment,f),C(xy.$$.fragment,f),C(b2.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(F2.$$.fragment,f),C(Py.$$.fragment,f),C(o5.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(t5.$$.fragment,f),C(jy.$$.fragment,f),C(X5.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(W5.$$.fragment,f),C(Xy.$$.fragment,f),C(U5.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Y5.$$.fragment,f),C(Uy.$$.fragment,f),C(fv.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(gv.$$.fragment,f),C(e8.$$.fragment,f),C(_v.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(bv.$$.fragment,f),C(n8.$$.fragment,f),C(xv.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(kv.$$.fragment,f),C(c8.$$.fragment,f),C(Nv.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(Dv.$$.fragment,f),C(p8.$$.fragment,f),C(Yv.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(Zv.$$.fragment,f),C(F8.$$.fragment,f),C(tF.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(nF.$$.fragment,f),C(A8.$$.fragment,f),C(mF.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(hF.$$.fragment,f),C(k8.$$.fragment,f),C(vF.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(TF.$$.fragment,f),C(I8.$$.fragment,f),C(wF.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(yF.$$.fragment,f),C(O8.$$.fragment,f),C($F.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(SF.$$.fragment,f),C(Q8.$$.fragment,f),C(NF.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(DF.$$.fragment,f),C(K8.$$.fragment,f),C(VF.$$.fragment,f),C(Z8.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(zF.$$.fragment,f),C(tL.$$.fragment,f),C(qT.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(jT.$$.fragment,f),C(iL.$$.fragment,f),C(d9.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(f9.$$.fragment,f),C(gL.$$.fragment,f),C(C9.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(A9.$$.fragment,f),C(bL.$$.fragment,f),C(k9.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(R9.$$.fragment,f),C(EL.$$.fragment,f),C(eM.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(rM.$$.fragment,f),C(LL.$$.fragment,f),C(gM.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(pM.$$.fragment,f),C(RL.$$.fragment,f),C(OM.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(XM.$$.fragment,f),C(NL.$$.fragment,f),C(i4.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(c4.$$.fragment,f),C(VL.$$.fragment,f),C(g4.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(p4.$$.fragment,f),C(UL.$$.fragment,f),C(u4.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(v4.$$.fragment,f),C(e7.$$.fragment,f),C(D4.$$.fragment,f),C(o7.$$.fragment,f),C(r7.$$.fragment,f),C(a7.$$.fragment,f),C(O4.$$.fragment,f),C(n7.$$.fragment,f),C(dE.$$.fragment,f),C(s7.$$.fragment,f),C(l7.$$.fragment,f),C(d7.$$.fragment,f),C(fE.$$.fragment,f),C(c7.$$.fragment,f),C(gE.$$.fragment,f),C(f7.$$.fragment,f),C(m7.$$.fragment,f),C(h7.$$.fragment,f),C(pE.$$.fragment,f),C(p7.$$.fragment,f),C(uE.$$.fragment,f),C(_7.$$.fragment,f),C(u7.$$.fragment,f),C(v7.$$.fragment,f),C(vE.$$.fragment,f),C(F7.$$.fragment,f),C(zE.$$.fragment,f),C(T7.$$.fragment,f),C(M7.$$.fragment,f),C(C7.$$.fragment,f),C(QE.$$.fragment,f),C(w7.$$.fragment,f),C(tC.$$.fragment,f),C(A7.$$.fragment,f),C(y7.$$.fragment,f),C(x7.$$.fragment,f),C(nC.$$.fragment,f),C($7.$$.fragment,f),C(bC.$$.fragment,f),C(k7.$$.fragment,f),C(S7.$$.fragment,f),C(P7.$$.fragment,f),C(FC.$$.fragment,f),C(B7.$$.fragment,f),C(kC.$$.fragment,f),C(I7.$$.fragment,f),C(q7.$$.fragment,f),C(j7.$$.fragment,f),C(RC.$$.fragment,f),C(D7.$$.fragment,f),C(VC.$$.fragment,f),C(G7.$$.fragment,f),C(O7.$$.fragment,f),C(X7.$$.fragment,f),C(zC.$$.fragment,f),C(z7.$$.fragment,f),C(r3.$$.fragment,f),C(W7.$$.fragment,f),C(Q7.$$.fragment,f),C(U7.$$.fragment,f),C(a3.$$.fragment,f),C(J7.$$.fragment,f),C(p3.$$.fragment,f),C(Y7.$$.fragment,f),C(K7.$$.fragment,f),C(ex.$$.fragment,f),C(u3.$$.fragment,f),C(ox.$$.fragment,f),C(A3.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(L3.$$.fragment,f),C(sx.$$.fragment,f),C(q3.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(j3.$$.fragment,f),C(fx.$$.fragment,f),C(G3.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(V3.$$.fragment,f),C(_x.$$.fragment,f),C(W3.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(H3.$$.fragment,f),C(Mx.$$.fragment,f),C(J3.$$.fragment,f),bje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(pqe),f&&t(ui),w(bA),f&&t(_qe),f&&t(kn),f&&t(uqe),w(vA,f),f&&t(bqe),f&&t(D$),f&&t(vqe),w(vf,f),f&&t(Fqe),f&&t(bi),w(FA),f&&t(Tqe),f&&t(Co),w(TA),w(CA),w(Fg),w(wA),f&&t(Mqe),f&&t(Fi),w(AA),f&&t(Eqe),f&&t(wo),w(yA),w($A),w(oh),w(kA),f&&t(Cqe),f&&t(Ti),w(SA),f&&t(wqe),f&&t(Ao),w(RA),w(IA),w(kh),w(Sh),w(qA),f&&t(Aqe),f&&t(Mi),w(NA),f&&t(yqe),f&&t(yo),w(jA),w(OA),w(Yh),w(Kh),w(VA),f&&t(Lqe),f&&t(Ci),w(XA),f&&t(xqe),f&&t(Lo),w(zA),w(QA),w(op),w(HA),w(U_),f&&t($qe),f&&t(yi),w(UA),f&&t(kqe),f&&t(xo),w(JA),w(KA),w(Y_),w(ZA),w(Gu),f&&t(Sqe),f&&t($i),w(ey),f&&t(Rqe),f&&t($o),w(oy),w(ty),w(Vu),w(ay),w(L6),f&&t(Pqe),f&&t(Ri),w(ny),f&&t(Bqe),f&&t(ko),w(sy),w(iy),w($6),w(dy),w(g1),f&&t(Iqe),f&&t(Ii),w(cy),f&&t(qqe),f&&t(So),w(fy),w(gy),w(p1),w(hy),w(R1),f&&t(Nqe),f&&t(ji),w(py),f&&t(jqe),f&&t(Ro),w(_y),w(by),w(B1),w(vy),w($b),f&&t(Dqe),f&&t(Oi),w(Fy),f&&t(Gqe),f&&t(Po),w(Ty),w(Ey),w(Sb),w(Cy),w(d2),f&&t(Oqe),f&&t(zi),w(wy),f&&t(Vqe),f&&t(Bo),w(Ay),w(Ly),w(f2),w(xy),w(b2),f&&t(Xqe),f&&t(Hi),w($y),f&&t(zqe),f&&t(Io),w(ky),w(Ry),w(F2),w(Py),w(o5),f&&t(Wqe),f&&t(Yi),w(By),f&&t(Qqe),f&&t(qo),w(Iy),w(Ny),w(t5),w(jy),w(X5),f&&t(Hqe),f&&t(ed),w(Dy),f&&t(Uqe),f&&t(No),w(Gy),w(Vy),w(W5),w(Xy),w(U5),f&&t(Jqe),f&&t(td),w(zy),f&&t(Yqe),f&&t(jo),w(Wy),w(Hy),w(Y5),w(Uy),w(fv),f&&t(Kqe),f&&t(sd),w(Jy),f&&t(Zqe),f&&t(Do),w(Yy),w(Zy),w(gv),w(e8),w(_v),f&&t(eNe),f&&t(dd),w(o8),f&&t(oNe),f&&t(Go),w(r8),w(a8),w(bv),w(n8),w(xv),f&&t(rNe),f&&t(md),w(s8),f&&t(tNe),f&&t(Oo),w(l8),w(d8),w(kv),w(c8),w(Nv),f&&t(aNe),f&&t(pd),w(f8),f&&t(nNe),f&&t(Vo),w(m8),w(h8),w(Dv),w(p8),w(Yv),f&&t(sNe),f&&t(bd),w(_8),f&&t(lNe),f&&t(Xo),w(u8),w(v8),w(Zv),w(F8),w(tF),f&&t(iNe),f&&t(Td),w(M8),f&&t(dNe),f&&t(zo),w(E8),w(w8),w(nF),w(A8),w(mF),f&&t(cNe),f&&t(Cd),w(y8),f&&t(fNe),f&&t(Wo),w(L8),w($8),w(hF),w(k8),w(vF),f&&t(mNe),f&&t(Ld),w(S8),f&&t(gNe),f&&t(Qo),w(R8),w(B8),w(TF),w(I8),w(wF),f&&t(hNe),f&&t(kd),w(N8),f&&t(pNe),f&&t(Ho),w(j8),w(G8),w(yF),w(O8),w($F),f&&t(_Ne),f&&t(Pd),w(V8),f&&t(uNe),f&&t(Uo),w(X8),w(W8),w(SF),w(Q8),w(NF),f&&t(bNe),f&&t(qd),w(H8),f&&t(vNe),f&&t(Jo),w(U8),w(Y8),w(DF),w(K8),w(VF),f&&t(FNe),f&&t(Dd),w(Z8),f&&t(TNe),f&&t(Yo),w(eL),w(rL),w(zF),w(tL),w(qT),f&&t(MNe),f&&t(Vd),w(aL),f&&t(ENe),f&&t(Ko),w(nL),w(lL),w(jT),w(iL),w(d9),f&&t(CNe),f&&t(Wd),w(dL),f&&t(wNe),f&&t(Zo),w(cL),w(mL),w(f9),w(gL),w(C9),f&&t(ANe),f&&t(Ud),w(hL),f&&t(yNe),f&&t(er),w(pL),w(uL),w(A9),w(bL),w(k9),f&&t(LNe),f&&t(Kd),w(vL),f&&t(xNe),f&&t(or),w(FL),w(ML),w(R9),w(EL),w(eM),f&&t($Ne),f&&t(oc),w(CL),f&&t(kNe),f&&t(rr),w(wL),w(yL),w(rM),w(LL),w(gM),f&&t(SNe),f&&t(ac),w(xL),f&&t(RNe),f&&t(tr),w($L),w(SL),w(pM),w(RL),w(OM),f&&t(PNe),f&&t(lc),w(PL),f&&t(BNe),f&&t(ar),w(BL),w(qL),w(XM),w(NL),w(i4),f&&t(INe),f&&t(cc),w(jL),f&&t(qNe),f&&t(nr),w(DL),w(OL),w(c4),w(VL),w(g4),f&&t(NNe),f&&t(gc),w(zL),f&&t(jNe),f&&t(sr),w(WL),w(HL),w(p4),w(UL),w(u4),f&&t(DNe),f&&t(_c),w(JL),f&&t(GNe),f&&t(lr),w(YL),w(ZL),w(v4),w(e7),w(D4),f&&t(ONe),f&&t(vc),w(o7),f&&t(VNe),f&&t(ir),w(r7),w(a7),w(O4),w(n7),w(dE),f&&t(XNe),f&&t(Mc),w(s7),f&&t(zNe),f&&t(dr),w(l7),w(d7),w(fE),w(c7),w(gE),f&&t(WNe),f&&t(wc),w(f7),f&&t(QNe),f&&t(cr),w(m7),w(h7),w(pE),w(p7),w(uE),f&&t(HNe),f&&t(Lc),w(_7),f&&t(UNe),f&&t(fr),w(u7),w(v7),w(vE),w(F7),w(zE),f&&t(JNe),f&&t(kc),w(T7),f&&t(YNe),f&&t(mr),w(M7),w(C7),w(QE),w(w7),w(tC),f&&t(KNe),f&&t(Pc),w(A7),f&&t(ZNe),f&&t(gr),w(y7),w(x7),w(nC),w($7),w(bC),f&&t(eje),f&&t(qc),w(k7),f&&t(oje),f&&t(hr),w(S7),w(P7),w(FC),w(B7),w(kC),f&&t(rje),f&&t(Dc),w(I7),f&&t(tje),f&&t(pr),w(q7),w(j7),w(RC),w(D7),w(VC),f&&t(aje),f&&t(Vc),w(G7),f&&t(nje),f&&t(_r),w(O7),w(X7),w(zC),w(z7),w(r3),f&&t(sje),f&&t(Wc),w(W7),f&&t(lje),f&&t(ur),w(Q7),w(U7),w(a3),w(J7),w(p3),f&&t(ije),f&&t(Uc),w(Y7),f&&t(dje),f&&t(br),w(K7),w(ex),w(u3),w(ox),w(A3),f&&t(cje),f&&t(Kc),w(rx),f&&t(fje),f&&t(vr),w(tx),w(nx),w(L3),w(sx),w(q3),f&&t(mje),f&&t(of),w(lx),f&&t(gje),f&&t(Fr),w(ix),w(cx),w(j3),w(fx),w(G3),f&&t(hje),f&&t(af),w(mx),f&&t(pje),f&&t(Tr),w(gx),w(px),w(V3),w(_x),w(W3),f&&t(_je),f&&t(lf),w(bx),f&&t(uje),f&&t(Mr),w(vx),w(Tx),w(H3),w(Mx),w(J3)}}}const h$t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function p$t(L){return p7t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class M$t extends f7t{constructor(g){super();m7t(this,g,p$t,g$t,g7t,{})}}export{M$t as default,h$t as metadata};
