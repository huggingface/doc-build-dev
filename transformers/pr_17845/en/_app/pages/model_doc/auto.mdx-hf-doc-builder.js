import{S as IQt,i as qQt,s as jQt,e as a,k as l,w as F,t as o,M as DQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as GQt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as itt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function OQt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,oL,Pf,Oe,Qe,xi,Pn,rL,Bn,Nn,tL,$i,In,aL,ki,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),oL=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),rL=o(" is a subclass of "),Bn=a("a"),Nn=o("PreTrainedModel"),tL=o(`, make sure its
`),$i=a("code"),In=o("config_class"),aL=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var BS=s(p);m=r(BS,"NewModelConfig"),BS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var NS=s(Ai);Rf=r(NS,"model_type"),NS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var IS=s(Li);yi=r(IS,'"new-model"'),IS.forEach(t),oL=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),rL=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var qS=s(Bn);Nn=r(qS,"PreTrainedModel"),qS.forEach(t),tL=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var Nf=s($i);In=r(Nf,"config_class"),Nf.forEach(t),aL=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var jS=s(ki);Bf=r(jS,"NewModelConfig"),jS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,oL),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,rL),e(Oe,Bn),e(Bn,Nn),e(Oe,tL),e(Oe,$i),e($i,In),e(Oe,aL),e(Oe,ki),e(ki,Bf),e(Oe,Sa)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,oL,Pf,Oe,Qe,xi,Pn,rL,Bn,Nn,tL,$i,In,aL,ki,Bf,Sa,We,Ae,BS,Si,NS,IS,Co,Ra,qS,Nf,jS,pHe,eXe,Ri,If,Cae,nL,_He,wae,uHe,oXe,qn,bHe,Aae,vHe,FHe,Lae,THe,MHe,rXe,sL,tXe,DS,EHe,aXe,qf,nXe,Pi,jf,yae,lL,CHe,xae,wHe,sXe,wo,iL,AHe,dL,LHe,GS,yHe,xHe,$He,cL,kHe,$ae,SHe,RHe,PHe,Lr,fL,BHe,kae,NHe,IHe,Bi,qHe,Sae,jHe,DHe,Rae,GHe,OHe,VHe,A,Df,Pae,XHe,zHe,OS,QHe,WHe,HHe,Gf,Bae,UHe,JHe,VS,YHe,KHe,ZHe,Of,Nae,eUe,oUe,XS,rUe,tUe,aUe,Vf,Iae,nUe,sUe,zS,lUe,iUe,dUe,Xf,qae,cUe,fUe,QS,mUe,gUe,hUe,zf,jae,pUe,_Ue,WS,uUe,bUe,vUe,Qf,Dae,FUe,TUe,HS,MUe,EUe,CUe,Wf,Gae,wUe,AUe,US,LUe,yUe,xUe,Hf,Oae,$Ue,kUe,JS,SUe,RUe,PUe,Uf,Vae,BUe,NUe,YS,IUe,qUe,jUe,Jf,Xae,DUe,GUe,KS,OUe,VUe,XUe,Yf,zae,zUe,QUe,ZS,WUe,HUe,UUe,Kf,Qae,JUe,YUe,eR,KUe,ZUe,eJe,Zf,Wae,oJe,rJe,oR,tJe,aJe,nJe,em,Hae,sJe,lJe,rR,iJe,dJe,cJe,om,Uae,fJe,mJe,tR,gJe,hJe,pJe,rm,Jae,_Je,uJe,aR,bJe,vJe,FJe,tm,Yae,TJe,MJe,nR,EJe,CJe,wJe,am,Kae,AJe,LJe,sR,yJe,xJe,$Je,nm,Zae,kJe,SJe,lR,RJe,PJe,BJe,sm,ene,NJe,IJe,iR,qJe,jJe,DJe,lm,one,GJe,OJe,dR,VJe,XJe,zJe,im,rne,QJe,WJe,cR,HJe,UJe,JJe,dm,tne,YJe,KJe,fR,ZJe,eYe,oYe,cm,ane,rYe,tYe,mR,aYe,nYe,sYe,fm,nne,lYe,iYe,gR,dYe,cYe,fYe,mm,sne,mYe,gYe,hR,hYe,pYe,_Ye,gm,lne,uYe,bYe,pR,vYe,FYe,TYe,hm,ine,MYe,EYe,_R,CYe,wYe,AYe,pm,dne,LYe,yYe,uR,xYe,$Ye,kYe,_m,cne,SYe,RYe,bR,PYe,BYe,NYe,um,fne,IYe,qYe,vR,jYe,DYe,GYe,bm,mne,OYe,VYe,FR,XYe,zYe,QYe,vm,gne,WYe,HYe,TR,UYe,JYe,YYe,Fm,hne,KYe,ZYe,MR,eKe,oKe,rKe,Tm,pne,tKe,aKe,ER,nKe,sKe,lKe,Mm,_ne,iKe,dKe,CR,cKe,fKe,mKe,Em,une,gKe,hKe,wR,pKe,_Ke,uKe,Cm,bne,bKe,vKe,AR,FKe,TKe,MKe,wm,vne,EKe,CKe,LR,wKe,AKe,LKe,Am,Fne,yKe,xKe,yR,$Ke,kKe,SKe,Lm,Tne,RKe,PKe,xR,BKe,NKe,IKe,ym,Mne,qKe,jKe,$R,DKe,GKe,OKe,xm,Ene,VKe,XKe,kR,zKe,QKe,WKe,$m,Cne,HKe,UKe,SR,JKe,YKe,KKe,km,wne,ZKe,eZe,RR,oZe,rZe,tZe,Sm,Ane,aZe,nZe,PR,sZe,lZe,iZe,Rm,Lne,dZe,cZe,BR,fZe,mZe,gZe,Pm,yne,hZe,pZe,NR,_Ze,uZe,bZe,Bm,xne,vZe,FZe,IR,TZe,MZe,EZe,Nm,$ne,CZe,wZe,qR,AZe,LZe,yZe,Im,kne,xZe,$Ze,jR,kZe,SZe,RZe,qm,Sne,PZe,BZe,DR,NZe,IZe,qZe,jm,Rne,jZe,DZe,GR,GZe,OZe,VZe,Dm,Pne,XZe,zZe,OR,QZe,WZe,HZe,Gm,Bne,UZe,JZe,VR,YZe,KZe,ZZe,Om,Nne,eeo,oeo,XR,reo,teo,aeo,Vm,Ine,neo,seo,zR,leo,ieo,deo,Xm,qne,ceo,feo,QR,meo,geo,heo,zm,jne,peo,_eo,WR,ueo,beo,veo,Qm,Dne,Feo,Teo,HR,Meo,Eeo,Ceo,Wm,Gne,weo,Aeo,UR,Leo,yeo,xeo,Hm,One,$eo,keo,JR,Seo,Reo,Peo,Um,Vne,Beo,Neo,YR,Ieo,qeo,jeo,Jm,Xne,Deo,Geo,KR,Oeo,Veo,Xeo,Ym,zne,zeo,Qeo,ZR,Weo,Heo,Ueo,Km,Qne,Jeo,Yeo,eP,Keo,Zeo,eoo,Zm,Wne,ooo,roo,oP,too,aoo,noo,eg,Hne,soo,loo,rP,ioo,doo,coo,og,Une,foo,moo,tP,goo,hoo,poo,rg,Jne,_oo,uoo,aP,boo,voo,Foo,tg,Yne,Too,Moo,nP,Eoo,Coo,woo,ag,Kne,Aoo,Loo,sP,yoo,xoo,$oo,ng,Zne,koo,Soo,lP,Roo,Poo,Boo,sg,ese,Noo,Ioo,iP,qoo,joo,Doo,lg,ose,Goo,Ooo,dP,Voo,Xoo,zoo,ig,rse,Qoo,Woo,cP,Hoo,Uoo,Joo,dg,tse,Yoo,Koo,fP,Zoo,ero,oro,cg,ase,rro,tro,mP,aro,nro,sro,fg,nse,lro,iro,gP,dro,cro,fro,mg,sse,mro,gro,hP,hro,pro,_ro,gg,lse,uro,bro,pP,vro,Fro,Tro,hg,ise,Mro,Ero,_P,Cro,wro,Aro,pg,dse,Lro,yro,uP,xro,$ro,kro,_g,cse,Sro,Rro,bP,Pro,Bro,Nro,ug,fse,Iro,qro,vP,jro,Dro,Gro,bg,mse,Oro,Vro,FP,Xro,zro,Qro,vg,gse,Wro,Hro,TP,Uro,Jro,Yro,Fg,hse,Kro,Zro,MP,eto,oto,rto,Tg,pse,tto,ato,EP,nto,sto,lto,Mg,_se,ito,dto,CP,cto,fto,mto,Eg,use,gto,hto,wP,pto,_to,uto,Cg,bse,bto,vto,AP,Fto,Tto,Mto,wg,vse,Eto,Cto,LP,wto,Ato,Lto,Ag,Fse,yto,xto,yP,$to,kto,Sto,Lg,Tse,Rto,Pto,xP,Bto,Nto,Ito,yg,Mse,qto,jto,$P,Dto,Gto,Oto,xg,Ese,Vto,Xto,kP,zto,Qto,Wto,$g,Cse,Hto,Uto,SP,Jto,Yto,Kto,kg,wse,Zto,eao,RP,oao,rao,tao,Sg,Ase,aao,nao,PP,sao,lao,iao,Rg,Lse,dao,cao,BP,fao,mao,gao,Pg,yse,hao,pao,NP,_ao,uao,bao,Bg,xse,vao,Fao,IP,Tao,Mao,Eao,Ng,$se,Cao,wao,qP,Aao,Lao,yao,Ig,kse,xao,$ao,jP,kao,Sao,Rao,qg,Sse,Pao,Bao,DP,Nao,Iao,qao,jg,Rse,jao,Dao,GP,Gao,Oao,Vao,Dg,Pse,Xao,zao,OP,Qao,Wao,Hao,Gg,Bse,Uao,Jao,VP,Yao,Kao,Zao,Og,Nse,eno,ono,XP,rno,tno,ano,Vg,Ise,nno,sno,zP,lno,ino,dno,Xg,qse,cno,fno,QP,mno,gno,hno,zg,jse,pno,_no,WP,uno,bno,vno,Qg,Dse,Fno,Tno,HP,Mno,Eno,Cno,Wg,Gse,wno,Ano,UP,Lno,yno,xno,Hg,Ose,$no,kno,JP,Sno,Rno,Pno,Ug,Vse,Bno,Nno,YP,Ino,qno,jno,Jg,Xse,Dno,Gno,KP,Ono,Vno,Xno,Yg,zno,Kg,mL,Qno,zse,Wno,lXe,Ni,Zg,Qse,gL,Hno,Wse,Uno,iXe,Ao,hL,Jno,pL,Yno,ZP,Kno,Zno,eso,_L,oso,Hse,rso,tso,aso,yr,uL,nso,Use,sso,lso,Pa,iso,Jse,dso,cso,Yse,fso,mso,Kse,gso,hso,pso,k,jn,Zse,_so,uso,eB,bso,vso,oB,Fso,Tso,Mso,Dn,ele,Eso,Cso,rB,wso,Aso,tB,Lso,yso,xso,Gn,ole,$so,kso,aB,Sso,Rso,nB,Pso,Bso,Nso,eh,rle,Iso,qso,sB,jso,Dso,Gso,On,tle,Oso,Vso,lB,Xso,zso,iB,Qso,Wso,Hso,oh,ale,Uso,Jso,dB,Yso,Kso,Zso,rh,nle,elo,olo,cB,rlo,tlo,alo,th,sle,nlo,slo,fB,llo,ilo,dlo,Vn,lle,clo,flo,mB,mlo,glo,gB,hlo,plo,_lo,Xn,ile,ulo,blo,hB,vlo,Flo,pB,Tlo,Mlo,Elo,zn,dle,Clo,wlo,_B,Alo,Llo,uB,ylo,xlo,$lo,ah,cle,klo,Slo,bB,Rlo,Plo,Blo,nh,fle,Nlo,Ilo,vB,qlo,jlo,Dlo,sh,mle,Glo,Olo,FB,Vlo,Xlo,zlo,Qn,gle,Qlo,Wlo,TB,Hlo,Ulo,MB,Jlo,Ylo,Klo,lh,hle,Zlo,eio,EB,oio,rio,tio,Wn,ple,aio,nio,CB,sio,lio,wB,iio,dio,cio,Hn,_le,fio,mio,AB,gio,hio,LB,pio,_io,uio,Un,ule,bio,vio,yB,Fio,Tio,xB,Mio,Eio,Cio,Jn,ble,wio,Aio,$B,Lio,yio,kB,xio,$io,kio,ih,vle,Sio,Rio,SB,Pio,Bio,Nio,Yn,Fle,Iio,qio,RB,jio,Dio,PB,Gio,Oio,Vio,Kn,Tle,Xio,zio,BB,Qio,Wio,NB,Hio,Uio,Jio,Zn,Mle,Yio,Kio,IB,Zio,edo,qB,odo,rdo,tdo,es,Ele,ado,ndo,jB,sdo,ldo,DB,ido,ddo,cdo,os,Cle,fdo,mdo,GB,gdo,hdo,OB,pdo,_do,udo,rs,wle,bdo,vdo,VB,Fdo,Tdo,XB,Mdo,Edo,Cdo,dh,Ale,wdo,Ado,zB,Ldo,ydo,xdo,ts,Lle,$do,kdo,QB,Sdo,Rdo,WB,Pdo,Bdo,Ndo,ch,yle,Ido,qdo,HB,jdo,Ddo,Gdo,as,xle,Odo,Vdo,UB,Xdo,zdo,JB,Qdo,Wdo,Hdo,ns,$le,Udo,Jdo,YB,Ydo,Kdo,KB,Zdo,eco,oco,ss,kle,rco,tco,ZB,aco,nco,eN,sco,lco,ico,fh,Sle,dco,cco,oN,fco,mco,gco,ls,Rle,hco,pco,rN,_co,uco,tN,bco,vco,Fco,is,Ple,Tco,Mco,aN,Eco,Cco,nN,wco,Aco,Lco,ds,Ble,yco,xco,sN,$co,kco,lN,Sco,Rco,Pco,mh,Nle,Bco,Nco,iN,Ico,qco,jco,cs,Ile,Dco,Gco,dN,Oco,Vco,cN,Xco,zco,Qco,fs,qle,Wco,Hco,fN,Uco,Jco,mN,Yco,Kco,Zco,ms,jle,efo,ofo,gN,rfo,tfo,hN,afo,nfo,sfo,gs,Dle,lfo,ifo,pN,dfo,cfo,_N,ffo,mfo,gfo,hs,Gle,hfo,pfo,uN,_fo,ufo,bN,bfo,vfo,Ffo,ps,Ole,Tfo,Mfo,vN,Efo,Cfo,FN,wfo,Afo,Lfo,_s,Vle,yfo,xfo,TN,$fo,kfo,MN,Sfo,Rfo,Pfo,us,Xle,Bfo,Nfo,EN,Ifo,qfo,CN,jfo,Dfo,Gfo,gh,zle,Ofo,Vfo,wN,Xfo,zfo,Qfo,bs,Qle,Wfo,Hfo,AN,Ufo,Jfo,LN,Yfo,Kfo,Zfo,hh,Wle,emo,omo,yN,rmo,tmo,amo,ph,Hle,nmo,smo,xN,lmo,imo,dmo,vs,Ule,cmo,fmo,$N,mmo,gmo,kN,hmo,pmo,_mo,Fs,Jle,umo,bmo,SN,vmo,Fmo,RN,Tmo,Mmo,Emo,Ts,Yle,Cmo,wmo,PN,Amo,Lmo,BN,ymo,xmo,$mo,_h,Kle,kmo,Smo,NN,Rmo,Pmo,Bmo,Ms,Zle,Nmo,Imo,IN,qmo,jmo,qN,Dmo,Gmo,Omo,Es,eie,Vmo,Xmo,jN,zmo,Qmo,DN,Wmo,Hmo,Umo,Cs,oie,Jmo,Ymo,GN,Kmo,Zmo,ON,ego,ogo,rgo,ws,rie,tgo,ago,VN,ngo,sgo,XN,lgo,igo,dgo,As,tie,cgo,fgo,zN,mgo,ggo,QN,hgo,pgo,_go,Ls,aie,ugo,bgo,WN,vgo,Fgo,HN,Tgo,Mgo,Ego,ys,nie,Cgo,wgo,UN,Ago,Lgo,JN,ygo,xgo,$go,uh,sie,kgo,Sgo,YN,Rgo,Pgo,Bgo,xs,lie,Ngo,Igo,KN,qgo,jgo,ZN,Dgo,Ggo,Ogo,bh,iie,Vgo,Xgo,eI,zgo,Qgo,Wgo,vh,die,Hgo,Ugo,oI,Jgo,Ygo,Kgo,Fh,cie,Zgo,eho,rI,oho,rho,tho,Th,fie,aho,nho,tI,sho,lho,iho,$s,mie,dho,cho,aI,fho,mho,nI,gho,hho,pho,Mh,gie,_ho,uho,sI,bho,vho,Fho,ks,hie,Tho,Mho,lI,Eho,Cho,iI,who,Aho,Lho,Ss,pie,yho,xho,dI,$ho,kho,cI,Sho,Rho,Pho,Rs,_ie,Bho,Nho,fI,Iho,qho,mI,jho,Dho,Gho,Ps,uie,Oho,Vho,gI,Xho,zho,hI,Qho,Who,Hho,Bs,bie,Uho,Jho,pI,Yho,Kho,_I,Zho,epo,opo,Ns,vie,rpo,tpo,uI,apo,npo,bI,spo,lpo,ipo,Eh,Fie,dpo,cpo,vI,fpo,mpo,gpo,Ch,Tie,hpo,ppo,FI,_po,upo,bpo,Is,Mie,vpo,Fpo,TI,Tpo,Mpo,MI,Epo,Cpo,wpo,qs,Eie,Apo,Lpo,EI,ypo,xpo,CI,$po,kpo,Spo,js,Cie,Rpo,Ppo,wI,Bpo,Npo,AI,Ipo,qpo,jpo,wh,wie,Dpo,Gpo,LI,Opo,Vpo,Xpo,Ah,Aie,zpo,Qpo,yI,Wpo,Hpo,Upo,Lh,Lie,Jpo,Ypo,xI,Kpo,Zpo,e_o,Ds,yie,o_o,r_o,$I,t_o,a_o,kI,n_o,s_o,l_o,Gs,xie,i_o,d_o,SI,c_o,f_o,RI,m_o,g_o,h_o,yh,$ie,p_o,__o,PI,u_o,b_o,v_o,xh,kie,F_o,T_o,BI,M_o,E_o,C_o,$h,Sie,w_o,A_o,NI,L_o,y_o,x_o,Os,Rie,$_o,k_o,II,S_o,R_o,qI,P_o,B_o,N_o,kh,Pie,I_o,q_o,jI,j_o,D_o,G_o,Sh,Bie,O_o,V_o,DI,X_o,z_o,Q_o,Vs,Nie,W_o,H_o,GI,U_o,J_o,OI,Y_o,K_o,Z_o,Xs,Iie,euo,ouo,VI,ruo,tuo,XI,auo,nuo,suo,zs,qie,luo,iuo,zI,duo,cuo,QI,fuo,muo,guo,Qs,jie,huo,puo,WI,_uo,uuo,HI,buo,vuo,Fuo,Rh,Tuo,Ph,bL,Muo,Die,Euo,dXe,Ii,Bh,Gie,vL,Cuo,Oie,wuo,cXe,Lo,FL,Auo,TL,Luo,UI,yuo,xuo,$uo,ML,kuo,Vie,Suo,Ruo,Puo,He,EL,Buo,Xie,Nuo,Iuo,Ba,quo,zie,juo,Duo,Qie,Guo,Ouo,Wie,Vuo,Xuo,zuo,J,Nh,Hie,Quo,Wuo,JI,Huo,Uuo,Juo,Ih,Uie,Yuo,Kuo,YI,Zuo,e1o,o1o,qh,Jie,r1o,t1o,KI,a1o,n1o,s1o,jh,Yie,l1o,i1o,ZI,d1o,c1o,f1o,Dh,Kie,m1o,g1o,eq,h1o,p1o,_1o,Gh,Zie,u1o,b1o,oq,v1o,F1o,T1o,Oh,ede,M1o,E1o,rq,C1o,w1o,A1o,Vh,ode,L1o,y1o,tq,x1o,$1o,k1o,Xh,rde,S1o,R1o,aq,P1o,B1o,N1o,zh,tde,I1o,q1o,nq,j1o,D1o,G1o,Qh,ade,O1o,V1o,sq,X1o,z1o,Q1o,Wh,nde,W1o,H1o,lq,U1o,J1o,Y1o,Hh,sde,K1o,Z1o,iq,e4o,o4o,r4o,Uh,lde,t4o,a4o,dq,n4o,s4o,l4o,Jh,ide,i4o,d4o,cq,c4o,f4o,m4o,Yh,dde,g4o,h4o,fq,p4o,_4o,u4o,Kh,cde,b4o,v4o,mq,F4o,T4o,M4o,Zh,fde,E4o,C4o,gq,w4o,A4o,L4o,ep,mde,y4o,x4o,hq,$4o,k4o,S4o,op,gde,R4o,P4o,pq,B4o,N4o,I4o,rp,hde,q4o,j4o,_q,D4o,G4o,O4o,tp,pde,V4o,X4o,uq,z4o,Q4o,W4o,ap,_de,H4o,U4o,bq,J4o,Y4o,K4o,np,ude,Z4o,e2o,vq,o2o,r2o,t2o,sp,bde,a2o,n2o,Fq,s2o,l2o,i2o,lp,vde,d2o,c2o,Tq,f2o,m2o,g2o,ip,Fde,h2o,p2o,Mq,_2o,u2o,b2o,dp,Tde,v2o,F2o,Eq,T2o,M2o,E2o,cp,Mde,C2o,w2o,Cq,A2o,L2o,y2o,fp,Ede,x2o,$2o,wq,k2o,S2o,R2o,mp,Cde,P2o,B2o,Aq,N2o,I2o,q2o,gp,wde,j2o,D2o,Lq,G2o,O2o,V2o,hp,Ade,X2o,z2o,yq,Q2o,W2o,H2o,pp,Lde,U2o,J2o,xq,Y2o,K2o,Z2o,_p,yde,ebo,obo,$q,rbo,tbo,abo,up,nbo,bp,sbo,vp,CL,lbo,xde,ibo,fXe,qi,Fp,$de,wL,dbo,kde,cbo,mXe,yo,AL,fbo,LL,mbo,kq,gbo,hbo,pbo,yL,_bo,Sde,ubo,bbo,vbo,Ue,xL,Fbo,Rde,Tbo,Mbo,ji,Ebo,Pde,Cbo,wbo,Bde,Abo,Lbo,ybo,he,Tp,Nde,xbo,$bo,Sq,kbo,Sbo,Rbo,Mp,Ide,Pbo,Bbo,qde,Nbo,Ibo,qbo,Ep,jde,jbo,Dbo,Rq,Gbo,Obo,Vbo,Cp,Dde,Xbo,zbo,Pq,Qbo,Wbo,Hbo,wp,Gde,Ubo,Jbo,Bq,Ybo,Kbo,Zbo,Ap,Ode,evo,ovo,Nq,rvo,tvo,avo,Lp,Vde,nvo,svo,Iq,lvo,ivo,dvo,yp,Xde,cvo,fvo,qq,mvo,gvo,hvo,xp,zde,pvo,_vo,jq,uvo,bvo,vvo,$p,Qde,Fvo,Tvo,Dq,Mvo,Evo,Cvo,kp,Wde,wvo,Avo,Gq,Lvo,yvo,xvo,Sp,Hde,$vo,kvo,Oq,Svo,Rvo,Pvo,Rp,Ude,Bvo,Nvo,Vq,Ivo,qvo,jvo,Pp,Jde,Dvo,Gvo,Xq,Ovo,Vvo,Xvo,Bp,Yde,zvo,Qvo,zq,Wvo,Hvo,Uvo,Np,Kde,Jvo,Yvo,Qq,Kvo,Zvo,e5o,Ip,Zde,o5o,r5o,Wq,t5o,a5o,n5o,qp,ece,s5o,l5o,Hq,i5o,d5o,c5o,jp,f5o,Dp,m5o,Gp,$L,g5o,oce,h5o,gXe,Di,Op,rce,kL,p5o,tce,_5o,hXe,xo,SL,u5o,Gi,b5o,Uq,v5o,F5o,Jq,T5o,M5o,E5o,RL,C5o,ace,w5o,A5o,L5o,lt,PL,y5o,nce,x5o,$5o,Oi,k5o,sce,S5o,R5o,Yq,P5o,B5o,N5o,Vp,I5o,Je,BL,q5o,lce,j5o,D5o,Na,G5o,ice,O5o,V5o,dce,X5o,z5o,cce,Q5o,W5o,H5o,y,Xp,fce,U5o,J5o,Kq,Y5o,K5o,Z5o,zp,mce,eFo,oFo,Zq,rFo,tFo,aFo,Qp,gce,nFo,sFo,ej,lFo,iFo,dFo,Wp,hce,cFo,fFo,oj,mFo,gFo,hFo,Hp,pce,pFo,_Fo,rj,uFo,bFo,vFo,Up,_ce,FFo,TFo,tj,MFo,EFo,CFo,Jp,uce,wFo,AFo,aj,LFo,yFo,xFo,Yp,bce,$Fo,kFo,nj,SFo,RFo,PFo,Kp,vce,BFo,NFo,sj,IFo,qFo,jFo,Zp,Fce,DFo,GFo,lj,OFo,VFo,XFo,e_,Tce,zFo,QFo,ij,WFo,HFo,UFo,o_,Mce,JFo,YFo,dj,KFo,ZFo,eTo,r_,Ece,oTo,rTo,cj,tTo,aTo,nTo,t_,Cce,sTo,lTo,fj,iTo,dTo,cTo,a_,wce,fTo,mTo,mj,gTo,hTo,pTo,n_,Ace,_To,uTo,gj,bTo,vTo,FTo,s_,Lce,TTo,MTo,hj,ETo,CTo,wTo,l_,yce,ATo,LTo,pj,yTo,xTo,$To,i_,xce,kTo,STo,_j,RTo,PTo,BTo,d_,$ce,NTo,ITo,uj,qTo,jTo,DTo,c_,kce,GTo,OTo,bj,VTo,XTo,zTo,f_,Sce,QTo,WTo,vj,HTo,UTo,JTo,m_,Rce,YTo,KTo,Fj,ZTo,e7o,o7o,g_,Pce,r7o,t7o,Tj,a7o,n7o,s7o,h_,Bce,l7o,i7o,Mj,d7o,c7o,f7o,p_,Nce,m7o,g7o,Ej,h7o,p7o,_7o,__,Ice,u7o,b7o,Cj,v7o,F7o,T7o,u_,qce,M7o,E7o,wj,C7o,w7o,A7o,b_,jce,L7o,y7o,Aj,x7o,$7o,k7o,v_,Dce,S7o,R7o,Lj,P7o,B7o,N7o,F_,Gce,I7o,q7o,yj,j7o,D7o,G7o,T_,Oce,O7o,V7o,xj,X7o,z7o,Q7o,M_,Vce,W7o,H7o,$j,U7o,J7o,Y7o,E_,Xce,K7o,Z7o,kj,e8o,o8o,r8o,Ws,zce,t8o,a8o,Sj,n8o,s8o,Rj,l8o,i8o,d8o,C_,Qce,c8o,f8o,Pj,m8o,g8o,h8o,w_,Wce,p8o,_8o,Bj,u8o,b8o,v8o,A_,Hce,F8o,T8o,Nj,M8o,E8o,C8o,L_,Uce,w8o,A8o,Ij,L8o,y8o,x8o,y_,Jce,$8o,k8o,qj,S8o,R8o,P8o,x_,Yce,B8o,N8o,jj,I8o,q8o,j8o,$_,Kce,D8o,G8o,Dj,O8o,V8o,X8o,k_,Zce,z8o,Q8o,Gj,W8o,H8o,U8o,S_,efe,J8o,Y8o,Oj,K8o,Z8o,eMo,R_,ofe,oMo,rMo,Vj,tMo,aMo,nMo,P_,rfe,sMo,lMo,Xj,iMo,dMo,cMo,B_,tfe,fMo,mMo,zj,gMo,hMo,pMo,N_,afe,_Mo,uMo,Qj,bMo,vMo,FMo,I_,nfe,TMo,MMo,Wj,EMo,CMo,wMo,q_,sfe,AMo,LMo,Hj,yMo,xMo,$Mo,j_,lfe,kMo,SMo,Uj,RMo,PMo,BMo,D_,ife,NMo,IMo,Jj,qMo,jMo,DMo,G_,dfe,GMo,OMo,Yj,VMo,XMo,zMo,O_,cfe,QMo,WMo,Kj,HMo,UMo,JMo,V_,ffe,YMo,KMo,Zj,ZMo,eEo,oEo,X_,mfe,rEo,tEo,eD,aEo,nEo,sEo,z_,gfe,lEo,iEo,oD,dEo,cEo,fEo,Q_,hfe,mEo,gEo,rD,hEo,pEo,_Eo,W_,pfe,uEo,bEo,tD,vEo,FEo,TEo,H_,_fe,MEo,EEo,aD,CEo,wEo,AEo,U_,ufe,LEo,yEo,nD,xEo,$Eo,kEo,J_,bfe,SEo,REo,sD,PEo,BEo,NEo,Y_,vfe,IEo,qEo,lD,jEo,DEo,GEo,K_,Ffe,OEo,VEo,iD,XEo,zEo,QEo,Z_,Tfe,WEo,HEo,dD,UEo,JEo,YEo,eu,Mfe,KEo,ZEo,cD,eCo,oCo,rCo,ou,Efe,tCo,aCo,fD,nCo,sCo,lCo,ru,Cfe,iCo,dCo,mD,cCo,fCo,mCo,tu,wfe,gCo,hCo,gD,pCo,_Co,uCo,au,Afe,bCo,vCo,hD,FCo,TCo,MCo,nu,Lfe,ECo,CCo,pD,wCo,ACo,LCo,su,yfe,yCo,xCo,_D,$Co,kCo,SCo,lu,xfe,RCo,PCo,uD,BCo,NCo,ICo,iu,$fe,qCo,jCo,bD,DCo,GCo,OCo,du,kfe,VCo,XCo,vD,zCo,QCo,WCo,cu,Sfe,HCo,UCo,FD,JCo,YCo,KCo,fu,Rfe,ZCo,e3o,TD,o3o,r3o,t3o,mu,Pfe,a3o,n3o,MD,s3o,l3o,i3o,gu,Bfe,d3o,c3o,ED,f3o,m3o,g3o,hu,Nfe,h3o,p3o,CD,_3o,u3o,b3o,pu,Ife,v3o,F3o,wD,T3o,M3o,E3o,_u,qfe,C3o,w3o,AD,A3o,L3o,y3o,uu,jfe,x3o,$3o,LD,k3o,S3o,R3o,bu,Dfe,P3o,B3o,yD,N3o,I3o,q3o,vu,Gfe,j3o,D3o,xD,G3o,O3o,V3o,Fu,Ofe,X3o,z3o,$D,Q3o,W3o,H3o,Tu,Vfe,U3o,J3o,kD,Y3o,K3o,Z3o,Mu,Xfe,e0o,o0o,SD,r0o,t0o,a0o,Eu,zfe,n0o,s0o,RD,l0o,i0o,d0o,Cu,Qfe,c0o,f0o,PD,m0o,g0o,h0o,wu,Wfe,p0o,_0o,BD,u0o,b0o,v0o,Au,Hfe,F0o,T0o,ND,M0o,E0o,C0o,Lu,Ufe,w0o,A0o,ID,L0o,y0o,x0o,yu,Jfe,$0o,k0o,qD,S0o,R0o,P0o,xu,Yfe,B0o,N0o,jD,I0o,q0o,j0o,$u,Kfe,D0o,G0o,DD,O0o,V0o,X0o,ku,Zfe,z0o,Q0o,GD,W0o,H0o,U0o,Su,eme,J0o,Y0o,OD,K0o,Z0o,ewo,Ru,ome,owo,rwo,VD,two,awo,nwo,Pu,rme,swo,lwo,XD,iwo,dwo,cwo,Bu,tme,fwo,mwo,zD,gwo,hwo,pwo,Nu,ame,_wo,uwo,QD,bwo,vwo,Fwo,Iu,nme,Two,Mwo,WD,Ewo,Cwo,wwo,qu,sme,Awo,Lwo,HD,ywo,xwo,$wo,ju,lme,kwo,Swo,UD,Rwo,Pwo,Bwo,Du,ime,Nwo,Iwo,JD,qwo,jwo,Dwo,Gu,dme,Gwo,Owo,YD,Vwo,Xwo,zwo,Ou,cme,Qwo,Wwo,KD,Hwo,Uwo,Jwo,Vu,fme,Ywo,Kwo,ZD,Zwo,eAo,oAo,Xu,mme,rAo,tAo,eG,aAo,nAo,sAo,zu,gme,lAo,iAo,oG,dAo,cAo,fAo,Qu,hme,mAo,gAo,rG,hAo,pAo,_Ao,Wu,uAo,pme,bAo,vAo,_me,FAo,TAo,Hu,pXe,Vi,Uu,ume,NL,MAo,bme,EAo,_Xe,$o,IL,CAo,Xi,wAo,tG,AAo,LAo,aG,yAo,xAo,$Ao,qL,kAo,vme,SAo,RAo,PAo,it,jL,BAo,Fme,NAo,IAo,zi,qAo,Tme,jAo,DAo,nG,GAo,OAo,VAo,Ju,XAo,Ye,DL,zAo,Mme,QAo,WAo,Ia,HAo,Eme,UAo,JAo,Cme,YAo,KAo,wme,ZAo,e6o,o6o,G,Yu,Ame,r6o,t6o,sG,a6o,n6o,s6o,Ku,Lme,l6o,i6o,lG,d6o,c6o,f6o,Zu,yme,m6o,g6o,iG,h6o,p6o,_6o,e1,xme,u6o,b6o,dG,v6o,F6o,T6o,o1,$me,M6o,E6o,cG,C6o,w6o,A6o,r1,kme,L6o,y6o,fG,x6o,$6o,k6o,t1,Sme,S6o,R6o,mG,P6o,B6o,N6o,a1,Rme,I6o,q6o,gG,j6o,D6o,G6o,n1,Pme,O6o,V6o,hG,X6o,z6o,Q6o,s1,Bme,W6o,H6o,pG,U6o,J6o,Y6o,l1,Nme,K6o,Z6o,_G,eLo,oLo,rLo,i1,Ime,tLo,aLo,uG,nLo,sLo,lLo,d1,qme,iLo,dLo,bG,cLo,fLo,mLo,c1,jme,gLo,hLo,vG,pLo,_Lo,uLo,f1,Dme,bLo,vLo,FG,FLo,TLo,MLo,m1,Gme,ELo,CLo,TG,wLo,ALo,LLo,g1,Ome,yLo,xLo,MG,$Lo,kLo,SLo,h1,Vme,RLo,PLo,EG,BLo,NLo,ILo,p1,Xme,qLo,jLo,CG,DLo,GLo,OLo,_1,zme,VLo,XLo,wG,zLo,QLo,WLo,u1,Qme,HLo,ULo,AG,JLo,YLo,KLo,b1,Wme,ZLo,eyo,LG,oyo,ryo,tyo,v1,Hme,ayo,nyo,yG,syo,lyo,iyo,F1,Ume,dyo,cyo,xG,fyo,myo,gyo,T1,Jme,hyo,pyo,$G,_yo,uyo,byo,M1,Yme,vyo,Fyo,kG,Tyo,Myo,Eyo,E1,Kme,Cyo,wyo,SG,Ayo,Lyo,yyo,C1,Zme,xyo,$yo,RG,kyo,Syo,Ryo,w1,ege,Pyo,Byo,PG,Nyo,Iyo,qyo,A1,oge,jyo,Dyo,BG,Gyo,Oyo,Vyo,L1,rge,Xyo,zyo,NG,Qyo,Wyo,Hyo,y1,tge,Uyo,Jyo,IG,Yyo,Kyo,Zyo,x1,age,e9o,o9o,qG,r9o,t9o,a9o,$1,nge,n9o,s9o,jG,l9o,i9o,d9o,k1,sge,c9o,f9o,DG,m9o,g9o,h9o,S1,lge,p9o,_9o,GG,u9o,b9o,v9o,R1,ige,F9o,T9o,OG,M9o,E9o,C9o,P1,dge,w9o,A9o,VG,L9o,y9o,x9o,B1,cge,$9o,k9o,XG,S9o,R9o,P9o,N1,fge,B9o,N9o,zG,I9o,q9o,j9o,I1,mge,D9o,G9o,QG,O9o,V9o,X9o,q1,gge,z9o,Q9o,WG,W9o,H9o,U9o,j1,hge,J9o,Y9o,HG,K9o,Z9o,exo,D1,pge,oxo,rxo,UG,txo,axo,nxo,G1,_ge,sxo,lxo,JG,ixo,dxo,cxo,O1,fxo,uge,mxo,gxo,bge,hxo,pxo,V1,uXe,Qi,X1,vge,GL,_xo,Fge,uxo,bXe,ko,OL,bxo,Wi,vxo,YG,Fxo,Txo,KG,Mxo,Exo,Cxo,VL,wxo,Tge,Axo,Lxo,yxo,dt,XL,xxo,Mge,$xo,kxo,Hi,Sxo,Ege,Rxo,Pxo,ZG,Bxo,Nxo,Ixo,z1,qxo,Ke,zL,jxo,Cge,Dxo,Gxo,qa,Oxo,wge,Vxo,Xxo,Age,zxo,Qxo,Lge,Wxo,Hxo,Uxo,z,Q1,yge,Jxo,Yxo,eO,Kxo,Zxo,e$o,W1,xge,o$o,r$o,oO,t$o,a$o,n$o,H1,$ge,s$o,l$o,rO,i$o,d$o,c$o,U1,kge,f$o,m$o,tO,g$o,h$o,p$o,J1,Sge,_$o,u$o,aO,b$o,v$o,F$o,Y1,Rge,T$o,M$o,nO,E$o,C$o,w$o,K1,Pge,A$o,L$o,sO,y$o,x$o,$$o,Z1,Bge,k$o,S$o,lO,R$o,P$o,B$o,e4,Nge,N$o,I$o,iO,q$o,j$o,D$o,o4,Ige,G$o,O$o,dO,V$o,X$o,z$o,r4,qge,Q$o,W$o,cO,H$o,U$o,J$o,t4,jge,Y$o,K$o,fO,Z$o,eko,oko,a4,Dge,rko,tko,mO,ako,nko,sko,n4,Gge,lko,iko,gO,dko,cko,fko,s4,Oge,mko,gko,hO,hko,pko,_ko,l4,Vge,uko,bko,pO,vko,Fko,Tko,i4,Xge,Mko,Eko,_O,Cko,wko,Ako,d4,zge,Lko,yko,uO,xko,$ko,kko,c4,Qge,Sko,Rko,bO,Pko,Bko,Nko,f4,Wge,Iko,qko,vO,jko,Dko,Gko,m4,Hge,Oko,Vko,FO,Xko,zko,Qko,g4,Uge,Wko,Hko,TO,Uko,Jko,Yko,h4,Jge,Kko,Zko,MO,eSo,oSo,rSo,p4,Yge,tSo,aSo,EO,nSo,sSo,lSo,_4,Kge,iSo,dSo,CO,cSo,fSo,mSo,u4,Zge,gSo,hSo,wO,pSo,_So,uSo,b4,ehe,bSo,vSo,AO,FSo,TSo,MSo,v4,ohe,ESo,CSo,LO,wSo,ASo,LSo,F4,rhe,ySo,xSo,yO,$So,kSo,SSo,T4,the,RSo,PSo,xO,BSo,NSo,ISo,M4,ahe,qSo,jSo,$O,DSo,GSo,OSo,E4,nhe,VSo,XSo,kO,zSo,QSo,WSo,C4,she,HSo,USo,SO,JSo,YSo,KSo,w4,lhe,ZSo,eRo,RO,oRo,rRo,tRo,A4,ihe,aRo,nRo,PO,sRo,lRo,iRo,L4,dhe,dRo,cRo,BO,fRo,mRo,gRo,y4,che,hRo,pRo,NO,_Ro,uRo,bRo,x4,fhe,vRo,FRo,IO,TRo,MRo,ERo,$4,mhe,CRo,wRo,qO,ARo,LRo,yRo,k4,ghe,xRo,$Ro,jO,kRo,SRo,RRo,S4,PRo,hhe,BRo,NRo,phe,IRo,qRo,R4,vXe,Ui,P4,_he,QL,jRo,uhe,DRo,FXe,So,WL,GRo,Ji,ORo,DO,VRo,XRo,GO,zRo,QRo,WRo,HL,HRo,bhe,URo,JRo,YRo,ct,UL,KRo,vhe,ZRo,ePo,Yi,oPo,Fhe,rPo,tPo,OO,aPo,nPo,sPo,B4,lPo,Ze,JL,iPo,The,dPo,cPo,ja,fPo,Mhe,mPo,gPo,Ehe,hPo,pPo,Che,_Po,uPo,bPo,W,N4,whe,vPo,FPo,VO,TPo,MPo,EPo,I4,Ahe,CPo,wPo,XO,APo,LPo,yPo,q4,Lhe,xPo,$Po,zO,kPo,SPo,RPo,j4,yhe,PPo,BPo,QO,NPo,IPo,qPo,D4,xhe,jPo,DPo,WO,GPo,OPo,VPo,G4,$he,XPo,zPo,HO,QPo,WPo,HPo,O4,khe,UPo,JPo,UO,YPo,KPo,ZPo,V4,She,eBo,oBo,JO,rBo,tBo,aBo,X4,Rhe,nBo,sBo,YO,lBo,iBo,dBo,z4,Phe,cBo,fBo,KO,mBo,gBo,hBo,Q4,Bhe,pBo,_Bo,ZO,uBo,bBo,vBo,W4,Nhe,FBo,TBo,eV,MBo,EBo,CBo,H4,Ihe,wBo,ABo,oV,LBo,yBo,xBo,U4,qhe,$Bo,kBo,rV,SBo,RBo,PBo,J4,jhe,BBo,NBo,tV,IBo,qBo,jBo,Y4,Dhe,DBo,GBo,aV,OBo,VBo,XBo,K4,Ghe,zBo,QBo,nV,WBo,HBo,UBo,Z4,Ohe,JBo,YBo,sV,KBo,ZBo,eNo,e2,Vhe,oNo,rNo,lV,tNo,aNo,nNo,o2,Xhe,sNo,lNo,iV,iNo,dNo,cNo,r2,zhe,fNo,mNo,dV,gNo,hNo,pNo,t2,Qhe,_No,uNo,cV,bNo,vNo,FNo,a2,Whe,TNo,MNo,fV,ENo,CNo,wNo,n2,Hhe,ANo,LNo,mV,yNo,xNo,$No,s2,Uhe,kNo,SNo,gV,RNo,PNo,BNo,l2,Jhe,NNo,INo,hV,qNo,jNo,DNo,i2,Yhe,GNo,ONo,pV,VNo,XNo,zNo,d2,Khe,QNo,WNo,_V,HNo,UNo,JNo,c2,Zhe,YNo,KNo,uV,ZNo,eIo,oIo,f2,epe,rIo,tIo,bV,aIo,nIo,sIo,m2,ope,lIo,iIo,vV,dIo,cIo,fIo,g2,rpe,mIo,gIo,FV,hIo,pIo,_Io,h2,tpe,uIo,bIo,TV,vIo,FIo,TIo,p2,ape,MIo,EIo,npe,CIo,wIo,AIo,_2,spe,LIo,yIo,MV,xIo,$Io,kIo,u2,lpe,SIo,RIo,EV,PIo,BIo,NIo,b2,ipe,IIo,qIo,CV,jIo,DIo,GIo,v2,dpe,OIo,VIo,wV,XIo,zIo,QIo,F2,WIo,cpe,HIo,UIo,fpe,JIo,YIo,T2,TXe,Ki,M2,mpe,YL,KIo,gpe,ZIo,MXe,Ro,KL,eqo,Zi,oqo,AV,rqo,tqo,LV,aqo,nqo,sqo,ZL,lqo,hpe,iqo,dqo,cqo,ft,ey,fqo,ppe,mqo,gqo,ed,hqo,_pe,pqo,_qo,yV,uqo,bqo,vqo,E2,Fqo,eo,oy,Tqo,upe,Mqo,Eqo,Da,Cqo,bpe,wqo,Aqo,vpe,Lqo,yqo,Fpe,xqo,$qo,kqo,pe,C2,Tpe,Sqo,Rqo,xV,Pqo,Bqo,Nqo,w2,Mpe,Iqo,qqo,$V,jqo,Dqo,Gqo,A2,Epe,Oqo,Vqo,kV,Xqo,zqo,Qqo,L2,Cpe,Wqo,Hqo,SV,Uqo,Jqo,Yqo,y2,wpe,Kqo,Zqo,RV,ejo,ojo,rjo,x2,Ape,tjo,ajo,PV,njo,sjo,ljo,$2,Lpe,ijo,djo,BV,cjo,fjo,mjo,k2,ype,gjo,hjo,NV,pjo,_jo,ujo,S2,xpe,bjo,vjo,IV,Fjo,Tjo,Mjo,R2,$pe,Ejo,Cjo,qV,wjo,Ajo,Ljo,P2,kpe,yjo,xjo,jV,$jo,kjo,Sjo,B2,Spe,Rjo,Pjo,DV,Bjo,Njo,Ijo,N2,Rpe,qjo,jjo,GV,Djo,Gjo,Ojo,I2,Ppe,Vjo,Xjo,OV,zjo,Qjo,Wjo,q2,Bpe,Hjo,Ujo,VV,Jjo,Yjo,Kjo,j2,Npe,Zjo,eDo,XV,oDo,rDo,tDo,D2,Ipe,aDo,nDo,zV,sDo,lDo,iDo,G2,qpe,dDo,cDo,QV,fDo,mDo,gDo,O2,hDo,jpe,pDo,_Do,Dpe,uDo,bDo,V2,EXe,od,X2,Gpe,ry,vDo,Ope,FDo,CXe,Po,ty,TDo,rd,MDo,WV,EDo,CDo,HV,wDo,ADo,LDo,ay,yDo,Vpe,xDo,$Do,kDo,mt,ny,SDo,Xpe,RDo,PDo,td,BDo,zpe,NDo,IDo,UV,qDo,jDo,DDo,z2,GDo,oo,sy,ODo,Qpe,VDo,XDo,Ga,zDo,Wpe,QDo,WDo,Hpe,HDo,UDo,Upe,JDo,YDo,KDo,I,Q2,Jpe,ZDo,eGo,JV,oGo,rGo,tGo,W2,Ype,aGo,nGo,YV,sGo,lGo,iGo,H2,Kpe,dGo,cGo,KV,fGo,mGo,gGo,U2,Zpe,hGo,pGo,ZV,_Go,uGo,bGo,J2,e_e,vGo,FGo,eX,TGo,MGo,EGo,Y2,o_e,CGo,wGo,oX,AGo,LGo,yGo,K2,r_e,xGo,$Go,rX,kGo,SGo,RGo,Z2,t_e,PGo,BGo,tX,NGo,IGo,qGo,eb,a_e,jGo,DGo,aX,GGo,OGo,VGo,ob,n_e,XGo,zGo,nX,QGo,WGo,HGo,rb,s_e,UGo,JGo,sX,YGo,KGo,ZGo,tb,l_e,eOo,oOo,lX,rOo,tOo,aOo,ab,i_e,nOo,sOo,iX,lOo,iOo,dOo,nb,d_e,cOo,fOo,dX,mOo,gOo,hOo,sb,c_e,pOo,_Oo,cX,uOo,bOo,vOo,lb,f_e,FOo,TOo,fX,MOo,EOo,COo,ib,m_e,wOo,AOo,mX,LOo,yOo,xOo,db,g_e,$Oo,kOo,gX,SOo,ROo,POo,cb,h_e,BOo,NOo,hX,IOo,qOo,jOo,fb,p_e,DOo,GOo,pX,OOo,VOo,XOo,mb,__e,zOo,QOo,_X,WOo,HOo,UOo,gb,u_e,JOo,YOo,uX,KOo,ZOo,eVo,hb,b_e,oVo,rVo,bX,tVo,aVo,nVo,pb,v_e,sVo,lVo,vX,iVo,dVo,cVo,_b,F_e,fVo,mVo,FX,gVo,hVo,pVo,ub,T_e,_Vo,uVo,TX,bVo,vVo,FVo,bb,M_e,TVo,MVo,MX,EVo,CVo,wVo,vb,E_e,AVo,LVo,EX,yVo,xVo,$Vo,Fb,C_e,kVo,SVo,CX,RVo,PVo,BVo,Tb,w_e,NVo,IVo,wX,qVo,jVo,DVo,Mb,A_e,GVo,OVo,AX,VVo,XVo,zVo,Eb,L_e,QVo,WVo,LX,HVo,UVo,JVo,Cb,y_e,YVo,KVo,yX,ZVo,eXo,oXo,wb,x_e,rXo,tXo,xX,aXo,nXo,sXo,Ab,$_e,lXo,iXo,$X,dXo,cXo,fXo,Lb,k_e,mXo,gXo,kX,hXo,pXo,_Xo,yb,S_e,uXo,bXo,SX,vXo,FXo,TXo,xb,R_e,MXo,EXo,RX,CXo,wXo,AXo,$b,P_e,LXo,yXo,PX,xXo,$Xo,kXo,kb,B_e,SXo,RXo,BX,PXo,BXo,NXo,Sb,N_e,IXo,qXo,NX,jXo,DXo,GXo,Rb,I_e,OXo,VXo,IX,XXo,zXo,QXo,Pb,q_e,WXo,HXo,qX,UXo,JXo,YXo,Bb,j_e,KXo,ZXo,jX,ezo,ozo,rzo,Nb,D_e,tzo,azo,DX,nzo,szo,lzo,Ib,G_e,izo,dzo,GX,czo,fzo,mzo,qb,O_e,gzo,hzo,OX,pzo,_zo,uzo,jb,V_e,bzo,vzo,VX,Fzo,Tzo,Mzo,Db,X_e,Ezo,Czo,XX,wzo,Azo,Lzo,Gb,z_e,yzo,xzo,zX,$zo,kzo,Szo,Ob,Rzo,Q_e,Pzo,Bzo,W_e,Nzo,Izo,Vb,wXe,ad,Xb,H_e,ly,qzo,U_e,jzo,AXe,Bo,iy,Dzo,nd,Gzo,QX,Ozo,Vzo,WX,Xzo,zzo,Qzo,dy,Wzo,J_e,Hzo,Uzo,Jzo,gt,cy,Yzo,Y_e,Kzo,Zzo,sd,eQo,K_e,oQo,rQo,HX,tQo,aQo,nQo,zb,sQo,ro,fy,lQo,Z_e,iQo,dQo,Oa,cQo,eue,fQo,mQo,oue,gQo,hQo,rue,pQo,_Qo,uQo,Z,Qb,tue,bQo,vQo,UX,FQo,TQo,MQo,Wb,aue,EQo,CQo,JX,wQo,AQo,LQo,Hb,nue,yQo,xQo,YX,$Qo,kQo,SQo,Ub,sue,RQo,PQo,KX,BQo,NQo,IQo,Jb,lue,qQo,jQo,ZX,DQo,GQo,OQo,Yb,iue,VQo,XQo,ez,zQo,QQo,WQo,Kb,due,HQo,UQo,oz,JQo,YQo,KQo,Zb,cue,ZQo,eWo,rz,oWo,rWo,tWo,ev,fue,aWo,nWo,tz,sWo,lWo,iWo,ov,mue,dWo,cWo,az,fWo,mWo,gWo,rv,gue,hWo,pWo,nz,_Wo,uWo,bWo,tv,hue,vWo,FWo,sz,TWo,MWo,EWo,av,pue,CWo,wWo,lz,AWo,LWo,yWo,nv,_ue,xWo,$Wo,iz,kWo,SWo,RWo,sv,uue,PWo,BWo,dz,NWo,IWo,qWo,lv,bue,jWo,DWo,cz,GWo,OWo,VWo,iv,vue,XWo,zWo,fz,QWo,WWo,HWo,dv,Fue,UWo,JWo,mz,YWo,KWo,ZWo,cv,Tue,eHo,oHo,gz,rHo,tHo,aHo,fv,Mue,nHo,sHo,hz,lHo,iHo,dHo,mv,Eue,cHo,fHo,pz,mHo,gHo,hHo,gv,Cue,pHo,_Ho,_z,uHo,bHo,vHo,hv,wue,FHo,THo,uz,MHo,EHo,CHo,pv,Aue,wHo,AHo,bz,LHo,yHo,xHo,_v,Lue,$Ho,kHo,vz,SHo,RHo,PHo,uv,yue,BHo,NHo,Fz,IHo,qHo,jHo,bv,xue,DHo,GHo,Tz,OHo,VHo,XHo,vv,$ue,zHo,QHo,Mz,WHo,HHo,UHo,Fv,kue,JHo,YHo,Ez,KHo,ZHo,eUo,Tv,Sue,oUo,rUo,Cz,tUo,aUo,nUo,Mv,sUo,Rue,lUo,iUo,Pue,dUo,cUo,Ev,LXe,ld,Cv,Bue,my,fUo,Nue,mUo,yXe,No,gy,gUo,id,hUo,wz,pUo,_Uo,Az,uUo,bUo,vUo,hy,FUo,Iue,TUo,MUo,EUo,ht,py,CUo,que,wUo,AUo,dd,LUo,jue,yUo,xUo,Lz,$Uo,kUo,SUo,wv,RUo,to,_y,PUo,Due,BUo,NUo,Va,IUo,Gue,qUo,jUo,Oue,DUo,GUo,Vue,OUo,VUo,XUo,Io,Av,Xue,zUo,QUo,yz,WUo,HUo,UUo,Lv,zue,JUo,YUo,xz,KUo,ZUo,eJo,yv,Que,oJo,rJo,$z,tJo,aJo,nJo,xv,Wue,sJo,lJo,kz,iJo,dJo,cJo,$v,Hue,fJo,mJo,Sz,gJo,hJo,pJo,kv,Uue,_Jo,uJo,Rz,bJo,vJo,FJo,Sv,TJo,Jue,MJo,EJo,Yue,CJo,wJo,Rv,xXe,cd,Pv,Kue,uy,AJo,Zue,LJo,$Xe,qo,by,yJo,fd,xJo,Pz,$Jo,kJo,Bz,SJo,RJo,PJo,vy,BJo,e1e,NJo,IJo,qJo,pt,Fy,jJo,o1e,DJo,GJo,md,OJo,r1e,VJo,XJo,Nz,zJo,QJo,WJo,Bv,HJo,ao,Ty,UJo,t1e,JJo,YJo,Xa,KJo,a1e,ZJo,eYo,n1e,oYo,rYo,s1e,tYo,aYo,nYo,U,Nv,l1e,sYo,lYo,Iz,iYo,dYo,cYo,Iv,i1e,fYo,mYo,qz,gYo,hYo,pYo,qv,d1e,_Yo,uYo,jz,bYo,vYo,FYo,jv,c1e,TYo,MYo,Dz,EYo,CYo,wYo,Dv,f1e,AYo,LYo,Gz,yYo,xYo,$Yo,Gv,m1e,kYo,SYo,Oz,RYo,PYo,BYo,Ov,g1e,NYo,IYo,Vz,qYo,jYo,DYo,Vv,h1e,GYo,OYo,Xz,VYo,XYo,zYo,Xv,p1e,QYo,WYo,zz,HYo,UYo,JYo,zv,_1e,YYo,KYo,Qz,ZYo,eKo,oKo,Qv,u1e,rKo,tKo,Wz,aKo,nKo,sKo,Wv,b1e,lKo,iKo,Hz,dKo,cKo,fKo,Hv,v1e,mKo,gKo,Uz,hKo,pKo,_Ko,Uv,F1e,uKo,bKo,Jz,vKo,FKo,TKo,Jv,T1e,MKo,EKo,Yz,CKo,wKo,AKo,Yv,M1e,LKo,yKo,Kz,xKo,$Ko,kKo,Kv,E1e,SKo,RKo,Zz,PKo,BKo,NKo,Zv,C1e,IKo,qKo,eQ,jKo,DKo,GKo,e5,w1e,OKo,VKo,oQ,XKo,zKo,QKo,o5,A1e,WKo,HKo,rQ,UKo,JKo,YKo,r5,L1e,KKo,ZKo,tQ,eZo,oZo,rZo,t5,y1e,tZo,aZo,aQ,nZo,sZo,lZo,a5,x1e,iZo,dZo,nQ,cZo,fZo,mZo,n5,$1e,gZo,hZo,sQ,pZo,_Zo,uZo,s5,k1e,bZo,vZo,lQ,FZo,TZo,MZo,l5,S1e,EZo,CZo,iQ,wZo,AZo,LZo,i5,R1e,yZo,xZo,dQ,$Zo,kZo,SZo,d5,P1e,RZo,PZo,cQ,BZo,NZo,IZo,c5,B1e,qZo,jZo,fQ,DZo,GZo,OZo,f5,N1e,VZo,XZo,mQ,zZo,QZo,WZo,m5,I1e,HZo,UZo,gQ,JZo,YZo,KZo,g5,q1e,ZZo,eer,hQ,oer,rer,ter,h5,j1e,aer,ner,pQ,ser,ler,ier,p5,D1e,der,cer,_Q,fer,mer,ger,_5,G1e,her,per,uQ,_er,uer,ber,u5,O1e,ver,Fer,bQ,Ter,Mer,Eer,b5,Cer,V1e,wer,Aer,X1e,Ler,yer,v5,kXe,gd,F5,z1e,My,xer,Q1e,$er,SXe,jo,Ey,ker,hd,Ser,vQ,Rer,Per,FQ,Ber,Ner,Ier,Cy,qer,W1e,jer,Der,Ger,_t,wy,Oer,H1e,Ver,Xer,pd,zer,U1e,Qer,Wer,TQ,Her,Uer,Jer,T5,Yer,no,Ay,Ker,J1e,Zer,eor,za,oor,Y1e,ror,tor,K1e,aor,nor,Z1e,sor,lor,ior,V,M5,e4e,dor,cor,MQ,mor,gor,hor,E5,o4e,por,_or,EQ,uor,bor,vor,C5,r4e,For,Tor,CQ,Mor,Eor,Cor,w5,t4e,wor,Aor,wQ,Lor,yor,xor,A5,a4e,$or,kor,AQ,Sor,Ror,Por,L5,n4e,Bor,Nor,LQ,Ior,qor,jor,y5,s4e,Dor,Gor,yQ,Oor,Vor,Xor,x5,l4e,zor,Qor,xQ,Wor,Hor,Uor,$5,i4e,Jor,Yor,$Q,Kor,Zor,err,k5,d4e,orr,rrr,kQ,trr,arr,nrr,S5,c4e,srr,lrr,SQ,irr,drr,crr,R5,f4e,frr,mrr,RQ,grr,hrr,prr,P5,m4e,_rr,urr,PQ,brr,vrr,Frr,B5,g4e,Trr,Mrr,BQ,Err,Crr,wrr,N5,h4e,Arr,Lrr,NQ,yrr,xrr,$rr,I5,p4e,krr,Srr,IQ,Rrr,Prr,Brr,q5,_4e,Nrr,Irr,qQ,qrr,jrr,Drr,j5,u4e,Grr,Orr,jQ,Vrr,Xrr,zrr,D5,b4e,Qrr,Wrr,DQ,Hrr,Urr,Jrr,G5,v4e,Yrr,Krr,GQ,Zrr,etr,otr,O5,F4e,rtr,ttr,OQ,atr,ntr,str,V5,T4e,ltr,itr,VQ,dtr,ctr,ftr,X5,M4e,mtr,gtr,XQ,htr,ptr,_tr,z5,E4e,utr,btr,zQ,vtr,Ftr,Ttr,Q5,C4e,Mtr,Etr,QQ,Ctr,wtr,Atr,W5,w4e,Ltr,ytr,WQ,xtr,$tr,ktr,H5,A4e,Str,Rtr,HQ,Ptr,Btr,Ntr,U5,L4e,Itr,qtr,UQ,jtr,Dtr,Gtr,J5,y4e,Otr,Vtr,JQ,Xtr,ztr,Qtr,Y5,x4e,Wtr,Htr,YQ,Utr,Jtr,Ytr,K5,$4e,Ktr,Ztr,KQ,ear,oar,rar,Z5,k4e,tar,aar,ZQ,nar,sar,lar,eF,S4e,iar,dar,eW,car,far,mar,oF,R4e,gar,har,oW,par,_ar,uar,rF,P4e,bar,Far,rW,Tar,Mar,Ear,tF,B4e,Car,war,tW,Aar,Lar,yar,aF,N4e,xar,$ar,aW,kar,Sar,Rar,nF,I4e,Par,Bar,nW,Nar,Iar,qar,sF,q4e,jar,Dar,sW,Gar,Oar,Var,lF,j4e,Xar,zar,lW,Qar,War,Har,iF,D4e,Uar,Jar,iW,Yar,Kar,Zar,dF,G4e,enr,onr,dW,rnr,tnr,anr,cF,nnr,O4e,snr,lnr,V4e,inr,dnr,fF,RXe,_d,mF,X4e,Ly,cnr,z4e,fnr,PXe,Do,yy,mnr,ud,gnr,cW,hnr,pnr,fW,_nr,unr,bnr,xy,vnr,Q4e,Fnr,Tnr,Mnr,ut,$y,Enr,W4e,Cnr,wnr,bd,Anr,H4e,Lnr,ynr,mW,xnr,$nr,knr,gF,Snr,so,ky,Rnr,U4e,Pnr,Bnr,Qa,Nnr,J4e,Inr,qnr,Y4e,jnr,Dnr,K4e,Gnr,Onr,Vnr,Z4e,hF,e2e,Xnr,znr,gW,Qnr,Wnr,Hnr,pF,Unr,o2e,Jnr,Ynr,r2e,Knr,Znr,_F,BXe,vd,uF,t2e,Sy,esr,a2e,osr,NXe,Go,Ry,rsr,Fd,tsr,hW,asr,nsr,pW,ssr,lsr,isr,Py,dsr,n2e,csr,fsr,msr,bt,By,gsr,s2e,hsr,psr,Td,_sr,l2e,usr,bsr,_W,vsr,Fsr,Tsr,bF,Msr,lo,Ny,Esr,i2e,Csr,wsr,Wa,Asr,d2e,Lsr,ysr,c2e,xsr,$sr,f2e,ksr,Ssr,Rsr,_e,vF,m2e,Psr,Bsr,uW,Nsr,Isr,qsr,FF,g2e,jsr,Dsr,bW,Gsr,Osr,Vsr,TF,h2e,Xsr,zsr,vW,Qsr,Wsr,Hsr,MF,p2e,Usr,Jsr,FW,Ysr,Ksr,Zsr,Hs,_2e,elr,olr,TW,rlr,tlr,MW,alr,nlr,slr,EF,u2e,llr,ilr,EW,dlr,clr,flr,Us,b2e,mlr,glr,CW,hlr,plr,wW,_lr,ulr,blr,CF,v2e,vlr,Flr,AW,Tlr,Mlr,Elr,wF,F2e,Clr,wlr,LW,Alr,Llr,ylr,vt,T2e,xlr,$lr,yW,klr,Slr,xW,Rlr,Plr,$W,Blr,Nlr,Ilr,AF,M2e,qlr,jlr,kW,Dlr,Glr,Olr,LF,E2e,Vlr,Xlr,SW,zlr,Qlr,Wlr,yF,C2e,Hlr,Ulr,RW,Jlr,Ylr,Klr,xF,w2e,Zlr,eir,PW,oir,rir,tir,$F,A2e,air,nir,BW,sir,lir,iir,kF,L2e,dir,cir,NW,fir,mir,gir,SF,y2e,hir,pir,IW,_ir,uir,bir,RF,vir,x2e,Fir,Tir,$2e,Mir,Eir,PF,IXe,Md,BF,k2e,Iy,Cir,S2e,wir,qXe,Oo,qy,Air,Ed,Lir,qW,yir,xir,jW,$ir,kir,Sir,jy,Rir,R2e,Pir,Bir,Nir,Ft,Dy,Iir,P2e,qir,jir,Cd,Dir,B2e,Gir,Oir,DW,Vir,Xir,zir,NF,Qir,io,Gy,Wir,N2e,Hir,Uir,Ha,Jir,I2e,Yir,Kir,q2e,Zir,edr,j2e,odr,rdr,tdr,D2e,IF,G2e,adr,ndr,GW,sdr,ldr,idr,qF,ddr,O2e,cdr,fdr,V2e,mdr,gdr,jF,jXe,wd,DF,X2e,Oy,hdr,z2e,pdr,DXe,Vo,Vy,_dr,Ad,udr,OW,bdr,vdr,VW,Fdr,Tdr,Mdr,Xy,Edr,Q2e,Cdr,wdr,Adr,Tt,zy,Ldr,W2e,ydr,xdr,Ld,$dr,H2e,kdr,Sdr,XW,Rdr,Pdr,Bdr,GF,Ndr,co,Qy,Idr,U2e,qdr,jdr,Ua,Ddr,J2e,Gdr,Odr,Y2e,Vdr,Xdr,K2e,zdr,Qdr,Wdr,Z2e,OF,ebe,Hdr,Udr,zW,Jdr,Ydr,Kdr,VF,Zdr,obe,ecr,ocr,rbe,rcr,tcr,XF,GXe,yd,zF,tbe,Wy,acr,abe,ncr,OXe,Xo,Hy,scr,xd,lcr,QW,icr,dcr,WW,ccr,fcr,mcr,Uy,gcr,nbe,hcr,pcr,_cr,Mt,Jy,ucr,sbe,bcr,vcr,$d,Fcr,lbe,Tcr,Mcr,HW,Ecr,Ccr,wcr,QF,Acr,fo,Yy,Lcr,ibe,ycr,xcr,Ja,$cr,dbe,kcr,Scr,cbe,Rcr,Pcr,fbe,Bcr,Ncr,Icr,Pe,WF,mbe,qcr,jcr,UW,Dcr,Gcr,Ocr,HF,gbe,Vcr,Xcr,JW,zcr,Qcr,Wcr,UF,hbe,Hcr,Ucr,YW,Jcr,Ycr,Kcr,JF,pbe,Zcr,efr,KW,ofr,rfr,tfr,YF,_be,afr,nfr,ZW,sfr,lfr,ifr,KF,ube,dfr,cfr,eH,ffr,mfr,gfr,ZF,bbe,hfr,pfr,oH,_fr,ufr,bfr,eT,vbe,vfr,Ffr,rH,Tfr,Mfr,Efr,oT,Fbe,Cfr,wfr,tH,Afr,Lfr,yfr,rT,xfr,Tbe,$fr,kfr,Mbe,Sfr,Rfr,tT,VXe,kd,aT,Ebe,Ky,Pfr,Cbe,Bfr,XXe,zo,Zy,Nfr,Sd,Ifr,aH,qfr,jfr,nH,Dfr,Gfr,Ofr,e9,Vfr,wbe,Xfr,zfr,Qfr,Et,o9,Wfr,Abe,Hfr,Ufr,Rd,Jfr,Lbe,Yfr,Kfr,sH,Zfr,emr,omr,nT,rmr,mo,r9,tmr,ybe,amr,nmr,Ya,smr,xbe,lmr,imr,$be,dmr,cmr,kbe,fmr,mmr,gmr,ot,sT,Sbe,hmr,pmr,lH,_mr,umr,bmr,lT,Rbe,vmr,Fmr,iH,Tmr,Mmr,Emr,iT,Pbe,Cmr,wmr,dH,Amr,Lmr,ymr,dT,Bbe,xmr,$mr,cH,kmr,Smr,Rmr,cT,Nbe,Pmr,Bmr,fH,Nmr,Imr,qmr,fT,jmr,Ibe,Dmr,Gmr,qbe,Omr,Vmr,mT,zXe,Pd,gT,jbe,t9,Xmr,Dbe,zmr,QXe,Qo,a9,Qmr,Bd,Wmr,mH,Hmr,Umr,gH,Jmr,Ymr,Kmr,n9,Zmr,Gbe,egr,ogr,rgr,Ct,s9,tgr,Obe,agr,ngr,Nd,sgr,Vbe,lgr,igr,hH,dgr,cgr,fgr,hT,mgr,go,l9,ggr,Xbe,hgr,pgr,Ka,_gr,zbe,ugr,bgr,Qbe,vgr,Fgr,Wbe,Tgr,Mgr,Egr,Le,pT,Hbe,Cgr,wgr,pH,Agr,Lgr,ygr,_T,Ube,xgr,$gr,_H,kgr,Sgr,Rgr,uT,Jbe,Pgr,Bgr,uH,Ngr,Igr,qgr,bT,Ybe,jgr,Dgr,bH,Ggr,Ogr,Vgr,vT,Kbe,Xgr,zgr,vH,Qgr,Wgr,Hgr,FT,Zbe,Ugr,Jgr,FH,Ygr,Kgr,Zgr,TT,eve,ehr,ohr,TH,rhr,thr,ahr,MT,ove,nhr,shr,MH,lhr,ihr,dhr,ET,rve,chr,fhr,EH,mhr,ghr,hhr,CT,tve,phr,_hr,CH,uhr,bhr,vhr,wT,Fhr,ave,Thr,Mhr,nve,Ehr,Chr,AT,WXe,Id,LT,sve,i9,whr,lve,Ahr,HXe,Wo,d9,Lhr,qd,yhr,wH,xhr,$hr,AH,khr,Shr,Rhr,c9,Phr,ive,Bhr,Nhr,Ihr,wt,f9,qhr,dve,jhr,Dhr,jd,Ghr,cve,Ohr,Vhr,LH,Xhr,zhr,Qhr,yT,Whr,ho,m9,Hhr,fve,Uhr,Jhr,Za,Yhr,mve,Khr,Zhr,gve,epr,opr,hve,rpr,tpr,apr,g9,xT,pve,npr,spr,yH,lpr,ipr,dpr,$T,_ve,cpr,fpr,xH,mpr,gpr,hpr,kT,ppr,uve,_pr,upr,bve,bpr,vpr,ST,UXe,Dd,RT,vve,h9,Fpr,Fve,Tpr,JXe,Ho,p9,Mpr,Gd,Epr,$H,Cpr,wpr,kH,Apr,Lpr,ypr,_9,xpr,Tve,$pr,kpr,Spr,At,u9,Rpr,Mve,Ppr,Bpr,Od,Npr,Eve,Ipr,qpr,SH,jpr,Dpr,Gpr,PT,Opr,po,b9,Vpr,Cve,Xpr,zpr,en,Qpr,wve,Wpr,Hpr,Ave,Upr,Jpr,Lve,Ypr,Kpr,Zpr,rt,BT,yve,e_r,o_r,RH,r_r,t_r,a_r,NT,xve,n_r,s_r,PH,l_r,i_r,d_r,IT,$ve,c_r,f_r,BH,m_r,g_r,h_r,qT,kve,p_r,__r,NH,u_r,b_r,v_r,jT,Sve,F_r,T_r,IH,M_r,E_r,C_r,DT,w_r,Rve,A_r,L_r,Pve,y_r,x_r,GT,YXe,Vd,OT,Bve,v9,$_r,Nve,k_r,KXe,Uo,F9,S_r,Xd,R_r,qH,P_r,B_r,jH,N_r,I_r,q_r,T9,j_r,Ive,D_r,G_r,O_r,Lt,M9,V_r,qve,X_r,z_r,zd,Q_r,jve,W_r,H_r,DH,U_r,J_r,Y_r,VT,K_r,_o,E9,Z_r,Dve,eur,our,on,rur,Gve,tur,aur,Ove,nur,sur,Vve,lur,iur,dur,Qd,XT,Xve,cur,fur,GH,mur,gur,hur,zT,zve,pur,_ur,OH,uur,bur,vur,QT,Qve,Fur,Tur,VH,Mur,Eur,Cur,WT,wur,Wve,Aur,Lur,Hve,yur,xur,HT,ZXe,Wd,UT,Uve,C9,$ur,Jve,kur,eze,Jo,w9,Sur,Hd,Rur,XH,Pur,Bur,zH,Nur,Iur,qur,A9,jur,Yve,Dur,Gur,Our,yt,L9,Vur,Kve,Xur,zur,Ud,Qur,Zve,Wur,Hur,QH,Uur,Jur,Yur,JT,Kur,uo,y9,Zur,e5e,e1r,o1r,rn,r1r,o5e,t1r,a1r,r5e,n1r,s1r,t5e,l1r,i1r,d1r,x9,YT,a5e,c1r,f1r,WH,m1r,g1r,h1r,KT,n5e,p1r,_1r,HH,u1r,b1r,v1r,ZT,F1r,s5e,T1r,M1r,l5e,E1r,C1r,e7,oze,Jd,o7,i5e,$9,w1r,d5e,A1r,rze,Yo,k9,L1r,Yd,y1r,UH,x1r,$1r,JH,k1r,S1r,R1r,S9,P1r,c5e,B1r,N1r,I1r,xt,R9,q1r,f5e,j1r,D1r,Kd,G1r,m5e,O1r,V1r,YH,X1r,z1r,Q1r,r7,W1r,bo,P9,H1r,g5e,U1r,J1r,tn,Y1r,h5e,K1r,Z1r,p5e,e4r,o4r,_5e,r4r,t4r,a4r,u5e,t7,b5e,n4r,s4r,KH,l4r,i4r,d4r,a7,c4r,v5e,f4r,m4r,F5e,g4r,h4r,n7,tze,Zd,s7,T5e,B9,p4r,M5e,_4r,aze,Ko,N9,u4r,ec,b4r,ZH,v4r,F4r,eU,T4r,M4r,E4r,I9,C4r,E5e,w4r,A4r,L4r,$t,q9,y4r,C5e,x4r,$4r,oc,k4r,w5e,S4r,R4r,oU,P4r,B4r,N4r,l7,I4r,vo,j9,q4r,A5e,j4r,D4r,an,G4r,L5e,O4r,V4r,y5e,X4r,z4r,x5e,Q4r,W4r,H4r,Zo,i7,$5e,U4r,J4r,rU,Y4r,K4r,Z4r,d7,k5e,e2r,o2r,tU,r2r,t2r,a2r,c7,S5e,n2r,s2r,aU,l2r,i2r,d2r,f7,R5e,c2r,f2r,nU,m2r,g2r,h2r,m7,P5e,p2r,_2r,sU,u2r,b2r,v2r,g7,B5e,F2r,T2r,lU,M2r,E2r,C2r,h7,w2r,N5e,A2r,L2r,I5e,y2r,x2r,p7,nze,rc,_7,q5e,D9,$2r,j5e,k2r,sze,er,G9,S2r,tc,R2r,iU,P2r,B2r,dU,N2r,I2r,q2r,O9,j2r,D5e,D2r,G2r,O2r,kt,V9,V2r,G5e,X2r,z2r,ac,Q2r,O5e,W2r,H2r,cU,U2r,J2r,Y2r,u7,K2r,Fo,X9,Z2r,V5e,ebr,obr,nn,rbr,X5e,tbr,abr,z5e,nbr,sbr,Q5e,lbr,ibr,dbr,W5e,b7,H5e,cbr,fbr,fU,mbr,gbr,hbr,v7,pbr,U5e,_br,ubr,J5e,bbr,vbr,F7,lze,nc,T7,Y5e,z9,Fbr,K5e,Tbr,ize,or,Q9,Mbr,sc,Ebr,mU,Cbr,wbr,gU,Abr,Lbr,ybr,W9,xbr,Z5e,$br,kbr,Sbr,St,H9,Rbr,eFe,Pbr,Bbr,lc,Nbr,oFe,Ibr,qbr,hU,jbr,Dbr,Gbr,M7,Obr,xr,U9,Vbr,rFe,Xbr,zbr,sn,Qbr,tFe,Wbr,Hbr,aFe,Ubr,Jbr,nFe,Ybr,Kbr,Zbr,j,E7,sFe,evr,ovr,pU,rvr,tvr,avr,C7,lFe,nvr,svr,_U,lvr,ivr,dvr,w7,iFe,cvr,fvr,uU,mvr,gvr,hvr,A7,dFe,pvr,_vr,bU,uvr,bvr,vvr,L7,cFe,Fvr,Tvr,vU,Mvr,Evr,Cvr,y7,fFe,wvr,Avr,FU,Lvr,yvr,xvr,x7,mFe,$vr,kvr,TU,Svr,Rvr,Pvr,$7,gFe,Bvr,Nvr,MU,Ivr,qvr,jvr,k7,hFe,Dvr,Gvr,EU,Ovr,Vvr,Xvr,S7,pFe,zvr,Qvr,CU,Wvr,Hvr,Uvr,R7,_Fe,Jvr,Yvr,wU,Kvr,Zvr,e5r,P7,uFe,o5r,r5r,AU,t5r,a5r,n5r,B7,bFe,s5r,l5r,LU,i5r,d5r,c5r,N7,vFe,f5r,m5r,yU,g5r,h5r,p5r,I7,FFe,_5r,u5r,xU,b5r,v5r,F5r,q7,TFe,T5r,M5r,$U,E5r,C5r,w5r,j7,MFe,A5r,L5r,kU,y5r,x5r,$5r,Js,EFe,k5r,S5r,SU,R5r,P5r,RU,B5r,N5r,I5r,D7,CFe,q5r,j5r,PU,D5r,G5r,O5r,G7,wFe,V5r,X5r,BU,z5r,Q5r,W5r,O7,AFe,H5r,U5r,NU,J5r,Y5r,K5r,V7,LFe,Z5r,eFr,IU,oFr,rFr,tFr,X7,yFe,aFr,nFr,qU,sFr,lFr,iFr,z7,xFe,dFr,cFr,jU,fFr,mFr,gFr,Q7,$Fe,hFr,pFr,DU,_Fr,uFr,bFr,W7,kFe,vFr,FFr,GU,TFr,MFr,EFr,H7,SFe,CFr,wFr,OU,AFr,LFr,yFr,U7,RFe,xFr,$Fr,VU,kFr,SFr,RFr,J7,PFe,PFr,BFr,XU,NFr,IFr,qFr,Y7,BFe,jFr,DFr,zU,GFr,OFr,VFr,K7,NFe,XFr,zFr,QU,QFr,WFr,HFr,Z7,IFe,UFr,JFr,WU,YFr,KFr,ZFr,e8,qFe,eTr,oTr,HU,rTr,tTr,aTr,o8,jFe,nTr,sTr,UU,lTr,iTr,dTr,r8,DFe,cTr,fTr,JU,mTr,gTr,hTr,t8,GFe,pTr,_Tr,YU,uTr,bTr,vTr,a8,OFe,FTr,TTr,KU,MTr,ETr,CTr,n8,VFe,wTr,ATr,ZU,LTr,yTr,xTr,s8,XFe,$Tr,kTr,eJ,STr,RTr,PTr,l8,zFe,BTr,NTr,oJ,ITr,qTr,jTr,i8,QFe,DTr,GTr,rJ,OTr,VTr,XTr,d8,WFe,zTr,QTr,tJ,WTr,HTr,UTr,c8,HFe,JTr,YTr,aJ,KTr,ZTr,e7r,f8,UFe,o7r,r7r,nJ,t7r,a7r,n7r,m8,JFe,s7r,l7r,sJ,i7r,d7r,c7r,g8,YFe,f7r,m7r,lJ,g7r,h7r,p7r,h8,KFe,_7r,u7r,iJ,b7r,v7r,F7r,p8,ZFe,T7r,M7r,dJ,E7r,C7r,w7r,_8,dze,ic,u8,eTe,J9,A7r,oTe,L7r,cze,rr,Y9,y7r,dc,x7r,cJ,$7r,k7r,fJ,S7r,R7r,P7r,K9,B7r,rTe,N7r,I7r,q7r,Rt,Z9,j7r,tTe,D7r,G7r,cc,O7r,aTe,V7r,X7r,mJ,z7r,Q7r,W7r,b8,H7r,$r,ex,U7r,nTe,J7r,Y7r,ln,K7r,sTe,Z7r,e8r,lTe,o8r,r8r,iTe,t8r,a8r,n8r,se,v8,dTe,s8r,l8r,gJ,i8r,d8r,c8r,F8,cTe,f8r,m8r,hJ,g8r,h8r,p8r,T8,fTe,_8r,u8r,pJ,b8r,v8r,F8r,M8,mTe,T8r,M8r,_J,E8r,C8r,w8r,E8,gTe,A8r,L8r,uJ,y8r,x8r,$8r,C8,hTe,k8r,S8r,bJ,R8r,P8r,B8r,w8,pTe,N8r,I8r,vJ,q8r,j8r,D8r,A8,_Te,G8r,O8r,FJ,V8r,X8r,z8r,L8,uTe,Q8r,W8r,TJ,H8r,U8r,J8r,y8,bTe,Y8r,K8r,MJ,Z8r,eMr,oMr,x8,vTe,rMr,tMr,EJ,aMr,nMr,sMr,$8,FTe,lMr,iMr,CJ,dMr,cMr,fMr,k8,TTe,mMr,gMr,wJ,hMr,pMr,_Mr,S8,MTe,uMr,bMr,AJ,vMr,FMr,TMr,R8,ETe,MMr,EMr,LJ,CMr,wMr,AMr,P8,CTe,LMr,yMr,yJ,xMr,$Mr,kMr,B8,wTe,SMr,RMr,xJ,PMr,BMr,NMr,N8,ATe,IMr,qMr,$J,jMr,DMr,GMr,I8,LTe,OMr,VMr,kJ,XMr,zMr,QMr,q8,yTe,WMr,HMr,SJ,UMr,JMr,YMr,j8,xTe,KMr,ZMr,RJ,eEr,oEr,rEr,D8,$Te,tEr,aEr,PJ,nEr,sEr,lEr,G8,kTe,iEr,dEr,BJ,cEr,fEr,mEr,O8,fze,fc,V8,STe,ox,gEr,RTe,hEr,mze,tr,rx,pEr,mc,_Er,NJ,uEr,bEr,IJ,vEr,FEr,TEr,tx,MEr,PTe,EEr,CEr,wEr,Pt,ax,AEr,BTe,LEr,yEr,gc,xEr,NTe,$Er,kEr,qJ,SEr,REr,PEr,X8,BEr,kr,nx,NEr,ITe,IEr,qEr,dn,jEr,qTe,DEr,GEr,jTe,OEr,VEr,DTe,XEr,zEr,QEr,Me,z8,GTe,WEr,HEr,jJ,UEr,JEr,YEr,Q8,OTe,KEr,ZEr,DJ,eCr,oCr,rCr,W8,VTe,tCr,aCr,GJ,nCr,sCr,lCr,H8,XTe,iCr,dCr,OJ,cCr,fCr,mCr,U8,zTe,gCr,hCr,VJ,pCr,_Cr,uCr,J8,QTe,bCr,vCr,XJ,FCr,TCr,MCr,Y8,WTe,ECr,CCr,zJ,wCr,ACr,LCr,K8,HTe,yCr,xCr,QJ,$Cr,kCr,SCr,Z8,UTe,RCr,PCr,WJ,BCr,NCr,ICr,eM,JTe,qCr,jCr,HJ,DCr,GCr,OCr,oM,YTe,VCr,XCr,UJ,zCr,QCr,WCr,rM,KTe,HCr,UCr,JJ,JCr,YCr,KCr,tM,ZTe,ZCr,e3r,YJ,o3r,r3r,t3r,aM,gze,hc,nM,e7e,sx,a3r,o7e,n3r,hze,ar,lx,s3r,pc,l3r,KJ,i3r,d3r,ZJ,c3r,f3r,m3r,ix,g3r,r7e,h3r,p3r,_3r,Bt,dx,u3r,t7e,b3r,v3r,_c,F3r,a7e,T3r,M3r,eY,E3r,C3r,w3r,sM,A3r,Sr,cx,L3r,n7e,y3r,x3r,cn,$3r,s7e,k3r,S3r,l7e,R3r,P3r,i7e,B3r,N3r,I3r,tt,lM,d7e,q3r,j3r,oY,D3r,G3r,O3r,iM,c7e,V3r,X3r,rY,z3r,Q3r,W3r,dM,f7e,H3r,U3r,tY,J3r,Y3r,K3r,cM,m7e,Z3r,e0r,aY,o0r,r0r,t0r,fM,g7e,a0r,n0r,nY,s0r,l0r,i0r,mM,pze,uc,gM,h7e,fx,d0r,p7e,c0r,_ze,nr,mx,f0r,bc,m0r,sY,g0r,h0r,lY,p0r,_0r,u0r,gx,b0r,_7e,v0r,F0r,T0r,Nt,hx,M0r,u7e,E0r,C0r,vc,w0r,b7e,A0r,L0r,iY,y0r,x0r,$0r,hM,k0r,Rr,px,S0r,v7e,R0r,P0r,fn,B0r,F7e,N0r,I0r,T7e,q0r,j0r,M7e,D0r,G0r,O0r,ie,pM,E7e,V0r,X0r,dY,z0r,Q0r,W0r,_M,C7e,H0r,U0r,cY,J0r,Y0r,K0r,uM,w7e,Z0r,ewr,fY,owr,rwr,twr,bM,A7e,awr,nwr,mY,swr,lwr,iwr,vM,L7e,dwr,cwr,gY,fwr,mwr,gwr,FM,y7e,hwr,pwr,hY,_wr,uwr,bwr,TM,x7e,vwr,Fwr,pY,Twr,Mwr,Ewr,MM,$7e,Cwr,wwr,_Y,Awr,Lwr,ywr,EM,k7e,xwr,$wr,uY,kwr,Swr,Rwr,CM,S7e,Pwr,Bwr,bY,Nwr,Iwr,qwr,wM,R7e,jwr,Dwr,vY,Gwr,Owr,Vwr,AM,P7e,Xwr,zwr,FY,Qwr,Wwr,Hwr,LM,B7e,Uwr,Jwr,TY,Ywr,Kwr,Zwr,yM,N7e,eAr,oAr,MY,rAr,tAr,aAr,xM,I7e,nAr,sAr,EY,lAr,iAr,dAr,$M,q7e,cAr,fAr,CY,mAr,gAr,hAr,kM,j7e,pAr,_Ar,wY,uAr,bAr,vAr,SM,D7e,FAr,TAr,AY,MAr,EAr,CAr,RM,G7e,wAr,AAr,LY,LAr,yAr,xAr,PM,O7e,$Ar,kAr,yY,SAr,RAr,PAr,BM,uze,Fc,NM,V7e,_x,BAr,X7e,NAr,bze,sr,ux,IAr,Tc,qAr,xY,jAr,DAr,$Y,GAr,OAr,VAr,bx,XAr,z7e,zAr,QAr,WAr,It,vx,HAr,Q7e,UAr,JAr,Mc,YAr,W7e,KAr,ZAr,kY,e6r,o6r,r6r,IM,t6r,Pr,Fx,a6r,H7e,n6r,s6r,mn,l6r,U7e,i6r,d6r,J7e,c6r,f6r,Y7e,m6r,g6r,h6r,ye,qM,K7e,p6r,_6r,SY,u6r,b6r,v6r,jM,Z7e,F6r,T6r,RY,M6r,E6r,C6r,DM,e8e,w6r,A6r,PY,L6r,y6r,x6r,GM,o8e,$6r,k6r,BY,S6r,R6r,P6r,OM,r8e,B6r,N6r,NY,I6r,q6r,j6r,VM,t8e,D6r,G6r,IY,O6r,V6r,X6r,XM,a8e,z6r,Q6r,qY,W6r,H6r,U6r,zM,n8e,J6r,Y6r,jY,K6r,Z6r,eLr,QM,s8e,oLr,rLr,DY,tLr,aLr,nLr,WM,l8e,sLr,lLr,GY,iLr,dLr,cLr,HM,vze,Ec,UM,i8e,Tx,fLr,d8e,mLr,Fze,lr,Mx,gLr,Cc,hLr,OY,pLr,_Lr,VY,uLr,bLr,vLr,Ex,FLr,c8e,TLr,MLr,ELr,qt,Cx,CLr,f8e,wLr,ALr,wc,LLr,m8e,yLr,xLr,XY,$Lr,kLr,SLr,JM,RLr,Br,wx,PLr,g8e,BLr,NLr,gn,ILr,h8e,qLr,jLr,p8e,DLr,GLr,_8e,OLr,VLr,XLr,te,YM,u8e,zLr,QLr,zY,WLr,HLr,ULr,KM,b8e,JLr,YLr,QY,KLr,ZLr,eyr,ZM,v8e,oyr,ryr,WY,tyr,ayr,nyr,eE,F8e,syr,lyr,HY,iyr,dyr,cyr,oE,T8e,fyr,myr,UY,gyr,hyr,pyr,rE,M8e,_yr,uyr,JY,byr,vyr,Fyr,tE,E8e,Tyr,Myr,YY,Eyr,Cyr,wyr,aE,C8e,Ayr,Lyr,KY,yyr,xyr,$yr,nE,w8e,kyr,Syr,ZY,Ryr,Pyr,Byr,sE,A8e,Nyr,Iyr,eK,qyr,jyr,Dyr,lE,L8e,Gyr,Oyr,oK,Vyr,Xyr,zyr,iE,y8e,Qyr,Wyr,rK,Hyr,Uyr,Jyr,dE,x8e,Yyr,Kyr,tK,Zyr,e9r,o9r,cE,$8e,r9r,t9r,aK,a9r,n9r,s9r,fE,k8e,l9r,i9r,nK,d9r,c9r,f9r,mE,S8e,m9r,g9r,sK,h9r,p9r,_9r,gE,R8e,u9r,b9r,lK,v9r,F9r,T9r,hE,P8e,M9r,E9r,iK,C9r,w9r,A9r,pE,B8e,L9r,y9r,dK,x9r,$9r,k9r,_E,N8e,S9r,R9r,cK,P9r,B9r,N9r,uE,I8e,I9r,q9r,fK,j9r,D9r,G9r,bE,q8e,O9r,V9r,mK,X9r,z9r,Q9r,vE,j8e,W9r,H9r,gK,U9r,J9r,Y9r,FE,D8e,K9r,Z9r,hK,exr,oxr,rxr,TE,G8e,txr,axr,pK,nxr,sxr,lxr,ME,O8e,ixr,dxr,_K,cxr,fxr,mxr,EE,Tze,Ac,CE,V8e,Ax,gxr,X8e,hxr,Mze,ir,Lx,pxr,Lc,_xr,uK,uxr,bxr,bK,vxr,Fxr,Txr,yx,Mxr,z8e,Exr,Cxr,wxr,jt,xx,Axr,Q8e,Lxr,yxr,yc,xxr,W8e,$xr,kxr,vK,Sxr,Rxr,Pxr,wE,Bxr,Nr,$x,Nxr,H8e,Ixr,qxr,hn,jxr,U8e,Dxr,Gxr,J8e,Oxr,Vxr,Y8e,Xxr,zxr,Qxr,ue,AE,K8e,Wxr,Hxr,FK,Uxr,Jxr,Yxr,LE,Z8e,Kxr,Zxr,TK,e$r,o$r,r$r,yE,eMe,t$r,a$r,MK,n$r,s$r,l$r,xE,oMe,i$r,d$r,EK,c$r,f$r,m$r,$E,rMe,g$r,h$r,CK,p$r,_$r,u$r,kE,tMe,b$r,v$r,wK,F$r,T$r,M$r,SE,aMe,E$r,C$r,AK,w$r,A$r,L$r,RE,nMe,y$r,x$r,LK,$$r,k$r,S$r,PE,sMe,R$r,P$r,yK,B$r,N$r,I$r,BE,lMe,q$r,j$r,xK,D$r,G$r,O$r,NE,iMe,V$r,X$r,$K,z$r,Q$r,W$r,IE,dMe,H$r,U$r,kK,J$r,Y$r,K$r,qE,cMe,Z$r,ekr,SK,okr,rkr,tkr,jE,fMe,akr,nkr,RK,skr,lkr,ikr,DE,mMe,dkr,ckr,PK,fkr,mkr,gkr,GE,gMe,hkr,pkr,BK,_kr,ukr,bkr,OE,hMe,vkr,Fkr,NK,Tkr,Mkr,Ekr,VE,Eze,xc,XE,pMe,kx,Ckr,_Me,wkr,Cze,dr,Sx,Akr,$c,Lkr,IK,ykr,xkr,qK,$kr,kkr,Skr,Rx,Rkr,uMe,Pkr,Bkr,Nkr,Dt,Px,Ikr,bMe,qkr,jkr,kc,Dkr,vMe,Gkr,Okr,jK,Vkr,Xkr,zkr,zE,Qkr,Ir,Bx,Wkr,FMe,Hkr,Ukr,pn,Jkr,TMe,Ykr,Kkr,MMe,Zkr,eSr,EMe,oSr,rSr,tSr,Nx,QE,CMe,aSr,nSr,DK,sSr,lSr,iSr,WE,wMe,dSr,cSr,GK,fSr,mSr,gSr,HE,wze,Sc,UE,AMe,Ix,hSr,LMe,pSr,Aze,cr,qx,_Sr,Rc,uSr,OK,bSr,vSr,VK,FSr,TSr,MSr,jx,ESr,yMe,CSr,wSr,ASr,Gt,Dx,LSr,xMe,ySr,xSr,Pc,$Sr,$Me,kSr,SSr,XK,RSr,PSr,BSr,JE,NSr,qr,Gx,ISr,kMe,qSr,jSr,_n,DSr,SMe,GSr,OSr,RMe,VSr,XSr,PMe,zSr,QSr,WSr,BMe,YE,NMe,HSr,USr,zK,JSr,YSr,KSr,KE,Lze,Bc,ZE,IMe,Ox,ZSr,qMe,eRr,yze,fr,Vx,oRr,Nc,rRr,QK,tRr,aRr,WK,nRr,sRr,lRr,Xx,iRr,jMe,dRr,cRr,fRr,Ot,zx,mRr,DMe,gRr,hRr,Ic,pRr,GMe,_Rr,uRr,HK,bRr,vRr,FRr,eC,TRr,jr,Qx,MRr,OMe,ERr,CRr,un,wRr,VMe,ARr,LRr,XMe,yRr,xRr,zMe,$Rr,kRr,SRr,de,oC,QMe,RRr,PRr,UK,BRr,NRr,IRr,rC,WMe,qRr,jRr,JK,DRr,GRr,ORr,tC,HMe,VRr,XRr,YK,zRr,QRr,WRr,aC,UMe,HRr,URr,KK,JRr,YRr,KRr,nC,JMe,ZRr,ePr,ZK,oPr,rPr,tPr,sC,YMe,aPr,nPr,eZ,sPr,lPr,iPr,lC,KMe,dPr,cPr,oZ,fPr,mPr,gPr,iC,ZMe,hPr,pPr,rZ,_Pr,uPr,bPr,dC,eEe,vPr,FPr,tZ,TPr,MPr,EPr,cC,oEe,CPr,wPr,aZ,APr,LPr,yPr,fC,rEe,xPr,$Pr,nZ,kPr,SPr,RPr,mC,tEe,PPr,BPr,sZ,NPr,IPr,qPr,gC,aEe,jPr,DPr,lZ,GPr,OPr,VPr,hC,nEe,XPr,zPr,iZ,QPr,WPr,HPr,pC,sEe,UPr,JPr,dZ,YPr,KPr,ZPr,_C,lEe,eBr,oBr,cZ,rBr,tBr,aBr,uC,iEe,nBr,sBr,fZ,lBr,iBr,dBr,bC,dEe,cBr,fBr,mZ,mBr,gBr,hBr,vC,cEe,pBr,_Br,gZ,uBr,bBr,vBr,FC,fEe,FBr,TBr,hZ,MBr,EBr,CBr,TC,xze,qc,MC,mEe,Wx,wBr,gEe,ABr,$ze,mr,Hx,LBr,jc,yBr,pZ,xBr,$Br,_Z,kBr,SBr,RBr,Ux,PBr,hEe,BBr,NBr,IBr,Vt,Jx,qBr,pEe,jBr,DBr,Dc,GBr,_Ee,OBr,VBr,uZ,XBr,zBr,QBr,EC,WBr,Dr,Yx,HBr,uEe,UBr,JBr,bn,YBr,bEe,KBr,ZBr,vEe,eNr,oNr,FEe,rNr,tNr,aNr,ce,CC,TEe,nNr,sNr,bZ,lNr,iNr,dNr,wC,MEe,cNr,fNr,vZ,mNr,gNr,hNr,AC,EEe,pNr,_Nr,FZ,uNr,bNr,vNr,LC,CEe,FNr,TNr,TZ,MNr,ENr,CNr,yC,wEe,wNr,ANr,MZ,LNr,yNr,xNr,xC,AEe,$Nr,kNr,EZ,SNr,RNr,PNr,$C,LEe,BNr,NNr,CZ,INr,qNr,jNr,kC,yEe,DNr,GNr,wZ,ONr,VNr,XNr,SC,xEe,zNr,QNr,AZ,WNr,HNr,UNr,RC,$Ee,JNr,YNr,LZ,KNr,ZNr,eIr,PC,kEe,oIr,rIr,yZ,tIr,aIr,nIr,BC,SEe,sIr,lIr,xZ,iIr,dIr,cIr,NC,REe,fIr,mIr,$Z,gIr,hIr,pIr,IC,PEe,_Ir,uIr,kZ,bIr,vIr,FIr,qC,BEe,TIr,MIr,SZ,EIr,CIr,wIr,jC,NEe,AIr,LIr,RZ,yIr,xIr,$Ir,DC,IEe,kIr,SIr,PZ,RIr,PIr,BIr,GC,qEe,NIr,IIr,BZ,qIr,jIr,DIr,OC,jEe,GIr,OIr,NZ,VIr,XIr,zIr,VC,DEe,QIr,WIr,IZ,HIr,UIr,JIr,XC,kze,Gc,zC,GEe,Kx,YIr,OEe,KIr,Sze,gr,Zx,ZIr,Oc,eqr,qZ,oqr,rqr,jZ,tqr,aqr,nqr,e$,sqr,VEe,lqr,iqr,dqr,Xt,o$,cqr,XEe,fqr,mqr,Vc,gqr,zEe,hqr,pqr,DZ,_qr,uqr,bqr,QC,vqr,Gr,r$,Fqr,QEe,Tqr,Mqr,vn,Eqr,WEe,Cqr,wqr,HEe,Aqr,Lqr,UEe,yqr,xqr,$qr,JEe,WC,YEe,kqr,Sqr,GZ,Rqr,Pqr,Bqr,HC,Rze,Xc,UC,KEe,t$,Nqr,ZEe,Iqr,Pze,hr,a$,qqr,zc,jqr,OZ,Dqr,Gqr,VZ,Oqr,Vqr,Xqr,n$,zqr,eCe,Qqr,Wqr,Hqr,zt,s$,Uqr,oCe,Jqr,Yqr,Qc,Kqr,rCe,Zqr,ejr,XZ,ojr,rjr,tjr,JC,ajr,Or,l$,njr,tCe,sjr,ljr,Fn,ijr,aCe,djr,cjr,nCe,fjr,mjr,sCe,gjr,hjr,pjr,lCe,YC,iCe,_jr,ujr,zZ,bjr,vjr,Fjr,KC,Bze,Wc,ZC,dCe,i$,Tjr,cCe,Mjr,Nze,pr,d$,Ejr,Hc,Cjr,QZ,wjr,Ajr,WZ,Ljr,yjr,xjr,c$,$jr,fCe,kjr,Sjr,Rjr,Qt,f$,Pjr,mCe,Bjr,Njr,Uc,Ijr,gCe,qjr,jjr,HZ,Djr,Gjr,Ojr,e3,Vjr,Vr,m$,Xjr,hCe,zjr,Qjr,Tn,Wjr,pCe,Hjr,Ujr,_Ce,Jjr,Yjr,uCe,Kjr,Zjr,eDr,oe,o3,bCe,oDr,rDr,UZ,tDr,aDr,nDr,r3,vCe,sDr,lDr,JZ,iDr,dDr,cDr,t3,FCe,fDr,mDr,YZ,gDr,hDr,pDr,a3,TCe,_Dr,uDr,KZ,bDr,vDr,FDr,n3,MCe,TDr,MDr,ZZ,EDr,CDr,wDr,s3,ECe,ADr,LDr,eee,yDr,xDr,$Dr,l3,CCe,kDr,SDr,oee,RDr,PDr,BDr,i3,wCe,NDr,IDr,ree,qDr,jDr,DDr,d3,ACe,GDr,ODr,tee,VDr,XDr,zDr,c3,LCe,QDr,WDr,aee,HDr,UDr,JDr,f3,yCe,YDr,KDr,nee,ZDr,eGr,oGr,m3,xCe,rGr,tGr,see,aGr,nGr,sGr,g3,$Ce,lGr,iGr,lee,dGr,cGr,fGr,h3,kCe,mGr,gGr,iee,hGr,pGr,_Gr,p3,SCe,uGr,bGr,dee,vGr,FGr,TGr,_3,RCe,MGr,EGr,cee,CGr,wGr,AGr,u3,PCe,LGr,yGr,fee,xGr,$Gr,kGr,b3,BCe,SGr,RGr,mee,PGr,BGr,NGr,v3,NCe,IGr,qGr,gee,jGr,DGr,GGr,F3,ICe,OGr,VGr,hee,XGr,zGr,QGr,T3,qCe,WGr,HGr,pee,UGr,JGr,YGr,M3,jCe,KGr,ZGr,_ee,eOr,oOr,rOr,E3,DCe,tOr,aOr,uee,nOr,sOr,lOr,C3,GCe,iOr,dOr,bee,cOr,fOr,mOr,w3,OCe,gOr,hOr,vee,pOr,_Or,uOr,A3,VCe,bOr,vOr,Fee,FOr,TOr,MOr,L3,XCe,EOr,COr,Tee,wOr,AOr,LOr,y3,Ize,Jc,x3,zCe,g$,yOr,QCe,xOr,qze,_r,h$,$Or,Yc,kOr,Mee,SOr,ROr,Eee,POr,BOr,NOr,p$,IOr,WCe,qOr,jOr,DOr,Wt,_$,GOr,HCe,OOr,VOr,Kc,XOr,UCe,zOr,QOr,Cee,WOr,HOr,UOr,$3,JOr,Xr,u$,YOr,JCe,KOr,ZOr,Mn,eVr,YCe,oVr,rVr,KCe,tVr,aVr,ZCe,nVr,sVr,lVr,xe,k3,e3e,iVr,dVr,wee,cVr,fVr,mVr,S3,o3e,gVr,hVr,Aee,pVr,_Vr,uVr,R3,r3e,bVr,vVr,Lee,FVr,TVr,MVr,P3,t3e,EVr,CVr,yee,wVr,AVr,LVr,B3,a3e,yVr,xVr,xee,$Vr,kVr,SVr,N3,n3e,RVr,PVr,$ee,BVr,NVr,IVr,I3,s3e,qVr,jVr,kee,DVr,GVr,OVr,q3,l3e,VVr,XVr,See,zVr,QVr,WVr,j3,i3e,HVr,UVr,Ree,JVr,YVr,KVr,D3,d3e,ZVr,eXr,Pee,oXr,rXr,tXr,G3,jze,Zc,O3,c3e,b$,aXr,f3e,nXr,Dze,ur,v$,sXr,ef,lXr,Bee,iXr,dXr,Nee,cXr,fXr,mXr,F$,gXr,m3e,hXr,pXr,_Xr,Ht,T$,uXr,g3e,bXr,vXr,of,FXr,h3e,TXr,MXr,Iee,EXr,CXr,wXr,V3,AXr,zr,M$,LXr,p3e,yXr,xXr,En,$Xr,_3e,kXr,SXr,u3e,RXr,PXr,b3e,BXr,NXr,IXr,Ee,X3,v3e,qXr,jXr,qee,DXr,GXr,OXr,z3,F3e,VXr,XXr,jee,zXr,QXr,WXr,Q3,T3e,HXr,UXr,Dee,JXr,YXr,KXr,W3,M3e,ZXr,ezr,Gee,ozr,rzr,tzr,H3,E3e,azr,nzr,Oee,szr,lzr,izr,U3,C3e,dzr,czr,Vee,fzr,mzr,gzr,J3,w3e,hzr,pzr,Xee,_zr,uzr,bzr,Y3,A3e,vzr,Fzr,zee,Tzr,Mzr,Ezr,K3,L3e,Czr,wzr,Qee,Azr,Lzr,yzr,Z3,y3e,xzr,$zr,Wee,kzr,Szr,Rzr,e0,x3e,Pzr,Bzr,Hee,Nzr,Izr,qzr,o0,$3e,jzr,Dzr,Uee,Gzr,Ozr,Vzr,r0,k3e,Xzr,zzr,Jee,Qzr,Wzr,Hzr,t0,Gze,rf,a0,S3e,E$,Uzr,R3e,Jzr,Oze,br,C$,Yzr,tf,Kzr,Yee,Zzr,eQr,Kee,oQr,rQr,tQr,w$,aQr,P3e,nQr,sQr,lQr,Ut,A$,iQr,B3e,dQr,cQr,af,fQr,N3e,mQr,gQr,Zee,hQr,pQr,_Qr,n0,uQr,Qr,L$,bQr,I3e,vQr,FQr,Cn,TQr,q3e,MQr,EQr,j3e,CQr,wQr,D3e,AQr,LQr,yQr,$e,s0,G3e,xQr,$Qr,eoe,kQr,SQr,RQr,l0,O3e,PQr,BQr,ooe,NQr,IQr,qQr,i0,V3e,jQr,DQr,roe,GQr,OQr,VQr,d0,X3e,XQr,zQr,toe,QQr,WQr,HQr,c0,z3e,UQr,JQr,aoe,YQr,KQr,ZQr,f0,Q3e,eWr,oWr,noe,rWr,tWr,aWr,m0,W3e,nWr,sWr,soe,lWr,iWr,dWr,g0,H3e,cWr,fWr,loe,mWr,gWr,hWr,h0,U3e,pWr,_Wr,ioe,uWr,bWr,vWr,p0,J3e,FWr,TWr,doe,MWr,EWr,CWr,_0,Vze,nf,u0,Y3e,y$,wWr,K3e,AWr,Xze,vr,x$,LWr,sf,yWr,coe,xWr,$Wr,foe,kWr,SWr,RWr,$$,PWr,Z3e,BWr,NWr,IWr,Jt,k$,qWr,e0e,jWr,DWr,lf,GWr,o0e,OWr,VWr,moe,XWr,zWr,QWr,b0,WWr,Wr,S$,HWr,r0e,UWr,JWr,wn,YWr,t0e,KWr,ZWr,a0e,eHr,oHr,n0e,rHr,tHr,aHr,ke,v0,s0e,nHr,sHr,goe,lHr,iHr,dHr,F0,l0e,cHr,fHr,hoe,mHr,gHr,hHr,T0,i0e,pHr,_Hr,poe,uHr,bHr,vHr,M0,d0e,FHr,THr,_oe,MHr,EHr,CHr,E0,c0e,wHr,AHr,uoe,LHr,yHr,xHr,C0,f0e,$Hr,kHr,boe,SHr,RHr,PHr,w0,m0e,BHr,NHr,voe,IHr,qHr,jHr,A0,g0e,DHr,GHr,Foe,OHr,VHr,XHr,L0,h0e,zHr,QHr,Toe,WHr,HHr,UHr,y0,p0e,JHr,YHr,Moe,KHr,ZHr,eUr,x0,zze,df,$0,_0e,R$,oUr,u0e,rUr,Qze,Fr,P$,tUr,cf,aUr,Eoe,nUr,sUr,Coe,lUr,iUr,dUr,B$,cUr,b0e,fUr,mUr,gUr,Yt,N$,hUr,v0e,pUr,_Ur,ff,uUr,F0e,bUr,vUr,woe,FUr,TUr,MUr,k0,EUr,Hr,I$,CUr,T0e,wUr,AUr,An,LUr,M0e,yUr,xUr,E0e,$Ur,kUr,C0e,SUr,RUr,PUr,Se,S0,w0e,BUr,NUr,Aoe,IUr,qUr,jUr,R0,A0e,DUr,GUr,Loe,OUr,VUr,XUr,P0,L0e,zUr,QUr,yoe,WUr,HUr,UUr,B0,y0e,JUr,YUr,xoe,KUr,ZUr,eJr,N0,x0e,oJr,rJr,$oe,tJr,aJr,nJr,I0,$0e,sJr,lJr,koe,iJr,dJr,cJr,q0,k0e,fJr,mJr,Soe,gJr,hJr,pJr,j0,S0e,_Jr,uJr,Roe,bJr,vJr,FJr,D0,R0e,TJr,MJr,Poe,EJr,CJr,wJr,G0,P0e,AJr,LJr,Boe,yJr,xJr,$Jr,O0,Wze,mf,V0,B0e,q$,kJr,N0e,SJr,Hze,Tr,j$,RJr,gf,PJr,Noe,BJr,NJr,Ioe,IJr,qJr,jJr,D$,DJr,I0e,GJr,OJr,VJr,Kt,G$,XJr,q0e,zJr,QJr,hf,WJr,j0e,HJr,UJr,qoe,JJr,YJr,KJr,X0,ZJr,Ur,O$,eYr,D0e,oYr,rYr,Ln,tYr,G0e,aYr,nYr,O0e,sYr,lYr,V0e,iYr,dYr,cYr,Re,z0,X0e,fYr,mYr,joe,gYr,hYr,pYr,Q0,z0e,_Yr,uYr,Doe,bYr,vYr,FYr,W0,Q0e,TYr,MYr,Goe,EYr,CYr,wYr,H0,W0e,AYr,LYr,Ooe,yYr,xYr,$Yr,U0,H0e,kYr,SYr,Voe,RYr,PYr,BYr,J0,U0e,NYr,IYr,Xoe,qYr,jYr,DYr,Y0,J0e,GYr,OYr,zoe,VYr,XYr,zYr,K0,Y0e,QYr,WYr,Qoe,HYr,UYr,JYr,Z0,K0e,YYr,KYr,Woe,ZYr,eKr,oKr,ew,Z0e,rKr,tKr,Hoe,aKr,nKr,sKr,ow,Uze,pf,rw,ewe,V$,lKr,owe,iKr,Jze,Mr,X$,dKr,_f,cKr,Uoe,fKr,mKr,Joe,gKr,hKr,pKr,z$,_Kr,rwe,uKr,bKr,vKr,Zt,Q$,FKr,twe,TKr,MKr,uf,EKr,awe,CKr,wKr,Yoe,AKr,LKr,yKr,tw,xKr,Jr,W$,$Kr,nwe,kKr,SKr,yn,RKr,swe,PKr,BKr,lwe,NKr,IKr,iwe,qKr,jKr,DKr,Ve,aw,dwe,GKr,OKr,Koe,VKr,XKr,zKr,nw,cwe,QKr,WKr,Zoe,HKr,UKr,JKr,sw,fwe,YKr,KKr,ere,ZKr,eZr,oZr,lw,mwe,rZr,tZr,ore,aZr,nZr,sZr,iw,gwe,lZr,iZr,rre,dZr,cZr,fZr,dw,hwe,mZr,gZr,tre,hZr,pZr,_Zr,cw,pwe,uZr,bZr,are,vZr,FZr,TZr,fw,_we,MZr,EZr,nre,CZr,wZr,AZr,mw,Yze,bf,gw,uwe,H$,LZr,bwe,yZr,Kze,Er,U$,xZr,vf,$Zr,sre,kZr,SZr,lre,RZr,PZr,BZr,J$,NZr,vwe,IZr,qZr,jZr,ea,Y$,DZr,Fwe,GZr,OZr,Ff,VZr,Twe,XZr,zZr,ire,QZr,WZr,HZr,hw,UZr,Yr,K$,JZr,Mwe,YZr,KZr,xn,ZZr,Ewe,eet,oet,Cwe,ret,tet,wwe,aet,net,set,Xe,pw,Awe,iet,det,dre,cet,fet,met,_w,Lwe,get,het,cre,pet,_et,uet,uw,ywe,bet,vet,fre,Fet,Tet,Met,bw,xwe,Eet,Cet,mre,wet,Aet,Let,vw,$we,yet,xet,gre,$et,ket,Set,Fw,kwe,Ret,Pet,hre,Bet,Net,Iet,Tw,Swe,qet,jet,pre,Det,Get,Oet,Mw,Rwe,Vet,Xet,_re,zet,Qet,Wet,Ew,Zze,Tf,Cw,Pwe,Z$,Het,Bwe,Uet,eQe,Cr,ek,Jet,Mf,Yet,ure,Ket,Zet,bre,eot,oot,rot,ok,tot,Nwe,aot,not,sot,oa,rk,lot,Iwe,iot,dot,Ef,cot,qwe,fot,mot,vre,got,hot,pot,ww,_ot,Kr,tk,uot,jwe,bot,vot,$n,Fot,Dwe,Tot,Mot,Gwe,Eot,Cot,Owe,wot,Aot,Lot,Vwe,Aw,Xwe,yot,xot,Fre,$ot,kot,Sot,Lw,oQe,Cf,yw,zwe,ak,Rot,Qwe,Pot,rQe,wr,nk,Bot,wf,Not,Tre,Iot,qot,Mre,jot,Dot,Got,sk,Oot,Wwe,Vot,Xot,zot,ra,lk,Qot,Hwe,Wot,Hot,Af,Uot,Uwe,Jot,Yot,Ere,Kot,Zot,ert,xw,ort,Zr,ik,rrt,Jwe,trt,art,kn,nrt,Ywe,srt,lrt,Kwe,irt,drt,Zwe,crt,frt,mrt,dk,$w,eAe,grt,hrt,Cre,prt,_rt,urt,kw,oAe,brt,vrt,wre,Frt,Trt,Mrt,Sw,tQe,Lf,Rw,rAe,ck,Ert,tAe,Crt,aQe,Ar,fk,wrt,yf,Art,Are,Lrt,yrt,Lre,xrt,$rt,krt,mk,Srt,aAe,Rrt,Prt,Brt,ta,gk,Nrt,nAe,Irt,qrt,xf,jrt,sAe,Drt,Grt,yre,Ort,Vrt,Xrt,Pw,zrt,et,hk,Qrt,lAe,Wrt,Hrt,Sn,Urt,iAe,Jrt,Yrt,dAe,Krt,Zrt,cAe,ett,ott,rtt,fAe,Bw,mAe,ttt,att,xre,ntt,stt,ltt,Nw,nQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),nL=new re({}),sL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new itt({props:{warning:!0,$$slots:{default:[OQt]},$$scope:{ctx:$}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/configuration_auto.py#L613"}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/configuration_auto.py#L636"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),mL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/configuration_auto.py#L759"}}),gL=new re({}),hL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/tokenization_auto.py#L403"}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17845/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),bL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/tokenization_auto.py#L616"}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17845/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),up=new itt({props:{$$slots:{default:[zQt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),CL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/processing_auto.py#L89"}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new itt({props:{$$slots:{default:[WQt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),$L=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/processing_auto.py#L256"}}),kL=new re({}),SL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L785"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model">MobileNetV2Model</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),NL=new re({}),IL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L792"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L807"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L814"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L821"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),V2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L830"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),z2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L875"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L882"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L868"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L839"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L846"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L891"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification">MobileNetV2ForImageClassification</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L930"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L857"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L937"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L960"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L944"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L951"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L969"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L976"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L923"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L898"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),B9=new re({}),N9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L905"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation">MobileNetV2ForSemanticSegmentation</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),l7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L914"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),z9=new re({}),Q9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),_8=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),b8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),O8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),X8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),Ix=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),oL=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),rL=o("AutoConfig"),Bn=o(", "),Nn=a("a"),tL=o("AutoModel"),$i=o(`, and
`),In=a("a"),aL=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),BS=o("will create a model that is an instance of "),Si=a("a"),NS=o("BertModel"),IS=o("."),Co=l(),Ra=a("p"),qS=o("There is one class of "),Nf=a("code"),jS=o("AutoModel"),pHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),eXe=l(),Ri=a("h2"),If=a("a"),Cae=a("span"),F(nL.$$.fragment),_He=l(),wae=a("span"),uHe=o("Extending the Auto Classes"),oXe=l(),qn=a("p"),bHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aae=a("code"),vHe=o("NewModel"),FHe=o(", make sure you have a "),Lae=a("code"),THe=o("NewModelConfig"),MHe=o(` then you can add those to the auto
classes like this:`),rXe=l(),F(sL.$$.fragment),tXe=l(),DS=a("p"),EHe=o("You will then be able to use the auto classes like you would usually do!"),aXe=l(),F(qf.$$.fragment),nXe=l(),Pi=a("h2"),jf=a("a"),yae=a("span"),F(lL.$$.fragment),CHe=l(),xae=a("span"),wHe=o("AutoConfig"),sXe=l(),wo=a("div"),F(iL.$$.fragment),AHe=l(),dL=a("p"),LHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=a("a"),yHe=o("from_pretrained()"),xHe=o(" class method."),$He=l(),cL=a("p"),kHe=o("This class cannot be instantiated directly using "),$ae=a("code"),SHe=o("__init__()"),RHe=o(" (throws an error)."),PHe=l(),Lr=a("div"),F(fL.$$.fragment),BHe=l(),kae=a("p"),NHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),IHe=l(),Bi=a("p"),qHe=o("The configuration class to instantiate is selected based on the "),Sae=a("code"),jHe=o("model_type"),DHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rae=a("code"),GHe=o("pretrained_model_name_or_path"),OHe=o(":"),VHe=l(),A=a("ul"),Df=a("li"),Pae=a("strong"),XHe=o("albert"),zHe=o(" \u2014 "),OS=a("a"),QHe=o("AlbertConfig"),WHe=o(" (ALBERT model)"),HHe=l(),Gf=a("li"),Bae=a("strong"),UHe=o("bart"),JHe=o(" \u2014 "),VS=a("a"),YHe=o("BartConfig"),KHe=o(" (BART model)"),ZHe=l(),Of=a("li"),Nae=a("strong"),eUe=o("beit"),oUe=o(" \u2014 "),XS=a("a"),rUe=o("BeitConfig"),tUe=o(" (BEiT model)"),aUe=l(),Vf=a("li"),Iae=a("strong"),nUe=o("bert"),sUe=o(" \u2014 "),zS=a("a"),lUe=o("BertConfig"),iUe=o(" (BERT model)"),dUe=l(),Xf=a("li"),qae=a("strong"),cUe=o("bert-generation"),fUe=o(" \u2014 "),QS=a("a"),mUe=o("BertGenerationConfig"),gUe=o(" (Bert Generation model)"),hUe=l(),zf=a("li"),jae=a("strong"),pUe=o("big_bird"),_Ue=o(" \u2014 "),WS=a("a"),uUe=o("BigBirdConfig"),bUe=o(" (BigBird model)"),vUe=l(),Qf=a("li"),Dae=a("strong"),FUe=o("bigbird_pegasus"),TUe=o(" \u2014 "),HS=a("a"),MUe=o("BigBirdPegasusConfig"),EUe=o(" (BigBird-Pegasus model)"),CUe=l(),Wf=a("li"),Gae=a("strong"),wUe=o("blenderbot"),AUe=o(" \u2014 "),US=a("a"),LUe=o("BlenderbotConfig"),yUe=o(" (Blenderbot model)"),xUe=l(),Hf=a("li"),Oae=a("strong"),$Ue=o("blenderbot-small"),kUe=o(" \u2014 "),JS=a("a"),SUe=o("BlenderbotSmallConfig"),RUe=o(" (BlenderbotSmall model)"),PUe=l(),Uf=a("li"),Vae=a("strong"),BUe=o("bloom"),NUe=o(" \u2014 "),YS=a("a"),IUe=o("BloomConfig"),qUe=o(" (BLOOM model)"),jUe=l(),Jf=a("li"),Xae=a("strong"),DUe=o("camembert"),GUe=o(" \u2014 "),KS=a("a"),OUe=o("CamembertConfig"),VUe=o(" (CamemBERT model)"),XUe=l(),Yf=a("li"),zae=a("strong"),zUe=o("canine"),QUe=o(" \u2014 "),ZS=a("a"),WUe=o("CanineConfig"),HUe=o(" (CANINE model)"),UUe=l(),Kf=a("li"),Qae=a("strong"),JUe=o("clip"),YUe=o(" \u2014 "),eR=a("a"),KUe=o("CLIPConfig"),ZUe=o(" (CLIP model)"),eJe=l(),Zf=a("li"),Wae=a("strong"),oJe=o("codegen"),rJe=o(" \u2014 "),oR=a("a"),tJe=o("CodeGenConfig"),aJe=o(" (CodeGen model)"),nJe=l(),em=a("li"),Hae=a("strong"),sJe=o("convbert"),lJe=o(" \u2014 "),rR=a("a"),iJe=o("ConvBertConfig"),dJe=o(" (ConvBERT model)"),cJe=l(),om=a("li"),Uae=a("strong"),fJe=o("convnext"),mJe=o(" \u2014 "),tR=a("a"),gJe=o("ConvNextConfig"),hJe=o(" (ConvNeXT model)"),pJe=l(),rm=a("li"),Jae=a("strong"),_Je=o("ctrl"),uJe=o(" \u2014 "),aR=a("a"),bJe=o("CTRLConfig"),vJe=o(" (CTRL model)"),FJe=l(),tm=a("li"),Yae=a("strong"),TJe=o("cvt"),MJe=o(" \u2014 "),nR=a("a"),EJe=o("CvtConfig"),CJe=o(" (CvT model)"),wJe=l(),am=a("li"),Kae=a("strong"),AJe=o("data2vec-audio"),LJe=o(" \u2014 "),sR=a("a"),yJe=o("Data2VecAudioConfig"),xJe=o(" (Data2VecAudio model)"),$Je=l(),nm=a("li"),Zae=a("strong"),kJe=o("data2vec-text"),SJe=o(" \u2014 "),lR=a("a"),RJe=o("Data2VecTextConfig"),PJe=o(" (Data2VecText model)"),BJe=l(),sm=a("li"),ene=a("strong"),NJe=o("data2vec-vision"),IJe=o(" \u2014 "),iR=a("a"),qJe=o("Data2VecVisionConfig"),jJe=o(" (Data2VecVision model)"),DJe=l(),lm=a("li"),one=a("strong"),GJe=o("deberta"),OJe=o(" \u2014 "),dR=a("a"),VJe=o("DebertaConfig"),XJe=o(" (DeBERTa model)"),zJe=l(),im=a("li"),rne=a("strong"),QJe=o("deberta-v2"),WJe=o(" \u2014 "),cR=a("a"),HJe=o("DebertaV2Config"),UJe=o(" (DeBERTa-v2 model)"),JJe=l(),dm=a("li"),tne=a("strong"),YJe=o("decision_transformer"),KJe=o(" \u2014 "),fR=a("a"),ZJe=o("DecisionTransformerConfig"),eYe=o(" (Decision Transformer model)"),oYe=l(),cm=a("li"),ane=a("strong"),rYe=o("deit"),tYe=o(" \u2014 "),mR=a("a"),aYe=o("DeiTConfig"),nYe=o(" (DeiT model)"),sYe=l(),fm=a("li"),nne=a("strong"),lYe=o("detr"),iYe=o(" \u2014 "),gR=a("a"),dYe=o("DetrConfig"),cYe=o(" (DETR model)"),fYe=l(),mm=a("li"),sne=a("strong"),mYe=o("distilbert"),gYe=o(" \u2014 "),hR=a("a"),hYe=o("DistilBertConfig"),pYe=o(" (DistilBERT model)"),_Ye=l(),gm=a("li"),lne=a("strong"),uYe=o("dpr"),bYe=o(" \u2014 "),pR=a("a"),vYe=o("DPRConfig"),FYe=o(" (DPR model)"),TYe=l(),hm=a("li"),ine=a("strong"),MYe=o("dpt"),EYe=o(" \u2014 "),_R=a("a"),CYe=o("DPTConfig"),wYe=o(" (DPT model)"),AYe=l(),pm=a("li"),dne=a("strong"),LYe=o("electra"),yYe=o(" \u2014 "),uR=a("a"),xYe=o("ElectraConfig"),$Ye=o(" (ELECTRA model)"),kYe=l(),_m=a("li"),cne=a("strong"),SYe=o("encoder-decoder"),RYe=o(" \u2014 "),bR=a("a"),PYe=o("EncoderDecoderConfig"),BYe=o(" (Encoder decoder model)"),NYe=l(),um=a("li"),fne=a("strong"),IYe=o("flaubert"),qYe=o(" \u2014 "),vR=a("a"),jYe=o("FlaubertConfig"),DYe=o(" (FlauBERT model)"),GYe=l(),bm=a("li"),mne=a("strong"),OYe=o("flava"),VYe=o(" \u2014 "),FR=a("a"),XYe=o("FlavaConfig"),zYe=o(" (FLAVA model)"),QYe=l(),vm=a("li"),gne=a("strong"),WYe=o("fnet"),HYe=o(" \u2014 "),TR=a("a"),UYe=o("FNetConfig"),JYe=o(" (FNet model)"),YYe=l(),Fm=a("li"),hne=a("strong"),KYe=o("fsmt"),ZYe=o(" \u2014 "),MR=a("a"),eKe=o("FSMTConfig"),oKe=o(" (FairSeq Machine-Translation model)"),rKe=l(),Tm=a("li"),pne=a("strong"),tKe=o("funnel"),aKe=o(" \u2014 "),ER=a("a"),nKe=o("FunnelConfig"),sKe=o(" (Funnel Transformer model)"),lKe=l(),Mm=a("li"),_ne=a("strong"),iKe=o("glpn"),dKe=o(" \u2014 "),CR=a("a"),cKe=o("GLPNConfig"),fKe=o(" (GLPN model)"),mKe=l(),Em=a("li"),une=a("strong"),gKe=o("gpt2"),hKe=o(" \u2014 "),wR=a("a"),pKe=o("GPT2Config"),_Ke=o(" (OpenAI GPT-2 model)"),uKe=l(),Cm=a("li"),bne=a("strong"),bKe=o("gpt_neo"),vKe=o(" \u2014 "),AR=a("a"),FKe=o("GPTNeoConfig"),TKe=o(" (GPT Neo model)"),MKe=l(),wm=a("li"),vne=a("strong"),EKe=o("gpt_neox"),CKe=o(" \u2014 "),LR=a("a"),wKe=o("GPTNeoXConfig"),AKe=o(" (GPT NeoX model)"),LKe=l(),Am=a("li"),Fne=a("strong"),yKe=o("gptj"),xKe=o(" \u2014 "),yR=a("a"),$Ke=o("GPTJConfig"),kKe=o(" (GPT-J model)"),SKe=l(),Lm=a("li"),Tne=a("strong"),RKe=o("groupvit"),PKe=o(" \u2014 "),xR=a("a"),BKe=o("GroupViTConfig"),NKe=o(" (GroupViT model)"),IKe=l(),ym=a("li"),Mne=a("strong"),qKe=o("hubert"),jKe=o(" \u2014 "),$R=a("a"),DKe=o("HubertConfig"),GKe=o(" (Hubert model)"),OKe=l(),xm=a("li"),Ene=a("strong"),VKe=o("ibert"),XKe=o(" \u2014 "),kR=a("a"),zKe=o("IBertConfig"),QKe=o(" (I-BERT model)"),WKe=l(),$m=a("li"),Cne=a("strong"),HKe=o("imagegpt"),UKe=o(" \u2014 "),SR=a("a"),JKe=o("ImageGPTConfig"),YKe=o(" (ImageGPT model)"),KKe=l(),km=a("li"),wne=a("strong"),ZKe=o("layoutlm"),eZe=o(" \u2014 "),RR=a("a"),oZe=o("LayoutLMConfig"),rZe=o(" (LayoutLM model)"),tZe=l(),Sm=a("li"),Ane=a("strong"),aZe=o("layoutlmv2"),nZe=o(" \u2014 "),PR=a("a"),sZe=o("LayoutLMv2Config"),lZe=o(" (LayoutLMv2 model)"),iZe=l(),Rm=a("li"),Lne=a("strong"),dZe=o("layoutlmv3"),cZe=o(" \u2014 "),BR=a("a"),fZe=o("LayoutLMv3Config"),mZe=o(" (LayoutLMv3 model)"),gZe=l(),Pm=a("li"),yne=a("strong"),hZe=o("led"),pZe=o(" \u2014 "),NR=a("a"),_Ze=o("LEDConfig"),uZe=o(" (LED model)"),bZe=l(),Bm=a("li"),xne=a("strong"),vZe=o("levit"),FZe=o(" \u2014 "),IR=a("a"),TZe=o("LevitConfig"),MZe=o(" (LeViT model)"),EZe=l(),Nm=a("li"),$ne=a("strong"),CZe=o("longformer"),wZe=o(" \u2014 "),qR=a("a"),AZe=o("LongformerConfig"),LZe=o(" (Longformer model)"),yZe=l(),Im=a("li"),kne=a("strong"),xZe=o("longt5"),$Ze=o(" \u2014 "),jR=a("a"),kZe=o("LongT5Config"),SZe=o(" (LongT5 model)"),RZe=l(),qm=a("li"),Sne=a("strong"),PZe=o("luke"),BZe=o(" \u2014 "),DR=a("a"),NZe=o("LukeConfig"),IZe=o(" (LUKE model)"),qZe=l(),jm=a("li"),Rne=a("strong"),jZe=o("lxmert"),DZe=o(" \u2014 "),GR=a("a"),GZe=o("LxmertConfig"),OZe=o(" (LXMERT model)"),VZe=l(),Dm=a("li"),Pne=a("strong"),XZe=o("m2m_100"),zZe=o(" \u2014 "),OR=a("a"),QZe=o("M2M100Config"),WZe=o(" (M2M100 model)"),HZe=l(),Gm=a("li"),Bne=a("strong"),UZe=o("marian"),JZe=o(" \u2014 "),VR=a("a"),YZe=o("MarianConfig"),KZe=o(" (Marian model)"),ZZe=l(),Om=a("li"),Nne=a("strong"),eeo=o("maskformer"),oeo=o(" \u2014 "),XR=a("a"),reo=o("MaskFormerConfig"),teo=o(" (MaskFormer model)"),aeo=l(),Vm=a("li"),Ine=a("strong"),neo=o("mbart"),seo=o(" \u2014 "),zR=a("a"),leo=o("MBartConfig"),ieo=o(" (mBART model)"),deo=l(),Xm=a("li"),qne=a("strong"),ceo=o("mctct"),feo=o(" \u2014 "),QR=a("a"),meo=o("MCTCTConfig"),geo=o(" (M-CTC-T model)"),heo=l(),zm=a("li"),jne=a("strong"),peo=o("megatron-bert"),_eo=o(" \u2014 "),WR=a("a"),ueo=o("MegatronBertConfig"),beo=o(" (Megatron-BERT model)"),veo=l(),Qm=a("li"),Dne=a("strong"),Feo=o("mobilebert"),Teo=o(" \u2014 "),HR=a("a"),Meo=o("MobileBertConfig"),Eeo=o(" (MobileBERT model)"),Ceo=l(),Wm=a("li"),Gne=a("strong"),weo=o("mobilenet_v2"),Aeo=o(" \u2014 "),UR=a("a"),Leo=o("MobileNetV2Config"),yeo=o(" (MobileNetV2 model)"),xeo=l(),Hm=a("li"),One=a("strong"),$eo=o("mobilevit"),keo=o(" \u2014 "),JR=a("a"),Seo=o("MobileViTConfig"),Reo=o(" (MobileViT model)"),Peo=l(),Um=a("li"),Vne=a("strong"),Beo=o("mpnet"),Neo=o(" \u2014 "),YR=a("a"),Ieo=o("MPNetConfig"),qeo=o(" (MPNet model)"),jeo=l(),Jm=a("li"),Xne=a("strong"),Deo=o("mt5"),Geo=o(" \u2014 "),KR=a("a"),Oeo=o("MT5Config"),Veo=o(" (MT5 model)"),Xeo=l(),Ym=a("li"),zne=a("strong"),zeo=o("mvp"),Qeo=o(" \u2014 "),ZR=a("a"),Weo=o("MvpConfig"),Heo=o(" (MVP model)"),Ueo=l(),Km=a("li"),Qne=a("strong"),Jeo=o("nezha"),Yeo=o(" \u2014 "),eP=a("a"),Keo=o("NezhaConfig"),Zeo=o(" (Nezha model)"),eoo=l(),Zm=a("li"),Wne=a("strong"),ooo=o("nystromformer"),roo=o(" \u2014 "),oP=a("a"),too=o("NystromformerConfig"),aoo=o(" (Nystr\xF6mformer model)"),noo=l(),eg=a("li"),Hne=a("strong"),soo=o("openai-gpt"),loo=o(" \u2014 "),rP=a("a"),ioo=o("OpenAIGPTConfig"),doo=o(" (OpenAI GPT model)"),coo=l(),og=a("li"),Une=a("strong"),foo=o("opt"),moo=o(" \u2014 "),tP=a("a"),goo=o("OPTConfig"),hoo=o(" (OPT model)"),poo=l(),rg=a("li"),Jne=a("strong"),_oo=o("pegasus"),uoo=o(" \u2014 "),aP=a("a"),boo=o("PegasusConfig"),voo=o(" (Pegasus model)"),Foo=l(),tg=a("li"),Yne=a("strong"),Too=o("perceiver"),Moo=o(" \u2014 "),nP=a("a"),Eoo=o("PerceiverConfig"),Coo=o(" (Perceiver model)"),woo=l(),ag=a("li"),Kne=a("strong"),Aoo=o("plbart"),Loo=o(" \u2014 "),sP=a("a"),yoo=o("PLBartConfig"),xoo=o(" (PLBart model)"),$oo=l(),ng=a("li"),Zne=a("strong"),koo=o("poolformer"),Soo=o(" \u2014 "),lP=a("a"),Roo=o("PoolFormerConfig"),Poo=o(" (PoolFormer model)"),Boo=l(),sg=a("li"),ese=a("strong"),Noo=o("prophetnet"),Ioo=o(" \u2014 "),iP=a("a"),qoo=o("ProphetNetConfig"),joo=o(" (ProphetNet model)"),Doo=l(),lg=a("li"),ose=a("strong"),Goo=o("qdqbert"),Ooo=o(" \u2014 "),dP=a("a"),Voo=o("QDQBertConfig"),Xoo=o(" (QDQBert model)"),zoo=l(),ig=a("li"),rse=a("strong"),Qoo=o("rag"),Woo=o(" \u2014 "),cP=a("a"),Hoo=o("RagConfig"),Uoo=o(" (RAG model)"),Joo=l(),dg=a("li"),tse=a("strong"),Yoo=o("realm"),Koo=o(" \u2014 "),fP=a("a"),Zoo=o("RealmConfig"),ero=o(" (REALM model)"),oro=l(),cg=a("li"),ase=a("strong"),rro=o("reformer"),tro=o(" \u2014 "),mP=a("a"),aro=o("ReformerConfig"),nro=o(" (Reformer model)"),sro=l(),fg=a("li"),nse=a("strong"),lro=o("regnet"),iro=o(" \u2014 "),gP=a("a"),dro=o("RegNetConfig"),cro=o(" (RegNet model)"),fro=l(),mg=a("li"),sse=a("strong"),mro=o("rembert"),gro=o(" \u2014 "),hP=a("a"),hro=o("RemBertConfig"),pro=o(" (RemBERT model)"),_ro=l(),gg=a("li"),lse=a("strong"),uro=o("resnet"),bro=o(" \u2014 "),pP=a("a"),vro=o("ResNetConfig"),Fro=o(" (ResNet model)"),Tro=l(),hg=a("li"),ise=a("strong"),Mro=o("retribert"),Ero=o(" \u2014 "),_P=a("a"),Cro=o("RetriBertConfig"),wro=o(" (RetriBERT model)"),Aro=l(),pg=a("li"),dse=a("strong"),Lro=o("roberta"),yro=o(" \u2014 "),uP=a("a"),xro=o("RobertaConfig"),$ro=o(" (RoBERTa model)"),kro=l(),_g=a("li"),cse=a("strong"),Sro=o("roformer"),Rro=o(" \u2014 "),bP=a("a"),Pro=o("RoFormerConfig"),Bro=o(" (RoFormer model)"),Nro=l(),ug=a("li"),fse=a("strong"),Iro=o("segformer"),qro=o(" \u2014 "),vP=a("a"),jro=o("SegformerConfig"),Dro=o(" (SegFormer model)"),Gro=l(),bg=a("li"),mse=a("strong"),Oro=o("sew"),Vro=o(" \u2014 "),FP=a("a"),Xro=o("SEWConfig"),zro=o(" (SEW model)"),Qro=l(),vg=a("li"),gse=a("strong"),Wro=o("sew-d"),Hro=o(" \u2014 "),TP=a("a"),Uro=o("SEWDConfig"),Jro=o(" (SEW-D model)"),Yro=l(),Fg=a("li"),hse=a("strong"),Kro=o("speech-encoder-decoder"),Zro=o(" \u2014 "),MP=a("a"),eto=o("SpeechEncoderDecoderConfig"),oto=o(" (Speech Encoder decoder model)"),rto=l(),Tg=a("li"),pse=a("strong"),tto=o("speech_to_text"),ato=o(" \u2014 "),EP=a("a"),nto=o("Speech2TextConfig"),sto=o(" (Speech2Text model)"),lto=l(),Mg=a("li"),_se=a("strong"),ito=o("speech_to_text_2"),dto=o(" \u2014 "),CP=a("a"),cto=o("Speech2Text2Config"),fto=o(" (Speech2Text2 model)"),mto=l(),Eg=a("li"),use=a("strong"),gto=o("splinter"),hto=o(" \u2014 "),wP=a("a"),pto=o("SplinterConfig"),_to=o(" (Splinter model)"),uto=l(),Cg=a("li"),bse=a("strong"),bto=o("squeezebert"),vto=o(" \u2014 "),AP=a("a"),Fto=o("SqueezeBertConfig"),Tto=o(" (SqueezeBERT model)"),Mto=l(),wg=a("li"),vse=a("strong"),Eto=o("swin"),Cto=o(" \u2014 "),LP=a("a"),wto=o("SwinConfig"),Ato=o(" (Swin Transformer model)"),Lto=l(),Ag=a("li"),Fse=a("strong"),yto=o("t5"),xto=o(" \u2014 "),yP=a("a"),$to=o("T5Config"),kto=o(" (T5 model)"),Sto=l(),Lg=a("li"),Tse=a("strong"),Rto=o("tapas"),Pto=o(" \u2014 "),xP=a("a"),Bto=o("TapasConfig"),Nto=o(" (TAPAS model)"),Ito=l(),yg=a("li"),Mse=a("strong"),qto=o("trajectory_transformer"),jto=o(" \u2014 "),$P=a("a"),Dto=o("TrajectoryTransformerConfig"),Gto=o(" (Trajectory Transformer model)"),Oto=l(),xg=a("li"),Ese=a("strong"),Vto=o("transfo-xl"),Xto=o(" \u2014 "),kP=a("a"),zto=o("TransfoXLConfig"),Qto=o(" (Transformer-XL model)"),Wto=l(),$g=a("li"),Cse=a("strong"),Hto=o("trocr"),Uto=o(" \u2014 "),SP=a("a"),Jto=o("TrOCRConfig"),Yto=o(" (TrOCR model)"),Kto=l(),kg=a("li"),wse=a("strong"),Zto=o("unispeech"),eao=o(" \u2014 "),RP=a("a"),oao=o("UniSpeechConfig"),rao=o(" (UniSpeech model)"),tao=l(),Sg=a("li"),Ase=a("strong"),aao=o("unispeech-sat"),nao=o(" \u2014 "),PP=a("a"),sao=o("UniSpeechSatConfig"),lao=o(" (UniSpeechSat model)"),iao=l(),Rg=a("li"),Lse=a("strong"),dao=o("van"),cao=o(" \u2014 "),BP=a("a"),fao=o("VanConfig"),mao=o(" (VAN model)"),gao=l(),Pg=a("li"),yse=a("strong"),hao=o("vilt"),pao=o(" \u2014 "),NP=a("a"),_ao=o("ViltConfig"),uao=o(" (ViLT model)"),bao=l(),Bg=a("li"),xse=a("strong"),vao=o("vision-encoder-decoder"),Fao=o(" \u2014 "),IP=a("a"),Tao=o("VisionEncoderDecoderConfig"),Mao=o(" (Vision Encoder decoder model)"),Eao=l(),Ng=a("li"),$se=a("strong"),Cao=o("vision-text-dual-encoder"),wao=o(" \u2014 "),qP=a("a"),Aao=o("VisionTextDualEncoderConfig"),Lao=o(" (VisionTextDualEncoder model)"),yao=l(),Ig=a("li"),kse=a("strong"),xao=o("visual_bert"),$ao=o(" \u2014 "),jP=a("a"),kao=o("VisualBertConfig"),Sao=o(" (VisualBERT model)"),Rao=l(),qg=a("li"),Sse=a("strong"),Pao=o("vit"),Bao=o(" \u2014 "),DP=a("a"),Nao=o("ViTConfig"),Iao=o(" (ViT model)"),qao=l(),jg=a("li"),Rse=a("strong"),jao=o("vit_mae"),Dao=o(" \u2014 "),GP=a("a"),Gao=o("ViTMAEConfig"),Oao=o(" (ViTMAE model)"),Vao=l(),Dg=a("li"),Pse=a("strong"),Xao=o("wav2vec2"),zao=o(" \u2014 "),OP=a("a"),Qao=o("Wav2Vec2Config"),Wao=o(" (Wav2Vec2 model)"),Hao=l(),Gg=a("li"),Bse=a("strong"),Uao=o("wav2vec2-conformer"),Jao=o(" \u2014 "),VP=a("a"),Yao=o("Wav2Vec2ConformerConfig"),Kao=o(" (Wav2Vec2-Conformer model)"),Zao=l(),Og=a("li"),Nse=a("strong"),eno=o("wavlm"),ono=o(" \u2014 "),XP=a("a"),rno=o("WavLMConfig"),tno=o(" (WavLM model)"),ano=l(),Vg=a("li"),Ise=a("strong"),nno=o("xglm"),sno=o(" \u2014 "),zP=a("a"),lno=o("XGLMConfig"),ino=o(" (XGLM model)"),dno=l(),Xg=a("li"),qse=a("strong"),cno=o("xlm"),fno=o(" \u2014 "),QP=a("a"),mno=o("XLMConfig"),gno=o(" (XLM model)"),hno=l(),zg=a("li"),jse=a("strong"),pno=o("xlm-prophetnet"),_no=o(" \u2014 "),WP=a("a"),uno=o("XLMProphetNetConfig"),bno=o(" (XLM-ProphetNet model)"),vno=l(),Qg=a("li"),Dse=a("strong"),Fno=o("xlm-roberta"),Tno=o(" \u2014 "),HP=a("a"),Mno=o("XLMRobertaConfig"),Eno=o(" (XLM-RoBERTa model)"),Cno=l(),Wg=a("li"),Gse=a("strong"),wno=o("xlm-roberta-xl"),Ano=o(" \u2014 "),UP=a("a"),Lno=o("XLMRobertaXLConfig"),yno=o(" (XLM-RoBERTa-XL model)"),xno=l(),Hg=a("li"),Ose=a("strong"),$no=o("xlnet"),kno=o(" \u2014 "),JP=a("a"),Sno=o("XLNetConfig"),Rno=o(" (XLNet model)"),Pno=l(),Ug=a("li"),Vse=a("strong"),Bno=o("yolos"),Nno=o(" \u2014 "),YP=a("a"),Ino=o("YolosConfig"),qno=o(" (YOLOS model)"),jno=l(),Jg=a("li"),Xse=a("strong"),Dno=o("yoso"),Gno=o(" \u2014 "),KP=a("a"),Ono=o("YosoConfig"),Vno=o(" (YOSO model)"),Xno=l(),F(Yg.$$.fragment),zno=l(),Kg=a("div"),F(mL.$$.fragment),Qno=l(),zse=a("p"),Wno=o("Register a new configuration for this class."),lXe=l(),Ni=a("h2"),Zg=a("a"),Qse=a("span"),F(gL.$$.fragment),Hno=l(),Wse=a("span"),Uno=o("AutoTokenizer"),iXe=l(),Ao=a("div"),F(hL.$$.fragment),Jno=l(),pL=a("p"),Yno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZP=a("a"),Kno=o("AutoTokenizer.from_pretrained()"),Zno=o(" class method."),eso=l(),_L=a("p"),oso=o("This class cannot be instantiated directly using "),Hse=a("code"),rso=o("__init__()"),tso=o(" (throws an error)."),aso=l(),yr=a("div"),F(uL.$$.fragment),nso=l(),Use=a("p"),sso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lso=l(),Pa=a("p"),iso=o("The tokenizer class to instantiate is selected based on the "),Jse=a("code"),dso=o("model_type"),cso=o(` property of the config object (either
passed as an argument or loaded from `),Yse=a("code"),fso=o("pretrained_model_name_or_path"),mso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=a("code"),gso=o("pretrained_model_name_or_path"),hso=o(":"),pso=l(),k=a("ul"),jn=a("li"),Zse=a("strong"),_so=o("albert"),uso=o(" \u2014 "),eB=a("a"),bso=o("AlbertTokenizer"),vso=o(" or "),oB=a("a"),Fso=o("AlbertTokenizerFast"),Tso=o(" (ALBERT model)"),Mso=l(),Dn=a("li"),ele=a("strong"),Eso=o("bart"),Cso=o(" \u2014 "),rB=a("a"),wso=o("BartTokenizer"),Aso=o(" or "),tB=a("a"),Lso=o("BartTokenizerFast"),yso=o(" (BART model)"),xso=l(),Gn=a("li"),ole=a("strong"),$so=o("barthez"),kso=o(" \u2014 "),aB=a("a"),Sso=o("BarthezTokenizer"),Rso=o(" or "),nB=a("a"),Pso=o("BarthezTokenizerFast"),Bso=o(" (BARThez model)"),Nso=l(),eh=a("li"),rle=a("strong"),Iso=o("bartpho"),qso=o(" \u2014 "),sB=a("a"),jso=o("BartphoTokenizer"),Dso=o(" (BARTpho model)"),Gso=l(),On=a("li"),tle=a("strong"),Oso=o("bert"),Vso=o(" \u2014 "),lB=a("a"),Xso=o("BertTokenizer"),zso=o(" or "),iB=a("a"),Qso=o("BertTokenizerFast"),Wso=o(" (BERT model)"),Hso=l(),oh=a("li"),ale=a("strong"),Uso=o("bert-generation"),Jso=o(" \u2014 "),dB=a("a"),Yso=o("BertGenerationTokenizer"),Kso=o(" (Bert Generation model)"),Zso=l(),rh=a("li"),nle=a("strong"),elo=o("bert-japanese"),olo=o(" \u2014 "),cB=a("a"),rlo=o("BertJapaneseTokenizer"),tlo=o(" (BertJapanese model)"),alo=l(),th=a("li"),sle=a("strong"),nlo=o("bertweet"),slo=o(" \u2014 "),fB=a("a"),llo=o("BertweetTokenizer"),ilo=o(" (BERTweet model)"),dlo=l(),Vn=a("li"),lle=a("strong"),clo=o("big_bird"),flo=o(" \u2014 "),mB=a("a"),mlo=o("BigBirdTokenizer"),glo=o(" or "),gB=a("a"),hlo=o("BigBirdTokenizerFast"),plo=o(" (BigBird model)"),_lo=l(),Xn=a("li"),ile=a("strong"),ulo=o("bigbird_pegasus"),blo=o(" \u2014 "),hB=a("a"),vlo=o("PegasusTokenizer"),Flo=o(" or "),pB=a("a"),Tlo=o("PegasusTokenizerFast"),Mlo=o(" (BigBird-Pegasus model)"),Elo=l(),zn=a("li"),dle=a("strong"),Clo=o("blenderbot"),wlo=o(" \u2014 "),_B=a("a"),Alo=o("BlenderbotTokenizer"),Llo=o(" or "),uB=a("a"),ylo=o("BlenderbotTokenizerFast"),xlo=o(" (Blenderbot model)"),$lo=l(),ah=a("li"),cle=a("strong"),klo=o("blenderbot-small"),Slo=o(" \u2014 "),bB=a("a"),Rlo=o("BlenderbotSmallTokenizer"),Plo=o(" (BlenderbotSmall model)"),Blo=l(),nh=a("li"),fle=a("strong"),Nlo=o("bloom"),Ilo=o(" \u2014 "),vB=a("a"),qlo=o("BloomTokenizerFast"),jlo=o(" (BLOOM model)"),Dlo=l(),sh=a("li"),mle=a("strong"),Glo=o("byt5"),Olo=o(" \u2014 "),FB=a("a"),Vlo=o("ByT5Tokenizer"),Xlo=o(" (ByT5 model)"),zlo=l(),Qn=a("li"),gle=a("strong"),Qlo=o("camembert"),Wlo=o(" \u2014 "),TB=a("a"),Hlo=o("CamembertTokenizer"),Ulo=o(" or "),MB=a("a"),Jlo=o("CamembertTokenizerFast"),Ylo=o(" (CamemBERT model)"),Klo=l(),lh=a("li"),hle=a("strong"),Zlo=o("canine"),eio=o(" \u2014 "),EB=a("a"),oio=o("CanineTokenizer"),rio=o(" (CANINE model)"),tio=l(),Wn=a("li"),ple=a("strong"),aio=o("clip"),nio=o(" \u2014 "),CB=a("a"),sio=o("CLIPTokenizer"),lio=o(" or "),wB=a("a"),iio=o("CLIPTokenizerFast"),dio=o(" (CLIP model)"),cio=l(),Hn=a("li"),_le=a("strong"),fio=o("codegen"),mio=o(" \u2014 "),AB=a("a"),gio=o("CodeGenTokenizer"),hio=o(" or "),LB=a("a"),pio=o("CodeGenTokenizerFast"),_io=o(" (CodeGen model)"),uio=l(),Un=a("li"),ule=a("strong"),bio=o("convbert"),vio=o(" \u2014 "),yB=a("a"),Fio=o("ConvBertTokenizer"),Tio=o(" or "),xB=a("a"),Mio=o("ConvBertTokenizerFast"),Eio=o(" (ConvBERT model)"),Cio=l(),Jn=a("li"),ble=a("strong"),wio=o("cpm"),Aio=o(" \u2014 "),$B=a("a"),Lio=o("CpmTokenizer"),yio=o(" or "),kB=a("a"),xio=o("CpmTokenizerFast"),$io=o(" (CPM model)"),kio=l(),ih=a("li"),vle=a("strong"),Sio=o("ctrl"),Rio=o(" \u2014 "),SB=a("a"),Pio=o("CTRLTokenizer"),Bio=o(" (CTRL model)"),Nio=l(),Yn=a("li"),Fle=a("strong"),Iio=o("data2vec-text"),qio=o(" \u2014 "),RB=a("a"),jio=o("RobertaTokenizer"),Dio=o(" or "),PB=a("a"),Gio=o("RobertaTokenizerFast"),Oio=o(" (Data2VecText model)"),Vio=l(),Kn=a("li"),Tle=a("strong"),Xio=o("deberta"),zio=o(" \u2014 "),BB=a("a"),Qio=o("DebertaTokenizer"),Wio=o(" or "),NB=a("a"),Hio=o("DebertaTokenizerFast"),Uio=o(" (DeBERTa model)"),Jio=l(),Zn=a("li"),Mle=a("strong"),Yio=o("deberta-v2"),Kio=o(" \u2014 "),IB=a("a"),Zio=o("DebertaV2Tokenizer"),edo=o(" or "),qB=a("a"),odo=o("DebertaV2TokenizerFast"),rdo=o(" (DeBERTa-v2 model)"),tdo=l(),es=a("li"),Ele=a("strong"),ado=o("distilbert"),ndo=o(" \u2014 "),jB=a("a"),sdo=o("DistilBertTokenizer"),ldo=o(" or "),DB=a("a"),ido=o("DistilBertTokenizerFast"),ddo=o(" (DistilBERT model)"),cdo=l(),os=a("li"),Cle=a("strong"),fdo=o("dpr"),mdo=o(" \u2014 "),GB=a("a"),gdo=o("DPRQuestionEncoderTokenizer"),hdo=o(" or "),OB=a("a"),pdo=o("DPRQuestionEncoderTokenizerFast"),_do=o(" (DPR model)"),udo=l(),rs=a("li"),wle=a("strong"),bdo=o("electra"),vdo=o(" \u2014 "),VB=a("a"),Fdo=o("ElectraTokenizer"),Tdo=o(" or "),XB=a("a"),Mdo=o("ElectraTokenizerFast"),Edo=o(" (ELECTRA model)"),Cdo=l(),dh=a("li"),Ale=a("strong"),wdo=o("flaubert"),Ado=o(" \u2014 "),zB=a("a"),Ldo=o("FlaubertTokenizer"),ydo=o(" (FlauBERT model)"),xdo=l(),ts=a("li"),Lle=a("strong"),$do=o("fnet"),kdo=o(" \u2014 "),QB=a("a"),Sdo=o("FNetTokenizer"),Rdo=o(" or "),WB=a("a"),Pdo=o("FNetTokenizerFast"),Bdo=o(" (FNet model)"),Ndo=l(),ch=a("li"),yle=a("strong"),Ido=o("fsmt"),qdo=o(" \u2014 "),HB=a("a"),jdo=o("FSMTTokenizer"),Ddo=o(" (FairSeq Machine-Translation model)"),Gdo=l(),as=a("li"),xle=a("strong"),Odo=o("funnel"),Vdo=o(" \u2014 "),UB=a("a"),Xdo=o("FunnelTokenizer"),zdo=o(" or "),JB=a("a"),Qdo=o("FunnelTokenizerFast"),Wdo=o(" (Funnel Transformer model)"),Hdo=l(),ns=a("li"),$le=a("strong"),Udo=o("gpt2"),Jdo=o(" \u2014 "),YB=a("a"),Ydo=o("GPT2Tokenizer"),Kdo=o(" or "),KB=a("a"),Zdo=o("GPT2TokenizerFast"),eco=o(" (OpenAI GPT-2 model)"),oco=l(),ss=a("li"),kle=a("strong"),rco=o("gpt_neo"),tco=o(" \u2014 "),ZB=a("a"),aco=o("GPT2Tokenizer"),nco=o(" or "),eN=a("a"),sco=o("GPT2TokenizerFast"),lco=o(" (GPT Neo model)"),ico=l(),fh=a("li"),Sle=a("strong"),dco=o("gpt_neox"),cco=o(" \u2014 "),oN=a("a"),fco=o("GPTNeoXTokenizerFast"),mco=o(" (GPT NeoX model)"),gco=l(),ls=a("li"),Rle=a("strong"),hco=o("gptj"),pco=o(" \u2014 "),rN=a("a"),_co=o("GPT2Tokenizer"),uco=o(" or "),tN=a("a"),bco=o("GPT2TokenizerFast"),vco=o(" (GPT-J model)"),Fco=l(),is=a("li"),Ple=a("strong"),Tco=o("groupvit"),Mco=o(" \u2014 "),aN=a("a"),Eco=o("CLIPTokenizer"),Cco=o(" or "),nN=a("a"),wco=o("CLIPTokenizerFast"),Aco=o(" (GroupViT model)"),Lco=l(),ds=a("li"),Ble=a("strong"),yco=o("herbert"),xco=o(" \u2014 "),sN=a("a"),$co=o("HerbertTokenizer"),kco=o(" or "),lN=a("a"),Sco=o("HerbertTokenizerFast"),Rco=o(" (HerBERT model)"),Pco=l(),mh=a("li"),Nle=a("strong"),Bco=o("hubert"),Nco=o(" \u2014 "),iN=a("a"),Ico=o("Wav2Vec2CTCTokenizer"),qco=o(" (Hubert model)"),jco=l(),cs=a("li"),Ile=a("strong"),Dco=o("ibert"),Gco=o(" \u2014 "),dN=a("a"),Oco=o("RobertaTokenizer"),Vco=o(" or "),cN=a("a"),Xco=o("RobertaTokenizerFast"),zco=o(" (I-BERT model)"),Qco=l(),fs=a("li"),qle=a("strong"),Wco=o("layoutlm"),Hco=o(" \u2014 "),fN=a("a"),Uco=o("LayoutLMTokenizer"),Jco=o(" or "),mN=a("a"),Yco=o("LayoutLMTokenizerFast"),Kco=o(" (LayoutLM model)"),Zco=l(),ms=a("li"),jle=a("strong"),efo=o("layoutlmv2"),ofo=o(" \u2014 "),gN=a("a"),rfo=o("LayoutLMv2Tokenizer"),tfo=o(" or "),hN=a("a"),afo=o("LayoutLMv2TokenizerFast"),nfo=o(" (LayoutLMv2 model)"),sfo=l(),gs=a("li"),Dle=a("strong"),lfo=o("layoutlmv3"),ifo=o(" \u2014 "),pN=a("a"),dfo=o("LayoutLMv3Tokenizer"),cfo=o(" or "),_N=a("a"),ffo=o("LayoutLMv3TokenizerFast"),mfo=o(" (LayoutLMv3 model)"),gfo=l(),hs=a("li"),Gle=a("strong"),hfo=o("layoutxlm"),pfo=o(" \u2014 "),uN=a("a"),_fo=o("LayoutXLMTokenizer"),ufo=o(" or "),bN=a("a"),bfo=o("LayoutXLMTokenizerFast"),vfo=o(" (LayoutXLM model)"),Ffo=l(),ps=a("li"),Ole=a("strong"),Tfo=o("led"),Mfo=o(" \u2014 "),vN=a("a"),Efo=o("LEDTokenizer"),Cfo=o(" or "),FN=a("a"),wfo=o("LEDTokenizerFast"),Afo=o(" (LED model)"),Lfo=l(),_s=a("li"),Vle=a("strong"),yfo=o("longformer"),xfo=o(" \u2014 "),TN=a("a"),$fo=o("LongformerTokenizer"),kfo=o(" or "),MN=a("a"),Sfo=o("LongformerTokenizerFast"),Rfo=o(" (Longformer model)"),Pfo=l(),us=a("li"),Xle=a("strong"),Bfo=o("longt5"),Nfo=o(" \u2014 "),EN=a("a"),Ifo=o("T5Tokenizer"),qfo=o(" or "),CN=a("a"),jfo=o("T5TokenizerFast"),Dfo=o(" (LongT5 model)"),Gfo=l(),gh=a("li"),zle=a("strong"),Ofo=o("luke"),Vfo=o(" \u2014 "),wN=a("a"),Xfo=o("LukeTokenizer"),zfo=o(" (LUKE model)"),Qfo=l(),bs=a("li"),Qle=a("strong"),Wfo=o("lxmert"),Hfo=o(" \u2014 "),AN=a("a"),Ufo=o("LxmertTokenizer"),Jfo=o(" or "),LN=a("a"),Yfo=o("LxmertTokenizerFast"),Kfo=o(" (LXMERT model)"),Zfo=l(),hh=a("li"),Wle=a("strong"),emo=o("m2m_100"),omo=o(" \u2014 "),yN=a("a"),rmo=o("M2M100Tokenizer"),tmo=o(" (M2M100 model)"),amo=l(),ph=a("li"),Hle=a("strong"),nmo=o("marian"),smo=o(" \u2014 "),xN=a("a"),lmo=o("MarianTokenizer"),imo=o(" (Marian model)"),dmo=l(),vs=a("li"),Ule=a("strong"),cmo=o("mbart"),fmo=o(" \u2014 "),$N=a("a"),mmo=o("MBartTokenizer"),gmo=o(" or "),kN=a("a"),hmo=o("MBartTokenizerFast"),pmo=o(" (mBART model)"),_mo=l(),Fs=a("li"),Jle=a("strong"),umo=o("mbart50"),bmo=o(" \u2014 "),SN=a("a"),vmo=o("MBart50Tokenizer"),Fmo=o(" or "),RN=a("a"),Tmo=o("MBart50TokenizerFast"),Mmo=o(" (mBART-50 model)"),Emo=l(),Ts=a("li"),Yle=a("strong"),Cmo=o("megatron-bert"),wmo=o(" \u2014 "),PN=a("a"),Amo=o("BertTokenizer"),Lmo=o(" or "),BN=a("a"),ymo=o("BertTokenizerFast"),xmo=o(" (Megatron-BERT model)"),$mo=l(),_h=a("li"),Kle=a("strong"),kmo=o("mluke"),Smo=o(" \u2014 "),NN=a("a"),Rmo=o("MLukeTokenizer"),Pmo=o(" (mLUKE model)"),Bmo=l(),Ms=a("li"),Zle=a("strong"),Nmo=o("mobilebert"),Imo=o(" \u2014 "),IN=a("a"),qmo=o("MobileBertTokenizer"),jmo=o(" or "),qN=a("a"),Dmo=o("MobileBertTokenizerFast"),Gmo=o(" (MobileBERT model)"),Omo=l(),Es=a("li"),eie=a("strong"),Vmo=o("mpnet"),Xmo=o(" \u2014 "),jN=a("a"),zmo=o("MPNetTokenizer"),Qmo=o(" or "),DN=a("a"),Wmo=o("MPNetTokenizerFast"),Hmo=o(" (MPNet model)"),Umo=l(),Cs=a("li"),oie=a("strong"),Jmo=o("mt5"),Ymo=o(" \u2014 "),GN=a("a"),Kmo=o("MT5Tokenizer"),Zmo=o(" or "),ON=a("a"),ego=o("MT5TokenizerFast"),ogo=o(" (MT5 model)"),rgo=l(),ws=a("li"),rie=a("strong"),tgo=o("mvp"),ago=o(" \u2014 "),VN=a("a"),ngo=o("MvpTokenizer"),sgo=o(" or "),XN=a("a"),lgo=o("MvpTokenizerFast"),igo=o(" (MVP model)"),dgo=l(),As=a("li"),tie=a("strong"),cgo=o("nezha"),fgo=o(" \u2014 "),zN=a("a"),mgo=o("BertTokenizer"),ggo=o(" or "),QN=a("a"),hgo=o("BertTokenizerFast"),pgo=o(" (Nezha model)"),_go=l(),Ls=a("li"),aie=a("strong"),ugo=o("nystromformer"),bgo=o(" \u2014 "),WN=a("a"),vgo=o("AlbertTokenizer"),Fgo=o(" or "),HN=a("a"),Tgo=o("AlbertTokenizerFast"),Mgo=o(" (Nystr\xF6mformer model)"),Ego=l(),ys=a("li"),nie=a("strong"),Cgo=o("openai-gpt"),wgo=o(" \u2014 "),UN=a("a"),Ago=o("OpenAIGPTTokenizer"),Lgo=o(" or "),JN=a("a"),ygo=o("OpenAIGPTTokenizerFast"),xgo=o(" (OpenAI GPT model)"),$go=l(),uh=a("li"),sie=a("strong"),kgo=o("opt"),Sgo=o(" \u2014 "),YN=a("a"),Rgo=o("GPT2Tokenizer"),Pgo=o(" (OPT model)"),Bgo=l(),xs=a("li"),lie=a("strong"),Ngo=o("pegasus"),Igo=o(" \u2014 "),KN=a("a"),qgo=o("PegasusTokenizer"),jgo=o(" or "),ZN=a("a"),Dgo=o("PegasusTokenizerFast"),Ggo=o(" (Pegasus model)"),Ogo=l(),bh=a("li"),iie=a("strong"),Vgo=o("perceiver"),Xgo=o(" \u2014 "),eI=a("a"),zgo=o("PerceiverTokenizer"),Qgo=o(" (Perceiver model)"),Wgo=l(),vh=a("li"),die=a("strong"),Hgo=o("phobert"),Ugo=o(" \u2014 "),oI=a("a"),Jgo=o("PhobertTokenizer"),Ygo=o(" (PhoBERT model)"),Kgo=l(),Fh=a("li"),cie=a("strong"),Zgo=o("plbart"),eho=o(" \u2014 "),rI=a("a"),oho=o("PLBartTokenizer"),rho=o(" (PLBart model)"),tho=l(),Th=a("li"),fie=a("strong"),aho=o("prophetnet"),nho=o(" \u2014 "),tI=a("a"),sho=o("ProphetNetTokenizer"),lho=o(" (ProphetNet model)"),iho=l(),$s=a("li"),mie=a("strong"),dho=o("qdqbert"),cho=o(" \u2014 "),aI=a("a"),fho=o("BertTokenizer"),mho=o(" or "),nI=a("a"),gho=o("BertTokenizerFast"),hho=o(" (QDQBert model)"),pho=l(),Mh=a("li"),gie=a("strong"),_ho=o("rag"),uho=o(" \u2014 "),sI=a("a"),bho=o("RagTokenizer"),vho=o(" (RAG model)"),Fho=l(),ks=a("li"),hie=a("strong"),Tho=o("realm"),Mho=o(" \u2014 "),lI=a("a"),Eho=o("RealmTokenizer"),Cho=o(" or "),iI=a("a"),who=o("RealmTokenizerFast"),Aho=o(" (REALM model)"),Lho=l(),Ss=a("li"),pie=a("strong"),yho=o("reformer"),xho=o(" \u2014 "),dI=a("a"),$ho=o("ReformerTokenizer"),kho=o(" or "),cI=a("a"),Sho=o("ReformerTokenizerFast"),Rho=o(" (Reformer model)"),Pho=l(),Rs=a("li"),_ie=a("strong"),Bho=o("rembert"),Nho=o(" \u2014 "),fI=a("a"),Iho=o("RemBertTokenizer"),qho=o(" or "),mI=a("a"),jho=o("RemBertTokenizerFast"),Dho=o(" (RemBERT model)"),Gho=l(),Ps=a("li"),uie=a("strong"),Oho=o("retribert"),Vho=o(" \u2014 "),gI=a("a"),Xho=o("RetriBertTokenizer"),zho=o(" or "),hI=a("a"),Qho=o("RetriBertTokenizerFast"),Who=o(" (RetriBERT model)"),Hho=l(),Bs=a("li"),bie=a("strong"),Uho=o("roberta"),Jho=o(" \u2014 "),pI=a("a"),Yho=o("RobertaTokenizer"),Kho=o(" or "),_I=a("a"),Zho=o("RobertaTokenizerFast"),epo=o(" (RoBERTa model)"),opo=l(),Ns=a("li"),vie=a("strong"),rpo=o("roformer"),tpo=o(" \u2014 "),uI=a("a"),apo=o("RoFormerTokenizer"),npo=o(" or "),bI=a("a"),spo=o("RoFormerTokenizerFast"),lpo=o(" (RoFormer model)"),ipo=l(),Eh=a("li"),Fie=a("strong"),dpo=o("speech_to_text"),cpo=o(" \u2014 "),vI=a("a"),fpo=o("Speech2TextTokenizer"),mpo=o(" (Speech2Text model)"),gpo=l(),Ch=a("li"),Tie=a("strong"),hpo=o("speech_to_text_2"),ppo=o(" \u2014 "),FI=a("a"),_po=o("Speech2Text2Tokenizer"),upo=o(" (Speech2Text2 model)"),bpo=l(),Is=a("li"),Mie=a("strong"),vpo=o("splinter"),Fpo=o(" \u2014 "),TI=a("a"),Tpo=o("SplinterTokenizer"),Mpo=o(" or "),MI=a("a"),Epo=o("SplinterTokenizerFast"),Cpo=o(" (Splinter model)"),wpo=l(),qs=a("li"),Eie=a("strong"),Apo=o("squeezebert"),Lpo=o(" \u2014 "),EI=a("a"),ypo=o("SqueezeBertTokenizer"),xpo=o(" or "),CI=a("a"),$po=o("SqueezeBertTokenizerFast"),kpo=o(" (SqueezeBERT model)"),Spo=l(),js=a("li"),Cie=a("strong"),Rpo=o("t5"),Ppo=o(" \u2014 "),wI=a("a"),Bpo=o("T5Tokenizer"),Npo=o(" or "),AI=a("a"),Ipo=o("T5TokenizerFast"),qpo=o(" (T5 model)"),jpo=l(),wh=a("li"),wie=a("strong"),Dpo=o("tapas"),Gpo=o(" \u2014 "),LI=a("a"),Opo=o("TapasTokenizer"),Vpo=o(" (TAPAS model)"),Xpo=l(),Ah=a("li"),Aie=a("strong"),zpo=o("tapex"),Qpo=o(" \u2014 "),yI=a("a"),Wpo=o("TapexTokenizer"),Hpo=o(" (TAPEX model)"),Upo=l(),Lh=a("li"),Lie=a("strong"),Jpo=o("transfo-xl"),Ypo=o(" \u2014 "),xI=a("a"),Kpo=o("TransfoXLTokenizer"),Zpo=o(" (Transformer-XL model)"),e_o=l(),Ds=a("li"),yie=a("strong"),o_o=o("vilt"),r_o=o(" \u2014 "),$I=a("a"),t_o=o("BertTokenizer"),a_o=o(" or "),kI=a("a"),n_o=o("BertTokenizerFast"),s_o=o(" (ViLT model)"),l_o=l(),Gs=a("li"),xie=a("strong"),i_o=o("visual_bert"),d_o=o(" \u2014 "),SI=a("a"),c_o=o("BertTokenizer"),f_o=o(" or "),RI=a("a"),m_o=o("BertTokenizerFast"),g_o=o(" (VisualBERT model)"),h_o=l(),yh=a("li"),$ie=a("strong"),p_o=o("wav2vec2"),__o=o(" \u2014 "),PI=a("a"),u_o=o("Wav2Vec2CTCTokenizer"),b_o=o(" (Wav2Vec2 model)"),v_o=l(),xh=a("li"),kie=a("strong"),F_o=o("wav2vec2-conformer"),T_o=o(" \u2014 "),BI=a("a"),M_o=o("Wav2Vec2CTCTokenizer"),E_o=o(" (Wav2Vec2-Conformer model)"),C_o=l(),$h=a("li"),Sie=a("strong"),w_o=o("wav2vec2_phoneme"),A_o=o(" \u2014 "),NI=a("a"),L_o=o("Wav2Vec2PhonemeCTCTokenizer"),y_o=o(" (Wav2Vec2Phoneme model)"),x_o=l(),Os=a("li"),Rie=a("strong"),$_o=o("xglm"),k_o=o(" \u2014 "),II=a("a"),S_o=o("XGLMTokenizer"),R_o=o(" or "),qI=a("a"),P_o=o("XGLMTokenizerFast"),B_o=o(" (XGLM model)"),N_o=l(),kh=a("li"),Pie=a("strong"),I_o=o("xlm"),q_o=o(" \u2014 "),jI=a("a"),j_o=o("XLMTokenizer"),D_o=o(" (XLM model)"),G_o=l(),Sh=a("li"),Bie=a("strong"),O_o=o("xlm-prophetnet"),V_o=o(" \u2014 "),DI=a("a"),X_o=o("XLMProphetNetTokenizer"),z_o=o(" (XLM-ProphetNet model)"),Q_o=l(),Vs=a("li"),Nie=a("strong"),W_o=o("xlm-roberta"),H_o=o(" \u2014 "),GI=a("a"),U_o=o("XLMRobertaTokenizer"),J_o=o(" or "),OI=a("a"),Y_o=o("XLMRobertaTokenizerFast"),K_o=o(" (XLM-RoBERTa model)"),Z_o=l(),Xs=a("li"),Iie=a("strong"),euo=o("xlm-roberta-xl"),ouo=o(" \u2014 "),VI=a("a"),ruo=o("RobertaTokenizer"),tuo=o(" or "),XI=a("a"),auo=o("RobertaTokenizerFast"),nuo=o(" (XLM-RoBERTa-XL model)"),suo=l(),zs=a("li"),qie=a("strong"),luo=o("xlnet"),iuo=o(" \u2014 "),zI=a("a"),duo=o("XLNetTokenizer"),cuo=o(" or "),QI=a("a"),fuo=o("XLNetTokenizerFast"),muo=o(" (XLNet model)"),guo=l(),Qs=a("li"),jie=a("strong"),huo=o("yoso"),puo=o(" \u2014 "),WI=a("a"),_uo=o("AlbertTokenizer"),uuo=o(" or "),HI=a("a"),buo=o("AlbertTokenizerFast"),vuo=o(" (YOSO model)"),Fuo=l(),F(Rh.$$.fragment),Tuo=l(),Ph=a("div"),F(bL.$$.fragment),Muo=l(),Die=a("p"),Euo=o("Register a new tokenizer in this mapping."),dXe=l(),Ii=a("h2"),Bh=a("a"),Gie=a("span"),F(vL.$$.fragment),Cuo=l(),Oie=a("span"),wuo=o("AutoFeatureExtractor"),cXe=l(),Lo=a("div"),F(FL.$$.fragment),Auo=l(),TL=a("p"),Luo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UI=a("a"),yuo=o("AutoFeatureExtractor.from_pretrained()"),xuo=o(" class method."),$uo=l(),ML=a("p"),kuo=o("This class cannot be instantiated directly using "),Vie=a("code"),Suo=o("__init__()"),Ruo=o(" (throws an error)."),Puo=l(),He=a("div"),F(EL.$$.fragment),Buo=l(),Xie=a("p"),Nuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Iuo=l(),Ba=a("p"),quo=o("The feature extractor class to instantiate is selected based on the "),zie=a("code"),juo=o("model_type"),Duo=o(` property of the config object
(either passed as an argument or loaded from `),Qie=a("code"),Guo=o("pretrained_model_name_or_path"),Ouo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wie=a("code"),Vuo=o("pretrained_model_name_or_path"),Xuo=o(":"),zuo=l(),J=a("ul"),Nh=a("li"),Hie=a("strong"),Quo=o("beit"),Wuo=o(" \u2014 "),JI=a("a"),Huo=o("BeitFeatureExtractor"),Uuo=o(" (BEiT model)"),Juo=l(),Ih=a("li"),Uie=a("strong"),Yuo=o("clip"),Kuo=o(" \u2014 "),YI=a("a"),Zuo=o("CLIPFeatureExtractor"),e1o=o(" (CLIP model)"),o1o=l(),qh=a("li"),Jie=a("strong"),r1o=o("convnext"),t1o=o(" \u2014 "),KI=a("a"),a1o=o("ConvNextFeatureExtractor"),n1o=o(" (ConvNeXT model)"),s1o=l(),jh=a("li"),Yie=a("strong"),l1o=o("cvt"),i1o=o(" \u2014 "),ZI=a("a"),d1o=o("ConvNextFeatureExtractor"),c1o=o(" (CvT model)"),f1o=l(),Dh=a("li"),Kie=a("strong"),m1o=o("data2vec-audio"),g1o=o(" \u2014 "),eq=a("a"),h1o=o("Wav2Vec2FeatureExtractor"),p1o=o(" (Data2VecAudio model)"),_1o=l(),Gh=a("li"),Zie=a("strong"),u1o=o("data2vec-vision"),b1o=o(" \u2014 "),oq=a("a"),v1o=o("BeitFeatureExtractor"),F1o=o(" (Data2VecVision model)"),T1o=l(),Oh=a("li"),ede=a("strong"),M1o=o("deit"),E1o=o(" \u2014 "),rq=a("a"),C1o=o("DeiTFeatureExtractor"),w1o=o(" (DeiT model)"),A1o=l(),Vh=a("li"),ode=a("strong"),L1o=o("detr"),y1o=o(" \u2014 "),tq=a("a"),x1o=o("DetrFeatureExtractor"),$1o=o(" (DETR model)"),k1o=l(),Xh=a("li"),rde=a("strong"),S1o=o("dpt"),R1o=o(" \u2014 "),aq=a("a"),P1o=o("DPTFeatureExtractor"),B1o=o(" (DPT model)"),N1o=l(),zh=a("li"),tde=a("strong"),I1o=o("flava"),q1o=o(" \u2014 "),nq=a("a"),j1o=o("FlavaFeatureExtractor"),D1o=o(" (FLAVA model)"),G1o=l(),Qh=a("li"),ade=a("strong"),O1o=o("glpn"),V1o=o(" \u2014 "),sq=a("a"),X1o=o("GLPNFeatureExtractor"),z1o=o(" (GLPN model)"),Q1o=l(),Wh=a("li"),nde=a("strong"),W1o=o("groupvit"),H1o=o(" \u2014 "),lq=a("a"),U1o=o("CLIPFeatureExtractor"),J1o=o(" (GroupViT model)"),Y1o=l(),Hh=a("li"),sde=a("strong"),K1o=o("hubert"),Z1o=o(" \u2014 "),iq=a("a"),e4o=o("Wav2Vec2FeatureExtractor"),o4o=o(" (Hubert model)"),r4o=l(),Uh=a("li"),lde=a("strong"),t4o=o("imagegpt"),a4o=o(" \u2014 "),dq=a("a"),n4o=o("ImageGPTFeatureExtractor"),s4o=o(" (ImageGPT model)"),l4o=l(),Jh=a("li"),ide=a("strong"),i4o=o("layoutlmv2"),d4o=o(" \u2014 "),cq=a("a"),c4o=o("LayoutLMv2FeatureExtractor"),f4o=o(" (LayoutLMv2 model)"),m4o=l(),Yh=a("li"),dde=a("strong"),g4o=o("layoutlmv3"),h4o=o(" \u2014 "),fq=a("a"),p4o=o("LayoutLMv3FeatureExtractor"),_4o=o(" (LayoutLMv3 model)"),u4o=l(),Kh=a("li"),cde=a("strong"),b4o=o("levit"),v4o=o(" \u2014 "),mq=a("a"),F4o=o("LevitFeatureExtractor"),T4o=o(" (LeViT model)"),M4o=l(),Zh=a("li"),fde=a("strong"),E4o=o("maskformer"),C4o=o(" \u2014 "),gq=a("a"),w4o=o("MaskFormerFeatureExtractor"),A4o=o(" (MaskFormer model)"),L4o=l(),ep=a("li"),mde=a("strong"),y4o=o("mctct"),x4o=o(" \u2014 "),hq=a("a"),$4o=o("MCTCTFeatureExtractor"),k4o=o(" (M-CTC-T model)"),S4o=l(),op=a("li"),gde=a("strong"),R4o=o("mobilenet_v2"),P4o=o(" \u2014 "),pq=a("a"),B4o=o("MobileNetV2FeatureExtractor"),N4o=o(" (MobileNetV2 model)"),I4o=l(),rp=a("li"),hde=a("strong"),q4o=o("mobilevit"),j4o=o(" \u2014 "),_q=a("a"),D4o=o("MobileViTFeatureExtractor"),G4o=o(" (MobileViT model)"),O4o=l(),tp=a("li"),pde=a("strong"),V4o=o("perceiver"),X4o=o(" \u2014 "),uq=a("a"),z4o=o("PerceiverFeatureExtractor"),Q4o=o(" (Perceiver model)"),W4o=l(),ap=a("li"),_de=a("strong"),H4o=o("poolformer"),U4o=o(" \u2014 "),bq=a("a"),J4o=o("PoolFormerFeatureExtractor"),Y4o=o(" (PoolFormer model)"),K4o=l(),np=a("li"),ude=a("strong"),Z4o=o("regnet"),e2o=o(" \u2014 "),vq=a("a"),o2o=o("ConvNextFeatureExtractor"),r2o=o(" (RegNet model)"),t2o=l(),sp=a("li"),bde=a("strong"),a2o=o("resnet"),n2o=o(" \u2014 "),Fq=a("a"),s2o=o("ConvNextFeatureExtractor"),l2o=o(" (ResNet model)"),i2o=l(),lp=a("li"),vde=a("strong"),d2o=o("segformer"),c2o=o(" \u2014 "),Tq=a("a"),f2o=o("SegformerFeatureExtractor"),m2o=o(" (SegFormer model)"),g2o=l(),ip=a("li"),Fde=a("strong"),h2o=o("speech_to_text"),p2o=o(" \u2014 "),Mq=a("a"),_2o=o("Speech2TextFeatureExtractor"),u2o=o(" (Speech2Text model)"),b2o=l(),dp=a("li"),Tde=a("strong"),v2o=o("swin"),F2o=o(" \u2014 "),Eq=a("a"),T2o=o("ViTFeatureExtractor"),M2o=o(" (Swin Transformer model)"),E2o=l(),cp=a("li"),Mde=a("strong"),C2o=o("van"),w2o=o(" \u2014 "),Cq=a("a"),A2o=o("ConvNextFeatureExtractor"),L2o=o(" (VAN model)"),y2o=l(),fp=a("li"),Ede=a("strong"),x2o=o("vilt"),$2o=o(" \u2014 "),wq=a("a"),k2o=o("ViltFeatureExtractor"),S2o=o(" (ViLT model)"),R2o=l(),mp=a("li"),Cde=a("strong"),P2o=o("vit"),B2o=o(" \u2014 "),Aq=a("a"),N2o=o("ViTFeatureExtractor"),I2o=o(" (ViT model)"),q2o=l(),gp=a("li"),wde=a("strong"),j2o=o("vit_mae"),D2o=o(" \u2014 "),Lq=a("a"),G2o=o("ViTFeatureExtractor"),O2o=o(" (ViTMAE model)"),V2o=l(),hp=a("li"),Ade=a("strong"),X2o=o("wav2vec2"),z2o=o(" \u2014 "),yq=a("a"),Q2o=o("Wav2Vec2FeatureExtractor"),W2o=o(" (Wav2Vec2 model)"),H2o=l(),pp=a("li"),Lde=a("strong"),U2o=o("wav2vec2-conformer"),J2o=o(" \u2014 "),xq=a("a"),Y2o=o("Wav2Vec2FeatureExtractor"),K2o=o(" (Wav2Vec2-Conformer model)"),Z2o=l(),_p=a("li"),yde=a("strong"),ebo=o("yolos"),obo=o(" \u2014 "),$q=a("a"),rbo=o("YolosFeatureExtractor"),tbo=o(" (YOLOS model)"),abo=l(),F(up.$$.fragment),nbo=l(),F(bp.$$.fragment),sbo=l(),vp=a("div"),F(CL.$$.fragment),lbo=l(),xde=a("p"),ibo=o("Register a new feature extractor for this class."),fXe=l(),qi=a("h2"),Fp=a("a"),$de=a("span"),F(wL.$$.fragment),dbo=l(),kde=a("span"),cbo=o("AutoProcessor"),mXe=l(),yo=a("div"),F(AL.$$.fragment),fbo=l(),LL=a("p"),mbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kq=a("a"),gbo=o("AutoProcessor.from_pretrained()"),hbo=o(" class method."),pbo=l(),yL=a("p"),_bo=o("This class cannot be instantiated directly using "),Sde=a("code"),ubo=o("__init__()"),bbo=o(" (throws an error)."),vbo=l(),Ue=a("div"),F(xL.$$.fragment),Fbo=l(),Rde=a("p"),Tbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mbo=l(),ji=a("p"),Ebo=o("The processor class to instantiate is selected based on the "),Pde=a("code"),Cbo=o("model_type"),wbo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),Abo=o("pretrained_model_name_or_path"),Lbo=o(" if possible):"),ybo=l(),he=a("ul"),Tp=a("li"),Nde=a("strong"),xbo=o("clip"),$bo=o(" \u2014 "),Sq=a("a"),kbo=o("CLIPProcessor"),Sbo=o(" (CLIP model)"),Rbo=l(),Mp=a("li"),Ide=a("strong"),Pbo=o("flava"),Bbo=o(" \u2014 "),qde=a("code"),Nbo=o("FLAVAProcessor"),Ibo=o(" (FLAVA model)"),qbo=l(),Ep=a("li"),jde=a("strong"),jbo=o("groupvit"),Dbo=o(" \u2014 "),Rq=a("a"),Gbo=o("CLIPProcessor"),Obo=o(" (GroupViT model)"),Vbo=l(),Cp=a("li"),Dde=a("strong"),Xbo=o("layoutlmv2"),zbo=o(" \u2014 "),Pq=a("a"),Qbo=o("LayoutLMv2Processor"),Wbo=o(" (LayoutLMv2 model)"),Hbo=l(),wp=a("li"),Gde=a("strong"),Ubo=o("layoutlmv3"),Jbo=o(" \u2014 "),Bq=a("a"),Ybo=o("LayoutLMv3Processor"),Kbo=o(" (LayoutLMv3 model)"),Zbo=l(),Ap=a("li"),Ode=a("strong"),evo=o("layoutxlm"),ovo=o(" \u2014 "),Nq=a("a"),rvo=o("LayoutXLMProcessor"),tvo=o(" (LayoutXLM model)"),avo=l(),Lp=a("li"),Vde=a("strong"),nvo=o("sew"),svo=o(" \u2014 "),Iq=a("a"),lvo=o("Wav2Vec2Processor"),ivo=o(" (SEW model)"),dvo=l(),yp=a("li"),Xde=a("strong"),cvo=o("sew-d"),fvo=o(" \u2014 "),qq=a("a"),mvo=o("Wav2Vec2Processor"),gvo=o(" (SEW-D model)"),hvo=l(),xp=a("li"),zde=a("strong"),pvo=o("speech_to_text"),_vo=o(" \u2014 "),jq=a("a"),uvo=o("Speech2TextProcessor"),bvo=o(" (Speech2Text model)"),vvo=l(),$p=a("li"),Qde=a("strong"),Fvo=o("speech_to_text_2"),Tvo=o(" \u2014 "),Dq=a("a"),Mvo=o("Speech2Text2Processor"),Evo=o(" (Speech2Text2 model)"),Cvo=l(),kp=a("li"),Wde=a("strong"),wvo=o("trocr"),Avo=o(" \u2014 "),Gq=a("a"),Lvo=o("TrOCRProcessor"),yvo=o(" (TrOCR model)"),xvo=l(),Sp=a("li"),Hde=a("strong"),$vo=o("unispeech"),kvo=o(" \u2014 "),Oq=a("a"),Svo=o("Wav2Vec2Processor"),Rvo=o(" (UniSpeech model)"),Pvo=l(),Rp=a("li"),Ude=a("strong"),Bvo=o("unispeech-sat"),Nvo=o(" \u2014 "),Vq=a("a"),Ivo=o("Wav2Vec2Processor"),qvo=o(" (UniSpeechSat model)"),jvo=l(),Pp=a("li"),Jde=a("strong"),Dvo=o("vilt"),Gvo=o(" \u2014 "),Xq=a("a"),Ovo=o("ViltProcessor"),Vvo=o(" (ViLT model)"),Xvo=l(),Bp=a("li"),Yde=a("strong"),zvo=o("vision-text-dual-encoder"),Qvo=o(" \u2014 "),zq=a("a"),Wvo=o("VisionTextDualEncoderProcessor"),Hvo=o(" (VisionTextDualEncoder model)"),Uvo=l(),Np=a("li"),Kde=a("strong"),Jvo=o("wav2vec2"),Yvo=o(" \u2014 "),Qq=a("a"),Kvo=o("Wav2Vec2Processor"),Zvo=o(" (Wav2Vec2 model)"),e5o=l(),Ip=a("li"),Zde=a("strong"),o5o=o("wav2vec2-conformer"),r5o=o(" \u2014 "),Wq=a("a"),t5o=o("Wav2Vec2Processor"),a5o=o(" (Wav2Vec2-Conformer model)"),n5o=l(),qp=a("li"),ece=a("strong"),s5o=o("wavlm"),l5o=o(" \u2014 "),Hq=a("a"),i5o=o("Wav2Vec2Processor"),d5o=o(" (WavLM model)"),c5o=l(),F(jp.$$.fragment),f5o=l(),F(Dp.$$.fragment),m5o=l(),Gp=a("div"),F($L.$$.fragment),g5o=l(),oce=a("p"),h5o=o("Register a new processor for this class."),gXe=l(),Di=a("h2"),Op=a("a"),rce=a("span"),F(kL.$$.fragment),p5o=l(),tce=a("span"),_5o=o("AutoModel"),hXe=l(),xo=a("div"),F(SL.$$.fragment),u5o=l(),Gi=a("p"),b5o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uq=a("a"),v5o=o("from_pretrained()"),F5o=o(" class method or the "),Jq=a("a"),T5o=o("from_config()"),M5o=o(` class
method.`),E5o=l(),RL=a("p"),C5o=o("This class cannot be instantiated directly using "),ace=a("code"),w5o=o("__init__()"),A5o=o(" (throws an error)."),L5o=l(),lt=a("div"),F(PL.$$.fragment),y5o=l(),nce=a("p"),x5o=o("Instantiates one of the base model classes of the library from a configuration."),$5o=l(),Oi=a("p"),k5o=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),S5o=o("not"),R5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=a("a"),P5o=o("from_pretrained()"),B5o=o(" to load the model weights."),N5o=l(),F(Vp.$$.fragment),I5o=l(),Je=a("div"),F(BL.$$.fragment),q5o=l(),lce=a("p"),j5o=o("Instantiate one of the base model classes of the library from a pretrained model."),D5o=l(),Na=a("p"),G5o=o("The model class to instantiate is selected based on the "),ice=a("code"),O5o=o("model_type"),V5o=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),X5o=o("pretrained_model_name_or_path"),z5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),Q5o=o("pretrained_model_name_or_path"),W5o=o(":"),H5o=l(),y=a("ul"),Xp=a("li"),fce=a("strong"),U5o=o("albert"),J5o=o(" \u2014 "),Kq=a("a"),Y5o=o("AlbertModel"),K5o=o(" (ALBERT model)"),Z5o=l(),zp=a("li"),mce=a("strong"),eFo=o("bart"),oFo=o(" \u2014 "),Zq=a("a"),rFo=o("BartModel"),tFo=o(" (BART model)"),aFo=l(),Qp=a("li"),gce=a("strong"),nFo=o("beit"),sFo=o(" \u2014 "),ej=a("a"),lFo=o("BeitModel"),iFo=o(" (BEiT model)"),dFo=l(),Wp=a("li"),hce=a("strong"),cFo=o("bert"),fFo=o(" \u2014 "),oj=a("a"),mFo=o("BertModel"),gFo=o(" (BERT model)"),hFo=l(),Hp=a("li"),pce=a("strong"),pFo=o("bert-generation"),_Fo=o(" \u2014 "),rj=a("a"),uFo=o("BertGenerationEncoder"),bFo=o(" (Bert Generation model)"),vFo=l(),Up=a("li"),_ce=a("strong"),FFo=o("big_bird"),TFo=o(" \u2014 "),tj=a("a"),MFo=o("BigBirdModel"),EFo=o(" (BigBird model)"),CFo=l(),Jp=a("li"),uce=a("strong"),wFo=o("bigbird_pegasus"),AFo=o(" \u2014 "),aj=a("a"),LFo=o("BigBirdPegasusModel"),yFo=o(" (BigBird-Pegasus model)"),xFo=l(),Yp=a("li"),bce=a("strong"),$Fo=o("blenderbot"),kFo=o(" \u2014 "),nj=a("a"),SFo=o("BlenderbotModel"),RFo=o(" (Blenderbot model)"),PFo=l(),Kp=a("li"),vce=a("strong"),BFo=o("blenderbot-small"),NFo=o(" \u2014 "),sj=a("a"),IFo=o("BlenderbotSmallModel"),qFo=o(" (BlenderbotSmall model)"),jFo=l(),Zp=a("li"),Fce=a("strong"),DFo=o("bloom"),GFo=o(" \u2014 "),lj=a("a"),OFo=o("BloomModel"),VFo=o(" (BLOOM model)"),XFo=l(),e_=a("li"),Tce=a("strong"),zFo=o("camembert"),QFo=o(" \u2014 "),ij=a("a"),WFo=o("CamembertModel"),HFo=o(" (CamemBERT model)"),UFo=l(),o_=a("li"),Mce=a("strong"),JFo=o("canine"),YFo=o(" \u2014 "),dj=a("a"),KFo=o("CanineModel"),ZFo=o(" (CANINE model)"),eTo=l(),r_=a("li"),Ece=a("strong"),oTo=o("clip"),rTo=o(" \u2014 "),cj=a("a"),tTo=o("CLIPModel"),aTo=o(" (CLIP model)"),nTo=l(),t_=a("li"),Cce=a("strong"),sTo=o("codegen"),lTo=o(" \u2014 "),fj=a("a"),iTo=o("CodeGenModel"),dTo=o(" (CodeGen model)"),cTo=l(),a_=a("li"),wce=a("strong"),fTo=o("convbert"),mTo=o(" \u2014 "),mj=a("a"),gTo=o("ConvBertModel"),hTo=o(" (ConvBERT model)"),pTo=l(),n_=a("li"),Ace=a("strong"),_To=o("convnext"),uTo=o(" \u2014 "),gj=a("a"),bTo=o("ConvNextModel"),vTo=o(" (ConvNeXT model)"),FTo=l(),s_=a("li"),Lce=a("strong"),TTo=o("ctrl"),MTo=o(" \u2014 "),hj=a("a"),ETo=o("CTRLModel"),CTo=o(" (CTRL model)"),wTo=l(),l_=a("li"),yce=a("strong"),ATo=o("cvt"),LTo=o(" \u2014 "),pj=a("a"),yTo=o("CvtModel"),xTo=o(" (CvT model)"),$To=l(),i_=a("li"),xce=a("strong"),kTo=o("data2vec-audio"),STo=o(" \u2014 "),_j=a("a"),RTo=o("Data2VecAudioModel"),PTo=o(" (Data2VecAudio model)"),BTo=l(),d_=a("li"),$ce=a("strong"),NTo=o("data2vec-text"),ITo=o(" \u2014 "),uj=a("a"),qTo=o("Data2VecTextModel"),jTo=o(" (Data2VecText model)"),DTo=l(),c_=a("li"),kce=a("strong"),GTo=o("data2vec-vision"),OTo=o(" \u2014 "),bj=a("a"),VTo=o("Data2VecVisionModel"),XTo=o(" (Data2VecVision model)"),zTo=l(),f_=a("li"),Sce=a("strong"),QTo=o("deberta"),WTo=o(" \u2014 "),vj=a("a"),HTo=o("DebertaModel"),UTo=o(" (DeBERTa model)"),JTo=l(),m_=a("li"),Rce=a("strong"),YTo=o("deberta-v2"),KTo=o(" \u2014 "),Fj=a("a"),ZTo=o("DebertaV2Model"),e7o=o(" (DeBERTa-v2 model)"),o7o=l(),g_=a("li"),Pce=a("strong"),r7o=o("decision_transformer"),t7o=o(" \u2014 "),Tj=a("a"),a7o=o("DecisionTransformerModel"),n7o=o(" (Decision Transformer model)"),s7o=l(),h_=a("li"),Bce=a("strong"),l7o=o("deit"),i7o=o(" \u2014 "),Mj=a("a"),d7o=o("DeiTModel"),c7o=o(" (DeiT model)"),f7o=l(),p_=a("li"),Nce=a("strong"),m7o=o("detr"),g7o=o(" \u2014 "),Ej=a("a"),h7o=o("DetrModel"),p7o=o(" (DETR model)"),_7o=l(),__=a("li"),Ice=a("strong"),u7o=o("distilbert"),b7o=o(" \u2014 "),Cj=a("a"),v7o=o("DistilBertModel"),F7o=o(" (DistilBERT model)"),T7o=l(),u_=a("li"),qce=a("strong"),M7o=o("dpr"),E7o=o(" \u2014 "),wj=a("a"),C7o=o("DPRQuestionEncoder"),w7o=o(" (DPR model)"),A7o=l(),b_=a("li"),jce=a("strong"),L7o=o("dpt"),y7o=o(" \u2014 "),Aj=a("a"),x7o=o("DPTModel"),$7o=o(" (DPT model)"),k7o=l(),v_=a("li"),Dce=a("strong"),S7o=o("electra"),R7o=o(" \u2014 "),Lj=a("a"),P7o=o("ElectraModel"),B7o=o(" (ELECTRA model)"),N7o=l(),F_=a("li"),Gce=a("strong"),I7o=o("flaubert"),q7o=o(" \u2014 "),yj=a("a"),j7o=o("FlaubertModel"),D7o=o(" (FlauBERT model)"),G7o=l(),T_=a("li"),Oce=a("strong"),O7o=o("flava"),V7o=o(" \u2014 "),xj=a("a"),X7o=o("FlavaModel"),z7o=o(" (FLAVA model)"),Q7o=l(),M_=a("li"),Vce=a("strong"),W7o=o("fnet"),H7o=o(" \u2014 "),$j=a("a"),U7o=o("FNetModel"),J7o=o(" (FNet model)"),Y7o=l(),E_=a("li"),Xce=a("strong"),K7o=o("fsmt"),Z7o=o(" \u2014 "),kj=a("a"),e8o=o("FSMTModel"),o8o=o(" (FairSeq Machine-Translation model)"),r8o=l(),Ws=a("li"),zce=a("strong"),t8o=o("funnel"),a8o=o(" \u2014 "),Sj=a("a"),n8o=o("FunnelModel"),s8o=o(" or "),Rj=a("a"),l8o=o("FunnelBaseModel"),i8o=o(" (Funnel Transformer model)"),d8o=l(),C_=a("li"),Qce=a("strong"),c8o=o("glpn"),f8o=o(" \u2014 "),Pj=a("a"),m8o=o("GLPNModel"),g8o=o(" (GLPN model)"),h8o=l(),w_=a("li"),Wce=a("strong"),p8o=o("gpt2"),_8o=o(" \u2014 "),Bj=a("a"),u8o=o("GPT2Model"),b8o=o(" (OpenAI GPT-2 model)"),v8o=l(),A_=a("li"),Hce=a("strong"),F8o=o("gpt_neo"),T8o=o(" \u2014 "),Nj=a("a"),M8o=o("GPTNeoModel"),E8o=o(" (GPT Neo model)"),C8o=l(),L_=a("li"),Uce=a("strong"),w8o=o("gpt_neox"),A8o=o(" \u2014 "),Ij=a("a"),L8o=o("GPTNeoXModel"),y8o=o(" (GPT NeoX model)"),x8o=l(),y_=a("li"),Jce=a("strong"),$8o=o("gptj"),k8o=o(" \u2014 "),qj=a("a"),S8o=o("GPTJModel"),R8o=o(" (GPT-J model)"),P8o=l(),x_=a("li"),Yce=a("strong"),B8o=o("groupvit"),N8o=o(" \u2014 "),jj=a("a"),I8o=o("GroupViTModel"),q8o=o(" (GroupViT model)"),j8o=l(),$_=a("li"),Kce=a("strong"),D8o=o("hubert"),G8o=o(" \u2014 "),Dj=a("a"),O8o=o("HubertModel"),V8o=o(" (Hubert model)"),X8o=l(),k_=a("li"),Zce=a("strong"),z8o=o("ibert"),Q8o=o(" \u2014 "),Gj=a("a"),W8o=o("IBertModel"),H8o=o(" (I-BERT model)"),U8o=l(),S_=a("li"),efe=a("strong"),J8o=o("imagegpt"),Y8o=o(" \u2014 "),Oj=a("a"),K8o=o("ImageGPTModel"),Z8o=o(" (ImageGPT model)"),eMo=l(),R_=a("li"),ofe=a("strong"),oMo=o("layoutlm"),rMo=o(" \u2014 "),Vj=a("a"),tMo=o("LayoutLMModel"),aMo=o(" (LayoutLM model)"),nMo=l(),P_=a("li"),rfe=a("strong"),sMo=o("layoutlmv2"),lMo=o(" \u2014 "),Xj=a("a"),iMo=o("LayoutLMv2Model"),dMo=o(" (LayoutLMv2 model)"),cMo=l(),B_=a("li"),tfe=a("strong"),fMo=o("layoutlmv3"),mMo=o(" \u2014 "),zj=a("a"),gMo=o("LayoutLMv3Model"),hMo=o(" (LayoutLMv3 model)"),pMo=l(),N_=a("li"),afe=a("strong"),_Mo=o("led"),uMo=o(" \u2014 "),Qj=a("a"),bMo=o("LEDModel"),vMo=o(" (LED model)"),FMo=l(),I_=a("li"),nfe=a("strong"),TMo=o("levit"),MMo=o(" \u2014 "),Wj=a("a"),EMo=o("LevitModel"),CMo=o(" (LeViT model)"),wMo=l(),q_=a("li"),sfe=a("strong"),AMo=o("longformer"),LMo=o(" \u2014 "),Hj=a("a"),yMo=o("LongformerModel"),xMo=o(" (Longformer model)"),$Mo=l(),j_=a("li"),lfe=a("strong"),kMo=o("longt5"),SMo=o(" \u2014 "),Uj=a("a"),RMo=o("LongT5Model"),PMo=o(" (LongT5 model)"),BMo=l(),D_=a("li"),ife=a("strong"),NMo=o("luke"),IMo=o(" \u2014 "),Jj=a("a"),qMo=o("LukeModel"),jMo=o(" (LUKE model)"),DMo=l(),G_=a("li"),dfe=a("strong"),GMo=o("lxmert"),OMo=o(" \u2014 "),Yj=a("a"),VMo=o("LxmertModel"),XMo=o(" (LXMERT model)"),zMo=l(),O_=a("li"),cfe=a("strong"),QMo=o("m2m_100"),WMo=o(" \u2014 "),Kj=a("a"),HMo=o("M2M100Model"),UMo=o(" (M2M100 model)"),JMo=l(),V_=a("li"),ffe=a("strong"),YMo=o("marian"),KMo=o(" \u2014 "),Zj=a("a"),ZMo=o("MarianModel"),eEo=o(" (Marian model)"),oEo=l(),X_=a("li"),mfe=a("strong"),rEo=o("maskformer"),tEo=o(" \u2014 "),eD=a("a"),aEo=o("MaskFormerModel"),nEo=o(" (MaskFormer model)"),sEo=l(),z_=a("li"),gfe=a("strong"),lEo=o("mbart"),iEo=o(" \u2014 "),oD=a("a"),dEo=o("MBartModel"),cEo=o(" (mBART model)"),fEo=l(),Q_=a("li"),hfe=a("strong"),mEo=o("mctct"),gEo=o(" \u2014 "),rD=a("a"),hEo=o("MCTCTModel"),pEo=o(" (M-CTC-T model)"),_Eo=l(),W_=a("li"),pfe=a("strong"),uEo=o("megatron-bert"),bEo=o(" \u2014 "),tD=a("a"),vEo=o("MegatronBertModel"),FEo=o(" (Megatron-BERT model)"),TEo=l(),H_=a("li"),_fe=a("strong"),MEo=o("mobilebert"),EEo=o(" \u2014 "),aD=a("a"),CEo=o("MobileBertModel"),wEo=o(" (MobileBERT model)"),AEo=l(),U_=a("li"),ufe=a("strong"),LEo=o("mobilenet_v2"),yEo=o(" \u2014 "),nD=a("a"),xEo=o("MobileNetV2Model"),$Eo=o(" (MobileNetV2 model)"),kEo=l(),J_=a("li"),bfe=a("strong"),SEo=o("mobilevit"),REo=o(" \u2014 "),sD=a("a"),PEo=o("MobileViTModel"),BEo=o(" (MobileViT model)"),NEo=l(),Y_=a("li"),vfe=a("strong"),IEo=o("mpnet"),qEo=o(" \u2014 "),lD=a("a"),jEo=o("MPNetModel"),DEo=o(" (MPNet model)"),GEo=l(),K_=a("li"),Ffe=a("strong"),OEo=o("mt5"),VEo=o(" \u2014 "),iD=a("a"),XEo=o("MT5Model"),zEo=o(" (MT5 model)"),QEo=l(),Z_=a("li"),Tfe=a("strong"),WEo=o("mvp"),HEo=o(" \u2014 "),dD=a("a"),UEo=o("MvpModel"),JEo=o(" (MVP model)"),YEo=l(),eu=a("li"),Mfe=a("strong"),KEo=o("nezha"),ZEo=o(" \u2014 "),cD=a("a"),eCo=o("NezhaModel"),oCo=o(" (Nezha model)"),rCo=l(),ou=a("li"),Efe=a("strong"),tCo=o("nystromformer"),aCo=o(" \u2014 "),fD=a("a"),nCo=o("NystromformerModel"),sCo=o(" (Nystr\xF6mformer model)"),lCo=l(),ru=a("li"),Cfe=a("strong"),iCo=o("openai-gpt"),dCo=o(" \u2014 "),mD=a("a"),cCo=o("OpenAIGPTModel"),fCo=o(" (OpenAI GPT model)"),mCo=l(),tu=a("li"),wfe=a("strong"),gCo=o("opt"),hCo=o(" \u2014 "),gD=a("a"),pCo=o("OPTModel"),_Co=o(" (OPT model)"),uCo=l(),au=a("li"),Afe=a("strong"),bCo=o("pegasus"),vCo=o(" \u2014 "),hD=a("a"),FCo=o("PegasusModel"),TCo=o(" (Pegasus model)"),MCo=l(),nu=a("li"),Lfe=a("strong"),ECo=o("perceiver"),CCo=o(" \u2014 "),pD=a("a"),wCo=o("PerceiverModel"),ACo=o(" (Perceiver model)"),LCo=l(),su=a("li"),yfe=a("strong"),yCo=o("plbart"),xCo=o(" \u2014 "),_D=a("a"),$Co=o("PLBartModel"),kCo=o(" (PLBart model)"),SCo=l(),lu=a("li"),xfe=a("strong"),RCo=o("poolformer"),PCo=o(" \u2014 "),uD=a("a"),BCo=o("PoolFormerModel"),NCo=o(" (PoolFormer model)"),ICo=l(),iu=a("li"),$fe=a("strong"),qCo=o("prophetnet"),jCo=o(" \u2014 "),bD=a("a"),DCo=o("ProphetNetModel"),GCo=o(" (ProphetNet model)"),OCo=l(),du=a("li"),kfe=a("strong"),VCo=o("qdqbert"),XCo=o(" \u2014 "),vD=a("a"),zCo=o("QDQBertModel"),QCo=o(" (QDQBert model)"),WCo=l(),cu=a("li"),Sfe=a("strong"),HCo=o("reformer"),UCo=o(" \u2014 "),FD=a("a"),JCo=o("ReformerModel"),YCo=o(" (Reformer model)"),KCo=l(),fu=a("li"),Rfe=a("strong"),ZCo=o("regnet"),e3o=o(" \u2014 "),TD=a("a"),o3o=o("RegNetModel"),r3o=o(" (RegNet model)"),t3o=l(),mu=a("li"),Pfe=a("strong"),a3o=o("rembert"),n3o=o(" \u2014 "),MD=a("a"),s3o=o("RemBertModel"),l3o=o(" (RemBERT model)"),i3o=l(),gu=a("li"),Bfe=a("strong"),d3o=o("resnet"),c3o=o(" \u2014 "),ED=a("a"),f3o=o("ResNetModel"),m3o=o(" (ResNet model)"),g3o=l(),hu=a("li"),Nfe=a("strong"),h3o=o("retribert"),p3o=o(" \u2014 "),CD=a("a"),_3o=o("RetriBertModel"),u3o=o(" (RetriBERT model)"),b3o=l(),pu=a("li"),Ife=a("strong"),v3o=o("roberta"),F3o=o(" \u2014 "),wD=a("a"),T3o=o("RobertaModel"),M3o=o(" (RoBERTa model)"),E3o=l(),_u=a("li"),qfe=a("strong"),C3o=o("roformer"),w3o=o(" \u2014 "),AD=a("a"),A3o=o("RoFormerModel"),L3o=o(" (RoFormer model)"),y3o=l(),uu=a("li"),jfe=a("strong"),x3o=o("segformer"),$3o=o(" \u2014 "),LD=a("a"),k3o=o("SegformerModel"),S3o=o(" (SegFormer model)"),R3o=l(),bu=a("li"),Dfe=a("strong"),P3o=o("sew"),B3o=o(" \u2014 "),yD=a("a"),N3o=o("SEWModel"),I3o=o(" (SEW model)"),q3o=l(),vu=a("li"),Gfe=a("strong"),j3o=o("sew-d"),D3o=o(" \u2014 "),xD=a("a"),G3o=o("SEWDModel"),O3o=o(" (SEW-D model)"),V3o=l(),Fu=a("li"),Ofe=a("strong"),X3o=o("speech_to_text"),z3o=o(" \u2014 "),$D=a("a"),Q3o=o("Speech2TextModel"),W3o=o(" (Speech2Text model)"),H3o=l(),Tu=a("li"),Vfe=a("strong"),U3o=o("splinter"),J3o=o(" \u2014 "),kD=a("a"),Y3o=o("SplinterModel"),K3o=o(" (Splinter model)"),Z3o=l(),Mu=a("li"),Xfe=a("strong"),e0o=o("squeezebert"),o0o=o(" \u2014 "),SD=a("a"),r0o=o("SqueezeBertModel"),t0o=o(" (SqueezeBERT model)"),a0o=l(),Eu=a("li"),zfe=a("strong"),n0o=o("swin"),s0o=o(" \u2014 "),RD=a("a"),l0o=o("SwinModel"),i0o=o(" (Swin Transformer model)"),d0o=l(),Cu=a("li"),Qfe=a("strong"),c0o=o("t5"),f0o=o(" \u2014 "),PD=a("a"),m0o=o("T5Model"),g0o=o(" (T5 model)"),h0o=l(),wu=a("li"),Wfe=a("strong"),p0o=o("tapas"),_0o=o(" \u2014 "),BD=a("a"),u0o=o("TapasModel"),b0o=o(" (TAPAS model)"),v0o=l(),Au=a("li"),Hfe=a("strong"),F0o=o("trajectory_transformer"),T0o=o(" \u2014 "),ND=a("a"),M0o=o("TrajectoryTransformerModel"),E0o=o(" (Trajectory Transformer model)"),C0o=l(),Lu=a("li"),Ufe=a("strong"),w0o=o("transfo-xl"),A0o=o(" \u2014 "),ID=a("a"),L0o=o("TransfoXLModel"),y0o=o(" (Transformer-XL model)"),x0o=l(),yu=a("li"),Jfe=a("strong"),$0o=o("unispeech"),k0o=o(" \u2014 "),qD=a("a"),S0o=o("UniSpeechModel"),R0o=o(" (UniSpeech model)"),P0o=l(),xu=a("li"),Yfe=a("strong"),B0o=o("unispeech-sat"),N0o=o(" \u2014 "),jD=a("a"),I0o=o("UniSpeechSatModel"),q0o=o(" (UniSpeechSat model)"),j0o=l(),$u=a("li"),Kfe=a("strong"),D0o=o("van"),G0o=o(" \u2014 "),DD=a("a"),O0o=o("VanModel"),V0o=o(" (VAN model)"),X0o=l(),ku=a("li"),Zfe=a("strong"),z0o=o("vilt"),Q0o=o(" \u2014 "),GD=a("a"),W0o=o("ViltModel"),H0o=o(" (ViLT model)"),U0o=l(),Su=a("li"),eme=a("strong"),J0o=o("vision-text-dual-encoder"),Y0o=o(" \u2014 "),OD=a("a"),K0o=o("VisionTextDualEncoderModel"),Z0o=o(" (VisionTextDualEncoder model)"),ewo=l(),Ru=a("li"),ome=a("strong"),owo=o("visual_bert"),rwo=o(" \u2014 "),VD=a("a"),two=o("VisualBertModel"),awo=o(" (VisualBERT model)"),nwo=l(),Pu=a("li"),rme=a("strong"),swo=o("vit"),lwo=o(" \u2014 "),XD=a("a"),iwo=o("ViTModel"),dwo=o(" (ViT model)"),cwo=l(),Bu=a("li"),tme=a("strong"),fwo=o("vit_mae"),mwo=o(" \u2014 "),zD=a("a"),gwo=o("ViTMAEModel"),hwo=o(" (ViTMAE model)"),pwo=l(),Nu=a("li"),ame=a("strong"),_wo=o("wav2vec2"),uwo=o(" \u2014 "),QD=a("a"),bwo=o("Wav2Vec2Model"),vwo=o(" (Wav2Vec2 model)"),Fwo=l(),Iu=a("li"),nme=a("strong"),Two=o("wav2vec2-conformer"),Mwo=o(" \u2014 "),WD=a("a"),Ewo=o("Wav2Vec2ConformerModel"),Cwo=o(" (Wav2Vec2-Conformer model)"),wwo=l(),qu=a("li"),sme=a("strong"),Awo=o("wavlm"),Lwo=o(" \u2014 "),HD=a("a"),ywo=o("WavLMModel"),xwo=o(" (WavLM model)"),$wo=l(),ju=a("li"),lme=a("strong"),kwo=o("xglm"),Swo=o(" \u2014 "),UD=a("a"),Rwo=o("XGLMModel"),Pwo=o(" (XGLM model)"),Bwo=l(),Du=a("li"),ime=a("strong"),Nwo=o("xlm"),Iwo=o(" \u2014 "),JD=a("a"),qwo=o("XLMModel"),jwo=o(" (XLM model)"),Dwo=l(),Gu=a("li"),dme=a("strong"),Gwo=o("xlm-prophetnet"),Owo=o(" \u2014 "),YD=a("a"),Vwo=o("XLMProphetNetModel"),Xwo=o(" (XLM-ProphetNet model)"),zwo=l(),Ou=a("li"),cme=a("strong"),Qwo=o("xlm-roberta"),Wwo=o(" \u2014 "),KD=a("a"),Hwo=o("XLMRobertaModel"),Uwo=o(" (XLM-RoBERTa model)"),Jwo=l(),Vu=a("li"),fme=a("strong"),Ywo=o("xlm-roberta-xl"),Kwo=o(" \u2014 "),ZD=a("a"),Zwo=o("XLMRobertaXLModel"),eAo=o(" (XLM-RoBERTa-XL model)"),oAo=l(),Xu=a("li"),mme=a("strong"),rAo=o("xlnet"),tAo=o(" \u2014 "),eG=a("a"),aAo=o("XLNetModel"),nAo=o(" (XLNet model)"),sAo=l(),zu=a("li"),gme=a("strong"),lAo=o("yolos"),iAo=o(" \u2014 "),oG=a("a"),dAo=o("YolosModel"),cAo=o(" (YOLOS model)"),fAo=l(),Qu=a("li"),hme=a("strong"),mAo=o("yoso"),gAo=o(" \u2014 "),rG=a("a"),hAo=o("YosoModel"),pAo=o(" (YOSO model)"),_Ao=l(),Wu=a("p"),uAo=o("The model is set in evaluation mode by default using "),pme=a("code"),bAo=o("model.eval()"),vAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),FAo=o("model.train()"),TAo=l(),F(Hu.$$.fragment),pXe=l(),Vi=a("h2"),Uu=a("a"),ume=a("span"),F(NL.$$.fragment),MAo=l(),bme=a("span"),EAo=o("AutoModelForPreTraining"),_Xe=l(),$o=a("div"),F(IL.$$.fragment),CAo=l(),Xi=a("p"),wAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tG=a("a"),AAo=o("from_pretrained()"),LAo=o(" class method or the "),aG=a("a"),yAo=o("from_config()"),xAo=o(` class
method.`),$Ao=l(),qL=a("p"),kAo=o("This class cannot be instantiated directly using "),vme=a("code"),SAo=o("__init__()"),RAo=o(" (throws an error)."),PAo=l(),it=a("div"),F(jL.$$.fragment),BAo=l(),Fme=a("p"),NAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),IAo=l(),zi=a("p"),qAo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),jAo=o("not"),DAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),GAo=o("from_pretrained()"),OAo=o(" to load the model weights."),VAo=l(),F(Ju.$$.fragment),XAo=l(),Ye=a("div"),F(DL.$$.fragment),zAo=l(),Mme=a("p"),QAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WAo=l(),Ia=a("p"),HAo=o("The model class to instantiate is selected based on the "),Eme=a("code"),UAo=o("model_type"),JAo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),YAo=o("pretrained_model_name_or_path"),KAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),ZAo=o("pretrained_model_name_or_path"),e6o=o(":"),o6o=l(),G=a("ul"),Yu=a("li"),Ame=a("strong"),r6o=o("albert"),t6o=o(" \u2014 "),sG=a("a"),a6o=o("AlbertForPreTraining"),n6o=o(" (ALBERT model)"),s6o=l(),Ku=a("li"),Lme=a("strong"),l6o=o("bart"),i6o=o(" \u2014 "),lG=a("a"),d6o=o("BartForConditionalGeneration"),c6o=o(" (BART model)"),f6o=l(),Zu=a("li"),yme=a("strong"),m6o=o("bert"),g6o=o(" \u2014 "),iG=a("a"),h6o=o("BertForPreTraining"),p6o=o(" (BERT model)"),_6o=l(),e1=a("li"),xme=a("strong"),u6o=o("big_bird"),b6o=o(" \u2014 "),dG=a("a"),v6o=o("BigBirdForPreTraining"),F6o=o(" (BigBird model)"),T6o=l(),o1=a("li"),$me=a("strong"),M6o=o("bloom"),E6o=o(" \u2014 "),cG=a("a"),C6o=o("BloomForCausalLM"),w6o=o(" (BLOOM model)"),A6o=l(),r1=a("li"),kme=a("strong"),L6o=o("camembert"),y6o=o(" \u2014 "),fG=a("a"),x6o=o("CamembertForMaskedLM"),$6o=o(" (CamemBERT model)"),k6o=l(),t1=a("li"),Sme=a("strong"),S6o=o("ctrl"),R6o=o(" \u2014 "),mG=a("a"),P6o=o("CTRLLMHeadModel"),B6o=o(" (CTRL model)"),N6o=l(),a1=a("li"),Rme=a("strong"),I6o=o("data2vec-text"),q6o=o(" \u2014 "),gG=a("a"),j6o=o("Data2VecTextForMaskedLM"),D6o=o(" (Data2VecText model)"),G6o=l(),n1=a("li"),Pme=a("strong"),O6o=o("deberta"),V6o=o(" \u2014 "),hG=a("a"),X6o=o("DebertaForMaskedLM"),z6o=o(" (DeBERTa model)"),Q6o=l(),s1=a("li"),Bme=a("strong"),W6o=o("deberta-v2"),H6o=o(" \u2014 "),pG=a("a"),U6o=o("DebertaV2ForMaskedLM"),J6o=o(" (DeBERTa-v2 model)"),Y6o=l(),l1=a("li"),Nme=a("strong"),K6o=o("distilbert"),Z6o=o(" \u2014 "),_G=a("a"),eLo=o("DistilBertForMaskedLM"),oLo=o(" (DistilBERT model)"),rLo=l(),i1=a("li"),Ime=a("strong"),tLo=o("electra"),aLo=o(" \u2014 "),uG=a("a"),nLo=o("ElectraForPreTraining"),sLo=o(" (ELECTRA model)"),lLo=l(),d1=a("li"),qme=a("strong"),iLo=o("flaubert"),dLo=o(" \u2014 "),bG=a("a"),cLo=o("FlaubertWithLMHeadModel"),fLo=o(" (FlauBERT model)"),mLo=l(),c1=a("li"),jme=a("strong"),gLo=o("flava"),hLo=o(" \u2014 "),vG=a("a"),pLo=o("FlavaForPreTraining"),_Lo=o(" (FLAVA model)"),uLo=l(),f1=a("li"),Dme=a("strong"),bLo=o("fnet"),vLo=o(" \u2014 "),FG=a("a"),FLo=o("FNetForPreTraining"),TLo=o(" (FNet model)"),MLo=l(),m1=a("li"),Gme=a("strong"),ELo=o("fsmt"),CLo=o(" \u2014 "),TG=a("a"),wLo=o("FSMTForConditionalGeneration"),ALo=o(" (FairSeq Machine-Translation model)"),LLo=l(),g1=a("li"),Ome=a("strong"),yLo=o("funnel"),xLo=o(" \u2014 "),MG=a("a"),$Lo=o("FunnelForPreTraining"),kLo=o(" (Funnel Transformer model)"),SLo=l(),h1=a("li"),Vme=a("strong"),RLo=o("gpt2"),PLo=o(" \u2014 "),EG=a("a"),BLo=o("GPT2LMHeadModel"),NLo=o(" (OpenAI GPT-2 model)"),ILo=l(),p1=a("li"),Xme=a("strong"),qLo=o("ibert"),jLo=o(" \u2014 "),CG=a("a"),DLo=o("IBertForMaskedLM"),GLo=o(" (I-BERT model)"),OLo=l(),_1=a("li"),zme=a("strong"),VLo=o("layoutlm"),XLo=o(" \u2014 "),wG=a("a"),zLo=o("LayoutLMForMaskedLM"),QLo=o(" (LayoutLM model)"),WLo=l(),u1=a("li"),Qme=a("strong"),HLo=o("longformer"),ULo=o(" \u2014 "),AG=a("a"),JLo=o("LongformerForMaskedLM"),YLo=o(" (Longformer model)"),KLo=l(),b1=a("li"),Wme=a("strong"),ZLo=o("lxmert"),eyo=o(" \u2014 "),LG=a("a"),oyo=o("LxmertForPreTraining"),ryo=o(" (LXMERT model)"),tyo=l(),v1=a("li"),Hme=a("strong"),ayo=o("megatron-bert"),nyo=o(" \u2014 "),yG=a("a"),syo=o("MegatronBertForPreTraining"),lyo=o(" (Megatron-BERT model)"),iyo=l(),F1=a("li"),Ume=a("strong"),dyo=o("mobilebert"),cyo=o(" \u2014 "),xG=a("a"),fyo=o("MobileBertForPreTraining"),myo=o(" (MobileBERT model)"),gyo=l(),T1=a("li"),Jme=a("strong"),hyo=o("mpnet"),pyo=o(" \u2014 "),$G=a("a"),_yo=o("MPNetForMaskedLM"),uyo=o(" (MPNet model)"),byo=l(),M1=a("li"),Yme=a("strong"),vyo=o("mvp"),Fyo=o(" \u2014 "),kG=a("a"),Tyo=o("MvpForConditionalGeneration"),Myo=o(" (MVP model)"),Eyo=l(),E1=a("li"),Kme=a("strong"),Cyo=o("nezha"),wyo=o(" \u2014 "),SG=a("a"),Ayo=o("NezhaForPreTraining"),Lyo=o(" (Nezha model)"),yyo=l(),C1=a("li"),Zme=a("strong"),xyo=o("openai-gpt"),$yo=o(" \u2014 "),RG=a("a"),kyo=o("OpenAIGPTLMHeadModel"),Syo=o(" (OpenAI GPT model)"),Ryo=l(),w1=a("li"),ege=a("strong"),Pyo=o("retribert"),Byo=o(" \u2014 "),PG=a("a"),Nyo=o("RetriBertModel"),Iyo=o(" (RetriBERT model)"),qyo=l(),A1=a("li"),oge=a("strong"),jyo=o("roberta"),Dyo=o(" \u2014 "),BG=a("a"),Gyo=o("RobertaForMaskedLM"),Oyo=o(" (RoBERTa model)"),Vyo=l(),L1=a("li"),rge=a("strong"),Xyo=o("splinter"),zyo=o(" \u2014 "),NG=a("a"),Qyo=o("SplinterForPreTraining"),Wyo=o(" (Splinter model)"),Hyo=l(),y1=a("li"),tge=a("strong"),Uyo=o("squeezebert"),Jyo=o(" \u2014 "),IG=a("a"),Yyo=o("SqueezeBertForMaskedLM"),Kyo=o(" (SqueezeBERT model)"),Zyo=l(),x1=a("li"),age=a("strong"),e9o=o("t5"),o9o=o(" \u2014 "),qG=a("a"),r9o=o("T5ForConditionalGeneration"),t9o=o(" (T5 model)"),a9o=l(),$1=a("li"),nge=a("strong"),n9o=o("tapas"),s9o=o(" \u2014 "),jG=a("a"),l9o=o("TapasForMaskedLM"),i9o=o(" (TAPAS model)"),d9o=l(),k1=a("li"),sge=a("strong"),c9o=o("transfo-xl"),f9o=o(" \u2014 "),DG=a("a"),m9o=o("TransfoXLLMHeadModel"),g9o=o(" (Transformer-XL model)"),h9o=l(),S1=a("li"),lge=a("strong"),p9o=o("unispeech"),_9o=o(" \u2014 "),GG=a("a"),u9o=o("UniSpeechForPreTraining"),b9o=o(" (UniSpeech model)"),v9o=l(),R1=a("li"),ige=a("strong"),F9o=o("unispeech-sat"),T9o=o(" \u2014 "),OG=a("a"),M9o=o("UniSpeechSatForPreTraining"),E9o=o(" (UniSpeechSat model)"),C9o=l(),P1=a("li"),dge=a("strong"),w9o=o("visual_bert"),A9o=o(" \u2014 "),VG=a("a"),L9o=o("VisualBertForPreTraining"),y9o=o(" (VisualBERT model)"),x9o=l(),B1=a("li"),cge=a("strong"),$9o=o("vit_mae"),k9o=o(" \u2014 "),XG=a("a"),S9o=o("ViTMAEForPreTraining"),R9o=o(" (ViTMAE model)"),P9o=l(),N1=a("li"),fge=a("strong"),B9o=o("wav2vec2"),N9o=o(" \u2014 "),zG=a("a"),I9o=o("Wav2Vec2ForPreTraining"),q9o=o(" (Wav2Vec2 model)"),j9o=l(),I1=a("li"),mge=a("strong"),D9o=o("wav2vec2-conformer"),G9o=o(" \u2014 "),QG=a("a"),O9o=o("Wav2Vec2ConformerForPreTraining"),V9o=o(" (Wav2Vec2-Conformer model)"),X9o=l(),q1=a("li"),gge=a("strong"),z9o=o("xlm"),Q9o=o(" \u2014 "),WG=a("a"),W9o=o("XLMWithLMHeadModel"),H9o=o(" (XLM model)"),U9o=l(),j1=a("li"),hge=a("strong"),J9o=o("xlm-roberta"),Y9o=o(" \u2014 "),HG=a("a"),K9o=o("XLMRobertaForMaskedLM"),Z9o=o(" (XLM-RoBERTa model)"),exo=l(),D1=a("li"),pge=a("strong"),oxo=o("xlm-roberta-xl"),rxo=o(" \u2014 "),UG=a("a"),txo=o("XLMRobertaXLForMaskedLM"),axo=o(" (XLM-RoBERTa-XL model)"),nxo=l(),G1=a("li"),_ge=a("strong"),sxo=o("xlnet"),lxo=o(" \u2014 "),JG=a("a"),ixo=o("XLNetLMHeadModel"),dxo=o(" (XLNet model)"),cxo=l(),O1=a("p"),fxo=o("The model is set in evaluation mode by default using "),uge=a("code"),mxo=o("model.eval()"),gxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),hxo=o("model.train()"),pxo=l(),F(V1.$$.fragment),uXe=l(),Qi=a("h2"),X1=a("a"),vge=a("span"),F(GL.$$.fragment),_xo=l(),Fge=a("span"),uxo=o("AutoModelForCausalLM"),bXe=l(),ko=a("div"),F(OL.$$.fragment),bxo=l(),Wi=a("p"),vxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YG=a("a"),Fxo=o("from_pretrained()"),Txo=o(" class method or the "),KG=a("a"),Mxo=o("from_config()"),Exo=o(` class
method.`),Cxo=l(),VL=a("p"),wxo=o("This class cannot be instantiated directly using "),Tge=a("code"),Axo=o("__init__()"),Lxo=o(" (throws an error)."),yxo=l(),dt=a("div"),F(XL.$$.fragment),xxo=l(),Mge=a("p"),$xo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kxo=l(),Hi=a("p"),Sxo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),Rxo=o("not"),Pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),Bxo=o("from_pretrained()"),Nxo=o(" to load the model weights."),Ixo=l(),F(z1.$$.fragment),qxo=l(),Ke=a("div"),F(zL.$$.fragment),jxo=l(),Cge=a("p"),Dxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gxo=l(),qa=a("p"),Oxo=o("The model class to instantiate is selected based on the "),wge=a("code"),Vxo=o("model_type"),Xxo=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),zxo=o("pretrained_model_name_or_path"),Qxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),Wxo=o("pretrained_model_name_or_path"),Hxo=o(":"),Uxo=l(),z=a("ul"),Q1=a("li"),yge=a("strong"),Jxo=o("bart"),Yxo=o(" \u2014 "),eO=a("a"),Kxo=o("BartForCausalLM"),Zxo=o(" (BART model)"),e$o=l(),W1=a("li"),xge=a("strong"),o$o=o("bert"),r$o=o(" \u2014 "),oO=a("a"),t$o=o("BertLMHeadModel"),a$o=o(" (BERT model)"),n$o=l(),H1=a("li"),$ge=a("strong"),s$o=o("bert-generation"),l$o=o(" \u2014 "),rO=a("a"),i$o=o("BertGenerationDecoder"),d$o=o(" (Bert Generation model)"),c$o=l(),U1=a("li"),kge=a("strong"),f$o=o("big_bird"),m$o=o(" \u2014 "),tO=a("a"),g$o=o("BigBirdForCausalLM"),h$o=o(" (BigBird model)"),p$o=l(),J1=a("li"),Sge=a("strong"),_$o=o("bigbird_pegasus"),u$o=o(" \u2014 "),aO=a("a"),b$o=o("BigBirdPegasusForCausalLM"),v$o=o(" (BigBird-Pegasus model)"),F$o=l(),Y1=a("li"),Rge=a("strong"),T$o=o("blenderbot"),M$o=o(" \u2014 "),nO=a("a"),E$o=o("BlenderbotForCausalLM"),C$o=o(" (Blenderbot model)"),w$o=l(),K1=a("li"),Pge=a("strong"),A$o=o("blenderbot-small"),L$o=o(" \u2014 "),sO=a("a"),y$o=o("BlenderbotSmallForCausalLM"),x$o=o(" (BlenderbotSmall model)"),$$o=l(),Z1=a("li"),Bge=a("strong"),k$o=o("bloom"),S$o=o(" \u2014 "),lO=a("a"),R$o=o("BloomForCausalLM"),P$o=o(" (BLOOM model)"),B$o=l(),e4=a("li"),Nge=a("strong"),N$o=o("camembert"),I$o=o(" \u2014 "),iO=a("a"),q$o=o("CamembertForCausalLM"),j$o=o(" (CamemBERT model)"),D$o=l(),o4=a("li"),Ige=a("strong"),G$o=o("codegen"),O$o=o(" \u2014 "),dO=a("a"),V$o=o("CodeGenForCausalLM"),X$o=o(" (CodeGen model)"),z$o=l(),r4=a("li"),qge=a("strong"),Q$o=o("ctrl"),W$o=o(" \u2014 "),cO=a("a"),H$o=o("CTRLLMHeadModel"),U$o=o(" (CTRL model)"),J$o=l(),t4=a("li"),jge=a("strong"),Y$o=o("data2vec-text"),K$o=o(" \u2014 "),fO=a("a"),Z$o=o("Data2VecTextForCausalLM"),eko=o(" (Data2VecText model)"),oko=l(),a4=a("li"),Dge=a("strong"),rko=o("electra"),tko=o(" \u2014 "),mO=a("a"),ako=o("ElectraForCausalLM"),nko=o(" (ELECTRA model)"),sko=l(),n4=a("li"),Gge=a("strong"),lko=o("gpt2"),iko=o(" \u2014 "),gO=a("a"),dko=o("GPT2LMHeadModel"),cko=o(" (OpenAI GPT-2 model)"),fko=l(),s4=a("li"),Oge=a("strong"),mko=o("gpt_neo"),gko=o(" \u2014 "),hO=a("a"),hko=o("GPTNeoForCausalLM"),pko=o(" (GPT Neo model)"),_ko=l(),l4=a("li"),Vge=a("strong"),uko=o("gpt_neox"),bko=o(" \u2014 "),pO=a("a"),vko=o("GPTNeoXForCausalLM"),Fko=o(" (GPT NeoX model)"),Tko=l(),i4=a("li"),Xge=a("strong"),Mko=o("gptj"),Eko=o(" \u2014 "),_O=a("a"),Cko=o("GPTJForCausalLM"),wko=o(" (GPT-J model)"),Ako=l(),d4=a("li"),zge=a("strong"),Lko=o("marian"),yko=o(" \u2014 "),uO=a("a"),xko=o("MarianForCausalLM"),$ko=o(" (Marian model)"),kko=l(),c4=a("li"),Qge=a("strong"),Sko=o("mbart"),Rko=o(" \u2014 "),bO=a("a"),Pko=o("MBartForCausalLM"),Bko=o(" (mBART model)"),Nko=l(),f4=a("li"),Wge=a("strong"),Iko=o("megatron-bert"),qko=o(" \u2014 "),vO=a("a"),jko=o("MegatronBertForCausalLM"),Dko=o(" (Megatron-BERT model)"),Gko=l(),m4=a("li"),Hge=a("strong"),Oko=o("mvp"),Vko=o(" \u2014 "),FO=a("a"),Xko=o("MvpForCausalLM"),zko=o(" (MVP model)"),Qko=l(),g4=a("li"),Uge=a("strong"),Wko=o("openai-gpt"),Hko=o(" \u2014 "),TO=a("a"),Uko=o("OpenAIGPTLMHeadModel"),Jko=o(" (OpenAI GPT model)"),Yko=l(),h4=a("li"),Jge=a("strong"),Kko=o("opt"),Zko=o(" \u2014 "),MO=a("a"),eSo=o("OPTForCausalLM"),oSo=o(" (OPT model)"),rSo=l(),p4=a("li"),Yge=a("strong"),tSo=o("pegasus"),aSo=o(" \u2014 "),EO=a("a"),nSo=o("PegasusForCausalLM"),sSo=o(" (Pegasus model)"),lSo=l(),_4=a("li"),Kge=a("strong"),iSo=o("plbart"),dSo=o(" \u2014 "),CO=a("a"),cSo=o("PLBartForCausalLM"),fSo=o(" (PLBart model)"),mSo=l(),u4=a("li"),Zge=a("strong"),gSo=o("prophetnet"),hSo=o(" \u2014 "),wO=a("a"),pSo=o("ProphetNetForCausalLM"),_So=o(" (ProphetNet model)"),uSo=l(),b4=a("li"),ehe=a("strong"),bSo=o("qdqbert"),vSo=o(" \u2014 "),AO=a("a"),FSo=o("QDQBertLMHeadModel"),TSo=o(" (QDQBert model)"),MSo=l(),v4=a("li"),ohe=a("strong"),ESo=o("reformer"),CSo=o(" \u2014 "),LO=a("a"),wSo=o("ReformerModelWithLMHead"),ASo=o(" (Reformer model)"),LSo=l(),F4=a("li"),rhe=a("strong"),ySo=o("rembert"),xSo=o(" \u2014 "),yO=a("a"),$So=o("RemBertForCausalLM"),kSo=o(" (RemBERT model)"),SSo=l(),T4=a("li"),the=a("strong"),RSo=o("roberta"),PSo=o(" \u2014 "),xO=a("a"),BSo=o("RobertaForCausalLM"),NSo=o(" (RoBERTa model)"),ISo=l(),M4=a("li"),ahe=a("strong"),qSo=o("roformer"),jSo=o(" \u2014 "),$O=a("a"),DSo=o("RoFormerForCausalLM"),GSo=o(" (RoFormer model)"),OSo=l(),E4=a("li"),nhe=a("strong"),VSo=o("speech_to_text_2"),XSo=o(" \u2014 "),kO=a("a"),zSo=o("Speech2Text2ForCausalLM"),QSo=o(" (Speech2Text2 model)"),WSo=l(),C4=a("li"),she=a("strong"),HSo=o("transfo-xl"),USo=o(" \u2014 "),SO=a("a"),JSo=o("TransfoXLLMHeadModel"),YSo=o(" (Transformer-XL model)"),KSo=l(),w4=a("li"),lhe=a("strong"),ZSo=o("trocr"),eRo=o(" \u2014 "),RO=a("a"),oRo=o("TrOCRForCausalLM"),rRo=o(" (TrOCR model)"),tRo=l(),A4=a("li"),ihe=a("strong"),aRo=o("xglm"),nRo=o(" \u2014 "),PO=a("a"),sRo=o("XGLMForCausalLM"),lRo=o(" (XGLM model)"),iRo=l(),L4=a("li"),dhe=a("strong"),dRo=o("xlm"),cRo=o(" \u2014 "),BO=a("a"),fRo=o("XLMWithLMHeadModel"),mRo=o(" (XLM model)"),gRo=l(),y4=a("li"),che=a("strong"),hRo=o("xlm-prophetnet"),pRo=o(" \u2014 "),NO=a("a"),_Ro=o("XLMProphetNetForCausalLM"),uRo=o(" (XLM-ProphetNet model)"),bRo=l(),x4=a("li"),fhe=a("strong"),vRo=o("xlm-roberta"),FRo=o(" \u2014 "),IO=a("a"),TRo=o("XLMRobertaForCausalLM"),MRo=o(" (XLM-RoBERTa model)"),ERo=l(),$4=a("li"),mhe=a("strong"),CRo=o("xlm-roberta-xl"),wRo=o(" \u2014 "),qO=a("a"),ARo=o("XLMRobertaXLForCausalLM"),LRo=o(" (XLM-RoBERTa-XL model)"),yRo=l(),k4=a("li"),ghe=a("strong"),xRo=o("xlnet"),$Ro=o(" \u2014 "),jO=a("a"),kRo=o("XLNetLMHeadModel"),SRo=o(" (XLNet model)"),RRo=l(),S4=a("p"),PRo=o("The model is set in evaluation mode by default using "),hhe=a("code"),BRo=o("model.eval()"),NRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),IRo=o("model.train()"),qRo=l(),F(R4.$$.fragment),vXe=l(),Ui=a("h2"),P4=a("a"),_he=a("span"),F(QL.$$.fragment),jRo=l(),uhe=a("span"),DRo=o("AutoModelForMaskedLM"),FXe=l(),So=a("div"),F(WL.$$.fragment),GRo=l(),Ji=a("p"),ORo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DO=a("a"),VRo=o("from_pretrained()"),XRo=o(" class method or the "),GO=a("a"),zRo=o("from_config()"),QRo=o(` class
method.`),WRo=l(),HL=a("p"),HRo=o("This class cannot be instantiated directly using "),bhe=a("code"),URo=o("__init__()"),JRo=o(" (throws an error)."),YRo=l(),ct=a("div"),F(UL.$$.fragment),KRo=l(),vhe=a("p"),ZRo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ePo=l(),Yi=a("p"),oPo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),rPo=o("not"),tPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=a("a"),aPo=o("from_pretrained()"),nPo=o(" to load the model weights."),sPo=l(),F(B4.$$.fragment),lPo=l(),Ze=a("div"),F(JL.$$.fragment),iPo=l(),The=a("p"),dPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cPo=l(),ja=a("p"),fPo=o("The model class to instantiate is selected based on the "),Mhe=a("code"),mPo=o("model_type"),gPo=o(` property of the config object (either
passed as an argument or loaded from `),Ehe=a("code"),hPo=o("pretrained_model_name_or_path"),pPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),_Po=o("pretrained_model_name_or_path"),uPo=o(":"),bPo=l(),W=a("ul"),N4=a("li"),whe=a("strong"),vPo=o("albert"),FPo=o(" \u2014 "),VO=a("a"),TPo=o("AlbertForMaskedLM"),MPo=o(" (ALBERT model)"),EPo=l(),I4=a("li"),Ahe=a("strong"),CPo=o("bart"),wPo=o(" \u2014 "),XO=a("a"),APo=o("BartForConditionalGeneration"),LPo=o(" (BART model)"),yPo=l(),q4=a("li"),Lhe=a("strong"),xPo=o("bert"),$Po=o(" \u2014 "),zO=a("a"),kPo=o("BertForMaskedLM"),SPo=o(" (BERT model)"),RPo=l(),j4=a("li"),yhe=a("strong"),PPo=o("big_bird"),BPo=o(" \u2014 "),QO=a("a"),NPo=o("BigBirdForMaskedLM"),IPo=o(" (BigBird model)"),qPo=l(),D4=a("li"),xhe=a("strong"),jPo=o("camembert"),DPo=o(" \u2014 "),WO=a("a"),GPo=o("CamembertForMaskedLM"),OPo=o(" (CamemBERT model)"),VPo=l(),G4=a("li"),$he=a("strong"),XPo=o("convbert"),zPo=o(" \u2014 "),HO=a("a"),QPo=o("ConvBertForMaskedLM"),WPo=o(" (ConvBERT model)"),HPo=l(),O4=a("li"),khe=a("strong"),UPo=o("data2vec-text"),JPo=o(" \u2014 "),UO=a("a"),YPo=o("Data2VecTextForMaskedLM"),KPo=o(" (Data2VecText model)"),ZPo=l(),V4=a("li"),She=a("strong"),eBo=o("deberta"),oBo=o(" \u2014 "),JO=a("a"),rBo=o("DebertaForMaskedLM"),tBo=o(" (DeBERTa model)"),aBo=l(),X4=a("li"),Rhe=a("strong"),nBo=o("deberta-v2"),sBo=o(" \u2014 "),YO=a("a"),lBo=o("DebertaV2ForMaskedLM"),iBo=o(" (DeBERTa-v2 model)"),dBo=l(),z4=a("li"),Phe=a("strong"),cBo=o("distilbert"),fBo=o(" \u2014 "),KO=a("a"),mBo=o("DistilBertForMaskedLM"),gBo=o(" (DistilBERT model)"),hBo=l(),Q4=a("li"),Bhe=a("strong"),pBo=o("electra"),_Bo=o(" \u2014 "),ZO=a("a"),uBo=o("ElectraForMaskedLM"),bBo=o(" (ELECTRA model)"),vBo=l(),W4=a("li"),Nhe=a("strong"),FBo=o("flaubert"),TBo=o(" \u2014 "),eV=a("a"),MBo=o("FlaubertWithLMHeadModel"),EBo=o(" (FlauBERT model)"),CBo=l(),H4=a("li"),Ihe=a("strong"),wBo=o("fnet"),ABo=o(" \u2014 "),oV=a("a"),LBo=o("FNetForMaskedLM"),yBo=o(" (FNet model)"),xBo=l(),U4=a("li"),qhe=a("strong"),$Bo=o("funnel"),kBo=o(" \u2014 "),rV=a("a"),SBo=o("FunnelForMaskedLM"),RBo=o(" (Funnel Transformer model)"),PBo=l(),J4=a("li"),jhe=a("strong"),BBo=o("ibert"),NBo=o(" \u2014 "),tV=a("a"),IBo=o("IBertForMaskedLM"),qBo=o(" (I-BERT model)"),jBo=l(),Y4=a("li"),Dhe=a("strong"),DBo=o("layoutlm"),GBo=o(" \u2014 "),aV=a("a"),OBo=o("LayoutLMForMaskedLM"),VBo=o(" (LayoutLM model)"),XBo=l(),K4=a("li"),Ghe=a("strong"),zBo=o("longformer"),QBo=o(" \u2014 "),nV=a("a"),WBo=o("LongformerForMaskedLM"),HBo=o(" (Longformer model)"),UBo=l(),Z4=a("li"),Ohe=a("strong"),JBo=o("luke"),YBo=o(" \u2014 "),sV=a("a"),KBo=o("LukeForMaskedLM"),ZBo=o(" (LUKE model)"),eNo=l(),e2=a("li"),Vhe=a("strong"),oNo=o("mbart"),rNo=o(" \u2014 "),lV=a("a"),tNo=o("MBartForConditionalGeneration"),aNo=o(" (mBART model)"),nNo=l(),o2=a("li"),Xhe=a("strong"),sNo=o("megatron-bert"),lNo=o(" \u2014 "),iV=a("a"),iNo=o("MegatronBertForMaskedLM"),dNo=o(" (Megatron-BERT model)"),cNo=l(),r2=a("li"),zhe=a("strong"),fNo=o("mobilebert"),mNo=o(" \u2014 "),dV=a("a"),gNo=o("MobileBertForMaskedLM"),hNo=o(" (MobileBERT model)"),pNo=l(),t2=a("li"),Qhe=a("strong"),_No=o("mpnet"),uNo=o(" \u2014 "),cV=a("a"),bNo=o("MPNetForMaskedLM"),vNo=o(" (MPNet model)"),FNo=l(),a2=a("li"),Whe=a("strong"),TNo=o("mvp"),MNo=o(" \u2014 "),fV=a("a"),ENo=o("MvpForConditionalGeneration"),CNo=o(" (MVP model)"),wNo=l(),n2=a("li"),Hhe=a("strong"),ANo=o("nezha"),LNo=o(" \u2014 "),mV=a("a"),yNo=o("NezhaForMaskedLM"),xNo=o(" (Nezha model)"),$No=l(),s2=a("li"),Uhe=a("strong"),kNo=o("nystromformer"),SNo=o(" \u2014 "),gV=a("a"),RNo=o("NystromformerForMaskedLM"),PNo=o(" (Nystr\xF6mformer model)"),BNo=l(),l2=a("li"),Jhe=a("strong"),NNo=o("perceiver"),INo=o(" \u2014 "),hV=a("a"),qNo=o("PerceiverForMaskedLM"),jNo=o(" (Perceiver model)"),DNo=l(),i2=a("li"),Yhe=a("strong"),GNo=o("qdqbert"),ONo=o(" \u2014 "),pV=a("a"),VNo=o("QDQBertForMaskedLM"),XNo=o(" (QDQBert model)"),zNo=l(),d2=a("li"),Khe=a("strong"),QNo=o("reformer"),WNo=o(" \u2014 "),_V=a("a"),HNo=o("ReformerForMaskedLM"),UNo=o(" (Reformer model)"),JNo=l(),c2=a("li"),Zhe=a("strong"),YNo=o("rembert"),KNo=o(" \u2014 "),uV=a("a"),ZNo=o("RemBertForMaskedLM"),eIo=o(" (RemBERT model)"),oIo=l(),f2=a("li"),epe=a("strong"),rIo=o("roberta"),tIo=o(" \u2014 "),bV=a("a"),aIo=o("RobertaForMaskedLM"),nIo=o(" (RoBERTa model)"),sIo=l(),m2=a("li"),ope=a("strong"),lIo=o("roformer"),iIo=o(" \u2014 "),vV=a("a"),dIo=o("RoFormerForMaskedLM"),cIo=o(" (RoFormer model)"),fIo=l(),g2=a("li"),rpe=a("strong"),mIo=o("squeezebert"),gIo=o(" \u2014 "),FV=a("a"),hIo=o("SqueezeBertForMaskedLM"),pIo=o(" (SqueezeBERT model)"),_Io=l(),h2=a("li"),tpe=a("strong"),uIo=o("tapas"),bIo=o(" \u2014 "),TV=a("a"),vIo=o("TapasForMaskedLM"),FIo=o(" (TAPAS model)"),TIo=l(),p2=a("li"),ape=a("strong"),MIo=o("wav2vec2"),EIo=o(" \u2014 "),npe=a("code"),CIo=o("Wav2Vec2ForMaskedLM"),wIo=o(" (Wav2Vec2 model)"),AIo=l(),_2=a("li"),spe=a("strong"),LIo=o("xlm"),yIo=o(" \u2014 "),MV=a("a"),xIo=o("XLMWithLMHeadModel"),$Io=o(" (XLM model)"),kIo=l(),u2=a("li"),lpe=a("strong"),SIo=o("xlm-roberta"),RIo=o(" \u2014 "),EV=a("a"),PIo=o("XLMRobertaForMaskedLM"),BIo=o(" (XLM-RoBERTa model)"),NIo=l(),b2=a("li"),ipe=a("strong"),IIo=o("xlm-roberta-xl"),qIo=o(" \u2014 "),CV=a("a"),jIo=o("XLMRobertaXLForMaskedLM"),DIo=o(" (XLM-RoBERTa-XL model)"),GIo=l(),v2=a("li"),dpe=a("strong"),OIo=o("yoso"),VIo=o(" \u2014 "),wV=a("a"),XIo=o("YosoForMaskedLM"),zIo=o(" (YOSO model)"),QIo=l(),F2=a("p"),WIo=o("The model is set in evaluation mode by default using "),cpe=a("code"),HIo=o("model.eval()"),UIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),JIo=o("model.train()"),YIo=l(),F(T2.$$.fragment),TXe=l(),Ki=a("h2"),M2=a("a"),mpe=a("span"),F(YL.$$.fragment),KIo=l(),gpe=a("span"),ZIo=o("AutoModelForSeq2SeqLM"),MXe=l(),Ro=a("div"),F(KL.$$.fragment),eqo=l(),Zi=a("p"),oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AV=a("a"),rqo=o("from_pretrained()"),tqo=o(" class method or the "),LV=a("a"),aqo=o("from_config()"),nqo=o(` class
method.`),sqo=l(),ZL=a("p"),lqo=o("This class cannot be instantiated directly using "),hpe=a("code"),iqo=o("__init__()"),dqo=o(" (throws an error)."),cqo=l(),ft=a("div"),F(ey.$$.fragment),fqo=l(),ppe=a("p"),mqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gqo=l(),ed=a("p"),hqo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),pqo=o("not"),_qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),uqo=o("from_pretrained()"),bqo=o(" to load the model weights."),vqo=l(),F(E2.$$.fragment),Fqo=l(),eo=a("div"),F(oy.$$.fragment),Tqo=l(),upe=a("p"),Mqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Eqo=l(),Da=a("p"),Cqo=o("The model class to instantiate is selected based on the "),bpe=a("code"),wqo=o("model_type"),Aqo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),Lqo=o("pretrained_model_name_or_path"),yqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),xqo=o("pretrained_model_name_or_path"),$qo=o(":"),kqo=l(),pe=a("ul"),C2=a("li"),Tpe=a("strong"),Sqo=o("bart"),Rqo=o(" \u2014 "),xV=a("a"),Pqo=o("BartForConditionalGeneration"),Bqo=o(" (BART model)"),Nqo=l(),w2=a("li"),Mpe=a("strong"),Iqo=o("bigbird_pegasus"),qqo=o(" \u2014 "),$V=a("a"),jqo=o("BigBirdPegasusForConditionalGeneration"),Dqo=o(" (BigBird-Pegasus model)"),Gqo=l(),A2=a("li"),Epe=a("strong"),Oqo=o("blenderbot"),Vqo=o(" \u2014 "),kV=a("a"),Xqo=o("BlenderbotForConditionalGeneration"),zqo=o(" (Blenderbot model)"),Qqo=l(),L2=a("li"),Cpe=a("strong"),Wqo=o("blenderbot-small"),Hqo=o(" \u2014 "),SV=a("a"),Uqo=o("BlenderbotSmallForConditionalGeneration"),Jqo=o(" (BlenderbotSmall model)"),Yqo=l(),y2=a("li"),wpe=a("strong"),Kqo=o("encoder-decoder"),Zqo=o(" \u2014 "),RV=a("a"),ejo=o("EncoderDecoderModel"),ojo=o(" (Encoder decoder model)"),rjo=l(),x2=a("li"),Ape=a("strong"),tjo=o("fsmt"),ajo=o(" \u2014 "),PV=a("a"),njo=o("FSMTForConditionalGeneration"),sjo=o(" (FairSeq Machine-Translation model)"),ljo=l(),$2=a("li"),Lpe=a("strong"),ijo=o("led"),djo=o(" \u2014 "),BV=a("a"),cjo=o("LEDForConditionalGeneration"),fjo=o(" (LED model)"),mjo=l(),k2=a("li"),ype=a("strong"),gjo=o("longt5"),hjo=o(" \u2014 "),NV=a("a"),pjo=o("LongT5ForConditionalGeneration"),_jo=o(" (LongT5 model)"),ujo=l(),S2=a("li"),xpe=a("strong"),bjo=o("m2m_100"),vjo=o(" \u2014 "),IV=a("a"),Fjo=o("M2M100ForConditionalGeneration"),Tjo=o(" (M2M100 model)"),Mjo=l(),R2=a("li"),$pe=a("strong"),Ejo=o("marian"),Cjo=o(" \u2014 "),qV=a("a"),wjo=o("MarianMTModel"),Ajo=o(" (Marian model)"),Ljo=l(),P2=a("li"),kpe=a("strong"),yjo=o("mbart"),xjo=o(" \u2014 "),jV=a("a"),$jo=o("MBartForConditionalGeneration"),kjo=o(" (mBART model)"),Sjo=l(),B2=a("li"),Spe=a("strong"),Rjo=o("mt5"),Pjo=o(" \u2014 "),DV=a("a"),Bjo=o("MT5ForConditionalGeneration"),Njo=o(" (MT5 model)"),Ijo=l(),N2=a("li"),Rpe=a("strong"),qjo=o("mvp"),jjo=o(" \u2014 "),GV=a("a"),Djo=o("MvpForConditionalGeneration"),Gjo=o(" (MVP model)"),Ojo=l(),I2=a("li"),Ppe=a("strong"),Vjo=o("pegasus"),Xjo=o(" \u2014 "),OV=a("a"),zjo=o("PegasusForConditionalGeneration"),Qjo=o(" (Pegasus model)"),Wjo=l(),q2=a("li"),Bpe=a("strong"),Hjo=o("plbart"),Ujo=o(" \u2014 "),VV=a("a"),Jjo=o("PLBartForConditionalGeneration"),Yjo=o(" (PLBart model)"),Kjo=l(),j2=a("li"),Npe=a("strong"),Zjo=o("prophetnet"),eDo=o(" \u2014 "),XV=a("a"),oDo=o("ProphetNetForConditionalGeneration"),rDo=o(" (ProphetNet model)"),tDo=l(),D2=a("li"),Ipe=a("strong"),aDo=o("t5"),nDo=o(" \u2014 "),zV=a("a"),sDo=o("T5ForConditionalGeneration"),lDo=o(" (T5 model)"),iDo=l(),G2=a("li"),qpe=a("strong"),dDo=o("xlm-prophetnet"),cDo=o(" \u2014 "),QV=a("a"),fDo=o("XLMProphetNetForConditionalGeneration"),mDo=o(" (XLM-ProphetNet model)"),gDo=l(),O2=a("p"),hDo=o("The model is set in evaluation mode by default using "),jpe=a("code"),pDo=o("model.eval()"),_Do=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),uDo=o("model.train()"),bDo=l(),F(V2.$$.fragment),EXe=l(),od=a("h2"),X2=a("a"),Gpe=a("span"),F(ry.$$.fragment),vDo=l(),Ope=a("span"),FDo=o("AutoModelForSequenceClassification"),CXe=l(),Po=a("div"),F(ty.$$.fragment),TDo=l(),rd=a("p"),MDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WV=a("a"),EDo=o("from_pretrained()"),CDo=o(" class method or the "),HV=a("a"),wDo=o("from_config()"),ADo=o(` class
method.`),LDo=l(),ay=a("p"),yDo=o("This class cannot be instantiated directly using "),Vpe=a("code"),xDo=o("__init__()"),$Do=o(" (throws an error)."),kDo=l(),mt=a("div"),F(ny.$$.fragment),SDo=l(),Xpe=a("p"),RDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PDo=l(),td=a("p"),BDo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),NDo=o("not"),IDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),qDo=o("from_pretrained()"),jDo=o(" to load the model weights."),DDo=l(),F(z2.$$.fragment),GDo=l(),oo=a("div"),F(sy.$$.fragment),ODo=l(),Qpe=a("p"),VDo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XDo=l(),Ga=a("p"),zDo=o("The model class to instantiate is selected based on the "),Wpe=a("code"),QDo=o("model_type"),WDo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(":"),KDo=l(),I=a("ul"),Q2=a("li"),Jpe=a("strong"),ZDo=o("albert"),eGo=o(" \u2014 "),JV=a("a"),oGo=o("AlbertForSequenceClassification"),rGo=o(" (ALBERT model)"),tGo=l(),W2=a("li"),Ype=a("strong"),aGo=o("bart"),nGo=o(" \u2014 "),YV=a("a"),sGo=o("BartForSequenceClassification"),lGo=o(" (BART model)"),iGo=l(),H2=a("li"),Kpe=a("strong"),dGo=o("bert"),cGo=o(" \u2014 "),KV=a("a"),fGo=o("BertForSequenceClassification"),mGo=o(" (BERT model)"),gGo=l(),U2=a("li"),Zpe=a("strong"),hGo=o("big_bird"),pGo=o(" \u2014 "),ZV=a("a"),_Go=o("BigBirdForSequenceClassification"),uGo=o(" (BigBird model)"),bGo=l(),J2=a("li"),e_e=a("strong"),vGo=o("bigbird_pegasus"),FGo=o(" \u2014 "),eX=a("a"),TGo=o("BigBirdPegasusForSequenceClassification"),MGo=o(" (BigBird-Pegasus model)"),EGo=l(),Y2=a("li"),o_e=a("strong"),CGo=o("bloom"),wGo=o(" \u2014 "),oX=a("a"),AGo=o("BloomForSequenceClassification"),LGo=o(" (BLOOM model)"),yGo=l(),K2=a("li"),r_e=a("strong"),xGo=o("camembert"),$Go=o(" \u2014 "),rX=a("a"),kGo=o("CamembertForSequenceClassification"),SGo=o(" (CamemBERT model)"),RGo=l(),Z2=a("li"),t_e=a("strong"),PGo=o("canine"),BGo=o(" \u2014 "),tX=a("a"),NGo=o("CanineForSequenceClassification"),IGo=o(" (CANINE model)"),qGo=l(),eb=a("li"),a_e=a("strong"),jGo=o("convbert"),DGo=o(" \u2014 "),aX=a("a"),GGo=o("ConvBertForSequenceClassification"),OGo=o(" (ConvBERT model)"),VGo=l(),ob=a("li"),n_e=a("strong"),XGo=o("ctrl"),zGo=o(" \u2014 "),nX=a("a"),QGo=o("CTRLForSequenceClassification"),WGo=o(" (CTRL model)"),HGo=l(),rb=a("li"),s_e=a("strong"),UGo=o("data2vec-text"),JGo=o(" \u2014 "),sX=a("a"),YGo=o("Data2VecTextForSequenceClassification"),KGo=o(" (Data2VecText model)"),ZGo=l(),tb=a("li"),l_e=a("strong"),eOo=o("deberta"),oOo=o(" \u2014 "),lX=a("a"),rOo=o("DebertaForSequenceClassification"),tOo=o(" (DeBERTa model)"),aOo=l(),ab=a("li"),i_e=a("strong"),nOo=o("deberta-v2"),sOo=o(" \u2014 "),iX=a("a"),lOo=o("DebertaV2ForSequenceClassification"),iOo=o(" (DeBERTa-v2 model)"),dOo=l(),nb=a("li"),d_e=a("strong"),cOo=o("distilbert"),fOo=o(" \u2014 "),dX=a("a"),mOo=o("DistilBertForSequenceClassification"),gOo=o(" (DistilBERT model)"),hOo=l(),sb=a("li"),c_e=a("strong"),pOo=o("electra"),_Oo=o(" \u2014 "),cX=a("a"),uOo=o("ElectraForSequenceClassification"),bOo=o(" (ELECTRA model)"),vOo=l(),lb=a("li"),f_e=a("strong"),FOo=o("flaubert"),TOo=o(" \u2014 "),fX=a("a"),MOo=o("FlaubertForSequenceClassification"),EOo=o(" (FlauBERT model)"),COo=l(),ib=a("li"),m_e=a("strong"),wOo=o("fnet"),AOo=o(" \u2014 "),mX=a("a"),LOo=o("FNetForSequenceClassification"),yOo=o(" (FNet model)"),xOo=l(),db=a("li"),g_e=a("strong"),$Oo=o("funnel"),kOo=o(" \u2014 "),gX=a("a"),SOo=o("FunnelForSequenceClassification"),ROo=o(" (Funnel Transformer model)"),POo=l(),cb=a("li"),h_e=a("strong"),BOo=o("gpt2"),NOo=o(" \u2014 "),hX=a("a"),IOo=o("GPT2ForSequenceClassification"),qOo=o(" (OpenAI GPT-2 model)"),jOo=l(),fb=a("li"),p_e=a("strong"),DOo=o("gpt_neo"),GOo=o(" \u2014 "),pX=a("a"),OOo=o("GPTNeoForSequenceClassification"),VOo=o(" (GPT Neo model)"),XOo=l(),mb=a("li"),__e=a("strong"),zOo=o("gptj"),QOo=o(" \u2014 "),_X=a("a"),WOo=o("GPTJForSequenceClassification"),HOo=o(" (GPT-J model)"),UOo=l(),gb=a("li"),u_e=a("strong"),JOo=o("ibert"),YOo=o(" \u2014 "),uX=a("a"),KOo=o("IBertForSequenceClassification"),ZOo=o(" (I-BERT model)"),eVo=l(),hb=a("li"),b_e=a("strong"),oVo=o("layoutlm"),rVo=o(" \u2014 "),bX=a("a"),tVo=o("LayoutLMForSequenceClassification"),aVo=o(" (LayoutLM model)"),nVo=l(),pb=a("li"),v_e=a("strong"),sVo=o("layoutlmv2"),lVo=o(" \u2014 "),vX=a("a"),iVo=o("LayoutLMv2ForSequenceClassification"),dVo=o(" (LayoutLMv2 model)"),cVo=l(),_b=a("li"),F_e=a("strong"),fVo=o("layoutlmv3"),mVo=o(" \u2014 "),FX=a("a"),gVo=o("LayoutLMv3ForSequenceClassification"),hVo=o(" (LayoutLMv3 model)"),pVo=l(),ub=a("li"),T_e=a("strong"),_Vo=o("led"),uVo=o(" \u2014 "),TX=a("a"),bVo=o("LEDForSequenceClassification"),vVo=o(" (LED model)"),FVo=l(),bb=a("li"),M_e=a("strong"),TVo=o("longformer"),MVo=o(" \u2014 "),MX=a("a"),EVo=o("LongformerForSequenceClassification"),CVo=o(" (Longformer model)"),wVo=l(),vb=a("li"),E_e=a("strong"),AVo=o("mbart"),LVo=o(" \u2014 "),EX=a("a"),yVo=o("MBartForSequenceClassification"),xVo=o(" (mBART model)"),$Vo=l(),Fb=a("li"),C_e=a("strong"),kVo=o("megatron-bert"),SVo=o(" \u2014 "),CX=a("a"),RVo=o("MegatronBertForSequenceClassification"),PVo=o(" (Megatron-BERT model)"),BVo=l(),Tb=a("li"),w_e=a("strong"),NVo=o("mobilebert"),IVo=o(" \u2014 "),wX=a("a"),qVo=o("MobileBertForSequenceClassification"),jVo=o(" (MobileBERT model)"),DVo=l(),Mb=a("li"),A_e=a("strong"),GVo=o("mpnet"),OVo=o(" \u2014 "),AX=a("a"),VVo=o("MPNetForSequenceClassification"),XVo=o(" (MPNet model)"),zVo=l(),Eb=a("li"),L_e=a("strong"),QVo=o("mvp"),WVo=o(" \u2014 "),LX=a("a"),HVo=o("MvpForSequenceClassification"),UVo=o(" (MVP model)"),JVo=l(),Cb=a("li"),y_e=a("strong"),YVo=o("nezha"),KVo=o(" \u2014 "),yX=a("a"),ZVo=o("NezhaForSequenceClassification"),eXo=o(" (Nezha model)"),oXo=l(),wb=a("li"),x_e=a("strong"),rXo=o("nystromformer"),tXo=o(" \u2014 "),xX=a("a"),aXo=o("NystromformerForSequenceClassification"),nXo=o(" (Nystr\xF6mformer model)"),sXo=l(),Ab=a("li"),$_e=a("strong"),lXo=o("openai-gpt"),iXo=o(" \u2014 "),$X=a("a"),dXo=o("OpenAIGPTForSequenceClassification"),cXo=o(" (OpenAI GPT model)"),fXo=l(),Lb=a("li"),k_e=a("strong"),mXo=o("perceiver"),gXo=o(" \u2014 "),kX=a("a"),hXo=o("PerceiverForSequenceClassification"),pXo=o(" (Perceiver model)"),_Xo=l(),yb=a("li"),S_e=a("strong"),uXo=o("plbart"),bXo=o(" \u2014 "),SX=a("a"),vXo=o("PLBartForSequenceClassification"),FXo=o(" (PLBart model)"),TXo=l(),xb=a("li"),R_e=a("strong"),MXo=o("qdqbert"),EXo=o(" \u2014 "),RX=a("a"),CXo=o("QDQBertForSequenceClassification"),wXo=o(" (QDQBert model)"),AXo=l(),$b=a("li"),P_e=a("strong"),LXo=o("reformer"),yXo=o(" \u2014 "),PX=a("a"),xXo=o("ReformerForSequenceClassification"),$Xo=o(" (Reformer model)"),kXo=l(),kb=a("li"),B_e=a("strong"),SXo=o("rembert"),RXo=o(" \u2014 "),BX=a("a"),PXo=o("RemBertForSequenceClassification"),BXo=o(" (RemBERT model)"),NXo=l(),Sb=a("li"),N_e=a("strong"),IXo=o("roberta"),qXo=o(" \u2014 "),NX=a("a"),jXo=o("RobertaForSequenceClassification"),DXo=o(" (RoBERTa model)"),GXo=l(),Rb=a("li"),I_e=a("strong"),OXo=o("roformer"),VXo=o(" \u2014 "),IX=a("a"),XXo=o("RoFormerForSequenceClassification"),zXo=o(" (RoFormer model)"),QXo=l(),Pb=a("li"),q_e=a("strong"),WXo=o("squeezebert"),HXo=o(" \u2014 "),qX=a("a"),UXo=o("SqueezeBertForSequenceClassification"),JXo=o(" (SqueezeBERT model)"),YXo=l(),Bb=a("li"),j_e=a("strong"),KXo=o("tapas"),ZXo=o(" \u2014 "),jX=a("a"),ezo=o("TapasForSequenceClassification"),ozo=o(" (TAPAS model)"),rzo=l(),Nb=a("li"),D_e=a("strong"),tzo=o("transfo-xl"),azo=o(" \u2014 "),DX=a("a"),nzo=o("TransfoXLForSequenceClassification"),szo=o(" (Transformer-XL model)"),lzo=l(),Ib=a("li"),G_e=a("strong"),izo=o("xlm"),dzo=o(" \u2014 "),GX=a("a"),czo=o("XLMForSequenceClassification"),fzo=o(" (XLM model)"),mzo=l(),qb=a("li"),O_e=a("strong"),gzo=o("xlm-roberta"),hzo=o(" \u2014 "),OX=a("a"),pzo=o("XLMRobertaForSequenceClassification"),_zo=o(" (XLM-RoBERTa model)"),uzo=l(),jb=a("li"),V_e=a("strong"),bzo=o("xlm-roberta-xl"),vzo=o(" \u2014 "),VX=a("a"),Fzo=o("XLMRobertaXLForSequenceClassification"),Tzo=o(" (XLM-RoBERTa-XL model)"),Mzo=l(),Db=a("li"),X_e=a("strong"),Ezo=o("xlnet"),Czo=o(" \u2014 "),XX=a("a"),wzo=o("XLNetForSequenceClassification"),Azo=o(" (XLNet model)"),Lzo=l(),Gb=a("li"),z_e=a("strong"),yzo=o("yoso"),xzo=o(" \u2014 "),zX=a("a"),$zo=o("YosoForSequenceClassification"),kzo=o(" (YOSO model)"),Szo=l(),Ob=a("p"),Rzo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),Pzo=o("model.eval()"),Bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),Nzo=o("model.train()"),Izo=l(),F(Vb.$$.fragment),wXe=l(),ad=a("h2"),Xb=a("a"),H_e=a("span"),F(ly.$$.fragment),qzo=l(),U_e=a("span"),jzo=o("AutoModelForMultipleChoice"),AXe=l(),Bo=a("div"),F(iy.$$.fragment),Dzo=l(),nd=a("p"),Gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QX=a("a"),Ozo=o("from_pretrained()"),Vzo=o(" class method or the "),WX=a("a"),Xzo=o("from_config()"),zzo=o(` class
method.`),Qzo=l(),dy=a("p"),Wzo=o("This class cannot be instantiated directly using "),J_e=a("code"),Hzo=o("__init__()"),Uzo=o(" (throws an error)."),Jzo=l(),gt=a("div"),F(cy.$$.fragment),Yzo=l(),Y_e=a("p"),Kzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zzo=l(),sd=a("p"),eQo=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),oQo=o("not"),rQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),tQo=o("from_pretrained()"),aQo=o(" to load the model weights."),nQo=l(),F(zb.$$.fragment),sQo=l(),ro=a("div"),F(fy.$$.fragment),lQo=l(),Z_e=a("p"),iQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dQo=l(),Oa=a("p"),cQo=o("The model class to instantiate is selected based on the "),eue=a("code"),fQo=o("model_type"),mQo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),pQo=o("pretrained_model_name_or_path"),_Qo=o(":"),uQo=l(),Z=a("ul"),Qb=a("li"),tue=a("strong"),bQo=o("albert"),vQo=o(" \u2014 "),UX=a("a"),FQo=o("AlbertForMultipleChoice"),TQo=o(" (ALBERT model)"),MQo=l(),Wb=a("li"),aue=a("strong"),EQo=o("bert"),CQo=o(" \u2014 "),JX=a("a"),wQo=o("BertForMultipleChoice"),AQo=o(" (BERT model)"),LQo=l(),Hb=a("li"),nue=a("strong"),yQo=o("big_bird"),xQo=o(" \u2014 "),YX=a("a"),$Qo=o("BigBirdForMultipleChoice"),kQo=o(" (BigBird model)"),SQo=l(),Ub=a("li"),sue=a("strong"),RQo=o("camembert"),PQo=o(" \u2014 "),KX=a("a"),BQo=o("CamembertForMultipleChoice"),NQo=o(" (CamemBERT model)"),IQo=l(),Jb=a("li"),lue=a("strong"),qQo=o("canine"),jQo=o(" \u2014 "),ZX=a("a"),DQo=o("CanineForMultipleChoice"),GQo=o(" (CANINE model)"),OQo=l(),Yb=a("li"),iue=a("strong"),VQo=o("convbert"),XQo=o(" \u2014 "),ez=a("a"),zQo=o("ConvBertForMultipleChoice"),QQo=o(" (ConvBERT model)"),WQo=l(),Kb=a("li"),due=a("strong"),HQo=o("data2vec-text"),UQo=o(" \u2014 "),oz=a("a"),JQo=o("Data2VecTextForMultipleChoice"),YQo=o(" (Data2VecText model)"),KQo=l(),Zb=a("li"),cue=a("strong"),ZQo=o("deberta-v2"),eWo=o(" \u2014 "),rz=a("a"),oWo=o("DebertaV2ForMultipleChoice"),rWo=o(" (DeBERTa-v2 model)"),tWo=l(),ev=a("li"),fue=a("strong"),aWo=o("distilbert"),nWo=o(" \u2014 "),tz=a("a"),sWo=o("DistilBertForMultipleChoice"),lWo=o(" (DistilBERT model)"),iWo=l(),ov=a("li"),mue=a("strong"),dWo=o("electra"),cWo=o(" \u2014 "),az=a("a"),fWo=o("ElectraForMultipleChoice"),mWo=o(" (ELECTRA model)"),gWo=l(),rv=a("li"),gue=a("strong"),hWo=o("flaubert"),pWo=o(" \u2014 "),nz=a("a"),_Wo=o("FlaubertForMultipleChoice"),uWo=o(" (FlauBERT model)"),bWo=l(),tv=a("li"),hue=a("strong"),vWo=o("fnet"),FWo=o(" \u2014 "),sz=a("a"),TWo=o("FNetForMultipleChoice"),MWo=o(" (FNet model)"),EWo=l(),av=a("li"),pue=a("strong"),CWo=o("funnel"),wWo=o(" \u2014 "),lz=a("a"),AWo=o("FunnelForMultipleChoice"),LWo=o(" (Funnel Transformer model)"),yWo=l(),nv=a("li"),_ue=a("strong"),xWo=o("ibert"),$Wo=o(" \u2014 "),iz=a("a"),kWo=o("IBertForMultipleChoice"),SWo=o(" (I-BERT model)"),RWo=l(),sv=a("li"),uue=a("strong"),PWo=o("longformer"),BWo=o(" \u2014 "),dz=a("a"),NWo=o("LongformerForMultipleChoice"),IWo=o(" (Longformer model)"),qWo=l(),lv=a("li"),bue=a("strong"),jWo=o("megatron-bert"),DWo=o(" \u2014 "),cz=a("a"),GWo=o("MegatronBertForMultipleChoice"),OWo=o(" (Megatron-BERT model)"),VWo=l(),iv=a("li"),vue=a("strong"),XWo=o("mobilebert"),zWo=o(" \u2014 "),fz=a("a"),QWo=o("MobileBertForMultipleChoice"),WWo=o(" (MobileBERT model)"),HWo=l(),dv=a("li"),Fue=a("strong"),UWo=o("mpnet"),JWo=o(" \u2014 "),mz=a("a"),YWo=o("MPNetForMultipleChoice"),KWo=o(" (MPNet model)"),ZWo=l(),cv=a("li"),Tue=a("strong"),eHo=o("nezha"),oHo=o(" \u2014 "),gz=a("a"),rHo=o("NezhaForMultipleChoice"),tHo=o(" (Nezha model)"),aHo=l(),fv=a("li"),Mue=a("strong"),nHo=o("nystromformer"),sHo=o(" \u2014 "),hz=a("a"),lHo=o("NystromformerForMultipleChoice"),iHo=o(" (Nystr\xF6mformer model)"),dHo=l(),mv=a("li"),Eue=a("strong"),cHo=o("qdqbert"),fHo=o(" \u2014 "),pz=a("a"),mHo=o("QDQBertForMultipleChoice"),gHo=o(" (QDQBert model)"),hHo=l(),gv=a("li"),Cue=a("strong"),pHo=o("rembert"),_Ho=o(" \u2014 "),_z=a("a"),uHo=o("RemBertForMultipleChoice"),bHo=o(" (RemBERT model)"),vHo=l(),hv=a("li"),wue=a("strong"),FHo=o("roberta"),THo=o(" \u2014 "),uz=a("a"),MHo=o("RobertaForMultipleChoice"),EHo=o(" (RoBERTa model)"),CHo=l(),pv=a("li"),Aue=a("strong"),wHo=o("roformer"),AHo=o(" \u2014 "),bz=a("a"),LHo=o("RoFormerForMultipleChoice"),yHo=o(" (RoFormer model)"),xHo=l(),_v=a("li"),Lue=a("strong"),$Ho=o("squeezebert"),kHo=o(" \u2014 "),vz=a("a"),SHo=o("SqueezeBertForMultipleChoice"),RHo=o(" (SqueezeBERT model)"),PHo=l(),uv=a("li"),yue=a("strong"),BHo=o("xlm"),NHo=o(" \u2014 "),Fz=a("a"),IHo=o("XLMForMultipleChoice"),qHo=o(" (XLM model)"),jHo=l(),bv=a("li"),xue=a("strong"),DHo=o("xlm-roberta"),GHo=o(" \u2014 "),Tz=a("a"),OHo=o("XLMRobertaForMultipleChoice"),VHo=o(" (XLM-RoBERTa model)"),XHo=l(),vv=a("li"),$ue=a("strong"),zHo=o("xlm-roberta-xl"),QHo=o(" \u2014 "),Mz=a("a"),WHo=o("XLMRobertaXLForMultipleChoice"),HHo=o(" (XLM-RoBERTa-XL model)"),UHo=l(),Fv=a("li"),kue=a("strong"),JHo=o("xlnet"),YHo=o(" \u2014 "),Ez=a("a"),KHo=o("XLNetForMultipleChoice"),ZHo=o(" (XLNet model)"),eUo=l(),Tv=a("li"),Sue=a("strong"),oUo=o("yoso"),rUo=o(" \u2014 "),Cz=a("a"),tUo=o("YosoForMultipleChoice"),aUo=o(" (YOSO model)"),nUo=l(),Mv=a("p"),sUo=o("The model is set in evaluation mode by default using "),Rue=a("code"),lUo=o("model.eval()"),iUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),dUo=o("model.train()"),cUo=l(),F(Ev.$$.fragment),LXe=l(),ld=a("h2"),Cv=a("a"),Bue=a("span"),F(my.$$.fragment),fUo=l(),Nue=a("span"),mUo=o("AutoModelForNextSentencePrediction"),yXe=l(),No=a("div"),F(gy.$$.fragment),gUo=l(),id=a("p"),hUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wz=a("a"),pUo=o("from_pretrained()"),_Uo=o(" class method or the "),Az=a("a"),uUo=o("from_config()"),bUo=o(` class
method.`),vUo=l(),hy=a("p"),FUo=o("This class cannot be instantiated directly using "),Iue=a("code"),TUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),ht=a("div"),F(py.$$.fragment),CUo=l(),que=a("p"),wUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),AUo=l(),dd=a("p"),LUo=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),yUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),$Uo=o("from_pretrained()"),kUo=o(" to load the model weights."),SUo=l(),F(wv.$$.fragment),RUo=l(),to=a("div"),F(_y.$$.fragment),PUo=l(),Due=a("p"),BUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NUo=l(),Va=a("p"),IUo=o("The model class to instantiate is selected based on the "),Gue=a("code"),qUo=o("model_type"),jUo=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(":"),XUo=l(),Io=a("ul"),Av=a("li"),Xue=a("strong"),zUo=o("bert"),QUo=o(" \u2014 "),yz=a("a"),WUo=o("BertForNextSentencePrediction"),HUo=o(" (BERT model)"),UUo=l(),Lv=a("li"),zue=a("strong"),JUo=o("fnet"),YUo=o(" \u2014 "),xz=a("a"),KUo=o("FNetForNextSentencePrediction"),ZUo=o(" (FNet model)"),eJo=l(),yv=a("li"),Que=a("strong"),oJo=o("megatron-bert"),rJo=o(" \u2014 "),$z=a("a"),tJo=o("MegatronBertForNextSentencePrediction"),aJo=o(" (Megatron-BERT model)"),nJo=l(),xv=a("li"),Wue=a("strong"),sJo=o("mobilebert"),lJo=o(" \u2014 "),kz=a("a"),iJo=o("MobileBertForNextSentencePrediction"),dJo=o(" (MobileBERT model)"),cJo=l(),$v=a("li"),Hue=a("strong"),fJo=o("nezha"),mJo=o(" \u2014 "),Sz=a("a"),gJo=o("NezhaForNextSentencePrediction"),hJo=o(" (Nezha model)"),pJo=l(),kv=a("li"),Uue=a("strong"),_Jo=o("qdqbert"),uJo=o(" \u2014 "),Rz=a("a"),bJo=o("QDQBertForNextSentencePrediction"),vJo=o(" (QDQBert model)"),FJo=l(),Sv=a("p"),TJo=o("The model is set in evaluation mode by default using "),Jue=a("code"),MJo=o("model.eval()"),EJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),CJo=o("model.train()"),wJo=l(),F(Rv.$$.fragment),xXe=l(),cd=a("h2"),Pv=a("a"),Kue=a("span"),F(uy.$$.fragment),AJo=l(),Zue=a("span"),LJo=o("AutoModelForTokenClassification"),$Xe=l(),qo=a("div"),F(by.$$.fragment),yJo=l(),fd=a("p"),xJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pz=a("a"),$Jo=o("from_pretrained()"),kJo=o(" class method or the "),Bz=a("a"),SJo=o("from_config()"),RJo=o(` class
method.`),PJo=l(),vy=a("p"),BJo=o("This class cannot be instantiated directly using "),e1e=a("code"),NJo=o("__init__()"),IJo=o(" (throws an error)."),qJo=l(),pt=a("div"),F(Fy.$$.fragment),jJo=l(),o1e=a("p"),DJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GJo=l(),md=a("p"),OJo=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),VJo=o("not"),XJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),zJo=o("from_pretrained()"),QJo=o(" to load the model weights."),WJo=l(),F(Bv.$$.fragment),HJo=l(),ao=a("div"),F(Ty.$$.fragment),UJo=l(),t1e=a("p"),JJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YJo=l(),Xa=a("p"),KJo=o("The model class to instantiate is selected based on the "),a1e=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),U=a("ul"),Nv=a("li"),l1e=a("strong"),sYo=o("albert"),lYo=o(" \u2014 "),Iz=a("a"),iYo=o("AlbertForTokenClassification"),dYo=o(" (ALBERT model)"),cYo=l(),Iv=a("li"),i1e=a("strong"),fYo=o("bert"),mYo=o(" \u2014 "),qz=a("a"),gYo=o("BertForTokenClassification"),hYo=o(" (BERT model)"),pYo=l(),qv=a("li"),d1e=a("strong"),_Yo=o("big_bird"),uYo=o(" \u2014 "),jz=a("a"),bYo=o("BigBirdForTokenClassification"),vYo=o(" (BigBird model)"),FYo=l(),jv=a("li"),c1e=a("strong"),TYo=o("bloom"),MYo=o(" \u2014 "),Dz=a("a"),EYo=o("BloomForTokenClassification"),CYo=o(" (BLOOM model)"),wYo=l(),Dv=a("li"),f1e=a("strong"),AYo=o("camembert"),LYo=o(" \u2014 "),Gz=a("a"),yYo=o("CamembertForTokenClassification"),xYo=o(" (CamemBERT model)"),$Yo=l(),Gv=a("li"),m1e=a("strong"),kYo=o("canine"),SYo=o(" \u2014 "),Oz=a("a"),RYo=o("CanineForTokenClassification"),PYo=o(" (CANINE model)"),BYo=l(),Ov=a("li"),g1e=a("strong"),NYo=o("convbert"),IYo=o(" \u2014 "),Vz=a("a"),qYo=o("ConvBertForTokenClassification"),jYo=o(" (ConvBERT model)"),DYo=l(),Vv=a("li"),h1e=a("strong"),GYo=o("data2vec-text"),OYo=o(" \u2014 "),Xz=a("a"),VYo=o("Data2VecTextForTokenClassification"),XYo=o(" (Data2VecText model)"),zYo=l(),Xv=a("li"),p1e=a("strong"),QYo=o("deberta"),WYo=o(" \u2014 "),zz=a("a"),HYo=o("DebertaForTokenClassification"),UYo=o(" (DeBERTa model)"),JYo=l(),zv=a("li"),_1e=a("strong"),YYo=o("deberta-v2"),KYo=o(" \u2014 "),Qz=a("a"),ZYo=o("DebertaV2ForTokenClassification"),eKo=o(" (DeBERTa-v2 model)"),oKo=l(),Qv=a("li"),u1e=a("strong"),rKo=o("distilbert"),tKo=o(" \u2014 "),Wz=a("a"),aKo=o("DistilBertForTokenClassification"),nKo=o(" (DistilBERT model)"),sKo=l(),Wv=a("li"),b1e=a("strong"),lKo=o("electra"),iKo=o(" \u2014 "),Hz=a("a"),dKo=o("ElectraForTokenClassification"),cKo=o(" (ELECTRA model)"),fKo=l(),Hv=a("li"),v1e=a("strong"),mKo=o("flaubert"),gKo=o(" \u2014 "),Uz=a("a"),hKo=o("FlaubertForTokenClassification"),pKo=o(" (FlauBERT model)"),_Ko=l(),Uv=a("li"),F1e=a("strong"),uKo=o("fnet"),bKo=o(" \u2014 "),Jz=a("a"),vKo=o("FNetForTokenClassification"),FKo=o(" (FNet model)"),TKo=l(),Jv=a("li"),T1e=a("strong"),MKo=o("funnel"),EKo=o(" \u2014 "),Yz=a("a"),CKo=o("FunnelForTokenClassification"),wKo=o(" (Funnel Transformer model)"),AKo=l(),Yv=a("li"),M1e=a("strong"),LKo=o("gpt2"),yKo=o(" \u2014 "),Kz=a("a"),xKo=o("GPT2ForTokenClassification"),$Ko=o(" (OpenAI GPT-2 model)"),kKo=l(),Kv=a("li"),E1e=a("strong"),SKo=o("ibert"),RKo=o(" \u2014 "),Zz=a("a"),PKo=o("IBertForTokenClassification"),BKo=o(" (I-BERT model)"),NKo=l(),Zv=a("li"),C1e=a("strong"),IKo=o("layoutlm"),qKo=o(" \u2014 "),eQ=a("a"),jKo=o("LayoutLMForTokenClassification"),DKo=o(" (LayoutLM model)"),GKo=l(),e5=a("li"),w1e=a("strong"),OKo=o("layoutlmv2"),VKo=o(" \u2014 "),oQ=a("a"),XKo=o("LayoutLMv2ForTokenClassification"),zKo=o(" (LayoutLMv2 model)"),QKo=l(),o5=a("li"),A1e=a("strong"),WKo=o("layoutlmv3"),HKo=o(" \u2014 "),rQ=a("a"),UKo=o("LayoutLMv3ForTokenClassification"),JKo=o(" (LayoutLMv3 model)"),YKo=l(),r5=a("li"),L1e=a("strong"),KKo=o("longformer"),ZKo=o(" \u2014 "),tQ=a("a"),eZo=o("LongformerForTokenClassification"),oZo=o(" (Longformer model)"),rZo=l(),t5=a("li"),y1e=a("strong"),tZo=o("megatron-bert"),aZo=o(" \u2014 "),aQ=a("a"),nZo=o("MegatronBertForTokenClassification"),sZo=o(" (Megatron-BERT model)"),lZo=l(),a5=a("li"),x1e=a("strong"),iZo=o("mobilebert"),dZo=o(" \u2014 "),nQ=a("a"),cZo=o("MobileBertForTokenClassification"),fZo=o(" (MobileBERT model)"),mZo=l(),n5=a("li"),$1e=a("strong"),gZo=o("mpnet"),hZo=o(" \u2014 "),sQ=a("a"),pZo=o("MPNetForTokenClassification"),_Zo=o(" (MPNet model)"),uZo=l(),s5=a("li"),k1e=a("strong"),bZo=o("nezha"),vZo=o(" \u2014 "),lQ=a("a"),FZo=o("NezhaForTokenClassification"),TZo=o(" (Nezha model)"),MZo=l(),l5=a("li"),S1e=a("strong"),EZo=o("nystromformer"),CZo=o(" \u2014 "),iQ=a("a"),wZo=o("NystromformerForTokenClassification"),AZo=o(" (Nystr\xF6mformer model)"),LZo=l(),i5=a("li"),R1e=a("strong"),yZo=o("qdqbert"),xZo=o(" \u2014 "),dQ=a("a"),$Zo=o("QDQBertForTokenClassification"),kZo=o(" (QDQBert model)"),SZo=l(),d5=a("li"),P1e=a("strong"),RZo=o("rembert"),PZo=o(" \u2014 "),cQ=a("a"),BZo=o("RemBertForTokenClassification"),NZo=o(" (RemBERT model)"),IZo=l(),c5=a("li"),B1e=a("strong"),qZo=o("roberta"),jZo=o(" \u2014 "),fQ=a("a"),DZo=o("RobertaForTokenClassification"),GZo=o(" (RoBERTa model)"),OZo=l(),f5=a("li"),N1e=a("strong"),VZo=o("roformer"),XZo=o(" \u2014 "),mQ=a("a"),zZo=o("RoFormerForTokenClassification"),QZo=o(" (RoFormer model)"),WZo=l(),m5=a("li"),I1e=a("strong"),HZo=o("squeezebert"),UZo=o(" \u2014 "),gQ=a("a"),JZo=o("SqueezeBertForTokenClassification"),YZo=o(" (SqueezeBERT model)"),KZo=l(),g5=a("li"),q1e=a("strong"),ZZo=o("xlm"),eer=o(" \u2014 "),hQ=a("a"),oer=o("XLMForTokenClassification"),rer=o(" (XLM model)"),ter=l(),h5=a("li"),j1e=a("strong"),aer=o("xlm-roberta"),ner=o(" \u2014 "),pQ=a("a"),ser=o("XLMRobertaForTokenClassification"),ler=o(" (XLM-RoBERTa model)"),ier=l(),p5=a("li"),D1e=a("strong"),der=o("xlm-roberta-xl"),cer=o(" \u2014 "),_Q=a("a"),fer=o("XLMRobertaXLForTokenClassification"),mer=o(" (XLM-RoBERTa-XL model)"),ger=l(),_5=a("li"),G1e=a("strong"),her=o("xlnet"),per=o(" \u2014 "),uQ=a("a"),_er=o("XLNetForTokenClassification"),uer=o(" (XLNet model)"),ber=l(),u5=a("li"),O1e=a("strong"),ver=o("yoso"),Fer=o(" \u2014 "),bQ=a("a"),Ter=o("YosoForTokenClassification"),Mer=o(" (YOSO model)"),Eer=l(),b5=a("p"),Cer=o("The model is set in evaluation mode by default using "),V1e=a("code"),wer=o("model.eval()"),Aer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=a("code"),Ler=o("model.train()"),yer=l(),F(v5.$$.fragment),kXe=l(),gd=a("h2"),F5=a("a"),z1e=a("span"),F(My.$$.fragment),xer=l(),Q1e=a("span"),$er=o("AutoModelForQuestionAnswering"),SXe=l(),jo=a("div"),F(Ey.$$.fragment),ker=l(),hd=a("p"),Ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vQ=a("a"),Rer=o("from_pretrained()"),Per=o(" class method or the "),FQ=a("a"),Ber=o("from_config()"),Ner=o(` class
method.`),Ier=l(),Cy=a("p"),qer=o("This class cannot be instantiated directly using "),W1e=a("code"),jer=o("__init__()"),Der=o(" (throws an error)."),Ger=l(),_t=a("div"),F(wy.$$.fragment),Oer=l(),H1e=a("p"),Ver=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xer=l(),pd=a("p"),zer=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),Qer=o("not"),Wer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Her=o("from_pretrained()"),Uer=o(" to load the model weights."),Jer=l(),F(T5.$$.fragment),Yer=l(),no=a("div"),F(Ay.$$.fragment),Ker=l(),J1e=a("p"),Zer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eor=l(),za=a("p"),oor=o("The model class to instantiate is selected based on the "),Y1e=a("code"),ror=o("model_type"),tor=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(":"),ior=l(),V=a("ul"),M5=a("li"),e4e=a("strong"),dor=o("albert"),cor=o(" \u2014 "),MQ=a("a"),mor=o("AlbertForQuestionAnswering"),gor=o(" (ALBERT model)"),hor=l(),E5=a("li"),o4e=a("strong"),por=o("bart"),_or=o(" \u2014 "),EQ=a("a"),uor=o("BartForQuestionAnswering"),bor=o(" (BART model)"),vor=l(),C5=a("li"),r4e=a("strong"),For=o("bert"),Tor=o(" \u2014 "),CQ=a("a"),Mor=o("BertForQuestionAnswering"),Eor=o(" (BERT model)"),Cor=l(),w5=a("li"),t4e=a("strong"),wor=o("big_bird"),Aor=o(" \u2014 "),wQ=a("a"),Lor=o("BigBirdForQuestionAnswering"),yor=o(" (BigBird model)"),xor=l(),A5=a("li"),a4e=a("strong"),$or=o("bigbird_pegasus"),kor=o(" \u2014 "),AQ=a("a"),Sor=o("BigBirdPegasusForQuestionAnswering"),Ror=o(" (BigBird-Pegasus model)"),Por=l(),L5=a("li"),n4e=a("strong"),Bor=o("camembert"),Nor=o(" \u2014 "),LQ=a("a"),Ior=o("CamembertForQuestionAnswering"),qor=o(" (CamemBERT model)"),jor=l(),y5=a("li"),s4e=a("strong"),Dor=o("canine"),Gor=o(" \u2014 "),yQ=a("a"),Oor=o("CanineForQuestionAnswering"),Vor=o(" (CANINE model)"),Xor=l(),x5=a("li"),l4e=a("strong"),zor=o("convbert"),Qor=o(" \u2014 "),xQ=a("a"),Wor=o("ConvBertForQuestionAnswering"),Hor=o(" (ConvBERT model)"),Uor=l(),$5=a("li"),i4e=a("strong"),Jor=o("data2vec-text"),Yor=o(" \u2014 "),$Q=a("a"),Kor=o("Data2VecTextForQuestionAnswering"),Zor=o(" (Data2VecText model)"),err=l(),k5=a("li"),d4e=a("strong"),orr=o("deberta"),rrr=o(" \u2014 "),kQ=a("a"),trr=o("DebertaForQuestionAnswering"),arr=o(" (DeBERTa model)"),nrr=l(),S5=a("li"),c4e=a("strong"),srr=o("deberta-v2"),lrr=o(" \u2014 "),SQ=a("a"),irr=o("DebertaV2ForQuestionAnswering"),drr=o(" (DeBERTa-v2 model)"),crr=l(),R5=a("li"),f4e=a("strong"),frr=o("distilbert"),mrr=o(" \u2014 "),RQ=a("a"),grr=o("DistilBertForQuestionAnswering"),hrr=o(" (DistilBERT model)"),prr=l(),P5=a("li"),m4e=a("strong"),_rr=o("electra"),urr=o(" \u2014 "),PQ=a("a"),brr=o("ElectraForQuestionAnswering"),vrr=o(" (ELECTRA model)"),Frr=l(),B5=a("li"),g4e=a("strong"),Trr=o("flaubert"),Mrr=o(" \u2014 "),BQ=a("a"),Err=o("FlaubertForQuestionAnsweringSimple"),Crr=o(" (FlauBERT model)"),wrr=l(),N5=a("li"),h4e=a("strong"),Arr=o("fnet"),Lrr=o(" \u2014 "),NQ=a("a"),yrr=o("FNetForQuestionAnswering"),xrr=o(" (FNet model)"),$rr=l(),I5=a("li"),p4e=a("strong"),krr=o("funnel"),Srr=o(" \u2014 "),IQ=a("a"),Rrr=o("FunnelForQuestionAnswering"),Prr=o(" (Funnel Transformer model)"),Brr=l(),q5=a("li"),_4e=a("strong"),Nrr=o("gptj"),Irr=o(" \u2014 "),qQ=a("a"),qrr=o("GPTJForQuestionAnswering"),jrr=o(" (GPT-J model)"),Drr=l(),j5=a("li"),u4e=a("strong"),Grr=o("ibert"),Orr=o(" \u2014 "),jQ=a("a"),Vrr=o("IBertForQuestionAnswering"),Xrr=o(" (I-BERT model)"),zrr=l(),D5=a("li"),b4e=a("strong"),Qrr=o("layoutlmv2"),Wrr=o(" \u2014 "),DQ=a("a"),Hrr=o("LayoutLMv2ForQuestionAnswering"),Urr=o(" (LayoutLMv2 model)"),Jrr=l(),G5=a("li"),v4e=a("strong"),Yrr=o("layoutlmv3"),Krr=o(" \u2014 "),GQ=a("a"),Zrr=o("LayoutLMv3ForQuestionAnswering"),etr=o(" (LayoutLMv3 model)"),otr=l(),O5=a("li"),F4e=a("strong"),rtr=o("led"),ttr=o(" \u2014 "),OQ=a("a"),atr=o("LEDForQuestionAnswering"),ntr=o(" (LED model)"),str=l(),V5=a("li"),T4e=a("strong"),ltr=o("longformer"),itr=o(" \u2014 "),VQ=a("a"),dtr=o("LongformerForQuestionAnswering"),ctr=o(" (Longformer model)"),ftr=l(),X5=a("li"),M4e=a("strong"),mtr=o("lxmert"),gtr=o(" \u2014 "),XQ=a("a"),htr=o("LxmertForQuestionAnswering"),ptr=o(" (LXMERT model)"),_tr=l(),z5=a("li"),E4e=a("strong"),utr=o("mbart"),btr=o(" \u2014 "),zQ=a("a"),vtr=o("MBartForQuestionAnswering"),Ftr=o(" (mBART model)"),Ttr=l(),Q5=a("li"),C4e=a("strong"),Mtr=o("megatron-bert"),Etr=o(" \u2014 "),QQ=a("a"),Ctr=o("MegatronBertForQuestionAnswering"),wtr=o(" (Megatron-BERT model)"),Atr=l(),W5=a("li"),w4e=a("strong"),Ltr=o("mobilebert"),ytr=o(" \u2014 "),WQ=a("a"),xtr=o("MobileBertForQuestionAnswering"),$tr=o(" (MobileBERT model)"),ktr=l(),H5=a("li"),A4e=a("strong"),Str=o("mpnet"),Rtr=o(" \u2014 "),HQ=a("a"),Ptr=o("MPNetForQuestionAnswering"),Btr=o(" (MPNet model)"),Ntr=l(),U5=a("li"),L4e=a("strong"),Itr=o("mvp"),qtr=o(" \u2014 "),UQ=a("a"),jtr=o("MvpForQuestionAnswering"),Dtr=o(" (MVP model)"),Gtr=l(),J5=a("li"),y4e=a("strong"),Otr=o("nezha"),Vtr=o(" \u2014 "),JQ=a("a"),Xtr=o("NezhaForQuestionAnswering"),ztr=o(" (Nezha model)"),Qtr=l(),Y5=a("li"),x4e=a("strong"),Wtr=o("nystromformer"),Htr=o(" \u2014 "),YQ=a("a"),Utr=o("NystromformerForQuestionAnswering"),Jtr=o(" (Nystr\xF6mformer model)"),Ytr=l(),K5=a("li"),$4e=a("strong"),Ktr=o("qdqbert"),Ztr=o(" \u2014 "),KQ=a("a"),ear=o("QDQBertForQuestionAnswering"),oar=o(" (QDQBert model)"),rar=l(),Z5=a("li"),k4e=a("strong"),tar=o("reformer"),aar=o(" \u2014 "),ZQ=a("a"),nar=o("ReformerForQuestionAnswering"),sar=o(" (Reformer model)"),lar=l(),eF=a("li"),S4e=a("strong"),iar=o("rembert"),dar=o(" \u2014 "),eW=a("a"),car=o("RemBertForQuestionAnswering"),far=o(" (RemBERT model)"),mar=l(),oF=a("li"),R4e=a("strong"),gar=o("roberta"),har=o(" \u2014 "),oW=a("a"),par=o("RobertaForQuestionAnswering"),_ar=o(" (RoBERTa model)"),uar=l(),rF=a("li"),P4e=a("strong"),bar=o("roformer"),Far=o(" \u2014 "),rW=a("a"),Tar=o("RoFormerForQuestionAnswering"),Mar=o(" (RoFormer model)"),Ear=l(),tF=a("li"),B4e=a("strong"),Car=o("splinter"),war=o(" \u2014 "),tW=a("a"),Aar=o("SplinterForQuestionAnswering"),Lar=o(" (Splinter model)"),yar=l(),aF=a("li"),N4e=a("strong"),xar=o("squeezebert"),$ar=o(" \u2014 "),aW=a("a"),kar=o("SqueezeBertForQuestionAnswering"),Sar=o(" (SqueezeBERT model)"),Rar=l(),nF=a("li"),I4e=a("strong"),Par=o("xlm"),Bar=o(" \u2014 "),nW=a("a"),Nar=o("XLMForQuestionAnsweringSimple"),Iar=o(" (XLM model)"),qar=l(),sF=a("li"),q4e=a("strong"),jar=o("xlm-roberta"),Dar=o(" \u2014 "),sW=a("a"),Gar=o("XLMRobertaForQuestionAnswering"),Oar=o(" (XLM-RoBERTa model)"),Var=l(),lF=a("li"),j4e=a("strong"),Xar=o("xlm-roberta-xl"),zar=o(" \u2014 "),lW=a("a"),Qar=o("XLMRobertaXLForQuestionAnswering"),War=o(" (XLM-RoBERTa-XL model)"),Har=l(),iF=a("li"),D4e=a("strong"),Uar=o("xlnet"),Jar=o(" \u2014 "),iW=a("a"),Yar=o("XLNetForQuestionAnsweringSimple"),Kar=o(" (XLNet model)"),Zar=l(),dF=a("li"),G4e=a("strong"),enr=o("yoso"),onr=o(" \u2014 "),dW=a("a"),rnr=o("YosoForQuestionAnswering"),tnr=o(" (YOSO model)"),anr=l(),cF=a("p"),nnr=o("The model is set in evaluation mode by default using "),O4e=a("code"),snr=o("model.eval()"),lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V4e=a("code"),inr=o("model.train()"),dnr=l(),F(fF.$$.fragment),RXe=l(),_d=a("h2"),mF=a("a"),X4e=a("span"),F(Ly.$$.fragment),cnr=l(),z4e=a("span"),fnr=o("AutoModelForTableQuestionAnswering"),PXe=l(),Do=a("div"),F(yy.$$.fragment),mnr=l(),ud=a("p"),gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cW=a("a"),hnr=o("from_pretrained()"),pnr=o(" class method or the "),fW=a("a"),_nr=o("from_config()"),unr=o(` class
method.`),bnr=l(),xy=a("p"),vnr=o("This class cannot be instantiated directly using "),Q4e=a("code"),Fnr=o("__init__()"),Tnr=o(" (throws an error)."),Mnr=l(),ut=a("div"),F($y.$$.fragment),Enr=l(),W4e=a("p"),Cnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wnr=l(),bd=a("p"),Anr=o(`Note:
Loading a model from its configuration file does `),H4e=a("strong"),Lnr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),xnr=o("from_pretrained()"),$nr=o(" to load the model weights."),knr=l(),F(gF.$$.fragment),Snr=l(),so=a("div"),F(ky.$$.fragment),Rnr=l(),U4e=a("p"),Pnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bnr=l(),Qa=a("p"),Nnr=o("The model class to instantiate is selected based on the "),J4e=a("code"),Inr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),Y4e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(":"),Vnr=l(),Z4e=a("ul"),hF=a("li"),e2e=a("strong"),Xnr=o("tapas"),znr=o(" \u2014 "),gW=a("a"),Qnr=o("TapasForQuestionAnswering"),Wnr=o(" (TAPAS model)"),Hnr=l(),pF=a("p"),Unr=o("The model is set in evaluation mode by default using "),o2e=a("code"),Jnr=o("model.eval()"),Ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=a("code"),Knr=o("model.train()"),Znr=l(),F(_F.$$.fragment),BXe=l(),vd=a("h2"),uF=a("a"),t2e=a("span"),F(Sy.$$.fragment),esr=l(),a2e=a("span"),osr=o("AutoModelForImageClassification"),NXe=l(),Go=a("div"),F(Ry.$$.fragment),rsr=l(),Fd=a("p"),tsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hW=a("a"),asr=o("from_pretrained()"),nsr=o(" class method or the "),pW=a("a"),ssr=o("from_config()"),lsr=o(` class
method.`),isr=l(),Py=a("p"),dsr=o("This class cannot be instantiated directly using "),n2e=a("code"),csr=o("__init__()"),fsr=o(" (throws an error)."),msr=l(),bt=a("div"),F(By.$$.fragment),gsr=l(),s2e=a("p"),hsr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),psr=l(),Td=a("p"),_sr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),usr=o("not"),bsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),vsr=o("from_pretrained()"),Fsr=o(" to load the model weights."),Tsr=l(),F(bF.$$.fragment),Msr=l(),lo=a("div"),F(Ny.$$.fragment),Esr=l(),i2e=a("p"),Csr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wsr=l(),Wa=a("p"),Asr=o("The model class to instantiate is selected based on the "),d2e=a("code"),Lsr=o("model_type"),ysr=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),ksr=o("pretrained_model_name_or_path"),Ssr=o(":"),Rsr=l(),_e=a("ul"),vF=a("li"),m2e=a("strong"),Psr=o("beit"),Bsr=o(" \u2014 "),uW=a("a"),Nsr=o("BeitForImageClassification"),Isr=o(" (BEiT model)"),qsr=l(),FF=a("li"),g2e=a("strong"),jsr=o("convnext"),Dsr=o(" \u2014 "),bW=a("a"),Gsr=o("ConvNextForImageClassification"),Osr=o(" (ConvNeXT model)"),Vsr=l(),TF=a("li"),h2e=a("strong"),Xsr=o("cvt"),zsr=o(" \u2014 "),vW=a("a"),Qsr=o("CvtForImageClassification"),Wsr=o(" (CvT model)"),Hsr=l(),MF=a("li"),p2e=a("strong"),Usr=o("data2vec-vision"),Jsr=o(" \u2014 "),FW=a("a"),Ysr=o("Data2VecVisionForImageClassification"),Ksr=o(" (Data2VecVision model)"),Zsr=l(),Hs=a("li"),_2e=a("strong"),elr=o("deit"),olr=o(" \u2014 "),TW=a("a"),rlr=o("DeiTForImageClassification"),tlr=o(" or "),MW=a("a"),alr=o("DeiTForImageClassificationWithTeacher"),nlr=o(" (DeiT model)"),slr=l(),EF=a("li"),u2e=a("strong"),llr=o("imagegpt"),ilr=o(" \u2014 "),EW=a("a"),dlr=o("ImageGPTForImageClassification"),clr=o(" (ImageGPT model)"),flr=l(),Us=a("li"),b2e=a("strong"),mlr=o("levit"),glr=o(" \u2014 "),CW=a("a"),hlr=o("LevitForImageClassification"),plr=o(" or "),wW=a("a"),_lr=o("LevitForImageClassificationWithTeacher"),ulr=o(" (LeViT model)"),blr=l(),CF=a("li"),v2e=a("strong"),vlr=o("mobilenet_v2"),Flr=o(" \u2014 "),AW=a("a"),Tlr=o("MobileNetV2ForImageClassification"),Mlr=o(" (MobileNetV2 model)"),Elr=l(),wF=a("li"),F2e=a("strong"),Clr=o("mobilevit"),wlr=o(" \u2014 "),LW=a("a"),Alr=o("MobileViTForImageClassification"),Llr=o(" (MobileViT model)"),ylr=l(),vt=a("li"),T2e=a("strong"),xlr=o("perceiver"),$lr=o(" \u2014 "),yW=a("a"),klr=o("PerceiverForImageClassificationLearned"),Slr=o(" or "),xW=a("a"),Rlr=o("PerceiverForImageClassificationFourier"),Plr=o(" or "),$W=a("a"),Blr=o("PerceiverForImageClassificationConvProcessing"),Nlr=o(" (Perceiver model)"),Ilr=l(),AF=a("li"),M2e=a("strong"),qlr=o("poolformer"),jlr=o(" \u2014 "),kW=a("a"),Dlr=o("PoolFormerForImageClassification"),Glr=o(" (PoolFormer model)"),Olr=l(),LF=a("li"),E2e=a("strong"),Vlr=o("regnet"),Xlr=o(" \u2014 "),SW=a("a"),zlr=o("RegNetForImageClassification"),Qlr=o(" (RegNet model)"),Wlr=l(),yF=a("li"),C2e=a("strong"),Hlr=o("resnet"),Ulr=o(" \u2014 "),RW=a("a"),Jlr=o("ResNetForImageClassification"),Ylr=o(" (ResNet model)"),Klr=l(),xF=a("li"),w2e=a("strong"),Zlr=o("segformer"),eir=o(" \u2014 "),PW=a("a"),oir=o("SegformerForImageClassification"),rir=o(" (SegFormer model)"),tir=l(),$F=a("li"),A2e=a("strong"),air=o("swin"),nir=o(" \u2014 "),BW=a("a"),sir=o("SwinForImageClassification"),lir=o(" (Swin Transformer model)"),iir=l(),kF=a("li"),L2e=a("strong"),dir=o("van"),cir=o(" \u2014 "),NW=a("a"),fir=o("VanForImageClassification"),mir=o(" (VAN model)"),gir=l(),SF=a("li"),y2e=a("strong"),hir=o("vit"),pir=o(" \u2014 "),IW=a("a"),_ir=o("ViTForImageClassification"),uir=o(" (ViT model)"),bir=l(),RF=a("p"),vir=o("The model is set in evaluation mode by default using "),x2e=a("code"),Fir=o("model.eval()"),Tir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=a("code"),Mir=o("model.train()"),Eir=l(),F(PF.$$.fragment),IXe=l(),Md=a("h2"),BF=a("a"),k2e=a("span"),F(Iy.$$.fragment),Cir=l(),S2e=a("span"),wir=o("AutoModelForVision2Seq"),qXe=l(),Oo=a("div"),F(qy.$$.fragment),Air=l(),Ed=a("p"),Lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qW=a("a"),yir=o("from_pretrained()"),xir=o(" class method or the "),jW=a("a"),$ir=o("from_config()"),kir=o(` class
method.`),Sir=l(),jy=a("p"),Rir=o("This class cannot be instantiated directly using "),R2e=a("code"),Pir=o("__init__()"),Bir=o(" (throws an error)."),Nir=l(),Ft=a("div"),F(Dy.$$.fragment),Iir=l(),P2e=a("p"),qir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jir=l(),Cd=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),Gir=o("not"),Oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),Vir=o("from_pretrained()"),Xir=o(" to load the model weights."),zir=l(),F(NF.$$.fragment),Qir=l(),io=a("div"),F(Gy.$$.fragment),Wir=l(),N2e=a("p"),Hir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uir=l(),Ha=a("p"),Jir=o("The model class to instantiate is selected based on the "),I2e=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),D2e=a("ul"),IF=a("li"),G2e=a("strong"),adr=o("vision-encoder-decoder"),ndr=o(" \u2014 "),GW=a("a"),sdr=o("VisionEncoderDecoderModel"),ldr=o(" (Vision Encoder decoder model)"),idr=l(),qF=a("p"),ddr=o("The model is set in evaluation mode by default using "),O2e=a("code"),cdr=o("model.eval()"),fdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=a("code"),mdr=o("model.train()"),gdr=l(),F(jF.$$.fragment),jXe=l(),wd=a("h2"),DF=a("a"),X2e=a("span"),F(Oy.$$.fragment),hdr=l(),z2e=a("span"),pdr=o("AutoModelForVisualQuestionAnswering"),DXe=l(),Vo=a("div"),F(Vy.$$.fragment),_dr=l(),Ad=a("p"),udr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OW=a("a"),bdr=o("from_pretrained()"),vdr=o(" class method or the "),VW=a("a"),Fdr=o("from_config()"),Tdr=o(` class
method.`),Mdr=l(),Xy=a("p"),Edr=o("This class cannot be instantiated directly using "),Q2e=a("code"),Cdr=o("__init__()"),wdr=o(" (throws an error)."),Adr=l(),Tt=a("div"),F(zy.$$.fragment),Ldr=l(),W2e=a("p"),ydr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),xdr=l(),Ld=a("p"),$dr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),kdr=o("not"),Sdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Rdr=o("from_pretrained()"),Pdr=o(" to load the model weights."),Bdr=l(),F(GF.$$.fragment),Ndr=l(),co=a("div"),F(Qy.$$.fragment),Idr=l(),U2e=a("p"),qdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),jdr=l(),Ua=a("p"),Ddr=o("The model class to instantiate is selected based on the "),J2e=a("code"),Gdr=o("model_type"),Odr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),Vdr=o("pretrained_model_name_or_path"),Xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),zdr=o("pretrained_model_name_or_path"),Qdr=o(":"),Wdr=l(),Z2e=a("ul"),OF=a("li"),ebe=a("strong"),Hdr=o("vilt"),Udr=o(" \u2014 "),zW=a("a"),Jdr=o("ViltForQuestionAnswering"),Ydr=o(" (ViLT model)"),Kdr=l(),VF=a("p"),Zdr=o("The model is set in evaluation mode by default using "),obe=a("code"),ecr=o("model.eval()"),ocr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),rcr=o("model.train()"),tcr=l(),F(XF.$$.fragment),GXe=l(),yd=a("h2"),zF=a("a"),tbe=a("span"),F(Wy.$$.fragment),acr=l(),abe=a("span"),ncr=o("AutoModelForAudioClassification"),OXe=l(),Xo=a("div"),F(Hy.$$.fragment),scr=l(),xd=a("p"),lcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QW=a("a"),icr=o("from_pretrained()"),dcr=o(" class method or the "),WW=a("a"),ccr=o("from_config()"),fcr=o(` class
method.`),mcr=l(),Uy=a("p"),gcr=o("This class cannot be instantiated directly using "),nbe=a("code"),hcr=o("__init__()"),pcr=o(" (throws an error)."),_cr=l(),Mt=a("div"),F(Jy.$$.fragment),ucr=l(),sbe=a("p"),bcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vcr=l(),$d=a("p"),Fcr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Tcr=o("not"),Mcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" to load the model weights."),wcr=l(),F(QF.$$.fragment),Acr=l(),fo=a("div"),F(Yy.$$.fragment),Lcr=l(),ibe=a("p"),ycr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xcr=l(),Ja=a("p"),$cr=o("The model class to instantiate is selected based on the "),dbe=a("code"),kcr=o("model_type"),Scr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),Rcr=o("pretrained_model_name_or_path"),Pcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),Bcr=o("pretrained_model_name_or_path"),Ncr=o(":"),Icr=l(),Pe=a("ul"),WF=a("li"),mbe=a("strong"),qcr=o("data2vec-audio"),jcr=o(" \u2014 "),UW=a("a"),Dcr=o("Data2VecAudioForSequenceClassification"),Gcr=o(" (Data2VecAudio model)"),Ocr=l(),HF=a("li"),gbe=a("strong"),Vcr=o("hubert"),Xcr=o(" \u2014 "),JW=a("a"),zcr=o("HubertForSequenceClassification"),Qcr=o(" (Hubert model)"),Wcr=l(),UF=a("li"),hbe=a("strong"),Hcr=o("sew"),Ucr=o(" \u2014 "),YW=a("a"),Jcr=o("SEWForSequenceClassification"),Ycr=o(" (SEW model)"),Kcr=l(),JF=a("li"),pbe=a("strong"),Zcr=o("sew-d"),efr=o(" \u2014 "),KW=a("a"),ofr=o("SEWDForSequenceClassification"),rfr=o(" (SEW-D model)"),tfr=l(),YF=a("li"),_be=a("strong"),afr=o("unispeech"),nfr=o(" \u2014 "),ZW=a("a"),sfr=o("UniSpeechForSequenceClassification"),lfr=o(" (UniSpeech model)"),ifr=l(),KF=a("li"),ube=a("strong"),dfr=o("unispeech-sat"),cfr=o(" \u2014 "),eH=a("a"),ffr=o("UniSpeechSatForSequenceClassification"),mfr=o(" (UniSpeechSat model)"),gfr=l(),ZF=a("li"),bbe=a("strong"),hfr=o("wav2vec2"),pfr=o(" \u2014 "),oH=a("a"),_fr=o("Wav2Vec2ForSequenceClassification"),ufr=o(" (Wav2Vec2 model)"),bfr=l(),eT=a("li"),vbe=a("strong"),vfr=o("wav2vec2-conformer"),Ffr=o(" \u2014 "),rH=a("a"),Tfr=o("Wav2Vec2ConformerForSequenceClassification"),Mfr=o(" (Wav2Vec2-Conformer model)"),Efr=l(),oT=a("li"),Fbe=a("strong"),Cfr=o("wavlm"),wfr=o(" \u2014 "),tH=a("a"),Afr=o("WavLMForSequenceClassification"),Lfr=o(" (WavLM model)"),yfr=l(),rT=a("p"),xfr=o("The model is set in evaluation mode by default using "),Tbe=a("code"),$fr=o("model.eval()"),kfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=a("code"),Sfr=o("model.train()"),Rfr=l(),F(tT.$$.fragment),VXe=l(),kd=a("h2"),aT=a("a"),Ebe=a("span"),F(Ky.$$.fragment),Pfr=l(),Cbe=a("span"),Bfr=o("AutoModelForAudioFrameClassification"),XXe=l(),zo=a("div"),F(Zy.$$.fragment),Nfr=l(),Sd=a("p"),Ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aH=a("a"),qfr=o("from_pretrained()"),jfr=o(" class method or the "),nH=a("a"),Dfr=o("from_config()"),Gfr=o(` class
method.`),Ofr=l(),e9=a("p"),Vfr=o("This class cannot be instantiated directly using "),wbe=a("code"),Xfr=o("__init__()"),zfr=o(" (throws an error)."),Qfr=l(),Et=a("div"),F(o9.$$.fragment),Wfr=l(),Abe=a("p"),Hfr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ufr=l(),Rd=a("p"),Jfr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),Yfr=o("not"),Kfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),Zfr=o("from_pretrained()"),emr=o(" to load the model weights."),omr=l(),F(nT.$$.fragment),rmr=l(),mo=a("div"),F(r9.$$.fragment),tmr=l(),ybe=a("p"),amr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),nmr=l(),Ya=a("p"),smr=o("The model class to instantiate is selected based on the "),xbe=a("code"),lmr=o("model_type"),imr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),dmr=o("pretrained_model_name_or_path"),cmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),fmr=o("pretrained_model_name_or_path"),mmr=o(":"),gmr=l(),ot=a("ul"),sT=a("li"),Sbe=a("strong"),hmr=o("data2vec-audio"),pmr=o(" \u2014 "),lH=a("a"),_mr=o("Data2VecAudioForAudioFrameClassification"),umr=o(" (Data2VecAudio model)"),bmr=l(),lT=a("li"),Rbe=a("strong"),vmr=o("unispeech-sat"),Fmr=o(" \u2014 "),iH=a("a"),Tmr=o("UniSpeechSatForAudioFrameClassification"),Mmr=o(" (UniSpeechSat model)"),Emr=l(),iT=a("li"),Pbe=a("strong"),Cmr=o("wav2vec2"),wmr=o(" \u2014 "),dH=a("a"),Amr=o("Wav2Vec2ForAudioFrameClassification"),Lmr=o(" (Wav2Vec2 model)"),ymr=l(),dT=a("li"),Bbe=a("strong"),xmr=o("wav2vec2-conformer"),$mr=o(" \u2014 "),cH=a("a"),kmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Smr=o(" (Wav2Vec2-Conformer model)"),Rmr=l(),cT=a("li"),Nbe=a("strong"),Pmr=o("wavlm"),Bmr=o(" \u2014 "),fH=a("a"),Nmr=o("WavLMForAudioFrameClassification"),Imr=o(" (WavLM model)"),qmr=l(),fT=a("p"),jmr=o("The model is set in evaluation mode by default using "),Ibe=a("code"),Dmr=o("model.eval()"),Gmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),Omr=o("model.train()"),Vmr=l(),F(mT.$$.fragment),zXe=l(),Pd=a("h2"),gT=a("a"),jbe=a("span"),F(t9.$$.fragment),Xmr=l(),Dbe=a("span"),zmr=o("AutoModelForCTC"),QXe=l(),Qo=a("div"),F(a9.$$.fragment),Qmr=l(),Bd=a("p"),Wmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mH=a("a"),Hmr=o("from_pretrained()"),Umr=o(" class method or the "),gH=a("a"),Jmr=o("from_config()"),Ymr=o(` class
method.`),Kmr=l(),n9=a("p"),Zmr=o("This class cannot be instantiated directly using "),Gbe=a("code"),egr=o("__init__()"),ogr=o(" (throws an error)."),rgr=l(),Ct=a("div"),F(s9.$$.fragment),tgr=l(),Obe=a("p"),agr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ngr=l(),Nd=a("p"),sgr=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),lgr=o("not"),igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),dgr=o("from_pretrained()"),cgr=o(" to load the model weights."),fgr=l(),F(hT.$$.fragment),mgr=l(),go=a("div"),F(l9.$$.fragment),ggr=l(),Xbe=a("p"),hgr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pgr=l(),Ka=a("p"),_gr=o("The model class to instantiate is selected based on the "),zbe=a("code"),ugr=o("model_type"),bgr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),vgr=o("pretrained_model_name_or_path"),Fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),Tgr=o("pretrained_model_name_or_path"),Mgr=o(":"),Egr=l(),Le=a("ul"),pT=a("li"),Hbe=a("strong"),Cgr=o("data2vec-audio"),wgr=o(" \u2014 "),pH=a("a"),Agr=o("Data2VecAudioForCTC"),Lgr=o(" (Data2VecAudio model)"),ygr=l(),_T=a("li"),Ube=a("strong"),xgr=o("hubert"),$gr=o(" \u2014 "),_H=a("a"),kgr=o("HubertForCTC"),Sgr=o(" (Hubert model)"),Rgr=l(),uT=a("li"),Jbe=a("strong"),Pgr=o("mctct"),Bgr=o(" \u2014 "),uH=a("a"),Ngr=o("MCTCTForCTC"),Igr=o(" (M-CTC-T model)"),qgr=l(),bT=a("li"),Ybe=a("strong"),jgr=o("sew"),Dgr=o(" \u2014 "),bH=a("a"),Ggr=o("SEWForCTC"),Ogr=o(" (SEW model)"),Vgr=l(),vT=a("li"),Kbe=a("strong"),Xgr=o("sew-d"),zgr=o(" \u2014 "),vH=a("a"),Qgr=o("SEWDForCTC"),Wgr=o(" (SEW-D model)"),Hgr=l(),FT=a("li"),Zbe=a("strong"),Ugr=o("unispeech"),Jgr=o(" \u2014 "),FH=a("a"),Ygr=o("UniSpeechForCTC"),Kgr=o(" (UniSpeech model)"),Zgr=l(),TT=a("li"),eve=a("strong"),ehr=o("unispeech-sat"),ohr=o(" \u2014 "),TH=a("a"),rhr=o("UniSpeechSatForCTC"),thr=o(" (UniSpeechSat model)"),ahr=l(),MT=a("li"),ove=a("strong"),nhr=o("wav2vec2"),shr=o(" \u2014 "),MH=a("a"),lhr=o("Wav2Vec2ForCTC"),ihr=o(" (Wav2Vec2 model)"),dhr=l(),ET=a("li"),rve=a("strong"),chr=o("wav2vec2-conformer"),fhr=o(" \u2014 "),EH=a("a"),mhr=o("Wav2Vec2ConformerForCTC"),ghr=o(" (Wav2Vec2-Conformer model)"),hhr=l(),CT=a("li"),tve=a("strong"),phr=o("wavlm"),_hr=o(" \u2014 "),CH=a("a"),uhr=o("WavLMForCTC"),bhr=o(" (WavLM model)"),vhr=l(),wT=a("p"),Fhr=o("The model is set in evaluation mode by default using "),ave=a("code"),Thr=o("model.eval()"),Mhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nve=a("code"),Ehr=o("model.train()"),Chr=l(),F(AT.$$.fragment),WXe=l(),Id=a("h2"),LT=a("a"),sve=a("span"),F(i9.$$.fragment),whr=l(),lve=a("span"),Ahr=o("AutoModelForSpeechSeq2Seq"),HXe=l(),Wo=a("div"),F(d9.$$.fragment),Lhr=l(),qd=a("p"),yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wH=a("a"),xhr=o("from_pretrained()"),$hr=o(" class method or the "),AH=a("a"),khr=o("from_config()"),Shr=o(` class
method.`),Rhr=l(),c9=a("p"),Phr=o("This class cannot be instantiated directly using "),ive=a("code"),Bhr=o("__init__()"),Nhr=o(" (throws an error)."),Ihr=l(),wt=a("div"),F(f9.$$.fragment),qhr=l(),dve=a("p"),jhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dhr=l(),jd=a("p"),Ghr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),Ohr=o("not"),Vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),Xhr=o("from_pretrained()"),zhr=o(" to load the model weights."),Qhr=l(),F(yT.$$.fragment),Whr=l(),ho=a("div"),F(m9.$$.fragment),Hhr=l(),fve=a("p"),Uhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jhr=l(),Za=a("p"),Yhr=o("The model class to instantiate is selected based on the "),mve=a("code"),Khr=o("model_type"),Zhr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(":"),apr=l(),g9=a("ul"),xT=a("li"),pve=a("strong"),npr=o("speech-encoder-decoder"),spr=o(" \u2014 "),yH=a("a"),lpr=o("SpeechEncoderDecoderModel"),ipr=o(" (Speech Encoder decoder model)"),dpr=l(),$T=a("li"),_ve=a("strong"),cpr=o("speech_to_text"),fpr=o(" \u2014 "),xH=a("a"),mpr=o("Speech2TextForConditionalGeneration"),gpr=o(" (Speech2Text model)"),hpr=l(),kT=a("p"),ppr=o("The model is set in evaluation mode by default using "),uve=a("code"),_pr=o("model.eval()"),upr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bve=a("code"),bpr=o("model.train()"),vpr=l(),F(ST.$$.fragment),UXe=l(),Dd=a("h2"),RT=a("a"),vve=a("span"),F(h9.$$.fragment),Fpr=l(),Fve=a("span"),Tpr=o("AutoModelForAudioXVector"),JXe=l(),Ho=a("div"),F(p9.$$.fragment),Mpr=l(),Gd=a("p"),Epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$H=a("a"),Cpr=o("from_pretrained()"),wpr=o(" class method or the "),kH=a("a"),Apr=o("from_config()"),Lpr=o(` class
method.`),ypr=l(),_9=a("p"),xpr=o("This class cannot be instantiated directly using "),Tve=a("code"),$pr=o("__init__()"),kpr=o(" (throws an error)."),Spr=l(),At=a("div"),F(u9.$$.fragment),Rpr=l(),Mve=a("p"),Ppr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Bpr=l(),Od=a("p"),Npr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),Ipr=o("not"),qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),jpr=o("from_pretrained()"),Dpr=o(" to load the model weights."),Gpr=l(),F(PT.$$.fragment),Opr=l(),po=a("div"),F(b9.$$.fragment),Vpr=l(),Cve=a("p"),Xpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),zpr=l(),en=a("p"),Qpr=o("The model class to instantiate is selected based on the "),wve=a("code"),Wpr=o("model_type"),Hpr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),Ypr=o("pretrained_model_name_or_path"),Kpr=o(":"),Zpr=l(),rt=a("ul"),BT=a("li"),yve=a("strong"),e_r=o("data2vec-audio"),o_r=o(" \u2014 "),RH=a("a"),r_r=o("Data2VecAudioForXVector"),t_r=o(" (Data2VecAudio model)"),a_r=l(),NT=a("li"),xve=a("strong"),n_r=o("unispeech-sat"),s_r=o(" \u2014 "),PH=a("a"),l_r=o("UniSpeechSatForXVector"),i_r=o(" (UniSpeechSat model)"),d_r=l(),IT=a("li"),$ve=a("strong"),c_r=o("wav2vec2"),f_r=o(" \u2014 "),BH=a("a"),m_r=o("Wav2Vec2ForXVector"),g_r=o(" (Wav2Vec2 model)"),h_r=l(),qT=a("li"),kve=a("strong"),p_r=o("wav2vec2-conformer"),__r=o(" \u2014 "),NH=a("a"),u_r=o("Wav2Vec2ConformerForXVector"),b_r=o(" (Wav2Vec2-Conformer model)"),v_r=l(),jT=a("li"),Sve=a("strong"),F_r=o("wavlm"),T_r=o(" \u2014 "),IH=a("a"),M_r=o("WavLMForXVector"),E_r=o(" (WavLM model)"),C_r=l(),DT=a("p"),w_r=o("The model is set in evaluation mode by default using "),Rve=a("code"),A_r=o("model.eval()"),L_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),y_r=o("model.train()"),x_r=l(),F(GT.$$.fragment),YXe=l(),Vd=a("h2"),OT=a("a"),Bve=a("span"),F(v9.$$.fragment),$_r=l(),Nve=a("span"),k_r=o("AutoModelForMaskedImageModeling"),KXe=l(),Uo=a("div"),F(F9.$$.fragment),S_r=l(),Xd=a("p"),R_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qH=a("a"),P_r=o("from_pretrained()"),B_r=o(" class method or the "),jH=a("a"),N_r=o("from_config()"),I_r=o(` class
method.`),q_r=l(),T9=a("p"),j_r=o("This class cannot be instantiated directly using "),Ive=a("code"),D_r=o("__init__()"),G_r=o(" (throws an error)."),O_r=l(),Lt=a("div"),F(M9.$$.fragment),V_r=l(),qve=a("p"),X_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),z_r=l(),zd=a("p"),Q_r=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),W_r=o("not"),H_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),U_r=o("from_pretrained()"),J_r=o(" to load the model weights."),Y_r=l(),F(VT.$$.fragment),K_r=l(),_o=a("div"),F(E9.$$.fragment),Z_r=l(),Dve=a("p"),eur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),our=l(),on=a("p"),rur=o("The model class to instantiate is selected based on the "),Gve=a("code"),tur=o("model_type"),aur=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),nur=o("pretrained_model_name_or_path"),sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(":"),dur=l(),Qd=a("ul"),XT=a("li"),Xve=a("strong"),cur=o("deit"),fur=o(" \u2014 "),GH=a("a"),mur=o("DeiTForMaskedImageModeling"),gur=o(" (DeiT model)"),hur=l(),zT=a("li"),zve=a("strong"),pur=o("swin"),_ur=o(" \u2014 "),OH=a("a"),uur=o("SwinForMaskedImageModeling"),bur=o(" (Swin Transformer model)"),vur=l(),QT=a("li"),Qve=a("strong"),Fur=o("vit"),Tur=o(" \u2014 "),VH=a("a"),Mur=o("ViTForMaskedImageModeling"),Eur=o(" (ViT model)"),Cur=l(),WT=a("p"),wur=o("The model is set in evaluation mode by default using "),Wve=a("code"),Aur=o("model.eval()"),Lur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hve=a("code"),yur=o("model.train()"),xur=l(),F(HT.$$.fragment),ZXe=l(),Wd=a("h2"),UT=a("a"),Uve=a("span"),F(C9.$$.fragment),$ur=l(),Jve=a("span"),kur=o("AutoModelForObjectDetection"),eze=l(),Jo=a("div"),F(w9.$$.fragment),Sur=l(),Hd=a("p"),Rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XH=a("a"),Pur=o("from_pretrained()"),Bur=o(" class method or the "),zH=a("a"),Nur=o("from_config()"),Iur=o(` class
method.`),qur=l(),A9=a("p"),jur=o("This class cannot be instantiated directly using "),Yve=a("code"),Dur=o("__init__()"),Gur=o(" (throws an error)."),Our=l(),yt=a("div"),F(L9.$$.fragment),Vur=l(),Kve=a("p"),Xur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zur=l(),Ud=a("p"),Qur=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),Wur=o("not"),Hur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Uur=o("from_pretrained()"),Jur=o(" to load the model weights."),Yur=l(),F(JT.$$.fragment),Kur=l(),uo=a("div"),F(y9.$$.fragment),Zur=l(),e5e=a("p"),e1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),o1r=l(),rn=a("p"),r1r=o("The model class to instantiate is selected based on the "),o5e=a("code"),t1r=o("model_type"),a1r=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),n1r=o("pretrained_model_name_or_path"),s1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(":"),d1r=l(),x9=a("ul"),YT=a("li"),a5e=a("strong"),c1r=o("detr"),f1r=o(" \u2014 "),WH=a("a"),m1r=o("DetrForObjectDetection"),g1r=o(" (DETR model)"),h1r=l(),KT=a("li"),n5e=a("strong"),p1r=o("yolos"),_1r=o(" \u2014 "),HH=a("a"),u1r=o("YolosForObjectDetection"),b1r=o(" (YOLOS model)"),v1r=l(),ZT=a("p"),F1r=o("The model is set in evaluation mode by default using "),s5e=a("code"),T1r=o("model.eval()"),M1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l5e=a("code"),E1r=o("model.train()"),C1r=l(),F(e7.$$.fragment),oze=l(),Jd=a("h2"),o7=a("a"),i5e=a("span"),F($9.$$.fragment),w1r=l(),d5e=a("span"),A1r=o("AutoModelForImageSegmentation"),rze=l(),Yo=a("div"),F(k9.$$.fragment),L1r=l(),Yd=a("p"),y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UH=a("a"),x1r=o("from_pretrained()"),$1r=o(" class method or the "),JH=a("a"),k1r=o("from_config()"),S1r=o(` class
method.`),R1r=l(),S9=a("p"),P1r=o("This class cannot be instantiated directly using "),c5e=a("code"),B1r=o("__init__()"),N1r=o(" (throws an error)."),I1r=l(),xt=a("div"),F(R9.$$.fragment),q1r=l(),f5e=a("p"),j1r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),D1r=l(),Kd=a("p"),G1r=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),O1r=o("not"),V1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),X1r=o("from_pretrained()"),z1r=o(" to load the model weights."),Q1r=l(),F(r7.$$.fragment),W1r=l(),bo=a("div"),F(P9.$$.fragment),H1r=l(),g5e=a("p"),U1r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),J1r=l(),tn=a("p"),Y1r=o("The model class to instantiate is selected based on the "),h5e=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),r4r=o("pretrained_model_name_or_path"),t4r=o(":"),a4r=l(),u5e=a("ul"),t7=a("li"),b5e=a("strong"),n4r=o("detr"),s4r=o(" \u2014 "),KH=a("a"),l4r=o("DetrForSegmentation"),i4r=o(" (DETR model)"),d4r=l(),a7=a("p"),c4r=o("The model is set in evaluation mode by default using "),v5e=a("code"),f4r=o("model.eval()"),m4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F5e=a("code"),g4r=o("model.train()"),h4r=l(),F(n7.$$.fragment),tze=l(),Zd=a("h2"),s7=a("a"),T5e=a("span"),F(B9.$$.fragment),p4r=l(),M5e=a("span"),_4r=o("AutoModelForSemanticSegmentation"),aze=l(),Ko=a("div"),F(N9.$$.fragment),u4r=l(),ec=a("p"),b4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZH=a("a"),v4r=o("from_pretrained()"),F4r=o(" class method or the "),eU=a("a"),T4r=o("from_config()"),M4r=o(` class
method.`),E4r=l(),I9=a("p"),C4r=o("This class cannot be instantiated directly using "),E5e=a("code"),w4r=o("__init__()"),A4r=o(" (throws an error)."),L4r=l(),$t=a("div"),F(q9.$$.fragment),y4r=l(),C5e=a("p"),x4r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$4r=l(),oc=a("p"),k4r=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),S4r=o("not"),R4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),P4r=o("from_pretrained()"),B4r=o(" to load the model weights."),N4r=l(),F(l7.$$.fragment),I4r=l(),vo=a("div"),F(j9.$$.fragment),q4r=l(),A5e=a("p"),j4r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),D4r=l(),an=a("p"),G4r=o("The model class to instantiate is selected based on the "),L5e=a("code"),O4r=o("model_type"),V4r=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),X4r=o("pretrained_model_name_or_path"),z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),Q4r=o("pretrained_model_name_or_path"),W4r=o(":"),H4r=l(),Zo=a("ul"),i7=a("li"),$5e=a("strong"),U4r=o("beit"),J4r=o(" \u2014 "),rU=a("a"),Y4r=o("BeitForSemanticSegmentation"),K4r=o(" (BEiT model)"),Z4r=l(),d7=a("li"),k5e=a("strong"),e2r=o("data2vec-vision"),o2r=o(" \u2014 "),tU=a("a"),r2r=o("Data2VecVisionForSemanticSegmentation"),t2r=o(" (Data2VecVision model)"),a2r=l(),c7=a("li"),S5e=a("strong"),n2r=o("dpt"),s2r=o(" \u2014 "),aU=a("a"),l2r=o("DPTForSemanticSegmentation"),i2r=o(" (DPT model)"),d2r=l(),f7=a("li"),R5e=a("strong"),c2r=o("mobilenet_v2"),f2r=o(" \u2014 "),nU=a("a"),m2r=o("MobileNetV2ForSemanticSegmentation"),g2r=o(" (MobileNetV2 model)"),h2r=l(),m7=a("li"),P5e=a("strong"),p2r=o("mobilevit"),_2r=o(" \u2014 "),sU=a("a"),u2r=o("MobileViTForSemanticSegmentation"),b2r=o(" (MobileViT model)"),v2r=l(),g7=a("li"),B5e=a("strong"),F2r=o("segformer"),T2r=o(" \u2014 "),lU=a("a"),M2r=o("SegformerForSemanticSegmentation"),E2r=o(" (SegFormer model)"),C2r=l(),h7=a("p"),w2r=o("The model is set in evaluation mode by default using "),N5e=a("code"),A2r=o("model.eval()"),L2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I5e=a("code"),y2r=o("model.train()"),x2r=l(),F(p7.$$.fragment),nze=l(),rc=a("h2"),_7=a("a"),q5e=a("span"),F(D9.$$.fragment),$2r=l(),j5e=a("span"),k2r=o("AutoModelForInstanceSegmentation"),sze=l(),er=a("div"),F(G9.$$.fragment),S2r=l(),tc=a("p"),R2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iU=a("a"),P2r=o("from_pretrained()"),B2r=o(" class method or the "),dU=a("a"),N2r=o("from_config()"),I2r=o(` class
method.`),q2r=l(),O9=a("p"),j2r=o("This class cannot be instantiated directly using "),D5e=a("code"),D2r=o("__init__()"),G2r=o(" (throws an error)."),O2r=l(),kt=a("div"),F(V9.$$.fragment),V2r=l(),G5e=a("p"),X2r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),z2r=l(),ac=a("p"),Q2r=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),W2r=o("not"),H2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),U2r=o("from_pretrained()"),J2r=o(" to load the model weights."),Y2r=l(),F(u7.$$.fragment),K2r=l(),Fo=a("div"),F(X9.$$.fragment),Z2r=l(),V5e=a("p"),ebr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),obr=l(),nn=a("p"),rbr=o("The model class to instantiate is selected based on the "),X5e=a("code"),tbr=o("model_type"),abr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),nbr=o("pretrained_model_name_or_path"),sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=a("code"),lbr=o("pretrained_model_name_or_path"),ibr=o(":"),dbr=l(),W5e=a("ul"),b7=a("li"),H5e=a("strong"),cbr=o("maskformer"),fbr=o(" \u2014 "),fU=a("a"),mbr=o("MaskFormerForInstanceSegmentation"),gbr=o(" (MaskFormer model)"),hbr=l(),v7=a("p"),pbr=o("The model is set in evaluation mode by default using "),U5e=a("code"),_br=o("model.eval()"),ubr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J5e=a("code"),bbr=o("model.train()"),vbr=l(),F(F7.$$.fragment),lze=l(),nc=a("h2"),T7=a("a"),Y5e=a("span"),F(z9.$$.fragment),Fbr=l(),K5e=a("span"),Tbr=o("TFAutoModel"),ize=l(),or=a("div"),F(Q9.$$.fragment),Mbr=l(),sc=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mU=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),gU=a("a"),Abr=o("from_config()"),Lbr=o(` class
method.`),ybr=l(),W9=a("p"),xbr=o("This class cannot be instantiated directly using "),Z5e=a("code"),$br=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),St=a("div"),F(H9.$$.fragment),Rbr=l(),eFe=a("p"),Pbr=o("Instantiates one of the base model classes of the library from a configuration."),Bbr=l(),lc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),oFe=a("strong"),Ibr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),F(M7.$$.fragment),Obr=l(),xr=a("div"),F(U9.$$.fragment),Vbr=l(),rFe=a("p"),Xbr=o("Instantiate one of the base model classes of the library from a pretrained model."),zbr=l(),sn=a("p"),Qbr=o("The model class to instantiate is selected based on the "),tFe=a("code"),Wbr=o("model_type"),Hbr=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),Ubr=o("pretrained_model_name_or_path"),Jbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(":"),Zbr=l(),j=a("ul"),E7=a("li"),sFe=a("strong"),evr=o("albert"),ovr=o(" \u2014 "),pU=a("a"),rvr=o("TFAlbertModel"),tvr=o(" (ALBERT model)"),avr=l(),C7=a("li"),lFe=a("strong"),nvr=o("bart"),svr=o(" \u2014 "),_U=a("a"),lvr=o("TFBartModel"),ivr=o(" (BART model)"),dvr=l(),w7=a("li"),iFe=a("strong"),cvr=o("bert"),fvr=o(" \u2014 "),uU=a("a"),mvr=o("TFBertModel"),gvr=o(" (BERT model)"),hvr=l(),A7=a("li"),dFe=a("strong"),pvr=o("blenderbot"),_vr=o(" \u2014 "),bU=a("a"),uvr=o("TFBlenderbotModel"),bvr=o(" (Blenderbot model)"),vvr=l(),L7=a("li"),cFe=a("strong"),Fvr=o("blenderbot-small"),Tvr=o(" \u2014 "),vU=a("a"),Mvr=o("TFBlenderbotSmallModel"),Evr=o(" (BlenderbotSmall model)"),Cvr=l(),y7=a("li"),fFe=a("strong"),wvr=o("camembert"),Avr=o(" \u2014 "),FU=a("a"),Lvr=o("TFCamembertModel"),yvr=o(" (CamemBERT model)"),xvr=l(),x7=a("li"),mFe=a("strong"),$vr=o("clip"),kvr=o(" \u2014 "),TU=a("a"),Svr=o("TFCLIPModel"),Rvr=o(" (CLIP model)"),Pvr=l(),$7=a("li"),gFe=a("strong"),Bvr=o("convbert"),Nvr=o(" \u2014 "),MU=a("a"),Ivr=o("TFConvBertModel"),qvr=o(" (ConvBERT model)"),jvr=l(),k7=a("li"),hFe=a("strong"),Dvr=o("convnext"),Gvr=o(" \u2014 "),EU=a("a"),Ovr=o("TFConvNextModel"),Vvr=o(" (ConvNeXT model)"),Xvr=l(),S7=a("li"),pFe=a("strong"),zvr=o("ctrl"),Qvr=o(" \u2014 "),CU=a("a"),Wvr=o("TFCTRLModel"),Hvr=o(" (CTRL model)"),Uvr=l(),R7=a("li"),_Fe=a("strong"),Jvr=o("data2vec-vision"),Yvr=o(" \u2014 "),wU=a("a"),Kvr=o("TFData2VecVisionModel"),Zvr=o(" (Data2VecVision model)"),e5r=l(),P7=a("li"),uFe=a("strong"),o5r=o("deberta"),r5r=o(" \u2014 "),AU=a("a"),t5r=o("TFDebertaModel"),a5r=o(" (DeBERTa model)"),n5r=l(),B7=a("li"),bFe=a("strong"),s5r=o("deberta-v2"),l5r=o(" \u2014 "),LU=a("a"),i5r=o("TFDebertaV2Model"),d5r=o(" (DeBERTa-v2 model)"),c5r=l(),N7=a("li"),vFe=a("strong"),f5r=o("distilbert"),m5r=o(" \u2014 "),yU=a("a"),g5r=o("TFDistilBertModel"),h5r=o(" (DistilBERT model)"),p5r=l(),I7=a("li"),FFe=a("strong"),_5r=o("dpr"),u5r=o(" \u2014 "),xU=a("a"),b5r=o("TFDPRQuestionEncoder"),v5r=o(" (DPR model)"),F5r=l(),q7=a("li"),TFe=a("strong"),T5r=o("electra"),M5r=o(" \u2014 "),$U=a("a"),E5r=o("TFElectraModel"),C5r=o(" (ELECTRA model)"),w5r=l(),j7=a("li"),MFe=a("strong"),A5r=o("flaubert"),L5r=o(" \u2014 "),kU=a("a"),y5r=o("TFFlaubertModel"),x5r=o(" (FlauBERT model)"),$5r=l(),Js=a("li"),EFe=a("strong"),k5r=o("funnel"),S5r=o(" \u2014 "),SU=a("a"),R5r=o("TFFunnelModel"),P5r=o(" or "),RU=a("a"),B5r=o("TFFunnelBaseModel"),N5r=o(" (Funnel Transformer model)"),I5r=l(),D7=a("li"),CFe=a("strong"),q5r=o("gpt2"),j5r=o(" \u2014 "),PU=a("a"),D5r=o("TFGPT2Model"),G5r=o(" (OpenAI GPT-2 model)"),O5r=l(),G7=a("li"),wFe=a("strong"),V5r=o("gptj"),X5r=o(" \u2014 "),BU=a("a"),z5r=o("TFGPTJModel"),Q5r=o(" (GPT-J model)"),W5r=l(),O7=a("li"),AFe=a("strong"),H5r=o("hubert"),U5r=o(" \u2014 "),NU=a("a"),J5r=o("TFHubertModel"),Y5r=o(" (Hubert model)"),K5r=l(),V7=a("li"),LFe=a("strong"),Z5r=o("layoutlm"),eFr=o(" \u2014 "),IU=a("a"),oFr=o("TFLayoutLMModel"),rFr=o(" (LayoutLM model)"),tFr=l(),X7=a("li"),yFe=a("strong"),aFr=o("led"),nFr=o(" \u2014 "),qU=a("a"),sFr=o("TFLEDModel"),lFr=o(" (LED model)"),iFr=l(),z7=a("li"),xFe=a("strong"),dFr=o("longformer"),cFr=o(" \u2014 "),jU=a("a"),fFr=o("TFLongformerModel"),mFr=o(" (Longformer model)"),gFr=l(),Q7=a("li"),$Fe=a("strong"),hFr=o("lxmert"),pFr=o(" \u2014 "),DU=a("a"),_Fr=o("TFLxmertModel"),uFr=o(" (LXMERT model)"),bFr=l(),W7=a("li"),kFe=a("strong"),vFr=o("marian"),FFr=o(" \u2014 "),GU=a("a"),TFr=o("TFMarianModel"),MFr=o(" (Marian model)"),EFr=l(),H7=a("li"),SFe=a("strong"),CFr=o("mbart"),wFr=o(" \u2014 "),OU=a("a"),AFr=o("TFMBartModel"),LFr=o(" (mBART model)"),yFr=l(),U7=a("li"),RFe=a("strong"),xFr=o("mobilebert"),$Fr=o(" \u2014 "),VU=a("a"),kFr=o("TFMobileBertModel"),SFr=o(" (MobileBERT model)"),RFr=l(),J7=a("li"),PFe=a("strong"),PFr=o("mpnet"),BFr=o(" \u2014 "),XU=a("a"),NFr=o("TFMPNetModel"),IFr=o(" (MPNet model)"),qFr=l(),Y7=a("li"),BFe=a("strong"),jFr=o("mt5"),DFr=o(" \u2014 "),zU=a("a"),GFr=o("TFMT5Model"),OFr=o(" (MT5 model)"),VFr=l(),K7=a("li"),NFe=a("strong"),XFr=o("openai-gpt"),zFr=o(" \u2014 "),QU=a("a"),QFr=o("TFOpenAIGPTModel"),WFr=o(" (OpenAI GPT model)"),HFr=l(),Z7=a("li"),IFe=a("strong"),UFr=o("opt"),JFr=o(" \u2014 "),WU=a("a"),YFr=o("TFOPTModel"),KFr=o(" (OPT model)"),ZFr=l(),e8=a("li"),qFe=a("strong"),eTr=o("pegasus"),oTr=o(" \u2014 "),HU=a("a"),rTr=o("TFPegasusModel"),tTr=o(" (Pegasus model)"),aTr=l(),o8=a("li"),jFe=a("strong"),nTr=o("regnet"),sTr=o(" \u2014 "),UU=a("a"),lTr=o("TFRegNetModel"),iTr=o(" (RegNet model)"),dTr=l(),r8=a("li"),DFe=a("strong"),cTr=o("rembert"),fTr=o(" \u2014 "),JU=a("a"),mTr=o("TFRemBertModel"),gTr=o(" (RemBERT model)"),hTr=l(),t8=a("li"),GFe=a("strong"),pTr=o("roberta"),_Tr=o(" \u2014 "),YU=a("a"),uTr=o("TFRobertaModel"),bTr=o(" (RoBERTa model)"),vTr=l(),a8=a("li"),OFe=a("strong"),FTr=o("roformer"),TTr=o(" \u2014 "),KU=a("a"),MTr=o("TFRoFormerModel"),ETr=o(" (RoFormer model)"),CTr=l(),n8=a("li"),VFe=a("strong"),wTr=o("speech_to_text"),ATr=o(" \u2014 "),ZU=a("a"),LTr=o("TFSpeech2TextModel"),yTr=o(" (Speech2Text model)"),xTr=l(),s8=a("li"),XFe=a("strong"),$Tr=o("swin"),kTr=o(" \u2014 "),eJ=a("a"),STr=o("TFSwinModel"),RTr=o(" (Swin Transformer model)"),PTr=l(),l8=a("li"),zFe=a("strong"),BTr=o("t5"),NTr=o(" \u2014 "),oJ=a("a"),ITr=o("TFT5Model"),qTr=o(" (T5 model)"),jTr=l(),i8=a("li"),QFe=a("strong"),DTr=o("tapas"),GTr=o(" \u2014 "),rJ=a("a"),OTr=o("TFTapasModel"),VTr=o(" (TAPAS model)"),XTr=l(),d8=a("li"),WFe=a("strong"),zTr=o("transfo-xl"),QTr=o(" \u2014 "),tJ=a("a"),WTr=o("TFTransfoXLModel"),HTr=o(" (Transformer-XL model)"),UTr=l(),c8=a("li"),HFe=a("strong"),JTr=o("vit"),YTr=o(" \u2014 "),aJ=a("a"),KTr=o("TFViTModel"),ZTr=o(" (ViT model)"),e7r=l(),f8=a("li"),UFe=a("strong"),o7r=o("vit_mae"),r7r=o(" \u2014 "),nJ=a("a"),t7r=o("TFViTMAEModel"),a7r=o(" (ViTMAE model)"),n7r=l(),m8=a("li"),JFe=a("strong"),s7r=o("wav2vec2"),l7r=o(" \u2014 "),sJ=a("a"),i7r=o("TFWav2Vec2Model"),d7r=o(" (Wav2Vec2 model)"),c7r=l(),g8=a("li"),YFe=a("strong"),f7r=o("xlm"),m7r=o(" \u2014 "),lJ=a("a"),g7r=o("TFXLMModel"),h7r=o(" (XLM model)"),p7r=l(),h8=a("li"),KFe=a("strong"),_7r=o("xlm-roberta"),u7r=o(" \u2014 "),iJ=a("a"),b7r=o("TFXLMRobertaModel"),v7r=o(" (XLM-RoBERTa model)"),F7r=l(),p8=a("li"),ZFe=a("strong"),T7r=o("xlnet"),M7r=o(" \u2014 "),dJ=a("a"),E7r=o("TFXLNetModel"),C7r=o(" (XLNet model)"),w7r=l(),F(_8.$$.fragment),dze=l(),ic=a("h2"),u8=a("a"),eTe=a("span"),F(J9.$$.fragment),A7r=l(),oTe=a("span"),L7r=o("TFAutoModelForPreTraining"),cze=l(),rr=a("div"),F(Y9.$$.fragment),y7r=l(),dc=a("p"),x7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cJ=a("a"),$7r=o("from_pretrained()"),k7r=o(" class method or the "),fJ=a("a"),S7r=o("from_config()"),R7r=o(` class
method.`),P7r=l(),K9=a("p"),B7r=o("This class cannot be instantiated directly using "),rTe=a("code"),N7r=o("__init__()"),I7r=o(" (throws an error)."),q7r=l(),Rt=a("div"),F(Z9.$$.fragment),j7r=l(),tTe=a("p"),D7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),G7r=l(),cc=a("p"),O7r=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),V7r=o("not"),X7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),z7r=o("from_pretrained()"),Q7r=o(" to load the model weights."),W7r=l(),F(b8.$$.fragment),H7r=l(),$r=a("div"),F(ex.$$.fragment),U7r=l(),nTe=a("p"),J7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y7r=l(),ln=a("p"),K7r=o("The model class to instantiate is selected based on the "),sTe=a("code"),Z7r=o("model_type"),e8r=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(":"),n8r=l(),se=a("ul"),v8=a("li"),dTe=a("strong"),s8r=o("albert"),l8r=o(" \u2014 "),gJ=a("a"),i8r=o("TFAlbertForPreTraining"),d8r=o(" (ALBERT model)"),c8r=l(),F8=a("li"),cTe=a("strong"),f8r=o("bart"),m8r=o(" \u2014 "),hJ=a("a"),g8r=o("TFBartForConditionalGeneration"),h8r=o(" (BART model)"),p8r=l(),T8=a("li"),fTe=a("strong"),_8r=o("bert"),u8r=o(" \u2014 "),pJ=a("a"),b8r=o("TFBertForPreTraining"),v8r=o(" (BERT model)"),F8r=l(),M8=a("li"),mTe=a("strong"),T8r=o("camembert"),M8r=o(" \u2014 "),_J=a("a"),E8r=o("TFCamembertForMaskedLM"),C8r=o(" (CamemBERT model)"),w8r=l(),E8=a("li"),gTe=a("strong"),A8r=o("ctrl"),L8r=o(" \u2014 "),uJ=a("a"),y8r=o("TFCTRLLMHeadModel"),x8r=o(" (CTRL model)"),$8r=l(),C8=a("li"),hTe=a("strong"),k8r=o("distilbert"),S8r=o(" \u2014 "),bJ=a("a"),R8r=o("TFDistilBertForMaskedLM"),P8r=o(" (DistilBERT model)"),B8r=l(),w8=a("li"),pTe=a("strong"),N8r=o("electra"),I8r=o(" \u2014 "),vJ=a("a"),q8r=o("TFElectraForPreTraining"),j8r=o(" (ELECTRA model)"),D8r=l(),A8=a("li"),_Te=a("strong"),G8r=o("flaubert"),O8r=o(" \u2014 "),FJ=a("a"),V8r=o("TFFlaubertWithLMHeadModel"),X8r=o(" (FlauBERT model)"),z8r=l(),L8=a("li"),uTe=a("strong"),Q8r=o("funnel"),W8r=o(" \u2014 "),TJ=a("a"),H8r=o("TFFunnelForPreTraining"),U8r=o(" (Funnel Transformer model)"),J8r=l(),y8=a("li"),bTe=a("strong"),Y8r=o("gpt2"),K8r=o(" \u2014 "),MJ=a("a"),Z8r=o("TFGPT2LMHeadModel"),eMr=o(" (OpenAI GPT-2 model)"),oMr=l(),x8=a("li"),vTe=a("strong"),rMr=o("layoutlm"),tMr=o(" \u2014 "),EJ=a("a"),aMr=o("TFLayoutLMForMaskedLM"),nMr=o(" (LayoutLM model)"),sMr=l(),$8=a("li"),FTe=a("strong"),lMr=o("lxmert"),iMr=o(" \u2014 "),CJ=a("a"),dMr=o("TFLxmertForPreTraining"),cMr=o(" (LXMERT model)"),fMr=l(),k8=a("li"),TTe=a("strong"),mMr=o("mobilebert"),gMr=o(" \u2014 "),wJ=a("a"),hMr=o("TFMobileBertForPreTraining"),pMr=o(" (MobileBERT model)"),_Mr=l(),S8=a("li"),MTe=a("strong"),uMr=o("mpnet"),bMr=o(" \u2014 "),AJ=a("a"),vMr=o("TFMPNetForMaskedLM"),FMr=o(" (MPNet model)"),TMr=l(),R8=a("li"),ETe=a("strong"),MMr=o("openai-gpt"),EMr=o(" \u2014 "),LJ=a("a"),CMr=o("TFOpenAIGPTLMHeadModel"),wMr=o(" (OpenAI GPT model)"),AMr=l(),P8=a("li"),CTe=a("strong"),LMr=o("roberta"),yMr=o(" \u2014 "),yJ=a("a"),xMr=o("TFRobertaForMaskedLM"),$Mr=o(" (RoBERTa model)"),kMr=l(),B8=a("li"),wTe=a("strong"),SMr=o("t5"),RMr=o(" \u2014 "),xJ=a("a"),PMr=o("TFT5ForConditionalGeneration"),BMr=o(" (T5 model)"),NMr=l(),N8=a("li"),ATe=a("strong"),IMr=o("tapas"),qMr=o(" \u2014 "),$J=a("a"),jMr=o("TFTapasForMaskedLM"),DMr=o(" (TAPAS model)"),GMr=l(),I8=a("li"),LTe=a("strong"),OMr=o("transfo-xl"),VMr=o(" \u2014 "),kJ=a("a"),XMr=o("TFTransfoXLLMHeadModel"),zMr=o(" (Transformer-XL model)"),QMr=l(),q8=a("li"),yTe=a("strong"),WMr=o("vit_mae"),HMr=o(" \u2014 "),SJ=a("a"),UMr=o("TFViTMAEForPreTraining"),JMr=o(" (ViTMAE model)"),YMr=l(),j8=a("li"),xTe=a("strong"),KMr=o("xlm"),ZMr=o(" \u2014 "),RJ=a("a"),eEr=o("TFXLMWithLMHeadModel"),oEr=o(" (XLM model)"),rEr=l(),D8=a("li"),$Te=a("strong"),tEr=o("xlm-roberta"),aEr=o(" \u2014 "),PJ=a("a"),nEr=o("TFXLMRobertaForMaskedLM"),sEr=o(" (XLM-RoBERTa model)"),lEr=l(),G8=a("li"),kTe=a("strong"),iEr=o("xlnet"),dEr=o(" \u2014 "),BJ=a("a"),cEr=o("TFXLNetLMHeadModel"),fEr=o(" (XLNet model)"),mEr=l(),F(O8.$$.fragment),fze=l(),fc=a("h2"),V8=a("a"),STe=a("span"),F(ox.$$.fragment),gEr=l(),RTe=a("span"),hEr=o("TFAutoModelForCausalLM"),mze=l(),tr=a("div"),F(rx.$$.fragment),pEr=l(),mc=a("p"),_Er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NJ=a("a"),uEr=o("from_pretrained()"),bEr=o(" class method or the "),IJ=a("a"),vEr=o("from_config()"),FEr=o(` class
method.`),TEr=l(),tx=a("p"),MEr=o("This class cannot be instantiated directly using "),PTe=a("code"),EEr=o("__init__()"),CEr=o(" (throws an error)."),wEr=l(),Pt=a("div"),F(ax.$$.fragment),AEr=l(),BTe=a("p"),LEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yEr=l(),gc=a("p"),xEr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),$Er=o("not"),kEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),SEr=o("from_pretrained()"),REr=o(" to load the model weights."),PEr=l(),F(X8.$$.fragment),BEr=l(),kr=a("div"),F(nx.$$.fragment),NEr=l(),ITe=a("p"),IEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qEr=l(),dn=a("p"),jEr=o("The model class to instantiate is selected based on the "),qTe=a("code"),DEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),OEr=o("pretrained_model_name_or_path"),VEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(":"),QEr=l(),Me=a("ul"),z8=a("li"),GTe=a("strong"),WEr=o("bert"),HEr=o(" \u2014 "),jJ=a("a"),UEr=o("TFBertLMHeadModel"),JEr=o(" (BERT model)"),YEr=l(),Q8=a("li"),OTe=a("strong"),KEr=o("camembert"),ZEr=o(" \u2014 "),DJ=a("a"),eCr=o("TFCamembertForCausalLM"),oCr=o(" (CamemBERT model)"),rCr=l(),W8=a("li"),VTe=a("strong"),tCr=o("ctrl"),aCr=o(" \u2014 "),GJ=a("a"),nCr=o("TFCTRLLMHeadModel"),sCr=o(" (CTRL model)"),lCr=l(),H8=a("li"),XTe=a("strong"),iCr=o("gpt2"),dCr=o(" \u2014 "),OJ=a("a"),cCr=o("TFGPT2LMHeadModel"),fCr=o(" (OpenAI GPT-2 model)"),mCr=l(),U8=a("li"),zTe=a("strong"),gCr=o("gptj"),hCr=o(" \u2014 "),VJ=a("a"),pCr=o("TFGPTJForCausalLM"),_Cr=o(" (GPT-J model)"),uCr=l(),J8=a("li"),QTe=a("strong"),bCr=o("openai-gpt"),vCr=o(" \u2014 "),XJ=a("a"),FCr=o("TFOpenAIGPTLMHeadModel"),TCr=o(" (OpenAI GPT model)"),MCr=l(),Y8=a("li"),WTe=a("strong"),ECr=o("opt"),CCr=o(" \u2014 "),zJ=a("a"),wCr=o("TFOPTForCausalLM"),ACr=o(" (OPT model)"),LCr=l(),K8=a("li"),HTe=a("strong"),yCr=o("rembert"),xCr=o(" \u2014 "),QJ=a("a"),$Cr=o("TFRemBertForCausalLM"),kCr=o(" (RemBERT model)"),SCr=l(),Z8=a("li"),UTe=a("strong"),RCr=o("roberta"),PCr=o(" \u2014 "),WJ=a("a"),BCr=o("TFRobertaForCausalLM"),NCr=o(" (RoBERTa model)"),ICr=l(),eM=a("li"),JTe=a("strong"),qCr=o("roformer"),jCr=o(" \u2014 "),HJ=a("a"),DCr=o("TFRoFormerForCausalLM"),GCr=o(" (RoFormer model)"),OCr=l(),oM=a("li"),YTe=a("strong"),VCr=o("transfo-xl"),XCr=o(" \u2014 "),UJ=a("a"),zCr=o("TFTransfoXLLMHeadModel"),QCr=o(" (Transformer-XL model)"),WCr=l(),rM=a("li"),KTe=a("strong"),HCr=o("xlm"),UCr=o(" \u2014 "),JJ=a("a"),JCr=o("TFXLMWithLMHeadModel"),YCr=o(" (XLM model)"),KCr=l(),tM=a("li"),ZTe=a("strong"),ZCr=o("xlnet"),e3r=o(" \u2014 "),YJ=a("a"),o3r=o("TFXLNetLMHeadModel"),r3r=o(" (XLNet model)"),t3r=l(),F(aM.$$.fragment),gze=l(),hc=a("h2"),nM=a("a"),e7e=a("span"),F(sx.$$.fragment),a3r=l(),o7e=a("span"),n3r=o("TFAutoModelForImageClassification"),hze=l(),ar=a("div"),F(lx.$$.fragment),s3r=l(),pc=a("p"),l3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KJ=a("a"),i3r=o("from_pretrained()"),d3r=o(" class method or the "),ZJ=a("a"),c3r=o("from_config()"),f3r=o(` class
method.`),m3r=l(),ix=a("p"),g3r=o("This class cannot be instantiated directly using "),r7e=a("code"),h3r=o("__init__()"),p3r=o(" (throws an error)."),_3r=l(),Bt=a("div"),F(dx.$$.fragment),u3r=l(),t7e=a("p"),b3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),v3r=l(),_c=a("p"),F3r=o(`Note:
Loading a model from its configuration file does `),a7e=a("strong"),T3r=o("not"),M3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),E3r=o("from_pretrained()"),C3r=o(" to load the model weights."),w3r=l(),F(sM.$$.fragment),A3r=l(),Sr=a("div"),F(cx.$$.fragment),L3r=l(),n7e=a("p"),y3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),x3r=l(),cn=a("p"),$3r=o("The model class to instantiate is selected based on the "),s7e=a("code"),k3r=o("model_type"),S3r=o(` property of the config object (either
passed as an argument or loaded from `),l7e=a("code"),R3r=o("pretrained_model_name_or_path"),P3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=a("code"),B3r=o("pretrained_model_name_or_path"),N3r=o(":"),I3r=l(),tt=a("ul"),lM=a("li"),d7e=a("strong"),q3r=o("convnext"),j3r=o(" \u2014 "),oY=a("a"),D3r=o("TFConvNextForImageClassification"),G3r=o(" (ConvNeXT model)"),O3r=l(),iM=a("li"),c7e=a("strong"),V3r=o("data2vec-vision"),X3r=o(" \u2014 "),rY=a("a"),z3r=o("TFData2VecVisionForImageClassification"),Q3r=o(" (Data2VecVision model)"),W3r=l(),dM=a("li"),f7e=a("strong"),H3r=o("regnet"),U3r=o(" \u2014 "),tY=a("a"),J3r=o("TFRegNetForImageClassification"),Y3r=o(" (RegNet model)"),K3r=l(),cM=a("li"),m7e=a("strong"),Z3r=o("swin"),e0r=o(" \u2014 "),aY=a("a"),o0r=o("TFSwinForImageClassification"),r0r=o(" (Swin Transformer model)"),t0r=l(),fM=a("li"),g7e=a("strong"),a0r=o("vit"),n0r=o(" \u2014 "),nY=a("a"),s0r=o("TFViTForImageClassification"),l0r=o(" (ViT model)"),i0r=l(),F(mM.$$.fragment),pze=l(),uc=a("h2"),gM=a("a"),h7e=a("span"),F(fx.$$.fragment),d0r=l(),p7e=a("span"),c0r=o("TFAutoModelForMaskedLM"),_ze=l(),nr=a("div"),F(mx.$$.fragment),f0r=l(),bc=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sY=a("a"),g0r=o("from_pretrained()"),h0r=o(" class method or the "),lY=a("a"),p0r=o("from_config()"),_0r=o(` class
method.`),u0r=l(),gx=a("p"),b0r=o("This class cannot be instantiated directly using "),_7e=a("code"),v0r=o("__init__()"),F0r=o(" (throws an error)."),T0r=l(),Nt=a("div"),F(hx.$$.fragment),M0r=l(),u7e=a("p"),E0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C0r=l(),vc=a("p"),w0r=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),A0r=o("not"),L0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),y0r=o("from_pretrained()"),x0r=o(" to load the model weights."),$0r=l(),F(hM.$$.fragment),k0r=l(),Rr=a("div"),F(px.$$.fragment),S0r=l(),v7e=a("p"),R0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P0r=l(),fn=a("p"),B0r=o("The model class to instantiate is selected based on the "),F7e=a("code"),N0r=o("model_type"),I0r=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),q0r=o("pretrained_model_name_or_path"),j0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(":"),O0r=l(),ie=a("ul"),pM=a("li"),E7e=a("strong"),V0r=o("albert"),X0r=o(" \u2014 "),dY=a("a"),z0r=o("TFAlbertForMaskedLM"),Q0r=o(" (ALBERT model)"),W0r=l(),_M=a("li"),C7e=a("strong"),H0r=o("bert"),U0r=o(" \u2014 "),cY=a("a"),J0r=o("TFBertForMaskedLM"),Y0r=o(" (BERT model)"),K0r=l(),uM=a("li"),w7e=a("strong"),Z0r=o("camembert"),ewr=o(" \u2014 "),fY=a("a"),owr=o("TFCamembertForMaskedLM"),rwr=o(" (CamemBERT model)"),twr=l(),bM=a("li"),A7e=a("strong"),awr=o("convbert"),nwr=o(" \u2014 "),mY=a("a"),swr=o("TFConvBertForMaskedLM"),lwr=o(" (ConvBERT model)"),iwr=l(),vM=a("li"),L7e=a("strong"),dwr=o("deberta"),cwr=o(" \u2014 "),gY=a("a"),fwr=o("TFDebertaForMaskedLM"),mwr=o(" (DeBERTa model)"),gwr=l(),FM=a("li"),y7e=a("strong"),hwr=o("deberta-v2"),pwr=o(" \u2014 "),hY=a("a"),_wr=o("TFDebertaV2ForMaskedLM"),uwr=o(" (DeBERTa-v2 model)"),bwr=l(),TM=a("li"),x7e=a("strong"),vwr=o("distilbert"),Fwr=o(" \u2014 "),pY=a("a"),Twr=o("TFDistilBertForMaskedLM"),Mwr=o(" (DistilBERT model)"),Ewr=l(),MM=a("li"),$7e=a("strong"),Cwr=o("electra"),wwr=o(" \u2014 "),_Y=a("a"),Awr=o("TFElectraForMaskedLM"),Lwr=o(" (ELECTRA model)"),ywr=l(),EM=a("li"),k7e=a("strong"),xwr=o("flaubert"),$wr=o(" \u2014 "),uY=a("a"),kwr=o("TFFlaubertWithLMHeadModel"),Swr=o(" (FlauBERT model)"),Rwr=l(),CM=a("li"),S7e=a("strong"),Pwr=o("funnel"),Bwr=o(" \u2014 "),bY=a("a"),Nwr=o("TFFunnelForMaskedLM"),Iwr=o(" (Funnel Transformer model)"),qwr=l(),wM=a("li"),R7e=a("strong"),jwr=o("layoutlm"),Dwr=o(" \u2014 "),vY=a("a"),Gwr=o("TFLayoutLMForMaskedLM"),Owr=o(" (LayoutLM model)"),Vwr=l(),AM=a("li"),P7e=a("strong"),Xwr=o("longformer"),zwr=o(" \u2014 "),FY=a("a"),Qwr=o("TFLongformerForMaskedLM"),Wwr=o(" (Longformer model)"),Hwr=l(),LM=a("li"),B7e=a("strong"),Uwr=o("mobilebert"),Jwr=o(" \u2014 "),TY=a("a"),Ywr=o("TFMobileBertForMaskedLM"),Kwr=o(" (MobileBERT model)"),Zwr=l(),yM=a("li"),N7e=a("strong"),eAr=o("mpnet"),oAr=o(" \u2014 "),MY=a("a"),rAr=o("TFMPNetForMaskedLM"),tAr=o(" (MPNet model)"),aAr=l(),xM=a("li"),I7e=a("strong"),nAr=o("rembert"),sAr=o(" \u2014 "),EY=a("a"),lAr=o("TFRemBertForMaskedLM"),iAr=o(" (RemBERT model)"),dAr=l(),$M=a("li"),q7e=a("strong"),cAr=o("roberta"),fAr=o(" \u2014 "),CY=a("a"),mAr=o("TFRobertaForMaskedLM"),gAr=o(" (RoBERTa model)"),hAr=l(),kM=a("li"),j7e=a("strong"),pAr=o("roformer"),_Ar=o(" \u2014 "),wY=a("a"),uAr=o("TFRoFormerForMaskedLM"),bAr=o(" (RoFormer model)"),vAr=l(),SM=a("li"),D7e=a("strong"),FAr=o("tapas"),TAr=o(" \u2014 "),AY=a("a"),MAr=o("TFTapasForMaskedLM"),EAr=o(" (TAPAS model)"),CAr=l(),RM=a("li"),G7e=a("strong"),wAr=o("xlm"),AAr=o(" \u2014 "),LY=a("a"),LAr=o("TFXLMWithLMHeadModel"),yAr=o(" (XLM model)"),xAr=l(),PM=a("li"),O7e=a("strong"),$Ar=o("xlm-roberta"),kAr=o(" \u2014 "),yY=a("a"),SAr=o("TFXLMRobertaForMaskedLM"),RAr=o(" (XLM-RoBERTa model)"),PAr=l(),F(BM.$$.fragment),uze=l(),Fc=a("h2"),NM=a("a"),V7e=a("span"),F(_x.$$.fragment),BAr=l(),X7e=a("span"),NAr=o("TFAutoModelForSeq2SeqLM"),bze=l(),sr=a("div"),F(ux.$$.fragment),IAr=l(),Tc=a("p"),qAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=a("a"),jAr=o("from_pretrained()"),DAr=o(" class method or the "),$Y=a("a"),GAr=o("from_config()"),OAr=o(` class
method.`),VAr=l(),bx=a("p"),XAr=o("This class cannot be instantiated directly using "),z7e=a("code"),zAr=o("__init__()"),QAr=o(" (throws an error)."),WAr=l(),It=a("div"),F(vx.$$.fragment),HAr=l(),Q7e=a("p"),UAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JAr=l(),Mc=a("p"),YAr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),KAr=o("not"),ZAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),e6r=o("from_pretrained()"),o6r=o(" to load the model weights."),r6r=l(),F(IM.$$.fragment),t6r=l(),Pr=a("div"),F(Fx.$$.fragment),a6r=l(),H7e=a("p"),n6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s6r=l(),mn=a("p"),l6r=o("The model class to instantiate is selected based on the "),U7e=a("code"),i6r=o("model_type"),d6r=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),c6r=o("pretrained_model_name_or_path"),f6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),m6r=o("pretrained_model_name_or_path"),g6r=o(":"),h6r=l(),ye=a("ul"),qM=a("li"),K7e=a("strong"),p6r=o("bart"),_6r=o(" \u2014 "),SY=a("a"),u6r=o("TFBartForConditionalGeneration"),b6r=o(" (BART model)"),v6r=l(),jM=a("li"),Z7e=a("strong"),F6r=o("blenderbot"),T6r=o(" \u2014 "),RY=a("a"),M6r=o("TFBlenderbotForConditionalGeneration"),E6r=o(" (Blenderbot model)"),C6r=l(),DM=a("li"),e8e=a("strong"),w6r=o("blenderbot-small"),A6r=o(" \u2014 "),PY=a("a"),L6r=o("TFBlenderbotSmallForConditionalGeneration"),y6r=o(" (BlenderbotSmall model)"),x6r=l(),GM=a("li"),o8e=a("strong"),$6r=o("encoder-decoder"),k6r=o(" \u2014 "),BY=a("a"),S6r=o("TFEncoderDecoderModel"),R6r=o(" (Encoder decoder model)"),P6r=l(),OM=a("li"),r8e=a("strong"),B6r=o("led"),N6r=o(" \u2014 "),NY=a("a"),I6r=o("TFLEDForConditionalGeneration"),q6r=o(" (LED model)"),j6r=l(),VM=a("li"),t8e=a("strong"),D6r=o("marian"),G6r=o(" \u2014 "),IY=a("a"),O6r=o("TFMarianMTModel"),V6r=o(" (Marian model)"),X6r=l(),XM=a("li"),a8e=a("strong"),z6r=o("mbart"),Q6r=o(" \u2014 "),qY=a("a"),W6r=o("TFMBartForConditionalGeneration"),H6r=o(" (mBART model)"),U6r=l(),zM=a("li"),n8e=a("strong"),J6r=o("mt5"),Y6r=o(" \u2014 "),jY=a("a"),K6r=o("TFMT5ForConditionalGeneration"),Z6r=o(" (MT5 model)"),eLr=l(),QM=a("li"),s8e=a("strong"),oLr=o("pegasus"),rLr=o(" \u2014 "),DY=a("a"),tLr=o("TFPegasusForConditionalGeneration"),aLr=o(" (Pegasus model)"),nLr=l(),WM=a("li"),l8e=a("strong"),sLr=o("t5"),lLr=o(" \u2014 "),GY=a("a"),iLr=o("TFT5ForConditionalGeneration"),dLr=o(" (T5 model)"),cLr=l(),F(HM.$$.fragment),vze=l(),Ec=a("h2"),UM=a("a"),i8e=a("span"),F(Tx.$$.fragment),fLr=l(),d8e=a("span"),mLr=o("TFAutoModelForSequenceClassification"),Fze=l(),lr=a("div"),F(Mx.$$.fragment),gLr=l(),Cc=a("p"),hLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OY=a("a"),pLr=o("from_pretrained()"),_Lr=o(" class method or the "),VY=a("a"),uLr=o("from_config()"),bLr=o(` class
method.`),vLr=l(),Ex=a("p"),FLr=o("This class cannot be instantiated directly using "),c8e=a("code"),TLr=o("__init__()"),MLr=o(" (throws an error)."),ELr=l(),qt=a("div"),F(Cx.$$.fragment),CLr=l(),f8e=a("p"),wLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ALr=l(),wc=a("p"),LLr=o(`Note:
Loading a model from its configuration file does `),m8e=a("strong"),yLr=o("not"),xLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),$Lr=o("from_pretrained()"),kLr=o(" to load the model weights."),SLr=l(),F(JM.$$.fragment),RLr=l(),Br=a("div"),F(wx.$$.fragment),PLr=l(),g8e=a("p"),BLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NLr=l(),gn=a("p"),ILr=o("The model class to instantiate is selected based on the "),h8e=a("code"),qLr=o("model_type"),jLr=o(` property of the config object (either
passed as an argument or loaded from `),p8e=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),OLr=o("pretrained_model_name_or_path"),VLr=o(":"),XLr=l(),te=a("ul"),YM=a("li"),u8e=a("strong"),zLr=o("albert"),QLr=o(" \u2014 "),zY=a("a"),WLr=o("TFAlbertForSequenceClassification"),HLr=o(" (ALBERT model)"),ULr=l(),KM=a("li"),b8e=a("strong"),JLr=o("bert"),YLr=o(" \u2014 "),QY=a("a"),KLr=o("TFBertForSequenceClassification"),ZLr=o(" (BERT model)"),eyr=l(),ZM=a("li"),v8e=a("strong"),oyr=o("camembert"),ryr=o(" \u2014 "),WY=a("a"),tyr=o("TFCamembertForSequenceClassification"),ayr=o(" (CamemBERT model)"),nyr=l(),eE=a("li"),F8e=a("strong"),syr=o("convbert"),lyr=o(" \u2014 "),HY=a("a"),iyr=o("TFConvBertForSequenceClassification"),dyr=o(" (ConvBERT model)"),cyr=l(),oE=a("li"),T8e=a("strong"),fyr=o("ctrl"),myr=o(" \u2014 "),UY=a("a"),gyr=o("TFCTRLForSequenceClassification"),hyr=o(" (CTRL model)"),pyr=l(),rE=a("li"),M8e=a("strong"),_yr=o("deberta"),uyr=o(" \u2014 "),JY=a("a"),byr=o("TFDebertaForSequenceClassification"),vyr=o(" (DeBERTa model)"),Fyr=l(),tE=a("li"),E8e=a("strong"),Tyr=o("deberta-v2"),Myr=o(" \u2014 "),YY=a("a"),Eyr=o("TFDebertaV2ForSequenceClassification"),Cyr=o(" (DeBERTa-v2 model)"),wyr=l(),aE=a("li"),C8e=a("strong"),Ayr=o("distilbert"),Lyr=o(" \u2014 "),KY=a("a"),yyr=o("TFDistilBertForSequenceClassification"),xyr=o(" (DistilBERT model)"),$yr=l(),nE=a("li"),w8e=a("strong"),kyr=o("electra"),Syr=o(" \u2014 "),ZY=a("a"),Ryr=o("TFElectraForSequenceClassification"),Pyr=o(" (ELECTRA model)"),Byr=l(),sE=a("li"),A8e=a("strong"),Nyr=o("flaubert"),Iyr=o(" \u2014 "),eK=a("a"),qyr=o("TFFlaubertForSequenceClassification"),jyr=o(" (FlauBERT model)"),Dyr=l(),lE=a("li"),L8e=a("strong"),Gyr=o("funnel"),Oyr=o(" \u2014 "),oK=a("a"),Vyr=o("TFFunnelForSequenceClassification"),Xyr=o(" (Funnel Transformer model)"),zyr=l(),iE=a("li"),y8e=a("strong"),Qyr=o("gpt2"),Wyr=o(" \u2014 "),rK=a("a"),Hyr=o("TFGPT2ForSequenceClassification"),Uyr=o(" (OpenAI GPT-2 model)"),Jyr=l(),dE=a("li"),x8e=a("strong"),Yyr=o("gptj"),Kyr=o(" \u2014 "),tK=a("a"),Zyr=o("TFGPTJForSequenceClassification"),e9r=o(" (GPT-J model)"),o9r=l(),cE=a("li"),$8e=a("strong"),r9r=o("layoutlm"),t9r=o(" \u2014 "),aK=a("a"),a9r=o("TFLayoutLMForSequenceClassification"),n9r=o(" (LayoutLM model)"),s9r=l(),fE=a("li"),k8e=a("strong"),l9r=o("longformer"),i9r=o(" \u2014 "),nK=a("a"),d9r=o("TFLongformerForSequenceClassification"),c9r=o(" (Longformer model)"),f9r=l(),mE=a("li"),S8e=a("strong"),m9r=o("mobilebert"),g9r=o(" \u2014 "),sK=a("a"),h9r=o("TFMobileBertForSequenceClassification"),p9r=o(" (MobileBERT model)"),_9r=l(),gE=a("li"),R8e=a("strong"),u9r=o("mpnet"),b9r=o(" \u2014 "),lK=a("a"),v9r=o("TFMPNetForSequenceClassification"),F9r=o(" (MPNet model)"),T9r=l(),hE=a("li"),P8e=a("strong"),M9r=o("openai-gpt"),E9r=o(" \u2014 "),iK=a("a"),C9r=o("TFOpenAIGPTForSequenceClassification"),w9r=o(" (OpenAI GPT model)"),A9r=l(),pE=a("li"),B8e=a("strong"),L9r=o("rembert"),y9r=o(" \u2014 "),dK=a("a"),x9r=o("TFRemBertForSequenceClassification"),$9r=o(" (RemBERT model)"),k9r=l(),_E=a("li"),N8e=a("strong"),S9r=o("roberta"),R9r=o(" \u2014 "),cK=a("a"),P9r=o("TFRobertaForSequenceClassification"),B9r=o(" (RoBERTa model)"),N9r=l(),uE=a("li"),I8e=a("strong"),I9r=o("roformer"),q9r=o(" \u2014 "),fK=a("a"),j9r=o("TFRoFormerForSequenceClassification"),D9r=o(" (RoFormer model)"),G9r=l(),bE=a("li"),q8e=a("strong"),O9r=o("tapas"),V9r=o(" \u2014 "),mK=a("a"),X9r=o("TFTapasForSequenceClassification"),z9r=o(" (TAPAS model)"),Q9r=l(),vE=a("li"),j8e=a("strong"),W9r=o("transfo-xl"),H9r=o(" \u2014 "),gK=a("a"),U9r=o("TFTransfoXLForSequenceClassification"),J9r=o(" (Transformer-XL model)"),Y9r=l(),FE=a("li"),D8e=a("strong"),K9r=o("xlm"),Z9r=o(" \u2014 "),hK=a("a"),exr=o("TFXLMForSequenceClassification"),oxr=o(" (XLM model)"),rxr=l(),TE=a("li"),G8e=a("strong"),txr=o("xlm-roberta"),axr=o(" \u2014 "),pK=a("a"),nxr=o("TFXLMRobertaForSequenceClassification"),sxr=o(" (XLM-RoBERTa model)"),lxr=l(),ME=a("li"),O8e=a("strong"),ixr=o("xlnet"),dxr=o(" \u2014 "),_K=a("a"),cxr=o("TFXLNetForSequenceClassification"),fxr=o(" (XLNet model)"),mxr=l(),F(EE.$$.fragment),Tze=l(),Ac=a("h2"),CE=a("a"),V8e=a("span"),F(Ax.$$.fragment),gxr=l(),X8e=a("span"),hxr=o("TFAutoModelForMultipleChoice"),Mze=l(),ir=a("div"),F(Lx.$$.fragment),pxr=l(),Lc=a("p"),_xr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uK=a("a"),uxr=o("from_pretrained()"),bxr=o(" class method or the "),bK=a("a"),vxr=o("from_config()"),Fxr=o(` class
method.`),Txr=l(),yx=a("p"),Mxr=o("This class cannot be instantiated directly using "),z8e=a("code"),Exr=o("__init__()"),Cxr=o(" (throws an error)."),wxr=l(),jt=a("div"),F(xx.$$.fragment),Axr=l(),Q8e=a("p"),Lxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yxr=l(),yc=a("p"),xxr=o(`Note:
Loading a model from its configuration file does `),W8e=a("strong"),$xr=o("not"),kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),Sxr=o("from_pretrained()"),Rxr=o(" to load the model weights."),Pxr=l(),F(wE.$$.fragment),Bxr=l(),Nr=a("div"),F($x.$$.fragment),Nxr=l(),H8e=a("p"),Ixr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qxr=l(),hn=a("p"),jxr=o("The model class to instantiate is selected based on the "),U8e=a("code"),Dxr=o("model_type"),Gxr=o(` property of the config object (either
passed as an argument or loaded from `),J8e=a("code"),Oxr=o("pretrained_model_name_or_path"),Vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=a("code"),Xxr=o("pretrained_model_name_or_path"),zxr=o(":"),Qxr=l(),ue=a("ul"),AE=a("li"),K8e=a("strong"),Wxr=o("albert"),Hxr=o(" \u2014 "),FK=a("a"),Uxr=o("TFAlbertForMultipleChoice"),Jxr=o(" (ALBERT model)"),Yxr=l(),LE=a("li"),Z8e=a("strong"),Kxr=o("bert"),Zxr=o(" \u2014 "),TK=a("a"),e$r=o("TFBertForMultipleChoice"),o$r=o(" (BERT model)"),r$r=l(),yE=a("li"),eMe=a("strong"),t$r=o("camembert"),a$r=o(" \u2014 "),MK=a("a"),n$r=o("TFCamembertForMultipleChoice"),s$r=o(" (CamemBERT model)"),l$r=l(),xE=a("li"),oMe=a("strong"),i$r=o("convbert"),d$r=o(" \u2014 "),EK=a("a"),c$r=o("TFConvBertForMultipleChoice"),f$r=o(" (ConvBERT model)"),m$r=l(),$E=a("li"),rMe=a("strong"),g$r=o("distilbert"),h$r=o(" \u2014 "),CK=a("a"),p$r=o("TFDistilBertForMultipleChoice"),_$r=o(" (DistilBERT model)"),u$r=l(),kE=a("li"),tMe=a("strong"),b$r=o("electra"),v$r=o(" \u2014 "),wK=a("a"),F$r=o("TFElectraForMultipleChoice"),T$r=o(" (ELECTRA model)"),M$r=l(),SE=a("li"),aMe=a("strong"),E$r=o("flaubert"),C$r=o(" \u2014 "),AK=a("a"),w$r=o("TFFlaubertForMultipleChoice"),A$r=o(" (FlauBERT model)"),L$r=l(),RE=a("li"),nMe=a("strong"),y$r=o("funnel"),x$r=o(" \u2014 "),LK=a("a"),$$r=o("TFFunnelForMultipleChoice"),k$r=o(" (Funnel Transformer model)"),S$r=l(),PE=a("li"),sMe=a("strong"),R$r=o("longformer"),P$r=o(" \u2014 "),yK=a("a"),B$r=o("TFLongformerForMultipleChoice"),N$r=o(" (Longformer model)"),I$r=l(),BE=a("li"),lMe=a("strong"),q$r=o("mobilebert"),j$r=o(" \u2014 "),xK=a("a"),D$r=o("TFMobileBertForMultipleChoice"),G$r=o(" (MobileBERT model)"),O$r=l(),NE=a("li"),iMe=a("strong"),V$r=o("mpnet"),X$r=o(" \u2014 "),$K=a("a"),z$r=o("TFMPNetForMultipleChoice"),Q$r=o(" (MPNet model)"),W$r=l(),IE=a("li"),dMe=a("strong"),H$r=o("rembert"),U$r=o(" \u2014 "),kK=a("a"),J$r=o("TFRemBertForMultipleChoice"),Y$r=o(" (RemBERT model)"),K$r=l(),qE=a("li"),cMe=a("strong"),Z$r=o("roberta"),ekr=o(" \u2014 "),SK=a("a"),okr=o("TFRobertaForMultipleChoice"),rkr=o(" (RoBERTa model)"),tkr=l(),jE=a("li"),fMe=a("strong"),akr=o("roformer"),nkr=o(" \u2014 "),RK=a("a"),skr=o("TFRoFormerForMultipleChoice"),lkr=o(" (RoFormer model)"),ikr=l(),DE=a("li"),mMe=a("strong"),dkr=o("xlm"),ckr=o(" \u2014 "),PK=a("a"),fkr=o("TFXLMForMultipleChoice"),mkr=o(" (XLM model)"),gkr=l(),GE=a("li"),gMe=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),BK=a("a"),_kr=o("TFXLMRobertaForMultipleChoice"),ukr=o(" (XLM-RoBERTa model)"),bkr=l(),OE=a("li"),hMe=a("strong"),vkr=o("xlnet"),Fkr=o(" \u2014 "),NK=a("a"),Tkr=o("TFXLNetForMultipleChoice"),Mkr=o(" (XLNet model)"),Ekr=l(),F(VE.$$.fragment),Eze=l(),xc=a("h2"),XE=a("a"),pMe=a("span"),F(kx.$$.fragment),Ckr=l(),_Me=a("span"),wkr=o("TFAutoModelForNextSentencePrediction"),Cze=l(),dr=a("div"),F(Sx.$$.fragment),Akr=l(),$c=a("p"),Lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IK=a("a"),ykr=o("from_pretrained()"),xkr=o(" class method or the "),qK=a("a"),$kr=o("from_config()"),kkr=o(` class
method.`),Skr=l(),Rx=a("p"),Rkr=o("This class cannot be instantiated directly using "),uMe=a("code"),Pkr=o("__init__()"),Bkr=o(" (throws an error)."),Nkr=l(),Dt=a("div"),F(Px.$$.fragment),Ikr=l(),bMe=a("p"),qkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jkr=l(),kc=a("p"),Dkr=o(`Note:
Loading a model from its configuration file does `),vMe=a("strong"),Gkr=o("not"),Okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" to load the model weights."),zkr=l(),F(zE.$$.fragment),Qkr=l(),Ir=a("div"),F(Bx.$$.fragment),Wkr=l(),FMe=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ukr=l(),pn=a("p"),Jkr=o("The model class to instantiate is selected based on the "),TMe=a("code"),Ykr=o("model_type"),Kkr=o(` property of the config object (either
passed as an argument or loaded from `),MMe=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(":"),tSr=l(),Nx=a("ul"),QE=a("li"),CMe=a("strong"),aSr=o("bert"),nSr=o(" \u2014 "),DK=a("a"),sSr=o("TFBertForNextSentencePrediction"),lSr=o(" (BERT model)"),iSr=l(),WE=a("li"),wMe=a("strong"),dSr=o("mobilebert"),cSr=o(" \u2014 "),GK=a("a"),fSr=o("TFMobileBertForNextSentencePrediction"),mSr=o(" (MobileBERT model)"),gSr=l(),F(HE.$$.fragment),wze=l(),Sc=a("h2"),UE=a("a"),AMe=a("span"),F(Ix.$$.fragment),hSr=l(),LMe=a("span"),pSr=o("TFAutoModelForTableQuestionAnswering"),Aze=l(),cr=a("div"),F(qx.$$.fragment),_Sr=l(),Rc=a("p"),uSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OK=a("a"),bSr=o("from_pretrained()"),vSr=o(" class method or the "),VK=a("a"),FSr=o("from_config()"),TSr=o(` class
method.`),MSr=l(),jx=a("p"),ESr=o("This class cannot be instantiated directly using "),yMe=a("code"),CSr=o("__init__()"),wSr=o(" (throws an error)."),ASr=l(),Gt=a("div"),F(Dx.$$.fragment),LSr=l(),xMe=a("p"),ySr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xSr=l(),Pc=a("p"),$Sr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),kSr=o("not"),SSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),RSr=o("from_pretrained()"),PSr=o(" to load the model weights."),BSr=l(),F(JE.$$.fragment),NSr=l(),qr=a("div"),F(Gx.$$.fragment),ISr=l(),kMe=a("p"),qSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jSr=l(),_n=a("p"),DSr=o("The model class to instantiate is selected based on the "),SMe=a("code"),GSr=o("model_type"),OSr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),zSr=o("pretrained_model_name_or_path"),QSr=o(":"),WSr=l(),BMe=a("ul"),YE=a("li"),NMe=a("strong"),HSr=o("tapas"),USr=o(" \u2014 "),zK=a("a"),JSr=o("TFTapasForQuestionAnswering"),YSr=o(" (TAPAS model)"),KSr=l(),F(KE.$$.fragment),Lze=l(),Bc=a("h2"),ZE=a("a"),IMe=a("span"),F(Ox.$$.fragment),ZSr=l(),qMe=a("span"),eRr=o("TFAutoModelForTokenClassification"),yze=l(),fr=a("div"),F(Vx.$$.fragment),oRr=l(),Nc=a("p"),rRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=a("a"),tRr=o("from_pretrained()"),aRr=o(" class method or the "),WK=a("a"),nRr=o("from_config()"),sRr=o(` class
method.`),lRr=l(),Xx=a("p"),iRr=o("This class cannot be instantiated directly using "),jMe=a("code"),dRr=o("__init__()"),cRr=o(" (throws an error)."),fRr=l(),Ot=a("div"),F(zx.$$.fragment),mRr=l(),DMe=a("p"),gRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hRr=l(),Ic=a("p"),pRr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),_Rr=o("not"),uRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),bRr=o("from_pretrained()"),vRr=o(" to load the model weights."),FRr=l(),F(eC.$$.fragment),TRr=l(),jr=a("div"),F(Qx.$$.fragment),MRr=l(),OMe=a("p"),ERr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CRr=l(),un=a("p"),wRr=o("The model class to instantiate is selected based on the "),VMe=a("code"),ARr=o("model_type"),LRr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),yRr=o("pretrained_model_name_or_path"),xRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),$Rr=o("pretrained_model_name_or_path"),kRr=o(":"),SRr=l(),de=a("ul"),oC=a("li"),QMe=a("strong"),RRr=o("albert"),PRr=o(" \u2014 "),UK=a("a"),BRr=o("TFAlbertForTokenClassification"),NRr=o(" (ALBERT model)"),IRr=l(),rC=a("li"),WMe=a("strong"),qRr=o("bert"),jRr=o(" \u2014 "),JK=a("a"),DRr=o("TFBertForTokenClassification"),GRr=o(" (BERT model)"),ORr=l(),tC=a("li"),HMe=a("strong"),VRr=o("camembert"),XRr=o(" \u2014 "),YK=a("a"),zRr=o("TFCamembertForTokenClassification"),QRr=o(" (CamemBERT model)"),WRr=l(),aC=a("li"),UMe=a("strong"),HRr=o("convbert"),URr=o(" \u2014 "),KK=a("a"),JRr=o("TFConvBertForTokenClassification"),YRr=o(" (ConvBERT model)"),KRr=l(),nC=a("li"),JMe=a("strong"),ZRr=o("deberta"),ePr=o(" \u2014 "),ZK=a("a"),oPr=o("TFDebertaForTokenClassification"),rPr=o(" (DeBERTa model)"),tPr=l(),sC=a("li"),YMe=a("strong"),aPr=o("deberta-v2"),nPr=o(" \u2014 "),eZ=a("a"),sPr=o("TFDebertaV2ForTokenClassification"),lPr=o(" (DeBERTa-v2 model)"),iPr=l(),lC=a("li"),KMe=a("strong"),dPr=o("distilbert"),cPr=o(" \u2014 "),oZ=a("a"),fPr=o("TFDistilBertForTokenClassification"),mPr=o(" (DistilBERT model)"),gPr=l(),iC=a("li"),ZMe=a("strong"),hPr=o("electra"),pPr=o(" \u2014 "),rZ=a("a"),_Pr=o("TFElectraForTokenClassification"),uPr=o(" (ELECTRA model)"),bPr=l(),dC=a("li"),eEe=a("strong"),vPr=o("flaubert"),FPr=o(" \u2014 "),tZ=a("a"),TPr=o("TFFlaubertForTokenClassification"),MPr=o(" (FlauBERT model)"),EPr=l(),cC=a("li"),oEe=a("strong"),CPr=o("funnel"),wPr=o(" \u2014 "),aZ=a("a"),APr=o("TFFunnelForTokenClassification"),LPr=o(" (Funnel Transformer model)"),yPr=l(),fC=a("li"),rEe=a("strong"),xPr=o("layoutlm"),$Pr=o(" \u2014 "),nZ=a("a"),kPr=o("TFLayoutLMForTokenClassification"),SPr=o(" (LayoutLM model)"),RPr=l(),mC=a("li"),tEe=a("strong"),PPr=o("longformer"),BPr=o(" \u2014 "),sZ=a("a"),NPr=o("TFLongformerForTokenClassification"),IPr=o(" (Longformer model)"),qPr=l(),gC=a("li"),aEe=a("strong"),jPr=o("mobilebert"),DPr=o(" \u2014 "),lZ=a("a"),GPr=o("TFMobileBertForTokenClassification"),OPr=o(" (MobileBERT model)"),VPr=l(),hC=a("li"),nEe=a("strong"),XPr=o("mpnet"),zPr=o(" \u2014 "),iZ=a("a"),QPr=o("TFMPNetForTokenClassification"),WPr=o(" (MPNet model)"),HPr=l(),pC=a("li"),sEe=a("strong"),UPr=o("rembert"),JPr=o(" \u2014 "),dZ=a("a"),YPr=o("TFRemBertForTokenClassification"),KPr=o(" (RemBERT model)"),ZPr=l(),_C=a("li"),lEe=a("strong"),eBr=o("roberta"),oBr=o(" \u2014 "),cZ=a("a"),rBr=o("TFRobertaForTokenClassification"),tBr=o(" (RoBERTa model)"),aBr=l(),uC=a("li"),iEe=a("strong"),nBr=o("roformer"),sBr=o(" \u2014 "),fZ=a("a"),lBr=o("TFRoFormerForTokenClassification"),iBr=o(" (RoFormer model)"),dBr=l(),bC=a("li"),dEe=a("strong"),cBr=o("xlm"),fBr=o(" \u2014 "),mZ=a("a"),mBr=o("TFXLMForTokenClassification"),gBr=o(" (XLM model)"),hBr=l(),vC=a("li"),cEe=a("strong"),pBr=o("xlm-roberta"),_Br=o(" \u2014 "),gZ=a("a"),uBr=o("TFXLMRobertaForTokenClassification"),bBr=o(" (XLM-RoBERTa model)"),vBr=l(),FC=a("li"),fEe=a("strong"),FBr=o("xlnet"),TBr=o(" \u2014 "),hZ=a("a"),MBr=o("TFXLNetForTokenClassification"),EBr=o(" (XLNet model)"),CBr=l(),F(TC.$$.fragment),xze=l(),qc=a("h2"),MC=a("a"),mEe=a("span"),F(Wx.$$.fragment),wBr=l(),gEe=a("span"),ABr=o("TFAutoModelForQuestionAnswering"),$ze=l(),mr=a("div"),F(Hx.$$.fragment),LBr=l(),jc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pZ=a("a"),xBr=o("from_pretrained()"),$Br=o(" class method or the "),_Z=a("a"),kBr=o("from_config()"),SBr=o(` class
method.`),RBr=l(),Ux=a("p"),PBr=o("This class cannot be instantiated directly using "),hEe=a("code"),BBr=o("__init__()"),NBr=o(" (throws an error)."),IBr=l(),Vt=a("div"),F(Jx.$$.fragment),qBr=l(),pEe=a("p"),jBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DBr=l(),Dc=a("p"),GBr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),OBr=o("not"),VBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),XBr=o("from_pretrained()"),zBr=o(" to load the model weights."),QBr=l(),F(EC.$$.fragment),WBr=l(),Dr=a("div"),F(Yx.$$.fragment),HBr=l(),uEe=a("p"),UBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JBr=l(),bn=a("p"),YBr=o("The model class to instantiate is selected based on the "),bEe=a("code"),KBr=o("model_type"),ZBr=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),eNr=o("pretrained_model_name_or_path"),oNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(":"),aNr=l(),ce=a("ul"),CC=a("li"),TEe=a("strong"),nNr=o("albert"),sNr=o(" \u2014 "),bZ=a("a"),lNr=o("TFAlbertForQuestionAnswering"),iNr=o(" (ALBERT model)"),dNr=l(),wC=a("li"),MEe=a("strong"),cNr=o("bert"),fNr=o(" \u2014 "),vZ=a("a"),mNr=o("TFBertForQuestionAnswering"),gNr=o(" (BERT model)"),hNr=l(),AC=a("li"),EEe=a("strong"),pNr=o("camembert"),_Nr=o(" \u2014 "),FZ=a("a"),uNr=o("TFCamembertForQuestionAnswering"),bNr=o(" (CamemBERT model)"),vNr=l(),LC=a("li"),CEe=a("strong"),FNr=o("convbert"),TNr=o(" \u2014 "),TZ=a("a"),MNr=o("TFConvBertForQuestionAnswering"),ENr=o(" (ConvBERT model)"),CNr=l(),yC=a("li"),wEe=a("strong"),wNr=o("deberta"),ANr=o(" \u2014 "),MZ=a("a"),LNr=o("TFDebertaForQuestionAnswering"),yNr=o(" (DeBERTa model)"),xNr=l(),xC=a("li"),AEe=a("strong"),$Nr=o("deberta-v2"),kNr=o(" \u2014 "),EZ=a("a"),SNr=o("TFDebertaV2ForQuestionAnswering"),RNr=o(" (DeBERTa-v2 model)"),PNr=l(),$C=a("li"),LEe=a("strong"),BNr=o("distilbert"),NNr=o(" \u2014 "),CZ=a("a"),INr=o("TFDistilBertForQuestionAnswering"),qNr=o(" (DistilBERT model)"),jNr=l(),kC=a("li"),yEe=a("strong"),DNr=o("electra"),GNr=o(" \u2014 "),wZ=a("a"),ONr=o("TFElectraForQuestionAnswering"),VNr=o(" (ELECTRA model)"),XNr=l(),SC=a("li"),xEe=a("strong"),zNr=o("flaubert"),QNr=o(" \u2014 "),AZ=a("a"),WNr=o("TFFlaubertForQuestionAnsweringSimple"),HNr=o(" (FlauBERT model)"),UNr=l(),RC=a("li"),$Ee=a("strong"),JNr=o("funnel"),YNr=o(" \u2014 "),LZ=a("a"),KNr=o("TFFunnelForQuestionAnswering"),ZNr=o(" (Funnel Transformer model)"),eIr=l(),PC=a("li"),kEe=a("strong"),oIr=o("gptj"),rIr=o(" \u2014 "),yZ=a("a"),tIr=o("TFGPTJForQuestionAnswering"),aIr=o(" (GPT-J model)"),nIr=l(),BC=a("li"),SEe=a("strong"),sIr=o("longformer"),lIr=o(" \u2014 "),xZ=a("a"),iIr=o("TFLongformerForQuestionAnswering"),dIr=o(" (Longformer model)"),cIr=l(),NC=a("li"),REe=a("strong"),fIr=o("mobilebert"),mIr=o(" \u2014 "),$Z=a("a"),gIr=o("TFMobileBertForQuestionAnswering"),hIr=o(" (MobileBERT model)"),pIr=l(),IC=a("li"),PEe=a("strong"),_Ir=o("mpnet"),uIr=o(" \u2014 "),kZ=a("a"),bIr=o("TFMPNetForQuestionAnswering"),vIr=o(" (MPNet model)"),FIr=l(),qC=a("li"),BEe=a("strong"),TIr=o("rembert"),MIr=o(" \u2014 "),SZ=a("a"),EIr=o("TFRemBertForQuestionAnswering"),CIr=o(" (RemBERT model)"),wIr=l(),jC=a("li"),NEe=a("strong"),AIr=o("roberta"),LIr=o(" \u2014 "),RZ=a("a"),yIr=o("TFRobertaForQuestionAnswering"),xIr=o(" (RoBERTa model)"),$Ir=l(),DC=a("li"),IEe=a("strong"),kIr=o("roformer"),SIr=o(" \u2014 "),PZ=a("a"),RIr=o("TFRoFormerForQuestionAnswering"),PIr=o(" (RoFormer model)"),BIr=l(),GC=a("li"),qEe=a("strong"),NIr=o("xlm"),IIr=o(" \u2014 "),BZ=a("a"),qIr=o("TFXLMForQuestionAnsweringSimple"),jIr=o(" (XLM model)"),DIr=l(),OC=a("li"),jEe=a("strong"),GIr=o("xlm-roberta"),OIr=o(" \u2014 "),NZ=a("a"),VIr=o("TFXLMRobertaForQuestionAnswering"),XIr=o(" (XLM-RoBERTa model)"),zIr=l(),VC=a("li"),DEe=a("strong"),QIr=o("xlnet"),WIr=o(" \u2014 "),IZ=a("a"),HIr=o("TFXLNetForQuestionAnsweringSimple"),UIr=o(" (XLNet model)"),JIr=l(),F(XC.$$.fragment),kze=l(),Gc=a("h2"),zC=a("a"),GEe=a("span"),F(Kx.$$.fragment),YIr=l(),OEe=a("span"),KIr=o("TFAutoModelForVision2Seq"),Sze=l(),gr=a("div"),F(Zx.$$.fragment),ZIr=l(),Oc=a("p"),eqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=a("a"),oqr=o("from_pretrained()"),rqr=o(" class method or the "),jZ=a("a"),tqr=o("from_config()"),aqr=o(` class
method.`),nqr=l(),e$=a("p"),sqr=o("This class cannot be instantiated directly using "),VEe=a("code"),lqr=o("__init__()"),iqr=o(" (throws an error)."),dqr=l(),Xt=a("div"),F(o$.$$.fragment),cqr=l(),XEe=a("p"),fqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mqr=l(),Vc=a("p"),gqr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),hqr=o("not"),pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=a("a"),_qr=o("from_pretrained()"),uqr=o(" to load the model weights."),bqr=l(),F(QC.$$.fragment),vqr=l(),Gr=a("div"),F(r$.$$.fragment),Fqr=l(),QEe=a("p"),Tqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mqr=l(),vn=a("p"),Eqr=o("The model class to instantiate is selected based on the "),WEe=a("code"),Cqr=o("model_type"),wqr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),Aqr=o("pretrained_model_name_or_path"),Lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),yqr=o("pretrained_model_name_or_path"),xqr=o(":"),$qr=l(),JEe=a("ul"),WC=a("li"),YEe=a("strong"),kqr=o("vision-encoder-decoder"),Sqr=o(" \u2014 "),GZ=a("a"),Rqr=o("TFVisionEncoderDecoderModel"),Pqr=o(" (Vision Encoder decoder model)"),Bqr=l(),F(HC.$$.fragment),Rze=l(),Xc=a("h2"),UC=a("a"),KEe=a("span"),F(t$.$$.fragment),Nqr=l(),ZEe=a("span"),Iqr=o("TFAutoModelForSpeechSeq2Seq"),Pze=l(),hr=a("div"),F(a$.$$.fragment),qqr=l(),zc=a("p"),jqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OZ=a("a"),Dqr=o("from_pretrained()"),Gqr=o(" class method or the "),VZ=a("a"),Oqr=o("from_config()"),Vqr=o(` class
method.`),Xqr=l(),n$=a("p"),zqr=o("This class cannot be instantiated directly using "),eCe=a("code"),Qqr=o("__init__()"),Wqr=o(" (throws an error)."),Hqr=l(),zt=a("div"),F(s$.$$.fragment),Uqr=l(),oCe=a("p"),Jqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yqr=l(),Qc=a("p"),Kqr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),Zqr=o("not"),ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),ojr=o("from_pretrained()"),rjr=o(" to load the model weights."),tjr=l(),F(JC.$$.fragment),ajr=l(),Or=a("div"),F(l$.$$.fragment),njr=l(),tCe=a("p"),sjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ljr=l(),Fn=a("p"),ijr=o("The model class to instantiate is selected based on the "),aCe=a("code"),djr=o("model_type"),cjr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),fjr=o("pretrained_model_name_or_path"),mjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),gjr=o("pretrained_model_name_or_path"),hjr=o(":"),pjr=l(),lCe=a("ul"),YC=a("li"),iCe=a("strong"),_jr=o("speech_to_text"),ujr=o(" \u2014 "),zZ=a("a"),bjr=o("TFSpeech2TextForConditionalGeneration"),vjr=o(" (Speech2Text model)"),Fjr=l(),F(KC.$$.fragment),Bze=l(),Wc=a("h2"),ZC=a("a"),dCe=a("span"),F(i$.$$.fragment),Tjr=l(),cCe=a("span"),Mjr=o("FlaxAutoModel"),Nze=l(),pr=a("div"),F(d$.$$.fragment),Ejr=l(),Hc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QZ=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),WZ=a("a"),Ljr=o("from_config()"),yjr=o(` class
method.`),xjr=l(),c$=a("p"),$jr=o("This class cannot be instantiated directly using "),fCe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Qt=a("div"),F(f$.$$.fragment),Pjr=l(),mCe=a("p"),Bjr=o("Instantiates one of the base model classes of the library from a configuration."),Njr=l(),Uc=a("p"),Ijr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(e3.$$.fragment),Vjr=l(),Vr=a("div"),F(m$.$$.fragment),Xjr=l(),hCe=a("p"),zjr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qjr=l(),Tn=a("p"),Wjr=o("The model class to instantiate is selected based on the "),pCe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),oe=a("ul"),o3=a("li"),bCe=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),UZ=a("a"),tDr=o("FlaxAlbertModel"),aDr=o(" (ALBERT model)"),nDr=l(),r3=a("li"),vCe=a("strong"),sDr=o("bart"),lDr=o(" \u2014 "),JZ=a("a"),iDr=o("FlaxBartModel"),dDr=o(" (BART model)"),cDr=l(),t3=a("li"),FCe=a("strong"),fDr=o("beit"),mDr=o(" \u2014 "),YZ=a("a"),gDr=o("FlaxBeitModel"),hDr=o(" (BEiT model)"),pDr=l(),a3=a("li"),TCe=a("strong"),_Dr=o("bert"),uDr=o(" \u2014 "),KZ=a("a"),bDr=o("FlaxBertModel"),vDr=o(" (BERT model)"),FDr=l(),n3=a("li"),MCe=a("strong"),TDr=o("big_bird"),MDr=o(" \u2014 "),ZZ=a("a"),EDr=o("FlaxBigBirdModel"),CDr=o(" (BigBird model)"),wDr=l(),s3=a("li"),ECe=a("strong"),ADr=o("blenderbot"),LDr=o(" \u2014 "),eee=a("a"),yDr=o("FlaxBlenderbotModel"),xDr=o(" (Blenderbot model)"),$Dr=l(),l3=a("li"),CCe=a("strong"),kDr=o("blenderbot-small"),SDr=o(" \u2014 "),oee=a("a"),RDr=o("FlaxBlenderbotSmallModel"),PDr=o(" (BlenderbotSmall model)"),BDr=l(),i3=a("li"),wCe=a("strong"),NDr=o("clip"),IDr=o(" \u2014 "),ree=a("a"),qDr=o("FlaxCLIPModel"),jDr=o(" (CLIP model)"),DDr=l(),d3=a("li"),ACe=a("strong"),GDr=o("distilbert"),ODr=o(" \u2014 "),tee=a("a"),VDr=o("FlaxDistilBertModel"),XDr=o(" (DistilBERT model)"),zDr=l(),c3=a("li"),LCe=a("strong"),QDr=o("electra"),WDr=o(" \u2014 "),aee=a("a"),HDr=o("FlaxElectraModel"),UDr=o(" (ELECTRA model)"),JDr=l(),f3=a("li"),yCe=a("strong"),YDr=o("gpt2"),KDr=o(" \u2014 "),nee=a("a"),ZDr=o("FlaxGPT2Model"),eGr=o(" (OpenAI GPT-2 model)"),oGr=l(),m3=a("li"),xCe=a("strong"),rGr=o("gpt_neo"),tGr=o(" \u2014 "),see=a("a"),aGr=o("FlaxGPTNeoModel"),nGr=o(" (GPT Neo model)"),sGr=l(),g3=a("li"),$Ce=a("strong"),lGr=o("gptj"),iGr=o(" \u2014 "),lee=a("a"),dGr=o("FlaxGPTJModel"),cGr=o(" (GPT-J model)"),fGr=l(),h3=a("li"),kCe=a("strong"),mGr=o("longt5"),gGr=o(" \u2014 "),iee=a("a"),hGr=o("FlaxLongT5Model"),pGr=o(" (LongT5 model)"),_Gr=l(),p3=a("li"),SCe=a("strong"),uGr=o("marian"),bGr=o(" \u2014 "),dee=a("a"),vGr=o("FlaxMarianModel"),FGr=o(" (Marian model)"),TGr=l(),_3=a("li"),RCe=a("strong"),MGr=o("mbart"),EGr=o(" \u2014 "),cee=a("a"),CGr=o("FlaxMBartModel"),wGr=o(" (mBART model)"),AGr=l(),u3=a("li"),PCe=a("strong"),LGr=o("mt5"),yGr=o(" \u2014 "),fee=a("a"),xGr=o("FlaxMT5Model"),$Gr=o(" (MT5 model)"),kGr=l(),b3=a("li"),BCe=a("strong"),SGr=o("opt"),RGr=o(" \u2014 "),mee=a("a"),PGr=o("FlaxOPTModel"),BGr=o(" (OPT model)"),NGr=l(),v3=a("li"),NCe=a("strong"),IGr=o("pegasus"),qGr=o(" \u2014 "),gee=a("a"),jGr=o("FlaxPegasusModel"),DGr=o(" (Pegasus model)"),GGr=l(),F3=a("li"),ICe=a("strong"),OGr=o("roberta"),VGr=o(" \u2014 "),hee=a("a"),XGr=o("FlaxRobertaModel"),zGr=o(" (RoBERTa model)"),QGr=l(),T3=a("li"),qCe=a("strong"),WGr=o("roformer"),HGr=o(" \u2014 "),pee=a("a"),UGr=o("FlaxRoFormerModel"),JGr=o(" (RoFormer model)"),YGr=l(),M3=a("li"),jCe=a("strong"),KGr=o("t5"),ZGr=o(" \u2014 "),_ee=a("a"),eOr=o("FlaxT5Model"),oOr=o(" (T5 model)"),rOr=l(),E3=a("li"),DCe=a("strong"),tOr=o("vision-text-dual-encoder"),aOr=o(" \u2014 "),uee=a("a"),nOr=o("FlaxVisionTextDualEncoderModel"),sOr=o(" (VisionTextDualEncoder model)"),lOr=l(),C3=a("li"),GCe=a("strong"),iOr=o("vit"),dOr=o(" \u2014 "),bee=a("a"),cOr=o("FlaxViTModel"),fOr=o(" (ViT model)"),mOr=l(),w3=a("li"),OCe=a("strong"),gOr=o("wav2vec2"),hOr=o(" \u2014 "),vee=a("a"),pOr=o("FlaxWav2Vec2Model"),_Or=o(" (Wav2Vec2 model)"),uOr=l(),A3=a("li"),VCe=a("strong"),bOr=o("xglm"),vOr=o(" \u2014 "),Fee=a("a"),FOr=o("FlaxXGLMModel"),TOr=o(" (XGLM model)"),MOr=l(),L3=a("li"),XCe=a("strong"),EOr=o("xlm-roberta"),COr=o(" \u2014 "),Tee=a("a"),wOr=o("FlaxXLMRobertaModel"),AOr=o(" (XLM-RoBERTa model)"),LOr=l(),F(y3.$$.fragment),Ize=l(),Jc=a("h2"),x3=a("a"),zCe=a("span"),F(g$.$$.fragment),yOr=l(),QCe=a("span"),xOr=o("FlaxAutoModelForCausalLM"),qze=l(),_r=a("div"),F(h$.$$.fragment),$Or=l(),Yc=a("p"),kOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mee=a("a"),SOr=o("from_pretrained()"),ROr=o(" class method or the "),Eee=a("a"),POr=o("from_config()"),BOr=o(` class
method.`),NOr=l(),p$=a("p"),IOr=o("This class cannot be instantiated directly using "),WCe=a("code"),qOr=o("__init__()"),jOr=o(" (throws an error)."),DOr=l(),Wt=a("div"),F(_$.$$.fragment),GOr=l(),HCe=a("p"),OOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VOr=l(),Kc=a("p"),XOr=o(`Note:
Loading a model from its configuration file does `),UCe=a("strong"),zOr=o("not"),QOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),WOr=o("from_pretrained()"),HOr=o(" to load the model weights."),UOr=l(),F($3.$$.fragment),JOr=l(),Xr=a("div"),F(u$.$$.fragment),YOr=l(),JCe=a("p"),KOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZOr=l(),Mn=a("p"),eVr=o("The model class to instantiate is selected based on the "),YCe=a("code"),oVr=o("model_type"),rVr=o(` property of the config object (either
passed as an argument or loaded from `),KCe=a("code"),tVr=o("pretrained_model_name_or_path"),aVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=a("code"),nVr=o("pretrained_model_name_or_path"),sVr=o(":"),lVr=l(),xe=a("ul"),k3=a("li"),e3e=a("strong"),iVr=o("bart"),dVr=o(" \u2014 "),wee=a("a"),cVr=o("FlaxBartForCausalLM"),fVr=o(" (BART model)"),mVr=l(),S3=a("li"),o3e=a("strong"),gVr=o("bert"),hVr=o(" \u2014 "),Aee=a("a"),pVr=o("FlaxBertForCausalLM"),_Vr=o(" (BERT model)"),uVr=l(),R3=a("li"),r3e=a("strong"),bVr=o("big_bird"),vVr=o(" \u2014 "),Lee=a("a"),FVr=o("FlaxBigBirdForCausalLM"),TVr=o(" (BigBird model)"),MVr=l(),P3=a("li"),t3e=a("strong"),EVr=o("electra"),CVr=o(" \u2014 "),yee=a("a"),wVr=o("FlaxElectraForCausalLM"),AVr=o(" (ELECTRA model)"),LVr=l(),B3=a("li"),a3e=a("strong"),yVr=o("gpt2"),xVr=o(" \u2014 "),xee=a("a"),$Vr=o("FlaxGPT2LMHeadModel"),kVr=o(" (OpenAI GPT-2 model)"),SVr=l(),N3=a("li"),n3e=a("strong"),RVr=o("gpt_neo"),PVr=o(" \u2014 "),$ee=a("a"),BVr=o("FlaxGPTNeoForCausalLM"),NVr=o(" (GPT Neo model)"),IVr=l(),I3=a("li"),s3e=a("strong"),qVr=o("gptj"),jVr=o(" \u2014 "),kee=a("a"),DVr=o("FlaxGPTJForCausalLM"),GVr=o(" (GPT-J model)"),OVr=l(),q3=a("li"),l3e=a("strong"),VVr=o("opt"),XVr=o(" \u2014 "),See=a("a"),zVr=o("FlaxOPTForCausalLM"),QVr=o(" (OPT model)"),WVr=l(),j3=a("li"),i3e=a("strong"),HVr=o("roberta"),UVr=o(" \u2014 "),Ree=a("a"),JVr=o("FlaxRobertaForCausalLM"),YVr=o(" (RoBERTa model)"),KVr=l(),D3=a("li"),d3e=a("strong"),ZVr=o("xglm"),eXr=o(" \u2014 "),Pee=a("a"),oXr=o("FlaxXGLMForCausalLM"),rXr=o(" (XGLM model)"),tXr=l(),F(G3.$$.fragment),jze=l(),Zc=a("h2"),O3=a("a"),c3e=a("span"),F(b$.$$.fragment),aXr=l(),f3e=a("span"),nXr=o("FlaxAutoModelForPreTraining"),Dze=l(),ur=a("div"),F(v$.$$.fragment),sXr=l(),ef=a("p"),lXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bee=a("a"),iXr=o("from_pretrained()"),dXr=o(" class method or the "),Nee=a("a"),cXr=o("from_config()"),fXr=o(` class
method.`),mXr=l(),F$=a("p"),gXr=o("This class cannot be instantiated directly using "),m3e=a("code"),hXr=o("__init__()"),pXr=o(" (throws an error)."),_Xr=l(),Ht=a("div"),F(T$.$$.fragment),uXr=l(),g3e=a("p"),bXr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vXr=l(),of=a("p"),FXr=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),TXr=o("not"),MXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("a"),EXr=o("from_pretrained()"),CXr=o(" to load the model weights."),wXr=l(),F(V3.$$.fragment),AXr=l(),zr=a("div"),F(M$.$$.fragment),LXr=l(),p3e=a("p"),yXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xXr=l(),En=a("p"),$Xr=o("The model class to instantiate is selected based on the "),_3e=a("code"),kXr=o("model_type"),SXr=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),RXr=o("pretrained_model_name_or_path"),PXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),BXr=o("pretrained_model_name_or_path"),NXr=o(":"),IXr=l(),Ee=a("ul"),X3=a("li"),v3e=a("strong"),qXr=o("albert"),jXr=o(" \u2014 "),qee=a("a"),DXr=o("FlaxAlbertForPreTraining"),GXr=o(" (ALBERT model)"),OXr=l(),z3=a("li"),F3e=a("strong"),VXr=o("bart"),XXr=o(" \u2014 "),jee=a("a"),zXr=o("FlaxBartForConditionalGeneration"),QXr=o(" (BART model)"),WXr=l(),Q3=a("li"),T3e=a("strong"),HXr=o("bert"),UXr=o(" \u2014 "),Dee=a("a"),JXr=o("FlaxBertForPreTraining"),YXr=o(" (BERT model)"),KXr=l(),W3=a("li"),M3e=a("strong"),ZXr=o("big_bird"),ezr=o(" \u2014 "),Gee=a("a"),ozr=o("FlaxBigBirdForPreTraining"),rzr=o(" (BigBird model)"),tzr=l(),H3=a("li"),E3e=a("strong"),azr=o("electra"),nzr=o(" \u2014 "),Oee=a("a"),szr=o("FlaxElectraForPreTraining"),lzr=o(" (ELECTRA model)"),izr=l(),U3=a("li"),C3e=a("strong"),dzr=o("longt5"),czr=o(" \u2014 "),Vee=a("a"),fzr=o("FlaxLongT5ForConditionalGeneration"),mzr=o(" (LongT5 model)"),gzr=l(),J3=a("li"),w3e=a("strong"),hzr=o("mbart"),pzr=o(" \u2014 "),Xee=a("a"),_zr=o("FlaxMBartForConditionalGeneration"),uzr=o(" (mBART model)"),bzr=l(),Y3=a("li"),A3e=a("strong"),vzr=o("mt5"),Fzr=o(" \u2014 "),zee=a("a"),Tzr=o("FlaxMT5ForConditionalGeneration"),Mzr=o(" (MT5 model)"),Ezr=l(),K3=a("li"),L3e=a("strong"),Czr=o("roberta"),wzr=o(" \u2014 "),Qee=a("a"),Azr=o("FlaxRobertaForMaskedLM"),Lzr=o(" (RoBERTa model)"),yzr=l(),Z3=a("li"),y3e=a("strong"),xzr=o("roformer"),$zr=o(" \u2014 "),Wee=a("a"),kzr=o("FlaxRoFormerForMaskedLM"),Szr=o(" (RoFormer model)"),Rzr=l(),e0=a("li"),x3e=a("strong"),Pzr=o("t5"),Bzr=o(" \u2014 "),Hee=a("a"),Nzr=o("FlaxT5ForConditionalGeneration"),Izr=o(" (T5 model)"),qzr=l(),o0=a("li"),$3e=a("strong"),jzr=o("wav2vec2"),Dzr=o(" \u2014 "),Uee=a("a"),Gzr=o("FlaxWav2Vec2ForPreTraining"),Ozr=o(" (Wav2Vec2 model)"),Vzr=l(),r0=a("li"),k3e=a("strong"),Xzr=o("xlm-roberta"),zzr=o(" \u2014 "),Jee=a("a"),Qzr=o("FlaxXLMRobertaForMaskedLM"),Wzr=o(" (XLM-RoBERTa model)"),Hzr=l(),F(t0.$$.fragment),Gze=l(),rf=a("h2"),a0=a("a"),S3e=a("span"),F(E$.$$.fragment),Uzr=l(),R3e=a("span"),Jzr=o("FlaxAutoModelForMaskedLM"),Oze=l(),br=a("div"),F(C$.$$.fragment),Yzr=l(),tf=a("p"),Kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yee=a("a"),Zzr=o("from_pretrained()"),eQr=o(" class method or the "),Kee=a("a"),oQr=o("from_config()"),rQr=o(` class
method.`),tQr=l(),w$=a("p"),aQr=o("This class cannot be instantiated directly using "),P3e=a("code"),nQr=o("__init__()"),sQr=o(" (throws an error)."),lQr=l(),Ut=a("div"),F(A$.$$.fragment),iQr=l(),B3e=a("p"),dQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cQr=l(),af=a("p"),fQr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),mQr=o("not"),gQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=a("a"),hQr=o("from_pretrained()"),pQr=o(" to load the model weights."),_Qr=l(),F(n0.$$.fragment),uQr=l(),Qr=a("div"),F(L$.$$.fragment),bQr=l(),I3e=a("p"),vQr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FQr=l(),Cn=a("p"),TQr=o("The model class to instantiate is selected based on the "),q3e=a("code"),MQr=o("model_type"),EQr=o(` property of the config object (either
passed as an argument or loaded from `),j3e=a("code"),CQr=o("pretrained_model_name_or_path"),wQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=a("code"),AQr=o("pretrained_model_name_or_path"),LQr=o(":"),yQr=l(),$e=a("ul"),s0=a("li"),G3e=a("strong"),xQr=o("albert"),$Qr=o(" \u2014 "),eoe=a("a"),kQr=o("FlaxAlbertForMaskedLM"),SQr=o(" (ALBERT model)"),RQr=l(),l0=a("li"),O3e=a("strong"),PQr=o("bart"),BQr=o(" \u2014 "),ooe=a("a"),NQr=o("FlaxBartForConditionalGeneration"),IQr=o(" (BART model)"),qQr=l(),i0=a("li"),V3e=a("strong"),jQr=o("bert"),DQr=o(" \u2014 "),roe=a("a"),GQr=o("FlaxBertForMaskedLM"),OQr=o(" (BERT model)"),VQr=l(),d0=a("li"),X3e=a("strong"),XQr=o("big_bird"),zQr=o(" \u2014 "),toe=a("a"),QQr=o("FlaxBigBirdForMaskedLM"),WQr=o(" (BigBird model)"),HQr=l(),c0=a("li"),z3e=a("strong"),UQr=o("distilbert"),JQr=o(" \u2014 "),aoe=a("a"),YQr=o("FlaxDistilBertForMaskedLM"),KQr=o(" (DistilBERT model)"),ZQr=l(),f0=a("li"),Q3e=a("strong"),eWr=o("electra"),oWr=o(" \u2014 "),noe=a("a"),rWr=o("FlaxElectraForMaskedLM"),tWr=o(" (ELECTRA model)"),aWr=l(),m0=a("li"),W3e=a("strong"),nWr=o("mbart"),sWr=o(" \u2014 "),soe=a("a"),lWr=o("FlaxMBartForConditionalGeneration"),iWr=o(" (mBART model)"),dWr=l(),g0=a("li"),H3e=a("strong"),cWr=o("roberta"),fWr=o(" \u2014 "),loe=a("a"),mWr=o("FlaxRobertaForMaskedLM"),gWr=o(" (RoBERTa model)"),hWr=l(),h0=a("li"),U3e=a("strong"),pWr=o("roformer"),_Wr=o(" \u2014 "),ioe=a("a"),uWr=o("FlaxRoFormerForMaskedLM"),bWr=o(" (RoFormer model)"),vWr=l(),p0=a("li"),J3e=a("strong"),FWr=o("xlm-roberta"),TWr=o(" \u2014 "),doe=a("a"),MWr=o("FlaxXLMRobertaForMaskedLM"),EWr=o(" (XLM-RoBERTa model)"),CWr=l(),F(_0.$$.fragment),Vze=l(),nf=a("h2"),u0=a("a"),Y3e=a("span"),F(y$.$$.fragment),wWr=l(),K3e=a("span"),AWr=o("FlaxAutoModelForSeq2SeqLM"),Xze=l(),vr=a("div"),F(x$.$$.fragment),LWr=l(),sf=a("p"),yWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),coe=a("a"),xWr=o("from_pretrained()"),$Wr=o(" class method or the "),foe=a("a"),kWr=o("from_config()"),SWr=o(` class
method.`),RWr=l(),$$=a("p"),PWr=o("This class cannot be instantiated directly using "),Z3e=a("code"),BWr=o("__init__()"),NWr=o(" (throws an error)."),IWr=l(),Jt=a("div"),F(k$.$$.fragment),qWr=l(),e0e=a("p"),jWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DWr=l(),lf=a("p"),GWr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),OWr=o("not"),VWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=a("a"),XWr=o("from_pretrained()"),zWr=o(" to load the model weights."),QWr=l(),F(b0.$$.fragment),WWr=l(),Wr=a("div"),F(S$.$$.fragment),HWr=l(),r0e=a("p"),UWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JWr=l(),wn=a("p"),YWr=o("The model class to instantiate is selected based on the "),t0e=a("code"),KWr=o("model_type"),ZWr=o(` property of the config object (either
passed as an argument or loaded from `),a0e=a("code"),eHr=o("pretrained_model_name_or_path"),oHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=a("code"),rHr=o("pretrained_model_name_or_path"),tHr=o(":"),aHr=l(),ke=a("ul"),v0=a("li"),s0e=a("strong"),nHr=o("bart"),sHr=o(" \u2014 "),goe=a("a"),lHr=o("FlaxBartForConditionalGeneration"),iHr=o(" (BART model)"),dHr=l(),F0=a("li"),l0e=a("strong"),cHr=o("blenderbot"),fHr=o(" \u2014 "),hoe=a("a"),mHr=o("FlaxBlenderbotForConditionalGeneration"),gHr=o(" (Blenderbot model)"),hHr=l(),T0=a("li"),i0e=a("strong"),pHr=o("blenderbot-small"),_Hr=o(" \u2014 "),poe=a("a"),uHr=o("FlaxBlenderbotSmallForConditionalGeneration"),bHr=o(" (BlenderbotSmall model)"),vHr=l(),M0=a("li"),d0e=a("strong"),FHr=o("encoder-decoder"),THr=o(" \u2014 "),_oe=a("a"),MHr=o("FlaxEncoderDecoderModel"),EHr=o(" (Encoder decoder model)"),CHr=l(),E0=a("li"),c0e=a("strong"),wHr=o("longt5"),AHr=o(" \u2014 "),uoe=a("a"),LHr=o("FlaxLongT5ForConditionalGeneration"),yHr=o(" (LongT5 model)"),xHr=l(),C0=a("li"),f0e=a("strong"),$Hr=o("marian"),kHr=o(" \u2014 "),boe=a("a"),SHr=o("FlaxMarianMTModel"),RHr=o(" (Marian model)"),PHr=l(),w0=a("li"),m0e=a("strong"),BHr=o("mbart"),NHr=o(" \u2014 "),voe=a("a"),IHr=o("FlaxMBartForConditionalGeneration"),qHr=o(" (mBART model)"),jHr=l(),A0=a("li"),g0e=a("strong"),DHr=o("mt5"),GHr=o(" \u2014 "),Foe=a("a"),OHr=o("FlaxMT5ForConditionalGeneration"),VHr=o(" (MT5 model)"),XHr=l(),L0=a("li"),h0e=a("strong"),zHr=o("pegasus"),QHr=o(" \u2014 "),Toe=a("a"),WHr=o("FlaxPegasusForConditionalGeneration"),HHr=o(" (Pegasus model)"),UHr=l(),y0=a("li"),p0e=a("strong"),JHr=o("t5"),YHr=o(" \u2014 "),Moe=a("a"),KHr=o("FlaxT5ForConditionalGeneration"),ZHr=o(" (T5 model)"),eUr=l(),F(x0.$$.fragment),zze=l(),df=a("h2"),$0=a("a"),_0e=a("span"),F(R$.$$.fragment),oUr=l(),u0e=a("span"),rUr=o("FlaxAutoModelForSequenceClassification"),Qze=l(),Fr=a("div"),F(P$.$$.fragment),tUr=l(),cf=a("p"),aUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eoe=a("a"),nUr=o("from_pretrained()"),sUr=o(" class method or the "),Coe=a("a"),lUr=o("from_config()"),iUr=o(` class
method.`),dUr=l(),B$=a("p"),cUr=o("This class cannot be instantiated directly using "),b0e=a("code"),fUr=o("__init__()"),mUr=o(" (throws an error)."),gUr=l(),Yt=a("div"),F(N$.$$.fragment),hUr=l(),v0e=a("p"),pUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Ur=l(),ff=a("p"),uUr=o(`Note:
Loading a model from its configuration file does `),F0e=a("strong"),bUr=o("not"),vUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),FUr=o("from_pretrained()"),TUr=o(" to load the model weights."),MUr=l(),F(k0.$$.fragment),EUr=l(),Hr=a("div"),F(I$.$$.fragment),CUr=l(),T0e=a("p"),wUr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),AUr=l(),An=a("p"),LUr=o("The model class to instantiate is selected based on the "),M0e=a("code"),yUr=o("model_type"),xUr=o(` property of the config object (either
passed as an argument or loaded from `),E0e=a("code"),$Ur=o("pretrained_model_name_or_path"),kUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=a("code"),SUr=o("pretrained_model_name_or_path"),RUr=o(":"),PUr=l(),Se=a("ul"),S0=a("li"),w0e=a("strong"),BUr=o("albert"),NUr=o(" \u2014 "),Aoe=a("a"),IUr=o("FlaxAlbertForSequenceClassification"),qUr=o(" (ALBERT model)"),jUr=l(),R0=a("li"),A0e=a("strong"),DUr=o("bart"),GUr=o(" \u2014 "),Loe=a("a"),OUr=o("FlaxBartForSequenceClassification"),VUr=o(" (BART model)"),XUr=l(),P0=a("li"),L0e=a("strong"),zUr=o("bert"),QUr=o(" \u2014 "),yoe=a("a"),WUr=o("FlaxBertForSequenceClassification"),HUr=o(" (BERT model)"),UUr=l(),B0=a("li"),y0e=a("strong"),JUr=o("big_bird"),YUr=o(" \u2014 "),xoe=a("a"),KUr=o("FlaxBigBirdForSequenceClassification"),ZUr=o(" (BigBird model)"),eJr=l(),N0=a("li"),x0e=a("strong"),oJr=o("distilbert"),rJr=o(" \u2014 "),$oe=a("a"),tJr=o("FlaxDistilBertForSequenceClassification"),aJr=o(" (DistilBERT model)"),nJr=l(),I0=a("li"),$0e=a("strong"),sJr=o("electra"),lJr=o(" \u2014 "),koe=a("a"),iJr=o("FlaxElectraForSequenceClassification"),dJr=o(" (ELECTRA model)"),cJr=l(),q0=a("li"),k0e=a("strong"),fJr=o("mbart"),mJr=o(" \u2014 "),Soe=a("a"),gJr=o("FlaxMBartForSequenceClassification"),hJr=o(" (mBART model)"),pJr=l(),j0=a("li"),S0e=a("strong"),_Jr=o("roberta"),uJr=o(" \u2014 "),Roe=a("a"),bJr=o("FlaxRobertaForSequenceClassification"),vJr=o(" (RoBERTa model)"),FJr=l(),D0=a("li"),R0e=a("strong"),TJr=o("roformer"),MJr=o(" \u2014 "),Poe=a("a"),EJr=o("FlaxRoFormerForSequenceClassification"),CJr=o(" (RoFormer model)"),wJr=l(),G0=a("li"),P0e=a("strong"),AJr=o("xlm-roberta"),LJr=o(" \u2014 "),Boe=a("a"),yJr=o("FlaxXLMRobertaForSequenceClassification"),xJr=o(" (XLM-RoBERTa model)"),$Jr=l(),F(O0.$$.fragment),Wze=l(),mf=a("h2"),V0=a("a"),B0e=a("span"),F(q$.$$.fragment),kJr=l(),N0e=a("span"),SJr=o("FlaxAutoModelForQuestionAnswering"),Hze=l(),Tr=a("div"),F(j$.$$.fragment),RJr=l(),gf=a("p"),PJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Noe=a("a"),BJr=o("from_pretrained()"),NJr=o(" class method or the "),Ioe=a("a"),IJr=o("from_config()"),qJr=o(` class
method.`),jJr=l(),D$=a("p"),DJr=o("This class cannot be instantiated directly using "),I0e=a("code"),GJr=o("__init__()"),OJr=o(" (throws an error)."),VJr=l(),Kt=a("div"),F(G$.$$.fragment),XJr=l(),q0e=a("p"),zJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QJr=l(),hf=a("p"),WJr=o(`Note:
Loading a model from its configuration file does `),j0e=a("strong"),HJr=o("not"),UJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=a("a"),JJr=o("from_pretrained()"),YJr=o(" to load the model weights."),KJr=l(),F(X0.$$.fragment),ZJr=l(),Ur=a("div"),F(O$.$$.fragment),eYr=l(),D0e=a("p"),oYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rYr=l(),Ln=a("p"),tYr=o("The model class to instantiate is selected based on the "),G0e=a("code"),aYr=o("model_type"),nYr=o(` property of the config object (either
passed as an argument or loaded from `),O0e=a("code"),sYr=o("pretrained_model_name_or_path"),lYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=a("code"),iYr=o("pretrained_model_name_or_path"),dYr=o(":"),cYr=l(),Re=a("ul"),z0=a("li"),X0e=a("strong"),fYr=o("albert"),mYr=o(" \u2014 "),joe=a("a"),gYr=o("FlaxAlbertForQuestionAnswering"),hYr=o(" (ALBERT model)"),pYr=l(),Q0=a("li"),z0e=a("strong"),_Yr=o("bart"),uYr=o(" \u2014 "),Doe=a("a"),bYr=o("FlaxBartForQuestionAnswering"),vYr=o(" (BART model)"),FYr=l(),W0=a("li"),Q0e=a("strong"),TYr=o("bert"),MYr=o(" \u2014 "),Goe=a("a"),EYr=o("FlaxBertForQuestionAnswering"),CYr=o(" (BERT model)"),wYr=l(),H0=a("li"),W0e=a("strong"),AYr=o("big_bird"),LYr=o(" \u2014 "),Ooe=a("a"),yYr=o("FlaxBigBirdForQuestionAnswering"),xYr=o(" (BigBird model)"),$Yr=l(),U0=a("li"),H0e=a("strong"),kYr=o("distilbert"),SYr=o(" \u2014 "),Voe=a("a"),RYr=o("FlaxDistilBertForQuestionAnswering"),PYr=o(" (DistilBERT model)"),BYr=l(),J0=a("li"),U0e=a("strong"),NYr=o("electra"),IYr=o(" \u2014 "),Xoe=a("a"),qYr=o("FlaxElectraForQuestionAnswering"),jYr=o(" (ELECTRA model)"),DYr=l(),Y0=a("li"),J0e=a("strong"),GYr=o("mbart"),OYr=o(" \u2014 "),zoe=a("a"),VYr=o("FlaxMBartForQuestionAnswering"),XYr=o(" (mBART model)"),zYr=l(),K0=a("li"),Y0e=a("strong"),QYr=o("roberta"),WYr=o(" \u2014 "),Qoe=a("a"),HYr=o("FlaxRobertaForQuestionAnswering"),UYr=o(" (RoBERTa model)"),JYr=l(),Z0=a("li"),K0e=a("strong"),YYr=o("roformer"),KYr=o(" \u2014 "),Woe=a("a"),ZYr=o("FlaxRoFormerForQuestionAnswering"),eKr=o(" (RoFormer model)"),oKr=l(),ew=a("li"),Z0e=a("strong"),rKr=o("xlm-roberta"),tKr=o(" \u2014 "),Hoe=a("a"),aKr=o("FlaxXLMRobertaForQuestionAnswering"),nKr=o(" (XLM-RoBERTa model)"),sKr=l(),F(ow.$$.fragment),Uze=l(),pf=a("h2"),rw=a("a"),ewe=a("span"),F(V$.$$.fragment),lKr=l(),owe=a("span"),iKr=o("FlaxAutoModelForTokenClassification"),Jze=l(),Mr=a("div"),F(X$.$$.fragment),dKr=l(),_f=a("p"),cKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uoe=a("a"),fKr=o("from_pretrained()"),mKr=o(" class method or the "),Joe=a("a"),gKr=o("from_config()"),hKr=o(` class
method.`),pKr=l(),z$=a("p"),_Kr=o("This class cannot be instantiated directly using "),rwe=a("code"),uKr=o("__init__()"),bKr=o(" (throws an error)."),vKr=l(),Zt=a("div"),F(Q$.$$.fragment),FKr=l(),twe=a("p"),TKr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MKr=l(),uf=a("p"),EKr=o(`Note:
Loading a model from its configuration file does `),awe=a("strong"),CKr=o("not"),wKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=a("a"),AKr=o("from_pretrained()"),LKr=o(" to load the model weights."),yKr=l(),F(tw.$$.fragment),xKr=l(),Jr=a("div"),F(W$.$$.fragment),$Kr=l(),nwe=a("p"),kKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SKr=l(),yn=a("p"),RKr=o("The model class to instantiate is selected based on the "),swe=a("code"),PKr=o("model_type"),BKr=o(` property of the config object (either
passed as an argument or loaded from `),lwe=a("code"),NKr=o("pretrained_model_name_or_path"),IKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iwe=a("code"),qKr=o("pretrained_model_name_or_path"),jKr=o(":"),DKr=l(),Ve=a("ul"),aw=a("li"),dwe=a("strong"),GKr=o("albert"),OKr=o(" \u2014 "),Koe=a("a"),VKr=o("FlaxAlbertForTokenClassification"),XKr=o(" (ALBERT model)"),zKr=l(),nw=a("li"),cwe=a("strong"),QKr=o("bert"),WKr=o(" \u2014 "),Zoe=a("a"),HKr=o("FlaxBertForTokenClassification"),UKr=o(" (BERT model)"),JKr=l(),sw=a("li"),fwe=a("strong"),YKr=o("big_bird"),KKr=o(" \u2014 "),ere=a("a"),ZKr=o("FlaxBigBirdForTokenClassification"),eZr=o(" (BigBird model)"),oZr=l(),lw=a("li"),mwe=a("strong"),rZr=o("distilbert"),tZr=o(" \u2014 "),ore=a("a"),aZr=o("FlaxDistilBertForTokenClassification"),nZr=o(" (DistilBERT model)"),sZr=l(),iw=a("li"),gwe=a("strong"),lZr=o("electra"),iZr=o(" \u2014 "),rre=a("a"),dZr=o("FlaxElectraForTokenClassification"),cZr=o(" (ELECTRA model)"),fZr=l(),dw=a("li"),hwe=a("strong"),mZr=o("roberta"),gZr=o(" \u2014 "),tre=a("a"),hZr=o("FlaxRobertaForTokenClassification"),pZr=o(" (RoBERTa model)"),_Zr=l(),cw=a("li"),pwe=a("strong"),uZr=o("roformer"),bZr=o(" \u2014 "),are=a("a"),vZr=o("FlaxRoFormerForTokenClassification"),FZr=o(" (RoFormer model)"),TZr=l(),fw=a("li"),_we=a("strong"),MZr=o("xlm-roberta"),EZr=o(" \u2014 "),nre=a("a"),CZr=o("FlaxXLMRobertaForTokenClassification"),wZr=o(" (XLM-RoBERTa model)"),AZr=l(),F(mw.$$.fragment),Yze=l(),bf=a("h2"),gw=a("a"),uwe=a("span"),F(H$.$$.fragment),LZr=l(),bwe=a("span"),yZr=o("FlaxAutoModelForMultipleChoice"),Kze=l(),Er=a("div"),F(U$.$$.fragment),xZr=l(),vf=a("p"),$Zr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sre=a("a"),kZr=o("from_pretrained()"),SZr=o(" class method or the "),lre=a("a"),RZr=o("from_config()"),PZr=o(` class
method.`),BZr=l(),J$=a("p"),NZr=o("This class cannot be instantiated directly using "),vwe=a("code"),IZr=o("__init__()"),qZr=o(" (throws an error)."),jZr=l(),ea=a("div"),F(Y$.$$.fragment),DZr=l(),Fwe=a("p"),GZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OZr=l(),Ff=a("p"),VZr=o(`Note:
Loading a model from its configuration file does `),Twe=a("strong"),XZr=o("not"),zZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=a("a"),QZr=o("from_pretrained()"),WZr=o(" to load the model weights."),HZr=l(),F(hw.$$.fragment),UZr=l(),Yr=a("div"),F(K$.$$.fragment),JZr=l(),Mwe=a("p"),YZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KZr=l(),xn=a("p"),ZZr=o("The model class to instantiate is selected based on the "),Ewe=a("code"),eet=o("model_type"),oet=o(` property of the config object (either
passed as an argument or loaded from `),Cwe=a("code"),ret=o("pretrained_model_name_or_path"),tet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=a("code"),aet=o("pretrained_model_name_or_path"),net=o(":"),set=l(),Xe=a("ul"),pw=a("li"),Awe=a("strong"),iet=o("albert"),det=o(" \u2014 "),dre=a("a"),cet=o("FlaxAlbertForMultipleChoice"),fet=o(" (ALBERT model)"),met=l(),_w=a("li"),Lwe=a("strong"),get=o("bert"),het=o(" \u2014 "),cre=a("a"),pet=o("FlaxBertForMultipleChoice"),_et=o(" (BERT model)"),uet=l(),uw=a("li"),ywe=a("strong"),bet=o("big_bird"),vet=o(" \u2014 "),fre=a("a"),Fet=o("FlaxBigBirdForMultipleChoice"),Tet=o(" (BigBird model)"),Met=l(),bw=a("li"),xwe=a("strong"),Eet=o("distilbert"),Cet=o(" \u2014 "),mre=a("a"),wet=o("FlaxDistilBertForMultipleChoice"),Aet=o(" (DistilBERT model)"),Let=l(),vw=a("li"),$we=a("strong"),yet=o("electra"),xet=o(" \u2014 "),gre=a("a"),$et=o("FlaxElectraForMultipleChoice"),ket=o(" (ELECTRA model)"),Set=l(),Fw=a("li"),kwe=a("strong"),Ret=o("roberta"),Pet=o(" \u2014 "),hre=a("a"),Bet=o("FlaxRobertaForMultipleChoice"),Net=o(" (RoBERTa model)"),Iet=l(),Tw=a("li"),Swe=a("strong"),qet=o("roformer"),jet=o(" \u2014 "),pre=a("a"),Det=o("FlaxRoFormerForMultipleChoice"),Get=o(" (RoFormer model)"),Oet=l(),Mw=a("li"),Rwe=a("strong"),Vet=o("xlm-roberta"),Xet=o(" \u2014 "),_re=a("a"),zet=o("FlaxXLMRobertaForMultipleChoice"),Qet=o(" (XLM-RoBERTa model)"),Wet=l(),F(Ew.$$.fragment),Zze=l(),Tf=a("h2"),Cw=a("a"),Pwe=a("span"),F(Z$.$$.fragment),Het=l(),Bwe=a("span"),Uet=o("FlaxAutoModelForNextSentencePrediction"),eQe=l(),Cr=a("div"),F(ek.$$.fragment),Jet=l(),Mf=a("p"),Yet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ure=a("a"),Ket=o("from_pretrained()"),Zet=o(" class method or the "),bre=a("a"),eot=o("from_config()"),oot=o(` class
method.`),rot=l(),ok=a("p"),tot=o("This class cannot be instantiated directly using "),Nwe=a("code"),aot=o("__init__()"),not=o(" (throws an error)."),sot=l(),oa=a("div"),F(rk.$$.fragment),lot=l(),Iwe=a("p"),iot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dot=l(),Ef=a("p"),cot=o(`Note:
Loading a model from its configuration file does `),qwe=a("strong"),fot=o("not"),mot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),got=o("from_pretrained()"),hot=o(" to load the model weights."),pot=l(),F(ww.$$.fragment),_ot=l(),Kr=a("div"),F(tk.$$.fragment),uot=l(),jwe=a("p"),bot=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vot=l(),$n=a("p"),Fot=o("The model class to instantiate is selected based on the "),Dwe=a("code"),Tot=o("model_type"),Mot=o(` property of the config object (either
passed as an argument or loaded from `),Gwe=a("code"),Eot=o("pretrained_model_name_or_path"),Cot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=a("code"),wot=o("pretrained_model_name_or_path"),Aot=o(":"),Lot=l(),Vwe=a("ul"),Aw=a("li"),Xwe=a("strong"),yot=o("bert"),xot=o(" \u2014 "),Fre=a("a"),$ot=o("FlaxBertForNextSentencePrediction"),kot=o(" (BERT model)"),Sot=l(),F(Lw.$$.fragment),oQe=l(),Cf=a("h2"),yw=a("a"),zwe=a("span"),F(ak.$$.fragment),Rot=l(),Qwe=a("span"),Pot=o("FlaxAutoModelForImageClassification"),rQe=l(),wr=a("div"),F(nk.$$.fragment),Bot=l(),wf=a("p"),Not=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tre=a("a"),Iot=o("from_pretrained()"),qot=o(" class method or the "),Mre=a("a"),jot=o("from_config()"),Dot=o(` class
method.`),Got=l(),sk=a("p"),Oot=o("This class cannot be instantiated directly using "),Wwe=a("code"),Vot=o("__init__()"),Xot=o(" (throws an error)."),zot=l(),ra=a("div"),F(lk.$$.fragment),Qot=l(),Hwe=a("p"),Wot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hot=l(),Af=a("p"),Uot=o(`Note:
Loading a model from its configuration file does `),Uwe=a("strong"),Jot=o("not"),Yot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=a("a"),Kot=o("from_pretrained()"),Zot=o(" to load the model weights."),ert=l(),F(xw.$$.fragment),ort=l(),Zr=a("div"),F(ik.$$.fragment),rrt=l(),Jwe=a("p"),trt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),art=l(),kn=a("p"),nrt=o("The model class to instantiate is selected based on the "),Ywe=a("code"),srt=o("model_type"),lrt=o(` property of the config object (either
passed as an argument or loaded from `),Kwe=a("code"),irt=o("pretrained_model_name_or_path"),drt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zwe=a("code"),crt=o("pretrained_model_name_or_path"),frt=o(":"),mrt=l(),dk=a("ul"),$w=a("li"),eAe=a("strong"),grt=o("beit"),hrt=o(" \u2014 "),Cre=a("a"),prt=o("FlaxBeitForImageClassification"),_rt=o(" (BEiT model)"),urt=l(),kw=a("li"),oAe=a("strong"),brt=o("vit"),vrt=o(" \u2014 "),wre=a("a"),Frt=o("FlaxViTForImageClassification"),Trt=o(" (ViT model)"),Mrt=l(),F(Sw.$$.fragment),tQe=l(),Lf=a("h2"),Rw=a("a"),rAe=a("span"),F(ck.$$.fragment),Ert=l(),tAe=a("span"),Crt=o("FlaxAutoModelForVision2Seq"),aQe=l(),Ar=a("div"),F(fk.$$.fragment),wrt=l(),yf=a("p"),Art=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Are=a("a"),Lrt=o("from_pretrained()"),yrt=o(" class method or the "),Lre=a("a"),xrt=o("from_config()"),$rt=o(` class
method.`),krt=l(),mk=a("p"),Srt=o("This class cannot be instantiated directly using "),aAe=a("code"),Rrt=o("__init__()"),Prt=o(" (throws an error)."),Brt=l(),ta=a("div"),F(gk.$$.fragment),Nrt=l(),nAe=a("p"),Irt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qrt=l(),xf=a("p"),jrt=o(`Note:
Loading a model from its configuration file does `),sAe=a("strong"),Drt=o("not"),Grt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),Ort=o("from_pretrained()"),Vrt=o(" to load the model weights."),Xrt=l(),F(Pw.$$.fragment),zrt=l(),et=a("div"),F(hk.$$.fragment),Qrt=l(),lAe=a("p"),Wrt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hrt=l(),Sn=a("p"),Urt=o("The model class to instantiate is selected based on the "),iAe=a("code"),Jrt=o("model_type"),Yrt=o(` property of the config object (either
passed as an argument or loaded from `),dAe=a("code"),Krt=o("pretrained_model_name_or_path"),Zrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=a("code"),ett=o("pretrained_model_name_or_path"),ott=o(":"),rtt=l(),fAe=a("ul"),Bw=a("li"),mAe=a("strong"),ttt=o("vision-encoder-decoder"),att=o(" \u2014 "),xre=a("a"),ntt=o("FlaxVisionEncoderDecoderModel"),stt=o(" (Vision Encoder decoder model)"),ltt=l(),F(Nw.$$.fragment),this.h()},l(f){const u=DQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var pk=s(p);m=n(pk,"A",{id:!0,class:!0,href:!0});var gAe=s(m);_=n(gAe,"SPAN",{});var hAe=s(_);T(d.$$.fragment,hAe),hAe.forEach(t),gAe.forEach(t),h=i(pk),Eo=n(pk,"SPAN",{});var pAe=s(Eo);Ai=r(pAe,"Auto Classes"),pAe.forEach(t),pk.forEach(t),Rf=i(f),st=n(f,"P",{});var _k=s(st);Li=r(_k,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(_k,"CODE",{});var _Ae=s(yi);oL=r(_Ae,"from_pretrained()"),_Ae.forEach(t),Pf=r(_k,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_k.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var uAe=s(Pn);rL=r(uAe,"AutoConfig"),uAe.forEach(t),Bn=r(Rn,", "),Nn=n(Rn,"A",{href:!0});var bAe=s(Nn);tL=r(bAe,"AutoModel"),bAe.forEach(t),$i=r(Rn,`, and
`),In=n(Rn,"A",{href:!0});var vAe=s(In);aL=r(vAe,"AutoTokenizer"),vAe.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var uk=s(Ae);BS=r(uk,"will create a model that is an instance of "),Si=n(uk,"A",{href:!0});var FAe=s(Si);NS=r(FAe,"BertModel"),FAe.forEach(t),IS=r(uk,"."),uk.forEach(t),Co=i(f),Ra=n(f,"P",{});var bk=s(Ra);qS=r(bk,"There is one class of "),Nf=n(bk,"CODE",{});var TAe=s(Nf);jS=r(TAe,"AutoModel"),TAe.forEach(t),pHe=r(bk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bk.forEach(t),eXe=i(f),Ri=n(f,"H2",{class:!0});var vk=s(Ri);If=n(vk,"A",{id:!0,class:!0,href:!0});var MAe=s(If);Cae=n(MAe,"SPAN",{});var EAe=s(Cae);T(nL.$$.fragment,EAe),EAe.forEach(t),MAe.forEach(t),_He=i(vk),wae=n(vk,"SPAN",{});var CAe=s(wae);uHe=r(CAe,"Extending the Auto Classes"),CAe.forEach(t),vk.forEach(t),oXe=i(f),qn=n(f,"P",{});var $f=s(qn);bHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Aae=n($f,"CODE",{});var wAe=s(Aae);vHe=r(wAe,"NewModel"),wAe.forEach(t),FHe=r($f,", make sure you have a "),Lae=n($f,"CODE",{});var AAe=s(Lae);THe=r(AAe,"NewModelConfig"),AAe.forEach(t),MHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),rXe=i(f),T(sL.$$.fragment,f),tXe=i(f),DS=n(f,"P",{});var LAe=s(DS);EHe=r(LAe,"You will then be able to use the auto classes like you would usually do!"),LAe.forEach(t),aXe=i(f),T(qf.$$.fragment,f),nXe=i(f),Pi=n(f,"H2",{class:!0});var Fk=s(Pi);jf=n(Fk,"A",{id:!0,class:!0,href:!0});var yAe=s(jf);yae=n(yAe,"SPAN",{});var xAe=s(yae);T(lL.$$.fragment,xAe),xAe.forEach(t),yAe.forEach(t),CHe=i(Fk),xae=n(Fk,"SPAN",{});var $Ae=s(xae);wHe=r($Ae,"AutoConfig"),$Ae.forEach(t),Fk.forEach(t),sXe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(iL.$$.fragment,at),AHe=i(at),dL=n(at,"P",{});var Tk=s(dL);LHe=r(Tk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),GS=n(Tk,"A",{href:!0});var kAe=s(GS);yHe=r(kAe,"from_pretrained()"),kAe.forEach(t),xHe=r(Tk," class method."),Tk.forEach(t),$He=i(at),cL=n(at,"P",{});var Mk=s(cL);kHe=r(Mk,"This class cannot be instantiated directly using "),$ae=n(Mk,"CODE",{});var SAe=s($ae);SHe=r(SAe,"__init__()"),SAe.forEach(t),RHe=r(Mk," (throws an error)."),Mk.forEach(t),PHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(fL.$$.fragment,nt),BHe=i(nt),kae=n(nt,"P",{});var RAe=s(kae);NHe=r(RAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),RAe.forEach(t),IHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);qHe=r(kf,"The configuration class to instantiate is selected based on the "),Sae=n(kf,"CODE",{});var PAe=s(Sae);jHe=r(PAe,"model_type"),PAe.forEach(t),DHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rae=n(kf,"CODE",{});var BAe=s(Rae);GHe=r(BAe,"pretrained_model_name_or_path"),BAe.forEach(t),OHe=r(kf,":"),kf.forEach(t),VHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var Iw=s(Df);Pae=n(Iw,"STRONG",{});var NAe=s(Pae);XHe=r(NAe,"albert"),NAe.forEach(t),zHe=r(Iw," \u2014 "),OS=n(Iw,"A",{href:!0});var IAe=s(OS);QHe=r(IAe,"AlbertConfig"),IAe.forEach(t),WHe=r(Iw," (ALBERT model)"),Iw.forEach(t),HHe=i(L),Gf=n(L,"LI",{});var qw=s(Gf);Bae=n(qw,"STRONG",{});var qAe=s(Bae);UHe=r(qAe,"bart"),qAe.forEach(t),JHe=r(qw," \u2014 "),VS=n(qw,"A",{href:!0});var jAe=s(VS);YHe=r(jAe,"BartConfig"),jAe.forEach(t),KHe=r(qw," (BART model)"),qw.forEach(t),ZHe=i(L),Of=n(L,"LI",{});var jw=s(Of);Nae=n(jw,"STRONG",{});var DAe=s(Nae);eUe=r(DAe,"beit"),DAe.forEach(t),oUe=r(jw," \u2014 "),XS=n(jw,"A",{href:!0});var GAe=s(XS);rUe=r(GAe,"BeitConfig"),GAe.forEach(t),tUe=r(jw," (BEiT model)"),jw.forEach(t),aUe=i(L),Vf=n(L,"LI",{});var Dw=s(Vf);Iae=n(Dw,"STRONG",{});var OAe=s(Iae);nUe=r(OAe,"bert"),OAe.forEach(t),sUe=r(Dw," \u2014 "),zS=n(Dw,"A",{href:!0});var VAe=s(zS);lUe=r(VAe,"BertConfig"),VAe.forEach(t),iUe=r(Dw," (BERT model)"),Dw.forEach(t),dUe=i(L),Xf=n(L,"LI",{});var Gw=s(Xf);qae=n(Gw,"STRONG",{});var XAe=s(qae);cUe=r(XAe,"bert-generation"),XAe.forEach(t),fUe=r(Gw," \u2014 "),QS=n(Gw,"A",{href:!0});var zAe=s(QS);mUe=r(zAe,"BertGenerationConfig"),zAe.forEach(t),gUe=r(Gw," (Bert Generation model)"),Gw.forEach(t),hUe=i(L),zf=n(L,"LI",{});var Ow=s(zf);jae=n(Ow,"STRONG",{});var QAe=s(jae);pUe=r(QAe,"big_bird"),QAe.forEach(t),_Ue=r(Ow," \u2014 "),WS=n(Ow,"A",{href:!0});var WAe=s(WS);uUe=r(WAe,"BigBirdConfig"),WAe.forEach(t),bUe=r(Ow," (BigBird model)"),Ow.forEach(t),vUe=i(L),Qf=n(L,"LI",{});var Vw=s(Qf);Dae=n(Vw,"STRONG",{});var HAe=s(Dae);FUe=r(HAe,"bigbird_pegasus"),HAe.forEach(t),TUe=r(Vw," \u2014 "),HS=n(Vw,"A",{href:!0});var UAe=s(HS);MUe=r(UAe,"BigBirdPegasusConfig"),UAe.forEach(t),EUe=r(Vw," (BigBird-Pegasus model)"),Vw.forEach(t),CUe=i(L),Wf=n(L,"LI",{});var Xw=s(Wf);Gae=n(Xw,"STRONG",{});var JAe=s(Gae);wUe=r(JAe,"blenderbot"),JAe.forEach(t),AUe=r(Xw," \u2014 "),US=n(Xw,"A",{href:!0});var YAe=s(US);LUe=r(YAe,"BlenderbotConfig"),YAe.forEach(t),yUe=r(Xw," (Blenderbot model)"),Xw.forEach(t),xUe=i(L),Hf=n(L,"LI",{});var zw=s(Hf);Oae=n(zw,"STRONG",{});var KAe=s(Oae);$Ue=r(KAe,"blenderbot-small"),KAe.forEach(t),kUe=r(zw," \u2014 "),JS=n(zw,"A",{href:!0});var ZAe=s(JS);SUe=r(ZAe,"BlenderbotSmallConfig"),ZAe.forEach(t),RUe=r(zw," (BlenderbotSmall model)"),zw.forEach(t),PUe=i(L),Uf=n(L,"LI",{});var Qw=s(Uf);Vae=n(Qw,"STRONG",{});var e6e=s(Vae);BUe=r(e6e,"bloom"),e6e.forEach(t),NUe=r(Qw," \u2014 "),YS=n(Qw,"A",{href:!0});var o6e=s(YS);IUe=r(o6e,"BloomConfig"),o6e.forEach(t),qUe=r(Qw," (BLOOM model)"),Qw.forEach(t),jUe=i(L),Jf=n(L,"LI",{});var Ww=s(Jf);Xae=n(Ww,"STRONG",{});var r6e=s(Xae);DUe=r(r6e,"camembert"),r6e.forEach(t),GUe=r(Ww," \u2014 "),KS=n(Ww,"A",{href:!0});var t6e=s(KS);OUe=r(t6e,"CamembertConfig"),t6e.forEach(t),VUe=r(Ww," (CamemBERT model)"),Ww.forEach(t),XUe=i(L),Yf=n(L,"LI",{});var Hw=s(Yf);zae=n(Hw,"STRONG",{});var a6e=s(zae);zUe=r(a6e,"canine"),a6e.forEach(t),QUe=r(Hw," \u2014 "),ZS=n(Hw,"A",{href:!0});var n6e=s(ZS);WUe=r(n6e,"CanineConfig"),n6e.forEach(t),HUe=r(Hw," (CANINE model)"),Hw.forEach(t),UUe=i(L),Kf=n(L,"LI",{});var Uw=s(Kf);Qae=n(Uw,"STRONG",{});var s6e=s(Qae);JUe=r(s6e,"clip"),s6e.forEach(t),YUe=r(Uw," \u2014 "),eR=n(Uw,"A",{href:!0});var l6e=s(eR);KUe=r(l6e,"CLIPConfig"),l6e.forEach(t),ZUe=r(Uw," (CLIP model)"),Uw.forEach(t),eJe=i(L),Zf=n(L,"LI",{});var Jw=s(Zf);Wae=n(Jw,"STRONG",{});var i6e=s(Wae);oJe=r(i6e,"codegen"),i6e.forEach(t),rJe=r(Jw," \u2014 "),oR=n(Jw,"A",{href:!0});var d6e=s(oR);tJe=r(d6e,"CodeGenConfig"),d6e.forEach(t),aJe=r(Jw," (CodeGen model)"),Jw.forEach(t),nJe=i(L),em=n(L,"LI",{});var Yw=s(em);Hae=n(Yw,"STRONG",{});var c6e=s(Hae);sJe=r(c6e,"convbert"),c6e.forEach(t),lJe=r(Yw," \u2014 "),rR=n(Yw,"A",{href:!0});var f6e=s(rR);iJe=r(f6e,"ConvBertConfig"),f6e.forEach(t),dJe=r(Yw," (ConvBERT model)"),Yw.forEach(t),cJe=i(L),om=n(L,"LI",{});var Kw=s(om);Uae=n(Kw,"STRONG",{});var m6e=s(Uae);fJe=r(m6e,"convnext"),m6e.forEach(t),mJe=r(Kw," \u2014 "),tR=n(Kw,"A",{href:!0});var g6e=s(tR);gJe=r(g6e,"ConvNextConfig"),g6e.forEach(t),hJe=r(Kw," (ConvNeXT model)"),Kw.forEach(t),pJe=i(L),rm=n(L,"LI",{});var Zw=s(rm);Jae=n(Zw,"STRONG",{});var h6e=s(Jae);_Je=r(h6e,"ctrl"),h6e.forEach(t),uJe=r(Zw," \u2014 "),aR=n(Zw,"A",{href:!0});var p6e=s(aR);bJe=r(p6e,"CTRLConfig"),p6e.forEach(t),vJe=r(Zw," (CTRL model)"),Zw.forEach(t),FJe=i(L),tm=n(L,"LI",{});var eA=s(tm);Yae=n(eA,"STRONG",{});var _6e=s(Yae);TJe=r(_6e,"cvt"),_6e.forEach(t),MJe=r(eA," \u2014 "),nR=n(eA,"A",{href:!0});var u6e=s(nR);EJe=r(u6e,"CvtConfig"),u6e.forEach(t),CJe=r(eA," (CvT model)"),eA.forEach(t),wJe=i(L),am=n(L,"LI",{});var oA=s(am);Kae=n(oA,"STRONG",{});var b6e=s(Kae);AJe=r(b6e,"data2vec-audio"),b6e.forEach(t),LJe=r(oA," \u2014 "),sR=n(oA,"A",{href:!0});var v6e=s(sR);yJe=r(v6e,"Data2VecAudioConfig"),v6e.forEach(t),xJe=r(oA," (Data2VecAudio model)"),oA.forEach(t),$Je=i(L),nm=n(L,"LI",{});var rA=s(nm);Zae=n(rA,"STRONG",{});var F6e=s(Zae);kJe=r(F6e,"data2vec-text"),F6e.forEach(t),SJe=r(rA," \u2014 "),lR=n(rA,"A",{href:!0});var T6e=s(lR);RJe=r(T6e,"Data2VecTextConfig"),T6e.forEach(t),PJe=r(rA," (Data2VecText model)"),rA.forEach(t),BJe=i(L),sm=n(L,"LI",{});var tA=s(sm);ene=n(tA,"STRONG",{});var M6e=s(ene);NJe=r(M6e,"data2vec-vision"),M6e.forEach(t),IJe=r(tA," \u2014 "),iR=n(tA,"A",{href:!0});var E6e=s(iR);qJe=r(E6e,"Data2VecVisionConfig"),E6e.forEach(t),jJe=r(tA," (Data2VecVision model)"),tA.forEach(t),DJe=i(L),lm=n(L,"LI",{});var aA=s(lm);one=n(aA,"STRONG",{});var C6e=s(one);GJe=r(C6e,"deberta"),C6e.forEach(t),OJe=r(aA," \u2014 "),dR=n(aA,"A",{href:!0});var w6e=s(dR);VJe=r(w6e,"DebertaConfig"),w6e.forEach(t),XJe=r(aA," (DeBERTa model)"),aA.forEach(t),zJe=i(L),im=n(L,"LI",{});var nA=s(im);rne=n(nA,"STRONG",{});var A6e=s(rne);QJe=r(A6e,"deberta-v2"),A6e.forEach(t),WJe=r(nA," \u2014 "),cR=n(nA,"A",{href:!0});var L6e=s(cR);HJe=r(L6e,"DebertaV2Config"),L6e.forEach(t),UJe=r(nA," (DeBERTa-v2 model)"),nA.forEach(t),JJe=i(L),dm=n(L,"LI",{});var sA=s(dm);tne=n(sA,"STRONG",{});var dtt=s(tne);YJe=r(dtt,"decision_transformer"),dtt.forEach(t),KJe=r(sA," \u2014 "),fR=n(sA,"A",{href:!0});var ctt=s(fR);ZJe=r(ctt,"DecisionTransformerConfig"),ctt.forEach(t),eYe=r(sA," (Decision Transformer model)"),sA.forEach(t),oYe=i(L),cm=n(L,"LI",{});var y6e=s(cm);ane=n(y6e,"STRONG",{});var ftt=s(ane);rYe=r(ftt,"deit"),ftt.forEach(t),tYe=r(y6e," \u2014 "),mR=n(y6e,"A",{href:!0});var mtt=s(mR);aYe=r(mtt,"DeiTConfig"),mtt.forEach(t),nYe=r(y6e," (DeiT model)"),y6e.forEach(t),sYe=i(L),fm=n(L,"LI",{});var x6e=s(fm);nne=n(x6e,"STRONG",{});var gtt=s(nne);lYe=r(gtt,"detr"),gtt.forEach(t),iYe=r(x6e," \u2014 "),gR=n(x6e,"A",{href:!0});var htt=s(gR);dYe=r(htt,"DetrConfig"),htt.forEach(t),cYe=r(x6e," (DETR model)"),x6e.forEach(t),fYe=i(L),mm=n(L,"LI",{});var $6e=s(mm);sne=n($6e,"STRONG",{});var ptt=s(sne);mYe=r(ptt,"distilbert"),ptt.forEach(t),gYe=r($6e," \u2014 "),hR=n($6e,"A",{href:!0});var _tt=s(hR);hYe=r(_tt,"DistilBertConfig"),_tt.forEach(t),pYe=r($6e," (DistilBERT model)"),$6e.forEach(t),_Ye=i(L),gm=n(L,"LI",{});var k6e=s(gm);lne=n(k6e,"STRONG",{});var utt=s(lne);uYe=r(utt,"dpr"),utt.forEach(t),bYe=r(k6e," \u2014 "),pR=n(k6e,"A",{href:!0});var btt=s(pR);vYe=r(btt,"DPRConfig"),btt.forEach(t),FYe=r(k6e," (DPR model)"),k6e.forEach(t),TYe=i(L),hm=n(L,"LI",{});var S6e=s(hm);ine=n(S6e,"STRONG",{});var vtt=s(ine);MYe=r(vtt,"dpt"),vtt.forEach(t),EYe=r(S6e," \u2014 "),_R=n(S6e,"A",{href:!0});var Ftt=s(_R);CYe=r(Ftt,"DPTConfig"),Ftt.forEach(t),wYe=r(S6e," (DPT model)"),S6e.forEach(t),AYe=i(L),pm=n(L,"LI",{});var R6e=s(pm);dne=n(R6e,"STRONG",{});var Ttt=s(dne);LYe=r(Ttt,"electra"),Ttt.forEach(t),yYe=r(R6e," \u2014 "),uR=n(R6e,"A",{href:!0});var Mtt=s(uR);xYe=r(Mtt,"ElectraConfig"),Mtt.forEach(t),$Ye=r(R6e," (ELECTRA model)"),R6e.forEach(t),kYe=i(L),_m=n(L,"LI",{});var P6e=s(_m);cne=n(P6e,"STRONG",{});var Ett=s(cne);SYe=r(Ett,"encoder-decoder"),Ett.forEach(t),RYe=r(P6e," \u2014 "),bR=n(P6e,"A",{href:!0});var Ctt=s(bR);PYe=r(Ctt,"EncoderDecoderConfig"),Ctt.forEach(t),BYe=r(P6e," (Encoder decoder model)"),P6e.forEach(t),NYe=i(L),um=n(L,"LI",{});var B6e=s(um);fne=n(B6e,"STRONG",{});var wtt=s(fne);IYe=r(wtt,"flaubert"),wtt.forEach(t),qYe=r(B6e," \u2014 "),vR=n(B6e,"A",{href:!0});var Att=s(vR);jYe=r(Att,"FlaubertConfig"),Att.forEach(t),DYe=r(B6e," (FlauBERT model)"),B6e.forEach(t),GYe=i(L),bm=n(L,"LI",{});var N6e=s(bm);mne=n(N6e,"STRONG",{});var Ltt=s(mne);OYe=r(Ltt,"flava"),Ltt.forEach(t),VYe=r(N6e," \u2014 "),FR=n(N6e,"A",{href:!0});var ytt=s(FR);XYe=r(ytt,"FlavaConfig"),ytt.forEach(t),zYe=r(N6e," (FLAVA model)"),N6e.forEach(t),QYe=i(L),vm=n(L,"LI",{});var I6e=s(vm);gne=n(I6e,"STRONG",{});var xtt=s(gne);WYe=r(xtt,"fnet"),xtt.forEach(t),HYe=r(I6e," \u2014 "),TR=n(I6e,"A",{href:!0});var $tt=s(TR);UYe=r($tt,"FNetConfig"),$tt.forEach(t),JYe=r(I6e," (FNet model)"),I6e.forEach(t),YYe=i(L),Fm=n(L,"LI",{});var q6e=s(Fm);hne=n(q6e,"STRONG",{});var ktt=s(hne);KYe=r(ktt,"fsmt"),ktt.forEach(t),ZYe=r(q6e," \u2014 "),MR=n(q6e,"A",{href:!0});var Stt=s(MR);eKe=r(Stt,"FSMTConfig"),Stt.forEach(t),oKe=r(q6e," (FairSeq Machine-Translation model)"),q6e.forEach(t),rKe=i(L),Tm=n(L,"LI",{});var j6e=s(Tm);pne=n(j6e,"STRONG",{});var Rtt=s(pne);tKe=r(Rtt,"funnel"),Rtt.forEach(t),aKe=r(j6e," \u2014 "),ER=n(j6e,"A",{href:!0});var Ptt=s(ER);nKe=r(Ptt,"FunnelConfig"),Ptt.forEach(t),sKe=r(j6e," (Funnel Transformer model)"),j6e.forEach(t),lKe=i(L),Mm=n(L,"LI",{});var D6e=s(Mm);_ne=n(D6e,"STRONG",{});var Btt=s(_ne);iKe=r(Btt,"glpn"),Btt.forEach(t),dKe=r(D6e," \u2014 "),CR=n(D6e,"A",{href:!0});var Ntt=s(CR);cKe=r(Ntt,"GLPNConfig"),Ntt.forEach(t),fKe=r(D6e," (GLPN model)"),D6e.forEach(t),mKe=i(L),Em=n(L,"LI",{});var G6e=s(Em);une=n(G6e,"STRONG",{});var Itt=s(une);gKe=r(Itt,"gpt2"),Itt.forEach(t),hKe=r(G6e," \u2014 "),wR=n(G6e,"A",{href:!0});var qtt=s(wR);pKe=r(qtt,"GPT2Config"),qtt.forEach(t),_Ke=r(G6e," (OpenAI GPT-2 model)"),G6e.forEach(t),uKe=i(L),Cm=n(L,"LI",{});var O6e=s(Cm);bne=n(O6e,"STRONG",{});var jtt=s(bne);bKe=r(jtt,"gpt_neo"),jtt.forEach(t),vKe=r(O6e," \u2014 "),AR=n(O6e,"A",{href:!0});var Dtt=s(AR);FKe=r(Dtt,"GPTNeoConfig"),Dtt.forEach(t),TKe=r(O6e," (GPT Neo model)"),O6e.forEach(t),MKe=i(L),wm=n(L,"LI",{});var V6e=s(wm);vne=n(V6e,"STRONG",{});var Gtt=s(vne);EKe=r(Gtt,"gpt_neox"),Gtt.forEach(t),CKe=r(V6e," \u2014 "),LR=n(V6e,"A",{href:!0});var Ott=s(LR);wKe=r(Ott,"GPTNeoXConfig"),Ott.forEach(t),AKe=r(V6e," (GPT NeoX model)"),V6e.forEach(t),LKe=i(L),Am=n(L,"LI",{});var X6e=s(Am);Fne=n(X6e,"STRONG",{});var Vtt=s(Fne);yKe=r(Vtt,"gptj"),Vtt.forEach(t),xKe=r(X6e," \u2014 "),yR=n(X6e,"A",{href:!0});var Xtt=s(yR);$Ke=r(Xtt,"GPTJConfig"),Xtt.forEach(t),kKe=r(X6e," (GPT-J model)"),X6e.forEach(t),SKe=i(L),Lm=n(L,"LI",{});var z6e=s(Lm);Tne=n(z6e,"STRONG",{});var ztt=s(Tne);RKe=r(ztt,"groupvit"),ztt.forEach(t),PKe=r(z6e," \u2014 "),xR=n(z6e,"A",{href:!0});var Qtt=s(xR);BKe=r(Qtt,"GroupViTConfig"),Qtt.forEach(t),NKe=r(z6e," (GroupViT model)"),z6e.forEach(t),IKe=i(L),ym=n(L,"LI",{});var Q6e=s(ym);Mne=n(Q6e,"STRONG",{});var Wtt=s(Mne);qKe=r(Wtt,"hubert"),Wtt.forEach(t),jKe=r(Q6e," \u2014 "),$R=n(Q6e,"A",{href:!0});var Htt=s($R);DKe=r(Htt,"HubertConfig"),Htt.forEach(t),GKe=r(Q6e," (Hubert model)"),Q6e.forEach(t),OKe=i(L),xm=n(L,"LI",{});var W6e=s(xm);Ene=n(W6e,"STRONG",{});var Utt=s(Ene);VKe=r(Utt,"ibert"),Utt.forEach(t),XKe=r(W6e," \u2014 "),kR=n(W6e,"A",{href:!0});var Jtt=s(kR);zKe=r(Jtt,"IBertConfig"),Jtt.forEach(t),QKe=r(W6e," (I-BERT model)"),W6e.forEach(t),WKe=i(L),$m=n(L,"LI",{});var H6e=s($m);Cne=n(H6e,"STRONG",{});var Ytt=s(Cne);HKe=r(Ytt,"imagegpt"),Ytt.forEach(t),UKe=r(H6e," \u2014 "),SR=n(H6e,"A",{href:!0});var Ktt=s(SR);JKe=r(Ktt,"ImageGPTConfig"),Ktt.forEach(t),YKe=r(H6e," (ImageGPT model)"),H6e.forEach(t),KKe=i(L),km=n(L,"LI",{});var U6e=s(km);wne=n(U6e,"STRONG",{});var Ztt=s(wne);ZKe=r(Ztt,"layoutlm"),Ztt.forEach(t),eZe=r(U6e," \u2014 "),RR=n(U6e,"A",{href:!0});var eat=s(RR);oZe=r(eat,"LayoutLMConfig"),eat.forEach(t),rZe=r(U6e," (LayoutLM model)"),U6e.forEach(t),tZe=i(L),Sm=n(L,"LI",{});var J6e=s(Sm);Ane=n(J6e,"STRONG",{});var oat=s(Ane);aZe=r(oat,"layoutlmv2"),oat.forEach(t),nZe=r(J6e," \u2014 "),PR=n(J6e,"A",{href:!0});var rat=s(PR);sZe=r(rat,"LayoutLMv2Config"),rat.forEach(t),lZe=r(J6e," (LayoutLMv2 model)"),J6e.forEach(t),iZe=i(L),Rm=n(L,"LI",{});var Y6e=s(Rm);Lne=n(Y6e,"STRONG",{});var tat=s(Lne);dZe=r(tat,"layoutlmv3"),tat.forEach(t),cZe=r(Y6e," \u2014 "),BR=n(Y6e,"A",{href:!0});var aat=s(BR);fZe=r(aat,"LayoutLMv3Config"),aat.forEach(t),mZe=r(Y6e," (LayoutLMv3 model)"),Y6e.forEach(t),gZe=i(L),Pm=n(L,"LI",{});var K6e=s(Pm);yne=n(K6e,"STRONG",{});var nat=s(yne);hZe=r(nat,"led"),nat.forEach(t),pZe=r(K6e," \u2014 "),NR=n(K6e,"A",{href:!0});var sat=s(NR);_Ze=r(sat,"LEDConfig"),sat.forEach(t),uZe=r(K6e," (LED model)"),K6e.forEach(t),bZe=i(L),Bm=n(L,"LI",{});var Z6e=s(Bm);xne=n(Z6e,"STRONG",{});var lat=s(xne);vZe=r(lat,"levit"),lat.forEach(t),FZe=r(Z6e," \u2014 "),IR=n(Z6e,"A",{href:!0});var iat=s(IR);TZe=r(iat,"LevitConfig"),iat.forEach(t),MZe=r(Z6e," (LeViT model)"),Z6e.forEach(t),EZe=i(L),Nm=n(L,"LI",{});var eLe=s(Nm);$ne=n(eLe,"STRONG",{});var dat=s($ne);CZe=r(dat,"longformer"),dat.forEach(t),wZe=r(eLe," \u2014 "),qR=n(eLe,"A",{href:!0});var cat=s(qR);AZe=r(cat,"LongformerConfig"),cat.forEach(t),LZe=r(eLe," (Longformer model)"),eLe.forEach(t),yZe=i(L),Im=n(L,"LI",{});var oLe=s(Im);kne=n(oLe,"STRONG",{});var fat=s(kne);xZe=r(fat,"longt5"),fat.forEach(t),$Ze=r(oLe," \u2014 "),jR=n(oLe,"A",{href:!0});var mat=s(jR);kZe=r(mat,"LongT5Config"),mat.forEach(t),SZe=r(oLe," (LongT5 model)"),oLe.forEach(t),RZe=i(L),qm=n(L,"LI",{});var rLe=s(qm);Sne=n(rLe,"STRONG",{});var gat=s(Sne);PZe=r(gat,"luke"),gat.forEach(t),BZe=r(rLe," \u2014 "),DR=n(rLe,"A",{href:!0});var hat=s(DR);NZe=r(hat,"LukeConfig"),hat.forEach(t),IZe=r(rLe," (LUKE model)"),rLe.forEach(t),qZe=i(L),jm=n(L,"LI",{});var tLe=s(jm);Rne=n(tLe,"STRONG",{});var pat=s(Rne);jZe=r(pat,"lxmert"),pat.forEach(t),DZe=r(tLe," \u2014 "),GR=n(tLe,"A",{href:!0});var _at=s(GR);GZe=r(_at,"LxmertConfig"),_at.forEach(t),OZe=r(tLe," (LXMERT model)"),tLe.forEach(t),VZe=i(L),Dm=n(L,"LI",{});var aLe=s(Dm);Pne=n(aLe,"STRONG",{});var uat=s(Pne);XZe=r(uat,"m2m_100"),uat.forEach(t),zZe=r(aLe," \u2014 "),OR=n(aLe,"A",{href:!0});var bat=s(OR);QZe=r(bat,"M2M100Config"),bat.forEach(t),WZe=r(aLe," (M2M100 model)"),aLe.forEach(t),HZe=i(L),Gm=n(L,"LI",{});var nLe=s(Gm);Bne=n(nLe,"STRONG",{});var vat=s(Bne);UZe=r(vat,"marian"),vat.forEach(t),JZe=r(nLe," \u2014 "),VR=n(nLe,"A",{href:!0});var Fat=s(VR);YZe=r(Fat,"MarianConfig"),Fat.forEach(t),KZe=r(nLe," (Marian model)"),nLe.forEach(t),ZZe=i(L),Om=n(L,"LI",{});var sLe=s(Om);Nne=n(sLe,"STRONG",{});var Tat=s(Nne);eeo=r(Tat,"maskformer"),Tat.forEach(t),oeo=r(sLe," \u2014 "),XR=n(sLe,"A",{href:!0});var Mat=s(XR);reo=r(Mat,"MaskFormerConfig"),Mat.forEach(t),teo=r(sLe," (MaskFormer model)"),sLe.forEach(t),aeo=i(L),Vm=n(L,"LI",{});var lLe=s(Vm);Ine=n(lLe,"STRONG",{});var Eat=s(Ine);neo=r(Eat,"mbart"),Eat.forEach(t),seo=r(lLe," \u2014 "),zR=n(lLe,"A",{href:!0});var Cat=s(zR);leo=r(Cat,"MBartConfig"),Cat.forEach(t),ieo=r(lLe," (mBART model)"),lLe.forEach(t),deo=i(L),Xm=n(L,"LI",{});var iLe=s(Xm);qne=n(iLe,"STRONG",{});var wat=s(qne);ceo=r(wat,"mctct"),wat.forEach(t),feo=r(iLe," \u2014 "),QR=n(iLe,"A",{href:!0});var Aat=s(QR);meo=r(Aat,"MCTCTConfig"),Aat.forEach(t),geo=r(iLe," (M-CTC-T model)"),iLe.forEach(t),heo=i(L),zm=n(L,"LI",{});var dLe=s(zm);jne=n(dLe,"STRONG",{});var Lat=s(jne);peo=r(Lat,"megatron-bert"),Lat.forEach(t),_eo=r(dLe," \u2014 "),WR=n(dLe,"A",{href:!0});var yat=s(WR);ueo=r(yat,"MegatronBertConfig"),yat.forEach(t),beo=r(dLe," (Megatron-BERT model)"),dLe.forEach(t),veo=i(L),Qm=n(L,"LI",{});var cLe=s(Qm);Dne=n(cLe,"STRONG",{});var xat=s(Dne);Feo=r(xat,"mobilebert"),xat.forEach(t),Teo=r(cLe," \u2014 "),HR=n(cLe,"A",{href:!0});var $at=s(HR);Meo=r($at,"MobileBertConfig"),$at.forEach(t),Eeo=r(cLe," (MobileBERT model)"),cLe.forEach(t),Ceo=i(L),Wm=n(L,"LI",{});var fLe=s(Wm);Gne=n(fLe,"STRONG",{});var kat=s(Gne);weo=r(kat,"mobilenet_v2"),kat.forEach(t),Aeo=r(fLe," \u2014 "),UR=n(fLe,"A",{href:!0});var Sat=s(UR);Leo=r(Sat,"MobileNetV2Config"),Sat.forEach(t),yeo=r(fLe," (MobileNetV2 model)"),fLe.forEach(t),xeo=i(L),Hm=n(L,"LI",{});var mLe=s(Hm);One=n(mLe,"STRONG",{});var Rat=s(One);$eo=r(Rat,"mobilevit"),Rat.forEach(t),keo=r(mLe," \u2014 "),JR=n(mLe,"A",{href:!0});var Pat=s(JR);Seo=r(Pat,"MobileViTConfig"),Pat.forEach(t),Reo=r(mLe," (MobileViT model)"),mLe.forEach(t),Peo=i(L),Um=n(L,"LI",{});var gLe=s(Um);Vne=n(gLe,"STRONG",{});var Bat=s(Vne);Beo=r(Bat,"mpnet"),Bat.forEach(t),Neo=r(gLe," \u2014 "),YR=n(gLe,"A",{href:!0});var Nat=s(YR);Ieo=r(Nat,"MPNetConfig"),Nat.forEach(t),qeo=r(gLe," (MPNet model)"),gLe.forEach(t),jeo=i(L),Jm=n(L,"LI",{});var hLe=s(Jm);Xne=n(hLe,"STRONG",{});var Iat=s(Xne);Deo=r(Iat,"mt5"),Iat.forEach(t),Geo=r(hLe," \u2014 "),KR=n(hLe,"A",{href:!0});var qat=s(KR);Oeo=r(qat,"MT5Config"),qat.forEach(t),Veo=r(hLe," (MT5 model)"),hLe.forEach(t),Xeo=i(L),Ym=n(L,"LI",{});var pLe=s(Ym);zne=n(pLe,"STRONG",{});var jat=s(zne);zeo=r(jat,"mvp"),jat.forEach(t),Qeo=r(pLe," \u2014 "),ZR=n(pLe,"A",{href:!0});var Dat=s(ZR);Weo=r(Dat,"MvpConfig"),Dat.forEach(t),Heo=r(pLe," (MVP model)"),pLe.forEach(t),Ueo=i(L),Km=n(L,"LI",{});var _Le=s(Km);Qne=n(_Le,"STRONG",{});var Gat=s(Qne);Jeo=r(Gat,"nezha"),Gat.forEach(t),Yeo=r(_Le," \u2014 "),eP=n(_Le,"A",{href:!0});var Oat=s(eP);Keo=r(Oat,"NezhaConfig"),Oat.forEach(t),Zeo=r(_Le," (Nezha model)"),_Le.forEach(t),eoo=i(L),Zm=n(L,"LI",{});var uLe=s(Zm);Wne=n(uLe,"STRONG",{});var Vat=s(Wne);ooo=r(Vat,"nystromformer"),Vat.forEach(t),roo=r(uLe," \u2014 "),oP=n(uLe,"A",{href:!0});var Xat=s(oP);too=r(Xat,"NystromformerConfig"),Xat.forEach(t),aoo=r(uLe," (Nystr\xF6mformer model)"),uLe.forEach(t),noo=i(L),eg=n(L,"LI",{});var bLe=s(eg);Hne=n(bLe,"STRONG",{});var zat=s(Hne);soo=r(zat,"openai-gpt"),zat.forEach(t),loo=r(bLe," \u2014 "),rP=n(bLe,"A",{href:!0});var Qat=s(rP);ioo=r(Qat,"OpenAIGPTConfig"),Qat.forEach(t),doo=r(bLe," (OpenAI GPT model)"),bLe.forEach(t),coo=i(L),og=n(L,"LI",{});var vLe=s(og);Une=n(vLe,"STRONG",{});var Wat=s(Une);foo=r(Wat,"opt"),Wat.forEach(t),moo=r(vLe," \u2014 "),tP=n(vLe,"A",{href:!0});var Hat=s(tP);goo=r(Hat,"OPTConfig"),Hat.forEach(t),hoo=r(vLe," (OPT model)"),vLe.forEach(t),poo=i(L),rg=n(L,"LI",{});var FLe=s(rg);Jne=n(FLe,"STRONG",{});var Uat=s(Jne);_oo=r(Uat,"pegasus"),Uat.forEach(t),uoo=r(FLe," \u2014 "),aP=n(FLe,"A",{href:!0});var Jat=s(aP);boo=r(Jat,"PegasusConfig"),Jat.forEach(t),voo=r(FLe," (Pegasus model)"),FLe.forEach(t),Foo=i(L),tg=n(L,"LI",{});var TLe=s(tg);Yne=n(TLe,"STRONG",{});var Yat=s(Yne);Too=r(Yat,"perceiver"),Yat.forEach(t),Moo=r(TLe," \u2014 "),nP=n(TLe,"A",{href:!0});var Kat=s(nP);Eoo=r(Kat,"PerceiverConfig"),Kat.forEach(t),Coo=r(TLe," (Perceiver model)"),TLe.forEach(t),woo=i(L),ag=n(L,"LI",{});var MLe=s(ag);Kne=n(MLe,"STRONG",{});var Zat=s(Kne);Aoo=r(Zat,"plbart"),Zat.forEach(t),Loo=r(MLe," \u2014 "),sP=n(MLe,"A",{href:!0});var ent=s(sP);yoo=r(ent,"PLBartConfig"),ent.forEach(t),xoo=r(MLe," (PLBart model)"),MLe.forEach(t),$oo=i(L),ng=n(L,"LI",{});var ELe=s(ng);Zne=n(ELe,"STRONG",{});var ont=s(Zne);koo=r(ont,"poolformer"),ont.forEach(t),Soo=r(ELe," \u2014 "),lP=n(ELe,"A",{href:!0});var rnt=s(lP);Roo=r(rnt,"PoolFormerConfig"),rnt.forEach(t),Poo=r(ELe," (PoolFormer model)"),ELe.forEach(t),Boo=i(L),sg=n(L,"LI",{});var CLe=s(sg);ese=n(CLe,"STRONG",{});var tnt=s(ese);Noo=r(tnt,"prophetnet"),tnt.forEach(t),Ioo=r(CLe," \u2014 "),iP=n(CLe,"A",{href:!0});var ant=s(iP);qoo=r(ant,"ProphetNetConfig"),ant.forEach(t),joo=r(CLe," (ProphetNet model)"),CLe.forEach(t),Doo=i(L),lg=n(L,"LI",{});var wLe=s(lg);ose=n(wLe,"STRONG",{});var nnt=s(ose);Goo=r(nnt,"qdqbert"),nnt.forEach(t),Ooo=r(wLe," \u2014 "),dP=n(wLe,"A",{href:!0});var snt=s(dP);Voo=r(snt,"QDQBertConfig"),snt.forEach(t),Xoo=r(wLe," (QDQBert model)"),wLe.forEach(t),zoo=i(L),ig=n(L,"LI",{});var ALe=s(ig);rse=n(ALe,"STRONG",{});var lnt=s(rse);Qoo=r(lnt,"rag"),lnt.forEach(t),Woo=r(ALe," \u2014 "),cP=n(ALe,"A",{href:!0});var int=s(cP);Hoo=r(int,"RagConfig"),int.forEach(t),Uoo=r(ALe," (RAG model)"),ALe.forEach(t),Joo=i(L),dg=n(L,"LI",{});var LLe=s(dg);tse=n(LLe,"STRONG",{});var dnt=s(tse);Yoo=r(dnt,"realm"),dnt.forEach(t),Koo=r(LLe," \u2014 "),fP=n(LLe,"A",{href:!0});var cnt=s(fP);Zoo=r(cnt,"RealmConfig"),cnt.forEach(t),ero=r(LLe," (REALM model)"),LLe.forEach(t),oro=i(L),cg=n(L,"LI",{});var yLe=s(cg);ase=n(yLe,"STRONG",{});var fnt=s(ase);rro=r(fnt,"reformer"),fnt.forEach(t),tro=r(yLe," \u2014 "),mP=n(yLe,"A",{href:!0});var mnt=s(mP);aro=r(mnt,"ReformerConfig"),mnt.forEach(t),nro=r(yLe," (Reformer model)"),yLe.forEach(t),sro=i(L),fg=n(L,"LI",{});var xLe=s(fg);nse=n(xLe,"STRONG",{});var gnt=s(nse);lro=r(gnt,"regnet"),gnt.forEach(t),iro=r(xLe," \u2014 "),gP=n(xLe,"A",{href:!0});var hnt=s(gP);dro=r(hnt,"RegNetConfig"),hnt.forEach(t),cro=r(xLe," (RegNet model)"),xLe.forEach(t),fro=i(L),mg=n(L,"LI",{});var $Le=s(mg);sse=n($Le,"STRONG",{});var pnt=s(sse);mro=r(pnt,"rembert"),pnt.forEach(t),gro=r($Le," \u2014 "),hP=n($Le,"A",{href:!0});var _nt=s(hP);hro=r(_nt,"RemBertConfig"),_nt.forEach(t),pro=r($Le," (RemBERT model)"),$Le.forEach(t),_ro=i(L),gg=n(L,"LI",{});var kLe=s(gg);lse=n(kLe,"STRONG",{});var unt=s(lse);uro=r(unt,"resnet"),unt.forEach(t),bro=r(kLe," \u2014 "),pP=n(kLe,"A",{href:!0});var bnt=s(pP);vro=r(bnt,"ResNetConfig"),bnt.forEach(t),Fro=r(kLe," (ResNet model)"),kLe.forEach(t),Tro=i(L),hg=n(L,"LI",{});var SLe=s(hg);ise=n(SLe,"STRONG",{});var vnt=s(ise);Mro=r(vnt,"retribert"),vnt.forEach(t),Ero=r(SLe," \u2014 "),_P=n(SLe,"A",{href:!0});var Fnt=s(_P);Cro=r(Fnt,"RetriBertConfig"),Fnt.forEach(t),wro=r(SLe," (RetriBERT model)"),SLe.forEach(t),Aro=i(L),pg=n(L,"LI",{});var RLe=s(pg);dse=n(RLe,"STRONG",{});var Tnt=s(dse);Lro=r(Tnt,"roberta"),Tnt.forEach(t),yro=r(RLe," \u2014 "),uP=n(RLe,"A",{href:!0});var Mnt=s(uP);xro=r(Mnt,"RobertaConfig"),Mnt.forEach(t),$ro=r(RLe," (RoBERTa model)"),RLe.forEach(t),kro=i(L),_g=n(L,"LI",{});var PLe=s(_g);cse=n(PLe,"STRONG",{});var Ent=s(cse);Sro=r(Ent,"roformer"),Ent.forEach(t),Rro=r(PLe," \u2014 "),bP=n(PLe,"A",{href:!0});var Cnt=s(bP);Pro=r(Cnt,"RoFormerConfig"),Cnt.forEach(t),Bro=r(PLe," (RoFormer model)"),PLe.forEach(t),Nro=i(L),ug=n(L,"LI",{});var BLe=s(ug);fse=n(BLe,"STRONG",{});var wnt=s(fse);Iro=r(wnt,"segformer"),wnt.forEach(t),qro=r(BLe," \u2014 "),vP=n(BLe,"A",{href:!0});var Ant=s(vP);jro=r(Ant,"SegformerConfig"),Ant.forEach(t),Dro=r(BLe," (SegFormer model)"),BLe.forEach(t),Gro=i(L),bg=n(L,"LI",{});var NLe=s(bg);mse=n(NLe,"STRONG",{});var Lnt=s(mse);Oro=r(Lnt,"sew"),Lnt.forEach(t),Vro=r(NLe," \u2014 "),FP=n(NLe,"A",{href:!0});var ynt=s(FP);Xro=r(ynt,"SEWConfig"),ynt.forEach(t),zro=r(NLe," (SEW model)"),NLe.forEach(t),Qro=i(L),vg=n(L,"LI",{});var ILe=s(vg);gse=n(ILe,"STRONG",{});var xnt=s(gse);Wro=r(xnt,"sew-d"),xnt.forEach(t),Hro=r(ILe," \u2014 "),TP=n(ILe,"A",{href:!0});var $nt=s(TP);Uro=r($nt,"SEWDConfig"),$nt.forEach(t),Jro=r(ILe," (SEW-D model)"),ILe.forEach(t),Yro=i(L),Fg=n(L,"LI",{});var qLe=s(Fg);hse=n(qLe,"STRONG",{});var knt=s(hse);Kro=r(knt,"speech-encoder-decoder"),knt.forEach(t),Zro=r(qLe," \u2014 "),MP=n(qLe,"A",{href:!0});var Snt=s(MP);eto=r(Snt,"SpeechEncoderDecoderConfig"),Snt.forEach(t),oto=r(qLe," (Speech Encoder decoder model)"),qLe.forEach(t),rto=i(L),Tg=n(L,"LI",{});var jLe=s(Tg);pse=n(jLe,"STRONG",{});var Rnt=s(pse);tto=r(Rnt,"speech_to_text"),Rnt.forEach(t),ato=r(jLe," \u2014 "),EP=n(jLe,"A",{href:!0});var Pnt=s(EP);nto=r(Pnt,"Speech2TextConfig"),Pnt.forEach(t),sto=r(jLe," (Speech2Text model)"),jLe.forEach(t),lto=i(L),Mg=n(L,"LI",{});var DLe=s(Mg);_se=n(DLe,"STRONG",{});var Bnt=s(_se);ito=r(Bnt,"speech_to_text_2"),Bnt.forEach(t),dto=r(DLe," \u2014 "),CP=n(DLe,"A",{href:!0});var Nnt=s(CP);cto=r(Nnt,"Speech2Text2Config"),Nnt.forEach(t),fto=r(DLe," (Speech2Text2 model)"),DLe.forEach(t),mto=i(L),Eg=n(L,"LI",{});var GLe=s(Eg);use=n(GLe,"STRONG",{});var Int=s(use);gto=r(Int,"splinter"),Int.forEach(t),hto=r(GLe," \u2014 "),wP=n(GLe,"A",{href:!0});var qnt=s(wP);pto=r(qnt,"SplinterConfig"),qnt.forEach(t),_to=r(GLe," (Splinter model)"),GLe.forEach(t),uto=i(L),Cg=n(L,"LI",{});var OLe=s(Cg);bse=n(OLe,"STRONG",{});var jnt=s(bse);bto=r(jnt,"squeezebert"),jnt.forEach(t),vto=r(OLe," \u2014 "),AP=n(OLe,"A",{href:!0});var Dnt=s(AP);Fto=r(Dnt,"SqueezeBertConfig"),Dnt.forEach(t),Tto=r(OLe," (SqueezeBERT model)"),OLe.forEach(t),Mto=i(L),wg=n(L,"LI",{});var VLe=s(wg);vse=n(VLe,"STRONG",{});var Gnt=s(vse);Eto=r(Gnt,"swin"),Gnt.forEach(t),Cto=r(VLe," \u2014 "),LP=n(VLe,"A",{href:!0});var Ont=s(LP);wto=r(Ont,"SwinConfig"),Ont.forEach(t),Ato=r(VLe," (Swin Transformer model)"),VLe.forEach(t),Lto=i(L),Ag=n(L,"LI",{});var XLe=s(Ag);Fse=n(XLe,"STRONG",{});var Vnt=s(Fse);yto=r(Vnt,"t5"),Vnt.forEach(t),xto=r(XLe," \u2014 "),yP=n(XLe,"A",{href:!0});var Xnt=s(yP);$to=r(Xnt,"T5Config"),Xnt.forEach(t),kto=r(XLe," (T5 model)"),XLe.forEach(t),Sto=i(L),Lg=n(L,"LI",{});var zLe=s(Lg);Tse=n(zLe,"STRONG",{});var znt=s(Tse);Rto=r(znt,"tapas"),znt.forEach(t),Pto=r(zLe," \u2014 "),xP=n(zLe,"A",{href:!0});var Qnt=s(xP);Bto=r(Qnt,"TapasConfig"),Qnt.forEach(t),Nto=r(zLe," (TAPAS model)"),zLe.forEach(t),Ito=i(L),yg=n(L,"LI",{});var QLe=s(yg);Mse=n(QLe,"STRONG",{});var Wnt=s(Mse);qto=r(Wnt,"trajectory_transformer"),Wnt.forEach(t),jto=r(QLe," \u2014 "),$P=n(QLe,"A",{href:!0});var Hnt=s($P);Dto=r(Hnt,"TrajectoryTransformerConfig"),Hnt.forEach(t),Gto=r(QLe," (Trajectory Transformer model)"),QLe.forEach(t),Oto=i(L),xg=n(L,"LI",{});var WLe=s(xg);Ese=n(WLe,"STRONG",{});var Unt=s(Ese);Vto=r(Unt,"transfo-xl"),Unt.forEach(t),Xto=r(WLe," \u2014 "),kP=n(WLe,"A",{href:!0});var Jnt=s(kP);zto=r(Jnt,"TransfoXLConfig"),Jnt.forEach(t),Qto=r(WLe," (Transformer-XL model)"),WLe.forEach(t),Wto=i(L),$g=n(L,"LI",{});var HLe=s($g);Cse=n(HLe,"STRONG",{});var Ynt=s(Cse);Hto=r(Ynt,"trocr"),Ynt.forEach(t),Uto=r(HLe," \u2014 "),SP=n(HLe,"A",{href:!0});var Knt=s(SP);Jto=r(Knt,"TrOCRConfig"),Knt.forEach(t),Yto=r(HLe," (TrOCR model)"),HLe.forEach(t),Kto=i(L),kg=n(L,"LI",{});var ULe=s(kg);wse=n(ULe,"STRONG",{});var Znt=s(wse);Zto=r(Znt,"unispeech"),Znt.forEach(t),eao=r(ULe," \u2014 "),RP=n(ULe,"A",{href:!0});var est=s(RP);oao=r(est,"UniSpeechConfig"),est.forEach(t),rao=r(ULe," (UniSpeech model)"),ULe.forEach(t),tao=i(L),Sg=n(L,"LI",{});var JLe=s(Sg);Ase=n(JLe,"STRONG",{});var ost=s(Ase);aao=r(ost,"unispeech-sat"),ost.forEach(t),nao=r(JLe," \u2014 "),PP=n(JLe,"A",{href:!0});var rst=s(PP);sao=r(rst,"UniSpeechSatConfig"),rst.forEach(t),lao=r(JLe," (UniSpeechSat model)"),JLe.forEach(t),iao=i(L),Rg=n(L,"LI",{});var YLe=s(Rg);Lse=n(YLe,"STRONG",{});var tst=s(Lse);dao=r(tst,"van"),tst.forEach(t),cao=r(YLe," \u2014 "),BP=n(YLe,"A",{href:!0});var ast=s(BP);fao=r(ast,"VanConfig"),ast.forEach(t),mao=r(YLe," (VAN model)"),YLe.forEach(t),gao=i(L),Pg=n(L,"LI",{});var KLe=s(Pg);yse=n(KLe,"STRONG",{});var nst=s(yse);hao=r(nst,"vilt"),nst.forEach(t),pao=r(KLe," \u2014 "),NP=n(KLe,"A",{href:!0});var sst=s(NP);_ao=r(sst,"ViltConfig"),sst.forEach(t),uao=r(KLe," (ViLT model)"),KLe.forEach(t),bao=i(L),Bg=n(L,"LI",{});var ZLe=s(Bg);xse=n(ZLe,"STRONG",{});var lst=s(xse);vao=r(lst,"vision-encoder-decoder"),lst.forEach(t),Fao=r(ZLe," \u2014 "),IP=n(ZLe,"A",{href:!0});var ist=s(IP);Tao=r(ist,"VisionEncoderDecoderConfig"),ist.forEach(t),Mao=r(ZLe," (Vision Encoder decoder model)"),ZLe.forEach(t),Eao=i(L),Ng=n(L,"LI",{});var eye=s(Ng);$se=n(eye,"STRONG",{});var dst=s($se);Cao=r(dst,"vision-text-dual-encoder"),dst.forEach(t),wao=r(eye," \u2014 "),qP=n(eye,"A",{href:!0});var cst=s(qP);Aao=r(cst,"VisionTextDualEncoderConfig"),cst.forEach(t),Lao=r(eye," (VisionTextDualEncoder model)"),eye.forEach(t),yao=i(L),Ig=n(L,"LI",{});var oye=s(Ig);kse=n(oye,"STRONG",{});var fst=s(kse);xao=r(fst,"visual_bert"),fst.forEach(t),$ao=r(oye," \u2014 "),jP=n(oye,"A",{href:!0});var mst=s(jP);kao=r(mst,"VisualBertConfig"),mst.forEach(t),Sao=r(oye," (VisualBERT model)"),oye.forEach(t),Rao=i(L),qg=n(L,"LI",{});var rye=s(qg);Sse=n(rye,"STRONG",{});var gst=s(Sse);Pao=r(gst,"vit"),gst.forEach(t),Bao=r(rye," \u2014 "),DP=n(rye,"A",{href:!0});var hst=s(DP);Nao=r(hst,"ViTConfig"),hst.forEach(t),Iao=r(rye," (ViT model)"),rye.forEach(t),qao=i(L),jg=n(L,"LI",{});var tye=s(jg);Rse=n(tye,"STRONG",{});var pst=s(Rse);jao=r(pst,"vit_mae"),pst.forEach(t),Dao=r(tye," \u2014 "),GP=n(tye,"A",{href:!0});var _st=s(GP);Gao=r(_st,"ViTMAEConfig"),_st.forEach(t),Oao=r(tye," (ViTMAE model)"),tye.forEach(t),Vao=i(L),Dg=n(L,"LI",{});var aye=s(Dg);Pse=n(aye,"STRONG",{});var ust=s(Pse);Xao=r(ust,"wav2vec2"),ust.forEach(t),zao=r(aye," \u2014 "),OP=n(aye,"A",{href:!0});var bst=s(OP);Qao=r(bst,"Wav2Vec2Config"),bst.forEach(t),Wao=r(aye," (Wav2Vec2 model)"),aye.forEach(t),Hao=i(L),Gg=n(L,"LI",{});var nye=s(Gg);Bse=n(nye,"STRONG",{});var vst=s(Bse);Uao=r(vst,"wav2vec2-conformer"),vst.forEach(t),Jao=r(nye," \u2014 "),VP=n(nye,"A",{href:!0});var Fst=s(VP);Yao=r(Fst,"Wav2Vec2ConformerConfig"),Fst.forEach(t),Kao=r(nye," (Wav2Vec2-Conformer model)"),nye.forEach(t),Zao=i(L),Og=n(L,"LI",{});var sye=s(Og);Nse=n(sye,"STRONG",{});var Tst=s(Nse);eno=r(Tst,"wavlm"),Tst.forEach(t),ono=r(sye," \u2014 "),XP=n(sye,"A",{href:!0});var Mst=s(XP);rno=r(Mst,"WavLMConfig"),Mst.forEach(t),tno=r(sye," (WavLM model)"),sye.forEach(t),ano=i(L),Vg=n(L,"LI",{});var lye=s(Vg);Ise=n(lye,"STRONG",{});var Est=s(Ise);nno=r(Est,"xglm"),Est.forEach(t),sno=r(lye," \u2014 "),zP=n(lye,"A",{href:!0});var Cst=s(zP);lno=r(Cst,"XGLMConfig"),Cst.forEach(t),ino=r(lye," (XGLM model)"),lye.forEach(t),dno=i(L),Xg=n(L,"LI",{});var iye=s(Xg);qse=n(iye,"STRONG",{});var wst=s(qse);cno=r(wst,"xlm"),wst.forEach(t),fno=r(iye," \u2014 "),QP=n(iye,"A",{href:!0});var Ast=s(QP);mno=r(Ast,"XLMConfig"),Ast.forEach(t),gno=r(iye," (XLM model)"),iye.forEach(t),hno=i(L),zg=n(L,"LI",{});var dye=s(zg);jse=n(dye,"STRONG",{});var Lst=s(jse);pno=r(Lst,"xlm-prophetnet"),Lst.forEach(t),_no=r(dye," \u2014 "),WP=n(dye,"A",{href:!0});var yst=s(WP);uno=r(yst,"XLMProphetNetConfig"),yst.forEach(t),bno=r(dye," (XLM-ProphetNet model)"),dye.forEach(t),vno=i(L),Qg=n(L,"LI",{});var cye=s(Qg);Dse=n(cye,"STRONG",{});var xst=s(Dse);Fno=r(xst,"xlm-roberta"),xst.forEach(t),Tno=r(cye," \u2014 "),HP=n(cye,"A",{href:!0});var $st=s(HP);Mno=r($st,"XLMRobertaConfig"),$st.forEach(t),Eno=r(cye," (XLM-RoBERTa model)"),cye.forEach(t),Cno=i(L),Wg=n(L,"LI",{});var fye=s(Wg);Gse=n(fye,"STRONG",{});var kst=s(Gse);wno=r(kst,"xlm-roberta-xl"),kst.forEach(t),Ano=r(fye," \u2014 "),UP=n(fye,"A",{href:!0});var Sst=s(UP);Lno=r(Sst,"XLMRobertaXLConfig"),Sst.forEach(t),yno=r(fye," (XLM-RoBERTa-XL model)"),fye.forEach(t),xno=i(L),Hg=n(L,"LI",{});var mye=s(Hg);Ose=n(mye,"STRONG",{});var Rst=s(Ose);$no=r(Rst,"xlnet"),Rst.forEach(t),kno=r(mye," \u2014 "),JP=n(mye,"A",{href:!0});var Pst=s(JP);Sno=r(Pst,"XLNetConfig"),Pst.forEach(t),Rno=r(mye," (XLNet model)"),mye.forEach(t),Pno=i(L),Ug=n(L,"LI",{});var gye=s(Ug);Vse=n(gye,"STRONG",{});var Bst=s(Vse);Bno=r(Bst,"yolos"),Bst.forEach(t),Nno=r(gye," \u2014 "),YP=n(gye,"A",{href:!0});var Nst=s(YP);Ino=r(Nst,"YolosConfig"),Nst.forEach(t),qno=r(gye," (YOLOS model)"),gye.forEach(t),jno=i(L),Jg=n(L,"LI",{});var hye=s(Jg);Xse=n(hye,"STRONG",{});var Ist=s(Xse);Dno=r(Ist,"yoso"),Ist.forEach(t),Gno=r(hye," \u2014 "),KP=n(hye,"A",{href:!0});var qst=s(KP);Ono=r(qst,"YosoConfig"),qst.forEach(t),Vno=r(hye," (YOSO model)"),hye.forEach(t),L.forEach(t),Xno=i(nt),T(Yg.$$.fragment,nt),nt.forEach(t),zno=i(at),Kg=n(at,"DIV",{class:!0});var sQe=s(Kg);T(mL.$$.fragment,sQe),Qno=i(sQe),zse=n(sQe,"P",{});var jst=s(zse);Wno=r(jst,"Register a new configuration for this class."),jst.forEach(t),sQe.forEach(t),at.forEach(t),lXe=i(f),Ni=n(f,"H2",{class:!0});var lQe=s(Ni);Zg=n(lQe,"A",{id:!0,class:!0,href:!0});var Dst=s(Zg);Qse=n(Dst,"SPAN",{});var Gst=s(Qse);T(gL.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),Hno=i(lQe),Wse=n(lQe,"SPAN",{});var Ost=s(Wse);Uno=r(Ost,"AutoTokenizer"),Ost.forEach(t),lQe.forEach(t),iXe=i(f),Ao=n(f,"DIV",{class:!0});var Ys=s(Ao);T(hL.$$.fragment,Ys),Jno=i(Ys),pL=n(Ys,"P",{});var iQe=s(pL);Yno=r(iQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZP=n(iQe,"A",{href:!0});var Vst=s(ZP);Kno=r(Vst,"AutoTokenizer.from_pretrained()"),Vst.forEach(t),Zno=r(iQe," class method."),iQe.forEach(t),eso=i(Ys),_L=n(Ys,"P",{});var dQe=s(_L);oso=r(dQe,"This class cannot be instantiated directly using "),Hse=n(dQe,"CODE",{});var Xst=s(Hse);rso=r(Xst,"__init__()"),Xst.forEach(t),tso=r(dQe," (throws an error)."),dQe.forEach(t),aso=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(uL.$$.fragment,Ks),nso=i(Ks),Use=n(Ks,"P",{});var zst=s(Use);sso=r(zst,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zst.forEach(t),lso=i(Ks),Pa=n(Ks,"P",{});var lA=s(Pa);iso=r(lA,"The tokenizer class to instantiate is selected based on the "),Jse=n(lA,"CODE",{});var Qst=s(Jse);dso=r(Qst,"model_type"),Qst.forEach(t),cso=r(lA,` property of the config object (either
passed as an argument or loaded from `),Yse=n(lA,"CODE",{});var Wst=s(Yse);fso=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),mso=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=n(lA,"CODE",{});var Hst=s(Kse);gso=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),hso=r(lA,":"),lA.forEach(t),pso=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Ek=s(jn);Zse=n(Ek,"STRONG",{});var Ust=s(Zse);_so=r(Ust,"albert"),Ust.forEach(t),uso=r(Ek," \u2014 "),eB=n(Ek,"A",{href:!0});var Jst=s(eB);bso=r(Jst,"AlbertTokenizer"),Jst.forEach(t),vso=r(Ek," or "),oB=n(Ek,"A",{href:!0});var Yst=s(oB);Fso=r(Yst,"AlbertTokenizerFast"),Yst.forEach(t),Tso=r(Ek," (ALBERT model)"),Ek.forEach(t),Mso=i(S),Dn=n(S,"LI",{});var Ck=s(Dn);ele=n(Ck,"STRONG",{});var Kst=s(ele);Eso=r(Kst,"bart"),Kst.forEach(t),Cso=r(Ck," \u2014 "),rB=n(Ck,"A",{href:!0});var Zst=s(rB);wso=r(Zst,"BartTokenizer"),Zst.forEach(t),Aso=r(Ck," or "),tB=n(Ck,"A",{href:!0});var elt=s(tB);Lso=r(elt,"BartTokenizerFast"),elt.forEach(t),yso=r(Ck," (BART model)"),Ck.forEach(t),xso=i(S),Gn=n(S,"LI",{});var wk=s(Gn);ole=n(wk,"STRONG",{});var olt=s(ole);$so=r(olt,"barthez"),olt.forEach(t),kso=r(wk," \u2014 "),aB=n(wk,"A",{href:!0});var rlt=s(aB);Sso=r(rlt,"BarthezTokenizer"),rlt.forEach(t),Rso=r(wk," or "),nB=n(wk,"A",{href:!0});var tlt=s(nB);Pso=r(tlt,"BarthezTokenizerFast"),tlt.forEach(t),Bso=r(wk," (BARThez model)"),wk.forEach(t),Nso=i(S),eh=n(S,"LI",{});var pye=s(eh);rle=n(pye,"STRONG",{});var alt=s(rle);Iso=r(alt,"bartpho"),alt.forEach(t),qso=r(pye," \u2014 "),sB=n(pye,"A",{href:!0});var nlt=s(sB);jso=r(nlt,"BartphoTokenizer"),nlt.forEach(t),Dso=r(pye," (BARTpho model)"),pye.forEach(t),Gso=i(S),On=n(S,"LI",{});var Ak=s(On);tle=n(Ak,"STRONG",{});var slt=s(tle);Oso=r(slt,"bert"),slt.forEach(t),Vso=r(Ak," \u2014 "),lB=n(Ak,"A",{href:!0});var llt=s(lB);Xso=r(llt,"BertTokenizer"),llt.forEach(t),zso=r(Ak," or "),iB=n(Ak,"A",{href:!0});var ilt=s(iB);Qso=r(ilt,"BertTokenizerFast"),ilt.forEach(t),Wso=r(Ak," (BERT model)"),Ak.forEach(t),Hso=i(S),oh=n(S,"LI",{});var _ye=s(oh);ale=n(_ye,"STRONG",{});var dlt=s(ale);Uso=r(dlt,"bert-generation"),dlt.forEach(t),Jso=r(_ye," \u2014 "),dB=n(_ye,"A",{href:!0});var clt=s(dB);Yso=r(clt,"BertGenerationTokenizer"),clt.forEach(t),Kso=r(_ye," (Bert Generation model)"),_ye.forEach(t),Zso=i(S),rh=n(S,"LI",{});var uye=s(rh);nle=n(uye,"STRONG",{});var flt=s(nle);elo=r(flt,"bert-japanese"),flt.forEach(t),olo=r(uye," \u2014 "),cB=n(uye,"A",{href:!0});var mlt=s(cB);rlo=r(mlt,"BertJapaneseTokenizer"),mlt.forEach(t),tlo=r(uye," (BertJapanese model)"),uye.forEach(t),alo=i(S),th=n(S,"LI",{});var bye=s(th);sle=n(bye,"STRONG",{});var glt=s(sle);nlo=r(glt,"bertweet"),glt.forEach(t),slo=r(bye," \u2014 "),fB=n(bye,"A",{href:!0});var hlt=s(fB);llo=r(hlt,"BertweetTokenizer"),hlt.forEach(t),ilo=r(bye," (BERTweet model)"),bye.forEach(t),dlo=i(S),Vn=n(S,"LI",{});var Lk=s(Vn);lle=n(Lk,"STRONG",{});var plt=s(lle);clo=r(plt,"big_bird"),plt.forEach(t),flo=r(Lk," \u2014 "),mB=n(Lk,"A",{href:!0});var _lt=s(mB);mlo=r(_lt,"BigBirdTokenizer"),_lt.forEach(t),glo=r(Lk," or "),gB=n(Lk,"A",{href:!0});var ult=s(gB);hlo=r(ult,"BigBirdTokenizerFast"),ult.forEach(t),plo=r(Lk," (BigBird model)"),Lk.forEach(t),_lo=i(S),Xn=n(S,"LI",{});var yk=s(Xn);ile=n(yk,"STRONG",{});var blt=s(ile);ulo=r(blt,"bigbird_pegasus"),blt.forEach(t),blo=r(yk," \u2014 "),hB=n(yk,"A",{href:!0});var vlt=s(hB);vlo=r(vlt,"PegasusTokenizer"),vlt.forEach(t),Flo=r(yk," or "),pB=n(yk,"A",{href:!0});var Flt=s(pB);Tlo=r(Flt,"PegasusTokenizerFast"),Flt.forEach(t),Mlo=r(yk," (BigBird-Pegasus model)"),yk.forEach(t),Elo=i(S),zn=n(S,"LI",{});var xk=s(zn);dle=n(xk,"STRONG",{});var Tlt=s(dle);Clo=r(Tlt,"blenderbot"),Tlt.forEach(t),wlo=r(xk," \u2014 "),_B=n(xk,"A",{href:!0});var Mlt=s(_B);Alo=r(Mlt,"BlenderbotTokenizer"),Mlt.forEach(t),Llo=r(xk," or "),uB=n(xk,"A",{href:!0});var Elt=s(uB);ylo=r(Elt,"BlenderbotTokenizerFast"),Elt.forEach(t),xlo=r(xk," (Blenderbot model)"),xk.forEach(t),$lo=i(S),ah=n(S,"LI",{});var vye=s(ah);cle=n(vye,"STRONG",{});var Clt=s(cle);klo=r(Clt,"blenderbot-small"),Clt.forEach(t),Slo=r(vye," \u2014 "),bB=n(vye,"A",{href:!0});var wlt=s(bB);Rlo=r(wlt,"BlenderbotSmallTokenizer"),wlt.forEach(t),Plo=r(vye," (BlenderbotSmall model)"),vye.forEach(t),Blo=i(S),nh=n(S,"LI",{});var Fye=s(nh);fle=n(Fye,"STRONG",{});var Alt=s(fle);Nlo=r(Alt,"bloom"),Alt.forEach(t),Ilo=r(Fye," \u2014 "),vB=n(Fye,"A",{href:!0});var Llt=s(vB);qlo=r(Llt,"BloomTokenizerFast"),Llt.forEach(t),jlo=r(Fye," (BLOOM model)"),Fye.forEach(t),Dlo=i(S),sh=n(S,"LI",{});var Tye=s(sh);mle=n(Tye,"STRONG",{});var ylt=s(mle);Glo=r(ylt,"byt5"),ylt.forEach(t),Olo=r(Tye," \u2014 "),FB=n(Tye,"A",{href:!0});var xlt=s(FB);Vlo=r(xlt,"ByT5Tokenizer"),xlt.forEach(t),Xlo=r(Tye," (ByT5 model)"),Tye.forEach(t),zlo=i(S),Qn=n(S,"LI",{});var $k=s(Qn);gle=n($k,"STRONG",{});var $lt=s(gle);Qlo=r($lt,"camembert"),$lt.forEach(t),Wlo=r($k," \u2014 "),TB=n($k,"A",{href:!0});var klt=s(TB);Hlo=r(klt,"CamembertTokenizer"),klt.forEach(t),Ulo=r($k," or "),MB=n($k,"A",{href:!0});var Slt=s(MB);Jlo=r(Slt,"CamembertTokenizerFast"),Slt.forEach(t),Ylo=r($k," (CamemBERT model)"),$k.forEach(t),Klo=i(S),lh=n(S,"LI",{});var Mye=s(lh);hle=n(Mye,"STRONG",{});var Rlt=s(hle);Zlo=r(Rlt,"canine"),Rlt.forEach(t),eio=r(Mye," \u2014 "),EB=n(Mye,"A",{href:!0});var Plt=s(EB);oio=r(Plt,"CanineTokenizer"),Plt.forEach(t),rio=r(Mye," (CANINE model)"),Mye.forEach(t),tio=i(S),Wn=n(S,"LI",{});var kk=s(Wn);ple=n(kk,"STRONG",{});var Blt=s(ple);aio=r(Blt,"clip"),Blt.forEach(t),nio=r(kk," \u2014 "),CB=n(kk,"A",{href:!0});var Nlt=s(CB);sio=r(Nlt,"CLIPTokenizer"),Nlt.forEach(t),lio=r(kk," or "),wB=n(kk,"A",{href:!0});var Ilt=s(wB);iio=r(Ilt,"CLIPTokenizerFast"),Ilt.forEach(t),dio=r(kk," (CLIP model)"),kk.forEach(t),cio=i(S),Hn=n(S,"LI",{});var Sk=s(Hn);_le=n(Sk,"STRONG",{});var qlt=s(_le);fio=r(qlt,"codegen"),qlt.forEach(t),mio=r(Sk," \u2014 "),AB=n(Sk,"A",{href:!0});var jlt=s(AB);gio=r(jlt,"CodeGenTokenizer"),jlt.forEach(t),hio=r(Sk," or "),LB=n(Sk,"A",{href:!0});var Dlt=s(LB);pio=r(Dlt,"CodeGenTokenizerFast"),Dlt.forEach(t),_io=r(Sk," (CodeGen model)"),Sk.forEach(t),uio=i(S),Un=n(S,"LI",{});var Rk=s(Un);ule=n(Rk,"STRONG",{});var Glt=s(ule);bio=r(Glt,"convbert"),Glt.forEach(t),vio=r(Rk," \u2014 "),yB=n(Rk,"A",{href:!0});var Olt=s(yB);Fio=r(Olt,"ConvBertTokenizer"),Olt.forEach(t),Tio=r(Rk," or "),xB=n(Rk,"A",{href:!0});var Vlt=s(xB);Mio=r(Vlt,"ConvBertTokenizerFast"),Vlt.forEach(t),Eio=r(Rk," (ConvBERT model)"),Rk.forEach(t),Cio=i(S),Jn=n(S,"LI",{});var Pk=s(Jn);ble=n(Pk,"STRONG",{});var Xlt=s(ble);wio=r(Xlt,"cpm"),Xlt.forEach(t),Aio=r(Pk," \u2014 "),$B=n(Pk,"A",{href:!0});var zlt=s($B);Lio=r(zlt,"CpmTokenizer"),zlt.forEach(t),yio=r(Pk," or "),kB=n(Pk,"A",{href:!0});var Qlt=s(kB);xio=r(Qlt,"CpmTokenizerFast"),Qlt.forEach(t),$io=r(Pk," (CPM model)"),Pk.forEach(t),kio=i(S),ih=n(S,"LI",{});var Eye=s(ih);vle=n(Eye,"STRONG",{});var Wlt=s(vle);Sio=r(Wlt,"ctrl"),Wlt.forEach(t),Rio=r(Eye," \u2014 "),SB=n(Eye,"A",{href:!0});var Hlt=s(SB);Pio=r(Hlt,"CTRLTokenizer"),Hlt.forEach(t),Bio=r(Eye," (CTRL model)"),Eye.forEach(t),Nio=i(S),Yn=n(S,"LI",{});var Bk=s(Yn);Fle=n(Bk,"STRONG",{});var Ult=s(Fle);Iio=r(Ult,"data2vec-text"),Ult.forEach(t),qio=r(Bk," \u2014 "),RB=n(Bk,"A",{href:!0});var Jlt=s(RB);jio=r(Jlt,"RobertaTokenizer"),Jlt.forEach(t),Dio=r(Bk," or "),PB=n(Bk,"A",{href:!0});var Ylt=s(PB);Gio=r(Ylt,"RobertaTokenizerFast"),Ylt.forEach(t),Oio=r(Bk," (Data2VecText model)"),Bk.forEach(t),Vio=i(S),Kn=n(S,"LI",{});var Nk=s(Kn);Tle=n(Nk,"STRONG",{});var Klt=s(Tle);Xio=r(Klt,"deberta"),Klt.forEach(t),zio=r(Nk," \u2014 "),BB=n(Nk,"A",{href:!0});var Zlt=s(BB);Qio=r(Zlt,"DebertaTokenizer"),Zlt.forEach(t),Wio=r(Nk," or "),NB=n(Nk,"A",{href:!0});var eit=s(NB);Hio=r(eit,"DebertaTokenizerFast"),eit.forEach(t),Uio=r(Nk," (DeBERTa model)"),Nk.forEach(t),Jio=i(S),Zn=n(S,"LI",{});var Ik=s(Zn);Mle=n(Ik,"STRONG",{});var oit=s(Mle);Yio=r(oit,"deberta-v2"),oit.forEach(t),Kio=r(Ik," \u2014 "),IB=n(Ik,"A",{href:!0});var rit=s(IB);Zio=r(rit,"DebertaV2Tokenizer"),rit.forEach(t),edo=r(Ik," or "),qB=n(Ik,"A",{href:!0});var tit=s(qB);odo=r(tit,"DebertaV2TokenizerFast"),tit.forEach(t),rdo=r(Ik," (DeBERTa-v2 model)"),Ik.forEach(t),tdo=i(S),es=n(S,"LI",{});var qk=s(es);Ele=n(qk,"STRONG",{});var ait=s(Ele);ado=r(ait,"distilbert"),ait.forEach(t),ndo=r(qk," \u2014 "),jB=n(qk,"A",{href:!0});var nit=s(jB);sdo=r(nit,"DistilBertTokenizer"),nit.forEach(t),ldo=r(qk," or "),DB=n(qk,"A",{href:!0});var sit=s(DB);ido=r(sit,"DistilBertTokenizerFast"),sit.forEach(t),ddo=r(qk," (DistilBERT model)"),qk.forEach(t),cdo=i(S),os=n(S,"LI",{});var jk=s(os);Cle=n(jk,"STRONG",{});var lit=s(Cle);fdo=r(lit,"dpr"),lit.forEach(t),mdo=r(jk," \u2014 "),GB=n(jk,"A",{href:!0});var iit=s(GB);gdo=r(iit,"DPRQuestionEncoderTokenizer"),iit.forEach(t),hdo=r(jk," or "),OB=n(jk,"A",{href:!0});var dit=s(OB);pdo=r(dit,"DPRQuestionEncoderTokenizerFast"),dit.forEach(t),_do=r(jk," (DPR model)"),jk.forEach(t),udo=i(S),rs=n(S,"LI",{});var Dk=s(rs);wle=n(Dk,"STRONG",{});var cit=s(wle);bdo=r(cit,"electra"),cit.forEach(t),vdo=r(Dk," \u2014 "),VB=n(Dk,"A",{href:!0});var fit=s(VB);Fdo=r(fit,"ElectraTokenizer"),fit.forEach(t),Tdo=r(Dk," or "),XB=n(Dk,"A",{href:!0});var mit=s(XB);Mdo=r(mit,"ElectraTokenizerFast"),mit.forEach(t),Edo=r(Dk," (ELECTRA model)"),Dk.forEach(t),Cdo=i(S),dh=n(S,"LI",{});var Cye=s(dh);Ale=n(Cye,"STRONG",{});var git=s(Ale);wdo=r(git,"flaubert"),git.forEach(t),Ado=r(Cye," \u2014 "),zB=n(Cye,"A",{href:!0});var hit=s(zB);Ldo=r(hit,"FlaubertTokenizer"),hit.forEach(t),ydo=r(Cye," (FlauBERT model)"),Cye.forEach(t),xdo=i(S),ts=n(S,"LI",{});var Gk=s(ts);Lle=n(Gk,"STRONG",{});var pit=s(Lle);$do=r(pit,"fnet"),pit.forEach(t),kdo=r(Gk," \u2014 "),QB=n(Gk,"A",{href:!0});var _it=s(QB);Sdo=r(_it,"FNetTokenizer"),_it.forEach(t),Rdo=r(Gk," or "),WB=n(Gk,"A",{href:!0});var uit=s(WB);Pdo=r(uit,"FNetTokenizerFast"),uit.forEach(t),Bdo=r(Gk," (FNet model)"),Gk.forEach(t),Ndo=i(S),ch=n(S,"LI",{});var wye=s(ch);yle=n(wye,"STRONG",{});var bit=s(yle);Ido=r(bit,"fsmt"),bit.forEach(t),qdo=r(wye," \u2014 "),HB=n(wye,"A",{href:!0});var vit=s(HB);jdo=r(vit,"FSMTTokenizer"),vit.forEach(t),Ddo=r(wye," (FairSeq Machine-Translation model)"),wye.forEach(t),Gdo=i(S),as=n(S,"LI",{});var Ok=s(as);xle=n(Ok,"STRONG",{});var Fit=s(xle);Odo=r(Fit,"funnel"),Fit.forEach(t),Vdo=r(Ok," \u2014 "),UB=n(Ok,"A",{href:!0});var Tit=s(UB);Xdo=r(Tit,"FunnelTokenizer"),Tit.forEach(t),zdo=r(Ok," or "),JB=n(Ok,"A",{href:!0});var Mit=s(JB);Qdo=r(Mit,"FunnelTokenizerFast"),Mit.forEach(t),Wdo=r(Ok," (Funnel Transformer model)"),Ok.forEach(t),Hdo=i(S),ns=n(S,"LI",{});var Vk=s(ns);$le=n(Vk,"STRONG",{});var Eit=s($le);Udo=r(Eit,"gpt2"),Eit.forEach(t),Jdo=r(Vk," \u2014 "),YB=n(Vk,"A",{href:!0});var Cit=s(YB);Ydo=r(Cit,"GPT2Tokenizer"),Cit.forEach(t),Kdo=r(Vk," or "),KB=n(Vk,"A",{href:!0});var wit=s(KB);Zdo=r(wit,"GPT2TokenizerFast"),wit.forEach(t),eco=r(Vk," (OpenAI GPT-2 model)"),Vk.forEach(t),oco=i(S),ss=n(S,"LI",{});var Xk=s(ss);kle=n(Xk,"STRONG",{});var Ait=s(kle);rco=r(Ait,"gpt_neo"),Ait.forEach(t),tco=r(Xk," \u2014 "),ZB=n(Xk,"A",{href:!0});var Lit=s(ZB);aco=r(Lit,"GPT2Tokenizer"),Lit.forEach(t),nco=r(Xk," or "),eN=n(Xk,"A",{href:!0});var yit=s(eN);sco=r(yit,"GPT2TokenizerFast"),yit.forEach(t),lco=r(Xk," (GPT Neo model)"),Xk.forEach(t),ico=i(S),fh=n(S,"LI",{});var Aye=s(fh);Sle=n(Aye,"STRONG",{});var xit=s(Sle);dco=r(xit,"gpt_neox"),xit.forEach(t),cco=r(Aye," \u2014 "),oN=n(Aye,"A",{href:!0});var $it=s(oN);fco=r($it,"GPTNeoXTokenizerFast"),$it.forEach(t),mco=r(Aye," (GPT NeoX model)"),Aye.forEach(t),gco=i(S),ls=n(S,"LI",{});var zk=s(ls);Rle=n(zk,"STRONG",{});var kit=s(Rle);hco=r(kit,"gptj"),kit.forEach(t),pco=r(zk," \u2014 "),rN=n(zk,"A",{href:!0});var Sit=s(rN);_co=r(Sit,"GPT2Tokenizer"),Sit.forEach(t),uco=r(zk," or "),tN=n(zk,"A",{href:!0});var Rit=s(tN);bco=r(Rit,"GPT2TokenizerFast"),Rit.forEach(t),vco=r(zk," (GPT-J model)"),zk.forEach(t),Fco=i(S),is=n(S,"LI",{});var Qk=s(is);Ple=n(Qk,"STRONG",{});var Pit=s(Ple);Tco=r(Pit,"groupvit"),Pit.forEach(t),Mco=r(Qk," \u2014 "),aN=n(Qk,"A",{href:!0});var Bit=s(aN);Eco=r(Bit,"CLIPTokenizer"),Bit.forEach(t),Cco=r(Qk," or "),nN=n(Qk,"A",{href:!0});var Nit=s(nN);wco=r(Nit,"CLIPTokenizerFast"),Nit.forEach(t),Aco=r(Qk," (GroupViT model)"),Qk.forEach(t),Lco=i(S),ds=n(S,"LI",{});var Wk=s(ds);Ble=n(Wk,"STRONG",{});var Iit=s(Ble);yco=r(Iit,"herbert"),Iit.forEach(t),xco=r(Wk," \u2014 "),sN=n(Wk,"A",{href:!0});var qit=s(sN);$co=r(qit,"HerbertTokenizer"),qit.forEach(t),kco=r(Wk," or "),lN=n(Wk,"A",{href:!0});var jit=s(lN);Sco=r(jit,"HerbertTokenizerFast"),jit.forEach(t),Rco=r(Wk," (HerBERT model)"),Wk.forEach(t),Pco=i(S),mh=n(S,"LI",{});var Lye=s(mh);Nle=n(Lye,"STRONG",{});var Dit=s(Nle);Bco=r(Dit,"hubert"),Dit.forEach(t),Nco=r(Lye," \u2014 "),iN=n(Lye,"A",{href:!0});var Git=s(iN);Ico=r(Git,"Wav2Vec2CTCTokenizer"),Git.forEach(t),qco=r(Lye," (Hubert model)"),Lye.forEach(t),jco=i(S),cs=n(S,"LI",{});var Hk=s(cs);Ile=n(Hk,"STRONG",{});var Oit=s(Ile);Dco=r(Oit,"ibert"),Oit.forEach(t),Gco=r(Hk," \u2014 "),dN=n(Hk,"A",{href:!0});var Vit=s(dN);Oco=r(Vit,"RobertaTokenizer"),Vit.forEach(t),Vco=r(Hk," or "),cN=n(Hk,"A",{href:!0});var Xit=s(cN);Xco=r(Xit,"RobertaTokenizerFast"),Xit.forEach(t),zco=r(Hk," (I-BERT model)"),Hk.forEach(t),Qco=i(S),fs=n(S,"LI",{});var Uk=s(fs);qle=n(Uk,"STRONG",{});var zit=s(qle);Wco=r(zit,"layoutlm"),zit.forEach(t),Hco=r(Uk," \u2014 "),fN=n(Uk,"A",{href:!0});var Qit=s(fN);Uco=r(Qit,"LayoutLMTokenizer"),Qit.forEach(t),Jco=r(Uk," or "),mN=n(Uk,"A",{href:!0});var Wit=s(mN);Yco=r(Wit,"LayoutLMTokenizerFast"),Wit.forEach(t),Kco=r(Uk," (LayoutLM model)"),Uk.forEach(t),Zco=i(S),ms=n(S,"LI",{});var Jk=s(ms);jle=n(Jk,"STRONG",{});var Hit=s(jle);efo=r(Hit,"layoutlmv2"),Hit.forEach(t),ofo=r(Jk," \u2014 "),gN=n(Jk,"A",{href:!0});var Uit=s(gN);rfo=r(Uit,"LayoutLMv2Tokenizer"),Uit.forEach(t),tfo=r(Jk," or "),hN=n(Jk,"A",{href:!0});var Jit=s(hN);afo=r(Jit,"LayoutLMv2TokenizerFast"),Jit.forEach(t),nfo=r(Jk," (LayoutLMv2 model)"),Jk.forEach(t),sfo=i(S),gs=n(S,"LI",{});var Yk=s(gs);Dle=n(Yk,"STRONG",{});var Yit=s(Dle);lfo=r(Yit,"layoutlmv3"),Yit.forEach(t),ifo=r(Yk," \u2014 "),pN=n(Yk,"A",{href:!0});var Kit=s(pN);dfo=r(Kit,"LayoutLMv3Tokenizer"),Kit.forEach(t),cfo=r(Yk," or "),_N=n(Yk,"A",{href:!0});var Zit=s(_N);ffo=r(Zit,"LayoutLMv3TokenizerFast"),Zit.forEach(t),mfo=r(Yk," (LayoutLMv3 model)"),Yk.forEach(t),gfo=i(S),hs=n(S,"LI",{});var Kk=s(hs);Gle=n(Kk,"STRONG",{});var edt=s(Gle);hfo=r(edt,"layoutxlm"),edt.forEach(t),pfo=r(Kk," \u2014 "),uN=n(Kk,"A",{href:!0});var odt=s(uN);_fo=r(odt,"LayoutXLMTokenizer"),odt.forEach(t),ufo=r(Kk," or "),bN=n(Kk,"A",{href:!0});var rdt=s(bN);bfo=r(rdt,"LayoutXLMTokenizerFast"),rdt.forEach(t),vfo=r(Kk," (LayoutXLM model)"),Kk.forEach(t),Ffo=i(S),ps=n(S,"LI",{});var Zk=s(ps);Ole=n(Zk,"STRONG",{});var tdt=s(Ole);Tfo=r(tdt,"led"),tdt.forEach(t),Mfo=r(Zk," \u2014 "),vN=n(Zk,"A",{href:!0});var adt=s(vN);Efo=r(adt,"LEDTokenizer"),adt.forEach(t),Cfo=r(Zk," or "),FN=n(Zk,"A",{href:!0});var ndt=s(FN);wfo=r(ndt,"LEDTokenizerFast"),ndt.forEach(t),Afo=r(Zk," (LED model)"),Zk.forEach(t),Lfo=i(S),_s=n(S,"LI",{});var eS=s(_s);Vle=n(eS,"STRONG",{});var sdt=s(Vle);yfo=r(sdt,"longformer"),sdt.forEach(t),xfo=r(eS," \u2014 "),TN=n(eS,"A",{href:!0});var ldt=s(TN);$fo=r(ldt,"LongformerTokenizer"),ldt.forEach(t),kfo=r(eS," or "),MN=n(eS,"A",{href:!0});var idt=s(MN);Sfo=r(idt,"LongformerTokenizerFast"),idt.forEach(t),Rfo=r(eS," (Longformer model)"),eS.forEach(t),Pfo=i(S),us=n(S,"LI",{});var oS=s(us);Xle=n(oS,"STRONG",{});var ddt=s(Xle);Bfo=r(ddt,"longt5"),ddt.forEach(t),Nfo=r(oS," \u2014 "),EN=n(oS,"A",{href:!0});var cdt=s(EN);Ifo=r(cdt,"T5Tokenizer"),cdt.forEach(t),qfo=r(oS," or "),CN=n(oS,"A",{href:!0});var fdt=s(CN);jfo=r(fdt,"T5TokenizerFast"),fdt.forEach(t),Dfo=r(oS," (LongT5 model)"),oS.forEach(t),Gfo=i(S),gh=n(S,"LI",{});var yye=s(gh);zle=n(yye,"STRONG",{});var mdt=s(zle);Ofo=r(mdt,"luke"),mdt.forEach(t),Vfo=r(yye," \u2014 "),wN=n(yye,"A",{href:!0});var gdt=s(wN);Xfo=r(gdt,"LukeTokenizer"),gdt.forEach(t),zfo=r(yye," (LUKE model)"),yye.forEach(t),Qfo=i(S),bs=n(S,"LI",{});var rS=s(bs);Qle=n(rS,"STRONG",{});var hdt=s(Qle);Wfo=r(hdt,"lxmert"),hdt.forEach(t),Hfo=r(rS," \u2014 "),AN=n(rS,"A",{href:!0});var pdt=s(AN);Ufo=r(pdt,"LxmertTokenizer"),pdt.forEach(t),Jfo=r(rS," or "),LN=n(rS,"A",{href:!0});var _dt=s(LN);Yfo=r(_dt,"LxmertTokenizerFast"),_dt.forEach(t),Kfo=r(rS," (LXMERT model)"),rS.forEach(t),Zfo=i(S),hh=n(S,"LI",{});var xye=s(hh);Wle=n(xye,"STRONG",{});var udt=s(Wle);emo=r(udt,"m2m_100"),udt.forEach(t),omo=r(xye," \u2014 "),yN=n(xye,"A",{href:!0});var bdt=s(yN);rmo=r(bdt,"M2M100Tokenizer"),bdt.forEach(t),tmo=r(xye," (M2M100 model)"),xye.forEach(t),amo=i(S),ph=n(S,"LI",{});var $ye=s(ph);Hle=n($ye,"STRONG",{});var vdt=s(Hle);nmo=r(vdt,"marian"),vdt.forEach(t),smo=r($ye," \u2014 "),xN=n($ye,"A",{href:!0});var Fdt=s(xN);lmo=r(Fdt,"MarianTokenizer"),Fdt.forEach(t),imo=r($ye," (Marian model)"),$ye.forEach(t),dmo=i(S),vs=n(S,"LI",{});var tS=s(vs);Ule=n(tS,"STRONG",{});var Tdt=s(Ule);cmo=r(Tdt,"mbart"),Tdt.forEach(t),fmo=r(tS," \u2014 "),$N=n(tS,"A",{href:!0});var Mdt=s($N);mmo=r(Mdt,"MBartTokenizer"),Mdt.forEach(t),gmo=r(tS," or "),kN=n(tS,"A",{href:!0});var Edt=s(kN);hmo=r(Edt,"MBartTokenizerFast"),Edt.forEach(t),pmo=r(tS," (mBART model)"),tS.forEach(t),_mo=i(S),Fs=n(S,"LI",{});var aS=s(Fs);Jle=n(aS,"STRONG",{});var Cdt=s(Jle);umo=r(Cdt,"mbart50"),Cdt.forEach(t),bmo=r(aS," \u2014 "),SN=n(aS,"A",{href:!0});var wdt=s(SN);vmo=r(wdt,"MBart50Tokenizer"),wdt.forEach(t),Fmo=r(aS," or "),RN=n(aS,"A",{href:!0});var Adt=s(RN);Tmo=r(Adt,"MBart50TokenizerFast"),Adt.forEach(t),Mmo=r(aS," (mBART-50 model)"),aS.forEach(t),Emo=i(S),Ts=n(S,"LI",{});var nS=s(Ts);Yle=n(nS,"STRONG",{});var Ldt=s(Yle);Cmo=r(Ldt,"megatron-bert"),Ldt.forEach(t),wmo=r(nS," \u2014 "),PN=n(nS,"A",{href:!0});var ydt=s(PN);Amo=r(ydt,"BertTokenizer"),ydt.forEach(t),Lmo=r(nS," or "),BN=n(nS,"A",{href:!0});var xdt=s(BN);ymo=r(xdt,"BertTokenizerFast"),xdt.forEach(t),xmo=r(nS," (Megatron-BERT model)"),nS.forEach(t),$mo=i(S),_h=n(S,"LI",{});var kye=s(_h);Kle=n(kye,"STRONG",{});var $dt=s(Kle);kmo=r($dt,"mluke"),$dt.forEach(t),Smo=r(kye," \u2014 "),NN=n(kye,"A",{href:!0});var kdt=s(NN);Rmo=r(kdt,"MLukeTokenizer"),kdt.forEach(t),Pmo=r(kye," (mLUKE model)"),kye.forEach(t),Bmo=i(S),Ms=n(S,"LI",{});var sS=s(Ms);Zle=n(sS,"STRONG",{});var Sdt=s(Zle);Nmo=r(Sdt,"mobilebert"),Sdt.forEach(t),Imo=r(sS," \u2014 "),IN=n(sS,"A",{href:!0});var Rdt=s(IN);qmo=r(Rdt,"MobileBertTokenizer"),Rdt.forEach(t),jmo=r(sS," or "),qN=n(sS,"A",{href:!0});var Pdt=s(qN);Dmo=r(Pdt,"MobileBertTokenizerFast"),Pdt.forEach(t),Gmo=r(sS," (MobileBERT model)"),sS.forEach(t),Omo=i(S),Es=n(S,"LI",{});var lS=s(Es);eie=n(lS,"STRONG",{});var Bdt=s(eie);Vmo=r(Bdt,"mpnet"),Bdt.forEach(t),Xmo=r(lS," \u2014 "),jN=n(lS,"A",{href:!0});var Ndt=s(jN);zmo=r(Ndt,"MPNetTokenizer"),Ndt.forEach(t),Qmo=r(lS," or "),DN=n(lS,"A",{href:!0});var Idt=s(DN);Wmo=r(Idt,"MPNetTokenizerFast"),Idt.forEach(t),Hmo=r(lS," (MPNet model)"),lS.forEach(t),Umo=i(S),Cs=n(S,"LI",{});var iS=s(Cs);oie=n(iS,"STRONG",{});var qdt=s(oie);Jmo=r(qdt,"mt5"),qdt.forEach(t),Ymo=r(iS," \u2014 "),GN=n(iS,"A",{href:!0});var jdt=s(GN);Kmo=r(jdt,"MT5Tokenizer"),jdt.forEach(t),Zmo=r(iS," or "),ON=n(iS,"A",{href:!0});var Ddt=s(ON);ego=r(Ddt,"MT5TokenizerFast"),Ddt.forEach(t),ogo=r(iS," (MT5 model)"),iS.forEach(t),rgo=i(S),ws=n(S,"LI",{});var dS=s(ws);rie=n(dS,"STRONG",{});var Gdt=s(rie);tgo=r(Gdt,"mvp"),Gdt.forEach(t),ago=r(dS," \u2014 "),VN=n(dS,"A",{href:!0});var Odt=s(VN);ngo=r(Odt,"MvpTokenizer"),Odt.forEach(t),sgo=r(dS," or "),XN=n(dS,"A",{href:!0});var Vdt=s(XN);lgo=r(Vdt,"MvpTokenizerFast"),Vdt.forEach(t),igo=r(dS," (MVP model)"),dS.forEach(t),dgo=i(S),As=n(S,"LI",{});var cS=s(As);tie=n(cS,"STRONG",{});var Xdt=s(tie);cgo=r(Xdt,"nezha"),Xdt.forEach(t),fgo=r(cS," \u2014 "),zN=n(cS,"A",{href:!0});var zdt=s(zN);mgo=r(zdt,"BertTokenizer"),zdt.forEach(t),ggo=r(cS," or "),QN=n(cS,"A",{href:!0});var Qdt=s(QN);hgo=r(Qdt,"BertTokenizerFast"),Qdt.forEach(t),pgo=r(cS," (Nezha model)"),cS.forEach(t),_go=i(S),Ls=n(S,"LI",{});var fS=s(Ls);aie=n(fS,"STRONG",{});var Wdt=s(aie);ugo=r(Wdt,"nystromformer"),Wdt.forEach(t),bgo=r(fS," \u2014 "),WN=n(fS,"A",{href:!0});var Hdt=s(WN);vgo=r(Hdt,"AlbertTokenizer"),Hdt.forEach(t),Fgo=r(fS," or "),HN=n(fS,"A",{href:!0});var Udt=s(HN);Tgo=r(Udt,"AlbertTokenizerFast"),Udt.forEach(t),Mgo=r(fS," (Nystr\xF6mformer model)"),fS.forEach(t),Ego=i(S),ys=n(S,"LI",{});var mS=s(ys);nie=n(mS,"STRONG",{});var Jdt=s(nie);Cgo=r(Jdt,"openai-gpt"),Jdt.forEach(t),wgo=r(mS," \u2014 "),UN=n(mS,"A",{href:!0});var Ydt=s(UN);Ago=r(Ydt,"OpenAIGPTTokenizer"),Ydt.forEach(t),Lgo=r(mS," or "),JN=n(mS,"A",{href:!0});var Kdt=s(JN);ygo=r(Kdt,"OpenAIGPTTokenizerFast"),Kdt.forEach(t),xgo=r(mS," (OpenAI GPT model)"),mS.forEach(t),$go=i(S),uh=n(S,"LI",{});var Sye=s(uh);sie=n(Sye,"STRONG",{});var Zdt=s(sie);kgo=r(Zdt,"opt"),Zdt.forEach(t),Sgo=r(Sye," \u2014 "),YN=n(Sye,"A",{href:!0});var ect=s(YN);Rgo=r(ect,"GPT2Tokenizer"),ect.forEach(t),Pgo=r(Sye," (OPT model)"),Sye.forEach(t),Bgo=i(S),xs=n(S,"LI",{});var gS=s(xs);lie=n(gS,"STRONG",{});var oct=s(lie);Ngo=r(oct,"pegasus"),oct.forEach(t),Igo=r(gS," \u2014 "),KN=n(gS,"A",{href:!0});var rct=s(KN);qgo=r(rct,"PegasusTokenizer"),rct.forEach(t),jgo=r(gS," or "),ZN=n(gS,"A",{href:!0});var tct=s(ZN);Dgo=r(tct,"PegasusTokenizerFast"),tct.forEach(t),Ggo=r(gS," (Pegasus model)"),gS.forEach(t),Ogo=i(S),bh=n(S,"LI",{});var Rye=s(bh);iie=n(Rye,"STRONG",{});var act=s(iie);Vgo=r(act,"perceiver"),act.forEach(t),Xgo=r(Rye," \u2014 "),eI=n(Rye,"A",{href:!0});var nct=s(eI);zgo=r(nct,"PerceiverTokenizer"),nct.forEach(t),Qgo=r(Rye," (Perceiver model)"),Rye.forEach(t),Wgo=i(S),vh=n(S,"LI",{});var Pye=s(vh);die=n(Pye,"STRONG",{});var sct=s(die);Hgo=r(sct,"phobert"),sct.forEach(t),Ugo=r(Pye," \u2014 "),oI=n(Pye,"A",{href:!0});var lct=s(oI);Jgo=r(lct,"PhobertTokenizer"),lct.forEach(t),Ygo=r(Pye," (PhoBERT model)"),Pye.forEach(t),Kgo=i(S),Fh=n(S,"LI",{});var Bye=s(Fh);cie=n(Bye,"STRONG",{});var ict=s(cie);Zgo=r(ict,"plbart"),ict.forEach(t),eho=r(Bye," \u2014 "),rI=n(Bye,"A",{href:!0});var dct=s(rI);oho=r(dct,"PLBartTokenizer"),dct.forEach(t),rho=r(Bye," (PLBart model)"),Bye.forEach(t),tho=i(S),Th=n(S,"LI",{});var Nye=s(Th);fie=n(Nye,"STRONG",{});var cct=s(fie);aho=r(cct,"prophetnet"),cct.forEach(t),nho=r(Nye," \u2014 "),tI=n(Nye,"A",{href:!0});var fct=s(tI);sho=r(fct,"ProphetNetTokenizer"),fct.forEach(t),lho=r(Nye," (ProphetNet model)"),Nye.forEach(t),iho=i(S),$s=n(S,"LI",{});var hS=s($s);mie=n(hS,"STRONG",{});var mct=s(mie);dho=r(mct,"qdqbert"),mct.forEach(t),cho=r(hS," \u2014 "),aI=n(hS,"A",{href:!0});var gct=s(aI);fho=r(gct,"BertTokenizer"),gct.forEach(t),mho=r(hS," or "),nI=n(hS,"A",{href:!0});var hct=s(nI);gho=r(hct,"BertTokenizerFast"),hct.forEach(t),hho=r(hS," (QDQBert model)"),hS.forEach(t),pho=i(S),Mh=n(S,"LI",{});var Iye=s(Mh);gie=n(Iye,"STRONG",{});var pct=s(gie);_ho=r(pct,"rag"),pct.forEach(t),uho=r(Iye," \u2014 "),sI=n(Iye,"A",{href:!0});var _ct=s(sI);bho=r(_ct,"RagTokenizer"),_ct.forEach(t),vho=r(Iye," (RAG model)"),Iye.forEach(t),Fho=i(S),ks=n(S,"LI",{});var pS=s(ks);hie=n(pS,"STRONG",{});var uct=s(hie);Tho=r(uct,"realm"),uct.forEach(t),Mho=r(pS," \u2014 "),lI=n(pS,"A",{href:!0});var bct=s(lI);Eho=r(bct,"RealmTokenizer"),bct.forEach(t),Cho=r(pS," or "),iI=n(pS,"A",{href:!0});var vct=s(iI);who=r(vct,"RealmTokenizerFast"),vct.forEach(t),Aho=r(pS," (REALM model)"),pS.forEach(t),Lho=i(S),Ss=n(S,"LI",{});var _S=s(Ss);pie=n(_S,"STRONG",{});var Fct=s(pie);yho=r(Fct,"reformer"),Fct.forEach(t),xho=r(_S," \u2014 "),dI=n(_S,"A",{href:!0});var Tct=s(dI);$ho=r(Tct,"ReformerTokenizer"),Tct.forEach(t),kho=r(_S," or "),cI=n(_S,"A",{href:!0});var Mct=s(cI);Sho=r(Mct,"ReformerTokenizerFast"),Mct.forEach(t),Rho=r(_S," (Reformer model)"),_S.forEach(t),Pho=i(S),Rs=n(S,"LI",{});var uS=s(Rs);_ie=n(uS,"STRONG",{});var Ect=s(_ie);Bho=r(Ect,"rembert"),Ect.forEach(t),Nho=r(uS," \u2014 "),fI=n(uS,"A",{href:!0});var Cct=s(fI);Iho=r(Cct,"RemBertTokenizer"),Cct.forEach(t),qho=r(uS," or "),mI=n(uS,"A",{href:!0});var wct=s(mI);jho=r(wct,"RemBertTokenizerFast"),wct.forEach(t),Dho=r(uS," (RemBERT model)"),uS.forEach(t),Gho=i(S),Ps=n(S,"LI",{});var bS=s(Ps);uie=n(bS,"STRONG",{});var Act=s(uie);Oho=r(Act,"retribert"),Act.forEach(t),Vho=r(bS," \u2014 "),gI=n(bS,"A",{href:!0});var Lct=s(gI);Xho=r(Lct,"RetriBertTokenizer"),Lct.forEach(t),zho=r(bS," or "),hI=n(bS,"A",{href:!0});var yct=s(hI);Qho=r(yct,"RetriBertTokenizerFast"),yct.forEach(t),Who=r(bS," (RetriBERT model)"),bS.forEach(t),Hho=i(S),Bs=n(S,"LI",{});var vS=s(Bs);bie=n(vS,"STRONG",{});var xct=s(bie);Uho=r(xct,"roberta"),xct.forEach(t),Jho=r(vS," \u2014 "),pI=n(vS,"A",{href:!0});var $ct=s(pI);Yho=r($ct,"RobertaTokenizer"),$ct.forEach(t),Kho=r(vS," or "),_I=n(vS,"A",{href:!0});var kct=s(_I);Zho=r(kct,"RobertaTokenizerFast"),kct.forEach(t),epo=r(vS," (RoBERTa model)"),vS.forEach(t),opo=i(S),Ns=n(S,"LI",{});var FS=s(Ns);vie=n(FS,"STRONG",{});var Sct=s(vie);rpo=r(Sct,"roformer"),Sct.forEach(t),tpo=r(FS," \u2014 "),uI=n(FS,"A",{href:!0});var Rct=s(uI);apo=r(Rct,"RoFormerTokenizer"),Rct.forEach(t),npo=r(FS," or "),bI=n(FS,"A",{href:!0});var Pct=s(bI);spo=r(Pct,"RoFormerTokenizerFast"),Pct.forEach(t),lpo=r(FS," (RoFormer model)"),FS.forEach(t),ipo=i(S),Eh=n(S,"LI",{});var qye=s(Eh);Fie=n(qye,"STRONG",{});var Bct=s(Fie);dpo=r(Bct,"speech_to_text"),Bct.forEach(t),cpo=r(qye," \u2014 "),vI=n(qye,"A",{href:!0});var Nct=s(vI);fpo=r(Nct,"Speech2TextTokenizer"),Nct.forEach(t),mpo=r(qye," (Speech2Text model)"),qye.forEach(t),gpo=i(S),Ch=n(S,"LI",{});var jye=s(Ch);Tie=n(jye,"STRONG",{});var Ict=s(Tie);hpo=r(Ict,"speech_to_text_2"),Ict.forEach(t),ppo=r(jye," \u2014 "),FI=n(jye,"A",{href:!0});var qct=s(FI);_po=r(qct,"Speech2Text2Tokenizer"),qct.forEach(t),upo=r(jye," (Speech2Text2 model)"),jye.forEach(t),bpo=i(S),Is=n(S,"LI",{});var TS=s(Is);Mie=n(TS,"STRONG",{});var jct=s(Mie);vpo=r(jct,"splinter"),jct.forEach(t),Fpo=r(TS," \u2014 "),TI=n(TS,"A",{href:!0});var Dct=s(TI);Tpo=r(Dct,"SplinterTokenizer"),Dct.forEach(t),Mpo=r(TS," or "),MI=n(TS,"A",{href:!0});var Gct=s(MI);Epo=r(Gct,"SplinterTokenizerFast"),Gct.forEach(t),Cpo=r(TS," (Splinter model)"),TS.forEach(t),wpo=i(S),qs=n(S,"LI",{});var MS=s(qs);Eie=n(MS,"STRONG",{});var Oct=s(Eie);Apo=r(Oct,"squeezebert"),Oct.forEach(t),Lpo=r(MS," \u2014 "),EI=n(MS,"A",{href:!0});var Vct=s(EI);ypo=r(Vct,"SqueezeBertTokenizer"),Vct.forEach(t),xpo=r(MS," or "),CI=n(MS,"A",{href:!0});var Xct=s(CI);$po=r(Xct,"SqueezeBertTokenizerFast"),Xct.forEach(t),kpo=r(MS," (SqueezeBERT model)"),MS.forEach(t),Spo=i(S),js=n(S,"LI",{});var ES=s(js);Cie=n(ES,"STRONG",{});var zct=s(Cie);Rpo=r(zct,"t5"),zct.forEach(t),Ppo=r(ES," \u2014 "),wI=n(ES,"A",{href:!0});var Qct=s(wI);Bpo=r(Qct,"T5Tokenizer"),Qct.forEach(t),Npo=r(ES," or "),AI=n(ES,"A",{href:!0});var Wct=s(AI);Ipo=r(Wct,"T5TokenizerFast"),Wct.forEach(t),qpo=r(ES," (T5 model)"),ES.forEach(t),jpo=i(S),wh=n(S,"LI",{});var Dye=s(wh);wie=n(Dye,"STRONG",{});var Hct=s(wie);Dpo=r(Hct,"tapas"),Hct.forEach(t),Gpo=r(Dye," \u2014 "),LI=n(Dye,"A",{href:!0});var Uct=s(LI);Opo=r(Uct,"TapasTokenizer"),Uct.forEach(t),Vpo=r(Dye," (TAPAS model)"),Dye.forEach(t),Xpo=i(S),Ah=n(S,"LI",{});var Gye=s(Ah);Aie=n(Gye,"STRONG",{});var Jct=s(Aie);zpo=r(Jct,"tapex"),Jct.forEach(t),Qpo=r(Gye," \u2014 "),yI=n(Gye,"A",{href:!0});var Yct=s(yI);Wpo=r(Yct,"TapexTokenizer"),Yct.forEach(t),Hpo=r(Gye," (TAPEX model)"),Gye.forEach(t),Upo=i(S),Lh=n(S,"LI",{});var Oye=s(Lh);Lie=n(Oye,"STRONG",{});var Kct=s(Lie);Jpo=r(Kct,"transfo-xl"),Kct.forEach(t),Ypo=r(Oye," \u2014 "),xI=n(Oye,"A",{href:!0});var Zct=s(xI);Kpo=r(Zct,"TransfoXLTokenizer"),Zct.forEach(t),Zpo=r(Oye," (Transformer-XL model)"),Oye.forEach(t),e_o=i(S),Ds=n(S,"LI",{});var CS=s(Ds);yie=n(CS,"STRONG",{});var eft=s(yie);o_o=r(eft,"vilt"),eft.forEach(t),r_o=r(CS," \u2014 "),$I=n(CS,"A",{href:!0});var oft=s($I);t_o=r(oft,"BertTokenizer"),oft.forEach(t),a_o=r(CS," or "),kI=n(CS,"A",{href:!0});var rft=s(kI);n_o=r(rft,"BertTokenizerFast"),rft.forEach(t),s_o=r(CS," (ViLT model)"),CS.forEach(t),l_o=i(S),Gs=n(S,"LI",{});var wS=s(Gs);xie=n(wS,"STRONG",{});var tft=s(xie);i_o=r(tft,"visual_bert"),tft.forEach(t),d_o=r(wS," \u2014 "),SI=n(wS,"A",{href:!0});var aft=s(SI);c_o=r(aft,"BertTokenizer"),aft.forEach(t),f_o=r(wS," or "),RI=n(wS,"A",{href:!0});var nft=s(RI);m_o=r(nft,"BertTokenizerFast"),nft.forEach(t),g_o=r(wS," (VisualBERT model)"),wS.forEach(t),h_o=i(S),yh=n(S,"LI",{});var Vye=s(yh);$ie=n(Vye,"STRONG",{});var sft=s($ie);p_o=r(sft,"wav2vec2"),sft.forEach(t),__o=r(Vye," \u2014 "),PI=n(Vye,"A",{href:!0});var lft=s(PI);u_o=r(lft,"Wav2Vec2CTCTokenizer"),lft.forEach(t),b_o=r(Vye," (Wav2Vec2 model)"),Vye.forEach(t),v_o=i(S),xh=n(S,"LI",{});var Xye=s(xh);kie=n(Xye,"STRONG",{});var ift=s(kie);F_o=r(ift,"wav2vec2-conformer"),ift.forEach(t),T_o=r(Xye," \u2014 "),BI=n(Xye,"A",{href:!0});var dft=s(BI);M_o=r(dft,"Wav2Vec2CTCTokenizer"),dft.forEach(t),E_o=r(Xye," (Wav2Vec2-Conformer model)"),Xye.forEach(t),C_o=i(S),$h=n(S,"LI",{});var zye=s($h);Sie=n(zye,"STRONG",{});var cft=s(Sie);w_o=r(cft,"wav2vec2_phoneme"),cft.forEach(t),A_o=r(zye," \u2014 "),NI=n(zye,"A",{href:!0});var fft=s(NI);L_o=r(fft,"Wav2Vec2PhonemeCTCTokenizer"),fft.forEach(t),y_o=r(zye," (Wav2Vec2Phoneme model)"),zye.forEach(t),x_o=i(S),Os=n(S,"LI",{});var AS=s(Os);Rie=n(AS,"STRONG",{});var mft=s(Rie);$_o=r(mft,"xglm"),mft.forEach(t),k_o=r(AS," \u2014 "),II=n(AS,"A",{href:!0});var gft=s(II);S_o=r(gft,"XGLMTokenizer"),gft.forEach(t),R_o=r(AS," or "),qI=n(AS,"A",{href:!0});var hft=s(qI);P_o=r(hft,"XGLMTokenizerFast"),hft.forEach(t),B_o=r(AS," (XGLM model)"),AS.forEach(t),N_o=i(S),kh=n(S,"LI",{});var Qye=s(kh);Pie=n(Qye,"STRONG",{});var pft=s(Pie);I_o=r(pft,"xlm"),pft.forEach(t),q_o=r(Qye," \u2014 "),jI=n(Qye,"A",{href:!0});var _ft=s(jI);j_o=r(_ft,"XLMTokenizer"),_ft.forEach(t),D_o=r(Qye," (XLM model)"),Qye.forEach(t),G_o=i(S),Sh=n(S,"LI",{});var Wye=s(Sh);Bie=n(Wye,"STRONG",{});var uft=s(Bie);O_o=r(uft,"xlm-prophetnet"),uft.forEach(t),V_o=r(Wye," \u2014 "),DI=n(Wye,"A",{href:!0});var bft=s(DI);X_o=r(bft,"XLMProphetNetTokenizer"),bft.forEach(t),z_o=r(Wye," (XLM-ProphetNet model)"),Wye.forEach(t),Q_o=i(S),Vs=n(S,"LI",{});var LS=s(Vs);Nie=n(LS,"STRONG",{});var vft=s(Nie);W_o=r(vft,"xlm-roberta"),vft.forEach(t),H_o=r(LS," \u2014 "),GI=n(LS,"A",{href:!0});var Fft=s(GI);U_o=r(Fft,"XLMRobertaTokenizer"),Fft.forEach(t),J_o=r(LS," or "),OI=n(LS,"A",{href:!0});var Tft=s(OI);Y_o=r(Tft,"XLMRobertaTokenizerFast"),Tft.forEach(t),K_o=r(LS," (XLM-RoBERTa model)"),LS.forEach(t),Z_o=i(S),Xs=n(S,"LI",{});var yS=s(Xs);Iie=n(yS,"STRONG",{});var Mft=s(Iie);euo=r(Mft,"xlm-roberta-xl"),Mft.forEach(t),ouo=r(yS," \u2014 "),VI=n(yS,"A",{href:!0});var Eft=s(VI);ruo=r(Eft,"RobertaTokenizer"),Eft.forEach(t),tuo=r(yS," or "),XI=n(yS,"A",{href:!0});var Cft=s(XI);auo=r(Cft,"RobertaTokenizerFast"),Cft.forEach(t),nuo=r(yS," (XLM-RoBERTa-XL model)"),yS.forEach(t),suo=i(S),zs=n(S,"LI",{});var xS=s(zs);qie=n(xS,"STRONG",{});var wft=s(qie);luo=r(wft,"xlnet"),wft.forEach(t),iuo=r(xS," \u2014 "),zI=n(xS,"A",{href:!0});var Aft=s(zI);duo=r(Aft,"XLNetTokenizer"),Aft.forEach(t),cuo=r(xS," or "),QI=n(xS,"A",{href:!0});var Lft=s(QI);fuo=r(Lft,"XLNetTokenizerFast"),Lft.forEach(t),muo=r(xS," (XLNet model)"),xS.forEach(t),guo=i(S),Qs=n(S,"LI",{});var $S=s(Qs);jie=n($S,"STRONG",{});var yft=s(jie);huo=r(yft,"yoso"),yft.forEach(t),puo=r($S," \u2014 "),WI=n($S,"A",{href:!0});var xft=s(WI);_uo=r(xft,"AlbertTokenizer"),xft.forEach(t),uuo=r($S," or "),HI=n($S,"A",{href:!0});var $ft=s(HI);buo=r($ft,"AlbertTokenizerFast"),$ft.forEach(t),vuo=r($S," (YOSO model)"),$S.forEach(t),S.forEach(t),Fuo=i(Ks),T(Rh.$$.fragment,Ks),Ks.forEach(t),Tuo=i(Ys),Ph=n(Ys,"DIV",{class:!0});var cQe=s(Ph);T(bL.$$.fragment,cQe),Muo=i(cQe),Die=n(cQe,"P",{});var kft=s(Die);Euo=r(kft,"Register a new tokenizer in this mapping."),kft.forEach(t),cQe.forEach(t),Ys.forEach(t),dXe=i(f),Ii=n(f,"H2",{class:!0});var fQe=s(Ii);Bh=n(fQe,"A",{id:!0,class:!0,href:!0});var Sft=s(Bh);Gie=n(Sft,"SPAN",{});var Rft=s(Gie);T(vL.$$.fragment,Rft),Rft.forEach(t),Sft.forEach(t),Cuo=i(fQe),Oie=n(fQe,"SPAN",{});var Pft=s(Oie);wuo=r(Pft,"AutoFeatureExtractor"),Pft.forEach(t),fQe.forEach(t),cXe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(FL.$$.fragment,Zs),Auo=i(Zs),TL=n(Zs,"P",{});var mQe=s(TL);Luo=r(mQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UI=n(mQe,"A",{href:!0});var Bft=s(UI);yuo=r(Bft,"AutoFeatureExtractor.from_pretrained()"),Bft.forEach(t),xuo=r(mQe," class method."),mQe.forEach(t),$uo=i(Zs),ML=n(Zs,"P",{});var gQe=s(ML);kuo=r(gQe,"This class cannot be instantiated directly using "),Vie=n(gQe,"CODE",{});var Nft=s(Vie);Suo=r(Nft,"__init__()"),Nft.forEach(t),Ruo=r(gQe," (throws an error)."),gQe.forEach(t),Puo=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(EL.$$.fragment,aa),Buo=i(aa),Xie=n(aa,"P",{});var Ift=s(Xie);Nuo=r(Ift,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ift.forEach(t),Iuo=i(aa),Ba=n(aa,"P",{});var iA=s(Ba);quo=r(iA,"The feature extractor class to instantiate is selected based on the "),zie=n(iA,"CODE",{});var qft=s(zie);juo=r(qft,"model_type"),qft.forEach(t),Duo=r(iA,` property of the config object
(either passed as an argument or loaded from `),Qie=n(iA,"CODE",{});var jft=s(Qie);Guo=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),Ouo=r(iA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wie=n(iA,"CODE",{});var Dft=s(Wie);Vuo=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),Xuo=r(iA,":"),iA.forEach(t),zuo=i(aa),J=n(aa,"UL",{});var K=s(J);Nh=n(K,"LI",{});var Hye=s(Nh);Hie=n(Hye,"STRONG",{});var Gft=s(Hie);Quo=r(Gft,"beit"),Gft.forEach(t),Wuo=r(Hye," \u2014 "),JI=n(Hye,"A",{href:!0});var Oft=s(JI);Huo=r(Oft,"BeitFeatureExtractor"),Oft.forEach(t),Uuo=r(Hye," (BEiT model)"),Hye.forEach(t),Juo=i(K),Ih=n(K,"LI",{});var Uye=s(Ih);Uie=n(Uye,"STRONG",{});var Vft=s(Uie);Yuo=r(Vft,"clip"),Vft.forEach(t),Kuo=r(Uye," \u2014 "),YI=n(Uye,"A",{href:!0});var Xft=s(YI);Zuo=r(Xft,"CLIPFeatureExtractor"),Xft.forEach(t),e1o=r(Uye," (CLIP model)"),Uye.forEach(t),o1o=i(K),qh=n(K,"LI",{});var Jye=s(qh);Jie=n(Jye,"STRONG",{});var zft=s(Jie);r1o=r(zft,"convnext"),zft.forEach(t),t1o=r(Jye," \u2014 "),KI=n(Jye,"A",{href:!0});var Qft=s(KI);a1o=r(Qft,"ConvNextFeatureExtractor"),Qft.forEach(t),n1o=r(Jye," (ConvNeXT model)"),Jye.forEach(t),s1o=i(K),jh=n(K,"LI",{});var Yye=s(jh);Yie=n(Yye,"STRONG",{});var Wft=s(Yie);l1o=r(Wft,"cvt"),Wft.forEach(t),i1o=r(Yye," \u2014 "),ZI=n(Yye,"A",{href:!0});var Hft=s(ZI);d1o=r(Hft,"ConvNextFeatureExtractor"),Hft.forEach(t),c1o=r(Yye," (CvT model)"),Yye.forEach(t),f1o=i(K),Dh=n(K,"LI",{});var Kye=s(Dh);Kie=n(Kye,"STRONG",{});var Uft=s(Kie);m1o=r(Uft,"data2vec-audio"),Uft.forEach(t),g1o=r(Kye," \u2014 "),eq=n(Kye,"A",{href:!0});var Jft=s(eq);h1o=r(Jft,"Wav2Vec2FeatureExtractor"),Jft.forEach(t),p1o=r(Kye," (Data2VecAudio model)"),Kye.forEach(t),_1o=i(K),Gh=n(K,"LI",{});var Zye=s(Gh);Zie=n(Zye,"STRONG",{});var Yft=s(Zie);u1o=r(Yft,"data2vec-vision"),Yft.forEach(t),b1o=r(Zye," \u2014 "),oq=n(Zye,"A",{href:!0});var Kft=s(oq);v1o=r(Kft,"BeitFeatureExtractor"),Kft.forEach(t),F1o=r(Zye," (Data2VecVision model)"),Zye.forEach(t),T1o=i(K),Oh=n(K,"LI",{});var e9e=s(Oh);ede=n(e9e,"STRONG",{});var Zft=s(ede);M1o=r(Zft,"deit"),Zft.forEach(t),E1o=r(e9e," \u2014 "),rq=n(e9e,"A",{href:!0});var emt=s(rq);C1o=r(emt,"DeiTFeatureExtractor"),emt.forEach(t),w1o=r(e9e," (DeiT model)"),e9e.forEach(t),A1o=i(K),Vh=n(K,"LI",{});var o9e=s(Vh);ode=n(o9e,"STRONG",{});var omt=s(ode);L1o=r(omt,"detr"),omt.forEach(t),y1o=r(o9e," \u2014 "),tq=n(o9e,"A",{href:!0});var rmt=s(tq);x1o=r(rmt,"DetrFeatureExtractor"),rmt.forEach(t),$1o=r(o9e," (DETR model)"),o9e.forEach(t),k1o=i(K),Xh=n(K,"LI",{});var r9e=s(Xh);rde=n(r9e,"STRONG",{});var tmt=s(rde);S1o=r(tmt,"dpt"),tmt.forEach(t),R1o=r(r9e," \u2014 "),aq=n(r9e,"A",{href:!0});var amt=s(aq);P1o=r(amt,"DPTFeatureExtractor"),amt.forEach(t),B1o=r(r9e," (DPT model)"),r9e.forEach(t),N1o=i(K),zh=n(K,"LI",{});var t9e=s(zh);tde=n(t9e,"STRONG",{});var nmt=s(tde);I1o=r(nmt,"flava"),nmt.forEach(t),q1o=r(t9e," \u2014 "),nq=n(t9e,"A",{href:!0});var smt=s(nq);j1o=r(smt,"FlavaFeatureExtractor"),smt.forEach(t),D1o=r(t9e," (FLAVA model)"),t9e.forEach(t),G1o=i(K),Qh=n(K,"LI",{});var a9e=s(Qh);ade=n(a9e,"STRONG",{});var lmt=s(ade);O1o=r(lmt,"glpn"),lmt.forEach(t),V1o=r(a9e," \u2014 "),sq=n(a9e,"A",{href:!0});var imt=s(sq);X1o=r(imt,"GLPNFeatureExtractor"),imt.forEach(t),z1o=r(a9e," (GLPN model)"),a9e.forEach(t),Q1o=i(K),Wh=n(K,"LI",{});var n9e=s(Wh);nde=n(n9e,"STRONG",{});var dmt=s(nde);W1o=r(dmt,"groupvit"),dmt.forEach(t),H1o=r(n9e," \u2014 "),lq=n(n9e,"A",{href:!0});var cmt=s(lq);U1o=r(cmt,"CLIPFeatureExtractor"),cmt.forEach(t),J1o=r(n9e," (GroupViT model)"),n9e.forEach(t),Y1o=i(K),Hh=n(K,"LI",{});var s9e=s(Hh);sde=n(s9e,"STRONG",{});var fmt=s(sde);K1o=r(fmt,"hubert"),fmt.forEach(t),Z1o=r(s9e," \u2014 "),iq=n(s9e,"A",{href:!0});var mmt=s(iq);e4o=r(mmt,"Wav2Vec2FeatureExtractor"),mmt.forEach(t),o4o=r(s9e," (Hubert model)"),s9e.forEach(t),r4o=i(K),Uh=n(K,"LI",{});var l9e=s(Uh);lde=n(l9e,"STRONG",{});var gmt=s(lde);t4o=r(gmt,"imagegpt"),gmt.forEach(t),a4o=r(l9e," \u2014 "),dq=n(l9e,"A",{href:!0});var hmt=s(dq);n4o=r(hmt,"ImageGPTFeatureExtractor"),hmt.forEach(t),s4o=r(l9e," (ImageGPT model)"),l9e.forEach(t),l4o=i(K),Jh=n(K,"LI",{});var i9e=s(Jh);ide=n(i9e,"STRONG",{});var pmt=s(ide);i4o=r(pmt,"layoutlmv2"),pmt.forEach(t),d4o=r(i9e," \u2014 "),cq=n(i9e,"A",{href:!0});var _mt=s(cq);c4o=r(_mt,"LayoutLMv2FeatureExtractor"),_mt.forEach(t),f4o=r(i9e," (LayoutLMv2 model)"),i9e.forEach(t),m4o=i(K),Yh=n(K,"LI",{});var d9e=s(Yh);dde=n(d9e,"STRONG",{});var umt=s(dde);g4o=r(umt,"layoutlmv3"),umt.forEach(t),h4o=r(d9e," \u2014 "),fq=n(d9e,"A",{href:!0});var bmt=s(fq);p4o=r(bmt,"LayoutLMv3FeatureExtractor"),bmt.forEach(t),_4o=r(d9e," (LayoutLMv3 model)"),d9e.forEach(t),u4o=i(K),Kh=n(K,"LI",{});var c9e=s(Kh);cde=n(c9e,"STRONG",{});var vmt=s(cde);b4o=r(vmt,"levit"),vmt.forEach(t),v4o=r(c9e," \u2014 "),mq=n(c9e,"A",{href:!0});var Fmt=s(mq);F4o=r(Fmt,"LevitFeatureExtractor"),Fmt.forEach(t),T4o=r(c9e," (LeViT model)"),c9e.forEach(t),M4o=i(K),Zh=n(K,"LI",{});var f9e=s(Zh);fde=n(f9e,"STRONG",{});var Tmt=s(fde);E4o=r(Tmt,"maskformer"),Tmt.forEach(t),C4o=r(f9e," \u2014 "),gq=n(f9e,"A",{href:!0});var Mmt=s(gq);w4o=r(Mmt,"MaskFormerFeatureExtractor"),Mmt.forEach(t),A4o=r(f9e," (MaskFormer model)"),f9e.forEach(t),L4o=i(K),ep=n(K,"LI",{});var m9e=s(ep);mde=n(m9e,"STRONG",{});var Emt=s(mde);y4o=r(Emt,"mctct"),Emt.forEach(t),x4o=r(m9e," \u2014 "),hq=n(m9e,"A",{href:!0});var Cmt=s(hq);$4o=r(Cmt,"MCTCTFeatureExtractor"),Cmt.forEach(t),k4o=r(m9e," (M-CTC-T model)"),m9e.forEach(t),S4o=i(K),op=n(K,"LI",{});var g9e=s(op);gde=n(g9e,"STRONG",{});var wmt=s(gde);R4o=r(wmt,"mobilenet_v2"),wmt.forEach(t),P4o=r(g9e," \u2014 "),pq=n(g9e,"A",{href:!0});var Amt=s(pq);B4o=r(Amt,"MobileNetV2FeatureExtractor"),Amt.forEach(t),N4o=r(g9e," (MobileNetV2 model)"),g9e.forEach(t),I4o=i(K),rp=n(K,"LI",{});var h9e=s(rp);hde=n(h9e,"STRONG",{});var Lmt=s(hde);q4o=r(Lmt,"mobilevit"),Lmt.forEach(t),j4o=r(h9e," \u2014 "),_q=n(h9e,"A",{href:!0});var ymt=s(_q);D4o=r(ymt,"MobileViTFeatureExtractor"),ymt.forEach(t),G4o=r(h9e," (MobileViT model)"),h9e.forEach(t),O4o=i(K),tp=n(K,"LI",{});var p9e=s(tp);pde=n(p9e,"STRONG",{});var xmt=s(pde);V4o=r(xmt,"perceiver"),xmt.forEach(t),X4o=r(p9e," \u2014 "),uq=n(p9e,"A",{href:!0});var $mt=s(uq);z4o=r($mt,"PerceiverFeatureExtractor"),$mt.forEach(t),Q4o=r(p9e," (Perceiver model)"),p9e.forEach(t),W4o=i(K),ap=n(K,"LI",{});var _9e=s(ap);_de=n(_9e,"STRONG",{});var kmt=s(_de);H4o=r(kmt,"poolformer"),kmt.forEach(t),U4o=r(_9e," \u2014 "),bq=n(_9e,"A",{href:!0});var Smt=s(bq);J4o=r(Smt,"PoolFormerFeatureExtractor"),Smt.forEach(t),Y4o=r(_9e," (PoolFormer model)"),_9e.forEach(t),K4o=i(K),np=n(K,"LI",{});var u9e=s(np);ude=n(u9e,"STRONG",{});var Rmt=s(ude);Z4o=r(Rmt,"regnet"),Rmt.forEach(t),e2o=r(u9e," \u2014 "),vq=n(u9e,"A",{href:!0});var Pmt=s(vq);o2o=r(Pmt,"ConvNextFeatureExtractor"),Pmt.forEach(t),r2o=r(u9e," (RegNet model)"),u9e.forEach(t),t2o=i(K),sp=n(K,"LI",{});var b9e=s(sp);bde=n(b9e,"STRONG",{});var Bmt=s(bde);a2o=r(Bmt,"resnet"),Bmt.forEach(t),n2o=r(b9e," \u2014 "),Fq=n(b9e,"A",{href:!0});var Nmt=s(Fq);s2o=r(Nmt,"ConvNextFeatureExtractor"),Nmt.forEach(t),l2o=r(b9e," (ResNet model)"),b9e.forEach(t),i2o=i(K),lp=n(K,"LI",{});var v9e=s(lp);vde=n(v9e,"STRONG",{});var Imt=s(vde);d2o=r(Imt,"segformer"),Imt.forEach(t),c2o=r(v9e," \u2014 "),Tq=n(v9e,"A",{href:!0});var qmt=s(Tq);f2o=r(qmt,"SegformerFeatureExtractor"),qmt.forEach(t),m2o=r(v9e," (SegFormer model)"),v9e.forEach(t),g2o=i(K),ip=n(K,"LI",{});var F9e=s(ip);Fde=n(F9e,"STRONG",{});var jmt=s(Fde);h2o=r(jmt,"speech_to_text"),jmt.forEach(t),p2o=r(F9e," \u2014 "),Mq=n(F9e,"A",{href:!0});var Dmt=s(Mq);_2o=r(Dmt,"Speech2TextFeatureExtractor"),Dmt.forEach(t),u2o=r(F9e," (Speech2Text model)"),F9e.forEach(t),b2o=i(K),dp=n(K,"LI",{});var T9e=s(dp);Tde=n(T9e,"STRONG",{});var Gmt=s(Tde);v2o=r(Gmt,"swin"),Gmt.forEach(t),F2o=r(T9e," \u2014 "),Eq=n(T9e,"A",{href:!0});var Omt=s(Eq);T2o=r(Omt,"ViTFeatureExtractor"),Omt.forEach(t),M2o=r(T9e," (Swin Transformer model)"),T9e.forEach(t),E2o=i(K),cp=n(K,"LI",{});var M9e=s(cp);Mde=n(M9e,"STRONG",{});var Vmt=s(Mde);C2o=r(Vmt,"van"),Vmt.forEach(t),w2o=r(M9e," \u2014 "),Cq=n(M9e,"A",{href:!0});var Xmt=s(Cq);A2o=r(Xmt,"ConvNextFeatureExtractor"),Xmt.forEach(t),L2o=r(M9e," (VAN model)"),M9e.forEach(t),y2o=i(K),fp=n(K,"LI",{});var E9e=s(fp);Ede=n(E9e,"STRONG",{});var zmt=s(Ede);x2o=r(zmt,"vilt"),zmt.forEach(t),$2o=r(E9e," \u2014 "),wq=n(E9e,"A",{href:!0});var Qmt=s(wq);k2o=r(Qmt,"ViltFeatureExtractor"),Qmt.forEach(t),S2o=r(E9e," (ViLT model)"),E9e.forEach(t),R2o=i(K),mp=n(K,"LI",{});var C9e=s(mp);Cde=n(C9e,"STRONG",{});var Wmt=s(Cde);P2o=r(Wmt,"vit"),Wmt.forEach(t),B2o=r(C9e," \u2014 "),Aq=n(C9e,"A",{href:!0});var Hmt=s(Aq);N2o=r(Hmt,"ViTFeatureExtractor"),Hmt.forEach(t),I2o=r(C9e," (ViT model)"),C9e.forEach(t),q2o=i(K),gp=n(K,"LI",{});var w9e=s(gp);wde=n(w9e,"STRONG",{});var Umt=s(wde);j2o=r(Umt,"vit_mae"),Umt.forEach(t),D2o=r(w9e," \u2014 "),Lq=n(w9e,"A",{href:!0});var Jmt=s(Lq);G2o=r(Jmt,"ViTFeatureExtractor"),Jmt.forEach(t),O2o=r(w9e," (ViTMAE model)"),w9e.forEach(t),V2o=i(K),hp=n(K,"LI",{});var A9e=s(hp);Ade=n(A9e,"STRONG",{});var Ymt=s(Ade);X2o=r(Ymt,"wav2vec2"),Ymt.forEach(t),z2o=r(A9e," \u2014 "),yq=n(A9e,"A",{href:!0});var Kmt=s(yq);Q2o=r(Kmt,"Wav2Vec2FeatureExtractor"),Kmt.forEach(t),W2o=r(A9e," (Wav2Vec2 model)"),A9e.forEach(t),H2o=i(K),pp=n(K,"LI",{});var L9e=s(pp);Lde=n(L9e,"STRONG",{});var Zmt=s(Lde);U2o=r(Zmt,"wav2vec2-conformer"),Zmt.forEach(t),J2o=r(L9e," \u2014 "),xq=n(L9e,"A",{href:!0});var egt=s(xq);Y2o=r(egt,"Wav2Vec2FeatureExtractor"),egt.forEach(t),K2o=r(L9e," (Wav2Vec2-Conformer model)"),L9e.forEach(t),Z2o=i(K),_p=n(K,"LI",{});var y9e=s(_p);yde=n(y9e,"STRONG",{});var ogt=s(yde);ebo=r(ogt,"yolos"),ogt.forEach(t),obo=r(y9e," \u2014 "),$q=n(y9e,"A",{href:!0});var rgt=s($q);rbo=r(rgt,"YolosFeatureExtractor"),rgt.forEach(t),tbo=r(y9e," (YOLOS model)"),y9e.forEach(t),K.forEach(t),abo=i(aa),T(up.$$.fragment,aa),nbo=i(aa),T(bp.$$.fragment,aa),aa.forEach(t),sbo=i(Zs),vp=n(Zs,"DIV",{class:!0});var hQe=s(vp);T(CL.$$.fragment,hQe),lbo=i(hQe),xde=n(hQe,"P",{});var tgt=s(xde);ibo=r(tgt,"Register a new feature extractor for this class."),tgt.forEach(t),hQe.forEach(t),Zs.forEach(t),fXe=i(f),qi=n(f,"H2",{class:!0});var pQe=s(qi);Fp=n(pQe,"A",{id:!0,class:!0,href:!0});var agt=s(Fp);$de=n(agt,"SPAN",{});var ngt=s($de);T(wL.$$.fragment,ngt),ngt.forEach(t),agt.forEach(t),dbo=i(pQe),kde=n(pQe,"SPAN",{});var sgt=s(kde);cbo=r(sgt,"AutoProcessor"),sgt.forEach(t),pQe.forEach(t),mXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(AL.$$.fragment,el),fbo=i(el),LL=n(el,"P",{});var _Qe=s(LL);mbo=r(_Qe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),kq=n(_Qe,"A",{href:!0});var lgt=s(kq);gbo=r(lgt,"AutoProcessor.from_pretrained()"),lgt.forEach(t),hbo=r(_Qe," class method."),_Qe.forEach(t),pbo=i(el),yL=n(el,"P",{});var uQe=s(yL);_bo=r(uQe,"This class cannot be instantiated directly using "),Sde=n(uQe,"CODE",{});var igt=s(Sde);ubo=r(igt,"__init__()"),igt.forEach(t),bbo=r(uQe," (throws an error)."),uQe.forEach(t),vbo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(xL.$$.fragment,na),Fbo=i(na),Rde=n(na,"P",{});var dgt=s(Rde);Tbo=r(dgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dgt.forEach(t),Mbo=i(na),ji=n(na,"P",{});var $re=s(ji);Ebo=r($re,"The processor class to instantiate is selected based on the "),Pde=n($re,"CODE",{});var cgt=s(Pde);Cbo=r(cgt,"model_type"),cgt.forEach(t),wbo=r($re,` property of the config object (either
passed as an argument or loaded from `),Bde=n($re,"CODE",{});var fgt=s(Bde);Abo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),Lbo=r($re," if possible):"),$re.forEach(t),ybo=i(na),he=n(na,"UL",{});var be=s(he);Tp=n(be,"LI",{});var x9e=s(Tp);Nde=n(x9e,"STRONG",{});var mgt=s(Nde);xbo=r(mgt,"clip"),mgt.forEach(t),$bo=r(x9e," \u2014 "),Sq=n(x9e,"A",{href:!0});var ggt=s(Sq);kbo=r(ggt,"CLIPProcessor"),ggt.forEach(t),Sbo=r(x9e," (CLIP model)"),x9e.forEach(t),Rbo=i(be),Mp=n(be,"LI",{});var $9e=s(Mp);Ide=n($9e,"STRONG",{});var hgt=s(Ide);Pbo=r(hgt,"flava"),hgt.forEach(t),Bbo=r($9e," \u2014 "),qde=n($9e,"CODE",{});var pgt=s(qde);Nbo=r(pgt,"FLAVAProcessor"),pgt.forEach(t),Ibo=r($9e," (FLAVA model)"),$9e.forEach(t),qbo=i(be),Ep=n(be,"LI",{});var k9e=s(Ep);jde=n(k9e,"STRONG",{});var _gt=s(jde);jbo=r(_gt,"groupvit"),_gt.forEach(t),Dbo=r(k9e," \u2014 "),Rq=n(k9e,"A",{href:!0});var ugt=s(Rq);Gbo=r(ugt,"CLIPProcessor"),ugt.forEach(t),Obo=r(k9e," (GroupViT model)"),k9e.forEach(t),Vbo=i(be),Cp=n(be,"LI",{});var S9e=s(Cp);Dde=n(S9e,"STRONG",{});var bgt=s(Dde);Xbo=r(bgt,"layoutlmv2"),bgt.forEach(t),zbo=r(S9e," \u2014 "),Pq=n(S9e,"A",{href:!0});var vgt=s(Pq);Qbo=r(vgt,"LayoutLMv2Processor"),vgt.forEach(t),Wbo=r(S9e," (LayoutLMv2 model)"),S9e.forEach(t),Hbo=i(be),wp=n(be,"LI",{});var R9e=s(wp);Gde=n(R9e,"STRONG",{});var Fgt=s(Gde);Ubo=r(Fgt,"layoutlmv3"),Fgt.forEach(t),Jbo=r(R9e," \u2014 "),Bq=n(R9e,"A",{href:!0});var Tgt=s(Bq);Ybo=r(Tgt,"LayoutLMv3Processor"),Tgt.forEach(t),Kbo=r(R9e," (LayoutLMv3 model)"),R9e.forEach(t),Zbo=i(be),Ap=n(be,"LI",{});var P9e=s(Ap);Ode=n(P9e,"STRONG",{});var Mgt=s(Ode);evo=r(Mgt,"layoutxlm"),Mgt.forEach(t),ovo=r(P9e," \u2014 "),Nq=n(P9e,"A",{href:!0});var Egt=s(Nq);rvo=r(Egt,"LayoutXLMProcessor"),Egt.forEach(t),tvo=r(P9e," (LayoutXLM model)"),P9e.forEach(t),avo=i(be),Lp=n(be,"LI",{});var B9e=s(Lp);Vde=n(B9e,"STRONG",{});var Cgt=s(Vde);nvo=r(Cgt,"sew"),Cgt.forEach(t),svo=r(B9e," \u2014 "),Iq=n(B9e,"A",{href:!0});var wgt=s(Iq);lvo=r(wgt,"Wav2Vec2Processor"),wgt.forEach(t),ivo=r(B9e," (SEW model)"),B9e.forEach(t),dvo=i(be),yp=n(be,"LI",{});var N9e=s(yp);Xde=n(N9e,"STRONG",{});var Agt=s(Xde);cvo=r(Agt,"sew-d"),Agt.forEach(t),fvo=r(N9e," \u2014 "),qq=n(N9e,"A",{href:!0});var Lgt=s(qq);mvo=r(Lgt,"Wav2Vec2Processor"),Lgt.forEach(t),gvo=r(N9e," (SEW-D model)"),N9e.forEach(t),hvo=i(be),xp=n(be,"LI",{});var I9e=s(xp);zde=n(I9e,"STRONG",{});var ygt=s(zde);pvo=r(ygt,"speech_to_text"),ygt.forEach(t),_vo=r(I9e," \u2014 "),jq=n(I9e,"A",{href:!0});var xgt=s(jq);uvo=r(xgt,"Speech2TextProcessor"),xgt.forEach(t),bvo=r(I9e," (Speech2Text model)"),I9e.forEach(t),vvo=i(be),$p=n(be,"LI",{});var q9e=s($p);Qde=n(q9e,"STRONG",{});var $gt=s(Qde);Fvo=r($gt,"speech_to_text_2"),$gt.forEach(t),Tvo=r(q9e," \u2014 "),Dq=n(q9e,"A",{href:!0});var kgt=s(Dq);Mvo=r(kgt,"Speech2Text2Processor"),kgt.forEach(t),Evo=r(q9e," (Speech2Text2 model)"),q9e.forEach(t),Cvo=i(be),kp=n(be,"LI",{});var j9e=s(kp);Wde=n(j9e,"STRONG",{});var Sgt=s(Wde);wvo=r(Sgt,"trocr"),Sgt.forEach(t),Avo=r(j9e," \u2014 "),Gq=n(j9e,"A",{href:!0});var Rgt=s(Gq);Lvo=r(Rgt,"TrOCRProcessor"),Rgt.forEach(t),yvo=r(j9e," (TrOCR model)"),j9e.forEach(t),xvo=i(be),Sp=n(be,"LI",{});var D9e=s(Sp);Hde=n(D9e,"STRONG",{});var Pgt=s(Hde);$vo=r(Pgt,"unispeech"),Pgt.forEach(t),kvo=r(D9e," \u2014 "),Oq=n(D9e,"A",{href:!0});var Bgt=s(Oq);Svo=r(Bgt,"Wav2Vec2Processor"),Bgt.forEach(t),Rvo=r(D9e," (UniSpeech model)"),D9e.forEach(t),Pvo=i(be),Rp=n(be,"LI",{});var G9e=s(Rp);Ude=n(G9e,"STRONG",{});var Ngt=s(Ude);Bvo=r(Ngt,"unispeech-sat"),Ngt.forEach(t),Nvo=r(G9e," \u2014 "),Vq=n(G9e,"A",{href:!0});var Igt=s(Vq);Ivo=r(Igt,"Wav2Vec2Processor"),Igt.forEach(t),qvo=r(G9e," (UniSpeechSat model)"),G9e.forEach(t),jvo=i(be),Pp=n(be,"LI",{});var O9e=s(Pp);Jde=n(O9e,"STRONG",{});var qgt=s(Jde);Dvo=r(qgt,"vilt"),qgt.forEach(t),Gvo=r(O9e," \u2014 "),Xq=n(O9e,"A",{href:!0});var jgt=s(Xq);Ovo=r(jgt,"ViltProcessor"),jgt.forEach(t),Vvo=r(O9e," (ViLT model)"),O9e.forEach(t),Xvo=i(be),Bp=n(be,"LI",{});var V9e=s(Bp);Yde=n(V9e,"STRONG",{});var Dgt=s(Yde);zvo=r(Dgt,"vision-text-dual-encoder"),Dgt.forEach(t),Qvo=r(V9e," \u2014 "),zq=n(V9e,"A",{href:!0});var Ggt=s(zq);Wvo=r(Ggt,"VisionTextDualEncoderProcessor"),Ggt.forEach(t),Hvo=r(V9e," (VisionTextDualEncoder model)"),V9e.forEach(t),Uvo=i(be),Np=n(be,"LI",{});var X9e=s(Np);Kde=n(X9e,"STRONG",{});var Ogt=s(Kde);Jvo=r(Ogt,"wav2vec2"),Ogt.forEach(t),Yvo=r(X9e," \u2014 "),Qq=n(X9e,"A",{href:!0});var Vgt=s(Qq);Kvo=r(Vgt,"Wav2Vec2Processor"),Vgt.forEach(t),Zvo=r(X9e," (Wav2Vec2 model)"),X9e.forEach(t),e5o=i(be),Ip=n(be,"LI",{});var z9e=s(Ip);Zde=n(z9e,"STRONG",{});var Xgt=s(Zde);o5o=r(Xgt,"wav2vec2-conformer"),Xgt.forEach(t),r5o=r(z9e," \u2014 "),Wq=n(z9e,"A",{href:!0});var zgt=s(Wq);t5o=r(zgt,"Wav2Vec2Processor"),zgt.forEach(t),a5o=r(z9e," (Wav2Vec2-Conformer model)"),z9e.forEach(t),n5o=i(be),qp=n(be,"LI",{});var Q9e=s(qp);ece=n(Q9e,"STRONG",{});var Qgt=s(ece);s5o=r(Qgt,"wavlm"),Qgt.forEach(t),l5o=r(Q9e," \u2014 "),Hq=n(Q9e,"A",{href:!0});var Wgt=s(Hq);i5o=r(Wgt,"Wav2Vec2Processor"),Wgt.forEach(t),d5o=r(Q9e," (WavLM model)"),Q9e.forEach(t),be.forEach(t),c5o=i(na),T(jp.$$.fragment,na),f5o=i(na),T(Dp.$$.fragment,na),na.forEach(t),m5o=i(el),Gp=n(el,"DIV",{class:!0});var bQe=s(Gp);T($L.$$.fragment,bQe),g5o=i(bQe),oce=n(bQe,"P",{});var Hgt=s(oce);h5o=r(Hgt,"Register a new processor for this class."),Hgt.forEach(t),bQe.forEach(t),el.forEach(t),gXe=i(f),Di=n(f,"H2",{class:!0});var vQe=s(Di);Op=n(vQe,"A",{id:!0,class:!0,href:!0});var Ugt=s(Op);rce=n(Ugt,"SPAN",{});var Jgt=s(rce);T(kL.$$.fragment,Jgt),Jgt.forEach(t),Ugt.forEach(t),p5o=i(vQe),tce=n(vQe,"SPAN",{});var Ygt=s(tce);_5o=r(Ygt,"AutoModel"),Ygt.forEach(t),vQe.forEach(t),hXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(SL.$$.fragment,ol),u5o=i(ol),Gi=n(ol,"P",{});var kre=s(Gi);b5o=r(kre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uq=n(kre,"A",{href:!0});var Kgt=s(Uq);v5o=r(Kgt,"from_pretrained()"),Kgt.forEach(t),F5o=r(kre," class method or the "),Jq=n(kre,"A",{href:!0});var Zgt=s(Jq);T5o=r(Zgt,"from_config()"),Zgt.forEach(t),M5o=r(kre,` class
method.`),kre.forEach(t),E5o=i(ol),RL=n(ol,"P",{});var FQe=s(RL);C5o=r(FQe,"This class cannot be instantiated directly using "),ace=n(FQe,"CODE",{});var eht=s(ace);w5o=r(eht,"__init__()"),eht.forEach(t),A5o=r(FQe," (throws an error)."),FQe.forEach(t),L5o=i(ol),lt=n(ol,"DIV",{class:!0});var dA=s(lt);T(PL.$$.fragment,dA),y5o=i(dA),nce=n(dA,"P",{});var oht=s(nce);x5o=r(oht,"Instantiates one of the base model classes of the library from a configuration."),oht.forEach(t),$5o=i(dA),Oi=n(dA,"P",{});var Sre=s(Oi);k5o=r(Sre,`Note:
Loading a model from its configuration file does `),sce=n(Sre,"STRONG",{});var rht=s(sce);S5o=r(rht,"not"),rht.forEach(t),R5o=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yq=n(Sre,"A",{href:!0});var tht=s(Yq);P5o=r(tht,"from_pretrained()"),tht.forEach(t),B5o=r(Sre," to load the model weights."),Sre.forEach(t),N5o=i(dA),T(Vp.$$.fragment,dA),dA.forEach(t),I5o=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(BL.$$.fragment,sa),q5o=i(sa),lce=n(sa,"P",{});var aht=s(lce);j5o=r(aht,"Instantiate one of the base model classes of the library from a pretrained model."),aht.forEach(t),D5o=i(sa),Na=n(sa,"P",{});var cA=s(Na);G5o=r(cA,"The model class to instantiate is selected based on the "),ice=n(cA,"CODE",{});var nht=s(ice);O5o=r(nht,"model_type"),nht.forEach(t),V5o=r(cA,` property of the config object (either
passed as an argument or loaded from `),dce=n(cA,"CODE",{});var sht=s(dce);X5o=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),z5o=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(cA,"CODE",{});var lht=s(cce);Q5o=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),W5o=r(cA,":"),cA.forEach(t),H5o=i(sa),y=n(sa,"UL",{});var x=s(y);Xp=n(x,"LI",{});var W9e=s(Xp);fce=n(W9e,"STRONG",{});var iht=s(fce);U5o=r(iht,"albert"),iht.forEach(t),J5o=r(W9e," \u2014 "),Kq=n(W9e,"A",{href:!0});var dht=s(Kq);Y5o=r(dht,"AlbertModel"),dht.forEach(t),K5o=r(W9e," (ALBERT model)"),W9e.forEach(t),Z5o=i(x),zp=n(x,"LI",{});var H9e=s(zp);mce=n(H9e,"STRONG",{});var cht=s(mce);eFo=r(cht,"bart"),cht.forEach(t),oFo=r(H9e," \u2014 "),Zq=n(H9e,"A",{href:!0});var fht=s(Zq);rFo=r(fht,"BartModel"),fht.forEach(t),tFo=r(H9e," (BART model)"),H9e.forEach(t),aFo=i(x),Qp=n(x,"LI",{});var U9e=s(Qp);gce=n(U9e,"STRONG",{});var mht=s(gce);nFo=r(mht,"beit"),mht.forEach(t),sFo=r(U9e," \u2014 "),ej=n(U9e,"A",{href:!0});var ght=s(ej);lFo=r(ght,"BeitModel"),ght.forEach(t),iFo=r(U9e," (BEiT model)"),U9e.forEach(t),dFo=i(x),Wp=n(x,"LI",{});var J9e=s(Wp);hce=n(J9e,"STRONG",{});var hht=s(hce);cFo=r(hht,"bert"),hht.forEach(t),fFo=r(J9e," \u2014 "),oj=n(J9e,"A",{href:!0});var pht=s(oj);mFo=r(pht,"BertModel"),pht.forEach(t),gFo=r(J9e," (BERT model)"),J9e.forEach(t),hFo=i(x),Hp=n(x,"LI",{});var Y9e=s(Hp);pce=n(Y9e,"STRONG",{});var _ht=s(pce);pFo=r(_ht,"bert-generation"),_ht.forEach(t),_Fo=r(Y9e," \u2014 "),rj=n(Y9e,"A",{href:!0});var uht=s(rj);uFo=r(uht,"BertGenerationEncoder"),uht.forEach(t),bFo=r(Y9e," (Bert Generation model)"),Y9e.forEach(t),vFo=i(x),Up=n(x,"LI",{});var K9e=s(Up);_ce=n(K9e,"STRONG",{});var bht=s(_ce);FFo=r(bht,"big_bird"),bht.forEach(t),TFo=r(K9e," \u2014 "),tj=n(K9e,"A",{href:!0});var vht=s(tj);MFo=r(vht,"BigBirdModel"),vht.forEach(t),EFo=r(K9e," (BigBird model)"),K9e.forEach(t),CFo=i(x),Jp=n(x,"LI",{});var Z9e=s(Jp);uce=n(Z9e,"STRONG",{});var Fht=s(uce);wFo=r(Fht,"bigbird_pegasus"),Fht.forEach(t),AFo=r(Z9e," \u2014 "),aj=n(Z9e,"A",{href:!0});var Tht=s(aj);LFo=r(Tht,"BigBirdPegasusModel"),Tht.forEach(t),yFo=r(Z9e," (BigBird-Pegasus model)"),Z9e.forEach(t),xFo=i(x),Yp=n(x,"LI",{});var exe=s(Yp);bce=n(exe,"STRONG",{});var Mht=s(bce);$Fo=r(Mht,"blenderbot"),Mht.forEach(t),kFo=r(exe," \u2014 "),nj=n(exe,"A",{href:!0});var Eht=s(nj);SFo=r(Eht,"BlenderbotModel"),Eht.forEach(t),RFo=r(exe," (Blenderbot model)"),exe.forEach(t),PFo=i(x),Kp=n(x,"LI",{});var oxe=s(Kp);vce=n(oxe,"STRONG",{});var Cht=s(vce);BFo=r(Cht,"blenderbot-small"),Cht.forEach(t),NFo=r(oxe," \u2014 "),sj=n(oxe,"A",{href:!0});var wht=s(sj);IFo=r(wht,"BlenderbotSmallModel"),wht.forEach(t),qFo=r(oxe," (BlenderbotSmall model)"),oxe.forEach(t),jFo=i(x),Zp=n(x,"LI",{});var rxe=s(Zp);Fce=n(rxe,"STRONG",{});var Aht=s(Fce);DFo=r(Aht,"bloom"),Aht.forEach(t),GFo=r(rxe," \u2014 "),lj=n(rxe,"A",{href:!0});var Lht=s(lj);OFo=r(Lht,"BloomModel"),Lht.forEach(t),VFo=r(rxe," (BLOOM model)"),rxe.forEach(t),XFo=i(x),e_=n(x,"LI",{});var txe=s(e_);Tce=n(txe,"STRONG",{});var yht=s(Tce);zFo=r(yht,"camembert"),yht.forEach(t),QFo=r(txe," \u2014 "),ij=n(txe,"A",{href:!0});var xht=s(ij);WFo=r(xht,"CamembertModel"),xht.forEach(t),HFo=r(txe," (CamemBERT model)"),txe.forEach(t),UFo=i(x),o_=n(x,"LI",{});var axe=s(o_);Mce=n(axe,"STRONG",{});var $ht=s(Mce);JFo=r($ht,"canine"),$ht.forEach(t),YFo=r(axe," \u2014 "),dj=n(axe,"A",{href:!0});var kht=s(dj);KFo=r(kht,"CanineModel"),kht.forEach(t),ZFo=r(axe," (CANINE model)"),axe.forEach(t),eTo=i(x),r_=n(x,"LI",{});var nxe=s(r_);Ece=n(nxe,"STRONG",{});var Sht=s(Ece);oTo=r(Sht,"clip"),Sht.forEach(t),rTo=r(nxe," \u2014 "),cj=n(nxe,"A",{href:!0});var Rht=s(cj);tTo=r(Rht,"CLIPModel"),Rht.forEach(t),aTo=r(nxe," (CLIP model)"),nxe.forEach(t),nTo=i(x),t_=n(x,"LI",{});var sxe=s(t_);Cce=n(sxe,"STRONG",{});var Pht=s(Cce);sTo=r(Pht,"codegen"),Pht.forEach(t),lTo=r(sxe," \u2014 "),fj=n(sxe,"A",{href:!0});var Bht=s(fj);iTo=r(Bht,"CodeGenModel"),Bht.forEach(t),dTo=r(sxe," (CodeGen model)"),sxe.forEach(t),cTo=i(x),a_=n(x,"LI",{});var lxe=s(a_);wce=n(lxe,"STRONG",{});var Nht=s(wce);fTo=r(Nht,"convbert"),Nht.forEach(t),mTo=r(lxe," \u2014 "),mj=n(lxe,"A",{href:!0});var Iht=s(mj);gTo=r(Iht,"ConvBertModel"),Iht.forEach(t),hTo=r(lxe," (ConvBERT model)"),lxe.forEach(t),pTo=i(x),n_=n(x,"LI",{});var ixe=s(n_);Ace=n(ixe,"STRONG",{});var qht=s(Ace);_To=r(qht,"convnext"),qht.forEach(t),uTo=r(ixe," \u2014 "),gj=n(ixe,"A",{href:!0});var jht=s(gj);bTo=r(jht,"ConvNextModel"),jht.forEach(t),vTo=r(ixe," (ConvNeXT model)"),ixe.forEach(t),FTo=i(x),s_=n(x,"LI",{});var dxe=s(s_);Lce=n(dxe,"STRONG",{});var Dht=s(Lce);TTo=r(Dht,"ctrl"),Dht.forEach(t),MTo=r(dxe," \u2014 "),hj=n(dxe,"A",{href:!0});var Ght=s(hj);ETo=r(Ght,"CTRLModel"),Ght.forEach(t),CTo=r(dxe," (CTRL model)"),dxe.forEach(t),wTo=i(x),l_=n(x,"LI",{});var cxe=s(l_);yce=n(cxe,"STRONG",{});var Oht=s(yce);ATo=r(Oht,"cvt"),Oht.forEach(t),LTo=r(cxe," \u2014 "),pj=n(cxe,"A",{href:!0});var Vht=s(pj);yTo=r(Vht,"CvtModel"),Vht.forEach(t),xTo=r(cxe," (CvT model)"),cxe.forEach(t),$To=i(x),i_=n(x,"LI",{});var fxe=s(i_);xce=n(fxe,"STRONG",{});var Xht=s(xce);kTo=r(Xht,"data2vec-audio"),Xht.forEach(t),STo=r(fxe," \u2014 "),_j=n(fxe,"A",{href:!0});var zht=s(_j);RTo=r(zht,"Data2VecAudioModel"),zht.forEach(t),PTo=r(fxe," (Data2VecAudio model)"),fxe.forEach(t),BTo=i(x),d_=n(x,"LI",{});var mxe=s(d_);$ce=n(mxe,"STRONG",{});var Qht=s($ce);NTo=r(Qht,"data2vec-text"),Qht.forEach(t),ITo=r(mxe," \u2014 "),uj=n(mxe,"A",{href:!0});var Wht=s(uj);qTo=r(Wht,"Data2VecTextModel"),Wht.forEach(t),jTo=r(mxe," (Data2VecText model)"),mxe.forEach(t),DTo=i(x),c_=n(x,"LI",{});var gxe=s(c_);kce=n(gxe,"STRONG",{});var Hht=s(kce);GTo=r(Hht,"data2vec-vision"),Hht.forEach(t),OTo=r(gxe," \u2014 "),bj=n(gxe,"A",{href:!0});var Uht=s(bj);VTo=r(Uht,"Data2VecVisionModel"),Uht.forEach(t),XTo=r(gxe," (Data2VecVision model)"),gxe.forEach(t),zTo=i(x),f_=n(x,"LI",{});var hxe=s(f_);Sce=n(hxe,"STRONG",{});var Jht=s(Sce);QTo=r(Jht,"deberta"),Jht.forEach(t),WTo=r(hxe," \u2014 "),vj=n(hxe,"A",{href:!0});var Yht=s(vj);HTo=r(Yht,"DebertaModel"),Yht.forEach(t),UTo=r(hxe," (DeBERTa model)"),hxe.forEach(t),JTo=i(x),m_=n(x,"LI",{});var pxe=s(m_);Rce=n(pxe,"STRONG",{});var Kht=s(Rce);YTo=r(Kht,"deberta-v2"),Kht.forEach(t),KTo=r(pxe," \u2014 "),Fj=n(pxe,"A",{href:!0});var Zht=s(Fj);ZTo=r(Zht,"DebertaV2Model"),Zht.forEach(t),e7o=r(pxe," (DeBERTa-v2 model)"),pxe.forEach(t),o7o=i(x),g_=n(x,"LI",{});var _xe=s(g_);Pce=n(_xe,"STRONG",{});var ept=s(Pce);r7o=r(ept,"decision_transformer"),ept.forEach(t),t7o=r(_xe," \u2014 "),Tj=n(_xe,"A",{href:!0});var opt=s(Tj);a7o=r(opt,"DecisionTransformerModel"),opt.forEach(t),n7o=r(_xe," (Decision Transformer model)"),_xe.forEach(t),s7o=i(x),h_=n(x,"LI",{});var uxe=s(h_);Bce=n(uxe,"STRONG",{});var rpt=s(Bce);l7o=r(rpt,"deit"),rpt.forEach(t),i7o=r(uxe," \u2014 "),Mj=n(uxe,"A",{href:!0});var tpt=s(Mj);d7o=r(tpt,"DeiTModel"),tpt.forEach(t),c7o=r(uxe," (DeiT model)"),uxe.forEach(t),f7o=i(x),p_=n(x,"LI",{});var bxe=s(p_);Nce=n(bxe,"STRONG",{});var apt=s(Nce);m7o=r(apt,"detr"),apt.forEach(t),g7o=r(bxe," \u2014 "),Ej=n(bxe,"A",{href:!0});var npt=s(Ej);h7o=r(npt,"DetrModel"),npt.forEach(t),p7o=r(bxe," (DETR model)"),bxe.forEach(t),_7o=i(x),__=n(x,"LI",{});var vxe=s(__);Ice=n(vxe,"STRONG",{});var spt=s(Ice);u7o=r(spt,"distilbert"),spt.forEach(t),b7o=r(vxe," \u2014 "),Cj=n(vxe,"A",{href:!0});var lpt=s(Cj);v7o=r(lpt,"DistilBertModel"),lpt.forEach(t),F7o=r(vxe," (DistilBERT model)"),vxe.forEach(t),T7o=i(x),u_=n(x,"LI",{});var Fxe=s(u_);qce=n(Fxe,"STRONG",{});var ipt=s(qce);M7o=r(ipt,"dpr"),ipt.forEach(t),E7o=r(Fxe," \u2014 "),wj=n(Fxe,"A",{href:!0});var dpt=s(wj);C7o=r(dpt,"DPRQuestionEncoder"),dpt.forEach(t),w7o=r(Fxe," (DPR model)"),Fxe.forEach(t),A7o=i(x),b_=n(x,"LI",{});var Txe=s(b_);jce=n(Txe,"STRONG",{});var cpt=s(jce);L7o=r(cpt,"dpt"),cpt.forEach(t),y7o=r(Txe," \u2014 "),Aj=n(Txe,"A",{href:!0});var fpt=s(Aj);x7o=r(fpt,"DPTModel"),fpt.forEach(t),$7o=r(Txe," (DPT model)"),Txe.forEach(t),k7o=i(x),v_=n(x,"LI",{});var Mxe=s(v_);Dce=n(Mxe,"STRONG",{});var mpt=s(Dce);S7o=r(mpt,"electra"),mpt.forEach(t),R7o=r(Mxe," \u2014 "),Lj=n(Mxe,"A",{href:!0});var gpt=s(Lj);P7o=r(gpt,"ElectraModel"),gpt.forEach(t),B7o=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),N7o=i(x),F_=n(x,"LI",{});var Exe=s(F_);Gce=n(Exe,"STRONG",{});var hpt=s(Gce);I7o=r(hpt,"flaubert"),hpt.forEach(t),q7o=r(Exe," \u2014 "),yj=n(Exe,"A",{href:!0});var ppt=s(yj);j7o=r(ppt,"FlaubertModel"),ppt.forEach(t),D7o=r(Exe," (FlauBERT model)"),Exe.forEach(t),G7o=i(x),T_=n(x,"LI",{});var Cxe=s(T_);Oce=n(Cxe,"STRONG",{});var _pt=s(Oce);O7o=r(_pt,"flava"),_pt.forEach(t),V7o=r(Cxe," \u2014 "),xj=n(Cxe,"A",{href:!0});var upt=s(xj);X7o=r(upt,"FlavaModel"),upt.forEach(t),z7o=r(Cxe," (FLAVA model)"),Cxe.forEach(t),Q7o=i(x),M_=n(x,"LI",{});var wxe=s(M_);Vce=n(wxe,"STRONG",{});var bpt=s(Vce);W7o=r(bpt,"fnet"),bpt.forEach(t),H7o=r(wxe," \u2014 "),$j=n(wxe,"A",{href:!0});var vpt=s($j);U7o=r(vpt,"FNetModel"),vpt.forEach(t),J7o=r(wxe," (FNet model)"),wxe.forEach(t),Y7o=i(x),E_=n(x,"LI",{});var Axe=s(E_);Xce=n(Axe,"STRONG",{});var Fpt=s(Xce);K7o=r(Fpt,"fsmt"),Fpt.forEach(t),Z7o=r(Axe," \u2014 "),kj=n(Axe,"A",{href:!0});var Tpt=s(kj);e8o=r(Tpt,"FSMTModel"),Tpt.forEach(t),o8o=r(Axe," (FairSeq Machine-Translation model)"),Axe.forEach(t),r8o=i(x),Ws=n(x,"LI",{});var kS=s(Ws);zce=n(kS,"STRONG",{});var Mpt=s(zce);t8o=r(Mpt,"funnel"),Mpt.forEach(t),a8o=r(kS," \u2014 "),Sj=n(kS,"A",{href:!0});var Ept=s(Sj);n8o=r(Ept,"FunnelModel"),Ept.forEach(t),s8o=r(kS," or "),Rj=n(kS,"A",{href:!0});var Cpt=s(Rj);l8o=r(Cpt,"FunnelBaseModel"),Cpt.forEach(t),i8o=r(kS," (Funnel Transformer model)"),kS.forEach(t),d8o=i(x),C_=n(x,"LI",{});var Lxe=s(C_);Qce=n(Lxe,"STRONG",{});var wpt=s(Qce);c8o=r(wpt,"glpn"),wpt.forEach(t),f8o=r(Lxe," \u2014 "),Pj=n(Lxe,"A",{href:!0});var Apt=s(Pj);m8o=r(Apt,"GLPNModel"),Apt.forEach(t),g8o=r(Lxe," (GLPN model)"),Lxe.forEach(t),h8o=i(x),w_=n(x,"LI",{});var yxe=s(w_);Wce=n(yxe,"STRONG",{});var Lpt=s(Wce);p8o=r(Lpt,"gpt2"),Lpt.forEach(t),_8o=r(yxe," \u2014 "),Bj=n(yxe,"A",{href:!0});var ypt=s(Bj);u8o=r(ypt,"GPT2Model"),ypt.forEach(t),b8o=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),v8o=i(x),A_=n(x,"LI",{});var xxe=s(A_);Hce=n(xxe,"STRONG",{});var xpt=s(Hce);F8o=r(xpt,"gpt_neo"),xpt.forEach(t),T8o=r(xxe," \u2014 "),Nj=n(xxe,"A",{href:!0});var $pt=s(Nj);M8o=r($pt,"GPTNeoModel"),$pt.forEach(t),E8o=r(xxe," (GPT Neo model)"),xxe.forEach(t),C8o=i(x),L_=n(x,"LI",{});var $xe=s(L_);Uce=n($xe,"STRONG",{});var kpt=s(Uce);w8o=r(kpt,"gpt_neox"),kpt.forEach(t),A8o=r($xe," \u2014 "),Ij=n($xe,"A",{href:!0});var Spt=s(Ij);L8o=r(Spt,"GPTNeoXModel"),Spt.forEach(t),y8o=r($xe," (GPT NeoX model)"),$xe.forEach(t),x8o=i(x),y_=n(x,"LI",{});var kxe=s(y_);Jce=n(kxe,"STRONG",{});var Rpt=s(Jce);$8o=r(Rpt,"gptj"),Rpt.forEach(t),k8o=r(kxe," \u2014 "),qj=n(kxe,"A",{href:!0});var Ppt=s(qj);S8o=r(Ppt,"GPTJModel"),Ppt.forEach(t),R8o=r(kxe," (GPT-J model)"),kxe.forEach(t),P8o=i(x),x_=n(x,"LI",{});var Sxe=s(x_);Yce=n(Sxe,"STRONG",{});var Bpt=s(Yce);B8o=r(Bpt,"groupvit"),Bpt.forEach(t),N8o=r(Sxe," \u2014 "),jj=n(Sxe,"A",{href:!0});var Npt=s(jj);I8o=r(Npt,"GroupViTModel"),Npt.forEach(t),q8o=r(Sxe," (GroupViT model)"),Sxe.forEach(t),j8o=i(x),$_=n(x,"LI",{});var Rxe=s($_);Kce=n(Rxe,"STRONG",{});var Ipt=s(Kce);D8o=r(Ipt,"hubert"),Ipt.forEach(t),G8o=r(Rxe," \u2014 "),Dj=n(Rxe,"A",{href:!0});var qpt=s(Dj);O8o=r(qpt,"HubertModel"),qpt.forEach(t),V8o=r(Rxe," (Hubert model)"),Rxe.forEach(t),X8o=i(x),k_=n(x,"LI",{});var Pxe=s(k_);Zce=n(Pxe,"STRONG",{});var jpt=s(Zce);z8o=r(jpt,"ibert"),jpt.forEach(t),Q8o=r(Pxe," \u2014 "),Gj=n(Pxe,"A",{href:!0});var Dpt=s(Gj);W8o=r(Dpt,"IBertModel"),Dpt.forEach(t),H8o=r(Pxe," (I-BERT model)"),Pxe.forEach(t),U8o=i(x),S_=n(x,"LI",{});var Bxe=s(S_);efe=n(Bxe,"STRONG",{});var Gpt=s(efe);J8o=r(Gpt,"imagegpt"),Gpt.forEach(t),Y8o=r(Bxe," \u2014 "),Oj=n(Bxe,"A",{href:!0});var Opt=s(Oj);K8o=r(Opt,"ImageGPTModel"),Opt.forEach(t),Z8o=r(Bxe," (ImageGPT model)"),Bxe.forEach(t),eMo=i(x),R_=n(x,"LI",{});var Nxe=s(R_);ofe=n(Nxe,"STRONG",{});var Vpt=s(ofe);oMo=r(Vpt,"layoutlm"),Vpt.forEach(t),rMo=r(Nxe," \u2014 "),Vj=n(Nxe,"A",{href:!0});var Xpt=s(Vj);tMo=r(Xpt,"LayoutLMModel"),Xpt.forEach(t),aMo=r(Nxe," (LayoutLM model)"),Nxe.forEach(t),nMo=i(x),P_=n(x,"LI",{});var Ixe=s(P_);rfe=n(Ixe,"STRONG",{});var zpt=s(rfe);sMo=r(zpt,"layoutlmv2"),zpt.forEach(t),lMo=r(Ixe," \u2014 "),Xj=n(Ixe,"A",{href:!0});var Qpt=s(Xj);iMo=r(Qpt,"LayoutLMv2Model"),Qpt.forEach(t),dMo=r(Ixe," (LayoutLMv2 model)"),Ixe.forEach(t),cMo=i(x),B_=n(x,"LI",{});var qxe=s(B_);tfe=n(qxe,"STRONG",{});var Wpt=s(tfe);fMo=r(Wpt,"layoutlmv3"),Wpt.forEach(t),mMo=r(qxe," \u2014 "),zj=n(qxe,"A",{href:!0});var Hpt=s(zj);gMo=r(Hpt,"LayoutLMv3Model"),Hpt.forEach(t),hMo=r(qxe," (LayoutLMv3 model)"),qxe.forEach(t),pMo=i(x),N_=n(x,"LI",{});var jxe=s(N_);afe=n(jxe,"STRONG",{});var Upt=s(afe);_Mo=r(Upt,"led"),Upt.forEach(t),uMo=r(jxe," \u2014 "),Qj=n(jxe,"A",{href:!0});var Jpt=s(Qj);bMo=r(Jpt,"LEDModel"),Jpt.forEach(t),vMo=r(jxe," (LED model)"),jxe.forEach(t),FMo=i(x),I_=n(x,"LI",{});var Dxe=s(I_);nfe=n(Dxe,"STRONG",{});var Ypt=s(nfe);TMo=r(Ypt,"levit"),Ypt.forEach(t),MMo=r(Dxe," \u2014 "),Wj=n(Dxe,"A",{href:!0});var Kpt=s(Wj);EMo=r(Kpt,"LevitModel"),Kpt.forEach(t),CMo=r(Dxe," (LeViT model)"),Dxe.forEach(t),wMo=i(x),q_=n(x,"LI",{});var Gxe=s(q_);sfe=n(Gxe,"STRONG",{});var Zpt=s(sfe);AMo=r(Zpt,"longformer"),Zpt.forEach(t),LMo=r(Gxe," \u2014 "),Hj=n(Gxe,"A",{href:!0});var e_t=s(Hj);yMo=r(e_t,"LongformerModel"),e_t.forEach(t),xMo=r(Gxe," (Longformer model)"),Gxe.forEach(t),$Mo=i(x),j_=n(x,"LI",{});var Oxe=s(j_);lfe=n(Oxe,"STRONG",{});var o_t=s(lfe);kMo=r(o_t,"longt5"),o_t.forEach(t),SMo=r(Oxe," \u2014 "),Uj=n(Oxe,"A",{href:!0});var r_t=s(Uj);RMo=r(r_t,"LongT5Model"),r_t.forEach(t),PMo=r(Oxe," (LongT5 model)"),Oxe.forEach(t),BMo=i(x),D_=n(x,"LI",{});var Vxe=s(D_);ife=n(Vxe,"STRONG",{});var t_t=s(ife);NMo=r(t_t,"luke"),t_t.forEach(t),IMo=r(Vxe," \u2014 "),Jj=n(Vxe,"A",{href:!0});var a_t=s(Jj);qMo=r(a_t,"LukeModel"),a_t.forEach(t),jMo=r(Vxe," (LUKE model)"),Vxe.forEach(t),DMo=i(x),G_=n(x,"LI",{});var Xxe=s(G_);dfe=n(Xxe,"STRONG",{});var n_t=s(dfe);GMo=r(n_t,"lxmert"),n_t.forEach(t),OMo=r(Xxe," \u2014 "),Yj=n(Xxe,"A",{href:!0});var s_t=s(Yj);VMo=r(s_t,"LxmertModel"),s_t.forEach(t),XMo=r(Xxe," (LXMERT model)"),Xxe.forEach(t),zMo=i(x),O_=n(x,"LI",{});var zxe=s(O_);cfe=n(zxe,"STRONG",{});var l_t=s(cfe);QMo=r(l_t,"m2m_100"),l_t.forEach(t),WMo=r(zxe," \u2014 "),Kj=n(zxe,"A",{href:!0});var i_t=s(Kj);HMo=r(i_t,"M2M100Model"),i_t.forEach(t),UMo=r(zxe," (M2M100 model)"),zxe.forEach(t),JMo=i(x),V_=n(x,"LI",{});var Qxe=s(V_);ffe=n(Qxe,"STRONG",{});var d_t=s(ffe);YMo=r(d_t,"marian"),d_t.forEach(t),KMo=r(Qxe," \u2014 "),Zj=n(Qxe,"A",{href:!0});var c_t=s(Zj);ZMo=r(c_t,"MarianModel"),c_t.forEach(t),eEo=r(Qxe," (Marian model)"),Qxe.forEach(t),oEo=i(x),X_=n(x,"LI",{});var Wxe=s(X_);mfe=n(Wxe,"STRONG",{});var f_t=s(mfe);rEo=r(f_t,"maskformer"),f_t.forEach(t),tEo=r(Wxe," \u2014 "),eD=n(Wxe,"A",{href:!0});var m_t=s(eD);aEo=r(m_t,"MaskFormerModel"),m_t.forEach(t),nEo=r(Wxe," (MaskFormer model)"),Wxe.forEach(t),sEo=i(x),z_=n(x,"LI",{});var Hxe=s(z_);gfe=n(Hxe,"STRONG",{});var g_t=s(gfe);lEo=r(g_t,"mbart"),g_t.forEach(t),iEo=r(Hxe," \u2014 "),oD=n(Hxe,"A",{href:!0});var h_t=s(oD);dEo=r(h_t,"MBartModel"),h_t.forEach(t),cEo=r(Hxe," (mBART model)"),Hxe.forEach(t),fEo=i(x),Q_=n(x,"LI",{});var Uxe=s(Q_);hfe=n(Uxe,"STRONG",{});var p_t=s(hfe);mEo=r(p_t,"mctct"),p_t.forEach(t),gEo=r(Uxe," \u2014 "),rD=n(Uxe,"A",{href:!0});var __t=s(rD);hEo=r(__t,"MCTCTModel"),__t.forEach(t),pEo=r(Uxe," (M-CTC-T model)"),Uxe.forEach(t),_Eo=i(x),W_=n(x,"LI",{});var Jxe=s(W_);pfe=n(Jxe,"STRONG",{});var u_t=s(pfe);uEo=r(u_t,"megatron-bert"),u_t.forEach(t),bEo=r(Jxe," \u2014 "),tD=n(Jxe,"A",{href:!0});var b_t=s(tD);vEo=r(b_t,"MegatronBertModel"),b_t.forEach(t),FEo=r(Jxe," (Megatron-BERT model)"),Jxe.forEach(t),TEo=i(x),H_=n(x,"LI",{});var Yxe=s(H_);_fe=n(Yxe,"STRONG",{});var v_t=s(_fe);MEo=r(v_t,"mobilebert"),v_t.forEach(t),EEo=r(Yxe," \u2014 "),aD=n(Yxe,"A",{href:!0});var F_t=s(aD);CEo=r(F_t,"MobileBertModel"),F_t.forEach(t),wEo=r(Yxe," (MobileBERT model)"),Yxe.forEach(t),AEo=i(x),U_=n(x,"LI",{});var Kxe=s(U_);ufe=n(Kxe,"STRONG",{});var T_t=s(ufe);LEo=r(T_t,"mobilenet_v2"),T_t.forEach(t),yEo=r(Kxe," \u2014 "),nD=n(Kxe,"A",{href:!0});var M_t=s(nD);xEo=r(M_t,"MobileNetV2Model"),M_t.forEach(t),$Eo=r(Kxe," (MobileNetV2 model)"),Kxe.forEach(t),kEo=i(x),J_=n(x,"LI",{});var Zxe=s(J_);bfe=n(Zxe,"STRONG",{});var E_t=s(bfe);SEo=r(E_t,"mobilevit"),E_t.forEach(t),REo=r(Zxe," \u2014 "),sD=n(Zxe,"A",{href:!0});var C_t=s(sD);PEo=r(C_t,"MobileViTModel"),C_t.forEach(t),BEo=r(Zxe," (MobileViT model)"),Zxe.forEach(t),NEo=i(x),Y_=n(x,"LI",{});var e$e=s(Y_);vfe=n(e$e,"STRONG",{});var w_t=s(vfe);IEo=r(w_t,"mpnet"),w_t.forEach(t),qEo=r(e$e," \u2014 "),lD=n(e$e,"A",{href:!0});var A_t=s(lD);jEo=r(A_t,"MPNetModel"),A_t.forEach(t),DEo=r(e$e," (MPNet model)"),e$e.forEach(t),GEo=i(x),K_=n(x,"LI",{});var o$e=s(K_);Ffe=n(o$e,"STRONG",{});var L_t=s(Ffe);OEo=r(L_t,"mt5"),L_t.forEach(t),VEo=r(o$e," \u2014 "),iD=n(o$e,"A",{href:!0});var y_t=s(iD);XEo=r(y_t,"MT5Model"),y_t.forEach(t),zEo=r(o$e," (MT5 model)"),o$e.forEach(t),QEo=i(x),Z_=n(x,"LI",{});var r$e=s(Z_);Tfe=n(r$e,"STRONG",{});var x_t=s(Tfe);WEo=r(x_t,"mvp"),x_t.forEach(t),HEo=r(r$e," \u2014 "),dD=n(r$e,"A",{href:!0});var $_t=s(dD);UEo=r($_t,"MvpModel"),$_t.forEach(t),JEo=r(r$e," (MVP model)"),r$e.forEach(t),YEo=i(x),eu=n(x,"LI",{});var t$e=s(eu);Mfe=n(t$e,"STRONG",{});var k_t=s(Mfe);KEo=r(k_t,"nezha"),k_t.forEach(t),ZEo=r(t$e," \u2014 "),cD=n(t$e,"A",{href:!0});var S_t=s(cD);eCo=r(S_t,"NezhaModel"),S_t.forEach(t),oCo=r(t$e," (Nezha model)"),t$e.forEach(t),rCo=i(x),ou=n(x,"LI",{});var a$e=s(ou);Efe=n(a$e,"STRONG",{});var R_t=s(Efe);tCo=r(R_t,"nystromformer"),R_t.forEach(t),aCo=r(a$e," \u2014 "),fD=n(a$e,"A",{href:!0});var P_t=s(fD);nCo=r(P_t,"NystromformerModel"),P_t.forEach(t),sCo=r(a$e," (Nystr\xF6mformer model)"),a$e.forEach(t),lCo=i(x),ru=n(x,"LI",{});var n$e=s(ru);Cfe=n(n$e,"STRONG",{});var B_t=s(Cfe);iCo=r(B_t,"openai-gpt"),B_t.forEach(t),dCo=r(n$e," \u2014 "),mD=n(n$e,"A",{href:!0});var N_t=s(mD);cCo=r(N_t,"OpenAIGPTModel"),N_t.forEach(t),fCo=r(n$e," (OpenAI GPT model)"),n$e.forEach(t),mCo=i(x),tu=n(x,"LI",{});var s$e=s(tu);wfe=n(s$e,"STRONG",{});var I_t=s(wfe);gCo=r(I_t,"opt"),I_t.forEach(t),hCo=r(s$e," \u2014 "),gD=n(s$e,"A",{href:!0});var q_t=s(gD);pCo=r(q_t,"OPTModel"),q_t.forEach(t),_Co=r(s$e," (OPT model)"),s$e.forEach(t),uCo=i(x),au=n(x,"LI",{});var l$e=s(au);Afe=n(l$e,"STRONG",{});var j_t=s(Afe);bCo=r(j_t,"pegasus"),j_t.forEach(t),vCo=r(l$e," \u2014 "),hD=n(l$e,"A",{href:!0});var D_t=s(hD);FCo=r(D_t,"PegasusModel"),D_t.forEach(t),TCo=r(l$e," (Pegasus model)"),l$e.forEach(t),MCo=i(x),nu=n(x,"LI",{});var i$e=s(nu);Lfe=n(i$e,"STRONG",{});var G_t=s(Lfe);ECo=r(G_t,"perceiver"),G_t.forEach(t),CCo=r(i$e," \u2014 "),pD=n(i$e,"A",{href:!0});var O_t=s(pD);wCo=r(O_t,"PerceiverModel"),O_t.forEach(t),ACo=r(i$e," (Perceiver model)"),i$e.forEach(t),LCo=i(x),su=n(x,"LI",{});var d$e=s(su);yfe=n(d$e,"STRONG",{});var V_t=s(yfe);yCo=r(V_t,"plbart"),V_t.forEach(t),xCo=r(d$e," \u2014 "),_D=n(d$e,"A",{href:!0});var X_t=s(_D);$Co=r(X_t,"PLBartModel"),X_t.forEach(t),kCo=r(d$e," (PLBart model)"),d$e.forEach(t),SCo=i(x),lu=n(x,"LI",{});var c$e=s(lu);xfe=n(c$e,"STRONG",{});var z_t=s(xfe);RCo=r(z_t,"poolformer"),z_t.forEach(t),PCo=r(c$e," \u2014 "),uD=n(c$e,"A",{href:!0});var Q_t=s(uD);BCo=r(Q_t,"PoolFormerModel"),Q_t.forEach(t),NCo=r(c$e," (PoolFormer model)"),c$e.forEach(t),ICo=i(x),iu=n(x,"LI",{});var f$e=s(iu);$fe=n(f$e,"STRONG",{});var W_t=s($fe);qCo=r(W_t,"prophetnet"),W_t.forEach(t),jCo=r(f$e," \u2014 "),bD=n(f$e,"A",{href:!0});var H_t=s(bD);DCo=r(H_t,"ProphetNetModel"),H_t.forEach(t),GCo=r(f$e," (ProphetNet model)"),f$e.forEach(t),OCo=i(x),du=n(x,"LI",{});var m$e=s(du);kfe=n(m$e,"STRONG",{});var U_t=s(kfe);VCo=r(U_t,"qdqbert"),U_t.forEach(t),XCo=r(m$e," \u2014 "),vD=n(m$e,"A",{href:!0});var J_t=s(vD);zCo=r(J_t,"QDQBertModel"),J_t.forEach(t),QCo=r(m$e," (QDQBert model)"),m$e.forEach(t),WCo=i(x),cu=n(x,"LI",{});var g$e=s(cu);Sfe=n(g$e,"STRONG",{});var Y_t=s(Sfe);HCo=r(Y_t,"reformer"),Y_t.forEach(t),UCo=r(g$e," \u2014 "),FD=n(g$e,"A",{href:!0});var K_t=s(FD);JCo=r(K_t,"ReformerModel"),K_t.forEach(t),YCo=r(g$e," (Reformer model)"),g$e.forEach(t),KCo=i(x),fu=n(x,"LI",{});var h$e=s(fu);Rfe=n(h$e,"STRONG",{});var Z_t=s(Rfe);ZCo=r(Z_t,"regnet"),Z_t.forEach(t),e3o=r(h$e," \u2014 "),TD=n(h$e,"A",{href:!0});var eut=s(TD);o3o=r(eut,"RegNetModel"),eut.forEach(t),r3o=r(h$e," (RegNet model)"),h$e.forEach(t),t3o=i(x),mu=n(x,"LI",{});var p$e=s(mu);Pfe=n(p$e,"STRONG",{});var out=s(Pfe);a3o=r(out,"rembert"),out.forEach(t),n3o=r(p$e," \u2014 "),MD=n(p$e,"A",{href:!0});var rut=s(MD);s3o=r(rut,"RemBertModel"),rut.forEach(t),l3o=r(p$e," (RemBERT model)"),p$e.forEach(t),i3o=i(x),gu=n(x,"LI",{});var _$e=s(gu);Bfe=n(_$e,"STRONG",{});var tut=s(Bfe);d3o=r(tut,"resnet"),tut.forEach(t),c3o=r(_$e," \u2014 "),ED=n(_$e,"A",{href:!0});var aut=s(ED);f3o=r(aut,"ResNetModel"),aut.forEach(t),m3o=r(_$e," (ResNet model)"),_$e.forEach(t),g3o=i(x),hu=n(x,"LI",{});var u$e=s(hu);Nfe=n(u$e,"STRONG",{});var nut=s(Nfe);h3o=r(nut,"retribert"),nut.forEach(t),p3o=r(u$e," \u2014 "),CD=n(u$e,"A",{href:!0});var sut=s(CD);_3o=r(sut,"RetriBertModel"),sut.forEach(t),u3o=r(u$e," (RetriBERT model)"),u$e.forEach(t),b3o=i(x),pu=n(x,"LI",{});var b$e=s(pu);Ife=n(b$e,"STRONG",{});var lut=s(Ife);v3o=r(lut,"roberta"),lut.forEach(t),F3o=r(b$e," \u2014 "),wD=n(b$e,"A",{href:!0});var iut=s(wD);T3o=r(iut,"RobertaModel"),iut.forEach(t),M3o=r(b$e," (RoBERTa model)"),b$e.forEach(t),E3o=i(x),_u=n(x,"LI",{});var v$e=s(_u);qfe=n(v$e,"STRONG",{});var dut=s(qfe);C3o=r(dut,"roformer"),dut.forEach(t),w3o=r(v$e," \u2014 "),AD=n(v$e,"A",{href:!0});var cut=s(AD);A3o=r(cut,"RoFormerModel"),cut.forEach(t),L3o=r(v$e," (RoFormer model)"),v$e.forEach(t),y3o=i(x),uu=n(x,"LI",{});var F$e=s(uu);jfe=n(F$e,"STRONG",{});var fut=s(jfe);x3o=r(fut,"segformer"),fut.forEach(t),$3o=r(F$e," \u2014 "),LD=n(F$e,"A",{href:!0});var mut=s(LD);k3o=r(mut,"SegformerModel"),mut.forEach(t),S3o=r(F$e," (SegFormer model)"),F$e.forEach(t),R3o=i(x),bu=n(x,"LI",{});var T$e=s(bu);Dfe=n(T$e,"STRONG",{});var gut=s(Dfe);P3o=r(gut,"sew"),gut.forEach(t),B3o=r(T$e," \u2014 "),yD=n(T$e,"A",{href:!0});var hut=s(yD);N3o=r(hut,"SEWModel"),hut.forEach(t),I3o=r(T$e," (SEW model)"),T$e.forEach(t),q3o=i(x),vu=n(x,"LI",{});var M$e=s(vu);Gfe=n(M$e,"STRONG",{});var put=s(Gfe);j3o=r(put,"sew-d"),put.forEach(t),D3o=r(M$e," \u2014 "),xD=n(M$e,"A",{href:!0});var _ut=s(xD);G3o=r(_ut,"SEWDModel"),_ut.forEach(t),O3o=r(M$e," (SEW-D model)"),M$e.forEach(t),V3o=i(x),Fu=n(x,"LI",{});var E$e=s(Fu);Ofe=n(E$e,"STRONG",{});var uut=s(Ofe);X3o=r(uut,"speech_to_text"),uut.forEach(t),z3o=r(E$e," \u2014 "),$D=n(E$e,"A",{href:!0});var but=s($D);Q3o=r(but,"Speech2TextModel"),but.forEach(t),W3o=r(E$e," (Speech2Text model)"),E$e.forEach(t),H3o=i(x),Tu=n(x,"LI",{});var C$e=s(Tu);Vfe=n(C$e,"STRONG",{});var vut=s(Vfe);U3o=r(vut,"splinter"),vut.forEach(t),J3o=r(C$e," \u2014 "),kD=n(C$e,"A",{href:!0});var Fut=s(kD);Y3o=r(Fut,"SplinterModel"),Fut.forEach(t),K3o=r(C$e," (Splinter model)"),C$e.forEach(t),Z3o=i(x),Mu=n(x,"LI",{});var w$e=s(Mu);Xfe=n(w$e,"STRONG",{});var Tut=s(Xfe);e0o=r(Tut,"squeezebert"),Tut.forEach(t),o0o=r(w$e," \u2014 "),SD=n(w$e,"A",{href:!0});var Mut=s(SD);r0o=r(Mut,"SqueezeBertModel"),Mut.forEach(t),t0o=r(w$e," (SqueezeBERT model)"),w$e.forEach(t),a0o=i(x),Eu=n(x,"LI",{});var A$e=s(Eu);zfe=n(A$e,"STRONG",{});var Eut=s(zfe);n0o=r(Eut,"swin"),Eut.forEach(t),s0o=r(A$e," \u2014 "),RD=n(A$e,"A",{href:!0});var Cut=s(RD);l0o=r(Cut,"SwinModel"),Cut.forEach(t),i0o=r(A$e," (Swin Transformer model)"),A$e.forEach(t),d0o=i(x),Cu=n(x,"LI",{});var L$e=s(Cu);Qfe=n(L$e,"STRONG",{});var wut=s(Qfe);c0o=r(wut,"t5"),wut.forEach(t),f0o=r(L$e," \u2014 "),PD=n(L$e,"A",{href:!0});var Aut=s(PD);m0o=r(Aut,"T5Model"),Aut.forEach(t),g0o=r(L$e," (T5 model)"),L$e.forEach(t),h0o=i(x),wu=n(x,"LI",{});var y$e=s(wu);Wfe=n(y$e,"STRONG",{});var Lut=s(Wfe);p0o=r(Lut,"tapas"),Lut.forEach(t),_0o=r(y$e," \u2014 "),BD=n(y$e,"A",{href:!0});var yut=s(BD);u0o=r(yut,"TapasModel"),yut.forEach(t),b0o=r(y$e," (TAPAS model)"),y$e.forEach(t),v0o=i(x),Au=n(x,"LI",{});var x$e=s(Au);Hfe=n(x$e,"STRONG",{});var xut=s(Hfe);F0o=r(xut,"trajectory_transformer"),xut.forEach(t),T0o=r(x$e," \u2014 "),ND=n(x$e,"A",{href:!0});var $ut=s(ND);M0o=r($ut,"TrajectoryTransformerModel"),$ut.forEach(t),E0o=r(x$e," (Trajectory Transformer model)"),x$e.forEach(t),C0o=i(x),Lu=n(x,"LI",{});var $$e=s(Lu);Ufe=n($$e,"STRONG",{});var kut=s(Ufe);w0o=r(kut,"transfo-xl"),kut.forEach(t),A0o=r($$e," \u2014 "),ID=n($$e,"A",{href:!0});var Sut=s(ID);L0o=r(Sut,"TransfoXLModel"),Sut.forEach(t),y0o=r($$e," (Transformer-XL model)"),$$e.forEach(t),x0o=i(x),yu=n(x,"LI",{});var k$e=s(yu);Jfe=n(k$e,"STRONG",{});var Rut=s(Jfe);$0o=r(Rut,"unispeech"),Rut.forEach(t),k0o=r(k$e," \u2014 "),qD=n(k$e,"A",{href:!0});var Put=s(qD);S0o=r(Put,"UniSpeechModel"),Put.forEach(t),R0o=r(k$e," (UniSpeech model)"),k$e.forEach(t),P0o=i(x),xu=n(x,"LI",{});var S$e=s(xu);Yfe=n(S$e,"STRONG",{});var But=s(Yfe);B0o=r(But,"unispeech-sat"),But.forEach(t),N0o=r(S$e," \u2014 "),jD=n(S$e,"A",{href:!0});var Nut=s(jD);I0o=r(Nut,"UniSpeechSatModel"),Nut.forEach(t),q0o=r(S$e," (UniSpeechSat model)"),S$e.forEach(t),j0o=i(x),$u=n(x,"LI",{});var R$e=s($u);Kfe=n(R$e,"STRONG",{});var Iut=s(Kfe);D0o=r(Iut,"van"),Iut.forEach(t),G0o=r(R$e," \u2014 "),DD=n(R$e,"A",{href:!0});var qut=s(DD);O0o=r(qut,"VanModel"),qut.forEach(t),V0o=r(R$e," (VAN model)"),R$e.forEach(t),X0o=i(x),ku=n(x,"LI",{});var P$e=s(ku);Zfe=n(P$e,"STRONG",{});var jut=s(Zfe);z0o=r(jut,"vilt"),jut.forEach(t),Q0o=r(P$e," \u2014 "),GD=n(P$e,"A",{href:!0});var Dut=s(GD);W0o=r(Dut,"ViltModel"),Dut.forEach(t),H0o=r(P$e," (ViLT model)"),P$e.forEach(t),U0o=i(x),Su=n(x,"LI",{});var B$e=s(Su);eme=n(B$e,"STRONG",{});var Gut=s(eme);J0o=r(Gut,"vision-text-dual-encoder"),Gut.forEach(t),Y0o=r(B$e," \u2014 "),OD=n(B$e,"A",{href:!0});var Out=s(OD);K0o=r(Out,"VisionTextDualEncoderModel"),Out.forEach(t),Z0o=r(B$e," (VisionTextDualEncoder model)"),B$e.forEach(t),ewo=i(x),Ru=n(x,"LI",{});var N$e=s(Ru);ome=n(N$e,"STRONG",{});var Vut=s(ome);owo=r(Vut,"visual_bert"),Vut.forEach(t),rwo=r(N$e," \u2014 "),VD=n(N$e,"A",{href:!0});var Xut=s(VD);two=r(Xut,"VisualBertModel"),Xut.forEach(t),awo=r(N$e," (VisualBERT model)"),N$e.forEach(t),nwo=i(x),Pu=n(x,"LI",{});var I$e=s(Pu);rme=n(I$e,"STRONG",{});var zut=s(rme);swo=r(zut,"vit"),zut.forEach(t),lwo=r(I$e," \u2014 "),XD=n(I$e,"A",{href:!0});var Qut=s(XD);iwo=r(Qut,"ViTModel"),Qut.forEach(t),dwo=r(I$e," (ViT model)"),I$e.forEach(t),cwo=i(x),Bu=n(x,"LI",{});var q$e=s(Bu);tme=n(q$e,"STRONG",{});var Wut=s(tme);fwo=r(Wut,"vit_mae"),Wut.forEach(t),mwo=r(q$e," \u2014 "),zD=n(q$e,"A",{href:!0});var Hut=s(zD);gwo=r(Hut,"ViTMAEModel"),Hut.forEach(t),hwo=r(q$e," (ViTMAE model)"),q$e.forEach(t),pwo=i(x),Nu=n(x,"LI",{});var j$e=s(Nu);ame=n(j$e,"STRONG",{});var Uut=s(ame);_wo=r(Uut,"wav2vec2"),Uut.forEach(t),uwo=r(j$e," \u2014 "),QD=n(j$e,"A",{href:!0});var Jut=s(QD);bwo=r(Jut,"Wav2Vec2Model"),Jut.forEach(t),vwo=r(j$e," (Wav2Vec2 model)"),j$e.forEach(t),Fwo=i(x),Iu=n(x,"LI",{});var D$e=s(Iu);nme=n(D$e,"STRONG",{});var Yut=s(nme);Two=r(Yut,"wav2vec2-conformer"),Yut.forEach(t),Mwo=r(D$e," \u2014 "),WD=n(D$e,"A",{href:!0});var Kut=s(WD);Ewo=r(Kut,"Wav2Vec2ConformerModel"),Kut.forEach(t),Cwo=r(D$e," (Wav2Vec2-Conformer model)"),D$e.forEach(t),wwo=i(x),qu=n(x,"LI",{});var G$e=s(qu);sme=n(G$e,"STRONG",{});var Zut=s(sme);Awo=r(Zut,"wavlm"),Zut.forEach(t),Lwo=r(G$e," \u2014 "),HD=n(G$e,"A",{href:!0});var e1t=s(HD);ywo=r(e1t,"WavLMModel"),e1t.forEach(t),xwo=r(G$e," (WavLM model)"),G$e.forEach(t),$wo=i(x),ju=n(x,"LI",{});var O$e=s(ju);lme=n(O$e,"STRONG",{});var o1t=s(lme);kwo=r(o1t,"xglm"),o1t.forEach(t),Swo=r(O$e," \u2014 "),UD=n(O$e,"A",{href:!0});var r1t=s(UD);Rwo=r(r1t,"XGLMModel"),r1t.forEach(t),Pwo=r(O$e," (XGLM model)"),O$e.forEach(t),Bwo=i(x),Du=n(x,"LI",{});var V$e=s(Du);ime=n(V$e,"STRONG",{});var t1t=s(ime);Nwo=r(t1t,"xlm"),t1t.forEach(t),Iwo=r(V$e," \u2014 "),JD=n(V$e,"A",{href:!0});var a1t=s(JD);qwo=r(a1t,"XLMModel"),a1t.forEach(t),jwo=r(V$e," (XLM model)"),V$e.forEach(t),Dwo=i(x),Gu=n(x,"LI",{});var X$e=s(Gu);dme=n(X$e,"STRONG",{});var n1t=s(dme);Gwo=r(n1t,"xlm-prophetnet"),n1t.forEach(t),Owo=r(X$e," \u2014 "),YD=n(X$e,"A",{href:!0});var s1t=s(YD);Vwo=r(s1t,"XLMProphetNetModel"),s1t.forEach(t),Xwo=r(X$e," (XLM-ProphetNet model)"),X$e.forEach(t),zwo=i(x),Ou=n(x,"LI",{});var z$e=s(Ou);cme=n(z$e,"STRONG",{});var l1t=s(cme);Qwo=r(l1t,"xlm-roberta"),l1t.forEach(t),Wwo=r(z$e," \u2014 "),KD=n(z$e,"A",{href:!0});var i1t=s(KD);Hwo=r(i1t,"XLMRobertaModel"),i1t.forEach(t),Uwo=r(z$e," (XLM-RoBERTa model)"),z$e.forEach(t),Jwo=i(x),Vu=n(x,"LI",{});var Q$e=s(Vu);fme=n(Q$e,"STRONG",{});var d1t=s(fme);Ywo=r(d1t,"xlm-roberta-xl"),d1t.forEach(t),Kwo=r(Q$e," \u2014 "),ZD=n(Q$e,"A",{href:!0});var c1t=s(ZD);Zwo=r(c1t,"XLMRobertaXLModel"),c1t.forEach(t),eAo=r(Q$e," (XLM-RoBERTa-XL model)"),Q$e.forEach(t),oAo=i(x),Xu=n(x,"LI",{});var W$e=s(Xu);mme=n(W$e,"STRONG",{});var f1t=s(mme);rAo=r(f1t,"xlnet"),f1t.forEach(t),tAo=r(W$e," \u2014 "),eG=n(W$e,"A",{href:!0});var m1t=s(eG);aAo=r(m1t,"XLNetModel"),m1t.forEach(t),nAo=r(W$e," (XLNet model)"),W$e.forEach(t),sAo=i(x),zu=n(x,"LI",{});var H$e=s(zu);gme=n(H$e,"STRONG",{});var g1t=s(gme);lAo=r(g1t,"yolos"),g1t.forEach(t),iAo=r(H$e," \u2014 "),oG=n(H$e,"A",{href:!0});var h1t=s(oG);dAo=r(h1t,"YolosModel"),h1t.forEach(t),cAo=r(H$e," (YOLOS model)"),H$e.forEach(t),fAo=i(x),Qu=n(x,"LI",{});var U$e=s(Qu);hme=n(U$e,"STRONG",{});var p1t=s(hme);mAo=r(p1t,"yoso"),p1t.forEach(t),gAo=r(U$e," \u2014 "),rG=n(U$e,"A",{href:!0});var _1t=s(rG);hAo=r(_1t,"YosoModel"),_1t.forEach(t),pAo=r(U$e," (YOSO model)"),U$e.forEach(t),x.forEach(t),_Ao=i(sa),Wu=n(sa,"P",{});var J$e=s(Wu);uAo=r(J$e,"The model is set in evaluation mode by default using "),pme=n(J$e,"CODE",{});var u1t=s(pme);bAo=r(u1t,"model.eval()"),u1t.forEach(t),vAo=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(J$e,"CODE",{});var b1t=s(_me);FAo=r(b1t,"model.train()"),b1t.forEach(t),J$e.forEach(t),TAo=i(sa),T(Hu.$$.fragment,sa),sa.forEach(t),ol.forEach(t),pXe=i(f),Vi=n(f,"H2",{class:!0});var TQe=s(Vi);Uu=n(TQe,"A",{id:!0,class:!0,href:!0});var v1t=s(Uu);ume=n(v1t,"SPAN",{});var F1t=s(ume);T(NL.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),MAo=i(TQe),bme=n(TQe,"SPAN",{});var T1t=s(bme);EAo=r(T1t,"AutoModelForPreTraining"),T1t.forEach(t),TQe.forEach(t),_Xe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(IL.$$.fragment,rl),CAo=i(rl),Xi=n(rl,"P",{});var Rre=s(Xi);wAo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tG=n(Rre,"A",{href:!0});var M1t=s(tG);AAo=r(M1t,"from_pretrained()"),M1t.forEach(t),LAo=r(Rre," class method or the "),aG=n(Rre,"A",{href:!0});var E1t=s(aG);yAo=r(E1t,"from_config()"),E1t.forEach(t),xAo=r(Rre,` class
method.`),Rre.forEach(t),$Ao=i(rl),qL=n(rl,"P",{});var MQe=s(qL);kAo=r(MQe,"This class cannot be instantiated directly using "),vme=n(MQe,"CODE",{});var C1t=s(vme);SAo=r(C1t,"__init__()"),C1t.forEach(t),RAo=r(MQe," (throws an error)."),MQe.forEach(t),PAo=i(rl),it=n(rl,"DIV",{class:!0});var fA=s(it);T(jL.$$.fragment,fA),BAo=i(fA),Fme=n(fA,"P",{});var w1t=s(Fme);NAo=r(w1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w1t.forEach(t),IAo=i(fA),zi=n(fA,"P",{});var Pre=s(zi);qAo=r(Pre,`Note:
Loading a model from its configuration file does `),Tme=n(Pre,"STRONG",{});var A1t=s(Tme);jAo=r(A1t,"not"),A1t.forEach(t),DAo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(Pre,"A",{href:!0});var L1t=s(nG);GAo=r(L1t,"from_pretrained()"),L1t.forEach(t),OAo=r(Pre," to load the model weights."),Pre.forEach(t),VAo=i(fA),T(Ju.$$.fragment,fA),fA.forEach(t),XAo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(DL.$$.fragment,la),zAo=i(la),Mme=n(la,"P",{});var y1t=s(Mme);QAo=r(y1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y1t.forEach(t),WAo=i(la),Ia=n(la,"P",{});var mA=s(Ia);HAo=r(mA,"The model class to instantiate is selected based on the "),Eme=n(mA,"CODE",{});var x1t=s(Eme);UAo=r(x1t,"model_type"),x1t.forEach(t),JAo=r(mA,` property of the config object (either
passed as an argument or loaded from `),Cme=n(mA,"CODE",{});var $1t=s(Cme);YAo=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),KAo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(mA,"CODE",{});var k1t=s(wme);ZAo=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),e6o=r(mA,":"),mA.forEach(t),o6o=i(la),G=n(la,"UL",{});var O=s(G);Yu=n(O,"LI",{});var Y$e=s(Yu);Ame=n(Y$e,"STRONG",{});var S1t=s(Ame);r6o=r(S1t,"albert"),S1t.forEach(t),t6o=r(Y$e," \u2014 "),sG=n(Y$e,"A",{href:!0});var R1t=s(sG);a6o=r(R1t,"AlbertForPreTraining"),R1t.forEach(t),n6o=r(Y$e," (ALBERT model)"),Y$e.forEach(t),s6o=i(O),Ku=n(O,"LI",{});var K$e=s(Ku);Lme=n(K$e,"STRONG",{});var P1t=s(Lme);l6o=r(P1t,"bart"),P1t.forEach(t),i6o=r(K$e," \u2014 "),lG=n(K$e,"A",{href:!0});var B1t=s(lG);d6o=r(B1t,"BartForConditionalGeneration"),B1t.forEach(t),c6o=r(K$e," (BART model)"),K$e.forEach(t),f6o=i(O),Zu=n(O,"LI",{});var Z$e=s(Zu);yme=n(Z$e,"STRONG",{});var N1t=s(yme);m6o=r(N1t,"bert"),N1t.forEach(t),g6o=r(Z$e," \u2014 "),iG=n(Z$e,"A",{href:!0});var I1t=s(iG);h6o=r(I1t,"BertForPreTraining"),I1t.forEach(t),p6o=r(Z$e," (BERT model)"),Z$e.forEach(t),_6o=i(O),e1=n(O,"LI",{});var eke=s(e1);xme=n(eke,"STRONG",{});var q1t=s(xme);u6o=r(q1t,"big_bird"),q1t.forEach(t),b6o=r(eke," \u2014 "),dG=n(eke,"A",{href:!0});var j1t=s(dG);v6o=r(j1t,"BigBirdForPreTraining"),j1t.forEach(t),F6o=r(eke," (BigBird model)"),eke.forEach(t),T6o=i(O),o1=n(O,"LI",{});var oke=s(o1);$me=n(oke,"STRONG",{});var D1t=s($me);M6o=r(D1t,"bloom"),D1t.forEach(t),E6o=r(oke," \u2014 "),cG=n(oke,"A",{href:!0});var G1t=s(cG);C6o=r(G1t,"BloomForCausalLM"),G1t.forEach(t),w6o=r(oke," (BLOOM model)"),oke.forEach(t),A6o=i(O),r1=n(O,"LI",{});var rke=s(r1);kme=n(rke,"STRONG",{});var O1t=s(kme);L6o=r(O1t,"camembert"),O1t.forEach(t),y6o=r(rke," \u2014 "),fG=n(rke,"A",{href:!0});var V1t=s(fG);x6o=r(V1t,"CamembertForMaskedLM"),V1t.forEach(t),$6o=r(rke," (CamemBERT model)"),rke.forEach(t),k6o=i(O),t1=n(O,"LI",{});var tke=s(t1);Sme=n(tke,"STRONG",{});var X1t=s(Sme);S6o=r(X1t,"ctrl"),X1t.forEach(t),R6o=r(tke," \u2014 "),mG=n(tke,"A",{href:!0});var z1t=s(mG);P6o=r(z1t,"CTRLLMHeadModel"),z1t.forEach(t),B6o=r(tke," (CTRL model)"),tke.forEach(t),N6o=i(O),a1=n(O,"LI",{});var ake=s(a1);Rme=n(ake,"STRONG",{});var Q1t=s(Rme);I6o=r(Q1t,"data2vec-text"),Q1t.forEach(t),q6o=r(ake," \u2014 "),gG=n(ake,"A",{href:!0});var W1t=s(gG);j6o=r(W1t,"Data2VecTextForMaskedLM"),W1t.forEach(t),D6o=r(ake," (Data2VecText model)"),ake.forEach(t),G6o=i(O),n1=n(O,"LI",{});var nke=s(n1);Pme=n(nke,"STRONG",{});var H1t=s(Pme);O6o=r(H1t,"deberta"),H1t.forEach(t),V6o=r(nke," \u2014 "),hG=n(nke,"A",{href:!0});var U1t=s(hG);X6o=r(U1t,"DebertaForMaskedLM"),U1t.forEach(t),z6o=r(nke," (DeBERTa model)"),nke.forEach(t),Q6o=i(O),s1=n(O,"LI",{});var ske=s(s1);Bme=n(ske,"STRONG",{});var J1t=s(Bme);W6o=r(J1t,"deberta-v2"),J1t.forEach(t),H6o=r(ske," \u2014 "),pG=n(ske,"A",{href:!0});var Y1t=s(pG);U6o=r(Y1t,"DebertaV2ForMaskedLM"),Y1t.forEach(t),J6o=r(ske," (DeBERTa-v2 model)"),ske.forEach(t),Y6o=i(O),l1=n(O,"LI",{});var lke=s(l1);Nme=n(lke,"STRONG",{});var K1t=s(Nme);K6o=r(K1t,"distilbert"),K1t.forEach(t),Z6o=r(lke," \u2014 "),_G=n(lke,"A",{href:!0});var Z1t=s(_G);eLo=r(Z1t,"DistilBertForMaskedLM"),Z1t.forEach(t),oLo=r(lke," (DistilBERT model)"),lke.forEach(t),rLo=i(O),i1=n(O,"LI",{});var ike=s(i1);Ime=n(ike,"STRONG",{});var e4t=s(Ime);tLo=r(e4t,"electra"),e4t.forEach(t),aLo=r(ike," \u2014 "),uG=n(ike,"A",{href:!0});var o4t=s(uG);nLo=r(o4t,"ElectraForPreTraining"),o4t.forEach(t),sLo=r(ike," (ELECTRA model)"),ike.forEach(t),lLo=i(O),d1=n(O,"LI",{});var dke=s(d1);qme=n(dke,"STRONG",{});var r4t=s(qme);iLo=r(r4t,"flaubert"),r4t.forEach(t),dLo=r(dke," \u2014 "),bG=n(dke,"A",{href:!0});var t4t=s(bG);cLo=r(t4t,"FlaubertWithLMHeadModel"),t4t.forEach(t),fLo=r(dke," (FlauBERT model)"),dke.forEach(t),mLo=i(O),c1=n(O,"LI",{});var cke=s(c1);jme=n(cke,"STRONG",{});var a4t=s(jme);gLo=r(a4t,"flava"),a4t.forEach(t),hLo=r(cke," \u2014 "),vG=n(cke,"A",{href:!0});var n4t=s(vG);pLo=r(n4t,"FlavaForPreTraining"),n4t.forEach(t),_Lo=r(cke," (FLAVA model)"),cke.forEach(t),uLo=i(O),f1=n(O,"LI",{});var fke=s(f1);Dme=n(fke,"STRONG",{});var s4t=s(Dme);bLo=r(s4t,"fnet"),s4t.forEach(t),vLo=r(fke," \u2014 "),FG=n(fke,"A",{href:!0});var l4t=s(FG);FLo=r(l4t,"FNetForPreTraining"),l4t.forEach(t),TLo=r(fke," (FNet model)"),fke.forEach(t),MLo=i(O),m1=n(O,"LI",{});var mke=s(m1);Gme=n(mke,"STRONG",{});var i4t=s(Gme);ELo=r(i4t,"fsmt"),i4t.forEach(t),CLo=r(mke," \u2014 "),TG=n(mke,"A",{href:!0});var d4t=s(TG);wLo=r(d4t,"FSMTForConditionalGeneration"),d4t.forEach(t),ALo=r(mke," (FairSeq Machine-Translation model)"),mke.forEach(t),LLo=i(O),g1=n(O,"LI",{});var gke=s(g1);Ome=n(gke,"STRONG",{});var c4t=s(Ome);yLo=r(c4t,"funnel"),c4t.forEach(t),xLo=r(gke," \u2014 "),MG=n(gke,"A",{href:!0});var f4t=s(MG);$Lo=r(f4t,"FunnelForPreTraining"),f4t.forEach(t),kLo=r(gke," (Funnel Transformer model)"),gke.forEach(t),SLo=i(O),h1=n(O,"LI",{});var hke=s(h1);Vme=n(hke,"STRONG",{});var m4t=s(Vme);RLo=r(m4t,"gpt2"),m4t.forEach(t),PLo=r(hke," \u2014 "),EG=n(hke,"A",{href:!0});var g4t=s(EG);BLo=r(g4t,"GPT2LMHeadModel"),g4t.forEach(t),NLo=r(hke," (OpenAI GPT-2 model)"),hke.forEach(t),ILo=i(O),p1=n(O,"LI",{});var pke=s(p1);Xme=n(pke,"STRONG",{});var h4t=s(Xme);qLo=r(h4t,"ibert"),h4t.forEach(t),jLo=r(pke," \u2014 "),CG=n(pke,"A",{href:!0});var p4t=s(CG);DLo=r(p4t,"IBertForMaskedLM"),p4t.forEach(t),GLo=r(pke," (I-BERT model)"),pke.forEach(t),OLo=i(O),_1=n(O,"LI",{});var _ke=s(_1);zme=n(_ke,"STRONG",{});var _4t=s(zme);VLo=r(_4t,"layoutlm"),_4t.forEach(t),XLo=r(_ke," \u2014 "),wG=n(_ke,"A",{href:!0});var u4t=s(wG);zLo=r(u4t,"LayoutLMForMaskedLM"),u4t.forEach(t),QLo=r(_ke," (LayoutLM model)"),_ke.forEach(t),WLo=i(O),u1=n(O,"LI",{});var uke=s(u1);Qme=n(uke,"STRONG",{});var b4t=s(Qme);HLo=r(b4t,"longformer"),b4t.forEach(t),ULo=r(uke," \u2014 "),AG=n(uke,"A",{href:!0});var v4t=s(AG);JLo=r(v4t,"LongformerForMaskedLM"),v4t.forEach(t),YLo=r(uke," (Longformer model)"),uke.forEach(t),KLo=i(O),b1=n(O,"LI",{});var bke=s(b1);Wme=n(bke,"STRONG",{});var F4t=s(Wme);ZLo=r(F4t,"lxmert"),F4t.forEach(t),eyo=r(bke," \u2014 "),LG=n(bke,"A",{href:!0});var T4t=s(LG);oyo=r(T4t,"LxmertForPreTraining"),T4t.forEach(t),ryo=r(bke," (LXMERT model)"),bke.forEach(t),tyo=i(O),v1=n(O,"LI",{});var vke=s(v1);Hme=n(vke,"STRONG",{});var M4t=s(Hme);ayo=r(M4t,"megatron-bert"),M4t.forEach(t),nyo=r(vke," \u2014 "),yG=n(vke,"A",{href:!0});var E4t=s(yG);syo=r(E4t,"MegatronBertForPreTraining"),E4t.forEach(t),lyo=r(vke," (Megatron-BERT model)"),vke.forEach(t),iyo=i(O),F1=n(O,"LI",{});var Fke=s(F1);Ume=n(Fke,"STRONG",{});var C4t=s(Ume);dyo=r(C4t,"mobilebert"),C4t.forEach(t),cyo=r(Fke," \u2014 "),xG=n(Fke,"A",{href:!0});var w4t=s(xG);fyo=r(w4t,"MobileBertForPreTraining"),w4t.forEach(t),myo=r(Fke," (MobileBERT model)"),Fke.forEach(t),gyo=i(O),T1=n(O,"LI",{});var Tke=s(T1);Jme=n(Tke,"STRONG",{});var A4t=s(Jme);hyo=r(A4t,"mpnet"),A4t.forEach(t),pyo=r(Tke," \u2014 "),$G=n(Tke,"A",{href:!0});var L4t=s($G);_yo=r(L4t,"MPNetForMaskedLM"),L4t.forEach(t),uyo=r(Tke," (MPNet model)"),Tke.forEach(t),byo=i(O),M1=n(O,"LI",{});var Mke=s(M1);Yme=n(Mke,"STRONG",{});var y4t=s(Yme);vyo=r(y4t,"mvp"),y4t.forEach(t),Fyo=r(Mke," \u2014 "),kG=n(Mke,"A",{href:!0});var x4t=s(kG);Tyo=r(x4t,"MvpForConditionalGeneration"),x4t.forEach(t),Myo=r(Mke," (MVP model)"),Mke.forEach(t),Eyo=i(O),E1=n(O,"LI",{});var Eke=s(E1);Kme=n(Eke,"STRONG",{});var $4t=s(Kme);Cyo=r($4t,"nezha"),$4t.forEach(t),wyo=r(Eke," \u2014 "),SG=n(Eke,"A",{href:!0});var k4t=s(SG);Ayo=r(k4t,"NezhaForPreTraining"),k4t.forEach(t),Lyo=r(Eke," (Nezha model)"),Eke.forEach(t),yyo=i(O),C1=n(O,"LI",{});var Cke=s(C1);Zme=n(Cke,"STRONG",{});var S4t=s(Zme);xyo=r(S4t,"openai-gpt"),S4t.forEach(t),$yo=r(Cke," \u2014 "),RG=n(Cke,"A",{href:!0});var R4t=s(RG);kyo=r(R4t,"OpenAIGPTLMHeadModel"),R4t.forEach(t),Syo=r(Cke," (OpenAI GPT model)"),Cke.forEach(t),Ryo=i(O),w1=n(O,"LI",{});var wke=s(w1);ege=n(wke,"STRONG",{});var P4t=s(ege);Pyo=r(P4t,"retribert"),P4t.forEach(t),Byo=r(wke," \u2014 "),PG=n(wke,"A",{href:!0});var B4t=s(PG);Nyo=r(B4t,"RetriBertModel"),B4t.forEach(t),Iyo=r(wke," (RetriBERT model)"),wke.forEach(t),qyo=i(O),A1=n(O,"LI",{});var Ake=s(A1);oge=n(Ake,"STRONG",{});var N4t=s(oge);jyo=r(N4t,"roberta"),N4t.forEach(t),Dyo=r(Ake," \u2014 "),BG=n(Ake,"A",{href:!0});var I4t=s(BG);Gyo=r(I4t,"RobertaForMaskedLM"),I4t.forEach(t),Oyo=r(Ake," (RoBERTa model)"),Ake.forEach(t),Vyo=i(O),L1=n(O,"LI",{});var Lke=s(L1);rge=n(Lke,"STRONG",{});var q4t=s(rge);Xyo=r(q4t,"splinter"),q4t.forEach(t),zyo=r(Lke," \u2014 "),NG=n(Lke,"A",{href:!0});var j4t=s(NG);Qyo=r(j4t,"SplinterForPreTraining"),j4t.forEach(t),Wyo=r(Lke," (Splinter model)"),Lke.forEach(t),Hyo=i(O),y1=n(O,"LI",{});var yke=s(y1);tge=n(yke,"STRONG",{});var D4t=s(tge);Uyo=r(D4t,"squeezebert"),D4t.forEach(t),Jyo=r(yke," \u2014 "),IG=n(yke,"A",{href:!0});var G4t=s(IG);Yyo=r(G4t,"SqueezeBertForMaskedLM"),G4t.forEach(t),Kyo=r(yke," (SqueezeBERT model)"),yke.forEach(t),Zyo=i(O),x1=n(O,"LI",{});var xke=s(x1);age=n(xke,"STRONG",{});var O4t=s(age);e9o=r(O4t,"t5"),O4t.forEach(t),o9o=r(xke," \u2014 "),qG=n(xke,"A",{href:!0});var V4t=s(qG);r9o=r(V4t,"T5ForConditionalGeneration"),V4t.forEach(t),t9o=r(xke," (T5 model)"),xke.forEach(t),a9o=i(O),$1=n(O,"LI",{});var $ke=s($1);nge=n($ke,"STRONG",{});var X4t=s(nge);n9o=r(X4t,"tapas"),X4t.forEach(t),s9o=r($ke," \u2014 "),jG=n($ke,"A",{href:!0});var z4t=s(jG);l9o=r(z4t,"TapasForMaskedLM"),z4t.forEach(t),i9o=r($ke," (TAPAS model)"),$ke.forEach(t),d9o=i(O),k1=n(O,"LI",{});var kke=s(k1);sge=n(kke,"STRONG",{});var Q4t=s(sge);c9o=r(Q4t,"transfo-xl"),Q4t.forEach(t),f9o=r(kke," \u2014 "),DG=n(kke,"A",{href:!0});var W4t=s(DG);m9o=r(W4t,"TransfoXLLMHeadModel"),W4t.forEach(t),g9o=r(kke," (Transformer-XL model)"),kke.forEach(t),h9o=i(O),S1=n(O,"LI",{});var Ske=s(S1);lge=n(Ske,"STRONG",{});var H4t=s(lge);p9o=r(H4t,"unispeech"),H4t.forEach(t),_9o=r(Ske," \u2014 "),GG=n(Ske,"A",{href:!0});var U4t=s(GG);u9o=r(U4t,"UniSpeechForPreTraining"),U4t.forEach(t),b9o=r(Ske," (UniSpeech model)"),Ske.forEach(t),v9o=i(O),R1=n(O,"LI",{});var Rke=s(R1);ige=n(Rke,"STRONG",{});var J4t=s(ige);F9o=r(J4t,"unispeech-sat"),J4t.forEach(t),T9o=r(Rke," \u2014 "),OG=n(Rke,"A",{href:!0});var Y4t=s(OG);M9o=r(Y4t,"UniSpeechSatForPreTraining"),Y4t.forEach(t),E9o=r(Rke," (UniSpeechSat model)"),Rke.forEach(t),C9o=i(O),P1=n(O,"LI",{});var Pke=s(P1);dge=n(Pke,"STRONG",{});var K4t=s(dge);w9o=r(K4t,"visual_bert"),K4t.forEach(t),A9o=r(Pke," \u2014 "),VG=n(Pke,"A",{href:!0});var Z4t=s(VG);L9o=r(Z4t,"VisualBertForPreTraining"),Z4t.forEach(t),y9o=r(Pke," (VisualBERT model)"),Pke.forEach(t),x9o=i(O),B1=n(O,"LI",{});var Bke=s(B1);cge=n(Bke,"STRONG",{});var e2t=s(cge);$9o=r(e2t,"vit_mae"),e2t.forEach(t),k9o=r(Bke," \u2014 "),XG=n(Bke,"A",{href:!0});var o2t=s(XG);S9o=r(o2t,"ViTMAEForPreTraining"),o2t.forEach(t),R9o=r(Bke," (ViTMAE model)"),Bke.forEach(t),P9o=i(O),N1=n(O,"LI",{});var Nke=s(N1);fge=n(Nke,"STRONG",{});var r2t=s(fge);B9o=r(r2t,"wav2vec2"),r2t.forEach(t),N9o=r(Nke," \u2014 "),zG=n(Nke,"A",{href:!0});var t2t=s(zG);I9o=r(t2t,"Wav2Vec2ForPreTraining"),t2t.forEach(t),q9o=r(Nke," (Wav2Vec2 model)"),Nke.forEach(t),j9o=i(O),I1=n(O,"LI",{});var Ike=s(I1);mge=n(Ike,"STRONG",{});var a2t=s(mge);D9o=r(a2t,"wav2vec2-conformer"),a2t.forEach(t),G9o=r(Ike," \u2014 "),QG=n(Ike,"A",{href:!0});var n2t=s(QG);O9o=r(n2t,"Wav2Vec2ConformerForPreTraining"),n2t.forEach(t),V9o=r(Ike," (Wav2Vec2-Conformer model)"),Ike.forEach(t),X9o=i(O),q1=n(O,"LI",{});var qke=s(q1);gge=n(qke,"STRONG",{});var s2t=s(gge);z9o=r(s2t,"xlm"),s2t.forEach(t),Q9o=r(qke," \u2014 "),WG=n(qke,"A",{href:!0});var l2t=s(WG);W9o=r(l2t,"XLMWithLMHeadModel"),l2t.forEach(t),H9o=r(qke," (XLM model)"),qke.forEach(t),U9o=i(O),j1=n(O,"LI",{});var jke=s(j1);hge=n(jke,"STRONG",{});var i2t=s(hge);J9o=r(i2t,"xlm-roberta"),i2t.forEach(t),Y9o=r(jke," \u2014 "),HG=n(jke,"A",{href:!0});var d2t=s(HG);K9o=r(d2t,"XLMRobertaForMaskedLM"),d2t.forEach(t),Z9o=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),exo=i(O),D1=n(O,"LI",{});var Dke=s(D1);pge=n(Dke,"STRONG",{});var c2t=s(pge);oxo=r(c2t,"xlm-roberta-xl"),c2t.forEach(t),rxo=r(Dke," \u2014 "),UG=n(Dke,"A",{href:!0});var f2t=s(UG);txo=r(f2t,"XLMRobertaXLForMaskedLM"),f2t.forEach(t),axo=r(Dke," (XLM-RoBERTa-XL model)"),Dke.forEach(t),nxo=i(O),G1=n(O,"LI",{});var Gke=s(G1);_ge=n(Gke,"STRONG",{});var m2t=s(_ge);sxo=r(m2t,"xlnet"),m2t.forEach(t),lxo=r(Gke," \u2014 "),JG=n(Gke,"A",{href:!0});var g2t=s(JG);ixo=r(g2t,"XLNetLMHeadModel"),g2t.forEach(t),dxo=r(Gke," (XLNet model)"),Gke.forEach(t),O.forEach(t),cxo=i(la),O1=n(la,"P",{});var Oke=s(O1);fxo=r(Oke,"The model is set in evaluation mode by default using "),uge=n(Oke,"CODE",{});var h2t=s(uge);mxo=r(h2t,"model.eval()"),h2t.forEach(t),gxo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(Oke,"CODE",{});var p2t=s(bge);hxo=r(p2t,"model.train()"),p2t.forEach(t),Oke.forEach(t),pxo=i(la),T(V1.$$.fragment,la),la.forEach(t),rl.forEach(t),uXe=i(f),Qi=n(f,"H2",{class:!0});var EQe=s(Qi);X1=n(EQe,"A",{id:!0,class:!0,href:!0});var _2t=s(X1);vge=n(_2t,"SPAN",{});var u2t=s(vge);T(GL.$$.fragment,u2t),u2t.forEach(t),_2t.forEach(t),_xo=i(EQe),Fge=n(EQe,"SPAN",{});var b2t=s(Fge);uxo=r(b2t,"AutoModelForCausalLM"),b2t.forEach(t),EQe.forEach(t),bXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(OL.$$.fragment,tl),bxo=i(tl),Wi=n(tl,"P",{});var Bre=s(Wi);vxo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YG=n(Bre,"A",{href:!0});var v2t=s(YG);Fxo=r(v2t,"from_pretrained()"),v2t.forEach(t),Txo=r(Bre," class method or the "),KG=n(Bre,"A",{href:!0});var F2t=s(KG);Mxo=r(F2t,"from_config()"),F2t.forEach(t),Exo=r(Bre,` class
method.`),Bre.forEach(t),Cxo=i(tl),VL=n(tl,"P",{});var CQe=s(VL);wxo=r(CQe,"This class cannot be instantiated directly using "),Tge=n(CQe,"CODE",{});var T2t=s(Tge);Axo=r(T2t,"__init__()"),T2t.forEach(t),Lxo=r(CQe," (throws an error)."),CQe.forEach(t),yxo=i(tl),dt=n(tl,"DIV",{class:!0});var gA=s(dt);T(XL.$$.fragment,gA),xxo=i(gA),Mge=n(gA,"P",{});var M2t=s(Mge);$xo=r(M2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),M2t.forEach(t),kxo=i(gA),Hi=n(gA,"P",{});var Nre=s(Hi);Sxo=r(Nre,`Note:
Loading a model from its configuration file does `),Ege=n(Nre,"STRONG",{});var E2t=s(Ege);Rxo=r(E2t,"not"),E2t.forEach(t),Pxo=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(Nre,"A",{href:!0});var C2t=s(ZG);Bxo=r(C2t,"from_pretrained()"),C2t.forEach(t),Nxo=r(Nre," to load the model weights."),Nre.forEach(t),Ixo=i(gA),T(z1.$$.fragment,gA),gA.forEach(t),qxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(zL.$$.fragment,ia),jxo=i(ia),Cge=n(ia,"P",{});var w2t=s(Cge);Dxo=r(w2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w2t.forEach(t),Gxo=i(ia),qa=n(ia,"P",{});var hA=s(qa);Oxo=r(hA,"The model class to instantiate is selected based on the "),wge=n(hA,"CODE",{});var A2t=s(wge);Vxo=r(A2t,"model_type"),A2t.forEach(t),Xxo=r(hA,` property of the config object (either
passed as an argument or loaded from `),Age=n(hA,"CODE",{});var L2t=s(Age);zxo=r(L2t,"pretrained_model_name_or_path"),L2t.forEach(t),Qxo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(hA,"CODE",{});var y2t=s(Lge);Wxo=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),Hxo=r(hA,":"),hA.forEach(t),Uxo=i(ia),z=n(ia,"UL",{});var Q=s(z);Q1=n(Q,"LI",{});var Vke=s(Q1);yge=n(Vke,"STRONG",{});var x2t=s(yge);Jxo=r(x2t,"bart"),x2t.forEach(t),Yxo=r(Vke," \u2014 "),eO=n(Vke,"A",{href:!0});var $2t=s(eO);Kxo=r($2t,"BartForCausalLM"),$2t.forEach(t),Zxo=r(Vke," (BART model)"),Vke.forEach(t),e$o=i(Q),W1=n(Q,"LI",{});var Xke=s(W1);xge=n(Xke,"STRONG",{});var k2t=s(xge);o$o=r(k2t,"bert"),k2t.forEach(t),r$o=r(Xke," \u2014 "),oO=n(Xke,"A",{href:!0});var S2t=s(oO);t$o=r(S2t,"BertLMHeadModel"),S2t.forEach(t),a$o=r(Xke," (BERT model)"),Xke.forEach(t),n$o=i(Q),H1=n(Q,"LI",{});var zke=s(H1);$ge=n(zke,"STRONG",{});var R2t=s($ge);s$o=r(R2t,"bert-generation"),R2t.forEach(t),l$o=r(zke," \u2014 "),rO=n(zke,"A",{href:!0});var P2t=s(rO);i$o=r(P2t,"BertGenerationDecoder"),P2t.forEach(t),d$o=r(zke," (Bert Generation model)"),zke.forEach(t),c$o=i(Q),U1=n(Q,"LI",{});var Qke=s(U1);kge=n(Qke,"STRONG",{});var B2t=s(kge);f$o=r(B2t,"big_bird"),B2t.forEach(t),m$o=r(Qke," \u2014 "),tO=n(Qke,"A",{href:!0});var N2t=s(tO);g$o=r(N2t,"BigBirdForCausalLM"),N2t.forEach(t),h$o=r(Qke," (BigBird model)"),Qke.forEach(t),p$o=i(Q),J1=n(Q,"LI",{});var Wke=s(J1);Sge=n(Wke,"STRONG",{});var I2t=s(Sge);_$o=r(I2t,"bigbird_pegasus"),I2t.forEach(t),u$o=r(Wke," \u2014 "),aO=n(Wke,"A",{href:!0});var q2t=s(aO);b$o=r(q2t,"BigBirdPegasusForCausalLM"),q2t.forEach(t),v$o=r(Wke," (BigBird-Pegasus model)"),Wke.forEach(t),F$o=i(Q),Y1=n(Q,"LI",{});var Hke=s(Y1);Rge=n(Hke,"STRONG",{});var j2t=s(Rge);T$o=r(j2t,"blenderbot"),j2t.forEach(t),M$o=r(Hke," \u2014 "),nO=n(Hke,"A",{href:!0});var D2t=s(nO);E$o=r(D2t,"BlenderbotForCausalLM"),D2t.forEach(t),C$o=r(Hke," (Blenderbot model)"),Hke.forEach(t),w$o=i(Q),K1=n(Q,"LI",{});var Uke=s(K1);Pge=n(Uke,"STRONG",{});var G2t=s(Pge);A$o=r(G2t,"blenderbot-small"),G2t.forEach(t),L$o=r(Uke," \u2014 "),sO=n(Uke,"A",{href:!0});var O2t=s(sO);y$o=r(O2t,"BlenderbotSmallForCausalLM"),O2t.forEach(t),x$o=r(Uke," (BlenderbotSmall model)"),Uke.forEach(t),$$o=i(Q),Z1=n(Q,"LI",{});var Jke=s(Z1);Bge=n(Jke,"STRONG",{});var V2t=s(Bge);k$o=r(V2t,"bloom"),V2t.forEach(t),S$o=r(Jke," \u2014 "),lO=n(Jke,"A",{href:!0});var X2t=s(lO);R$o=r(X2t,"BloomForCausalLM"),X2t.forEach(t),P$o=r(Jke," (BLOOM model)"),Jke.forEach(t),B$o=i(Q),e4=n(Q,"LI",{});var Yke=s(e4);Nge=n(Yke,"STRONG",{});var z2t=s(Nge);N$o=r(z2t,"camembert"),z2t.forEach(t),I$o=r(Yke," \u2014 "),iO=n(Yke,"A",{href:!0});var Q2t=s(iO);q$o=r(Q2t,"CamembertForCausalLM"),Q2t.forEach(t),j$o=r(Yke," (CamemBERT model)"),Yke.forEach(t),D$o=i(Q),o4=n(Q,"LI",{});var Kke=s(o4);Ige=n(Kke,"STRONG",{});var W2t=s(Ige);G$o=r(W2t,"codegen"),W2t.forEach(t),O$o=r(Kke," \u2014 "),dO=n(Kke,"A",{href:!0});var H2t=s(dO);V$o=r(H2t,"CodeGenForCausalLM"),H2t.forEach(t),X$o=r(Kke," (CodeGen model)"),Kke.forEach(t),z$o=i(Q),r4=n(Q,"LI",{});var Zke=s(r4);qge=n(Zke,"STRONG",{});var U2t=s(qge);Q$o=r(U2t,"ctrl"),U2t.forEach(t),W$o=r(Zke," \u2014 "),cO=n(Zke,"A",{href:!0});var J2t=s(cO);H$o=r(J2t,"CTRLLMHeadModel"),J2t.forEach(t),U$o=r(Zke," (CTRL model)"),Zke.forEach(t),J$o=i(Q),t4=n(Q,"LI",{});var eSe=s(t4);jge=n(eSe,"STRONG",{});var Y2t=s(jge);Y$o=r(Y2t,"data2vec-text"),Y2t.forEach(t),K$o=r(eSe," \u2014 "),fO=n(eSe,"A",{href:!0});var K2t=s(fO);Z$o=r(K2t,"Data2VecTextForCausalLM"),K2t.forEach(t),eko=r(eSe," (Data2VecText model)"),eSe.forEach(t),oko=i(Q),a4=n(Q,"LI",{});var oSe=s(a4);Dge=n(oSe,"STRONG",{});var Z2t=s(Dge);rko=r(Z2t,"electra"),Z2t.forEach(t),tko=r(oSe," \u2014 "),mO=n(oSe,"A",{href:!0});var ebt=s(mO);ako=r(ebt,"ElectraForCausalLM"),ebt.forEach(t),nko=r(oSe," (ELECTRA model)"),oSe.forEach(t),sko=i(Q),n4=n(Q,"LI",{});var rSe=s(n4);Gge=n(rSe,"STRONG",{});var obt=s(Gge);lko=r(obt,"gpt2"),obt.forEach(t),iko=r(rSe," \u2014 "),gO=n(rSe,"A",{href:!0});var rbt=s(gO);dko=r(rbt,"GPT2LMHeadModel"),rbt.forEach(t),cko=r(rSe," (OpenAI GPT-2 model)"),rSe.forEach(t),fko=i(Q),s4=n(Q,"LI",{});var tSe=s(s4);Oge=n(tSe,"STRONG",{});var tbt=s(Oge);mko=r(tbt,"gpt_neo"),tbt.forEach(t),gko=r(tSe," \u2014 "),hO=n(tSe,"A",{href:!0});var abt=s(hO);hko=r(abt,"GPTNeoForCausalLM"),abt.forEach(t),pko=r(tSe," (GPT Neo model)"),tSe.forEach(t),_ko=i(Q),l4=n(Q,"LI",{});var aSe=s(l4);Vge=n(aSe,"STRONG",{});var nbt=s(Vge);uko=r(nbt,"gpt_neox"),nbt.forEach(t),bko=r(aSe," \u2014 "),pO=n(aSe,"A",{href:!0});var sbt=s(pO);vko=r(sbt,"GPTNeoXForCausalLM"),sbt.forEach(t),Fko=r(aSe," (GPT NeoX model)"),aSe.forEach(t),Tko=i(Q),i4=n(Q,"LI",{});var nSe=s(i4);Xge=n(nSe,"STRONG",{});var lbt=s(Xge);Mko=r(lbt,"gptj"),lbt.forEach(t),Eko=r(nSe," \u2014 "),_O=n(nSe,"A",{href:!0});var ibt=s(_O);Cko=r(ibt,"GPTJForCausalLM"),ibt.forEach(t),wko=r(nSe," (GPT-J model)"),nSe.forEach(t),Ako=i(Q),d4=n(Q,"LI",{});var sSe=s(d4);zge=n(sSe,"STRONG",{});var dbt=s(zge);Lko=r(dbt,"marian"),dbt.forEach(t),yko=r(sSe," \u2014 "),uO=n(sSe,"A",{href:!0});var cbt=s(uO);xko=r(cbt,"MarianForCausalLM"),cbt.forEach(t),$ko=r(sSe," (Marian model)"),sSe.forEach(t),kko=i(Q),c4=n(Q,"LI",{});var lSe=s(c4);Qge=n(lSe,"STRONG",{});var fbt=s(Qge);Sko=r(fbt,"mbart"),fbt.forEach(t),Rko=r(lSe," \u2014 "),bO=n(lSe,"A",{href:!0});var mbt=s(bO);Pko=r(mbt,"MBartForCausalLM"),mbt.forEach(t),Bko=r(lSe," (mBART model)"),lSe.forEach(t),Nko=i(Q),f4=n(Q,"LI",{});var iSe=s(f4);Wge=n(iSe,"STRONG",{});var gbt=s(Wge);Iko=r(gbt,"megatron-bert"),gbt.forEach(t),qko=r(iSe," \u2014 "),vO=n(iSe,"A",{href:!0});var hbt=s(vO);jko=r(hbt,"MegatronBertForCausalLM"),hbt.forEach(t),Dko=r(iSe," (Megatron-BERT model)"),iSe.forEach(t),Gko=i(Q),m4=n(Q,"LI",{});var dSe=s(m4);Hge=n(dSe,"STRONG",{});var pbt=s(Hge);Oko=r(pbt,"mvp"),pbt.forEach(t),Vko=r(dSe," \u2014 "),FO=n(dSe,"A",{href:!0});var _bt=s(FO);Xko=r(_bt,"MvpForCausalLM"),_bt.forEach(t),zko=r(dSe," (MVP model)"),dSe.forEach(t),Qko=i(Q),g4=n(Q,"LI",{});var cSe=s(g4);Uge=n(cSe,"STRONG",{});var ubt=s(Uge);Wko=r(ubt,"openai-gpt"),ubt.forEach(t),Hko=r(cSe," \u2014 "),TO=n(cSe,"A",{href:!0});var bbt=s(TO);Uko=r(bbt,"OpenAIGPTLMHeadModel"),bbt.forEach(t),Jko=r(cSe," (OpenAI GPT model)"),cSe.forEach(t),Yko=i(Q),h4=n(Q,"LI",{});var fSe=s(h4);Jge=n(fSe,"STRONG",{});var vbt=s(Jge);Kko=r(vbt,"opt"),vbt.forEach(t),Zko=r(fSe," \u2014 "),MO=n(fSe,"A",{href:!0});var Fbt=s(MO);eSo=r(Fbt,"OPTForCausalLM"),Fbt.forEach(t),oSo=r(fSe," (OPT model)"),fSe.forEach(t),rSo=i(Q),p4=n(Q,"LI",{});var mSe=s(p4);Yge=n(mSe,"STRONG",{});var Tbt=s(Yge);tSo=r(Tbt,"pegasus"),Tbt.forEach(t),aSo=r(mSe," \u2014 "),EO=n(mSe,"A",{href:!0});var Mbt=s(EO);nSo=r(Mbt,"PegasusForCausalLM"),Mbt.forEach(t),sSo=r(mSe," (Pegasus model)"),mSe.forEach(t),lSo=i(Q),_4=n(Q,"LI",{});var gSe=s(_4);Kge=n(gSe,"STRONG",{});var Ebt=s(Kge);iSo=r(Ebt,"plbart"),Ebt.forEach(t),dSo=r(gSe," \u2014 "),CO=n(gSe,"A",{href:!0});var Cbt=s(CO);cSo=r(Cbt,"PLBartForCausalLM"),Cbt.forEach(t),fSo=r(gSe," (PLBart model)"),gSe.forEach(t),mSo=i(Q),u4=n(Q,"LI",{});var hSe=s(u4);Zge=n(hSe,"STRONG",{});var wbt=s(Zge);gSo=r(wbt,"prophetnet"),wbt.forEach(t),hSo=r(hSe," \u2014 "),wO=n(hSe,"A",{href:!0});var Abt=s(wO);pSo=r(Abt,"ProphetNetForCausalLM"),Abt.forEach(t),_So=r(hSe," (ProphetNet model)"),hSe.forEach(t),uSo=i(Q),b4=n(Q,"LI",{});var pSe=s(b4);ehe=n(pSe,"STRONG",{});var Lbt=s(ehe);bSo=r(Lbt,"qdqbert"),Lbt.forEach(t),vSo=r(pSe," \u2014 "),AO=n(pSe,"A",{href:!0});var ybt=s(AO);FSo=r(ybt,"QDQBertLMHeadModel"),ybt.forEach(t),TSo=r(pSe," (QDQBert model)"),pSe.forEach(t),MSo=i(Q),v4=n(Q,"LI",{});var _Se=s(v4);ohe=n(_Se,"STRONG",{});var xbt=s(ohe);ESo=r(xbt,"reformer"),xbt.forEach(t),CSo=r(_Se," \u2014 "),LO=n(_Se,"A",{href:!0});var $bt=s(LO);wSo=r($bt,"ReformerModelWithLMHead"),$bt.forEach(t),ASo=r(_Se," (Reformer model)"),_Se.forEach(t),LSo=i(Q),F4=n(Q,"LI",{});var uSe=s(F4);rhe=n(uSe,"STRONG",{});var kbt=s(rhe);ySo=r(kbt,"rembert"),kbt.forEach(t),xSo=r(uSe," \u2014 "),yO=n(uSe,"A",{href:!0});var Sbt=s(yO);$So=r(Sbt,"RemBertForCausalLM"),Sbt.forEach(t),kSo=r(uSe," (RemBERT model)"),uSe.forEach(t),SSo=i(Q),T4=n(Q,"LI",{});var bSe=s(T4);the=n(bSe,"STRONG",{});var Rbt=s(the);RSo=r(Rbt,"roberta"),Rbt.forEach(t),PSo=r(bSe," \u2014 "),xO=n(bSe,"A",{href:!0});var Pbt=s(xO);BSo=r(Pbt,"RobertaForCausalLM"),Pbt.forEach(t),NSo=r(bSe," (RoBERTa model)"),bSe.forEach(t),ISo=i(Q),M4=n(Q,"LI",{});var vSe=s(M4);ahe=n(vSe,"STRONG",{});var Bbt=s(ahe);qSo=r(Bbt,"roformer"),Bbt.forEach(t),jSo=r(vSe," \u2014 "),$O=n(vSe,"A",{href:!0});var Nbt=s($O);DSo=r(Nbt,"RoFormerForCausalLM"),Nbt.forEach(t),GSo=r(vSe," (RoFormer model)"),vSe.forEach(t),OSo=i(Q),E4=n(Q,"LI",{});var FSe=s(E4);nhe=n(FSe,"STRONG",{});var Ibt=s(nhe);VSo=r(Ibt,"speech_to_text_2"),Ibt.forEach(t),XSo=r(FSe," \u2014 "),kO=n(FSe,"A",{href:!0});var qbt=s(kO);zSo=r(qbt,"Speech2Text2ForCausalLM"),qbt.forEach(t),QSo=r(FSe," (Speech2Text2 model)"),FSe.forEach(t),WSo=i(Q),C4=n(Q,"LI",{});var TSe=s(C4);she=n(TSe,"STRONG",{});var jbt=s(she);HSo=r(jbt,"transfo-xl"),jbt.forEach(t),USo=r(TSe," \u2014 "),SO=n(TSe,"A",{href:!0});var Dbt=s(SO);JSo=r(Dbt,"TransfoXLLMHeadModel"),Dbt.forEach(t),YSo=r(TSe," (Transformer-XL model)"),TSe.forEach(t),KSo=i(Q),w4=n(Q,"LI",{});var MSe=s(w4);lhe=n(MSe,"STRONG",{});var Gbt=s(lhe);ZSo=r(Gbt,"trocr"),Gbt.forEach(t),eRo=r(MSe," \u2014 "),RO=n(MSe,"A",{href:!0});var Obt=s(RO);oRo=r(Obt,"TrOCRForCausalLM"),Obt.forEach(t),rRo=r(MSe," (TrOCR model)"),MSe.forEach(t),tRo=i(Q),A4=n(Q,"LI",{});var ESe=s(A4);ihe=n(ESe,"STRONG",{});var Vbt=s(ihe);aRo=r(Vbt,"xglm"),Vbt.forEach(t),nRo=r(ESe," \u2014 "),PO=n(ESe,"A",{href:!0});var Xbt=s(PO);sRo=r(Xbt,"XGLMForCausalLM"),Xbt.forEach(t),lRo=r(ESe," (XGLM model)"),ESe.forEach(t),iRo=i(Q),L4=n(Q,"LI",{});var CSe=s(L4);dhe=n(CSe,"STRONG",{});var zbt=s(dhe);dRo=r(zbt,"xlm"),zbt.forEach(t),cRo=r(CSe," \u2014 "),BO=n(CSe,"A",{href:!0});var Qbt=s(BO);fRo=r(Qbt,"XLMWithLMHeadModel"),Qbt.forEach(t),mRo=r(CSe," (XLM model)"),CSe.forEach(t),gRo=i(Q),y4=n(Q,"LI",{});var wSe=s(y4);che=n(wSe,"STRONG",{});var Wbt=s(che);hRo=r(Wbt,"xlm-prophetnet"),Wbt.forEach(t),pRo=r(wSe," \u2014 "),NO=n(wSe,"A",{href:!0});var Hbt=s(NO);_Ro=r(Hbt,"XLMProphetNetForCausalLM"),Hbt.forEach(t),uRo=r(wSe," (XLM-ProphetNet model)"),wSe.forEach(t),bRo=i(Q),x4=n(Q,"LI",{});var ASe=s(x4);fhe=n(ASe,"STRONG",{});var Ubt=s(fhe);vRo=r(Ubt,"xlm-roberta"),Ubt.forEach(t),FRo=r(ASe," \u2014 "),IO=n(ASe,"A",{href:!0});var Jbt=s(IO);TRo=r(Jbt,"XLMRobertaForCausalLM"),Jbt.forEach(t),MRo=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),ERo=i(Q),$4=n(Q,"LI",{});var LSe=s($4);mhe=n(LSe,"STRONG",{});var Ybt=s(mhe);CRo=r(Ybt,"xlm-roberta-xl"),Ybt.forEach(t),wRo=r(LSe," \u2014 "),qO=n(LSe,"A",{href:!0});var Kbt=s(qO);ARo=r(Kbt,"XLMRobertaXLForCausalLM"),Kbt.forEach(t),LRo=r(LSe," (XLM-RoBERTa-XL model)"),LSe.forEach(t),yRo=i(Q),k4=n(Q,"LI",{});var ySe=s(k4);ghe=n(ySe,"STRONG",{});var Zbt=s(ghe);xRo=r(Zbt,"xlnet"),Zbt.forEach(t),$Ro=r(ySe," \u2014 "),jO=n(ySe,"A",{href:!0});var evt=s(jO);kRo=r(evt,"XLNetLMHeadModel"),evt.forEach(t),SRo=r(ySe," (XLNet model)"),ySe.forEach(t),Q.forEach(t),RRo=i(ia),S4=n(ia,"P",{});var xSe=s(S4);PRo=r(xSe,"The model is set in evaluation mode by default using "),hhe=n(xSe,"CODE",{});var ovt=s(hhe);BRo=r(ovt,"model.eval()"),ovt.forEach(t),NRo=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(xSe,"CODE",{});var rvt=s(phe);IRo=r(rvt,"model.train()"),rvt.forEach(t),xSe.forEach(t),qRo=i(ia),T(R4.$$.fragment,ia),ia.forEach(t),tl.forEach(t),vXe=i(f),Ui=n(f,"H2",{class:!0});var wQe=s(Ui);P4=n(wQe,"A",{id:!0,class:!0,href:!0});var tvt=s(P4);_he=n(tvt,"SPAN",{});var avt=s(_he);T(QL.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),jRo=i(wQe),uhe=n(wQe,"SPAN",{});var nvt=s(uhe);DRo=r(nvt,"AutoModelForMaskedLM"),nvt.forEach(t),wQe.forEach(t),FXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(WL.$$.fragment,al),GRo=i(al),Ji=n(al,"P",{});var Ire=s(Ji);ORo=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DO=n(Ire,"A",{href:!0});var svt=s(DO);VRo=r(svt,"from_pretrained()"),svt.forEach(t),XRo=r(Ire," class method or the "),GO=n(Ire,"A",{href:!0});var lvt=s(GO);zRo=r(lvt,"from_config()"),lvt.forEach(t),QRo=r(Ire,` class
method.`),Ire.forEach(t),WRo=i(al),HL=n(al,"P",{});var AQe=s(HL);HRo=r(AQe,"This class cannot be instantiated directly using "),bhe=n(AQe,"CODE",{});var ivt=s(bhe);URo=r(ivt,"__init__()"),ivt.forEach(t),JRo=r(AQe," (throws an error)."),AQe.forEach(t),YRo=i(al),ct=n(al,"DIV",{class:!0});var pA=s(ct);T(UL.$$.fragment,pA),KRo=i(pA),vhe=n(pA,"P",{});var dvt=s(vhe);ZRo=r(dvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dvt.forEach(t),ePo=i(pA),Yi=n(pA,"P",{});var qre=s(Yi);oPo=r(qre,`Note:
Loading a model from its configuration file does `),Fhe=n(qre,"STRONG",{});var cvt=s(Fhe);rPo=r(cvt,"not"),cvt.forEach(t),tPo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OO=n(qre,"A",{href:!0});var fvt=s(OO);aPo=r(fvt,"from_pretrained()"),fvt.forEach(t),nPo=r(qre," to load the model weights."),qre.forEach(t),sPo=i(pA),T(B4.$$.fragment,pA),pA.forEach(t),lPo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(JL.$$.fragment,da),iPo=i(da),The=n(da,"P",{});var mvt=s(The);dPo=r(mvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mvt.forEach(t),cPo=i(da),ja=n(da,"P",{});var _A=s(ja);fPo=r(_A,"The model class to instantiate is selected based on the "),Mhe=n(_A,"CODE",{});var gvt=s(Mhe);mPo=r(gvt,"model_type"),gvt.forEach(t),gPo=r(_A,` property of the config object (either
passed as an argument or loaded from `),Ehe=n(_A,"CODE",{});var hvt=s(Ehe);hPo=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),pPo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(_A,"CODE",{});var pvt=s(Che);_Po=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),uPo=r(_A,":"),_A.forEach(t),bPo=i(da),W=n(da,"UL",{});var H=s(W);N4=n(H,"LI",{});var $Se=s(N4);whe=n($Se,"STRONG",{});var _vt=s(whe);vPo=r(_vt,"albert"),_vt.forEach(t),FPo=r($Se," \u2014 "),VO=n($Se,"A",{href:!0});var uvt=s(VO);TPo=r(uvt,"AlbertForMaskedLM"),uvt.forEach(t),MPo=r($Se," (ALBERT model)"),$Se.forEach(t),EPo=i(H),I4=n(H,"LI",{});var kSe=s(I4);Ahe=n(kSe,"STRONG",{});var bvt=s(Ahe);CPo=r(bvt,"bart"),bvt.forEach(t),wPo=r(kSe," \u2014 "),XO=n(kSe,"A",{href:!0});var vvt=s(XO);APo=r(vvt,"BartForConditionalGeneration"),vvt.forEach(t),LPo=r(kSe," (BART model)"),kSe.forEach(t),yPo=i(H),q4=n(H,"LI",{});var SSe=s(q4);Lhe=n(SSe,"STRONG",{});var Fvt=s(Lhe);xPo=r(Fvt,"bert"),Fvt.forEach(t),$Po=r(SSe," \u2014 "),zO=n(SSe,"A",{href:!0});var Tvt=s(zO);kPo=r(Tvt,"BertForMaskedLM"),Tvt.forEach(t),SPo=r(SSe," (BERT model)"),SSe.forEach(t),RPo=i(H),j4=n(H,"LI",{});var RSe=s(j4);yhe=n(RSe,"STRONG",{});var Mvt=s(yhe);PPo=r(Mvt,"big_bird"),Mvt.forEach(t),BPo=r(RSe," \u2014 "),QO=n(RSe,"A",{href:!0});var Evt=s(QO);NPo=r(Evt,"BigBirdForMaskedLM"),Evt.forEach(t),IPo=r(RSe," (BigBird model)"),RSe.forEach(t),qPo=i(H),D4=n(H,"LI",{});var PSe=s(D4);xhe=n(PSe,"STRONG",{});var Cvt=s(xhe);jPo=r(Cvt,"camembert"),Cvt.forEach(t),DPo=r(PSe," \u2014 "),WO=n(PSe,"A",{href:!0});var wvt=s(WO);GPo=r(wvt,"CamembertForMaskedLM"),wvt.forEach(t),OPo=r(PSe," (CamemBERT model)"),PSe.forEach(t),VPo=i(H),G4=n(H,"LI",{});var BSe=s(G4);$he=n(BSe,"STRONG",{});var Avt=s($he);XPo=r(Avt,"convbert"),Avt.forEach(t),zPo=r(BSe," \u2014 "),HO=n(BSe,"A",{href:!0});var Lvt=s(HO);QPo=r(Lvt,"ConvBertForMaskedLM"),Lvt.forEach(t),WPo=r(BSe," (ConvBERT model)"),BSe.forEach(t),HPo=i(H),O4=n(H,"LI",{});var NSe=s(O4);khe=n(NSe,"STRONG",{});var yvt=s(khe);UPo=r(yvt,"data2vec-text"),yvt.forEach(t),JPo=r(NSe," \u2014 "),UO=n(NSe,"A",{href:!0});var xvt=s(UO);YPo=r(xvt,"Data2VecTextForMaskedLM"),xvt.forEach(t),KPo=r(NSe," (Data2VecText model)"),NSe.forEach(t),ZPo=i(H),V4=n(H,"LI",{});var ISe=s(V4);She=n(ISe,"STRONG",{});var $vt=s(She);eBo=r($vt,"deberta"),$vt.forEach(t),oBo=r(ISe," \u2014 "),JO=n(ISe,"A",{href:!0});var kvt=s(JO);rBo=r(kvt,"DebertaForMaskedLM"),kvt.forEach(t),tBo=r(ISe," (DeBERTa model)"),ISe.forEach(t),aBo=i(H),X4=n(H,"LI",{});var qSe=s(X4);Rhe=n(qSe,"STRONG",{});var Svt=s(Rhe);nBo=r(Svt,"deberta-v2"),Svt.forEach(t),sBo=r(qSe," \u2014 "),YO=n(qSe,"A",{href:!0});var Rvt=s(YO);lBo=r(Rvt,"DebertaV2ForMaskedLM"),Rvt.forEach(t),iBo=r(qSe," (DeBERTa-v2 model)"),qSe.forEach(t),dBo=i(H),z4=n(H,"LI",{});var jSe=s(z4);Phe=n(jSe,"STRONG",{});var Pvt=s(Phe);cBo=r(Pvt,"distilbert"),Pvt.forEach(t),fBo=r(jSe," \u2014 "),KO=n(jSe,"A",{href:!0});var Bvt=s(KO);mBo=r(Bvt,"DistilBertForMaskedLM"),Bvt.forEach(t),gBo=r(jSe," (DistilBERT model)"),jSe.forEach(t),hBo=i(H),Q4=n(H,"LI",{});var DSe=s(Q4);Bhe=n(DSe,"STRONG",{});var Nvt=s(Bhe);pBo=r(Nvt,"electra"),Nvt.forEach(t),_Bo=r(DSe," \u2014 "),ZO=n(DSe,"A",{href:!0});var Ivt=s(ZO);uBo=r(Ivt,"ElectraForMaskedLM"),Ivt.forEach(t),bBo=r(DSe," (ELECTRA model)"),DSe.forEach(t),vBo=i(H),W4=n(H,"LI",{});var GSe=s(W4);Nhe=n(GSe,"STRONG",{});var qvt=s(Nhe);FBo=r(qvt,"flaubert"),qvt.forEach(t),TBo=r(GSe," \u2014 "),eV=n(GSe,"A",{href:!0});var jvt=s(eV);MBo=r(jvt,"FlaubertWithLMHeadModel"),jvt.forEach(t),EBo=r(GSe," (FlauBERT model)"),GSe.forEach(t),CBo=i(H),H4=n(H,"LI",{});var OSe=s(H4);Ihe=n(OSe,"STRONG",{});var Dvt=s(Ihe);wBo=r(Dvt,"fnet"),Dvt.forEach(t),ABo=r(OSe," \u2014 "),oV=n(OSe,"A",{href:!0});var Gvt=s(oV);LBo=r(Gvt,"FNetForMaskedLM"),Gvt.forEach(t),yBo=r(OSe," (FNet model)"),OSe.forEach(t),xBo=i(H),U4=n(H,"LI",{});var VSe=s(U4);qhe=n(VSe,"STRONG",{});var Ovt=s(qhe);$Bo=r(Ovt,"funnel"),Ovt.forEach(t),kBo=r(VSe," \u2014 "),rV=n(VSe,"A",{href:!0});var Vvt=s(rV);SBo=r(Vvt,"FunnelForMaskedLM"),Vvt.forEach(t),RBo=r(VSe," (Funnel Transformer model)"),VSe.forEach(t),PBo=i(H),J4=n(H,"LI",{});var XSe=s(J4);jhe=n(XSe,"STRONG",{});var Xvt=s(jhe);BBo=r(Xvt,"ibert"),Xvt.forEach(t),NBo=r(XSe," \u2014 "),tV=n(XSe,"A",{href:!0});var zvt=s(tV);IBo=r(zvt,"IBertForMaskedLM"),zvt.forEach(t),qBo=r(XSe," (I-BERT model)"),XSe.forEach(t),jBo=i(H),Y4=n(H,"LI",{});var zSe=s(Y4);Dhe=n(zSe,"STRONG",{});var Qvt=s(Dhe);DBo=r(Qvt,"layoutlm"),Qvt.forEach(t),GBo=r(zSe," \u2014 "),aV=n(zSe,"A",{href:!0});var Wvt=s(aV);OBo=r(Wvt,"LayoutLMForMaskedLM"),Wvt.forEach(t),VBo=r(zSe," (LayoutLM model)"),zSe.forEach(t),XBo=i(H),K4=n(H,"LI",{});var QSe=s(K4);Ghe=n(QSe,"STRONG",{});var Hvt=s(Ghe);zBo=r(Hvt,"longformer"),Hvt.forEach(t),QBo=r(QSe," \u2014 "),nV=n(QSe,"A",{href:!0});var Uvt=s(nV);WBo=r(Uvt,"LongformerForMaskedLM"),Uvt.forEach(t),HBo=r(QSe," (Longformer model)"),QSe.forEach(t),UBo=i(H),Z4=n(H,"LI",{});var WSe=s(Z4);Ohe=n(WSe,"STRONG",{});var Jvt=s(Ohe);JBo=r(Jvt,"luke"),Jvt.forEach(t),YBo=r(WSe," \u2014 "),sV=n(WSe,"A",{href:!0});var Yvt=s(sV);KBo=r(Yvt,"LukeForMaskedLM"),Yvt.forEach(t),ZBo=r(WSe," (LUKE model)"),WSe.forEach(t),eNo=i(H),e2=n(H,"LI",{});var HSe=s(e2);Vhe=n(HSe,"STRONG",{});var Kvt=s(Vhe);oNo=r(Kvt,"mbart"),Kvt.forEach(t),rNo=r(HSe," \u2014 "),lV=n(HSe,"A",{href:!0});var Zvt=s(lV);tNo=r(Zvt,"MBartForConditionalGeneration"),Zvt.forEach(t),aNo=r(HSe," (mBART model)"),HSe.forEach(t),nNo=i(H),o2=n(H,"LI",{});var USe=s(o2);Xhe=n(USe,"STRONG",{});var e5t=s(Xhe);sNo=r(e5t,"megatron-bert"),e5t.forEach(t),lNo=r(USe," \u2014 "),iV=n(USe,"A",{href:!0});var o5t=s(iV);iNo=r(o5t,"MegatronBertForMaskedLM"),o5t.forEach(t),dNo=r(USe," (Megatron-BERT model)"),USe.forEach(t),cNo=i(H),r2=n(H,"LI",{});var JSe=s(r2);zhe=n(JSe,"STRONG",{});var r5t=s(zhe);fNo=r(r5t,"mobilebert"),r5t.forEach(t),mNo=r(JSe," \u2014 "),dV=n(JSe,"A",{href:!0});var t5t=s(dV);gNo=r(t5t,"MobileBertForMaskedLM"),t5t.forEach(t),hNo=r(JSe," (MobileBERT model)"),JSe.forEach(t),pNo=i(H),t2=n(H,"LI",{});var YSe=s(t2);Qhe=n(YSe,"STRONG",{});var a5t=s(Qhe);_No=r(a5t,"mpnet"),a5t.forEach(t),uNo=r(YSe," \u2014 "),cV=n(YSe,"A",{href:!0});var n5t=s(cV);bNo=r(n5t,"MPNetForMaskedLM"),n5t.forEach(t),vNo=r(YSe," (MPNet model)"),YSe.forEach(t),FNo=i(H),a2=n(H,"LI",{});var KSe=s(a2);Whe=n(KSe,"STRONG",{});var s5t=s(Whe);TNo=r(s5t,"mvp"),s5t.forEach(t),MNo=r(KSe," \u2014 "),fV=n(KSe,"A",{href:!0});var l5t=s(fV);ENo=r(l5t,"MvpForConditionalGeneration"),l5t.forEach(t),CNo=r(KSe," (MVP model)"),KSe.forEach(t),wNo=i(H),n2=n(H,"LI",{});var ZSe=s(n2);Hhe=n(ZSe,"STRONG",{});var i5t=s(Hhe);ANo=r(i5t,"nezha"),i5t.forEach(t),LNo=r(ZSe," \u2014 "),mV=n(ZSe,"A",{href:!0});var d5t=s(mV);yNo=r(d5t,"NezhaForMaskedLM"),d5t.forEach(t),xNo=r(ZSe," (Nezha model)"),ZSe.forEach(t),$No=i(H),s2=n(H,"LI",{});var eRe=s(s2);Uhe=n(eRe,"STRONG",{});var c5t=s(Uhe);kNo=r(c5t,"nystromformer"),c5t.forEach(t),SNo=r(eRe," \u2014 "),gV=n(eRe,"A",{href:!0});var f5t=s(gV);RNo=r(f5t,"NystromformerForMaskedLM"),f5t.forEach(t),PNo=r(eRe," (Nystr\xF6mformer model)"),eRe.forEach(t),BNo=i(H),l2=n(H,"LI",{});var oRe=s(l2);Jhe=n(oRe,"STRONG",{});var m5t=s(Jhe);NNo=r(m5t,"perceiver"),m5t.forEach(t),INo=r(oRe," \u2014 "),hV=n(oRe,"A",{href:!0});var g5t=s(hV);qNo=r(g5t,"PerceiverForMaskedLM"),g5t.forEach(t),jNo=r(oRe," (Perceiver model)"),oRe.forEach(t),DNo=i(H),i2=n(H,"LI",{});var rRe=s(i2);Yhe=n(rRe,"STRONG",{});var h5t=s(Yhe);GNo=r(h5t,"qdqbert"),h5t.forEach(t),ONo=r(rRe," \u2014 "),pV=n(rRe,"A",{href:!0});var p5t=s(pV);VNo=r(p5t,"QDQBertForMaskedLM"),p5t.forEach(t),XNo=r(rRe," (QDQBert model)"),rRe.forEach(t),zNo=i(H),d2=n(H,"LI",{});var tRe=s(d2);Khe=n(tRe,"STRONG",{});var _5t=s(Khe);QNo=r(_5t,"reformer"),_5t.forEach(t),WNo=r(tRe," \u2014 "),_V=n(tRe,"A",{href:!0});var u5t=s(_V);HNo=r(u5t,"ReformerForMaskedLM"),u5t.forEach(t),UNo=r(tRe," (Reformer model)"),tRe.forEach(t),JNo=i(H),c2=n(H,"LI",{});var aRe=s(c2);Zhe=n(aRe,"STRONG",{});var b5t=s(Zhe);YNo=r(b5t,"rembert"),b5t.forEach(t),KNo=r(aRe," \u2014 "),uV=n(aRe,"A",{href:!0});var v5t=s(uV);ZNo=r(v5t,"RemBertForMaskedLM"),v5t.forEach(t),eIo=r(aRe," (RemBERT model)"),aRe.forEach(t),oIo=i(H),f2=n(H,"LI",{});var nRe=s(f2);epe=n(nRe,"STRONG",{});var F5t=s(epe);rIo=r(F5t,"roberta"),F5t.forEach(t),tIo=r(nRe," \u2014 "),bV=n(nRe,"A",{href:!0});var T5t=s(bV);aIo=r(T5t,"RobertaForMaskedLM"),T5t.forEach(t),nIo=r(nRe," (RoBERTa model)"),nRe.forEach(t),sIo=i(H),m2=n(H,"LI",{});var sRe=s(m2);ope=n(sRe,"STRONG",{});var M5t=s(ope);lIo=r(M5t,"roformer"),M5t.forEach(t),iIo=r(sRe," \u2014 "),vV=n(sRe,"A",{href:!0});var E5t=s(vV);dIo=r(E5t,"RoFormerForMaskedLM"),E5t.forEach(t),cIo=r(sRe," (RoFormer model)"),sRe.forEach(t),fIo=i(H),g2=n(H,"LI",{});var lRe=s(g2);rpe=n(lRe,"STRONG",{});var C5t=s(rpe);mIo=r(C5t,"squeezebert"),C5t.forEach(t),gIo=r(lRe," \u2014 "),FV=n(lRe,"A",{href:!0});var w5t=s(FV);hIo=r(w5t,"SqueezeBertForMaskedLM"),w5t.forEach(t),pIo=r(lRe," (SqueezeBERT model)"),lRe.forEach(t),_Io=i(H),h2=n(H,"LI",{});var iRe=s(h2);tpe=n(iRe,"STRONG",{});var A5t=s(tpe);uIo=r(A5t,"tapas"),A5t.forEach(t),bIo=r(iRe," \u2014 "),TV=n(iRe,"A",{href:!0});var L5t=s(TV);vIo=r(L5t,"TapasForMaskedLM"),L5t.forEach(t),FIo=r(iRe," (TAPAS model)"),iRe.forEach(t),TIo=i(H),p2=n(H,"LI",{});var dRe=s(p2);ape=n(dRe,"STRONG",{});var y5t=s(ape);MIo=r(y5t,"wav2vec2"),y5t.forEach(t),EIo=r(dRe," \u2014 "),npe=n(dRe,"CODE",{});var x5t=s(npe);CIo=r(x5t,"Wav2Vec2ForMaskedLM"),x5t.forEach(t),wIo=r(dRe," (Wav2Vec2 model)"),dRe.forEach(t),AIo=i(H),_2=n(H,"LI",{});var cRe=s(_2);spe=n(cRe,"STRONG",{});var $5t=s(spe);LIo=r($5t,"xlm"),$5t.forEach(t),yIo=r(cRe," \u2014 "),MV=n(cRe,"A",{href:!0});var k5t=s(MV);xIo=r(k5t,"XLMWithLMHeadModel"),k5t.forEach(t),$Io=r(cRe," (XLM model)"),cRe.forEach(t),kIo=i(H),u2=n(H,"LI",{});var fRe=s(u2);lpe=n(fRe,"STRONG",{});var S5t=s(lpe);SIo=r(S5t,"xlm-roberta"),S5t.forEach(t),RIo=r(fRe," \u2014 "),EV=n(fRe,"A",{href:!0});var R5t=s(EV);PIo=r(R5t,"XLMRobertaForMaskedLM"),R5t.forEach(t),BIo=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),NIo=i(H),b2=n(H,"LI",{});var mRe=s(b2);ipe=n(mRe,"STRONG",{});var P5t=s(ipe);IIo=r(P5t,"xlm-roberta-xl"),P5t.forEach(t),qIo=r(mRe," \u2014 "),CV=n(mRe,"A",{href:!0});var B5t=s(CV);jIo=r(B5t,"XLMRobertaXLForMaskedLM"),B5t.forEach(t),DIo=r(mRe," (XLM-RoBERTa-XL model)"),mRe.forEach(t),GIo=i(H),v2=n(H,"LI",{});var gRe=s(v2);dpe=n(gRe,"STRONG",{});var N5t=s(dpe);OIo=r(N5t,"yoso"),N5t.forEach(t),VIo=r(gRe," \u2014 "),wV=n(gRe,"A",{href:!0});var I5t=s(wV);XIo=r(I5t,"YosoForMaskedLM"),I5t.forEach(t),zIo=r(gRe," (YOSO model)"),gRe.forEach(t),H.forEach(t),QIo=i(da),F2=n(da,"P",{});var hRe=s(F2);WIo=r(hRe,"The model is set in evaluation mode by default using "),cpe=n(hRe,"CODE",{});var q5t=s(cpe);HIo=r(q5t,"model.eval()"),q5t.forEach(t),UIo=r(hRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(hRe,"CODE",{});var j5t=s(fpe);JIo=r(j5t,"model.train()"),j5t.forEach(t),hRe.forEach(t),YIo=i(da),T(T2.$$.fragment,da),da.forEach(t),al.forEach(t),TXe=i(f),Ki=n(f,"H2",{class:!0});var LQe=s(Ki);M2=n(LQe,"A",{id:!0,class:!0,href:!0});var D5t=s(M2);mpe=n(D5t,"SPAN",{});var G5t=s(mpe);T(YL.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),KIo=i(LQe),gpe=n(LQe,"SPAN",{});var O5t=s(gpe);ZIo=r(O5t,"AutoModelForSeq2SeqLM"),O5t.forEach(t),LQe.forEach(t),MXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(KL.$$.fragment,nl),eqo=i(nl),Zi=n(nl,"P",{});var jre=s(Zi);oqo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AV=n(jre,"A",{href:!0});var V5t=s(AV);rqo=r(V5t,"from_pretrained()"),V5t.forEach(t),tqo=r(jre," class method or the "),LV=n(jre,"A",{href:!0});var X5t=s(LV);aqo=r(X5t,"from_config()"),X5t.forEach(t),nqo=r(jre,` class
method.`),jre.forEach(t),sqo=i(nl),ZL=n(nl,"P",{});var yQe=s(ZL);lqo=r(yQe,"This class cannot be instantiated directly using "),hpe=n(yQe,"CODE",{});var z5t=s(hpe);iqo=r(z5t,"__init__()"),z5t.forEach(t),dqo=r(yQe," (throws an error)."),yQe.forEach(t),cqo=i(nl),ft=n(nl,"DIV",{class:!0});var uA=s(ft);T(ey.$$.fragment,uA),fqo=i(uA),ppe=n(uA,"P",{});var Q5t=s(ppe);mqo=r(Q5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q5t.forEach(t),gqo=i(uA),ed=n(uA,"P",{});var Dre=s(ed);hqo=r(Dre,`Note:
Loading a model from its configuration file does `),_pe=n(Dre,"STRONG",{});var W5t=s(_pe);pqo=r(W5t,"not"),W5t.forEach(t),_qo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(Dre,"A",{href:!0});var H5t=s(yV);uqo=r(H5t,"from_pretrained()"),H5t.forEach(t),bqo=r(Dre," to load the model weights."),Dre.forEach(t),vqo=i(uA),T(E2.$$.fragment,uA),uA.forEach(t),Fqo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(oy.$$.fragment,ca),Tqo=i(ca),upe=n(ca,"P",{});var U5t=s(upe);Mqo=r(U5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),U5t.forEach(t),Eqo=i(ca),Da=n(ca,"P",{});var bA=s(Da);Cqo=r(bA,"The model class to instantiate is selected based on the "),bpe=n(bA,"CODE",{});var J5t=s(bpe);wqo=r(J5t,"model_type"),J5t.forEach(t),Aqo=r(bA,` property of the config object (either
passed as an argument or loaded from `),vpe=n(bA,"CODE",{});var Y5t=s(vpe);Lqo=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),yqo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(bA,"CODE",{});var K5t=s(Fpe);xqo=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),$qo=r(bA,":"),bA.forEach(t),kqo=i(ca),pe=n(ca,"UL",{});var ve=s(pe);C2=n(ve,"LI",{});var pRe=s(C2);Tpe=n(pRe,"STRONG",{});var Z5t=s(Tpe);Sqo=r(Z5t,"bart"),Z5t.forEach(t),Rqo=r(pRe," \u2014 "),xV=n(pRe,"A",{href:!0});var eFt=s(xV);Pqo=r(eFt,"BartForConditionalGeneration"),eFt.forEach(t),Bqo=r(pRe," (BART model)"),pRe.forEach(t),Nqo=i(ve),w2=n(ve,"LI",{});var _Re=s(w2);Mpe=n(_Re,"STRONG",{});var oFt=s(Mpe);Iqo=r(oFt,"bigbird_pegasus"),oFt.forEach(t),qqo=r(_Re," \u2014 "),$V=n(_Re,"A",{href:!0});var rFt=s($V);jqo=r(rFt,"BigBirdPegasusForConditionalGeneration"),rFt.forEach(t),Dqo=r(_Re," (BigBird-Pegasus model)"),_Re.forEach(t),Gqo=i(ve),A2=n(ve,"LI",{});var uRe=s(A2);Epe=n(uRe,"STRONG",{});var tFt=s(Epe);Oqo=r(tFt,"blenderbot"),tFt.forEach(t),Vqo=r(uRe," \u2014 "),kV=n(uRe,"A",{href:!0});var aFt=s(kV);Xqo=r(aFt,"BlenderbotForConditionalGeneration"),aFt.forEach(t),zqo=r(uRe," (Blenderbot model)"),uRe.forEach(t),Qqo=i(ve),L2=n(ve,"LI",{});var bRe=s(L2);Cpe=n(bRe,"STRONG",{});var nFt=s(Cpe);Wqo=r(nFt,"blenderbot-small"),nFt.forEach(t),Hqo=r(bRe," \u2014 "),SV=n(bRe,"A",{href:!0});var sFt=s(SV);Uqo=r(sFt,"BlenderbotSmallForConditionalGeneration"),sFt.forEach(t),Jqo=r(bRe," (BlenderbotSmall model)"),bRe.forEach(t),Yqo=i(ve),y2=n(ve,"LI",{});var vRe=s(y2);wpe=n(vRe,"STRONG",{});var lFt=s(wpe);Kqo=r(lFt,"encoder-decoder"),lFt.forEach(t),Zqo=r(vRe," \u2014 "),RV=n(vRe,"A",{href:!0});var iFt=s(RV);ejo=r(iFt,"EncoderDecoderModel"),iFt.forEach(t),ojo=r(vRe," (Encoder decoder model)"),vRe.forEach(t),rjo=i(ve),x2=n(ve,"LI",{});var FRe=s(x2);Ape=n(FRe,"STRONG",{});var dFt=s(Ape);tjo=r(dFt,"fsmt"),dFt.forEach(t),ajo=r(FRe," \u2014 "),PV=n(FRe,"A",{href:!0});var cFt=s(PV);njo=r(cFt,"FSMTForConditionalGeneration"),cFt.forEach(t),sjo=r(FRe," (FairSeq Machine-Translation model)"),FRe.forEach(t),ljo=i(ve),$2=n(ve,"LI",{});var TRe=s($2);Lpe=n(TRe,"STRONG",{});var fFt=s(Lpe);ijo=r(fFt,"led"),fFt.forEach(t),djo=r(TRe," \u2014 "),BV=n(TRe,"A",{href:!0});var mFt=s(BV);cjo=r(mFt,"LEDForConditionalGeneration"),mFt.forEach(t),fjo=r(TRe," (LED model)"),TRe.forEach(t),mjo=i(ve),k2=n(ve,"LI",{});var MRe=s(k2);ype=n(MRe,"STRONG",{});var gFt=s(ype);gjo=r(gFt,"longt5"),gFt.forEach(t),hjo=r(MRe," \u2014 "),NV=n(MRe,"A",{href:!0});var hFt=s(NV);pjo=r(hFt,"LongT5ForConditionalGeneration"),hFt.forEach(t),_jo=r(MRe," (LongT5 model)"),MRe.forEach(t),ujo=i(ve),S2=n(ve,"LI",{});var ERe=s(S2);xpe=n(ERe,"STRONG",{});var pFt=s(xpe);bjo=r(pFt,"m2m_100"),pFt.forEach(t),vjo=r(ERe," \u2014 "),IV=n(ERe,"A",{href:!0});var _Ft=s(IV);Fjo=r(_Ft,"M2M100ForConditionalGeneration"),_Ft.forEach(t),Tjo=r(ERe," (M2M100 model)"),ERe.forEach(t),Mjo=i(ve),R2=n(ve,"LI",{});var CRe=s(R2);$pe=n(CRe,"STRONG",{});var uFt=s($pe);Ejo=r(uFt,"marian"),uFt.forEach(t),Cjo=r(CRe," \u2014 "),qV=n(CRe,"A",{href:!0});var bFt=s(qV);wjo=r(bFt,"MarianMTModel"),bFt.forEach(t),Ajo=r(CRe," (Marian model)"),CRe.forEach(t),Ljo=i(ve),P2=n(ve,"LI",{});var wRe=s(P2);kpe=n(wRe,"STRONG",{});var vFt=s(kpe);yjo=r(vFt,"mbart"),vFt.forEach(t),xjo=r(wRe," \u2014 "),jV=n(wRe,"A",{href:!0});var FFt=s(jV);$jo=r(FFt,"MBartForConditionalGeneration"),FFt.forEach(t),kjo=r(wRe," (mBART model)"),wRe.forEach(t),Sjo=i(ve),B2=n(ve,"LI",{});var ARe=s(B2);Spe=n(ARe,"STRONG",{});var TFt=s(Spe);Rjo=r(TFt,"mt5"),TFt.forEach(t),Pjo=r(ARe," \u2014 "),DV=n(ARe,"A",{href:!0});var MFt=s(DV);Bjo=r(MFt,"MT5ForConditionalGeneration"),MFt.forEach(t),Njo=r(ARe," (MT5 model)"),ARe.forEach(t),Ijo=i(ve),N2=n(ve,"LI",{});var LRe=s(N2);Rpe=n(LRe,"STRONG",{});var EFt=s(Rpe);qjo=r(EFt,"mvp"),EFt.forEach(t),jjo=r(LRe," \u2014 "),GV=n(LRe,"A",{href:!0});var CFt=s(GV);Djo=r(CFt,"MvpForConditionalGeneration"),CFt.forEach(t),Gjo=r(LRe," (MVP model)"),LRe.forEach(t),Ojo=i(ve),I2=n(ve,"LI",{});var yRe=s(I2);Ppe=n(yRe,"STRONG",{});var wFt=s(Ppe);Vjo=r(wFt,"pegasus"),wFt.forEach(t),Xjo=r(yRe," \u2014 "),OV=n(yRe,"A",{href:!0});var AFt=s(OV);zjo=r(AFt,"PegasusForConditionalGeneration"),AFt.forEach(t),Qjo=r(yRe," (Pegasus model)"),yRe.forEach(t),Wjo=i(ve),q2=n(ve,"LI",{});var xRe=s(q2);Bpe=n(xRe,"STRONG",{});var LFt=s(Bpe);Hjo=r(LFt,"plbart"),LFt.forEach(t),Ujo=r(xRe," \u2014 "),VV=n(xRe,"A",{href:!0});var yFt=s(VV);Jjo=r(yFt,"PLBartForConditionalGeneration"),yFt.forEach(t),Yjo=r(xRe," (PLBart model)"),xRe.forEach(t),Kjo=i(ve),j2=n(ve,"LI",{});var $Re=s(j2);Npe=n($Re,"STRONG",{});var xFt=s(Npe);Zjo=r(xFt,"prophetnet"),xFt.forEach(t),eDo=r($Re," \u2014 "),XV=n($Re,"A",{href:!0});var $Ft=s(XV);oDo=r($Ft,"ProphetNetForConditionalGeneration"),$Ft.forEach(t),rDo=r($Re," (ProphetNet model)"),$Re.forEach(t),tDo=i(ve),D2=n(ve,"LI",{});var kRe=s(D2);Ipe=n(kRe,"STRONG",{});var kFt=s(Ipe);aDo=r(kFt,"t5"),kFt.forEach(t),nDo=r(kRe," \u2014 "),zV=n(kRe,"A",{href:!0});var SFt=s(zV);sDo=r(SFt,"T5ForConditionalGeneration"),SFt.forEach(t),lDo=r(kRe," (T5 model)"),kRe.forEach(t),iDo=i(ve),G2=n(ve,"LI",{});var SRe=s(G2);qpe=n(SRe,"STRONG",{});var RFt=s(qpe);dDo=r(RFt,"xlm-prophetnet"),RFt.forEach(t),cDo=r(SRe," \u2014 "),QV=n(SRe,"A",{href:!0});var PFt=s(QV);fDo=r(PFt,"XLMProphetNetForConditionalGeneration"),PFt.forEach(t),mDo=r(SRe," (XLM-ProphetNet model)"),SRe.forEach(t),ve.forEach(t),gDo=i(ca),O2=n(ca,"P",{});var RRe=s(O2);hDo=r(RRe,"The model is set in evaluation mode by default using "),jpe=n(RRe,"CODE",{});var BFt=s(jpe);pDo=r(BFt,"model.eval()"),BFt.forEach(t),_Do=r(RRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(RRe,"CODE",{});var NFt=s(Dpe);uDo=r(NFt,"model.train()"),NFt.forEach(t),RRe.forEach(t),bDo=i(ca),T(V2.$$.fragment,ca),ca.forEach(t),nl.forEach(t),EXe=i(f),od=n(f,"H2",{class:!0});var xQe=s(od);X2=n(xQe,"A",{id:!0,class:!0,href:!0});var IFt=s(X2);Gpe=n(IFt,"SPAN",{});var qFt=s(Gpe);T(ry.$$.fragment,qFt),qFt.forEach(t),IFt.forEach(t),vDo=i(xQe),Ope=n(xQe,"SPAN",{});var jFt=s(Ope);FDo=r(jFt,"AutoModelForSequenceClassification"),jFt.forEach(t),xQe.forEach(t),CXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(ty.$$.fragment,sl),TDo=i(sl),rd=n(sl,"P",{});var Gre=s(rd);MDo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WV=n(Gre,"A",{href:!0});var DFt=s(WV);EDo=r(DFt,"from_pretrained()"),DFt.forEach(t),CDo=r(Gre," class method or the "),HV=n(Gre,"A",{href:!0});var GFt=s(HV);wDo=r(GFt,"from_config()"),GFt.forEach(t),ADo=r(Gre,` class
method.`),Gre.forEach(t),LDo=i(sl),ay=n(sl,"P",{});var $Qe=s(ay);yDo=r($Qe,"This class cannot be instantiated directly using "),Vpe=n($Qe,"CODE",{});var OFt=s(Vpe);xDo=r(OFt,"__init__()"),OFt.forEach(t),$Do=r($Qe," (throws an error)."),$Qe.forEach(t),kDo=i(sl),mt=n(sl,"DIV",{class:!0});var vA=s(mt);T(ny.$$.fragment,vA),SDo=i(vA),Xpe=n(vA,"P",{});var VFt=s(Xpe);RDo=r(VFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VFt.forEach(t),PDo=i(vA),td=n(vA,"P",{});var Ore=s(td);BDo=r(Ore,`Note:
Loading a model from its configuration file does `),zpe=n(Ore,"STRONG",{});var XFt=s(zpe);NDo=r(XFt,"not"),XFt.forEach(t),IDo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(Ore,"A",{href:!0});var zFt=s(UV);qDo=r(zFt,"from_pretrained()"),zFt.forEach(t),jDo=r(Ore," to load the model weights."),Ore.forEach(t),DDo=i(vA),T(z2.$$.fragment,vA),vA.forEach(t),GDo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(sy.$$.fragment,fa),ODo=i(fa),Qpe=n(fa,"P",{});var QFt=s(Qpe);VDo=r(QFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QFt.forEach(t),XDo=i(fa),Ga=n(fa,"P",{});var FA=s(Ga);zDo=r(FA,"The model class to instantiate is selected based on the "),Wpe=n(FA,"CODE",{});var WFt=s(Wpe);QDo=r(WFt,"model_type"),WFt.forEach(t),WDo=r(FA,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(FA,"CODE",{});var HFt=s(Hpe);HDo=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),UDo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(FA,"CODE",{});var UFt=s(Upe);JDo=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),YDo=r(FA,":"),FA.forEach(t),KDo=i(fa),I=n(fa,"UL",{});var q=s(I);Q2=n(q,"LI",{});var PRe=s(Q2);Jpe=n(PRe,"STRONG",{});var JFt=s(Jpe);ZDo=r(JFt,"albert"),JFt.forEach(t),eGo=r(PRe," \u2014 "),JV=n(PRe,"A",{href:!0});var YFt=s(JV);oGo=r(YFt,"AlbertForSequenceClassification"),YFt.forEach(t),rGo=r(PRe," (ALBERT model)"),PRe.forEach(t),tGo=i(q),W2=n(q,"LI",{});var BRe=s(W2);Ype=n(BRe,"STRONG",{});var KFt=s(Ype);aGo=r(KFt,"bart"),KFt.forEach(t),nGo=r(BRe," \u2014 "),YV=n(BRe,"A",{href:!0});var ZFt=s(YV);sGo=r(ZFt,"BartForSequenceClassification"),ZFt.forEach(t),lGo=r(BRe," (BART model)"),BRe.forEach(t),iGo=i(q),H2=n(q,"LI",{});var NRe=s(H2);Kpe=n(NRe,"STRONG",{});var eTt=s(Kpe);dGo=r(eTt,"bert"),eTt.forEach(t),cGo=r(NRe," \u2014 "),KV=n(NRe,"A",{href:!0});var oTt=s(KV);fGo=r(oTt,"BertForSequenceClassification"),oTt.forEach(t),mGo=r(NRe," (BERT model)"),NRe.forEach(t),gGo=i(q),U2=n(q,"LI",{});var IRe=s(U2);Zpe=n(IRe,"STRONG",{});var rTt=s(Zpe);hGo=r(rTt,"big_bird"),rTt.forEach(t),pGo=r(IRe," \u2014 "),ZV=n(IRe,"A",{href:!0});var tTt=s(ZV);_Go=r(tTt,"BigBirdForSequenceClassification"),tTt.forEach(t),uGo=r(IRe," (BigBird model)"),IRe.forEach(t),bGo=i(q),J2=n(q,"LI",{});var qRe=s(J2);e_e=n(qRe,"STRONG",{});var aTt=s(e_e);vGo=r(aTt,"bigbird_pegasus"),aTt.forEach(t),FGo=r(qRe," \u2014 "),eX=n(qRe,"A",{href:!0});var nTt=s(eX);TGo=r(nTt,"BigBirdPegasusForSequenceClassification"),nTt.forEach(t),MGo=r(qRe," (BigBird-Pegasus model)"),qRe.forEach(t),EGo=i(q),Y2=n(q,"LI",{});var jRe=s(Y2);o_e=n(jRe,"STRONG",{});var sTt=s(o_e);CGo=r(sTt,"bloom"),sTt.forEach(t),wGo=r(jRe," \u2014 "),oX=n(jRe,"A",{href:!0});var lTt=s(oX);AGo=r(lTt,"BloomForSequenceClassification"),lTt.forEach(t),LGo=r(jRe," (BLOOM model)"),jRe.forEach(t),yGo=i(q),K2=n(q,"LI",{});var DRe=s(K2);r_e=n(DRe,"STRONG",{});var iTt=s(r_e);xGo=r(iTt,"camembert"),iTt.forEach(t),$Go=r(DRe," \u2014 "),rX=n(DRe,"A",{href:!0});var dTt=s(rX);kGo=r(dTt,"CamembertForSequenceClassification"),dTt.forEach(t),SGo=r(DRe," (CamemBERT model)"),DRe.forEach(t),RGo=i(q),Z2=n(q,"LI",{});var GRe=s(Z2);t_e=n(GRe,"STRONG",{});var cTt=s(t_e);PGo=r(cTt,"canine"),cTt.forEach(t),BGo=r(GRe," \u2014 "),tX=n(GRe,"A",{href:!0});var fTt=s(tX);NGo=r(fTt,"CanineForSequenceClassification"),fTt.forEach(t),IGo=r(GRe," (CANINE model)"),GRe.forEach(t),qGo=i(q),eb=n(q,"LI",{});var ORe=s(eb);a_e=n(ORe,"STRONG",{});var mTt=s(a_e);jGo=r(mTt,"convbert"),mTt.forEach(t),DGo=r(ORe," \u2014 "),aX=n(ORe,"A",{href:!0});var gTt=s(aX);GGo=r(gTt,"ConvBertForSequenceClassification"),gTt.forEach(t),OGo=r(ORe," (ConvBERT model)"),ORe.forEach(t),VGo=i(q),ob=n(q,"LI",{});var VRe=s(ob);n_e=n(VRe,"STRONG",{});var hTt=s(n_e);XGo=r(hTt,"ctrl"),hTt.forEach(t),zGo=r(VRe," \u2014 "),nX=n(VRe,"A",{href:!0});var pTt=s(nX);QGo=r(pTt,"CTRLForSequenceClassification"),pTt.forEach(t),WGo=r(VRe," (CTRL model)"),VRe.forEach(t),HGo=i(q),rb=n(q,"LI",{});var XRe=s(rb);s_e=n(XRe,"STRONG",{});var _Tt=s(s_e);UGo=r(_Tt,"data2vec-text"),_Tt.forEach(t),JGo=r(XRe," \u2014 "),sX=n(XRe,"A",{href:!0});var uTt=s(sX);YGo=r(uTt,"Data2VecTextForSequenceClassification"),uTt.forEach(t),KGo=r(XRe," (Data2VecText model)"),XRe.forEach(t),ZGo=i(q),tb=n(q,"LI",{});var zRe=s(tb);l_e=n(zRe,"STRONG",{});var bTt=s(l_e);eOo=r(bTt,"deberta"),bTt.forEach(t),oOo=r(zRe," \u2014 "),lX=n(zRe,"A",{href:!0});var vTt=s(lX);rOo=r(vTt,"DebertaForSequenceClassification"),vTt.forEach(t),tOo=r(zRe," (DeBERTa model)"),zRe.forEach(t),aOo=i(q),ab=n(q,"LI",{});var QRe=s(ab);i_e=n(QRe,"STRONG",{});var FTt=s(i_e);nOo=r(FTt,"deberta-v2"),FTt.forEach(t),sOo=r(QRe," \u2014 "),iX=n(QRe,"A",{href:!0});var TTt=s(iX);lOo=r(TTt,"DebertaV2ForSequenceClassification"),TTt.forEach(t),iOo=r(QRe," (DeBERTa-v2 model)"),QRe.forEach(t),dOo=i(q),nb=n(q,"LI",{});var WRe=s(nb);d_e=n(WRe,"STRONG",{});var MTt=s(d_e);cOo=r(MTt,"distilbert"),MTt.forEach(t),fOo=r(WRe," \u2014 "),dX=n(WRe,"A",{href:!0});var ETt=s(dX);mOo=r(ETt,"DistilBertForSequenceClassification"),ETt.forEach(t),gOo=r(WRe," (DistilBERT model)"),WRe.forEach(t),hOo=i(q),sb=n(q,"LI",{});var HRe=s(sb);c_e=n(HRe,"STRONG",{});var CTt=s(c_e);pOo=r(CTt,"electra"),CTt.forEach(t),_Oo=r(HRe," \u2014 "),cX=n(HRe,"A",{href:!0});var wTt=s(cX);uOo=r(wTt,"ElectraForSequenceClassification"),wTt.forEach(t),bOo=r(HRe," (ELECTRA model)"),HRe.forEach(t),vOo=i(q),lb=n(q,"LI",{});var URe=s(lb);f_e=n(URe,"STRONG",{});var ATt=s(f_e);FOo=r(ATt,"flaubert"),ATt.forEach(t),TOo=r(URe," \u2014 "),fX=n(URe,"A",{href:!0});var LTt=s(fX);MOo=r(LTt,"FlaubertForSequenceClassification"),LTt.forEach(t),EOo=r(URe," (FlauBERT model)"),URe.forEach(t),COo=i(q),ib=n(q,"LI",{});var JRe=s(ib);m_e=n(JRe,"STRONG",{});var yTt=s(m_e);wOo=r(yTt,"fnet"),yTt.forEach(t),AOo=r(JRe," \u2014 "),mX=n(JRe,"A",{href:!0});var xTt=s(mX);LOo=r(xTt,"FNetForSequenceClassification"),xTt.forEach(t),yOo=r(JRe," (FNet model)"),JRe.forEach(t),xOo=i(q),db=n(q,"LI",{});var YRe=s(db);g_e=n(YRe,"STRONG",{});var $Tt=s(g_e);$Oo=r($Tt,"funnel"),$Tt.forEach(t),kOo=r(YRe," \u2014 "),gX=n(YRe,"A",{href:!0});var kTt=s(gX);SOo=r(kTt,"FunnelForSequenceClassification"),kTt.forEach(t),ROo=r(YRe," (Funnel Transformer model)"),YRe.forEach(t),POo=i(q),cb=n(q,"LI",{});var KRe=s(cb);h_e=n(KRe,"STRONG",{});var STt=s(h_e);BOo=r(STt,"gpt2"),STt.forEach(t),NOo=r(KRe," \u2014 "),hX=n(KRe,"A",{href:!0});var RTt=s(hX);IOo=r(RTt,"GPT2ForSequenceClassification"),RTt.forEach(t),qOo=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),jOo=i(q),fb=n(q,"LI",{});var ZRe=s(fb);p_e=n(ZRe,"STRONG",{});var PTt=s(p_e);DOo=r(PTt,"gpt_neo"),PTt.forEach(t),GOo=r(ZRe," \u2014 "),pX=n(ZRe,"A",{href:!0});var BTt=s(pX);OOo=r(BTt,"GPTNeoForSequenceClassification"),BTt.forEach(t),VOo=r(ZRe," (GPT Neo model)"),ZRe.forEach(t),XOo=i(q),mb=n(q,"LI",{});var ePe=s(mb);__e=n(ePe,"STRONG",{});var NTt=s(__e);zOo=r(NTt,"gptj"),NTt.forEach(t),QOo=r(ePe," \u2014 "),_X=n(ePe,"A",{href:!0});var ITt=s(_X);WOo=r(ITt,"GPTJForSequenceClassification"),ITt.forEach(t),HOo=r(ePe," (GPT-J model)"),ePe.forEach(t),UOo=i(q),gb=n(q,"LI",{});var oPe=s(gb);u_e=n(oPe,"STRONG",{});var qTt=s(u_e);JOo=r(qTt,"ibert"),qTt.forEach(t),YOo=r(oPe," \u2014 "),uX=n(oPe,"A",{href:!0});var jTt=s(uX);KOo=r(jTt,"IBertForSequenceClassification"),jTt.forEach(t),ZOo=r(oPe," (I-BERT model)"),oPe.forEach(t),eVo=i(q),hb=n(q,"LI",{});var rPe=s(hb);b_e=n(rPe,"STRONG",{});var DTt=s(b_e);oVo=r(DTt,"layoutlm"),DTt.forEach(t),rVo=r(rPe," \u2014 "),bX=n(rPe,"A",{href:!0});var GTt=s(bX);tVo=r(GTt,"LayoutLMForSequenceClassification"),GTt.forEach(t),aVo=r(rPe," (LayoutLM model)"),rPe.forEach(t),nVo=i(q),pb=n(q,"LI",{});var tPe=s(pb);v_e=n(tPe,"STRONG",{});var OTt=s(v_e);sVo=r(OTt,"layoutlmv2"),OTt.forEach(t),lVo=r(tPe," \u2014 "),vX=n(tPe,"A",{href:!0});var VTt=s(vX);iVo=r(VTt,"LayoutLMv2ForSequenceClassification"),VTt.forEach(t),dVo=r(tPe," (LayoutLMv2 model)"),tPe.forEach(t),cVo=i(q),_b=n(q,"LI",{});var aPe=s(_b);F_e=n(aPe,"STRONG",{});var XTt=s(F_e);fVo=r(XTt,"layoutlmv3"),XTt.forEach(t),mVo=r(aPe," \u2014 "),FX=n(aPe,"A",{href:!0});var zTt=s(FX);gVo=r(zTt,"LayoutLMv3ForSequenceClassification"),zTt.forEach(t),hVo=r(aPe," (LayoutLMv3 model)"),aPe.forEach(t),pVo=i(q),ub=n(q,"LI",{});var nPe=s(ub);T_e=n(nPe,"STRONG",{});var QTt=s(T_e);_Vo=r(QTt,"led"),QTt.forEach(t),uVo=r(nPe," \u2014 "),TX=n(nPe,"A",{href:!0});var WTt=s(TX);bVo=r(WTt,"LEDForSequenceClassification"),WTt.forEach(t),vVo=r(nPe," (LED model)"),nPe.forEach(t),FVo=i(q),bb=n(q,"LI",{});var sPe=s(bb);M_e=n(sPe,"STRONG",{});var HTt=s(M_e);TVo=r(HTt,"longformer"),HTt.forEach(t),MVo=r(sPe," \u2014 "),MX=n(sPe,"A",{href:!0});var UTt=s(MX);EVo=r(UTt,"LongformerForSequenceClassification"),UTt.forEach(t),CVo=r(sPe," (Longformer model)"),sPe.forEach(t),wVo=i(q),vb=n(q,"LI",{});var lPe=s(vb);E_e=n(lPe,"STRONG",{});var JTt=s(E_e);AVo=r(JTt,"mbart"),JTt.forEach(t),LVo=r(lPe," \u2014 "),EX=n(lPe,"A",{href:!0});var YTt=s(EX);yVo=r(YTt,"MBartForSequenceClassification"),YTt.forEach(t),xVo=r(lPe," (mBART model)"),lPe.forEach(t),$Vo=i(q),Fb=n(q,"LI",{});var iPe=s(Fb);C_e=n(iPe,"STRONG",{});var KTt=s(C_e);kVo=r(KTt,"megatron-bert"),KTt.forEach(t),SVo=r(iPe," \u2014 "),CX=n(iPe,"A",{href:!0});var ZTt=s(CX);RVo=r(ZTt,"MegatronBertForSequenceClassification"),ZTt.forEach(t),PVo=r(iPe," (Megatron-BERT model)"),iPe.forEach(t),BVo=i(q),Tb=n(q,"LI",{});var dPe=s(Tb);w_e=n(dPe,"STRONG",{});var e7t=s(w_e);NVo=r(e7t,"mobilebert"),e7t.forEach(t),IVo=r(dPe," \u2014 "),wX=n(dPe,"A",{href:!0});var o7t=s(wX);qVo=r(o7t,"MobileBertForSequenceClassification"),o7t.forEach(t),jVo=r(dPe," (MobileBERT model)"),dPe.forEach(t),DVo=i(q),Mb=n(q,"LI",{});var cPe=s(Mb);A_e=n(cPe,"STRONG",{});var r7t=s(A_e);GVo=r(r7t,"mpnet"),r7t.forEach(t),OVo=r(cPe," \u2014 "),AX=n(cPe,"A",{href:!0});var t7t=s(AX);VVo=r(t7t,"MPNetForSequenceClassification"),t7t.forEach(t),XVo=r(cPe," (MPNet model)"),cPe.forEach(t),zVo=i(q),Eb=n(q,"LI",{});var fPe=s(Eb);L_e=n(fPe,"STRONG",{});var a7t=s(L_e);QVo=r(a7t,"mvp"),a7t.forEach(t),WVo=r(fPe," \u2014 "),LX=n(fPe,"A",{href:!0});var n7t=s(LX);HVo=r(n7t,"MvpForSequenceClassification"),n7t.forEach(t),UVo=r(fPe," (MVP model)"),fPe.forEach(t),JVo=i(q),Cb=n(q,"LI",{});var mPe=s(Cb);y_e=n(mPe,"STRONG",{});var s7t=s(y_e);YVo=r(s7t,"nezha"),s7t.forEach(t),KVo=r(mPe," \u2014 "),yX=n(mPe,"A",{href:!0});var l7t=s(yX);ZVo=r(l7t,"NezhaForSequenceClassification"),l7t.forEach(t),eXo=r(mPe," (Nezha model)"),mPe.forEach(t),oXo=i(q),wb=n(q,"LI",{});var gPe=s(wb);x_e=n(gPe,"STRONG",{});var i7t=s(x_e);rXo=r(i7t,"nystromformer"),i7t.forEach(t),tXo=r(gPe," \u2014 "),xX=n(gPe,"A",{href:!0});var d7t=s(xX);aXo=r(d7t,"NystromformerForSequenceClassification"),d7t.forEach(t),nXo=r(gPe," (Nystr\xF6mformer model)"),gPe.forEach(t),sXo=i(q),Ab=n(q,"LI",{});var hPe=s(Ab);$_e=n(hPe,"STRONG",{});var c7t=s($_e);lXo=r(c7t,"openai-gpt"),c7t.forEach(t),iXo=r(hPe," \u2014 "),$X=n(hPe,"A",{href:!0});var f7t=s($X);dXo=r(f7t,"OpenAIGPTForSequenceClassification"),f7t.forEach(t),cXo=r(hPe," (OpenAI GPT model)"),hPe.forEach(t),fXo=i(q),Lb=n(q,"LI",{});var pPe=s(Lb);k_e=n(pPe,"STRONG",{});var m7t=s(k_e);mXo=r(m7t,"perceiver"),m7t.forEach(t),gXo=r(pPe," \u2014 "),kX=n(pPe,"A",{href:!0});var g7t=s(kX);hXo=r(g7t,"PerceiverForSequenceClassification"),g7t.forEach(t),pXo=r(pPe," (Perceiver model)"),pPe.forEach(t),_Xo=i(q),yb=n(q,"LI",{});var _Pe=s(yb);S_e=n(_Pe,"STRONG",{});var h7t=s(S_e);uXo=r(h7t,"plbart"),h7t.forEach(t),bXo=r(_Pe," \u2014 "),SX=n(_Pe,"A",{href:!0});var p7t=s(SX);vXo=r(p7t,"PLBartForSequenceClassification"),p7t.forEach(t),FXo=r(_Pe," (PLBart model)"),_Pe.forEach(t),TXo=i(q),xb=n(q,"LI",{});var uPe=s(xb);R_e=n(uPe,"STRONG",{});var _7t=s(R_e);MXo=r(_7t,"qdqbert"),_7t.forEach(t),EXo=r(uPe," \u2014 "),RX=n(uPe,"A",{href:!0});var u7t=s(RX);CXo=r(u7t,"QDQBertForSequenceClassification"),u7t.forEach(t),wXo=r(uPe," (QDQBert model)"),uPe.forEach(t),AXo=i(q),$b=n(q,"LI",{});var bPe=s($b);P_e=n(bPe,"STRONG",{});var b7t=s(P_e);LXo=r(b7t,"reformer"),b7t.forEach(t),yXo=r(bPe," \u2014 "),PX=n(bPe,"A",{href:!0});var v7t=s(PX);xXo=r(v7t,"ReformerForSequenceClassification"),v7t.forEach(t),$Xo=r(bPe," (Reformer model)"),bPe.forEach(t),kXo=i(q),kb=n(q,"LI",{});var vPe=s(kb);B_e=n(vPe,"STRONG",{});var F7t=s(B_e);SXo=r(F7t,"rembert"),F7t.forEach(t),RXo=r(vPe," \u2014 "),BX=n(vPe,"A",{href:!0});var T7t=s(BX);PXo=r(T7t,"RemBertForSequenceClassification"),T7t.forEach(t),BXo=r(vPe," (RemBERT model)"),vPe.forEach(t),NXo=i(q),Sb=n(q,"LI",{});var FPe=s(Sb);N_e=n(FPe,"STRONG",{});var M7t=s(N_e);IXo=r(M7t,"roberta"),M7t.forEach(t),qXo=r(FPe," \u2014 "),NX=n(FPe,"A",{href:!0});var E7t=s(NX);jXo=r(E7t,"RobertaForSequenceClassification"),E7t.forEach(t),DXo=r(FPe," (RoBERTa model)"),FPe.forEach(t),GXo=i(q),Rb=n(q,"LI",{});var TPe=s(Rb);I_e=n(TPe,"STRONG",{});var C7t=s(I_e);OXo=r(C7t,"roformer"),C7t.forEach(t),VXo=r(TPe," \u2014 "),IX=n(TPe,"A",{href:!0});var w7t=s(IX);XXo=r(w7t,"RoFormerForSequenceClassification"),w7t.forEach(t),zXo=r(TPe," (RoFormer model)"),TPe.forEach(t),QXo=i(q),Pb=n(q,"LI",{});var MPe=s(Pb);q_e=n(MPe,"STRONG",{});var A7t=s(q_e);WXo=r(A7t,"squeezebert"),A7t.forEach(t),HXo=r(MPe," \u2014 "),qX=n(MPe,"A",{href:!0});var L7t=s(qX);UXo=r(L7t,"SqueezeBertForSequenceClassification"),L7t.forEach(t),JXo=r(MPe," (SqueezeBERT model)"),MPe.forEach(t),YXo=i(q),Bb=n(q,"LI",{});var EPe=s(Bb);j_e=n(EPe,"STRONG",{});var y7t=s(j_e);KXo=r(y7t,"tapas"),y7t.forEach(t),ZXo=r(EPe," \u2014 "),jX=n(EPe,"A",{href:!0});var x7t=s(jX);ezo=r(x7t,"TapasForSequenceClassification"),x7t.forEach(t),ozo=r(EPe," (TAPAS model)"),EPe.forEach(t),rzo=i(q),Nb=n(q,"LI",{});var CPe=s(Nb);D_e=n(CPe,"STRONG",{});var $7t=s(D_e);tzo=r($7t,"transfo-xl"),$7t.forEach(t),azo=r(CPe," \u2014 "),DX=n(CPe,"A",{href:!0});var k7t=s(DX);nzo=r(k7t,"TransfoXLForSequenceClassification"),k7t.forEach(t),szo=r(CPe," (Transformer-XL model)"),CPe.forEach(t),lzo=i(q),Ib=n(q,"LI",{});var wPe=s(Ib);G_e=n(wPe,"STRONG",{});var S7t=s(G_e);izo=r(S7t,"xlm"),S7t.forEach(t),dzo=r(wPe," \u2014 "),GX=n(wPe,"A",{href:!0});var R7t=s(GX);czo=r(R7t,"XLMForSequenceClassification"),R7t.forEach(t),fzo=r(wPe," (XLM model)"),wPe.forEach(t),mzo=i(q),qb=n(q,"LI",{});var APe=s(qb);O_e=n(APe,"STRONG",{});var P7t=s(O_e);gzo=r(P7t,"xlm-roberta"),P7t.forEach(t),hzo=r(APe," \u2014 "),OX=n(APe,"A",{href:!0});var B7t=s(OX);pzo=r(B7t,"XLMRobertaForSequenceClassification"),B7t.forEach(t),_zo=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),uzo=i(q),jb=n(q,"LI",{});var LPe=s(jb);V_e=n(LPe,"STRONG",{});var N7t=s(V_e);bzo=r(N7t,"xlm-roberta-xl"),N7t.forEach(t),vzo=r(LPe," \u2014 "),VX=n(LPe,"A",{href:!0});var I7t=s(VX);Fzo=r(I7t,"XLMRobertaXLForSequenceClassification"),I7t.forEach(t),Tzo=r(LPe," (XLM-RoBERTa-XL model)"),LPe.forEach(t),Mzo=i(q),Db=n(q,"LI",{});var yPe=s(Db);X_e=n(yPe,"STRONG",{});var q7t=s(X_e);Ezo=r(q7t,"xlnet"),q7t.forEach(t),Czo=r(yPe," \u2014 "),XX=n(yPe,"A",{href:!0});var j7t=s(XX);wzo=r(j7t,"XLNetForSequenceClassification"),j7t.forEach(t),Azo=r(yPe," (XLNet model)"),yPe.forEach(t),Lzo=i(q),Gb=n(q,"LI",{});var xPe=s(Gb);z_e=n(xPe,"STRONG",{});var D7t=s(z_e);yzo=r(D7t,"yoso"),D7t.forEach(t),xzo=r(xPe," \u2014 "),zX=n(xPe,"A",{href:!0});var G7t=s(zX);$zo=r(G7t,"YosoForSequenceClassification"),G7t.forEach(t),kzo=r(xPe," (YOSO model)"),xPe.forEach(t),q.forEach(t),Szo=i(fa),Ob=n(fa,"P",{});var $Pe=s(Ob);Rzo=r($Pe,"The model is set in evaluation mode by default using "),Q_e=n($Pe,"CODE",{});var O7t=s(Q_e);Pzo=r(O7t,"model.eval()"),O7t.forEach(t),Bzo=r($Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n($Pe,"CODE",{});var V7t=s(W_e);Nzo=r(V7t,"model.train()"),V7t.forEach(t),$Pe.forEach(t),Izo=i(fa),T(Vb.$$.fragment,fa),fa.forEach(t),sl.forEach(t),wXe=i(f),ad=n(f,"H2",{class:!0});var kQe=s(ad);Xb=n(kQe,"A",{id:!0,class:!0,href:!0});var X7t=s(Xb);H_e=n(X7t,"SPAN",{});var z7t=s(H_e);T(ly.$$.fragment,z7t),z7t.forEach(t),X7t.forEach(t),qzo=i(kQe),U_e=n(kQe,"SPAN",{});var Q7t=s(U_e);jzo=r(Q7t,"AutoModelForMultipleChoice"),Q7t.forEach(t),kQe.forEach(t),AXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(iy.$$.fragment,ll),Dzo=i(ll),nd=n(ll,"P",{});var Vre=s(nd);Gzo=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QX=n(Vre,"A",{href:!0});var W7t=s(QX);Ozo=r(W7t,"from_pretrained()"),W7t.forEach(t),Vzo=r(Vre," class method or the "),WX=n(Vre,"A",{href:!0});var H7t=s(WX);Xzo=r(H7t,"from_config()"),H7t.forEach(t),zzo=r(Vre,` class
method.`),Vre.forEach(t),Qzo=i(ll),dy=n(ll,"P",{});var SQe=s(dy);Wzo=r(SQe,"This class cannot be instantiated directly using "),J_e=n(SQe,"CODE",{});var U7t=s(J_e);Hzo=r(U7t,"__init__()"),U7t.forEach(t),Uzo=r(SQe," (throws an error)."),SQe.forEach(t),Jzo=i(ll),gt=n(ll,"DIV",{class:!0});var TA=s(gt);T(cy.$$.fragment,TA),Yzo=i(TA),Y_e=n(TA,"P",{});var J7t=s(Y_e);Kzo=r(J7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J7t.forEach(t),Zzo=i(TA),sd=n(TA,"P",{});var Xre=s(sd);eQo=r(Xre,`Note:
Loading a model from its configuration file does `),K_e=n(Xre,"STRONG",{});var Y7t=s(K_e);oQo=r(Y7t,"not"),Y7t.forEach(t),rQo=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(Xre,"A",{href:!0});var K7t=s(HX);tQo=r(K7t,"from_pretrained()"),K7t.forEach(t),aQo=r(Xre," to load the model weights."),Xre.forEach(t),nQo=i(TA),T(zb.$$.fragment,TA),TA.forEach(t),sQo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(fy.$$.fragment,ma),lQo=i(ma),Z_e=n(ma,"P",{});var Z7t=s(Z_e);iQo=r(Z7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z7t.forEach(t),dQo=i(ma),Oa=n(ma,"P",{});var MA=s(Oa);cQo=r(MA,"The model class to instantiate is selected based on the "),eue=n(MA,"CODE",{});var e8t=s(eue);fQo=r(e8t,"model_type"),e8t.forEach(t),mQo=r(MA,` property of the config object (either
passed as an argument or loaded from `),oue=n(MA,"CODE",{});var o8t=s(oue);gQo=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),hQo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(MA,"CODE",{});var r8t=s(rue);pQo=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),_Qo=r(MA,":"),MA.forEach(t),uQo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Qb=n(ee,"LI",{});var kPe=s(Qb);tue=n(kPe,"STRONG",{});var t8t=s(tue);bQo=r(t8t,"albert"),t8t.forEach(t),vQo=r(kPe," \u2014 "),UX=n(kPe,"A",{href:!0});var a8t=s(UX);FQo=r(a8t,"AlbertForMultipleChoice"),a8t.forEach(t),TQo=r(kPe," (ALBERT model)"),kPe.forEach(t),MQo=i(ee),Wb=n(ee,"LI",{});var SPe=s(Wb);aue=n(SPe,"STRONG",{});var n8t=s(aue);EQo=r(n8t,"bert"),n8t.forEach(t),CQo=r(SPe," \u2014 "),JX=n(SPe,"A",{href:!0});var s8t=s(JX);wQo=r(s8t,"BertForMultipleChoice"),s8t.forEach(t),AQo=r(SPe," (BERT model)"),SPe.forEach(t),LQo=i(ee),Hb=n(ee,"LI",{});var RPe=s(Hb);nue=n(RPe,"STRONG",{});var l8t=s(nue);yQo=r(l8t,"big_bird"),l8t.forEach(t),xQo=r(RPe," \u2014 "),YX=n(RPe,"A",{href:!0});var i8t=s(YX);$Qo=r(i8t,"BigBirdForMultipleChoice"),i8t.forEach(t),kQo=r(RPe," (BigBird model)"),RPe.forEach(t),SQo=i(ee),Ub=n(ee,"LI",{});var PPe=s(Ub);sue=n(PPe,"STRONG",{});var d8t=s(sue);RQo=r(d8t,"camembert"),d8t.forEach(t),PQo=r(PPe," \u2014 "),KX=n(PPe,"A",{href:!0});var c8t=s(KX);BQo=r(c8t,"CamembertForMultipleChoice"),c8t.forEach(t),NQo=r(PPe," (CamemBERT model)"),PPe.forEach(t),IQo=i(ee),Jb=n(ee,"LI",{});var BPe=s(Jb);lue=n(BPe,"STRONG",{});var f8t=s(lue);qQo=r(f8t,"canine"),f8t.forEach(t),jQo=r(BPe," \u2014 "),ZX=n(BPe,"A",{href:!0});var m8t=s(ZX);DQo=r(m8t,"CanineForMultipleChoice"),m8t.forEach(t),GQo=r(BPe," (CANINE model)"),BPe.forEach(t),OQo=i(ee),Yb=n(ee,"LI",{});var NPe=s(Yb);iue=n(NPe,"STRONG",{});var g8t=s(iue);VQo=r(g8t,"convbert"),g8t.forEach(t),XQo=r(NPe," \u2014 "),ez=n(NPe,"A",{href:!0});var h8t=s(ez);zQo=r(h8t,"ConvBertForMultipleChoice"),h8t.forEach(t),QQo=r(NPe," (ConvBERT model)"),NPe.forEach(t),WQo=i(ee),Kb=n(ee,"LI",{});var IPe=s(Kb);due=n(IPe,"STRONG",{});var p8t=s(due);HQo=r(p8t,"data2vec-text"),p8t.forEach(t),UQo=r(IPe," \u2014 "),oz=n(IPe,"A",{href:!0});var _8t=s(oz);JQo=r(_8t,"Data2VecTextForMultipleChoice"),_8t.forEach(t),YQo=r(IPe," (Data2VecText model)"),IPe.forEach(t),KQo=i(ee),Zb=n(ee,"LI",{});var qPe=s(Zb);cue=n(qPe,"STRONG",{});var u8t=s(cue);ZQo=r(u8t,"deberta-v2"),u8t.forEach(t),eWo=r(qPe," \u2014 "),rz=n(qPe,"A",{href:!0});var b8t=s(rz);oWo=r(b8t,"DebertaV2ForMultipleChoice"),b8t.forEach(t),rWo=r(qPe," (DeBERTa-v2 model)"),qPe.forEach(t),tWo=i(ee),ev=n(ee,"LI",{});var jPe=s(ev);fue=n(jPe,"STRONG",{});var v8t=s(fue);aWo=r(v8t,"distilbert"),v8t.forEach(t),nWo=r(jPe," \u2014 "),tz=n(jPe,"A",{href:!0});var F8t=s(tz);sWo=r(F8t,"DistilBertForMultipleChoice"),F8t.forEach(t),lWo=r(jPe," (DistilBERT model)"),jPe.forEach(t),iWo=i(ee),ov=n(ee,"LI",{});var DPe=s(ov);mue=n(DPe,"STRONG",{});var T8t=s(mue);dWo=r(T8t,"electra"),T8t.forEach(t),cWo=r(DPe," \u2014 "),az=n(DPe,"A",{href:!0});var M8t=s(az);fWo=r(M8t,"ElectraForMultipleChoice"),M8t.forEach(t),mWo=r(DPe," (ELECTRA model)"),DPe.forEach(t),gWo=i(ee),rv=n(ee,"LI",{});var GPe=s(rv);gue=n(GPe,"STRONG",{});var E8t=s(gue);hWo=r(E8t,"flaubert"),E8t.forEach(t),pWo=r(GPe," \u2014 "),nz=n(GPe,"A",{href:!0});var C8t=s(nz);_Wo=r(C8t,"FlaubertForMultipleChoice"),C8t.forEach(t),uWo=r(GPe," (FlauBERT model)"),GPe.forEach(t),bWo=i(ee),tv=n(ee,"LI",{});var OPe=s(tv);hue=n(OPe,"STRONG",{});var w8t=s(hue);vWo=r(w8t,"fnet"),w8t.forEach(t),FWo=r(OPe," \u2014 "),sz=n(OPe,"A",{href:!0});var A8t=s(sz);TWo=r(A8t,"FNetForMultipleChoice"),A8t.forEach(t),MWo=r(OPe," (FNet model)"),OPe.forEach(t),EWo=i(ee),av=n(ee,"LI",{});var VPe=s(av);pue=n(VPe,"STRONG",{});var L8t=s(pue);CWo=r(L8t,"funnel"),L8t.forEach(t),wWo=r(VPe," \u2014 "),lz=n(VPe,"A",{href:!0});var y8t=s(lz);AWo=r(y8t,"FunnelForMultipleChoice"),y8t.forEach(t),LWo=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),yWo=i(ee),nv=n(ee,"LI",{});var XPe=s(nv);_ue=n(XPe,"STRONG",{});var x8t=s(_ue);xWo=r(x8t,"ibert"),x8t.forEach(t),$Wo=r(XPe," \u2014 "),iz=n(XPe,"A",{href:!0});var $8t=s(iz);kWo=r($8t,"IBertForMultipleChoice"),$8t.forEach(t),SWo=r(XPe," (I-BERT model)"),XPe.forEach(t),RWo=i(ee),sv=n(ee,"LI",{});var zPe=s(sv);uue=n(zPe,"STRONG",{});var k8t=s(uue);PWo=r(k8t,"longformer"),k8t.forEach(t),BWo=r(zPe," \u2014 "),dz=n(zPe,"A",{href:!0});var S8t=s(dz);NWo=r(S8t,"LongformerForMultipleChoice"),S8t.forEach(t),IWo=r(zPe," (Longformer model)"),zPe.forEach(t),qWo=i(ee),lv=n(ee,"LI",{});var QPe=s(lv);bue=n(QPe,"STRONG",{});var R8t=s(bue);jWo=r(R8t,"megatron-bert"),R8t.forEach(t),DWo=r(QPe," \u2014 "),cz=n(QPe,"A",{href:!0});var P8t=s(cz);GWo=r(P8t,"MegatronBertForMultipleChoice"),P8t.forEach(t),OWo=r(QPe," (Megatron-BERT model)"),QPe.forEach(t),VWo=i(ee),iv=n(ee,"LI",{});var WPe=s(iv);vue=n(WPe,"STRONG",{});var B8t=s(vue);XWo=r(B8t,"mobilebert"),B8t.forEach(t),zWo=r(WPe," \u2014 "),fz=n(WPe,"A",{href:!0});var N8t=s(fz);QWo=r(N8t,"MobileBertForMultipleChoice"),N8t.forEach(t),WWo=r(WPe," (MobileBERT model)"),WPe.forEach(t),HWo=i(ee),dv=n(ee,"LI",{});var HPe=s(dv);Fue=n(HPe,"STRONG",{});var I8t=s(Fue);UWo=r(I8t,"mpnet"),I8t.forEach(t),JWo=r(HPe," \u2014 "),mz=n(HPe,"A",{href:!0});var q8t=s(mz);YWo=r(q8t,"MPNetForMultipleChoice"),q8t.forEach(t),KWo=r(HPe," (MPNet model)"),HPe.forEach(t),ZWo=i(ee),cv=n(ee,"LI",{});var UPe=s(cv);Tue=n(UPe,"STRONG",{});var j8t=s(Tue);eHo=r(j8t,"nezha"),j8t.forEach(t),oHo=r(UPe," \u2014 "),gz=n(UPe,"A",{href:!0});var D8t=s(gz);rHo=r(D8t,"NezhaForMultipleChoice"),D8t.forEach(t),tHo=r(UPe," (Nezha model)"),UPe.forEach(t),aHo=i(ee),fv=n(ee,"LI",{});var JPe=s(fv);Mue=n(JPe,"STRONG",{});var G8t=s(Mue);nHo=r(G8t,"nystromformer"),G8t.forEach(t),sHo=r(JPe," \u2014 "),hz=n(JPe,"A",{href:!0});var O8t=s(hz);lHo=r(O8t,"NystromformerForMultipleChoice"),O8t.forEach(t),iHo=r(JPe," (Nystr\xF6mformer model)"),JPe.forEach(t),dHo=i(ee),mv=n(ee,"LI",{});var YPe=s(mv);Eue=n(YPe,"STRONG",{});var V8t=s(Eue);cHo=r(V8t,"qdqbert"),V8t.forEach(t),fHo=r(YPe," \u2014 "),pz=n(YPe,"A",{href:!0});var X8t=s(pz);mHo=r(X8t,"QDQBertForMultipleChoice"),X8t.forEach(t),gHo=r(YPe," (QDQBert model)"),YPe.forEach(t),hHo=i(ee),gv=n(ee,"LI",{});var KPe=s(gv);Cue=n(KPe,"STRONG",{});var z8t=s(Cue);pHo=r(z8t,"rembert"),z8t.forEach(t),_Ho=r(KPe," \u2014 "),_z=n(KPe,"A",{href:!0});var Q8t=s(_z);uHo=r(Q8t,"RemBertForMultipleChoice"),Q8t.forEach(t),bHo=r(KPe," (RemBERT model)"),KPe.forEach(t),vHo=i(ee),hv=n(ee,"LI",{});var ZPe=s(hv);wue=n(ZPe,"STRONG",{});var W8t=s(wue);FHo=r(W8t,"roberta"),W8t.forEach(t),THo=r(ZPe," \u2014 "),uz=n(ZPe,"A",{href:!0});var H8t=s(uz);MHo=r(H8t,"RobertaForMultipleChoice"),H8t.forEach(t),EHo=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),CHo=i(ee),pv=n(ee,"LI",{});var eBe=s(pv);Aue=n(eBe,"STRONG",{});var U8t=s(Aue);wHo=r(U8t,"roformer"),U8t.forEach(t),AHo=r(eBe," \u2014 "),bz=n(eBe,"A",{href:!0});var J8t=s(bz);LHo=r(J8t,"RoFormerForMultipleChoice"),J8t.forEach(t),yHo=r(eBe," (RoFormer model)"),eBe.forEach(t),xHo=i(ee),_v=n(ee,"LI",{});var oBe=s(_v);Lue=n(oBe,"STRONG",{});var Y8t=s(Lue);$Ho=r(Y8t,"squeezebert"),Y8t.forEach(t),kHo=r(oBe," \u2014 "),vz=n(oBe,"A",{href:!0});var K8t=s(vz);SHo=r(K8t,"SqueezeBertForMultipleChoice"),K8t.forEach(t),RHo=r(oBe," (SqueezeBERT model)"),oBe.forEach(t),PHo=i(ee),uv=n(ee,"LI",{});var rBe=s(uv);yue=n(rBe,"STRONG",{});var Z8t=s(yue);BHo=r(Z8t,"xlm"),Z8t.forEach(t),NHo=r(rBe," \u2014 "),Fz=n(rBe,"A",{href:!0});var eMt=s(Fz);IHo=r(eMt,"XLMForMultipleChoice"),eMt.forEach(t),qHo=r(rBe," (XLM model)"),rBe.forEach(t),jHo=i(ee),bv=n(ee,"LI",{});var tBe=s(bv);xue=n(tBe,"STRONG",{});var oMt=s(xue);DHo=r(oMt,"xlm-roberta"),oMt.forEach(t),GHo=r(tBe," \u2014 "),Tz=n(tBe,"A",{href:!0});var rMt=s(Tz);OHo=r(rMt,"XLMRobertaForMultipleChoice"),rMt.forEach(t),VHo=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),XHo=i(ee),vv=n(ee,"LI",{});var aBe=s(vv);$ue=n(aBe,"STRONG",{});var tMt=s($ue);zHo=r(tMt,"xlm-roberta-xl"),tMt.forEach(t),QHo=r(aBe," \u2014 "),Mz=n(aBe,"A",{href:!0});var aMt=s(Mz);WHo=r(aMt,"XLMRobertaXLForMultipleChoice"),aMt.forEach(t),HHo=r(aBe," (XLM-RoBERTa-XL model)"),aBe.forEach(t),UHo=i(ee),Fv=n(ee,"LI",{});var nBe=s(Fv);kue=n(nBe,"STRONG",{});var nMt=s(kue);JHo=r(nMt,"xlnet"),nMt.forEach(t),YHo=r(nBe," \u2014 "),Ez=n(nBe,"A",{href:!0});var sMt=s(Ez);KHo=r(sMt,"XLNetForMultipleChoice"),sMt.forEach(t),ZHo=r(nBe," (XLNet model)"),nBe.forEach(t),eUo=i(ee),Tv=n(ee,"LI",{});var sBe=s(Tv);Sue=n(sBe,"STRONG",{});var lMt=s(Sue);oUo=r(lMt,"yoso"),lMt.forEach(t),rUo=r(sBe," \u2014 "),Cz=n(sBe,"A",{href:!0});var iMt=s(Cz);tUo=r(iMt,"YosoForMultipleChoice"),iMt.forEach(t),aUo=r(sBe," (YOSO model)"),sBe.forEach(t),ee.forEach(t),nUo=i(ma),Mv=n(ma,"P",{});var lBe=s(Mv);sUo=r(lBe,"The model is set in evaluation mode by default using "),Rue=n(lBe,"CODE",{});var dMt=s(Rue);lUo=r(dMt,"model.eval()"),dMt.forEach(t),iUo=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(lBe,"CODE",{});var cMt=s(Pue);dUo=r(cMt,"model.train()"),cMt.forEach(t),lBe.forEach(t),cUo=i(ma),T(Ev.$$.fragment,ma),ma.forEach(t),ll.forEach(t),LXe=i(f),ld=n(f,"H2",{class:!0});var RQe=s(ld);Cv=n(RQe,"A",{id:!0,class:!0,href:!0});var fMt=s(Cv);Bue=n(fMt,"SPAN",{});var mMt=s(Bue);T(my.$$.fragment,mMt),mMt.forEach(t),fMt.forEach(t),fUo=i(RQe),Nue=n(RQe,"SPAN",{});var gMt=s(Nue);mUo=r(gMt,"AutoModelForNextSentencePrediction"),gMt.forEach(t),RQe.forEach(t),yXe=i(f),No=n(f,"DIV",{class:!0});var il=s(No);T(gy.$$.fragment,il),gUo=i(il),id=n(il,"P",{});var zre=s(id);hUo=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wz=n(zre,"A",{href:!0});var hMt=s(wz);pUo=r(hMt,"from_pretrained()"),hMt.forEach(t),_Uo=r(zre," class method or the "),Az=n(zre,"A",{href:!0});var pMt=s(Az);uUo=r(pMt,"from_config()"),pMt.forEach(t),bUo=r(zre,` class
method.`),zre.forEach(t),vUo=i(il),hy=n(il,"P",{});var PQe=s(hy);FUo=r(PQe,"This class cannot be instantiated directly using "),Iue=n(PQe,"CODE",{});var _Mt=s(Iue);TUo=r(_Mt,"__init__()"),_Mt.forEach(t),MUo=r(PQe," (throws an error)."),PQe.forEach(t),EUo=i(il),ht=n(il,"DIV",{class:!0});var EA=s(ht);T(py.$$.fragment,EA),CUo=i(EA),que=n(EA,"P",{});var uMt=s(que);wUo=r(uMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uMt.forEach(t),AUo=i(EA),dd=n(EA,"P",{});var Qre=s(dd);LUo=r(Qre,`Note:
Loading a model from its configuration file does `),jue=n(Qre,"STRONG",{});var bMt=s(jue);yUo=r(bMt,"not"),bMt.forEach(t),xUo=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(Qre,"A",{href:!0});var vMt=s(Lz);$Uo=r(vMt,"from_pretrained()"),vMt.forEach(t),kUo=r(Qre," to load the model weights."),Qre.forEach(t),SUo=i(EA),T(wv.$$.fragment,EA),EA.forEach(t),RUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(_y.$$.fragment,ga),PUo=i(ga),Due=n(ga,"P",{});var FMt=s(Due);BUo=r(FMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FMt.forEach(t),NUo=i(ga),Va=n(ga,"P",{});var CA=s(Va);IUo=r(CA,"The model class to instantiate is selected based on the "),Gue=n(CA,"CODE",{});var TMt=s(Gue);qUo=r(TMt,"model_type"),TMt.forEach(t),jUo=r(CA,` property of the config object (either
passed as an argument or loaded from `),Oue=n(CA,"CODE",{});var MMt=s(Oue);DUo=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),GUo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(CA,"CODE",{});var EMt=s(Vue);OUo=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),VUo=r(CA,":"),CA.forEach(t),XUo=i(ga),Io=n(ga,"UL",{});var ha=s(Io);Av=n(ha,"LI",{});var iBe=s(Av);Xue=n(iBe,"STRONG",{});var CMt=s(Xue);zUo=r(CMt,"bert"),CMt.forEach(t),QUo=r(iBe," \u2014 "),yz=n(iBe,"A",{href:!0});var wMt=s(yz);WUo=r(wMt,"BertForNextSentencePrediction"),wMt.forEach(t),HUo=r(iBe," (BERT model)"),iBe.forEach(t),UUo=i(ha),Lv=n(ha,"LI",{});var dBe=s(Lv);zue=n(dBe,"STRONG",{});var AMt=s(zue);JUo=r(AMt,"fnet"),AMt.forEach(t),YUo=r(dBe," \u2014 "),xz=n(dBe,"A",{href:!0});var LMt=s(xz);KUo=r(LMt,"FNetForNextSentencePrediction"),LMt.forEach(t),ZUo=r(dBe," (FNet model)"),dBe.forEach(t),eJo=i(ha),yv=n(ha,"LI",{});var cBe=s(yv);Que=n(cBe,"STRONG",{});var yMt=s(Que);oJo=r(yMt,"megatron-bert"),yMt.forEach(t),rJo=r(cBe," \u2014 "),$z=n(cBe,"A",{href:!0});var xMt=s($z);tJo=r(xMt,"MegatronBertForNextSentencePrediction"),xMt.forEach(t),aJo=r(cBe," (Megatron-BERT model)"),cBe.forEach(t),nJo=i(ha),xv=n(ha,"LI",{});var fBe=s(xv);Wue=n(fBe,"STRONG",{});var $Mt=s(Wue);sJo=r($Mt,"mobilebert"),$Mt.forEach(t),lJo=r(fBe," \u2014 "),kz=n(fBe,"A",{href:!0});var kMt=s(kz);iJo=r(kMt,"MobileBertForNextSentencePrediction"),kMt.forEach(t),dJo=r(fBe," (MobileBERT model)"),fBe.forEach(t),cJo=i(ha),$v=n(ha,"LI",{});var mBe=s($v);Hue=n(mBe,"STRONG",{});var SMt=s(Hue);fJo=r(SMt,"nezha"),SMt.forEach(t),mJo=r(mBe," \u2014 "),Sz=n(mBe,"A",{href:!0});var RMt=s(Sz);gJo=r(RMt,"NezhaForNextSentencePrediction"),RMt.forEach(t),hJo=r(mBe," (Nezha model)"),mBe.forEach(t),pJo=i(ha),kv=n(ha,"LI",{});var gBe=s(kv);Uue=n(gBe,"STRONG",{});var PMt=s(Uue);_Jo=r(PMt,"qdqbert"),PMt.forEach(t),uJo=r(gBe," \u2014 "),Rz=n(gBe,"A",{href:!0});var BMt=s(Rz);bJo=r(BMt,"QDQBertForNextSentencePrediction"),BMt.forEach(t),vJo=r(gBe," (QDQBert model)"),gBe.forEach(t),ha.forEach(t),FJo=i(ga),Sv=n(ga,"P",{});var hBe=s(Sv);TJo=r(hBe,"The model is set in evaluation mode by default using "),Jue=n(hBe,"CODE",{});var NMt=s(Jue);MJo=r(NMt,"model.eval()"),NMt.forEach(t),EJo=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(hBe,"CODE",{});var IMt=s(Yue);CJo=r(IMt,"model.train()"),IMt.forEach(t),hBe.forEach(t),wJo=i(ga),T(Rv.$$.fragment,ga),ga.forEach(t),il.forEach(t),xXe=i(f),cd=n(f,"H2",{class:!0});var BQe=s(cd);Pv=n(BQe,"A",{id:!0,class:!0,href:!0});var qMt=s(Pv);Kue=n(qMt,"SPAN",{});var jMt=s(Kue);T(uy.$$.fragment,jMt),jMt.forEach(t),qMt.forEach(t),AJo=i(BQe),Zue=n(BQe,"SPAN",{});var DMt=s(Zue);LJo=r(DMt,"AutoModelForTokenClassification"),DMt.forEach(t),BQe.forEach(t),$Xe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(by.$$.fragment,dl),yJo=i(dl),fd=n(dl,"P",{});var Wre=s(fd);xJo=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Pz=n(Wre,"A",{href:!0});var GMt=s(Pz);$Jo=r(GMt,"from_pretrained()"),GMt.forEach(t),kJo=r(Wre," class method or the "),Bz=n(Wre,"A",{href:!0});var OMt=s(Bz);SJo=r(OMt,"from_config()"),OMt.forEach(t),RJo=r(Wre,` class
method.`),Wre.forEach(t),PJo=i(dl),vy=n(dl,"P",{});var NQe=s(vy);BJo=r(NQe,"This class cannot be instantiated directly using "),e1e=n(NQe,"CODE",{});var VMt=s(e1e);NJo=r(VMt,"__init__()"),VMt.forEach(t),IJo=r(NQe," (throws an error)."),NQe.forEach(t),qJo=i(dl),pt=n(dl,"DIV",{class:!0});var wA=s(pt);T(Fy.$$.fragment,wA),jJo=i(wA),o1e=n(wA,"P",{});var XMt=s(o1e);DJo=r(XMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XMt.forEach(t),GJo=i(wA),md=n(wA,"P",{});var Hre=s(md);OJo=r(Hre,`Note:
Loading a model from its configuration file does `),r1e=n(Hre,"STRONG",{});var zMt=s(r1e);VJo=r(zMt,"not"),zMt.forEach(t),XJo=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(Hre,"A",{href:!0});var QMt=s(Nz);zJo=r(QMt,"from_pretrained()"),QMt.forEach(t),QJo=r(Hre," to load the model weights."),Hre.forEach(t),WJo=i(wA),T(Bv.$$.fragment,wA),wA.forEach(t),HJo=i(dl),ao=n(dl,"DIV",{class:!0});var pa=s(ao);T(Ty.$$.fragment,pa),UJo=i(pa),t1e=n(pa,"P",{});var WMt=s(t1e);JJo=r(WMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WMt.forEach(t),YJo=i(pa),Xa=n(pa,"P",{});var AA=s(Xa);KJo=r(AA,"The model class to instantiate is selected based on the "),a1e=n(AA,"CODE",{});var HMt=s(a1e);ZJo=r(HMt,"model_type"),HMt.forEach(t),eYo=r(AA,` property of the config object (either
passed as an argument or loaded from `),n1e=n(AA,"CODE",{});var UMt=s(n1e);oYo=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),rYo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(AA,"CODE",{});var JMt=s(s1e);tYo=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),aYo=r(AA,":"),AA.forEach(t),nYo=i(pa),U=n(pa,"UL",{});var Y=s(U);Nv=n(Y,"LI",{});var pBe=s(Nv);l1e=n(pBe,"STRONG",{});var YMt=s(l1e);sYo=r(YMt,"albert"),YMt.forEach(t),lYo=r(pBe," \u2014 "),Iz=n(pBe,"A",{href:!0});var KMt=s(Iz);iYo=r(KMt,"AlbertForTokenClassification"),KMt.forEach(t),dYo=r(pBe," (ALBERT model)"),pBe.forEach(t),cYo=i(Y),Iv=n(Y,"LI",{});var _Be=s(Iv);i1e=n(_Be,"STRONG",{});var ZMt=s(i1e);fYo=r(ZMt,"bert"),ZMt.forEach(t),mYo=r(_Be," \u2014 "),qz=n(_Be,"A",{href:!0});var eEt=s(qz);gYo=r(eEt,"BertForTokenClassification"),eEt.forEach(t),hYo=r(_Be," (BERT model)"),_Be.forEach(t),pYo=i(Y),qv=n(Y,"LI",{});var uBe=s(qv);d1e=n(uBe,"STRONG",{});var oEt=s(d1e);_Yo=r(oEt,"big_bird"),oEt.forEach(t),uYo=r(uBe," \u2014 "),jz=n(uBe,"A",{href:!0});var rEt=s(jz);bYo=r(rEt,"BigBirdForTokenClassification"),rEt.forEach(t),vYo=r(uBe," (BigBird model)"),uBe.forEach(t),FYo=i(Y),jv=n(Y,"LI",{});var bBe=s(jv);c1e=n(bBe,"STRONG",{});var tEt=s(c1e);TYo=r(tEt,"bloom"),tEt.forEach(t),MYo=r(bBe," \u2014 "),Dz=n(bBe,"A",{href:!0});var aEt=s(Dz);EYo=r(aEt,"BloomForTokenClassification"),aEt.forEach(t),CYo=r(bBe," (BLOOM model)"),bBe.forEach(t),wYo=i(Y),Dv=n(Y,"LI",{});var vBe=s(Dv);f1e=n(vBe,"STRONG",{});var nEt=s(f1e);AYo=r(nEt,"camembert"),nEt.forEach(t),LYo=r(vBe," \u2014 "),Gz=n(vBe,"A",{href:!0});var sEt=s(Gz);yYo=r(sEt,"CamembertForTokenClassification"),sEt.forEach(t),xYo=r(vBe," (CamemBERT model)"),vBe.forEach(t),$Yo=i(Y),Gv=n(Y,"LI",{});var FBe=s(Gv);m1e=n(FBe,"STRONG",{});var lEt=s(m1e);kYo=r(lEt,"canine"),lEt.forEach(t),SYo=r(FBe," \u2014 "),Oz=n(FBe,"A",{href:!0});var iEt=s(Oz);RYo=r(iEt,"CanineForTokenClassification"),iEt.forEach(t),PYo=r(FBe," (CANINE model)"),FBe.forEach(t),BYo=i(Y),Ov=n(Y,"LI",{});var TBe=s(Ov);g1e=n(TBe,"STRONG",{});var dEt=s(g1e);NYo=r(dEt,"convbert"),dEt.forEach(t),IYo=r(TBe," \u2014 "),Vz=n(TBe,"A",{href:!0});var cEt=s(Vz);qYo=r(cEt,"ConvBertForTokenClassification"),cEt.forEach(t),jYo=r(TBe," (ConvBERT model)"),TBe.forEach(t),DYo=i(Y),Vv=n(Y,"LI",{});var MBe=s(Vv);h1e=n(MBe,"STRONG",{});var fEt=s(h1e);GYo=r(fEt,"data2vec-text"),fEt.forEach(t),OYo=r(MBe," \u2014 "),Xz=n(MBe,"A",{href:!0});var mEt=s(Xz);VYo=r(mEt,"Data2VecTextForTokenClassification"),mEt.forEach(t),XYo=r(MBe," (Data2VecText model)"),MBe.forEach(t),zYo=i(Y),Xv=n(Y,"LI",{});var EBe=s(Xv);p1e=n(EBe,"STRONG",{});var gEt=s(p1e);QYo=r(gEt,"deberta"),gEt.forEach(t),WYo=r(EBe," \u2014 "),zz=n(EBe,"A",{href:!0});var hEt=s(zz);HYo=r(hEt,"DebertaForTokenClassification"),hEt.forEach(t),UYo=r(EBe," (DeBERTa model)"),EBe.forEach(t),JYo=i(Y),zv=n(Y,"LI",{});var CBe=s(zv);_1e=n(CBe,"STRONG",{});var pEt=s(_1e);YYo=r(pEt,"deberta-v2"),pEt.forEach(t),KYo=r(CBe," \u2014 "),Qz=n(CBe,"A",{href:!0});var _Et=s(Qz);ZYo=r(_Et,"DebertaV2ForTokenClassification"),_Et.forEach(t),eKo=r(CBe," (DeBERTa-v2 model)"),CBe.forEach(t),oKo=i(Y),Qv=n(Y,"LI",{});var wBe=s(Qv);u1e=n(wBe,"STRONG",{});var uEt=s(u1e);rKo=r(uEt,"distilbert"),uEt.forEach(t),tKo=r(wBe," \u2014 "),Wz=n(wBe,"A",{href:!0});var bEt=s(Wz);aKo=r(bEt,"DistilBertForTokenClassification"),bEt.forEach(t),nKo=r(wBe," (DistilBERT model)"),wBe.forEach(t),sKo=i(Y),Wv=n(Y,"LI",{});var ABe=s(Wv);b1e=n(ABe,"STRONG",{});var vEt=s(b1e);lKo=r(vEt,"electra"),vEt.forEach(t),iKo=r(ABe," \u2014 "),Hz=n(ABe,"A",{href:!0});var FEt=s(Hz);dKo=r(FEt,"ElectraForTokenClassification"),FEt.forEach(t),cKo=r(ABe," (ELECTRA model)"),ABe.forEach(t),fKo=i(Y),Hv=n(Y,"LI",{});var LBe=s(Hv);v1e=n(LBe,"STRONG",{});var TEt=s(v1e);mKo=r(TEt,"flaubert"),TEt.forEach(t),gKo=r(LBe," \u2014 "),Uz=n(LBe,"A",{href:!0});var MEt=s(Uz);hKo=r(MEt,"FlaubertForTokenClassification"),MEt.forEach(t),pKo=r(LBe," (FlauBERT model)"),LBe.forEach(t),_Ko=i(Y),Uv=n(Y,"LI",{});var yBe=s(Uv);F1e=n(yBe,"STRONG",{});var EEt=s(F1e);uKo=r(EEt,"fnet"),EEt.forEach(t),bKo=r(yBe," \u2014 "),Jz=n(yBe,"A",{href:!0});var CEt=s(Jz);vKo=r(CEt,"FNetForTokenClassification"),CEt.forEach(t),FKo=r(yBe," (FNet model)"),yBe.forEach(t),TKo=i(Y),Jv=n(Y,"LI",{});var xBe=s(Jv);T1e=n(xBe,"STRONG",{});var wEt=s(T1e);MKo=r(wEt,"funnel"),wEt.forEach(t),EKo=r(xBe," \u2014 "),Yz=n(xBe,"A",{href:!0});var AEt=s(Yz);CKo=r(AEt,"FunnelForTokenClassification"),AEt.forEach(t),wKo=r(xBe," (Funnel Transformer model)"),xBe.forEach(t),AKo=i(Y),Yv=n(Y,"LI",{});var $Be=s(Yv);M1e=n($Be,"STRONG",{});var LEt=s(M1e);LKo=r(LEt,"gpt2"),LEt.forEach(t),yKo=r($Be," \u2014 "),Kz=n($Be,"A",{href:!0});var yEt=s(Kz);xKo=r(yEt,"GPT2ForTokenClassification"),yEt.forEach(t),$Ko=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),kKo=i(Y),Kv=n(Y,"LI",{});var kBe=s(Kv);E1e=n(kBe,"STRONG",{});var xEt=s(E1e);SKo=r(xEt,"ibert"),xEt.forEach(t),RKo=r(kBe," \u2014 "),Zz=n(kBe,"A",{href:!0});var $Et=s(Zz);PKo=r($Et,"IBertForTokenClassification"),$Et.forEach(t),BKo=r(kBe," (I-BERT model)"),kBe.forEach(t),NKo=i(Y),Zv=n(Y,"LI",{});var SBe=s(Zv);C1e=n(SBe,"STRONG",{});var kEt=s(C1e);IKo=r(kEt,"layoutlm"),kEt.forEach(t),qKo=r(SBe," \u2014 "),eQ=n(SBe,"A",{href:!0});var SEt=s(eQ);jKo=r(SEt,"LayoutLMForTokenClassification"),SEt.forEach(t),DKo=r(SBe," (LayoutLM model)"),SBe.forEach(t),GKo=i(Y),e5=n(Y,"LI",{});var RBe=s(e5);w1e=n(RBe,"STRONG",{});var REt=s(w1e);OKo=r(REt,"layoutlmv2"),REt.forEach(t),VKo=r(RBe," \u2014 "),oQ=n(RBe,"A",{href:!0});var PEt=s(oQ);XKo=r(PEt,"LayoutLMv2ForTokenClassification"),PEt.forEach(t),zKo=r(RBe," (LayoutLMv2 model)"),RBe.forEach(t),QKo=i(Y),o5=n(Y,"LI",{});var PBe=s(o5);A1e=n(PBe,"STRONG",{});var BEt=s(A1e);WKo=r(BEt,"layoutlmv3"),BEt.forEach(t),HKo=r(PBe," \u2014 "),rQ=n(PBe,"A",{href:!0});var NEt=s(rQ);UKo=r(NEt,"LayoutLMv3ForTokenClassification"),NEt.forEach(t),JKo=r(PBe," (LayoutLMv3 model)"),PBe.forEach(t),YKo=i(Y),r5=n(Y,"LI",{});var BBe=s(r5);L1e=n(BBe,"STRONG",{});var IEt=s(L1e);KKo=r(IEt,"longformer"),IEt.forEach(t),ZKo=r(BBe," \u2014 "),tQ=n(BBe,"A",{href:!0});var qEt=s(tQ);eZo=r(qEt,"LongformerForTokenClassification"),qEt.forEach(t),oZo=r(BBe," (Longformer model)"),BBe.forEach(t),rZo=i(Y),t5=n(Y,"LI",{});var NBe=s(t5);y1e=n(NBe,"STRONG",{});var jEt=s(y1e);tZo=r(jEt,"megatron-bert"),jEt.forEach(t),aZo=r(NBe," \u2014 "),aQ=n(NBe,"A",{href:!0});var DEt=s(aQ);nZo=r(DEt,"MegatronBertForTokenClassification"),DEt.forEach(t),sZo=r(NBe," (Megatron-BERT model)"),NBe.forEach(t),lZo=i(Y),a5=n(Y,"LI",{});var IBe=s(a5);x1e=n(IBe,"STRONG",{});var GEt=s(x1e);iZo=r(GEt,"mobilebert"),GEt.forEach(t),dZo=r(IBe," \u2014 "),nQ=n(IBe,"A",{href:!0});var OEt=s(nQ);cZo=r(OEt,"MobileBertForTokenClassification"),OEt.forEach(t),fZo=r(IBe," (MobileBERT model)"),IBe.forEach(t),mZo=i(Y),n5=n(Y,"LI",{});var qBe=s(n5);$1e=n(qBe,"STRONG",{});var VEt=s($1e);gZo=r(VEt,"mpnet"),VEt.forEach(t),hZo=r(qBe," \u2014 "),sQ=n(qBe,"A",{href:!0});var XEt=s(sQ);pZo=r(XEt,"MPNetForTokenClassification"),XEt.forEach(t),_Zo=r(qBe," (MPNet model)"),qBe.forEach(t),uZo=i(Y),s5=n(Y,"LI",{});var jBe=s(s5);k1e=n(jBe,"STRONG",{});var zEt=s(k1e);bZo=r(zEt,"nezha"),zEt.forEach(t),vZo=r(jBe," \u2014 "),lQ=n(jBe,"A",{href:!0});var QEt=s(lQ);FZo=r(QEt,"NezhaForTokenClassification"),QEt.forEach(t),TZo=r(jBe," (Nezha model)"),jBe.forEach(t),MZo=i(Y),l5=n(Y,"LI",{});var DBe=s(l5);S1e=n(DBe,"STRONG",{});var WEt=s(S1e);EZo=r(WEt,"nystromformer"),WEt.forEach(t),CZo=r(DBe," \u2014 "),iQ=n(DBe,"A",{href:!0});var HEt=s(iQ);wZo=r(HEt,"NystromformerForTokenClassification"),HEt.forEach(t),AZo=r(DBe," (Nystr\xF6mformer model)"),DBe.forEach(t),LZo=i(Y),i5=n(Y,"LI",{});var GBe=s(i5);R1e=n(GBe,"STRONG",{});var UEt=s(R1e);yZo=r(UEt,"qdqbert"),UEt.forEach(t),xZo=r(GBe," \u2014 "),dQ=n(GBe,"A",{href:!0});var JEt=s(dQ);$Zo=r(JEt,"QDQBertForTokenClassification"),JEt.forEach(t),kZo=r(GBe," (QDQBert model)"),GBe.forEach(t),SZo=i(Y),d5=n(Y,"LI",{});var OBe=s(d5);P1e=n(OBe,"STRONG",{});var YEt=s(P1e);RZo=r(YEt,"rembert"),YEt.forEach(t),PZo=r(OBe," \u2014 "),cQ=n(OBe,"A",{href:!0});var KEt=s(cQ);BZo=r(KEt,"RemBertForTokenClassification"),KEt.forEach(t),NZo=r(OBe," (RemBERT model)"),OBe.forEach(t),IZo=i(Y),c5=n(Y,"LI",{});var VBe=s(c5);B1e=n(VBe,"STRONG",{});var ZEt=s(B1e);qZo=r(ZEt,"roberta"),ZEt.forEach(t),jZo=r(VBe," \u2014 "),fQ=n(VBe,"A",{href:!0});var eCt=s(fQ);DZo=r(eCt,"RobertaForTokenClassification"),eCt.forEach(t),GZo=r(VBe," (RoBERTa model)"),VBe.forEach(t),OZo=i(Y),f5=n(Y,"LI",{});var XBe=s(f5);N1e=n(XBe,"STRONG",{});var oCt=s(N1e);VZo=r(oCt,"roformer"),oCt.forEach(t),XZo=r(XBe," \u2014 "),mQ=n(XBe,"A",{href:!0});var rCt=s(mQ);zZo=r(rCt,"RoFormerForTokenClassification"),rCt.forEach(t),QZo=r(XBe," (RoFormer model)"),XBe.forEach(t),WZo=i(Y),m5=n(Y,"LI",{});var zBe=s(m5);I1e=n(zBe,"STRONG",{});var tCt=s(I1e);HZo=r(tCt,"squeezebert"),tCt.forEach(t),UZo=r(zBe," \u2014 "),gQ=n(zBe,"A",{href:!0});var aCt=s(gQ);JZo=r(aCt,"SqueezeBertForTokenClassification"),aCt.forEach(t),YZo=r(zBe," (SqueezeBERT model)"),zBe.forEach(t),KZo=i(Y),g5=n(Y,"LI",{});var QBe=s(g5);q1e=n(QBe,"STRONG",{});var nCt=s(q1e);ZZo=r(nCt,"xlm"),nCt.forEach(t),eer=r(QBe," \u2014 "),hQ=n(QBe,"A",{href:!0});var sCt=s(hQ);oer=r(sCt,"XLMForTokenClassification"),sCt.forEach(t),rer=r(QBe," (XLM model)"),QBe.forEach(t),ter=i(Y),h5=n(Y,"LI",{});var WBe=s(h5);j1e=n(WBe,"STRONG",{});var lCt=s(j1e);aer=r(lCt,"xlm-roberta"),lCt.forEach(t),ner=r(WBe," \u2014 "),pQ=n(WBe,"A",{href:!0});var iCt=s(pQ);ser=r(iCt,"XLMRobertaForTokenClassification"),iCt.forEach(t),ler=r(WBe," (XLM-RoBERTa model)"),WBe.forEach(t),ier=i(Y),p5=n(Y,"LI",{});var HBe=s(p5);D1e=n(HBe,"STRONG",{});var dCt=s(D1e);der=r(dCt,"xlm-roberta-xl"),dCt.forEach(t),cer=r(HBe," \u2014 "),_Q=n(HBe,"A",{href:!0});var cCt=s(_Q);fer=r(cCt,"XLMRobertaXLForTokenClassification"),cCt.forEach(t),mer=r(HBe," (XLM-RoBERTa-XL model)"),HBe.forEach(t),ger=i(Y),_5=n(Y,"LI",{});var UBe=s(_5);G1e=n(UBe,"STRONG",{});var fCt=s(G1e);her=r(fCt,"xlnet"),fCt.forEach(t),per=r(UBe," \u2014 "),uQ=n(UBe,"A",{href:!0});var mCt=s(uQ);_er=r(mCt,"XLNetForTokenClassification"),mCt.forEach(t),uer=r(UBe," (XLNet model)"),UBe.forEach(t),ber=i(Y),u5=n(Y,"LI",{});var JBe=s(u5);O1e=n(JBe,"STRONG",{});var gCt=s(O1e);ver=r(gCt,"yoso"),gCt.forEach(t),Fer=r(JBe," \u2014 "),bQ=n(JBe,"A",{href:!0});var hCt=s(bQ);Ter=r(hCt,"YosoForTokenClassification"),hCt.forEach(t),Mer=r(JBe," (YOSO model)"),JBe.forEach(t),Y.forEach(t),Eer=i(pa),b5=n(pa,"P",{});var YBe=s(b5);Cer=r(YBe,"The model is set in evaluation mode by default using "),V1e=n(YBe,"CODE",{});var pCt=s(V1e);wer=r(pCt,"model.eval()"),pCt.forEach(t),Aer=r(YBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X1e=n(YBe,"CODE",{});var _Ct=s(X1e);Ler=r(_Ct,"model.train()"),_Ct.forEach(t),YBe.forEach(t),yer=i(pa),T(v5.$$.fragment,pa),pa.forEach(t),dl.forEach(t),kXe=i(f),gd=n(f,"H2",{class:!0});var IQe=s(gd);F5=n(IQe,"A",{id:!0,class:!0,href:!0});var uCt=s(F5);z1e=n(uCt,"SPAN",{});var bCt=s(z1e);T(My.$$.fragment,bCt),bCt.forEach(t),uCt.forEach(t),xer=i(IQe),Q1e=n(IQe,"SPAN",{});var vCt=s(Q1e);$er=r(vCt,"AutoModelForQuestionAnswering"),vCt.forEach(t),IQe.forEach(t),SXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(Ey.$$.fragment,cl),ker=i(cl),hd=n(cl,"P",{});var Ure=s(hd);Ser=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vQ=n(Ure,"A",{href:!0});var FCt=s(vQ);Rer=r(FCt,"from_pretrained()"),FCt.forEach(t),Per=r(Ure," class method or the "),FQ=n(Ure,"A",{href:!0});var TCt=s(FQ);Ber=r(TCt,"from_config()"),TCt.forEach(t),Ner=r(Ure,` class
method.`),Ure.forEach(t),Ier=i(cl),Cy=n(cl,"P",{});var qQe=s(Cy);qer=r(qQe,"This class cannot be instantiated directly using "),W1e=n(qQe,"CODE",{});var MCt=s(W1e);jer=r(MCt,"__init__()"),MCt.forEach(t),Der=r(qQe," (throws an error)."),qQe.forEach(t),Ger=i(cl),_t=n(cl,"DIV",{class:!0});var LA=s(_t);T(wy.$$.fragment,LA),Oer=i(LA),H1e=n(LA,"P",{});var ECt=s(H1e);Ver=r(ECt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ECt.forEach(t),Xer=i(LA),pd=n(LA,"P",{});var Jre=s(pd);zer=r(Jre,`Note:
Loading a model from its configuration file does `),U1e=n(Jre,"STRONG",{});var CCt=s(U1e);Qer=r(CCt,"not"),CCt.forEach(t),Wer=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(Jre,"A",{href:!0});var wCt=s(TQ);Her=r(wCt,"from_pretrained()"),wCt.forEach(t),Uer=r(Jre," to load the model weights."),Jre.forEach(t),Jer=i(LA),T(T5.$$.fragment,LA),LA.forEach(t),Yer=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(Ay.$$.fragment,_a),Ker=i(_a),J1e=n(_a,"P",{});var ACt=s(J1e);Zer=r(ACt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ACt.forEach(t),eor=i(_a),za=n(_a,"P",{});var yA=s(za);oor=r(yA,"The model class to instantiate is selected based on the "),Y1e=n(yA,"CODE",{});var LCt=s(Y1e);ror=r(LCt,"model_type"),LCt.forEach(t),tor=r(yA,` property of the config object (either
passed as an argument or loaded from `),K1e=n(yA,"CODE",{});var yCt=s(K1e);aor=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),nor=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(yA,"CODE",{});var xCt=s(Z1e);sor=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),lor=r(yA,":"),yA.forEach(t),ior=i(_a),V=n(_a,"UL",{});var X=s(V);M5=n(X,"LI",{});var KBe=s(M5);e4e=n(KBe,"STRONG",{});var $Ct=s(e4e);dor=r($Ct,"albert"),$Ct.forEach(t),cor=r(KBe," \u2014 "),MQ=n(KBe,"A",{href:!0});var kCt=s(MQ);mor=r(kCt,"AlbertForQuestionAnswering"),kCt.forEach(t),gor=r(KBe," (ALBERT model)"),KBe.forEach(t),hor=i(X),E5=n(X,"LI",{});var ZBe=s(E5);o4e=n(ZBe,"STRONG",{});var SCt=s(o4e);por=r(SCt,"bart"),SCt.forEach(t),_or=r(ZBe," \u2014 "),EQ=n(ZBe,"A",{href:!0});var RCt=s(EQ);uor=r(RCt,"BartForQuestionAnswering"),RCt.forEach(t),bor=r(ZBe," (BART model)"),ZBe.forEach(t),vor=i(X),C5=n(X,"LI",{});var eNe=s(C5);r4e=n(eNe,"STRONG",{});var PCt=s(r4e);For=r(PCt,"bert"),PCt.forEach(t),Tor=r(eNe," \u2014 "),CQ=n(eNe,"A",{href:!0});var BCt=s(CQ);Mor=r(BCt,"BertForQuestionAnswering"),BCt.forEach(t),Eor=r(eNe," (BERT model)"),eNe.forEach(t),Cor=i(X),w5=n(X,"LI",{});var oNe=s(w5);t4e=n(oNe,"STRONG",{});var NCt=s(t4e);wor=r(NCt,"big_bird"),NCt.forEach(t),Aor=r(oNe," \u2014 "),wQ=n(oNe,"A",{href:!0});var ICt=s(wQ);Lor=r(ICt,"BigBirdForQuestionAnswering"),ICt.forEach(t),yor=r(oNe," (BigBird model)"),oNe.forEach(t),xor=i(X),A5=n(X,"LI",{});var rNe=s(A5);a4e=n(rNe,"STRONG",{});var qCt=s(a4e);$or=r(qCt,"bigbird_pegasus"),qCt.forEach(t),kor=r(rNe," \u2014 "),AQ=n(rNe,"A",{href:!0});var jCt=s(AQ);Sor=r(jCt,"BigBirdPegasusForQuestionAnswering"),jCt.forEach(t),Ror=r(rNe," (BigBird-Pegasus model)"),rNe.forEach(t),Por=i(X),L5=n(X,"LI",{});var tNe=s(L5);n4e=n(tNe,"STRONG",{});var DCt=s(n4e);Bor=r(DCt,"camembert"),DCt.forEach(t),Nor=r(tNe," \u2014 "),LQ=n(tNe,"A",{href:!0});var GCt=s(LQ);Ior=r(GCt,"CamembertForQuestionAnswering"),GCt.forEach(t),qor=r(tNe," (CamemBERT model)"),tNe.forEach(t),jor=i(X),y5=n(X,"LI",{});var aNe=s(y5);s4e=n(aNe,"STRONG",{});var OCt=s(s4e);Dor=r(OCt,"canine"),OCt.forEach(t),Gor=r(aNe," \u2014 "),yQ=n(aNe,"A",{href:!0});var VCt=s(yQ);Oor=r(VCt,"CanineForQuestionAnswering"),VCt.forEach(t),Vor=r(aNe," (CANINE model)"),aNe.forEach(t),Xor=i(X),x5=n(X,"LI",{});var nNe=s(x5);l4e=n(nNe,"STRONG",{});var XCt=s(l4e);zor=r(XCt,"convbert"),XCt.forEach(t),Qor=r(nNe," \u2014 "),xQ=n(nNe,"A",{href:!0});var zCt=s(xQ);Wor=r(zCt,"ConvBertForQuestionAnswering"),zCt.forEach(t),Hor=r(nNe," (ConvBERT model)"),nNe.forEach(t),Uor=i(X),$5=n(X,"LI",{});var sNe=s($5);i4e=n(sNe,"STRONG",{});var QCt=s(i4e);Jor=r(QCt,"data2vec-text"),QCt.forEach(t),Yor=r(sNe," \u2014 "),$Q=n(sNe,"A",{href:!0});var WCt=s($Q);Kor=r(WCt,"Data2VecTextForQuestionAnswering"),WCt.forEach(t),Zor=r(sNe," (Data2VecText model)"),sNe.forEach(t),err=i(X),k5=n(X,"LI",{});var lNe=s(k5);d4e=n(lNe,"STRONG",{});var HCt=s(d4e);orr=r(HCt,"deberta"),HCt.forEach(t),rrr=r(lNe," \u2014 "),kQ=n(lNe,"A",{href:!0});var UCt=s(kQ);trr=r(UCt,"DebertaForQuestionAnswering"),UCt.forEach(t),arr=r(lNe," (DeBERTa model)"),lNe.forEach(t),nrr=i(X),S5=n(X,"LI",{});var iNe=s(S5);c4e=n(iNe,"STRONG",{});var JCt=s(c4e);srr=r(JCt,"deberta-v2"),JCt.forEach(t),lrr=r(iNe," \u2014 "),SQ=n(iNe,"A",{href:!0});var YCt=s(SQ);irr=r(YCt,"DebertaV2ForQuestionAnswering"),YCt.forEach(t),drr=r(iNe," (DeBERTa-v2 model)"),iNe.forEach(t),crr=i(X),R5=n(X,"LI",{});var dNe=s(R5);f4e=n(dNe,"STRONG",{});var KCt=s(f4e);frr=r(KCt,"distilbert"),KCt.forEach(t),mrr=r(dNe," \u2014 "),RQ=n(dNe,"A",{href:!0});var ZCt=s(RQ);grr=r(ZCt,"DistilBertForQuestionAnswering"),ZCt.forEach(t),hrr=r(dNe," (DistilBERT model)"),dNe.forEach(t),prr=i(X),P5=n(X,"LI",{});var cNe=s(P5);m4e=n(cNe,"STRONG",{});var e3t=s(m4e);_rr=r(e3t,"electra"),e3t.forEach(t),urr=r(cNe," \u2014 "),PQ=n(cNe,"A",{href:!0});var o3t=s(PQ);brr=r(o3t,"ElectraForQuestionAnswering"),o3t.forEach(t),vrr=r(cNe," (ELECTRA model)"),cNe.forEach(t),Frr=i(X),B5=n(X,"LI",{});var fNe=s(B5);g4e=n(fNe,"STRONG",{});var r3t=s(g4e);Trr=r(r3t,"flaubert"),r3t.forEach(t),Mrr=r(fNe," \u2014 "),BQ=n(fNe,"A",{href:!0});var t3t=s(BQ);Err=r(t3t,"FlaubertForQuestionAnsweringSimple"),t3t.forEach(t),Crr=r(fNe," (FlauBERT model)"),fNe.forEach(t),wrr=i(X),N5=n(X,"LI",{});var mNe=s(N5);h4e=n(mNe,"STRONG",{});var a3t=s(h4e);Arr=r(a3t,"fnet"),a3t.forEach(t),Lrr=r(mNe," \u2014 "),NQ=n(mNe,"A",{href:!0});var n3t=s(NQ);yrr=r(n3t,"FNetForQuestionAnswering"),n3t.forEach(t),xrr=r(mNe," (FNet model)"),mNe.forEach(t),$rr=i(X),I5=n(X,"LI",{});var gNe=s(I5);p4e=n(gNe,"STRONG",{});var s3t=s(p4e);krr=r(s3t,"funnel"),s3t.forEach(t),Srr=r(gNe," \u2014 "),IQ=n(gNe,"A",{href:!0});var l3t=s(IQ);Rrr=r(l3t,"FunnelForQuestionAnswering"),l3t.forEach(t),Prr=r(gNe," (Funnel Transformer model)"),gNe.forEach(t),Brr=i(X),q5=n(X,"LI",{});var hNe=s(q5);_4e=n(hNe,"STRONG",{});var i3t=s(_4e);Nrr=r(i3t,"gptj"),i3t.forEach(t),Irr=r(hNe," \u2014 "),qQ=n(hNe,"A",{href:!0});var d3t=s(qQ);qrr=r(d3t,"GPTJForQuestionAnswering"),d3t.forEach(t),jrr=r(hNe," (GPT-J model)"),hNe.forEach(t),Drr=i(X),j5=n(X,"LI",{});var pNe=s(j5);u4e=n(pNe,"STRONG",{});var c3t=s(u4e);Grr=r(c3t,"ibert"),c3t.forEach(t),Orr=r(pNe," \u2014 "),jQ=n(pNe,"A",{href:!0});var f3t=s(jQ);Vrr=r(f3t,"IBertForQuestionAnswering"),f3t.forEach(t),Xrr=r(pNe," (I-BERT model)"),pNe.forEach(t),zrr=i(X),D5=n(X,"LI",{});var _Ne=s(D5);b4e=n(_Ne,"STRONG",{});var m3t=s(b4e);Qrr=r(m3t,"layoutlmv2"),m3t.forEach(t),Wrr=r(_Ne," \u2014 "),DQ=n(_Ne,"A",{href:!0});var g3t=s(DQ);Hrr=r(g3t,"LayoutLMv2ForQuestionAnswering"),g3t.forEach(t),Urr=r(_Ne," (LayoutLMv2 model)"),_Ne.forEach(t),Jrr=i(X),G5=n(X,"LI",{});var uNe=s(G5);v4e=n(uNe,"STRONG",{});var h3t=s(v4e);Yrr=r(h3t,"layoutlmv3"),h3t.forEach(t),Krr=r(uNe," \u2014 "),GQ=n(uNe,"A",{href:!0});var p3t=s(GQ);Zrr=r(p3t,"LayoutLMv3ForQuestionAnswering"),p3t.forEach(t),etr=r(uNe," (LayoutLMv3 model)"),uNe.forEach(t),otr=i(X),O5=n(X,"LI",{});var bNe=s(O5);F4e=n(bNe,"STRONG",{});var _3t=s(F4e);rtr=r(_3t,"led"),_3t.forEach(t),ttr=r(bNe," \u2014 "),OQ=n(bNe,"A",{href:!0});var u3t=s(OQ);atr=r(u3t,"LEDForQuestionAnswering"),u3t.forEach(t),ntr=r(bNe," (LED model)"),bNe.forEach(t),str=i(X),V5=n(X,"LI",{});var vNe=s(V5);T4e=n(vNe,"STRONG",{});var b3t=s(T4e);ltr=r(b3t,"longformer"),b3t.forEach(t),itr=r(vNe," \u2014 "),VQ=n(vNe,"A",{href:!0});var v3t=s(VQ);dtr=r(v3t,"LongformerForQuestionAnswering"),v3t.forEach(t),ctr=r(vNe," (Longformer model)"),vNe.forEach(t),ftr=i(X),X5=n(X,"LI",{});var FNe=s(X5);M4e=n(FNe,"STRONG",{});var F3t=s(M4e);mtr=r(F3t,"lxmert"),F3t.forEach(t),gtr=r(FNe," \u2014 "),XQ=n(FNe,"A",{href:!0});var T3t=s(XQ);htr=r(T3t,"LxmertForQuestionAnswering"),T3t.forEach(t),ptr=r(FNe," (LXMERT model)"),FNe.forEach(t),_tr=i(X),z5=n(X,"LI",{});var TNe=s(z5);E4e=n(TNe,"STRONG",{});var M3t=s(E4e);utr=r(M3t,"mbart"),M3t.forEach(t),btr=r(TNe," \u2014 "),zQ=n(TNe,"A",{href:!0});var E3t=s(zQ);vtr=r(E3t,"MBartForQuestionAnswering"),E3t.forEach(t),Ftr=r(TNe," (mBART model)"),TNe.forEach(t),Ttr=i(X),Q5=n(X,"LI",{});var MNe=s(Q5);C4e=n(MNe,"STRONG",{});var C3t=s(C4e);Mtr=r(C3t,"megatron-bert"),C3t.forEach(t),Etr=r(MNe," \u2014 "),QQ=n(MNe,"A",{href:!0});var w3t=s(QQ);Ctr=r(w3t,"MegatronBertForQuestionAnswering"),w3t.forEach(t),wtr=r(MNe," (Megatron-BERT model)"),MNe.forEach(t),Atr=i(X),W5=n(X,"LI",{});var ENe=s(W5);w4e=n(ENe,"STRONG",{});var A3t=s(w4e);Ltr=r(A3t,"mobilebert"),A3t.forEach(t),ytr=r(ENe," \u2014 "),WQ=n(ENe,"A",{href:!0});var L3t=s(WQ);xtr=r(L3t,"MobileBertForQuestionAnswering"),L3t.forEach(t),$tr=r(ENe," (MobileBERT model)"),ENe.forEach(t),ktr=i(X),H5=n(X,"LI",{});var CNe=s(H5);A4e=n(CNe,"STRONG",{});var y3t=s(A4e);Str=r(y3t,"mpnet"),y3t.forEach(t),Rtr=r(CNe," \u2014 "),HQ=n(CNe,"A",{href:!0});var x3t=s(HQ);Ptr=r(x3t,"MPNetForQuestionAnswering"),x3t.forEach(t),Btr=r(CNe," (MPNet model)"),CNe.forEach(t),Ntr=i(X),U5=n(X,"LI",{});var wNe=s(U5);L4e=n(wNe,"STRONG",{});var $3t=s(L4e);Itr=r($3t,"mvp"),$3t.forEach(t),qtr=r(wNe," \u2014 "),UQ=n(wNe,"A",{href:!0});var k3t=s(UQ);jtr=r(k3t,"MvpForQuestionAnswering"),k3t.forEach(t),Dtr=r(wNe," (MVP model)"),wNe.forEach(t),Gtr=i(X),J5=n(X,"LI",{});var ANe=s(J5);y4e=n(ANe,"STRONG",{});var S3t=s(y4e);Otr=r(S3t,"nezha"),S3t.forEach(t),Vtr=r(ANe," \u2014 "),JQ=n(ANe,"A",{href:!0});var R3t=s(JQ);Xtr=r(R3t,"NezhaForQuestionAnswering"),R3t.forEach(t),ztr=r(ANe," (Nezha model)"),ANe.forEach(t),Qtr=i(X),Y5=n(X,"LI",{});var LNe=s(Y5);x4e=n(LNe,"STRONG",{});var P3t=s(x4e);Wtr=r(P3t,"nystromformer"),P3t.forEach(t),Htr=r(LNe," \u2014 "),YQ=n(LNe,"A",{href:!0});var B3t=s(YQ);Utr=r(B3t,"NystromformerForQuestionAnswering"),B3t.forEach(t),Jtr=r(LNe," (Nystr\xF6mformer model)"),LNe.forEach(t),Ytr=i(X),K5=n(X,"LI",{});var yNe=s(K5);$4e=n(yNe,"STRONG",{});var N3t=s($4e);Ktr=r(N3t,"qdqbert"),N3t.forEach(t),Ztr=r(yNe," \u2014 "),KQ=n(yNe,"A",{href:!0});var I3t=s(KQ);ear=r(I3t,"QDQBertForQuestionAnswering"),I3t.forEach(t),oar=r(yNe," (QDQBert model)"),yNe.forEach(t),rar=i(X),Z5=n(X,"LI",{});var xNe=s(Z5);k4e=n(xNe,"STRONG",{});var q3t=s(k4e);tar=r(q3t,"reformer"),q3t.forEach(t),aar=r(xNe," \u2014 "),ZQ=n(xNe,"A",{href:!0});var j3t=s(ZQ);nar=r(j3t,"ReformerForQuestionAnswering"),j3t.forEach(t),sar=r(xNe," (Reformer model)"),xNe.forEach(t),lar=i(X),eF=n(X,"LI",{});var $Ne=s(eF);S4e=n($Ne,"STRONG",{});var D3t=s(S4e);iar=r(D3t,"rembert"),D3t.forEach(t),dar=r($Ne," \u2014 "),eW=n($Ne,"A",{href:!0});var G3t=s(eW);car=r(G3t,"RemBertForQuestionAnswering"),G3t.forEach(t),far=r($Ne," (RemBERT model)"),$Ne.forEach(t),mar=i(X),oF=n(X,"LI",{});var kNe=s(oF);R4e=n(kNe,"STRONG",{});var O3t=s(R4e);gar=r(O3t,"roberta"),O3t.forEach(t),har=r(kNe," \u2014 "),oW=n(kNe,"A",{href:!0});var V3t=s(oW);par=r(V3t,"RobertaForQuestionAnswering"),V3t.forEach(t),_ar=r(kNe," (RoBERTa model)"),kNe.forEach(t),uar=i(X),rF=n(X,"LI",{});var SNe=s(rF);P4e=n(SNe,"STRONG",{});var X3t=s(P4e);bar=r(X3t,"roformer"),X3t.forEach(t),Far=r(SNe," \u2014 "),rW=n(SNe,"A",{href:!0});var z3t=s(rW);Tar=r(z3t,"RoFormerForQuestionAnswering"),z3t.forEach(t),Mar=r(SNe," (RoFormer model)"),SNe.forEach(t),Ear=i(X),tF=n(X,"LI",{});var RNe=s(tF);B4e=n(RNe,"STRONG",{});var Q3t=s(B4e);Car=r(Q3t,"splinter"),Q3t.forEach(t),war=r(RNe," \u2014 "),tW=n(RNe,"A",{href:!0});var W3t=s(tW);Aar=r(W3t,"SplinterForQuestionAnswering"),W3t.forEach(t),Lar=r(RNe," (Splinter model)"),RNe.forEach(t),yar=i(X),aF=n(X,"LI",{});var PNe=s(aF);N4e=n(PNe,"STRONG",{});var H3t=s(N4e);xar=r(H3t,"squeezebert"),H3t.forEach(t),$ar=r(PNe," \u2014 "),aW=n(PNe,"A",{href:!0});var U3t=s(aW);kar=r(U3t,"SqueezeBertForQuestionAnswering"),U3t.forEach(t),Sar=r(PNe," (SqueezeBERT model)"),PNe.forEach(t),Rar=i(X),nF=n(X,"LI",{});var BNe=s(nF);I4e=n(BNe,"STRONG",{});var J3t=s(I4e);Par=r(J3t,"xlm"),J3t.forEach(t),Bar=r(BNe," \u2014 "),nW=n(BNe,"A",{href:!0});var Y3t=s(nW);Nar=r(Y3t,"XLMForQuestionAnsweringSimple"),Y3t.forEach(t),Iar=r(BNe," (XLM model)"),BNe.forEach(t),qar=i(X),sF=n(X,"LI",{});var NNe=s(sF);q4e=n(NNe,"STRONG",{});var K3t=s(q4e);jar=r(K3t,"xlm-roberta"),K3t.forEach(t),Dar=r(NNe," \u2014 "),sW=n(NNe,"A",{href:!0});var Z3t=s(sW);Gar=r(Z3t,"XLMRobertaForQuestionAnswering"),Z3t.forEach(t),Oar=r(NNe," (XLM-RoBERTa model)"),NNe.forEach(t),Var=i(X),lF=n(X,"LI",{});var INe=s(lF);j4e=n(INe,"STRONG",{});var e0t=s(j4e);Xar=r(e0t,"xlm-roberta-xl"),e0t.forEach(t),zar=r(INe," \u2014 "),lW=n(INe,"A",{href:!0});var o0t=s(lW);Qar=r(o0t,"XLMRobertaXLForQuestionAnswering"),o0t.forEach(t),War=r(INe," (XLM-RoBERTa-XL model)"),INe.forEach(t),Har=i(X),iF=n(X,"LI",{});var qNe=s(iF);D4e=n(qNe,"STRONG",{});var r0t=s(D4e);Uar=r(r0t,"xlnet"),r0t.forEach(t),Jar=r(qNe," \u2014 "),iW=n(qNe,"A",{href:!0});var t0t=s(iW);Yar=r(t0t,"XLNetForQuestionAnsweringSimple"),t0t.forEach(t),Kar=r(qNe," (XLNet model)"),qNe.forEach(t),Zar=i(X),dF=n(X,"LI",{});var jNe=s(dF);G4e=n(jNe,"STRONG",{});var a0t=s(G4e);enr=r(a0t,"yoso"),a0t.forEach(t),onr=r(jNe," \u2014 "),dW=n(jNe,"A",{href:!0});var n0t=s(dW);rnr=r(n0t,"YosoForQuestionAnswering"),n0t.forEach(t),tnr=r(jNe," (YOSO model)"),jNe.forEach(t),X.forEach(t),anr=i(_a),cF=n(_a,"P",{});var DNe=s(cF);nnr=r(DNe,"The model is set in evaluation mode by default using "),O4e=n(DNe,"CODE",{});var s0t=s(O4e);snr=r(s0t,"model.eval()"),s0t.forEach(t),lnr=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V4e=n(DNe,"CODE",{});var l0t=s(V4e);inr=r(l0t,"model.train()"),l0t.forEach(t),DNe.forEach(t),dnr=i(_a),T(fF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),RXe=i(f),_d=n(f,"H2",{class:!0});var jQe=s(_d);mF=n(jQe,"A",{id:!0,class:!0,href:!0});var i0t=s(mF);X4e=n(i0t,"SPAN",{});var d0t=s(X4e);T(Ly.$$.fragment,d0t),d0t.forEach(t),i0t.forEach(t),cnr=i(jQe),z4e=n(jQe,"SPAN",{});var c0t=s(z4e);fnr=r(c0t,"AutoModelForTableQuestionAnswering"),c0t.forEach(t),jQe.forEach(t),PXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(yy.$$.fragment,fl),mnr=i(fl),ud=n(fl,"P",{});var Yre=s(ud);gnr=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cW=n(Yre,"A",{href:!0});var f0t=s(cW);hnr=r(f0t,"from_pretrained()"),f0t.forEach(t),pnr=r(Yre," class method or the "),fW=n(Yre,"A",{href:!0});var m0t=s(fW);_nr=r(m0t,"from_config()"),m0t.forEach(t),unr=r(Yre,` class
method.`),Yre.forEach(t),bnr=i(fl),xy=n(fl,"P",{});var DQe=s(xy);vnr=r(DQe,"This class cannot be instantiated directly using "),Q4e=n(DQe,"CODE",{});var g0t=s(Q4e);Fnr=r(g0t,"__init__()"),g0t.forEach(t),Tnr=r(DQe," (throws an error)."),DQe.forEach(t),Mnr=i(fl),ut=n(fl,"DIV",{class:!0});var xA=s(ut);T($y.$$.fragment,xA),Enr=i(xA),W4e=n(xA,"P",{});var h0t=s(W4e);Cnr=r(h0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h0t.forEach(t),wnr=i(xA),bd=n(xA,"P",{});var Kre=s(bd);Anr=r(Kre,`Note:
Loading a model from its configuration file does `),H4e=n(Kre,"STRONG",{});var p0t=s(H4e);Lnr=r(p0t,"not"),p0t.forEach(t),ynr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Kre,"A",{href:!0});var _0t=s(mW);xnr=r(_0t,"from_pretrained()"),_0t.forEach(t),$nr=r(Kre," to load the model weights."),Kre.forEach(t),knr=i(xA),T(gF.$$.fragment,xA),xA.forEach(t),Snr=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(ky.$$.fragment,ua),Rnr=i(ua),U4e=n(ua,"P",{});var u0t=s(U4e);Pnr=r(u0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),u0t.forEach(t),Bnr=i(ua),Qa=n(ua,"P",{});var $A=s(Qa);Nnr=r($A,"The model class to instantiate is selected based on the "),J4e=n($A,"CODE",{});var b0t=s(J4e);Inr=r(b0t,"model_type"),b0t.forEach(t),qnr=r($A,` property of the config object (either
passed as an argument or loaded from `),Y4e=n($A,"CODE",{});var v0t=s(Y4e);jnr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),Dnr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=n($A,"CODE",{});var F0t=s(K4e);Gnr=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),Onr=r($A,":"),$A.forEach(t),Vnr=i(ua),Z4e=n(ua,"UL",{});var T0t=s(Z4e);hF=n(T0t,"LI",{});var GNe=s(hF);e2e=n(GNe,"STRONG",{});var M0t=s(e2e);Xnr=r(M0t,"tapas"),M0t.forEach(t),znr=r(GNe," \u2014 "),gW=n(GNe,"A",{href:!0});var E0t=s(gW);Qnr=r(E0t,"TapasForQuestionAnswering"),E0t.forEach(t),Wnr=r(GNe," (TAPAS model)"),GNe.forEach(t),T0t.forEach(t),Hnr=i(ua),pF=n(ua,"P",{});var ONe=s(pF);Unr=r(ONe,"The model is set in evaluation mode by default using "),o2e=n(ONe,"CODE",{});var C0t=s(o2e);Jnr=r(C0t,"model.eval()"),C0t.forEach(t),Ynr=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r2e=n(ONe,"CODE",{});var w0t=s(r2e);Knr=r(w0t,"model.train()"),w0t.forEach(t),ONe.forEach(t),Znr=i(ua),T(_F.$$.fragment,ua),ua.forEach(t),fl.forEach(t),BXe=i(f),vd=n(f,"H2",{class:!0});var GQe=s(vd);uF=n(GQe,"A",{id:!0,class:!0,href:!0});var A0t=s(uF);t2e=n(A0t,"SPAN",{});var L0t=s(t2e);T(Sy.$$.fragment,L0t),L0t.forEach(t),A0t.forEach(t),esr=i(GQe),a2e=n(GQe,"SPAN",{});var y0t=s(a2e);osr=r(y0t,"AutoModelForImageClassification"),y0t.forEach(t),GQe.forEach(t),NXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(Ry.$$.fragment,ml),rsr=i(ml),Fd=n(ml,"P",{});var Zre=s(Fd);tsr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hW=n(Zre,"A",{href:!0});var x0t=s(hW);asr=r(x0t,"from_pretrained()"),x0t.forEach(t),nsr=r(Zre," class method or the "),pW=n(Zre,"A",{href:!0});var $0t=s(pW);ssr=r($0t,"from_config()"),$0t.forEach(t),lsr=r(Zre,` class
method.`),Zre.forEach(t),isr=i(ml),Py=n(ml,"P",{});var OQe=s(Py);dsr=r(OQe,"This class cannot be instantiated directly using "),n2e=n(OQe,"CODE",{});var k0t=s(n2e);csr=r(k0t,"__init__()"),k0t.forEach(t),fsr=r(OQe," (throws an error)."),OQe.forEach(t),msr=i(ml),bt=n(ml,"DIV",{class:!0});var kA=s(bt);T(By.$$.fragment,kA),gsr=i(kA),s2e=n(kA,"P",{});var S0t=s(s2e);hsr=r(S0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S0t.forEach(t),psr=i(kA),Td=n(kA,"P",{});var ete=s(Td);_sr=r(ete,`Note:
Loading a model from its configuration file does `),l2e=n(ete,"STRONG",{});var R0t=s(l2e);usr=r(R0t,"not"),R0t.forEach(t),bsr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(ete,"A",{href:!0});var P0t=s(_W);vsr=r(P0t,"from_pretrained()"),P0t.forEach(t),Fsr=r(ete," to load the model weights."),ete.forEach(t),Tsr=i(kA),T(bF.$$.fragment,kA),kA.forEach(t),Msr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(Ny.$$.fragment,ba),Esr=i(ba),i2e=n(ba,"P",{});var B0t=s(i2e);Csr=r(B0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B0t.forEach(t),wsr=i(ba),Wa=n(ba,"P",{});var SA=s(Wa);Asr=r(SA,"The model class to instantiate is selected based on the "),d2e=n(SA,"CODE",{});var N0t=s(d2e);Lsr=r(N0t,"model_type"),N0t.forEach(t),ysr=r(SA,` property of the config object (either
passed as an argument or loaded from `),c2e=n(SA,"CODE",{});var I0t=s(c2e);xsr=r(I0t,"pretrained_model_name_or_path"),I0t.forEach(t),$sr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(SA,"CODE",{});var q0t=s(f2e);ksr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),Ssr=r(SA,":"),SA.forEach(t),Rsr=i(ba),_e=n(ba,"UL",{});var Fe=s(_e);vF=n(Fe,"LI",{});var VNe=s(vF);m2e=n(VNe,"STRONG",{});var j0t=s(m2e);Psr=r(j0t,"beit"),j0t.forEach(t),Bsr=r(VNe," \u2014 "),uW=n(VNe,"A",{href:!0});var D0t=s(uW);Nsr=r(D0t,"BeitForImageClassification"),D0t.forEach(t),Isr=r(VNe," (BEiT model)"),VNe.forEach(t),qsr=i(Fe),FF=n(Fe,"LI",{});var XNe=s(FF);g2e=n(XNe,"STRONG",{});var G0t=s(g2e);jsr=r(G0t,"convnext"),G0t.forEach(t),Dsr=r(XNe," \u2014 "),bW=n(XNe,"A",{href:!0});var O0t=s(bW);Gsr=r(O0t,"ConvNextForImageClassification"),O0t.forEach(t),Osr=r(XNe," (ConvNeXT model)"),XNe.forEach(t),Vsr=i(Fe),TF=n(Fe,"LI",{});var zNe=s(TF);h2e=n(zNe,"STRONG",{});var V0t=s(h2e);Xsr=r(V0t,"cvt"),V0t.forEach(t),zsr=r(zNe," \u2014 "),vW=n(zNe,"A",{href:!0});var X0t=s(vW);Qsr=r(X0t,"CvtForImageClassification"),X0t.forEach(t),Wsr=r(zNe," (CvT model)"),zNe.forEach(t),Hsr=i(Fe),MF=n(Fe,"LI",{});var QNe=s(MF);p2e=n(QNe,"STRONG",{});var z0t=s(p2e);Usr=r(z0t,"data2vec-vision"),z0t.forEach(t),Jsr=r(QNe," \u2014 "),FW=n(QNe,"A",{href:!0});var Q0t=s(FW);Ysr=r(Q0t,"Data2VecVisionForImageClassification"),Q0t.forEach(t),Ksr=r(QNe," (Data2VecVision model)"),QNe.forEach(t),Zsr=i(Fe),Hs=n(Fe,"LI",{});var SS=s(Hs);_2e=n(SS,"STRONG",{});var W0t=s(_2e);elr=r(W0t,"deit"),W0t.forEach(t),olr=r(SS," \u2014 "),TW=n(SS,"A",{href:!0});var H0t=s(TW);rlr=r(H0t,"DeiTForImageClassification"),H0t.forEach(t),tlr=r(SS," or "),MW=n(SS,"A",{href:!0});var U0t=s(MW);alr=r(U0t,"DeiTForImageClassificationWithTeacher"),U0t.forEach(t),nlr=r(SS," (DeiT model)"),SS.forEach(t),slr=i(Fe),EF=n(Fe,"LI",{});var WNe=s(EF);u2e=n(WNe,"STRONG",{});var J0t=s(u2e);llr=r(J0t,"imagegpt"),J0t.forEach(t),ilr=r(WNe," \u2014 "),EW=n(WNe,"A",{href:!0});var Y0t=s(EW);dlr=r(Y0t,"ImageGPTForImageClassification"),Y0t.forEach(t),clr=r(WNe," (ImageGPT model)"),WNe.forEach(t),flr=i(Fe),Us=n(Fe,"LI",{});var RS=s(Us);b2e=n(RS,"STRONG",{});var K0t=s(b2e);mlr=r(K0t,"levit"),K0t.forEach(t),glr=r(RS," \u2014 "),CW=n(RS,"A",{href:!0});var Z0t=s(CW);hlr=r(Z0t,"LevitForImageClassification"),Z0t.forEach(t),plr=r(RS," or "),wW=n(RS,"A",{href:!0});var ewt=s(wW);_lr=r(ewt,"LevitForImageClassificationWithTeacher"),ewt.forEach(t),ulr=r(RS," (LeViT model)"),RS.forEach(t),blr=i(Fe),CF=n(Fe,"LI",{});var HNe=s(CF);v2e=n(HNe,"STRONG",{});var owt=s(v2e);vlr=r(owt,"mobilenet_v2"),owt.forEach(t),Flr=r(HNe," \u2014 "),AW=n(HNe,"A",{href:!0});var rwt=s(AW);Tlr=r(rwt,"MobileNetV2ForImageClassification"),rwt.forEach(t),Mlr=r(HNe," (MobileNetV2 model)"),HNe.forEach(t),Elr=i(Fe),wF=n(Fe,"LI",{});var UNe=s(wF);F2e=n(UNe,"STRONG",{});var twt=s(F2e);Clr=r(twt,"mobilevit"),twt.forEach(t),wlr=r(UNe," \u2014 "),LW=n(UNe,"A",{href:!0});var awt=s(LW);Alr=r(awt,"MobileViTForImageClassification"),awt.forEach(t),Llr=r(UNe," (MobileViT model)"),UNe.forEach(t),ylr=i(Fe),vt=n(Fe,"LI",{});var Sf=s(vt);T2e=n(Sf,"STRONG",{});var nwt=s(T2e);xlr=r(nwt,"perceiver"),nwt.forEach(t),$lr=r(Sf," \u2014 "),yW=n(Sf,"A",{href:!0});var swt=s(yW);klr=r(swt,"PerceiverForImageClassificationLearned"),swt.forEach(t),Slr=r(Sf," or "),xW=n(Sf,"A",{href:!0});var lwt=s(xW);Rlr=r(lwt,"PerceiverForImageClassificationFourier"),lwt.forEach(t),Plr=r(Sf," or "),$W=n(Sf,"A",{href:!0});var iwt=s($W);Blr=r(iwt,"PerceiverForImageClassificationConvProcessing"),iwt.forEach(t),Nlr=r(Sf," (Perceiver model)"),Sf.forEach(t),Ilr=i(Fe),AF=n(Fe,"LI",{});var JNe=s(AF);M2e=n(JNe,"STRONG",{});var dwt=s(M2e);qlr=r(dwt,"poolformer"),dwt.forEach(t),jlr=r(JNe," \u2014 "),kW=n(JNe,"A",{href:!0});var cwt=s(kW);Dlr=r(cwt,"PoolFormerForImageClassification"),cwt.forEach(t),Glr=r(JNe," (PoolFormer model)"),JNe.forEach(t),Olr=i(Fe),LF=n(Fe,"LI",{});var YNe=s(LF);E2e=n(YNe,"STRONG",{});var fwt=s(E2e);Vlr=r(fwt,"regnet"),fwt.forEach(t),Xlr=r(YNe," \u2014 "),SW=n(YNe,"A",{href:!0});var mwt=s(SW);zlr=r(mwt,"RegNetForImageClassification"),mwt.forEach(t),Qlr=r(YNe," (RegNet model)"),YNe.forEach(t),Wlr=i(Fe),yF=n(Fe,"LI",{});var KNe=s(yF);C2e=n(KNe,"STRONG",{});var gwt=s(C2e);Hlr=r(gwt,"resnet"),gwt.forEach(t),Ulr=r(KNe," \u2014 "),RW=n(KNe,"A",{href:!0});var hwt=s(RW);Jlr=r(hwt,"ResNetForImageClassification"),hwt.forEach(t),Ylr=r(KNe," (ResNet model)"),KNe.forEach(t),Klr=i(Fe),xF=n(Fe,"LI",{});var ZNe=s(xF);w2e=n(ZNe,"STRONG",{});var pwt=s(w2e);Zlr=r(pwt,"segformer"),pwt.forEach(t),eir=r(ZNe," \u2014 "),PW=n(ZNe,"A",{href:!0});var _wt=s(PW);oir=r(_wt,"SegformerForImageClassification"),_wt.forEach(t),rir=r(ZNe," (SegFormer model)"),ZNe.forEach(t),tir=i(Fe),$F=n(Fe,"LI",{});var eIe=s($F);A2e=n(eIe,"STRONG",{});var uwt=s(A2e);air=r(uwt,"swin"),uwt.forEach(t),nir=r(eIe," \u2014 "),BW=n(eIe,"A",{href:!0});var bwt=s(BW);sir=r(bwt,"SwinForImageClassification"),bwt.forEach(t),lir=r(eIe," (Swin Transformer model)"),eIe.forEach(t),iir=i(Fe),kF=n(Fe,"LI",{});var oIe=s(kF);L2e=n(oIe,"STRONG",{});var vwt=s(L2e);dir=r(vwt,"van"),vwt.forEach(t),cir=r(oIe," \u2014 "),NW=n(oIe,"A",{href:!0});var Fwt=s(NW);fir=r(Fwt,"VanForImageClassification"),Fwt.forEach(t),mir=r(oIe," (VAN model)"),oIe.forEach(t),gir=i(Fe),SF=n(Fe,"LI",{});var rIe=s(SF);y2e=n(rIe,"STRONG",{});var Twt=s(y2e);hir=r(Twt,"vit"),Twt.forEach(t),pir=r(rIe," \u2014 "),IW=n(rIe,"A",{href:!0});var Mwt=s(IW);_ir=r(Mwt,"ViTForImageClassification"),Mwt.forEach(t),uir=r(rIe," (ViT model)"),rIe.forEach(t),Fe.forEach(t),bir=i(ba),RF=n(ba,"P",{});var tIe=s(RF);vir=r(tIe,"The model is set in evaluation mode by default using "),x2e=n(tIe,"CODE",{});var Ewt=s(x2e);Fir=r(Ewt,"model.eval()"),Ewt.forEach(t),Tir=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=n(tIe,"CODE",{});var Cwt=s($2e);Mir=r(Cwt,"model.train()"),Cwt.forEach(t),tIe.forEach(t),Eir=i(ba),T(PF.$$.fragment,ba),ba.forEach(t),ml.forEach(t),IXe=i(f),Md=n(f,"H2",{class:!0});var VQe=s(Md);BF=n(VQe,"A",{id:!0,class:!0,href:!0});var wwt=s(BF);k2e=n(wwt,"SPAN",{});var Awt=s(k2e);T(Iy.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),Cir=i(VQe),S2e=n(VQe,"SPAN",{});var Lwt=s(S2e);wir=r(Lwt,"AutoModelForVision2Seq"),Lwt.forEach(t),VQe.forEach(t),qXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(qy.$$.fragment,gl),Air=i(gl),Ed=n(gl,"P",{});var ote=s(Ed);Lir=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qW=n(ote,"A",{href:!0});var ywt=s(qW);yir=r(ywt,"from_pretrained()"),ywt.forEach(t),xir=r(ote," class method or the "),jW=n(ote,"A",{href:!0});var xwt=s(jW);$ir=r(xwt,"from_config()"),xwt.forEach(t),kir=r(ote,` class
method.`),ote.forEach(t),Sir=i(gl),jy=n(gl,"P",{});var XQe=s(jy);Rir=r(XQe,"This class cannot be instantiated directly using "),R2e=n(XQe,"CODE",{});var $wt=s(R2e);Pir=r($wt,"__init__()"),$wt.forEach(t),Bir=r(XQe," (throws an error)."),XQe.forEach(t),Nir=i(gl),Ft=n(gl,"DIV",{class:!0});var RA=s(Ft);T(Dy.$$.fragment,RA),Iir=i(RA),P2e=n(RA,"P",{});var kwt=s(P2e);qir=r(kwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kwt.forEach(t),jir=i(RA),Cd=n(RA,"P",{});var rte=s(Cd);Dir=r(rte,`Note:
Loading a model from its configuration file does `),B2e=n(rte,"STRONG",{});var Swt=s(B2e);Gir=r(Swt,"not"),Swt.forEach(t),Oir=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(rte,"A",{href:!0});var Rwt=s(DW);Vir=r(Rwt,"from_pretrained()"),Rwt.forEach(t),Xir=r(rte," to load the model weights."),rte.forEach(t),zir=i(RA),T(NF.$$.fragment,RA),RA.forEach(t),Qir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(Gy.$$.fragment,va),Wir=i(va),N2e=n(va,"P",{});var Pwt=s(N2e);Hir=r(Pwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pwt.forEach(t),Uir=i(va),Ha=n(va,"P",{});var PA=s(Ha);Jir=r(PA,"The model class to instantiate is selected based on the "),I2e=n(PA,"CODE",{});var Bwt=s(I2e);Yir=r(Bwt,"model_type"),Bwt.forEach(t),Kir=r(PA,` property of the config object (either
passed as an argument or loaded from `),q2e=n(PA,"CODE",{});var Nwt=s(q2e);Zir=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),edr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(PA,"CODE",{});var Iwt=s(j2e);odr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),rdr=r(PA,":"),PA.forEach(t),tdr=i(va),D2e=n(va,"UL",{});var qwt=s(D2e);IF=n(qwt,"LI",{});var aIe=s(IF);G2e=n(aIe,"STRONG",{});var jwt=s(G2e);adr=r(jwt,"vision-encoder-decoder"),jwt.forEach(t),ndr=r(aIe," \u2014 "),GW=n(aIe,"A",{href:!0});var Dwt=s(GW);sdr=r(Dwt,"VisionEncoderDecoderModel"),Dwt.forEach(t),ldr=r(aIe," (Vision Encoder decoder model)"),aIe.forEach(t),qwt.forEach(t),idr=i(va),qF=n(va,"P",{});var nIe=s(qF);ddr=r(nIe,"The model is set in evaluation mode by default using "),O2e=n(nIe,"CODE",{});var Gwt=s(O2e);cdr=r(Gwt,"model.eval()"),Gwt.forEach(t),fdr=r(nIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=n(nIe,"CODE",{});var Owt=s(V2e);mdr=r(Owt,"model.train()"),Owt.forEach(t),nIe.forEach(t),gdr=i(va),T(jF.$$.fragment,va),va.forEach(t),gl.forEach(t),jXe=i(f),wd=n(f,"H2",{class:!0});var zQe=s(wd);DF=n(zQe,"A",{id:!0,class:!0,href:!0});var Vwt=s(DF);X2e=n(Vwt,"SPAN",{});var Xwt=s(X2e);T(Oy.$$.fragment,Xwt),Xwt.forEach(t),Vwt.forEach(t),hdr=i(zQe),z2e=n(zQe,"SPAN",{});var zwt=s(z2e);pdr=r(zwt,"AutoModelForVisualQuestionAnswering"),zwt.forEach(t),zQe.forEach(t),DXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(Vy.$$.fragment,hl),_dr=i(hl),Ad=n(hl,"P",{});var tte=s(Ad);udr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OW=n(tte,"A",{href:!0});var Qwt=s(OW);bdr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),vdr=r(tte," class method or the "),VW=n(tte,"A",{href:!0});var Wwt=s(VW);Fdr=r(Wwt,"from_config()"),Wwt.forEach(t),Tdr=r(tte,` class
method.`),tte.forEach(t),Mdr=i(hl),Xy=n(hl,"P",{});var QQe=s(Xy);Edr=r(QQe,"This class cannot be instantiated directly using "),Q2e=n(QQe,"CODE",{});var Hwt=s(Q2e);Cdr=r(Hwt,"__init__()"),Hwt.forEach(t),wdr=r(QQe," (throws an error)."),QQe.forEach(t),Adr=i(hl),Tt=n(hl,"DIV",{class:!0});var BA=s(Tt);T(zy.$$.fragment,BA),Ldr=i(BA),W2e=n(BA,"P",{});var Uwt=s(W2e);ydr=r(Uwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Uwt.forEach(t),xdr=i(BA),Ld=n(BA,"P",{});var ate=s(Ld);$dr=r(ate,`Note:
Loading a model from its configuration file does `),H2e=n(ate,"STRONG",{});var Jwt=s(H2e);kdr=r(Jwt,"not"),Jwt.forEach(t),Sdr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(ate,"A",{href:!0});var Ywt=s(XW);Rdr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),Pdr=r(ate," to load the model weights."),ate.forEach(t),Bdr=i(BA),T(GF.$$.fragment,BA),BA.forEach(t),Ndr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Qy.$$.fragment,Fa),Idr=i(Fa),U2e=n(Fa,"P",{});var Kwt=s(U2e);qdr=r(Kwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Kwt.forEach(t),jdr=i(Fa),Ua=n(Fa,"P",{});var NA=s(Ua);Ddr=r(NA,"The model class to instantiate is selected based on the "),J2e=n(NA,"CODE",{});var Zwt=s(J2e);Gdr=r(Zwt,"model_type"),Zwt.forEach(t),Odr=r(NA,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(NA,"CODE",{});var eAt=s(Y2e);Vdr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),Xdr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(NA,"CODE",{});var oAt=s(K2e);zdr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),Qdr=r(NA,":"),NA.forEach(t),Wdr=i(Fa),Z2e=n(Fa,"UL",{});var rAt=s(Z2e);OF=n(rAt,"LI",{});var sIe=s(OF);ebe=n(sIe,"STRONG",{});var tAt=s(ebe);Hdr=r(tAt,"vilt"),tAt.forEach(t),Udr=r(sIe," \u2014 "),zW=n(sIe,"A",{href:!0});var aAt=s(zW);Jdr=r(aAt,"ViltForQuestionAnswering"),aAt.forEach(t),Ydr=r(sIe," (ViLT model)"),sIe.forEach(t),rAt.forEach(t),Kdr=i(Fa),VF=n(Fa,"P",{});var lIe=s(VF);Zdr=r(lIe,"The model is set in evaluation mode by default using "),obe=n(lIe,"CODE",{});var nAt=s(obe);ecr=r(nAt,"model.eval()"),nAt.forEach(t),ocr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(lIe,"CODE",{});var sAt=s(rbe);rcr=r(sAt,"model.train()"),sAt.forEach(t),lIe.forEach(t),tcr=i(Fa),T(XF.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),GXe=i(f),yd=n(f,"H2",{class:!0});var WQe=s(yd);zF=n(WQe,"A",{id:!0,class:!0,href:!0});var lAt=s(zF);tbe=n(lAt,"SPAN",{});var iAt=s(tbe);T(Wy.$$.fragment,iAt),iAt.forEach(t),lAt.forEach(t),acr=i(WQe),abe=n(WQe,"SPAN",{});var dAt=s(abe);ncr=r(dAt,"AutoModelForAudioClassification"),dAt.forEach(t),WQe.forEach(t),OXe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Hy.$$.fragment,pl),scr=i(pl),xd=n(pl,"P",{});var nte=s(xd);lcr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QW=n(nte,"A",{href:!0});var cAt=s(QW);icr=r(cAt,"from_pretrained()"),cAt.forEach(t),dcr=r(nte," class method or the "),WW=n(nte,"A",{href:!0});var fAt=s(WW);ccr=r(fAt,"from_config()"),fAt.forEach(t),fcr=r(nte,` class
method.`),nte.forEach(t),mcr=i(pl),Uy=n(pl,"P",{});var HQe=s(Uy);gcr=r(HQe,"This class cannot be instantiated directly using "),nbe=n(HQe,"CODE",{});var mAt=s(nbe);hcr=r(mAt,"__init__()"),mAt.forEach(t),pcr=r(HQe," (throws an error)."),HQe.forEach(t),_cr=i(pl),Mt=n(pl,"DIV",{class:!0});var IA=s(Mt);T(Jy.$$.fragment,IA),ucr=i(IA),sbe=n(IA,"P",{});var gAt=s(sbe);bcr=r(gAt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gAt.forEach(t),vcr=i(IA),$d=n(IA,"P",{});var ste=s($d);Fcr=r(ste,`Note:
Loading a model from its configuration file does `),lbe=n(ste,"STRONG",{});var hAt=s(lbe);Tcr=r(hAt,"not"),hAt.forEach(t),Mcr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(ste,"A",{href:!0});var pAt=s(HW);Ecr=r(pAt,"from_pretrained()"),pAt.forEach(t),Ccr=r(ste," to load the model weights."),ste.forEach(t),wcr=i(IA),T(QF.$$.fragment,IA),IA.forEach(t),Acr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Yy.$$.fragment,Ta),Lcr=i(Ta),ibe=n(Ta,"P",{});var _At=s(ibe);ycr=r(_At,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),_At.forEach(t),xcr=i(Ta),Ja=n(Ta,"P",{});var qA=s(Ja);$cr=r(qA,"The model class to instantiate is selected based on the "),dbe=n(qA,"CODE",{});var uAt=s(dbe);kcr=r(uAt,"model_type"),uAt.forEach(t),Scr=r(qA,` property of the config object (either
passed as an argument or loaded from `),cbe=n(qA,"CODE",{});var bAt=s(cbe);Rcr=r(bAt,"pretrained_model_name_or_path"),bAt.forEach(t),Pcr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(qA,"CODE",{});var vAt=s(fbe);Bcr=r(vAt,"pretrained_model_name_or_path"),vAt.forEach(t),Ncr=r(qA,":"),qA.forEach(t),Icr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);WF=n(ze,"LI",{});var iIe=s(WF);mbe=n(iIe,"STRONG",{});var FAt=s(mbe);qcr=r(FAt,"data2vec-audio"),FAt.forEach(t),jcr=r(iIe," \u2014 "),UW=n(iIe,"A",{href:!0});var TAt=s(UW);Dcr=r(TAt,"Data2VecAudioForSequenceClassification"),TAt.forEach(t),Gcr=r(iIe," (Data2VecAudio model)"),iIe.forEach(t),Ocr=i(ze),HF=n(ze,"LI",{});var dIe=s(HF);gbe=n(dIe,"STRONG",{});var MAt=s(gbe);Vcr=r(MAt,"hubert"),MAt.forEach(t),Xcr=r(dIe," \u2014 "),JW=n(dIe,"A",{href:!0});var EAt=s(JW);zcr=r(EAt,"HubertForSequenceClassification"),EAt.forEach(t),Qcr=r(dIe," (Hubert model)"),dIe.forEach(t),Wcr=i(ze),UF=n(ze,"LI",{});var cIe=s(UF);hbe=n(cIe,"STRONG",{});var CAt=s(hbe);Hcr=r(CAt,"sew"),CAt.forEach(t),Ucr=r(cIe," \u2014 "),YW=n(cIe,"A",{href:!0});var wAt=s(YW);Jcr=r(wAt,"SEWForSequenceClassification"),wAt.forEach(t),Ycr=r(cIe," (SEW model)"),cIe.forEach(t),Kcr=i(ze),JF=n(ze,"LI",{});var fIe=s(JF);pbe=n(fIe,"STRONG",{});var AAt=s(pbe);Zcr=r(AAt,"sew-d"),AAt.forEach(t),efr=r(fIe," \u2014 "),KW=n(fIe,"A",{href:!0});var LAt=s(KW);ofr=r(LAt,"SEWDForSequenceClassification"),LAt.forEach(t),rfr=r(fIe," (SEW-D model)"),fIe.forEach(t),tfr=i(ze),YF=n(ze,"LI",{});var mIe=s(YF);_be=n(mIe,"STRONG",{});var yAt=s(_be);afr=r(yAt,"unispeech"),yAt.forEach(t),nfr=r(mIe," \u2014 "),ZW=n(mIe,"A",{href:!0});var xAt=s(ZW);sfr=r(xAt,"UniSpeechForSequenceClassification"),xAt.forEach(t),lfr=r(mIe," (UniSpeech model)"),mIe.forEach(t),ifr=i(ze),KF=n(ze,"LI",{});var gIe=s(KF);ube=n(gIe,"STRONG",{});var $At=s(ube);dfr=r($At,"unispeech-sat"),$At.forEach(t),cfr=r(gIe," \u2014 "),eH=n(gIe,"A",{href:!0});var kAt=s(eH);ffr=r(kAt,"UniSpeechSatForSequenceClassification"),kAt.forEach(t),mfr=r(gIe," (UniSpeechSat model)"),gIe.forEach(t),gfr=i(ze),ZF=n(ze,"LI",{});var hIe=s(ZF);bbe=n(hIe,"STRONG",{});var SAt=s(bbe);hfr=r(SAt,"wav2vec2"),SAt.forEach(t),pfr=r(hIe," \u2014 "),oH=n(hIe,"A",{href:!0});var RAt=s(oH);_fr=r(RAt,"Wav2Vec2ForSequenceClassification"),RAt.forEach(t),ufr=r(hIe," (Wav2Vec2 model)"),hIe.forEach(t),bfr=i(ze),eT=n(ze,"LI",{});var pIe=s(eT);vbe=n(pIe,"STRONG",{});var PAt=s(vbe);vfr=r(PAt,"wav2vec2-conformer"),PAt.forEach(t),Ffr=r(pIe," \u2014 "),rH=n(pIe,"A",{href:!0});var BAt=s(rH);Tfr=r(BAt,"Wav2Vec2ConformerForSequenceClassification"),BAt.forEach(t),Mfr=r(pIe," (Wav2Vec2-Conformer model)"),pIe.forEach(t),Efr=i(ze),oT=n(ze,"LI",{});var _Ie=s(oT);Fbe=n(_Ie,"STRONG",{});var NAt=s(Fbe);Cfr=r(NAt,"wavlm"),NAt.forEach(t),wfr=r(_Ie," \u2014 "),tH=n(_Ie,"A",{href:!0});var IAt=s(tH);Afr=r(IAt,"WavLMForSequenceClassification"),IAt.forEach(t),Lfr=r(_Ie," (WavLM model)"),_Ie.forEach(t),ze.forEach(t),yfr=i(Ta),rT=n(Ta,"P",{});var uIe=s(rT);xfr=r(uIe,"The model is set in evaluation mode by default using "),Tbe=n(uIe,"CODE",{});var qAt=s(Tbe);$fr=r(qAt,"model.eval()"),qAt.forEach(t),kfr=r(uIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=n(uIe,"CODE",{});var jAt=s(Mbe);Sfr=r(jAt,"model.train()"),jAt.forEach(t),uIe.forEach(t),Rfr=i(Ta),T(tT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),VXe=i(f),kd=n(f,"H2",{class:!0});var UQe=s(kd);aT=n(UQe,"A",{id:!0,class:!0,href:!0});var DAt=s(aT);Ebe=n(DAt,"SPAN",{});var GAt=s(Ebe);T(Ky.$$.fragment,GAt),GAt.forEach(t),DAt.forEach(t),Pfr=i(UQe),Cbe=n(UQe,"SPAN",{});var OAt=s(Cbe);Bfr=r(OAt,"AutoModelForAudioFrameClassification"),OAt.forEach(t),UQe.forEach(t),XXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Zy.$$.fragment,_l),Nfr=i(_l),Sd=n(_l,"P",{});var lte=s(Sd);Ifr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aH=n(lte,"A",{href:!0});var VAt=s(aH);qfr=r(VAt,"from_pretrained()"),VAt.forEach(t),jfr=r(lte," class method or the "),nH=n(lte,"A",{href:!0});var XAt=s(nH);Dfr=r(XAt,"from_config()"),XAt.forEach(t),Gfr=r(lte,` class
method.`),lte.forEach(t),Ofr=i(_l),e9=n(_l,"P",{});var JQe=s(e9);Vfr=r(JQe,"This class cannot be instantiated directly using "),wbe=n(JQe,"CODE",{});var zAt=s(wbe);Xfr=r(zAt,"__init__()"),zAt.forEach(t),zfr=r(JQe," (throws an error)."),JQe.forEach(t),Qfr=i(_l),Et=n(_l,"DIV",{class:!0});var jA=s(Et);T(o9.$$.fragment,jA),Wfr=i(jA),Abe=n(jA,"P",{});var QAt=s(Abe);Hfr=r(QAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),QAt.forEach(t),Ufr=i(jA),Rd=n(jA,"P",{});var ite=s(Rd);Jfr=r(ite,`Note:
Loading a model from its configuration file does `),Lbe=n(ite,"STRONG",{});var WAt=s(Lbe);Yfr=r(WAt,"not"),WAt.forEach(t),Kfr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(ite,"A",{href:!0});var HAt=s(sH);Zfr=r(HAt,"from_pretrained()"),HAt.forEach(t),emr=r(ite," to load the model weights."),ite.forEach(t),omr=i(jA),T(nT.$$.fragment,jA),jA.forEach(t),rmr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(r9.$$.fragment,Ma),tmr=i(Ma),ybe=n(Ma,"P",{});var UAt=s(ybe);amr=r(UAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),UAt.forEach(t),nmr=i(Ma),Ya=n(Ma,"P",{});var DA=s(Ya);smr=r(DA,"The model class to instantiate is selected based on the "),xbe=n(DA,"CODE",{});var JAt=s(xbe);lmr=r(JAt,"model_type"),JAt.forEach(t),imr=r(DA,` property of the config object (either
passed as an argument or loaded from `),$be=n(DA,"CODE",{});var YAt=s($be);dmr=r(YAt,"pretrained_model_name_or_path"),YAt.forEach(t),cmr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(DA,"CODE",{});var KAt=s(kbe);fmr=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),mmr=r(DA,":"),DA.forEach(t),gmr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);sT=n(ul,"LI",{});var bIe=s(sT);Sbe=n(bIe,"STRONG",{});var ZAt=s(Sbe);hmr=r(ZAt,"data2vec-audio"),ZAt.forEach(t),pmr=r(bIe," \u2014 "),lH=n(bIe,"A",{href:!0});var e6t=s(lH);_mr=r(e6t,"Data2VecAudioForAudioFrameClassification"),e6t.forEach(t),umr=r(bIe," (Data2VecAudio model)"),bIe.forEach(t),bmr=i(ul),lT=n(ul,"LI",{});var vIe=s(lT);Rbe=n(vIe,"STRONG",{});var o6t=s(Rbe);vmr=r(o6t,"unispeech-sat"),o6t.forEach(t),Fmr=r(vIe," \u2014 "),iH=n(vIe,"A",{href:!0});var r6t=s(iH);Tmr=r(r6t,"UniSpeechSatForAudioFrameClassification"),r6t.forEach(t),Mmr=r(vIe," (UniSpeechSat model)"),vIe.forEach(t),Emr=i(ul),iT=n(ul,"LI",{});var FIe=s(iT);Pbe=n(FIe,"STRONG",{});var t6t=s(Pbe);Cmr=r(t6t,"wav2vec2"),t6t.forEach(t),wmr=r(FIe," \u2014 "),dH=n(FIe,"A",{href:!0});var a6t=s(dH);Amr=r(a6t,"Wav2Vec2ForAudioFrameClassification"),a6t.forEach(t),Lmr=r(FIe," (Wav2Vec2 model)"),FIe.forEach(t),ymr=i(ul),dT=n(ul,"LI",{});var TIe=s(dT);Bbe=n(TIe,"STRONG",{});var n6t=s(Bbe);xmr=r(n6t,"wav2vec2-conformer"),n6t.forEach(t),$mr=r(TIe," \u2014 "),cH=n(TIe,"A",{href:!0});var s6t=s(cH);kmr=r(s6t,"Wav2Vec2ConformerForAudioFrameClassification"),s6t.forEach(t),Smr=r(TIe," (Wav2Vec2-Conformer model)"),TIe.forEach(t),Rmr=i(ul),cT=n(ul,"LI",{});var MIe=s(cT);Nbe=n(MIe,"STRONG",{});var l6t=s(Nbe);Pmr=r(l6t,"wavlm"),l6t.forEach(t),Bmr=r(MIe," \u2014 "),fH=n(MIe,"A",{href:!0});var i6t=s(fH);Nmr=r(i6t,"WavLMForAudioFrameClassification"),i6t.forEach(t),Imr=r(MIe," (WavLM model)"),MIe.forEach(t),ul.forEach(t),qmr=i(Ma),fT=n(Ma,"P",{});var EIe=s(fT);jmr=r(EIe,"The model is set in evaluation mode by default using "),Ibe=n(EIe,"CODE",{});var d6t=s(Ibe);Dmr=r(d6t,"model.eval()"),d6t.forEach(t),Gmr=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(EIe,"CODE",{});var c6t=s(qbe);Omr=r(c6t,"model.train()"),c6t.forEach(t),EIe.forEach(t),Vmr=i(Ma),T(mT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),zXe=i(f),Pd=n(f,"H2",{class:!0});var YQe=s(Pd);gT=n(YQe,"A",{id:!0,class:!0,href:!0});var f6t=s(gT);jbe=n(f6t,"SPAN",{});var m6t=s(jbe);T(t9.$$.fragment,m6t),m6t.forEach(t),f6t.forEach(t),Xmr=i(YQe),Dbe=n(YQe,"SPAN",{});var g6t=s(Dbe);zmr=r(g6t,"AutoModelForCTC"),g6t.forEach(t),YQe.forEach(t),QXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(a9.$$.fragment,bl),Qmr=i(bl),Bd=n(bl,"P",{});var dte=s(Bd);Wmr=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mH=n(dte,"A",{href:!0});var h6t=s(mH);Hmr=r(h6t,"from_pretrained()"),h6t.forEach(t),Umr=r(dte," class method or the "),gH=n(dte,"A",{href:!0});var p6t=s(gH);Jmr=r(p6t,"from_config()"),p6t.forEach(t),Ymr=r(dte,` class
method.`),dte.forEach(t),Kmr=i(bl),n9=n(bl,"P",{});var KQe=s(n9);Zmr=r(KQe,"This class cannot be instantiated directly using "),Gbe=n(KQe,"CODE",{});var _6t=s(Gbe);egr=r(_6t,"__init__()"),_6t.forEach(t),ogr=r(KQe," (throws an error)."),KQe.forEach(t),rgr=i(bl),Ct=n(bl,"DIV",{class:!0});var GA=s(Ct);T(s9.$$.fragment,GA),tgr=i(GA),Obe=n(GA,"P",{});var u6t=s(Obe);agr=r(u6t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),u6t.forEach(t),ngr=i(GA),Nd=n(GA,"P",{});var cte=s(Nd);sgr=r(cte,`Note:
Loading a model from its configuration file does `),Vbe=n(cte,"STRONG",{});var b6t=s(Vbe);lgr=r(b6t,"not"),b6t.forEach(t),igr=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(cte,"A",{href:!0});var v6t=s(hH);dgr=r(v6t,"from_pretrained()"),v6t.forEach(t),cgr=r(cte," to load the model weights."),cte.forEach(t),fgr=i(GA),T(hT.$$.fragment,GA),GA.forEach(t),mgr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(l9.$$.fragment,Ea),ggr=i(Ea),Xbe=n(Ea,"P",{});var F6t=s(Xbe);hgr=r(F6t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),F6t.forEach(t),pgr=i(Ea),Ka=n(Ea,"P",{});var OA=s(Ka);_gr=r(OA,"The model class to instantiate is selected based on the "),zbe=n(OA,"CODE",{});var T6t=s(zbe);ugr=r(T6t,"model_type"),T6t.forEach(t),bgr=r(OA,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(OA,"CODE",{});var M6t=s(Qbe);vgr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),Fgr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(OA,"CODE",{});var E6t=s(Wbe);Tgr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),Mgr=r(OA,":"),OA.forEach(t),Egr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);pT=n(Be,"LI",{});var CIe=s(pT);Hbe=n(CIe,"STRONG",{});var C6t=s(Hbe);Cgr=r(C6t,"data2vec-audio"),C6t.forEach(t),wgr=r(CIe," \u2014 "),pH=n(CIe,"A",{href:!0});var w6t=s(pH);Agr=r(w6t,"Data2VecAudioForCTC"),w6t.forEach(t),Lgr=r(CIe," (Data2VecAudio model)"),CIe.forEach(t),ygr=i(Be),_T=n(Be,"LI",{});var wIe=s(_T);Ube=n(wIe,"STRONG",{});var A6t=s(Ube);xgr=r(A6t,"hubert"),A6t.forEach(t),$gr=r(wIe," \u2014 "),_H=n(wIe,"A",{href:!0});var L6t=s(_H);kgr=r(L6t,"HubertForCTC"),L6t.forEach(t),Sgr=r(wIe," (Hubert model)"),wIe.forEach(t),Rgr=i(Be),uT=n(Be,"LI",{});var AIe=s(uT);Jbe=n(AIe,"STRONG",{});var y6t=s(Jbe);Pgr=r(y6t,"mctct"),y6t.forEach(t),Bgr=r(AIe," \u2014 "),uH=n(AIe,"A",{href:!0});var x6t=s(uH);Ngr=r(x6t,"MCTCTForCTC"),x6t.forEach(t),Igr=r(AIe," (M-CTC-T model)"),AIe.forEach(t),qgr=i(Be),bT=n(Be,"LI",{});var LIe=s(bT);Ybe=n(LIe,"STRONG",{});var $6t=s(Ybe);jgr=r($6t,"sew"),$6t.forEach(t),Dgr=r(LIe," \u2014 "),bH=n(LIe,"A",{href:!0});var k6t=s(bH);Ggr=r(k6t,"SEWForCTC"),k6t.forEach(t),Ogr=r(LIe," (SEW model)"),LIe.forEach(t),Vgr=i(Be),vT=n(Be,"LI",{});var yIe=s(vT);Kbe=n(yIe,"STRONG",{});var S6t=s(Kbe);Xgr=r(S6t,"sew-d"),S6t.forEach(t),zgr=r(yIe," \u2014 "),vH=n(yIe,"A",{href:!0});var R6t=s(vH);Qgr=r(R6t,"SEWDForCTC"),R6t.forEach(t),Wgr=r(yIe," (SEW-D model)"),yIe.forEach(t),Hgr=i(Be),FT=n(Be,"LI",{});var xIe=s(FT);Zbe=n(xIe,"STRONG",{});var P6t=s(Zbe);Ugr=r(P6t,"unispeech"),P6t.forEach(t),Jgr=r(xIe," \u2014 "),FH=n(xIe,"A",{href:!0});var B6t=s(FH);Ygr=r(B6t,"UniSpeechForCTC"),B6t.forEach(t),Kgr=r(xIe," (UniSpeech model)"),xIe.forEach(t),Zgr=i(Be),TT=n(Be,"LI",{});var $Ie=s(TT);eve=n($Ie,"STRONG",{});var N6t=s(eve);ehr=r(N6t,"unispeech-sat"),N6t.forEach(t),ohr=r($Ie," \u2014 "),TH=n($Ie,"A",{href:!0});var I6t=s(TH);rhr=r(I6t,"UniSpeechSatForCTC"),I6t.forEach(t),thr=r($Ie," (UniSpeechSat model)"),$Ie.forEach(t),ahr=i(Be),MT=n(Be,"LI",{});var kIe=s(MT);ove=n(kIe,"STRONG",{});var q6t=s(ove);nhr=r(q6t,"wav2vec2"),q6t.forEach(t),shr=r(kIe," \u2014 "),MH=n(kIe,"A",{href:!0});var j6t=s(MH);lhr=r(j6t,"Wav2Vec2ForCTC"),j6t.forEach(t),ihr=r(kIe," (Wav2Vec2 model)"),kIe.forEach(t),dhr=i(Be),ET=n(Be,"LI",{});var SIe=s(ET);rve=n(SIe,"STRONG",{});var D6t=s(rve);chr=r(D6t,"wav2vec2-conformer"),D6t.forEach(t),fhr=r(SIe," \u2014 "),EH=n(SIe,"A",{href:!0});var G6t=s(EH);mhr=r(G6t,"Wav2Vec2ConformerForCTC"),G6t.forEach(t),ghr=r(SIe," (Wav2Vec2-Conformer model)"),SIe.forEach(t),hhr=i(Be),CT=n(Be,"LI",{});var RIe=s(CT);tve=n(RIe,"STRONG",{});var O6t=s(tve);phr=r(O6t,"wavlm"),O6t.forEach(t),_hr=r(RIe," \u2014 "),CH=n(RIe,"A",{href:!0});var V6t=s(CH);uhr=r(V6t,"WavLMForCTC"),V6t.forEach(t),bhr=r(RIe," (WavLM model)"),RIe.forEach(t),Be.forEach(t),vhr=i(Ea),wT=n(Ea,"P",{});var PIe=s(wT);Fhr=r(PIe,"The model is set in evaluation mode by default using "),ave=n(PIe,"CODE",{});var X6t=s(ave);Thr=r(X6t,"model.eval()"),X6t.forEach(t),Mhr=r(PIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nve=n(PIe,"CODE",{});var z6t=s(nve);Ehr=r(z6t,"model.train()"),z6t.forEach(t),PIe.forEach(t),Chr=i(Ea),T(AT.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),WXe=i(f),Id=n(f,"H2",{class:!0});var ZQe=s(Id);LT=n(ZQe,"A",{id:!0,class:!0,href:!0});var Q6t=s(LT);sve=n(Q6t,"SPAN",{});var W6t=s(sve);T(i9.$$.fragment,W6t),W6t.forEach(t),Q6t.forEach(t),whr=i(ZQe),lve=n(ZQe,"SPAN",{});var H6t=s(lve);Ahr=r(H6t,"AutoModelForSpeechSeq2Seq"),H6t.forEach(t),ZQe.forEach(t),HXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(d9.$$.fragment,vl),Lhr=i(vl),qd=n(vl,"P",{});var fte=s(qd);yhr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wH=n(fte,"A",{href:!0});var U6t=s(wH);xhr=r(U6t,"from_pretrained()"),U6t.forEach(t),$hr=r(fte," class method or the "),AH=n(fte,"A",{href:!0});var J6t=s(AH);khr=r(J6t,"from_config()"),J6t.forEach(t),Shr=r(fte,` class
method.`),fte.forEach(t),Rhr=i(vl),c9=n(vl,"P",{});var eWe=s(c9);Phr=r(eWe,"This class cannot be instantiated directly using "),ive=n(eWe,"CODE",{});var Y6t=s(ive);Bhr=r(Y6t,"__init__()"),Y6t.forEach(t),Nhr=r(eWe," (throws an error)."),eWe.forEach(t),Ihr=i(vl),wt=n(vl,"DIV",{class:!0});var VA=s(wt);T(f9.$$.fragment,VA),qhr=i(VA),dve=n(VA,"P",{});var K6t=s(dve);jhr=r(K6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),K6t.forEach(t),Dhr=i(VA),jd=n(VA,"P",{});var mte=s(jd);Ghr=r(mte,`Note:
Loading a model from its configuration file does `),cve=n(mte,"STRONG",{});var Z6t=s(cve);Ohr=r(Z6t,"not"),Z6t.forEach(t),Vhr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(mte,"A",{href:!0});var eLt=s(LH);Xhr=r(eLt,"from_pretrained()"),eLt.forEach(t),zhr=r(mte," to load the model weights."),mte.forEach(t),Qhr=i(VA),T(yT.$$.fragment,VA),VA.forEach(t),Whr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(m9.$$.fragment,Ca),Hhr=i(Ca),fve=n(Ca,"P",{});var oLt=s(fve);Uhr=r(oLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oLt.forEach(t),Jhr=i(Ca),Za=n(Ca,"P",{});var XA=s(Za);Yhr=r(XA,"The model class to instantiate is selected based on the "),mve=n(XA,"CODE",{});var rLt=s(mve);Khr=r(rLt,"model_type"),rLt.forEach(t),Zhr=r(XA,` property of the config object (either
passed as an argument or loaded from `),gve=n(XA,"CODE",{});var tLt=s(gve);epr=r(tLt,"pretrained_model_name_or_path"),tLt.forEach(t),opr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(XA,"CODE",{});var aLt=s(hve);rpr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),tpr=r(XA,":"),XA.forEach(t),apr=i(Ca),g9=n(Ca,"UL",{});var oWe=s(g9);xT=n(oWe,"LI",{});var BIe=s(xT);pve=n(BIe,"STRONG",{});var nLt=s(pve);npr=r(nLt,"speech-encoder-decoder"),nLt.forEach(t),spr=r(BIe," \u2014 "),yH=n(BIe,"A",{href:!0});var sLt=s(yH);lpr=r(sLt,"SpeechEncoderDecoderModel"),sLt.forEach(t),ipr=r(BIe," (Speech Encoder decoder model)"),BIe.forEach(t),dpr=i(oWe),$T=n(oWe,"LI",{});var NIe=s($T);_ve=n(NIe,"STRONG",{});var lLt=s(_ve);cpr=r(lLt,"speech_to_text"),lLt.forEach(t),fpr=r(NIe," \u2014 "),xH=n(NIe,"A",{href:!0});var iLt=s(xH);mpr=r(iLt,"Speech2TextForConditionalGeneration"),iLt.forEach(t),gpr=r(NIe," (Speech2Text model)"),NIe.forEach(t),oWe.forEach(t),hpr=i(Ca),kT=n(Ca,"P",{});var IIe=s(kT);ppr=r(IIe,"The model is set in evaluation mode by default using "),uve=n(IIe,"CODE",{});var dLt=s(uve);_pr=r(dLt,"model.eval()"),dLt.forEach(t),upr=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bve=n(IIe,"CODE",{});var cLt=s(bve);bpr=r(cLt,"model.train()"),cLt.forEach(t),IIe.forEach(t),vpr=i(Ca),T(ST.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),UXe=i(f),Dd=n(f,"H2",{class:!0});var rWe=s(Dd);RT=n(rWe,"A",{id:!0,class:!0,href:!0});var fLt=s(RT);vve=n(fLt,"SPAN",{});var mLt=s(vve);T(h9.$$.fragment,mLt),mLt.forEach(t),fLt.forEach(t),Fpr=i(rWe),Fve=n(rWe,"SPAN",{});var gLt=s(Fve);Tpr=r(gLt,"AutoModelForAudioXVector"),gLt.forEach(t),rWe.forEach(t),JXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(p9.$$.fragment,Fl),Mpr=i(Fl),Gd=n(Fl,"P",{});var gte=s(Gd);Epr=r(gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$H=n(gte,"A",{href:!0});var hLt=s($H);Cpr=r(hLt,"from_pretrained()"),hLt.forEach(t),wpr=r(gte," class method or the "),kH=n(gte,"A",{href:!0});var pLt=s(kH);Apr=r(pLt,"from_config()"),pLt.forEach(t),Lpr=r(gte,` class
method.`),gte.forEach(t),ypr=i(Fl),_9=n(Fl,"P",{});var tWe=s(_9);xpr=r(tWe,"This class cannot be instantiated directly using "),Tve=n(tWe,"CODE",{});var _Lt=s(Tve);$pr=r(_Lt,"__init__()"),_Lt.forEach(t),kpr=r(tWe," (throws an error)."),tWe.forEach(t),Spr=i(Fl),At=n(Fl,"DIV",{class:!0});var zA=s(At);T(u9.$$.fragment,zA),Rpr=i(zA),Mve=n(zA,"P",{});var uLt=s(Mve);Ppr=r(uLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),uLt.forEach(t),Bpr=i(zA),Od=n(zA,"P",{});var hte=s(Od);Npr=r(hte,`Note:
Loading a model from its configuration file does `),Eve=n(hte,"STRONG",{});var bLt=s(Eve);Ipr=r(bLt,"not"),bLt.forEach(t),qpr=r(hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(hte,"A",{href:!0});var vLt=s(SH);jpr=r(vLt,"from_pretrained()"),vLt.forEach(t),Dpr=r(hte," to load the model weights."),hte.forEach(t),Gpr=i(zA),T(PT.$$.fragment,zA),zA.forEach(t),Opr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(b9.$$.fragment,wa),Vpr=i(wa),Cve=n(wa,"P",{});var FLt=s(Cve);Xpr=r(FLt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),FLt.forEach(t),zpr=i(wa),en=n(wa,"P",{});var QA=s(en);Qpr=r(QA,"The model class to instantiate is selected based on the "),wve=n(QA,"CODE",{});var TLt=s(wve);Wpr=r(TLt,"model_type"),TLt.forEach(t),Hpr=r(QA,` property of the config object (either
passed as an argument or loaded from `),Ave=n(QA,"CODE",{});var MLt=s(Ave);Upr=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),Jpr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(QA,"CODE",{});var ELt=s(Lve);Ypr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),Kpr=r(QA,":"),QA.forEach(t),Zpr=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);BT=n(Tl,"LI",{});var qIe=s(BT);yve=n(qIe,"STRONG",{});var CLt=s(yve);e_r=r(CLt,"data2vec-audio"),CLt.forEach(t),o_r=r(qIe," \u2014 "),RH=n(qIe,"A",{href:!0});var wLt=s(RH);r_r=r(wLt,"Data2VecAudioForXVector"),wLt.forEach(t),t_r=r(qIe," (Data2VecAudio model)"),qIe.forEach(t),a_r=i(Tl),NT=n(Tl,"LI",{});var jIe=s(NT);xve=n(jIe,"STRONG",{});var ALt=s(xve);n_r=r(ALt,"unispeech-sat"),ALt.forEach(t),s_r=r(jIe," \u2014 "),PH=n(jIe,"A",{href:!0});var LLt=s(PH);l_r=r(LLt,"UniSpeechSatForXVector"),LLt.forEach(t),i_r=r(jIe," (UniSpeechSat model)"),jIe.forEach(t),d_r=i(Tl),IT=n(Tl,"LI",{});var DIe=s(IT);$ve=n(DIe,"STRONG",{});var yLt=s($ve);c_r=r(yLt,"wav2vec2"),yLt.forEach(t),f_r=r(DIe," \u2014 "),BH=n(DIe,"A",{href:!0});var xLt=s(BH);m_r=r(xLt,"Wav2Vec2ForXVector"),xLt.forEach(t),g_r=r(DIe," (Wav2Vec2 model)"),DIe.forEach(t),h_r=i(Tl),qT=n(Tl,"LI",{});var GIe=s(qT);kve=n(GIe,"STRONG",{});var $Lt=s(kve);p_r=r($Lt,"wav2vec2-conformer"),$Lt.forEach(t),__r=r(GIe," \u2014 "),NH=n(GIe,"A",{href:!0});var kLt=s(NH);u_r=r(kLt,"Wav2Vec2ConformerForXVector"),kLt.forEach(t),b_r=r(GIe," (Wav2Vec2-Conformer model)"),GIe.forEach(t),v_r=i(Tl),jT=n(Tl,"LI",{});var OIe=s(jT);Sve=n(OIe,"STRONG",{});var SLt=s(Sve);F_r=r(SLt,"wavlm"),SLt.forEach(t),T_r=r(OIe," \u2014 "),IH=n(OIe,"A",{href:!0});var RLt=s(IH);M_r=r(RLt,"WavLMForXVector"),RLt.forEach(t),E_r=r(OIe," (WavLM model)"),OIe.forEach(t),Tl.forEach(t),C_r=i(wa),DT=n(wa,"P",{});var VIe=s(DT);w_r=r(VIe,"The model is set in evaluation mode by default using "),Rve=n(VIe,"CODE",{});var PLt=s(Rve);A_r=r(PLt,"model.eval()"),PLt.forEach(t),L_r=r(VIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(VIe,"CODE",{});var BLt=s(Pve);y_r=r(BLt,"model.train()"),BLt.forEach(t),VIe.forEach(t),x_r=i(wa),T(GT.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),YXe=i(f),Vd=n(f,"H2",{class:!0});var aWe=s(Vd);OT=n(aWe,"A",{id:!0,class:!0,href:!0});var NLt=s(OT);Bve=n(NLt,"SPAN",{});var ILt=s(Bve);T(v9.$$.fragment,ILt),ILt.forEach(t),NLt.forEach(t),$_r=i(aWe),Nve=n(aWe,"SPAN",{});var qLt=s(Nve);k_r=r(qLt,"AutoModelForMaskedImageModeling"),qLt.forEach(t),aWe.forEach(t),KXe=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(F9.$$.fragment,Ml),S_r=i(Ml),Xd=n(Ml,"P",{});var pte=s(Xd);R_r=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qH=n(pte,"A",{href:!0});var jLt=s(qH);P_r=r(jLt,"from_pretrained()"),jLt.forEach(t),B_r=r(pte," class method or the "),jH=n(pte,"A",{href:!0});var DLt=s(jH);N_r=r(DLt,"from_config()"),DLt.forEach(t),I_r=r(pte,` class
method.`),pte.forEach(t),q_r=i(Ml),T9=n(Ml,"P",{});var nWe=s(T9);j_r=r(nWe,"This class cannot be instantiated directly using "),Ive=n(nWe,"CODE",{});var GLt=s(Ive);D_r=r(GLt,"__init__()"),GLt.forEach(t),G_r=r(nWe," (throws an error)."),nWe.forEach(t),O_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var WA=s(Lt);T(M9.$$.fragment,WA),V_r=i(WA),qve=n(WA,"P",{});var OLt=s(qve);X_r=r(OLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),OLt.forEach(t),z_r=i(WA),zd=n(WA,"P",{});var _te=s(zd);Q_r=r(_te,`Note:
Loading a model from its configuration file does `),jve=n(_te,"STRONG",{});var VLt=s(jve);W_r=r(VLt,"not"),VLt.forEach(t),H_r=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(_te,"A",{href:!0});var XLt=s(DH);U_r=r(XLt,"from_pretrained()"),XLt.forEach(t),J_r=r(_te," to load the model weights."),_te.forEach(t),Y_r=i(WA),T(VT.$$.fragment,WA),WA.forEach(t),K_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(E9.$$.fragment,Aa),Z_r=i(Aa),Dve=n(Aa,"P",{});var zLt=s(Dve);eur=r(zLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),zLt.forEach(t),our=i(Aa),on=n(Aa,"P",{});var HA=s(on);rur=r(HA,"The model class to instantiate is selected based on the "),Gve=n(HA,"CODE",{});var QLt=s(Gve);tur=r(QLt,"model_type"),QLt.forEach(t),aur=r(HA,` property of the config object (either
passed as an argument or loaded from `),Ove=n(HA,"CODE",{});var WLt=s(Ove);nur=r(WLt,"pretrained_model_name_or_path"),WLt.forEach(t),sur=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(HA,"CODE",{});var HLt=s(Vve);lur=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),iur=r(HA,":"),HA.forEach(t),dur=i(Aa),Qd=n(Aa,"UL",{});var ute=s(Qd);XT=n(ute,"LI",{});var XIe=s(XT);Xve=n(XIe,"STRONG",{});var ULt=s(Xve);cur=r(ULt,"deit"),ULt.forEach(t),fur=r(XIe," \u2014 "),GH=n(XIe,"A",{href:!0});var JLt=s(GH);mur=r(JLt,"DeiTForMaskedImageModeling"),JLt.forEach(t),gur=r(XIe," (DeiT model)"),XIe.forEach(t),hur=i(ute),zT=n(ute,"LI",{});var zIe=s(zT);zve=n(zIe,"STRONG",{});var YLt=s(zve);pur=r(YLt,"swin"),YLt.forEach(t),_ur=r(zIe," \u2014 "),OH=n(zIe,"A",{href:!0});var KLt=s(OH);uur=r(KLt,"SwinForMaskedImageModeling"),KLt.forEach(t),bur=r(zIe," (Swin Transformer model)"),zIe.forEach(t),vur=i(ute),QT=n(ute,"LI",{});var QIe=s(QT);Qve=n(QIe,"STRONG",{});var ZLt=s(Qve);Fur=r(ZLt,"vit"),ZLt.forEach(t),Tur=r(QIe," \u2014 "),VH=n(QIe,"A",{href:!0});var eyt=s(VH);Mur=r(eyt,"ViTForMaskedImageModeling"),eyt.forEach(t),Eur=r(QIe," (ViT model)"),QIe.forEach(t),ute.forEach(t),Cur=i(Aa),WT=n(Aa,"P",{});var WIe=s(WT);wur=r(WIe,"The model is set in evaluation mode by default using "),Wve=n(WIe,"CODE",{});var oyt=s(Wve);Aur=r(oyt,"model.eval()"),oyt.forEach(t),Lur=r(WIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hve=n(WIe,"CODE",{});var ryt=s(Hve);yur=r(ryt,"model.train()"),ryt.forEach(t),WIe.forEach(t),xur=i(Aa),T(HT.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),ZXe=i(f),Wd=n(f,"H2",{class:!0});var sWe=s(Wd);UT=n(sWe,"A",{id:!0,class:!0,href:!0});var tyt=s(UT);Uve=n(tyt,"SPAN",{});var ayt=s(Uve);T(C9.$$.fragment,ayt),ayt.forEach(t),tyt.forEach(t),$ur=i(sWe),Jve=n(sWe,"SPAN",{});var nyt=s(Jve);kur=r(nyt,"AutoModelForObjectDetection"),nyt.forEach(t),sWe.forEach(t),eze=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(w9.$$.fragment,El),Sur=i(El),Hd=n(El,"P",{});var bte=s(Hd);Rur=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XH=n(bte,"A",{href:!0});var syt=s(XH);Pur=r(syt,"from_pretrained()"),syt.forEach(t),Bur=r(bte," class method or the "),zH=n(bte,"A",{href:!0});var lyt=s(zH);Nur=r(lyt,"from_config()"),lyt.forEach(t),Iur=r(bte,` class
method.`),bte.forEach(t),qur=i(El),A9=n(El,"P",{});var lWe=s(A9);jur=r(lWe,"This class cannot be instantiated directly using "),Yve=n(lWe,"CODE",{});var iyt=s(Yve);Dur=r(iyt,"__init__()"),iyt.forEach(t),Gur=r(lWe," (throws an error)."),lWe.forEach(t),Our=i(El),yt=n(El,"DIV",{class:!0});var UA=s(yt);T(L9.$$.fragment,UA),Vur=i(UA),Kve=n(UA,"P",{});var dyt=s(Kve);Xur=r(dyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),dyt.forEach(t),zur=i(UA),Ud=n(UA,"P",{});var vte=s(Ud);Qur=r(vte,`Note:
Loading a model from its configuration file does `),Zve=n(vte,"STRONG",{});var cyt=s(Zve);Wur=r(cyt,"not"),cyt.forEach(t),Hur=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(vte,"A",{href:!0});var fyt=s(QH);Uur=r(fyt,"from_pretrained()"),fyt.forEach(t),Jur=r(vte," to load the model weights."),vte.forEach(t),Yur=i(UA),T(JT.$$.fragment,UA),UA.forEach(t),Kur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(y9.$$.fragment,La),Zur=i(La),e5e=n(La,"P",{});var myt=s(e5e);e1r=r(myt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),myt.forEach(t),o1r=i(La),rn=n(La,"P",{});var JA=s(rn);r1r=r(JA,"The model class to instantiate is selected based on the "),o5e=n(JA,"CODE",{});var gyt=s(o5e);t1r=r(gyt,"model_type"),gyt.forEach(t),a1r=r(JA,` property of the config object (either
passed as an argument or loaded from `),r5e=n(JA,"CODE",{});var hyt=s(r5e);n1r=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),s1r=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(JA,"CODE",{});var pyt=s(t5e);l1r=r(pyt,"pretrained_model_name_or_path"),pyt.forEach(t),i1r=r(JA,":"),JA.forEach(t),d1r=i(La),x9=n(La,"UL",{});var iWe=s(x9);YT=n(iWe,"LI",{});var HIe=s(YT);a5e=n(HIe,"STRONG",{});var _yt=s(a5e);c1r=r(_yt,"detr"),_yt.forEach(t),f1r=r(HIe," \u2014 "),WH=n(HIe,"A",{href:!0});var uyt=s(WH);m1r=r(uyt,"DetrForObjectDetection"),uyt.forEach(t),g1r=r(HIe," (DETR model)"),HIe.forEach(t),h1r=i(iWe),KT=n(iWe,"LI",{});var UIe=s(KT);n5e=n(UIe,"STRONG",{});var byt=s(n5e);p1r=r(byt,"yolos"),byt.forEach(t),_1r=r(UIe," \u2014 "),HH=n(UIe,"A",{href:!0});var vyt=s(HH);u1r=r(vyt,"YolosForObjectDetection"),vyt.forEach(t),b1r=r(UIe," (YOLOS model)"),UIe.forEach(t),iWe.forEach(t),v1r=i(La),ZT=n(La,"P",{});var JIe=s(ZT);F1r=r(JIe,"The model is set in evaluation mode by default using "),s5e=n(JIe,"CODE",{});var Fyt=s(s5e);T1r=r(Fyt,"model.eval()"),Fyt.forEach(t),M1r=r(JIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l5e=n(JIe,"CODE",{});var Tyt=s(l5e);E1r=r(Tyt,"model.train()"),Tyt.forEach(t),JIe.forEach(t),C1r=i(La),T(e7.$$.fragment,La),La.forEach(t),El.forEach(t),oze=i(f),Jd=n(f,"H2",{class:!0});var dWe=s(Jd);o7=n(dWe,"A",{id:!0,class:!0,href:!0});var Myt=s(o7);i5e=n(Myt,"SPAN",{});var Eyt=s(i5e);T($9.$$.fragment,Eyt),Eyt.forEach(t),Myt.forEach(t),w1r=i(dWe),d5e=n(dWe,"SPAN",{});var Cyt=s(d5e);A1r=r(Cyt,"AutoModelForImageSegmentation"),Cyt.forEach(t),dWe.forEach(t),rze=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(k9.$$.fragment,Cl),L1r=i(Cl),Yd=n(Cl,"P",{});var Fte=s(Yd);y1r=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UH=n(Fte,"A",{href:!0});var wyt=s(UH);x1r=r(wyt,"from_pretrained()"),wyt.forEach(t),$1r=r(Fte," class method or the "),JH=n(Fte,"A",{href:!0});var Ayt=s(JH);k1r=r(Ayt,"from_config()"),Ayt.forEach(t),S1r=r(Fte,` class
method.`),Fte.forEach(t),R1r=i(Cl),S9=n(Cl,"P",{});var cWe=s(S9);P1r=r(cWe,"This class cannot be instantiated directly using "),c5e=n(cWe,"CODE",{});var Lyt=s(c5e);B1r=r(Lyt,"__init__()"),Lyt.forEach(t),N1r=r(cWe," (throws an error)."),cWe.forEach(t),I1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var YA=s(xt);T(R9.$$.fragment,YA),q1r=i(YA),f5e=n(YA,"P",{});var yyt=s(f5e);j1r=r(yyt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),yyt.forEach(t),D1r=i(YA),Kd=n(YA,"P",{});var Tte=s(Kd);G1r=r(Tte,`Note:
Loading a model from its configuration file does `),m5e=n(Tte,"STRONG",{});var xyt=s(m5e);O1r=r(xyt,"not"),xyt.forEach(t),V1r=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Tte,"A",{href:!0});var $yt=s(YH);X1r=r($yt,"from_pretrained()"),$yt.forEach(t),z1r=r(Tte," to load the model weights."),Tte.forEach(t),Q1r=i(YA),T(r7.$$.fragment,YA),YA.forEach(t),W1r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(P9.$$.fragment,ya),H1r=i(ya),g5e=n(ya,"P",{});var kyt=s(g5e);U1r=r(kyt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),kyt.forEach(t),J1r=i(ya),tn=n(ya,"P",{});var KA=s(tn);Y1r=r(KA,"The model class to instantiate is selected based on the "),h5e=n(KA,"CODE",{});var Syt=s(h5e);K1r=r(Syt,"model_type"),Syt.forEach(t),Z1r=r(KA,` property of the config object (either
passed as an argument or loaded from `),p5e=n(KA,"CODE",{});var Ryt=s(p5e);e4r=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),o4r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(KA,"CODE",{});var Pyt=s(_5e);r4r=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),t4r=r(KA,":"),KA.forEach(t),a4r=i(ya),u5e=n(ya,"UL",{});var Byt=s(u5e);t7=n(Byt,"LI",{});var YIe=s(t7);b5e=n(YIe,"STRONG",{});var Nyt=s(b5e);n4r=r(Nyt,"detr"),Nyt.forEach(t),s4r=r(YIe," \u2014 "),KH=n(YIe,"A",{href:!0});var Iyt=s(KH);l4r=r(Iyt,"DetrForSegmentation"),Iyt.forEach(t),i4r=r(YIe," (DETR model)"),YIe.forEach(t),Byt.forEach(t),d4r=i(ya),a7=n(ya,"P",{});var KIe=s(a7);c4r=r(KIe,"The model is set in evaluation mode by default using "),v5e=n(KIe,"CODE",{});var qyt=s(v5e);f4r=r(qyt,"model.eval()"),qyt.forEach(t),m4r=r(KIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F5e=n(KIe,"CODE",{});var jyt=s(F5e);g4r=r(jyt,"model.train()"),jyt.forEach(t),KIe.forEach(t),h4r=i(ya),T(n7.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),tze=i(f),Zd=n(f,"H2",{class:!0});var fWe=s(Zd);s7=n(fWe,"A",{id:!0,class:!0,href:!0});var Dyt=s(s7);T5e=n(Dyt,"SPAN",{});var Gyt=s(T5e);T(B9.$$.fragment,Gyt),Gyt.forEach(t),Dyt.forEach(t),p4r=i(fWe),M5e=n(fWe,"SPAN",{});var Oyt=s(M5e);_4r=r(Oyt,"AutoModelForSemanticSegmentation"),Oyt.forEach(t),fWe.forEach(t),aze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(N9.$$.fragment,wl),u4r=i(wl),ec=n(wl,"P",{});var Mte=s(ec);b4r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZH=n(Mte,"A",{href:!0});var Vyt=s(ZH);v4r=r(Vyt,"from_pretrained()"),Vyt.forEach(t),F4r=r(Mte," class method or the "),eU=n(Mte,"A",{href:!0});var Xyt=s(eU);T4r=r(Xyt,"from_config()"),Xyt.forEach(t),M4r=r(Mte,` class
method.`),Mte.forEach(t),E4r=i(wl),I9=n(wl,"P",{});var mWe=s(I9);C4r=r(mWe,"This class cannot be instantiated directly using "),E5e=n(mWe,"CODE",{});var zyt=s(E5e);w4r=r(zyt,"__init__()"),zyt.forEach(t),A4r=r(mWe," (throws an error)."),mWe.forEach(t),L4r=i(wl),$t=n(wl,"DIV",{class:!0});var ZA=s($t);T(q9.$$.fragment,ZA),y4r=i(ZA),C5e=n(ZA,"P",{});var Qyt=s(C5e);x4r=r(Qyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qyt.forEach(t),$4r=i(ZA),oc=n(ZA,"P",{});var Ete=s(oc);k4r=r(Ete,`Note:
Loading a model from its configuration file does `),w5e=n(Ete,"STRONG",{});var Wyt=s(w5e);S4r=r(Wyt,"not"),Wyt.forEach(t),R4r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(Ete,"A",{href:!0});var Hyt=s(oU);P4r=r(Hyt,"from_pretrained()"),Hyt.forEach(t),B4r=r(Ete," to load the model weights."),Ete.forEach(t),N4r=i(ZA),T(l7.$$.fragment,ZA),ZA.forEach(t),I4r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(j9.$$.fragment,xa),q4r=i(xa),A5e=n(xa,"P",{});var Uyt=s(A5e);j4r=r(Uyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Uyt.forEach(t),D4r=i(xa),an=n(xa,"P",{});var e6=s(an);G4r=r(e6,"The model class to instantiate is selected based on the "),L5e=n(e6,"CODE",{});var Jyt=s(L5e);O4r=r(Jyt,"model_type"),Jyt.forEach(t),V4r=r(e6,` property of the config object (either
passed as an argument or loaded from `),y5e=n(e6,"CODE",{});var Yyt=s(y5e);X4r=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),z4r=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(e6,"CODE",{});var Kyt=s(x5e);Q4r=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),W4r=r(e6,":"),e6.forEach(t),H4r=i(xa),Zo=n(xa,"UL",{});var $a=s(Zo);i7=n($a,"LI",{});var ZIe=s(i7);$5e=n(ZIe,"STRONG",{});var Zyt=s($5e);U4r=r(Zyt,"beit"),Zyt.forEach(t),J4r=r(ZIe," \u2014 "),rU=n(ZIe,"A",{href:!0});var e9t=s(rU);Y4r=r(e9t,"BeitForSemanticSegmentation"),e9t.forEach(t),K4r=r(ZIe," (BEiT model)"),ZIe.forEach(t),Z4r=i($a),d7=n($a,"LI",{});var eqe=s(d7);k5e=n(eqe,"STRONG",{});var o9t=s(k5e);e2r=r(o9t,"data2vec-vision"),o9t.forEach(t),o2r=r(eqe," \u2014 "),tU=n(eqe,"A",{href:!0});var r9t=s(tU);r2r=r(r9t,"Data2VecVisionForSemanticSegmentation"),r9t.forEach(t),t2r=r(eqe," (Data2VecVision model)"),eqe.forEach(t),a2r=i($a),c7=n($a,"LI",{});var oqe=s(c7);S5e=n(oqe,"STRONG",{});var t9t=s(S5e);n2r=r(t9t,"dpt"),t9t.forEach(t),s2r=r(oqe," \u2014 "),aU=n(oqe,"A",{href:!0});var a9t=s(aU);l2r=r(a9t,"DPTForSemanticSegmentation"),a9t.forEach(t),i2r=r(oqe," (DPT model)"),oqe.forEach(t),d2r=i($a),f7=n($a,"LI",{});var rqe=s(f7);R5e=n(rqe,"STRONG",{});var n9t=s(R5e);c2r=r(n9t,"mobilenet_v2"),n9t.forEach(t),f2r=r(rqe," \u2014 "),nU=n(rqe,"A",{href:!0});var s9t=s(nU);m2r=r(s9t,"MobileNetV2ForSemanticSegmentation"),s9t.forEach(t),g2r=r(rqe," (MobileNetV2 model)"),rqe.forEach(t),h2r=i($a),m7=n($a,"LI",{});var tqe=s(m7);P5e=n(tqe,"STRONG",{});var l9t=s(P5e);p2r=r(l9t,"mobilevit"),l9t.forEach(t),_2r=r(tqe," \u2014 "),sU=n(tqe,"A",{href:!0});var i9t=s(sU);u2r=r(i9t,"MobileViTForSemanticSegmentation"),i9t.forEach(t),b2r=r(tqe," (MobileViT model)"),tqe.forEach(t),v2r=i($a),g7=n($a,"LI",{});var aqe=s(g7);B5e=n(aqe,"STRONG",{});var d9t=s(B5e);F2r=r(d9t,"segformer"),d9t.forEach(t),T2r=r(aqe," \u2014 "),lU=n(aqe,"A",{href:!0});var c9t=s(lU);M2r=r(c9t,"SegformerForSemanticSegmentation"),c9t.forEach(t),E2r=r(aqe," (SegFormer model)"),aqe.forEach(t),$a.forEach(t),C2r=i(xa),h7=n(xa,"P",{});var nqe=s(h7);w2r=r(nqe,"The model is set in evaluation mode by default using "),N5e=n(nqe,"CODE",{});var f9t=s(N5e);A2r=r(f9t,"model.eval()"),f9t.forEach(t),L2r=r(nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I5e=n(nqe,"CODE",{});var m9t=s(I5e);y2r=r(m9t,"model.train()"),m9t.forEach(t),nqe.forEach(t),x2r=i(xa),T(p7.$$.fragment,xa),xa.forEach(t),wl.forEach(t),nze=i(f),rc=n(f,"H2",{class:!0});var gWe=s(rc);_7=n(gWe,"A",{id:!0,class:!0,href:!0});var g9t=s(_7);q5e=n(g9t,"SPAN",{});var h9t=s(q5e);T(D9.$$.fragment,h9t),h9t.forEach(t),g9t.forEach(t),$2r=i(gWe),j5e=n(gWe,"SPAN",{});var p9t=s(j5e);k2r=r(p9t,"AutoModelForInstanceSegmentation"),p9t.forEach(t),gWe.forEach(t),sze=i(f),er=n(f,"DIV",{class:!0});var Al=s(er);T(G9.$$.fragment,Al),S2r=i(Al),tc=n(Al,"P",{});var Cte=s(tc);R2r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iU=n(Cte,"A",{href:!0});var _9t=s(iU);P2r=r(_9t,"from_pretrained()"),_9t.forEach(t),B2r=r(Cte," class method or the "),dU=n(Cte,"A",{href:!0});var u9t=s(dU);N2r=r(u9t,"from_config()"),u9t.forEach(t),I2r=r(Cte,` class
method.`),Cte.forEach(t),q2r=i(Al),O9=n(Al,"P",{});var hWe=s(O9);j2r=r(hWe,"This class cannot be instantiated directly using "),D5e=n(hWe,"CODE",{});var b9t=s(D5e);D2r=r(b9t,"__init__()"),b9t.forEach(t),G2r=r(hWe," (throws an error)."),hWe.forEach(t),O2r=i(Al),kt=n(Al,"DIV",{class:!0});var o6=s(kt);T(V9.$$.fragment,o6),V2r=i(o6),G5e=n(o6,"P",{});var v9t=s(G5e);X2r=r(v9t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),v9t.forEach(t),z2r=i(o6),ac=n(o6,"P",{});var wte=s(ac);Q2r=r(wte,`Note:
Loading a model from its configuration file does `),O5e=n(wte,"STRONG",{});var F9t=s(O5e);W2r=r(F9t,"not"),F9t.forEach(t),H2r=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(wte,"A",{href:!0});var T9t=s(cU);U2r=r(T9t,"from_pretrained()"),T9t.forEach(t),J2r=r(wte," to load the model weights."),wte.forEach(t),Y2r=i(o6),T(u7.$$.fragment,o6),o6.forEach(t),K2r=i(Al),Fo=n(Al,"DIV",{class:!0});var ka=s(Fo);T(X9.$$.fragment,ka),Z2r=i(ka),V5e=n(ka,"P",{});var M9t=s(V5e);ebr=r(M9t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),M9t.forEach(t),obr=i(ka),nn=n(ka,"P",{});var r6=s(nn);rbr=r(r6,"The model class to instantiate is selected based on the "),X5e=n(r6,"CODE",{});var E9t=s(X5e);tbr=r(E9t,"model_type"),E9t.forEach(t),abr=r(r6,` property of the config object (either
passed as an argument or loaded from `),z5e=n(r6,"CODE",{});var C9t=s(z5e);nbr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),sbr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q5e=n(r6,"CODE",{});var w9t=s(Q5e);lbr=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),ibr=r(r6,":"),r6.forEach(t),dbr=i(ka),W5e=n(ka,"UL",{});var A9t=s(W5e);b7=n(A9t,"LI",{});var sqe=s(b7);H5e=n(sqe,"STRONG",{});var L9t=s(H5e);cbr=r(L9t,"maskformer"),L9t.forEach(t),fbr=r(sqe," \u2014 "),fU=n(sqe,"A",{href:!0});var y9t=s(fU);mbr=r(y9t,"MaskFormerForInstanceSegmentation"),y9t.forEach(t),gbr=r(sqe," (MaskFormer model)"),sqe.forEach(t),A9t.forEach(t),hbr=i(ka),v7=n(ka,"P",{});var lqe=s(v7);pbr=r(lqe,"The model is set in evaluation mode by default using "),U5e=n(lqe,"CODE",{});var x9t=s(U5e);_br=r(x9t,"model.eval()"),x9t.forEach(t),ubr=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J5e=n(lqe,"CODE",{});var $9t=s(J5e);bbr=r($9t,"model.train()"),$9t.forEach(t),lqe.forEach(t),vbr=i(ka),T(F7.$$.fragment,ka),ka.forEach(t),Al.forEach(t),lze=i(f),nc=n(f,"H2",{class:!0});var pWe=s(nc);T7=n(pWe,"A",{id:!0,class:!0,href:!0});var k9t=s(T7);Y5e=n(k9t,"SPAN",{});var S9t=s(Y5e);T(z9.$$.fragment,S9t),S9t.forEach(t),k9t.forEach(t),Fbr=i(pWe),K5e=n(pWe,"SPAN",{});var R9t=s(K5e);Tbr=r(R9t,"TFAutoModel"),R9t.forEach(t),pWe.forEach(t),ize=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(Q9.$$.fragment,Ll),Mbr=i(Ll),sc=n(Ll,"P",{});var Ate=s(sc);Ebr=r(Ate,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mU=n(Ate,"A",{href:!0});var P9t=s(mU);Cbr=r(P9t,"from_pretrained()"),P9t.forEach(t),wbr=r(Ate," class method or the "),gU=n(Ate,"A",{href:!0});var B9t=s(gU);Abr=r(B9t,"from_config()"),B9t.forEach(t),Lbr=r(Ate,` class
method.`),Ate.forEach(t),ybr=i(Ll),W9=n(Ll,"P",{});var _We=s(W9);xbr=r(_We,"This class cannot be instantiated directly using "),Z5e=n(_We,"CODE",{});var N9t=s(Z5e);$br=r(N9t,"__init__()"),N9t.forEach(t),kbr=r(_We," (throws an error)."),_We.forEach(t),Sbr=i(Ll),St=n(Ll,"DIV",{class:!0});var t6=s(St);T(H9.$$.fragment,t6),Rbr=i(t6),eFe=n(t6,"P",{});var I9t=s(eFe);Pbr=r(I9t,"Instantiates one of the base model classes of the library from a configuration."),I9t.forEach(t),Bbr=i(t6),lc=n(t6,"P",{});var Lte=s(lc);Nbr=r(Lte,`Note:
Loading a model from its configuration file does `),oFe=n(Lte,"STRONG",{});var q9t=s(oFe);Ibr=r(q9t,"not"),q9t.forEach(t),qbr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(Lte,"A",{href:!0});var j9t=s(hU);jbr=r(j9t,"from_pretrained()"),j9t.forEach(t),Dbr=r(Lte," to load the model weights."),Lte.forEach(t),Gbr=i(t6),T(M7.$$.fragment,t6),t6.forEach(t),Obr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(U9.$$.fragment,yl),Vbr=i(yl),rFe=n(yl,"P",{});var D9t=s(rFe);Xbr=r(D9t,"Instantiate one of the base model classes of the library from a pretrained model."),D9t.forEach(t),zbr=i(yl),sn=n(yl,"P",{});var a6=s(sn);Qbr=r(a6,"The model class to instantiate is selected based on the "),tFe=n(a6,"CODE",{});var G9t=s(tFe);Wbr=r(G9t,"model_type"),G9t.forEach(t),Hbr=r(a6,` property of the config object (either
passed as an argument or loaded from `),aFe=n(a6,"CODE",{});var O9t=s(aFe);Ubr=r(O9t,"pretrained_model_name_or_path"),O9t.forEach(t),Jbr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(a6,"CODE",{});var V9t=s(nFe);Ybr=r(V9t,"pretrained_model_name_or_path"),V9t.forEach(t),Kbr=r(a6,":"),a6.forEach(t),Zbr=i(yl),j=n(yl,"UL",{});var D=s(j);E7=n(D,"LI",{});var iqe=s(E7);sFe=n(iqe,"STRONG",{});var X9t=s(sFe);evr=r(X9t,"albert"),X9t.forEach(t),ovr=r(iqe," \u2014 "),pU=n(iqe,"A",{href:!0});var z9t=s(pU);rvr=r(z9t,"TFAlbertModel"),z9t.forEach(t),tvr=r(iqe," (ALBERT model)"),iqe.forEach(t),avr=i(D),C7=n(D,"LI",{});var dqe=s(C7);lFe=n(dqe,"STRONG",{});var Q9t=s(lFe);nvr=r(Q9t,"bart"),Q9t.forEach(t),svr=r(dqe," \u2014 "),_U=n(dqe,"A",{href:!0});var W9t=s(_U);lvr=r(W9t,"TFBartModel"),W9t.forEach(t),ivr=r(dqe," (BART model)"),dqe.forEach(t),dvr=i(D),w7=n(D,"LI",{});var cqe=s(w7);iFe=n(cqe,"STRONG",{});var H9t=s(iFe);cvr=r(H9t,"bert"),H9t.forEach(t),fvr=r(cqe," \u2014 "),uU=n(cqe,"A",{href:!0});var U9t=s(uU);mvr=r(U9t,"TFBertModel"),U9t.forEach(t),gvr=r(cqe," (BERT model)"),cqe.forEach(t),hvr=i(D),A7=n(D,"LI",{});var fqe=s(A7);dFe=n(fqe,"STRONG",{});var J9t=s(dFe);pvr=r(J9t,"blenderbot"),J9t.forEach(t),_vr=r(fqe," \u2014 "),bU=n(fqe,"A",{href:!0});var Y9t=s(bU);uvr=r(Y9t,"TFBlenderbotModel"),Y9t.forEach(t),bvr=r(fqe," (Blenderbot model)"),fqe.forEach(t),vvr=i(D),L7=n(D,"LI",{});var mqe=s(L7);cFe=n(mqe,"STRONG",{});var K9t=s(cFe);Fvr=r(K9t,"blenderbot-small"),K9t.forEach(t),Tvr=r(mqe," \u2014 "),vU=n(mqe,"A",{href:!0});var Z9t=s(vU);Mvr=r(Z9t,"TFBlenderbotSmallModel"),Z9t.forEach(t),Evr=r(mqe," (BlenderbotSmall model)"),mqe.forEach(t),Cvr=i(D),y7=n(D,"LI",{});var gqe=s(y7);fFe=n(gqe,"STRONG",{});var ext=s(fFe);wvr=r(ext,"camembert"),ext.forEach(t),Avr=r(gqe," \u2014 "),FU=n(gqe,"A",{href:!0});var oxt=s(FU);Lvr=r(oxt,"TFCamembertModel"),oxt.forEach(t),yvr=r(gqe," (CamemBERT model)"),gqe.forEach(t),xvr=i(D),x7=n(D,"LI",{});var hqe=s(x7);mFe=n(hqe,"STRONG",{});var rxt=s(mFe);$vr=r(rxt,"clip"),rxt.forEach(t),kvr=r(hqe," \u2014 "),TU=n(hqe,"A",{href:!0});var txt=s(TU);Svr=r(txt,"TFCLIPModel"),txt.forEach(t),Rvr=r(hqe," (CLIP model)"),hqe.forEach(t),Pvr=i(D),$7=n(D,"LI",{});var pqe=s($7);gFe=n(pqe,"STRONG",{});var axt=s(gFe);Bvr=r(axt,"convbert"),axt.forEach(t),Nvr=r(pqe," \u2014 "),MU=n(pqe,"A",{href:!0});var nxt=s(MU);Ivr=r(nxt,"TFConvBertModel"),nxt.forEach(t),qvr=r(pqe," (ConvBERT model)"),pqe.forEach(t),jvr=i(D),k7=n(D,"LI",{});var _qe=s(k7);hFe=n(_qe,"STRONG",{});var sxt=s(hFe);Dvr=r(sxt,"convnext"),sxt.forEach(t),Gvr=r(_qe," \u2014 "),EU=n(_qe,"A",{href:!0});var lxt=s(EU);Ovr=r(lxt,"TFConvNextModel"),lxt.forEach(t),Vvr=r(_qe," (ConvNeXT model)"),_qe.forEach(t),Xvr=i(D),S7=n(D,"LI",{});var uqe=s(S7);pFe=n(uqe,"STRONG",{});var ixt=s(pFe);zvr=r(ixt,"ctrl"),ixt.forEach(t),Qvr=r(uqe," \u2014 "),CU=n(uqe,"A",{href:!0});var dxt=s(CU);Wvr=r(dxt,"TFCTRLModel"),dxt.forEach(t),Hvr=r(uqe," (CTRL model)"),uqe.forEach(t),Uvr=i(D),R7=n(D,"LI",{});var bqe=s(R7);_Fe=n(bqe,"STRONG",{});var cxt=s(_Fe);Jvr=r(cxt,"data2vec-vision"),cxt.forEach(t),Yvr=r(bqe," \u2014 "),wU=n(bqe,"A",{href:!0});var fxt=s(wU);Kvr=r(fxt,"TFData2VecVisionModel"),fxt.forEach(t),Zvr=r(bqe," (Data2VecVision model)"),bqe.forEach(t),e5r=i(D),P7=n(D,"LI",{});var vqe=s(P7);uFe=n(vqe,"STRONG",{});var mxt=s(uFe);o5r=r(mxt,"deberta"),mxt.forEach(t),r5r=r(vqe," \u2014 "),AU=n(vqe,"A",{href:!0});var gxt=s(AU);t5r=r(gxt,"TFDebertaModel"),gxt.forEach(t),a5r=r(vqe," (DeBERTa model)"),vqe.forEach(t),n5r=i(D),B7=n(D,"LI",{});var Fqe=s(B7);bFe=n(Fqe,"STRONG",{});var hxt=s(bFe);s5r=r(hxt,"deberta-v2"),hxt.forEach(t),l5r=r(Fqe," \u2014 "),LU=n(Fqe,"A",{href:!0});var pxt=s(LU);i5r=r(pxt,"TFDebertaV2Model"),pxt.forEach(t),d5r=r(Fqe," (DeBERTa-v2 model)"),Fqe.forEach(t),c5r=i(D),N7=n(D,"LI",{});var Tqe=s(N7);vFe=n(Tqe,"STRONG",{});var _xt=s(vFe);f5r=r(_xt,"distilbert"),_xt.forEach(t),m5r=r(Tqe," \u2014 "),yU=n(Tqe,"A",{href:!0});var uxt=s(yU);g5r=r(uxt,"TFDistilBertModel"),uxt.forEach(t),h5r=r(Tqe," (DistilBERT model)"),Tqe.forEach(t),p5r=i(D),I7=n(D,"LI",{});var Mqe=s(I7);FFe=n(Mqe,"STRONG",{});var bxt=s(FFe);_5r=r(bxt,"dpr"),bxt.forEach(t),u5r=r(Mqe," \u2014 "),xU=n(Mqe,"A",{href:!0});var vxt=s(xU);b5r=r(vxt,"TFDPRQuestionEncoder"),vxt.forEach(t),v5r=r(Mqe," (DPR model)"),Mqe.forEach(t),F5r=i(D),q7=n(D,"LI",{});var Eqe=s(q7);TFe=n(Eqe,"STRONG",{});var Fxt=s(TFe);T5r=r(Fxt,"electra"),Fxt.forEach(t),M5r=r(Eqe," \u2014 "),$U=n(Eqe,"A",{href:!0});var Txt=s($U);E5r=r(Txt,"TFElectraModel"),Txt.forEach(t),C5r=r(Eqe," (ELECTRA model)"),Eqe.forEach(t),w5r=i(D),j7=n(D,"LI",{});var Cqe=s(j7);MFe=n(Cqe,"STRONG",{});var Mxt=s(MFe);A5r=r(Mxt,"flaubert"),Mxt.forEach(t),L5r=r(Cqe," \u2014 "),kU=n(Cqe,"A",{href:!0});var Ext=s(kU);y5r=r(Ext,"TFFlaubertModel"),Ext.forEach(t),x5r=r(Cqe," (FlauBERT model)"),Cqe.forEach(t),$5r=i(D),Js=n(D,"LI",{});var PS=s(Js);EFe=n(PS,"STRONG",{});var Cxt=s(EFe);k5r=r(Cxt,"funnel"),Cxt.forEach(t),S5r=r(PS," \u2014 "),SU=n(PS,"A",{href:!0});var wxt=s(SU);R5r=r(wxt,"TFFunnelModel"),wxt.forEach(t),P5r=r(PS," or "),RU=n(PS,"A",{href:!0});var Axt=s(RU);B5r=r(Axt,"TFFunnelBaseModel"),Axt.forEach(t),N5r=r(PS," (Funnel Transformer model)"),PS.forEach(t),I5r=i(D),D7=n(D,"LI",{});var wqe=s(D7);CFe=n(wqe,"STRONG",{});var Lxt=s(CFe);q5r=r(Lxt,"gpt2"),Lxt.forEach(t),j5r=r(wqe," \u2014 "),PU=n(wqe,"A",{href:!0});var yxt=s(PU);D5r=r(yxt,"TFGPT2Model"),yxt.forEach(t),G5r=r(wqe," (OpenAI GPT-2 model)"),wqe.forEach(t),O5r=i(D),G7=n(D,"LI",{});var Aqe=s(G7);wFe=n(Aqe,"STRONG",{});var xxt=s(wFe);V5r=r(xxt,"gptj"),xxt.forEach(t),X5r=r(Aqe," \u2014 "),BU=n(Aqe,"A",{href:!0});var $xt=s(BU);z5r=r($xt,"TFGPTJModel"),$xt.forEach(t),Q5r=r(Aqe," (GPT-J model)"),Aqe.forEach(t),W5r=i(D),O7=n(D,"LI",{});var Lqe=s(O7);AFe=n(Lqe,"STRONG",{});var kxt=s(AFe);H5r=r(kxt,"hubert"),kxt.forEach(t),U5r=r(Lqe," \u2014 "),NU=n(Lqe,"A",{href:!0});var Sxt=s(NU);J5r=r(Sxt,"TFHubertModel"),Sxt.forEach(t),Y5r=r(Lqe," (Hubert model)"),Lqe.forEach(t),K5r=i(D),V7=n(D,"LI",{});var yqe=s(V7);LFe=n(yqe,"STRONG",{});var Rxt=s(LFe);Z5r=r(Rxt,"layoutlm"),Rxt.forEach(t),eFr=r(yqe," \u2014 "),IU=n(yqe,"A",{href:!0});var Pxt=s(IU);oFr=r(Pxt,"TFLayoutLMModel"),Pxt.forEach(t),rFr=r(yqe," (LayoutLM model)"),yqe.forEach(t),tFr=i(D),X7=n(D,"LI",{});var xqe=s(X7);yFe=n(xqe,"STRONG",{});var Bxt=s(yFe);aFr=r(Bxt,"led"),Bxt.forEach(t),nFr=r(xqe," \u2014 "),qU=n(xqe,"A",{href:!0});var Nxt=s(qU);sFr=r(Nxt,"TFLEDModel"),Nxt.forEach(t),lFr=r(xqe," (LED model)"),xqe.forEach(t),iFr=i(D),z7=n(D,"LI",{});var $qe=s(z7);xFe=n($qe,"STRONG",{});var Ixt=s(xFe);dFr=r(Ixt,"longformer"),Ixt.forEach(t),cFr=r($qe," \u2014 "),jU=n($qe,"A",{href:!0});var qxt=s(jU);fFr=r(qxt,"TFLongformerModel"),qxt.forEach(t),mFr=r($qe," (Longformer model)"),$qe.forEach(t),gFr=i(D),Q7=n(D,"LI",{});var kqe=s(Q7);$Fe=n(kqe,"STRONG",{});var jxt=s($Fe);hFr=r(jxt,"lxmert"),jxt.forEach(t),pFr=r(kqe," \u2014 "),DU=n(kqe,"A",{href:!0});var Dxt=s(DU);_Fr=r(Dxt,"TFLxmertModel"),Dxt.forEach(t),uFr=r(kqe," (LXMERT model)"),kqe.forEach(t),bFr=i(D),W7=n(D,"LI",{});var Sqe=s(W7);kFe=n(Sqe,"STRONG",{});var Gxt=s(kFe);vFr=r(Gxt,"marian"),Gxt.forEach(t),FFr=r(Sqe," \u2014 "),GU=n(Sqe,"A",{href:!0});var Oxt=s(GU);TFr=r(Oxt,"TFMarianModel"),Oxt.forEach(t),MFr=r(Sqe," (Marian model)"),Sqe.forEach(t),EFr=i(D),H7=n(D,"LI",{});var Rqe=s(H7);SFe=n(Rqe,"STRONG",{});var Vxt=s(SFe);CFr=r(Vxt,"mbart"),Vxt.forEach(t),wFr=r(Rqe," \u2014 "),OU=n(Rqe,"A",{href:!0});var Xxt=s(OU);AFr=r(Xxt,"TFMBartModel"),Xxt.forEach(t),LFr=r(Rqe," (mBART model)"),Rqe.forEach(t),yFr=i(D),U7=n(D,"LI",{});var Pqe=s(U7);RFe=n(Pqe,"STRONG",{});var zxt=s(RFe);xFr=r(zxt,"mobilebert"),zxt.forEach(t),$Fr=r(Pqe," \u2014 "),VU=n(Pqe,"A",{href:!0});var Qxt=s(VU);kFr=r(Qxt,"TFMobileBertModel"),Qxt.forEach(t),SFr=r(Pqe," (MobileBERT model)"),Pqe.forEach(t),RFr=i(D),J7=n(D,"LI",{});var Bqe=s(J7);PFe=n(Bqe,"STRONG",{});var Wxt=s(PFe);PFr=r(Wxt,"mpnet"),Wxt.forEach(t),BFr=r(Bqe," \u2014 "),XU=n(Bqe,"A",{href:!0});var Hxt=s(XU);NFr=r(Hxt,"TFMPNetModel"),Hxt.forEach(t),IFr=r(Bqe," (MPNet model)"),Bqe.forEach(t),qFr=i(D),Y7=n(D,"LI",{});var Nqe=s(Y7);BFe=n(Nqe,"STRONG",{});var Uxt=s(BFe);jFr=r(Uxt,"mt5"),Uxt.forEach(t),DFr=r(Nqe," \u2014 "),zU=n(Nqe,"A",{href:!0});var Jxt=s(zU);GFr=r(Jxt,"TFMT5Model"),Jxt.forEach(t),OFr=r(Nqe," (MT5 model)"),Nqe.forEach(t),VFr=i(D),K7=n(D,"LI",{});var Iqe=s(K7);NFe=n(Iqe,"STRONG",{});var Yxt=s(NFe);XFr=r(Yxt,"openai-gpt"),Yxt.forEach(t),zFr=r(Iqe," \u2014 "),QU=n(Iqe,"A",{href:!0});var Kxt=s(QU);QFr=r(Kxt,"TFOpenAIGPTModel"),Kxt.forEach(t),WFr=r(Iqe," (OpenAI GPT model)"),Iqe.forEach(t),HFr=i(D),Z7=n(D,"LI",{});var qqe=s(Z7);IFe=n(qqe,"STRONG",{});var Zxt=s(IFe);UFr=r(Zxt,"opt"),Zxt.forEach(t),JFr=r(qqe," \u2014 "),WU=n(qqe,"A",{href:!0});var e$t=s(WU);YFr=r(e$t,"TFOPTModel"),e$t.forEach(t),KFr=r(qqe," (OPT model)"),qqe.forEach(t),ZFr=i(D),e8=n(D,"LI",{});var jqe=s(e8);qFe=n(jqe,"STRONG",{});var o$t=s(qFe);eTr=r(o$t,"pegasus"),o$t.forEach(t),oTr=r(jqe," \u2014 "),HU=n(jqe,"A",{href:!0});var r$t=s(HU);rTr=r(r$t,"TFPegasusModel"),r$t.forEach(t),tTr=r(jqe," (Pegasus model)"),jqe.forEach(t),aTr=i(D),o8=n(D,"LI",{});var Dqe=s(o8);jFe=n(Dqe,"STRONG",{});var t$t=s(jFe);nTr=r(t$t,"regnet"),t$t.forEach(t),sTr=r(Dqe," \u2014 "),UU=n(Dqe,"A",{href:!0});var a$t=s(UU);lTr=r(a$t,"TFRegNetModel"),a$t.forEach(t),iTr=r(Dqe," (RegNet model)"),Dqe.forEach(t),dTr=i(D),r8=n(D,"LI",{});var Gqe=s(r8);DFe=n(Gqe,"STRONG",{});var n$t=s(DFe);cTr=r(n$t,"rembert"),n$t.forEach(t),fTr=r(Gqe," \u2014 "),JU=n(Gqe,"A",{href:!0});var s$t=s(JU);mTr=r(s$t,"TFRemBertModel"),s$t.forEach(t),gTr=r(Gqe," (RemBERT model)"),Gqe.forEach(t),hTr=i(D),t8=n(D,"LI",{});var Oqe=s(t8);GFe=n(Oqe,"STRONG",{});var l$t=s(GFe);pTr=r(l$t,"roberta"),l$t.forEach(t),_Tr=r(Oqe," \u2014 "),YU=n(Oqe,"A",{href:!0});var i$t=s(YU);uTr=r(i$t,"TFRobertaModel"),i$t.forEach(t),bTr=r(Oqe," (RoBERTa model)"),Oqe.forEach(t),vTr=i(D),a8=n(D,"LI",{});var Vqe=s(a8);OFe=n(Vqe,"STRONG",{});var d$t=s(OFe);FTr=r(d$t,"roformer"),d$t.forEach(t),TTr=r(Vqe," \u2014 "),KU=n(Vqe,"A",{href:!0});var c$t=s(KU);MTr=r(c$t,"TFRoFormerModel"),c$t.forEach(t),ETr=r(Vqe," (RoFormer model)"),Vqe.forEach(t),CTr=i(D),n8=n(D,"LI",{});var Xqe=s(n8);VFe=n(Xqe,"STRONG",{});var f$t=s(VFe);wTr=r(f$t,"speech_to_text"),f$t.forEach(t),ATr=r(Xqe," \u2014 "),ZU=n(Xqe,"A",{href:!0});var m$t=s(ZU);LTr=r(m$t,"TFSpeech2TextModel"),m$t.forEach(t),yTr=r(Xqe," (Speech2Text model)"),Xqe.forEach(t),xTr=i(D),s8=n(D,"LI",{});var zqe=s(s8);XFe=n(zqe,"STRONG",{});var g$t=s(XFe);$Tr=r(g$t,"swin"),g$t.forEach(t),kTr=r(zqe," \u2014 "),eJ=n(zqe,"A",{href:!0});var h$t=s(eJ);STr=r(h$t,"TFSwinModel"),h$t.forEach(t),RTr=r(zqe," (Swin Transformer model)"),zqe.forEach(t),PTr=i(D),l8=n(D,"LI",{});var Qqe=s(l8);zFe=n(Qqe,"STRONG",{});var p$t=s(zFe);BTr=r(p$t,"t5"),p$t.forEach(t),NTr=r(Qqe," \u2014 "),oJ=n(Qqe,"A",{href:!0});var _$t=s(oJ);ITr=r(_$t,"TFT5Model"),_$t.forEach(t),qTr=r(Qqe," (T5 model)"),Qqe.forEach(t),jTr=i(D),i8=n(D,"LI",{});var Wqe=s(i8);QFe=n(Wqe,"STRONG",{});var u$t=s(QFe);DTr=r(u$t,"tapas"),u$t.forEach(t),GTr=r(Wqe," \u2014 "),rJ=n(Wqe,"A",{href:!0});var b$t=s(rJ);OTr=r(b$t,"TFTapasModel"),b$t.forEach(t),VTr=r(Wqe," (TAPAS model)"),Wqe.forEach(t),XTr=i(D),d8=n(D,"LI",{});var Hqe=s(d8);WFe=n(Hqe,"STRONG",{});var v$t=s(WFe);zTr=r(v$t,"transfo-xl"),v$t.forEach(t),QTr=r(Hqe," \u2014 "),tJ=n(Hqe,"A",{href:!0});var F$t=s(tJ);WTr=r(F$t,"TFTransfoXLModel"),F$t.forEach(t),HTr=r(Hqe," (Transformer-XL model)"),Hqe.forEach(t),UTr=i(D),c8=n(D,"LI",{});var Uqe=s(c8);HFe=n(Uqe,"STRONG",{});var T$t=s(HFe);JTr=r(T$t,"vit"),T$t.forEach(t),YTr=r(Uqe," \u2014 "),aJ=n(Uqe,"A",{href:!0});var M$t=s(aJ);KTr=r(M$t,"TFViTModel"),M$t.forEach(t),ZTr=r(Uqe," (ViT model)"),Uqe.forEach(t),e7r=i(D),f8=n(D,"LI",{});var Jqe=s(f8);UFe=n(Jqe,"STRONG",{});var E$t=s(UFe);o7r=r(E$t,"vit_mae"),E$t.forEach(t),r7r=r(Jqe," \u2014 "),nJ=n(Jqe,"A",{href:!0});var C$t=s(nJ);t7r=r(C$t,"TFViTMAEModel"),C$t.forEach(t),a7r=r(Jqe," (ViTMAE model)"),Jqe.forEach(t),n7r=i(D),m8=n(D,"LI",{});var Yqe=s(m8);JFe=n(Yqe,"STRONG",{});var w$t=s(JFe);s7r=r(w$t,"wav2vec2"),w$t.forEach(t),l7r=r(Yqe," \u2014 "),sJ=n(Yqe,"A",{href:!0});var A$t=s(sJ);i7r=r(A$t,"TFWav2Vec2Model"),A$t.forEach(t),d7r=r(Yqe," (Wav2Vec2 model)"),Yqe.forEach(t),c7r=i(D),g8=n(D,"LI",{});var Kqe=s(g8);YFe=n(Kqe,"STRONG",{});var L$t=s(YFe);f7r=r(L$t,"xlm"),L$t.forEach(t),m7r=r(Kqe," \u2014 "),lJ=n(Kqe,"A",{href:!0});var y$t=s(lJ);g7r=r(y$t,"TFXLMModel"),y$t.forEach(t),h7r=r(Kqe," (XLM model)"),Kqe.forEach(t),p7r=i(D),h8=n(D,"LI",{});var Zqe=s(h8);KFe=n(Zqe,"STRONG",{});var x$t=s(KFe);_7r=r(x$t,"xlm-roberta"),x$t.forEach(t),u7r=r(Zqe," \u2014 "),iJ=n(Zqe,"A",{href:!0});var $$t=s(iJ);b7r=r($$t,"TFXLMRobertaModel"),$$t.forEach(t),v7r=r(Zqe," (XLM-RoBERTa model)"),Zqe.forEach(t),F7r=i(D),p8=n(D,"LI",{});var eje=s(p8);ZFe=n(eje,"STRONG",{});var k$t=s(ZFe);T7r=r(k$t,"xlnet"),k$t.forEach(t),M7r=r(eje," \u2014 "),dJ=n(eje,"A",{href:!0});var S$t=s(dJ);E7r=r(S$t,"TFXLNetModel"),S$t.forEach(t),C7r=r(eje," (XLNet model)"),eje.forEach(t),D.forEach(t),w7r=i(yl),T(_8.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),dze=i(f),ic=n(f,"H2",{class:!0});var uWe=s(ic);u8=n(uWe,"A",{id:!0,class:!0,href:!0});var R$t=s(u8);eTe=n(R$t,"SPAN",{});var P$t=s(eTe);T(J9.$$.fragment,P$t),P$t.forEach(t),R$t.forEach(t),A7r=i(uWe),oTe=n(uWe,"SPAN",{});var B$t=s(oTe);L7r=r(B$t,"TFAutoModelForPreTraining"),B$t.forEach(t),uWe.forEach(t),cze=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(Y9.$$.fragment,xl),y7r=i(xl),dc=n(xl,"P",{});var yte=s(dc);x7r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),cJ=n(yte,"A",{href:!0});var N$t=s(cJ);$7r=r(N$t,"from_pretrained()"),N$t.forEach(t),k7r=r(yte," class method or the "),fJ=n(yte,"A",{href:!0});var I$t=s(fJ);S7r=r(I$t,"from_config()"),I$t.forEach(t),R7r=r(yte,` class
method.`),yte.forEach(t),P7r=i(xl),K9=n(xl,"P",{});var bWe=s(K9);B7r=r(bWe,"This class cannot be instantiated directly using "),rTe=n(bWe,"CODE",{});var q$t=s(rTe);N7r=r(q$t,"__init__()"),q$t.forEach(t),I7r=r(bWe," (throws an error)."),bWe.forEach(t),q7r=i(xl),Rt=n(xl,"DIV",{class:!0});var n6=s(Rt);T(Z9.$$.fragment,n6),j7r=i(n6),tTe=n(n6,"P",{});var j$t=s(tTe);D7r=r(j$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),j$t.forEach(t),G7r=i(n6),cc=n(n6,"P",{});var xte=s(cc);O7r=r(xte,`Note:
Loading a model from its configuration file does `),aTe=n(xte,"STRONG",{});var D$t=s(aTe);V7r=r(D$t,"not"),D$t.forEach(t),X7r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(xte,"A",{href:!0});var G$t=s(mJ);z7r=r(G$t,"from_pretrained()"),G$t.forEach(t),Q7r=r(xte," to load the model weights."),xte.forEach(t),W7r=i(n6),T(b8.$$.fragment,n6),n6.forEach(t),H7r=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(ex.$$.fragment,$l),U7r=i($l),nTe=n($l,"P",{});var O$t=s(nTe);J7r=r(O$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),O$t.forEach(t),Y7r=i($l),ln=n($l,"P",{});var s6=s(ln);K7r=r(s6,"The model class to instantiate is selected based on the "),sTe=n(s6,"CODE",{});var V$t=s(sTe);Z7r=r(V$t,"model_type"),V$t.forEach(t),e8r=r(s6,` property of the config object (either
passed as an argument or loaded from `),lTe=n(s6,"CODE",{});var X$t=s(lTe);o8r=r(X$t,"pretrained_model_name_or_path"),X$t.forEach(t),r8r=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(s6,"CODE",{});var z$t=s(iTe);t8r=r(z$t,"pretrained_model_name_or_path"),z$t.forEach(t),a8r=r(s6,":"),s6.forEach(t),n8r=i($l),se=n($l,"UL",{});var le=s(se);v8=n(le,"LI",{});var oje=s(v8);dTe=n(oje,"STRONG",{});var Q$t=s(dTe);s8r=r(Q$t,"albert"),Q$t.forEach(t),l8r=r(oje," \u2014 "),gJ=n(oje,"A",{href:!0});var W$t=s(gJ);i8r=r(W$t,"TFAlbertForPreTraining"),W$t.forEach(t),d8r=r(oje," (ALBERT model)"),oje.forEach(t),c8r=i(le),F8=n(le,"LI",{});var rje=s(F8);cTe=n(rje,"STRONG",{});var H$t=s(cTe);f8r=r(H$t,"bart"),H$t.forEach(t),m8r=r(rje," \u2014 "),hJ=n(rje,"A",{href:!0});var U$t=s(hJ);g8r=r(U$t,"TFBartForConditionalGeneration"),U$t.forEach(t),h8r=r(rje," (BART model)"),rje.forEach(t),p8r=i(le),T8=n(le,"LI",{});var tje=s(T8);fTe=n(tje,"STRONG",{});var J$t=s(fTe);_8r=r(J$t,"bert"),J$t.forEach(t),u8r=r(tje," \u2014 "),pJ=n(tje,"A",{href:!0});var Y$t=s(pJ);b8r=r(Y$t,"TFBertForPreTraining"),Y$t.forEach(t),v8r=r(tje," (BERT model)"),tje.forEach(t),F8r=i(le),M8=n(le,"LI",{});var aje=s(M8);mTe=n(aje,"STRONG",{});var K$t=s(mTe);T8r=r(K$t,"camembert"),K$t.forEach(t),M8r=r(aje," \u2014 "),_J=n(aje,"A",{href:!0});var Z$t=s(_J);E8r=r(Z$t,"TFCamembertForMaskedLM"),Z$t.forEach(t),C8r=r(aje," (CamemBERT model)"),aje.forEach(t),w8r=i(le),E8=n(le,"LI",{});var nje=s(E8);gTe=n(nje,"STRONG",{});var ekt=s(gTe);A8r=r(ekt,"ctrl"),ekt.forEach(t),L8r=r(nje," \u2014 "),uJ=n(nje,"A",{href:!0});var okt=s(uJ);y8r=r(okt,"TFCTRLLMHeadModel"),okt.forEach(t),x8r=r(nje," (CTRL model)"),nje.forEach(t),$8r=i(le),C8=n(le,"LI",{});var sje=s(C8);hTe=n(sje,"STRONG",{});var rkt=s(hTe);k8r=r(rkt,"distilbert"),rkt.forEach(t),S8r=r(sje," \u2014 "),bJ=n(sje,"A",{href:!0});var tkt=s(bJ);R8r=r(tkt,"TFDistilBertForMaskedLM"),tkt.forEach(t),P8r=r(sje," (DistilBERT model)"),sje.forEach(t),B8r=i(le),w8=n(le,"LI",{});var lje=s(w8);pTe=n(lje,"STRONG",{});var akt=s(pTe);N8r=r(akt,"electra"),akt.forEach(t),I8r=r(lje," \u2014 "),vJ=n(lje,"A",{href:!0});var nkt=s(vJ);q8r=r(nkt,"TFElectraForPreTraining"),nkt.forEach(t),j8r=r(lje," (ELECTRA model)"),lje.forEach(t),D8r=i(le),A8=n(le,"LI",{});var ije=s(A8);_Te=n(ije,"STRONG",{});var skt=s(_Te);G8r=r(skt,"flaubert"),skt.forEach(t),O8r=r(ije," \u2014 "),FJ=n(ije,"A",{href:!0});var lkt=s(FJ);V8r=r(lkt,"TFFlaubertWithLMHeadModel"),lkt.forEach(t),X8r=r(ije," (FlauBERT model)"),ije.forEach(t),z8r=i(le),L8=n(le,"LI",{});var dje=s(L8);uTe=n(dje,"STRONG",{});var ikt=s(uTe);Q8r=r(ikt,"funnel"),ikt.forEach(t),W8r=r(dje," \u2014 "),TJ=n(dje,"A",{href:!0});var dkt=s(TJ);H8r=r(dkt,"TFFunnelForPreTraining"),dkt.forEach(t),U8r=r(dje," (Funnel Transformer model)"),dje.forEach(t),J8r=i(le),y8=n(le,"LI",{});var cje=s(y8);bTe=n(cje,"STRONG",{});var ckt=s(bTe);Y8r=r(ckt,"gpt2"),ckt.forEach(t),K8r=r(cje," \u2014 "),MJ=n(cje,"A",{href:!0});var fkt=s(MJ);Z8r=r(fkt,"TFGPT2LMHeadModel"),fkt.forEach(t),eMr=r(cje," (OpenAI GPT-2 model)"),cje.forEach(t),oMr=i(le),x8=n(le,"LI",{});var fje=s(x8);vTe=n(fje,"STRONG",{});var mkt=s(vTe);rMr=r(mkt,"layoutlm"),mkt.forEach(t),tMr=r(fje," \u2014 "),EJ=n(fje,"A",{href:!0});var gkt=s(EJ);aMr=r(gkt,"TFLayoutLMForMaskedLM"),gkt.forEach(t),nMr=r(fje," (LayoutLM model)"),fje.forEach(t),sMr=i(le),$8=n(le,"LI",{});var mje=s($8);FTe=n(mje,"STRONG",{});var hkt=s(FTe);lMr=r(hkt,"lxmert"),hkt.forEach(t),iMr=r(mje," \u2014 "),CJ=n(mje,"A",{href:!0});var pkt=s(CJ);dMr=r(pkt,"TFLxmertForPreTraining"),pkt.forEach(t),cMr=r(mje," (LXMERT model)"),mje.forEach(t),fMr=i(le),k8=n(le,"LI",{});var gje=s(k8);TTe=n(gje,"STRONG",{});var _kt=s(TTe);mMr=r(_kt,"mobilebert"),_kt.forEach(t),gMr=r(gje," \u2014 "),wJ=n(gje,"A",{href:!0});var ukt=s(wJ);hMr=r(ukt,"TFMobileBertForPreTraining"),ukt.forEach(t),pMr=r(gje," (MobileBERT model)"),gje.forEach(t),_Mr=i(le),S8=n(le,"LI",{});var hje=s(S8);MTe=n(hje,"STRONG",{});var bkt=s(MTe);uMr=r(bkt,"mpnet"),bkt.forEach(t),bMr=r(hje," \u2014 "),AJ=n(hje,"A",{href:!0});var vkt=s(AJ);vMr=r(vkt,"TFMPNetForMaskedLM"),vkt.forEach(t),FMr=r(hje," (MPNet model)"),hje.forEach(t),TMr=i(le),R8=n(le,"LI",{});var pje=s(R8);ETe=n(pje,"STRONG",{});var Fkt=s(ETe);MMr=r(Fkt,"openai-gpt"),Fkt.forEach(t),EMr=r(pje," \u2014 "),LJ=n(pje,"A",{href:!0});var Tkt=s(LJ);CMr=r(Tkt,"TFOpenAIGPTLMHeadModel"),Tkt.forEach(t),wMr=r(pje," (OpenAI GPT model)"),pje.forEach(t),AMr=i(le),P8=n(le,"LI",{});var _je=s(P8);CTe=n(_je,"STRONG",{});var Mkt=s(CTe);LMr=r(Mkt,"roberta"),Mkt.forEach(t),yMr=r(_je," \u2014 "),yJ=n(_je,"A",{href:!0});var Ekt=s(yJ);xMr=r(Ekt,"TFRobertaForMaskedLM"),Ekt.forEach(t),$Mr=r(_je," (RoBERTa model)"),_je.forEach(t),kMr=i(le),B8=n(le,"LI",{});var uje=s(B8);wTe=n(uje,"STRONG",{});var Ckt=s(wTe);SMr=r(Ckt,"t5"),Ckt.forEach(t),RMr=r(uje," \u2014 "),xJ=n(uje,"A",{href:!0});var wkt=s(xJ);PMr=r(wkt,"TFT5ForConditionalGeneration"),wkt.forEach(t),BMr=r(uje," (T5 model)"),uje.forEach(t),NMr=i(le),N8=n(le,"LI",{});var bje=s(N8);ATe=n(bje,"STRONG",{});var Akt=s(ATe);IMr=r(Akt,"tapas"),Akt.forEach(t),qMr=r(bje," \u2014 "),$J=n(bje,"A",{href:!0});var Lkt=s($J);jMr=r(Lkt,"TFTapasForMaskedLM"),Lkt.forEach(t),DMr=r(bje," (TAPAS model)"),bje.forEach(t),GMr=i(le),I8=n(le,"LI",{});var vje=s(I8);LTe=n(vje,"STRONG",{});var ykt=s(LTe);OMr=r(ykt,"transfo-xl"),ykt.forEach(t),VMr=r(vje," \u2014 "),kJ=n(vje,"A",{href:!0});var xkt=s(kJ);XMr=r(xkt,"TFTransfoXLLMHeadModel"),xkt.forEach(t),zMr=r(vje," (Transformer-XL model)"),vje.forEach(t),QMr=i(le),q8=n(le,"LI",{});var Fje=s(q8);yTe=n(Fje,"STRONG",{});var $kt=s(yTe);WMr=r($kt,"vit_mae"),$kt.forEach(t),HMr=r(Fje," \u2014 "),SJ=n(Fje,"A",{href:!0});var kkt=s(SJ);UMr=r(kkt,"TFViTMAEForPreTraining"),kkt.forEach(t),JMr=r(Fje," (ViTMAE model)"),Fje.forEach(t),YMr=i(le),j8=n(le,"LI",{});var Tje=s(j8);xTe=n(Tje,"STRONG",{});var Skt=s(xTe);KMr=r(Skt,"xlm"),Skt.forEach(t),ZMr=r(Tje," \u2014 "),RJ=n(Tje,"A",{href:!0});var Rkt=s(RJ);eEr=r(Rkt,"TFXLMWithLMHeadModel"),Rkt.forEach(t),oEr=r(Tje," (XLM model)"),Tje.forEach(t),rEr=i(le),D8=n(le,"LI",{});var Mje=s(D8);$Te=n(Mje,"STRONG",{});var Pkt=s($Te);tEr=r(Pkt,"xlm-roberta"),Pkt.forEach(t),aEr=r(Mje," \u2014 "),PJ=n(Mje,"A",{href:!0});var Bkt=s(PJ);nEr=r(Bkt,"TFXLMRobertaForMaskedLM"),Bkt.forEach(t),sEr=r(Mje," (XLM-RoBERTa model)"),Mje.forEach(t),lEr=i(le),G8=n(le,"LI",{});var Eje=s(G8);kTe=n(Eje,"STRONG",{});var Nkt=s(kTe);iEr=r(Nkt,"xlnet"),Nkt.forEach(t),dEr=r(Eje," \u2014 "),BJ=n(Eje,"A",{href:!0});var Ikt=s(BJ);cEr=r(Ikt,"TFXLNetLMHeadModel"),Ikt.forEach(t),fEr=r(Eje," (XLNet model)"),Eje.forEach(t),le.forEach(t),mEr=i($l),T(O8.$$.fragment,$l),$l.forEach(t),xl.forEach(t),fze=i(f),fc=n(f,"H2",{class:!0});var vWe=s(fc);V8=n(vWe,"A",{id:!0,class:!0,href:!0});var qkt=s(V8);STe=n(qkt,"SPAN",{});var jkt=s(STe);T(ox.$$.fragment,jkt),jkt.forEach(t),qkt.forEach(t),gEr=i(vWe),RTe=n(vWe,"SPAN",{});var Dkt=s(RTe);hEr=r(Dkt,"TFAutoModelForCausalLM"),Dkt.forEach(t),vWe.forEach(t),mze=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(rx.$$.fragment,kl),pEr=i(kl),mc=n(kl,"P",{});var $te=s(mc);_Er=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NJ=n($te,"A",{href:!0});var Gkt=s(NJ);uEr=r(Gkt,"from_pretrained()"),Gkt.forEach(t),bEr=r($te," class method or the "),IJ=n($te,"A",{href:!0});var Okt=s(IJ);vEr=r(Okt,"from_config()"),Okt.forEach(t),FEr=r($te,` class
method.`),$te.forEach(t),TEr=i(kl),tx=n(kl,"P",{});var FWe=s(tx);MEr=r(FWe,"This class cannot be instantiated directly using "),PTe=n(FWe,"CODE",{});var Vkt=s(PTe);EEr=r(Vkt,"__init__()"),Vkt.forEach(t),CEr=r(FWe," (throws an error)."),FWe.forEach(t),wEr=i(kl),Pt=n(kl,"DIV",{class:!0});var l6=s(Pt);T(ax.$$.fragment,l6),AEr=i(l6),BTe=n(l6,"P",{});var Xkt=s(BTe);LEr=r(Xkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xkt.forEach(t),yEr=i(l6),gc=n(l6,"P",{});var kte=s(gc);xEr=r(kte,`Note:
Loading a model from its configuration file does `),NTe=n(kte,"STRONG",{});var zkt=s(NTe);$Er=r(zkt,"not"),zkt.forEach(t),kEr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(kte,"A",{href:!0});var Qkt=s(qJ);SEr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),REr=r(kte," to load the model weights."),kte.forEach(t),PEr=i(l6),T(X8.$$.fragment,l6),l6.forEach(t),BEr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(nx.$$.fragment,Sl),NEr=i(Sl),ITe=n(Sl,"P",{});var Wkt=s(ITe);IEr=r(Wkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wkt.forEach(t),qEr=i(Sl),dn=n(Sl,"P",{});var i6=s(dn);jEr=r(i6,"The model class to instantiate is selected based on the "),qTe=n(i6,"CODE",{});var Hkt=s(qTe);DEr=r(Hkt,"model_type"),Hkt.forEach(t),GEr=r(i6,` property of the config object (either
passed as an argument or loaded from `),jTe=n(i6,"CODE",{});var Ukt=s(jTe);OEr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),VEr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(i6,"CODE",{});var Jkt=s(DTe);XEr=r(Jkt,"pretrained_model_name_or_path"),Jkt.forEach(t),zEr=r(i6,":"),i6.forEach(t),QEr=i(Sl),Me=n(Sl,"UL",{});var Ce=s(Me);z8=n(Ce,"LI",{});var Cje=s(z8);GTe=n(Cje,"STRONG",{});var Ykt=s(GTe);WEr=r(Ykt,"bert"),Ykt.forEach(t),HEr=r(Cje," \u2014 "),jJ=n(Cje,"A",{href:!0});var Kkt=s(jJ);UEr=r(Kkt,"TFBertLMHeadModel"),Kkt.forEach(t),JEr=r(Cje," (BERT model)"),Cje.forEach(t),YEr=i(Ce),Q8=n(Ce,"LI",{});var wje=s(Q8);OTe=n(wje,"STRONG",{});var Zkt=s(OTe);KEr=r(Zkt,"camembert"),Zkt.forEach(t),ZEr=r(wje," \u2014 "),DJ=n(wje,"A",{href:!0});var eSt=s(DJ);eCr=r(eSt,"TFCamembertForCausalLM"),eSt.forEach(t),oCr=r(wje," (CamemBERT model)"),wje.forEach(t),rCr=i(Ce),W8=n(Ce,"LI",{});var Aje=s(W8);VTe=n(Aje,"STRONG",{});var oSt=s(VTe);tCr=r(oSt,"ctrl"),oSt.forEach(t),aCr=r(Aje," \u2014 "),GJ=n(Aje,"A",{href:!0});var rSt=s(GJ);nCr=r(rSt,"TFCTRLLMHeadModel"),rSt.forEach(t),sCr=r(Aje," (CTRL model)"),Aje.forEach(t),lCr=i(Ce),H8=n(Ce,"LI",{});var Lje=s(H8);XTe=n(Lje,"STRONG",{});var tSt=s(XTe);iCr=r(tSt,"gpt2"),tSt.forEach(t),dCr=r(Lje," \u2014 "),OJ=n(Lje,"A",{href:!0});var aSt=s(OJ);cCr=r(aSt,"TFGPT2LMHeadModel"),aSt.forEach(t),fCr=r(Lje," (OpenAI GPT-2 model)"),Lje.forEach(t),mCr=i(Ce),U8=n(Ce,"LI",{});var yje=s(U8);zTe=n(yje,"STRONG",{});var nSt=s(zTe);gCr=r(nSt,"gptj"),nSt.forEach(t),hCr=r(yje," \u2014 "),VJ=n(yje,"A",{href:!0});var sSt=s(VJ);pCr=r(sSt,"TFGPTJForCausalLM"),sSt.forEach(t),_Cr=r(yje," (GPT-J model)"),yje.forEach(t),uCr=i(Ce),J8=n(Ce,"LI",{});var xje=s(J8);QTe=n(xje,"STRONG",{});var lSt=s(QTe);bCr=r(lSt,"openai-gpt"),lSt.forEach(t),vCr=r(xje," \u2014 "),XJ=n(xje,"A",{href:!0});var iSt=s(XJ);FCr=r(iSt,"TFOpenAIGPTLMHeadModel"),iSt.forEach(t),TCr=r(xje," (OpenAI GPT model)"),xje.forEach(t),MCr=i(Ce),Y8=n(Ce,"LI",{});var $je=s(Y8);WTe=n($je,"STRONG",{});var dSt=s(WTe);ECr=r(dSt,"opt"),dSt.forEach(t),CCr=r($je," \u2014 "),zJ=n($je,"A",{href:!0});var cSt=s(zJ);wCr=r(cSt,"TFOPTForCausalLM"),cSt.forEach(t),ACr=r($je," (OPT model)"),$je.forEach(t),LCr=i(Ce),K8=n(Ce,"LI",{});var kje=s(K8);HTe=n(kje,"STRONG",{});var fSt=s(HTe);yCr=r(fSt,"rembert"),fSt.forEach(t),xCr=r(kje," \u2014 "),QJ=n(kje,"A",{href:!0});var mSt=s(QJ);$Cr=r(mSt,"TFRemBertForCausalLM"),mSt.forEach(t),kCr=r(kje," (RemBERT model)"),kje.forEach(t),SCr=i(Ce),Z8=n(Ce,"LI",{});var Sje=s(Z8);UTe=n(Sje,"STRONG",{});var gSt=s(UTe);RCr=r(gSt,"roberta"),gSt.forEach(t),PCr=r(Sje," \u2014 "),WJ=n(Sje,"A",{href:!0});var hSt=s(WJ);BCr=r(hSt,"TFRobertaForCausalLM"),hSt.forEach(t),NCr=r(Sje," (RoBERTa model)"),Sje.forEach(t),ICr=i(Ce),eM=n(Ce,"LI",{});var Rje=s(eM);JTe=n(Rje,"STRONG",{});var pSt=s(JTe);qCr=r(pSt,"roformer"),pSt.forEach(t),jCr=r(Rje," \u2014 "),HJ=n(Rje,"A",{href:!0});var _St=s(HJ);DCr=r(_St,"TFRoFormerForCausalLM"),_St.forEach(t),GCr=r(Rje," (RoFormer model)"),Rje.forEach(t),OCr=i(Ce),oM=n(Ce,"LI",{});var Pje=s(oM);YTe=n(Pje,"STRONG",{});var uSt=s(YTe);VCr=r(uSt,"transfo-xl"),uSt.forEach(t),XCr=r(Pje," \u2014 "),UJ=n(Pje,"A",{href:!0});var bSt=s(UJ);zCr=r(bSt,"TFTransfoXLLMHeadModel"),bSt.forEach(t),QCr=r(Pje," (Transformer-XL model)"),Pje.forEach(t),WCr=i(Ce),rM=n(Ce,"LI",{});var Bje=s(rM);KTe=n(Bje,"STRONG",{});var vSt=s(KTe);HCr=r(vSt,"xlm"),vSt.forEach(t),UCr=r(Bje," \u2014 "),JJ=n(Bje,"A",{href:!0});var FSt=s(JJ);JCr=r(FSt,"TFXLMWithLMHeadModel"),FSt.forEach(t),YCr=r(Bje," (XLM model)"),Bje.forEach(t),KCr=i(Ce),tM=n(Ce,"LI",{});var Nje=s(tM);ZTe=n(Nje,"STRONG",{});var TSt=s(ZTe);ZCr=r(TSt,"xlnet"),TSt.forEach(t),e3r=r(Nje," \u2014 "),YJ=n(Nje,"A",{href:!0});var MSt=s(YJ);o3r=r(MSt,"TFXLNetLMHeadModel"),MSt.forEach(t),r3r=r(Nje," (XLNet model)"),Nje.forEach(t),Ce.forEach(t),t3r=i(Sl),T(aM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),gze=i(f),hc=n(f,"H2",{class:!0});var TWe=s(hc);nM=n(TWe,"A",{id:!0,class:!0,href:!0});var ESt=s(nM);e7e=n(ESt,"SPAN",{});var CSt=s(e7e);T(sx.$$.fragment,CSt),CSt.forEach(t),ESt.forEach(t),a3r=i(TWe),o7e=n(TWe,"SPAN",{});var wSt=s(o7e);n3r=r(wSt,"TFAutoModelForImageClassification"),wSt.forEach(t),TWe.forEach(t),hze=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(lx.$$.fragment,Rl),s3r=i(Rl),pc=n(Rl,"P",{});var Ste=s(pc);l3r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KJ=n(Ste,"A",{href:!0});var ASt=s(KJ);i3r=r(ASt,"from_pretrained()"),ASt.forEach(t),d3r=r(Ste," class method or the "),ZJ=n(Ste,"A",{href:!0});var LSt=s(ZJ);c3r=r(LSt,"from_config()"),LSt.forEach(t),f3r=r(Ste,` class
method.`),Ste.forEach(t),m3r=i(Rl),ix=n(Rl,"P",{});var MWe=s(ix);g3r=r(MWe,"This class cannot be instantiated directly using "),r7e=n(MWe,"CODE",{});var ySt=s(r7e);h3r=r(ySt,"__init__()"),ySt.forEach(t),p3r=r(MWe," (throws an error)."),MWe.forEach(t),_3r=i(Rl),Bt=n(Rl,"DIV",{class:!0});var d6=s(Bt);T(dx.$$.fragment,d6),u3r=i(d6),t7e=n(d6,"P",{});var xSt=s(t7e);b3r=r(xSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xSt.forEach(t),v3r=i(d6),_c=n(d6,"P",{});var Rte=s(_c);F3r=r(Rte,`Note:
Loading a model from its configuration file does `),a7e=n(Rte,"STRONG",{});var $St=s(a7e);T3r=r($St,"not"),$St.forEach(t),M3r=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(Rte,"A",{href:!0});var kSt=s(eY);E3r=r(kSt,"from_pretrained()"),kSt.forEach(t),C3r=r(Rte," to load the model weights."),Rte.forEach(t),w3r=i(d6),T(sM.$$.fragment,d6),d6.forEach(t),A3r=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(cx.$$.fragment,Pl),L3r=i(Pl),n7e=n(Pl,"P",{});var SSt=s(n7e);y3r=r(SSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),SSt.forEach(t),x3r=i(Pl),cn=n(Pl,"P",{});var c6=s(cn);$3r=r(c6,"The model class to instantiate is selected based on the "),s7e=n(c6,"CODE",{});var RSt=s(s7e);k3r=r(RSt,"model_type"),RSt.forEach(t),S3r=r(c6,` property of the config object (either
passed as an argument or loaded from `),l7e=n(c6,"CODE",{});var PSt=s(l7e);R3r=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),P3r=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=n(c6,"CODE",{});var BSt=s(i7e);B3r=r(BSt,"pretrained_model_name_or_path"),BSt.forEach(t),N3r=r(c6,":"),c6.forEach(t),I3r=i(Pl),tt=n(Pl,"UL",{});var Bl=s(tt);lM=n(Bl,"LI",{});var Ije=s(lM);d7e=n(Ije,"STRONG",{});var NSt=s(d7e);q3r=r(NSt,"convnext"),NSt.forEach(t),j3r=r(Ije," \u2014 "),oY=n(Ije,"A",{href:!0});var ISt=s(oY);D3r=r(ISt,"TFConvNextForImageClassification"),ISt.forEach(t),G3r=r(Ije," (ConvNeXT model)"),Ije.forEach(t),O3r=i(Bl),iM=n(Bl,"LI",{});var qje=s(iM);c7e=n(qje,"STRONG",{});var qSt=s(c7e);V3r=r(qSt,"data2vec-vision"),qSt.forEach(t),X3r=r(qje," \u2014 "),rY=n(qje,"A",{href:!0});var jSt=s(rY);z3r=r(jSt,"TFData2VecVisionForImageClassification"),jSt.forEach(t),Q3r=r(qje," (Data2VecVision model)"),qje.forEach(t),W3r=i(Bl),dM=n(Bl,"LI",{});var jje=s(dM);f7e=n(jje,"STRONG",{});var DSt=s(f7e);H3r=r(DSt,"regnet"),DSt.forEach(t),U3r=r(jje," \u2014 "),tY=n(jje,"A",{href:!0});var GSt=s(tY);J3r=r(GSt,"TFRegNetForImageClassification"),GSt.forEach(t),Y3r=r(jje," (RegNet model)"),jje.forEach(t),K3r=i(Bl),cM=n(Bl,"LI",{});var Dje=s(cM);m7e=n(Dje,"STRONG",{});var OSt=s(m7e);Z3r=r(OSt,"swin"),OSt.forEach(t),e0r=r(Dje," \u2014 "),aY=n(Dje,"A",{href:!0});var VSt=s(aY);o0r=r(VSt,"TFSwinForImageClassification"),VSt.forEach(t),r0r=r(Dje," (Swin Transformer model)"),Dje.forEach(t),t0r=i(Bl),fM=n(Bl,"LI",{});var Gje=s(fM);g7e=n(Gje,"STRONG",{});var XSt=s(g7e);a0r=r(XSt,"vit"),XSt.forEach(t),n0r=r(Gje," \u2014 "),nY=n(Gje,"A",{href:!0});var zSt=s(nY);s0r=r(zSt,"TFViTForImageClassification"),zSt.forEach(t),l0r=r(Gje," (ViT model)"),Gje.forEach(t),Bl.forEach(t),i0r=i(Pl),T(mM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),pze=i(f),uc=n(f,"H2",{class:!0});var EWe=s(uc);gM=n(EWe,"A",{id:!0,class:!0,href:!0});var QSt=s(gM);h7e=n(QSt,"SPAN",{});var WSt=s(h7e);T(fx.$$.fragment,WSt),WSt.forEach(t),QSt.forEach(t),d0r=i(EWe),p7e=n(EWe,"SPAN",{});var HSt=s(p7e);c0r=r(HSt,"TFAutoModelForMaskedLM"),HSt.forEach(t),EWe.forEach(t),_ze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(mx.$$.fragment,Nl),f0r=i(Nl),bc=n(Nl,"P",{});var Pte=s(bc);m0r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sY=n(Pte,"A",{href:!0});var USt=s(sY);g0r=r(USt,"from_pretrained()"),USt.forEach(t),h0r=r(Pte," class method or the "),lY=n(Pte,"A",{href:!0});var JSt=s(lY);p0r=r(JSt,"from_config()"),JSt.forEach(t),_0r=r(Pte,` class
method.`),Pte.forEach(t),u0r=i(Nl),gx=n(Nl,"P",{});var CWe=s(gx);b0r=r(CWe,"This class cannot be instantiated directly using "),_7e=n(CWe,"CODE",{});var YSt=s(_7e);v0r=r(YSt,"__init__()"),YSt.forEach(t),F0r=r(CWe," (throws an error)."),CWe.forEach(t),T0r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var f6=s(Nt);T(hx.$$.fragment,f6),M0r=i(f6),u7e=n(f6,"P",{});var KSt=s(u7e);E0r=r(KSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KSt.forEach(t),C0r=i(f6),vc=n(f6,"P",{});var Bte=s(vc);w0r=r(Bte,`Note:
Loading a model from its configuration file does `),b7e=n(Bte,"STRONG",{});var ZSt=s(b7e);A0r=r(ZSt,"not"),ZSt.forEach(t),L0r=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(Bte,"A",{href:!0});var eRt=s(iY);y0r=r(eRt,"from_pretrained()"),eRt.forEach(t),x0r=r(Bte," to load the model weights."),Bte.forEach(t),$0r=i(f6),T(hM.$$.fragment,f6),f6.forEach(t),k0r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var Il=s(Rr);T(px.$$.fragment,Il),S0r=i(Il),v7e=n(Il,"P",{});var oRt=s(v7e);R0r=r(oRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oRt.forEach(t),P0r=i(Il),fn=n(Il,"P",{});var m6=s(fn);B0r=r(m6,"The model class to instantiate is selected based on the "),F7e=n(m6,"CODE",{});var rRt=s(F7e);N0r=r(rRt,"model_type"),rRt.forEach(t),I0r=r(m6,` property of the config object (either
passed as an argument or loaded from `),T7e=n(m6,"CODE",{});var tRt=s(T7e);q0r=r(tRt,"pretrained_model_name_or_path"),tRt.forEach(t),j0r=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(m6,"CODE",{});var aRt=s(M7e);D0r=r(aRt,"pretrained_model_name_or_path"),aRt.forEach(t),G0r=r(m6,":"),m6.forEach(t),O0r=i(Il),ie=n(Il,"UL",{});var fe=s(ie);pM=n(fe,"LI",{});var Oje=s(pM);E7e=n(Oje,"STRONG",{});var nRt=s(E7e);V0r=r(nRt,"albert"),nRt.forEach(t),X0r=r(Oje," \u2014 "),dY=n(Oje,"A",{href:!0});var sRt=s(dY);z0r=r(sRt,"TFAlbertForMaskedLM"),sRt.forEach(t),Q0r=r(Oje," (ALBERT model)"),Oje.forEach(t),W0r=i(fe),_M=n(fe,"LI",{});var Vje=s(_M);C7e=n(Vje,"STRONG",{});var lRt=s(C7e);H0r=r(lRt,"bert"),lRt.forEach(t),U0r=r(Vje," \u2014 "),cY=n(Vje,"A",{href:!0});var iRt=s(cY);J0r=r(iRt,"TFBertForMaskedLM"),iRt.forEach(t),Y0r=r(Vje," (BERT model)"),Vje.forEach(t),K0r=i(fe),uM=n(fe,"LI",{});var Xje=s(uM);w7e=n(Xje,"STRONG",{});var dRt=s(w7e);Z0r=r(dRt,"camembert"),dRt.forEach(t),ewr=r(Xje," \u2014 "),fY=n(Xje,"A",{href:!0});var cRt=s(fY);owr=r(cRt,"TFCamembertForMaskedLM"),cRt.forEach(t),rwr=r(Xje," (CamemBERT model)"),Xje.forEach(t),twr=i(fe),bM=n(fe,"LI",{});var zje=s(bM);A7e=n(zje,"STRONG",{});var fRt=s(A7e);awr=r(fRt,"convbert"),fRt.forEach(t),nwr=r(zje," \u2014 "),mY=n(zje,"A",{href:!0});var mRt=s(mY);swr=r(mRt,"TFConvBertForMaskedLM"),mRt.forEach(t),lwr=r(zje," (ConvBERT model)"),zje.forEach(t),iwr=i(fe),vM=n(fe,"LI",{});var Qje=s(vM);L7e=n(Qje,"STRONG",{});var gRt=s(L7e);dwr=r(gRt,"deberta"),gRt.forEach(t),cwr=r(Qje," \u2014 "),gY=n(Qje,"A",{href:!0});var hRt=s(gY);fwr=r(hRt,"TFDebertaForMaskedLM"),hRt.forEach(t),mwr=r(Qje," (DeBERTa model)"),Qje.forEach(t),gwr=i(fe),FM=n(fe,"LI",{});var Wje=s(FM);y7e=n(Wje,"STRONG",{});var pRt=s(y7e);hwr=r(pRt,"deberta-v2"),pRt.forEach(t),pwr=r(Wje," \u2014 "),hY=n(Wje,"A",{href:!0});var _Rt=s(hY);_wr=r(_Rt,"TFDebertaV2ForMaskedLM"),_Rt.forEach(t),uwr=r(Wje," (DeBERTa-v2 model)"),Wje.forEach(t),bwr=i(fe),TM=n(fe,"LI",{});var Hje=s(TM);x7e=n(Hje,"STRONG",{});var uRt=s(x7e);vwr=r(uRt,"distilbert"),uRt.forEach(t),Fwr=r(Hje," \u2014 "),pY=n(Hje,"A",{href:!0});var bRt=s(pY);Twr=r(bRt,"TFDistilBertForMaskedLM"),bRt.forEach(t),Mwr=r(Hje," (DistilBERT model)"),Hje.forEach(t),Ewr=i(fe),MM=n(fe,"LI",{});var Uje=s(MM);$7e=n(Uje,"STRONG",{});var vRt=s($7e);Cwr=r(vRt,"electra"),vRt.forEach(t),wwr=r(Uje," \u2014 "),_Y=n(Uje,"A",{href:!0});var FRt=s(_Y);Awr=r(FRt,"TFElectraForMaskedLM"),FRt.forEach(t),Lwr=r(Uje," (ELECTRA model)"),Uje.forEach(t),ywr=i(fe),EM=n(fe,"LI",{});var Jje=s(EM);k7e=n(Jje,"STRONG",{});var TRt=s(k7e);xwr=r(TRt,"flaubert"),TRt.forEach(t),$wr=r(Jje," \u2014 "),uY=n(Jje,"A",{href:!0});var MRt=s(uY);kwr=r(MRt,"TFFlaubertWithLMHeadModel"),MRt.forEach(t),Swr=r(Jje," (FlauBERT model)"),Jje.forEach(t),Rwr=i(fe),CM=n(fe,"LI",{});var Yje=s(CM);S7e=n(Yje,"STRONG",{});var ERt=s(S7e);Pwr=r(ERt,"funnel"),ERt.forEach(t),Bwr=r(Yje," \u2014 "),bY=n(Yje,"A",{href:!0});var CRt=s(bY);Nwr=r(CRt,"TFFunnelForMaskedLM"),CRt.forEach(t),Iwr=r(Yje," (Funnel Transformer model)"),Yje.forEach(t),qwr=i(fe),wM=n(fe,"LI",{});var Kje=s(wM);R7e=n(Kje,"STRONG",{});var wRt=s(R7e);jwr=r(wRt,"layoutlm"),wRt.forEach(t),Dwr=r(Kje," \u2014 "),vY=n(Kje,"A",{href:!0});var ARt=s(vY);Gwr=r(ARt,"TFLayoutLMForMaskedLM"),ARt.forEach(t),Owr=r(Kje," (LayoutLM model)"),Kje.forEach(t),Vwr=i(fe),AM=n(fe,"LI",{});var Zje=s(AM);P7e=n(Zje,"STRONG",{});var LRt=s(P7e);Xwr=r(LRt,"longformer"),LRt.forEach(t),zwr=r(Zje," \u2014 "),FY=n(Zje,"A",{href:!0});var yRt=s(FY);Qwr=r(yRt,"TFLongformerForMaskedLM"),yRt.forEach(t),Wwr=r(Zje," (Longformer model)"),Zje.forEach(t),Hwr=i(fe),LM=n(fe,"LI",{});var eDe=s(LM);B7e=n(eDe,"STRONG",{});var xRt=s(B7e);Uwr=r(xRt,"mobilebert"),xRt.forEach(t),Jwr=r(eDe," \u2014 "),TY=n(eDe,"A",{href:!0});var $Rt=s(TY);Ywr=r($Rt,"TFMobileBertForMaskedLM"),$Rt.forEach(t),Kwr=r(eDe," (MobileBERT model)"),eDe.forEach(t),Zwr=i(fe),yM=n(fe,"LI",{});var oDe=s(yM);N7e=n(oDe,"STRONG",{});var kRt=s(N7e);eAr=r(kRt,"mpnet"),kRt.forEach(t),oAr=r(oDe," \u2014 "),MY=n(oDe,"A",{href:!0});var SRt=s(MY);rAr=r(SRt,"TFMPNetForMaskedLM"),SRt.forEach(t),tAr=r(oDe," (MPNet model)"),oDe.forEach(t),aAr=i(fe),xM=n(fe,"LI",{});var rDe=s(xM);I7e=n(rDe,"STRONG",{});var RRt=s(I7e);nAr=r(RRt,"rembert"),RRt.forEach(t),sAr=r(rDe," \u2014 "),EY=n(rDe,"A",{href:!0});var PRt=s(EY);lAr=r(PRt,"TFRemBertForMaskedLM"),PRt.forEach(t),iAr=r(rDe," (RemBERT model)"),rDe.forEach(t),dAr=i(fe),$M=n(fe,"LI",{});var tDe=s($M);q7e=n(tDe,"STRONG",{});var BRt=s(q7e);cAr=r(BRt,"roberta"),BRt.forEach(t),fAr=r(tDe," \u2014 "),CY=n(tDe,"A",{href:!0});var NRt=s(CY);mAr=r(NRt,"TFRobertaForMaskedLM"),NRt.forEach(t),gAr=r(tDe," (RoBERTa model)"),tDe.forEach(t),hAr=i(fe),kM=n(fe,"LI",{});var aDe=s(kM);j7e=n(aDe,"STRONG",{});var IRt=s(j7e);pAr=r(IRt,"roformer"),IRt.forEach(t),_Ar=r(aDe," \u2014 "),wY=n(aDe,"A",{href:!0});var qRt=s(wY);uAr=r(qRt,"TFRoFormerForMaskedLM"),qRt.forEach(t),bAr=r(aDe," (RoFormer model)"),aDe.forEach(t),vAr=i(fe),SM=n(fe,"LI",{});var nDe=s(SM);D7e=n(nDe,"STRONG",{});var jRt=s(D7e);FAr=r(jRt,"tapas"),jRt.forEach(t),TAr=r(nDe," \u2014 "),AY=n(nDe,"A",{href:!0});var DRt=s(AY);MAr=r(DRt,"TFTapasForMaskedLM"),DRt.forEach(t),EAr=r(nDe," (TAPAS model)"),nDe.forEach(t),CAr=i(fe),RM=n(fe,"LI",{});var sDe=s(RM);G7e=n(sDe,"STRONG",{});var GRt=s(G7e);wAr=r(GRt,"xlm"),GRt.forEach(t),AAr=r(sDe," \u2014 "),LY=n(sDe,"A",{href:!0});var ORt=s(LY);LAr=r(ORt,"TFXLMWithLMHeadModel"),ORt.forEach(t),yAr=r(sDe," (XLM model)"),sDe.forEach(t),xAr=i(fe),PM=n(fe,"LI",{});var lDe=s(PM);O7e=n(lDe,"STRONG",{});var VRt=s(O7e);$Ar=r(VRt,"xlm-roberta"),VRt.forEach(t),kAr=r(lDe," \u2014 "),yY=n(lDe,"A",{href:!0});var XRt=s(yY);SAr=r(XRt,"TFXLMRobertaForMaskedLM"),XRt.forEach(t),RAr=r(lDe," (XLM-RoBERTa model)"),lDe.forEach(t),fe.forEach(t),PAr=i(Il),T(BM.$$.fragment,Il),Il.forEach(t),Nl.forEach(t),uze=i(f),Fc=n(f,"H2",{class:!0});var wWe=s(Fc);NM=n(wWe,"A",{id:!0,class:!0,href:!0});var zRt=s(NM);V7e=n(zRt,"SPAN",{});var QRt=s(V7e);T(_x.$$.fragment,QRt),QRt.forEach(t),zRt.forEach(t),BAr=i(wWe),X7e=n(wWe,"SPAN",{});var WRt=s(X7e);NAr=r(WRt,"TFAutoModelForSeq2SeqLM"),WRt.forEach(t),wWe.forEach(t),bze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(ux.$$.fragment,ql),IAr=i(ql),Tc=n(ql,"P",{});var Nte=s(Tc);qAr=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xY=n(Nte,"A",{href:!0});var HRt=s(xY);jAr=r(HRt,"from_pretrained()"),HRt.forEach(t),DAr=r(Nte," class method or the "),$Y=n(Nte,"A",{href:!0});var URt=s($Y);GAr=r(URt,"from_config()"),URt.forEach(t),OAr=r(Nte,` class
method.`),Nte.forEach(t),VAr=i(ql),bx=n(ql,"P",{});var AWe=s(bx);XAr=r(AWe,"This class cannot be instantiated directly using "),z7e=n(AWe,"CODE",{});var JRt=s(z7e);zAr=r(JRt,"__init__()"),JRt.forEach(t),QAr=r(AWe," (throws an error)."),AWe.forEach(t),WAr=i(ql),It=n(ql,"DIV",{class:!0});var g6=s(It);T(vx.$$.fragment,g6),HAr=i(g6),Q7e=n(g6,"P",{});var YRt=s(Q7e);UAr=r(YRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YRt.forEach(t),JAr=i(g6),Mc=n(g6,"P",{});var Ite=s(Mc);YAr=r(Ite,`Note:
Loading a model from its configuration file does `),W7e=n(Ite,"STRONG",{});var KRt=s(W7e);KAr=r(KRt,"not"),KRt.forEach(t),ZAr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(Ite,"A",{href:!0});var ZRt=s(kY);e6r=r(ZRt,"from_pretrained()"),ZRt.forEach(t),o6r=r(Ite," to load the model weights."),Ite.forEach(t),r6r=i(g6),T(IM.$$.fragment,g6),g6.forEach(t),t6r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(Fx.$$.fragment,jl),a6r=i(jl),H7e=n(jl,"P",{});var ePt=s(H7e);n6r=r(ePt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ePt.forEach(t),s6r=i(jl),mn=n(jl,"P",{});var h6=s(mn);l6r=r(h6,"The model class to instantiate is selected based on the "),U7e=n(h6,"CODE",{});var oPt=s(U7e);i6r=r(oPt,"model_type"),oPt.forEach(t),d6r=r(h6,` property of the config object (either
passed as an argument or loaded from `),J7e=n(h6,"CODE",{});var rPt=s(J7e);c6r=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),f6r=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(h6,"CODE",{});var tPt=s(Y7e);m6r=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),g6r=r(h6,":"),h6.forEach(t),h6r=i(jl),ye=n(jl,"UL",{});var Ne=s(ye);qM=n(Ne,"LI",{});var iDe=s(qM);K7e=n(iDe,"STRONG",{});var aPt=s(K7e);p6r=r(aPt,"bart"),aPt.forEach(t),_6r=r(iDe," \u2014 "),SY=n(iDe,"A",{href:!0});var nPt=s(SY);u6r=r(nPt,"TFBartForConditionalGeneration"),nPt.forEach(t),b6r=r(iDe," (BART model)"),iDe.forEach(t),v6r=i(Ne),jM=n(Ne,"LI",{});var dDe=s(jM);Z7e=n(dDe,"STRONG",{});var sPt=s(Z7e);F6r=r(sPt,"blenderbot"),sPt.forEach(t),T6r=r(dDe," \u2014 "),RY=n(dDe,"A",{href:!0});var lPt=s(RY);M6r=r(lPt,"TFBlenderbotForConditionalGeneration"),lPt.forEach(t),E6r=r(dDe," (Blenderbot model)"),dDe.forEach(t),C6r=i(Ne),DM=n(Ne,"LI",{});var cDe=s(DM);e8e=n(cDe,"STRONG",{});var iPt=s(e8e);w6r=r(iPt,"blenderbot-small"),iPt.forEach(t),A6r=r(cDe," \u2014 "),PY=n(cDe,"A",{href:!0});var dPt=s(PY);L6r=r(dPt,"TFBlenderbotSmallForConditionalGeneration"),dPt.forEach(t),y6r=r(cDe," (BlenderbotSmall model)"),cDe.forEach(t),x6r=i(Ne),GM=n(Ne,"LI",{});var fDe=s(GM);o8e=n(fDe,"STRONG",{});var cPt=s(o8e);$6r=r(cPt,"encoder-decoder"),cPt.forEach(t),k6r=r(fDe," \u2014 "),BY=n(fDe,"A",{href:!0});var fPt=s(BY);S6r=r(fPt,"TFEncoderDecoderModel"),fPt.forEach(t),R6r=r(fDe," (Encoder decoder model)"),fDe.forEach(t),P6r=i(Ne),OM=n(Ne,"LI",{});var mDe=s(OM);r8e=n(mDe,"STRONG",{});var mPt=s(r8e);B6r=r(mPt,"led"),mPt.forEach(t),N6r=r(mDe," \u2014 "),NY=n(mDe,"A",{href:!0});var gPt=s(NY);I6r=r(gPt,"TFLEDForConditionalGeneration"),gPt.forEach(t),q6r=r(mDe," (LED model)"),mDe.forEach(t),j6r=i(Ne),VM=n(Ne,"LI",{});var gDe=s(VM);t8e=n(gDe,"STRONG",{});var hPt=s(t8e);D6r=r(hPt,"marian"),hPt.forEach(t),G6r=r(gDe," \u2014 "),IY=n(gDe,"A",{href:!0});var pPt=s(IY);O6r=r(pPt,"TFMarianMTModel"),pPt.forEach(t),V6r=r(gDe," (Marian model)"),gDe.forEach(t),X6r=i(Ne),XM=n(Ne,"LI",{});var hDe=s(XM);a8e=n(hDe,"STRONG",{});var _Pt=s(a8e);z6r=r(_Pt,"mbart"),_Pt.forEach(t),Q6r=r(hDe," \u2014 "),qY=n(hDe,"A",{href:!0});var uPt=s(qY);W6r=r(uPt,"TFMBartForConditionalGeneration"),uPt.forEach(t),H6r=r(hDe," (mBART model)"),hDe.forEach(t),U6r=i(Ne),zM=n(Ne,"LI",{});var pDe=s(zM);n8e=n(pDe,"STRONG",{});var bPt=s(n8e);J6r=r(bPt,"mt5"),bPt.forEach(t),Y6r=r(pDe," \u2014 "),jY=n(pDe,"A",{href:!0});var vPt=s(jY);K6r=r(vPt,"TFMT5ForConditionalGeneration"),vPt.forEach(t),Z6r=r(pDe," (MT5 model)"),pDe.forEach(t),eLr=i(Ne),QM=n(Ne,"LI",{});var _De=s(QM);s8e=n(_De,"STRONG",{});var FPt=s(s8e);oLr=r(FPt,"pegasus"),FPt.forEach(t),rLr=r(_De," \u2014 "),DY=n(_De,"A",{href:!0});var TPt=s(DY);tLr=r(TPt,"TFPegasusForConditionalGeneration"),TPt.forEach(t),aLr=r(_De," (Pegasus model)"),_De.forEach(t),nLr=i(Ne),WM=n(Ne,"LI",{});var uDe=s(WM);l8e=n(uDe,"STRONG",{});var MPt=s(l8e);sLr=r(MPt,"t5"),MPt.forEach(t),lLr=r(uDe," \u2014 "),GY=n(uDe,"A",{href:!0});var EPt=s(GY);iLr=r(EPt,"TFT5ForConditionalGeneration"),EPt.forEach(t),dLr=r(uDe," (T5 model)"),uDe.forEach(t),Ne.forEach(t),cLr=i(jl),T(HM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),vze=i(f),Ec=n(f,"H2",{class:!0});var LWe=s(Ec);UM=n(LWe,"A",{id:!0,class:!0,href:!0});var CPt=s(UM);i8e=n(CPt,"SPAN",{});var wPt=s(i8e);T(Tx.$$.fragment,wPt),wPt.forEach(t),CPt.forEach(t),fLr=i(LWe),d8e=n(LWe,"SPAN",{});var APt=s(d8e);mLr=r(APt,"TFAutoModelForSequenceClassification"),APt.forEach(t),LWe.forEach(t),Fze=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(Mx.$$.fragment,Dl),gLr=i(Dl),Cc=n(Dl,"P",{});var qte=s(Cc);hLr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OY=n(qte,"A",{href:!0});var LPt=s(OY);pLr=r(LPt,"from_pretrained()"),LPt.forEach(t),_Lr=r(qte," class method or the "),VY=n(qte,"A",{href:!0});var yPt=s(VY);uLr=r(yPt,"from_config()"),yPt.forEach(t),bLr=r(qte,` class
method.`),qte.forEach(t),vLr=i(Dl),Ex=n(Dl,"P",{});var yWe=s(Ex);FLr=r(yWe,"This class cannot be instantiated directly using "),c8e=n(yWe,"CODE",{});var xPt=s(c8e);TLr=r(xPt,"__init__()"),xPt.forEach(t),MLr=r(yWe," (throws an error)."),yWe.forEach(t),ELr=i(Dl),qt=n(Dl,"DIV",{class:!0});var p6=s(qt);T(Cx.$$.fragment,p6),CLr=i(p6),f8e=n(p6,"P",{});var $Pt=s(f8e);wLr=r($Pt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Pt.forEach(t),ALr=i(p6),wc=n(p6,"P",{});var jte=s(wc);LLr=r(jte,`Note:
Loading a model from its configuration file does `),m8e=n(jte,"STRONG",{});var kPt=s(m8e);yLr=r(kPt,"not"),kPt.forEach(t),xLr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(jte,"A",{href:!0});var SPt=s(XY);$Lr=r(SPt,"from_pretrained()"),SPt.forEach(t),kLr=r(jte," to load the model weights."),jte.forEach(t),SLr=i(p6),T(JM.$$.fragment,p6),p6.forEach(t),RLr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(wx.$$.fragment,Gl),PLr=i(Gl),g8e=n(Gl,"P",{});var RPt=s(g8e);BLr=r(RPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),RPt.forEach(t),NLr=i(Gl),gn=n(Gl,"P",{});var _6=s(gn);ILr=r(_6,"The model class to instantiate is selected based on the "),h8e=n(_6,"CODE",{});var PPt=s(h8e);qLr=r(PPt,"model_type"),PPt.forEach(t),jLr=r(_6,` property of the config object (either
passed as an argument or loaded from `),p8e=n(_6,"CODE",{});var BPt=s(p8e);DLr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),GLr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(_6,"CODE",{});var NPt=s(_8e);OLr=r(NPt,"pretrained_model_name_or_path"),NPt.forEach(t),VLr=r(_6,":"),_6.forEach(t),XLr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);YM=n(ne,"LI",{});var bDe=s(YM);u8e=n(bDe,"STRONG",{});var IPt=s(u8e);zLr=r(IPt,"albert"),IPt.forEach(t),QLr=r(bDe," \u2014 "),zY=n(bDe,"A",{href:!0});var qPt=s(zY);WLr=r(qPt,"TFAlbertForSequenceClassification"),qPt.forEach(t),HLr=r(bDe," (ALBERT model)"),bDe.forEach(t),ULr=i(ne),KM=n(ne,"LI",{});var vDe=s(KM);b8e=n(vDe,"STRONG",{});var jPt=s(b8e);JLr=r(jPt,"bert"),jPt.forEach(t),YLr=r(vDe," \u2014 "),QY=n(vDe,"A",{href:!0});var DPt=s(QY);KLr=r(DPt,"TFBertForSequenceClassification"),DPt.forEach(t),ZLr=r(vDe," (BERT model)"),vDe.forEach(t),eyr=i(ne),ZM=n(ne,"LI",{});var FDe=s(ZM);v8e=n(FDe,"STRONG",{});var GPt=s(v8e);oyr=r(GPt,"camembert"),GPt.forEach(t),ryr=r(FDe," \u2014 "),WY=n(FDe,"A",{href:!0});var OPt=s(WY);tyr=r(OPt,"TFCamembertForSequenceClassification"),OPt.forEach(t),ayr=r(FDe," (CamemBERT model)"),FDe.forEach(t),nyr=i(ne),eE=n(ne,"LI",{});var TDe=s(eE);F8e=n(TDe,"STRONG",{});var VPt=s(F8e);syr=r(VPt,"convbert"),VPt.forEach(t),lyr=r(TDe," \u2014 "),HY=n(TDe,"A",{href:!0});var XPt=s(HY);iyr=r(XPt,"TFConvBertForSequenceClassification"),XPt.forEach(t),dyr=r(TDe," (ConvBERT model)"),TDe.forEach(t),cyr=i(ne),oE=n(ne,"LI",{});var MDe=s(oE);T8e=n(MDe,"STRONG",{});var zPt=s(T8e);fyr=r(zPt,"ctrl"),zPt.forEach(t),myr=r(MDe," \u2014 "),UY=n(MDe,"A",{href:!0});var QPt=s(UY);gyr=r(QPt,"TFCTRLForSequenceClassification"),QPt.forEach(t),hyr=r(MDe," (CTRL model)"),MDe.forEach(t),pyr=i(ne),rE=n(ne,"LI",{});var EDe=s(rE);M8e=n(EDe,"STRONG",{});var WPt=s(M8e);_yr=r(WPt,"deberta"),WPt.forEach(t),uyr=r(EDe," \u2014 "),JY=n(EDe,"A",{href:!0});var HPt=s(JY);byr=r(HPt,"TFDebertaForSequenceClassification"),HPt.forEach(t),vyr=r(EDe," (DeBERTa model)"),EDe.forEach(t),Fyr=i(ne),tE=n(ne,"LI",{});var CDe=s(tE);E8e=n(CDe,"STRONG",{});var UPt=s(E8e);Tyr=r(UPt,"deberta-v2"),UPt.forEach(t),Myr=r(CDe," \u2014 "),YY=n(CDe,"A",{href:!0});var JPt=s(YY);Eyr=r(JPt,"TFDebertaV2ForSequenceClassification"),JPt.forEach(t),Cyr=r(CDe," (DeBERTa-v2 model)"),CDe.forEach(t),wyr=i(ne),aE=n(ne,"LI",{});var wDe=s(aE);C8e=n(wDe,"STRONG",{});var YPt=s(C8e);Ayr=r(YPt,"distilbert"),YPt.forEach(t),Lyr=r(wDe," \u2014 "),KY=n(wDe,"A",{href:!0});var KPt=s(KY);yyr=r(KPt,"TFDistilBertForSequenceClassification"),KPt.forEach(t),xyr=r(wDe," (DistilBERT model)"),wDe.forEach(t),$yr=i(ne),nE=n(ne,"LI",{});var ADe=s(nE);w8e=n(ADe,"STRONG",{});var ZPt=s(w8e);kyr=r(ZPt,"electra"),ZPt.forEach(t),Syr=r(ADe," \u2014 "),ZY=n(ADe,"A",{href:!0});var eBt=s(ZY);Ryr=r(eBt,"TFElectraForSequenceClassification"),eBt.forEach(t),Pyr=r(ADe," (ELECTRA model)"),ADe.forEach(t),Byr=i(ne),sE=n(ne,"LI",{});var LDe=s(sE);A8e=n(LDe,"STRONG",{});var oBt=s(A8e);Nyr=r(oBt,"flaubert"),oBt.forEach(t),Iyr=r(LDe," \u2014 "),eK=n(LDe,"A",{href:!0});var rBt=s(eK);qyr=r(rBt,"TFFlaubertForSequenceClassification"),rBt.forEach(t),jyr=r(LDe," (FlauBERT model)"),LDe.forEach(t),Dyr=i(ne),lE=n(ne,"LI",{});var yDe=s(lE);L8e=n(yDe,"STRONG",{});var tBt=s(L8e);Gyr=r(tBt,"funnel"),tBt.forEach(t),Oyr=r(yDe," \u2014 "),oK=n(yDe,"A",{href:!0});var aBt=s(oK);Vyr=r(aBt,"TFFunnelForSequenceClassification"),aBt.forEach(t),Xyr=r(yDe," (Funnel Transformer model)"),yDe.forEach(t),zyr=i(ne),iE=n(ne,"LI",{});var xDe=s(iE);y8e=n(xDe,"STRONG",{});var nBt=s(y8e);Qyr=r(nBt,"gpt2"),nBt.forEach(t),Wyr=r(xDe," \u2014 "),rK=n(xDe,"A",{href:!0});var sBt=s(rK);Hyr=r(sBt,"TFGPT2ForSequenceClassification"),sBt.forEach(t),Uyr=r(xDe," (OpenAI GPT-2 model)"),xDe.forEach(t),Jyr=i(ne),dE=n(ne,"LI",{});var $De=s(dE);x8e=n($De,"STRONG",{});var lBt=s(x8e);Yyr=r(lBt,"gptj"),lBt.forEach(t),Kyr=r($De," \u2014 "),tK=n($De,"A",{href:!0});var iBt=s(tK);Zyr=r(iBt,"TFGPTJForSequenceClassification"),iBt.forEach(t),e9r=r($De," (GPT-J model)"),$De.forEach(t),o9r=i(ne),cE=n(ne,"LI",{});var kDe=s(cE);$8e=n(kDe,"STRONG",{});var dBt=s($8e);r9r=r(dBt,"layoutlm"),dBt.forEach(t),t9r=r(kDe," \u2014 "),aK=n(kDe,"A",{href:!0});var cBt=s(aK);a9r=r(cBt,"TFLayoutLMForSequenceClassification"),cBt.forEach(t),n9r=r(kDe," (LayoutLM model)"),kDe.forEach(t),s9r=i(ne),fE=n(ne,"LI",{});var SDe=s(fE);k8e=n(SDe,"STRONG",{});var fBt=s(k8e);l9r=r(fBt,"longformer"),fBt.forEach(t),i9r=r(SDe," \u2014 "),nK=n(SDe,"A",{href:!0});var mBt=s(nK);d9r=r(mBt,"TFLongformerForSequenceClassification"),mBt.forEach(t),c9r=r(SDe," (Longformer model)"),SDe.forEach(t),f9r=i(ne),mE=n(ne,"LI",{});var RDe=s(mE);S8e=n(RDe,"STRONG",{});var gBt=s(S8e);m9r=r(gBt,"mobilebert"),gBt.forEach(t),g9r=r(RDe," \u2014 "),sK=n(RDe,"A",{href:!0});var hBt=s(sK);h9r=r(hBt,"TFMobileBertForSequenceClassification"),hBt.forEach(t),p9r=r(RDe," (MobileBERT model)"),RDe.forEach(t),_9r=i(ne),gE=n(ne,"LI",{});var PDe=s(gE);R8e=n(PDe,"STRONG",{});var pBt=s(R8e);u9r=r(pBt,"mpnet"),pBt.forEach(t),b9r=r(PDe," \u2014 "),lK=n(PDe,"A",{href:!0});var _Bt=s(lK);v9r=r(_Bt,"TFMPNetForSequenceClassification"),_Bt.forEach(t),F9r=r(PDe," (MPNet model)"),PDe.forEach(t),T9r=i(ne),hE=n(ne,"LI",{});var BDe=s(hE);P8e=n(BDe,"STRONG",{});var uBt=s(P8e);M9r=r(uBt,"openai-gpt"),uBt.forEach(t),E9r=r(BDe," \u2014 "),iK=n(BDe,"A",{href:!0});var bBt=s(iK);C9r=r(bBt,"TFOpenAIGPTForSequenceClassification"),bBt.forEach(t),w9r=r(BDe," (OpenAI GPT model)"),BDe.forEach(t),A9r=i(ne),pE=n(ne,"LI",{});var NDe=s(pE);B8e=n(NDe,"STRONG",{});var vBt=s(B8e);L9r=r(vBt,"rembert"),vBt.forEach(t),y9r=r(NDe," \u2014 "),dK=n(NDe,"A",{href:!0});var FBt=s(dK);x9r=r(FBt,"TFRemBertForSequenceClassification"),FBt.forEach(t),$9r=r(NDe," (RemBERT model)"),NDe.forEach(t),k9r=i(ne),_E=n(ne,"LI",{});var IDe=s(_E);N8e=n(IDe,"STRONG",{});var TBt=s(N8e);S9r=r(TBt,"roberta"),TBt.forEach(t),R9r=r(IDe," \u2014 "),cK=n(IDe,"A",{href:!0});var MBt=s(cK);P9r=r(MBt,"TFRobertaForSequenceClassification"),MBt.forEach(t),B9r=r(IDe," (RoBERTa model)"),IDe.forEach(t),N9r=i(ne),uE=n(ne,"LI",{});var qDe=s(uE);I8e=n(qDe,"STRONG",{});var EBt=s(I8e);I9r=r(EBt,"roformer"),EBt.forEach(t),q9r=r(qDe," \u2014 "),fK=n(qDe,"A",{href:!0});var CBt=s(fK);j9r=r(CBt,"TFRoFormerForSequenceClassification"),CBt.forEach(t),D9r=r(qDe," (RoFormer model)"),qDe.forEach(t),G9r=i(ne),bE=n(ne,"LI",{});var jDe=s(bE);q8e=n(jDe,"STRONG",{});var wBt=s(q8e);O9r=r(wBt,"tapas"),wBt.forEach(t),V9r=r(jDe," \u2014 "),mK=n(jDe,"A",{href:!0});var ABt=s(mK);X9r=r(ABt,"TFTapasForSequenceClassification"),ABt.forEach(t),z9r=r(jDe," (TAPAS model)"),jDe.forEach(t),Q9r=i(ne),vE=n(ne,"LI",{});var DDe=s(vE);j8e=n(DDe,"STRONG",{});var LBt=s(j8e);W9r=r(LBt,"transfo-xl"),LBt.forEach(t),H9r=r(DDe," \u2014 "),gK=n(DDe,"A",{href:!0});var yBt=s(gK);U9r=r(yBt,"TFTransfoXLForSequenceClassification"),yBt.forEach(t),J9r=r(DDe," (Transformer-XL model)"),DDe.forEach(t),Y9r=i(ne),FE=n(ne,"LI",{});var GDe=s(FE);D8e=n(GDe,"STRONG",{});var xBt=s(D8e);K9r=r(xBt,"xlm"),xBt.forEach(t),Z9r=r(GDe," \u2014 "),hK=n(GDe,"A",{href:!0});var $Bt=s(hK);exr=r($Bt,"TFXLMForSequenceClassification"),$Bt.forEach(t),oxr=r(GDe," (XLM model)"),GDe.forEach(t),rxr=i(ne),TE=n(ne,"LI",{});var ODe=s(TE);G8e=n(ODe,"STRONG",{});var kBt=s(G8e);txr=r(kBt,"xlm-roberta"),kBt.forEach(t),axr=r(ODe," \u2014 "),pK=n(ODe,"A",{href:!0});var SBt=s(pK);nxr=r(SBt,"TFXLMRobertaForSequenceClassification"),SBt.forEach(t),sxr=r(ODe," (XLM-RoBERTa model)"),ODe.forEach(t),lxr=i(ne),ME=n(ne,"LI",{});var VDe=s(ME);O8e=n(VDe,"STRONG",{});var RBt=s(O8e);ixr=r(RBt,"xlnet"),RBt.forEach(t),dxr=r(VDe," \u2014 "),_K=n(VDe,"A",{href:!0});var PBt=s(_K);cxr=r(PBt,"TFXLNetForSequenceClassification"),PBt.forEach(t),fxr=r(VDe," (XLNet model)"),VDe.forEach(t),ne.forEach(t),mxr=i(Gl),T(EE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Tze=i(f),Ac=n(f,"H2",{class:!0});var xWe=s(Ac);CE=n(xWe,"A",{id:!0,class:!0,href:!0});var BBt=s(CE);V8e=n(BBt,"SPAN",{});var NBt=s(V8e);T(Ax.$$.fragment,NBt),NBt.forEach(t),BBt.forEach(t),gxr=i(xWe),X8e=n(xWe,"SPAN",{});var IBt=s(X8e);hxr=r(IBt,"TFAutoModelForMultipleChoice"),IBt.forEach(t),xWe.forEach(t),Mze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(Lx.$$.fragment,Ol),pxr=i(Ol),Lc=n(Ol,"P",{});var Dte=s(Lc);_xr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uK=n(Dte,"A",{href:!0});var qBt=s(uK);uxr=r(qBt,"from_pretrained()"),qBt.forEach(t),bxr=r(Dte," class method or the "),bK=n(Dte,"A",{href:!0});var jBt=s(bK);vxr=r(jBt,"from_config()"),jBt.forEach(t),Fxr=r(Dte,` class
method.`),Dte.forEach(t),Txr=i(Ol),yx=n(Ol,"P",{});var $We=s(yx);Mxr=r($We,"This class cannot be instantiated directly using "),z8e=n($We,"CODE",{});var DBt=s(z8e);Exr=r(DBt,"__init__()"),DBt.forEach(t),Cxr=r($We," (throws an error)."),$We.forEach(t),wxr=i(Ol),jt=n(Ol,"DIV",{class:!0});var u6=s(jt);T(xx.$$.fragment,u6),Axr=i(u6),Q8e=n(u6,"P",{});var GBt=s(Q8e);Lxr=r(GBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GBt.forEach(t),yxr=i(u6),yc=n(u6,"P",{});var Gte=s(yc);xxr=r(Gte,`Note:
Loading a model from its configuration file does `),W8e=n(Gte,"STRONG",{});var OBt=s(W8e);$xr=r(OBt,"not"),OBt.forEach(t),kxr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(Gte,"A",{href:!0});var VBt=s(vK);Sxr=r(VBt,"from_pretrained()"),VBt.forEach(t),Rxr=r(Gte," to load the model weights."),Gte.forEach(t),Pxr=i(u6),T(wE.$$.fragment,u6),u6.forEach(t),Bxr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T($x.$$.fragment,Vl),Nxr=i(Vl),H8e=n(Vl,"P",{});var XBt=s(H8e);Ixr=r(XBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XBt.forEach(t),qxr=i(Vl),hn=n(Vl,"P",{});var b6=s(hn);jxr=r(b6,"The model class to instantiate is selected based on the "),U8e=n(b6,"CODE",{});var zBt=s(U8e);Dxr=r(zBt,"model_type"),zBt.forEach(t),Gxr=r(b6,` property of the config object (either
passed as an argument or loaded from `),J8e=n(b6,"CODE",{});var QBt=s(J8e);Oxr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),Vxr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y8e=n(b6,"CODE",{});var WBt=s(Y8e);Xxr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),zxr=r(b6,":"),b6.forEach(t),Qxr=i(Vl),ue=n(Vl,"UL",{});var Te=s(ue);AE=n(Te,"LI",{});var XDe=s(AE);K8e=n(XDe,"STRONG",{});var HBt=s(K8e);Wxr=r(HBt,"albert"),HBt.forEach(t),Hxr=r(XDe," \u2014 "),FK=n(XDe,"A",{href:!0});var UBt=s(FK);Uxr=r(UBt,"TFAlbertForMultipleChoice"),UBt.forEach(t),Jxr=r(XDe," (ALBERT model)"),XDe.forEach(t),Yxr=i(Te),LE=n(Te,"LI",{});var zDe=s(LE);Z8e=n(zDe,"STRONG",{});var JBt=s(Z8e);Kxr=r(JBt,"bert"),JBt.forEach(t),Zxr=r(zDe," \u2014 "),TK=n(zDe,"A",{href:!0});var YBt=s(TK);e$r=r(YBt,"TFBertForMultipleChoice"),YBt.forEach(t),o$r=r(zDe," (BERT model)"),zDe.forEach(t),r$r=i(Te),yE=n(Te,"LI",{});var QDe=s(yE);eMe=n(QDe,"STRONG",{});var KBt=s(eMe);t$r=r(KBt,"camembert"),KBt.forEach(t),a$r=r(QDe," \u2014 "),MK=n(QDe,"A",{href:!0});var ZBt=s(MK);n$r=r(ZBt,"TFCamembertForMultipleChoice"),ZBt.forEach(t),s$r=r(QDe," (CamemBERT model)"),QDe.forEach(t),l$r=i(Te),xE=n(Te,"LI",{});var WDe=s(xE);oMe=n(WDe,"STRONG",{});var eNt=s(oMe);i$r=r(eNt,"convbert"),eNt.forEach(t),d$r=r(WDe," \u2014 "),EK=n(WDe,"A",{href:!0});var oNt=s(EK);c$r=r(oNt,"TFConvBertForMultipleChoice"),oNt.forEach(t),f$r=r(WDe," (ConvBERT model)"),WDe.forEach(t),m$r=i(Te),$E=n(Te,"LI",{});var HDe=s($E);rMe=n(HDe,"STRONG",{});var rNt=s(rMe);g$r=r(rNt,"distilbert"),rNt.forEach(t),h$r=r(HDe," \u2014 "),CK=n(HDe,"A",{href:!0});var tNt=s(CK);p$r=r(tNt,"TFDistilBertForMultipleChoice"),tNt.forEach(t),_$r=r(HDe," (DistilBERT model)"),HDe.forEach(t),u$r=i(Te),kE=n(Te,"LI",{});var UDe=s(kE);tMe=n(UDe,"STRONG",{});var aNt=s(tMe);b$r=r(aNt,"electra"),aNt.forEach(t),v$r=r(UDe," \u2014 "),wK=n(UDe,"A",{href:!0});var nNt=s(wK);F$r=r(nNt,"TFElectraForMultipleChoice"),nNt.forEach(t),T$r=r(UDe," (ELECTRA model)"),UDe.forEach(t),M$r=i(Te),SE=n(Te,"LI",{});var JDe=s(SE);aMe=n(JDe,"STRONG",{});var sNt=s(aMe);E$r=r(sNt,"flaubert"),sNt.forEach(t),C$r=r(JDe," \u2014 "),AK=n(JDe,"A",{href:!0});var lNt=s(AK);w$r=r(lNt,"TFFlaubertForMultipleChoice"),lNt.forEach(t),A$r=r(JDe," (FlauBERT model)"),JDe.forEach(t),L$r=i(Te),RE=n(Te,"LI",{});var YDe=s(RE);nMe=n(YDe,"STRONG",{});var iNt=s(nMe);y$r=r(iNt,"funnel"),iNt.forEach(t),x$r=r(YDe," \u2014 "),LK=n(YDe,"A",{href:!0});var dNt=s(LK);$$r=r(dNt,"TFFunnelForMultipleChoice"),dNt.forEach(t),k$r=r(YDe," (Funnel Transformer model)"),YDe.forEach(t),S$r=i(Te),PE=n(Te,"LI",{});var KDe=s(PE);sMe=n(KDe,"STRONG",{});var cNt=s(sMe);R$r=r(cNt,"longformer"),cNt.forEach(t),P$r=r(KDe," \u2014 "),yK=n(KDe,"A",{href:!0});var fNt=s(yK);B$r=r(fNt,"TFLongformerForMultipleChoice"),fNt.forEach(t),N$r=r(KDe," (Longformer model)"),KDe.forEach(t),I$r=i(Te),BE=n(Te,"LI",{});var ZDe=s(BE);lMe=n(ZDe,"STRONG",{});var mNt=s(lMe);q$r=r(mNt,"mobilebert"),mNt.forEach(t),j$r=r(ZDe," \u2014 "),xK=n(ZDe,"A",{href:!0});var gNt=s(xK);D$r=r(gNt,"TFMobileBertForMultipleChoice"),gNt.forEach(t),G$r=r(ZDe," (MobileBERT model)"),ZDe.forEach(t),O$r=i(Te),NE=n(Te,"LI",{});var eGe=s(NE);iMe=n(eGe,"STRONG",{});var hNt=s(iMe);V$r=r(hNt,"mpnet"),hNt.forEach(t),X$r=r(eGe," \u2014 "),$K=n(eGe,"A",{href:!0});var pNt=s($K);z$r=r(pNt,"TFMPNetForMultipleChoice"),pNt.forEach(t),Q$r=r(eGe," (MPNet model)"),eGe.forEach(t),W$r=i(Te),IE=n(Te,"LI",{});var oGe=s(IE);dMe=n(oGe,"STRONG",{});var _Nt=s(dMe);H$r=r(_Nt,"rembert"),_Nt.forEach(t),U$r=r(oGe," \u2014 "),kK=n(oGe,"A",{href:!0});var uNt=s(kK);J$r=r(uNt,"TFRemBertForMultipleChoice"),uNt.forEach(t),Y$r=r(oGe," (RemBERT model)"),oGe.forEach(t),K$r=i(Te),qE=n(Te,"LI",{});var rGe=s(qE);cMe=n(rGe,"STRONG",{});var bNt=s(cMe);Z$r=r(bNt,"roberta"),bNt.forEach(t),ekr=r(rGe," \u2014 "),SK=n(rGe,"A",{href:!0});var vNt=s(SK);okr=r(vNt,"TFRobertaForMultipleChoice"),vNt.forEach(t),rkr=r(rGe," (RoBERTa model)"),rGe.forEach(t),tkr=i(Te),jE=n(Te,"LI",{});var tGe=s(jE);fMe=n(tGe,"STRONG",{});var FNt=s(fMe);akr=r(FNt,"roformer"),FNt.forEach(t),nkr=r(tGe," \u2014 "),RK=n(tGe,"A",{href:!0});var TNt=s(RK);skr=r(TNt,"TFRoFormerForMultipleChoice"),TNt.forEach(t),lkr=r(tGe," (RoFormer model)"),tGe.forEach(t),ikr=i(Te),DE=n(Te,"LI",{});var aGe=s(DE);mMe=n(aGe,"STRONG",{});var MNt=s(mMe);dkr=r(MNt,"xlm"),MNt.forEach(t),ckr=r(aGe," \u2014 "),PK=n(aGe,"A",{href:!0});var ENt=s(PK);fkr=r(ENt,"TFXLMForMultipleChoice"),ENt.forEach(t),mkr=r(aGe," (XLM model)"),aGe.forEach(t),gkr=i(Te),GE=n(Te,"LI",{});var nGe=s(GE);gMe=n(nGe,"STRONG",{});var CNt=s(gMe);hkr=r(CNt,"xlm-roberta"),CNt.forEach(t),pkr=r(nGe," \u2014 "),BK=n(nGe,"A",{href:!0});var wNt=s(BK);_kr=r(wNt,"TFXLMRobertaForMultipleChoice"),wNt.forEach(t),ukr=r(nGe," (XLM-RoBERTa model)"),nGe.forEach(t),bkr=i(Te),OE=n(Te,"LI",{});var sGe=s(OE);hMe=n(sGe,"STRONG",{});var ANt=s(hMe);vkr=r(ANt,"xlnet"),ANt.forEach(t),Fkr=r(sGe," \u2014 "),NK=n(sGe,"A",{href:!0});var LNt=s(NK);Tkr=r(LNt,"TFXLNetForMultipleChoice"),LNt.forEach(t),Mkr=r(sGe," (XLNet model)"),sGe.forEach(t),Te.forEach(t),Ekr=i(Vl),T(VE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Eze=i(f),xc=n(f,"H2",{class:!0});var kWe=s(xc);XE=n(kWe,"A",{id:!0,class:!0,href:!0});var yNt=s(XE);pMe=n(yNt,"SPAN",{});var xNt=s(pMe);T(kx.$$.fragment,xNt),xNt.forEach(t),yNt.forEach(t),Ckr=i(kWe),_Me=n(kWe,"SPAN",{});var $Nt=s(_Me);wkr=r($Nt,"TFAutoModelForNextSentencePrediction"),$Nt.forEach(t),kWe.forEach(t),Cze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(Sx.$$.fragment,Xl),Akr=i(Xl),$c=n(Xl,"P",{});var Ote=s($c);Lkr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IK=n(Ote,"A",{href:!0});var kNt=s(IK);ykr=r(kNt,"from_pretrained()"),kNt.forEach(t),xkr=r(Ote," class method or the "),qK=n(Ote,"A",{href:!0});var SNt=s(qK);$kr=r(SNt,"from_config()"),SNt.forEach(t),kkr=r(Ote,` class
method.`),Ote.forEach(t),Skr=i(Xl),Rx=n(Xl,"P",{});var SWe=s(Rx);Rkr=r(SWe,"This class cannot be instantiated directly using "),uMe=n(SWe,"CODE",{});var RNt=s(uMe);Pkr=r(RNt,"__init__()"),RNt.forEach(t),Bkr=r(SWe," (throws an error)."),SWe.forEach(t),Nkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var v6=s(Dt);T(Px.$$.fragment,v6),Ikr=i(v6),bMe=n(v6,"P",{});var PNt=s(bMe);qkr=r(PNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PNt.forEach(t),jkr=i(v6),kc=n(v6,"P",{});var Vte=s(kc);Dkr=r(Vte,`Note:
Loading a model from its configuration file does `),vMe=n(Vte,"STRONG",{});var BNt=s(vMe);Gkr=r(BNt,"not"),BNt.forEach(t),Okr=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(Vte,"A",{href:!0});var NNt=s(jK);Vkr=r(NNt,"from_pretrained()"),NNt.forEach(t),Xkr=r(Vte," to load the model weights."),Vte.forEach(t),zkr=i(v6),T(zE.$$.fragment,v6),v6.forEach(t),Qkr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Bx.$$.fragment,zl),Wkr=i(zl),FMe=n(zl,"P",{});var INt=s(FMe);Hkr=r(INt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),INt.forEach(t),Ukr=i(zl),pn=n(zl,"P",{});var F6=s(pn);Jkr=r(F6,"The model class to instantiate is selected based on the "),TMe=n(F6,"CODE",{});var qNt=s(TMe);Ykr=r(qNt,"model_type"),qNt.forEach(t),Kkr=r(F6,` property of the config object (either
passed as an argument or loaded from `),MMe=n(F6,"CODE",{});var jNt=s(MMe);Zkr=r(jNt,"pretrained_model_name_or_path"),jNt.forEach(t),eSr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=n(F6,"CODE",{});var DNt=s(EMe);oSr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),rSr=r(F6,":"),F6.forEach(t),tSr=i(zl),Nx=n(zl,"UL",{});var RWe=s(Nx);QE=n(RWe,"LI",{});var lGe=s(QE);CMe=n(lGe,"STRONG",{});var GNt=s(CMe);aSr=r(GNt,"bert"),GNt.forEach(t),nSr=r(lGe," \u2014 "),DK=n(lGe,"A",{href:!0});var ONt=s(DK);sSr=r(ONt,"TFBertForNextSentencePrediction"),ONt.forEach(t),lSr=r(lGe," (BERT model)"),lGe.forEach(t),iSr=i(RWe),WE=n(RWe,"LI",{});var iGe=s(WE);wMe=n(iGe,"STRONG",{});var VNt=s(wMe);dSr=r(VNt,"mobilebert"),VNt.forEach(t),cSr=r(iGe," \u2014 "),GK=n(iGe,"A",{href:!0});var XNt=s(GK);fSr=r(XNt,"TFMobileBertForNextSentencePrediction"),XNt.forEach(t),mSr=r(iGe," (MobileBERT model)"),iGe.forEach(t),RWe.forEach(t),gSr=i(zl),T(HE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),wze=i(f),Sc=n(f,"H2",{class:!0});var PWe=s(Sc);UE=n(PWe,"A",{id:!0,class:!0,href:!0});var zNt=s(UE);AMe=n(zNt,"SPAN",{});var QNt=s(AMe);T(Ix.$$.fragment,QNt),QNt.forEach(t),zNt.forEach(t),hSr=i(PWe),LMe=n(PWe,"SPAN",{});var WNt=s(LMe);pSr=r(WNt,"TFAutoModelForTableQuestionAnswering"),WNt.forEach(t),PWe.forEach(t),Aze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(qx.$$.fragment,Ql),_Sr=i(Ql),Rc=n(Ql,"P",{});var Xte=s(Rc);uSr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OK=n(Xte,"A",{href:!0});var HNt=s(OK);bSr=r(HNt,"from_pretrained()"),HNt.forEach(t),vSr=r(Xte," class method or the "),VK=n(Xte,"A",{href:!0});var UNt=s(VK);FSr=r(UNt,"from_config()"),UNt.forEach(t),TSr=r(Xte,` class
method.`),Xte.forEach(t),MSr=i(Ql),jx=n(Ql,"P",{});var BWe=s(jx);ESr=r(BWe,"This class cannot be instantiated directly using "),yMe=n(BWe,"CODE",{});var JNt=s(yMe);CSr=r(JNt,"__init__()"),JNt.forEach(t),wSr=r(BWe," (throws an error)."),BWe.forEach(t),ASr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var T6=s(Gt);T(Dx.$$.fragment,T6),LSr=i(T6),xMe=n(T6,"P",{});var YNt=s(xMe);ySr=r(YNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YNt.forEach(t),xSr=i(T6),Pc=n(T6,"P",{});var zte=s(Pc);$Sr=r(zte,`Note:
Loading a model from its configuration file does `),$Me=n(zte,"STRONG",{});var KNt=s($Me);kSr=r(KNt,"not"),KNt.forEach(t),SSr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(zte,"A",{href:!0});var ZNt=s(XK);RSr=r(ZNt,"from_pretrained()"),ZNt.forEach(t),PSr=r(zte," to load the model weights."),zte.forEach(t),BSr=i(T6),T(JE.$$.fragment,T6),T6.forEach(t),NSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Gx.$$.fragment,Wl),ISr=i(Wl),kMe=n(Wl,"P",{});var eIt=s(kMe);qSr=r(eIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eIt.forEach(t),jSr=i(Wl),_n=n(Wl,"P",{});var M6=s(_n);DSr=r(M6,"The model class to instantiate is selected based on the "),SMe=n(M6,"CODE",{});var oIt=s(SMe);GSr=r(oIt,"model_type"),oIt.forEach(t),OSr=r(M6,` property of the config object (either
passed as an argument or loaded from `),RMe=n(M6,"CODE",{});var rIt=s(RMe);VSr=r(rIt,"pretrained_model_name_or_path"),rIt.forEach(t),XSr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(M6,"CODE",{});var tIt=s(PMe);zSr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),QSr=r(M6,":"),M6.forEach(t),WSr=i(Wl),BMe=n(Wl,"UL",{});var aIt=s(BMe);YE=n(aIt,"LI",{});var dGe=s(YE);NMe=n(dGe,"STRONG",{});var nIt=s(NMe);HSr=r(nIt,"tapas"),nIt.forEach(t),USr=r(dGe," \u2014 "),zK=n(dGe,"A",{href:!0});var sIt=s(zK);JSr=r(sIt,"TFTapasForQuestionAnswering"),sIt.forEach(t),YSr=r(dGe," (TAPAS model)"),dGe.forEach(t),aIt.forEach(t),KSr=i(Wl),T(KE.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Lze=i(f),Bc=n(f,"H2",{class:!0});var NWe=s(Bc);ZE=n(NWe,"A",{id:!0,class:!0,href:!0});var lIt=s(ZE);IMe=n(lIt,"SPAN",{});var iIt=s(IMe);T(Ox.$$.fragment,iIt),iIt.forEach(t),lIt.forEach(t),ZSr=i(NWe),qMe=n(NWe,"SPAN",{});var dIt=s(qMe);eRr=r(dIt,"TFAutoModelForTokenClassification"),dIt.forEach(t),NWe.forEach(t),yze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Vx.$$.fragment,Hl),oRr=i(Hl),Nc=n(Hl,"P",{});var Qte=s(Nc);rRr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QK=n(Qte,"A",{href:!0});var cIt=s(QK);tRr=r(cIt,"from_pretrained()"),cIt.forEach(t),aRr=r(Qte," class method or the "),WK=n(Qte,"A",{href:!0});var fIt=s(WK);nRr=r(fIt,"from_config()"),fIt.forEach(t),sRr=r(Qte,` class
method.`),Qte.forEach(t),lRr=i(Hl),Xx=n(Hl,"P",{});var IWe=s(Xx);iRr=r(IWe,"This class cannot be instantiated directly using "),jMe=n(IWe,"CODE",{});var mIt=s(jMe);dRr=r(mIt,"__init__()"),mIt.forEach(t),cRr=r(IWe," (throws an error)."),IWe.forEach(t),fRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var E6=s(Ot);T(zx.$$.fragment,E6),mRr=i(E6),DMe=n(E6,"P",{});var gIt=s(DMe);gRr=r(gIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gIt.forEach(t),hRr=i(E6),Ic=n(E6,"P",{});var Wte=s(Ic);pRr=r(Wte,`Note:
Loading a model from its configuration file does `),GMe=n(Wte,"STRONG",{});var hIt=s(GMe);_Rr=r(hIt,"not"),hIt.forEach(t),uRr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Wte,"A",{href:!0});var pIt=s(HK);bRr=r(pIt,"from_pretrained()"),pIt.forEach(t),vRr=r(Wte," to load the model weights."),Wte.forEach(t),FRr=i(E6),T(eC.$$.fragment,E6),E6.forEach(t),TRr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Qx.$$.fragment,Ul),MRr=i(Ul),OMe=n(Ul,"P",{});var _It=s(OMe);ERr=r(_It,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_It.forEach(t),CRr=i(Ul),un=n(Ul,"P",{});var C6=s(un);wRr=r(C6,"The model class to instantiate is selected based on the "),VMe=n(C6,"CODE",{});var uIt=s(VMe);ARr=r(uIt,"model_type"),uIt.forEach(t),LRr=r(C6,` property of the config object (either
passed as an argument or loaded from `),XMe=n(C6,"CODE",{});var bIt=s(XMe);yRr=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),xRr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n(C6,"CODE",{});var vIt=s(zMe);$Rr=r(vIt,"pretrained_model_name_or_path"),vIt.forEach(t),kRr=r(C6,":"),C6.forEach(t),SRr=i(Ul),de=n(Ul,"UL",{});var me=s(de);oC=n(me,"LI",{});var cGe=s(oC);QMe=n(cGe,"STRONG",{});var FIt=s(QMe);RRr=r(FIt,"albert"),FIt.forEach(t),PRr=r(cGe," \u2014 "),UK=n(cGe,"A",{href:!0});var TIt=s(UK);BRr=r(TIt,"TFAlbertForTokenClassification"),TIt.forEach(t),NRr=r(cGe," (ALBERT model)"),cGe.forEach(t),IRr=i(me),rC=n(me,"LI",{});var fGe=s(rC);WMe=n(fGe,"STRONG",{});var MIt=s(WMe);qRr=r(MIt,"bert"),MIt.forEach(t),jRr=r(fGe," \u2014 "),JK=n(fGe,"A",{href:!0});var EIt=s(JK);DRr=r(EIt,"TFBertForTokenClassification"),EIt.forEach(t),GRr=r(fGe," (BERT model)"),fGe.forEach(t),ORr=i(me),tC=n(me,"LI",{});var mGe=s(tC);HMe=n(mGe,"STRONG",{});var CIt=s(HMe);VRr=r(CIt,"camembert"),CIt.forEach(t),XRr=r(mGe," \u2014 "),YK=n(mGe,"A",{href:!0});var wIt=s(YK);zRr=r(wIt,"TFCamembertForTokenClassification"),wIt.forEach(t),QRr=r(mGe," (CamemBERT model)"),mGe.forEach(t),WRr=i(me),aC=n(me,"LI",{});var gGe=s(aC);UMe=n(gGe,"STRONG",{});var AIt=s(UMe);HRr=r(AIt,"convbert"),AIt.forEach(t),URr=r(gGe," \u2014 "),KK=n(gGe,"A",{href:!0});var LIt=s(KK);JRr=r(LIt,"TFConvBertForTokenClassification"),LIt.forEach(t),YRr=r(gGe," (ConvBERT model)"),gGe.forEach(t),KRr=i(me),nC=n(me,"LI",{});var hGe=s(nC);JMe=n(hGe,"STRONG",{});var yIt=s(JMe);ZRr=r(yIt,"deberta"),yIt.forEach(t),ePr=r(hGe," \u2014 "),ZK=n(hGe,"A",{href:!0});var xIt=s(ZK);oPr=r(xIt,"TFDebertaForTokenClassification"),xIt.forEach(t),rPr=r(hGe," (DeBERTa model)"),hGe.forEach(t),tPr=i(me),sC=n(me,"LI",{});var pGe=s(sC);YMe=n(pGe,"STRONG",{});var $It=s(YMe);aPr=r($It,"deberta-v2"),$It.forEach(t),nPr=r(pGe," \u2014 "),eZ=n(pGe,"A",{href:!0});var kIt=s(eZ);sPr=r(kIt,"TFDebertaV2ForTokenClassification"),kIt.forEach(t),lPr=r(pGe," (DeBERTa-v2 model)"),pGe.forEach(t),iPr=i(me),lC=n(me,"LI",{});var _Ge=s(lC);KMe=n(_Ge,"STRONG",{});var SIt=s(KMe);dPr=r(SIt,"distilbert"),SIt.forEach(t),cPr=r(_Ge," \u2014 "),oZ=n(_Ge,"A",{href:!0});var RIt=s(oZ);fPr=r(RIt,"TFDistilBertForTokenClassification"),RIt.forEach(t),mPr=r(_Ge," (DistilBERT model)"),_Ge.forEach(t),gPr=i(me),iC=n(me,"LI",{});var uGe=s(iC);ZMe=n(uGe,"STRONG",{});var PIt=s(ZMe);hPr=r(PIt,"electra"),PIt.forEach(t),pPr=r(uGe," \u2014 "),rZ=n(uGe,"A",{href:!0});var BIt=s(rZ);_Pr=r(BIt,"TFElectraForTokenClassification"),BIt.forEach(t),uPr=r(uGe," (ELECTRA model)"),uGe.forEach(t),bPr=i(me),dC=n(me,"LI",{});var bGe=s(dC);eEe=n(bGe,"STRONG",{});var NIt=s(eEe);vPr=r(NIt,"flaubert"),NIt.forEach(t),FPr=r(bGe," \u2014 "),tZ=n(bGe,"A",{href:!0});var IIt=s(tZ);TPr=r(IIt,"TFFlaubertForTokenClassification"),IIt.forEach(t),MPr=r(bGe," (FlauBERT model)"),bGe.forEach(t),EPr=i(me),cC=n(me,"LI",{});var vGe=s(cC);oEe=n(vGe,"STRONG",{});var qIt=s(oEe);CPr=r(qIt,"funnel"),qIt.forEach(t),wPr=r(vGe," \u2014 "),aZ=n(vGe,"A",{href:!0});var jIt=s(aZ);APr=r(jIt,"TFFunnelForTokenClassification"),jIt.forEach(t),LPr=r(vGe," (Funnel Transformer model)"),vGe.forEach(t),yPr=i(me),fC=n(me,"LI",{});var FGe=s(fC);rEe=n(FGe,"STRONG",{});var DIt=s(rEe);xPr=r(DIt,"layoutlm"),DIt.forEach(t),$Pr=r(FGe," \u2014 "),nZ=n(FGe,"A",{href:!0});var GIt=s(nZ);kPr=r(GIt,"TFLayoutLMForTokenClassification"),GIt.forEach(t),SPr=r(FGe," (LayoutLM model)"),FGe.forEach(t),RPr=i(me),mC=n(me,"LI",{});var TGe=s(mC);tEe=n(TGe,"STRONG",{});var OIt=s(tEe);PPr=r(OIt,"longformer"),OIt.forEach(t),BPr=r(TGe," \u2014 "),sZ=n(TGe,"A",{href:!0});var VIt=s(sZ);NPr=r(VIt,"TFLongformerForTokenClassification"),VIt.forEach(t),IPr=r(TGe," (Longformer model)"),TGe.forEach(t),qPr=i(me),gC=n(me,"LI",{});var MGe=s(gC);aEe=n(MGe,"STRONG",{});var XIt=s(aEe);jPr=r(XIt,"mobilebert"),XIt.forEach(t),DPr=r(MGe," \u2014 "),lZ=n(MGe,"A",{href:!0});var zIt=s(lZ);GPr=r(zIt,"TFMobileBertForTokenClassification"),zIt.forEach(t),OPr=r(MGe," (MobileBERT model)"),MGe.forEach(t),VPr=i(me),hC=n(me,"LI",{});var EGe=s(hC);nEe=n(EGe,"STRONG",{});var QIt=s(nEe);XPr=r(QIt,"mpnet"),QIt.forEach(t),zPr=r(EGe," \u2014 "),iZ=n(EGe,"A",{href:!0});var WIt=s(iZ);QPr=r(WIt,"TFMPNetForTokenClassification"),WIt.forEach(t),WPr=r(EGe," (MPNet model)"),EGe.forEach(t),HPr=i(me),pC=n(me,"LI",{});var CGe=s(pC);sEe=n(CGe,"STRONG",{});var HIt=s(sEe);UPr=r(HIt,"rembert"),HIt.forEach(t),JPr=r(CGe," \u2014 "),dZ=n(CGe,"A",{href:!0});var UIt=s(dZ);YPr=r(UIt,"TFRemBertForTokenClassification"),UIt.forEach(t),KPr=r(CGe," (RemBERT model)"),CGe.forEach(t),ZPr=i(me),_C=n(me,"LI",{});var wGe=s(_C);lEe=n(wGe,"STRONG",{});var JIt=s(lEe);eBr=r(JIt,"roberta"),JIt.forEach(t),oBr=r(wGe," \u2014 "),cZ=n(wGe,"A",{href:!0});var YIt=s(cZ);rBr=r(YIt,"TFRobertaForTokenClassification"),YIt.forEach(t),tBr=r(wGe," (RoBERTa model)"),wGe.forEach(t),aBr=i(me),uC=n(me,"LI",{});var AGe=s(uC);iEe=n(AGe,"STRONG",{});var KIt=s(iEe);nBr=r(KIt,"roformer"),KIt.forEach(t),sBr=r(AGe," \u2014 "),fZ=n(AGe,"A",{href:!0});var ZIt=s(fZ);lBr=r(ZIt,"TFRoFormerForTokenClassification"),ZIt.forEach(t),iBr=r(AGe," (RoFormer model)"),AGe.forEach(t),dBr=i(me),bC=n(me,"LI",{});var LGe=s(bC);dEe=n(LGe,"STRONG",{});var eqt=s(dEe);cBr=r(eqt,"xlm"),eqt.forEach(t),fBr=r(LGe," \u2014 "),mZ=n(LGe,"A",{href:!0});var oqt=s(mZ);mBr=r(oqt,"TFXLMForTokenClassification"),oqt.forEach(t),gBr=r(LGe," (XLM model)"),LGe.forEach(t),hBr=i(me),vC=n(me,"LI",{});var yGe=s(vC);cEe=n(yGe,"STRONG",{});var rqt=s(cEe);pBr=r(rqt,"xlm-roberta"),rqt.forEach(t),_Br=r(yGe," \u2014 "),gZ=n(yGe,"A",{href:!0});var tqt=s(gZ);uBr=r(tqt,"TFXLMRobertaForTokenClassification"),tqt.forEach(t),bBr=r(yGe," (XLM-RoBERTa model)"),yGe.forEach(t),vBr=i(me),FC=n(me,"LI",{});var xGe=s(FC);fEe=n(xGe,"STRONG",{});var aqt=s(fEe);FBr=r(aqt,"xlnet"),aqt.forEach(t),TBr=r(xGe," \u2014 "),hZ=n(xGe,"A",{href:!0});var nqt=s(hZ);MBr=r(nqt,"TFXLNetForTokenClassification"),nqt.forEach(t),EBr=r(xGe," (XLNet model)"),xGe.forEach(t),me.forEach(t),CBr=i(Ul),T(TC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),xze=i(f),qc=n(f,"H2",{class:!0});var qWe=s(qc);MC=n(qWe,"A",{id:!0,class:!0,href:!0});var sqt=s(MC);mEe=n(sqt,"SPAN",{});var lqt=s(mEe);T(Wx.$$.fragment,lqt),lqt.forEach(t),sqt.forEach(t),wBr=i(qWe),gEe=n(qWe,"SPAN",{});var iqt=s(gEe);ABr=r(iqt,"TFAutoModelForQuestionAnswering"),iqt.forEach(t),qWe.forEach(t),$ze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Hx.$$.fragment,Jl),LBr=i(Jl),jc=n(Jl,"P",{});var Hte=s(jc);yBr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pZ=n(Hte,"A",{href:!0});var dqt=s(pZ);xBr=r(dqt,"from_pretrained()"),dqt.forEach(t),$Br=r(Hte," class method or the "),_Z=n(Hte,"A",{href:!0});var cqt=s(_Z);kBr=r(cqt,"from_config()"),cqt.forEach(t),SBr=r(Hte,` class
method.`),Hte.forEach(t),RBr=i(Jl),Ux=n(Jl,"P",{});var jWe=s(Ux);PBr=r(jWe,"This class cannot be instantiated directly using "),hEe=n(jWe,"CODE",{});var fqt=s(hEe);BBr=r(fqt,"__init__()"),fqt.forEach(t),NBr=r(jWe," (throws an error)."),jWe.forEach(t),IBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var w6=s(Vt);T(Jx.$$.fragment,w6),qBr=i(w6),pEe=n(w6,"P",{});var mqt=s(pEe);jBr=r(mqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mqt.forEach(t),DBr=i(w6),Dc=n(w6,"P",{});var Ute=s(Dc);GBr=r(Ute,`Note:
Loading a model from its configuration file does `),_Ee=n(Ute,"STRONG",{});var gqt=s(_Ee);OBr=r(gqt,"not"),gqt.forEach(t),VBr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Ute,"A",{href:!0});var hqt=s(uZ);XBr=r(hqt,"from_pretrained()"),hqt.forEach(t),zBr=r(Ute," to load the model weights."),Ute.forEach(t),QBr=i(w6),T(EC.$$.fragment,w6),w6.forEach(t),WBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Yx.$$.fragment,Yl),HBr=i(Yl),uEe=n(Yl,"P",{});var pqt=s(uEe);UBr=r(pqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pqt.forEach(t),JBr=i(Yl),bn=n(Yl,"P",{});var A6=s(bn);YBr=r(A6,"The model class to instantiate is selected based on the "),bEe=n(A6,"CODE",{});var _qt=s(bEe);KBr=r(_qt,"model_type"),_qt.forEach(t),ZBr=r(A6,` property of the config object (either
passed as an argument or loaded from `),vEe=n(A6,"CODE",{});var uqt=s(vEe);eNr=r(uqt,"pretrained_model_name_or_path"),uqt.forEach(t),oNr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(A6,"CODE",{});var bqt=s(FEe);rNr=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),tNr=r(A6,":"),A6.forEach(t),aNr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);CC=n(ge,"LI",{});var $Ge=s(CC);TEe=n($Ge,"STRONG",{});var vqt=s(TEe);nNr=r(vqt,"albert"),vqt.forEach(t),sNr=r($Ge," \u2014 "),bZ=n($Ge,"A",{href:!0});var Fqt=s(bZ);lNr=r(Fqt,"TFAlbertForQuestionAnswering"),Fqt.forEach(t),iNr=r($Ge," (ALBERT model)"),$Ge.forEach(t),dNr=i(ge),wC=n(ge,"LI",{});var kGe=s(wC);MEe=n(kGe,"STRONG",{});var Tqt=s(MEe);cNr=r(Tqt,"bert"),Tqt.forEach(t),fNr=r(kGe," \u2014 "),vZ=n(kGe,"A",{href:!0});var Mqt=s(vZ);mNr=r(Mqt,"TFBertForQuestionAnswering"),Mqt.forEach(t),gNr=r(kGe," (BERT model)"),kGe.forEach(t),hNr=i(ge),AC=n(ge,"LI",{});var SGe=s(AC);EEe=n(SGe,"STRONG",{});var Eqt=s(EEe);pNr=r(Eqt,"camembert"),Eqt.forEach(t),_Nr=r(SGe," \u2014 "),FZ=n(SGe,"A",{href:!0});var Cqt=s(FZ);uNr=r(Cqt,"TFCamembertForQuestionAnswering"),Cqt.forEach(t),bNr=r(SGe," (CamemBERT model)"),SGe.forEach(t),vNr=i(ge),LC=n(ge,"LI",{});var RGe=s(LC);CEe=n(RGe,"STRONG",{});var wqt=s(CEe);FNr=r(wqt,"convbert"),wqt.forEach(t),TNr=r(RGe," \u2014 "),TZ=n(RGe,"A",{href:!0});var Aqt=s(TZ);MNr=r(Aqt,"TFConvBertForQuestionAnswering"),Aqt.forEach(t),ENr=r(RGe," (ConvBERT model)"),RGe.forEach(t),CNr=i(ge),yC=n(ge,"LI",{});var PGe=s(yC);wEe=n(PGe,"STRONG",{});var Lqt=s(wEe);wNr=r(Lqt,"deberta"),Lqt.forEach(t),ANr=r(PGe," \u2014 "),MZ=n(PGe,"A",{href:!0});var yqt=s(MZ);LNr=r(yqt,"TFDebertaForQuestionAnswering"),yqt.forEach(t),yNr=r(PGe," (DeBERTa model)"),PGe.forEach(t),xNr=i(ge),xC=n(ge,"LI",{});var BGe=s(xC);AEe=n(BGe,"STRONG",{});var xqt=s(AEe);$Nr=r(xqt,"deberta-v2"),xqt.forEach(t),kNr=r(BGe," \u2014 "),EZ=n(BGe,"A",{href:!0});var $qt=s(EZ);SNr=r($qt,"TFDebertaV2ForQuestionAnswering"),$qt.forEach(t),RNr=r(BGe," (DeBERTa-v2 model)"),BGe.forEach(t),PNr=i(ge),$C=n(ge,"LI",{});var NGe=s($C);LEe=n(NGe,"STRONG",{});var kqt=s(LEe);BNr=r(kqt,"distilbert"),kqt.forEach(t),NNr=r(NGe," \u2014 "),CZ=n(NGe,"A",{href:!0});var Sqt=s(CZ);INr=r(Sqt,"TFDistilBertForQuestionAnswering"),Sqt.forEach(t),qNr=r(NGe," (DistilBERT model)"),NGe.forEach(t),jNr=i(ge),kC=n(ge,"LI",{});var IGe=s(kC);yEe=n(IGe,"STRONG",{});var Rqt=s(yEe);DNr=r(Rqt,"electra"),Rqt.forEach(t),GNr=r(IGe," \u2014 "),wZ=n(IGe,"A",{href:!0});var Pqt=s(wZ);ONr=r(Pqt,"TFElectraForQuestionAnswering"),Pqt.forEach(t),VNr=r(IGe," (ELECTRA model)"),IGe.forEach(t),XNr=i(ge),SC=n(ge,"LI",{});var qGe=s(SC);xEe=n(qGe,"STRONG",{});var Bqt=s(xEe);zNr=r(Bqt,"flaubert"),Bqt.forEach(t),QNr=r(qGe," \u2014 "),AZ=n(qGe,"A",{href:!0});var Nqt=s(AZ);WNr=r(Nqt,"TFFlaubertForQuestionAnsweringSimple"),Nqt.forEach(t),HNr=r(qGe," (FlauBERT model)"),qGe.forEach(t),UNr=i(ge),RC=n(ge,"LI",{});var jGe=s(RC);$Ee=n(jGe,"STRONG",{});var Iqt=s($Ee);JNr=r(Iqt,"funnel"),Iqt.forEach(t),YNr=r(jGe," \u2014 "),LZ=n(jGe,"A",{href:!0});var qqt=s(LZ);KNr=r(qqt,"TFFunnelForQuestionAnswering"),qqt.forEach(t),ZNr=r(jGe," (Funnel Transformer model)"),jGe.forEach(t),eIr=i(ge),PC=n(ge,"LI",{});var DGe=s(PC);kEe=n(DGe,"STRONG",{});var jqt=s(kEe);oIr=r(jqt,"gptj"),jqt.forEach(t),rIr=r(DGe," \u2014 "),yZ=n(DGe,"A",{href:!0});var Dqt=s(yZ);tIr=r(Dqt,"TFGPTJForQuestionAnswering"),Dqt.forEach(t),aIr=r(DGe," (GPT-J model)"),DGe.forEach(t),nIr=i(ge),BC=n(ge,"LI",{});var GGe=s(BC);SEe=n(GGe,"STRONG",{});var Gqt=s(SEe);sIr=r(Gqt,"longformer"),Gqt.forEach(t),lIr=r(GGe," \u2014 "),xZ=n(GGe,"A",{href:!0});var Oqt=s(xZ);iIr=r(Oqt,"TFLongformerForQuestionAnswering"),Oqt.forEach(t),dIr=r(GGe," (Longformer model)"),GGe.forEach(t),cIr=i(ge),NC=n(ge,"LI",{});var OGe=s(NC);REe=n(OGe,"STRONG",{});var Vqt=s(REe);fIr=r(Vqt,"mobilebert"),Vqt.forEach(t),mIr=r(OGe," \u2014 "),$Z=n(OGe,"A",{href:!0});var Xqt=s($Z);gIr=r(Xqt,"TFMobileBertForQuestionAnswering"),Xqt.forEach(t),hIr=r(OGe," (MobileBERT model)"),OGe.forEach(t),pIr=i(ge),IC=n(ge,"LI",{});var VGe=s(IC);PEe=n(VGe,"STRONG",{});var zqt=s(PEe);_Ir=r(zqt,"mpnet"),zqt.forEach(t),uIr=r(VGe," \u2014 "),kZ=n(VGe,"A",{href:!0});var Qqt=s(kZ);bIr=r(Qqt,"TFMPNetForQuestionAnswering"),Qqt.forEach(t),vIr=r(VGe," (MPNet model)"),VGe.forEach(t),FIr=i(ge),qC=n(ge,"LI",{});var XGe=s(qC);BEe=n(XGe,"STRONG",{});var Wqt=s(BEe);TIr=r(Wqt,"rembert"),Wqt.forEach(t),MIr=r(XGe," \u2014 "),SZ=n(XGe,"A",{href:!0});var Hqt=s(SZ);EIr=r(Hqt,"TFRemBertForQuestionAnswering"),Hqt.forEach(t),CIr=r(XGe," (RemBERT model)"),XGe.forEach(t),wIr=i(ge),jC=n(ge,"LI",{});var zGe=s(jC);NEe=n(zGe,"STRONG",{});var Uqt=s(NEe);AIr=r(Uqt,"roberta"),Uqt.forEach(t),LIr=r(zGe," \u2014 "),RZ=n(zGe,"A",{href:!0});var Jqt=s(RZ);yIr=r(Jqt,"TFRobertaForQuestionAnswering"),Jqt.forEach(t),xIr=r(zGe," (RoBERTa model)"),zGe.forEach(t),$Ir=i(ge),DC=n(ge,"LI",{});var QGe=s(DC);IEe=n(QGe,"STRONG",{});var Yqt=s(IEe);kIr=r(Yqt,"roformer"),Yqt.forEach(t),SIr=r(QGe," \u2014 "),PZ=n(QGe,"A",{href:!0});var Kqt=s(PZ);RIr=r(Kqt,"TFRoFormerForQuestionAnswering"),Kqt.forEach(t),PIr=r(QGe," (RoFormer model)"),QGe.forEach(t),BIr=i(ge),GC=n(ge,"LI",{});var WGe=s(GC);qEe=n(WGe,"STRONG",{});var Zqt=s(qEe);NIr=r(Zqt,"xlm"),Zqt.forEach(t),IIr=r(WGe," \u2014 "),BZ=n(WGe,"A",{href:!0});var ejt=s(BZ);qIr=r(ejt,"TFXLMForQuestionAnsweringSimple"),ejt.forEach(t),jIr=r(WGe," (XLM model)"),WGe.forEach(t),DIr=i(ge),OC=n(ge,"LI",{});var HGe=s(OC);jEe=n(HGe,"STRONG",{});var ojt=s(jEe);GIr=r(ojt,"xlm-roberta"),ojt.forEach(t),OIr=r(HGe," \u2014 "),NZ=n(HGe,"A",{href:!0});var rjt=s(NZ);VIr=r(rjt,"TFXLMRobertaForQuestionAnswering"),rjt.forEach(t),XIr=r(HGe," (XLM-RoBERTa model)"),HGe.forEach(t),zIr=i(ge),VC=n(ge,"LI",{});var UGe=s(VC);DEe=n(UGe,"STRONG",{});var tjt=s(DEe);QIr=r(tjt,"xlnet"),tjt.forEach(t),WIr=r(UGe," \u2014 "),IZ=n(UGe,"A",{href:!0});var ajt=s(IZ);HIr=r(ajt,"TFXLNetForQuestionAnsweringSimple"),ajt.forEach(t),UIr=r(UGe," (XLNet model)"),UGe.forEach(t),ge.forEach(t),JIr=i(Yl),T(XC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),kze=i(f),Gc=n(f,"H2",{class:!0});var DWe=s(Gc);zC=n(DWe,"A",{id:!0,class:!0,href:!0});var njt=s(zC);GEe=n(njt,"SPAN",{});var sjt=s(GEe);T(Kx.$$.fragment,sjt),sjt.forEach(t),njt.forEach(t),YIr=i(DWe),OEe=n(DWe,"SPAN",{});var ljt=s(OEe);KIr=r(ljt,"TFAutoModelForVision2Seq"),ljt.forEach(t),DWe.forEach(t),Sze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Zx.$$.fragment,Kl),ZIr=i(Kl),Oc=n(Kl,"P",{});var Jte=s(Oc);eqr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qZ=n(Jte,"A",{href:!0});var ijt=s(qZ);oqr=r(ijt,"from_pretrained()"),ijt.forEach(t),rqr=r(Jte," class method or the "),jZ=n(Jte,"A",{href:!0});var djt=s(jZ);tqr=r(djt,"from_config()"),djt.forEach(t),aqr=r(Jte,` class
method.`),Jte.forEach(t),nqr=i(Kl),e$=n(Kl,"P",{});var GWe=s(e$);sqr=r(GWe,"This class cannot be instantiated directly using "),VEe=n(GWe,"CODE",{});var cjt=s(VEe);lqr=r(cjt,"__init__()"),cjt.forEach(t),iqr=r(GWe," (throws an error)."),GWe.forEach(t),dqr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var L6=s(Xt);T(o$.$$.fragment,L6),cqr=i(L6),XEe=n(L6,"P",{});var fjt=s(XEe);fqr=r(fjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fjt.forEach(t),mqr=i(L6),Vc=n(L6,"P",{});var Yte=s(Vc);gqr=r(Yte,`Note:
Loading a model from its configuration file does `),zEe=n(Yte,"STRONG",{});var mjt=s(zEe);hqr=r(mjt,"not"),mjt.forEach(t),pqr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DZ=n(Yte,"A",{href:!0});var gjt=s(DZ);_qr=r(gjt,"from_pretrained()"),gjt.forEach(t),uqr=r(Yte," to load the model weights."),Yte.forEach(t),bqr=i(L6),T(QC.$$.fragment,L6),L6.forEach(t),vqr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(r$.$$.fragment,Zl),Fqr=i(Zl),QEe=n(Zl,"P",{});var hjt=s(QEe);Tqr=r(hjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hjt.forEach(t),Mqr=i(Zl),vn=n(Zl,"P",{});var y6=s(vn);Eqr=r(y6,"The model class to instantiate is selected based on the "),WEe=n(y6,"CODE",{});var pjt=s(WEe);Cqr=r(pjt,"model_type"),pjt.forEach(t),wqr=r(y6,` property of the config object (either
passed as an argument or loaded from `),HEe=n(y6,"CODE",{});var _jt=s(HEe);Aqr=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),Lqr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(y6,"CODE",{});var ujt=s(UEe);yqr=r(ujt,"pretrained_model_name_or_path"),ujt.forEach(t),xqr=r(y6,":"),y6.forEach(t),$qr=i(Zl),JEe=n(Zl,"UL",{});var bjt=s(JEe);WC=n(bjt,"LI",{});var JGe=s(WC);YEe=n(JGe,"STRONG",{});var vjt=s(YEe);kqr=r(vjt,"vision-encoder-decoder"),vjt.forEach(t),Sqr=r(JGe," \u2014 "),GZ=n(JGe,"A",{href:!0});var Fjt=s(GZ);Rqr=r(Fjt,"TFVisionEncoderDecoderModel"),Fjt.forEach(t),Pqr=r(JGe," (Vision Encoder decoder model)"),JGe.forEach(t),bjt.forEach(t),Bqr=i(Zl),T(HC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Rze=i(f),Xc=n(f,"H2",{class:!0});var OWe=s(Xc);UC=n(OWe,"A",{id:!0,class:!0,href:!0});var Tjt=s(UC);KEe=n(Tjt,"SPAN",{});var Mjt=s(KEe);T(t$.$$.fragment,Mjt),Mjt.forEach(t),Tjt.forEach(t),Nqr=i(OWe),ZEe=n(OWe,"SPAN",{});var Ejt=s(ZEe);Iqr=r(Ejt,"TFAutoModelForSpeechSeq2Seq"),Ejt.forEach(t),OWe.forEach(t),Pze=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(a$.$$.fragment,ei),qqr=i(ei),zc=n(ei,"P",{});var Kte=s(zc);jqr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OZ=n(Kte,"A",{href:!0});var Cjt=s(OZ);Dqr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),Gqr=r(Kte," class method or the "),VZ=n(Kte,"A",{href:!0});var wjt=s(VZ);Oqr=r(wjt,"from_config()"),wjt.forEach(t),Vqr=r(Kte,` class
method.`),Kte.forEach(t),Xqr=i(ei),n$=n(ei,"P",{});var VWe=s(n$);zqr=r(VWe,"This class cannot be instantiated directly using "),eCe=n(VWe,"CODE",{});var Ajt=s(eCe);Qqr=r(Ajt,"__init__()"),Ajt.forEach(t),Wqr=r(VWe," (throws an error)."),VWe.forEach(t),Hqr=i(ei),zt=n(ei,"DIV",{class:!0});var x6=s(zt);T(s$.$$.fragment,x6),Uqr=i(x6),oCe=n(x6,"P",{});var Ljt=s(oCe);Jqr=r(Ljt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ljt.forEach(t),Yqr=i(x6),Qc=n(x6,"P",{});var Zte=s(Qc);Kqr=r(Zte,`Note:
Loading a model from its configuration file does `),rCe=n(Zte,"STRONG",{});var yjt=s(rCe);Zqr=r(yjt,"not"),yjt.forEach(t),ejr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Zte,"A",{href:!0});var xjt=s(XZ);ojr=r(xjt,"from_pretrained()"),xjt.forEach(t),rjr=r(Zte," to load the model weights."),Zte.forEach(t),tjr=i(x6),T(JC.$$.fragment,x6),x6.forEach(t),ajr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(l$.$$.fragment,oi),njr=i(oi),tCe=n(oi,"P",{});var $jt=s(tCe);sjr=r($jt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$jt.forEach(t),ljr=i(oi),Fn=n(oi,"P",{});var $6=s(Fn);ijr=r($6,"The model class to instantiate is selected based on the "),aCe=n($6,"CODE",{});var kjt=s(aCe);djr=r(kjt,"model_type"),kjt.forEach(t),cjr=r($6,` property of the config object (either
passed as an argument or loaded from `),nCe=n($6,"CODE",{});var Sjt=s(nCe);fjr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),mjr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n($6,"CODE",{});var Rjt=s(sCe);gjr=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),hjr=r($6,":"),$6.forEach(t),pjr=i(oi),lCe=n(oi,"UL",{});var Pjt=s(lCe);YC=n(Pjt,"LI",{});var YGe=s(YC);iCe=n(YGe,"STRONG",{});var Bjt=s(iCe);_jr=r(Bjt,"speech_to_text"),Bjt.forEach(t),ujr=r(YGe," \u2014 "),zZ=n(YGe,"A",{href:!0});var Njt=s(zZ);bjr=r(Njt,"TFSpeech2TextForConditionalGeneration"),Njt.forEach(t),vjr=r(YGe," (Speech2Text model)"),YGe.forEach(t),Pjt.forEach(t),Fjr=i(oi),T(KC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Bze=i(f),Wc=n(f,"H2",{class:!0});var XWe=s(Wc);ZC=n(XWe,"A",{id:!0,class:!0,href:!0});var Ijt=s(ZC);dCe=n(Ijt,"SPAN",{});var qjt=s(dCe);T(i$.$$.fragment,qjt),qjt.forEach(t),Ijt.forEach(t),Tjr=i(XWe),cCe=n(XWe,"SPAN",{});var jjt=s(cCe);Mjr=r(jjt,"FlaxAutoModel"),jjt.forEach(t),XWe.forEach(t),Nze=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(d$.$$.fragment,ri),Ejr=i(ri),Hc=n(ri,"P",{});var eae=s(Hc);Cjr=r(eae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QZ=n(eae,"A",{href:!0});var Djt=s(QZ);wjr=r(Djt,"from_pretrained()"),Djt.forEach(t),Ajr=r(eae," class method or the "),WZ=n(eae,"A",{href:!0});var Gjt=s(WZ);Ljr=r(Gjt,"from_config()"),Gjt.forEach(t),yjr=r(eae,` class
method.`),eae.forEach(t),xjr=i(ri),c$=n(ri,"P",{});var zWe=s(c$);$jr=r(zWe,"This class cannot be instantiated directly using "),fCe=n(zWe,"CODE",{});var Ojt=s(fCe);kjr=r(Ojt,"__init__()"),Ojt.forEach(t),Sjr=r(zWe," (throws an error)."),zWe.forEach(t),Rjr=i(ri),Qt=n(ri,"DIV",{class:!0});var k6=s(Qt);T(f$.$$.fragment,k6),Pjr=i(k6),mCe=n(k6,"P",{});var Vjt=s(mCe);Bjr=r(Vjt,"Instantiates one of the base model classes of the library from a configuration."),Vjt.forEach(t),Njr=i(k6),Uc=n(k6,"P",{});var oae=s(Uc);Ijr=r(oae,`Note:
Loading a model from its configuration file does `),gCe=n(oae,"STRONG",{});var Xjt=s(gCe);qjr=r(Xjt,"not"),Xjt.forEach(t),jjr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(oae,"A",{href:!0});var zjt=s(HZ);Djr=r(zjt,"from_pretrained()"),zjt.forEach(t),Gjr=r(oae," to load the model weights."),oae.forEach(t),Ojr=i(k6),T(e3.$$.fragment,k6),k6.forEach(t),Vjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(m$.$$.fragment,ti),Xjr=i(ti),hCe=n(ti,"P",{});var Qjt=s(hCe);zjr=r(Qjt,"Instantiate one of the base model classes of the library from a pretrained model."),Qjt.forEach(t),Qjr=i(ti),Tn=n(ti,"P",{});var S6=s(Tn);Wjr=r(S6,"The model class to instantiate is selected based on the "),pCe=n(S6,"CODE",{});var Wjt=s(pCe);Hjr=r(Wjt,"model_type"),Wjt.forEach(t),Ujr=r(S6,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(S6,"CODE",{});var Hjt=s(_Ce);Jjr=r(Hjt,"pretrained_model_name_or_path"),Hjt.forEach(t),Yjr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=n(S6,"CODE",{});var Ujt=s(uCe);Kjr=r(Ujt,"pretrained_model_name_or_path"),Ujt.forEach(t),Zjr=r(S6,":"),S6.forEach(t),eDr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);o3=n(ae,"LI",{});var KGe=s(o3);bCe=n(KGe,"STRONG",{});var Jjt=s(bCe);oDr=r(Jjt,"albert"),Jjt.forEach(t),rDr=r(KGe," \u2014 "),UZ=n(KGe,"A",{href:!0});var Yjt=s(UZ);tDr=r(Yjt,"FlaxAlbertModel"),Yjt.forEach(t),aDr=r(KGe," (ALBERT model)"),KGe.forEach(t),nDr=i(ae),r3=n(ae,"LI",{});var ZGe=s(r3);vCe=n(ZGe,"STRONG",{});var Kjt=s(vCe);sDr=r(Kjt,"bart"),Kjt.forEach(t),lDr=r(ZGe," \u2014 "),JZ=n(ZGe,"A",{href:!0});var Zjt=s(JZ);iDr=r(Zjt,"FlaxBartModel"),Zjt.forEach(t),dDr=r(ZGe," (BART model)"),ZGe.forEach(t),cDr=i(ae),t3=n(ae,"LI",{});var eOe=s(t3);FCe=n(eOe,"STRONG",{});var eDt=s(FCe);fDr=r(eDt,"beit"),eDt.forEach(t),mDr=r(eOe," \u2014 "),YZ=n(eOe,"A",{href:!0});var oDt=s(YZ);gDr=r(oDt,"FlaxBeitModel"),oDt.forEach(t),hDr=r(eOe," (BEiT model)"),eOe.forEach(t),pDr=i(ae),a3=n(ae,"LI",{});var oOe=s(a3);TCe=n(oOe,"STRONG",{});var rDt=s(TCe);_Dr=r(rDt,"bert"),rDt.forEach(t),uDr=r(oOe," \u2014 "),KZ=n(oOe,"A",{href:!0});var tDt=s(KZ);bDr=r(tDt,"FlaxBertModel"),tDt.forEach(t),vDr=r(oOe," (BERT model)"),oOe.forEach(t),FDr=i(ae),n3=n(ae,"LI",{});var rOe=s(n3);MCe=n(rOe,"STRONG",{});var aDt=s(MCe);TDr=r(aDt,"big_bird"),aDt.forEach(t),MDr=r(rOe," \u2014 "),ZZ=n(rOe,"A",{href:!0});var nDt=s(ZZ);EDr=r(nDt,"FlaxBigBirdModel"),nDt.forEach(t),CDr=r(rOe," (BigBird model)"),rOe.forEach(t),wDr=i(ae),s3=n(ae,"LI",{});var tOe=s(s3);ECe=n(tOe,"STRONG",{});var sDt=s(ECe);ADr=r(sDt,"blenderbot"),sDt.forEach(t),LDr=r(tOe," \u2014 "),eee=n(tOe,"A",{href:!0});var lDt=s(eee);yDr=r(lDt,"FlaxBlenderbotModel"),lDt.forEach(t),xDr=r(tOe," (Blenderbot model)"),tOe.forEach(t),$Dr=i(ae),l3=n(ae,"LI",{});var aOe=s(l3);CCe=n(aOe,"STRONG",{});var iDt=s(CCe);kDr=r(iDt,"blenderbot-small"),iDt.forEach(t),SDr=r(aOe," \u2014 "),oee=n(aOe,"A",{href:!0});var dDt=s(oee);RDr=r(dDt,"FlaxBlenderbotSmallModel"),dDt.forEach(t),PDr=r(aOe," (BlenderbotSmall model)"),aOe.forEach(t),BDr=i(ae),i3=n(ae,"LI",{});var nOe=s(i3);wCe=n(nOe,"STRONG",{});var cDt=s(wCe);NDr=r(cDt,"clip"),cDt.forEach(t),IDr=r(nOe," \u2014 "),ree=n(nOe,"A",{href:!0});var fDt=s(ree);qDr=r(fDt,"FlaxCLIPModel"),fDt.forEach(t),jDr=r(nOe," (CLIP model)"),nOe.forEach(t),DDr=i(ae),d3=n(ae,"LI",{});var sOe=s(d3);ACe=n(sOe,"STRONG",{});var mDt=s(ACe);GDr=r(mDt,"distilbert"),mDt.forEach(t),ODr=r(sOe," \u2014 "),tee=n(sOe,"A",{href:!0});var gDt=s(tee);VDr=r(gDt,"FlaxDistilBertModel"),gDt.forEach(t),XDr=r(sOe," (DistilBERT model)"),sOe.forEach(t),zDr=i(ae),c3=n(ae,"LI",{});var lOe=s(c3);LCe=n(lOe,"STRONG",{});var hDt=s(LCe);QDr=r(hDt,"electra"),hDt.forEach(t),WDr=r(lOe," \u2014 "),aee=n(lOe,"A",{href:!0});var pDt=s(aee);HDr=r(pDt,"FlaxElectraModel"),pDt.forEach(t),UDr=r(lOe," (ELECTRA model)"),lOe.forEach(t),JDr=i(ae),f3=n(ae,"LI",{});var iOe=s(f3);yCe=n(iOe,"STRONG",{});var _Dt=s(yCe);YDr=r(_Dt,"gpt2"),_Dt.forEach(t),KDr=r(iOe," \u2014 "),nee=n(iOe,"A",{href:!0});var uDt=s(nee);ZDr=r(uDt,"FlaxGPT2Model"),uDt.forEach(t),eGr=r(iOe," (OpenAI GPT-2 model)"),iOe.forEach(t),oGr=i(ae),m3=n(ae,"LI",{});var dOe=s(m3);xCe=n(dOe,"STRONG",{});var bDt=s(xCe);rGr=r(bDt,"gpt_neo"),bDt.forEach(t),tGr=r(dOe," \u2014 "),see=n(dOe,"A",{href:!0});var vDt=s(see);aGr=r(vDt,"FlaxGPTNeoModel"),vDt.forEach(t),nGr=r(dOe," (GPT Neo model)"),dOe.forEach(t),sGr=i(ae),g3=n(ae,"LI",{});var cOe=s(g3);$Ce=n(cOe,"STRONG",{});var FDt=s($Ce);lGr=r(FDt,"gptj"),FDt.forEach(t),iGr=r(cOe," \u2014 "),lee=n(cOe,"A",{href:!0});var TDt=s(lee);dGr=r(TDt,"FlaxGPTJModel"),TDt.forEach(t),cGr=r(cOe," (GPT-J model)"),cOe.forEach(t),fGr=i(ae),h3=n(ae,"LI",{});var fOe=s(h3);kCe=n(fOe,"STRONG",{});var MDt=s(kCe);mGr=r(MDt,"longt5"),MDt.forEach(t),gGr=r(fOe," \u2014 "),iee=n(fOe,"A",{href:!0});var EDt=s(iee);hGr=r(EDt,"FlaxLongT5Model"),EDt.forEach(t),pGr=r(fOe," (LongT5 model)"),fOe.forEach(t),_Gr=i(ae),p3=n(ae,"LI",{});var mOe=s(p3);SCe=n(mOe,"STRONG",{});var CDt=s(SCe);uGr=r(CDt,"marian"),CDt.forEach(t),bGr=r(mOe," \u2014 "),dee=n(mOe,"A",{href:!0});var wDt=s(dee);vGr=r(wDt,"FlaxMarianModel"),wDt.forEach(t),FGr=r(mOe," (Marian model)"),mOe.forEach(t),TGr=i(ae),_3=n(ae,"LI",{});var gOe=s(_3);RCe=n(gOe,"STRONG",{});var ADt=s(RCe);MGr=r(ADt,"mbart"),ADt.forEach(t),EGr=r(gOe," \u2014 "),cee=n(gOe,"A",{href:!0});var LDt=s(cee);CGr=r(LDt,"FlaxMBartModel"),LDt.forEach(t),wGr=r(gOe," (mBART model)"),gOe.forEach(t),AGr=i(ae),u3=n(ae,"LI",{});var hOe=s(u3);PCe=n(hOe,"STRONG",{});var yDt=s(PCe);LGr=r(yDt,"mt5"),yDt.forEach(t),yGr=r(hOe," \u2014 "),fee=n(hOe,"A",{href:!0});var xDt=s(fee);xGr=r(xDt,"FlaxMT5Model"),xDt.forEach(t),$Gr=r(hOe," (MT5 model)"),hOe.forEach(t),kGr=i(ae),b3=n(ae,"LI",{});var pOe=s(b3);BCe=n(pOe,"STRONG",{});var $Dt=s(BCe);SGr=r($Dt,"opt"),$Dt.forEach(t),RGr=r(pOe," \u2014 "),mee=n(pOe,"A",{href:!0});var kDt=s(mee);PGr=r(kDt,"FlaxOPTModel"),kDt.forEach(t),BGr=r(pOe," (OPT model)"),pOe.forEach(t),NGr=i(ae),v3=n(ae,"LI",{});var _Oe=s(v3);NCe=n(_Oe,"STRONG",{});var SDt=s(NCe);IGr=r(SDt,"pegasus"),SDt.forEach(t),qGr=r(_Oe," \u2014 "),gee=n(_Oe,"A",{href:!0});var RDt=s(gee);jGr=r(RDt,"FlaxPegasusModel"),RDt.forEach(t),DGr=r(_Oe," (Pegasus model)"),_Oe.forEach(t),GGr=i(ae),F3=n(ae,"LI",{});var uOe=s(F3);ICe=n(uOe,"STRONG",{});var PDt=s(ICe);OGr=r(PDt,"roberta"),PDt.forEach(t),VGr=r(uOe," \u2014 "),hee=n(uOe,"A",{href:!0});var BDt=s(hee);XGr=r(BDt,"FlaxRobertaModel"),BDt.forEach(t),zGr=r(uOe," (RoBERTa model)"),uOe.forEach(t),QGr=i(ae),T3=n(ae,"LI",{});var bOe=s(T3);qCe=n(bOe,"STRONG",{});var NDt=s(qCe);WGr=r(NDt,"roformer"),NDt.forEach(t),HGr=r(bOe," \u2014 "),pee=n(bOe,"A",{href:!0});var IDt=s(pee);UGr=r(IDt,"FlaxRoFormerModel"),IDt.forEach(t),JGr=r(bOe," (RoFormer model)"),bOe.forEach(t),YGr=i(ae),M3=n(ae,"LI",{});var vOe=s(M3);jCe=n(vOe,"STRONG",{});var qDt=s(jCe);KGr=r(qDt,"t5"),qDt.forEach(t),ZGr=r(vOe," \u2014 "),_ee=n(vOe,"A",{href:!0});var jDt=s(_ee);eOr=r(jDt,"FlaxT5Model"),jDt.forEach(t),oOr=r(vOe," (T5 model)"),vOe.forEach(t),rOr=i(ae),E3=n(ae,"LI",{});var FOe=s(E3);DCe=n(FOe,"STRONG",{});var DDt=s(DCe);tOr=r(DDt,"vision-text-dual-encoder"),DDt.forEach(t),aOr=r(FOe," \u2014 "),uee=n(FOe,"A",{href:!0});var GDt=s(uee);nOr=r(GDt,"FlaxVisionTextDualEncoderModel"),GDt.forEach(t),sOr=r(FOe," (VisionTextDualEncoder model)"),FOe.forEach(t),lOr=i(ae),C3=n(ae,"LI",{});var TOe=s(C3);GCe=n(TOe,"STRONG",{});var ODt=s(GCe);iOr=r(ODt,"vit"),ODt.forEach(t),dOr=r(TOe," \u2014 "),bee=n(TOe,"A",{href:!0});var VDt=s(bee);cOr=r(VDt,"FlaxViTModel"),VDt.forEach(t),fOr=r(TOe," (ViT model)"),TOe.forEach(t),mOr=i(ae),w3=n(ae,"LI",{});var MOe=s(w3);OCe=n(MOe,"STRONG",{});var XDt=s(OCe);gOr=r(XDt,"wav2vec2"),XDt.forEach(t),hOr=r(MOe," \u2014 "),vee=n(MOe,"A",{href:!0});var zDt=s(vee);pOr=r(zDt,"FlaxWav2Vec2Model"),zDt.forEach(t),_Or=r(MOe," (Wav2Vec2 model)"),MOe.forEach(t),uOr=i(ae),A3=n(ae,"LI",{});var EOe=s(A3);VCe=n(EOe,"STRONG",{});var QDt=s(VCe);bOr=r(QDt,"xglm"),QDt.forEach(t),vOr=r(EOe," \u2014 "),Fee=n(EOe,"A",{href:!0});var WDt=s(Fee);FOr=r(WDt,"FlaxXGLMModel"),WDt.forEach(t),TOr=r(EOe," (XGLM model)"),EOe.forEach(t),MOr=i(ae),L3=n(ae,"LI",{});var COe=s(L3);XCe=n(COe,"STRONG",{});var HDt=s(XCe);EOr=r(HDt,"xlm-roberta"),HDt.forEach(t),COr=r(COe," \u2014 "),Tee=n(COe,"A",{href:!0});var UDt=s(Tee);wOr=r(UDt,"FlaxXLMRobertaModel"),UDt.forEach(t),AOr=r(COe," (XLM-RoBERTa model)"),COe.forEach(t),ae.forEach(t),LOr=i(ti),T(y3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Ize=i(f),Jc=n(f,"H2",{class:!0});var QWe=s(Jc);x3=n(QWe,"A",{id:!0,class:!0,href:!0});var JDt=s(x3);zCe=n(JDt,"SPAN",{});var YDt=s(zCe);T(g$.$$.fragment,YDt),YDt.forEach(t),JDt.forEach(t),yOr=i(QWe),QCe=n(QWe,"SPAN",{});var KDt=s(QCe);xOr=r(KDt,"FlaxAutoModelForCausalLM"),KDt.forEach(t),QWe.forEach(t),qze=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(h$.$$.fragment,ai),$Or=i(ai),Yc=n(ai,"P",{});var rae=s(Yc);kOr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mee=n(rae,"A",{href:!0});var ZDt=s(Mee);SOr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),ROr=r(rae," class method or the "),Eee=n(rae,"A",{href:!0});var eGt=s(Eee);POr=r(eGt,"from_config()"),eGt.forEach(t),BOr=r(rae,` class
method.`),rae.forEach(t),NOr=i(ai),p$=n(ai,"P",{});var WWe=s(p$);IOr=r(WWe,"This class cannot be instantiated directly using "),WCe=n(WWe,"CODE",{});var oGt=s(WCe);qOr=r(oGt,"__init__()"),oGt.forEach(t),jOr=r(WWe," (throws an error)."),WWe.forEach(t),DOr=i(ai),Wt=n(ai,"DIV",{class:!0});var R6=s(Wt);T(_$.$$.fragment,R6),GOr=i(R6),HCe=n(R6,"P",{});var rGt=s(HCe);OOr=r(rGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rGt.forEach(t),VOr=i(R6),Kc=n(R6,"P",{});var tae=s(Kc);XOr=r(tae,`Note:
Loading a model from its configuration file does `),UCe=n(tae,"STRONG",{});var tGt=s(UCe);zOr=r(tGt,"not"),tGt.forEach(t),QOr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(tae,"A",{href:!0});var aGt=s(Cee);WOr=r(aGt,"from_pretrained()"),aGt.forEach(t),HOr=r(tae," to load the model weights."),tae.forEach(t),UOr=i(R6),T($3.$$.fragment,R6),R6.forEach(t),JOr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(u$.$$.fragment,ni),YOr=i(ni),JCe=n(ni,"P",{});var nGt=s(JCe);KOr=r(nGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nGt.forEach(t),ZOr=i(ni),Mn=n(ni,"P",{});var P6=s(Mn);eVr=r(P6,"The model class to instantiate is selected based on the "),YCe=n(P6,"CODE",{});var sGt=s(YCe);oVr=r(sGt,"model_type"),sGt.forEach(t),rVr=r(P6,` property of the config object (either
passed as an argument or loaded from `),KCe=n(P6,"CODE",{});var lGt=s(KCe);tVr=r(lGt,"pretrained_model_name_or_path"),lGt.forEach(t),aVr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZCe=n(P6,"CODE",{});var iGt=s(ZCe);nVr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),sVr=r(P6,":"),P6.forEach(t),lVr=i(ni),xe=n(ni,"UL",{});var Ie=s(xe);k3=n(Ie,"LI",{});var wOe=s(k3);e3e=n(wOe,"STRONG",{});var dGt=s(e3e);iVr=r(dGt,"bart"),dGt.forEach(t),dVr=r(wOe," \u2014 "),wee=n(wOe,"A",{href:!0});var cGt=s(wee);cVr=r(cGt,"FlaxBartForCausalLM"),cGt.forEach(t),fVr=r(wOe," (BART model)"),wOe.forEach(t),mVr=i(Ie),S3=n(Ie,"LI",{});var AOe=s(S3);o3e=n(AOe,"STRONG",{});var fGt=s(o3e);gVr=r(fGt,"bert"),fGt.forEach(t),hVr=r(AOe," \u2014 "),Aee=n(AOe,"A",{href:!0});var mGt=s(Aee);pVr=r(mGt,"FlaxBertForCausalLM"),mGt.forEach(t),_Vr=r(AOe," (BERT model)"),AOe.forEach(t),uVr=i(Ie),R3=n(Ie,"LI",{});var LOe=s(R3);r3e=n(LOe,"STRONG",{});var gGt=s(r3e);bVr=r(gGt,"big_bird"),gGt.forEach(t),vVr=r(LOe," \u2014 "),Lee=n(LOe,"A",{href:!0});var hGt=s(Lee);FVr=r(hGt,"FlaxBigBirdForCausalLM"),hGt.forEach(t),TVr=r(LOe," (BigBird model)"),LOe.forEach(t),MVr=i(Ie),P3=n(Ie,"LI",{});var yOe=s(P3);t3e=n(yOe,"STRONG",{});var pGt=s(t3e);EVr=r(pGt,"electra"),pGt.forEach(t),CVr=r(yOe," \u2014 "),yee=n(yOe,"A",{href:!0});var _Gt=s(yee);wVr=r(_Gt,"FlaxElectraForCausalLM"),_Gt.forEach(t),AVr=r(yOe," (ELECTRA model)"),yOe.forEach(t),LVr=i(Ie),B3=n(Ie,"LI",{});var xOe=s(B3);a3e=n(xOe,"STRONG",{});var uGt=s(a3e);yVr=r(uGt,"gpt2"),uGt.forEach(t),xVr=r(xOe," \u2014 "),xee=n(xOe,"A",{href:!0});var bGt=s(xee);$Vr=r(bGt,"FlaxGPT2LMHeadModel"),bGt.forEach(t),kVr=r(xOe," (OpenAI GPT-2 model)"),xOe.forEach(t),SVr=i(Ie),N3=n(Ie,"LI",{});var $Oe=s(N3);n3e=n($Oe,"STRONG",{});var vGt=s(n3e);RVr=r(vGt,"gpt_neo"),vGt.forEach(t),PVr=r($Oe," \u2014 "),$ee=n($Oe,"A",{href:!0});var FGt=s($ee);BVr=r(FGt,"FlaxGPTNeoForCausalLM"),FGt.forEach(t),NVr=r($Oe," (GPT Neo model)"),$Oe.forEach(t),IVr=i(Ie),I3=n(Ie,"LI",{});var kOe=s(I3);s3e=n(kOe,"STRONG",{});var TGt=s(s3e);qVr=r(TGt,"gptj"),TGt.forEach(t),jVr=r(kOe," \u2014 "),kee=n(kOe,"A",{href:!0});var MGt=s(kee);DVr=r(MGt,"FlaxGPTJForCausalLM"),MGt.forEach(t),GVr=r(kOe," (GPT-J model)"),kOe.forEach(t),OVr=i(Ie),q3=n(Ie,"LI",{});var SOe=s(q3);l3e=n(SOe,"STRONG",{});var EGt=s(l3e);VVr=r(EGt,"opt"),EGt.forEach(t),XVr=r(SOe," \u2014 "),See=n(SOe,"A",{href:!0});var CGt=s(See);zVr=r(CGt,"FlaxOPTForCausalLM"),CGt.forEach(t),QVr=r(SOe," (OPT model)"),SOe.forEach(t),WVr=i(Ie),j3=n(Ie,"LI",{});var ROe=s(j3);i3e=n(ROe,"STRONG",{});var wGt=s(i3e);HVr=r(wGt,"roberta"),wGt.forEach(t),UVr=r(ROe," \u2014 "),Ree=n(ROe,"A",{href:!0});var AGt=s(Ree);JVr=r(AGt,"FlaxRobertaForCausalLM"),AGt.forEach(t),YVr=r(ROe," (RoBERTa model)"),ROe.forEach(t),KVr=i(Ie),D3=n(Ie,"LI",{});var POe=s(D3);d3e=n(POe,"STRONG",{});var LGt=s(d3e);ZVr=r(LGt,"xglm"),LGt.forEach(t),eXr=r(POe," \u2014 "),Pee=n(POe,"A",{href:!0});var yGt=s(Pee);oXr=r(yGt,"FlaxXGLMForCausalLM"),yGt.forEach(t),rXr=r(POe," (XGLM model)"),POe.forEach(t),Ie.forEach(t),tXr=i(ni),T(G3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),jze=i(f),Zc=n(f,"H2",{class:!0});var HWe=s(Zc);O3=n(HWe,"A",{id:!0,class:!0,href:!0});var xGt=s(O3);c3e=n(xGt,"SPAN",{});var $Gt=s(c3e);T(b$.$$.fragment,$Gt),$Gt.forEach(t),xGt.forEach(t),aXr=i(HWe),f3e=n(HWe,"SPAN",{});var kGt=s(f3e);nXr=r(kGt,"FlaxAutoModelForPreTraining"),kGt.forEach(t),HWe.forEach(t),Dze=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(v$.$$.fragment,si),sXr=i(si),ef=n(si,"P",{});var aae=s(ef);lXr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bee=n(aae,"A",{href:!0});var SGt=s(Bee);iXr=r(SGt,"from_pretrained()"),SGt.forEach(t),dXr=r(aae," class method or the "),Nee=n(aae,"A",{href:!0});var RGt=s(Nee);cXr=r(RGt,"from_config()"),RGt.forEach(t),fXr=r(aae,` class
method.`),aae.forEach(t),mXr=i(si),F$=n(si,"P",{});var UWe=s(F$);gXr=r(UWe,"This class cannot be instantiated directly using "),m3e=n(UWe,"CODE",{});var PGt=s(m3e);hXr=r(PGt,"__init__()"),PGt.forEach(t),pXr=r(UWe," (throws an error)."),UWe.forEach(t),_Xr=i(si),Ht=n(si,"DIV",{class:!0});var B6=s(Ht);T(T$.$$.fragment,B6),uXr=i(B6),g3e=n(B6,"P",{});var BGt=s(g3e);bXr=r(BGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BGt.forEach(t),vXr=i(B6),of=n(B6,"P",{});var nae=s(of);FXr=r(nae,`Note:
Loading a model from its configuration file does `),h3e=n(nae,"STRONG",{});var NGt=s(h3e);TXr=r(NGt,"not"),NGt.forEach(t),MXr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(nae,"A",{href:!0});var IGt=s(Iee);EXr=r(IGt,"from_pretrained()"),IGt.forEach(t),CXr=r(nae," to load the model weights."),nae.forEach(t),wXr=i(B6),T(V3.$$.fragment,B6),B6.forEach(t),AXr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(M$.$$.fragment,li),LXr=i(li),p3e=n(li,"P",{});var qGt=s(p3e);yXr=r(qGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qGt.forEach(t),xXr=i(li),En=n(li,"P",{});var N6=s(En);$Xr=r(N6,"The model class to instantiate is selected based on the "),_3e=n(N6,"CODE",{});var jGt=s(_3e);kXr=r(jGt,"model_type"),jGt.forEach(t),SXr=r(N6,` property of the config object (either
passed as an argument or loaded from `),u3e=n(N6,"CODE",{});var DGt=s(u3e);RXr=r(DGt,"pretrained_model_name_or_path"),DGt.forEach(t),PXr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(N6,"CODE",{});var GGt=s(b3e);BXr=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),NXr=r(N6,":"),N6.forEach(t),IXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);X3=n(we,"LI",{});var BOe=s(X3);v3e=n(BOe,"STRONG",{});var OGt=s(v3e);qXr=r(OGt,"albert"),OGt.forEach(t),jXr=r(BOe," \u2014 "),qee=n(BOe,"A",{href:!0});var VGt=s(qee);DXr=r(VGt,"FlaxAlbertForPreTraining"),VGt.forEach(t),GXr=r(BOe," (ALBERT model)"),BOe.forEach(t),OXr=i(we),z3=n(we,"LI",{});var NOe=s(z3);F3e=n(NOe,"STRONG",{});var XGt=s(F3e);VXr=r(XGt,"bart"),XGt.forEach(t),XXr=r(NOe," \u2014 "),jee=n(NOe,"A",{href:!0});var zGt=s(jee);zXr=r(zGt,"FlaxBartForConditionalGeneration"),zGt.forEach(t),QXr=r(NOe," (BART model)"),NOe.forEach(t),WXr=i(we),Q3=n(we,"LI",{});var IOe=s(Q3);T3e=n(IOe,"STRONG",{});var QGt=s(T3e);HXr=r(QGt,"bert"),QGt.forEach(t),UXr=r(IOe," \u2014 "),Dee=n(IOe,"A",{href:!0});var WGt=s(Dee);JXr=r(WGt,"FlaxBertForPreTraining"),WGt.forEach(t),YXr=r(IOe," (BERT model)"),IOe.forEach(t),KXr=i(we),W3=n(we,"LI",{});var qOe=s(W3);M3e=n(qOe,"STRONG",{});var HGt=s(M3e);ZXr=r(HGt,"big_bird"),HGt.forEach(t),ezr=r(qOe," \u2014 "),Gee=n(qOe,"A",{href:!0});var UGt=s(Gee);ozr=r(UGt,"FlaxBigBirdForPreTraining"),UGt.forEach(t),rzr=r(qOe," (BigBird model)"),qOe.forEach(t),tzr=i(we),H3=n(we,"LI",{});var jOe=s(H3);E3e=n(jOe,"STRONG",{});var JGt=s(E3e);azr=r(JGt,"electra"),JGt.forEach(t),nzr=r(jOe," \u2014 "),Oee=n(jOe,"A",{href:!0});var YGt=s(Oee);szr=r(YGt,"FlaxElectraForPreTraining"),YGt.forEach(t),lzr=r(jOe," (ELECTRA model)"),jOe.forEach(t),izr=i(we),U3=n(we,"LI",{});var DOe=s(U3);C3e=n(DOe,"STRONG",{});var KGt=s(C3e);dzr=r(KGt,"longt5"),KGt.forEach(t),czr=r(DOe," \u2014 "),Vee=n(DOe,"A",{href:!0});var ZGt=s(Vee);fzr=r(ZGt,"FlaxLongT5ForConditionalGeneration"),ZGt.forEach(t),mzr=r(DOe," (LongT5 model)"),DOe.forEach(t),gzr=i(we),J3=n(we,"LI",{});var GOe=s(J3);w3e=n(GOe,"STRONG",{});var eOt=s(w3e);hzr=r(eOt,"mbart"),eOt.forEach(t),pzr=r(GOe," \u2014 "),Xee=n(GOe,"A",{href:!0});var oOt=s(Xee);_zr=r(oOt,"FlaxMBartForConditionalGeneration"),oOt.forEach(t),uzr=r(GOe," (mBART model)"),GOe.forEach(t),bzr=i(we),Y3=n(we,"LI",{});var OOe=s(Y3);A3e=n(OOe,"STRONG",{});var rOt=s(A3e);vzr=r(rOt,"mt5"),rOt.forEach(t),Fzr=r(OOe," \u2014 "),zee=n(OOe,"A",{href:!0});var tOt=s(zee);Tzr=r(tOt,"FlaxMT5ForConditionalGeneration"),tOt.forEach(t),Mzr=r(OOe," (MT5 model)"),OOe.forEach(t),Ezr=i(we),K3=n(we,"LI",{});var VOe=s(K3);L3e=n(VOe,"STRONG",{});var aOt=s(L3e);Czr=r(aOt,"roberta"),aOt.forEach(t),wzr=r(VOe," \u2014 "),Qee=n(VOe,"A",{href:!0});var nOt=s(Qee);Azr=r(nOt,"FlaxRobertaForMaskedLM"),nOt.forEach(t),Lzr=r(VOe," (RoBERTa model)"),VOe.forEach(t),yzr=i(we),Z3=n(we,"LI",{});var XOe=s(Z3);y3e=n(XOe,"STRONG",{});var sOt=s(y3e);xzr=r(sOt,"roformer"),sOt.forEach(t),$zr=r(XOe," \u2014 "),Wee=n(XOe,"A",{href:!0});var lOt=s(Wee);kzr=r(lOt,"FlaxRoFormerForMaskedLM"),lOt.forEach(t),Szr=r(XOe," (RoFormer model)"),XOe.forEach(t),Rzr=i(we),e0=n(we,"LI",{});var zOe=s(e0);x3e=n(zOe,"STRONG",{});var iOt=s(x3e);Pzr=r(iOt,"t5"),iOt.forEach(t),Bzr=r(zOe," \u2014 "),Hee=n(zOe,"A",{href:!0});var dOt=s(Hee);Nzr=r(dOt,"FlaxT5ForConditionalGeneration"),dOt.forEach(t),Izr=r(zOe," (T5 model)"),zOe.forEach(t),qzr=i(we),o0=n(we,"LI",{});var QOe=s(o0);$3e=n(QOe,"STRONG",{});var cOt=s($3e);jzr=r(cOt,"wav2vec2"),cOt.forEach(t),Dzr=r(QOe," \u2014 "),Uee=n(QOe,"A",{href:!0});var fOt=s(Uee);Gzr=r(fOt,"FlaxWav2Vec2ForPreTraining"),fOt.forEach(t),Ozr=r(QOe," (Wav2Vec2 model)"),QOe.forEach(t),Vzr=i(we),r0=n(we,"LI",{});var WOe=s(r0);k3e=n(WOe,"STRONG",{});var mOt=s(k3e);Xzr=r(mOt,"xlm-roberta"),mOt.forEach(t),zzr=r(WOe," \u2014 "),Jee=n(WOe,"A",{href:!0});var gOt=s(Jee);Qzr=r(gOt,"FlaxXLMRobertaForMaskedLM"),gOt.forEach(t),Wzr=r(WOe," (XLM-RoBERTa model)"),WOe.forEach(t),we.forEach(t),Hzr=i(li),T(t0.$$.fragment,li),li.forEach(t),si.forEach(t),Gze=i(f),rf=n(f,"H2",{class:!0});var JWe=s(rf);a0=n(JWe,"A",{id:!0,class:!0,href:!0});var hOt=s(a0);S3e=n(hOt,"SPAN",{});var pOt=s(S3e);T(E$.$$.fragment,pOt),pOt.forEach(t),hOt.forEach(t),Uzr=i(JWe),R3e=n(JWe,"SPAN",{});var _Ot=s(R3e);Jzr=r(_Ot,"FlaxAutoModelForMaskedLM"),_Ot.forEach(t),JWe.forEach(t),Oze=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(C$.$$.fragment,ii),Yzr=i(ii),tf=n(ii,"P",{});var sae=s(tf);Kzr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Yee=n(sae,"A",{href:!0});var uOt=s(Yee);Zzr=r(uOt,"from_pretrained()"),uOt.forEach(t),eQr=r(sae," class method or the "),Kee=n(sae,"A",{href:!0});var bOt=s(Kee);oQr=r(bOt,"from_config()"),bOt.forEach(t),rQr=r(sae,` class
method.`),sae.forEach(t),tQr=i(ii),w$=n(ii,"P",{});var YWe=s(w$);aQr=r(YWe,"This class cannot be instantiated directly using "),P3e=n(YWe,"CODE",{});var vOt=s(P3e);nQr=r(vOt,"__init__()"),vOt.forEach(t),sQr=r(YWe," (throws an error)."),YWe.forEach(t),lQr=i(ii),Ut=n(ii,"DIV",{class:!0});var I6=s(Ut);T(A$.$$.fragment,I6),iQr=i(I6),B3e=n(I6,"P",{});var FOt=s(B3e);dQr=r(FOt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FOt.forEach(t),cQr=i(I6),af=n(I6,"P",{});var lae=s(af);fQr=r(lae,`Note:
Loading a model from its configuration file does `),N3e=n(lae,"STRONG",{});var TOt=s(N3e);mQr=r(TOt,"not"),TOt.forEach(t),gQr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zee=n(lae,"A",{href:!0});var MOt=s(Zee);hQr=r(MOt,"from_pretrained()"),MOt.forEach(t),pQr=r(lae," to load the model weights."),lae.forEach(t),_Qr=i(I6),T(n0.$$.fragment,I6),I6.forEach(t),uQr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(L$.$$.fragment,di),bQr=i(di),I3e=n(di,"P",{});var EOt=s(I3e);vQr=r(EOt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EOt.forEach(t),FQr=i(di),Cn=n(di,"P",{});var q6=s(Cn);TQr=r(q6,"The model class to instantiate is selected based on the "),q3e=n(q6,"CODE",{});var COt=s(q3e);MQr=r(COt,"model_type"),COt.forEach(t),EQr=r(q6,` property of the config object (either
passed as an argument or loaded from `),j3e=n(q6,"CODE",{});var wOt=s(j3e);CQr=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),wQr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=n(q6,"CODE",{});var AOt=s(D3e);AQr=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),LQr=r(q6,":"),q6.forEach(t),yQr=i(di),$e=n(di,"UL",{});var qe=s($e);s0=n(qe,"LI",{});var HOe=s(s0);G3e=n(HOe,"STRONG",{});var LOt=s(G3e);xQr=r(LOt,"albert"),LOt.forEach(t),$Qr=r(HOe," \u2014 "),eoe=n(HOe,"A",{href:!0});var yOt=s(eoe);kQr=r(yOt,"FlaxAlbertForMaskedLM"),yOt.forEach(t),SQr=r(HOe," (ALBERT model)"),HOe.forEach(t),RQr=i(qe),l0=n(qe,"LI",{});var UOe=s(l0);O3e=n(UOe,"STRONG",{});var xOt=s(O3e);PQr=r(xOt,"bart"),xOt.forEach(t),BQr=r(UOe," \u2014 "),ooe=n(UOe,"A",{href:!0});var $Ot=s(ooe);NQr=r($Ot,"FlaxBartForConditionalGeneration"),$Ot.forEach(t),IQr=r(UOe," (BART model)"),UOe.forEach(t),qQr=i(qe),i0=n(qe,"LI",{});var JOe=s(i0);V3e=n(JOe,"STRONG",{});var kOt=s(V3e);jQr=r(kOt,"bert"),kOt.forEach(t),DQr=r(JOe," \u2014 "),roe=n(JOe,"A",{href:!0});var SOt=s(roe);GQr=r(SOt,"FlaxBertForMaskedLM"),SOt.forEach(t),OQr=r(JOe," (BERT model)"),JOe.forEach(t),VQr=i(qe),d0=n(qe,"LI",{});var YOe=s(d0);X3e=n(YOe,"STRONG",{});var ROt=s(X3e);XQr=r(ROt,"big_bird"),ROt.forEach(t),zQr=r(YOe," \u2014 "),toe=n(YOe,"A",{href:!0});var POt=s(toe);QQr=r(POt,"FlaxBigBirdForMaskedLM"),POt.forEach(t),WQr=r(YOe," (BigBird model)"),YOe.forEach(t),HQr=i(qe),c0=n(qe,"LI",{});var KOe=s(c0);z3e=n(KOe,"STRONG",{});var BOt=s(z3e);UQr=r(BOt,"distilbert"),BOt.forEach(t),JQr=r(KOe," \u2014 "),aoe=n(KOe,"A",{href:!0});var NOt=s(aoe);YQr=r(NOt,"FlaxDistilBertForMaskedLM"),NOt.forEach(t),KQr=r(KOe," (DistilBERT model)"),KOe.forEach(t),ZQr=i(qe),f0=n(qe,"LI",{});var ZOe=s(f0);Q3e=n(ZOe,"STRONG",{});var IOt=s(Q3e);eWr=r(IOt,"electra"),IOt.forEach(t),oWr=r(ZOe," \u2014 "),noe=n(ZOe,"A",{href:!0});var qOt=s(noe);rWr=r(qOt,"FlaxElectraForMaskedLM"),qOt.forEach(t),tWr=r(ZOe," (ELECTRA model)"),ZOe.forEach(t),aWr=i(qe),m0=n(qe,"LI",{});var eVe=s(m0);W3e=n(eVe,"STRONG",{});var jOt=s(W3e);nWr=r(jOt,"mbart"),jOt.forEach(t),sWr=r(eVe," \u2014 "),soe=n(eVe,"A",{href:!0});var DOt=s(soe);lWr=r(DOt,"FlaxMBartForConditionalGeneration"),DOt.forEach(t),iWr=r(eVe," (mBART model)"),eVe.forEach(t),dWr=i(qe),g0=n(qe,"LI",{});var oVe=s(g0);H3e=n(oVe,"STRONG",{});var GOt=s(H3e);cWr=r(GOt,"roberta"),GOt.forEach(t),fWr=r(oVe," \u2014 "),loe=n(oVe,"A",{href:!0});var OOt=s(loe);mWr=r(OOt,"FlaxRobertaForMaskedLM"),OOt.forEach(t),gWr=r(oVe," (RoBERTa model)"),oVe.forEach(t),hWr=i(qe),h0=n(qe,"LI",{});var rVe=s(h0);U3e=n(rVe,"STRONG",{});var VOt=s(U3e);pWr=r(VOt,"roformer"),VOt.forEach(t),_Wr=r(rVe," \u2014 "),ioe=n(rVe,"A",{href:!0});var XOt=s(ioe);uWr=r(XOt,"FlaxRoFormerForMaskedLM"),XOt.forEach(t),bWr=r(rVe," (RoFormer model)"),rVe.forEach(t),vWr=i(qe),p0=n(qe,"LI",{});var tVe=s(p0);J3e=n(tVe,"STRONG",{});var zOt=s(J3e);FWr=r(zOt,"xlm-roberta"),zOt.forEach(t),TWr=r(tVe," \u2014 "),doe=n(tVe,"A",{href:!0});var QOt=s(doe);MWr=r(QOt,"FlaxXLMRobertaForMaskedLM"),QOt.forEach(t),EWr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),qe.forEach(t),CWr=i(di),T(_0.$$.fragment,di),di.forEach(t),ii.forEach(t),Vze=i(f),nf=n(f,"H2",{class:!0});var KWe=s(nf);u0=n(KWe,"A",{id:!0,class:!0,href:!0});var WOt=s(u0);Y3e=n(WOt,"SPAN",{});var HOt=s(Y3e);T(y$.$$.fragment,HOt),HOt.forEach(t),WOt.forEach(t),wWr=i(KWe),K3e=n(KWe,"SPAN",{});var UOt=s(K3e);AWr=r(UOt,"FlaxAutoModelForSeq2SeqLM"),UOt.forEach(t),KWe.forEach(t),Xze=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(x$.$$.fragment,ci),LWr=i(ci),sf=n(ci,"P",{});var iae=s(sf);yWr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),coe=n(iae,"A",{href:!0});var JOt=s(coe);xWr=r(JOt,"from_pretrained()"),JOt.forEach(t),$Wr=r(iae," class method or the "),foe=n(iae,"A",{href:!0});var YOt=s(foe);kWr=r(YOt,"from_config()"),YOt.forEach(t),SWr=r(iae,` class
method.`),iae.forEach(t),RWr=i(ci),$$=n(ci,"P",{});var ZWe=s($$);PWr=r(ZWe,"This class cannot be instantiated directly using "),Z3e=n(ZWe,"CODE",{});var KOt=s(Z3e);BWr=r(KOt,"__init__()"),KOt.forEach(t),NWr=r(ZWe," (throws an error)."),ZWe.forEach(t),IWr=i(ci),Jt=n(ci,"DIV",{class:!0});var j6=s(Jt);T(k$.$$.fragment,j6),qWr=i(j6),e0e=n(j6,"P",{});var ZOt=s(e0e);jWr=r(ZOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZOt.forEach(t),DWr=i(j6),lf=n(j6,"P",{});var dae=s(lf);GWr=r(dae,`Note:
Loading a model from its configuration file does `),o0e=n(dae,"STRONG",{});var eVt=s(o0e);OWr=r(eVt,"not"),eVt.forEach(t),VWr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=n(dae,"A",{href:!0});var oVt=s(moe);XWr=r(oVt,"from_pretrained()"),oVt.forEach(t),zWr=r(dae," to load the model weights."),dae.forEach(t),QWr=i(j6),T(b0.$$.fragment,j6),j6.forEach(t),WWr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(S$.$$.fragment,fi),HWr=i(fi),r0e=n(fi,"P",{});var rVt=s(r0e);UWr=r(rVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rVt.forEach(t),JWr=i(fi),wn=n(fi,"P",{});var D6=s(wn);YWr=r(D6,"The model class to instantiate is selected based on the "),t0e=n(D6,"CODE",{});var tVt=s(t0e);KWr=r(tVt,"model_type"),tVt.forEach(t),ZWr=r(D6,` property of the config object (either
passed as an argument or loaded from `),a0e=n(D6,"CODE",{});var aVt=s(a0e);eHr=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),oHr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=n(D6,"CODE",{});var nVt=s(n0e);rHr=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),tHr=r(D6,":"),D6.forEach(t),aHr=i(fi),ke=n(fi,"UL",{});var je=s(ke);v0=n(je,"LI",{});var aVe=s(v0);s0e=n(aVe,"STRONG",{});var sVt=s(s0e);nHr=r(sVt,"bart"),sVt.forEach(t),sHr=r(aVe," \u2014 "),goe=n(aVe,"A",{href:!0});var lVt=s(goe);lHr=r(lVt,"FlaxBartForConditionalGeneration"),lVt.forEach(t),iHr=r(aVe," (BART model)"),aVe.forEach(t),dHr=i(je),F0=n(je,"LI",{});var nVe=s(F0);l0e=n(nVe,"STRONG",{});var iVt=s(l0e);cHr=r(iVt,"blenderbot"),iVt.forEach(t),fHr=r(nVe," \u2014 "),hoe=n(nVe,"A",{href:!0});var dVt=s(hoe);mHr=r(dVt,"FlaxBlenderbotForConditionalGeneration"),dVt.forEach(t),gHr=r(nVe," (Blenderbot model)"),nVe.forEach(t),hHr=i(je),T0=n(je,"LI",{});var sVe=s(T0);i0e=n(sVe,"STRONG",{});var cVt=s(i0e);pHr=r(cVt,"blenderbot-small"),cVt.forEach(t),_Hr=r(sVe," \u2014 "),poe=n(sVe,"A",{href:!0});var fVt=s(poe);uHr=r(fVt,"FlaxBlenderbotSmallForConditionalGeneration"),fVt.forEach(t),bHr=r(sVe," (BlenderbotSmall model)"),sVe.forEach(t),vHr=i(je),M0=n(je,"LI",{});var lVe=s(M0);d0e=n(lVe,"STRONG",{});var mVt=s(d0e);FHr=r(mVt,"encoder-decoder"),mVt.forEach(t),THr=r(lVe," \u2014 "),_oe=n(lVe,"A",{href:!0});var gVt=s(_oe);MHr=r(gVt,"FlaxEncoderDecoderModel"),gVt.forEach(t),EHr=r(lVe," (Encoder decoder model)"),lVe.forEach(t),CHr=i(je),E0=n(je,"LI",{});var iVe=s(E0);c0e=n(iVe,"STRONG",{});var hVt=s(c0e);wHr=r(hVt,"longt5"),hVt.forEach(t),AHr=r(iVe," \u2014 "),uoe=n(iVe,"A",{href:!0});var pVt=s(uoe);LHr=r(pVt,"FlaxLongT5ForConditionalGeneration"),pVt.forEach(t),yHr=r(iVe," (LongT5 model)"),iVe.forEach(t),xHr=i(je),C0=n(je,"LI",{});var dVe=s(C0);f0e=n(dVe,"STRONG",{});var _Vt=s(f0e);$Hr=r(_Vt,"marian"),_Vt.forEach(t),kHr=r(dVe," \u2014 "),boe=n(dVe,"A",{href:!0});var uVt=s(boe);SHr=r(uVt,"FlaxMarianMTModel"),uVt.forEach(t),RHr=r(dVe," (Marian model)"),dVe.forEach(t),PHr=i(je),w0=n(je,"LI",{});var cVe=s(w0);m0e=n(cVe,"STRONG",{});var bVt=s(m0e);BHr=r(bVt,"mbart"),bVt.forEach(t),NHr=r(cVe," \u2014 "),voe=n(cVe,"A",{href:!0});var vVt=s(voe);IHr=r(vVt,"FlaxMBartForConditionalGeneration"),vVt.forEach(t),qHr=r(cVe," (mBART model)"),cVe.forEach(t),jHr=i(je),A0=n(je,"LI",{});var fVe=s(A0);g0e=n(fVe,"STRONG",{});var FVt=s(g0e);DHr=r(FVt,"mt5"),FVt.forEach(t),GHr=r(fVe," \u2014 "),Foe=n(fVe,"A",{href:!0});var TVt=s(Foe);OHr=r(TVt,"FlaxMT5ForConditionalGeneration"),TVt.forEach(t),VHr=r(fVe," (MT5 model)"),fVe.forEach(t),XHr=i(je),L0=n(je,"LI",{});var mVe=s(L0);h0e=n(mVe,"STRONG",{});var MVt=s(h0e);zHr=r(MVt,"pegasus"),MVt.forEach(t),QHr=r(mVe," \u2014 "),Toe=n(mVe,"A",{href:!0});var EVt=s(Toe);WHr=r(EVt,"FlaxPegasusForConditionalGeneration"),EVt.forEach(t),HHr=r(mVe," (Pegasus model)"),mVe.forEach(t),UHr=i(je),y0=n(je,"LI",{});var gVe=s(y0);p0e=n(gVe,"STRONG",{});var CVt=s(p0e);JHr=r(CVt,"t5"),CVt.forEach(t),YHr=r(gVe," \u2014 "),Moe=n(gVe,"A",{href:!0});var wVt=s(Moe);KHr=r(wVt,"FlaxT5ForConditionalGeneration"),wVt.forEach(t),ZHr=r(gVe," (T5 model)"),gVe.forEach(t),je.forEach(t),eUr=i(fi),T(x0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),zze=i(f),df=n(f,"H2",{class:!0});var eHe=s(df);$0=n(eHe,"A",{id:!0,class:!0,href:!0});var AVt=s($0);_0e=n(AVt,"SPAN",{});var LVt=s(_0e);T(R$.$$.fragment,LVt),LVt.forEach(t),AVt.forEach(t),oUr=i(eHe),u0e=n(eHe,"SPAN",{});var yVt=s(u0e);rUr=r(yVt,"FlaxAutoModelForSequenceClassification"),yVt.forEach(t),eHe.forEach(t),Qze=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(P$.$$.fragment,mi),tUr=i(mi),cf=n(mi,"P",{});var cae=s(cf);aUr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Eoe=n(cae,"A",{href:!0});var xVt=s(Eoe);nUr=r(xVt,"from_pretrained()"),xVt.forEach(t),sUr=r(cae," class method or the "),Coe=n(cae,"A",{href:!0});var $Vt=s(Coe);lUr=r($Vt,"from_config()"),$Vt.forEach(t),iUr=r(cae,` class
method.`),cae.forEach(t),dUr=i(mi),B$=n(mi,"P",{});var oHe=s(B$);cUr=r(oHe,"This class cannot be instantiated directly using "),b0e=n(oHe,"CODE",{});var kVt=s(b0e);fUr=r(kVt,"__init__()"),kVt.forEach(t),mUr=r(oHe," (throws an error)."),oHe.forEach(t),gUr=i(mi),Yt=n(mi,"DIV",{class:!0});var G6=s(Yt);T(N$.$$.fragment,G6),hUr=i(G6),v0e=n(G6,"P",{});var SVt=s(v0e);pUr=r(SVt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SVt.forEach(t),_Ur=i(G6),ff=n(G6,"P",{});var fae=s(ff);uUr=r(fae,`Note:
Loading a model from its configuration file does `),F0e=n(fae,"STRONG",{});var RVt=s(F0e);bUr=r(RVt,"not"),RVt.forEach(t),vUr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(fae,"A",{href:!0});var PVt=s(woe);FUr=r(PVt,"from_pretrained()"),PVt.forEach(t),TUr=r(fae," to load the model weights."),fae.forEach(t),MUr=i(G6),T(k0.$$.fragment,G6),G6.forEach(t),EUr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(I$.$$.fragment,gi),CUr=i(gi),T0e=n(gi,"P",{});var BVt=s(T0e);wUr=r(BVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BVt.forEach(t),AUr=i(gi),An=n(gi,"P",{});var O6=s(An);LUr=r(O6,"The model class to instantiate is selected based on the "),M0e=n(O6,"CODE",{});var NVt=s(M0e);yUr=r(NVt,"model_type"),NVt.forEach(t),xUr=r(O6,` property of the config object (either
passed as an argument or loaded from `),E0e=n(O6,"CODE",{});var IVt=s(E0e);$Ur=r(IVt,"pretrained_model_name_or_path"),IVt.forEach(t),kUr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=n(O6,"CODE",{});var qVt=s(C0e);SUr=r(qVt,"pretrained_model_name_or_path"),qVt.forEach(t),RUr=r(O6,":"),O6.forEach(t),PUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);S0=n(De,"LI",{});var hVe=s(S0);w0e=n(hVe,"STRONG",{});var jVt=s(w0e);BUr=r(jVt,"albert"),jVt.forEach(t),NUr=r(hVe," \u2014 "),Aoe=n(hVe,"A",{href:!0});var DVt=s(Aoe);IUr=r(DVt,"FlaxAlbertForSequenceClassification"),DVt.forEach(t),qUr=r(hVe," (ALBERT model)"),hVe.forEach(t),jUr=i(De),R0=n(De,"LI",{});var pVe=s(R0);A0e=n(pVe,"STRONG",{});var GVt=s(A0e);DUr=r(GVt,"bart"),GVt.forEach(t),GUr=r(pVe," \u2014 "),Loe=n(pVe,"A",{href:!0});var OVt=s(Loe);OUr=r(OVt,"FlaxBartForSequenceClassification"),OVt.forEach(t),VUr=r(pVe," (BART model)"),pVe.forEach(t),XUr=i(De),P0=n(De,"LI",{});var _Ve=s(P0);L0e=n(_Ve,"STRONG",{});var VVt=s(L0e);zUr=r(VVt,"bert"),VVt.forEach(t),QUr=r(_Ve," \u2014 "),yoe=n(_Ve,"A",{href:!0});var XVt=s(yoe);WUr=r(XVt,"FlaxBertForSequenceClassification"),XVt.forEach(t),HUr=r(_Ve," (BERT model)"),_Ve.forEach(t),UUr=i(De),B0=n(De,"LI",{});var uVe=s(B0);y0e=n(uVe,"STRONG",{});var zVt=s(y0e);JUr=r(zVt,"big_bird"),zVt.forEach(t),YUr=r(uVe," \u2014 "),xoe=n(uVe,"A",{href:!0});var QVt=s(xoe);KUr=r(QVt,"FlaxBigBirdForSequenceClassification"),QVt.forEach(t),ZUr=r(uVe," (BigBird model)"),uVe.forEach(t),eJr=i(De),N0=n(De,"LI",{});var bVe=s(N0);x0e=n(bVe,"STRONG",{});var WVt=s(x0e);oJr=r(WVt,"distilbert"),WVt.forEach(t),rJr=r(bVe," \u2014 "),$oe=n(bVe,"A",{href:!0});var HVt=s($oe);tJr=r(HVt,"FlaxDistilBertForSequenceClassification"),HVt.forEach(t),aJr=r(bVe," (DistilBERT model)"),bVe.forEach(t),nJr=i(De),I0=n(De,"LI",{});var vVe=s(I0);$0e=n(vVe,"STRONG",{});var UVt=s($0e);sJr=r(UVt,"electra"),UVt.forEach(t),lJr=r(vVe," \u2014 "),koe=n(vVe,"A",{href:!0});var JVt=s(koe);iJr=r(JVt,"FlaxElectraForSequenceClassification"),JVt.forEach(t),dJr=r(vVe," (ELECTRA model)"),vVe.forEach(t),cJr=i(De),q0=n(De,"LI",{});var FVe=s(q0);k0e=n(FVe,"STRONG",{});var YVt=s(k0e);fJr=r(YVt,"mbart"),YVt.forEach(t),mJr=r(FVe," \u2014 "),Soe=n(FVe,"A",{href:!0});var KVt=s(Soe);gJr=r(KVt,"FlaxMBartForSequenceClassification"),KVt.forEach(t),hJr=r(FVe," (mBART model)"),FVe.forEach(t),pJr=i(De),j0=n(De,"LI",{});var TVe=s(j0);S0e=n(TVe,"STRONG",{});var ZVt=s(S0e);_Jr=r(ZVt,"roberta"),ZVt.forEach(t),uJr=r(TVe," \u2014 "),Roe=n(TVe,"A",{href:!0});var eXt=s(Roe);bJr=r(eXt,"FlaxRobertaForSequenceClassification"),eXt.forEach(t),vJr=r(TVe," (RoBERTa model)"),TVe.forEach(t),FJr=i(De),D0=n(De,"LI",{});var MVe=s(D0);R0e=n(MVe,"STRONG",{});var oXt=s(R0e);TJr=r(oXt,"roformer"),oXt.forEach(t),MJr=r(MVe," \u2014 "),Poe=n(MVe,"A",{href:!0});var rXt=s(Poe);EJr=r(rXt,"FlaxRoFormerForSequenceClassification"),rXt.forEach(t),CJr=r(MVe," (RoFormer model)"),MVe.forEach(t),wJr=i(De),G0=n(De,"LI",{});var EVe=s(G0);P0e=n(EVe,"STRONG",{});var tXt=s(P0e);AJr=r(tXt,"xlm-roberta"),tXt.forEach(t),LJr=r(EVe," \u2014 "),Boe=n(EVe,"A",{href:!0});var aXt=s(Boe);yJr=r(aXt,"FlaxXLMRobertaForSequenceClassification"),aXt.forEach(t),xJr=r(EVe," (XLM-RoBERTa model)"),EVe.forEach(t),De.forEach(t),$Jr=i(gi),T(O0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Wze=i(f),mf=n(f,"H2",{class:!0});var rHe=s(mf);V0=n(rHe,"A",{id:!0,class:!0,href:!0});var nXt=s(V0);B0e=n(nXt,"SPAN",{});var sXt=s(B0e);T(q$.$$.fragment,sXt),sXt.forEach(t),nXt.forEach(t),kJr=i(rHe),N0e=n(rHe,"SPAN",{});var lXt=s(N0e);SJr=r(lXt,"FlaxAutoModelForQuestionAnswering"),lXt.forEach(t),rHe.forEach(t),Hze=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(j$.$$.fragment,hi),RJr=i(hi),gf=n(hi,"P",{});var mae=s(gf);PJr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Noe=n(mae,"A",{href:!0});var iXt=s(Noe);BJr=r(iXt,"from_pretrained()"),iXt.forEach(t),NJr=r(mae," class method or the "),Ioe=n(mae,"A",{href:!0});var dXt=s(Ioe);IJr=r(dXt,"from_config()"),dXt.forEach(t),qJr=r(mae,` class
method.`),mae.forEach(t),jJr=i(hi),D$=n(hi,"P",{});var tHe=s(D$);DJr=r(tHe,"This class cannot be instantiated directly using "),I0e=n(tHe,"CODE",{});var cXt=s(I0e);GJr=r(cXt,"__init__()"),cXt.forEach(t),OJr=r(tHe," (throws an error)."),tHe.forEach(t),VJr=i(hi),Kt=n(hi,"DIV",{class:!0});var V6=s(Kt);T(G$.$$.fragment,V6),XJr=i(V6),q0e=n(V6,"P",{});var fXt=s(q0e);zJr=r(fXt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fXt.forEach(t),QJr=i(V6),hf=n(V6,"P",{});var gae=s(hf);WJr=r(gae,`Note:
Loading a model from its configuration file does `),j0e=n(gae,"STRONG",{});var mXt=s(j0e);HJr=r(mXt,"not"),mXt.forEach(t),UJr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=n(gae,"A",{href:!0});var gXt=s(qoe);JJr=r(gXt,"from_pretrained()"),gXt.forEach(t),YJr=r(gae," to load the model weights."),gae.forEach(t),KJr=i(V6),T(X0.$$.fragment,V6),V6.forEach(t),ZJr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(O$.$$.fragment,pi),eYr=i(pi),D0e=n(pi,"P",{});var hXt=s(D0e);oYr=r(hXt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hXt.forEach(t),rYr=i(pi),Ln=n(pi,"P",{});var X6=s(Ln);tYr=r(X6,"The model class to instantiate is selected based on the "),G0e=n(X6,"CODE",{});var pXt=s(G0e);aYr=r(pXt,"model_type"),pXt.forEach(t),nYr=r(X6,` property of the config object (either
passed as an argument or loaded from `),O0e=n(X6,"CODE",{});var _Xt=s(O0e);sYr=r(_Xt,"pretrained_model_name_or_path"),_Xt.forEach(t),lYr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=n(X6,"CODE",{});var uXt=s(V0e);iYr=r(uXt,"pretrained_model_name_or_path"),uXt.forEach(t),dYr=r(X6,":"),X6.forEach(t),cYr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);z0=n(Ge,"LI",{});var CVe=s(z0);X0e=n(CVe,"STRONG",{});var bXt=s(X0e);fYr=r(bXt,"albert"),bXt.forEach(t),mYr=r(CVe," \u2014 "),joe=n(CVe,"A",{href:!0});var vXt=s(joe);gYr=r(vXt,"FlaxAlbertForQuestionAnswering"),vXt.forEach(t),hYr=r(CVe," (ALBERT model)"),CVe.forEach(t),pYr=i(Ge),Q0=n(Ge,"LI",{});var wVe=s(Q0);z0e=n(wVe,"STRONG",{});var FXt=s(z0e);_Yr=r(FXt,"bart"),FXt.forEach(t),uYr=r(wVe," \u2014 "),Doe=n(wVe,"A",{href:!0});var TXt=s(Doe);bYr=r(TXt,"FlaxBartForQuestionAnswering"),TXt.forEach(t),vYr=r(wVe," (BART model)"),wVe.forEach(t),FYr=i(Ge),W0=n(Ge,"LI",{});var AVe=s(W0);Q0e=n(AVe,"STRONG",{});var MXt=s(Q0e);TYr=r(MXt,"bert"),MXt.forEach(t),MYr=r(AVe," \u2014 "),Goe=n(AVe,"A",{href:!0});var EXt=s(Goe);EYr=r(EXt,"FlaxBertForQuestionAnswering"),EXt.forEach(t),CYr=r(AVe," (BERT model)"),AVe.forEach(t),wYr=i(Ge),H0=n(Ge,"LI",{});var LVe=s(H0);W0e=n(LVe,"STRONG",{});var CXt=s(W0e);AYr=r(CXt,"big_bird"),CXt.forEach(t),LYr=r(LVe," \u2014 "),Ooe=n(LVe,"A",{href:!0});var wXt=s(Ooe);yYr=r(wXt,"FlaxBigBirdForQuestionAnswering"),wXt.forEach(t),xYr=r(LVe," (BigBird model)"),LVe.forEach(t),$Yr=i(Ge),U0=n(Ge,"LI",{});var yVe=s(U0);H0e=n(yVe,"STRONG",{});var AXt=s(H0e);kYr=r(AXt,"distilbert"),AXt.forEach(t),SYr=r(yVe," \u2014 "),Voe=n(yVe,"A",{href:!0});var LXt=s(Voe);RYr=r(LXt,"FlaxDistilBertForQuestionAnswering"),LXt.forEach(t),PYr=r(yVe," (DistilBERT model)"),yVe.forEach(t),BYr=i(Ge),J0=n(Ge,"LI",{});var xVe=s(J0);U0e=n(xVe,"STRONG",{});var yXt=s(U0e);NYr=r(yXt,"electra"),yXt.forEach(t),IYr=r(xVe," \u2014 "),Xoe=n(xVe,"A",{href:!0});var xXt=s(Xoe);qYr=r(xXt,"FlaxElectraForQuestionAnswering"),xXt.forEach(t),jYr=r(xVe," (ELECTRA model)"),xVe.forEach(t),DYr=i(Ge),Y0=n(Ge,"LI",{});var $Ve=s(Y0);J0e=n($Ve,"STRONG",{});var $Xt=s(J0e);GYr=r($Xt,"mbart"),$Xt.forEach(t),OYr=r($Ve," \u2014 "),zoe=n($Ve,"A",{href:!0});var kXt=s(zoe);VYr=r(kXt,"FlaxMBartForQuestionAnswering"),kXt.forEach(t),XYr=r($Ve," (mBART model)"),$Ve.forEach(t),zYr=i(Ge),K0=n(Ge,"LI",{});var kVe=s(K0);Y0e=n(kVe,"STRONG",{});var SXt=s(Y0e);QYr=r(SXt,"roberta"),SXt.forEach(t),WYr=r(kVe," \u2014 "),Qoe=n(kVe,"A",{href:!0});var RXt=s(Qoe);HYr=r(RXt,"FlaxRobertaForQuestionAnswering"),RXt.forEach(t),UYr=r(kVe," (RoBERTa model)"),kVe.forEach(t),JYr=i(Ge),Z0=n(Ge,"LI",{});var SVe=s(Z0);K0e=n(SVe,"STRONG",{});var PXt=s(K0e);YYr=r(PXt,"roformer"),PXt.forEach(t),KYr=r(SVe," \u2014 "),Woe=n(SVe,"A",{href:!0});var BXt=s(Woe);ZYr=r(BXt,"FlaxRoFormerForQuestionAnswering"),BXt.forEach(t),eKr=r(SVe," (RoFormer model)"),SVe.forEach(t),oKr=i(Ge),ew=n(Ge,"LI",{});var RVe=s(ew);Z0e=n(RVe,"STRONG",{});var NXt=s(Z0e);rKr=r(NXt,"xlm-roberta"),NXt.forEach(t),tKr=r(RVe," \u2014 "),Hoe=n(RVe,"A",{href:!0});var IXt=s(Hoe);aKr=r(IXt,"FlaxXLMRobertaForQuestionAnswering"),IXt.forEach(t),nKr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),Ge.forEach(t),sKr=i(pi),T(ow.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Uze=i(f),pf=n(f,"H2",{class:!0});var aHe=s(pf);rw=n(aHe,"A",{id:!0,class:!0,href:!0});var qXt=s(rw);ewe=n(qXt,"SPAN",{});var jXt=s(ewe);T(V$.$$.fragment,jXt),jXt.forEach(t),qXt.forEach(t),lKr=i(aHe),owe=n(aHe,"SPAN",{});var DXt=s(owe);iKr=r(DXt,"FlaxAutoModelForTokenClassification"),DXt.forEach(t),aHe.forEach(t),Jze=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(X$.$$.fragment,_i),dKr=i(_i),_f=n(_i,"P",{});var hae=s(_f);cKr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Uoe=n(hae,"A",{href:!0});var GXt=s(Uoe);fKr=r(GXt,"from_pretrained()"),GXt.forEach(t),mKr=r(hae," class method or the "),Joe=n(hae,"A",{href:!0});var OXt=s(Joe);gKr=r(OXt,"from_config()"),OXt.forEach(t),hKr=r(hae,` class
method.`),hae.forEach(t),pKr=i(_i),z$=n(_i,"P",{});var nHe=s(z$);_Kr=r(nHe,"This class cannot be instantiated directly using "),rwe=n(nHe,"CODE",{});var VXt=s(rwe);uKr=r(VXt,"__init__()"),VXt.forEach(t),bKr=r(nHe," (throws an error)."),nHe.forEach(t),vKr=i(_i),Zt=n(_i,"DIV",{class:!0});var z6=s(Zt);T(Q$.$$.fragment,z6),FKr=i(z6),twe=n(z6,"P",{});var XXt=s(twe);TKr=r(XXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XXt.forEach(t),MKr=i(z6),uf=n(z6,"P",{});var pae=s(uf);EKr=r(pae,`Note:
Loading a model from its configuration file does `),awe=n(pae,"STRONG",{});var zXt=s(awe);CKr=r(zXt,"not"),zXt.forEach(t),wKr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=n(pae,"A",{href:!0});var QXt=s(Yoe);AKr=r(QXt,"from_pretrained()"),QXt.forEach(t),LKr=r(pae," to load the model weights."),pae.forEach(t),yKr=i(z6),T(tw.$$.fragment,z6),z6.forEach(t),xKr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(W$.$$.fragment,ui),$Kr=i(ui),nwe=n(ui,"P",{});var WXt=s(nwe);kKr=r(WXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WXt.forEach(t),SKr=i(ui),yn=n(ui,"P",{});var Q6=s(yn);RKr=r(Q6,"The model class to instantiate is selected based on the "),swe=n(Q6,"CODE",{});var HXt=s(swe);PKr=r(HXt,"model_type"),HXt.forEach(t),BKr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),lwe=n(Q6,"CODE",{});var UXt=s(lwe);NKr=r(UXt,"pretrained_model_name_or_path"),UXt.forEach(t),IKr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iwe=n(Q6,"CODE",{});var JXt=s(iwe);qKr=r(JXt,"pretrained_model_name_or_path"),JXt.forEach(t),jKr=r(Q6,":"),Q6.forEach(t),DKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);aw=n(To,"LI",{});var PVe=s(aw);dwe=n(PVe,"STRONG",{});var YXt=s(dwe);GKr=r(YXt,"albert"),YXt.forEach(t),OKr=r(PVe," \u2014 "),Koe=n(PVe,"A",{href:!0});var KXt=s(Koe);VKr=r(KXt,"FlaxAlbertForTokenClassification"),KXt.forEach(t),XKr=r(PVe," (ALBERT model)"),PVe.forEach(t),zKr=i(To),nw=n(To,"LI",{});var BVe=s(nw);cwe=n(BVe,"STRONG",{});var ZXt=s(cwe);QKr=r(ZXt,"bert"),ZXt.forEach(t),WKr=r(BVe," \u2014 "),Zoe=n(BVe,"A",{href:!0});var ezt=s(Zoe);HKr=r(ezt,"FlaxBertForTokenClassification"),ezt.forEach(t),UKr=r(BVe," (BERT model)"),BVe.forEach(t),JKr=i(To),sw=n(To,"LI",{});var NVe=s(sw);fwe=n(NVe,"STRONG",{});var ozt=s(fwe);YKr=r(ozt,"big_bird"),ozt.forEach(t),KKr=r(NVe," \u2014 "),ere=n(NVe,"A",{href:!0});var rzt=s(ere);ZKr=r(rzt,"FlaxBigBirdForTokenClassification"),rzt.forEach(t),eZr=r(NVe," (BigBird model)"),NVe.forEach(t),oZr=i(To),lw=n(To,"LI",{});var IVe=s(lw);mwe=n(IVe,"STRONG",{});var tzt=s(mwe);rZr=r(tzt,"distilbert"),tzt.forEach(t),tZr=r(IVe," \u2014 "),ore=n(IVe,"A",{href:!0});var azt=s(ore);aZr=r(azt,"FlaxDistilBertForTokenClassification"),azt.forEach(t),nZr=r(IVe," (DistilBERT model)"),IVe.forEach(t),sZr=i(To),iw=n(To,"LI",{});var qVe=s(iw);gwe=n(qVe,"STRONG",{});var nzt=s(gwe);lZr=r(nzt,"electra"),nzt.forEach(t),iZr=r(qVe," \u2014 "),rre=n(qVe,"A",{href:!0});var szt=s(rre);dZr=r(szt,"FlaxElectraForTokenClassification"),szt.forEach(t),cZr=r(qVe," (ELECTRA model)"),qVe.forEach(t),fZr=i(To),dw=n(To,"LI",{});var jVe=s(dw);hwe=n(jVe,"STRONG",{});var lzt=s(hwe);mZr=r(lzt,"roberta"),lzt.forEach(t),gZr=r(jVe," \u2014 "),tre=n(jVe,"A",{href:!0});var izt=s(tre);hZr=r(izt,"FlaxRobertaForTokenClassification"),izt.forEach(t),pZr=r(jVe," (RoBERTa model)"),jVe.forEach(t),_Zr=i(To),cw=n(To,"LI",{});var DVe=s(cw);pwe=n(DVe,"STRONG",{});var dzt=s(pwe);uZr=r(dzt,"roformer"),dzt.forEach(t),bZr=r(DVe," \u2014 "),are=n(DVe,"A",{href:!0});var czt=s(are);vZr=r(czt,"FlaxRoFormerForTokenClassification"),czt.forEach(t),FZr=r(DVe," (RoFormer model)"),DVe.forEach(t),TZr=i(To),fw=n(To,"LI",{});var GVe=s(fw);_we=n(GVe,"STRONG",{});var fzt=s(_we);MZr=r(fzt,"xlm-roberta"),fzt.forEach(t),EZr=r(GVe," \u2014 "),nre=n(GVe,"A",{href:!0});var mzt=s(nre);CZr=r(mzt,"FlaxXLMRobertaForTokenClassification"),mzt.forEach(t),wZr=r(GVe," (XLM-RoBERTa model)"),GVe.forEach(t),To.forEach(t),AZr=i(ui),T(mw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),Yze=i(f),bf=n(f,"H2",{class:!0});var sHe=s(bf);gw=n(sHe,"A",{id:!0,class:!0,href:!0});var gzt=s(gw);uwe=n(gzt,"SPAN",{});var hzt=s(uwe);T(H$.$$.fragment,hzt),hzt.forEach(t),gzt.forEach(t),LZr=i(sHe),bwe=n(sHe,"SPAN",{});var pzt=s(bwe);yZr=r(pzt,"FlaxAutoModelForMultipleChoice"),pzt.forEach(t),sHe.forEach(t),Kze=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(U$.$$.fragment,bi),xZr=i(bi),vf=n(bi,"P",{});var _ae=s(vf);$Zr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sre=n(_ae,"A",{href:!0});var _zt=s(sre);kZr=r(_zt,"from_pretrained()"),_zt.forEach(t),SZr=r(_ae," class method or the "),lre=n(_ae,"A",{href:!0});var uzt=s(lre);RZr=r(uzt,"from_config()"),uzt.forEach(t),PZr=r(_ae,` class
method.`),_ae.forEach(t),BZr=i(bi),J$=n(bi,"P",{});var lHe=s(J$);NZr=r(lHe,"This class cannot be instantiated directly using "),vwe=n(lHe,"CODE",{});var bzt=s(vwe);IZr=r(bzt,"__init__()"),bzt.forEach(t),qZr=r(lHe," (throws an error)."),lHe.forEach(t),jZr=i(bi),ea=n(bi,"DIV",{class:!0});var W6=s(ea);T(Y$.$$.fragment,W6),DZr=i(W6),Fwe=n(W6,"P",{});var vzt=s(Fwe);GZr=r(vzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vzt.forEach(t),OZr=i(W6),Ff=n(W6,"P",{});var uae=s(Ff);VZr=r(uae,`Note:
Loading a model from its configuration file does `),Twe=n(uae,"STRONG",{});var Fzt=s(Twe);XZr=r(Fzt,"not"),Fzt.forEach(t),zZr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ire=n(uae,"A",{href:!0});var Tzt=s(ire);QZr=r(Tzt,"from_pretrained()"),Tzt.forEach(t),WZr=r(uae," to load the model weights."),uae.forEach(t),HZr=i(W6),T(hw.$$.fragment,W6),W6.forEach(t),UZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(K$.$$.fragment,vi),JZr=i(vi),Mwe=n(vi,"P",{});var Mzt=s(Mwe);YZr=r(Mzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mzt.forEach(t),KZr=i(vi),xn=n(vi,"P",{});var H6=s(xn);ZZr=r(H6,"The model class to instantiate is selected based on the "),Ewe=n(H6,"CODE",{});var Ezt=s(Ewe);eet=r(Ezt,"model_type"),Ezt.forEach(t),oet=r(H6,` property of the config object (either
passed as an argument or loaded from `),Cwe=n(H6,"CODE",{});var Czt=s(Cwe);ret=r(Czt,"pretrained_model_name_or_path"),Czt.forEach(t),tet=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=n(H6,"CODE",{});var wzt=s(wwe);aet=r(wzt,"pretrained_model_name_or_path"),wzt.forEach(t),net=r(H6,":"),H6.forEach(t),set=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);pw=n(Mo,"LI",{});var OVe=s(pw);Awe=n(OVe,"STRONG",{});var Azt=s(Awe);iet=r(Azt,"albert"),Azt.forEach(t),det=r(OVe," \u2014 "),dre=n(OVe,"A",{href:!0});var Lzt=s(dre);cet=r(Lzt,"FlaxAlbertForMultipleChoice"),Lzt.forEach(t),fet=r(OVe," (ALBERT model)"),OVe.forEach(t),met=i(Mo),_w=n(Mo,"LI",{});var VVe=s(_w);Lwe=n(VVe,"STRONG",{});var yzt=s(Lwe);get=r(yzt,"bert"),yzt.forEach(t),het=r(VVe," \u2014 "),cre=n(VVe,"A",{href:!0});var xzt=s(cre);pet=r(xzt,"FlaxBertForMultipleChoice"),xzt.forEach(t),_et=r(VVe," (BERT model)"),VVe.forEach(t),uet=i(Mo),uw=n(Mo,"LI",{});var XVe=s(uw);ywe=n(XVe,"STRONG",{});var $zt=s(ywe);bet=r($zt,"big_bird"),$zt.forEach(t),vet=r(XVe," \u2014 "),fre=n(XVe,"A",{href:!0});var kzt=s(fre);Fet=r(kzt,"FlaxBigBirdForMultipleChoice"),kzt.forEach(t),Tet=r(XVe," (BigBird model)"),XVe.forEach(t),Met=i(Mo),bw=n(Mo,"LI",{});var zVe=s(bw);xwe=n(zVe,"STRONG",{});var Szt=s(xwe);Eet=r(Szt,"distilbert"),Szt.forEach(t),Cet=r(zVe," \u2014 "),mre=n(zVe,"A",{href:!0});var Rzt=s(mre);wet=r(Rzt,"FlaxDistilBertForMultipleChoice"),Rzt.forEach(t),Aet=r(zVe," (DistilBERT model)"),zVe.forEach(t),Let=i(Mo),vw=n(Mo,"LI",{});var QVe=s(vw);$we=n(QVe,"STRONG",{});var Pzt=s($we);yet=r(Pzt,"electra"),Pzt.forEach(t),xet=r(QVe," \u2014 "),gre=n(QVe,"A",{href:!0});var Bzt=s(gre);$et=r(Bzt,"FlaxElectraForMultipleChoice"),Bzt.forEach(t),ket=r(QVe," (ELECTRA model)"),QVe.forEach(t),Set=i(Mo),Fw=n(Mo,"LI",{});var WVe=s(Fw);kwe=n(WVe,"STRONG",{});var Nzt=s(kwe);Ret=r(Nzt,"roberta"),Nzt.forEach(t),Pet=r(WVe," \u2014 "),hre=n(WVe,"A",{href:!0});var Izt=s(hre);Bet=r(Izt,"FlaxRobertaForMultipleChoice"),Izt.forEach(t),Net=r(WVe," (RoBERTa model)"),WVe.forEach(t),Iet=i(Mo),Tw=n(Mo,"LI",{});var HVe=s(Tw);Swe=n(HVe,"STRONG",{});var qzt=s(Swe);qet=r(qzt,"roformer"),qzt.forEach(t),jet=r(HVe," \u2014 "),pre=n(HVe,"A",{href:!0});var jzt=s(pre);Det=r(jzt,"FlaxRoFormerForMultipleChoice"),jzt.forEach(t),Get=r(HVe," (RoFormer model)"),HVe.forEach(t),Oet=i(Mo),Mw=n(Mo,"LI",{});var UVe=s(Mw);Rwe=n(UVe,"STRONG",{});var Dzt=s(Rwe);Vet=r(Dzt,"xlm-roberta"),Dzt.forEach(t),Xet=r(UVe," \u2014 "),_re=n(UVe,"A",{href:!0});var Gzt=s(_re);zet=r(Gzt,"FlaxXLMRobertaForMultipleChoice"),Gzt.forEach(t),Qet=r(UVe," (XLM-RoBERTa model)"),UVe.forEach(t),Mo.forEach(t),Wet=i(vi),T(Ew.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Zze=i(f),Tf=n(f,"H2",{class:!0});var iHe=s(Tf);Cw=n(iHe,"A",{id:!0,class:!0,href:!0});var Ozt=s(Cw);Pwe=n(Ozt,"SPAN",{});var Vzt=s(Pwe);T(Z$.$$.fragment,Vzt),Vzt.forEach(t),Ozt.forEach(t),Het=i(iHe),Bwe=n(iHe,"SPAN",{});var Xzt=s(Bwe);Uet=r(Xzt,"FlaxAutoModelForNextSentencePrediction"),Xzt.forEach(t),iHe.forEach(t),eQe=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(ek.$$.fragment,Fi),Jet=i(Fi),Mf=n(Fi,"P",{});var bae=s(Mf);Yet=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ure=n(bae,"A",{href:!0});var zzt=s(ure);Ket=r(zzt,"from_pretrained()"),zzt.forEach(t),Zet=r(bae," class method or the "),bre=n(bae,"A",{href:!0});var Qzt=s(bre);eot=r(Qzt,"from_config()"),Qzt.forEach(t),oot=r(bae,` class
method.`),bae.forEach(t),rot=i(Fi),ok=n(Fi,"P",{});var dHe=s(ok);tot=r(dHe,"This class cannot be instantiated directly using "),Nwe=n(dHe,"CODE",{});var Wzt=s(Nwe);aot=r(Wzt,"__init__()"),Wzt.forEach(t),not=r(dHe," (throws an error)."),dHe.forEach(t),sot=i(Fi),oa=n(Fi,"DIV",{class:!0});var U6=s(oa);T(rk.$$.fragment,U6),lot=i(U6),Iwe=n(U6,"P",{});var Hzt=s(Iwe);iot=r(Hzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hzt.forEach(t),dot=i(U6),Ef=n(U6,"P",{});var vae=s(Ef);cot=r(vae,`Note:
Loading a model from its configuration file does `),qwe=n(vae,"STRONG",{});var Uzt=s(qwe);fot=r(Uzt,"not"),Uzt.forEach(t),mot=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(vae,"A",{href:!0});var Jzt=s(vre);got=r(Jzt,"from_pretrained()"),Jzt.forEach(t),hot=r(vae," to load the model weights."),vae.forEach(t),pot=i(U6),T(ww.$$.fragment,U6),U6.forEach(t),_ot=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(tk.$$.fragment,Ti),uot=i(Ti),jwe=n(Ti,"P",{});var Yzt=s(jwe);bot=r(Yzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Yzt.forEach(t),vot=i(Ti),$n=n(Ti,"P",{});var J6=s($n);Fot=r(J6,"The model class to instantiate is selected based on the "),Dwe=n(J6,"CODE",{});var Kzt=s(Dwe);Tot=r(Kzt,"model_type"),Kzt.forEach(t),Mot=r(J6,` property of the config object (either
passed as an argument or loaded from `),Gwe=n(J6,"CODE",{});var Zzt=s(Gwe);Eot=r(Zzt,"pretrained_model_name_or_path"),Zzt.forEach(t),Cot=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Owe=n(J6,"CODE",{});var eQt=s(Owe);wot=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),Aot=r(J6,":"),J6.forEach(t),Lot=i(Ti),Vwe=n(Ti,"UL",{});var oQt=s(Vwe);Aw=n(oQt,"LI",{});var JVe=s(Aw);Xwe=n(JVe,"STRONG",{});var rQt=s(Xwe);yot=r(rQt,"bert"),rQt.forEach(t),xot=r(JVe," \u2014 "),Fre=n(JVe,"A",{href:!0});var tQt=s(Fre);$ot=r(tQt,"FlaxBertForNextSentencePrediction"),tQt.forEach(t),kot=r(JVe," (BERT model)"),JVe.forEach(t),oQt.forEach(t),Sot=i(Ti),T(Lw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),oQe=i(f),Cf=n(f,"H2",{class:!0});var cHe=s(Cf);yw=n(cHe,"A",{id:!0,class:!0,href:!0});var aQt=s(yw);zwe=n(aQt,"SPAN",{});var nQt=s(zwe);T(ak.$$.fragment,nQt),nQt.forEach(t),aQt.forEach(t),Rot=i(cHe),Qwe=n(cHe,"SPAN",{});var sQt=s(Qwe);Pot=r(sQt,"FlaxAutoModelForImageClassification"),sQt.forEach(t),cHe.forEach(t),rQe=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(nk.$$.fragment,Mi),Bot=i(Mi),wf=n(Mi,"P",{});var Fae=s(wf);Not=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tre=n(Fae,"A",{href:!0});var lQt=s(Tre);Iot=r(lQt,"from_pretrained()"),lQt.forEach(t),qot=r(Fae," class method or the "),Mre=n(Fae,"A",{href:!0});var iQt=s(Mre);jot=r(iQt,"from_config()"),iQt.forEach(t),Dot=r(Fae,` class
method.`),Fae.forEach(t),Got=i(Mi),sk=n(Mi,"P",{});var fHe=s(sk);Oot=r(fHe,"This class cannot be instantiated directly using "),Wwe=n(fHe,"CODE",{});var dQt=s(Wwe);Vot=r(dQt,"__init__()"),dQt.forEach(t),Xot=r(fHe," (throws an error)."),fHe.forEach(t),zot=i(Mi),ra=n(Mi,"DIV",{class:!0});var Y6=s(ra);T(lk.$$.fragment,Y6),Qot=i(Y6),Hwe=n(Y6,"P",{});var cQt=s(Hwe);Wot=r(cQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cQt.forEach(t),Hot=i(Y6),Af=n(Y6,"P",{});var Tae=s(Af);Uot=r(Tae,`Note:
Loading a model from its configuration file does `),Uwe=n(Tae,"STRONG",{});var fQt=s(Uwe);Jot=r(fQt,"not"),fQt.forEach(t),Yot=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ere=n(Tae,"A",{href:!0});var mQt=s(Ere);Kot=r(mQt,"from_pretrained()"),mQt.forEach(t),Zot=r(Tae," to load the model weights."),Tae.forEach(t),ert=i(Y6),T(xw.$$.fragment,Y6),Y6.forEach(t),ort=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(ik.$$.fragment,Ei),rrt=i(Ei),Jwe=n(Ei,"P",{});var gQt=s(Jwe);trt=r(gQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gQt.forEach(t),art=i(Ei),kn=n(Ei,"P",{});var K6=s(kn);nrt=r(K6,"The model class to instantiate is selected based on the "),Ywe=n(K6,"CODE",{});var hQt=s(Ywe);srt=r(hQt,"model_type"),hQt.forEach(t),lrt=r(K6,` property of the config object (either
passed as an argument or loaded from `),Kwe=n(K6,"CODE",{});var pQt=s(Kwe);irt=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),drt=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zwe=n(K6,"CODE",{});var _Qt=s(Zwe);crt=r(_Qt,"pretrained_model_name_or_path"),_Qt.forEach(t),frt=r(K6,":"),K6.forEach(t),mrt=i(Ei),dk=n(Ei,"UL",{});var mHe=s(dk);$w=n(mHe,"LI",{});var YVe=s($w);eAe=n(YVe,"STRONG",{});var uQt=s(eAe);grt=r(uQt,"beit"),uQt.forEach(t),hrt=r(YVe," \u2014 "),Cre=n(YVe,"A",{href:!0});var bQt=s(Cre);prt=r(bQt,"FlaxBeitForImageClassification"),bQt.forEach(t),_rt=r(YVe," (BEiT model)"),YVe.forEach(t),urt=i(mHe),kw=n(mHe,"LI",{});var KVe=s(kw);oAe=n(KVe,"STRONG",{});var vQt=s(oAe);brt=r(vQt,"vit"),vQt.forEach(t),vrt=r(KVe," \u2014 "),wre=n(KVe,"A",{href:!0});var FQt=s(wre);Frt=r(FQt,"FlaxViTForImageClassification"),FQt.forEach(t),Trt=r(KVe," (ViT model)"),KVe.forEach(t),mHe.forEach(t),Mrt=i(Ei),T(Sw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),tQe=i(f),Lf=n(f,"H2",{class:!0});var gHe=s(Lf);Rw=n(gHe,"A",{id:!0,class:!0,href:!0});var TQt=s(Rw);rAe=n(TQt,"SPAN",{});var MQt=s(rAe);T(ck.$$.fragment,MQt),MQt.forEach(t),TQt.forEach(t),Ert=i(gHe),tAe=n(gHe,"SPAN",{});var EQt=s(tAe);Crt=r(EQt,"FlaxAutoModelForVision2Seq"),EQt.forEach(t),gHe.forEach(t),aQe=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(fk.$$.fragment,Ci),wrt=i(Ci),yf=n(Ci,"P",{});var Mae=s(yf);Art=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Are=n(Mae,"A",{href:!0});var CQt=s(Are);Lrt=r(CQt,"from_pretrained()"),CQt.forEach(t),yrt=r(Mae," class method or the "),Lre=n(Mae,"A",{href:!0});var wQt=s(Lre);xrt=r(wQt,"from_config()"),wQt.forEach(t),$rt=r(Mae,` class
method.`),Mae.forEach(t),krt=i(Ci),mk=n(Ci,"P",{});var hHe=s(mk);Srt=r(hHe,"This class cannot be instantiated directly using "),aAe=n(hHe,"CODE",{});var AQt=s(aAe);Rrt=r(AQt,"__init__()"),AQt.forEach(t),Prt=r(hHe," (throws an error)."),hHe.forEach(t),Brt=i(Ci),ta=n(Ci,"DIV",{class:!0});var Z6=s(ta);T(gk.$$.fragment,Z6),Nrt=i(Z6),nAe=n(Z6,"P",{});var LQt=s(nAe);Irt=r(LQt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LQt.forEach(t),qrt=i(Z6),xf=n(Z6,"P",{});var Eae=s(xf);jrt=r(Eae,`Note:
Loading a model from its configuration file does `),sAe=n(Eae,"STRONG",{});var yQt=s(sAe);Drt=r(yQt,"not"),yQt.forEach(t),Grt=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(Eae,"A",{href:!0});var xQt=s(yre);Ort=r(xQt,"from_pretrained()"),xQt.forEach(t),Vrt=r(Eae," to load the model weights."),Eae.forEach(t),Xrt=i(Z6),T(Pw.$$.fragment,Z6),Z6.forEach(t),zrt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(hk.$$.fragment,wi),Qrt=i(wi),lAe=n(wi,"P",{});var $Qt=s(lAe);Wrt=r($Qt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Qt.forEach(t),Hrt=i(wi),Sn=n(wi,"P",{});var eL=s(Sn);Urt=r(eL,"The model class to instantiate is selected based on the "),iAe=n(eL,"CODE",{});var kQt=s(iAe);Jrt=r(kQt,"model_type"),kQt.forEach(t),Yrt=r(eL,` property of the config object (either
passed as an argument or loaded from `),dAe=n(eL,"CODE",{});var SQt=s(dAe);Krt=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),Zrt=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cAe=n(eL,"CODE",{});var RQt=s(cAe);ett=r(RQt,"pretrained_model_name_or_path"),RQt.forEach(t),ott=r(eL,":"),eL.forEach(t),rtt=i(wi),fAe=n(wi,"UL",{});var PQt=s(fAe);Bw=n(PQt,"LI",{});var ZVe=s(Bw);mAe=n(ZVe,"STRONG",{});var BQt=s(mAe);ttt=r(BQt,"vision-encoder-decoder"),BQt.forEach(t),att=r(ZVe," \u2014 "),xre=n(ZVe,"A",{href:!0});var NQt=s(xre);ntt=r(NQt,"FlaxVisionEncoderDecoderModel"),NQt.forEach(t),stt=r(ZVe," (Vision Encoder decoder model)"),ZVe.forEach(t),PQt.forEach(t),ltt=i(wi),T(Nw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(OHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertModel"),c(If,"id","extending-the-auto-classes"),c(If,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(If,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(GS,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(OS,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig"),c(VS,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig"),c(XS,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig"),c(zS,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig"),c(QS,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(WS,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig"),c(HS,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(US,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(JS,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(YS,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig"),c(KS,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig"),c(ZS,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig"),c(eR,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig"),c(oR,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenConfig"),c(rR,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig"),c(tR,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig"),c(aR,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig"),c(nR,"href","/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtConfig"),c(sR,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(lR,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(iR,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(dR,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig"),c(cR,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(fR,"href","/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(mR,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig"),c(gR,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig"),c(hR,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pR,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRConfig"),c(_R,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTConfig"),c(uR,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig"),c(bR,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(vR,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig"),c(FR,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaConfig"),c(TR,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig"),c(MR,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig"),c(ER,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig"),c(CR,"href","/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNConfig"),c(wR,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config"),c(AR,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(LR,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yR,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig"),c(xR,"href","/docs/transformers/pr_17845/en/model_doc/groupvit#transformers.GroupViTConfig"),c($R,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig"),c(kR,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig"),c(SR,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(RR,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(PR,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(BR,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(NR,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig"),c(IR,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitConfig"),c(qR,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig"),c(jR,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config"),c(DR,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeConfig"),c(GR,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig"),c(OR,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Config"),c(VR,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig"),c(XR,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(zR,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig"),c(QR,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTConfig"),c(WR,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(HR,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(UR,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config"),c(JR,"href","/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(YR,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig"),c(KR,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config"),c(ZR,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpConfig"),c(eP,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig"),c(oP,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rP,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tP,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig"),c(aP,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig"),c(nP,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sP,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig"),c(lP,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(iP,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(dP,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(cP,"href","/docs/transformers/pr_17845/en/model_doc/rag#transformers.RagConfig"),c(fP,"href","/docs/transformers/pr_17845/en/model_doc/realm#transformers.RealmConfig"),c(mP,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig"),c(gP,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig"),c(hP,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig"),c(pP,"href","/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetConfig"),c(_P,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertConfig"),c(uP,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig"),c(bP,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig"),c(vP,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig"),c(FP,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig"),c(TP,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig"),c(MP,"href","/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(EP,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(CP,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(wP,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig"),c(AP,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(LP,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig"),c(yP,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config"),c(xP,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig"),c($P,"href","/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(kP,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SP,"href","/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRConfig"),c(RP,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PP,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BP,"href","/docs/transformers/pr_17845/en/model_doc/van#transformers.VanConfig"),c(NP,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltConfig"),c(IP,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(qP,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jP,"href","/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DP,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig"),c(GP,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OP,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VP,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XP,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig"),c(zP,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig"),c(QP,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig"),c(WP,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HP,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(UP,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JP,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig"),c(YP,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosConfig"),c(KP,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(ZP,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eB,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizer"),c(oB,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartTokenizer"),c(tB,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartTokenizerFast"),c(aB,"href","/docs/transformers/pr_17845/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nB,"href","/docs/transformers/pr_17845/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sB,"href","/docs/transformers/pr_17845/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lB,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(iB,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cB,"href","/docs/transformers/pr_17845/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(fB,"href","/docs/transformers/pr_17845/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mB,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gB,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hB,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pB,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_B,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(uB,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bB,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vB,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(FB,"href","/docs/transformers/pr_17845/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(TB,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertTokenizer"),c(MB,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineTokenizer"),c(CB,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPTokenizer"),c(wB,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(AB,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(LB,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(yB,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(xB,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c($B,"href","/docs/transformers/pr_17845/en/model_doc/cpm#transformers.CpmTokenizer"),c(kB,"href","/docs/transformers/pr_17845/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(SB,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(RB,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaTokenizer"),c(NB,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(qB,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(jB,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(DB,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(GB,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(OB,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(VB,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraTokenizer"),c(XB,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(zB,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(QB,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetTokenizer"),c(WB,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(HB,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(UB,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelTokenizer"),c(JB,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(YB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eN,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oN,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(rN,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tN,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aN,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPTokenizer"),c(nN,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(sN,"href","/docs/transformers/pr_17845/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lN,"href","/docs/transformers/pr_17845/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iN,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dN,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cN,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fN,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mN,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gN,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hN,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pN,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(_N,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(uN,"href","/docs/transformers/pr_17845/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bN,"href","/docs/transformers/pr_17845/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vN,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDTokenizer"),c(FN,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDTokenizerFast"),c(TN,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MN,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EN,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Tokenizer"),c(CN,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5TokenizerFast"),c(wN,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeTokenizer"),c(AN,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(LN,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yN,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xN,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianTokenizer"),c($N,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartTokenizer"),c(kN,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SN,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RN,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(BN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(NN,"href","/docs/transformers/pr_17845/en/model_doc/mluke#transformers.MLukeTokenizer"),c(IN,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qN,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jN,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DN,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GN,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Tokenizer"),c(ON,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5TokenizerFast"),c(VN,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpTokenizer"),c(XN,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(zN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(QN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(WN,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizer"),c(HN,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UN,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(JN,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(YN,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KN,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZN,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eI,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oI,"href","/docs/transformers/pr_17845/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rI,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tI,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(nI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(sI,"href","/docs/transformers/pr_17845/en/model_doc/rag#transformers.RagTokenizer"),c(lI,"href","/docs/transformers/pr_17845/en/model_doc/realm#transformers.RealmTokenizer"),c(iI,"href","/docs/transformers/pr_17845/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dI,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cI,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fI,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mI,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gI,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hI,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pI,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_I,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uI,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bI,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vI,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(FI,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(TI,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterTokenizer"),c(MI,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(EI,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(CI,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wI,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Tokenizer"),c(AI,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5TokenizerFast"),c(LI,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasTokenizer"),c(yI,"href","/docs/transformers/pr_17845/en/model_doc/tapex#transformers.TapexTokenizer"),c(xI,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($I,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(kI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(SI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(RI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(PI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(II,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qI,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jI,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMTokenizer"),c(DI,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(GI,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(OI,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(VI,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XI,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zI,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QI,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(WI,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizer"),c(HI,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(Ii,"class","relative group"),c(UI,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(JI,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YI,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oq,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dq,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(fq,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(mq,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2FeatureExtractor"),c(_q,"href","/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($q,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(kq,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Sq,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPProcessor"),c(Rq,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPProcessor"),c(Pq,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Bq,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Nq,"href","/docs/transformers/pr_17845/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Iq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Dq,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Gq,"href","/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Oq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltProcessor"),c(zq,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Qq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Wq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Uq,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jq,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yq,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kq,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertModel"),c(Zq,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartModel"),c(ej,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitModel"),c(oj,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertModel"),c(rj,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tj,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdModel"),c(aj,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nj,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sj,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lj,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomModel"),c(ij,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertModel"),c(dj,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineModel"),c(cj,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPModel"),c(fj,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenModel"),c(mj,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertModel"),c(gj,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextModel"),c(hj,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLModel"),c(pj,"href","/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtModel"),c(_j,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(uj,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(bj,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(vj,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaModel"),c(Fj,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Tj,"href","/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Mj,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTModel"),c(Ej,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrModel"),c(Cj,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertModel"),c(wj,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Aj,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTModel"),c(Lj,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraModel"),c(yj,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertModel"),c(xj,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaModel"),c($j,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetModel"),c(kj,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTModel"),c(Sj,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelModel"),c(Rj,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Pj,"href","/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNModel"),c(Bj,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Model"),c(Nj,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Ij,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(qj,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJModel"),c(jj,"href","/docs/transformers/pr_17845/en/model_doc/groupvit#transformers.GroupViTModel"),c(Dj,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertModel"),c(Gj,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertModel"),c(Oj,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Vj,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Xj,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zj,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Qj,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDModel"),c(Wj,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitModel"),c(Hj,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerModel"),c(Uj,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Model"),c(Jj,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeModel"),c(Yj,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertModel"),c(Kj,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Model"),c(Zj,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianModel"),c(eD,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oD,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartModel"),c(rD,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTModel"),c(tD,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aD,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nD,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model"),c(sD,"href","/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTModel"),c(lD,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetModel"),c(iD,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Model"),c(dD,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpModel"),c(cD,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaModel"),c(fD,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerModel"),c(mD,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(gD,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTModel"),c(hD,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusModel"),c(pD,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverModel"),c(_D,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartModel"),c(uD,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerModel"),c(bD,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(vD,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertModel"),c(FD,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModel"),c(TD,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetModel"),c(MD,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertModel"),c(ED,"href","/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetModel"),c(CD,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel"),c(wD,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaModel"),c(AD,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerModel"),c(LD,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerModel"),c(yD,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWModel"),c(xD,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDModel"),c($D,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kD,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterModel"),c(SD,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(RD,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinModel"),c(PD,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Model"),c(BD,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasModel"),c(ND,"href","/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(ID,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(qD,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jD,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(DD,"href","/docs/transformers/pr_17845/en/model_doc/van#transformers.VanModel"),c(GD,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltModel"),c(OD,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(VD,"href","/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertModel"),c(XD,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTModel"),c(zD,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(QD,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(WD,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(HD,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMModel"),c(UD,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMModel"),c(JD,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMModel"),c(YD,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(KD,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ZD,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(eG,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetModel"),c(oG,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosModel"),c(rG,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(tG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sG,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForPreTraining"),c(lG,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForPreTraining"),c(dG,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(cG,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fG,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mG,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(gG,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hG,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pG,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_G,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uG,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForPreTraining"),c(bG,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vG,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaForPreTraining"),c(FG,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForPreTraining"),c(TG,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MG,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(EG,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(CG,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wG,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(AG,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LG,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yG,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(xG,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c($G,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kG,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(SG,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(RG,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(PG,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel"),c(BG,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(NG,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(IG,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(jG,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(DG,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GG,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(OG,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(VG,"href","/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(XG,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(zG,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(QG,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(WG,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HG,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(UG,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(JG,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForCausalLM"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(YG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForCausalLM"),c(oO,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertLMHeadModel"),c(rO,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(tO,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(aO,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(nO,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(sO,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(lO,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iO,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(dO,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(cO,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fO,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(mO,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForCausalLM"),c(gO,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(hO,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(pO,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(_O,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(uO,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianForCausalLM"),c(bO,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForCausalLM"),c(vO,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(FO,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForCausalLM"),c(TO,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(MO,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTForCausalLM"),c(EO,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(CO,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(wO,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(AO,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(LO,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(yO,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(xO,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForCausalLM"),c($O,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(kO,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(SO,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(RO,"href","/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(PO,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(BO,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NO,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(IO,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(qO,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(jO,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForMaskedLM"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(DO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VO,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(XO,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMaskedLM"),c(QO,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(WO,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(HO,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(UO,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(JO,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(YO,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(KO,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(eV,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oV,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(rV,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(tV,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(nV,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(sV,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeForMaskedLM"),c(lV,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(iV,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fV,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(mV,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(gV,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(hV,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(pV,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uV,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(vV,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(FV,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(TV,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MV,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(EV,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wV,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForSeq2SeqLM"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(AV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(PV,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianMTModel"),c(jV,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(XV,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X2,"id","transformers.AutoModelForSequenceClassification"),c(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X2,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(WV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($X,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForMultipleChoice"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(QX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(az,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForNextSentencePrediction"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(wz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(xz,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c($z,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(kz,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Sz,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Rz,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForTokenClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForTokenClassification"),c(jz,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(zz,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(bQ,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.AutoModelForQuestionAnswering"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(NQ,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17845/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(sW,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(dW,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.AutoModelForTableQuestionAnswering"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(cW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForImageClassification"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(hW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForImageClassification"),c(bW,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(vW,"href","/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtForImageClassification"),c(FW,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(TW,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassification"),c(MW,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(EW,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(CW,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassification"),c(wW,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(AW,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification"),c(LW,"href","/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(yW,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xW,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($W,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kW,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SW,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RW,"href","/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PW,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BW,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForImageClassification"),c(NW,"href","/docs/transformers/pr_17845/en/model_doc/van#transformers.VanForImageClassification"),c(IW,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForVision2Seq"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(qW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GW,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(OW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForAudioClassification"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForAudioFrameClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(aH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iH,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fH,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForCTC"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(mH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_H,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForCTC"),c(uH,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTForCTC"),c(bH,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForCTC"),c(vH,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForCTC"),c(FH,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(TH,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(MH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(EH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(CH,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(wH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(xH,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForAudioXVector"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c($H,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PH,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(BH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(NH,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(IH,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForMaskedImageModeling"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(qH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OH,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VH,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForObjectDetection"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(XH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HH,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.AutoModelForImageSegmentation"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(UH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s7,"id","transformers.AutoModelForSemanticSegmentation"),c(s7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tU,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(aU,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nU,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation"),c(sU,"href","/docs/transformers/pr_17845/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(lU,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.AutoModelForInstanceSegmentation"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(iU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModel"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(mU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertModel"),c(_U,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartModel"),c(uU,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertModel"),c(bU,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vU,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(FU,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertModel"),c(TU,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.TFCLIPModel"),c(MU,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertModel"),c(EU,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextModel"),c(CU,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wU,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AU,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaModel"),c(LU,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yU,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xU,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($U,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraModel"),c(kU,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(SU,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelModel"),c(RU,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(PU,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2Model"),c(BU,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJModel"),c(NU,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.TFHubertModel"),c(IU,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(qU,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDModel"),c(jU,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerModel"),c(DU,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertModel"),c(GU,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianModel"),c(OU,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartModel"),c(VU,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(XU,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zU,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5Model"),c(QU,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WU,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTModel"),c(HU,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusModel"),c(UU,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.TFRegNetModel"),c(JU,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertModel"),c(YU,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaModel"),c(KU,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerModel"),c(ZU,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(eJ,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinModel"),c(oJ,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5Model"),c(rJ,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasModel"),c(tJ,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(aJ,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTModel"),c(nJ,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(sJ,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(lJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMModel"),c(iJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(dJ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u8,"id","transformers.TFAutoModelForPreTraining"),c(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u8,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(hJ,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForPreTraining"),c(_J,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(bJ,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(FJ,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TJ,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(MJ,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(EJ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(wJ,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(AJ,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(yJ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($J,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SJ,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(RJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(PJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V8,"id","transformers.TFAutoModelForCausalLM"),c(V8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V8,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(DJ,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(GJ,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(OJ,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(VJ,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(XJ,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zJ,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(QJ,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(WJ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(HJ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(UJ,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YJ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.TFAutoModelForImageClassification"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rY,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tY,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(aY,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(nY,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForMaskedLM"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(sY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(fY,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mY,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(gY,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(hY,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(pY,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(uY,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(bY,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(vY,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(FY,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(TY,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(EY,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wY,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(AY,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(LY,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yY,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(xY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(NY,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianMTModel"),c(qY,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(jY,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForSequenceClassification"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(OY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForMultipleChoice"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(uK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(IK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(GK,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForTokenClassification"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(YK,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(KK,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.TFAutoModelForQuestionAnswering"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(LZ,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(NZ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(IZ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.TFAutoModelForVision2Seq"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(qZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GZ,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(OZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zZ,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModel"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(QZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertModel"),c(JZ,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartModel"),c(YZ,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitModel"),c(KZ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertModel"),c(ZZ,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(eee,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(oee,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ree,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.FlaxCLIPModel"),c(tee,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(aee,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraModel"),c(nee,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(see,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(lee,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(iee,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(dee,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianModel"),c(cee,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartModel"),c(fee,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5Model"),c(mee,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTModel"),c(gee,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(hee,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(pee,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_ee,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5Model"),c(uee,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(bee,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTModel"),c(vee,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Fee,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Tee,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForCausalLM"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(Mee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wee,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Aee,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Lee,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(yee,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(xee,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c($ee,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(kee,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(See,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ree,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Pee,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForPreTraining"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(Bee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qee,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jee,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Dee,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Gee,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Oee,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Vee,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Xee,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zee,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Qee,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Wee,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Hee,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Jee,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.FlaxAutoModelForMaskedLM"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(Yee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eoe,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ooe,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(roe,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(toe,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(aoe,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(noe,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(soe,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(loe,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ioe,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(doe,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(coe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(foe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(moe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(goe,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(poe,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(uoe,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(boe,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(voe,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Foe,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Toe,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Moe,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForSequenceClassification"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(Eoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($oe,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(koe,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Soe,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Roe,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Poe,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Boe,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c(Noe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ioe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(joe,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForTokenClassification"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(Uoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Joe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Koe,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ere,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ore,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(rre,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tre,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(are,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nre,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(sre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ire,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dre,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cre,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fre,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(mre,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gre,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hre,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pre,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(_re,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(ure,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fre,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForImageClassification"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(Tre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ere,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cre,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wre,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Are,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yre,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xre,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,oL),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Pn),e(Pn,rL),e(Qe,Bn),e(Qe,Nn),e(Nn,tL),e(Qe,$i),e(Qe,In),e(In,aL),e(Qe,ki),b(f,Bf,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,BS),e(Ae,Si),e(Si,NS),e(Ae,IS),b(f,Co,u),b(f,Ra,u),e(Ra,qS),e(Ra,Nf),e(Nf,jS),e(Ra,pHe),b(f,eXe,u),b(f,Ri,u),e(Ri,If),e(If,Cae),M(nL,Cae,null),e(Ri,_He),e(Ri,wae),e(wae,uHe),b(f,oXe,u),b(f,qn,u),e(qn,bHe),e(qn,Aae),e(Aae,vHe),e(qn,FHe),e(qn,Lae),e(Lae,THe),e(qn,MHe),b(f,rXe,u),M(sL,f,u),b(f,tXe,u),b(f,DS,u),e(DS,EHe),b(f,aXe,u),M(qf,f,u),b(f,nXe,u),b(f,Pi,u),e(Pi,jf),e(jf,yae),M(lL,yae,null),e(Pi,CHe),e(Pi,xae),e(xae,wHe),b(f,sXe,u),b(f,wo,u),M(iL,wo,null),e(wo,AHe),e(wo,dL),e(dL,LHe),e(dL,GS),e(GS,yHe),e(dL,xHe),e(wo,$He),e(wo,cL),e(cL,kHe),e(cL,$ae),e($ae,SHe),e(cL,RHe),e(wo,PHe),e(wo,Lr),M(fL,Lr,null),e(Lr,BHe),e(Lr,kae),e(kae,NHe),e(Lr,IHe),e(Lr,Bi),e(Bi,qHe),e(Bi,Sae),e(Sae,jHe),e(Bi,DHe),e(Bi,Rae),e(Rae,GHe),e(Bi,OHe),e(Lr,VHe),e(Lr,A),e(A,Df),e(Df,Pae),e(Pae,XHe),e(Df,zHe),e(Df,OS),e(OS,QHe),e(Df,WHe),e(A,HHe),e(A,Gf),e(Gf,Bae),e(Bae,UHe),e(Gf,JHe),e(Gf,VS),e(VS,YHe),e(Gf,KHe),e(A,ZHe),e(A,Of),e(Of,Nae),e(Nae,eUe),e(Of,oUe),e(Of,XS),e(XS,rUe),e(Of,tUe),e(A,aUe),e(A,Vf),e(Vf,Iae),e(Iae,nUe),e(Vf,sUe),e(Vf,zS),e(zS,lUe),e(Vf,iUe),e(A,dUe),e(A,Xf),e(Xf,qae),e(qae,cUe),e(Xf,fUe),e(Xf,QS),e(QS,mUe),e(Xf,gUe),e(A,hUe),e(A,zf),e(zf,jae),e(jae,pUe),e(zf,_Ue),e(zf,WS),e(WS,uUe),e(zf,bUe),e(A,vUe),e(A,Qf),e(Qf,Dae),e(Dae,FUe),e(Qf,TUe),e(Qf,HS),e(HS,MUe),e(Qf,EUe),e(A,CUe),e(A,Wf),e(Wf,Gae),e(Gae,wUe),e(Wf,AUe),e(Wf,US),e(US,LUe),e(Wf,yUe),e(A,xUe),e(A,Hf),e(Hf,Oae),e(Oae,$Ue),e(Hf,kUe),e(Hf,JS),e(JS,SUe),e(Hf,RUe),e(A,PUe),e(A,Uf),e(Uf,Vae),e(Vae,BUe),e(Uf,NUe),e(Uf,YS),e(YS,IUe),e(Uf,qUe),e(A,jUe),e(A,Jf),e(Jf,Xae),e(Xae,DUe),e(Jf,GUe),e(Jf,KS),e(KS,OUe),e(Jf,VUe),e(A,XUe),e(A,Yf),e(Yf,zae),e(zae,zUe),e(Yf,QUe),e(Yf,ZS),e(ZS,WUe),e(Yf,HUe),e(A,UUe),e(A,Kf),e(Kf,Qae),e(Qae,JUe),e(Kf,YUe),e(Kf,eR),e(eR,KUe),e(Kf,ZUe),e(A,eJe),e(A,Zf),e(Zf,Wae),e(Wae,oJe),e(Zf,rJe),e(Zf,oR),e(oR,tJe),e(Zf,aJe),e(A,nJe),e(A,em),e(em,Hae),e(Hae,sJe),e(em,lJe),e(em,rR),e(rR,iJe),e(em,dJe),e(A,cJe),e(A,om),e(om,Uae),e(Uae,fJe),e(om,mJe),e(om,tR),e(tR,gJe),e(om,hJe),e(A,pJe),e(A,rm),e(rm,Jae),e(Jae,_Je),e(rm,uJe),e(rm,aR),e(aR,bJe),e(rm,vJe),e(A,FJe),e(A,tm),e(tm,Yae),e(Yae,TJe),e(tm,MJe),e(tm,nR),e(nR,EJe),e(tm,CJe),e(A,wJe),e(A,am),e(am,Kae),e(Kae,AJe),e(am,LJe),e(am,sR),e(sR,yJe),e(am,xJe),e(A,$Je),e(A,nm),e(nm,Zae),e(Zae,kJe),e(nm,SJe),e(nm,lR),e(lR,RJe),e(nm,PJe),e(A,BJe),e(A,sm),e(sm,ene),e(ene,NJe),e(sm,IJe),e(sm,iR),e(iR,qJe),e(sm,jJe),e(A,DJe),e(A,lm),e(lm,one),e(one,GJe),e(lm,OJe),e(lm,dR),e(dR,VJe),e(lm,XJe),e(A,zJe),e(A,im),e(im,rne),e(rne,QJe),e(im,WJe),e(im,cR),e(cR,HJe),e(im,UJe),e(A,JJe),e(A,dm),e(dm,tne),e(tne,YJe),e(dm,KJe),e(dm,fR),e(fR,ZJe),e(dm,eYe),e(A,oYe),e(A,cm),e(cm,ane),e(ane,rYe),e(cm,tYe),e(cm,mR),e(mR,aYe),e(cm,nYe),e(A,sYe),e(A,fm),e(fm,nne),e(nne,lYe),e(fm,iYe),e(fm,gR),e(gR,dYe),e(fm,cYe),e(A,fYe),e(A,mm),e(mm,sne),e(sne,mYe),e(mm,gYe),e(mm,hR),e(hR,hYe),e(mm,pYe),e(A,_Ye),e(A,gm),e(gm,lne),e(lne,uYe),e(gm,bYe),e(gm,pR),e(pR,vYe),e(gm,FYe),e(A,TYe),e(A,hm),e(hm,ine),e(ine,MYe),e(hm,EYe),e(hm,_R),e(_R,CYe),e(hm,wYe),e(A,AYe),e(A,pm),e(pm,dne),e(dne,LYe),e(pm,yYe),e(pm,uR),e(uR,xYe),e(pm,$Ye),e(A,kYe),e(A,_m),e(_m,cne),e(cne,SYe),e(_m,RYe),e(_m,bR),e(bR,PYe),e(_m,BYe),e(A,NYe),e(A,um),e(um,fne),e(fne,IYe),e(um,qYe),e(um,vR),e(vR,jYe),e(um,DYe),e(A,GYe),e(A,bm),e(bm,mne),e(mne,OYe),e(bm,VYe),e(bm,FR),e(FR,XYe),e(bm,zYe),e(A,QYe),e(A,vm),e(vm,gne),e(gne,WYe),e(vm,HYe),e(vm,TR),e(TR,UYe),e(vm,JYe),e(A,YYe),e(A,Fm),e(Fm,hne),e(hne,KYe),e(Fm,ZYe),e(Fm,MR),e(MR,eKe),e(Fm,oKe),e(A,rKe),e(A,Tm),e(Tm,pne),e(pne,tKe),e(Tm,aKe),e(Tm,ER),e(ER,nKe),e(Tm,sKe),e(A,lKe),e(A,Mm),e(Mm,_ne),e(_ne,iKe),e(Mm,dKe),e(Mm,CR),e(CR,cKe),e(Mm,fKe),e(A,mKe),e(A,Em),e(Em,une),e(une,gKe),e(Em,hKe),e(Em,wR),e(wR,pKe),e(Em,_Ke),e(A,uKe),e(A,Cm),e(Cm,bne),e(bne,bKe),e(Cm,vKe),e(Cm,AR),e(AR,FKe),e(Cm,TKe),e(A,MKe),e(A,wm),e(wm,vne),e(vne,EKe),e(wm,CKe),e(wm,LR),e(LR,wKe),e(wm,AKe),e(A,LKe),e(A,Am),e(Am,Fne),e(Fne,yKe),e(Am,xKe),e(Am,yR),e(yR,$Ke),e(Am,kKe),e(A,SKe),e(A,Lm),e(Lm,Tne),e(Tne,RKe),e(Lm,PKe),e(Lm,xR),e(xR,BKe),e(Lm,NKe),e(A,IKe),e(A,ym),e(ym,Mne),e(Mne,qKe),e(ym,jKe),e(ym,$R),e($R,DKe),e(ym,GKe),e(A,OKe),e(A,xm),e(xm,Ene),e(Ene,VKe),e(xm,XKe),e(xm,kR),e(kR,zKe),e(xm,QKe),e(A,WKe),e(A,$m),e($m,Cne),e(Cne,HKe),e($m,UKe),e($m,SR),e(SR,JKe),e($m,YKe),e(A,KKe),e(A,km),e(km,wne),e(wne,ZKe),e(km,eZe),e(km,RR),e(RR,oZe),e(km,rZe),e(A,tZe),e(A,Sm),e(Sm,Ane),e(Ane,aZe),e(Sm,nZe),e(Sm,PR),e(PR,sZe),e(Sm,lZe),e(A,iZe),e(A,Rm),e(Rm,Lne),e(Lne,dZe),e(Rm,cZe),e(Rm,BR),e(BR,fZe),e(Rm,mZe),e(A,gZe),e(A,Pm),e(Pm,yne),e(yne,hZe),e(Pm,pZe),e(Pm,NR),e(NR,_Ze),e(Pm,uZe),e(A,bZe),e(A,Bm),e(Bm,xne),e(xne,vZe),e(Bm,FZe),e(Bm,IR),e(IR,TZe),e(Bm,MZe),e(A,EZe),e(A,Nm),e(Nm,$ne),e($ne,CZe),e(Nm,wZe),e(Nm,qR),e(qR,AZe),e(Nm,LZe),e(A,yZe),e(A,Im),e(Im,kne),e(kne,xZe),e(Im,$Ze),e(Im,jR),e(jR,kZe),e(Im,SZe),e(A,RZe),e(A,qm),e(qm,Sne),e(Sne,PZe),e(qm,BZe),e(qm,DR),e(DR,NZe),e(qm,IZe),e(A,qZe),e(A,jm),e(jm,Rne),e(Rne,jZe),e(jm,DZe),e(jm,GR),e(GR,GZe),e(jm,OZe),e(A,VZe),e(A,Dm),e(Dm,Pne),e(Pne,XZe),e(Dm,zZe),e(Dm,OR),e(OR,QZe),e(Dm,WZe),e(A,HZe),e(A,Gm),e(Gm,Bne),e(Bne,UZe),e(Gm,JZe),e(Gm,VR),e(VR,YZe),e(Gm,KZe),e(A,ZZe),e(A,Om),e(Om,Nne),e(Nne,eeo),e(Om,oeo),e(Om,XR),e(XR,reo),e(Om,teo),e(A,aeo),e(A,Vm),e(Vm,Ine),e(Ine,neo),e(Vm,seo),e(Vm,zR),e(zR,leo),e(Vm,ieo),e(A,deo),e(A,Xm),e(Xm,qne),e(qne,ceo),e(Xm,feo),e(Xm,QR),e(QR,meo),e(Xm,geo),e(A,heo),e(A,zm),e(zm,jne),e(jne,peo),e(zm,_eo),e(zm,WR),e(WR,ueo),e(zm,beo),e(A,veo),e(A,Qm),e(Qm,Dne),e(Dne,Feo),e(Qm,Teo),e(Qm,HR),e(HR,Meo),e(Qm,Eeo),e(A,Ceo),e(A,Wm),e(Wm,Gne),e(Gne,weo),e(Wm,Aeo),e(Wm,UR),e(UR,Leo),e(Wm,yeo),e(A,xeo),e(A,Hm),e(Hm,One),e(One,$eo),e(Hm,keo),e(Hm,JR),e(JR,Seo),e(Hm,Reo),e(A,Peo),e(A,Um),e(Um,Vne),e(Vne,Beo),e(Um,Neo),e(Um,YR),e(YR,Ieo),e(Um,qeo),e(A,jeo),e(A,Jm),e(Jm,Xne),e(Xne,Deo),e(Jm,Geo),e(Jm,KR),e(KR,Oeo),e(Jm,Veo),e(A,Xeo),e(A,Ym),e(Ym,zne),e(zne,zeo),e(Ym,Qeo),e(Ym,ZR),e(ZR,Weo),e(Ym,Heo),e(A,Ueo),e(A,Km),e(Km,Qne),e(Qne,Jeo),e(Km,Yeo),e(Km,eP),e(eP,Keo),e(Km,Zeo),e(A,eoo),e(A,Zm),e(Zm,Wne),e(Wne,ooo),e(Zm,roo),e(Zm,oP),e(oP,too),e(Zm,aoo),e(A,noo),e(A,eg),e(eg,Hne),e(Hne,soo),e(eg,loo),e(eg,rP),e(rP,ioo),e(eg,doo),e(A,coo),e(A,og),e(og,Une),e(Une,foo),e(og,moo),e(og,tP),e(tP,goo),e(og,hoo),e(A,poo),e(A,rg),e(rg,Jne),e(Jne,_oo),e(rg,uoo),e(rg,aP),e(aP,boo),e(rg,voo),e(A,Foo),e(A,tg),e(tg,Yne),e(Yne,Too),e(tg,Moo),e(tg,nP),e(nP,Eoo),e(tg,Coo),e(A,woo),e(A,ag),e(ag,Kne),e(Kne,Aoo),e(ag,Loo),e(ag,sP),e(sP,yoo),e(ag,xoo),e(A,$oo),e(A,ng),e(ng,Zne),e(Zne,koo),e(ng,Soo),e(ng,lP),e(lP,Roo),e(ng,Poo),e(A,Boo),e(A,sg),e(sg,ese),e(ese,Noo),e(sg,Ioo),e(sg,iP),e(iP,qoo),e(sg,joo),e(A,Doo),e(A,lg),e(lg,ose),e(ose,Goo),e(lg,Ooo),e(lg,dP),e(dP,Voo),e(lg,Xoo),e(A,zoo),e(A,ig),e(ig,rse),e(rse,Qoo),e(ig,Woo),e(ig,cP),e(cP,Hoo),e(ig,Uoo),e(A,Joo),e(A,dg),e(dg,tse),e(tse,Yoo),e(dg,Koo),e(dg,fP),e(fP,Zoo),e(dg,ero),e(A,oro),e(A,cg),e(cg,ase),e(ase,rro),e(cg,tro),e(cg,mP),e(mP,aro),e(cg,nro),e(A,sro),e(A,fg),e(fg,nse),e(nse,lro),e(fg,iro),e(fg,gP),e(gP,dro),e(fg,cro),e(A,fro),e(A,mg),e(mg,sse),e(sse,mro),e(mg,gro),e(mg,hP),e(hP,hro),e(mg,pro),e(A,_ro),e(A,gg),e(gg,lse),e(lse,uro),e(gg,bro),e(gg,pP),e(pP,vro),e(gg,Fro),e(A,Tro),e(A,hg),e(hg,ise),e(ise,Mro),e(hg,Ero),e(hg,_P),e(_P,Cro),e(hg,wro),e(A,Aro),e(A,pg),e(pg,dse),e(dse,Lro),e(pg,yro),e(pg,uP),e(uP,xro),e(pg,$ro),e(A,kro),e(A,_g),e(_g,cse),e(cse,Sro),e(_g,Rro),e(_g,bP),e(bP,Pro),e(_g,Bro),e(A,Nro),e(A,ug),e(ug,fse),e(fse,Iro),e(ug,qro),e(ug,vP),e(vP,jro),e(ug,Dro),e(A,Gro),e(A,bg),e(bg,mse),e(mse,Oro),e(bg,Vro),e(bg,FP),e(FP,Xro),e(bg,zro),e(A,Qro),e(A,vg),e(vg,gse),e(gse,Wro),e(vg,Hro),e(vg,TP),e(TP,Uro),e(vg,Jro),e(A,Yro),e(A,Fg),e(Fg,hse),e(hse,Kro),e(Fg,Zro),e(Fg,MP),e(MP,eto),e(Fg,oto),e(A,rto),e(A,Tg),e(Tg,pse),e(pse,tto),e(Tg,ato),e(Tg,EP),e(EP,nto),e(Tg,sto),e(A,lto),e(A,Mg),e(Mg,_se),e(_se,ito),e(Mg,dto),e(Mg,CP),e(CP,cto),e(Mg,fto),e(A,mto),e(A,Eg),e(Eg,use),e(use,gto),e(Eg,hto),e(Eg,wP),e(wP,pto),e(Eg,_to),e(A,uto),e(A,Cg),e(Cg,bse),e(bse,bto),e(Cg,vto),e(Cg,AP),e(AP,Fto),e(Cg,Tto),e(A,Mto),e(A,wg),e(wg,vse),e(vse,Eto),e(wg,Cto),e(wg,LP),e(LP,wto),e(wg,Ato),e(A,Lto),e(A,Ag),e(Ag,Fse),e(Fse,yto),e(Ag,xto),e(Ag,yP),e(yP,$to),e(Ag,kto),e(A,Sto),e(A,Lg),e(Lg,Tse),e(Tse,Rto),e(Lg,Pto),e(Lg,xP),e(xP,Bto),e(Lg,Nto),e(A,Ito),e(A,yg),e(yg,Mse),e(Mse,qto),e(yg,jto),e(yg,$P),e($P,Dto),e(yg,Gto),e(A,Oto),e(A,xg),e(xg,Ese),e(Ese,Vto),e(xg,Xto),e(xg,kP),e(kP,zto),e(xg,Qto),e(A,Wto),e(A,$g),e($g,Cse),e(Cse,Hto),e($g,Uto),e($g,SP),e(SP,Jto),e($g,Yto),e(A,Kto),e(A,kg),e(kg,wse),e(wse,Zto),e(kg,eao),e(kg,RP),e(RP,oao),e(kg,rao),e(A,tao),e(A,Sg),e(Sg,Ase),e(Ase,aao),e(Sg,nao),e(Sg,PP),e(PP,sao),e(Sg,lao),e(A,iao),e(A,Rg),e(Rg,Lse),e(Lse,dao),e(Rg,cao),e(Rg,BP),e(BP,fao),e(Rg,mao),e(A,gao),e(A,Pg),e(Pg,yse),e(yse,hao),e(Pg,pao),e(Pg,NP),e(NP,_ao),e(Pg,uao),e(A,bao),e(A,Bg),e(Bg,xse),e(xse,vao),e(Bg,Fao),e(Bg,IP),e(IP,Tao),e(Bg,Mao),e(A,Eao),e(A,Ng),e(Ng,$se),e($se,Cao),e(Ng,wao),e(Ng,qP),e(qP,Aao),e(Ng,Lao),e(A,yao),e(A,Ig),e(Ig,kse),e(kse,xao),e(Ig,$ao),e(Ig,jP),e(jP,kao),e(Ig,Sao),e(A,Rao),e(A,qg),e(qg,Sse),e(Sse,Pao),e(qg,Bao),e(qg,DP),e(DP,Nao),e(qg,Iao),e(A,qao),e(A,jg),e(jg,Rse),e(Rse,jao),e(jg,Dao),e(jg,GP),e(GP,Gao),e(jg,Oao),e(A,Vao),e(A,Dg),e(Dg,Pse),e(Pse,Xao),e(Dg,zao),e(Dg,OP),e(OP,Qao),e(Dg,Wao),e(A,Hao),e(A,Gg),e(Gg,Bse),e(Bse,Uao),e(Gg,Jao),e(Gg,VP),e(VP,Yao),e(Gg,Kao),e(A,Zao),e(A,Og),e(Og,Nse),e(Nse,eno),e(Og,ono),e(Og,XP),e(XP,rno),e(Og,tno),e(A,ano),e(A,Vg),e(Vg,Ise),e(Ise,nno),e(Vg,sno),e(Vg,zP),e(zP,lno),e(Vg,ino),e(A,dno),e(A,Xg),e(Xg,qse),e(qse,cno),e(Xg,fno),e(Xg,QP),e(QP,mno),e(Xg,gno),e(A,hno),e(A,zg),e(zg,jse),e(jse,pno),e(zg,_no),e(zg,WP),e(WP,uno),e(zg,bno),e(A,vno),e(A,Qg),e(Qg,Dse),e(Dse,Fno),e(Qg,Tno),e(Qg,HP),e(HP,Mno),e(Qg,Eno),e(A,Cno),e(A,Wg),e(Wg,Gse),e(Gse,wno),e(Wg,Ano),e(Wg,UP),e(UP,Lno),e(Wg,yno),e(A,xno),e(A,Hg),e(Hg,Ose),e(Ose,$no),e(Hg,kno),e(Hg,JP),e(JP,Sno),e(Hg,Rno),e(A,Pno),e(A,Ug),e(Ug,Vse),e(Vse,Bno),e(Ug,Nno),e(Ug,YP),e(YP,Ino),e(Ug,qno),e(A,jno),e(A,Jg),e(Jg,Xse),e(Xse,Dno),e(Jg,Gno),e(Jg,KP),e(KP,Ono),e(Jg,Vno),e(Lr,Xno),M(Yg,Lr,null),e(wo,zno),e(wo,Kg),M(mL,Kg,null),e(Kg,Qno),e(Kg,zse),e(zse,Wno),b(f,lXe,u),b(f,Ni,u),e(Ni,Zg),e(Zg,Qse),M(gL,Qse,null),e(Ni,Hno),e(Ni,Wse),e(Wse,Uno),b(f,iXe,u),b(f,Ao,u),M(hL,Ao,null),e(Ao,Jno),e(Ao,pL),e(pL,Yno),e(pL,ZP),e(ZP,Kno),e(pL,Zno),e(Ao,eso),e(Ao,_L),e(_L,oso),e(_L,Hse),e(Hse,rso),e(_L,tso),e(Ao,aso),e(Ao,yr),M(uL,yr,null),e(yr,nso),e(yr,Use),e(Use,sso),e(yr,lso),e(yr,Pa),e(Pa,iso),e(Pa,Jse),e(Jse,dso),e(Pa,cso),e(Pa,Yse),e(Yse,fso),e(Pa,mso),e(Pa,Kse),e(Kse,gso),e(Pa,hso),e(yr,pso),e(yr,k),e(k,jn),e(jn,Zse),e(Zse,_so),e(jn,uso),e(jn,eB),e(eB,bso),e(jn,vso),e(jn,oB),e(oB,Fso),e(jn,Tso),e(k,Mso),e(k,Dn),e(Dn,ele),e(ele,Eso),e(Dn,Cso),e(Dn,rB),e(rB,wso),e(Dn,Aso),e(Dn,tB),e(tB,Lso),e(Dn,yso),e(k,xso),e(k,Gn),e(Gn,ole),e(ole,$so),e(Gn,kso),e(Gn,aB),e(aB,Sso),e(Gn,Rso),e(Gn,nB),e(nB,Pso),e(Gn,Bso),e(k,Nso),e(k,eh),e(eh,rle),e(rle,Iso),e(eh,qso),e(eh,sB),e(sB,jso),e(eh,Dso),e(k,Gso),e(k,On),e(On,tle),e(tle,Oso),e(On,Vso),e(On,lB),e(lB,Xso),e(On,zso),e(On,iB),e(iB,Qso),e(On,Wso),e(k,Hso),e(k,oh),e(oh,ale),e(ale,Uso),e(oh,Jso),e(oh,dB),e(dB,Yso),e(oh,Kso),e(k,Zso),e(k,rh),e(rh,nle),e(nle,elo),e(rh,olo),e(rh,cB),e(cB,rlo),e(rh,tlo),e(k,alo),e(k,th),e(th,sle),e(sle,nlo),e(th,slo),e(th,fB),e(fB,llo),e(th,ilo),e(k,dlo),e(k,Vn),e(Vn,lle),e(lle,clo),e(Vn,flo),e(Vn,mB),e(mB,mlo),e(Vn,glo),e(Vn,gB),e(gB,hlo),e(Vn,plo),e(k,_lo),e(k,Xn),e(Xn,ile),e(ile,ulo),e(Xn,blo),e(Xn,hB),e(hB,vlo),e(Xn,Flo),e(Xn,pB),e(pB,Tlo),e(Xn,Mlo),e(k,Elo),e(k,zn),e(zn,dle),e(dle,Clo),e(zn,wlo),e(zn,_B),e(_B,Alo),e(zn,Llo),e(zn,uB),e(uB,ylo),e(zn,xlo),e(k,$lo),e(k,ah),e(ah,cle),e(cle,klo),e(ah,Slo),e(ah,bB),e(bB,Rlo),e(ah,Plo),e(k,Blo),e(k,nh),e(nh,fle),e(fle,Nlo),e(nh,Ilo),e(nh,vB),e(vB,qlo),e(nh,jlo),e(k,Dlo),e(k,sh),e(sh,mle),e(mle,Glo),e(sh,Olo),e(sh,FB),e(FB,Vlo),e(sh,Xlo),e(k,zlo),e(k,Qn),e(Qn,gle),e(gle,Qlo),e(Qn,Wlo),e(Qn,TB),e(TB,Hlo),e(Qn,Ulo),e(Qn,MB),e(MB,Jlo),e(Qn,Ylo),e(k,Klo),e(k,lh),e(lh,hle),e(hle,Zlo),e(lh,eio),e(lh,EB),e(EB,oio),e(lh,rio),e(k,tio),e(k,Wn),e(Wn,ple),e(ple,aio),e(Wn,nio),e(Wn,CB),e(CB,sio),e(Wn,lio),e(Wn,wB),e(wB,iio),e(Wn,dio),e(k,cio),e(k,Hn),e(Hn,_le),e(_le,fio),e(Hn,mio),e(Hn,AB),e(AB,gio),e(Hn,hio),e(Hn,LB),e(LB,pio),e(Hn,_io),e(k,uio),e(k,Un),e(Un,ule),e(ule,bio),e(Un,vio),e(Un,yB),e(yB,Fio),e(Un,Tio),e(Un,xB),e(xB,Mio),e(Un,Eio),e(k,Cio),e(k,Jn),e(Jn,ble),e(ble,wio),e(Jn,Aio),e(Jn,$B),e($B,Lio),e(Jn,yio),e(Jn,kB),e(kB,xio),e(Jn,$io),e(k,kio),e(k,ih),e(ih,vle),e(vle,Sio),e(ih,Rio),e(ih,SB),e(SB,Pio),e(ih,Bio),e(k,Nio),e(k,Yn),e(Yn,Fle),e(Fle,Iio),e(Yn,qio),e(Yn,RB),e(RB,jio),e(Yn,Dio),e(Yn,PB),e(PB,Gio),e(Yn,Oio),e(k,Vio),e(k,Kn),e(Kn,Tle),e(Tle,Xio),e(Kn,zio),e(Kn,BB),e(BB,Qio),e(Kn,Wio),e(Kn,NB),e(NB,Hio),e(Kn,Uio),e(k,Jio),e(k,Zn),e(Zn,Mle),e(Mle,Yio),e(Zn,Kio),e(Zn,IB),e(IB,Zio),e(Zn,edo),e(Zn,qB),e(qB,odo),e(Zn,rdo),e(k,tdo),e(k,es),e(es,Ele),e(Ele,ado),e(es,ndo),e(es,jB),e(jB,sdo),e(es,ldo),e(es,DB),e(DB,ido),e(es,ddo),e(k,cdo),e(k,os),e(os,Cle),e(Cle,fdo),e(os,mdo),e(os,GB),e(GB,gdo),e(os,hdo),e(os,OB),e(OB,pdo),e(os,_do),e(k,udo),e(k,rs),e(rs,wle),e(wle,bdo),e(rs,vdo),e(rs,VB),e(VB,Fdo),e(rs,Tdo),e(rs,XB),e(XB,Mdo),e(rs,Edo),e(k,Cdo),e(k,dh),e(dh,Ale),e(Ale,wdo),e(dh,Ado),e(dh,zB),e(zB,Ldo),e(dh,ydo),e(k,xdo),e(k,ts),e(ts,Lle),e(Lle,$do),e(ts,kdo),e(ts,QB),e(QB,Sdo),e(ts,Rdo),e(ts,WB),e(WB,Pdo),e(ts,Bdo),e(k,Ndo),e(k,ch),e(ch,yle),e(yle,Ido),e(ch,qdo),e(ch,HB),e(HB,jdo),e(ch,Ddo),e(k,Gdo),e(k,as),e(as,xle),e(xle,Odo),e(as,Vdo),e(as,UB),e(UB,Xdo),e(as,zdo),e(as,JB),e(JB,Qdo),e(as,Wdo),e(k,Hdo),e(k,ns),e(ns,$le),e($le,Udo),e(ns,Jdo),e(ns,YB),e(YB,Ydo),e(ns,Kdo),e(ns,KB),e(KB,Zdo),e(ns,eco),e(k,oco),e(k,ss),e(ss,kle),e(kle,rco),e(ss,tco),e(ss,ZB),e(ZB,aco),e(ss,nco),e(ss,eN),e(eN,sco),e(ss,lco),e(k,ico),e(k,fh),e(fh,Sle),e(Sle,dco),e(fh,cco),e(fh,oN),e(oN,fco),e(fh,mco),e(k,gco),e(k,ls),e(ls,Rle),e(Rle,hco),e(ls,pco),e(ls,rN),e(rN,_co),e(ls,uco),e(ls,tN),e(tN,bco),e(ls,vco),e(k,Fco),e(k,is),e(is,Ple),e(Ple,Tco),e(is,Mco),e(is,aN),e(aN,Eco),e(is,Cco),e(is,nN),e(nN,wco),e(is,Aco),e(k,Lco),e(k,ds),e(ds,Ble),e(Ble,yco),e(ds,xco),e(ds,sN),e(sN,$co),e(ds,kco),e(ds,lN),e(lN,Sco),e(ds,Rco),e(k,Pco),e(k,mh),e(mh,Nle),e(Nle,Bco),e(mh,Nco),e(mh,iN),e(iN,Ico),e(mh,qco),e(k,jco),e(k,cs),e(cs,Ile),e(Ile,Dco),e(cs,Gco),e(cs,dN),e(dN,Oco),e(cs,Vco),e(cs,cN),e(cN,Xco),e(cs,zco),e(k,Qco),e(k,fs),e(fs,qle),e(qle,Wco),e(fs,Hco),e(fs,fN),e(fN,Uco),e(fs,Jco),e(fs,mN),e(mN,Yco),e(fs,Kco),e(k,Zco),e(k,ms),e(ms,jle),e(jle,efo),e(ms,ofo),e(ms,gN),e(gN,rfo),e(ms,tfo),e(ms,hN),e(hN,afo),e(ms,nfo),e(k,sfo),e(k,gs),e(gs,Dle),e(Dle,lfo),e(gs,ifo),e(gs,pN),e(pN,dfo),e(gs,cfo),e(gs,_N),e(_N,ffo),e(gs,mfo),e(k,gfo),e(k,hs),e(hs,Gle),e(Gle,hfo),e(hs,pfo),e(hs,uN),e(uN,_fo),e(hs,ufo),e(hs,bN),e(bN,bfo),e(hs,vfo),e(k,Ffo),e(k,ps),e(ps,Ole),e(Ole,Tfo),e(ps,Mfo),e(ps,vN),e(vN,Efo),e(ps,Cfo),e(ps,FN),e(FN,wfo),e(ps,Afo),e(k,Lfo),e(k,_s),e(_s,Vle),e(Vle,yfo),e(_s,xfo),e(_s,TN),e(TN,$fo),e(_s,kfo),e(_s,MN),e(MN,Sfo),e(_s,Rfo),e(k,Pfo),e(k,us),e(us,Xle),e(Xle,Bfo),e(us,Nfo),e(us,EN),e(EN,Ifo),e(us,qfo),e(us,CN),e(CN,jfo),e(us,Dfo),e(k,Gfo),e(k,gh),e(gh,zle),e(zle,Ofo),e(gh,Vfo),e(gh,wN),e(wN,Xfo),e(gh,zfo),e(k,Qfo),e(k,bs),e(bs,Qle),e(Qle,Wfo),e(bs,Hfo),e(bs,AN),e(AN,Ufo),e(bs,Jfo),e(bs,LN),e(LN,Yfo),e(bs,Kfo),e(k,Zfo),e(k,hh),e(hh,Wle),e(Wle,emo),e(hh,omo),e(hh,yN),e(yN,rmo),e(hh,tmo),e(k,amo),e(k,ph),e(ph,Hle),e(Hle,nmo),e(ph,smo),e(ph,xN),e(xN,lmo),e(ph,imo),e(k,dmo),e(k,vs),e(vs,Ule),e(Ule,cmo),e(vs,fmo),e(vs,$N),e($N,mmo),e(vs,gmo),e(vs,kN),e(kN,hmo),e(vs,pmo),e(k,_mo),e(k,Fs),e(Fs,Jle),e(Jle,umo),e(Fs,bmo),e(Fs,SN),e(SN,vmo),e(Fs,Fmo),e(Fs,RN),e(RN,Tmo),e(Fs,Mmo),e(k,Emo),e(k,Ts),e(Ts,Yle),e(Yle,Cmo),e(Ts,wmo),e(Ts,PN),e(PN,Amo),e(Ts,Lmo),e(Ts,BN),e(BN,ymo),e(Ts,xmo),e(k,$mo),e(k,_h),e(_h,Kle),e(Kle,kmo),e(_h,Smo),e(_h,NN),e(NN,Rmo),e(_h,Pmo),e(k,Bmo),e(k,Ms),e(Ms,Zle),e(Zle,Nmo),e(Ms,Imo),e(Ms,IN),e(IN,qmo),e(Ms,jmo),e(Ms,qN),e(qN,Dmo),e(Ms,Gmo),e(k,Omo),e(k,Es),e(Es,eie),e(eie,Vmo),e(Es,Xmo),e(Es,jN),e(jN,zmo),e(Es,Qmo),e(Es,DN),e(DN,Wmo),e(Es,Hmo),e(k,Umo),e(k,Cs),e(Cs,oie),e(oie,Jmo),e(Cs,Ymo),e(Cs,GN),e(GN,Kmo),e(Cs,Zmo),e(Cs,ON),e(ON,ego),e(Cs,ogo),e(k,rgo),e(k,ws),e(ws,rie),e(rie,tgo),e(ws,ago),e(ws,VN),e(VN,ngo),e(ws,sgo),e(ws,XN),e(XN,lgo),e(ws,igo),e(k,dgo),e(k,As),e(As,tie),e(tie,cgo),e(As,fgo),e(As,zN),e(zN,mgo),e(As,ggo),e(As,QN),e(QN,hgo),e(As,pgo),e(k,_go),e(k,Ls),e(Ls,aie),e(aie,ugo),e(Ls,bgo),e(Ls,WN),e(WN,vgo),e(Ls,Fgo),e(Ls,HN),e(HN,Tgo),e(Ls,Mgo),e(k,Ego),e(k,ys),e(ys,nie),e(nie,Cgo),e(ys,wgo),e(ys,UN),e(UN,Ago),e(ys,Lgo),e(ys,JN),e(JN,ygo),e(ys,xgo),e(k,$go),e(k,uh),e(uh,sie),e(sie,kgo),e(uh,Sgo),e(uh,YN),e(YN,Rgo),e(uh,Pgo),e(k,Bgo),e(k,xs),e(xs,lie),e(lie,Ngo),e(xs,Igo),e(xs,KN),e(KN,qgo),e(xs,jgo),e(xs,ZN),e(ZN,Dgo),e(xs,Ggo),e(k,Ogo),e(k,bh),e(bh,iie),e(iie,Vgo),e(bh,Xgo),e(bh,eI),e(eI,zgo),e(bh,Qgo),e(k,Wgo),e(k,vh),e(vh,die),e(die,Hgo),e(vh,Ugo),e(vh,oI),e(oI,Jgo),e(vh,Ygo),e(k,Kgo),e(k,Fh),e(Fh,cie),e(cie,Zgo),e(Fh,eho),e(Fh,rI),e(rI,oho),e(Fh,rho),e(k,tho),e(k,Th),e(Th,fie),e(fie,aho),e(Th,nho),e(Th,tI),e(tI,sho),e(Th,lho),e(k,iho),e(k,$s),e($s,mie),e(mie,dho),e($s,cho),e($s,aI),e(aI,fho),e($s,mho),e($s,nI),e(nI,gho),e($s,hho),e(k,pho),e(k,Mh),e(Mh,gie),e(gie,_ho),e(Mh,uho),e(Mh,sI),e(sI,bho),e(Mh,vho),e(k,Fho),e(k,ks),e(ks,hie),e(hie,Tho),e(ks,Mho),e(ks,lI),e(lI,Eho),e(ks,Cho),e(ks,iI),e(iI,who),e(ks,Aho),e(k,Lho),e(k,Ss),e(Ss,pie),e(pie,yho),e(Ss,xho),e(Ss,dI),e(dI,$ho),e(Ss,kho),e(Ss,cI),e(cI,Sho),e(Ss,Rho),e(k,Pho),e(k,Rs),e(Rs,_ie),e(_ie,Bho),e(Rs,Nho),e(Rs,fI),e(fI,Iho),e(Rs,qho),e(Rs,mI),e(mI,jho),e(Rs,Dho),e(k,Gho),e(k,Ps),e(Ps,uie),e(uie,Oho),e(Ps,Vho),e(Ps,gI),e(gI,Xho),e(Ps,zho),e(Ps,hI),e(hI,Qho),e(Ps,Who),e(k,Hho),e(k,Bs),e(Bs,bie),e(bie,Uho),e(Bs,Jho),e(Bs,pI),e(pI,Yho),e(Bs,Kho),e(Bs,_I),e(_I,Zho),e(Bs,epo),e(k,opo),e(k,Ns),e(Ns,vie),e(vie,rpo),e(Ns,tpo),e(Ns,uI),e(uI,apo),e(Ns,npo),e(Ns,bI),e(bI,spo),e(Ns,lpo),e(k,ipo),e(k,Eh),e(Eh,Fie),e(Fie,dpo),e(Eh,cpo),e(Eh,vI),e(vI,fpo),e(Eh,mpo),e(k,gpo),e(k,Ch),e(Ch,Tie),e(Tie,hpo),e(Ch,ppo),e(Ch,FI),e(FI,_po),e(Ch,upo),e(k,bpo),e(k,Is),e(Is,Mie),e(Mie,vpo),e(Is,Fpo),e(Is,TI),e(TI,Tpo),e(Is,Mpo),e(Is,MI),e(MI,Epo),e(Is,Cpo),e(k,wpo),e(k,qs),e(qs,Eie),e(Eie,Apo),e(qs,Lpo),e(qs,EI),e(EI,ypo),e(qs,xpo),e(qs,CI),e(CI,$po),e(qs,kpo),e(k,Spo),e(k,js),e(js,Cie),e(Cie,Rpo),e(js,Ppo),e(js,wI),e(wI,Bpo),e(js,Npo),e(js,AI),e(AI,Ipo),e(js,qpo),e(k,jpo),e(k,wh),e(wh,wie),e(wie,Dpo),e(wh,Gpo),e(wh,LI),e(LI,Opo),e(wh,Vpo),e(k,Xpo),e(k,Ah),e(Ah,Aie),e(Aie,zpo),e(Ah,Qpo),e(Ah,yI),e(yI,Wpo),e(Ah,Hpo),e(k,Upo),e(k,Lh),e(Lh,Lie),e(Lie,Jpo),e(Lh,Ypo),e(Lh,xI),e(xI,Kpo),e(Lh,Zpo),e(k,e_o),e(k,Ds),e(Ds,yie),e(yie,o_o),e(Ds,r_o),e(Ds,$I),e($I,t_o),e(Ds,a_o),e(Ds,kI),e(kI,n_o),e(Ds,s_o),e(k,l_o),e(k,Gs),e(Gs,xie),e(xie,i_o),e(Gs,d_o),e(Gs,SI),e(SI,c_o),e(Gs,f_o),e(Gs,RI),e(RI,m_o),e(Gs,g_o),e(k,h_o),e(k,yh),e(yh,$ie),e($ie,p_o),e(yh,__o),e(yh,PI),e(PI,u_o),e(yh,b_o),e(k,v_o),e(k,xh),e(xh,kie),e(kie,F_o),e(xh,T_o),e(xh,BI),e(BI,M_o),e(xh,E_o),e(k,C_o),e(k,$h),e($h,Sie),e(Sie,w_o),e($h,A_o),e($h,NI),e(NI,L_o),e($h,y_o),e(k,x_o),e(k,Os),e(Os,Rie),e(Rie,$_o),e(Os,k_o),e(Os,II),e(II,S_o),e(Os,R_o),e(Os,qI),e(qI,P_o),e(Os,B_o),e(k,N_o),e(k,kh),e(kh,Pie),e(Pie,I_o),e(kh,q_o),e(kh,jI),e(jI,j_o),e(kh,D_o),e(k,G_o),e(k,Sh),e(Sh,Bie),e(Bie,O_o),e(Sh,V_o),e(Sh,DI),e(DI,X_o),e(Sh,z_o),e(k,Q_o),e(k,Vs),e(Vs,Nie),e(Nie,W_o),e(Vs,H_o),e(Vs,GI),e(GI,U_o),e(Vs,J_o),e(Vs,OI),e(OI,Y_o),e(Vs,K_o),e(k,Z_o),e(k,Xs),e(Xs,Iie),e(Iie,euo),e(Xs,ouo),e(Xs,VI),e(VI,ruo),e(Xs,tuo),e(Xs,XI),e(XI,auo),e(Xs,nuo),e(k,suo),e(k,zs),e(zs,qie),e(qie,luo),e(zs,iuo),e(zs,zI),e(zI,duo),e(zs,cuo),e(zs,QI),e(QI,fuo),e(zs,muo),e(k,guo),e(k,Qs),e(Qs,jie),e(jie,huo),e(Qs,puo),e(Qs,WI),e(WI,_uo),e(Qs,uuo),e(Qs,HI),e(HI,buo),e(Qs,vuo),e(yr,Fuo),M(Rh,yr,null),e(Ao,Tuo),e(Ao,Ph),M(bL,Ph,null),e(Ph,Muo),e(Ph,Die),e(Die,Euo),b(f,dXe,u),b(f,Ii,u),e(Ii,Bh),e(Bh,Gie),M(vL,Gie,null),e(Ii,Cuo),e(Ii,Oie),e(Oie,wuo),b(f,cXe,u),b(f,Lo,u),M(FL,Lo,null),e(Lo,Auo),e(Lo,TL),e(TL,Luo),e(TL,UI),e(UI,yuo),e(TL,xuo),e(Lo,$uo),e(Lo,ML),e(ML,kuo),e(ML,Vie),e(Vie,Suo),e(ML,Ruo),e(Lo,Puo),e(Lo,He),M(EL,He,null),e(He,Buo),e(He,Xie),e(Xie,Nuo),e(He,Iuo),e(He,Ba),e(Ba,quo),e(Ba,zie),e(zie,juo),e(Ba,Duo),e(Ba,Qie),e(Qie,Guo),e(Ba,Ouo),e(Ba,Wie),e(Wie,Vuo),e(Ba,Xuo),e(He,zuo),e(He,J),e(J,Nh),e(Nh,Hie),e(Hie,Quo),e(Nh,Wuo),e(Nh,JI),e(JI,Huo),e(Nh,Uuo),e(J,Juo),e(J,Ih),e(Ih,Uie),e(Uie,Yuo),e(Ih,Kuo),e(Ih,YI),e(YI,Zuo),e(Ih,e1o),e(J,o1o),e(J,qh),e(qh,Jie),e(Jie,r1o),e(qh,t1o),e(qh,KI),e(KI,a1o),e(qh,n1o),e(J,s1o),e(J,jh),e(jh,Yie),e(Yie,l1o),e(jh,i1o),e(jh,ZI),e(ZI,d1o),e(jh,c1o),e(J,f1o),e(J,Dh),e(Dh,Kie),e(Kie,m1o),e(Dh,g1o),e(Dh,eq),e(eq,h1o),e(Dh,p1o),e(J,_1o),e(J,Gh),e(Gh,Zie),e(Zie,u1o),e(Gh,b1o),e(Gh,oq),e(oq,v1o),e(Gh,F1o),e(J,T1o),e(J,Oh),e(Oh,ede),e(ede,M1o),e(Oh,E1o),e(Oh,rq),e(rq,C1o),e(Oh,w1o),e(J,A1o),e(J,Vh),e(Vh,ode),e(ode,L1o),e(Vh,y1o),e(Vh,tq),e(tq,x1o),e(Vh,$1o),e(J,k1o),e(J,Xh),e(Xh,rde),e(rde,S1o),e(Xh,R1o),e(Xh,aq),e(aq,P1o),e(Xh,B1o),e(J,N1o),e(J,zh),e(zh,tde),e(tde,I1o),e(zh,q1o),e(zh,nq),e(nq,j1o),e(zh,D1o),e(J,G1o),e(J,Qh),e(Qh,ade),e(ade,O1o),e(Qh,V1o),e(Qh,sq),e(sq,X1o),e(Qh,z1o),e(J,Q1o),e(J,Wh),e(Wh,nde),e(nde,W1o),e(Wh,H1o),e(Wh,lq),e(lq,U1o),e(Wh,J1o),e(J,Y1o),e(J,Hh),e(Hh,sde),e(sde,K1o),e(Hh,Z1o),e(Hh,iq),e(iq,e4o),e(Hh,o4o),e(J,r4o),e(J,Uh),e(Uh,lde),e(lde,t4o),e(Uh,a4o),e(Uh,dq),e(dq,n4o),e(Uh,s4o),e(J,l4o),e(J,Jh),e(Jh,ide),e(ide,i4o),e(Jh,d4o),e(Jh,cq),e(cq,c4o),e(Jh,f4o),e(J,m4o),e(J,Yh),e(Yh,dde),e(dde,g4o),e(Yh,h4o),e(Yh,fq),e(fq,p4o),e(Yh,_4o),e(J,u4o),e(J,Kh),e(Kh,cde),e(cde,b4o),e(Kh,v4o),e(Kh,mq),e(mq,F4o),e(Kh,T4o),e(J,M4o),e(J,Zh),e(Zh,fde),e(fde,E4o),e(Zh,C4o),e(Zh,gq),e(gq,w4o),e(Zh,A4o),e(J,L4o),e(J,ep),e(ep,mde),e(mde,y4o),e(ep,x4o),e(ep,hq),e(hq,$4o),e(ep,k4o),e(J,S4o),e(J,op),e(op,gde),e(gde,R4o),e(op,P4o),e(op,pq),e(pq,B4o),e(op,N4o),e(J,I4o),e(J,rp),e(rp,hde),e(hde,q4o),e(rp,j4o),e(rp,_q),e(_q,D4o),e(rp,G4o),e(J,O4o),e(J,tp),e(tp,pde),e(pde,V4o),e(tp,X4o),e(tp,uq),e(uq,z4o),e(tp,Q4o),e(J,W4o),e(J,ap),e(ap,_de),e(_de,H4o),e(ap,U4o),e(ap,bq),e(bq,J4o),e(ap,Y4o),e(J,K4o),e(J,np),e(np,ude),e(ude,Z4o),e(np,e2o),e(np,vq),e(vq,o2o),e(np,r2o),e(J,t2o),e(J,sp),e(sp,bde),e(bde,a2o),e(sp,n2o),e(sp,Fq),e(Fq,s2o),e(sp,l2o),e(J,i2o),e(J,lp),e(lp,vde),e(vde,d2o),e(lp,c2o),e(lp,Tq),e(Tq,f2o),e(lp,m2o),e(J,g2o),e(J,ip),e(ip,Fde),e(Fde,h2o),e(ip,p2o),e(ip,Mq),e(Mq,_2o),e(ip,u2o),e(J,b2o),e(J,dp),e(dp,Tde),e(Tde,v2o),e(dp,F2o),e(dp,Eq),e(Eq,T2o),e(dp,M2o),e(J,E2o),e(J,cp),e(cp,Mde),e(Mde,C2o),e(cp,w2o),e(cp,Cq),e(Cq,A2o),e(cp,L2o),e(J,y2o),e(J,fp),e(fp,Ede),e(Ede,x2o),e(fp,$2o),e(fp,wq),e(wq,k2o),e(fp,S2o),e(J,R2o),e(J,mp),e(mp,Cde),e(Cde,P2o),e(mp,B2o),e(mp,Aq),e(Aq,N2o),e(mp,I2o),e(J,q2o),e(J,gp),e(gp,wde),e(wde,j2o),e(gp,D2o),e(gp,Lq),e(Lq,G2o),e(gp,O2o),e(J,V2o),e(J,hp),e(hp,Ade),e(Ade,X2o),e(hp,z2o),e(hp,yq),e(yq,Q2o),e(hp,W2o),e(J,H2o),e(J,pp),e(pp,Lde),e(Lde,U2o),e(pp,J2o),e(pp,xq),e(xq,Y2o),e(pp,K2o),e(J,Z2o),e(J,_p),e(_p,yde),e(yde,ebo),e(_p,obo),e(_p,$q),e($q,rbo),e(_p,tbo),e(He,abo),M(up,He,null),e(He,nbo),M(bp,He,null),e(Lo,sbo),e(Lo,vp),M(CL,vp,null),e(vp,lbo),e(vp,xde),e(xde,ibo),b(f,fXe,u),b(f,qi,u),e(qi,Fp),e(Fp,$de),M(wL,$de,null),e(qi,dbo),e(qi,kde),e(kde,cbo),b(f,mXe,u),b(f,yo,u),M(AL,yo,null),e(yo,fbo),e(yo,LL),e(LL,mbo),e(LL,kq),e(kq,gbo),e(LL,hbo),e(yo,pbo),e(yo,yL),e(yL,_bo),e(yL,Sde),e(Sde,ubo),e(yL,bbo),e(yo,vbo),e(yo,Ue),M(xL,Ue,null),e(Ue,Fbo),e(Ue,Rde),e(Rde,Tbo),e(Ue,Mbo),e(Ue,ji),e(ji,Ebo),e(ji,Pde),e(Pde,Cbo),e(ji,wbo),e(ji,Bde),e(Bde,Abo),e(ji,Lbo),e(Ue,ybo),e(Ue,he),e(he,Tp),e(Tp,Nde),e(Nde,xbo),e(Tp,$bo),e(Tp,Sq),e(Sq,kbo),e(Tp,Sbo),e(he,Rbo),e(he,Mp),e(Mp,Ide),e(Ide,Pbo),e(Mp,Bbo),e(Mp,qde),e(qde,Nbo),e(Mp,Ibo),e(he,qbo),e(he,Ep),e(Ep,jde),e(jde,jbo),e(Ep,Dbo),e(Ep,Rq),e(Rq,Gbo),e(Ep,Obo),e(he,Vbo),e(he,Cp),e(Cp,Dde),e(Dde,Xbo),e(Cp,zbo),e(Cp,Pq),e(Pq,Qbo),e(Cp,Wbo),e(he,Hbo),e(he,wp),e(wp,Gde),e(Gde,Ubo),e(wp,Jbo),e(wp,Bq),e(Bq,Ybo),e(wp,Kbo),e(he,Zbo),e(he,Ap),e(Ap,Ode),e(Ode,evo),e(Ap,ovo),e(Ap,Nq),e(Nq,rvo),e(Ap,tvo),e(he,avo),e(he,Lp),e(Lp,Vde),e(Vde,nvo),e(Lp,svo),e(Lp,Iq),e(Iq,lvo),e(Lp,ivo),e(he,dvo),e(he,yp),e(yp,Xde),e(Xde,cvo),e(yp,fvo),e(yp,qq),e(qq,mvo),e(yp,gvo),e(he,hvo),e(he,xp),e(xp,zde),e(zde,pvo),e(xp,_vo),e(xp,jq),e(jq,uvo),e(xp,bvo),e(he,vvo),e(he,$p),e($p,Qde),e(Qde,Fvo),e($p,Tvo),e($p,Dq),e(Dq,Mvo),e($p,Evo),e(he,Cvo),e(he,kp),e(kp,Wde),e(Wde,wvo),e(kp,Avo),e(kp,Gq),e(Gq,Lvo),e(kp,yvo),e(he,xvo),e(he,Sp),e(Sp,Hde),e(Hde,$vo),e(Sp,kvo),e(Sp,Oq),e(Oq,Svo),e(Sp,Rvo),e(he,Pvo),e(he,Rp),e(Rp,Ude),e(Ude,Bvo),e(Rp,Nvo),e(Rp,Vq),e(Vq,Ivo),e(Rp,qvo),e(he,jvo),e(he,Pp),e(Pp,Jde),e(Jde,Dvo),e(Pp,Gvo),e(Pp,Xq),e(Xq,Ovo),e(Pp,Vvo),e(he,Xvo),e(he,Bp),e(Bp,Yde),e(Yde,zvo),e(Bp,Qvo),e(Bp,zq),e(zq,Wvo),e(Bp,Hvo),e(he,Uvo),e(he,Np),e(Np,Kde),e(Kde,Jvo),e(Np,Yvo),e(Np,Qq),e(Qq,Kvo),e(Np,Zvo),e(he,e5o),e(he,Ip),e(Ip,Zde),e(Zde,o5o),e(Ip,r5o),e(Ip,Wq),e(Wq,t5o),e(Ip,a5o),e(he,n5o),e(he,qp),e(qp,ece),e(ece,s5o),e(qp,l5o),e(qp,Hq),e(Hq,i5o),e(qp,d5o),e(Ue,c5o),M(jp,Ue,null),e(Ue,f5o),M(Dp,Ue,null),e(yo,m5o),e(yo,Gp),M($L,Gp,null),e(Gp,g5o),e(Gp,oce),e(oce,h5o),b(f,gXe,u),b(f,Di,u),e(Di,Op),e(Op,rce),M(kL,rce,null),e(Di,p5o),e(Di,tce),e(tce,_5o),b(f,hXe,u),b(f,xo,u),M(SL,xo,null),e(xo,u5o),e(xo,Gi),e(Gi,b5o),e(Gi,Uq),e(Uq,v5o),e(Gi,F5o),e(Gi,Jq),e(Jq,T5o),e(Gi,M5o),e(xo,E5o),e(xo,RL),e(RL,C5o),e(RL,ace),e(ace,w5o),e(RL,A5o),e(xo,L5o),e(xo,lt),M(PL,lt,null),e(lt,y5o),e(lt,nce),e(nce,x5o),e(lt,$5o),e(lt,Oi),e(Oi,k5o),e(Oi,sce),e(sce,S5o),e(Oi,R5o),e(Oi,Yq),e(Yq,P5o),e(Oi,B5o),e(lt,N5o),M(Vp,lt,null),e(xo,I5o),e(xo,Je),M(BL,Je,null),e(Je,q5o),e(Je,lce),e(lce,j5o),e(Je,D5o),e(Je,Na),e(Na,G5o),e(Na,ice),e(ice,O5o),e(Na,V5o),e(Na,dce),e(dce,X5o),e(Na,z5o),e(Na,cce),e(cce,Q5o),e(Na,W5o),e(Je,H5o),e(Je,y),e(y,Xp),e(Xp,fce),e(fce,U5o),e(Xp,J5o),e(Xp,Kq),e(Kq,Y5o),e(Xp,K5o),e(y,Z5o),e(y,zp),e(zp,mce),e(mce,eFo),e(zp,oFo),e(zp,Zq),e(Zq,rFo),e(zp,tFo),e(y,aFo),e(y,Qp),e(Qp,gce),e(gce,nFo),e(Qp,sFo),e(Qp,ej),e(ej,lFo),e(Qp,iFo),e(y,dFo),e(y,Wp),e(Wp,hce),e(hce,cFo),e(Wp,fFo),e(Wp,oj),e(oj,mFo),e(Wp,gFo),e(y,hFo),e(y,Hp),e(Hp,pce),e(pce,pFo),e(Hp,_Fo),e(Hp,rj),e(rj,uFo),e(Hp,bFo),e(y,vFo),e(y,Up),e(Up,_ce),e(_ce,FFo),e(Up,TFo),e(Up,tj),e(tj,MFo),e(Up,EFo),e(y,CFo),e(y,Jp),e(Jp,uce),e(uce,wFo),e(Jp,AFo),e(Jp,aj),e(aj,LFo),e(Jp,yFo),e(y,xFo),e(y,Yp),e(Yp,bce),e(bce,$Fo),e(Yp,kFo),e(Yp,nj),e(nj,SFo),e(Yp,RFo),e(y,PFo),e(y,Kp),e(Kp,vce),e(vce,BFo),e(Kp,NFo),e(Kp,sj),e(sj,IFo),e(Kp,qFo),e(y,jFo),e(y,Zp),e(Zp,Fce),e(Fce,DFo),e(Zp,GFo),e(Zp,lj),e(lj,OFo),e(Zp,VFo),e(y,XFo),e(y,e_),e(e_,Tce),e(Tce,zFo),e(e_,QFo),e(e_,ij),e(ij,WFo),e(e_,HFo),e(y,UFo),e(y,o_),e(o_,Mce),e(Mce,JFo),e(o_,YFo),e(o_,dj),e(dj,KFo),e(o_,ZFo),e(y,eTo),e(y,r_),e(r_,Ece),e(Ece,oTo),e(r_,rTo),e(r_,cj),e(cj,tTo),e(r_,aTo),e(y,nTo),e(y,t_),e(t_,Cce),e(Cce,sTo),e(t_,lTo),e(t_,fj),e(fj,iTo),e(t_,dTo),e(y,cTo),e(y,a_),e(a_,wce),e(wce,fTo),e(a_,mTo),e(a_,mj),e(mj,gTo),e(a_,hTo),e(y,pTo),e(y,n_),e(n_,Ace),e(Ace,_To),e(n_,uTo),e(n_,gj),e(gj,bTo),e(n_,vTo),e(y,FTo),e(y,s_),e(s_,Lce),e(Lce,TTo),e(s_,MTo),e(s_,hj),e(hj,ETo),e(s_,CTo),e(y,wTo),e(y,l_),e(l_,yce),e(yce,ATo),e(l_,LTo),e(l_,pj),e(pj,yTo),e(l_,xTo),e(y,$To),e(y,i_),e(i_,xce),e(xce,kTo),e(i_,STo),e(i_,_j),e(_j,RTo),e(i_,PTo),e(y,BTo),e(y,d_),e(d_,$ce),e($ce,NTo),e(d_,ITo),e(d_,uj),e(uj,qTo),e(d_,jTo),e(y,DTo),e(y,c_),e(c_,kce),e(kce,GTo),e(c_,OTo),e(c_,bj),e(bj,VTo),e(c_,XTo),e(y,zTo),e(y,f_),e(f_,Sce),e(Sce,QTo),e(f_,WTo),e(f_,vj),e(vj,HTo),e(f_,UTo),e(y,JTo),e(y,m_),e(m_,Rce),e(Rce,YTo),e(m_,KTo),e(m_,Fj),e(Fj,ZTo),e(m_,e7o),e(y,o7o),e(y,g_),e(g_,Pce),e(Pce,r7o),e(g_,t7o),e(g_,Tj),e(Tj,a7o),e(g_,n7o),e(y,s7o),e(y,h_),e(h_,Bce),e(Bce,l7o),e(h_,i7o),e(h_,Mj),e(Mj,d7o),e(h_,c7o),e(y,f7o),e(y,p_),e(p_,Nce),e(Nce,m7o),e(p_,g7o),e(p_,Ej),e(Ej,h7o),e(p_,p7o),e(y,_7o),e(y,__),e(__,Ice),e(Ice,u7o),e(__,b7o),e(__,Cj),e(Cj,v7o),e(__,F7o),e(y,T7o),e(y,u_),e(u_,qce),e(qce,M7o),e(u_,E7o),e(u_,wj),e(wj,C7o),e(u_,w7o),e(y,A7o),e(y,b_),e(b_,jce),e(jce,L7o),e(b_,y7o),e(b_,Aj),e(Aj,x7o),e(b_,$7o),e(y,k7o),e(y,v_),e(v_,Dce),e(Dce,S7o),e(v_,R7o),e(v_,Lj),e(Lj,P7o),e(v_,B7o),e(y,N7o),e(y,F_),e(F_,Gce),e(Gce,I7o),e(F_,q7o),e(F_,yj),e(yj,j7o),e(F_,D7o),e(y,G7o),e(y,T_),e(T_,Oce),e(Oce,O7o),e(T_,V7o),e(T_,xj),e(xj,X7o),e(T_,z7o),e(y,Q7o),e(y,M_),e(M_,Vce),e(Vce,W7o),e(M_,H7o),e(M_,$j),e($j,U7o),e(M_,J7o),e(y,Y7o),e(y,E_),e(E_,Xce),e(Xce,K7o),e(E_,Z7o),e(E_,kj),e(kj,e8o),e(E_,o8o),e(y,r8o),e(y,Ws),e(Ws,zce),e(zce,t8o),e(Ws,a8o),e(Ws,Sj),e(Sj,n8o),e(Ws,s8o),e(Ws,Rj),e(Rj,l8o),e(Ws,i8o),e(y,d8o),e(y,C_),e(C_,Qce),e(Qce,c8o),e(C_,f8o),e(C_,Pj),e(Pj,m8o),e(C_,g8o),e(y,h8o),e(y,w_),e(w_,Wce),e(Wce,p8o),e(w_,_8o),e(w_,Bj),e(Bj,u8o),e(w_,b8o),e(y,v8o),e(y,A_),e(A_,Hce),e(Hce,F8o),e(A_,T8o),e(A_,Nj),e(Nj,M8o),e(A_,E8o),e(y,C8o),e(y,L_),e(L_,Uce),e(Uce,w8o),e(L_,A8o),e(L_,Ij),e(Ij,L8o),e(L_,y8o),e(y,x8o),e(y,y_),e(y_,Jce),e(Jce,$8o),e(y_,k8o),e(y_,qj),e(qj,S8o),e(y_,R8o),e(y,P8o),e(y,x_),e(x_,Yce),e(Yce,B8o),e(x_,N8o),e(x_,jj),e(jj,I8o),e(x_,q8o),e(y,j8o),e(y,$_),e($_,Kce),e(Kce,D8o),e($_,G8o),e($_,Dj),e(Dj,O8o),e($_,V8o),e(y,X8o),e(y,k_),e(k_,Zce),e(Zce,z8o),e(k_,Q8o),e(k_,Gj),e(Gj,W8o),e(k_,H8o),e(y,U8o),e(y,S_),e(S_,efe),e(efe,J8o),e(S_,Y8o),e(S_,Oj),e(Oj,K8o),e(S_,Z8o),e(y,eMo),e(y,R_),e(R_,ofe),e(ofe,oMo),e(R_,rMo),e(R_,Vj),e(Vj,tMo),e(R_,aMo),e(y,nMo),e(y,P_),e(P_,rfe),e(rfe,sMo),e(P_,lMo),e(P_,Xj),e(Xj,iMo),e(P_,dMo),e(y,cMo),e(y,B_),e(B_,tfe),e(tfe,fMo),e(B_,mMo),e(B_,zj),e(zj,gMo),e(B_,hMo),e(y,pMo),e(y,N_),e(N_,afe),e(afe,_Mo),e(N_,uMo),e(N_,Qj),e(Qj,bMo),e(N_,vMo),e(y,FMo),e(y,I_),e(I_,nfe),e(nfe,TMo),e(I_,MMo),e(I_,Wj),e(Wj,EMo),e(I_,CMo),e(y,wMo),e(y,q_),e(q_,sfe),e(sfe,AMo),e(q_,LMo),e(q_,Hj),e(Hj,yMo),e(q_,xMo),e(y,$Mo),e(y,j_),e(j_,lfe),e(lfe,kMo),e(j_,SMo),e(j_,Uj),e(Uj,RMo),e(j_,PMo),e(y,BMo),e(y,D_),e(D_,ife),e(ife,NMo),e(D_,IMo),e(D_,Jj),e(Jj,qMo),e(D_,jMo),e(y,DMo),e(y,G_),e(G_,dfe),e(dfe,GMo),e(G_,OMo),e(G_,Yj),e(Yj,VMo),e(G_,XMo),e(y,zMo),e(y,O_),e(O_,cfe),e(cfe,QMo),e(O_,WMo),e(O_,Kj),e(Kj,HMo),e(O_,UMo),e(y,JMo),e(y,V_),e(V_,ffe),e(ffe,YMo),e(V_,KMo),e(V_,Zj),e(Zj,ZMo),e(V_,eEo),e(y,oEo),e(y,X_),e(X_,mfe),e(mfe,rEo),e(X_,tEo),e(X_,eD),e(eD,aEo),e(X_,nEo),e(y,sEo),e(y,z_),e(z_,gfe),e(gfe,lEo),e(z_,iEo),e(z_,oD),e(oD,dEo),e(z_,cEo),e(y,fEo),e(y,Q_),e(Q_,hfe),e(hfe,mEo),e(Q_,gEo),e(Q_,rD),e(rD,hEo),e(Q_,pEo),e(y,_Eo),e(y,W_),e(W_,pfe),e(pfe,uEo),e(W_,bEo),e(W_,tD),e(tD,vEo),e(W_,FEo),e(y,TEo),e(y,H_),e(H_,_fe),e(_fe,MEo),e(H_,EEo),e(H_,aD),e(aD,CEo),e(H_,wEo),e(y,AEo),e(y,U_),e(U_,ufe),e(ufe,LEo),e(U_,yEo),e(U_,nD),e(nD,xEo),e(U_,$Eo),e(y,kEo),e(y,J_),e(J_,bfe),e(bfe,SEo),e(J_,REo),e(J_,sD),e(sD,PEo),e(J_,BEo),e(y,NEo),e(y,Y_),e(Y_,vfe),e(vfe,IEo),e(Y_,qEo),e(Y_,lD),e(lD,jEo),e(Y_,DEo),e(y,GEo),e(y,K_),e(K_,Ffe),e(Ffe,OEo),e(K_,VEo),e(K_,iD),e(iD,XEo),e(K_,zEo),e(y,QEo),e(y,Z_),e(Z_,Tfe),e(Tfe,WEo),e(Z_,HEo),e(Z_,dD),e(dD,UEo),e(Z_,JEo),e(y,YEo),e(y,eu),e(eu,Mfe),e(Mfe,KEo),e(eu,ZEo),e(eu,cD),e(cD,eCo),e(eu,oCo),e(y,rCo),e(y,ou),e(ou,Efe),e(Efe,tCo),e(ou,aCo),e(ou,fD),e(fD,nCo),e(ou,sCo),e(y,lCo),e(y,ru),e(ru,Cfe),e(Cfe,iCo),e(ru,dCo),e(ru,mD),e(mD,cCo),e(ru,fCo),e(y,mCo),e(y,tu),e(tu,wfe),e(wfe,gCo),e(tu,hCo),e(tu,gD),e(gD,pCo),e(tu,_Co),e(y,uCo),e(y,au),e(au,Afe),e(Afe,bCo),e(au,vCo),e(au,hD),e(hD,FCo),e(au,TCo),e(y,MCo),e(y,nu),e(nu,Lfe),e(Lfe,ECo),e(nu,CCo),e(nu,pD),e(pD,wCo),e(nu,ACo),e(y,LCo),e(y,su),e(su,yfe),e(yfe,yCo),e(su,xCo),e(su,_D),e(_D,$Co),e(su,kCo),e(y,SCo),e(y,lu),e(lu,xfe),e(xfe,RCo),e(lu,PCo),e(lu,uD),e(uD,BCo),e(lu,NCo),e(y,ICo),e(y,iu),e(iu,$fe),e($fe,qCo),e(iu,jCo),e(iu,bD),e(bD,DCo),e(iu,GCo),e(y,OCo),e(y,du),e(du,kfe),e(kfe,VCo),e(du,XCo),e(du,vD),e(vD,zCo),e(du,QCo),e(y,WCo),e(y,cu),e(cu,Sfe),e(Sfe,HCo),e(cu,UCo),e(cu,FD),e(FD,JCo),e(cu,YCo),e(y,KCo),e(y,fu),e(fu,Rfe),e(Rfe,ZCo),e(fu,e3o),e(fu,TD),e(TD,o3o),e(fu,r3o),e(y,t3o),e(y,mu),e(mu,Pfe),e(Pfe,a3o),e(mu,n3o),e(mu,MD),e(MD,s3o),e(mu,l3o),e(y,i3o),e(y,gu),e(gu,Bfe),e(Bfe,d3o),e(gu,c3o),e(gu,ED),e(ED,f3o),e(gu,m3o),e(y,g3o),e(y,hu),e(hu,Nfe),e(Nfe,h3o),e(hu,p3o),e(hu,CD),e(CD,_3o),e(hu,u3o),e(y,b3o),e(y,pu),e(pu,Ife),e(Ife,v3o),e(pu,F3o),e(pu,wD),e(wD,T3o),e(pu,M3o),e(y,E3o),e(y,_u),e(_u,qfe),e(qfe,C3o),e(_u,w3o),e(_u,AD),e(AD,A3o),e(_u,L3o),e(y,y3o),e(y,uu),e(uu,jfe),e(jfe,x3o),e(uu,$3o),e(uu,LD),e(LD,k3o),e(uu,S3o),e(y,R3o),e(y,bu),e(bu,Dfe),e(Dfe,P3o),e(bu,B3o),e(bu,yD),e(yD,N3o),e(bu,I3o),e(y,q3o),e(y,vu),e(vu,Gfe),e(Gfe,j3o),e(vu,D3o),e(vu,xD),e(xD,G3o),e(vu,O3o),e(y,V3o),e(y,Fu),e(Fu,Ofe),e(Ofe,X3o),e(Fu,z3o),e(Fu,$D),e($D,Q3o),e(Fu,W3o),e(y,H3o),e(y,Tu),e(Tu,Vfe),e(Vfe,U3o),e(Tu,J3o),e(Tu,kD),e(kD,Y3o),e(Tu,K3o),e(y,Z3o),e(y,Mu),e(Mu,Xfe),e(Xfe,e0o),e(Mu,o0o),e(Mu,SD),e(SD,r0o),e(Mu,t0o),e(y,a0o),e(y,Eu),e(Eu,zfe),e(zfe,n0o),e(Eu,s0o),e(Eu,RD),e(RD,l0o),e(Eu,i0o),e(y,d0o),e(y,Cu),e(Cu,Qfe),e(Qfe,c0o),e(Cu,f0o),e(Cu,PD),e(PD,m0o),e(Cu,g0o),e(y,h0o),e(y,wu),e(wu,Wfe),e(Wfe,p0o),e(wu,_0o),e(wu,BD),e(BD,u0o),e(wu,b0o),e(y,v0o),e(y,Au),e(Au,Hfe),e(Hfe,F0o),e(Au,T0o),e(Au,ND),e(ND,M0o),e(Au,E0o),e(y,C0o),e(y,Lu),e(Lu,Ufe),e(Ufe,w0o),e(Lu,A0o),e(Lu,ID),e(ID,L0o),e(Lu,y0o),e(y,x0o),e(y,yu),e(yu,Jfe),e(Jfe,$0o),e(yu,k0o),e(yu,qD),e(qD,S0o),e(yu,R0o),e(y,P0o),e(y,xu),e(xu,Yfe),e(Yfe,B0o),e(xu,N0o),e(xu,jD),e(jD,I0o),e(xu,q0o),e(y,j0o),e(y,$u),e($u,Kfe),e(Kfe,D0o),e($u,G0o),e($u,DD),e(DD,O0o),e($u,V0o),e(y,X0o),e(y,ku),e(ku,Zfe),e(Zfe,z0o),e(ku,Q0o),e(ku,GD),e(GD,W0o),e(ku,H0o),e(y,U0o),e(y,Su),e(Su,eme),e(eme,J0o),e(Su,Y0o),e(Su,OD),e(OD,K0o),e(Su,Z0o),e(y,ewo),e(y,Ru),e(Ru,ome),e(ome,owo),e(Ru,rwo),e(Ru,VD),e(VD,two),e(Ru,awo),e(y,nwo),e(y,Pu),e(Pu,rme),e(rme,swo),e(Pu,lwo),e(Pu,XD),e(XD,iwo),e(Pu,dwo),e(y,cwo),e(y,Bu),e(Bu,tme),e(tme,fwo),e(Bu,mwo),e(Bu,zD),e(zD,gwo),e(Bu,hwo),e(y,pwo),e(y,Nu),e(Nu,ame),e(ame,_wo),e(Nu,uwo),e(Nu,QD),e(QD,bwo),e(Nu,vwo),e(y,Fwo),e(y,Iu),e(Iu,nme),e(nme,Two),e(Iu,Mwo),e(Iu,WD),e(WD,Ewo),e(Iu,Cwo),e(y,wwo),e(y,qu),e(qu,sme),e(sme,Awo),e(qu,Lwo),e(qu,HD),e(HD,ywo),e(qu,xwo),e(y,$wo),e(y,ju),e(ju,lme),e(lme,kwo),e(ju,Swo),e(ju,UD),e(UD,Rwo),e(ju,Pwo),e(y,Bwo),e(y,Du),e(Du,ime),e(ime,Nwo),e(Du,Iwo),e(Du,JD),e(JD,qwo),e(Du,jwo),e(y,Dwo),e(y,Gu),e(Gu,dme),e(dme,Gwo),e(Gu,Owo),e(Gu,YD),e(YD,Vwo),e(Gu,Xwo),e(y,zwo),e(y,Ou),e(Ou,cme),e(cme,Qwo),e(Ou,Wwo),e(Ou,KD),e(KD,Hwo),e(Ou,Uwo),e(y,Jwo),e(y,Vu),e(Vu,fme),e(fme,Ywo),e(Vu,Kwo),e(Vu,ZD),e(ZD,Zwo),e(Vu,eAo),e(y,oAo),e(y,Xu),e(Xu,mme),e(mme,rAo),e(Xu,tAo),e(Xu,eG),e(eG,aAo),e(Xu,nAo),e(y,sAo),e(y,zu),e(zu,gme),e(gme,lAo),e(zu,iAo),e(zu,oG),e(oG,dAo),e(zu,cAo),e(y,fAo),e(y,Qu),e(Qu,hme),e(hme,mAo),e(Qu,gAo),e(Qu,rG),e(rG,hAo),e(Qu,pAo),e(Je,_Ao),e(Je,Wu),e(Wu,uAo),e(Wu,pme),e(pme,bAo),e(Wu,vAo),e(Wu,_me),e(_me,FAo),e(Je,TAo),M(Hu,Je,null),b(f,pXe,u),b(f,Vi,u),e(Vi,Uu),e(Uu,ume),M(NL,ume,null),e(Vi,MAo),e(Vi,bme),e(bme,EAo),b(f,_Xe,u),b(f,$o,u),M(IL,$o,null),e($o,CAo),e($o,Xi),e(Xi,wAo),e(Xi,tG),e(tG,AAo),e(Xi,LAo),e(Xi,aG),e(aG,yAo),e(Xi,xAo),e($o,$Ao),e($o,qL),e(qL,kAo),e(qL,vme),e(vme,SAo),e(qL,RAo),e($o,PAo),e($o,it),M(jL,it,null),e(it,BAo),e(it,Fme),e(Fme,NAo),e(it,IAo),e(it,zi),e(zi,qAo),e(zi,Tme),e(Tme,jAo),e(zi,DAo),e(zi,nG),e(nG,GAo),e(zi,OAo),e(it,VAo),M(Ju,it,null),e($o,XAo),e($o,Ye),M(DL,Ye,null),e(Ye,zAo),e(Ye,Mme),e(Mme,QAo),e(Ye,WAo),e(Ye,Ia),e(Ia,HAo),e(Ia,Eme),e(Eme,UAo),e(Ia,JAo),e(Ia,Cme),e(Cme,YAo),e(Ia,KAo),e(Ia,wme),e(wme,ZAo),e(Ia,e6o),e(Ye,o6o),e(Ye,G),e(G,Yu),e(Yu,Ame),e(Ame,r6o),e(Yu,t6o),e(Yu,sG),e(sG,a6o),e(Yu,n6o),e(G,s6o),e(G,Ku),e(Ku,Lme),e(Lme,l6o),e(Ku,i6o),e(Ku,lG),e(lG,d6o),e(Ku,c6o),e(G,f6o),e(G,Zu),e(Zu,yme),e(yme,m6o),e(Zu,g6o),e(Zu,iG),e(iG,h6o),e(Zu,p6o),e(G,_6o),e(G,e1),e(e1,xme),e(xme,u6o),e(e1,b6o),e(e1,dG),e(dG,v6o),e(e1,F6o),e(G,T6o),e(G,o1),e(o1,$me),e($me,M6o),e(o1,E6o),e(o1,cG),e(cG,C6o),e(o1,w6o),e(G,A6o),e(G,r1),e(r1,kme),e(kme,L6o),e(r1,y6o),e(r1,fG),e(fG,x6o),e(r1,$6o),e(G,k6o),e(G,t1),e(t1,Sme),e(Sme,S6o),e(t1,R6o),e(t1,mG),e(mG,P6o),e(t1,B6o),e(G,N6o),e(G,a1),e(a1,Rme),e(Rme,I6o),e(a1,q6o),e(a1,gG),e(gG,j6o),e(a1,D6o),e(G,G6o),e(G,n1),e(n1,Pme),e(Pme,O6o),e(n1,V6o),e(n1,hG),e(hG,X6o),e(n1,z6o),e(G,Q6o),e(G,s1),e(s1,Bme),e(Bme,W6o),e(s1,H6o),e(s1,pG),e(pG,U6o),e(s1,J6o),e(G,Y6o),e(G,l1),e(l1,Nme),e(Nme,K6o),e(l1,Z6o),e(l1,_G),e(_G,eLo),e(l1,oLo),e(G,rLo),e(G,i1),e(i1,Ime),e(Ime,tLo),e(i1,aLo),e(i1,uG),e(uG,nLo),e(i1,sLo),e(G,lLo),e(G,d1),e(d1,qme),e(qme,iLo),e(d1,dLo),e(d1,bG),e(bG,cLo),e(d1,fLo),e(G,mLo),e(G,c1),e(c1,jme),e(jme,gLo),e(c1,hLo),e(c1,vG),e(vG,pLo),e(c1,_Lo),e(G,uLo),e(G,f1),e(f1,Dme),e(Dme,bLo),e(f1,vLo),e(f1,FG),e(FG,FLo),e(f1,TLo),e(G,MLo),e(G,m1),e(m1,Gme),e(Gme,ELo),e(m1,CLo),e(m1,TG),e(TG,wLo),e(m1,ALo),e(G,LLo),e(G,g1),e(g1,Ome),e(Ome,yLo),e(g1,xLo),e(g1,MG),e(MG,$Lo),e(g1,kLo),e(G,SLo),e(G,h1),e(h1,Vme),e(Vme,RLo),e(h1,PLo),e(h1,EG),e(EG,BLo),e(h1,NLo),e(G,ILo),e(G,p1),e(p1,Xme),e(Xme,qLo),e(p1,jLo),e(p1,CG),e(CG,DLo),e(p1,GLo),e(G,OLo),e(G,_1),e(_1,zme),e(zme,VLo),e(_1,XLo),e(_1,wG),e(wG,zLo),e(_1,QLo),e(G,WLo),e(G,u1),e(u1,Qme),e(Qme,HLo),e(u1,ULo),e(u1,AG),e(AG,JLo),e(u1,YLo),e(G,KLo),e(G,b1),e(b1,Wme),e(Wme,ZLo),e(b1,eyo),e(b1,LG),e(LG,oyo),e(b1,ryo),e(G,tyo),e(G,v1),e(v1,Hme),e(Hme,ayo),e(v1,nyo),e(v1,yG),e(yG,syo),e(v1,lyo),e(G,iyo),e(G,F1),e(F1,Ume),e(Ume,dyo),e(F1,cyo),e(F1,xG),e(xG,fyo),e(F1,myo),e(G,gyo),e(G,T1),e(T1,Jme),e(Jme,hyo),e(T1,pyo),e(T1,$G),e($G,_yo),e(T1,uyo),e(G,byo),e(G,M1),e(M1,Yme),e(Yme,vyo),e(M1,Fyo),e(M1,kG),e(kG,Tyo),e(M1,Myo),e(G,Eyo),e(G,E1),e(E1,Kme),e(Kme,Cyo),e(E1,wyo),e(E1,SG),e(SG,Ayo),e(E1,Lyo),e(G,yyo),e(G,C1),e(C1,Zme),e(Zme,xyo),e(C1,$yo),e(C1,RG),e(RG,kyo),e(C1,Syo),e(G,Ryo),e(G,w1),e(w1,ege),e(ege,Pyo),e(w1,Byo),e(w1,PG),e(PG,Nyo),e(w1,Iyo),e(G,qyo),e(G,A1),e(A1,oge),e(oge,jyo),e(A1,Dyo),e(A1,BG),e(BG,Gyo),e(A1,Oyo),e(G,Vyo),e(G,L1),e(L1,rge),e(rge,Xyo),e(L1,zyo),e(L1,NG),e(NG,Qyo),e(L1,Wyo),e(G,Hyo),e(G,y1),e(y1,tge),e(tge,Uyo),e(y1,Jyo),e(y1,IG),e(IG,Yyo),e(y1,Kyo),e(G,Zyo),e(G,x1),e(x1,age),e(age,e9o),e(x1,o9o),e(x1,qG),e(qG,r9o),e(x1,t9o),e(G,a9o),e(G,$1),e($1,nge),e(nge,n9o),e($1,s9o),e($1,jG),e(jG,l9o),e($1,i9o),e(G,d9o),e(G,k1),e(k1,sge),e(sge,c9o),e(k1,f9o),e(k1,DG),e(DG,m9o),e(k1,g9o),e(G,h9o),e(G,S1),e(S1,lge),e(lge,p9o),e(S1,_9o),e(S1,GG),e(GG,u9o),e(S1,b9o),e(G,v9o),e(G,R1),e(R1,ige),e(ige,F9o),e(R1,T9o),e(R1,OG),e(OG,M9o),e(R1,E9o),e(G,C9o),e(G,P1),e(P1,dge),e(dge,w9o),e(P1,A9o),e(P1,VG),e(VG,L9o),e(P1,y9o),e(G,x9o),e(G,B1),e(B1,cge),e(cge,$9o),e(B1,k9o),e(B1,XG),e(XG,S9o),e(B1,R9o),e(G,P9o),e(G,N1),e(N1,fge),e(fge,B9o),e(N1,N9o),e(N1,zG),e(zG,I9o),e(N1,q9o),e(G,j9o),e(G,I1),e(I1,mge),e(mge,D9o),e(I1,G9o),e(I1,QG),e(QG,O9o),e(I1,V9o),e(G,X9o),e(G,q1),e(q1,gge),e(gge,z9o),e(q1,Q9o),e(q1,WG),e(WG,W9o),e(q1,H9o),e(G,U9o),e(G,j1),e(j1,hge),e(hge,J9o),e(j1,Y9o),e(j1,HG),e(HG,K9o),e(j1,Z9o),e(G,exo),e(G,D1),e(D1,pge),e(pge,oxo),e(D1,rxo),e(D1,UG),e(UG,txo),e(D1,axo),e(G,nxo),e(G,G1),e(G1,_ge),e(_ge,sxo),e(G1,lxo),e(G1,JG),e(JG,ixo),e(G1,dxo),e(Ye,cxo),e(Ye,O1),e(O1,fxo),e(O1,uge),e(uge,mxo),e(O1,gxo),e(O1,bge),e(bge,hxo),e(Ye,pxo),M(V1,Ye,null),b(f,uXe,u),b(f,Qi,u),e(Qi,X1),e(X1,vge),M(GL,vge,null),e(Qi,_xo),e(Qi,Fge),e(Fge,uxo),b(f,bXe,u),b(f,ko,u),M(OL,ko,null),e(ko,bxo),e(ko,Wi),e(Wi,vxo),e(Wi,YG),e(YG,Fxo),e(Wi,Txo),e(Wi,KG),e(KG,Mxo),e(Wi,Exo),e(ko,Cxo),e(ko,VL),e(VL,wxo),e(VL,Tge),e(Tge,Axo),e(VL,Lxo),e(ko,yxo),e(ko,dt),M(XL,dt,null),e(dt,xxo),e(dt,Mge),e(Mge,$xo),e(dt,kxo),e(dt,Hi),e(Hi,Sxo),e(Hi,Ege),e(Ege,Rxo),e(Hi,Pxo),e(Hi,ZG),e(ZG,Bxo),e(Hi,Nxo),e(dt,Ixo),M(z1,dt,null),e(ko,qxo),e(ko,Ke),M(zL,Ke,null),e(Ke,jxo),e(Ke,Cge),e(Cge,Dxo),e(Ke,Gxo),e(Ke,qa),e(qa,Oxo),e(qa,wge),e(wge,Vxo),e(qa,Xxo),e(qa,Age),e(Age,zxo),e(qa,Qxo),e(qa,Lge),e(Lge,Wxo),e(qa,Hxo),e(Ke,Uxo),e(Ke,z),e(z,Q1),e(Q1,yge),e(yge,Jxo),e(Q1,Yxo),e(Q1,eO),e(eO,Kxo),e(Q1,Zxo),e(z,e$o),e(z,W1),e(W1,xge),e(xge,o$o),e(W1,r$o),e(W1,oO),e(oO,t$o),e(W1,a$o),e(z,n$o),e(z,H1),e(H1,$ge),e($ge,s$o),e(H1,l$o),e(H1,rO),e(rO,i$o),e(H1,d$o),e(z,c$o),e(z,U1),e(U1,kge),e(kge,f$o),e(U1,m$o),e(U1,tO),e(tO,g$o),e(U1,h$o),e(z,p$o),e(z,J1),e(J1,Sge),e(Sge,_$o),e(J1,u$o),e(J1,aO),e(aO,b$o),e(J1,v$o),e(z,F$o),e(z,Y1),e(Y1,Rge),e(Rge,T$o),e(Y1,M$o),e(Y1,nO),e(nO,E$o),e(Y1,C$o),e(z,w$o),e(z,K1),e(K1,Pge),e(Pge,A$o),e(K1,L$o),e(K1,sO),e(sO,y$o),e(K1,x$o),e(z,$$o),e(z,Z1),e(Z1,Bge),e(Bge,k$o),e(Z1,S$o),e(Z1,lO),e(lO,R$o),e(Z1,P$o),e(z,B$o),e(z,e4),e(e4,Nge),e(Nge,N$o),e(e4,I$o),e(e4,iO),e(iO,q$o),e(e4,j$o),e(z,D$o),e(z,o4),e(o4,Ige),e(Ige,G$o),e(o4,O$o),e(o4,dO),e(dO,V$o),e(o4,X$o),e(z,z$o),e(z,r4),e(r4,qge),e(qge,Q$o),e(r4,W$o),e(r4,cO),e(cO,H$o),e(r4,U$o),e(z,J$o),e(z,t4),e(t4,jge),e(jge,Y$o),e(t4,K$o),e(t4,fO),e(fO,Z$o),e(t4,eko),e(z,oko),e(z,a4),e(a4,Dge),e(Dge,rko),e(a4,tko),e(a4,mO),e(mO,ako),e(a4,nko),e(z,sko),e(z,n4),e(n4,Gge),e(Gge,lko),e(n4,iko),e(n4,gO),e(gO,dko),e(n4,cko),e(z,fko),e(z,s4),e(s4,Oge),e(Oge,mko),e(s4,gko),e(s4,hO),e(hO,hko),e(s4,pko),e(z,_ko),e(z,l4),e(l4,Vge),e(Vge,uko),e(l4,bko),e(l4,pO),e(pO,vko),e(l4,Fko),e(z,Tko),e(z,i4),e(i4,Xge),e(Xge,Mko),e(i4,Eko),e(i4,_O),e(_O,Cko),e(i4,wko),e(z,Ako),e(z,d4),e(d4,zge),e(zge,Lko),e(d4,yko),e(d4,uO),e(uO,xko),e(d4,$ko),e(z,kko),e(z,c4),e(c4,Qge),e(Qge,Sko),e(c4,Rko),e(c4,bO),e(bO,Pko),e(c4,Bko),e(z,Nko),e(z,f4),e(f4,Wge),e(Wge,Iko),e(f4,qko),e(f4,vO),e(vO,jko),e(f4,Dko),e(z,Gko),e(z,m4),e(m4,Hge),e(Hge,Oko),e(m4,Vko),e(m4,FO),e(FO,Xko),e(m4,zko),e(z,Qko),e(z,g4),e(g4,Uge),e(Uge,Wko),e(g4,Hko),e(g4,TO),e(TO,Uko),e(g4,Jko),e(z,Yko),e(z,h4),e(h4,Jge),e(Jge,Kko),e(h4,Zko),e(h4,MO),e(MO,eSo),e(h4,oSo),e(z,rSo),e(z,p4),e(p4,Yge),e(Yge,tSo),e(p4,aSo),e(p4,EO),e(EO,nSo),e(p4,sSo),e(z,lSo),e(z,_4),e(_4,Kge),e(Kge,iSo),e(_4,dSo),e(_4,CO),e(CO,cSo),e(_4,fSo),e(z,mSo),e(z,u4),e(u4,Zge),e(Zge,gSo),e(u4,hSo),e(u4,wO),e(wO,pSo),e(u4,_So),e(z,uSo),e(z,b4),e(b4,ehe),e(ehe,bSo),e(b4,vSo),e(b4,AO),e(AO,FSo),e(b4,TSo),e(z,MSo),e(z,v4),e(v4,ohe),e(ohe,ESo),e(v4,CSo),e(v4,LO),e(LO,wSo),e(v4,ASo),e(z,LSo),e(z,F4),e(F4,rhe),e(rhe,ySo),e(F4,xSo),e(F4,yO),e(yO,$So),e(F4,kSo),e(z,SSo),e(z,T4),e(T4,the),e(the,RSo),e(T4,PSo),e(T4,xO),e(xO,BSo),e(T4,NSo),e(z,ISo),e(z,M4),e(M4,ahe),e(ahe,qSo),e(M4,jSo),e(M4,$O),e($O,DSo),e(M4,GSo),e(z,OSo),e(z,E4),e(E4,nhe),e(nhe,VSo),e(E4,XSo),e(E4,kO),e(kO,zSo),e(E4,QSo),e(z,WSo),e(z,C4),e(C4,she),e(she,HSo),e(C4,USo),e(C4,SO),e(SO,JSo),e(C4,YSo),e(z,KSo),e(z,w4),e(w4,lhe),e(lhe,ZSo),e(w4,eRo),e(w4,RO),e(RO,oRo),e(w4,rRo),e(z,tRo),e(z,A4),e(A4,ihe),e(ihe,aRo),e(A4,nRo),e(A4,PO),e(PO,sRo),e(A4,lRo),e(z,iRo),e(z,L4),e(L4,dhe),e(dhe,dRo),e(L4,cRo),e(L4,BO),e(BO,fRo),e(L4,mRo),e(z,gRo),e(z,y4),e(y4,che),e(che,hRo),e(y4,pRo),e(y4,NO),e(NO,_Ro),e(y4,uRo),e(z,bRo),e(z,x4),e(x4,fhe),e(fhe,vRo),e(x4,FRo),e(x4,IO),e(IO,TRo),e(x4,MRo),e(z,ERo),e(z,$4),e($4,mhe),e(mhe,CRo),e($4,wRo),e($4,qO),e(qO,ARo),e($4,LRo),e(z,yRo),e(z,k4),e(k4,ghe),e(ghe,xRo),e(k4,$Ro),e(k4,jO),e(jO,kRo),e(k4,SRo),e(Ke,RRo),e(Ke,S4),e(S4,PRo),e(S4,hhe),e(hhe,BRo),e(S4,NRo),e(S4,phe),e(phe,IRo),e(Ke,qRo),M(R4,Ke,null),b(f,vXe,u),b(f,Ui,u),e(Ui,P4),e(P4,_he),M(QL,_he,null),e(Ui,jRo),e(Ui,uhe),e(uhe,DRo),b(f,FXe,u),b(f,So,u),M(WL,So,null),e(So,GRo),e(So,Ji),e(Ji,ORo),e(Ji,DO),e(DO,VRo),e(Ji,XRo),e(Ji,GO),e(GO,zRo),e(Ji,QRo),e(So,WRo),e(So,HL),e(HL,HRo),e(HL,bhe),e(bhe,URo),e(HL,JRo),e(So,YRo),e(So,ct),M(UL,ct,null),e(ct,KRo),e(ct,vhe),e(vhe,ZRo),e(ct,ePo),e(ct,Yi),e(Yi,oPo),e(Yi,Fhe),e(Fhe,rPo),e(Yi,tPo),e(Yi,OO),e(OO,aPo),e(Yi,nPo),e(ct,sPo),M(B4,ct,null),e(So,lPo),e(So,Ze),M(JL,Ze,null),e(Ze,iPo),e(Ze,The),e(The,dPo),e(Ze,cPo),e(Ze,ja),e(ja,fPo),e(ja,Mhe),e(Mhe,mPo),e(ja,gPo),e(ja,Ehe),e(Ehe,hPo),e(ja,pPo),e(ja,Che),e(Che,_Po),e(ja,uPo),e(Ze,bPo),e(Ze,W),e(W,N4),e(N4,whe),e(whe,vPo),e(N4,FPo),e(N4,VO),e(VO,TPo),e(N4,MPo),e(W,EPo),e(W,I4),e(I4,Ahe),e(Ahe,CPo),e(I4,wPo),e(I4,XO),e(XO,APo),e(I4,LPo),e(W,yPo),e(W,q4),e(q4,Lhe),e(Lhe,xPo),e(q4,$Po),e(q4,zO),e(zO,kPo),e(q4,SPo),e(W,RPo),e(W,j4),e(j4,yhe),e(yhe,PPo),e(j4,BPo),e(j4,QO),e(QO,NPo),e(j4,IPo),e(W,qPo),e(W,D4),e(D4,xhe),e(xhe,jPo),e(D4,DPo),e(D4,WO),e(WO,GPo),e(D4,OPo),e(W,VPo),e(W,G4),e(G4,$he),e($he,XPo),e(G4,zPo),e(G4,HO),e(HO,QPo),e(G4,WPo),e(W,HPo),e(W,O4),e(O4,khe),e(khe,UPo),e(O4,JPo),e(O4,UO),e(UO,YPo),e(O4,KPo),e(W,ZPo),e(W,V4),e(V4,She),e(She,eBo),e(V4,oBo),e(V4,JO),e(JO,rBo),e(V4,tBo),e(W,aBo),e(W,X4),e(X4,Rhe),e(Rhe,nBo),e(X4,sBo),e(X4,YO),e(YO,lBo),e(X4,iBo),e(W,dBo),e(W,z4),e(z4,Phe),e(Phe,cBo),e(z4,fBo),e(z4,KO),e(KO,mBo),e(z4,gBo),e(W,hBo),e(W,Q4),e(Q4,Bhe),e(Bhe,pBo),e(Q4,_Bo),e(Q4,ZO),e(ZO,uBo),e(Q4,bBo),e(W,vBo),e(W,W4),e(W4,Nhe),e(Nhe,FBo),e(W4,TBo),e(W4,eV),e(eV,MBo),e(W4,EBo),e(W,CBo),e(W,H4),e(H4,Ihe),e(Ihe,wBo),e(H4,ABo),e(H4,oV),e(oV,LBo),e(H4,yBo),e(W,xBo),e(W,U4),e(U4,qhe),e(qhe,$Bo),e(U4,kBo),e(U4,rV),e(rV,SBo),e(U4,RBo),e(W,PBo),e(W,J4),e(J4,jhe),e(jhe,BBo),e(J4,NBo),e(J4,tV),e(tV,IBo),e(J4,qBo),e(W,jBo),e(W,Y4),e(Y4,Dhe),e(Dhe,DBo),e(Y4,GBo),e(Y4,aV),e(aV,OBo),e(Y4,VBo),e(W,XBo),e(W,K4),e(K4,Ghe),e(Ghe,zBo),e(K4,QBo),e(K4,nV),e(nV,WBo),e(K4,HBo),e(W,UBo),e(W,Z4),e(Z4,Ohe),e(Ohe,JBo),e(Z4,YBo),e(Z4,sV),e(sV,KBo),e(Z4,ZBo),e(W,eNo),e(W,e2),e(e2,Vhe),e(Vhe,oNo),e(e2,rNo),e(e2,lV),e(lV,tNo),e(e2,aNo),e(W,nNo),e(W,o2),e(o2,Xhe),e(Xhe,sNo),e(o2,lNo),e(o2,iV),e(iV,iNo),e(o2,dNo),e(W,cNo),e(W,r2),e(r2,zhe),e(zhe,fNo),e(r2,mNo),e(r2,dV),e(dV,gNo),e(r2,hNo),e(W,pNo),e(W,t2),e(t2,Qhe),e(Qhe,_No),e(t2,uNo),e(t2,cV),e(cV,bNo),e(t2,vNo),e(W,FNo),e(W,a2),e(a2,Whe),e(Whe,TNo),e(a2,MNo),e(a2,fV),e(fV,ENo),e(a2,CNo),e(W,wNo),e(W,n2),e(n2,Hhe),e(Hhe,ANo),e(n2,LNo),e(n2,mV),e(mV,yNo),e(n2,xNo),e(W,$No),e(W,s2),e(s2,Uhe),e(Uhe,kNo),e(s2,SNo),e(s2,gV),e(gV,RNo),e(s2,PNo),e(W,BNo),e(W,l2),e(l2,Jhe),e(Jhe,NNo),e(l2,INo),e(l2,hV),e(hV,qNo),e(l2,jNo),e(W,DNo),e(W,i2),e(i2,Yhe),e(Yhe,GNo),e(i2,ONo),e(i2,pV),e(pV,VNo),e(i2,XNo),e(W,zNo),e(W,d2),e(d2,Khe),e(Khe,QNo),e(d2,WNo),e(d2,_V),e(_V,HNo),e(d2,UNo),e(W,JNo),e(W,c2),e(c2,Zhe),e(Zhe,YNo),e(c2,KNo),e(c2,uV),e(uV,ZNo),e(c2,eIo),e(W,oIo),e(W,f2),e(f2,epe),e(epe,rIo),e(f2,tIo),e(f2,bV),e(bV,aIo),e(f2,nIo),e(W,sIo),e(W,m2),e(m2,ope),e(ope,lIo),e(m2,iIo),e(m2,vV),e(vV,dIo),e(m2,cIo),e(W,fIo),e(W,g2),e(g2,rpe),e(rpe,mIo),e(g2,gIo),e(g2,FV),e(FV,hIo),e(g2,pIo),e(W,_Io),e(W,h2),e(h2,tpe),e(tpe,uIo),e(h2,bIo),e(h2,TV),e(TV,vIo),e(h2,FIo),e(W,TIo),e(W,p2),e(p2,ape),e(ape,MIo),e(p2,EIo),e(p2,npe),e(npe,CIo),e(p2,wIo),e(W,AIo),e(W,_2),e(_2,spe),e(spe,LIo),e(_2,yIo),e(_2,MV),e(MV,xIo),e(_2,$Io),e(W,kIo),e(W,u2),e(u2,lpe),e(lpe,SIo),e(u2,RIo),e(u2,EV),e(EV,PIo),e(u2,BIo),e(W,NIo),e(W,b2),e(b2,ipe),e(ipe,IIo),e(b2,qIo),e(b2,CV),e(CV,jIo),e(b2,DIo),e(W,GIo),e(W,v2),e(v2,dpe),e(dpe,OIo),e(v2,VIo),e(v2,wV),e(wV,XIo),e(v2,zIo),e(Ze,QIo),e(Ze,F2),e(F2,WIo),e(F2,cpe),e(cpe,HIo),e(F2,UIo),e(F2,fpe),e(fpe,JIo),e(Ze,YIo),M(T2,Ze,null),b(f,TXe,u),b(f,Ki,u),e(Ki,M2),e(M2,mpe),M(YL,mpe,null),e(Ki,KIo),e(Ki,gpe),e(gpe,ZIo),b(f,MXe,u),b(f,Ro,u),M(KL,Ro,null),e(Ro,eqo),e(Ro,Zi),e(Zi,oqo),e(Zi,AV),e(AV,rqo),e(Zi,tqo),e(Zi,LV),e(LV,aqo),e(Zi,nqo),e(Ro,sqo),e(Ro,ZL),e(ZL,lqo),e(ZL,hpe),e(hpe,iqo),e(ZL,dqo),e(Ro,cqo),e(Ro,ft),M(ey,ft,null),e(ft,fqo),e(ft,ppe),e(ppe,mqo),e(ft,gqo),e(ft,ed),e(ed,hqo),e(ed,_pe),e(_pe,pqo),e(ed,_qo),e(ed,yV),e(yV,uqo),e(ed,bqo),e(ft,vqo),M(E2,ft,null),e(Ro,Fqo),e(Ro,eo),M(oy,eo,null),e(eo,Tqo),e(eo,upe),e(upe,Mqo),e(eo,Eqo),e(eo,Da),e(Da,Cqo),e(Da,bpe),e(bpe,wqo),e(Da,Aqo),e(Da,vpe),e(vpe,Lqo),e(Da,yqo),e(Da,Fpe),e(Fpe,xqo),e(Da,$qo),e(eo,kqo),e(eo,pe),e(pe,C2),e(C2,Tpe),e(Tpe,Sqo),e(C2,Rqo),e(C2,xV),e(xV,Pqo),e(C2,Bqo),e(pe,Nqo),e(pe,w2),e(w2,Mpe),e(Mpe,Iqo),e(w2,qqo),e(w2,$V),e($V,jqo),e(w2,Dqo),e(pe,Gqo),e(pe,A2),e(A2,Epe),e(Epe,Oqo),e(A2,Vqo),e(A2,kV),e(kV,Xqo),e(A2,zqo),e(pe,Qqo),e(pe,L2),e(L2,Cpe),e(Cpe,Wqo),e(L2,Hqo),e(L2,SV),e(SV,Uqo),e(L2,Jqo),e(pe,Yqo),e(pe,y2),e(y2,wpe),e(wpe,Kqo),e(y2,Zqo),e(y2,RV),e(RV,ejo),e(y2,ojo),e(pe,rjo),e(pe,x2),e(x2,Ape),e(Ape,tjo),e(x2,ajo),e(x2,PV),e(PV,njo),e(x2,sjo),e(pe,ljo),e(pe,$2),e($2,Lpe),e(Lpe,ijo),e($2,djo),e($2,BV),e(BV,cjo),e($2,fjo),e(pe,mjo),e(pe,k2),e(k2,ype),e(ype,gjo),e(k2,hjo),e(k2,NV),e(NV,pjo),e(k2,_jo),e(pe,ujo),e(pe,S2),e(S2,xpe),e(xpe,bjo),e(S2,vjo),e(S2,IV),e(IV,Fjo),e(S2,Tjo),e(pe,Mjo),e(pe,R2),e(R2,$pe),e($pe,Ejo),e(R2,Cjo),e(R2,qV),e(qV,wjo),e(R2,Ajo),e(pe,Ljo),e(pe,P2),e(P2,kpe),e(kpe,yjo),e(P2,xjo),e(P2,jV),e(jV,$jo),e(P2,kjo),e(pe,Sjo),e(pe,B2),e(B2,Spe),e(Spe,Rjo),e(B2,Pjo),e(B2,DV),e(DV,Bjo),e(B2,Njo),e(pe,Ijo),e(pe,N2),e(N2,Rpe),e(Rpe,qjo),e(N2,jjo),e(N2,GV),e(GV,Djo),e(N2,Gjo),e(pe,Ojo),e(pe,I2),e(I2,Ppe),e(Ppe,Vjo),e(I2,Xjo),e(I2,OV),e(OV,zjo),e(I2,Qjo),e(pe,Wjo),e(pe,q2),e(q2,Bpe),e(Bpe,Hjo),e(q2,Ujo),e(q2,VV),e(VV,Jjo),e(q2,Yjo),e(pe,Kjo),e(pe,j2),e(j2,Npe),e(Npe,Zjo),e(j2,eDo),e(j2,XV),e(XV,oDo),e(j2,rDo),e(pe,tDo),e(pe,D2),e(D2,Ipe),e(Ipe,aDo),e(D2,nDo),e(D2,zV),e(zV,sDo),e(D2,lDo),e(pe,iDo),e(pe,G2),e(G2,qpe),e(qpe,dDo),e(G2,cDo),e(G2,QV),e(QV,fDo),e(G2,mDo),e(eo,gDo),e(eo,O2),e(O2,hDo),e(O2,jpe),e(jpe,pDo),e(O2,_Do),e(O2,Dpe),e(Dpe,uDo),e(eo,bDo),M(V2,eo,null),b(f,EXe,u),b(f,od,u),e(od,X2),e(X2,Gpe),M(ry,Gpe,null),e(od,vDo),e(od,Ope),e(Ope,FDo),b(f,CXe,u),b(f,Po,u),M(ty,Po,null),e(Po,TDo),e(Po,rd),e(rd,MDo),e(rd,WV),e(WV,EDo),e(rd,CDo),e(rd,HV),e(HV,wDo),e(rd,ADo),e(Po,LDo),e(Po,ay),e(ay,yDo),e(ay,Vpe),e(Vpe,xDo),e(ay,$Do),e(Po,kDo),e(Po,mt),M(ny,mt,null),e(mt,SDo),e(mt,Xpe),e(Xpe,RDo),e(mt,PDo),e(mt,td),e(td,BDo),e(td,zpe),e(zpe,NDo),e(td,IDo),e(td,UV),e(UV,qDo),e(td,jDo),e(mt,DDo),M(z2,mt,null),e(Po,GDo),e(Po,oo),M(sy,oo,null),e(oo,ODo),e(oo,Qpe),e(Qpe,VDo),e(oo,XDo),e(oo,Ga),e(Ga,zDo),e(Ga,Wpe),e(Wpe,QDo),e(Ga,WDo),e(Ga,Hpe),e(Hpe,HDo),e(Ga,UDo),e(Ga,Upe),e(Upe,JDo),e(Ga,YDo),e(oo,KDo),e(oo,I),e(I,Q2),e(Q2,Jpe),e(Jpe,ZDo),e(Q2,eGo),e(Q2,JV),e(JV,oGo),e(Q2,rGo),e(I,tGo),e(I,W2),e(W2,Ype),e(Ype,aGo),e(W2,nGo),e(W2,YV),e(YV,sGo),e(W2,lGo),e(I,iGo),e(I,H2),e(H2,Kpe),e(Kpe,dGo),e(H2,cGo),e(H2,KV),e(KV,fGo),e(H2,mGo),e(I,gGo),e(I,U2),e(U2,Zpe),e(Zpe,hGo),e(U2,pGo),e(U2,ZV),e(ZV,_Go),e(U2,uGo),e(I,bGo),e(I,J2),e(J2,e_e),e(e_e,vGo),e(J2,FGo),e(J2,eX),e(eX,TGo),e(J2,MGo),e(I,EGo),e(I,Y2),e(Y2,o_e),e(o_e,CGo),e(Y2,wGo),e(Y2,oX),e(oX,AGo),e(Y2,LGo),e(I,yGo),e(I,K2),e(K2,r_e),e(r_e,xGo),e(K2,$Go),e(K2,rX),e(rX,kGo),e(K2,SGo),e(I,RGo),e(I,Z2),e(Z2,t_e),e(t_e,PGo),e(Z2,BGo),e(Z2,tX),e(tX,NGo),e(Z2,IGo),e(I,qGo),e(I,eb),e(eb,a_e),e(a_e,jGo),e(eb,DGo),e(eb,aX),e(aX,GGo),e(eb,OGo),e(I,VGo),e(I,ob),e(ob,n_e),e(n_e,XGo),e(ob,zGo),e(ob,nX),e(nX,QGo),e(ob,WGo),e(I,HGo),e(I,rb),e(rb,s_e),e(s_e,UGo),e(rb,JGo),e(rb,sX),e(sX,YGo),e(rb,KGo),e(I,ZGo),e(I,tb),e(tb,l_e),e(l_e,eOo),e(tb,oOo),e(tb,lX),e(lX,rOo),e(tb,tOo),e(I,aOo),e(I,ab),e(ab,i_e),e(i_e,nOo),e(ab,sOo),e(ab,iX),e(iX,lOo),e(ab,iOo),e(I,dOo),e(I,nb),e(nb,d_e),e(d_e,cOo),e(nb,fOo),e(nb,dX),e(dX,mOo),e(nb,gOo),e(I,hOo),e(I,sb),e(sb,c_e),e(c_e,pOo),e(sb,_Oo),e(sb,cX),e(cX,uOo),e(sb,bOo),e(I,vOo),e(I,lb),e(lb,f_e),e(f_e,FOo),e(lb,TOo),e(lb,fX),e(fX,MOo),e(lb,EOo),e(I,COo),e(I,ib),e(ib,m_e),e(m_e,wOo),e(ib,AOo),e(ib,mX),e(mX,LOo),e(ib,yOo),e(I,xOo),e(I,db),e(db,g_e),e(g_e,$Oo),e(db,kOo),e(db,gX),e(gX,SOo),e(db,ROo),e(I,POo),e(I,cb),e(cb,h_e),e(h_e,BOo),e(cb,NOo),e(cb,hX),e(hX,IOo),e(cb,qOo),e(I,jOo),e(I,fb),e(fb,p_e),e(p_e,DOo),e(fb,GOo),e(fb,pX),e(pX,OOo),e(fb,VOo),e(I,XOo),e(I,mb),e(mb,__e),e(__e,zOo),e(mb,QOo),e(mb,_X),e(_X,WOo),e(mb,HOo),e(I,UOo),e(I,gb),e(gb,u_e),e(u_e,JOo),e(gb,YOo),e(gb,uX),e(uX,KOo),e(gb,ZOo),e(I,eVo),e(I,hb),e(hb,b_e),e(b_e,oVo),e(hb,rVo),e(hb,bX),e(bX,tVo),e(hb,aVo),e(I,nVo),e(I,pb),e(pb,v_e),e(v_e,sVo),e(pb,lVo),e(pb,vX),e(vX,iVo),e(pb,dVo),e(I,cVo),e(I,_b),e(_b,F_e),e(F_e,fVo),e(_b,mVo),e(_b,FX),e(FX,gVo),e(_b,hVo),e(I,pVo),e(I,ub),e(ub,T_e),e(T_e,_Vo),e(ub,uVo),e(ub,TX),e(TX,bVo),e(ub,vVo),e(I,FVo),e(I,bb),e(bb,M_e),e(M_e,TVo),e(bb,MVo),e(bb,MX),e(MX,EVo),e(bb,CVo),e(I,wVo),e(I,vb),e(vb,E_e),e(E_e,AVo),e(vb,LVo),e(vb,EX),e(EX,yVo),e(vb,xVo),e(I,$Vo),e(I,Fb),e(Fb,C_e),e(C_e,kVo),e(Fb,SVo),e(Fb,CX),e(CX,RVo),e(Fb,PVo),e(I,BVo),e(I,Tb),e(Tb,w_e),e(w_e,NVo),e(Tb,IVo),e(Tb,wX),e(wX,qVo),e(Tb,jVo),e(I,DVo),e(I,Mb),e(Mb,A_e),e(A_e,GVo),e(Mb,OVo),e(Mb,AX),e(AX,VVo),e(Mb,XVo),e(I,zVo),e(I,Eb),e(Eb,L_e),e(L_e,QVo),e(Eb,WVo),e(Eb,LX),e(LX,HVo),e(Eb,UVo),e(I,JVo),e(I,Cb),e(Cb,y_e),e(y_e,YVo),e(Cb,KVo),e(Cb,yX),e(yX,ZVo),e(Cb,eXo),e(I,oXo),e(I,wb),e(wb,x_e),e(x_e,rXo),e(wb,tXo),e(wb,xX),e(xX,aXo),e(wb,nXo),e(I,sXo),e(I,Ab),e(Ab,$_e),e($_e,lXo),e(Ab,iXo),e(Ab,$X),e($X,dXo),e(Ab,cXo),e(I,fXo),e(I,Lb),e(Lb,k_e),e(k_e,mXo),e(Lb,gXo),e(Lb,kX),e(kX,hXo),e(Lb,pXo),e(I,_Xo),e(I,yb),e(yb,S_e),e(S_e,uXo),e(yb,bXo),e(yb,SX),e(SX,vXo),e(yb,FXo),e(I,TXo),e(I,xb),e(xb,R_e),e(R_e,MXo),e(xb,EXo),e(xb,RX),e(RX,CXo),e(xb,wXo),e(I,AXo),e(I,$b),e($b,P_e),e(P_e,LXo),e($b,yXo),e($b,PX),e(PX,xXo),e($b,$Xo),e(I,kXo),e(I,kb),e(kb,B_e),e(B_e,SXo),e(kb,RXo),e(kb,BX),e(BX,PXo),e(kb,BXo),e(I,NXo),e(I,Sb),e(Sb,N_e),e(N_e,IXo),e(Sb,qXo),e(Sb,NX),e(NX,jXo),e(Sb,DXo),e(I,GXo),e(I,Rb),e(Rb,I_e),e(I_e,OXo),e(Rb,VXo),e(Rb,IX),e(IX,XXo),e(Rb,zXo),e(I,QXo),e(I,Pb),e(Pb,q_e),e(q_e,WXo),e(Pb,HXo),e(Pb,qX),e(qX,UXo),e(Pb,JXo),e(I,YXo),e(I,Bb),e(Bb,j_e),e(j_e,KXo),e(Bb,ZXo),e(Bb,jX),e(jX,ezo),e(Bb,ozo),e(I,rzo),e(I,Nb),e(Nb,D_e),e(D_e,tzo),e(Nb,azo),e(Nb,DX),e(DX,nzo),e(Nb,szo),e(I,lzo),e(I,Ib),e(Ib,G_e),e(G_e,izo),e(Ib,dzo),e(Ib,GX),e(GX,czo),e(Ib,fzo),e(I,mzo),e(I,qb),e(qb,O_e),e(O_e,gzo),e(qb,hzo),e(qb,OX),e(OX,pzo),e(qb,_zo),e(I,uzo),e(I,jb),e(jb,V_e),e(V_e,bzo),e(jb,vzo),e(jb,VX),e(VX,Fzo),e(jb,Tzo),e(I,Mzo),e(I,Db),e(Db,X_e),e(X_e,Ezo),e(Db,Czo),e(Db,XX),e(XX,wzo),e(Db,Azo),e(I,Lzo),e(I,Gb),e(Gb,z_e),e(z_e,yzo),e(Gb,xzo),e(Gb,zX),e(zX,$zo),e(Gb,kzo),e(oo,Szo),e(oo,Ob),e(Ob,Rzo),e(Ob,Q_e),e(Q_e,Pzo),e(Ob,Bzo),e(Ob,W_e),e(W_e,Nzo),e(oo,Izo),M(Vb,oo,null),b(f,wXe,u),b(f,ad,u),e(ad,Xb),e(Xb,H_e),M(ly,H_e,null),e(ad,qzo),e(ad,U_e),e(U_e,jzo),b(f,AXe,u),b(f,Bo,u),M(iy,Bo,null),e(Bo,Dzo),e(Bo,nd),e(nd,Gzo),e(nd,QX),e(QX,Ozo),e(nd,Vzo),e(nd,WX),e(WX,Xzo),e(nd,zzo),e(Bo,Qzo),e(Bo,dy),e(dy,Wzo),e(dy,J_e),e(J_e,Hzo),e(dy,Uzo),e(Bo,Jzo),e(Bo,gt),M(cy,gt,null),e(gt,Yzo),e(gt,Y_e),e(Y_e,Kzo),e(gt,Zzo),e(gt,sd),e(sd,eQo),e(sd,K_e),e(K_e,oQo),e(sd,rQo),e(sd,HX),e(HX,tQo),e(sd,aQo),e(gt,nQo),M(zb,gt,null),e(Bo,sQo),e(Bo,ro),M(fy,ro,null),e(ro,lQo),e(ro,Z_e),e(Z_e,iQo),e(ro,dQo),e(ro,Oa),e(Oa,cQo),e(Oa,eue),e(eue,fQo),e(Oa,mQo),e(Oa,oue),e(oue,gQo),e(Oa,hQo),e(Oa,rue),e(rue,pQo),e(Oa,_Qo),e(ro,uQo),e(ro,Z),e(Z,Qb),e(Qb,tue),e(tue,bQo),e(Qb,vQo),e(Qb,UX),e(UX,FQo),e(Qb,TQo),e(Z,MQo),e(Z,Wb),e(Wb,aue),e(aue,EQo),e(Wb,CQo),e(Wb,JX),e(JX,wQo),e(Wb,AQo),e(Z,LQo),e(Z,Hb),e(Hb,nue),e(nue,yQo),e(Hb,xQo),e(Hb,YX),e(YX,$Qo),e(Hb,kQo),e(Z,SQo),e(Z,Ub),e(Ub,sue),e(sue,RQo),e(Ub,PQo),e(Ub,KX),e(KX,BQo),e(Ub,NQo),e(Z,IQo),e(Z,Jb),e(Jb,lue),e(lue,qQo),e(Jb,jQo),e(Jb,ZX),e(ZX,DQo),e(Jb,GQo),e(Z,OQo),e(Z,Yb),e(Yb,iue),e(iue,VQo),e(Yb,XQo),e(Yb,ez),e(ez,zQo),e(Yb,QQo),e(Z,WQo),e(Z,Kb),e(Kb,due),e(due,HQo),e(Kb,UQo),e(Kb,oz),e(oz,JQo),e(Kb,YQo),e(Z,KQo),e(Z,Zb),e(Zb,cue),e(cue,ZQo),e(Zb,eWo),e(Zb,rz),e(rz,oWo),e(Zb,rWo),e(Z,tWo),e(Z,ev),e(ev,fue),e(fue,aWo),e(ev,nWo),e(ev,tz),e(tz,sWo),e(ev,lWo),e(Z,iWo),e(Z,ov),e(ov,mue),e(mue,dWo),e(ov,cWo),e(ov,az),e(az,fWo),e(ov,mWo),e(Z,gWo),e(Z,rv),e(rv,gue),e(gue,hWo),e(rv,pWo),e(rv,nz),e(nz,_Wo),e(rv,uWo),e(Z,bWo),e(Z,tv),e(tv,hue),e(hue,vWo),e(tv,FWo),e(tv,sz),e(sz,TWo),e(tv,MWo),e(Z,EWo),e(Z,av),e(av,pue),e(pue,CWo),e(av,wWo),e(av,lz),e(lz,AWo),e(av,LWo),e(Z,yWo),e(Z,nv),e(nv,_ue),e(_ue,xWo),e(nv,$Wo),e(nv,iz),e(iz,kWo),e(nv,SWo),e(Z,RWo),e(Z,sv),e(sv,uue),e(uue,PWo),e(sv,BWo),e(sv,dz),e(dz,NWo),e(sv,IWo),e(Z,qWo),e(Z,lv),e(lv,bue),e(bue,jWo),e(lv,DWo),e(lv,cz),e(cz,GWo),e(lv,OWo),e(Z,VWo),e(Z,iv),e(iv,vue),e(vue,XWo),e(iv,zWo),e(iv,fz),e(fz,QWo),e(iv,WWo),e(Z,HWo),e(Z,dv),e(dv,Fue),e(Fue,UWo),e(dv,JWo),e(dv,mz),e(mz,YWo),e(dv,KWo),e(Z,ZWo),e(Z,cv),e(cv,Tue),e(Tue,eHo),e(cv,oHo),e(cv,gz),e(gz,rHo),e(cv,tHo),e(Z,aHo),e(Z,fv),e(fv,Mue),e(Mue,nHo),e(fv,sHo),e(fv,hz),e(hz,lHo),e(fv,iHo),e(Z,dHo),e(Z,mv),e(mv,Eue),e(Eue,cHo),e(mv,fHo),e(mv,pz),e(pz,mHo),e(mv,gHo),e(Z,hHo),e(Z,gv),e(gv,Cue),e(Cue,pHo),e(gv,_Ho),e(gv,_z),e(_z,uHo),e(gv,bHo),e(Z,vHo),e(Z,hv),e(hv,wue),e(wue,FHo),e(hv,THo),e(hv,uz),e(uz,MHo),e(hv,EHo),e(Z,CHo),e(Z,pv),e(pv,Aue),e(Aue,wHo),e(pv,AHo),e(pv,bz),e(bz,LHo),e(pv,yHo),e(Z,xHo),e(Z,_v),e(_v,Lue),e(Lue,$Ho),e(_v,kHo),e(_v,vz),e(vz,SHo),e(_v,RHo),e(Z,PHo),e(Z,uv),e(uv,yue),e(yue,BHo),e(uv,NHo),e(uv,Fz),e(Fz,IHo),e(uv,qHo),e(Z,jHo),e(Z,bv),e(bv,xue),e(xue,DHo),e(bv,GHo),e(bv,Tz),e(Tz,OHo),e(bv,VHo),e(Z,XHo),e(Z,vv),e(vv,$ue),e($ue,zHo),e(vv,QHo),e(vv,Mz),e(Mz,WHo),e(vv,HHo),e(Z,UHo),e(Z,Fv),e(Fv,kue),e(kue,JHo),e(Fv,YHo),e(Fv,Ez),e(Ez,KHo),e(Fv,ZHo),e(Z,eUo),e(Z,Tv),e(Tv,Sue),e(Sue,oUo),e(Tv,rUo),e(Tv,Cz),e(Cz,tUo),e(Tv,aUo),e(ro,nUo),e(ro,Mv),e(Mv,sUo),e(Mv,Rue),e(Rue,lUo),e(Mv,iUo),e(Mv,Pue),e(Pue,dUo),e(ro,cUo),M(Ev,ro,null),b(f,LXe,u),b(f,ld,u),e(ld,Cv),e(Cv,Bue),M(my,Bue,null),e(ld,fUo),e(ld,Nue),e(Nue,mUo),b(f,yXe,u),b(f,No,u),M(gy,No,null),e(No,gUo),e(No,id),e(id,hUo),e(id,wz),e(wz,pUo),e(id,_Uo),e(id,Az),e(Az,uUo),e(id,bUo),e(No,vUo),e(No,hy),e(hy,FUo),e(hy,Iue),e(Iue,TUo),e(hy,MUo),e(No,EUo),e(No,ht),M(py,ht,null),e(ht,CUo),e(ht,que),e(que,wUo),e(ht,AUo),e(ht,dd),e(dd,LUo),e(dd,jue),e(jue,yUo),e(dd,xUo),e(dd,Lz),e(Lz,$Uo),e(dd,kUo),e(ht,SUo),M(wv,ht,null),e(No,RUo),e(No,to),M(_y,to,null),e(to,PUo),e(to,Due),e(Due,BUo),e(to,NUo),e(to,Va),e(Va,IUo),e(Va,Gue),e(Gue,qUo),e(Va,jUo),e(Va,Oue),e(Oue,DUo),e(Va,GUo),e(Va,Vue),e(Vue,OUo),e(Va,VUo),e(to,XUo),e(to,Io),e(Io,Av),e(Av,Xue),e(Xue,zUo),e(Av,QUo),e(Av,yz),e(yz,WUo),e(Av,HUo),e(Io,UUo),e(Io,Lv),e(Lv,zue),e(zue,JUo),e(Lv,YUo),e(Lv,xz),e(xz,KUo),e(Lv,ZUo),e(Io,eJo),e(Io,yv),e(yv,Que),e(Que,oJo),e(yv,rJo),e(yv,$z),e($z,tJo),e(yv,aJo),e(Io,nJo),e(Io,xv),e(xv,Wue),e(Wue,sJo),e(xv,lJo),e(xv,kz),e(kz,iJo),e(xv,dJo),e(Io,cJo),e(Io,$v),e($v,Hue),e(Hue,fJo),e($v,mJo),e($v,Sz),e(Sz,gJo),e($v,hJo),e(Io,pJo),e(Io,kv),e(kv,Uue),e(Uue,_Jo),e(kv,uJo),e(kv,Rz),e(Rz,bJo),e(kv,vJo),e(to,FJo),e(to,Sv),e(Sv,TJo),e(Sv,Jue),e(Jue,MJo),e(Sv,EJo),e(Sv,Yue),e(Yue,CJo),e(to,wJo),M(Rv,to,null),b(f,xXe,u),b(f,cd,u),e(cd,Pv),e(Pv,Kue),M(uy,Kue,null),e(cd,AJo),e(cd,Zue),e(Zue,LJo),b(f,$Xe,u),b(f,qo,u),M(by,qo,null),e(qo,yJo),e(qo,fd),e(fd,xJo),e(fd,Pz),e(Pz,$Jo),e(fd,kJo),e(fd,Bz),e(Bz,SJo),e(fd,RJo),e(qo,PJo),e(qo,vy),e(vy,BJo),e(vy,e1e),e(e1e,NJo),e(vy,IJo),e(qo,qJo),e(qo,pt),M(Fy,pt,null),e(pt,jJo),e(pt,o1e),e(o1e,DJo),e(pt,GJo),e(pt,md),e(md,OJo),e(md,r1e),e(r1e,VJo),e(md,XJo),e(md,Nz),e(Nz,zJo),e(md,QJo),e(pt,WJo),M(Bv,pt,null),e(qo,HJo),e(qo,ao),M(Ty,ao,null),e(ao,UJo),e(ao,t1e),e(t1e,JJo),e(ao,YJo),e(ao,Xa),e(Xa,KJo),e(Xa,a1e),e(a1e,ZJo),e(Xa,eYo),e(Xa,n1e),e(n1e,oYo),e(Xa,rYo),e(Xa,s1e),e(s1e,tYo),e(Xa,aYo),e(ao,nYo),e(ao,U),e(U,Nv),e(Nv,l1e),e(l1e,sYo),e(Nv,lYo),e(Nv,Iz),e(Iz,iYo),e(Nv,dYo),e(U,cYo),e(U,Iv),e(Iv,i1e),e(i1e,fYo),e(Iv,mYo),e(Iv,qz),e(qz,gYo),e(Iv,hYo),e(U,pYo),e(U,qv),e(qv,d1e),e(d1e,_Yo),e(qv,uYo),e(qv,jz),e(jz,bYo),e(qv,vYo),e(U,FYo),e(U,jv),e(jv,c1e),e(c1e,TYo),e(jv,MYo),e(jv,Dz),e(Dz,EYo),e(jv,CYo),e(U,wYo),e(U,Dv),e(Dv,f1e),e(f1e,AYo),e(Dv,LYo),e(Dv,Gz),e(Gz,yYo),e(Dv,xYo),e(U,$Yo),e(U,Gv),e(Gv,m1e),e(m1e,kYo),e(Gv,SYo),e(Gv,Oz),e(Oz,RYo),e(Gv,PYo),e(U,BYo),e(U,Ov),e(Ov,g1e),e(g1e,NYo),e(Ov,IYo),e(Ov,Vz),e(Vz,qYo),e(Ov,jYo),e(U,DYo),e(U,Vv),e(Vv,h1e),e(h1e,GYo),e(Vv,OYo),e(Vv,Xz),e(Xz,VYo),e(Vv,XYo),e(U,zYo),e(U,Xv),e(Xv,p1e),e(p1e,QYo),e(Xv,WYo),e(Xv,zz),e(zz,HYo),e(Xv,UYo),e(U,JYo),e(U,zv),e(zv,_1e),e(_1e,YYo),e(zv,KYo),e(zv,Qz),e(Qz,ZYo),e(zv,eKo),e(U,oKo),e(U,Qv),e(Qv,u1e),e(u1e,rKo),e(Qv,tKo),e(Qv,Wz),e(Wz,aKo),e(Qv,nKo),e(U,sKo),e(U,Wv),e(Wv,b1e),e(b1e,lKo),e(Wv,iKo),e(Wv,Hz),e(Hz,dKo),e(Wv,cKo),e(U,fKo),e(U,Hv),e(Hv,v1e),e(v1e,mKo),e(Hv,gKo),e(Hv,Uz),e(Uz,hKo),e(Hv,pKo),e(U,_Ko),e(U,Uv),e(Uv,F1e),e(F1e,uKo),e(Uv,bKo),e(Uv,Jz),e(Jz,vKo),e(Uv,FKo),e(U,TKo),e(U,Jv),e(Jv,T1e),e(T1e,MKo),e(Jv,EKo),e(Jv,Yz),e(Yz,CKo),e(Jv,wKo),e(U,AKo),e(U,Yv),e(Yv,M1e),e(M1e,LKo),e(Yv,yKo),e(Yv,Kz),e(Kz,xKo),e(Yv,$Ko),e(U,kKo),e(U,Kv),e(Kv,E1e),e(E1e,SKo),e(Kv,RKo),e(Kv,Zz),e(Zz,PKo),e(Kv,BKo),e(U,NKo),e(U,Zv),e(Zv,C1e),e(C1e,IKo),e(Zv,qKo),e(Zv,eQ),e(eQ,jKo),e(Zv,DKo),e(U,GKo),e(U,e5),e(e5,w1e),e(w1e,OKo),e(e5,VKo),e(e5,oQ),e(oQ,XKo),e(e5,zKo),e(U,QKo),e(U,o5),e(o5,A1e),e(A1e,WKo),e(o5,HKo),e(o5,rQ),e(rQ,UKo),e(o5,JKo),e(U,YKo),e(U,r5),e(r5,L1e),e(L1e,KKo),e(r5,ZKo),e(r5,tQ),e(tQ,eZo),e(r5,oZo),e(U,rZo),e(U,t5),e(t5,y1e),e(y1e,tZo),e(t5,aZo),e(t5,aQ),e(aQ,nZo),e(t5,sZo),e(U,lZo),e(U,a5),e(a5,x1e),e(x1e,iZo),e(a5,dZo),e(a5,nQ),e(nQ,cZo),e(a5,fZo),e(U,mZo),e(U,n5),e(n5,$1e),e($1e,gZo),e(n5,hZo),e(n5,sQ),e(sQ,pZo),e(n5,_Zo),e(U,uZo),e(U,s5),e(s5,k1e),e(k1e,bZo),e(s5,vZo),e(s5,lQ),e(lQ,FZo),e(s5,TZo),e(U,MZo),e(U,l5),e(l5,S1e),e(S1e,EZo),e(l5,CZo),e(l5,iQ),e(iQ,wZo),e(l5,AZo),e(U,LZo),e(U,i5),e(i5,R1e),e(R1e,yZo),e(i5,xZo),e(i5,dQ),e(dQ,$Zo),e(i5,kZo),e(U,SZo),e(U,d5),e(d5,P1e),e(P1e,RZo),e(d5,PZo),e(d5,cQ),e(cQ,BZo),e(d5,NZo),e(U,IZo),e(U,c5),e(c5,B1e),e(B1e,qZo),e(c5,jZo),e(c5,fQ),e(fQ,DZo),e(c5,GZo),e(U,OZo),e(U,f5),e(f5,N1e),e(N1e,VZo),e(f5,XZo),e(f5,mQ),e(mQ,zZo),e(f5,QZo),e(U,WZo),e(U,m5),e(m5,I1e),e(I1e,HZo),e(m5,UZo),e(m5,gQ),e(gQ,JZo),e(m5,YZo),e(U,KZo),e(U,g5),e(g5,q1e),e(q1e,ZZo),e(g5,eer),e(g5,hQ),e(hQ,oer),e(g5,rer),e(U,ter),e(U,h5),e(h5,j1e),e(j1e,aer),e(h5,ner),e(h5,pQ),e(pQ,ser),e(h5,ler),e(U,ier),e(U,p5),e(p5,D1e),e(D1e,der),e(p5,cer),e(p5,_Q),e(_Q,fer),e(p5,mer),e(U,ger),e(U,_5),e(_5,G1e),e(G1e,her),e(_5,per),e(_5,uQ),e(uQ,_er),e(_5,uer),e(U,ber),e(U,u5),e(u5,O1e),e(O1e,ver),e(u5,Fer),e(u5,bQ),e(bQ,Ter),e(u5,Mer),e(ao,Eer),e(ao,b5),e(b5,Cer),e(b5,V1e),e(V1e,wer),e(b5,Aer),e(b5,X1e),e(X1e,Ler),e(ao,yer),M(v5,ao,null),b(f,kXe,u),b(f,gd,u),e(gd,F5),e(F5,z1e),M(My,z1e,null),e(gd,xer),e(gd,Q1e),e(Q1e,$er),b(f,SXe,u),b(f,jo,u),M(Ey,jo,null),e(jo,ker),e(jo,hd),e(hd,Ser),e(hd,vQ),e(vQ,Rer),e(hd,Per),e(hd,FQ),e(FQ,Ber),e(hd,Ner),e(jo,Ier),e(jo,Cy),e(Cy,qer),e(Cy,W1e),e(W1e,jer),e(Cy,Der),e(jo,Ger),e(jo,_t),M(wy,_t,null),e(_t,Oer),e(_t,H1e),e(H1e,Ver),e(_t,Xer),e(_t,pd),e(pd,zer),e(pd,U1e),e(U1e,Qer),e(pd,Wer),e(pd,TQ),e(TQ,Her),e(pd,Uer),e(_t,Jer),M(T5,_t,null),e(jo,Yer),e(jo,no),M(Ay,no,null),e(no,Ker),e(no,J1e),e(J1e,Zer),e(no,eor),e(no,za),e(za,oor),e(za,Y1e),e(Y1e,ror),e(za,tor),e(za,K1e),e(K1e,aor),e(za,nor),e(za,Z1e),e(Z1e,sor),e(za,lor),e(no,ior),e(no,V),e(V,M5),e(M5,e4e),e(e4e,dor),e(M5,cor),e(M5,MQ),e(MQ,mor),e(M5,gor),e(V,hor),e(V,E5),e(E5,o4e),e(o4e,por),e(E5,_or),e(E5,EQ),e(EQ,uor),e(E5,bor),e(V,vor),e(V,C5),e(C5,r4e),e(r4e,For),e(C5,Tor),e(C5,CQ),e(CQ,Mor),e(C5,Eor),e(V,Cor),e(V,w5),e(w5,t4e),e(t4e,wor),e(w5,Aor),e(w5,wQ),e(wQ,Lor),e(w5,yor),e(V,xor),e(V,A5),e(A5,a4e),e(a4e,$or),e(A5,kor),e(A5,AQ),e(AQ,Sor),e(A5,Ror),e(V,Por),e(V,L5),e(L5,n4e),e(n4e,Bor),e(L5,Nor),e(L5,LQ),e(LQ,Ior),e(L5,qor),e(V,jor),e(V,y5),e(y5,s4e),e(s4e,Dor),e(y5,Gor),e(y5,yQ),e(yQ,Oor),e(y5,Vor),e(V,Xor),e(V,x5),e(x5,l4e),e(l4e,zor),e(x5,Qor),e(x5,xQ),e(xQ,Wor),e(x5,Hor),e(V,Uor),e(V,$5),e($5,i4e),e(i4e,Jor),e($5,Yor),e($5,$Q),e($Q,Kor),e($5,Zor),e(V,err),e(V,k5),e(k5,d4e),e(d4e,orr),e(k5,rrr),e(k5,kQ),e(kQ,trr),e(k5,arr),e(V,nrr),e(V,S5),e(S5,c4e),e(c4e,srr),e(S5,lrr),e(S5,SQ),e(SQ,irr),e(S5,drr),e(V,crr),e(V,R5),e(R5,f4e),e(f4e,frr),e(R5,mrr),e(R5,RQ),e(RQ,grr),e(R5,hrr),e(V,prr),e(V,P5),e(P5,m4e),e(m4e,_rr),e(P5,urr),e(P5,PQ),e(PQ,brr),e(P5,vrr),e(V,Frr),e(V,B5),e(B5,g4e),e(g4e,Trr),e(B5,Mrr),e(B5,BQ),e(BQ,Err),e(B5,Crr),e(V,wrr),e(V,N5),e(N5,h4e),e(h4e,Arr),e(N5,Lrr),e(N5,NQ),e(NQ,yrr),e(N5,xrr),e(V,$rr),e(V,I5),e(I5,p4e),e(p4e,krr),e(I5,Srr),e(I5,IQ),e(IQ,Rrr),e(I5,Prr),e(V,Brr),e(V,q5),e(q5,_4e),e(_4e,Nrr),e(q5,Irr),e(q5,qQ),e(qQ,qrr),e(q5,jrr),e(V,Drr),e(V,j5),e(j5,u4e),e(u4e,Grr),e(j5,Orr),e(j5,jQ),e(jQ,Vrr),e(j5,Xrr),e(V,zrr),e(V,D5),e(D5,b4e),e(b4e,Qrr),e(D5,Wrr),e(D5,DQ),e(DQ,Hrr),e(D5,Urr),e(V,Jrr),e(V,G5),e(G5,v4e),e(v4e,Yrr),e(G5,Krr),e(G5,GQ),e(GQ,Zrr),e(G5,etr),e(V,otr),e(V,O5),e(O5,F4e),e(F4e,rtr),e(O5,ttr),e(O5,OQ),e(OQ,atr),e(O5,ntr),e(V,str),e(V,V5),e(V5,T4e),e(T4e,ltr),e(V5,itr),e(V5,VQ),e(VQ,dtr),e(V5,ctr),e(V,ftr),e(V,X5),e(X5,M4e),e(M4e,mtr),e(X5,gtr),e(X5,XQ),e(XQ,htr),e(X5,ptr),e(V,_tr),e(V,z5),e(z5,E4e),e(E4e,utr),e(z5,btr),e(z5,zQ),e(zQ,vtr),e(z5,Ftr),e(V,Ttr),e(V,Q5),e(Q5,C4e),e(C4e,Mtr),e(Q5,Etr),e(Q5,QQ),e(QQ,Ctr),e(Q5,wtr),e(V,Atr),e(V,W5),e(W5,w4e),e(w4e,Ltr),e(W5,ytr),e(W5,WQ),e(WQ,xtr),e(W5,$tr),e(V,ktr),e(V,H5),e(H5,A4e),e(A4e,Str),e(H5,Rtr),e(H5,HQ),e(HQ,Ptr),e(H5,Btr),e(V,Ntr),e(V,U5),e(U5,L4e),e(L4e,Itr),e(U5,qtr),e(U5,UQ),e(UQ,jtr),e(U5,Dtr),e(V,Gtr),e(V,J5),e(J5,y4e),e(y4e,Otr),e(J5,Vtr),e(J5,JQ),e(JQ,Xtr),e(J5,ztr),e(V,Qtr),e(V,Y5),e(Y5,x4e),e(x4e,Wtr),e(Y5,Htr),e(Y5,YQ),e(YQ,Utr),e(Y5,Jtr),e(V,Ytr),e(V,K5),e(K5,$4e),e($4e,Ktr),e(K5,Ztr),e(K5,KQ),e(KQ,ear),e(K5,oar),e(V,rar),e(V,Z5),e(Z5,k4e),e(k4e,tar),e(Z5,aar),e(Z5,ZQ),e(ZQ,nar),e(Z5,sar),e(V,lar),e(V,eF),e(eF,S4e),e(S4e,iar),e(eF,dar),e(eF,eW),e(eW,car),e(eF,far),e(V,mar),e(V,oF),e(oF,R4e),e(R4e,gar),e(oF,har),e(oF,oW),e(oW,par),e(oF,_ar),e(V,uar),e(V,rF),e(rF,P4e),e(P4e,bar),e(rF,Far),e(rF,rW),e(rW,Tar),e(rF,Mar),e(V,Ear),e(V,tF),e(tF,B4e),e(B4e,Car),e(tF,war),e(tF,tW),e(tW,Aar),e(tF,Lar),e(V,yar),e(V,aF),e(aF,N4e),e(N4e,xar),e(aF,$ar),e(aF,aW),e(aW,kar),e(aF,Sar),e(V,Rar),e(V,nF),e(nF,I4e),e(I4e,Par),e(nF,Bar),e(nF,nW),e(nW,Nar),e(nF,Iar),e(V,qar),e(V,sF),e(sF,q4e),e(q4e,jar),e(sF,Dar),e(sF,sW),e(sW,Gar),e(sF,Oar),e(V,Var),e(V,lF),e(lF,j4e),e(j4e,Xar),e(lF,zar),e(lF,lW),e(lW,Qar),e(lF,War),e(V,Har),e(V,iF),e(iF,D4e),e(D4e,Uar),e(iF,Jar),e(iF,iW),e(iW,Yar),e(iF,Kar),e(V,Zar),e(V,dF),e(dF,G4e),e(G4e,enr),e(dF,onr),e(dF,dW),e(dW,rnr),e(dF,tnr),e(no,anr),e(no,cF),e(cF,nnr),e(cF,O4e),e(O4e,snr),e(cF,lnr),e(cF,V4e),e(V4e,inr),e(no,dnr),M(fF,no,null),b(f,RXe,u),b(f,_d,u),e(_d,mF),e(mF,X4e),M(Ly,X4e,null),e(_d,cnr),e(_d,z4e),e(z4e,fnr),b(f,PXe,u),b(f,Do,u),M(yy,Do,null),e(Do,mnr),e(Do,ud),e(ud,gnr),e(ud,cW),e(cW,hnr),e(ud,pnr),e(ud,fW),e(fW,_nr),e(ud,unr),e(Do,bnr),e(Do,xy),e(xy,vnr),e(xy,Q4e),e(Q4e,Fnr),e(xy,Tnr),e(Do,Mnr),e(Do,ut),M($y,ut,null),e(ut,Enr),e(ut,W4e),e(W4e,Cnr),e(ut,wnr),e(ut,bd),e(bd,Anr),e(bd,H4e),e(H4e,Lnr),e(bd,ynr),e(bd,mW),e(mW,xnr),e(bd,$nr),e(ut,knr),M(gF,ut,null),e(Do,Snr),e(Do,so),M(ky,so,null),e(so,Rnr),e(so,U4e),e(U4e,Pnr),e(so,Bnr),e(so,Qa),e(Qa,Nnr),e(Qa,J4e),e(J4e,Inr),e(Qa,qnr),e(Qa,Y4e),e(Y4e,jnr),e(Qa,Dnr),e(Qa,K4e),e(K4e,Gnr),e(Qa,Onr),e(so,Vnr),e(so,Z4e),e(Z4e,hF),e(hF,e2e),e(e2e,Xnr),e(hF,znr),e(hF,gW),e(gW,Qnr),e(hF,Wnr),e(so,Hnr),e(so,pF),e(pF,Unr),e(pF,o2e),e(o2e,Jnr),e(pF,Ynr),e(pF,r2e),e(r2e,Knr),e(so,Znr),M(_F,so,null),b(f,BXe,u),b(f,vd,u),e(vd,uF),e(uF,t2e),M(Sy,t2e,null),e(vd,esr),e(vd,a2e),e(a2e,osr),b(f,NXe,u),b(f,Go,u),M(Ry,Go,null),e(Go,rsr),e(Go,Fd),e(Fd,tsr),e(Fd,hW),e(hW,asr),e(Fd,nsr),e(Fd,pW),e(pW,ssr),e(Fd,lsr),e(Go,isr),e(Go,Py),e(Py,dsr),e(Py,n2e),e(n2e,csr),e(Py,fsr),e(Go,msr),e(Go,bt),M(By,bt,null),e(bt,gsr),e(bt,s2e),e(s2e,hsr),e(bt,psr),e(bt,Td),e(Td,_sr),e(Td,l2e),e(l2e,usr),e(Td,bsr),e(Td,_W),e(_W,vsr),e(Td,Fsr),e(bt,Tsr),M(bF,bt,null),e(Go,Msr),e(Go,lo),M(Ny,lo,null),e(lo,Esr),e(lo,i2e),e(i2e,Csr),e(lo,wsr),e(lo,Wa),e(Wa,Asr),e(Wa,d2e),e(d2e,Lsr),e(Wa,ysr),e(Wa,c2e),e(c2e,xsr),e(Wa,$sr),e(Wa,f2e),e(f2e,ksr),e(Wa,Ssr),e(lo,Rsr),e(lo,_e),e(_e,vF),e(vF,m2e),e(m2e,Psr),e(vF,Bsr),e(vF,uW),e(uW,Nsr),e(vF,Isr),e(_e,qsr),e(_e,FF),e(FF,g2e),e(g2e,jsr),e(FF,Dsr),e(FF,bW),e(bW,Gsr),e(FF,Osr),e(_e,Vsr),e(_e,TF),e(TF,h2e),e(h2e,Xsr),e(TF,zsr),e(TF,vW),e(vW,Qsr),e(TF,Wsr),e(_e,Hsr),e(_e,MF),e(MF,p2e),e(p2e,Usr),e(MF,Jsr),e(MF,FW),e(FW,Ysr),e(MF,Ksr),e(_e,Zsr),e(_e,Hs),e(Hs,_2e),e(_2e,elr),e(Hs,olr),e(Hs,TW),e(TW,rlr),e(Hs,tlr),e(Hs,MW),e(MW,alr),e(Hs,nlr),e(_e,slr),e(_e,EF),e(EF,u2e),e(u2e,llr),e(EF,ilr),e(EF,EW),e(EW,dlr),e(EF,clr),e(_e,flr),e(_e,Us),e(Us,b2e),e(b2e,mlr),e(Us,glr),e(Us,CW),e(CW,hlr),e(Us,plr),e(Us,wW),e(wW,_lr),e(Us,ulr),e(_e,blr),e(_e,CF),e(CF,v2e),e(v2e,vlr),e(CF,Flr),e(CF,AW),e(AW,Tlr),e(CF,Mlr),e(_e,Elr),e(_e,wF),e(wF,F2e),e(F2e,Clr),e(wF,wlr),e(wF,LW),e(LW,Alr),e(wF,Llr),e(_e,ylr),e(_e,vt),e(vt,T2e),e(T2e,xlr),e(vt,$lr),e(vt,yW),e(yW,klr),e(vt,Slr),e(vt,xW),e(xW,Rlr),e(vt,Plr),e(vt,$W),e($W,Blr),e(vt,Nlr),e(_e,Ilr),e(_e,AF),e(AF,M2e),e(M2e,qlr),e(AF,jlr),e(AF,kW),e(kW,Dlr),e(AF,Glr),e(_e,Olr),e(_e,LF),e(LF,E2e),e(E2e,Vlr),e(LF,Xlr),e(LF,SW),e(SW,zlr),e(LF,Qlr),e(_e,Wlr),e(_e,yF),e(yF,C2e),e(C2e,Hlr),e(yF,Ulr),e(yF,RW),e(RW,Jlr),e(yF,Ylr),e(_e,Klr),e(_e,xF),e(xF,w2e),e(w2e,Zlr),e(xF,eir),e(xF,PW),e(PW,oir),e(xF,rir),e(_e,tir),e(_e,$F),e($F,A2e),e(A2e,air),e($F,nir),e($F,BW),e(BW,sir),e($F,lir),e(_e,iir),e(_e,kF),e(kF,L2e),e(L2e,dir),e(kF,cir),e(kF,NW),e(NW,fir),e(kF,mir),e(_e,gir),e(_e,SF),e(SF,y2e),e(y2e,hir),e(SF,pir),e(SF,IW),e(IW,_ir),e(SF,uir),e(lo,bir),e(lo,RF),e(RF,vir),e(RF,x2e),e(x2e,Fir),e(RF,Tir),e(RF,$2e),e($2e,Mir),e(lo,Eir),M(PF,lo,null),b(f,IXe,u),b(f,Md,u),e(Md,BF),e(BF,k2e),M(Iy,k2e,null),e(Md,Cir),e(Md,S2e),e(S2e,wir),b(f,qXe,u),b(f,Oo,u),M(qy,Oo,null),e(Oo,Air),e(Oo,Ed),e(Ed,Lir),e(Ed,qW),e(qW,yir),e(Ed,xir),e(Ed,jW),e(jW,$ir),e(Ed,kir),e(Oo,Sir),e(Oo,jy),e(jy,Rir),e(jy,R2e),e(R2e,Pir),e(jy,Bir),e(Oo,Nir),e(Oo,Ft),M(Dy,Ft,null),e(Ft,Iir),e(Ft,P2e),e(P2e,qir),e(Ft,jir),e(Ft,Cd),e(Cd,Dir),e(Cd,B2e),e(B2e,Gir),e(Cd,Oir),e(Cd,DW),e(DW,Vir),e(Cd,Xir),e(Ft,zir),M(NF,Ft,null),e(Oo,Qir),e(Oo,io),M(Gy,io,null),e(io,Wir),e(io,N2e),e(N2e,Hir),e(io,Uir),e(io,Ha),e(Ha,Jir),e(Ha,I2e),e(I2e,Yir),e(Ha,Kir),e(Ha,q2e),e(q2e,Zir),e(Ha,edr),e(Ha,j2e),e(j2e,odr),e(Ha,rdr),e(io,tdr),e(io,D2e),e(D2e,IF),e(IF,G2e),e(G2e,adr),e(IF,ndr),e(IF,GW),e(GW,sdr),e(IF,ldr),e(io,idr),e(io,qF),e(qF,ddr),e(qF,O2e),e(O2e,cdr),e(qF,fdr),e(qF,V2e),e(V2e,mdr),e(io,gdr),M(jF,io,null),b(f,jXe,u),b(f,wd,u),e(wd,DF),e(DF,X2e),M(Oy,X2e,null),e(wd,hdr),e(wd,z2e),e(z2e,pdr),b(f,DXe,u),b(f,Vo,u),M(Vy,Vo,null),e(Vo,_dr),e(Vo,Ad),e(Ad,udr),e(Ad,OW),e(OW,bdr),e(Ad,vdr),e(Ad,VW),e(VW,Fdr),e(Ad,Tdr),e(Vo,Mdr),e(Vo,Xy),e(Xy,Edr),e(Xy,Q2e),e(Q2e,Cdr),e(Xy,wdr),e(Vo,Adr),e(Vo,Tt),M(zy,Tt,null),e(Tt,Ldr),e(Tt,W2e),e(W2e,ydr),e(Tt,xdr),e(Tt,Ld),e(Ld,$dr),e(Ld,H2e),e(H2e,kdr),e(Ld,Sdr),e(Ld,XW),e(XW,Rdr),e(Ld,Pdr),e(Tt,Bdr),M(GF,Tt,null),e(Vo,Ndr),e(Vo,co),M(Qy,co,null),e(co,Idr),e(co,U2e),e(U2e,qdr),e(co,jdr),e(co,Ua),e(Ua,Ddr),e(Ua,J2e),e(J2e,Gdr),e(Ua,Odr),e(Ua,Y2e),e(Y2e,Vdr),e(Ua,Xdr),e(Ua,K2e),e(K2e,zdr),e(Ua,Qdr),e(co,Wdr),e(co,Z2e),e(Z2e,OF),e(OF,ebe),e(ebe,Hdr),e(OF,Udr),e(OF,zW),e(zW,Jdr),e(OF,Ydr),e(co,Kdr),e(co,VF),e(VF,Zdr),e(VF,obe),e(obe,ecr),e(VF,ocr),e(VF,rbe),e(rbe,rcr),e(co,tcr),M(XF,co,null),b(f,GXe,u),b(f,yd,u),e(yd,zF),e(zF,tbe),M(Wy,tbe,null),e(yd,acr),e(yd,abe),e(abe,ncr),b(f,OXe,u),b(f,Xo,u),M(Hy,Xo,null),e(Xo,scr),e(Xo,xd),e(xd,lcr),e(xd,QW),e(QW,icr),e(xd,dcr),e(xd,WW),e(WW,ccr),e(xd,fcr),e(Xo,mcr),e(Xo,Uy),e(Uy,gcr),e(Uy,nbe),e(nbe,hcr),e(Uy,pcr),e(Xo,_cr),e(Xo,Mt),M(Jy,Mt,null),e(Mt,ucr),e(Mt,sbe),e(sbe,bcr),e(Mt,vcr),e(Mt,$d),e($d,Fcr),e($d,lbe),e(lbe,Tcr),e($d,Mcr),e($d,HW),e(HW,Ecr),e($d,Ccr),e(Mt,wcr),M(QF,Mt,null),e(Xo,Acr),e(Xo,fo),M(Yy,fo,null),e(fo,Lcr),e(fo,ibe),e(ibe,ycr),e(fo,xcr),e(fo,Ja),e(Ja,$cr),e(Ja,dbe),e(dbe,kcr),e(Ja,Scr),e(Ja,cbe),e(cbe,Rcr),e(Ja,Pcr),e(Ja,fbe),e(fbe,Bcr),e(Ja,Ncr),e(fo,Icr),e(fo,Pe),e(Pe,WF),e(WF,mbe),e(mbe,qcr),e(WF,jcr),e(WF,UW),e(UW,Dcr),e(WF,Gcr),e(Pe,Ocr),e(Pe,HF),e(HF,gbe),e(gbe,Vcr),e(HF,Xcr),e(HF,JW),e(JW,zcr),e(HF,Qcr),e(Pe,Wcr),e(Pe,UF),e(UF,hbe),e(hbe,Hcr),e(UF,Ucr),e(UF,YW),e(YW,Jcr),e(UF,Ycr),e(Pe,Kcr),e(Pe,JF),e(JF,pbe),e(pbe,Zcr),e(JF,efr),e(JF,KW),e(KW,ofr),e(JF,rfr),e(Pe,tfr),e(Pe,YF),e(YF,_be),e(_be,afr),e(YF,nfr),e(YF,ZW),e(ZW,sfr),e(YF,lfr),e(Pe,ifr),e(Pe,KF),e(KF,ube),e(ube,dfr),e(KF,cfr),e(KF,eH),e(eH,ffr),e(KF,mfr),e(Pe,gfr),e(Pe,ZF),e(ZF,bbe),e(bbe,hfr),e(ZF,pfr),e(ZF,oH),e(oH,_fr),e(ZF,ufr),e(Pe,bfr),e(Pe,eT),e(eT,vbe),e(vbe,vfr),e(eT,Ffr),e(eT,rH),e(rH,Tfr),e(eT,Mfr),e(Pe,Efr),e(Pe,oT),e(oT,Fbe),e(Fbe,Cfr),e(oT,wfr),e(oT,tH),e(tH,Afr),e(oT,Lfr),e(fo,yfr),e(fo,rT),e(rT,xfr),e(rT,Tbe),e(Tbe,$fr),e(rT,kfr),e(rT,Mbe),e(Mbe,Sfr),e(fo,Rfr),M(tT,fo,null),b(f,VXe,u),b(f,kd,u),e(kd,aT),e(aT,Ebe),M(Ky,Ebe,null),e(kd,Pfr),e(kd,Cbe),e(Cbe,Bfr),b(f,XXe,u),b(f,zo,u),M(Zy,zo,null),e(zo,Nfr),e(zo,Sd),e(Sd,Ifr),e(Sd,aH),e(aH,qfr),e(Sd,jfr),e(Sd,nH),e(nH,Dfr),e(Sd,Gfr),e(zo,Ofr),e(zo,e9),e(e9,Vfr),e(e9,wbe),e(wbe,Xfr),e(e9,zfr),e(zo,Qfr),e(zo,Et),M(o9,Et,null),e(Et,Wfr),e(Et,Abe),e(Abe,Hfr),e(Et,Ufr),e(Et,Rd),e(Rd,Jfr),e(Rd,Lbe),e(Lbe,Yfr),e(Rd,Kfr),e(Rd,sH),e(sH,Zfr),e(Rd,emr),e(Et,omr),M(nT,Et,null),e(zo,rmr),e(zo,mo),M(r9,mo,null),e(mo,tmr),e(mo,ybe),e(ybe,amr),e(mo,nmr),e(mo,Ya),e(Ya,smr),e(Ya,xbe),e(xbe,lmr),e(Ya,imr),e(Ya,$be),e($be,dmr),e(Ya,cmr),e(Ya,kbe),e(kbe,fmr),e(Ya,mmr),e(mo,gmr),e(mo,ot),e(ot,sT),e(sT,Sbe),e(Sbe,hmr),e(sT,pmr),e(sT,lH),e(lH,_mr),e(sT,umr),e(ot,bmr),e(ot,lT),e(lT,Rbe),e(Rbe,vmr),e(lT,Fmr),e(lT,iH),e(iH,Tmr),e(lT,Mmr),e(ot,Emr),e(ot,iT),e(iT,Pbe),e(Pbe,Cmr),e(iT,wmr),e(iT,dH),e(dH,Amr),e(iT,Lmr),e(ot,ymr),e(ot,dT),e(dT,Bbe),e(Bbe,xmr),e(dT,$mr),e(dT,cH),e(cH,kmr),e(dT,Smr),e(ot,Rmr),e(ot,cT),e(cT,Nbe),e(Nbe,Pmr),e(cT,Bmr),e(cT,fH),e(fH,Nmr),e(cT,Imr),e(mo,qmr),e(mo,fT),e(fT,jmr),e(fT,Ibe),e(Ibe,Dmr),e(fT,Gmr),e(fT,qbe),e(qbe,Omr),e(mo,Vmr),M(mT,mo,null),b(f,zXe,u),b(f,Pd,u),e(Pd,gT),e(gT,jbe),M(t9,jbe,null),e(Pd,Xmr),e(Pd,Dbe),e(Dbe,zmr),b(f,QXe,u),b(f,Qo,u),M(a9,Qo,null),e(Qo,Qmr),e(Qo,Bd),e(Bd,Wmr),e(Bd,mH),e(mH,Hmr),e(Bd,Umr),e(Bd,gH),e(gH,Jmr),e(Bd,Ymr),e(Qo,Kmr),e(Qo,n9),e(n9,Zmr),e(n9,Gbe),e(Gbe,egr),e(n9,ogr),e(Qo,rgr),e(Qo,Ct),M(s9,Ct,null),e(Ct,tgr),e(Ct,Obe),e(Obe,agr),e(Ct,ngr),e(Ct,Nd),e(Nd,sgr),e(Nd,Vbe),e(Vbe,lgr),e(Nd,igr),e(Nd,hH),e(hH,dgr),e(Nd,cgr),e(Ct,fgr),M(hT,Ct,null),e(Qo,mgr),e(Qo,go),M(l9,go,null),e(go,ggr),e(go,Xbe),e(Xbe,hgr),e(go,pgr),e(go,Ka),e(Ka,_gr),e(Ka,zbe),e(zbe,ugr),e(Ka,bgr),e(Ka,Qbe),e(Qbe,vgr),e(Ka,Fgr),e(Ka,Wbe),e(Wbe,Tgr),e(Ka,Mgr),e(go,Egr),e(go,Le),e(Le,pT),e(pT,Hbe),e(Hbe,Cgr),e(pT,wgr),e(pT,pH),e(pH,Agr),e(pT,Lgr),e(Le,ygr),e(Le,_T),e(_T,Ube),e(Ube,xgr),e(_T,$gr),e(_T,_H),e(_H,kgr),e(_T,Sgr),e(Le,Rgr),e(Le,uT),e(uT,Jbe),e(Jbe,Pgr),e(uT,Bgr),e(uT,uH),e(uH,Ngr),e(uT,Igr),e(Le,qgr),e(Le,bT),e(bT,Ybe),e(Ybe,jgr),e(bT,Dgr),e(bT,bH),e(bH,Ggr),e(bT,Ogr),e(Le,Vgr),e(Le,vT),e(vT,Kbe),e(Kbe,Xgr),e(vT,zgr),e(vT,vH),e(vH,Qgr),e(vT,Wgr),e(Le,Hgr),e(Le,FT),e(FT,Zbe),e(Zbe,Ugr),e(FT,Jgr),e(FT,FH),e(FH,Ygr),e(FT,Kgr),e(Le,Zgr),e(Le,TT),e(TT,eve),e(eve,ehr),e(TT,ohr),e(TT,TH),e(TH,rhr),e(TT,thr),e(Le,ahr),e(Le,MT),e(MT,ove),e(ove,nhr),e(MT,shr),e(MT,MH),e(MH,lhr),e(MT,ihr),e(Le,dhr),e(Le,ET),e(ET,rve),e(rve,chr),e(ET,fhr),e(ET,EH),e(EH,mhr),e(ET,ghr),e(Le,hhr),e(Le,CT),e(CT,tve),e(tve,phr),e(CT,_hr),e(CT,CH),e(CH,uhr),e(CT,bhr),e(go,vhr),e(go,wT),e(wT,Fhr),e(wT,ave),e(ave,Thr),e(wT,Mhr),e(wT,nve),e(nve,Ehr),e(go,Chr),M(AT,go,null),b(f,WXe,u),b(f,Id,u),e(Id,LT),e(LT,sve),M(i9,sve,null),e(Id,whr),e(Id,lve),e(lve,Ahr),b(f,HXe,u),b(f,Wo,u),M(d9,Wo,null),e(Wo,Lhr),e(Wo,qd),e(qd,yhr),e(qd,wH),e(wH,xhr),e(qd,$hr),e(qd,AH),e(AH,khr),e(qd,Shr),e(Wo,Rhr),e(Wo,c9),e(c9,Phr),e(c9,ive),e(ive,Bhr),e(c9,Nhr),e(Wo,Ihr),e(Wo,wt),M(f9,wt,null),e(wt,qhr),e(wt,dve),e(dve,jhr),e(wt,Dhr),e(wt,jd),e(jd,Ghr),e(jd,cve),e(cve,Ohr),e(jd,Vhr),e(jd,LH),e(LH,Xhr),e(jd,zhr),e(wt,Qhr),M(yT,wt,null),e(Wo,Whr),e(Wo,ho),M(m9,ho,null),e(ho,Hhr),e(ho,fve),e(fve,Uhr),e(ho,Jhr),e(ho,Za),e(Za,Yhr),e(Za,mve),e(mve,Khr),e(Za,Zhr),e(Za,gve),e(gve,epr),e(Za,opr),e(Za,hve),e(hve,rpr),e(Za,tpr),e(ho,apr),e(ho,g9),e(g9,xT),e(xT,pve),e(pve,npr),e(xT,spr),e(xT,yH),e(yH,lpr),e(xT,ipr),e(g9,dpr),e(g9,$T),e($T,_ve),e(_ve,cpr),e($T,fpr),e($T,xH),e(xH,mpr),e($T,gpr),e(ho,hpr),e(ho,kT),e(kT,ppr),e(kT,uve),e(uve,_pr),e(kT,upr),e(kT,bve),e(bve,bpr),e(ho,vpr),M(ST,ho,null),b(f,UXe,u),b(f,Dd,u),e(Dd,RT),e(RT,vve),M(h9,vve,null),e(Dd,Fpr),e(Dd,Fve),e(Fve,Tpr),b(f,JXe,u),b(f,Ho,u),M(p9,Ho,null),e(Ho,Mpr),e(Ho,Gd),e(Gd,Epr),e(Gd,$H),e($H,Cpr),e(Gd,wpr),e(Gd,kH),e(kH,Apr),e(Gd,Lpr),e(Ho,ypr),e(Ho,_9),e(_9,xpr),e(_9,Tve),e(Tve,$pr),e(_9,kpr),e(Ho,Spr),e(Ho,At),M(u9,At,null),e(At,Rpr),e(At,Mve),e(Mve,Ppr),e(At,Bpr),e(At,Od),e(Od,Npr),e(Od,Eve),e(Eve,Ipr),e(Od,qpr),e(Od,SH),e(SH,jpr),e(Od,Dpr),e(At,Gpr),M(PT,At,null),e(Ho,Opr),e(Ho,po),M(b9,po,null),e(po,Vpr),e(po,Cve),e(Cve,Xpr),e(po,zpr),e(po,en),e(en,Qpr),e(en,wve),e(wve,Wpr),e(en,Hpr),e(en,Ave),e(Ave,Upr),e(en,Jpr),e(en,Lve),e(Lve,Ypr),e(en,Kpr),e(po,Zpr),e(po,rt),e(rt,BT),e(BT,yve),e(yve,e_r),e(BT,o_r),e(BT,RH),e(RH,r_r),e(BT,t_r),e(rt,a_r),e(rt,NT),e(NT,xve),e(xve,n_r),e(NT,s_r),e(NT,PH),e(PH,l_r),e(NT,i_r),e(rt,d_r),e(rt,IT),e(IT,$ve),e($ve,c_r),e(IT,f_r),e(IT,BH),e(BH,m_r),e(IT,g_r),e(rt,h_r),e(rt,qT),e(qT,kve),e(kve,p_r),e(qT,__r),e(qT,NH),e(NH,u_r),e(qT,b_r),e(rt,v_r),e(rt,jT),e(jT,Sve),e(Sve,F_r),e(jT,T_r),e(jT,IH),e(IH,M_r),e(jT,E_r),e(po,C_r),e(po,DT),e(DT,w_r),e(DT,Rve),e(Rve,A_r),e(DT,L_r),e(DT,Pve),e(Pve,y_r),e(po,x_r),M(GT,po,null),b(f,YXe,u),b(f,Vd,u),e(Vd,OT),e(OT,Bve),M(v9,Bve,null),e(Vd,$_r),e(Vd,Nve),e(Nve,k_r),b(f,KXe,u),b(f,Uo,u),M(F9,Uo,null),e(Uo,S_r),e(Uo,Xd),e(Xd,R_r),e(Xd,qH),e(qH,P_r),e(Xd,B_r),e(Xd,jH),e(jH,N_r),e(Xd,I_r),e(Uo,q_r),e(Uo,T9),e(T9,j_r),e(T9,Ive),e(Ive,D_r),e(T9,G_r),e(Uo,O_r),e(Uo,Lt),M(M9,Lt,null),e(Lt,V_r),e(Lt,qve),e(qve,X_r),e(Lt,z_r),e(Lt,zd),e(zd,Q_r),e(zd,jve),e(jve,W_r),e(zd,H_r),e(zd,DH),e(DH,U_r),e(zd,J_r),e(Lt,Y_r),M(VT,Lt,null),e(Uo,K_r),e(Uo,_o),M(E9,_o,null),e(_o,Z_r),e(_o,Dve),e(Dve,eur),e(_o,our),e(_o,on),e(on,rur),e(on,Gve),e(Gve,tur),e(on,aur),e(on,Ove),e(Ove,nur),e(on,sur),e(on,Vve),e(Vve,lur),e(on,iur),e(_o,dur),e(_o,Qd),e(Qd,XT),e(XT,Xve),e(Xve,cur),e(XT,fur),e(XT,GH),e(GH,mur),e(XT,gur),e(Qd,hur),e(Qd,zT),e(zT,zve),e(zve,pur),e(zT,_ur),e(zT,OH),e(OH,uur),e(zT,bur),e(Qd,vur),e(Qd,QT),e(QT,Qve),e(Qve,Fur),e(QT,Tur),e(QT,VH),e(VH,Mur),e(QT,Eur),e(_o,Cur),e(_o,WT),e(WT,wur),e(WT,Wve),e(Wve,Aur),e(WT,Lur),e(WT,Hve),e(Hve,yur),e(_o,xur),M(HT,_o,null),b(f,ZXe,u),b(f,Wd,u),e(Wd,UT),e(UT,Uve),M(C9,Uve,null),e(Wd,$ur),e(Wd,Jve),e(Jve,kur),b(f,eze,u),b(f,Jo,u),M(w9,Jo,null),e(Jo,Sur),e(Jo,Hd),e(Hd,Rur),e(Hd,XH),e(XH,Pur),e(Hd,Bur),e(Hd,zH),e(zH,Nur),e(Hd,Iur),e(Jo,qur),e(Jo,A9),e(A9,jur),e(A9,Yve),e(Yve,Dur),e(A9,Gur),e(Jo,Our),e(Jo,yt),M(L9,yt,null),e(yt,Vur),e(yt,Kve),e(Kve,Xur),e(yt,zur),e(yt,Ud),e(Ud,Qur),e(Ud,Zve),e(Zve,Wur),e(Ud,Hur),e(Ud,QH),e(QH,Uur),e(Ud,Jur),e(yt,Yur),M(JT,yt,null),e(Jo,Kur),e(Jo,uo),M(y9,uo,null),e(uo,Zur),e(uo,e5e),e(e5e,e1r),e(uo,o1r),e(uo,rn),e(rn,r1r),e(rn,o5e),e(o5e,t1r),e(rn,a1r),e(rn,r5e),e(r5e,n1r),e(rn,s1r),e(rn,t5e),e(t5e,l1r),e(rn,i1r),e(uo,d1r),e(uo,x9),e(x9,YT),e(YT,a5e),e(a5e,c1r),e(YT,f1r),e(YT,WH),e(WH,m1r),e(YT,g1r),e(x9,h1r),e(x9,KT),e(KT,n5e),e(n5e,p1r),e(KT,_1r),e(KT,HH),e(HH,u1r),e(KT,b1r),e(uo,v1r),e(uo,ZT),e(ZT,F1r),e(ZT,s5e),e(s5e,T1r),e(ZT,M1r),e(ZT,l5e),e(l5e,E1r),e(uo,C1r),M(e7,uo,null),b(f,oze,u),b(f,Jd,u),e(Jd,o7),e(o7,i5e),M($9,i5e,null),e(Jd,w1r),e(Jd,d5e),e(d5e,A1r),b(f,rze,u),b(f,Yo,u),M(k9,Yo,null),e(Yo,L1r),e(Yo,Yd),e(Yd,y1r),e(Yd,UH),e(UH,x1r),e(Yd,$1r),e(Yd,JH),e(JH,k1r),e(Yd,S1r),e(Yo,R1r),e(Yo,S9),e(S9,P1r),e(S9,c5e),e(c5e,B1r),e(S9,N1r),e(Yo,I1r),e(Yo,xt),M(R9,xt,null),e(xt,q1r),e(xt,f5e),e(f5e,j1r),e(xt,D1r),e(xt,Kd),e(Kd,G1r),e(Kd,m5e),e(m5e,O1r),e(Kd,V1r),e(Kd,YH),e(YH,X1r),e(Kd,z1r),e(xt,Q1r),M(r7,xt,null),e(Yo,W1r),e(Yo,bo),M(P9,bo,null),e(bo,H1r),e(bo,g5e),e(g5e,U1r),e(bo,J1r),e(bo,tn),e(tn,Y1r),e(tn,h5e),e(h5e,K1r),e(tn,Z1r),e(tn,p5e),e(p5e,e4r),e(tn,o4r),e(tn,_5e),e(_5e,r4r),e(tn,t4r),e(bo,a4r),e(bo,u5e),e(u5e,t7),e(t7,b5e),e(b5e,n4r),e(t7,s4r),e(t7,KH),e(KH,l4r),e(t7,i4r),e(bo,d4r),e(bo,a7),e(a7,c4r),e(a7,v5e),e(v5e,f4r),e(a7,m4r),e(a7,F5e),e(F5e,g4r),e(bo,h4r),M(n7,bo,null),b(f,tze,u),b(f,Zd,u),e(Zd,s7),e(s7,T5e),M(B9,T5e,null),e(Zd,p4r),e(Zd,M5e),e(M5e,_4r),b(f,aze,u),b(f,Ko,u),M(N9,Ko,null),e(Ko,u4r),e(Ko,ec),e(ec,b4r),e(ec,ZH),e(ZH,v4r),e(ec,F4r),e(ec,eU),e(eU,T4r),e(ec,M4r),e(Ko,E4r),e(Ko,I9),e(I9,C4r),e(I9,E5e),e(E5e,w4r),e(I9,A4r),e(Ko,L4r),e(Ko,$t),M(q9,$t,null),e($t,y4r),e($t,C5e),e(C5e,x4r),e($t,$4r),e($t,oc),e(oc,k4r),e(oc,w5e),e(w5e,S4r),e(oc,R4r),e(oc,oU),e(oU,P4r),e(oc,B4r),e($t,N4r),M(l7,$t,null),e(Ko,I4r),e(Ko,vo),M(j9,vo,null),e(vo,q4r),e(vo,A5e),e(A5e,j4r),e(vo,D4r),e(vo,an),e(an,G4r),e(an,L5e),e(L5e,O4r),e(an,V4r),e(an,y5e),e(y5e,X4r),e(an,z4r),e(an,x5e),e(x5e,Q4r),e(an,W4r),e(vo,H4r),e(vo,Zo),e(Zo,i7),e(i7,$5e),e($5e,U4r),e(i7,J4r),e(i7,rU),e(rU,Y4r),e(i7,K4r),e(Zo,Z4r),e(Zo,d7),e(d7,k5e),e(k5e,e2r),e(d7,o2r),e(d7,tU),e(tU,r2r),e(d7,t2r),e(Zo,a2r),e(Zo,c7),e(c7,S5e),e(S5e,n2r),e(c7,s2r),e(c7,aU),e(aU,l2r),e(c7,i2r),e(Zo,d2r),e(Zo,f7),e(f7,R5e),e(R5e,c2r),e(f7,f2r),e(f7,nU),e(nU,m2r),e(f7,g2r),e(Zo,h2r),e(Zo,m7),e(m7,P5e),e(P5e,p2r),e(m7,_2r),e(m7,sU),e(sU,u2r),e(m7,b2r),e(Zo,v2r),e(Zo,g7),e(g7,B5e),e(B5e,F2r),e(g7,T2r),e(g7,lU),e(lU,M2r),e(g7,E2r),e(vo,C2r),e(vo,h7),e(h7,w2r),e(h7,N5e),e(N5e,A2r),e(h7,L2r),e(h7,I5e),e(I5e,y2r),e(vo,x2r),M(p7,vo,null),b(f,nze,u),b(f,rc,u),e(rc,_7),e(_7,q5e),M(D9,q5e,null),e(rc,$2r),e(rc,j5e),e(j5e,k2r),b(f,sze,u),b(f,er,u),M(G9,er,null),e(er,S2r),e(er,tc),e(tc,R2r),e(tc,iU),e(iU,P2r),e(tc,B2r),e(tc,dU),e(dU,N2r),e(tc,I2r),e(er,q2r),e(er,O9),e(O9,j2r),e(O9,D5e),e(D5e,D2r),e(O9,G2r),e(er,O2r),e(er,kt),M(V9,kt,null),e(kt,V2r),e(kt,G5e),e(G5e,X2r),e(kt,z2r),e(kt,ac),e(ac,Q2r),e(ac,O5e),e(O5e,W2r),e(ac,H2r),e(ac,cU),e(cU,U2r),e(ac,J2r),e(kt,Y2r),M(u7,kt,null),e(er,K2r),e(er,Fo),M(X9,Fo,null),e(Fo,Z2r),e(Fo,V5e),e(V5e,ebr),e(Fo,obr),e(Fo,nn),e(nn,rbr),e(nn,X5e),e(X5e,tbr),e(nn,abr),e(nn,z5e),e(z5e,nbr),e(nn,sbr),e(nn,Q5e),e(Q5e,lbr),e(nn,ibr),e(Fo,dbr),e(Fo,W5e),e(W5e,b7),e(b7,H5e),e(H5e,cbr),e(b7,fbr),e(b7,fU),e(fU,mbr),e(b7,gbr),e(Fo,hbr),e(Fo,v7),e(v7,pbr),e(v7,U5e),e(U5e,_br),e(v7,ubr),e(v7,J5e),e(J5e,bbr),e(Fo,vbr),M(F7,Fo,null),b(f,lze,u),b(f,nc,u),e(nc,T7),e(T7,Y5e),M(z9,Y5e,null),e(nc,Fbr),e(nc,K5e),e(K5e,Tbr),b(f,ize,u),b(f,or,u),M(Q9,or,null),e(or,Mbr),e(or,sc),e(sc,Ebr),e(sc,mU),e(mU,Cbr),e(sc,wbr),e(sc,gU),e(gU,Abr),e(sc,Lbr),e(or,ybr),e(or,W9),e(W9,xbr),e(W9,Z5e),e(Z5e,$br),e(W9,kbr),e(or,Sbr),e(or,St),M(H9,St,null),e(St,Rbr),e(St,eFe),e(eFe,Pbr),e(St,Bbr),e(St,lc),e(lc,Nbr),e(lc,oFe),e(oFe,Ibr),e(lc,qbr),e(lc,hU),e(hU,jbr),e(lc,Dbr),e(St,Gbr),M(M7,St,null),e(or,Obr),e(or,xr),M(U9,xr,null),e(xr,Vbr),e(xr,rFe),e(rFe,Xbr),e(xr,zbr),e(xr,sn),e(sn,Qbr),e(sn,tFe),e(tFe,Wbr),e(sn,Hbr),e(sn,aFe),e(aFe,Ubr),e(sn,Jbr),e(sn,nFe),e(nFe,Ybr),e(sn,Kbr),e(xr,Zbr),e(xr,j),e(j,E7),e(E7,sFe),e(sFe,evr),e(E7,ovr),e(E7,pU),e(pU,rvr),e(E7,tvr),e(j,avr),e(j,C7),e(C7,lFe),e(lFe,nvr),e(C7,svr),e(C7,_U),e(_U,lvr),e(C7,ivr),e(j,dvr),e(j,w7),e(w7,iFe),e(iFe,cvr),e(w7,fvr),e(w7,uU),e(uU,mvr),e(w7,gvr),e(j,hvr),e(j,A7),e(A7,dFe),e(dFe,pvr),e(A7,_vr),e(A7,bU),e(bU,uvr),e(A7,bvr),e(j,vvr),e(j,L7),e(L7,cFe),e(cFe,Fvr),e(L7,Tvr),e(L7,vU),e(vU,Mvr),e(L7,Evr),e(j,Cvr),e(j,y7),e(y7,fFe),e(fFe,wvr),e(y7,Avr),e(y7,FU),e(FU,Lvr),e(y7,yvr),e(j,xvr),e(j,x7),e(x7,mFe),e(mFe,$vr),e(x7,kvr),e(x7,TU),e(TU,Svr),e(x7,Rvr),e(j,Pvr),e(j,$7),e($7,gFe),e(gFe,Bvr),e($7,Nvr),e($7,MU),e(MU,Ivr),e($7,qvr),e(j,jvr),e(j,k7),e(k7,hFe),e(hFe,Dvr),e(k7,Gvr),e(k7,EU),e(EU,Ovr),e(k7,Vvr),e(j,Xvr),e(j,S7),e(S7,pFe),e(pFe,zvr),e(S7,Qvr),e(S7,CU),e(CU,Wvr),e(S7,Hvr),e(j,Uvr),e(j,R7),e(R7,_Fe),e(_Fe,Jvr),e(R7,Yvr),e(R7,wU),e(wU,Kvr),e(R7,Zvr),e(j,e5r),e(j,P7),e(P7,uFe),e(uFe,o5r),e(P7,r5r),e(P7,AU),e(AU,t5r),e(P7,a5r),e(j,n5r),e(j,B7),e(B7,bFe),e(bFe,s5r),e(B7,l5r),e(B7,LU),e(LU,i5r),e(B7,d5r),e(j,c5r),e(j,N7),e(N7,vFe),e(vFe,f5r),e(N7,m5r),e(N7,yU),e(yU,g5r),e(N7,h5r),e(j,p5r),e(j,I7),e(I7,FFe),e(FFe,_5r),e(I7,u5r),e(I7,xU),e(xU,b5r),e(I7,v5r),e(j,F5r),e(j,q7),e(q7,TFe),e(TFe,T5r),e(q7,M5r),e(q7,$U),e($U,E5r),e(q7,C5r),e(j,w5r),e(j,j7),e(j7,MFe),e(MFe,A5r),e(j7,L5r),e(j7,kU),e(kU,y5r),e(j7,x5r),e(j,$5r),e(j,Js),e(Js,EFe),e(EFe,k5r),e(Js,S5r),e(Js,SU),e(SU,R5r),e(Js,P5r),e(Js,RU),e(RU,B5r),e(Js,N5r),e(j,I5r),e(j,D7),e(D7,CFe),e(CFe,q5r),e(D7,j5r),e(D7,PU),e(PU,D5r),e(D7,G5r),e(j,O5r),e(j,G7),e(G7,wFe),e(wFe,V5r),e(G7,X5r),e(G7,BU),e(BU,z5r),e(G7,Q5r),e(j,W5r),e(j,O7),e(O7,AFe),e(AFe,H5r),e(O7,U5r),e(O7,NU),e(NU,J5r),e(O7,Y5r),e(j,K5r),e(j,V7),e(V7,LFe),e(LFe,Z5r),e(V7,eFr),e(V7,IU),e(IU,oFr),e(V7,rFr),e(j,tFr),e(j,X7),e(X7,yFe),e(yFe,aFr),e(X7,nFr),e(X7,qU),e(qU,sFr),e(X7,lFr),e(j,iFr),e(j,z7),e(z7,xFe),e(xFe,dFr),e(z7,cFr),e(z7,jU),e(jU,fFr),e(z7,mFr),e(j,gFr),e(j,Q7),e(Q7,$Fe),e($Fe,hFr),e(Q7,pFr),e(Q7,DU),e(DU,_Fr),e(Q7,uFr),e(j,bFr),e(j,W7),e(W7,kFe),e(kFe,vFr),e(W7,FFr),e(W7,GU),e(GU,TFr),e(W7,MFr),e(j,EFr),e(j,H7),e(H7,SFe),e(SFe,CFr),e(H7,wFr),e(H7,OU),e(OU,AFr),e(H7,LFr),e(j,yFr),e(j,U7),e(U7,RFe),e(RFe,xFr),e(U7,$Fr),e(U7,VU),e(VU,kFr),e(U7,SFr),e(j,RFr),e(j,J7),e(J7,PFe),e(PFe,PFr),e(J7,BFr),e(J7,XU),e(XU,NFr),e(J7,IFr),e(j,qFr),e(j,Y7),e(Y7,BFe),e(BFe,jFr),e(Y7,DFr),e(Y7,zU),e(zU,GFr),e(Y7,OFr),e(j,VFr),e(j,K7),e(K7,NFe),e(NFe,XFr),e(K7,zFr),e(K7,QU),e(QU,QFr),e(K7,WFr),e(j,HFr),e(j,Z7),e(Z7,IFe),e(IFe,UFr),e(Z7,JFr),e(Z7,WU),e(WU,YFr),e(Z7,KFr),e(j,ZFr),e(j,e8),e(e8,qFe),e(qFe,eTr),e(e8,oTr),e(e8,HU),e(HU,rTr),e(e8,tTr),e(j,aTr),e(j,o8),e(o8,jFe),e(jFe,nTr),e(o8,sTr),e(o8,UU),e(UU,lTr),e(o8,iTr),e(j,dTr),e(j,r8),e(r8,DFe),e(DFe,cTr),e(r8,fTr),e(r8,JU),e(JU,mTr),e(r8,gTr),e(j,hTr),e(j,t8),e(t8,GFe),e(GFe,pTr),e(t8,_Tr),e(t8,YU),e(YU,uTr),e(t8,bTr),e(j,vTr),e(j,a8),e(a8,OFe),e(OFe,FTr),e(a8,TTr),e(a8,KU),e(KU,MTr),e(a8,ETr),e(j,CTr),e(j,n8),e(n8,VFe),e(VFe,wTr),e(n8,ATr),e(n8,ZU),e(ZU,LTr),e(n8,yTr),e(j,xTr),e(j,s8),e(s8,XFe),e(XFe,$Tr),e(s8,kTr),e(s8,eJ),e(eJ,STr),e(s8,RTr),e(j,PTr),e(j,l8),e(l8,zFe),e(zFe,BTr),e(l8,NTr),e(l8,oJ),e(oJ,ITr),e(l8,qTr),e(j,jTr),e(j,i8),e(i8,QFe),e(QFe,DTr),e(i8,GTr),e(i8,rJ),e(rJ,OTr),e(i8,VTr),e(j,XTr),e(j,d8),e(d8,WFe),e(WFe,zTr),e(d8,QTr),e(d8,tJ),e(tJ,WTr),e(d8,HTr),e(j,UTr),e(j,c8),e(c8,HFe),e(HFe,JTr),e(c8,YTr),e(c8,aJ),e(aJ,KTr),e(c8,ZTr),e(j,e7r),e(j,f8),e(f8,UFe),e(UFe,o7r),e(f8,r7r),e(f8,nJ),e(nJ,t7r),e(f8,a7r),e(j,n7r),e(j,m8),e(m8,JFe),e(JFe,s7r),e(m8,l7r),e(m8,sJ),e(sJ,i7r),e(m8,d7r),e(j,c7r),e(j,g8),e(g8,YFe),e(YFe,f7r),e(g8,m7r),e(g8,lJ),e(lJ,g7r),e(g8,h7r),e(j,p7r),e(j,h8),e(h8,KFe),e(KFe,_7r),e(h8,u7r),e(h8,iJ),e(iJ,b7r),e(h8,v7r),e(j,F7r),e(j,p8),e(p8,ZFe),e(ZFe,T7r),e(p8,M7r),e(p8,dJ),e(dJ,E7r),e(p8,C7r),e(xr,w7r),M(_8,xr,null),b(f,dze,u),b(f,ic,u),e(ic,u8),e(u8,eTe),M(J9,eTe,null),e(ic,A7r),e(ic,oTe),e(oTe,L7r),b(f,cze,u),b(f,rr,u),M(Y9,rr,null),e(rr,y7r),e(rr,dc),e(dc,x7r),e(dc,cJ),e(cJ,$7r),e(dc,k7r),e(dc,fJ),e(fJ,S7r),e(dc,R7r),e(rr,P7r),e(rr,K9),e(K9,B7r),e(K9,rTe),e(rTe,N7r),e(K9,I7r),e(rr,q7r),e(rr,Rt),M(Z9,Rt,null),e(Rt,j7r),e(Rt,tTe),e(tTe,D7r),e(Rt,G7r),e(Rt,cc),e(cc,O7r),e(cc,aTe),e(aTe,V7r),e(cc,X7r),e(cc,mJ),e(mJ,z7r),e(cc,Q7r),e(Rt,W7r),M(b8,Rt,null),e(rr,H7r),e(rr,$r),M(ex,$r,null),e($r,U7r),e($r,nTe),e(nTe,J7r),e($r,Y7r),e($r,ln),e(ln,K7r),e(ln,sTe),e(sTe,Z7r),e(ln,e8r),e(ln,lTe),e(lTe,o8r),e(ln,r8r),e(ln,iTe),e(iTe,t8r),e(ln,a8r),e($r,n8r),e($r,se),e(se,v8),e(v8,dTe),e(dTe,s8r),e(v8,l8r),e(v8,gJ),e(gJ,i8r),e(v8,d8r),e(se,c8r),e(se,F8),e(F8,cTe),e(cTe,f8r),e(F8,m8r),e(F8,hJ),e(hJ,g8r),e(F8,h8r),e(se,p8r),e(se,T8),e(T8,fTe),e(fTe,_8r),e(T8,u8r),e(T8,pJ),e(pJ,b8r),e(T8,v8r),e(se,F8r),e(se,M8),e(M8,mTe),e(mTe,T8r),e(M8,M8r),e(M8,_J),e(_J,E8r),e(M8,C8r),e(se,w8r),e(se,E8),e(E8,gTe),e(gTe,A8r),e(E8,L8r),e(E8,uJ),e(uJ,y8r),e(E8,x8r),e(se,$8r),e(se,C8),e(C8,hTe),e(hTe,k8r),e(C8,S8r),e(C8,bJ),e(bJ,R8r),e(C8,P8r),e(se,B8r),e(se,w8),e(w8,pTe),e(pTe,N8r),e(w8,I8r),e(w8,vJ),e(vJ,q8r),e(w8,j8r),e(se,D8r),e(se,A8),e(A8,_Te),e(_Te,G8r),e(A8,O8r),e(A8,FJ),e(FJ,V8r),e(A8,X8r),e(se,z8r),e(se,L8),e(L8,uTe),e(uTe,Q8r),e(L8,W8r),e(L8,TJ),e(TJ,H8r),e(L8,U8r),e(se,J8r),e(se,y8),e(y8,bTe),e(bTe,Y8r),e(y8,K8r),e(y8,MJ),e(MJ,Z8r),e(y8,eMr),e(se,oMr),e(se,x8),e(x8,vTe),e(vTe,rMr),e(x8,tMr),e(x8,EJ),e(EJ,aMr),e(x8,nMr),e(se,sMr),e(se,$8),e($8,FTe),e(FTe,lMr),e($8,iMr),e($8,CJ),e(CJ,dMr),e($8,cMr),e(se,fMr),e(se,k8),e(k8,TTe),e(TTe,mMr),e(k8,gMr),e(k8,wJ),e(wJ,hMr),e(k8,pMr),e(se,_Mr),e(se,S8),e(S8,MTe),e(MTe,uMr),e(S8,bMr),e(S8,AJ),e(AJ,vMr),e(S8,FMr),e(se,TMr),e(se,R8),e(R8,ETe),e(ETe,MMr),e(R8,EMr),e(R8,LJ),e(LJ,CMr),e(R8,wMr),e(se,AMr),e(se,P8),e(P8,CTe),e(CTe,LMr),e(P8,yMr),e(P8,yJ),e(yJ,xMr),e(P8,$Mr),e(se,kMr),e(se,B8),e(B8,wTe),e(wTe,SMr),e(B8,RMr),e(B8,xJ),e(xJ,PMr),e(B8,BMr),e(se,NMr),e(se,N8),e(N8,ATe),e(ATe,IMr),e(N8,qMr),e(N8,$J),e($J,jMr),e(N8,DMr),e(se,GMr),e(se,I8),e(I8,LTe),e(LTe,OMr),e(I8,VMr),e(I8,kJ),e(kJ,XMr),e(I8,zMr),e(se,QMr),e(se,q8),e(q8,yTe),e(yTe,WMr),e(q8,HMr),e(q8,SJ),e(SJ,UMr),e(q8,JMr),e(se,YMr),e(se,j8),e(j8,xTe),e(xTe,KMr),e(j8,ZMr),e(j8,RJ),e(RJ,eEr),e(j8,oEr),e(se,rEr),e(se,D8),e(D8,$Te),e($Te,tEr),e(D8,aEr),e(D8,PJ),e(PJ,nEr),e(D8,sEr),e(se,lEr),e(se,G8),e(G8,kTe),e(kTe,iEr),e(G8,dEr),e(G8,BJ),e(BJ,cEr),e(G8,fEr),e($r,mEr),M(O8,$r,null),b(f,fze,u),b(f,fc,u),e(fc,V8),e(V8,STe),M(ox,STe,null),e(fc,gEr),e(fc,RTe),e(RTe,hEr),b(f,mze,u),b(f,tr,u),M(rx,tr,null),e(tr,pEr),e(tr,mc),e(mc,_Er),e(mc,NJ),e(NJ,uEr),e(mc,bEr),e(mc,IJ),e(IJ,vEr),e(mc,FEr),e(tr,TEr),e(tr,tx),e(tx,MEr),e(tx,PTe),e(PTe,EEr),e(tx,CEr),e(tr,wEr),e(tr,Pt),M(ax,Pt,null),e(Pt,AEr),e(Pt,BTe),e(BTe,LEr),e(Pt,yEr),e(Pt,gc),e(gc,xEr),e(gc,NTe),e(NTe,$Er),e(gc,kEr),e(gc,qJ),e(qJ,SEr),e(gc,REr),e(Pt,PEr),M(X8,Pt,null),e(tr,BEr),e(tr,kr),M(nx,kr,null),e(kr,NEr),e(kr,ITe),e(ITe,IEr),e(kr,qEr),e(kr,dn),e(dn,jEr),e(dn,qTe),e(qTe,DEr),e(dn,GEr),e(dn,jTe),e(jTe,OEr),e(dn,VEr),e(dn,DTe),e(DTe,XEr),e(dn,zEr),e(kr,QEr),e(kr,Me),e(Me,z8),e(z8,GTe),e(GTe,WEr),e(z8,HEr),e(z8,jJ),e(jJ,UEr),e(z8,JEr),e(Me,YEr),e(Me,Q8),e(Q8,OTe),e(OTe,KEr),e(Q8,ZEr),e(Q8,DJ),e(DJ,eCr),e(Q8,oCr),e(Me,rCr),e(Me,W8),e(W8,VTe),e(VTe,tCr),e(W8,aCr),e(W8,GJ),e(GJ,nCr),e(W8,sCr),e(Me,lCr),e(Me,H8),e(H8,XTe),e(XTe,iCr),e(H8,dCr),e(H8,OJ),e(OJ,cCr),e(H8,fCr),e(Me,mCr),e(Me,U8),e(U8,zTe),e(zTe,gCr),e(U8,hCr),e(U8,VJ),e(VJ,pCr),e(U8,_Cr),e(Me,uCr),e(Me,J8),e(J8,QTe),e(QTe,bCr),e(J8,vCr),e(J8,XJ),e(XJ,FCr),e(J8,TCr),e(Me,MCr),e(Me,Y8),e(Y8,WTe),e(WTe,ECr),e(Y8,CCr),e(Y8,zJ),e(zJ,wCr),e(Y8,ACr),e(Me,LCr),e(Me,K8),e(K8,HTe),e(HTe,yCr),e(K8,xCr),e(K8,QJ),e(QJ,$Cr),e(K8,kCr),e(Me,SCr),e(Me,Z8),e(Z8,UTe),e(UTe,RCr),e(Z8,PCr),e(Z8,WJ),e(WJ,BCr),e(Z8,NCr),e(Me,ICr),e(Me,eM),e(eM,JTe),e(JTe,qCr),e(eM,jCr),e(eM,HJ),e(HJ,DCr),e(eM,GCr),e(Me,OCr),e(Me,oM),e(oM,YTe),e(YTe,VCr),e(oM,XCr),e(oM,UJ),e(UJ,zCr),e(oM,QCr),e(Me,WCr),e(Me,rM),e(rM,KTe),e(KTe,HCr),e(rM,UCr),e(rM,JJ),e(JJ,JCr),e(rM,YCr),e(Me,KCr),e(Me,tM),e(tM,ZTe),e(ZTe,ZCr),e(tM,e3r),e(tM,YJ),e(YJ,o3r),e(tM,r3r),e(kr,t3r),M(aM,kr,null),b(f,gze,u),b(f,hc,u),e(hc,nM),e(nM,e7e),M(sx,e7e,null),e(hc,a3r),e(hc,o7e),e(o7e,n3r),b(f,hze,u),b(f,ar,u),M(lx,ar,null),e(ar,s3r),e(ar,pc),e(pc,l3r),e(pc,KJ),e(KJ,i3r),e(pc,d3r),e(pc,ZJ),e(ZJ,c3r),e(pc,f3r),e(ar,m3r),e(ar,ix),e(ix,g3r),e(ix,r7e),e(r7e,h3r),e(ix,p3r),e(ar,_3r),e(ar,Bt),M(dx,Bt,null),e(Bt,u3r),e(Bt,t7e),e(t7e,b3r),e(Bt,v3r),e(Bt,_c),e(_c,F3r),e(_c,a7e),e(a7e,T3r),e(_c,M3r),e(_c,eY),e(eY,E3r),e(_c,C3r),e(Bt,w3r),M(sM,Bt,null),e(ar,A3r),e(ar,Sr),M(cx,Sr,null),e(Sr,L3r),e(Sr,n7e),e(n7e,y3r),e(Sr,x3r),e(Sr,cn),e(cn,$3r),e(cn,s7e),e(s7e,k3r),e(cn,S3r),e(cn,l7e),e(l7e,R3r),e(cn,P3r),e(cn,i7e),e(i7e,B3r),e(cn,N3r),e(Sr,I3r),e(Sr,tt),e(tt,lM),e(lM,d7e),e(d7e,q3r),e(lM,j3r),e(lM,oY),e(oY,D3r),e(lM,G3r),e(tt,O3r),e(tt,iM),e(iM,c7e),e(c7e,V3r),e(iM,X3r),e(iM,rY),e(rY,z3r),e(iM,Q3r),e(tt,W3r),e(tt,dM),e(dM,f7e),e(f7e,H3r),e(dM,U3r),e(dM,tY),e(tY,J3r),e(dM,Y3r),e(tt,K3r),e(tt,cM),e(cM,m7e),e(m7e,Z3r),e(cM,e0r),e(cM,aY),e(aY,o0r),e(cM,r0r),e(tt,t0r),e(tt,fM),e(fM,g7e),e(g7e,a0r),e(fM,n0r),e(fM,nY),e(nY,s0r),e(fM,l0r),e(Sr,i0r),M(mM,Sr,null),b(f,pze,u),b(f,uc,u),e(uc,gM),e(gM,h7e),M(fx,h7e,null),e(uc,d0r),e(uc,p7e),e(p7e,c0r),b(f,_ze,u),b(f,nr,u),M(mx,nr,null),e(nr,f0r),e(nr,bc),e(bc,m0r),e(bc,sY),e(sY,g0r),e(bc,h0r),e(bc,lY),e(lY,p0r),e(bc,_0r),e(nr,u0r),e(nr,gx),e(gx,b0r),e(gx,_7e),e(_7e,v0r),e(gx,F0r),e(nr,T0r),e(nr,Nt),M(hx,Nt,null),e(Nt,M0r),e(Nt,u7e),e(u7e,E0r),e(Nt,C0r),e(Nt,vc),e(vc,w0r),e(vc,b7e),e(b7e,A0r),e(vc,L0r),e(vc,iY),e(iY,y0r),e(vc,x0r),e(Nt,$0r),M(hM,Nt,null),e(nr,k0r),e(nr,Rr),M(px,Rr,null),e(Rr,S0r),e(Rr,v7e),e(v7e,R0r),e(Rr,P0r),e(Rr,fn),e(fn,B0r),e(fn,F7e),e(F7e,N0r),e(fn,I0r),e(fn,T7e),e(T7e,q0r),e(fn,j0r),e(fn,M7e),e(M7e,D0r),e(fn,G0r),e(Rr,O0r),e(Rr,ie),e(ie,pM),e(pM,E7e),e(E7e,V0r),e(pM,X0r),e(pM,dY),e(dY,z0r),e(pM,Q0r),e(ie,W0r),e(ie,_M),e(_M,C7e),e(C7e,H0r),e(_M,U0r),e(_M,cY),e(cY,J0r),e(_M,Y0r),e(ie,K0r),e(ie,uM),e(uM,w7e),e(w7e,Z0r),e(uM,ewr),e(uM,fY),e(fY,owr),e(uM,rwr),e(ie,twr),e(ie,bM),e(bM,A7e),e(A7e,awr),e(bM,nwr),e(bM,mY),e(mY,swr),e(bM,lwr),e(ie,iwr),e(ie,vM),e(vM,L7e),e(L7e,dwr),e(vM,cwr),e(vM,gY),e(gY,fwr),e(vM,mwr),e(ie,gwr),e(ie,FM),e(FM,y7e),e(y7e,hwr),e(FM,pwr),e(FM,hY),e(hY,_wr),e(FM,uwr),e(ie,bwr),e(ie,TM),e(TM,x7e),e(x7e,vwr),e(TM,Fwr),e(TM,pY),e(pY,Twr),e(TM,Mwr),e(ie,Ewr),e(ie,MM),e(MM,$7e),e($7e,Cwr),e(MM,wwr),e(MM,_Y),e(_Y,Awr),e(MM,Lwr),e(ie,ywr),e(ie,EM),e(EM,k7e),e(k7e,xwr),e(EM,$wr),e(EM,uY),e(uY,kwr),e(EM,Swr),e(ie,Rwr),e(ie,CM),e(CM,S7e),e(S7e,Pwr),e(CM,Bwr),e(CM,bY),e(bY,Nwr),e(CM,Iwr),e(ie,qwr),e(ie,wM),e(wM,R7e),e(R7e,jwr),e(wM,Dwr),e(wM,vY),e(vY,Gwr),e(wM,Owr),e(ie,Vwr),e(ie,AM),e(AM,P7e),e(P7e,Xwr),e(AM,zwr),e(AM,FY),e(FY,Qwr),e(AM,Wwr),e(ie,Hwr),e(ie,LM),e(LM,B7e),e(B7e,Uwr),e(LM,Jwr),e(LM,TY),e(TY,Ywr),e(LM,Kwr),e(ie,Zwr),e(ie,yM),e(yM,N7e),e(N7e,eAr),e(yM,oAr),e(yM,MY),e(MY,rAr),e(yM,tAr),e(ie,aAr),e(ie,xM),e(xM,I7e),e(I7e,nAr),e(xM,sAr),e(xM,EY),e(EY,lAr),e(xM,iAr),e(ie,dAr),e(ie,$M),e($M,q7e),e(q7e,cAr),e($M,fAr),e($M,CY),e(CY,mAr),e($M,gAr),e(ie,hAr),e(ie,kM),e(kM,j7e),e(j7e,pAr),e(kM,_Ar),e(kM,wY),e(wY,uAr),e(kM,bAr),e(ie,vAr),e(ie,SM),e(SM,D7e),e(D7e,FAr),e(SM,TAr),e(SM,AY),e(AY,MAr),e(SM,EAr),e(ie,CAr),e(ie,RM),e(RM,G7e),e(G7e,wAr),e(RM,AAr),e(RM,LY),e(LY,LAr),e(RM,yAr),e(ie,xAr),e(ie,PM),e(PM,O7e),e(O7e,$Ar),e(PM,kAr),e(PM,yY),e(yY,SAr),e(PM,RAr),e(Rr,PAr),M(BM,Rr,null),b(f,uze,u),b(f,Fc,u),e(Fc,NM),e(NM,V7e),M(_x,V7e,null),e(Fc,BAr),e(Fc,X7e),e(X7e,NAr),b(f,bze,u),b(f,sr,u),M(ux,sr,null),e(sr,IAr),e(sr,Tc),e(Tc,qAr),e(Tc,xY),e(xY,jAr),e(Tc,DAr),e(Tc,$Y),e($Y,GAr),e(Tc,OAr),e(sr,VAr),e(sr,bx),e(bx,XAr),e(bx,z7e),e(z7e,zAr),e(bx,QAr),e(sr,WAr),e(sr,It),M(vx,It,null),e(It,HAr),e(It,Q7e),e(Q7e,UAr),e(It,JAr),e(It,Mc),e(Mc,YAr),e(Mc,W7e),e(W7e,KAr),e(Mc,ZAr),e(Mc,kY),e(kY,e6r),e(Mc,o6r),e(It,r6r),M(IM,It,null),e(sr,t6r),e(sr,Pr),M(Fx,Pr,null),e(Pr,a6r),e(Pr,H7e),e(H7e,n6r),e(Pr,s6r),e(Pr,mn),e(mn,l6r),e(mn,U7e),e(U7e,i6r),e(mn,d6r),e(mn,J7e),e(J7e,c6r),e(mn,f6r),e(mn,Y7e),e(Y7e,m6r),e(mn,g6r),e(Pr,h6r),e(Pr,ye),e(ye,qM),e(qM,K7e),e(K7e,p6r),e(qM,_6r),e(qM,SY),e(SY,u6r),e(qM,b6r),e(ye,v6r),e(ye,jM),e(jM,Z7e),e(Z7e,F6r),e(jM,T6r),e(jM,RY),e(RY,M6r),e(jM,E6r),e(ye,C6r),e(ye,DM),e(DM,e8e),e(e8e,w6r),e(DM,A6r),e(DM,PY),e(PY,L6r),e(DM,y6r),e(ye,x6r),e(ye,GM),e(GM,o8e),e(o8e,$6r),e(GM,k6r),e(GM,BY),e(BY,S6r),e(GM,R6r),e(ye,P6r),e(ye,OM),e(OM,r8e),e(r8e,B6r),e(OM,N6r),e(OM,NY),e(NY,I6r),e(OM,q6r),e(ye,j6r),e(ye,VM),e(VM,t8e),e(t8e,D6r),e(VM,G6r),e(VM,IY),e(IY,O6r),e(VM,V6r),e(ye,X6r),e(ye,XM),e(XM,a8e),e(a8e,z6r),e(XM,Q6r),e(XM,qY),e(qY,W6r),e(XM,H6r),e(ye,U6r),e(ye,zM),e(zM,n8e),e(n8e,J6r),e(zM,Y6r),e(zM,jY),e(jY,K6r),e(zM,Z6r),e(ye,eLr),e(ye,QM),e(QM,s8e),e(s8e,oLr),e(QM,rLr),e(QM,DY),e(DY,tLr),e(QM,aLr),e(ye,nLr),e(ye,WM),e(WM,l8e),e(l8e,sLr),e(WM,lLr),e(WM,GY),e(GY,iLr),e(WM,dLr),e(Pr,cLr),M(HM,Pr,null),b(f,vze,u),b(f,Ec,u),e(Ec,UM),e(UM,i8e),M(Tx,i8e,null),e(Ec,fLr),e(Ec,d8e),e(d8e,mLr),b(f,Fze,u),b(f,lr,u),M(Mx,lr,null),e(lr,gLr),e(lr,Cc),e(Cc,hLr),e(Cc,OY),e(OY,pLr),e(Cc,_Lr),e(Cc,VY),e(VY,uLr),e(Cc,bLr),e(lr,vLr),e(lr,Ex),e(Ex,FLr),e(Ex,c8e),e(c8e,TLr),e(Ex,MLr),e(lr,ELr),e(lr,qt),M(Cx,qt,null),e(qt,CLr),e(qt,f8e),e(f8e,wLr),e(qt,ALr),e(qt,wc),e(wc,LLr),e(wc,m8e),e(m8e,yLr),e(wc,xLr),e(wc,XY),e(XY,$Lr),e(wc,kLr),e(qt,SLr),M(JM,qt,null),e(lr,RLr),e(lr,Br),M(wx,Br,null),e(Br,PLr),e(Br,g8e),e(g8e,BLr),e(Br,NLr),e(Br,gn),e(gn,ILr),e(gn,h8e),e(h8e,qLr),e(gn,jLr),e(gn,p8e),e(p8e,DLr),e(gn,GLr),e(gn,_8e),e(_8e,OLr),e(gn,VLr),e(Br,XLr),e(Br,te),e(te,YM),e(YM,u8e),e(u8e,zLr),e(YM,QLr),e(YM,zY),e(zY,WLr),e(YM,HLr),e(te,ULr),e(te,KM),e(KM,b8e),e(b8e,JLr),e(KM,YLr),e(KM,QY),e(QY,KLr),e(KM,ZLr),e(te,eyr),e(te,ZM),e(ZM,v8e),e(v8e,oyr),e(ZM,ryr),e(ZM,WY),e(WY,tyr),e(ZM,ayr),e(te,nyr),e(te,eE),e(eE,F8e),e(F8e,syr),e(eE,lyr),e(eE,HY),e(HY,iyr),e(eE,dyr),e(te,cyr),e(te,oE),e(oE,T8e),e(T8e,fyr),e(oE,myr),e(oE,UY),e(UY,gyr),e(oE,hyr),e(te,pyr),e(te,rE),e(rE,M8e),e(M8e,_yr),e(rE,uyr),e(rE,JY),e(JY,byr),e(rE,vyr),e(te,Fyr),e(te,tE),e(tE,E8e),e(E8e,Tyr),e(tE,Myr),e(tE,YY),e(YY,Eyr),e(tE,Cyr),e(te,wyr),e(te,aE),e(aE,C8e),e(C8e,Ayr),e(aE,Lyr),e(aE,KY),e(KY,yyr),e(aE,xyr),e(te,$yr),e(te,nE),e(nE,w8e),e(w8e,kyr),e(nE,Syr),e(nE,ZY),e(ZY,Ryr),e(nE,Pyr),e(te,Byr),e(te,sE),e(sE,A8e),e(A8e,Nyr),e(sE,Iyr),e(sE,eK),e(eK,qyr),e(sE,jyr),e(te,Dyr),e(te,lE),e(lE,L8e),e(L8e,Gyr),e(lE,Oyr),e(lE,oK),e(oK,Vyr),e(lE,Xyr),e(te,zyr),e(te,iE),e(iE,y8e),e(y8e,Qyr),e(iE,Wyr),e(iE,rK),e(rK,Hyr),e(iE,Uyr),e(te,Jyr),e(te,dE),e(dE,x8e),e(x8e,Yyr),e(dE,Kyr),e(dE,tK),e(tK,Zyr),e(dE,e9r),e(te,o9r),e(te,cE),e(cE,$8e),e($8e,r9r),e(cE,t9r),e(cE,aK),e(aK,a9r),e(cE,n9r),e(te,s9r),e(te,fE),e(fE,k8e),e(k8e,l9r),e(fE,i9r),e(fE,nK),e(nK,d9r),e(fE,c9r),e(te,f9r),e(te,mE),e(mE,S8e),e(S8e,m9r),e(mE,g9r),e(mE,sK),e(sK,h9r),e(mE,p9r),e(te,_9r),e(te,gE),e(gE,R8e),e(R8e,u9r),e(gE,b9r),e(gE,lK),e(lK,v9r),e(gE,F9r),e(te,T9r),e(te,hE),e(hE,P8e),e(P8e,M9r),e(hE,E9r),e(hE,iK),e(iK,C9r),e(hE,w9r),e(te,A9r),e(te,pE),e(pE,B8e),e(B8e,L9r),e(pE,y9r),e(pE,dK),e(dK,x9r),e(pE,$9r),e(te,k9r),e(te,_E),e(_E,N8e),e(N8e,S9r),e(_E,R9r),e(_E,cK),e(cK,P9r),e(_E,B9r),e(te,N9r),e(te,uE),e(uE,I8e),e(I8e,I9r),e(uE,q9r),e(uE,fK),e(fK,j9r),e(uE,D9r),e(te,G9r),e(te,bE),e(bE,q8e),e(q8e,O9r),e(bE,V9r),e(bE,mK),e(mK,X9r),e(bE,z9r),e(te,Q9r),e(te,vE),e(vE,j8e),e(j8e,W9r),e(vE,H9r),e(vE,gK),e(gK,U9r),e(vE,J9r),e(te,Y9r),e(te,FE),e(FE,D8e),e(D8e,K9r),e(FE,Z9r),e(FE,hK),e(hK,exr),e(FE,oxr),e(te,rxr),e(te,TE),e(TE,G8e),e(G8e,txr),e(TE,axr),e(TE,pK),e(pK,nxr),e(TE,sxr),e(te,lxr),e(te,ME),e(ME,O8e),e(O8e,ixr),e(ME,dxr),e(ME,_K),e(_K,cxr),e(ME,fxr),e(Br,mxr),M(EE,Br,null),b(f,Tze,u),b(f,Ac,u),e(Ac,CE),e(CE,V8e),M(Ax,V8e,null),e(Ac,gxr),e(Ac,X8e),e(X8e,hxr),b(f,Mze,u),b(f,ir,u),M(Lx,ir,null),e(ir,pxr),e(ir,Lc),e(Lc,_xr),e(Lc,uK),e(uK,uxr),e(Lc,bxr),e(Lc,bK),e(bK,vxr),e(Lc,Fxr),e(ir,Txr),e(ir,yx),e(yx,Mxr),e(yx,z8e),e(z8e,Exr),e(yx,Cxr),e(ir,wxr),e(ir,jt),M(xx,jt,null),e(jt,Axr),e(jt,Q8e),e(Q8e,Lxr),e(jt,yxr),e(jt,yc),e(yc,xxr),e(yc,W8e),e(W8e,$xr),e(yc,kxr),e(yc,vK),e(vK,Sxr),e(yc,Rxr),e(jt,Pxr),M(wE,jt,null),e(ir,Bxr),e(ir,Nr),M($x,Nr,null),e(Nr,Nxr),e(Nr,H8e),e(H8e,Ixr),e(Nr,qxr),e(Nr,hn),e(hn,jxr),e(hn,U8e),e(U8e,Dxr),e(hn,Gxr),e(hn,J8e),e(J8e,Oxr),e(hn,Vxr),e(hn,Y8e),e(Y8e,Xxr),e(hn,zxr),e(Nr,Qxr),e(Nr,ue),e(ue,AE),e(AE,K8e),e(K8e,Wxr),e(AE,Hxr),e(AE,FK),e(FK,Uxr),e(AE,Jxr),e(ue,Yxr),e(ue,LE),e(LE,Z8e),e(Z8e,Kxr),e(LE,Zxr),e(LE,TK),e(TK,e$r),e(LE,o$r),e(ue,r$r),e(ue,yE),e(yE,eMe),e(eMe,t$r),e(yE,a$r),e(yE,MK),e(MK,n$r),e(yE,s$r),e(ue,l$r),e(ue,xE),e(xE,oMe),e(oMe,i$r),e(xE,d$r),e(xE,EK),e(EK,c$r),e(xE,f$r),e(ue,m$r),e(ue,$E),e($E,rMe),e(rMe,g$r),e($E,h$r),e($E,CK),e(CK,p$r),e($E,_$r),e(ue,u$r),e(ue,kE),e(kE,tMe),e(tMe,b$r),e(kE,v$r),e(kE,wK),e(wK,F$r),e(kE,T$r),e(ue,M$r),e(ue,SE),e(SE,aMe),e(aMe,E$r),e(SE,C$r),e(SE,AK),e(AK,w$r),e(SE,A$r),e(ue,L$r),e(ue,RE),e(RE,nMe),e(nMe,y$r),e(RE,x$r),e(RE,LK),e(LK,$$r),e(RE,k$r),e(ue,S$r),e(ue,PE),e(PE,sMe),e(sMe,R$r),e(PE,P$r),e(PE,yK),e(yK,B$r),e(PE,N$r),e(ue,I$r),e(ue,BE),e(BE,lMe),e(lMe,q$r),e(BE,j$r),e(BE,xK),e(xK,D$r),e(BE,G$r),e(ue,O$r),e(ue,NE),e(NE,iMe),e(iMe,V$r),e(NE,X$r),e(NE,$K),e($K,z$r),e(NE,Q$r),e(ue,W$r),e(ue,IE),e(IE,dMe),e(dMe,H$r),e(IE,U$r),e(IE,kK),e(kK,J$r),e(IE,Y$r),e(ue,K$r),e(ue,qE),e(qE,cMe),e(cMe,Z$r),e(qE,ekr),e(qE,SK),e(SK,okr),e(qE,rkr),e(ue,tkr),e(ue,jE),e(jE,fMe),e(fMe,akr),e(jE,nkr),e(jE,RK),e(RK,skr),e(jE,lkr),e(ue,ikr),e(ue,DE),e(DE,mMe),e(mMe,dkr),e(DE,ckr),e(DE,PK),e(PK,fkr),e(DE,mkr),e(ue,gkr),e(ue,GE),e(GE,gMe),e(gMe,hkr),e(GE,pkr),e(GE,BK),e(BK,_kr),e(GE,ukr),e(ue,bkr),e(ue,OE),e(OE,hMe),e(hMe,vkr),e(OE,Fkr),e(OE,NK),e(NK,Tkr),e(OE,Mkr),e(Nr,Ekr),M(VE,Nr,null),b(f,Eze,u),b(f,xc,u),e(xc,XE),e(XE,pMe),M(kx,pMe,null),e(xc,Ckr),e(xc,_Me),e(_Me,wkr),b(f,Cze,u),b(f,dr,u),M(Sx,dr,null),e(dr,Akr),e(dr,$c),e($c,Lkr),e($c,IK),e(IK,ykr),e($c,xkr),e($c,qK),e(qK,$kr),e($c,kkr),e(dr,Skr),e(dr,Rx),e(Rx,Rkr),e(Rx,uMe),e(uMe,Pkr),e(Rx,Bkr),e(dr,Nkr),e(dr,Dt),M(Px,Dt,null),e(Dt,Ikr),e(Dt,bMe),e(bMe,qkr),e(Dt,jkr),e(Dt,kc),e(kc,Dkr),e(kc,vMe),e(vMe,Gkr),e(kc,Okr),e(kc,jK),e(jK,Vkr),e(kc,Xkr),e(Dt,zkr),M(zE,Dt,null),e(dr,Qkr),e(dr,Ir),M(Bx,Ir,null),e(Ir,Wkr),e(Ir,FMe),e(FMe,Hkr),e(Ir,Ukr),e(Ir,pn),e(pn,Jkr),e(pn,TMe),e(TMe,Ykr),e(pn,Kkr),e(pn,MMe),e(MMe,Zkr),e(pn,eSr),e(pn,EMe),e(EMe,oSr),e(pn,rSr),e(Ir,tSr),e(Ir,Nx),e(Nx,QE),e(QE,CMe),e(CMe,aSr),e(QE,nSr),e(QE,DK),e(DK,sSr),e(QE,lSr),e(Nx,iSr),e(Nx,WE),e(WE,wMe),e(wMe,dSr),e(WE,cSr),e(WE,GK),e(GK,fSr),e(WE,mSr),e(Ir,gSr),M(HE,Ir,null),b(f,wze,u),b(f,Sc,u),e(Sc,UE),e(UE,AMe),M(Ix,AMe,null),e(Sc,hSr),e(Sc,LMe),e(LMe,pSr),b(f,Aze,u),b(f,cr,u),M(qx,cr,null),e(cr,_Sr),e(cr,Rc),e(Rc,uSr),e(Rc,OK),e(OK,bSr),e(Rc,vSr),e(Rc,VK),e(VK,FSr),e(Rc,TSr),e(cr,MSr),e(cr,jx),e(jx,ESr),e(jx,yMe),e(yMe,CSr),e(jx,wSr),e(cr,ASr),e(cr,Gt),M(Dx,Gt,null),e(Gt,LSr),e(Gt,xMe),e(xMe,ySr),e(Gt,xSr),e(Gt,Pc),e(Pc,$Sr),e(Pc,$Me),e($Me,kSr),e(Pc,SSr),e(Pc,XK),e(XK,RSr),e(Pc,PSr),e(Gt,BSr),M(JE,Gt,null),e(cr,NSr),e(cr,qr),M(Gx,qr,null),e(qr,ISr),e(qr,kMe),e(kMe,qSr),e(qr,jSr),e(qr,_n),e(_n,DSr),e(_n,SMe),e(SMe,GSr),e(_n,OSr),e(_n,RMe),e(RMe,VSr),e(_n,XSr),e(_n,PMe),e(PMe,zSr),e(_n,QSr),e(qr,WSr),e(qr,BMe),e(BMe,YE),e(YE,NMe),e(NMe,HSr),e(YE,USr),e(YE,zK),e(zK,JSr),e(YE,YSr),e(qr,KSr),M(KE,qr,null),b(f,Lze,u),b(f,Bc,u),e(Bc,ZE),e(ZE,IMe),M(Ox,IMe,null),e(Bc,ZSr),e(Bc,qMe),e(qMe,eRr),b(f,yze,u),b(f,fr,u),M(Vx,fr,null),e(fr,oRr),e(fr,Nc),e(Nc,rRr),e(Nc,QK),e(QK,tRr),e(Nc,aRr),e(Nc,WK),e(WK,nRr),e(Nc,sRr),e(fr,lRr),e(fr,Xx),e(Xx,iRr),e(Xx,jMe),e(jMe,dRr),e(Xx,cRr),e(fr,fRr),e(fr,Ot),M(zx,Ot,null),e(Ot,mRr),e(Ot,DMe),e(DMe,gRr),e(Ot,hRr),e(Ot,Ic),e(Ic,pRr),e(Ic,GMe),e(GMe,_Rr),e(Ic,uRr),e(Ic,HK),e(HK,bRr),e(Ic,vRr),e(Ot,FRr),M(eC,Ot,null),e(fr,TRr),e(fr,jr),M(Qx,jr,null),e(jr,MRr),e(jr,OMe),e(OMe,ERr),e(jr,CRr),e(jr,un),e(un,wRr),e(un,VMe),e(VMe,ARr),e(un,LRr),e(un,XMe),e(XMe,yRr),e(un,xRr),e(un,zMe),e(zMe,$Rr),e(un,kRr),e(jr,SRr),e(jr,de),e(de,oC),e(oC,QMe),e(QMe,RRr),e(oC,PRr),e(oC,UK),e(UK,BRr),e(oC,NRr),e(de,IRr),e(de,rC),e(rC,WMe),e(WMe,qRr),e(rC,jRr),e(rC,JK),e(JK,DRr),e(rC,GRr),e(de,ORr),e(de,tC),e(tC,HMe),e(HMe,VRr),e(tC,XRr),e(tC,YK),e(YK,zRr),e(tC,QRr),e(de,WRr),e(de,aC),e(aC,UMe),e(UMe,HRr),e(aC,URr),e(aC,KK),e(KK,JRr),e(aC,YRr),e(de,KRr),e(de,nC),e(nC,JMe),e(JMe,ZRr),e(nC,ePr),e(nC,ZK),e(ZK,oPr),e(nC,rPr),e(de,tPr),e(de,sC),e(sC,YMe),e(YMe,aPr),e(sC,nPr),e(sC,eZ),e(eZ,sPr),e(sC,lPr),e(de,iPr),e(de,lC),e(lC,KMe),e(KMe,dPr),e(lC,cPr),e(lC,oZ),e(oZ,fPr),e(lC,mPr),e(de,gPr),e(de,iC),e(iC,ZMe),e(ZMe,hPr),e(iC,pPr),e(iC,rZ),e(rZ,_Pr),e(iC,uPr),e(de,bPr),e(de,dC),e(dC,eEe),e(eEe,vPr),e(dC,FPr),e(dC,tZ),e(tZ,TPr),e(dC,MPr),e(de,EPr),e(de,cC),e(cC,oEe),e(oEe,CPr),e(cC,wPr),e(cC,aZ),e(aZ,APr),e(cC,LPr),e(de,yPr),e(de,fC),e(fC,rEe),e(rEe,xPr),e(fC,$Pr),e(fC,nZ),e(nZ,kPr),e(fC,SPr),e(de,RPr),e(de,mC),e(mC,tEe),e(tEe,PPr),e(mC,BPr),e(mC,sZ),e(sZ,NPr),e(mC,IPr),e(de,qPr),e(de,gC),e(gC,aEe),e(aEe,jPr),e(gC,DPr),e(gC,lZ),e(lZ,GPr),e(gC,OPr),e(de,VPr),e(de,hC),e(hC,nEe),e(nEe,XPr),e(hC,zPr),e(hC,iZ),e(iZ,QPr),e(hC,WPr),e(de,HPr),e(de,pC),e(pC,sEe),e(sEe,UPr),e(pC,JPr),e(pC,dZ),e(dZ,YPr),e(pC,KPr),e(de,ZPr),e(de,_C),e(_C,lEe),e(lEe,eBr),e(_C,oBr),e(_C,cZ),e(cZ,rBr),e(_C,tBr),e(de,aBr),e(de,uC),e(uC,iEe),e(iEe,nBr),e(uC,sBr),e(uC,fZ),e(fZ,lBr),e(uC,iBr),e(de,dBr),e(de,bC),e(bC,dEe),e(dEe,cBr),e(bC,fBr),e(bC,mZ),e(mZ,mBr),e(bC,gBr),e(de,hBr),e(de,vC),e(vC,cEe),e(cEe,pBr),e(vC,_Br),e(vC,gZ),e(gZ,uBr),e(vC,bBr),e(de,vBr),e(de,FC),e(FC,fEe),e(fEe,FBr),e(FC,TBr),e(FC,hZ),e(hZ,MBr),e(FC,EBr),e(jr,CBr),M(TC,jr,null),b(f,xze,u),b(f,qc,u),e(qc,MC),e(MC,mEe),M(Wx,mEe,null),e(qc,wBr),e(qc,gEe),e(gEe,ABr),b(f,$ze,u),b(f,mr,u),M(Hx,mr,null),e(mr,LBr),e(mr,jc),e(jc,yBr),e(jc,pZ),e(pZ,xBr),e(jc,$Br),e(jc,_Z),e(_Z,kBr),e(jc,SBr),e(mr,RBr),e(mr,Ux),e(Ux,PBr),e(Ux,hEe),e(hEe,BBr),e(Ux,NBr),e(mr,IBr),e(mr,Vt),M(Jx,Vt,null),e(Vt,qBr),e(Vt,pEe),e(pEe,jBr),e(Vt,DBr),e(Vt,Dc),e(Dc,GBr),e(Dc,_Ee),e(_Ee,OBr),e(Dc,VBr),e(Dc,uZ),e(uZ,XBr),e(Dc,zBr),e(Vt,QBr),M(EC,Vt,null),e(mr,WBr),e(mr,Dr),M(Yx,Dr,null),e(Dr,HBr),e(Dr,uEe),e(uEe,UBr),e(Dr,JBr),e(Dr,bn),e(bn,YBr),e(bn,bEe),e(bEe,KBr),e(bn,ZBr),e(bn,vEe),e(vEe,eNr),e(bn,oNr),e(bn,FEe),e(FEe,rNr),e(bn,tNr),e(Dr,aNr),e(Dr,ce),e(ce,CC),e(CC,TEe),e(TEe,nNr),e(CC,sNr),e(CC,bZ),e(bZ,lNr),e(CC,iNr),e(ce,dNr),e(ce,wC),e(wC,MEe),e(MEe,cNr),e(wC,fNr),e(wC,vZ),e(vZ,mNr),e(wC,gNr),e(ce,hNr),e(ce,AC),e(AC,EEe),e(EEe,pNr),e(AC,_Nr),e(AC,FZ),e(FZ,uNr),e(AC,bNr),e(ce,vNr),e(ce,LC),e(LC,CEe),e(CEe,FNr),e(LC,TNr),e(LC,TZ),e(TZ,MNr),e(LC,ENr),e(ce,CNr),e(ce,yC),e(yC,wEe),e(wEe,wNr),e(yC,ANr),e(yC,MZ),e(MZ,LNr),e(yC,yNr),e(ce,xNr),e(ce,xC),e(xC,AEe),e(AEe,$Nr),e(xC,kNr),e(xC,EZ),e(EZ,SNr),e(xC,RNr),e(ce,PNr),e(ce,$C),e($C,LEe),e(LEe,BNr),e($C,NNr),e($C,CZ),e(CZ,INr),e($C,qNr),e(ce,jNr),e(ce,kC),e(kC,yEe),e(yEe,DNr),e(kC,GNr),e(kC,wZ),e(wZ,ONr),e(kC,VNr),e(ce,XNr),e(ce,SC),e(SC,xEe),e(xEe,zNr),e(SC,QNr),e(SC,AZ),e(AZ,WNr),e(SC,HNr),e(ce,UNr),e(ce,RC),e(RC,$Ee),e($Ee,JNr),e(RC,YNr),e(RC,LZ),e(LZ,KNr),e(RC,ZNr),e(ce,eIr),e(ce,PC),e(PC,kEe),e(kEe,oIr),e(PC,rIr),e(PC,yZ),e(yZ,tIr),e(PC,aIr),e(ce,nIr),e(ce,BC),e(BC,SEe),e(SEe,sIr),e(BC,lIr),e(BC,xZ),e(xZ,iIr),e(BC,dIr),e(ce,cIr),e(ce,NC),e(NC,REe),e(REe,fIr),e(NC,mIr),e(NC,$Z),e($Z,gIr),e(NC,hIr),e(ce,pIr),e(ce,IC),e(IC,PEe),e(PEe,_Ir),e(IC,uIr),e(IC,kZ),e(kZ,bIr),e(IC,vIr),e(ce,FIr),e(ce,qC),e(qC,BEe),e(BEe,TIr),e(qC,MIr),e(qC,SZ),e(SZ,EIr),e(qC,CIr),e(ce,wIr),e(ce,jC),e(jC,NEe),e(NEe,AIr),e(jC,LIr),e(jC,RZ),e(RZ,yIr),e(jC,xIr),e(ce,$Ir),e(ce,DC),e(DC,IEe),e(IEe,kIr),e(DC,SIr),e(DC,PZ),e(PZ,RIr),e(DC,PIr),e(ce,BIr),e(ce,GC),e(GC,qEe),e(qEe,NIr),e(GC,IIr),e(GC,BZ),e(BZ,qIr),e(GC,jIr),e(ce,DIr),e(ce,OC),e(OC,jEe),e(jEe,GIr),e(OC,OIr),e(OC,NZ),e(NZ,VIr),e(OC,XIr),e(ce,zIr),e(ce,VC),e(VC,DEe),e(DEe,QIr),e(VC,WIr),e(VC,IZ),e(IZ,HIr),e(VC,UIr),e(Dr,JIr),M(XC,Dr,null),b(f,kze,u),b(f,Gc,u),e(Gc,zC),e(zC,GEe),M(Kx,GEe,null),e(Gc,YIr),e(Gc,OEe),e(OEe,KIr),b(f,Sze,u),b(f,gr,u),M(Zx,gr,null),e(gr,ZIr),e(gr,Oc),e(Oc,eqr),e(Oc,qZ),e(qZ,oqr),e(Oc,rqr),e(Oc,jZ),e(jZ,tqr),e(Oc,aqr),e(gr,nqr),e(gr,e$),e(e$,sqr),e(e$,VEe),e(VEe,lqr),e(e$,iqr),e(gr,dqr),e(gr,Xt),M(o$,Xt,null),e(Xt,cqr),e(Xt,XEe),e(XEe,fqr),e(Xt,mqr),e(Xt,Vc),e(Vc,gqr),e(Vc,zEe),e(zEe,hqr),e(Vc,pqr),e(Vc,DZ),e(DZ,_qr),e(Vc,uqr),e(Xt,bqr),M(QC,Xt,null),e(gr,vqr),e(gr,Gr),M(r$,Gr,null),e(Gr,Fqr),e(Gr,QEe),e(QEe,Tqr),e(Gr,Mqr),e(Gr,vn),e(vn,Eqr),e(vn,WEe),e(WEe,Cqr),e(vn,wqr),e(vn,HEe),e(HEe,Aqr),e(vn,Lqr),e(vn,UEe),e(UEe,yqr),e(vn,xqr),e(Gr,$qr),e(Gr,JEe),e(JEe,WC),e(WC,YEe),e(YEe,kqr),e(WC,Sqr),e(WC,GZ),e(GZ,Rqr),e(WC,Pqr),e(Gr,Bqr),M(HC,Gr,null),b(f,Rze,u),b(f,Xc,u),e(Xc,UC),e(UC,KEe),M(t$,KEe,null),e(Xc,Nqr),e(Xc,ZEe),e(ZEe,Iqr),b(f,Pze,u),b(f,hr,u),M(a$,hr,null),e(hr,qqr),e(hr,zc),e(zc,jqr),e(zc,OZ),e(OZ,Dqr),e(zc,Gqr),e(zc,VZ),e(VZ,Oqr),e(zc,Vqr),e(hr,Xqr),e(hr,n$),e(n$,zqr),e(n$,eCe),e(eCe,Qqr),e(n$,Wqr),e(hr,Hqr),e(hr,zt),M(s$,zt,null),e(zt,Uqr),e(zt,oCe),e(oCe,Jqr),e(zt,Yqr),e(zt,Qc),e(Qc,Kqr),e(Qc,rCe),e(rCe,Zqr),e(Qc,ejr),e(Qc,XZ),e(XZ,ojr),e(Qc,rjr),e(zt,tjr),M(JC,zt,null),e(hr,ajr),e(hr,Or),M(l$,Or,null),e(Or,njr),e(Or,tCe),e(tCe,sjr),e(Or,ljr),e(Or,Fn),e(Fn,ijr),e(Fn,aCe),e(aCe,djr),e(Fn,cjr),e(Fn,nCe),e(nCe,fjr),e(Fn,mjr),e(Fn,sCe),e(sCe,gjr),e(Fn,hjr),e(Or,pjr),e(Or,lCe),e(lCe,YC),e(YC,iCe),e(iCe,_jr),e(YC,ujr),e(YC,zZ),e(zZ,bjr),e(YC,vjr),e(Or,Fjr),M(KC,Or,null),b(f,Bze,u),b(f,Wc,u),e(Wc,ZC),e(ZC,dCe),M(i$,dCe,null),e(Wc,Tjr),e(Wc,cCe),e(cCe,Mjr),b(f,Nze,u),b(f,pr,u),M(d$,pr,null),e(pr,Ejr),e(pr,Hc),e(Hc,Cjr),e(Hc,QZ),e(QZ,wjr),e(Hc,Ajr),e(Hc,WZ),e(WZ,Ljr),e(Hc,yjr),e(pr,xjr),e(pr,c$),e(c$,$jr),e(c$,fCe),e(fCe,kjr),e(c$,Sjr),e(pr,Rjr),e(pr,Qt),M(f$,Qt,null),e(Qt,Pjr),e(Qt,mCe),e(mCe,Bjr),e(Qt,Njr),e(Qt,Uc),e(Uc,Ijr),e(Uc,gCe),e(gCe,qjr),e(Uc,jjr),e(Uc,HZ),e(HZ,Djr),e(Uc,Gjr),e(Qt,Ojr),M(e3,Qt,null),e(pr,Vjr),e(pr,Vr),M(m$,Vr,null),e(Vr,Xjr),e(Vr,hCe),e(hCe,zjr),e(Vr,Qjr),e(Vr,Tn),e(Tn,Wjr),e(Tn,pCe),e(pCe,Hjr),e(Tn,Ujr),e(Tn,_Ce),e(_Ce,Jjr),e(Tn,Yjr),e(Tn,uCe),e(uCe,Kjr),e(Tn,Zjr),e(Vr,eDr),e(Vr,oe),e(oe,o3),e(o3,bCe),e(bCe,oDr),e(o3,rDr),e(o3,UZ),e(UZ,tDr),e(o3,aDr),e(oe,nDr),e(oe,r3),e(r3,vCe),e(vCe,sDr),e(r3,lDr),e(r3,JZ),e(JZ,iDr),e(r3,dDr),e(oe,cDr),e(oe,t3),e(t3,FCe),e(FCe,fDr),e(t3,mDr),e(t3,YZ),e(YZ,gDr),e(t3,hDr),e(oe,pDr),e(oe,a3),e(a3,TCe),e(TCe,_Dr),e(a3,uDr),e(a3,KZ),e(KZ,bDr),e(a3,vDr),e(oe,FDr),e(oe,n3),e(n3,MCe),e(MCe,TDr),e(n3,MDr),e(n3,ZZ),e(ZZ,EDr),e(n3,CDr),e(oe,wDr),e(oe,s3),e(s3,ECe),e(ECe,ADr),e(s3,LDr),e(s3,eee),e(eee,yDr),e(s3,xDr),e(oe,$Dr),e(oe,l3),e(l3,CCe),e(CCe,kDr),e(l3,SDr),e(l3,oee),e(oee,RDr),e(l3,PDr),e(oe,BDr),e(oe,i3),e(i3,wCe),e(wCe,NDr),e(i3,IDr),e(i3,ree),e(ree,qDr),e(i3,jDr),e(oe,DDr),e(oe,d3),e(d3,ACe),e(ACe,GDr),e(d3,ODr),e(d3,tee),e(tee,VDr),e(d3,XDr),e(oe,zDr),e(oe,c3),e(c3,LCe),e(LCe,QDr),e(c3,WDr),e(c3,aee),e(aee,HDr),e(c3,UDr),e(oe,JDr),e(oe,f3),e(f3,yCe),e(yCe,YDr),e(f3,KDr),e(f3,nee),e(nee,ZDr),e(f3,eGr),e(oe,oGr),e(oe,m3),e(m3,xCe),e(xCe,rGr),e(m3,tGr),e(m3,see),e(see,aGr),e(m3,nGr),e(oe,sGr),e(oe,g3),e(g3,$Ce),e($Ce,lGr),e(g3,iGr),e(g3,lee),e(lee,dGr),e(g3,cGr),e(oe,fGr),e(oe,h3),e(h3,kCe),e(kCe,mGr),e(h3,gGr),e(h3,iee),e(iee,hGr),e(h3,pGr),e(oe,_Gr),e(oe,p3),e(p3,SCe),e(SCe,uGr),e(p3,bGr),e(p3,dee),e(dee,vGr),e(p3,FGr),e(oe,TGr),e(oe,_3),e(_3,RCe),e(RCe,MGr),e(_3,EGr),e(_3,cee),e(cee,CGr),e(_3,wGr),e(oe,AGr),e(oe,u3),e(u3,PCe),e(PCe,LGr),e(u3,yGr),e(u3,fee),e(fee,xGr),e(u3,$Gr),e(oe,kGr),e(oe,b3),e(b3,BCe),e(BCe,SGr),e(b3,RGr),e(b3,mee),e(mee,PGr),e(b3,BGr),e(oe,NGr),e(oe,v3),e(v3,NCe),e(NCe,IGr),e(v3,qGr),e(v3,gee),e(gee,jGr),e(v3,DGr),e(oe,GGr),e(oe,F3),e(F3,ICe),e(ICe,OGr),e(F3,VGr),e(F3,hee),e(hee,XGr),e(F3,zGr),e(oe,QGr),e(oe,T3),e(T3,qCe),e(qCe,WGr),e(T3,HGr),e(T3,pee),e(pee,UGr),e(T3,JGr),e(oe,YGr),e(oe,M3),e(M3,jCe),e(jCe,KGr),e(M3,ZGr),e(M3,_ee),e(_ee,eOr),e(M3,oOr),e(oe,rOr),e(oe,E3),e(E3,DCe),e(DCe,tOr),e(E3,aOr),e(E3,uee),e(uee,nOr),e(E3,sOr),e(oe,lOr),e(oe,C3),e(C3,GCe),e(GCe,iOr),e(C3,dOr),e(C3,bee),e(bee,cOr),e(C3,fOr),e(oe,mOr),e(oe,w3),e(w3,OCe),e(OCe,gOr),e(w3,hOr),e(w3,vee),e(vee,pOr),e(w3,_Or),e(oe,uOr),e(oe,A3),e(A3,VCe),e(VCe,bOr),e(A3,vOr),e(A3,Fee),e(Fee,FOr),e(A3,TOr),e(oe,MOr),e(oe,L3),e(L3,XCe),e(XCe,EOr),e(L3,COr),e(L3,Tee),e(Tee,wOr),e(L3,AOr),e(Vr,LOr),M(y3,Vr,null),b(f,Ize,u),b(f,Jc,u),e(Jc,x3),e(x3,zCe),M(g$,zCe,null),e(Jc,yOr),e(Jc,QCe),e(QCe,xOr),b(f,qze,u),b(f,_r,u),M(h$,_r,null),e(_r,$Or),e(_r,Yc),e(Yc,kOr),e(Yc,Mee),e(Mee,SOr),e(Yc,ROr),e(Yc,Eee),e(Eee,POr),e(Yc,BOr),e(_r,NOr),e(_r,p$),e(p$,IOr),e(p$,WCe),e(WCe,qOr),e(p$,jOr),e(_r,DOr),e(_r,Wt),M(_$,Wt,null),e(Wt,GOr),e(Wt,HCe),e(HCe,OOr),e(Wt,VOr),e(Wt,Kc),e(Kc,XOr),e(Kc,UCe),e(UCe,zOr),e(Kc,QOr),e(Kc,Cee),e(Cee,WOr),e(Kc,HOr),e(Wt,UOr),M($3,Wt,null),e(_r,JOr),e(_r,Xr),M(u$,Xr,null),e(Xr,YOr),e(Xr,JCe),e(JCe,KOr),e(Xr,ZOr),e(Xr,Mn),e(Mn,eVr),e(Mn,YCe),e(YCe,oVr),e(Mn,rVr),e(Mn,KCe),e(KCe,tVr),e(Mn,aVr),e(Mn,ZCe),e(ZCe,nVr),e(Mn,sVr),e(Xr,lVr),e(Xr,xe),e(xe,k3),e(k3,e3e),e(e3e,iVr),e(k3,dVr),e(k3,wee),e(wee,cVr),e(k3,fVr),e(xe,mVr),e(xe,S3),e(S3,o3e),e(o3e,gVr),e(S3,hVr),e(S3,Aee),e(Aee,pVr),e(S3,_Vr),e(xe,uVr),e(xe,R3),e(R3,r3e),e(r3e,bVr),e(R3,vVr),e(R3,Lee),e(Lee,FVr),e(R3,TVr),e(xe,MVr),e(xe,P3),e(P3,t3e),e(t3e,EVr),e(P3,CVr),e(P3,yee),e(yee,wVr),e(P3,AVr),e(xe,LVr),e(xe,B3),e(B3,a3e),e(a3e,yVr),e(B3,xVr),e(B3,xee),e(xee,$Vr),e(B3,kVr),e(xe,SVr),e(xe,N3),e(N3,n3e),e(n3e,RVr),e(N3,PVr),e(N3,$ee),e($ee,BVr),e(N3,NVr),e(xe,IVr),e(xe,I3),e(I3,s3e),e(s3e,qVr),e(I3,jVr),e(I3,kee),e(kee,DVr),e(I3,GVr),e(xe,OVr),e(xe,q3),e(q3,l3e),e(l3e,VVr),e(q3,XVr),e(q3,See),e(See,zVr),e(q3,QVr),e(xe,WVr),e(xe,j3),e(j3,i3e),e(i3e,HVr),e(j3,UVr),e(j3,Ree),e(Ree,JVr),e(j3,YVr),e(xe,KVr),e(xe,D3),e(D3,d3e),e(d3e,ZVr),e(D3,eXr),e(D3,Pee),e(Pee,oXr),e(D3,rXr),e(Xr,tXr),M(G3,Xr,null),b(f,jze,u),b(f,Zc,u),e(Zc,O3),e(O3,c3e),M(b$,c3e,null),e(Zc,aXr),e(Zc,f3e),e(f3e,nXr),b(f,Dze,u),b(f,ur,u),M(v$,ur,null),e(ur,sXr),e(ur,ef),e(ef,lXr),e(ef,Bee),e(Bee,iXr),e(ef,dXr),e(ef,Nee),e(Nee,cXr),e(ef,fXr),e(ur,mXr),e(ur,F$),e(F$,gXr),e(F$,m3e),e(m3e,hXr),e(F$,pXr),e(ur,_Xr),e(ur,Ht),M(T$,Ht,null),e(Ht,uXr),e(Ht,g3e),e(g3e,bXr),e(Ht,vXr),e(Ht,of),e(of,FXr),e(of,h3e),e(h3e,TXr),e(of,MXr),e(of,Iee),e(Iee,EXr),e(of,CXr),e(Ht,wXr),M(V3,Ht,null),e(ur,AXr),e(ur,zr),M(M$,zr,null),e(zr,LXr),e(zr,p3e),e(p3e,yXr),e(zr,xXr),e(zr,En),e(En,$Xr),e(En,_3e),e(_3e,kXr),e(En,SXr),e(En,u3e),e(u3e,RXr),e(En,PXr),e(En,b3e),e(b3e,BXr),e(En,NXr),e(zr,IXr),e(zr,Ee),e(Ee,X3),e(X3,v3e),e(v3e,qXr),e(X3,jXr),e(X3,qee),e(qee,DXr),e(X3,GXr),e(Ee,OXr),e(Ee,z3),e(z3,F3e),e(F3e,VXr),e(z3,XXr),e(z3,jee),e(jee,zXr),e(z3,QXr),e(Ee,WXr),e(Ee,Q3),e(Q3,T3e),e(T3e,HXr),e(Q3,UXr),e(Q3,Dee),e(Dee,JXr),e(Q3,YXr),e(Ee,KXr),e(Ee,W3),e(W3,M3e),e(M3e,ZXr),e(W3,ezr),e(W3,Gee),e(Gee,ozr),e(W3,rzr),e(Ee,tzr),e(Ee,H3),e(H3,E3e),e(E3e,azr),e(H3,nzr),e(H3,Oee),e(Oee,szr),e(H3,lzr),e(Ee,izr),e(Ee,U3),e(U3,C3e),e(C3e,dzr),e(U3,czr),e(U3,Vee),e(Vee,fzr),e(U3,mzr),e(Ee,gzr),e(Ee,J3),e(J3,w3e),e(w3e,hzr),e(J3,pzr),e(J3,Xee),e(Xee,_zr),e(J3,uzr),e(Ee,bzr),e(Ee,Y3),e(Y3,A3e),e(A3e,vzr),e(Y3,Fzr),e(Y3,zee),e(zee,Tzr),e(Y3,Mzr),e(Ee,Ezr),e(Ee,K3),e(K3,L3e),e(L3e,Czr),e(K3,wzr),e(K3,Qee),e(Qee,Azr),e(K3,Lzr),e(Ee,yzr),e(Ee,Z3),e(Z3,y3e),e(y3e,xzr),e(Z3,$zr),e(Z3,Wee),e(Wee,kzr),e(Z3,Szr),e(Ee,Rzr),e(Ee,e0),e(e0,x3e),e(x3e,Pzr),e(e0,Bzr),e(e0,Hee),e(Hee,Nzr),e(e0,Izr),e(Ee,qzr),e(Ee,o0),e(o0,$3e),e($3e,jzr),e(o0,Dzr),e(o0,Uee),e(Uee,Gzr),e(o0,Ozr),e(Ee,Vzr),e(Ee,r0),e(r0,k3e),e(k3e,Xzr),e(r0,zzr),e(r0,Jee),e(Jee,Qzr),e(r0,Wzr),e(zr,Hzr),M(t0,zr,null),b(f,Gze,u),b(f,rf,u),e(rf,a0),e(a0,S3e),M(E$,S3e,null),e(rf,Uzr),e(rf,R3e),e(R3e,Jzr),b(f,Oze,u),b(f,br,u),M(C$,br,null),e(br,Yzr),e(br,tf),e(tf,Kzr),e(tf,Yee),e(Yee,Zzr),e(tf,eQr),e(tf,Kee),e(Kee,oQr),e(tf,rQr),e(br,tQr),e(br,w$),e(w$,aQr),e(w$,P3e),e(P3e,nQr),e(w$,sQr),e(br,lQr),e(br,Ut),M(A$,Ut,null),e(Ut,iQr),e(Ut,B3e),e(B3e,dQr),e(Ut,cQr),e(Ut,af),e(af,fQr),e(af,N3e),e(N3e,mQr),e(af,gQr),e(af,Zee),e(Zee,hQr),e(af,pQr),e(Ut,_Qr),M(n0,Ut,null),e(br,uQr),e(br,Qr),M(L$,Qr,null),e(Qr,bQr),e(Qr,I3e),e(I3e,vQr),e(Qr,FQr),e(Qr,Cn),e(Cn,TQr),e(Cn,q3e),e(q3e,MQr),e(Cn,EQr),e(Cn,j3e),e(j3e,CQr),e(Cn,wQr),e(Cn,D3e),e(D3e,AQr),e(Cn,LQr),e(Qr,yQr),e(Qr,$e),e($e,s0),e(s0,G3e),e(G3e,xQr),e(s0,$Qr),e(s0,eoe),e(eoe,kQr),e(s0,SQr),e($e,RQr),e($e,l0),e(l0,O3e),e(O3e,PQr),e(l0,BQr),e(l0,ooe),e(ooe,NQr),e(l0,IQr),e($e,qQr),e($e,i0),e(i0,V3e),e(V3e,jQr),e(i0,DQr),e(i0,roe),e(roe,GQr),e(i0,OQr),e($e,VQr),e($e,d0),e(d0,X3e),e(X3e,XQr),e(d0,zQr),e(d0,toe),e(toe,QQr),e(d0,WQr),e($e,HQr),e($e,c0),e(c0,z3e),e(z3e,UQr),e(c0,JQr),e(c0,aoe),e(aoe,YQr),e(c0,KQr),e($e,ZQr),e($e,f0),e(f0,Q3e),e(Q3e,eWr),e(f0,oWr),e(f0,noe),e(noe,rWr),e(f0,tWr),e($e,aWr),e($e,m0),e(m0,W3e),e(W3e,nWr),e(m0,sWr),e(m0,soe),e(soe,lWr),e(m0,iWr),e($e,dWr),e($e,g0),e(g0,H3e),e(H3e,cWr),e(g0,fWr),e(g0,loe),e(loe,mWr),e(g0,gWr),e($e,hWr),e($e,h0),e(h0,U3e),e(U3e,pWr),e(h0,_Wr),e(h0,ioe),e(ioe,uWr),e(h0,bWr),e($e,vWr),e($e,p0),e(p0,J3e),e(J3e,FWr),e(p0,TWr),e(p0,doe),e(doe,MWr),e(p0,EWr),e(Qr,CWr),M(_0,Qr,null),b(f,Vze,u),b(f,nf,u),e(nf,u0),e(u0,Y3e),M(y$,Y3e,null),e(nf,wWr),e(nf,K3e),e(K3e,AWr),b(f,Xze,u),b(f,vr,u),M(x$,vr,null),e(vr,LWr),e(vr,sf),e(sf,yWr),e(sf,coe),e(coe,xWr),e(sf,$Wr),e(sf,foe),e(foe,kWr),e(sf,SWr),e(vr,RWr),e(vr,$$),e($$,PWr),e($$,Z3e),e(Z3e,BWr),e($$,NWr),e(vr,IWr),e(vr,Jt),M(k$,Jt,null),e(Jt,qWr),e(Jt,e0e),e(e0e,jWr),e(Jt,DWr),e(Jt,lf),e(lf,GWr),e(lf,o0e),e(o0e,OWr),e(lf,VWr),e(lf,moe),e(moe,XWr),e(lf,zWr),e(Jt,QWr),M(b0,Jt,null),e(vr,WWr),e(vr,Wr),M(S$,Wr,null),e(Wr,HWr),e(Wr,r0e),e(r0e,UWr),e(Wr,JWr),e(Wr,wn),e(wn,YWr),e(wn,t0e),e(t0e,KWr),e(wn,ZWr),e(wn,a0e),e(a0e,eHr),e(wn,oHr),e(wn,n0e),e(n0e,rHr),e(wn,tHr),e(Wr,aHr),e(Wr,ke),e(ke,v0),e(v0,s0e),e(s0e,nHr),e(v0,sHr),e(v0,goe),e(goe,lHr),e(v0,iHr),e(ke,dHr),e(ke,F0),e(F0,l0e),e(l0e,cHr),e(F0,fHr),e(F0,hoe),e(hoe,mHr),e(F0,gHr),e(ke,hHr),e(ke,T0),e(T0,i0e),e(i0e,pHr),e(T0,_Hr),e(T0,poe),e(poe,uHr),e(T0,bHr),e(ke,vHr),e(ke,M0),e(M0,d0e),e(d0e,FHr),e(M0,THr),e(M0,_oe),e(_oe,MHr),e(M0,EHr),e(ke,CHr),e(ke,E0),e(E0,c0e),e(c0e,wHr),e(E0,AHr),e(E0,uoe),e(uoe,LHr),e(E0,yHr),e(ke,xHr),e(ke,C0),e(C0,f0e),e(f0e,$Hr),e(C0,kHr),e(C0,boe),e(boe,SHr),e(C0,RHr),e(ke,PHr),e(ke,w0),e(w0,m0e),e(m0e,BHr),e(w0,NHr),e(w0,voe),e(voe,IHr),e(w0,qHr),e(ke,jHr),e(ke,A0),e(A0,g0e),e(g0e,DHr),e(A0,GHr),e(A0,Foe),e(Foe,OHr),e(A0,VHr),e(ke,XHr),e(ke,L0),e(L0,h0e),e(h0e,zHr),e(L0,QHr),e(L0,Toe),e(Toe,WHr),e(L0,HHr),e(ke,UHr),e(ke,y0),e(y0,p0e),e(p0e,JHr),e(y0,YHr),e(y0,Moe),e(Moe,KHr),e(y0,ZHr),e(Wr,eUr),M(x0,Wr,null),b(f,zze,u),b(f,df,u),e(df,$0),e($0,_0e),M(R$,_0e,null),e(df,oUr),e(df,u0e),e(u0e,rUr),b(f,Qze,u),b(f,Fr,u),M(P$,Fr,null),e(Fr,tUr),e(Fr,cf),e(cf,aUr),e(cf,Eoe),e(Eoe,nUr),e(cf,sUr),e(cf,Coe),e(Coe,lUr),e(cf,iUr),e(Fr,dUr),e(Fr,B$),e(B$,cUr),e(B$,b0e),e(b0e,fUr),e(B$,mUr),e(Fr,gUr),e(Fr,Yt),M(N$,Yt,null),e(Yt,hUr),e(Yt,v0e),e(v0e,pUr),e(Yt,_Ur),e(Yt,ff),e(ff,uUr),e(ff,F0e),e(F0e,bUr),e(ff,vUr),e(ff,woe),e(woe,FUr),e(ff,TUr),e(Yt,MUr),M(k0,Yt,null),e(Fr,EUr),e(Fr,Hr),M(I$,Hr,null),e(Hr,CUr),e(Hr,T0e),e(T0e,wUr),e(Hr,AUr),e(Hr,An),e(An,LUr),e(An,M0e),e(M0e,yUr),e(An,xUr),e(An,E0e),e(E0e,$Ur),e(An,kUr),e(An,C0e),e(C0e,SUr),e(An,RUr),e(Hr,PUr),e(Hr,Se),e(Se,S0),e(S0,w0e),e(w0e,BUr),e(S0,NUr),e(S0,Aoe),e(Aoe,IUr),e(S0,qUr),e(Se,jUr),e(Se,R0),e(R0,A0e),e(A0e,DUr),e(R0,GUr),e(R0,Loe),e(Loe,OUr),e(R0,VUr),e(Se,XUr),e(Se,P0),e(P0,L0e),e(L0e,zUr),e(P0,QUr),e(P0,yoe),e(yoe,WUr),e(P0,HUr),e(Se,UUr),e(Se,B0),e(B0,y0e),e(y0e,JUr),e(B0,YUr),e(B0,xoe),e(xoe,KUr),e(B0,ZUr),e(Se,eJr),e(Se,N0),e(N0,x0e),e(x0e,oJr),e(N0,rJr),e(N0,$oe),e($oe,tJr),e(N0,aJr),e(Se,nJr),e(Se,I0),e(I0,$0e),e($0e,sJr),e(I0,lJr),e(I0,koe),e(koe,iJr),e(I0,dJr),e(Se,cJr),e(Se,q0),e(q0,k0e),e(k0e,fJr),e(q0,mJr),e(q0,Soe),e(Soe,gJr),e(q0,hJr),e(Se,pJr),e(Se,j0),e(j0,S0e),e(S0e,_Jr),e(j0,uJr),e(j0,Roe),e(Roe,bJr),e(j0,vJr),e(Se,FJr),e(Se,D0),e(D0,R0e),e(R0e,TJr),e(D0,MJr),e(D0,Poe),e(Poe,EJr),e(D0,CJr),e(Se,wJr),e(Se,G0),e(G0,P0e),e(P0e,AJr),e(G0,LJr),e(G0,Boe),e(Boe,yJr),e(G0,xJr),e(Hr,$Jr),M(O0,Hr,null),b(f,Wze,u),b(f,mf,u),e(mf,V0),e(V0,B0e),M(q$,B0e,null),e(mf,kJr),e(mf,N0e),e(N0e,SJr),b(f,Hze,u),b(f,Tr,u),M(j$,Tr,null),e(Tr,RJr),e(Tr,gf),e(gf,PJr),e(gf,Noe),e(Noe,BJr),e(gf,NJr),e(gf,Ioe),e(Ioe,IJr),e(gf,qJr),e(Tr,jJr),e(Tr,D$),e(D$,DJr),e(D$,I0e),e(I0e,GJr),e(D$,OJr),e(Tr,VJr),e(Tr,Kt),M(G$,Kt,null),e(Kt,XJr),e(Kt,q0e),e(q0e,zJr),e(Kt,QJr),e(Kt,hf),e(hf,WJr),e(hf,j0e),e(j0e,HJr),e(hf,UJr),e(hf,qoe),e(qoe,JJr),e(hf,YJr),e(Kt,KJr),M(X0,Kt,null),e(Tr,ZJr),e(Tr,Ur),M(O$,Ur,null),e(Ur,eYr),e(Ur,D0e),e(D0e,oYr),e(Ur,rYr),e(Ur,Ln),e(Ln,tYr),e(Ln,G0e),e(G0e,aYr),e(Ln,nYr),e(Ln,O0e),e(O0e,sYr),e(Ln,lYr),e(Ln,V0e),e(V0e,iYr),e(Ln,dYr),e(Ur,cYr),e(Ur,Re),e(Re,z0),e(z0,X0e),e(X0e,fYr),e(z0,mYr),e(z0,joe),e(joe,gYr),e(z0,hYr),e(Re,pYr),e(Re,Q0),e(Q0,z0e),e(z0e,_Yr),e(Q0,uYr),e(Q0,Doe),e(Doe,bYr),e(Q0,vYr),e(Re,FYr),e(Re,W0),e(W0,Q0e),e(Q0e,TYr),e(W0,MYr),e(W0,Goe),e(Goe,EYr),e(W0,CYr),e(Re,wYr),e(Re,H0),e(H0,W0e),e(W0e,AYr),e(H0,LYr),e(H0,Ooe),e(Ooe,yYr),e(H0,xYr),e(Re,$Yr),e(Re,U0),e(U0,H0e),e(H0e,kYr),e(U0,SYr),e(U0,Voe),e(Voe,RYr),e(U0,PYr),e(Re,BYr),e(Re,J0),e(J0,U0e),e(U0e,NYr),e(J0,IYr),e(J0,Xoe),e(Xoe,qYr),e(J0,jYr),e(Re,DYr),e(Re,Y0),e(Y0,J0e),e(J0e,GYr),e(Y0,OYr),e(Y0,zoe),e(zoe,VYr),e(Y0,XYr),e(Re,zYr),e(Re,K0),e(K0,Y0e),e(Y0e,QYr),e(K0,WYr),e(K0,Qoe),e(Qoe,HYr),e(K0,UYr),e(Re,JYr),e(Re,Z0),e(Z0,K0e),e(K0e,YYr),e(Z0,KYr),e(Z0,Woe),e(Woe,ZYr),e(Z0,eKr),e(Re,oKr),e(Re,ew),e(ew,Z0e),e(Z0e,rKr),e(ew,tKr),e(ew,Hoe),e(Hoe,aKr),e(ew,nKr),e(Ur,sKr),M(ow,Ur,null),b(f,Uze,u),b(f,pf,u),e(pf,rw),e(rw,ewe),M(V$,ewe,null),e(pf,lKr),e(pf,owe),e(owe,iKr),b(f,Jze,u),b(f,Mr,u),M(X$,Mr,null),e(Mr,dKr),e(Mr,_f),e(_f,cKr),e(_f,Uoe),e(Uoe,fKr),e(_f,mKr),e(_f,Joe),e(Joe,gKr),e(_f,hKr),e(Mr,pKr),e(Mr,z$),e(z$,_Kr),e(z$,rwe),e(rwe,uKr),e(z$,bKr),e(Mr,vKr),e(Mr,Zt),M(Q$,Zt,null),e(Zt,FKr),e(Zt,twe),e(twe,TKr),e(Zt,MKr),e(Zt,uf),e(uf,EKr),e(uf,awe),e(awe,CKr),e(uf,wKr),e(uf,Yoe),e(Yoe,AKr),e(uf,LKr),e(Zt,yKr),M(tw,Zt,null),e(Mr,xKr),e(Mr,Jr),M(W$,Jr,null),e(Jr,$Kr),e(Jr,nwe),e(nwe,kKr),e(Jr,SKr),e(Jr,yn),e(yn,RKr),e(yn,swe),e(swe,PKr),e(yn,BKr),e(yn,lwe),e(lwe,NKr),e(yn,IKr),e(yn,iwe),e(iwe,qKr),e(yn,jKr),e(Jr,DKr),e(Jr,Ve),e(Ve,aw),e(aw,dwe),e(dwe,GKr),e(aw,OKr),e(aw,Koe),e(Koe,VKr),e(aw,XKr),e(Ve,zKr),e(Ve,nw),e(nw,cwe),e(cwe,QKr),e(nw,WKr),e(nw,Zoe),e(Zoe,HKr),e(nw,UKr),e(Ve,JKr),e(Ve,sw),e(sw,fwe),e(fwe,YKr),e(sw,KKr),e(sw,ere),e(ere,ZKr),e(sw,eZr),e(Ve,oZr),e(Ve,lw),e(lw,mwe),e(mwe,rZr),e(lw,tZr),e(lw,ore),e(ore,aZr),e(lw,nZr),e(Ve,sZr),e(Ve,iw),e(iw,gwe),e(gwe,lZr),e(iw,iZr),e(iw,rre),e(rre,dZr),e(iw,cZr),e(Ve,fZr),e(Ve,dw),e(dw,hwe),e(hwe,mZr),e(dw,gZr),e(dw,tre),e(tre,hZr),e(dw,pZr),e(Ve,_Zr),e(Ve,cw),e(cw,pwe),e(pwe,uZr),e(cw,bZr),e(cw,are),e(are,vZr),e(cw,FZr),e(Ve,TZr),e(Ve,fw),e(fw,_we),e(_we,MZr),e(fw,EZr),e(fw,nre),e(nre,CZr),e(fw,wZr),e(Jr,AZr),M(mw,Jr,null),b(f,Yze,u),b(f,bf,u),e(bf,gw),e(gw,uwe),M(H$,uwe,null),e(bf,LZr),e(bf,bwe),e(bwe,yZr),b(f,Kze,u),b(f,Er,u),M(U$,Er,null),e(Er,xZr),e(Er,vf),e(vf,$Zr),e(vf,sre),e(sre,kZr),e(vf,SZr),e(vf,lre),e(lre,RZr),e(vf,PZr),e(Er,BZr),e(Er,J$),e(J$,NZr),e(J$,vwe),e(vwe,IZr),e(J$,qZr),e(Er,jZr),e(Er,ea),M(Y$,ea,null),e(ea,DZr),e(ea,Fwe),e(Fwe,GZr),e(ea,OZr),e(ea,Ff),e(Ff,VZr),e(Ff,Twe),e(Twe,XZr),e(Ff,zZr),e(Ff,ire),e(ire,QZr),e(Ff,WZr),e(ea,HZr),M(hw,ea,null),e(Er,UZr),e(Er,Yr),M(K$,Yr,null),e(Yr,JZr),e(Yr,Mwe),e(Mwe,YZr),e(Yr,KZr),e(Yr,xn),e(xn,ZZr),e(xn,Ewe),e(Ewe,eet),e(xn,oet),e(xn,Cwe),e(Cwe,ret),e(xn,tet),e(xn,wwe),e(wwe,aet),e(xn,net),e(Yr,set),e(Yr,Xe),e(Xe,pw),e(pw,Awe),e(Awe,iet),e(pw,det),e(pw,dre),e(dre,cet),e(pw,fet),e(Xe,met),e(Xe,_w),e(_w,Lwe),e(Lwe,get),e(_w,het),e(_w,cre),e(cre,pet),e(_w,_et),e(Xe,uet),e(Xe,uw),e(uw,ywe),e(ywe,bet),e(uw,vet),e(uw,fre),e(fre,Fet),e(uw,Tet),e(Xe,Met),e(Xe,bw),e(bw,xwe),e(xwe,Eet),e(bw,Cet),e(bw,mre),e(mre,wet),e(bw,Aet),e(Xe,Let),e(Xe,vw),e(vw,$we),e($we,yet),e(vw,xet),e(vw,gre),e(gre,$et),e(vw,ket),e(Xe,Set),e(Xe,Fw),e(Fw,kwe),e(kwe,Ret),e(Fw,Pet),e(Fw,hre),e(hre,Bet),e(Fw,Net),e(Xe,Iet),e(Xe,Tw),e(Tw,Swe),e(Swe,qet),e(Tw,jet),e(Tw,pre),e(pre,Det),e(Tw,Get),e(Xe,Oet),e(Xe,Mw),e(Mw,Rwe),e(Rwe,Vet),e(Mw,Xet),e(Mw,_re),e(_re,zet),e(Mw,Qet),e(Yr,Wet),M(Ew,Yr,null),b(f,Zze,u),b(f,Tf,u),e(Tf,Cw),e(Cw,Pwe),M(Z$,Pwe,null),e(Tf,Het),e(Tf,Bwe),e(Bwe,Uet),b(f,eQe,u),b(f,Cr,u),M(ek,Cr,null),e(Cr,Jet),e(Cr,Mf),e(Mf,Yet),e(Mf,ure),e(ure,Ket),e(Mf,Zet),e(Mf,bre),e(bre,eot),e(Mf,oot),e(Cr,rot),e(Cr,ok),e(ok,tot),e(ok,Nwe),e(Nwe,aot),e(ok,not),e(Cr,sot),e(Cr,oa),M(rk,oa,null),e(oa,lot),e(oa,Iwe),e(Iwe,iot),e(oa,dot),e(oa,Ef),e(Ef,cot),e(Ef,qwe),e(qwe,fot),e(Ef,mot),e(Ef,vre),e(vre,got),e(Ef,hot),e(oa,pot),M(ww,oa,null),e(Cr,_ot),e(Cr,Kr),M(tk,Kr,null),e(Kr,uot),e(Kr,jwe),e(jwe,bot),e(Kr,vot),e(Kr,$n),e($n,Fot),e($n,Dwe),e(Dwe,Tot),e($n,Mot),e($n,Gwe),e(Gwe,Eot),e($n,Cot),e($n,Owe),e(Owe,wot),e($n,Aot),e(Kr,Lot),e(Kr,Vwe),e(Vwe,Aw),e(Aw,Xwe),e(Xwe,yot),e(Aw,xot),e(Aw,Fre),e(Fre,$ot),e(Aw,kot),e(Kr,Sot),M(Lw,Kr,null),b(f,oQe,u),b(f,Cf,u),e(Cf,yw),e(yw,zwe),M(ak,zwe,null),e(Cf,Rot),e(Cf,Qwe),e(Qwe,Pot),b(f,rQe,u),b(f,wr,u),M(nk,wr,null),e(wr,Bot),e(wr,wf),e(wf,Not),e(wf,Tre),e(Tre,Iot),e(wf,qot),e(wf,Mre),e(Mre,jot),e(wf,Dot),e(wr,Got),e(wr,sk),e(sk,Oot),e(sk,Wwe),e(Wwe,Vot),e(sk,Xot),e(wr,zot),e(wr,ra),M(lk,ra,null),e(ra,Qot),e(ra,Hwe),e(Hwe,Wot),e(ra,Hot),e(ra,Af),e(Af,Uot),e(Af,Uwe),e(Uwe,Jot),e(Af,Yot),e(Af,Ere),e(Ere,Kot),e(Af,Zot),e(ra,ert),M(xw,ra,null),e(wr,ort),e(wr,Zr),M(ik,Zr,null),e(Zr,rrt),e(Zr,Jwe),e(Jwe,trt),e(Zr,art),e(Zr,kn),e(kn,nrt),e(kn,Ywe),e(Ywe,srt),e(kn,lrt),e(kn,Kwe),e(Kwe,irt),e(kn,drt),e(kn,Zwe),e(Zwe,crt),e(kn,frt),e(Zr,mrt),e(Zr,dk),e(dk,$w),e($w,eAe),e(eAe,grt),e($w,hrt),e($w,Cre),e(Cre,prt),e($w,_rt),e(dk,urt),e(dk,kw),e(kw,oAe),e(oAe,brt),e(kw,vrt),e(kw,wre),e(wre,Frt),e(kw,Trt),e(Zr,Mrt),M(Sw,Zr,null),b(f,tQe,u),b(f,Lf,u),e(Lf,Rw),e(Rw,rAe),M(ck,rAe,null),e(Lf,Ert),e(Lf,tAe),e(tAe,Crt),b(f,aQe,u),b(f,Ar,u),M(fk,Ar,null),e(Ar,wrt),e(Ar,yf),e(yf,Art),e(yf,Are),e(Are,Lrt),e(yf,yrt),e(yf,Lre),e(Lre,xrt),e(yf,$rt),e(Ar,krt),e(Ar,mk),e(mk,Srt),e(mk,aAe),e(aAe,Rrt),e(mk,Prt),e(Ar,Brt),e(Ar,ta),M(gk,ta,null),e(ta,Nrt),e(ta,nAe),e(nAe,Irt),e(ta,qrt),e(ta,xf),e(xf,jrt),e(xf,sAe),e(sAe,Drt),e(xf,Grt),e(xf,yre),e(yre,Ort),e(xf,Vrt),e(ta,Xrt),M(Pw,ta,null),e(Ar,zrt),e(Ar,et),M(hk,et,null),e(et,Qrt),e(et,lAe),e(lAe,Wrt),e(et,Hrt),e(et,Sn),e(Sn,Urt),e(Sn,iAe),e(iAe,Jrt),e(Sn,Yrt),e(Sn,dAe),e(dAe,Krt),e(Sn,Zrt),e(Sn,cAe),e(cAe,ett),e(Sn,ott),e(et,rtt),e(et,fAe),e(fAe,Bw),e(Bw,mAe),e(mAe,ttt),e(Bw,att),e(Bw,xre),e(xre,ntt),e(Bw,stt),e(et,ltt),M(Nw,et,null),nQe=!0},p(f,[u]){const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),qf.$set(pk);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),Yg.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),Rh.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),up.$set(pAe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),bp.$set(_k);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),jp.$set(_Ae);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),Dp.$set(Rn);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),Vp.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Hu.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),Ju.$set(vAe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),V1.$set(uk);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),z1.$set(FAe);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),R4.$set(bk);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),B4.$set(TAe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),T2.$set(vk);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),E2.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),V2.$set(EAe);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),z2.$set(CAe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Vb.$set($f);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),zb.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),Ev.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),wv.$set(LAe);const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),Rv.$set(Fk);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),Bv.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),v5.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),T5.$set($Ae);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),fF.$set(at);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),gF.$set(Tk);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),_F.$set(kAe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),bF.$set(Mk);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),PF.$set(SAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),NF.$set(nt);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),jF.$set(RAe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),GF.$set(kf);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),XF.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),QF.$set(BAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),tT.$set(L);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),nT.$set(Iw);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),mT.$set(NAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),hT.$set(IAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),AT.$set(qw);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),yT.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),ST.$set(jAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),PT.$set(jw);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),GT.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),VT.$set(GAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),HT.$set(Dw);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),JT.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),e7.$set(VAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),r7.$set(Gw);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),n7.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),l7.$set(zAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),p7.$set(Ow);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),u7.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),F7.$set(WAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),M7.$set(Vw);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),_8.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),b8.$set(UAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),O8.$set(Xw);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),X8.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),aM.$set(YAe);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),sM.$set(zw);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),mM.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),hM.$set(ZAe);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),BM.$set(Qw);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),IM.$set(e6e);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),HM.$set(o6e);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),JM.$set(Ww);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),EE.$set(r6e);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),wE.$set(t6e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),VE.$set(Hw);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),zE.$set(a6e);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),HE.$set(n6e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),JE.$set(Uw);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),KE.$set(s6e);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),eC.$set(l6e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),TC.$set(Jw);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),EC.$set(i6e);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),XC.$set(d6e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),QC.$set(Yw);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),HC.$set(c6e);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),JC.$set(f6e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),KC.$set(Kw);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),e3.$set(m6e);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),y3.$set(g6e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),$3.$set(Zw);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),G3.$set(h6e);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),V3.$set(p6e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),t0.$set(eA);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),n0.$set(_6e);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),_0.$set(u6e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),b0.$set(oA);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),x0.$set(b6e);const v6e={};u&2&&(v6e.$$scope={dirty:u,ctx:f}),k0.$set(v6e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),O0.$set(rA);const F6e={};u&2&&(F6e.$$scope={dirty:u,ctx:f}),X0.$set(F6e);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:f}),ow.$set(T6e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),tw.$set(tA);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:f}),mw.$set(M6e);const E6e={};u&2&&(E6e.$$scope={dirty:u,ctx:f}),hw.$set(E6e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),Ew.$set(aA);const C6e={};u&2&&(C6e.$$scope={dirty:u,ctx:f}),ww.$set(C6e);const w6e={};u&2&&(w6e.$$scope={dirty:u,ctx:f}),Lw.$set(w6e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),xw.$set(nA);const A6e={};u&2&&(A6e.$$scope={dirty:u,ctx:f}),Sw.$set(A6e);const L6e={};u&2&&(L6e.$$scope={dirty:u,ctx:f}),Pw.$set(L6e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),Nw.$set(sA)},i(f){nQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(qf.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(fL.$$.fragment,f),E(Yg.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(Rh.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(EL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(xL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(Vp.$$.fragment,f),E(BL.$$.fragment,f),E(Hu.$$.fragment,f),E(NL.$$.fragment,f),E(IL.$$.fragment,f),E(jL.$$.fragment,f),E(Ju.$$.fragment,f),E(DL.$$.fragment,f),E(V1.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(z1.$$.fragment,f),E(zL.$$.fragment,f),E(R4.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(B4.$$.fragment,f),E(JL.$$.fragment,f),E(T2.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(E2.$$.fragment,f),E(oy.$$.fragment,f),E(V2.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(z2.$$.fragment,f),E(sy.$$.fragment,f),E(Vb.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(zb.$$.fragment,f),E(fy.$$.fragment,f),E(Ev.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(wv.$$.fragment,f),E(_y.$$.fragment,f),E(Rv.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Bv.$$.fragment,f),E(Ty.$$.fragment,f),E(v5.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(T5.$$.fragment,f),E(Ay.$$.fragment,f),E(fF.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(gF.$$.fragment,f),E(ky.$$.fragment,f),E(_F.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(bF.$$.fragment,f),E(Ny.$$.fragment,f),E(PF.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(NF.$$.fragment,f),E(Gy.$$.fragment,f),E(jF.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(GF.$$.fragment,f),E(Qy.$$.fragment,f),E(XF.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(QF.$$.fragment,f),E(Yy.$$.fragment,f),E(tT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(nT.$$.fragment,f),E(r9.$$.fragment,f),E(mT.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(hT.$$.fragment,f),E(l9.$$.fragment,f),E(AT.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(yT.$$.fragment,f),E(m9.$$.fragment,f),E(ST.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(PT.$$.fragment,f),E(b9.$$.fragment,f),E(GT.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(VT.$$.fragment,f),E(E9.$$.fragment,f),E(HT.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(JT.$$.fragment,f),E(y9.$$.fragment,f),E(e7.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(r7.$$.fragment,f),E(P9.$$.fragment,f),E(n7.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(l7.$$.fragment,f),E(j9.$$.fragment,f),E(p7.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(u7.$$.fragment,f),E(X9.$$.fragment,f),E(F7.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(M7.$$.fragment,f),E(U9.$$.fragment,f),E(_8.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(b8.$$.fragment,f),E(ex.$$.fragment,f),E(O8.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(X8.$$.fragment,f),E(nx.$$.fragment,f),E(aM.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(sM.$$.fragment,f),E(cx.$$.fragment,f),E(mM.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(hM.$$.fragment,f),E(px.$$.fragment,f),E(BM.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(IM.$$.fragment,f),E(Fx.$$.fragment,f),E(HM.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(JM.$$.fragment,f),E(wx.$$.fragment,f),E(EE.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(wE.$$.fragment,f),E($x.$$.fragment,f),E(VE.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(zE.$$.fragment,f),E(Bx.$$.fragment,f),E(HE.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(JE.$$.fragment,f),E(Gx.$$.fragment,f),E(KE.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(eC.$$.fragment,f),E(Qx.$$.fragment,f),E(TC.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(EC.$$.fragment,f),E(Yx.$$.fragment,f),E(XC.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(QC.$$.fragment,f),E(r$.$$.fragment,f),E(HC.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(JC.$$.fragment,f),E(l$.$$.fragment,f),E(KC.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(e3.$$.fragment,f),E(m$.$$.fragment,f),E(y3.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E($3.$$.fragment,f),E(u$.$$.fragment,f),E(G3.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(V3.$$.fragment,f),E(M$.$$.fragment,f),E(t0.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(n0.$$.fragment,f),E(L$.$$.fragment,f),E(_0.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(b0.$$.fragment,f),E(S$.$$.fragment,f),E(x0.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(N$.$$.fragment,f),E(k0.$$.fragment,f),E(I$.$$.fragment,f),E(O0.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(X0.$$.fragment,f),E(O$.$$.fragment,f),E(ow.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(tw.$$.fragment,f),E(W$.$$.fragment,f),E(mw.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(hw.$$.fragment,f),E(K$.$$.fragment,f),E(Ew.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(ww.$$.fragment,f),E(tk.$$.fragment,f),E(Lw.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(xw.$$.fragment,f),E(ik.$$.fragment,f),E(Sw.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(Pw.$$.fragment,f),E(hk.$$.fragment,f),E(Nw.$$.fragment,f),nQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(qf.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(fL.$$.fragment,f),C(Yg.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(Rh.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(EL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(xL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(Vp.$$.fragment,f),C(BL.$$.fragment,f),C(Hu.$$.fragment,f),C(NL.$$.fragment,f),C(IL.$$.fragment,f),C(jL.$$.fragment,f),C(Ju.$$.fragment,f),C(DL.$$.fragment,f),C(V1.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(z1.$$.fragment,f),C(zL.$$.fragment,f),C(R4.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(B4.$$.fragment,f),C(JL.$$.fragment,f),C(T2.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(E2.$$.fragment,f),C(oy.$$.fragment,f),C(V2.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(z2.$$.fragment,f),C(sy.$$.fragment,f),C(Vb.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(zb.$$.fragment,f),C(fy.$$.fragment,f),C(Ev.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(wv.$$.fragment,f),C(_y.$$.fragment,f),C(Rv.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Bv.$$.fragment,f),C(Ty.$$.fragment,f),C(v5.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(T5.$$.fragment,f),C(Ay.$$.fragment,f),C(fF.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(gF.$$.fragment,f),C(ky.$$.fragment,f),C(_F.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(bF.$$.fragment,f),C(Ny.$$.fragment,f),C(PF.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(NF.$$.fragment,f),C(Gy.$$.fragment,f),C(jF.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(GF.$$.fragment,f),C(Qy.$$.fragment,f),C(XF.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(QF.$$.fragment,f),C(Yy.$$.fragment,f),C(tT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(nT.$$.fragment,f),C(r9.$$.fragment,f),C(mT.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(hT.$$.fragment,f),C(l9.$$.fragment,f),C(AT.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(yT.$$.fragment,f),C(m9.$$.fragment,f),C(ST.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(PT.$$.fragment,f),C(b9.$$.fragment,f),C(GT.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(VT.$$.fragment,f),C(E9.$$.fragment,f),C(HT.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(JT.$$.fragment,f),C(y9.$$.fragment,f),C(e7.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(r7.$$.fragment,f),C(P9.$$.fragment,f),C(n7.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(l7.$$.fragment,f),C(j9.$$.fragment,f),C(p7.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(u7.$$.fragment,f),C(X9.$$.fragment,f),C(F7.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(M7.$$.fragment,f),C(U9.$$.fragment,f),C(_8.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(b8.$$.fragment,f),C(ex.$$.fragment,f),C(O8.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(X8.$$.fragment,f),C(nx.$$.fragment,f),C(aM.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(sM.$$.fragment,f),C(cx.$$.fragment,f),C(mM.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(hM.$$.fragment,f),C(px.$$.fragment,f),C(BM.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(IM.$$.fragment,f),C(Fx.$$.fragment,f),C(HM.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(JM.$$.fragment,f),C(wx.$$.fragment,f),C(EE.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(wE.$$.fragment,f),C($x.$$.fragment,f),C(VE.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(zE.$$.fragment,f),C(Bx.$$.fragment,f),C(HE.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(JE.$$.fragment,f),C(Gx.$$.fragment,f),C(KE.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(eC.$$.fragment,f),C(Qx.$$.fragment,f),C(TC.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(EC.$$.fragment,f),C(Yx.$$.fragment,f),C(XC.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(QC.$$.fragment,f),C(r$.$$.fragment,f),C(HC.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(JC.$$.fragment,f),C(l$.$$.fragment,f),C(KC.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(e3.$$.fragment,f),C(m$.$$.fragment,f),C(y3.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C($3.$$.fragment,f),C(u$.$$.fragment,f),C(G3.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(V3.$$.fragment,f),C(M$.$$.fragment,f),C(t0.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(n0.$$.fragment,f),C(L$.$$.fragment,f),C(_0.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(b0.$$.fragment,f),C(S$.$$.fragment,f),C(x0.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(N$.$$.fragment,f),C(k0.$$.fragment,f),C(I$.$$.fragment,f),C(O0.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(X0.$$.fragment,f),C(O$.$$.fragment,f),C(ow.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(tw.$$.fragment,f),C(W$.$$.fragment,f),C(mw.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(hw.$$.fragment,f),C(K$.$$.fragment,f),C(Ew.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(ww.$$.fragment,f),C(tk.$$.fragment,f),C(Lw.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(xw.$$.fragment,f),C(ik.$$.fragment,f),C(Sw.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(Pw.$$.fragment,f),C(hk.$$.fragment,f),C(Nw.$$.fragment,f),nQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(eXe),f&&t(Ri),w(nL),f&&t(oXe),f&&t(qn),f&&t(rXe),w(sL,f),f&&t(tXe),f&&t(DS),f&&t(aXe),w(qf,f),f&&t(nXe),f&&t(Pi),w(lL),f&&t(sXe),f&&t(wo),w(iL),w(fL),w(Yg),w(mL),f&&t(lXe),f&&t(Ni),w(gL),f&&t(iXe),f&&t(Ao),w(hL),w(uL),w(Rh),w(bL),f&&t(dXe),f&&t(Ii),w(vL),f&&t(cXe),f&&t(Lo),w(FL),w(EL),w(up),w(bp),w(CL),f&&t(fXe),f&&t(qi),w(wL),f&&t(mXe),f&&t(yo),w(AL),w(xL),w(jp),w(Dp),w($L),f&&t(gXe),f&&t(Di),w(kL),f&&t(hXe),f&&t(xo),w(SL),w(PL),w(Vp),w(BL),w(Hu),f&&t(pXe),f&&t(Vi),w(NL),f&&t(_Xe),f&&t($o),w(IL),w(jL),w(Ju),w(DL),w(V1),f&&t(uXe),f&&t(Qi),w(GL),f&&t(bXe),f&&t(ko),w(OL),w(XL),w(z1),w(zL),w(R4),f&&t(vXe),f&&t(Ui),w(QL),f&&t(FXe),f&&t(So),w(WL),w(UL),w(B4),w(JL),w(T2),f&&t(TXe),f&&t(Ki),w(YL),f&&t(MXe),f&&t(Ro),w(KL),w(ey),w(E2),w(oy),w(V2),f&&t(EXe),f&&t(od),w(ry),f&&t(CXe),f&&t(Po),w(ty),w(ny),w(z2),w(sy),w(Vb),f&&t(wXe),f&&t(ad),w(ly),f&&t(AXe),f&&t(Bo),w(iy),w(cy),w(zb),w(fy),w(Ev),f&&t(LXe),f&&t(ld),w(my),f&&t(yXe),f&&t(No),w(gy),w(py),w(wv),w(_y),w(Rv),f&&t(xXe),f&&t(cd),w(uy),f&&t($Xe),f&&t(qo),w(by),w(Fy),w(Bv),w(Ty),w(v5),f&&t(kXe),f&&t(gd),w(My),f&&t(SXe),f&&t(jo),w(Ey),w(wy),w(T5),w(Ay),w(fF),f&&t(RXe),f&&t(_d),w(Ly),f&&t(PXe),f&&t(Do),w(yy),w($y),w(gF),w(ky),w(_F),f&&t(BXe),f&&t(vd),w(Sy),f&&t(NXe),f&&t(Go),w(Ry),w(By),w(bF),w(Ny),w(PF),f&&t(IXe),f&&t(Md),w(Iy),f&&t(qXe),f&&t(Oo),w(qy),w(Dy),w(NF),w(Gy),w(jF),f&&t(jXe),f&&t(wd),w(Oy),f&&t(DXe),f&&t(Vo),w(Vy),w(zy),w(GF),w(Qy),w(XF),f&&t(GXe),f&&t(yd),w(Wy),f&&t(OXe),f&&t(Xo),w(Hy),w(Jy),w(QF),w(Yy),w(tT),f&&t(VXe),f&&t(kd),w(Ky),f&&t(XXe),f&&t(zo),w(Zy),w(o9),w(nT),w(r9),w(mT),f&&t(zXe),f&&t(Pd),w(t9),f&&t(QXe),f&&t(Qo),w(a9),w(s9),w(hT),w(l9),w(AT),f&&t(WXe),f&&t(Id),w(i9),f&&t(HXe),f&&t(Wo),w(d9),w(f9),w(yT),w(m9),w(ST),f&&t(UXe),f&&t(Dd),w(h9),f&&t(JXe),f&&t(Ho),w(p9),w(u9),w(PT),w(b9),w(GT),f&&t(YXe),f&&t(Vd),w(v9),f&&t(KXe),f&&t(Uo),w(F9),w(M9),w(VT),w(E9),w(HT),f&&t(ZXe),f&&t(Wd),w(C9),f&&t(eze),f&&t(Jo),w(w9),w(L9),w(JT),w(y9),w(e7),f&&t(oze),f&&t(Jd),w($9),f&&t(rze),f&&t(Yo),w(k9),w(R9),w(r7),w(P9),w(n7),f&&t(tze),f&&t(Zd),w(B9),f&&t(aze),f&&t(Ko),w(N9),w(q9),w(l7),w(j9),w(p7),f&&t(nze),f&&t(rc),w(D9),f&&t(sze),f&&t(er),w(G9),w(V9),w(u7),w(X9),w(F7),f&&t(lze),f&&t(nc),w(z9),f&&t(ize),f&&t(or),w(Q9),w(H9),w(M7),w(U9),w(_8),f&&t(dze),f&&t(ic),w(J9),f&&t(cze),f&&t(rr),w(Y9),w(Z9),w(b8),w(ex),w(O8),f&&t(fze),f&&t(fc),w(ox),f&&t(mze),f&&t(tr),w(rx),w(ax),w(X8),w(nx),w(aM),f&&t(gze),f&&t(hc),w(sx),f&&t(hze),f&&t(ar),w(lx),w(dx),w(sM),w(cx),w(mM),f&&t(pze),f&&t(uc),w(fx),f&&t(_ze),f&&t(nr),w(mx),w(hx),w(hM),w(px),w(BM),f&&t(uze),f&&t(Fc),w(_x),f&&t(bze),f&&t(sr),w(ux),w(vx),w(IM),w(Fx),w(HM),f&&t(vze),f&&t(Ec),w(Tx),f&&t(Fze),f&&t(lr),w(Mx),w(Cx),w(JM),w(wx),w(EE),f&&t(Tze),f&&t(Ac),w(Ax),f&&t(Mze),f&&t(ir),w(Lx),w(xx),w(wE),w($x),w(VE),f&&t(Eze),f&&t(xc),w(kx),f&&t(Cze),f&&t(dr),w(Sx),w(Px),w(zE),w(Bx),w(HE),f&&t(wze),f&&t(Sc),w(Ix),f&&t(Aze),f&&t(cr),w(qx),w(Dx),w(JE),w(Gx),w(KE),f&&t(Lze),f&&t(Bc),w(Ox),f&&t(yze),f&&t(fr),w(Vx),w(zx),w(eC),w(Qx),w(TC),f&&t(xze),f&&t(qc),w(Wx),f&&t($ze),f&&t(mr),w(Hx),w(Jx),w(EC),w(Yx),w(XC),f&&t(kze),f&&t(Gc),w(Kx),f&&t(Sze),f&&t(gr),w(Zx),w(o$),w(QC),w(r$),w(HC),f&&t(Rze),f&&t(Xc),w(t$),f&&t(Pze),f&&t(hr),w(a$),w(s$),w(JC),w(l$),w(KC),f&&t(Bze),f&&t(Wc),w(i$),f&&t(Nze),f&&t(pr),w(d$),w(f$),w(e3),w(m$),w(y3),f&&t(Ize),f&&t(Jc),w(g$),f&&t(qze),f&&t(_r),w(h$),w(_$),w($3),w(u$),w(G3),f&&t(jze),f&&t(Zc),w(b$),f&&t(Dze),f&&t(ur),w(v$),w(T$),w(V3),w(M$),w(t0),f&&t(Gze),f&&t(rf),w(E$),f&&t(Oze),f&&t(br),w(C$),w(A$),w(n0),w(L$),w(_0),f&&t(Vze),f&&t(nf),w(y$),f&&t(Xze),f&&t(vr),w(x$),w(k$),w(b0),w(S$),w(x0),f&&t(zze),f&&t(df),w(R$),f&&t(Qze),f&&t(Fr),w(P$),w(N$),w(k0),w(I$),w(O0),f&&t(Wze),f&&t(mf),w(q$),f&&t(Hze),f&&t(Tr),w(j$),w(G$),w(X0),w(O$),w(ow),f&&t(Uze),f&&t(pf),w(V$),f&&t(Jze),f&&t(Mr),w(X$),w(Q$),w(tw),w(W$),w(mw),f&&t(Yze),f&&t(bf),w(H$),f&&t(Kze),f&&t(Er),w(U$),w(Y$),w(hw),w(K$),w(Ew),f&&t(Zze),f&&t(Tf),w(Z$),f&&t(eQe),f&&t(Cr),w(ek),w(rk),w(ww),w(tk),w(Lw),f&&t(oQe),f&&t(Cf),w(ak),f&&t(rQe),f&&t(wr),w(nk),w(lk),w(xw),w(ik),w(Sw),f&&t(tQe),f&&t(Lf),w(ck),f&&t(aQe),f&&t(Ar),w(fk),w(gk),w(Pw),w(hk),w(Nw)}}}const OHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function VHt($){return GQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class JHt extends IQt{constructor(g){super();qQt(this,g,VHt,GHt,jQt,{})}}export{JHt as default,OHt as metadata};
