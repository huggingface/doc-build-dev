import{S as hOt,i as pOt,s as _Ot,e as a,k as l,w as F,t as o,M as uOt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as bOt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as yZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function vOt($){let g,v,p,m,_,d,h,Eo,Ei,$f,nt,Ci,wi,P6,kf,Oe,Qe,Ai,Rn,B6,Pn,Bn,N6,Li,Nn,I6,yi,Sf,$a;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ei=a("code"),$f=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Ci=a("code"),wi=o('"new-model"'),P6=o(")."),kf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ai=a("code"),Rn=o("NewModel"),B6=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),N6=o(`, make sure its
`),Li=a("code"),Nn=o("config_class"),I6=o(` attribute is set to the same class you use when registering the model (here
`),yi=a("code"),Sf=o("NewModelConfig"),$a=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var mS=s(p);m=r(mS,"NewModelConfig"),mS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var xi=s(d);h=r(xi,"PretrainedConfig"),xi.forEach(t),Eo=r(Ae,`, make sure its
`),Ei=n(Ae,"CODE",{});var gS=s(Ei);$f=r(gS,"model_type"),gS.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ci=n(Ae,"CODE",{});var hS=s(Ci);wi=r(hS,'"new-model"'),hS.forEach(t),P6=r(Ae,")."),Ae.forEach(t),kf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Ai=n(Co,"CODE",{});var ka=s(Ai);Rn=r(ka,"NewModel"),ka.forEach(t),B6=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var pS=s(Pn);Bn=r(pS,"PreTrainedModel"),pS.forEach(t),N6=r(Co,`, make sure its
`),Li=n(Co,"CODE",{});var Rf=s(Li);Nn=r(Rf,"config_class"),Rf.forEach(t),I6=r(Co,` attribute is set to the same class you use when registering the model (here
`),yi=n(Co,"CODE",{});var _S=s(yi);Sf=r(_S,"NewModelConfig"),_S.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ei),e(Ei,$f),e(g,nt),e(g,Ci),e(Ci,wi),e(g,P6),b(We,kf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Ai),e(Ai,Rn),e(Oe,B6),e(Oe,Pn),e(Pn,Bn),e(Oe,N6),e(Oe,Li),e(Li,Nn),e(Oe,I6),e(Oe,yi),e(yi,Sf),e(Oe,$a)},d(We){We&&t(g),We&&t(kf),We&&t(Oe)}}}function FOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function EOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function wOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Vt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZVt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Xt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uXt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bXt($){let g,v,p,m,_,d,h,Eo,Ei,$f,nt,Ci,wi,P6,kf,Oe,Qe,Ai,Rn,B6,Pn,Bn,N6,Li,Nn,I6,yi,Sf,$a,We,Ae,mS,xi,gS,hS,Co,ka,pS,Rf,_S,IQe,MOe,$i,Pf,Ste,q6,qQe,Rte,jQe,EOe,In,DQe,Pte,GQe,OQe,Bte,VQe,XQe,COe,j6,wOe,uS,zQe,AOe,Bf,LOe,ki,Nf,Nte,D6,QQe,Ite,WQe,yOe,wo,G6,HQe,O6,UQe,bS,JQe,YQe,KQe,V6,ZQe,qte,eWe,oWe,rWe,Ar,X6,tWe,jte,aWe,nWe,Si,sWe,Dte,lWe,iWe,Gte,dWe,cWe,fWe,A,If,Ote,mWe,gWe,vS,hWe,pWe,_We,qf,Vte,uWe,bWe,FS,vWe,FWe,TWe,jf,Xte,MWe,EWe,TS,CWe,wWe,AWe,Df,zte,LWe,yWe,MS,xWe,$We,kWe,Gf,Qte,SWe,RWe,ES,PWe,BWe,NWe,Of,Wte,IWe,qWe,CS,jWe,DWe,GWe,Vf,Hte,OWe,VWe,wS,XWe,zWe,QWe,Xf,Ute,WWe,HWe,AS,UWe,JWe,YWe,zf,Jte,KWe,ZWe,LS,eHe,oHe,rHe,Qf,Yte,tHe,aHe,yS,nHe,sHe,lHe,Wf,Kte,iHe,dHe,xS,cHe,fHe,mHe,Hf,Zte,gHe,hHe,$S,pHe,_He,uHe,Uf,eae,bHe,vHe,kS,FHe,THe,MHe,Jf,oae,EHe,CHe,SS,wHe,AHe,LHe,Yf,rae,yHe,xHe,RS,$He,kHe,SHe,Kf,tae,RHe,PHe,PS,BHe,NHe,IHe,Zf,aae,qHe,jHe,BS,DHe,GHe,OHe,em,nae,VHe,XHe,NS,zHe,QHe,WHe,om,sae,HHe,UHe,IS,JHe,YHe,KHe,rm,lae,ZHe,eUe,qS,oUe,rUe,tUe,tm,iae,aUe,nUe,jS,sUe,lUe,iUe,am,dae,dUe,cUe,DS,fUe,mUe,gUe,nm,cae,hUe,pUe,GS,_Ue,uUe,bUe,sm,fae,vUe,FUe,OS,TUe,MUe,EUe,lm,mae,CUe,wUe,VS,AUe,LUe,yUe,im,gae,xUe,$Ue,XS,kUe,SUe,RUe,dm,hae,PUe,BUe,zS,NUe,IUe,qUe,cm,pae,jUe,DUe,QS,GUe,OUe,VUe,fm,_ae,XUe,zUe,WS,QUe,WUe,HUe,mm,uae,UUe,JUe,HS,YUe,KUe,ZUe,gm,bae,eJe,oJe,US,rJe,tJe,aJe,hm,vae,nJe,sJe,JS,lJe,iJe,dJe,pm,Fae,cJe,fJe,YS,mJe,gJe,hJe,_m,Tae,pJe,_Je,KS,uJe,bJe,vJe,um,Mae,FJe,TJe,ZS,MJe,EJe,CJe,bm,Eae,wJe,AJe,eR,LJe,yJe,xJe,vm,Cae,$Je,kJe,oR,SJe,RJe,PJe,Fm,wae,BJe,NJe,rR,IJe,qJe,jJe,Tm,Aae,DJe,GJe,tR,OJe,VJe,XJe,Mm,Lae,zJe,QJe,aR,WJe,HJe,UJe,Em,yae,JJe,YJe,nR,KJe,ZJe,eYe,Cm,xae,oYe,rYe,sR,tYe,aYe,nYe,wm,$ae,sYe,lYe,lR,iYe,dYe,cYe,Am,kae,fYe,mYe,iR,gYe,hYe,pYe,Lm,Sae,_Ye,uYe,dR,bYe,vYe,FYe,ym,Rae,TYe,MYe,cR,EYe,CYe,wYe,xm,Pae,AYe,LYe,fR,yYe,xYe,$Ye,$m,Bae,kYe,SYe,mR,RYe,PYe,BYe,km,Nae,NYe,IYe,gR,qYe,jYe,DYe,Sm,Iae,GYe,OYe,hR,VYe,XYe,zYe,Rm,qae,QYe,WYe,pR,HYe,UYe,JYe,Pm,jae,YYe,KYe,_R,ZYe,eKe,oKe,Bm,Dae,rKe,tKe,uR,aKe,nKe,sKe,Nm,Gae,lKe,iKe,bR,dKe,cKe,fKe,Im,Oae,mKe,gKe,vR,hKe,pKe,_Ke,qm,Vae,uKe,bKe,FR,vKe,FKe,TKe,jm,Xae,MKe,EKe,TR,CKe,wKe,AKe,Dm,zae,LKe,yKe,MR,xKe,$Ke,kKe,Gm,Qae,SKe,RKe,ER,PKe,BKe,NKe,Om,Wae,IKe,qKe,CR,jKe,DKe,GKe,Vm,Hae,OKe,VKe,wR,XKe,zKe,QKe,Xm,Uae,WKe,HKe,AR,UKe,JKe,YKe,zm,Jae,KKe,ZKe,LR,eZe,oZe,rZe,Qm,Yae,tZe,aZe,yR,nZe,sZe,lZe,Wm,Kae,iZe,dZe,xR,cZe,fZe,mZe,Hm,Zae,gZe,hZe,$R,pZe,_Ze,uZe,Um,ene,bZe,vZe,kR,FZe,TZe,MZe,Jm,one,EZe,CZe,SR,wZe,AZe,LZe,Ym,rne,yZe,xZe,RR,$Ze,kZe,SZe,Km,tne,RZe,PZe,PR,BZe,NZe,IZe,Zm,ane,qZe,jZe,BR,DZe,GZe,OZe,eg,nne,VZe,XZe,NR,zZe,QZe,WZe,og,sne,HZe,UZe,IR,JZe,YZe,KZe,rg,lne,ZZe,eeo,qR,oeo,reo,teo,tg,ine,aeo,neo,jR,seo,leo,ieo,ag,dne,deo,ceo,DR,feo,meo,geo,ng,cne,heo,peo,GR,_eo,ueo,beo,sg,fne,veo,Feo,OR,Teo,Meo,Eeo,lg,mne,Ceo,weo,VR,Aeo,Leo,yeo,ig,gne,xeo,$eo,XR,keo,Seo,Reo,dg,hne,Peo,Beo,zR,Neo,Ieo,qeo,cg,pne,jeo,Deo,QR,Geo,Oeo,Veo,fg,_ne,Xeo,zeo,WR,Qeo,Weo,Heo,mg,une,Ueo,Jeo,HR,Yeo,Keo,Zeo,gg,bne,eoo,ooo,UR,roo,too,aoo,hg,vne,noo,soo,JR,loo,ioo,doo,pg,Fne,coo,foo,YR,moo,goo,hoo,_g,Tne,poo,_oo,KR,uoo,boo,voo,ug,Mne,Foo,Too,ZR,Moo,Eoo,Coo,bg,Ene,woo,Aoo,eP,Loo,yoo,xoo,vg,Cne,$oo,koo,oP,Soo,Roo,Poo,Fg,wne,Boo,Noo,rP,Ioo,qoo,joo,Tg,Ane,Doo,Goo,tP,Ooo,Voo,Xoo,Mg,Lne,zoo,Qoo,aP,Woo,Hoo,Uoo,Eg,yne,Joo,Yoo,nP,Koo,Zoo,ero,Cg,xne,oro,rro,sP,tro,aro,nro,wg,$ne,sro,lro,lP,iro,dro,cro,Ag,kne,fro,mro,iP,gro,hro,pro,Lg,Sne,_ro,uro,dP,bro,vro,Fro,yg,Rne,Tro,Mro,cP,Ero,Cro,wro,xg,Pne,Aro,Lro,fP,yro,xro,$ro,$g,Bne,kro,Sro,mP,Rro,Pro,Bro,kg,Nne,Nro,Iro,gP,qro,jro,Dro,Sg,Ine,Gro,Oro,hP,Vro,Xro,zro,Rg,qne,Qro,Wro,pP,Hro,Uro,Jro,Pg,jne,Yro,Kro,_P,Zro,eto,oto,Bg,Dne,rto,tto,uP,ato,nto,sto,Ng,Gne,lto,ito,bP,dto,cto,fto,Ig,One,mto,gto,vP,hto,pto,_to,qg,Vne,uto,bto,FP,vto,Fto,Tto,jg,Xne,Mto,Eto,TP,Cto,wto,Ato,Dg,zne,Lto,yto,MP,xto,$to,kto,Gg,Qne,Sto,Rto,EP,Pto,Bto,Nto,Og,Wne,Ito,qto,CP,jto,Dto,Gto,Vg,Hne,Oto,Vto,wP,Xto,zto,Qto,Xg,Une,Wto,Hto,AP,Uto,Jto,Yto,zg,Kto,Qg,z6,Zto,Jne,eao,xOe,Ri,Wg,Yne,Q6,oao,Kne,rao,$Oe,Ao,W6,tao,H6,aao,LP,nao,sao,lao,U6,iao,Zne,dao,cao,fao,Lr,J6,mao,ese,gao,hao,Sa,pao,ose,_ao,uao,rse,bao,vao,tse,Fao,Tao,Mao,k,qn,ase,Eao,Cao,yP,wao,Aao,xP,Lao,yao,xao,jn,nse,$ao,kao,$P,Sao,Rao,kP,Pao,Bao,Nao,Dn,sse,Iao,qao,SP,jao,Dao,RP,Gao,Oao,Vao,Hg,lse,Xao,zao,PP,Qao,Wao,Hao,Gn,ise,Uao,Jao,BP,Yao,Kao,NP,Zao,eno,ono,Ug,dse,rno,tno,IP,ano,nno,sno,Jg,cse,lno,ino,qP,dno,cno,fno,Yg,fse,mno,gno,jP,hno,pno,_no,On,mse,uno,bno,DP,vno,Fno,GP,Tno,Mno,Eno,Vn,gse,Cno,wno,OP,Ano,Lno,VP,yno,xno,$no,Xn,hse,kno,Sno,XP,Rno,Pno,zP,Bno,Nno,Ino,Kg,pse,qno,jno,QP,Dno,Gno,Ono,Zg,_se,Vno,Xno,WP,zno,Qno,Wno,eh,use,Hno,Uno,HP,Jno,Yno,Kno,zn,bse,Zno,eso,UP,oso,rso,JP,tso,aso,nso,oh,vse,sso,lso,YP,iso,dso,cso,Qn,Fse,fso,mso,KP,gso,hso,ZP,pso,_so,uso,Wn,Tse,bso,vso,eB,Fso,Tso,oB,Mso,Eso,Cso,Hn,Mse,wso,Aso,rB,Lso,yso,tB,xso,$so,kso,Un,Ese,Sso,Rso,aB,Pso,Bso,nB,Nso,Iso,qso,rh,Cse,jso,Dso,sB,Gso,Oso,Vso,Jn,wse,Xso,zso,lB,Qso,Wso,iB,Hso,Uso,Jso,Yn,Ase,Yso,Kso,dB,Zso,elo,cB,olo,rlo,tlo,Kn,Lse,alo,nlo,fB,slo,llo,mB,ilo,dlo,clo,Zn,yse,flo,mlo,gB,glo,hlo,hB,plo,_lo,ulo,es,xse,blo,vlo,pB,Flo,Tlo,_B,Mlo,Elo,Clo,os,$se,wlo,Alo,uB,Llo,ylo,bB,xlo,$lo,klo,th,kse,Slo,Rlo,vB,Plo,Blo,Nlo,rs,Sse,Ilo,qlo,FB,jlo,Dlo,TB,Glo,Olo,Vlo,ah,Rse,Xlo,zlo,MB,Qlo,Wlo,Hlo,ts,Pse,Ulo,Jlo,EB,Ylo,Klo,CB,Zlo,eio,oio,as,Bse,rio,tio,wB,aio,nio,AB,sio,lio,iio,ns,Nse,dio,cio,LB,fio,mio,yB,gio,hio,pio,nh,Ise,_io,uio,xB,bio,vio,Fio,ss,qse,Tio,Mio,$B,Eio,Cio,kB,wio,Aio,Lio,ls,jse,yio,xio,SB,$io,kio,RB,Sio,Rio,Pio,sh,Dse,Bio,Nio,PB,Iio,qio,jio,is,Gse,Dio,Gio,BB,Oio,Vio,NB,Xio,zio,Qio,ds,Ose,Wio,Hio,IB,Uio,Jio,qB,Yio,Kio,Zio,cs,Vse,edo,odo,jB,rdo,tdo,DB,ado,ndo,sdo,fs,Xse,ldo,ido,GB,ddo,cdo,OB,fdo,mdo,gdo,ms,zse,hdo,pdo,VB,_do,udo,XB,bdo,vdo,Fdo,gs,Qse,Tdo,Mdo,zB,Edo,Cdo,QB,wdo,Ado,Ldo,hs,Wse,ydo,xdo,WB,$do,kdo,HB,Sdo,Rdo,Pdo,ps,Hse,Bdo,Ndo,UB,Ido,qdo,JB,jdo,Ddo,Gdo,lh,Use,Odo,Vdo,YB,Xdo,zdo,Qdo,_s,Jse,Wdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,ih,Yse,eco,oco,eN,rco,tco,aco,dh,Kse,nco,sco,oN,lco,ico,dco,us,Zse,cco,fco,rN,mco,gco,tN,hco,pco,_co,bs,ele,uco,bco,aN,vco,Fco,nN,Tco,Mco,Eco,vs,ole,Cco,wco,sN,Aco,Lco,lN,yco,xco,$co,ch,rle,kco,Sco,iN,Rco,Pco,Bco,Fs,tle,Nco,Ico,dN,qco,jco,cN,Dco,Gco,Oco,Ts,ale,Vco,Xco,fN,zco,Qco,mN,Wco,Hco,Uco,Ms,nle,Jco,Yco,gN,Kco,Zco,hN,efo,ofo,rfo,Es,sle,tfo,afo,pN,nfo,sfo,_N,lfo,ifo,dfo,Cs,lle,cfo,ffo,uN,mfo,gfo,bN,hfo,pfo,_fo,ws,ile,ufo,bfo,vN,vfo,Ffo,FN,Tfo,Mfo,Efo,fh,dle,Cfo,wfo,TN,Afo,Lfo,yfo,As,cle,xfo,$fo,MN,kfo,Sfo,EN,Rfo,Pfo,Bfo,mh,fle,Nfo,Ifo,CN,qfo,jfo,Dfo,gh,mle,Gfo,Ofo,wN,Vfo,Xfo,zfo,hh,gle,Qfo,Wfo,AN,Hfo,Ufo,Jfo,ph,hle,Yfo,Kfo,LN,Zfo,emo,omo,Ls,ple,rmo,tmo,yN,amo,nmo,xN,smo,lmo,imo,_h,_le,dmo,cmo,$N,fmo,mmo,gmo,ys,ule,hmo,pmo,kN,_mo,umo,SN,bmo,vmo,Fmo,xs,ble,Tmo,Mmo,RN,Emo,Cmo,PN,wmo,Amo,Lmo,$s,vle,ymo,xmo,BN,$mo,kmo,NN,Smo,Rmo,Pmo,ks,Fle,Bmo,Nmo,IN,Imo,qmo,qN,jmo,Dmo,Gmo,Ss,Tle,Omo,Vmo,jN,Xmo,zmo,DN,Qmo,Wmo,Hmo,Rs,Mle,Umo,Jmo,GN,Ymo,Kmo,ON,Zmo,ego,ogo,uh,Ele,rgo,tgo,VN,ago,ngo,sgo,bh,Cle,lgo,igo,XN,dgo,cgo,fgo,Ps,wle,mgo,ggo,zN,hgo,pgo,QN,_go,ugo,bgo,Bs,Ale,vgo,Fgo,WN,Tgo,Mgo,HN,Ego,Cgo,wgo,Ns,Lle,Ago,Lgo,UN,ygo,xgo,JN,$go,kgo,Sgo,vh,yle,Rgo,Pgo,YN,Bgo,Ngo,Igo,Fh,xle,qgo,jgo,KN,Dgo,Ggo,Ogo,Th,$le,Vgo,Xgo,ZN,zgo,Qgo,Wgo,Is,kle,Hgo,Ugo,eI,Jgo,Ygo,oI,Kgo,Zgo,eho,qs,Sle,oho,rho,rI,tho,aho,tI,nho,sho,lho,Mh,Rle,iho,dho,aI,cho,fho,mho,Eh,Ple,gho,hho,nI,pho,_ho,uho,Ch,Ble,bho,vho,sI,Fho,Tho,Mho,js,Nle,Eho,Cho,lI,who,Aho,iI,Lho,yho,xho,wh,Ile,$ho,kho,dI,Sho,Rho,Pho,Ah,qle,Bho,Nho,cI,Iho,qho,jho,Ds,jle,Dho,Gho,fI,Oho,Vho,mI,Xho,zho,Qho,Gs,Dle,Who,Hho,gI,Uho,Jho,hI,Yho,Kho,Zho,Os,Gle,epo,opo,pI,rpo,tpo,_I,apo,npo,spo,Vs,Ole,lpo,ipo,uI,dpo,cpo,bI,fpo,mpo,gpo,Lh,hpo,yh,Y6,ppo,Vle,_po,kOe,Pi,xh,Xle,K6,upo,zle,bpo,SOe,Lo,Z6,vpo,eL,Fpo,vI,Tpo,Mpo,Epo,oL,Cpo,Qle,wpo,Apo,Lpo,He,rL,ypo,Wle,xpo,$po,Ra,kpo,Hle,Spo,Rpo,Ule,Ppo,Bpo,Jle,Npo,Ipo,qpo,Y,$h,Yle,jpo,Dpo,FI,Gpo,Opo,Vpo,kh,Kle,Xpo,zpo,TI,Qpo,Wpo,Hpo,Sh,Zle,Upo,Jpo,MI,Ypo,Kpo,Zpo,Rh,eie,e_o,o_o,EI,r_o,t_o,a_o,Ph,oie,n_o,s_o,CI,l_o,i_o,d_o,Bh,rie,c_o,f_o,wI,m_o,g_o,h_o,Nh,tie,p_o,__o,AI,u_o,b_o,v_o,Ih,aie,F_o,T_o,LI,M_o,E_o,C_o,qh,nie,w_o,A_o,yI,L_o,y_o,x_o,jh,sie,$_o,k_o,xI,S_o,R_o,P_o,Dh,lie,B_o,N_o,$I,I_o,q_o,j_o,Gh,iie,D_o,G_o,kI,O_o,V_o,X_o,Oh,die,z_o,Q_o,SI,W_o,H_o,U_o,Vh,cie,J_o,Y_o,RI,K_o,Z_o,euo,Xh,fie,ouo,ruo,PI,tuo,auo,nuo,zh,mie,suo,luo,BI,iuo,duo,cuo,Qh,gie,fuo,muo,NI,guo,huo,puo,Wh,hie,_uo,uuo,II,buo,vuo,Fuo,Hh,pie,Tuo,Muo,qI,Euo,Cuo,wuo,Uh,_ie,Auo,Luo,jI,yuo,xuo,$uo,Jh,uie,kuo,Suo,DI,Ruo,Puo,Buo,Yh,bie,Nuo,Iuo,GI,quo,juo,Duo,Kh,vie,Guo,Ouo,OI,Vuo,Xuo,zuo,Zh,Fie,Quo,Wuo,VI,Huo,Uuo,Juo,ep,Tie,Yuo,Kuo,XI,Zuo,e1o,o1o,op,Mie,r1o,t1o,zI,a1o,n1o,s1o,rp,Eie,l1o,i1o,QI,d1o,c1o,f1o,tp,Cie,m1o,g1o,WI,h1o,p1o,_1o,ap,wie,u1o,b1o,HI,v1o,F1o,T1o,np,Aie,M1o,E1o,UI,C1o,w1o,A1o,sp,Lie,L1o,y1o,JI,x1o,$1o,k1o,lp,yie,S1o,R1o,YI,P1o,B1o,N1o,ip,xie,I1o,q1o,KI,j1o,D1o,G1o,dp,O1o,cp,V1o,fp,tL,X1o,$ie,z1o,ROe,Bi,mp,kie,aL,Q1o,Sie,W1o,POe,yo,nL,H1o,sL,U1o,ZI,J1o,Y1o,K1o,lL,Z1o,Rie,e2o,o2o,r2o,Ue,iL,t2o,Pie,a2o,n2o,Ni,s2o,Bie,l2o,i2o,Nie,d2o,c2o,f2o,he,gp,Iie,m2o,g2o,eq,h2o,p2o,_2o,hp,qie,u2o,b2o,jie,v2o,F2o,T2o,pp,Die,M2o,E2o,oq,C2o,w2o,A2o,_p,Gie,L2o,y2o,rq,x2o,$2o,k2o,up,Oie,S2o,R2o,tq,P2o,B2o,N2o,bp,Vie,I2o,q2o,aq,j2o,D2o,G2o,vp,Xie,O2o,V2o,nq,X2o,z2o,Q2o,Fp,zie,W2o,H2o,sq,U2o,J2o,Y2o,Tp,Qie,K2o,Z2o,lq,ebo,obo,rbo,Mp,Wie,tbo,abo,iq,nbo,sbo,lbo,Ep,Hie,ibo,dbo,dq,cbo,fbo,mbo,Cp,Uie,gbo,hbo,cq,pbo,_bo,ubo,wp,Jie,bbo,vbo,fq,Fbo,Tbo,Mbo,Ap,Yie,Ebo,Cbo,mq,wbo,Abo,Lbo,Lp,Kie,ybo,xbo,gq,$bo,kbo,Sbo,yp,Zie,Rbo,Pbo,hq,Bbo,Nbo,Ibo,xp,ede,qbo,jbo,pq,Dbo,Gbo,Obo,$p,Vbo,kp,Xbo,Sp,dL,zbo,ode,Qbo,BOe,Ii,Rp,rde,cL,Wbo,tde,Hbo,NOe,xo,fL,Ubo,qi,Jbo,_q,Ybo,Kbo,uq,Zbo,e4o,o4o,mL,r4o,ade,t4o,a4o,n4o,st,gL,s4o,nde,l4o,i4o,ji,d4o,sde,c4o,f4o,bq,m4o,g4o,h4o,Pp,p4o,Je,hL,_4o,lde,u4o,b4o,Pa,v4o,ide,F4o,T4o,dde,M4o,E4o,cde,C4o,w4o,A4o,y,Bp,fde,L4o,y4o,vq,x4o,$4o,k4o,Np,mde,S4o,R4o,Fq,P4o,B4o,N4o,Ip,gde,I4o,q4o,Tq,j4o,D4o,G4o,qp,hde,O4o,V4o,Mq,X4o,z4o,Q4o,jp,pde,W4o,H4o,Eq,U4o,J4o,Y4o,Dp,_de,K4o,Z4o,Cq,e5o,o5o,r5o,Gp,ude,t5o,a5o,wq,n5o,s5o,l5o,Op,bde,i5o,d5o,Aq,c5o,f5o,m5o,Vp,vde,g5o,h5o,Lq,p5o,_5o,u5o,Xp,Fde,b5o,v5o,yq,F5o,T5o,M5o,zp,Tde,E5o,C5o,xq,w5o,A5o,L5o,Qp,Mde,y5o,x5o,$q,$5o,k5o,S5o,Wp,Ede,R5o,P5o,kq,B5o,N5o,I5o,Hp,Cde,q5o,j5o,Sq,D5o,G5o,O5o,Up,wde,V5o,X5o,Rq,z5o,Q5o,W5o,Jp,Ade,H5o,U5o,Pq,J5o,Y5o,K5o,Yp,Lde,Z5o,evo,Bq,ovo,rvo,tvo,Kp,yde,avo,nvo,Nq,svo,lvo,ivo,Zp,xde,dvo,cvo,Iq,fvo,mvo,gvo,e_,$de,hvo,pvo,qq,_vo,uvo,bvo,o_,kde,vvo,Fvo,jq,Tvo,Mvo,Evo,r_,Sde,Cvo,wvo,Dq,Avo,Lvo,yvo,t_,Rde,xvo,$vo,Gq,kvo,Svo,Rvo,a_,Pde,Pvo,Bvo,Oq,Nvo,Ivo,qvo,n_,Bde,jvo,Dvo,Vq,Gvo,Ovo,Vvo,s_,Nde,Xvo,zvo,Xq,Qvo,Wvo,Hvo,l_,Ide,Uvo,Jvo,zq,Yvo,Kvo,Zvo,i_,qde,eFo,oFo,Qq,rFo,tFo,aFo,d_,jde,nFo,sFo,Wq,lFo,iFo,dFo,c_,Dde,cFo,fFo,Hq,mFo,gFo,hFo,f_,Gde,pFo,_Fo,Uq,uFo,bFo,vFo,m_,Ode,FFo,TFo,Jq,MFo,EFo,CFo,g_,Vde,wFo,AFo,Yq,LFo,yFo,xFo,h_,Xde,$Fo,kFo,Kq,SFo,RFo,PFo,Xs,zde,BFo,NFo,Zq,IFo,qFo,ej,jFo,DFo,GFo,p_,Qde,OFo,VFo,oj,XFo,zFo,QFo,__,Wde,WFo,HFo,rj,UFo,JFo,YFo,u_,Hde,KFo,ZFo,tj,eTo,oTo,rTo,b_,Ude,tTo,aTo,aj,nTo,sTo,lTo,v_,Jde,iTo,dTo,nj,cTo,fTo,mTo,F_,Yde,gTo,hTo,sj,pTo,_To,uTo,T_,Kde,bTo,vTo,lj,FTo,TTo,MTo,M_,Zde,ETo,CTo,ij,wTo,ATo,LTo,E_,ece,yTo,xTo,dj,$To,kTo,STo,C_,oce,RTo,PTo,cj,BTo,NTo,ITo,w_,rce,qTo,jTo,fj,DTo,GTo,OTo,A_,tce,VTo,XTo,mj,zTo,QTo,WTo,L_,ace,HTo,UTo,gj,JTo,YTo,KTo,y_,nce,ZTo,e7o,hj,o7o,r7o,t7o,x_,sce,a7o,n7o,pj,s7o,l7o,i7o,$_,lce,d7o,c7o,_j,f7o,m7o,g7o,k_,ice,h7o,p7o,uj,_7o,u7o,b7o,S_,dce,v7o,F7o,bj,T7o,M7o,E7o,R_,cce,C7o,w7o,vj,A7o,L7o,y7o,P_,fce,x7o,$7o,Fj,k7o,S7o,R7o,B_,mce,P7o,B7o,Tj,N7o,I7o,q7o,N_,gce,j7o,D7o,Mj,G7o,O7o,V7o,I_,hce,X7o,z7o,Ej,Q7o,W7o,H7o,q_,pce,U7o,J7o,Cj,Y7o,K7o,Z7o,j_,_ce,e8o,o8o,wj,r8o,t8o,a8o,D_,uce,n8o,s8o,Aj,l8o,i8o,d8o,G_,bce,c8o,f8o,Lj,m8o,g8o,h8o,O_,vce,p8o,_8o,yj,u8o,b8o,v8o,V_,Fce,F8o,T8o,xj,M8o,E8o,C8o,X_,Tce,w8o,A8o,$j,L8o,y8o,x8o,z_,Mce,$8o,k8o,kj,S8o,R8o,P8o,Q_,Ece,B8o,N8o,Sj,I8o,q8o,j8o,W_,Cce,D8o,G8o,Rj,O8o,V8o,X8o,H_,wce,z8o,Q8o,Pj,W8o,H8o,U8o,U_,Ace,J8o,Y8o,Bj,K8o,Z8o,eMo,J_,Lce,oMo,rMo,Nj,tMo,aMo,nMo,Y_,yce,sMo,lMo,Ij,iMo,dMo,cMo,K_,xce,fMo,mMo,qj,gMo,hMo,pMo,Z_,$ce,_Mo,uMo,jj,bMo,vMo,FMo,eu,kce,TMo,MMo,Dj,EMo,CMo,wMo,ou,Sce,AMo,LMo,Gj,yMo,xMo,$Mo,ru,Rce,kMo,SMo,Oj,RMo,PMo,BMo,tu,Pce,NMo,IMo,Vj,qMo,jMo,DMo,au,Bce,GMo,OMo,Xj,VMo,XMo,zMo,nu,Nce,QMo,WMo,zj,HMo,UMo,JMo,su,Ice,YMo,KMo,Qj,ZMo,eEo,oEo,lu,qce,rEo,tEo,Wj,aEo,nEo,sEo,iu,jce,lEo,iEo,Hj,dEo,cEo,fEo,du,Dce,mEo,gEo,Uj,hEo,pEo,_Eo,cu,Gce,uEo,bEo,Jj,vEo,FEo,TEo,fu,Oce,MEo,EEo,Yj,CEo,wEo,AEo,mu,Vce,LEo,yEo,Kj,xEo,$Eo,kEo,gu,Xce,SEo,REo,Zj,PEo,BEo,NEo,hu,zce,IEo,qEo,eD,jEo,DEo,GEo,pu,Qce,OEo,VEo,oD,XEo,zEo,QEo,_u,Wce,WEo,HEo,rD,UEo,JEo,YEo,uu,Hce,KEo,ZEo,tD,eCo,oCo,rCo,bu,Uce,tCo,aCo,aD,nCo,sCo,lCo,vu,Jce,iCo,dCo,nD,cCo,fCo,mCo,Fu,Yce,gCo,hCo,sD,pCo,_Co,uCo,Tu,Kce,bCo,vCo,lD,FCo,TCo,MCo,Mu,Zce,ECo,CCo,iD,wCo,ACo,LCo,Eu,efe,yCo,xCo,dD,$Co,kCo,SCo,Cu,ofe,RCo,PCo,cD,BCo,NCo,ICo,wu,rfe,qCo,jCo,fD,DCo,GCo,OCo,Au,tfe,VCo,XCo,mD,zCo,QCo,WCo,Lu,afe,HCo,UCo,gD,JCo,YCo,KCo,yu,nfe,ZCo,e3o,hD,o3o,r3o,t3o,xu,sfe,a3o,n3o,pD,s3o,l3o,i3o,$u,lfe,d3o,c3o,_D,f3o,m3o,g3o,ku,ife,h3o,p3o,uD,_3o,u3o,b3o,Su,dfe,v3o,F3o,bD,T3o,M3o,E3o,Ru,cfe,C3o,w3o,vD,A3o,L3o,y3o,Pu,ffe,x3o,$3o,FD,k3o,S3o,R3o,Bu,P3o,mfe,B3o,N3o,gfe,I3o,q3o,Nu,IOe,Di,Iu,hfe,pL,j3o,pfe,D3o,qOe,$o,_L,G3o,Gi,O3o,TD,V3o,X3o,MD,z3o,Q3o,W3o,uL,H3o,_fe,U3o,J3o,Y3o,lt,bL,K3o,ufe,Z3o,e0o,Oi,o0o,bfe,r0o,t0o,ED,a0o,n0o,s0o,qu,l0o,Ye,vL,i0o,vfe,d0o,c0o,Ba,f0o,Ffe,m0o,g0o,Tfe,h0o,p0o,Mfe,_0o,u0o,b0o,G,ju,Efe,v0o,F0o,CD,T0o,M0o,E0o,Du,Cfe,C0o,w0o,wD,A0o,L0o,y0o,Gu,wfe,x0o,$0o,AD,k0o,S0o,R0o,Ou,Afe,P0o,B0o,LD,N0o,I0o,q0o,Vu,Lfe,j0o,D0o,yD,G0o,O0o,V0o,Xu,yfe,X0o,z0o,xD,Q0o,W0o,H0o,zu,xfe,U0o,J0o,$D,Y0o,K0o,Z0o,Qu,$fe,ewo,owo,kD,rwo,two,awo,Wu,kfe,nwo,swo,SD,lwo,iwo,dwo,Hu,Sfe,cwo,fwo,RD,mwo,gwo,hwo,Uu,Rfe,pwo,_wo,PD,uwo,bwo,vwo,Ju,Pfe,Fwo,Two,BD,Mwo,Ewo,Cwo,Yu,Bfe,wwo,Awo,ND,Lwo,ywo,xwo,Ku,Nfe,$wo,kwo,ID,Swo,Rwo,Pwo,Zu,Ife,Bwo,Nwo,qD,Iwo,qwo,jwo,e1,qfe,Dwo,Gwo,jD,Owo,Vwo,Xwo,o1,jfe,zwo,Qwo,DD,Wwo,Hwo,Uwo,r1,Dfe,Jwo,Ywo,GD,Kwo,Zwo,eAo,t1,Gfe,oAo,rAo,OD,tAo,aAo,nAo,a1,Ofe,sAo,lAo,VD,iAo,dAo,cAo,n1,Vfe,fAo,mAo,XD,gAo,hAo,pAo,s1,Xfe,_Ao,uAo,zD,bAo,vAo,FAo,l1,zfe,TAo,MAo,QD,EAo,CAo,wAo,i1,Qfe,AAo,LAo,WD,yAo,xAo,$Ao,d1,Wfe,kAo,SAo,HD,RAo,PAo,BAo,c1,Hfe,NAo,IAo,UD,qAo,jAo,DAo,f1,Ufe,GAo,OAo,JD,VAo,XAo,zAo,m1,Jfe,QAo,WAo,YD,HAo,UAo,JAo,g1,Yfe,YAo,KAo,KD,ZAo,e6o,o6o,h1,Kfe,r6o,t6o,ZD,a6o,n6o,s6o,p1,Zfe,l6o,i6o,eG,d6o,c6o,f6o,_1,eme,m6o,g6o,oG,h6o,p6o,_6o,u1,ome,u6o,b6o,rG,v6o,F6o,T6o,b1,rme,M6o,E6o,tG,C6o,w6o,A6o,v1,tme,L6o,y6o,aG,x6o,$6o,k6o,F1,ame,S6o,R6o,nG,P6o,B6o,N6o,T1,nme,I6o,q6o,sG,j6o,D6o,G6o,M1,sme,O6o,V6o,lG,X6o,z6o,Q6o,E1,lme,W6o,H6o,iG,U6o,J6o,Y6o,C1,ime,K6o,Z6o,dG,eLo,oLo,rLo,w1,dme,tLo,aLo,cG,nLo,sLo,lLo,A1,cme,iLo,dLo,fG,cLo,fLo,mLo,L1,fme,gLo,hLo,mG,pLo,_Lo,uLo,y1,mme,bLo,vLo,gG,FLo,TLo,MLo,x1,ELo,gme,CLo,wLo,hme,ALo,LLo,$1,jOe,Vi,k1,pme,FL,yLo,_me,xLo,DOe,ko,TL,$Lo,Xi,kLo,hG,SLo,RLo,pG,PLo,BLo,NLo,ML,ILo,ume,qLo,jLo,DLo,it,EL,GLo,bme,OLo,VLo,zi,XLo,vme,zLo,QLo,_G,WLo,HLo,ULo,S1,JLo,Ke,CL,YLo,Fme,KLo,ZLo,Na,eyo,Tme,oyo,ryo,Mme,tyo,ayo,Eme,nyo,syo,lyo,z,R1,Cme,iyo,dyo,uG,cyo,fyo,myo,P1,wme,gyo,hyo,bG,pyo,_yo,uyo,B1,Ame,byo,vyo,vG,Fyo,Tyo,Myo,N1,Lme,Eyo,Cyo,FG,wyo,Ayo,Lyo,I1,yme,yyo,xyo,TG,$yo,kyo,Syo,q1,xme,Ryo,Pyo,MG,Byo,Nyo,Iyo,j1,$me,qyo,jyo,EG,Dyo,Gyo,Oyo,D1,kme,Vyo,Xyo,CG,zyo,Qyo,Wyo,G1,Sme,Hyo,Uyo,wG,Jyo,Yyo,Kyo,O1,Rme,Zyo,e9o,AG,o9o,r9o,t9o,V1,Pme,a9o,n9o,LG,s9o,l9o,i9o,X1,Bme,d9o,c9o,yG,f9o,m9o,g9o,z1,Nme,h9o,p9o,xG,_9o,u9o,b9o,Q1,Ime,v9o,F9o,$G,T9o,M9o,E9o,W1,qme,C9o,w9o,kG,A9o,L9o,y9o,H1,jme,x9o,$9o,SG,k9o,S9o,R9o,U1,Dme,P9o,B9o,RG,N9o,I9o,q9o,J1,Gme,j9o,D9o,PG,G9o,O9o,V9o,Y1,Ome,X9o,z9o,BG,Q9o,W9o,H9o,K1,Vme,U9o,J9o,NG,Y9o,K9o,Z9o,Z1,Xme,exo,oxo,IG,rxo,txo,axo,e2,zme,nxo,sxo,qG,lxo,ixo,dxo,o2,Qme,cxo,fxo,jG,mxo,gxo,hxo,r2,Wme,pxo,_xo,DG,uxo,bxo,vxo,t2,Hme,Fxo,Txo,GG,Mxo,Exo,Cxo,a2,Ume,wxo,Axo,OG,Lxo,yxo,xxo,n2,Jme,$xo,kxo,VG,Sxo,Rxo,Pxo,s2,Yme,Bxo,Nxo,XG,Ixo,qxo,jxo,l2,Kme,Dxo,Gxo,zG,Oxo,Vxo,Xxo,i2,Zme,zxo,Qxo,QG,Wxo,Hxo,Uxo,d2,ege,Jxo,Yxo,WG,Kxo,Zxo,e$o,c2,oge,o$o,r$o,HG,t$o,a$o,n$o,f2,rge,s$o,l$o,UG,i$o,d$o,c$o,m2,tge,f$o,m$o,JG,g$o,h$o,p$o,g2,age,_$o,u$o,YG,b$o,v$o,F$o,h2,nge,T$o,M$o,KG,E$o,C$o,w$o,p2,sge,A$o,L$o,ZG,y$o,x$o,$$o,_2,lge,k$o,S$o,eO,R$o,P$o,B$o,u2,ige,N$o,I$o,oO,q$o,j$o,D$o,b2,G$o,dge,O$o,V$o,cge,X$o,z$o,v2,GOe,Qi,F2,fge,wL,Q$o,mge,W$o,OOe,So,AL,H$o,Wi,U$o,rO,J$o,Y$o,tO,K$o,Z$o,eko,LL,oko,gge,rko,tko,ako,dt,yL,nko,hge,sko,lko,Hi,iko,pge,dko,cko,aO,fko,mko,gko,T2,hko,Ze,xL,pko,_ge,_ko,uko,Ia,bko,uge,vko,Fko,bge,Tko,Mko,vge,Eko,Cko,wko,W,M2,Fge,Ako,Lko,nO,yko,xko,$ko,E2,Tge,kko,Sko,sO,Rko,Pko,Bko,C2,Mge,Nko,Iko,lO,qko,jko,Dko,w2,Ege,Gko,Oko,iO,Vko,Xko,zko,A2,Cge,Qko,Wko,dO,Hko,Uko,Jko,L2,wge,Yko,Kko,cO,Zko,eSo,oSo,y2,Age,rSo,tSo,fO,aSo,nSo,sSo,x2,Lge,lSo,iSo,mO,dSo,cSo,fSo,$2,yge,mSo,gSo,gO,hSo,pSo,_So,k2,xge,uSo,bSo,hO,vSo,FSo,TSo,S2,$ge,MSo,ESo,pO,CSo,wSo,ASo,R2,kge,LSo,ySo,_O,xSo,$So,kSo,P2,Sge,SSo,RSo,uO,PSo,BSo,NSo,B2,Rge,ISo,qSo,bO,jSo,DSo,GSo,N2,Pge,OSo,VSo,vO,XSo,zSo,QSo,I2,Bge,WSo,HSo,FO,USo,JSo,YSo,q2,Nge,KSo,ZSo,TO,eRo,oRo,rRo,j2,Ige,tRo,aRo,MO,nRo,sRo,lRo,D2,qge,iRo,dRo,EO,cRo,fRo,mRo,G2,jge,gRo,hRo,CO,pRo,_Ro,uRo,O2,Dge,bRo,vRo,wO,FRo,TRo,MRo,V2,Gge,ERo,CRo,AO,wRo,ARo,LRo,X2,Oge,yRo,xRo,LO,$Ro,kRo,SRo,z2,Vge,RRo,PRo,yO,BRo,NRo,IRo,Q2,Xge,qRo,jRo,xO,DRo,GRo,ORo,W2,zge,VRo,XRo,$O,zRo,QRo,WRo,H2,Qge,HRo,URo,kO,JRo,YRo,KRo,U2,Wge,ZRo,ePo,SO,oPo,rPo,tPo,J2,Hge,aPo,nPo,RO,sPo,lPo,iPo,Y2,Uge,dPo,cPo,PO,fPo,mPo,gPo,K2,Jge,hPo,pPo,BO,_Po,uPo,bPo,Z2,Yge,vPo,FPo,NO,TPo,MPo,EPo,eb,Kge,CPo,wPo,Zge,APo,LPo,yPo,ob,ehe,xPo,$Po,IO,kPo,SPo,RPo,rb,ohe,PPo,BPo,qO,NPo,IPo,qPo,tb,rhe,jPo,DPo,jO,GPo,OPo,VPo,ab,the,XPo,zPo,DO,QPo,WPo,HPo,nb,UPo,ahe,JPo,YPo,nhe,KPo,ZPo,sb,VOe,Ui,lb,she,$L,eBo,lhe,oBo,XOe,Ro,kL,rBo,Ji,tBo,GO,aBo,nBo,OO,sBo,lBo,iBo,SL,dBo,ihe,cBo,fBo,mBo,ct,RL,gBo,dhe,hBo,pBo,Yi,_Bo,che,uBo,bBo,VO,vBo,FBo,TBo,ib,MBo,eo,PL,EBo,fhe,CBo,wBo,qa,ABo,mhe,LBo,yBo,ghe,xBo,$Bo,hhe,kBo,SBo,RBo,pe,db,phe,PBo,BBo,XO,NBo,IBo,qBo,cb,_he,jBo,DBo,zO,GBo,OBo,VBo,fb,uhe,XBo,zBo,QO,QBo,WBo,HBo,mb,bhe,UBo,JBo,WO,YBo,KBo,ZBo,gb,vhe,eNo,oNo,HO,rNo,tNo,aNo,hb,Fhe,nNo,sNo,UO,lNo,iNo,dNo,pb,The,cNo,fNo,JO,mNo,gNo,hNo,_b,Mhe,pNo,_No,YO,uNo,bNo,vNo,ub,Ehe,FNo,TNo,KO,MNo,ENo,CNo,bb,Che,wNo,ANo,ZO,LNo,yNo,xNo,vb,whe,$No,kNo,eV,SNo,RNo,PNo,Fb,Ahe,BNo,NNo,oV,INo,qNo,jNo,Tb,Lhe,DNo,GNo,rV,ONo,VNo,XNo,Mb,yhe,zNo,QNo,tV,WNo,HNo,UNo,Eb,xhe,JNo,YNo,aV,KNo,ZNo,eIo,Cb,$he,oIo,rIo,nV,tIo,aIo,nIo,wb,khe,sIo,lIo,sV,iIo,dIo,cIo,Ab,fIo,She,mIo,gIo,Rhe,hIo,pIo,Lb,zOe,Ki,yb,Phe,BL,_Io,Bhe,uIo,QOe,Po,NL,bIo,Zi,vIo,lV,FIo,TIo,iV,MIo,EIo,CIo,IL,wIo,Nhe,AIo,LIo,yIo,ft,qL,xIo,Ihe,$Io,kIo,ed,SIo,qhe,RIo,PIo,dV,BIo,NIo,IIo,xb,qIo,oo,jL,jIo,jhe,DIo,GIo,ja,OIo,Dhe,VIo,XIo,Ghe,zIo,QIo,Ohe,WIo,HIo,UIo,I,$b,Vhe,JIo,YIo,cV,KIo,ZIo,eqo,kb,Xhe,oqo,rqo,fV,tqo,aqo,nqo,Sb,zhe,sqo,lqo,mV,iqo,dqo,cqo,Rb,Qhe,fqo,mqo,gV,gqo,hqo,pqo,Pb,Whe,_qo,uqo,hV,bqo,vqo,Fqo,Bb,Hhe,Tqo,Mqo,pV,Eqo,Cqo,wqo,Nb,Uhe,Aqo,Lqo,_V,yqo,xqo,$qo,Ib,Jhe,kqo,Sqo,uV,Rqo,Pqo,Bqo,qb,Yhe,Nqo,Iqo,bV,qqo,jqo,Dqo,jb,Khe,Gqo,Oqo,vV,Vqo,Xqo,zqo,Db,Zhe,Qqo,Wqo,FV,Hqo,Uqo,Jqo,Gb,epe,Yqo,Kqo,TV,Zqo,ejo,ojo,Ob,ope,rjo,tjo,MV,ajo,njo,sjo,Vb,rpe,ljo,ijo,EV,djo,cjo,fjo,Xb,tpe,mjo,gjo,CV,hjo,pjo,_jo,zb,ape,ujo,bjo,wV,vjo,Fjo,Tjo,Qb,npe,Mjo,Ejo,AV,Cjo,wjo,Ajo,Wb,spe,Ljo,yjo,LV,xjo,$jo,kjo,Hb,lpe,Sjo,Rjo,yV,Pjo,Bjo,Njo,Ub,ipe,Ijo,qjo,xV,jjo,Djo,Gjo,Jb,dpe,Ojo,Vjo,$V,Xjo,zjo,Qjo,Yb,cpe,Wjo,Hjo,kV,Ujo,Jjo,Yjo,Kb,fpe,Kjo,Zjo,SV,eDo,oDo,rDo,Zb,mpe,tDo,aDo,RV,nDo,sDo,lDo,e4,gpe,iDo,dDo,PV,cDo,fDo,mDo,o4,hpe,gDo,hDo,BV,pDo,_Do,uDo,r4,ppe,bDo,vDo,NV,FDo,TDo,MDo,t4,_pe,EDo,CDo,IV,wDo,ADo,LDo,a4,upe,yDo,xDo,qV,$Do,kDo,SDo,n4,bpe,RDo,PDo,jV,BDo,NDo,IDo,s4,vpe,qDo,jDo,DV,DDo,GDo,ODo,l4,Fpe,VDo,XDo,GV,zDo,QDo,WDo,i4,Tpe,HDo,UDo,OV,JDo,YDo,KDo,d4,Mpe,ZDo,eGo,VV,oGo,rGo,tGo,c4,Epe,aGo,nGo,XV,sGo,lGo,iGo,f4,Cpe,dGo,cGo,zV,fGo,mGo,gGo,m4,wpe,hGo,pGo,QV,_Go,uGo,bGo,g4,Ape,vGo,FGo,WV,TGo,MGo,EGo,h4,Lpe,CGo,wGo,HV,AGo,LGo,yGo,p4,ype,xGo,$Go,UV,kGo,SGo,RGo,_4,xpe,PGo,BGo,JV,NGo,IGo,qGo,u4,$pe,jGo,DGo,YV,GGo,OGo,VGo,b4,kpe,XGo,zGo,KV,QGo,WGo,HGo,v4,Spe,UGo,JGo,ZV,YGo,KGo,ZGo,F4,Rpe,eOo,oOo,eX,rOo,tOo,aOo,T4,Ppe,nOo,sOo,oX,lOo,iOo,dOo,M4,Bpe,cOo,fOo,rX,mOo,gOo,hOo,E4,Npe,pOo,_Oo,tX,uOo,bOo,vOo,C4,Ipe,FOo,TOo,aX,MOo,EOo,COo,w4,wOo,qpe,AOo,LOo,jpe,yOo,xOo,A4,WOe,od,L4,Dpe,DL,$Oo,Gpe,kOo,HOe,Bo,GL,SOo,rd,ROo,nX,POo,BOo,sX,NOo,IOo,qOo,OL,jOo,Ope,DOo,GOo,OOo,mt,VL,VOo,Vpe,XOo,zOo,td,QOo,Xpe,WOo,HOo,lX,UOo,JOo,YOo,y4,KOo,ro,XL,ZOo,zpe,eVo,oVo,Da,rVo,Qpe,tVo,aVo,Wpe,nVo,sVo,Hpe,lVo,iVo,dVo,Z,x4,Upe,cVo,fVo,iX,mVo,gVo,hVo,$4,Jpe,pVo,_Vo,dX,uVo,bVo,vVo,k4,Ype,FVo,TVo,cX,MVo,EVo,CVo,S4,Kpe,wVo,AVo,fX,LVo,yVo,xVo,R4,Zpe,$Vo,kVo,mX,SVo,RVo,PVo,P4,e_e,BVo,NVo,gX,IVo,qVo,jVo,B4,o_e,DVo,GVo,hX,OVo,VVo,XVo,N4,r_e,zVo,QVo,pX,WVo,HVo,UVo,I4,t_e,JVo,YVo,_X,KVo,ZVo,eXo,q4,a_e,oXo,rXo,uX,tXo,aXo,nXo,j4,n_e,sXo,lXo,bX,iXo,dXo,cXo,D4,s_e,fXo,mXo,vX,gXo,hXo,pXo,G4,l_e,_Xo,uXo,FX,bXo,vXo,FXo,O4,i_e,TXo,MXo,TX,EXo,CXo,wXo,V4,d_e,AXo,LXo,MX,yXo,xXo,$Xo,X4,c_e,kXo,SXo,EX,RXo,PXo,BXo,z4,f_e,NXo,IXo,CX,qXo,jXo,DXo,Q4,m_e,GXo,OXo,wX,VXo,XXo,zXo,W4,g_e,QXo,WXo,AX,HXo,UXo,JXo,H4,h_e,YXo,KXo,LX,ZXo,ezo,ozo,U4,p_e,rzo,tzo,yX,azo,nzo,szo,J4,__e,lzo,izo,xX,dzo,czo,fzo,Y4,u_e,mzo,gzo,$X,hzo,pzo,_zo,K4,b_e,uzo,bzo,kX,vzo,Fzo,Tzo,Z4,v_e,Mzo,Ezo,SX,Czo,wzo,Azo,e5,F_e,Lzo,yzo,RX,xzo,$zo,kzo,o5,T_e,Szo,Rzo,PX,Pzo,Bzo,Nzo,r5,M_e,Izo,qzo,BX,jzo,Dzo,Gzo,t5,E_e,Ozo,Vzo,NX,Xzo,zzo,Qzo,a5,C_e,Wzo,Hzo,IX,Uzo,Jzo,Yzo,n5,Kzo,w_e,Zzo,eQo,A_e,oQo,rQo,s5,UOe,ad,l5,L_e,zL,tQo,y_e,aQo,JOe,No,QL,nQo,nd,sQo,qX,lQo,iQo,jX,dQo,cQo,fQo,WL,mQo,x_e,gQo,hQo,pQo,gt,HL,_Qo,$_e,uQo,bQo,sd,vQo,k_e,FQo,TQo,DX,MQo,EQo,CQo,i5,wQo,to,UL,AQo,S_e,LQo,yQo,Ga,xQo,R_e,$Qo,kQo,P_e,SQo,RQo,B_e,PQo,BQo,NQo,Io,d5,N_e,IQo,qQo,GX,jQo,DQo,GQo,c5,I_e,OQo,VQo,OX,XQo,zQo,QQo,f5,q_e,WQo,HQo,VX,UQo,JQo,YQo,m5,j_e,KQo,ZQo,XX,eWo,oWo,rWo,g5,D_e,tWo,aWo,zX,nWo,sWo,lWo,h5,G_e,iWo,dWo,QX,cWo,fWo,mWo,p5,gWo,O_e,hWo,pWo,V_e,_Wo,uWo,_5,YOe,ld,u5,X_e,JL,bWo,z_e,vWo,KOe,qo,YL,FWo,id,TWo,WX,MWo,EWo,HX,CWo,wWo,AWo,KL,LWo,Q_e,yWo,xWo,$Wo,ht,ZL,kWo,W_e,SWo,RWo,dd,PWo,H_e,BWo,NWo,UX,IWo,qWo,jWo,b5,DWo,ao,ey,GWo,U_e,OWo,VWo,Oa,XWo,J_e,zWo,QWo,Y_e,WWo,HWo,K_e,UWo,JWo,YWo,H,v5,Z_e,KWo,ZWo,JX,eHo,oHo,rHo,F5,eue,tHo,aHo,YX,nHo,sHo,lHo,T5,oue,iHo,dHo,KX,cHo,fHo,mHo,M5,rue,gHo,hHo,ZX,pHo,_Ho,uHo,E5,tue,bHo,vHo,ez,FHo,THo,MHo,C5,aue,EHo,CHo,oz,wHo,AHo,LHo,w5,nue,yHo,xHo,rz,$Ho,kHo,SHo,A5,sue,RHo,PHo,tz,BHo,NHo,IHo,L5,lue,qHo,jHo,az,DHo,GHo,OHo,y5,iue,VHo,XHo,nz,zHo,QHo,WHo,x5,due,HHo,UHo,sz,JHo,YHo,KHo,$5,cue,ZHo,eUo,lz,oUo,rUo,tUo,k5,fue,aUo,nUo,iz,sUo,lUo,iUo,S5,mue,dUo,cUo,dz,fUo,mUo,gUo,R5,gue,hUo,pUo,cz,_Uo,uUo,bUo,P5,hue,vUo,FUo,fz,TUo,MUo,EUo,B5,pue,CUo,wUo,mz,AUo,LUo,yUo,N5,_ue,xUo,$Uo,gz,kUo,SUo,RUo,I5,uue,PUo,BUo,hz,NUo,IUo,qUo,q5,bue,jUo,DUo,pz,GUo,OUo,VUo,j5,vue,XUo,zUo,_z,QUo,WUo,HUo,D5,Fue,UUo,JUo,uz,YUo,KUo,ZUo,G5,Tue,eJo,oJo,bz,rJo,tJo,aJo,O5,Mue,nJo,sJo,vz,lJo,iJo,dJo,V5,Eue,cJo,fJo,Fz,mJo,gJo,hJo,X5,Cue,pJo,_Jo,Tz,uJo,bJo,vJo,z5,wue,FJo,TJo,Mz,MJo,EJo,CJo,Q5,Aue,wJo,AJo,Ez,LJo,yJo,xJo,W5,Lue,$Jo,kJo,Cz,SJo,RJo,PJo,H5,yue,BJo,NJo,wz,IJo,qJo,jJo,U5,xue,DJo,GJo,Az,OJo,VJo,XJo,J5,$ue,zJo,QJo,Lz,WJo,HJo,UJo,Y5,kue,JJo,YJo,yz,KJo,ZJo,eYo,K5,Sue,oYo,rYo,xz,tYo,aYo,nYo,Z5,Rue,sYo,lYo,$z,iYo,dYo,cYo,ev,Pue,fYo,mYo,kz,gYo,hYo,pYo,ov,_Yo,Bue,uYo,bYo,Nue,vYo,FYo,rv,ZOe,cd,tv,Iue,oy,TYo,que,MYo,eVe,jo,ry,EYo,fd,CYo,Sz,wYo,AYo,Rz,LYo,yYo,xYo,ty,$Yo,jue,kYo,SYo,RYo,pt,ay,PYo,Due,BYo,NYo,md,IYo,Gue,qYo,jYo,Pz,DYo,GYo,OYo,av,VYo,no,ny,XYo,Oue,zYo,QYo,Va,WYo,Vue,HYo,UYo,Xue,JYo,YYo,zue,KYo,ZYo,eKo,V,nv,Que,oKo,rKo,Bz,tKo,aKo,nKo,sv,Wue,sKo,lKo,Nz,iKo,dKo,cKo,lv,Hue,fKo,mKo,Iz,gKo,hKo,pKo,iv,Uue,_Ko,uKo,qz,bKo,vKo,FKo,dv,Jue,TKo,MKo,jz,EKo,CKo,wKo,cv,Yue,AKo,LKo,Dz,yKo,xKo,$Ko,fv,Kue,kKo,SKo,Gz,RKo,PKo,BKo,mv,Zue,NKo,IKo,Oz,qKo,jKo,DKo,gv,e1e,GKo,OKo,Vz,VKo,XKo,zKo,hv,o1e,QKo,WKo,Xz,HKo,UKo,JKo,pv,r1e,YKo,KKo,zz,ZKo,eZo,oZo,_v,t1e,rZo,tZo,Qz,aZo,nZo,sZo,uv,a1e,lZo,iZo,Wz,dZo,cZo,fZo,bv,n1e,mZo,gZo,Hz,hZo,pZo,_Zo,vv,s1e,uZo,bZo,Uz,vZo,FZo,TZo,Fv,l1e,MZo,EZo,Jz,CZo,wZo,AZo,Tv,i1e,LZo,yZo,Yz,xZo,$Zo,kZo,Mv,d1e,SZo,RZo,Kz,PZo,BZo,NZo,Ev,c1e,IZo,qZo,Zz,jZo,DZo,GZo,Cv,f1e,OZo,VZo,eQ,XZo,zZo,QZo,wv,m1e,WZo,HZo,oQ,UZo,JZo,YZo,Av,g1e,KZo,ZZo,rQ,eer,oer,rer,Lv,h1e,ter,aer,tQ,ner,ser,ler,yv,p1e,ier,der,aQ,cer,fer,mer,xv,_1e,ger,her,nQ,per,_er,uer,$v,u1e,ber,ver,sQ,Fer,Ter,Mer,kv,b1e,Eer,Cer,lQ,wer,Aer,Ler,Sv,v1e,yer,xer,iQ,$er,ker,Ser,Rv,F1e,Rer,Per,dQ,Ber,Ner,Ier,Pv,T1e,qer,jer,cQ,Der,Ger,Oer,Bv,M1e,Ver,Xer,fQ,zer,Qer,Wer,Nv,E1e,Her,Uer,mQ,Jer,Yer,Ker,Iv,C1e,Zer,eor,gQ,oor,ror,tor,qv,w1e,aor,nor,hQ,sor,lor,ior,jv,A1e,dor,cor,pQ,mor,gor,hor,Dv,L1e,por,_or,_Q,uor,bor,vor,Gv,y1e,For,Tor,uQ,Mor,Eor,Cor,Ov,x1e,wor,Aor,bQ,Lor,yor,xor,Vv,$1e,$or,kor,vQ,Sor,Ror,Por,Xv,k1e,Bor,Nor,FQ,Ior,qor,jor,zv,S1e,Dor,Gor,TQ,Oor,Vor,Xor,Qv,zor,R1e,Qor,Wor,P1e,Hor,Uor,Wv,oVe,gd,Hv,B1e,sy,Jor,N1e,Yor,rVe,Do,ly,Kor,hd,Zor,MQ,err,orr,EQ,rrr,trr,arr,iy,nrr,I1e,srr,lrr,irr,_t,dy,drr,q1e,crr,frr,pd,mrr,j1e,grr,hrr,CQ,prr,_rr,urr,Uv,brr,so,cy,vrr,D1e,Frr,Trr,Xa,Mrr,G1e,Err,Crr,O1e,wrr,Arr,V1e,Lrr,yrr,xrr,X1e,Jv,z1e,$rr,krr,wQ,Srr,Rrr,Prr,Yv,Brr,Q1e,Nrr,Irr,W1e,qrr,jrr,Kv,tVe,_d,Zv,H1e,fy,Drr,U1e,Grr,aVe,Go,my,Orr,ud,Vrr,AQ,Xrr,zrr,LQ,Qrr,Wrr,Hrr,gy,Urr,J1e,Jrr,Yrr,Krr,ut,hy,Zrr,Y1e,etr,otr,bd,rtr,K1e,ttr,atr,yQ,ntr,str,ltr,eF,itr,lo,py,dtr,Z1e,ctr,ftr,za,mtr,e2e,gtr,htr,o2e,ptr,_tr,r2e,utr,btr,vtr,ue,oF,t2e,Ftr,Ttr,xQ,Mtr,Etr,Ctr,rF,a2e,wtr,Atr,$Q,Ltr,ytr,xtr,tF,n2e,$tr,ktr,kQ,Str,Rtr,Ptr,aF,s2e,Btr,Ntr,SQ,Itr,qtr,jtr,zs,l2e,Dtr,Gtr,RQ,Otr,Vtr,PQ,Xtr,ztr,Qtr,nF,i2e,Wtr,Htr,BQ,Utr,Jtr,Ytr,Qs,d2e,Ktr,Ztr,NQ,ear,oar,IQ,rar,tar,aar,sF,c2e,nar,sar,qQ,lar,iar,dar,bt,f2e,car,far,jQ,mar,gar,DQ,har,par,GQ,_ar,uar,bar,lF,m2e,Far,Tar,OQ,Mar,Ear,Car,iF,g2e,war,Aar,VQ,Lar,yar,xar,dF,h2e,$ar,kar,XQ,Sar,Rar,Par,cF,p2e,Bar,Nar,zQ,Iar,qar,jar,fF,_2e,Dar,Gar,QQ,Oar,Var,Xar,mF,u2e,zar,Qar,WQ,War,Har,Uar,gF,b2e,Jar,Yar,HQ,Kar,Zar,enr,hF,onr,v2e,rnr,tnr,F2e,anr,nnr,pF,nVe,vd,_F,T2e,_y,snr,M2e,lnr,sVe,Oo,uy,inr,Fd,dnr,UQ,cnr,fnr,JQ,mnr,gnr,hnr,by,pnr,E2e,_nr,unr,bnr,vt,vy,vnr,C2e,Fnr,Tnr,Td,Mnr,w2e,Enr,Cnr,YQ,wnr,Anr,Lnr,uF,ynr,io,Fy,xnr,A2e,$nr,knr,Qa,Snr,L2e,Rnr,Pnr,y2e,Bnr,Nnr,x2e,Inr,qnr,jnr,$2e,bF,k2e,Dnr,Gnr,KQ,Onr,Vnr,Xnr,vF,znr,S2e,Qnr,Wnr,R2e,Hnr,Unr,FF,lVe,Md,TF,P2e,Ty,Jnr,B2e,Ynr,iVe,Vo,My,Knr,Ed,Znr,ZQ,esr,osr,eW,rsr,tsr,asr,Ey,nsr,N2e,ssr,lsr,isr,Ft,Cy,dsr,I2e,csr,fsr,Cd,msr,q2e,gsr,hsr,oW,psr,_sr,usr,MF,bsr,co,wy,vsr,j2e,Fsr,Tsr,Wa,Msr,D2e,Esr,Csr,G2e,wsr,Asr,O2e,Lsr,ysr,xsr,V2e,EF,X2e,$sr,ksr,rW,Ssr,Rsr,Psr,CF,Bsr,z2e,Nsr,Isr,Q2e,qsr,jsr,wF,dVe,wd,AF,W2e,Ay,Dsr,H2e,Gsr,cVe,Xo,Ly,Osr,Ad,Vsr,tW,Xsr,zsr,aW,Qsr,Wsr,Hsr,yy,Usr,U2e,Jsr,Ysr,Ksr,Tt,xy,Zsr,J2e,elr,olr,Ld,rlr,Y2e,tlr,alr,nW,nlr,slr,llr,LF,ilr,fo,$y,dlr,K2e,clr,flr,Ha,mlr,Z2e,glr,hlr,ebe,plr,_lr,obe,ulr,blr,vlr,Pe,yF,rbe,Flr,Tlr,sW,Mlr,Elr,Clr,xF,tbe,wlr,Alr,lW,Llr,ylr,xlr,$F,abe,$lr,klr,iW,Slr,Rlr,Plr,kF,nbe,Blr,Nlr,dW,Ilr,qlr,jlr,SF,sbe,Dlr,Glr,cW,Olr,Vlr,Xlr,RF,lbe,zlr,Qlr,fW,Wlr,Hlr,Ulr,PF,ibe,Jlr,Ylr,mW,Klr,Zlr,eir,BF,dbe,oir,rir,gW,tir,air,nir,NF,cbe,sir,lir,hW,iir,dir,cir,IF,fir,fbe,mir,gir,mbe,hir,pir,qF,fVe,yd,jF,gbe,ky,_ir,hbe,uir,mVe,zo,Sy,bir,xd,vir,pW,Fir,Tir,_W,Mir,Eir,Cir,Ry,wir,pbe,Air,Lir,yir,Mt,Py,xir,_be,$ir,kir,$d,Sir,ube,Rir,Pir,uW,Bir,Nir,Iir,DF,qir,mo,By,jir,bbe,Dir,Gir,Ua,Oir,vbe,Vir,Xir,Fbe,zir,Qir,Tbe,Wir,Hir,Uir,et,GF,Mbe,Jir,Yir,bW,Kir,Zir,edr,OF,Ebe,odr,rdr,vW,tdr,adr,ndr,VF,Cbe,sdr,ldr,FW,idr,ddr,cdr,XF,wbe,fdr,mdr,TW,gdr,hdr,pdr,zF,Abe,_dr,udr,MW,bdr,vdr,Fdr,QF,Tdr,Lbe,Mdr,Edr,ybe,Cdr,wdr,WF,gVe,kd,HF,xbe,Ny,Adr,$be,Ldr,hVe,Qo,Iy,ydr,Sd,xdr,EW,$dr,kdr,CW,Sdr,Rdr,Pdr,qy,Bdr,kbe,Ndr,Idr,qdr,Et,jy,jdr,Sbe,Ddr,Gdr,Rd,Odr,Rbe,Vdr,Xdr,wW,zdr,Qdr,Wdr,UF,Hdr,go,Dy,Udr,Pbe,Jdr,Ydr,Ja,Kdr,Bbe,Zdr,ecr,Nbe,ocr,rcr,Ibe,tcr,acr,ncr,Le,JF,qbe,scr,lcr,AW,icr,dcr,ccr,YF,jbe,fcr,mcr,LW,gcr,hcr,pcr,KF,Dbe,_cr,ucr,yW,bcr,vcr,Fcr,ZF,Gbe,Tcr,Mcr,xW,Ecr,Ccr,wcr,eT,Obe,Acr,Lcr,$W,ycr,xcr,$cr,oT,Vbe,kcr,Scr,kW,Rcr,Pcr,Bcr,rT,Xbe,Ncr,Icr,SW,qcr,jcr,Dcr,tT,zbe,Gcr,Ocr,RW,Vcr,Xcr,zcr,aT,Qbe,Qcr,Wcr,PW,Hcr,Ucr,Jcr,nT,Wbe,Ycr,Kcr,BW,Zcr,efr,ofr,sT,rfr,Hbe,tfr,afr,Ube,nfr,sfr,lT,pVe,Pd,iT,Jbe,Gy,lfr,Ybe,ifr,_Ve,Wo,Oy,dfr,Bd,cfr,NW,ffr,mfr,IW,gfr,hfr,pfr,Vy,_fr,Kbe,ufr,bfr,vfr,Ct,Xy,Ffr,Zbe,Tfr,Mfr,Nd,Efr,e4e,Cfr,wfr,qW,Afr,Lfr,yfr,dT,xfr,ho,zy,$fr,o4e,kfr,Sfr,Ya,Rfr,r4e,Pfr,Bfr,t4e,Nfr,Ifr,a4e,qfr,jfr,Dfr,Qy,cT,n4e,Gfr,Ofr,jW,Vfr,Xfr,zfr,fT,s4e,Qfr,Wfr,DW,Hfr,Ufr,Jfr,mT,Yfr,l4e,Kfr,Zfr,i4e,emr,omr,gT,uVe,Id,hT,d4e,Wy,rmr,c4e,tmr,bVe,Ho,Hy,amr,qd,nmr,GW,smr,lmr,OW,imr,dmr,cmr,Uy,fmr,f4e,mmr,gmr,hmr,wt,Jy,pmr,m4e,_mr,umr,jd,bmr,g4e,vmr,Fmr,VW,Tmr,Mmr,Emr,pT,Cmr,po,Yy,wmr,h4e,Amr,Lmr,Ka,ymr,p4e,xmr,$mr,_4e,kmr,Smr,u4e,Rmr,Pmr,Bmr,ot,_T,b4e,Nmr,Imr,XW,qmr,jmr,Dmr,uT,v4e,Gmr,Omr,zW,Vmr,Xmr,zmr,bT,F4e,Qmr,Wmr,QW,Hmr,Umr,Jmr,vT,T4e,Ymr,Kmr,WW,Zmr,egr,ogr,FT,M4e,rgr,tgr,HW,agr,ngr,sgr,TT,lgr,E4e,igr,dgr,C4e,cgr,fgr,MT,vVe,Dd,ET,w4e,Ky,mgr,A4e,ggr,FVe,Uo,Zy,hgr,Gd,pgr,UW,_gr,ugr,JW,bgr,vgr,Fgr,e9,Tgr,L4e,Mgr,Egr,Cgr,At,o9,wgr,y4e,Agr,Lgr,Od,ygr,x4e,xgr,$gr,YW,kgr,Sgr,Rgr,CT,Pgr,_o,r9,Bgr,$4e,Ngr,Igr,Za,qgr,k4e,jgr,Dgr,S4e,Ggr,Ogr,R4e,Vgr,Xgr,zgr,Vd,wT,P4e,Qgr,Wgr,KW,Hgr,Ugr,Jgr,AT,B4e,Ygr,Kgr,ZW,Zgr,ehr,ohr,LT,N4e,rhr,thr,eH,ahr,nhr,shr,yT,lhr,I4e,ihr,dhr,q4e,chr,fhr,xT,TVe,Xd,$T,j4e,t9,mhr,D4e,ghr,MVe,Jo,a9,hhr,zd,phr,oH,_hr,uhr,rH,bhr,vhr,Fhr,n9,Thr,G4e,Mhr,Ehr,Chr,Lt,s9,whr,O4e,Ahr,Lhr,Qd,yhr,V4e,xhr,$hr,tH,khr,Shr,Rhr,kT,Phr,uo,l9,Bhr,X4e,Nhr,Ihr,en,qhr,z4e,jhr,Dhr,Q4e,Ghr,Ohr,W4e,Vhr,Xhr,zhr,i9,ST,H4e,Qhr,Whr,aH,Hhr,Uhr,Jhr,RT,U4e,Yhr,Khr,nH,Zhr,epr,opr,PT,rpr,J4e,tpr,apr,Y4e,npr,spr,BT,EVe,Wd,NT,K4e,d9,lpr,Z4e,ipr,CVe,Yo,c9,dpr,Hd,cpr,sH,fpr,mpr,lH,gpr,hpr,ppr,f9,_pr,e5e,upr,bpr,vpr,yt,m9,Fpr,o5e,Tpr,Mpr,Ud,Epr,r5e,Cpr,wpr,iH,Apr,Lpr,ypr,IT,xpr,bo,g9,$pr,t5e,kpr,Spr,on,Rpr,a5e,Ppr,Bpr,n5e,Npr,Ipr,s5e,qpr,jpr,Dpr,l5e,qT,i5e,Gpr,Opr,dH,Vpr,Xpr,zpr,jT,Qpr,d5e,Wpr,Hpr,c5e,Upr,Jpr,DT,wVe,Jd,GT,f5e,h9,Ypr,m5e,Kpr,AVe,Ko,p9,Zpr,Yd,e_r,cH,o_r,r_r,fH,t_r,a_r,n_r,_9,s_r,g5e,l_r,i_r,d_r,xt,u9,c_r,h5e,f_r,m_r,Kd,g_r,p5e,h_r,p_r,mH,__r,u_r,b_r,OT,v_r,vo,b9,F_r,_5e,T_r,M_r,rn,E_r,u5e,C_r,w_r,b5e,A_r,L_r,v5e,y_r,x_r,$_r,rt,VT,F5e,k_r,S_r,gH,R_r,P_r,B_r,XT,T5e,N_r,I_r,hH,q_r,j_r,D_r,zT,M5e,G_r,O_r,pH,V_r,X_r,z_r,QT,E5e,Q_r,W_r,_H,H_r,U_r,J_r,WT,C5e,Y_r,K_r,uH,Z_r,eur,our,HT,rur,w5e,tur,aur,A5e,nur,sur,UT,LVe,Zd,JT,L5e,v9,lur,y5e,iur,yVe,Zo,F9,dur,ec,cur,bH,fur,mur,vH,gur,hur,pur,T9,_ur,x5e,uur,bur,vur,$t,M9,Fur,$5e,Tur,Mur,oc,Eur,k5e,Cur,wur,FH,Aur,Lur,yur,YT,xur,Fo,E9,$ur,S5e,kur,Sur,tn,Rur,R5e,Pur,Bur,P5e,Nur,Iur,B5e,qur,jur,Dur,N5e,KT,I5e,Gur,Our,TH,Vur,Xur,zur,ZT,Qur,q5e,Wur,Hur,j5e,Uur,Jur,e7,xVe,rc,o7,D5e,C9,Yur,G5e,Kur,$Ve,er,w9,Zur,tc,e1r,MH,o1r,r1r,EH,t1r,a1r,n1r,A9,s1r,O5e,l1r,i1r,d1r,kt,L9,c1r,V5e,f1r,m1r,ac,g1r,X5e,h1r,p1r,CH,_1r,u1r,b1r,r7,v1r,yr,y9,F1r,z5e,T1r,M1r,an,E1r,Q5e,C1r,w1r,W5e,A1r,L1r,H5e,y1r,x1r,$1r,j,t7,U5e,k1r,S1r,wH,R1r,P1r,B1r,a7,J5e,N1r,I1r,AH,q1r,j1r,D1r,n7,Y5e,G1r,O1r,LH,V1r,X1r,z1r,s7,K5e,Q1r,W1r,yH,H1r,U1r,J1r,l7,Z5e,Y1r,K1r,xH,Z1r,e2r,o2r,i7,eve,r2r,t2r,$H,a2r,n2r,s2r,d7,ove,l2r,i2r,kH,d2r,c2r,f2r,c7,rve,m2r,g2r,SH,h2r,p2r,_2r,f7,tve,u2r,b2r,RH,v2r,F2r,T2r,m7,ave,M2r,E2r,PH,C2r,w2r,A2r,g7,nve,L2r,y2r,BH,x2r,$2r,k2r,h7,sve,S2r,R2r,NH,P2r,B2r,N2r,p7,lve,I2r,q2r,IH,j2r,D2r,G2r,_7,ive,O2r,V2r,qH,X2r,z2r,Q2r,u7,dve,W2r,H2r,jH,U2r,J2r,Y2r,b7,cve,K2r,Z2r,DH,ebr,obr,rbr,v7,fve,tbr,abr,GH,nbr,sbr,lbr,Ws,mve,ibr,dbr,OH,cbr,fbr,VH,mbr,gbr,hbr,F7,gve,pbr,_br,XH,ubr,bbr,vbr,T7,hve,Fbr,Tbr,zH,Mbr,Ebr,Cbr,M7,pve,wbr,Abr,QH,Lbr,ybr,xbr,E7,_ve,$br,kbr,WH,Sbr,Rbr,Pbr,C7,uve,Bbr,Nbr,HH,Ibr,qbr,jbr,w7,bve,Dbr,Gbr,UH,Obr,Vbr,Xbr,A7,vve,zbr,Qbr,JH,Wbr,Hbr,Ubr,L7,Fve,Jbr,Ybr,YH,Kbr,Zbr,e4r,y7,Tve,o4r,r4r,KH,t4r,a4r,n4r,x7,Mve,s4r,l4r,ZH,i4r,d4r,c4r,$7,Eve,f4r,m4r,eU,g4r,h4r,p4r,k7,Cve,_4r,u4r,oU,b4r,v4r,F4r,S7,wve,T4r,M4r,rU,E4r,C4r,w4r,R7,Ave,A4r,L4r,tU,y4r,x4r,$4r,P7,Lve,k4r,S4r,aU,R4r,P4r,B4r,B7,yve,N4r,I4r,nU,q4r,j4r,D4r,N7,xve,G4r,O4r,sU,V4r,X4r,z4r,I7,$ve,Q4r,W4r,lU,H4r,U4r,J4r,q7,kve,Y4r,K4r,iU,Z4r,e5r,o5r,j7,Sve,r5r,t5r,dU,a5r,n5r,s5r,D7,Rve,l5r,i5r,cU,d5r,c5r,f5r,G7,Pve,m5r,g5r,fU,h5r,p5r,_5r,O7,Bve,u5r,b5r,mU,v5r,F5r,T5r,V7,Nve,M5r,E5r,gU,C5r,w5r,A5r,X7,Ive,L5r,y5r,hU,x5r,$5r,k5r,z7,qve,S5r,R5r,pU,P5r,B5r,N5r,Q7,jve,I5r,q5r,_U,j5r,D5r,G5r,W7,Dve,O5r,V5r,uU,X5r,z5r,Q5r,H7,Gve,W5r,H5r,bU,U5r,J5r,Y5r,U7,kVe,nc,J7,Ove,x9,K5r,Vve,Z5r,SVe,or,$9,evr,sc,ovr,vU,rvr,tvr,FU,avr,nvr,svr,k9,lvr,Xve,ivr,dvr,cvr,St,S9,fvr,zve,mvr,gvr,lc,hvr,Qve,pvr,_vr,TU,uvr,bvr,vvr,Y7,Fvr,xr,R9,Tvr,Wve,Mvr,Evr,nn,Cvr,Hve,wvr,Avr,Uve,Lvr,yvr,Jve,xvr,$vr,kvr,se,K7,Yve,Svr,Rvr,MU,Pvr,Bvr,Nvr,Z7,Kve,Ivr,qvr,EU,jvr,Dvr,Gvr,e8,Zve,Ovr,Vvr,CU,Xvr,zvr,Qvr,o8,eFe,Wvr,Hvr,wU,Uvr,Jvr,Yvr,r8,oFe,Kvr,Zvr,AU,eFr,oFr,rFr,t8,rFe,tFr,aFr,LU,nFr,sFr,lFr,a8,tFe,iFr,dFr,yU,cFr,fFr,mFr,n8,aFe,gFr,hFr,xU,pFr,_Fr,uFr,s8,nFe,bFr,vFr,$U,FFr,TFr,MFr,l8,sFe,EFr,CFr,kU,wFr,AFr,LFr,i8,lFe,yFr,xFr,SU,$Fr,kFr,SFr,d8,iFe,RFr,PFr,RU,BFr,NFr,IFr,c8,dFe,qFr,jFr,PU,DFr,GFr,OFr,f8,cFe,VFr,XFr,BU,zFr,QFr,WFr,m8,fFe,HFr,UFr,NU,JFr,YFr,KFr,g8,mFe,ZFr,eTr,IU,oTr,rTr,tTr,h8,gFe,aTr,nTr,qU,sTr,lTr,iTr,p8,hFe,dTr,cTr,jU,fTr,mTr,gTr,_8,pFe,hTr,pTr,DU,_Tr,uTr,bTr,u8,_Fe,vTr,FTr,GU,TTr,MTr,ETr,b8,uFe,CTr,wTr,OU,ATr,LTr,yTr,v8,bFe,xTr,$Tr,VU,kTr,STr,RTr,F8,vFe,PTr,BTr,XU,NTr,ITr,qTr,T8,RVe,ic,M8,FFe,P9,jTr,TFe,DTr,PVe,rr,B9,GTr,dc,OTr,zU,VTr,XTr,QU,zTr,QTr,WTr,N9,HTr,MFe,UTr,JTr,YTr,Rt,I9,KTr,EFe,ZTr,e7r,cc,o7r,CFe,r7r,t7r,WU,a7r,n7r,s7r,E8,l7r,$r,q9,i7r,wFe,d7r,c7r,sn,f7r,AFe,m7r,g7r,LFe,h7r,p7r,yFe,_7r,u7r,b7r,Me,C8,xFe,v7r,F7r,HU,T7r,M7r,E7r,w8,$Fe,C7r,w7r,UU,A7r,L7r,y7r,A8,kFe,x7r,$7r,JU,k7r,S7r,R7r,L8,SFe,P7r,B7r,YU,N7r,I7r,q7r,y8,RFe,j7r,D7r,KU,G7r,O7r,V7r,x8,PFe,X7r,z7r,ZU,Q7r,W7r,H7r,$8,BFe,U7r,J7r,eJ,Y7r,K7r,Z7r,k8,NFe,e8r,o8r,oJ,r8r,t8r,a8r,S8,IFe,n8r,s8r,rJ,l8r,i8r,d8r,R8,qFe,c8r,f8r,tJ,m8r,g8r,h8r,P8,jFe,p8r,_8r,aJ,u8r,b8r,v8r,B8,DFe,F8r,T8r,nJ,M8r,E8r,C8r,N8,GFe,w8r,A8r,sJ,L8r,y8r,x8r,I8,BVe,fc,q8,OFe,j9,$8r,VFe,k8r,NVe,tr,D9,S8r,mc,R8r,lJ,P8r,B8r,iJ,N8r,I8r,q8r,G9,j8r,XFe,D8r,G8r,O8r,Pt,O9,V8r,zFe,X8r,z8r,gc,Q8r,QFe,W8r,H8r,dJ,U8r,J8r,Y8r,j8,K8r,kr,V9,Z8r,WFe,eMr,oMr,ln,rMr,HFe,tMr,aMr,UFe,nMr,sMr,JFe,lMr,iMr,dMr,dn,D8,YFe,cMr,fMr,cJ,mMr,gMr,hMr,G8,KFe,pMr,_Mr,fJ,uMr,bMr,vMr,O8,ZFe,FMr,TMr,mJ,MMr,EMr,CMr,V8,eTe,wMr,AMr,gJ,LMr,yMr,xMr,X8,IVe,hc,z8,oTe,X9,$Mr,rTe,kMr,qVe,ar,z9,SMr,pc,RMr,hJ,PMr,BMr,pJ,NMr,IMr,qMr,Q9,jMr,tTe,DMr,GMr,OMr,Bt,W9,VMr,aTe,XMr,zMr,_c,QMr,nTe,WMr,HMr,_J,UMr,JMr,YMr,Q8,KMr,Sr,H9,ZMr,sTe,eEr,oEr,cn,rEr,lTe,tEr,aEr,iTe,nEr,sEr,dTe,lEr,iEr,dEr,ie,W8,cTe,cEr,fEr,uJ,mEr,gEr,hEr,H8,fTe,pEr,_Er,bJ,uEr,bEr,vEr,U8,mTe,FEr,TEr,vJ,MEr,EEr,CEr,J8,gTe,wEr,AEr,FJ,LEr,yEr,xEr,Y8,hTe,$Er,kEr,TJ,SEr,REr,PEr,K8,pTe,BEr,NEr,MJ,IEr,qEr,jEr,Z8,_Te,DEr,GEr,EJ,OEr,VEr,XEr,eM,uTe,zEr,QEr,CJ,WEr,HEr,UEr,oM,bTe,JEr,YEr,wJ,KEr,ZEr,eCr,rM,vTe,oCr,rCr,AJ,tCr,aCr,nCr,tM,FTe,sCr,lCr,LJ,iCr,dCr,cCr,aM,TTe,fCr,mCr,yJ,gCr,hCr,pCr,nM,MTe,_Cr,uCr,xJ,bCr,vCr,FCr,sM,ETe,TCr,MCr,$J,ECr,CCr,wCr,lM,CTe,ACr,LCr,kJ,yCr,xCr,$Cr,iM,wTe,kCr,SCr,SJ,RCr,PCr,BCr,dM,ATe,NCr,ICr,RJ,qCr,jCr,DCr,cM,LTe,GCr,OCr,PJ,VCr,XCr,zCr,fM,yTe,QCr,WCr,BJ,HCr,UCr,JCr,mM,xTe,YCr,KCr,NJ,ZCr,e3r,o3r,gM,jVe,uc,hM,$Te,U9,r3r,kTe,t3r,DVe,nr,J9,a3r,bc,n3r,IJ,s3r,l3r,qJ,i3r,d3r,c3r,Y9,f3r,STe,m3r,g3r,h3r,Nt,K9,p3r,RTe,_3r,u3r,vc,b3r,PTe,v3r,F3r,jJ,T3r,M3r,E3r,pM,C3r,Rr,Z9,w3r,BTe,A3r,L3r,fn,y3r,NTe,x3r,$3r,ITe,k3r,S3r,qTe,R3r,P3r,B3r,ye,_M,jTe,N3r,I3r,DJ,q3r,j3r,D3r,uM,DTe,G3r,O3r,GJ,V3r,X3r,z3r,bM,GTe,Q3r,W3r,OJ,H3r,U3r,J3r,vM,OTe,Y3r,K3r,VJ,Z3r,e0r,o0r,FM,VTe,r0r,t0r,XJ,a0r,n0r,s0r,TM,XTe,l0r,i0r,zJ,d0r,c0r,f0r,MM,zTe,m0r,g0r,QJ,h0r,p0r,_0r,EM,QTe,u0r,b0r,WJ,v0r,F0r,T0r,CM,WTe,M0r,E0r,HJ,C0r,w0r,A0r,wM,HTe,L0r,y0r,UJ,x0r,$0r,k0r,AM,GVe,Fc,LM,UTe,ex,S0r,JTe,R0r,OVe,sr,ox,P0r,Tc,B0r,JJ,N0r,I0r,YJ,q0r,j0r,D0r,rx,G0r,YTe,O0r,V0r,X0r,It,tx,z0r,KTe,Q0r,W0r,Mc,H0r,ZTe,U0r,J0r,KJ,Y0r,K0r,Z0r,yM,ewr,Pr,ax,owr,e7e,rwr,twr,mn,awr,o7e,nwr,swr,r7e,lwr,iwr,t7e,dwr,cwr,fwr,te,xM,a7e,mwr,gwr,ZJ,hwr,pwr,_wr,$M,n7e,uwr,bwr,eY,vwr,Fwr,Twr,kM,s7e,Mwr,Ewr,oY,Cwr,wwr,Awr,SM,l7e,Lwr,ywr,rY,xwr,$wr,kwr,RM,i7e,Swr,Rwr,tY,Pwr,Bwr,Nwr,PM,d7e,Iwr,qwr,aY,jwr,Dwr,Gwr,BM,c7e,Owr,Vwr,nY,Xwr,zwr,Qwr,NM,f7e,Wwr,Hwr,sY,Uwr,Jwr,Ywr,IM,m7e,Kwr,Zwr,lY,eAr,oAr,rAr,qM,g7e,tAr,aAr,iY,nAr,sAr,lAr,jM,h7e,iAr,dAr,dY,cAr,fAr,mAr,DM,p7e,gAr,hAr,cY,pAr,_Ar,uAr,GM,_7e,bAr,vAr,fY,FAr,TAr,MAr,OM,u7e,EAr,CAr,mY,wAr,AAr,LAr,VM,b7e,yAr,xAr,gY,$Ar,kAr,SAr,XM,v7e,RAr,PAr,hY,BAr,NAr,IAr,zM,F7e,qAr,jAr,pY,DAr,GAr,OAr,QM,T7e,VAr,XAr,_Y,zAr,QAr,WAr,WM,M7e,HAr,UAr,uY,JAr,YAr,KAr,HM,E7e,ZAr,e6r,bY,o6r,r6r,t6r,UM,C7e,a6r,n6r,vY,s6r,l6r,i6r,JM,w7e,d6r,c6r,FY,f6r,m6r,g6r,YM,A7e,h6r,p6r,TY,_6r,u6r,b6r,KM,L7e,v6r,F6r,MY,T6r,M6r,E6r,ZM,y7e,C6r,w6r,EY,A6r,L6r,y6r,eE,x7e,x6r,$6r,CY,k6r,S6r,R6r,oE,VVe,Ec,rE,$7e,nx,P6r,k7e,B6r,XVe,lr,sx,N6r,Cc,I6r,wY,q6r,j6r,AY,D6r,G6r,O6r,lx,V6r,S7e,X6r,z6r,Q6r,qt,ix,W6r,R7e,H6r,U6r,wc,J6r,P7e,Y6r,K6r,LY,Z6r,eLr,oLr,tE,rLr,Br,dx,tLr,B7e,aLr,nLr,gn,sLr,N7e,lLr,iLr,I7e,dLr,cLr,q7e,fLr,mLr,gLr,_e,aE,j7e,hLr,pLr,yY,_Lr,uLr,bLr,nE,D7e,vLr,FLr,xY,TLr,MLr,ELr,sE,G7e,CLr,wLr,$Y,ALr,LLr,yLr,lE,O7e,xLr,$Lr,kY,kLr,SLr,RLr,iE,V7e,PLr,BLr,SY,NLr,ILr,qLr,dE,X7e,jLr,DLr,RY,GLr,OLr,VLr,cE,z7e,XLr,zLr,PY,QLr,WLr,HLr,fE,Q7e,ULr,JLr,BY,YLr,KLr,ZLr,mE,W7e,eyr,oyr,NY,ryr,tyr,ayr,gE,H7e,nyr,syr,IY,lyr,iyr,dyr,hE,U7e,cyr,fyr,qY,myr,gyr,hyr,pE,J7e,pyr,_yr,jY,uyr,byr,vyr,_E,Y7e,Fyr,Tyr,DY,Myr,Eyr,Cyr,uE,K7e,wyr,Ayr,GY,Lyr,yyr,xyr,bE,Z7e,$yr,kyr,OY,Syr,Ryr,Pyr,vE,e8e,Byr,Nyr,VY,Iyr,qyr,jyr,FE,o8e,Dyr,Gyr,XY,Oyr,Vyr,Xyr,TE,zVe,Ac,ME,r8e,cx,zyr,t8e,Qyr,QVe,ir,fx,Wyr,Lc,Hyr,zY,Uyr,Jyr,QY,Yyr,Kyr,Zyr,mx,e9r,a8e,o9r,r9r,t9r,jt,gx,a9r,n8e,n9r,s9r,yc,l9r,s8e,i9r,d9r,WY,c9r,f9r,m9r,EE,g9r,Nr,hx,h9r,l8e,p9r,_9r,hn,u9r,i8e,b9r,v9r,d8e,F9r,T9r,c8e,M9r,E9r,C9r,px,CE,f8e,w9r,A9r,HY,L9r,y9r,x9r,wE,m8e,$9r,k9r,UY,S9r,R9r,P9r,AE,WVe,xc,LE,g8e,_x,B9r,h8e,N9r,HVe,dr,ux,I9r,$c,q9r,JY,j9r,D9r,YY,G9r,O9r,V9r,bx,X9r,p8e,z9r,Q9r,W9r,Dt,vx,H9r,_8e,U9r,J9r,kc,Y9r,u8e,K9r,Z9r,KY,exr,oxr,rxr,yE,txr,Ir,Fx,axr,b8e,nxr,sxr,pn,lxr,v8e,ixr,dxr,F8e,cxr,fxr,T8e,mxr,gxr,hxr,M8e,xE,E8e,pxr,_xr,ZY,uxr,bxr,vxr,$E,UVe,Sc,kE,C8e,Tx,Fxr,w8e,Txr,JVe,cr,Mx,Mxr,Rc,Exr,eK,Cxr,wxr,oK,Axr,Lxr,yxr,Ex,xxr,A8e,$xr,kxr,Sxr,Gt,Cx,Rxr,L8e,Pxr,Bxr,Pc,Nxr,y8e,Ixr,qxr,rK,jxr,Dxr,Gxr,SE,Oxr,qr,wx,Vxr,x8e,Xxr,zxr,_n,Qxr,$8e,Wxr,Hxr,k8e,Uxr,Jxr,S8e,Yxr,Kxr,Zxr,de,RE,R8e,e$r,o$r,tK,r$r,t$r,a$r,PE,P8e,n$r,s$r,aK,l$r,i$r,d$r,BE,B8e,c$r,f$r,nK,m$r,g$r,h$r,NE,N8e,p$r,_$r,sK,u$r,b$r,v$r,IE,I8e,F$r,T$r,lK,M$r,E$r,C$r,qE,q8e,w$r,A$r,iK,L$r,y$r,x$r,jE,j8e,$$r,k$r,dK,S$r,R$r,P$r,DE,D8e,B$r,N$r,cK,I$r,q$r,j$r,GE,G8e,D$r,G$r,fK,O$r,V$r,X$r,OE,O8e,z$r,Q$r,mK,W$r,H$r,U$r,VE,V8e,J$r,Y$r,gK,K$r,Z$r,ekr,XE,X8e,okr,rkr,hK,tkr,akr,nkr,zE,z8e,skr,lkr,pK,ikr,dkr,ckr,QE,Q8e,fkr,mkr,_K,gkr,hkr,pkr,WE,W8e,_kr,ukr,uK,bkr,vkr,Fkr,HE,H8e,Tkr,Mkr,bK,Ekr,Ckr,wkr,UE,U8e,Akr,Lkr,vK,ykr,xkr,$kr,JE,J8e,kkr,Skr,FK,Rkr,Pkr,Bkr,YE,Y8e,Nkr,Ikr,TK,qkr,jkr,Dkr,KE,K8e,Gkr,Okr,MK,Vkr,Xkr,zkr,ZE,YVe,Bc,eC,Z8e,Ax,Qkr,eMe,Wkr,KVe,fr,Lx,Hkr,Nc,Ukr,EK,Jkr,Ykr,CK,Kkr,Zkr,eSr,yx,oSr,oMe,rSr,tSr,aSr,Ot,xx,nSr,rMe,sSr,lSr,Ic,iSr,tMe,dSr,cSr,wK,fSr,mSr,gSr,oC,hSr,jr,$x,pSr,aMe,_Sr,uSr,un,bSr,nMe,vSr,FSr,sMe,TSr,MSr,lMe,ESr,CSr,wSr,ce,rC,iMe,ASr,LSr,AK,ySr,xSr,$Sr,tC,dMe,kSr,SSr,LK,RSr,PSr,BSr,aC,cMe,NSr,ISr,yK,qSr,jSr,DSr,nC,fMe,GSr,OSr,xK,VSr,XSr,zSr,sC,mMe,QSr,WSr,$K,HSr,USr,JSr,lC,gMe,YSr,KSr,kK,ZSr,eRr,oRr,iC,hMe,rRr,tRr,SK,aRr,nRr,sRr,dC,pMe,lRr,iRr,RK,dRr,cRr,fRr,cC,_Me,mRr,gRr,PK,hRr,pRr,_Rr,fC,uMe,uRr,bRr,BK,vRr,FRr,TRr,mC,bMe,MRr,ERr,NK,CRr,wRr,ARr,gC,vMe,LRr,yRr,IK,xRr,$Rr,kRr,hC,FMe,SRr,RRr,qK,PRr,BRr,NRr,pC,TMe,IRr,qRr,jK,jRr,DRr,GRr,_C,MMe,ORr,VRr,DK,XRr,zRr,QRr,uC,EMe,WRr,HRr,GK,URr,JRr,YRr,bC,CMe,KRr,ZRr,OK,ePr,oPr,rPr,vC,wMe,tPr,aPr,VK,nPr,sPr,lPr,FC,AMe,iPr,dPr,XK,cPr,fPr,mPr,TC,LMe,gPr,hPr,zK,pPr,_Pr,uPr,MC,ZVe,qc,EC,yMe,kx,bPr,xMe,vPr,eXe,mr,Sx,FPr,jc,TPr,QK,MPr,EPr,WK,CPr,wPr,APr,Rx,LPr,$Me,yPr,xPr,$Pr,Vt,Px,kPr,kMe,SPr,RPr,Dc,PPr,SMe,BPr,NPr,HK,IPr,qPr,jPr,CC,DPr,Dr,Bx,GPr,RMe,OPr,VPr,bn,XPr,PMe,zPr,QPr,BMe,WPr,HPr,NMe,UPr,JPr,YPr,IMe,wC,qMe,KPr,ZPr,UK,eBr,oBr,rBr,AC,oXe,Gc,LC,jMe,Nx,tBr,DMe,aBr,rXe,gr,Ix,nBr,Oc,sBr,JK,lBr,iBr,YK,dBr,cBr,fBr,qx,mBr,GMe,gBr,hBr,pBr,Xt,jx,_Br,OMe,uBr,bBr,Vc,vBr,VMe,FBr,TBr,KK,MBr,EBr,CBr,yC,wBr,Gr,Dx,ABr,XMe,LBr,yBr,vn,xBr,zMe,$Br,kBr,QMe,SBr,RBr,WMe,PBr,BBr,NBr,HMe,xC,UMe,IBr,qBr,ZK,jBr,DBr,GBr,$C,tXe,Xc,kC,JMe,Gx,OBr,YMe,VBr,aXe,hr,Ox,XBr,zc,zBr,eZ,QBr,WBr,oZ,HBr,UBr,JBr,Vx,YBr,KMe,KBr,ZBr,eNr,zt,Xx,oNr,ZMe,rNr,tNr,Qc,aNr,eEe,nNr,sNr,rZ,lNr,iNr,dNr,SC,cNr,Or,zx,fNr,oEe,mNr,gNr,Fn,hNr,rEe,pNr,_Nr,tEe,uNr,bNr,aEe,vNr,FNr,TNr,oe,RC,nEe,MNr,ENr,tZ,CNr,wNr,ANr,PC,sEe,LNr,yNr,aZ,xNr,$Nr,kNr,BC,lEe,SNr,RNr,nZ,PNr,BNr,NNr,NC,iEe,INr,qNr,sZ,jNr,DNr,GNr,IC,dEe,ONr,VNr,lZ,XNr,zNr,QNr,qC,cEe,WNr,HNr,iZ,UNr,JNr,YNr,jC,fEe,KNr,ZNr,dZ,eIr,oIr,rIr,DC,mEe,tIr,aIr,cZ,nIr,sIr,lIr,GC,gEe,iIr,dIr,fZ,cIr,fIr,mIr,OC,hEe,gIr,hIr,mZ,pIr,_Ir,uIr,VC,pEe,bIr,vIr,gZ,FIr,TIr,MIr,XC,_Ee,EIr,CIr,hZ,wIr,AIr,LIr,zC,uEe,yIr,xIr,pZ,$Ir,kIr,SIr,QC,bEe,RIr,PIr,_Z,BIr,NIr,IIr,WC,vEe,qIr,jIr,uZ,DIr,GIr,OIr,HC,FEe,VIr,XIr,bZ,zIr,QIr,WIr,UC,TEe,HIr,UIr,vZ,JIr,YIr,KIr,JC,MEe,ZIr,eqr,FZ,oqr,rqr,tqr,YC,EEe,aqr,nqr,TZ,sqr,lqr,iqr,KC,CEe,dqr,cqr,MZ,fqr,mqr,gqr,ZC,wEe,hqr,pqr,EZ,_qr,uqr,bqr,e3,AEe,vqr,Fqr,CZ,Tqr,Mqr,Eqr,o3,LEe,Cqr,wqr,wZ,Aqr,Lqr,yqr,r3,yEe,xqr,$qr,AZ,kqr,Sqr,Rqr,t3,xEe,Pqr,Bqr,LZ,Nqr,Iqr,qqr,a3,$Ee,jqr,Dqr,yZ,Gqr,Oqr,Vqr,n3,kEe,Xqr,zqr,xZ,Qqr,Wqr,Hqr,s3,nXe,Wc,l3,SEe,Qx,Uqr,REe,Jqr,sXe,pr,Wx,Yqr,Hc,Kqr,$Z,Zqr,ejr,kZ,ojr,rjr,tjr,Hx,ajr,PEe,njr,sjr,ljr,Qt,Ux,ijr,BEe,djr,cjr,Uc,fjr,NEe,mjr,gjr,SZ,hjr,pjr,_jr,i3,ujr,Vr,Jx,bjr,IEe,vjr,Fjr,Tn,Tjr,qEe,Mjr,Ejr,jEe,Cjr,wjr,DEe,Ajr,Ljr,yjr,xe,d3,GEe,xjr,$jr,RZ,kjr,Sjr,Rjr,c3,OEe,Pjr,Bjr,PZ,Njr,Ijr,qjr,f3,VEe,jjr,Djr,BZ,Gjr,Ojr,Vjr,m3,XEe,Xjr,zjr,NZ,Qjr,Wjr,Hjr,g3,zEe,Ujr,Jjr,IZ,Yjr,Kjr,Zjr,h3,QEe,eDr,oDr,qZ,rDr,tDr,aDr,p3,WEe,nDr,sDr,jZ,lDr,iDr,dDr,_3,HEe,cDr,fDr,DZ,mDr,gDr,hDr,u3,UEe,pDr,_Dr,GZ,uDr,bDr,vDr,b3,JEe,FDr,TDr,OZ,MDr,EDr,CDr,v3,lXe,Jc,F3,YEe,Yx,wDr,KEe,ADr,iXe,_r,Kx,LDr,Yc,yDr,VZ,xDr,$Dr,XZ,kDr,SDr,RDr,Zx,PDr,ZEe,BDr,NDr,IDr,Wt,e$,qDr,eCe,jDr,DDr,Kc,GDr,oCe,ODr,VDr,zZ,XDr,zDr,QDr,T3,WDr,Xr,o$,HDr,rCe,UDr,JDr,Mn,YDr,tCe,KDr,ZDr,aCe,eGr,oGr,nCe,rGr,tGr,aGr,Ee,M3,sCe,nGr,sGr,QZ,lGr,iGr,dGr,E3,lCe,cGr,fGr,WZ,mGr,gGr,hGr,C3,iCe,pGr,_Gr,HZ,uGr,bGr,vGr,w3,dCe,FGr,TGr,UZ,MGr,EGr,CGr,A3,cCe,wGr,AGr,JZ,LGr,yGr,xGr,L3,fCe,$Gr,kGr,YZ,SGr,RGr,PGr,y3,mCe,BGr,NGr,KZ,IGr,qGr,jGr,x3,gCe,DGr,GGr,ZZ,OGr,VGr,XGr,$3,hCe,zGr,QGr,eee,WGr,HGr,UGr,k3,pCe,JGr,YGr,oee,KGr,ZGr,eOr,S3,_Ce,oOr,rOr,ree,tOr,aOr,nOr,R3,uCe,sOr,lOr,tee,iOr,dOr,cOr,P3,bCe,fOr,mOr,aee,gOr,hOr,pOr,B3,dXe,Zc,N3,vCe,r$,_Or,FCe,uOr,cXe,ur,t$,bOr,ef,vOr,nee,FOr,TOr,see,MOr,EOr,COr,a$,wOr,TCe,AOr,LOr,yOr,Ht,n$,xOr,MCe,$Or,kOr,of,SOr,ECe,ROr,POr,lee,BOr,NOr,IOr,I3,qOr,zr,s$,jOr,CCe,DOr,GOr,En,OOr,wCe,VOr,XOr,ACe,zOr,QOr,LCe,WOr,HOr,UOr,$e,q3,yCe,JOr,YOr,iee,KOr,ZOr,eVr,j3,xCe,oVr,rVr,dee,tVr,aVr,nVr,D3,$Ce,sVr,lVr,cee,iVr,dVr,cVr,G3,kCe,fVr,mVr,fee,gVr,hVr,pVr,O3,SCe,_Vr,uVr,mee,bVr,vVr,FVr,V3,RCe,TVr,MVr,gee,EVr,CVr,wVr,X3,PCe,AVr,LVr,hee,yVr,xVr,$Vr,z3,BCe,kVr,SVr,pee,RVr,PVr,BVr,Q3,NCe,NVr,IVr,_ee,qVr,jVr,DVr,W3,ICe,GVr,OVr,uee,VVr,XVr,zVr,H3,fXe,rf,U3,qCe,l$,QVr,jCe,WVr,mXe,br,i$,HVr,tf,UVr,bee,JVr,YVr,vee,KVr,ZVr,eXr,d$,oXr,DCe,rXr,tXr,aXr,Ut,c$,nXr,GCe,sXr,lXr,af,iXr,OCe,dXr,cXr,Fee,fXr,mXr,gXr,J3,hXr,Qr,f$,pXr,VCe,_Xr,uXr,Cn,bXr,XCe,vXr,FXr,zCe,TXr,MXr,QCe,EXr,CXr,wXr,ke,Y3,WCe,AXr,LXr,Tee,yXr,xXr,$Xr,K3,HCe,kXr,SXr,Mee,RXr,PXr,BXr,Z3,UCe,NXr,IXr,Eee,qXr,jXr,DXr,e0,JCe,GXr,OXr,Cee,VXr,XXr,zXr,o0,YCe,QXr,WXr,wee,HXr,UXr,JXr,r0,KCe,YXr,KXr,Aee,ZXr,ezr,ozr,t0,ZCe,rzr,tzr,Lee,azr,nzr,szr,a0,e3e,lzr,izr,yee,dzr,czr,fzr,n0,o3e,mzr,gzr,xee,hzr,pzr,_zr,s0,r3e,uzr,bzr,$ee,vzr,Fzr,Tzr,l0,gXe,nf,i0,t3e,m$,Mzr,a3e,Ezr,hXe,vr,g$,Czr,sf,wzr,kee,Azr,Lzr,See,yzr,xzr,$zr,h$,kzr,n3e,Szr,Rzr,Pzr,Jt,p$,Bzr,s3e,Nzr,Izr,lf,qzr,l3e,jzr,Dzr,Ree,Gzr,Ozr,Vzr,d0,Xzr,Wr,_$,zzr,i3e,Qzr,Wzr,wn,Hzr,d3e,Uzr,Jzr,c3e,Yzr,Kzr,f3e,Zzr,eQr,oQr,Se,c0,m3e,rQr,tQr,Pee,aQr,nQr,sQr,f0,g3e,lQr,iQr,Bee,dQr,cQr,fQr,m0,h3e,mQr,gQr,Nee,hQr,pQr,_Qr,g0,p3e,uQr,bQr,Iee,vQr,FQr,TQr,h0,_3e,MQr,EQr,qee,CQr,wQr,AQr,p0,u3e,LQr,yQr,jee,xQr,$Qr,kQr,_0,b3e,SQr,RQr,Dee,PQr,BQr,NQr,u0,v3e,IQr,qQr,Gee,jQr,DQr,GQr,b0,F3e,OQr,VQr,Oee,XQr,zQr,QQr,v0,T3e,WQr,HQr,Vee,UQr,JQr,YQr,F0,pXe,df,T0,M3e,u$,KQr,E3e,ZQr,_Xe,Fr,b$,eWr,cf,oWr,Xee,rWr,tWr,zee,aWr,nWr,sWr,v$,lWr,C3e,iWr,dWr,cWr,Yt,F$,fWr,w3e,mWr,gWr,ff,hWr,A3e,pWr,_Wr,Qee,uWr,bWr,vWr,M0,FWr,Hr,T$,TWr,L3e,MWr,EWr,An,CWr,y3e,wWr,AWr,x3e,LWr,yWr,$3e,xWr,$Wr,kWr,Re,E0,k3e,SWr,RWr,Wee,PWr,BWr,NWr,C0,S3e,IWr,qWr,Hee,jWr,DWr,GWr,w0,R3e,OWr,VWr,Uee,XWr,zWr,QWr,A0,P3e,WWr,HWr,Jee,UWr,JWr,YWr,L0,B3e,KWr,ZWr,Yee,eHr,oHr,rHr,y0,N3e,tHr,aHr,Kee,nHr,sHr,lHr,x0,I3e,iHr,dHr,Zee,cHr,fHr,mHr,$0,q3e,gHr,hHr,eoe,pHr,_Hr,uHr,k0,j3e,bHr,vHr,ooe,FHr,THr,MHr,S0,D3e,EHr,CHr,roe,wHr,AHr,LHr,R0,uXe,mf,P0,G3e,M$,yHr,O3e,xHr,bXe,Tr,E$,$Hr,gf,kHr,toe,SHr,RHr,aoe,PHr,BHr,NHr,C$,IHr,V3e,qHr,jHr,DHr,Kt,w$,GHr,X3e,OHr,VHr,hf,XHr,z3e,zHr,QHr,noe,WHr,HHr,UHr,B0,JHr,Ur,A$,YHr,Q3e,KHr,ZHr,Ln,eUr,W3e,oUr,rUr,H3e,tUr,aUr,U3e,nUr,sUr,lUr,Ve,N0,J3e,iUr,dUr,soe,cUr,fUr,mUr,I0,Y3e,gUr,hUr,loe,pUr,_Ur,uUr,q0,K3e,bUr,vUr,ioe,FUr,TUr,MUr,j0,Z3e,EUr,CUr,doe,wUr,AUr,LUr,D0,e0e,yUr,xUr,coe,$Ur,kUr,SUr,G0,o0e,RUr,PUr,foe,BUr,NUr,IUr,O0,r0e,qUr,jUr,moe,DUr,GUr,OUr,V0,t0e,VUr,XUr,goe,zUr,QUr,WUr,X0,vXe,pf,z0,a0e,L$,HUr,n0e,UUr,FXe,Mr,y$,JUr,_f,YUr,hoe,KUr,ZUr,poe,eJr,oJr,rJr,x$,tJr,s0e,aJr,nJr,sJr,Zt,$$,lJr,l0e,iJr,dJr,uf,cJr,i0e,fJr,mJr,_oe,gJr,hJr,pJr,Q0,_Jr,Jr,k$,uJr,d0e,bJr,vJr,yn,FJr,c0e,TJr,MJr,f0e,EJr,CJr,m0e,wJr,AJr,LJr,Xe,W0,g0e,yJr,xJr,uoe,$Jr,kJr,SJr,H0,h0e,RJr,PJr,boe,BJr,NJr,IJr,U0,p0e,qJr,jJr,voe,DJr,GJr,OJr,J0,_0e,VJr,XJr,Foe,zJr,QJr,WJr,Y0,u0e,HJr,UJr,Toe,JJr,YJr,KJr,K0,b0e,ZJr,eYr,Moe,oYr,rYr,tYr,Z0,v0e,aYr,nYr,Eoe,sYr,lYr,iYr,ew,F0e,dYr,cYr,Coe,fYr,mYr,gYr,ow,TXe,bf,rw,T0e,S$,hYr,M0e,pYr,MXe,Er,R$,_Yr,vf,uYr,woe,bYr,vYr,Aoe,FYr,TYr,MYr,P$,EYr,E0e,CYr,wYr,AYr,ea,B$,LYr,C0e,yYr,xYr,Ff,$Yr,w0e,kYr,SYr,Loe,RYr,PYr,BYr,tw,NYr,Yr,N$,IYr,A0e,qYr,jYr,xn,DYr,L0e,GYr,OYr,y0e,VYr,XYr,x0e,zYr,QYr,WYr,$0e,aw,k0e,HYr,UYr,yoe,JYr,YYr,KYr,nw,EXe,Tf,sw,S0e,I$,ZYr,R0e,eKr,CXe,Cr,q$,oKr,Mf,rKr,xoe,tKr,aKr,$oe,nKr,sKr,lKr,j$,iKr,P0e,dKr,cKr,fKr,oa,D$,mKr,B0e,gKr,hKr,Ef,pKr,N0e,_Kr,uKr,koe,bKr,vKr,FKr,lw,TKr,Kr,G$,MKr,I0e,EKr,CKr,$n,wKr,q0e,AKr,LKr,j0e,yKr,xKr,D0e,$Kr,kKr,SKr,O$,iw,G0e,RKr,PKr,Soe,BKr,NKr,IKr,dw,O0e,qKr,jKr,Roe,DKr,GKr,OKr,cw,wXe,Cf,fw,V0e,V$,VKr,X0e,XKr,AXe,wr,X$,zKr,wf,QKr,Poe,WKr,HKr,Boe,UKr,JKr,YKr,z$,KKr,z0e,ZKr,eZr,oZr,ra,Q$,rZr,Q0e,tZr,aZr,Af,nZr,W0e,sZr,lZr,Noe,iZr,dZr,cZr,mw,fZr,Zr,W$,mZr,H0e,gZr,hZr,kn,pZr,U0e,_Zr,uZr,J0e,bZr,vZr,Y0e,FZr,TZr,MZr,K0e,gw,Z0e,EZr,CZr,Ioe,wZr,AZr,LZr,hw,LXe;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),q6=new re({}),j6=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bf=new yZr({props:{warning:!0,$$slots:{default:[vOt]},$$scope:{ctx:$}}}),D6=new re({}),G6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/configuration_auto.py#L604"}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/configuration_auto.py#L627"}}),zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[FOt]},$$scope:{ctx:$}}}),z6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/configuration_auto.py#L750"}}),Q6=new re({}),W6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/tokenization_auto.py#L401"}}),J6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17845/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/tokenization_auto.py#L415"}}),Lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[TOt]},$$scope:{ctx:$}}}),Y6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/tokenization_auto.py#L614"}}),K6=new re({}),Z6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17845/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),dp=new yZr({props:{$$slots:{default:[MOt]},$$scope:{ctx:$}}}),cp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[EOt]},$$scope:{ctx:$}}}),tL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/processing_auto.py#L88"}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/processing_auto.py#L102"}}),$p=new yZr({props:{$$slots:{default:[COt]},$$scope:{ctx:$}}}),kp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[wOt]},$$scope:{ctx:$}}}),dL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/processing_auto.py#L255"}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L773"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model">MobileNetV2Model</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Pp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[AOt]},$$scope:{ctx:$}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[LOt]},$$scope:{ctx:$}}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L780"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),qu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[yOt]},$$scope:{ctx:$}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xOt]},$$scope:{ctx:$}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L795"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[$Ot]},$$scope:{ctx:$}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kOt]},$$scope:{ctx:$}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L802"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[SOt]},$$scope:{ctx:$}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),sb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ROt]},$$scope:{ctx:$}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L809"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),ib=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[POt]},$$scope:{ctx:$}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BOt]},$$scope:{ctx:$}}}),BL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L818"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),xb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[NOt]},$$scope:{ctx:$}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IOt]},$$scope:{ctx:$}}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L863"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[qOt]},$$scope:{ctx:$}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jOt]},$$scope:{ctx:$}}}),zL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L870"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DOt]},$$scope:{ctx:$}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GOt]},$$scope:{ctx:$}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L856"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[OOt]},$$scope:{ctx:$}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VOt]},$$scope:{ctx:$}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L827"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XOt]},$$scope:{ctx:$}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zOt]},$$scope:{ctx:$}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L834"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L879"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification">MobileNetV2ForImageClassification</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[HOt]},$$scope:{ctx:$}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L918"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[JOt]},$$scope:{ctx:$}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L845"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L925"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L948"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),Ny=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L932"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L939"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L957"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L964"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L911"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L886"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),IT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L893"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation">MobileNetV2ForSemanticSegmentation</a> (MobileNetV2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_auto.py#L902"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),T8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),E8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),I8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),j8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),X8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Q8=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),Nx=new re({}),Ix=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lXt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[iXt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dXt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[cXt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fXt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mXt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gXt]},$$scope:{ctx:$}}}),I$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[hXt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[pXt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[_Xt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uXt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ei=o("Auto Classes"),$f=l(),nt=a("p"),Ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=a("code"),P6=o("from_pretrained()"),kf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ai=o("Instantiating one of "),Rn=a("a"),B6=o("AutoConfig"),Pn=o(", "),Bn=a("a"),N6=o("AutoModel"),Li=o(`, and
`),Nn=a("a"),I6=o("AutoTokenizer"),yi=o(" will directly create a class of the relevant architecture. For instance"),Sf=l(),F($a.$$.fragment),We=l(),Ae=a("p"),mS=o("will create a model that is an instance of "),xi=a("a"),gS=o("BertModel"),hS=o("."),Co=l(),ka=a("p"),pS=o("There is one class of "),Rf=a("code"),_S=o("AutoModel"),IQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),MOe=l(),$i=a("h2"),Pf=a("a"),Ste=a("span"),F(q6.$$.fragment),qQe=l(),Rte=a("span"),jQe=o("Extending the Auto Classes"),EOe=l(),In=a("p"),DQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pte=a("code"),GQe=o("NewModel"),OQe=o(", make sure you have a "),Bte=a("code"),VQe=o("NewModelConfig"),XQe=o(` then you can add those to the auto
classes like this:`),COe=l(),F(j6.$$.fragment),wOe=l(),uS=a("p"),zQe=o("You will then be able to use the auto classes like you would usually do!"),AOe=l(),F(Bf.$$.fragment),LOe=l(),ki=a("h2"),Nf=a("a"),Nte=a("span"),F(D6.$$.fragment),QQe=l(),Ite=a("span"),WQe=o("AutoConfig"),yOe=l(),wo=a("div"),F(G6.$$.fragment),HQe=l(),O6=a("p"),UQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bS=a("a"),JQe=o("from_pretrained()"),YQe=o(" class method."),KQe=l(),V6=a("p"),ZQe=o("This class cannot be instantiated directly using "),qte=a("code"),eWe=o("__init__()"),oWe=o(" (throws an error)."),rWe=l(),Ar=a("div"),F(X6.$$.fragment),tWe=l(),jte=a("p"),aWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),nWe=l(),Si=a("p"),sWe=o("The configuration class to instantiate is selected based on the "),Dte=a("code"),lWe=o("model_type"),iWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gte=a("code"),dWe=o("pretrained_model_name_or_path"),cWe=o(":"),fWe=l(),A=a("ul"),If=a("li"),Ote=a("strong"),mWe=o("albert"),gWe=o(" \u2014 "),vS=a("a"),hWe=o("AlbertConfig"),pWe=o(" (ALBERT model)"),_We=l(),qf=a("li"),Vte=a("strong"),uWe=o("bart"),bWe=o(" \u2014 "),FS=a("a"),vWe=o("BartConfig"),FWe=o(" (BART model)"),TWe=l(),jf=a("li"),Xte=a("strong"),MWe=o("beit"),EWe=o(" \u2014 "),TS=a("a"),CWe=o("BeitConfig"),wWe=o(" (BEiT model)"),AWe=l(),Df=a("li"),zte=a("strong"),LWe=o("bert"),yWe=o(" \u2014 "),MS=a("a"),xWe=o("BertConfig"),$We=o(" (BERT model)"),kWe=l(),Gf=a("li"),Qte=a("strong"),SWe=o("bert-generation"),RWe=o(" \u2014 "),ES=a("a"),PWe=o("BertGenerationConfig"),BWe=o(" (Bert Generation model)"),NWe=l(),Of=a("li"),Wte=a("strong"),IWe=o("big_bird"),qWe=o(" \u2014 "),CS=a("a"),jWe=o("BigBirdConfig"),DWe=o(" (BigBird model)"),GWe=l(),Vf=a("li"),Hte=a("strong"),OWe=o("bigbird_pegasus"),VWe=o(" \u2014 "),wS=a("a"),XWe=o("BigBirdPegasusConfig"),zWe=o(" (BigBird-Pegasus model)"),QWe=l(),Xf=a("li"),Ute=a("strong"),WWe=o("blenderbot"),HWe=o(" \u2014 "),AS=a("a"),UWe=o("BlenderbotConfig"),JWe=o(" (Blenderbot model)"),YWe=l(),zf=a("li"),Jte=a("strong"),KWe=o("blenderbot-small"),ZWe=o(" \u2014 "),LS=a("a"),eHe=o("BlenderbotSmallConfig"),oHe=o(" (BlenderbotSmall model)"),rHe=l(),Qf=a("li"),Yte=a("strong"),tHe=o("bloom"),aHe=o(" \u2014 "),yS=a("a"),nHe=o("BloomConfig"),sHe=o(" (BLOOM model)"),lHe=l(),Wf=a("li"),Kte=a("strong"),iHe=o("camembert"),dHe=o(" \u2014 "),xS=a("a"),cHe=o("CamembertConfig"),fHe=o(" (CamemBERT model)"),mHe=l(),Hf=a("li"),Zte=a("strong"),gHe=o("canine"),hHe=o(" \u2014 "),$S=a("a"),pHe=o("CanineConfig"),_He=o(" (CANINE model)"),uHe=l(),Uf=a("li"),eae=a("strong"),bHe=o("clip"),vHe=o(" \u2014 "),kS=a("a"),FHe=o("CLIPConfig"),THe=o(" (CLIP model)"),MHe=l(),Jf=a("li"),oae=a("strong"),EHe=o("codegen"),CHe=o(" \u2014 "),SS=a("a"),wHe=o("CodeGenConfig"),AHe=o(" (CodeGen model)"),LHe=l(),Yf=a("li"),rae=a("strong"),yHe=o("convbert"),xHe=o(" \u2014 "),RS=a("a"),$He=o("ConvBertConfig"),kHe=o(" (ConvBERT model)"),SHe=l(),Kf=a("li"),tae=a("strong"),RHe=o("convnext"),PHe=o(" \u2014 "),PS=a("a"),BHe=o("ConvNextConfig"),NHe=o(" (ConvNeXT model)"),IHe=l(),Zf=a("li"),aae=a("strong"),qHe=o("ctrl"),jHe=o(" \u2014 "),BS=a("a"),DHe=o("CTRLConfig"),GHe=o(" (CTRL model)"),OHe=l(),em=a("li"),nae=a("strong"),VHe=o("cvt"),XHe=o(" \u2014 "),NS=a("a"),zHe=o("CvtConfig"),QHe=o(" (CvT model)"),WHe=l(),om=a("li"),sae=a("strong"),HHe=o("data2vec-audio"),UHe=o(" \u2014 "),IS=a("a"),JHe=o("Data2VecAudioConfig"),YHe=o(" (Data2VecAudio model)"),KHe=l(),rm=a("li"),lae=a("strong"),ZHe=o("data2vec-text"),eUe=o(" \u2014 "),qS=a("a"),oUe=o("Data2VecTextConfig"),rUe=o(" (Data2VecText model)"),tUe=l(),tm=a("li"),iae=a("strong"),aUe=o("data2vec-vision"),nUe=o(" \u2014 "),jS=a("a"),sUe=o("Data2VecVisionConfig"),lUe=o(" (Data2VecVision model)"),iUe=l(),am=a("li"),dae=a("strong"),dUe=o("deberta"),cUe=o(" \u2014 "),DS=a("a"),fUe=o("DebertaConfig"),mUe=o(" (DeBERTa model)"),gUe=l(),nm=a("li"),cae=a("strong"),hUe=o("deberta-v2"),pUe=o(" \u2014 "),GS=a("a"),_Ue=o("DebertaV2Config"),uUe=o(" (DeBERTa-v2 model)"),bUe=l(),sm=a("li"),fae=a("strong"),vUe=o("decision_transformer"),FUe=o(" \u2014 "),OS=a("a"),TUe=o("DecisionTransformerConfig"),MUe=o(" (Decision Transformer model)"),EUe=l(),lm=a("li"),mae=a("strong"),CUe=o("deit"),wUe=o(" \u2014 "),VS=a("a"),AUe=o("DeiTConfig"),LUe=o(" (DeiT model)"),yUe=l(),im=a("li"),gae=a("strong"),xUe=o("detr"),$Ue=o(" \u2014 "),XS=a("a"),kUe=o("DetrConfig"),SUe=o(" (DETR model)"),RUe=l(),dm=a("li"),hae=a("strong"),PUe=o("distilbert"),BUe=o(" \u2014 "),zS=a("a"),NUe=o("DistilBertConfig"),IUe=o(" (DistilBERT model)"),qUe=l(),cm=a("li"),pae=a("strong"),jUe=o("dpr"),DUe=o(" \u2014 "),QS=a("a"),GUe=o("DPRConfig"),OUe=o(" (DPR model)"),VUe=l(),fm=a("li"),_ae=a("strong"),XUe=o("dpt"),zUe=o(" \u2014 "),WS=a("a"),QUe=o("DPTConfig"),WUe=o(" (DPT model)"),HUe=l(),mm=a("li"),uae=a("strong"),UUe=o("electra"),JUe=o(" \u2014 "),HS=a("a"),YUe=o("ElectraConfig"),KUe=o(" (ELECTRA model)"),ZUe=l(),gm=a("li"),bae=a("strong"),eJe=o("encoder-decoder"),oJe=o(" \u2014 "),US=a("a"),rJe=o("EncoderDecoderConfig"),tJe=o(" (Encoder decoder model)"),aJe=l(),hm=a("li"),vae=a("strong"),nJe=o("flaubert"),sJe=o(" \u2014 "),JS=a("a"),lJe=o("FlaubertConfig"),iJe=o(" (FlauBERT model)"),dJe=l(),pm=a("li"),Fae=a("strong"),cJe=o("flava"),fJe=o(" \u2014 "),YS=a("a"),mJe=o("FlavaConfig"),gJe=o(" (FLAVA model)"),hJe=l(),_m=a("li"),Tae=a("strong"),pJe=o("fnet"),_Je=o(" \u2014 "),KS=a("a"),uJe=o("FNetConfig"),bJe=o(" (FNet model)"),vJe=l(),um=a("li"),Mae=a("strong"),FJe=o("fsmt"),TJe=o(" \u2014 "),ZS=a("a"),MJe=o("FSMTConfig"),EJe=o(" (FairSeq Machine-Translation model)"),CJe=l(),bm=a("li"),Eae=a("strong"),wJe=o("funnel"),AJe=o(" \u2014 "),eR=a("a"),LJe=o("FunnelConfig"),yJe=o(" (Funnel Transformer model)"),xJe=l(),vm=a("li"),Cae=a("strong"),$Je=o("glpn"),kJe=o(" \u2014 "),oR=a("a"),SJe=o("GLPNConfig"),RJe=o(" (GLPN model)"),PJe=l(),Fm=a("li"),wae=a("strong"),BJe=o("gpt2"),NJe=o(" \u2014 "),rR=a("a"),IJe=o("GPT2Config"),qJe=o(" (OpenAI GPT-2 model)"),jJe=l(),Tm=a("li"),Aae=a("strong"),DJe=o("gpt_neo"),GJe=o(" \u2014 "),tR=a("a"),OJe=o("GPTNeoConfig"),VJe=o(" (GPT Neo model)"),XJe=l(),Mm=a("li"),Lae=a("strong"),zJe=o("gpt_neox"),QJe=o(" \u2014 "),aR=a("a"),WJe=o("GPTNeoXConfig"),HJe=o(" (GPT NeoX model)"),UJe=l(),Em=a("li"),yae=a("strong"),JJe=o("gptj"),YJe=o(" \u2014 "),nR=a("a"),KJe=o("GPTJConfig"),ZJe=o(" (GPT-J model)"),eYe=l(),Cm=a("li"),xae=a("strong"),oYe=o("hubert"),rYe=o(" \u2014 "),sR=a("a"),tYe=o("HubertConfig"),aYe=o(" (Hubert model)"),nYe=l(),wm=a("li"),$ae=a("strong"),sYe=o("ibert"),lYe=o(" \u2014 "),lR=a("a"),iYe=o("IBertConfig"),dYe=o(" (I-BERT model)"),cYe=l(),Am=a("li"),kae=a("strong"),fYe=o("imagegpt"),mYe=o(" \u2014 "),iR=a("a"),gYe=o("ImageGPTConfig"),hYe=o(" (ImageGPT model)"),pYe=l(),Lm=a("li"),Sae=a("strong"),_Ye=o("layoutlm"),uYe=o(" \u2014 "),dR=a("a"),bYe=o("LayoutLMConfig"),vYe=o(" (LayoutLM model)"),FYe=l(),ym=a("li"),Rae=a("strong"),TYe=o("layoutlmv2"),MYe=o(" \u2014 "),cR=a("a"),EYe=o("LayoutLMv2Config"),CYe=o(" (LayoutLMv2 model)"),wYe=l(),xm=a("li"),Pae=a("strong"),AYe=o("layoutlmv3"),LYe=o(" \u2014 "),fR=a("a"),yYe=o("LayoutLMv3Config"),xYe=o(" (LayoutLMv3 model)"),$Ye=l(),$m=a("li"),Bae=a("strong"),kYe=o("led"),SYe=o(" \u2014 "),mR=a("a"),RYe=o("LEDConfig"),PYe=o(" (LED model)"),BYe=l(),km=a("li"),Nae=a("strong"),NYe=o("levit"),IYe=o(" \u2014 "),gR=a("a"),qYe=o("LevitConfig"),jYe=o(" (LeViT model)"),DYe=l(),Sm=a("li"),Iae=a("strong"),GYe=o("longformer"),OYe=o(" \u2014 "),hR=a("a"),VYe=o("LongformerConfig"),XYe=o(" (Longformer model)"),zYe=l(),Rm=a("li"),qae=a("strong"),QYe=o("longt5"),WYe=o(" \u2014 "),pR=a("a"),HYe=o("LongT5Config"),UYe=o(" (LongT5 model)"),JYe=l(),Pm=a("li"),jae=a("strong"),YYe=o("luke"),KYe=o(" \u2014 "),_R=a("a"),ZYe=o("LukeConfig"),eKe=o(" (LUKE model)"),oKe=l(),Bm=a("li"),Dae=a("strong"),rKe=o("lxmert"),tKe=o(" \u2014 "),uR=a("a"),aKe=o("LxmertConfig"),nKe=o(" (LXMERT model)"),sKe=l(),Nm=a("li"),Gae=a("strong"),lKe=o("m2m_100"),iKe=o(" \u2014 "),bR=a("a"),dKe=o("M2M100Config"),cKe=o(" (M2M100 model)"),fKe=l(),Im=a("li"),Oae=a("strong"),mKe=o("marian"),gKe=o(" \u2014 "),vR=a("a"),hKe=o("MarianConfig"),pKe=o(" (Marian model)"),_Ke=l(),qm=a("li"),Vae=a("strong"),uKe=o("maskformer"),bKe=o(" \u2014 "),FR=a("a"),vKe=o("MaskFormerConfig"),FKe=o(" (MaskFormer model)"),TKe=l(),jm=a("li"),Xae=a("strong"),MKe=o("mbart"),EKe=o(" \u2014 "),TR=a("a"),CKe=o("MBartConfig"),wKe=o(" (mBART model)"),AKe=l(),Dm=a("li"),zae=a("strong"),LKe=o("mctct"),yKe=o(" \u2014 "),MR=a("a"),xKe=o("MCTCTConfig"),$Ke=o(" (M-CTC-T model)"),kKe=l(),Gm=a("li"),Qae=a("strong"),SKe=o("megatron-bert"),RKe=o(" \u2014 "),ER=a("a"),PKe=o("MegatronBertConfig"),BKe=o(" (Megatron-BERT model)"),NKe=l(),Om=a("li"),Wae=a("strong"),IKe=o("mobilebert"),qKe=o(" \u2014 "),CR=a("a"),jKe=o("MobileBertConfig"),DKe=o(" (MobileBERT model)"),GKe=l(),Vm=a("li"),Hae=a("strong"),OKe=o("mobilenet_v2"),VKe=o(" \u2014 "),wR=a("a"),XKe=o("MobileNetV2Config"),zKe=o(" (MobileNetV2 model)"),QKe=l(),Xm=a("li"),Uae=a("strong"),WKe=o("mpnet"),HKe=o(" \u2014 "),AR=a("a"),UKe=o("MPNetConfig"),JKe=o(" (MPNet model)"),YKe=l(),zm=a("li"),Jae=a("strong"),KKe=o("mt5"),ZKe=o(" \u2014 "),LR=a("a"),eZe=o("MT5Config"),oZe=o(" (MT5 model)"),rZe=l(),Qm=a("li"),Yae=a("strong"),tZe=o("nezha"),aZe=o(" \u2014 "),yR=a("a"),nZe=o("NezhaConfig"),sZe=o(" (Nezha model)"),lZe=l(),Wm=a("li"),Kae=a("strong"),iZe=o("nystromformer"),dZe=o(" \u2014 "),xR=a("a"),cZe=o("NystromformerConfig"),fZe=o(" (Nystr\xF6mformer model)"),mZe=l(),Hm=a("li"),Zae=a("strong"),gZe=o("openai-gpt"),hZe=o(" \u2014 "),$R=a("a"),pZe=o("OpenAIGPTConfig"),_Ze=o(" (OpenAI GPT model)"),uZe=l(),Um=a("li"),ene=a("strong"),bZe=o("opt"),vZe=o(" \u2014 "),kR=a("a"),FZe=o("OPTConfig"),TZe=o(" (OPT model)"),MZe=l(),Jm=a("li"),one=a("strong"),EZe=o("pegasus"),CZe=o(" \u2014 "),SR=a("a"),wZe=o("PegasusConfig"),AZe=o(" (Pegasus model)"),LZe=l(),Ym=a("li"),rne=a("strong"),yZe=o("perceiver"),xZe=o(" \u2014 "),RR=a("a"),$Ze=o("PerceiverConfig"),kZe=o(" (Perceiver model)"),SZe=l(),Km=a("li"),tne=a("strong"),RZe=o("plbart"),PZe=o(" \u2014 "),PR=a("a"),BZe=o("PLBartConfig"),NZe=o(" (PLBart model)"),IZe=l(),Zm=a("li"),ane=a("strong"),qZe=o("poolformer"),jZe=o(" \u2014 "),BR=a("a"),DZe=o("PoolFormerConfig"),GZe=o(" (PoolFormer model)"),OZe=l(),eg=a("li"),nne=a("strong"),VZe=o("prophetnet"),XZe=o(" \u2014 "),NR=a("a"),zZe=o("ProphetNetConfig"),QZe=o(" (ProphetNet model)"),WZe=l(),og=a("li"),sne=a("strong"),HZe=o("qdqbert"),UZe=o(" \u2014 "),IR=a("a"),JZe=o("QDQBertConfig"),YZe=o(" (QDQBert model)"),KZe=l(),rg=a("li"),lne=a("strong"),ZZe=o("rag"),eeo=o(" \u2014 "),qR=a("a"),oeo=o("RagConfig"),reo=o(" (RAG model)"),teo=l(),tg=a("li"),ine=a("strong"),aeo=o("realm"),neo=o(" \u2014 "),jR=a("a"),seo=o("RealmConfig"),leo=o(" (REALM model)"),ieo=l(),ag=a("li"),dne=a("strong"),deo=o("reformer"),ceo=o(" \u2014 "),DR=a("a"),feo=o("ReformerConfig"),meo=o(" (Reformer model)"),geo=l(),ng=a("li"),cne=a("strong"),heo=o("regnet"),peo=o(" \u2014 "),GR=a("a"),_eo=o("RegNetConfig"),ueo=o(" (RegNet model)"),beo=l(),sg=a("li"),fne=a("strong"),veo=o("rembert"),Feo=o(" \u2014 "),OR=a("a"),Teo=o("RemBertConfig"),Meo=o(" (RemBERT model)"),Eeo=l(),lg=a("li"),mne=a("strong"),Ceo=o("resnet"),weo=o(" \u2014 "),VR=a("a"),Aeo=o("ResNetConfig"),Leo=o(" (ResNet model)"),yeo=l(),ig=a("li"),gne=a("strong"),xeo=o("retribert"),$eo=o(" \u2014 "),XR=a("a"),keo=o("RetriBertConfig"),Seo=o(" (RetriBERT model)"),Reo=l(),dg=a("li"),hne=a("strong"),Peo=o("roberta"),Beo=o(" \u2014 "),zR=a("a"),Neo=o("RobertaConfig"),Ieo=o(" (RoBERTa model)"),qeo=l(),cg=a("li"),pne=a("strong"),jeo=o("roformer"),Deo=o(" \u2014 "),QR=a("a"),Geo=o("RoFormerConfig"),Oeo=o(" (RoFormer model)"),Veo=l(),fg=a("li"),_ne=a("strong"),Xeo=o("segformer"),zeo=o(" \u2014 "),WR=a("a"),Qeo=o("SegformerConfig"),Weo=o(" (SegFormer model)"),Heo=l(),mg=a("li"),une=a("strong"),Ueo=o("sew"),Jeo=o(" \u2014 "),HR=a("a"),Yeo=o("SEWConfig"),Keo=o(" (SEW model)"),Zeo=l(),gg=a("li"),bne=a("strong"),eoo=o("sew-d"),ooo=o(" \u2014 "),UR=a("a"),roo=o("SEWDConfig"),too=o(" (SEW-D model)"),aoo=l(),hg=a("li"),vne=a("strong"),noo=o("speech-encoder-decoder"),soo=o(" \u2014 "),JR=a("a"),loo=o("SpeechEncoderDecoderConfig"),ioo=o(" (Speech Encoder decoder model)"),doo=l(),pg=a("li"),Fne=a("strong"),coo=o("speech_to_text"),foo=o(" \u2014 "),YR=a("a"),moo=o("Speech2TextConfig"),goo=o(" (Speech2Text model)"),hoo=l(),_g=a("li"),Tne=a("strong"),poo=o("speech_to_text_2"),_oo=o(" \u2014 "),KR=a("a"),uoo=o("Speech2Text2Config"),boo=o(" (Speech2Text2 model)"),voo=l(),ug=a("li"),Mne=a("strong"),Foo=o("splinter"),Too=o(" \u2014 "),ZR=a("a"),Moo=o("SplinterConfig"),Eoo=o(" (Splinter model)"),Coo=l(),bg=a("li"),Ene=a("strong"),woo=o("squeezebert"),Aoo=o(" \u2014 "),eP=a("a"),Loo=o("SqueezeBertConfig"),yoo=o(" (SqueezeBERT model)"),xoo=l(),vg=a("li"),Cne=a("strong"),$oo=o("swin"),koo=o(" \u2014 "),oP=a("a"),Soo=o("SwinConfig"),Roo=o(" (Swin Transformer model)"),Poo=l(),Fg=a("li"),wne=a("strong"),Boo=o("t5"),Noo=o(" \u2014 "),rP=a("a"),Ioo=o("T5Config"),qoo=o(" (T5 model)"),joo=l(),Tg=a("li"),Ane=a("strong"),Doo=o("tapas"),Goo=o(" \u2014 "),tP=a("a"),Ooo=o("TapasConfig"),Voo=o(" (TAPAS model)"),Xoo=l(),Mg=a("li"),Lne=a("strong"),zoo=o("trajectory_transformer"),Qoo=o(" \u2014 "),aP=a("a"),Woo=o("TrajectoryTransformerConfig"),Hoo=o(" (Trajectory Transformer model)"),Uoo=l(),Eg=a("li"),yne=a("strong"),Joo=o("transfo-xl"),Yoo=o(" \u2014 "),nP=a("a"),Koo=o("TransfoXLConfig"),Zoo=o(" (Transformer-XL model)"),ero=l(),Cg=a("li"),xne=a("strong"),oro=o("trocr"),rro=o(" \u2014 "),sP=a("a"),tro=o("TrOCRConfig"),aro=o(" (TrOCR model)"),nro=l(),wg=a("li"),$ne=a("strong"),sro=o("unispeech"),lro=o(" \u2014 "),lP=a("a"),iro=o("UniSpeechConfig"),dro=o(" (UniSpeech model)"),cro=l(),Ag=a("li"),kne=a("strong"),fro=o("unispeech-sat"),mro=o(" \u2014 "),iP=a("a"),gro=o("UniSpeechSatConfig"),hro=o(" (UniSpeechSat model)"),pro=l(),Lg=a("li"),Sne=a("strong"),_ro=o("van"),uro=o(" \u2014 "),dP=a("a"),bro=o("VanConfig"),vro=o(" (VAN model)"),Fro=l(),yg=a("li"),Rne=a("strong"),Tro=o("vilt"),Mro=o(" \u2014 "),cP=a("a"),Ero=o("ViltConfig"),Cro=o(" (ViLT model)"),wro=l(),xg=a("li"),Pne=a("strong"),Aro=o("vision-encoder-decoder"),Lro=o(" \u2014 "),fP=a("a"),yro=o("VisionEncoderDecoderConfig"),xro=o(" (Vision Encoder decoder model)"),$ro=l(),$g=a("li"),Bne=a("strong"),kro=o("vision-text-dual-encoder"),Sro=o(" \u2014 "),mP=a("a"),Rro=o("VisionTextDualEncoderConfig"),Pro=o(" (VisionTextDualEncoder model)"),Bro=l(),kg=a("li"),Nne=a("strong"),Nro=o("visual_bert"),Iro=o(" \u2014 "),gP=a("a"),qro=o("VisualBertConfig"),jro=o(" (VisualBERT model)"),Dro=l(),Sg=a("li"),Ine=a("strong"),Gro=o("vit"),Oro=o(" \u2014 "),hP=a("a"),Vro=o("ViTConfig"),Xro=o(" (ViT model)"),zro=l(),Rg=a("li"),qne=a("strong"),Qro=o("vit_mae"),Wro=o(" \u2014 "),pP=a("a"),Hro=o("ViTMAEConfig"),Uro=o(" (ViTMAE model)"),Jro=l(),Pg=a("li"),jne=a("strong"),Yro=o("wav2vec2"),Kro=o(" \u2014 "),_P=a("a"),Zro=o("Wav2Vec2Config"),eto=o(" (Wav2Vec2 model)"),oto=l(),Bg=a("li"),Dne=a("strong"),rto=o("wav2vec2-conformer"),tto=o(" \u2014 "),uP=a("a"),ato=o("Wav2Vec2ConformerConfig"),nto=o(" (Wav2Vec2-Conformer model)"),sto=l(),Ng=a("li"),Gne=a("strong"),lto=o("wavlm"),ito=o(" \u2014 "),bP=a("a"),dto=o("WavLMConfig"),cto=o(" (WavLM model)"),fto=l(),Ig=a("li"),One=a("strong"),mto=o("xglm"),gto=o(" \u2014 "),vP=a("a"),hto=o("XGLMConfig"),pto=o(" (XGLM model)"),_to=l(),qg=a("li"),Vne=a("strong"),uto=o("xlm"),bto=o(" \u2014 "),FP=a("a"),vto=o("XLMConfig"),Fto=o(" (XLM model)"),Tto=l(),jg=a("li"),Xne=a("strong"),Mto=o("xlm-prophetnet"),Eto=o(" \u2014 "),TP=a("a"),Cto=o("XLMProphetNetConfig"),wto=o(" (XLM-ProphetNet model)"),Ato=l(),Dg=a("li"),zne=a("strong"),Lto=o("xlm-roberta"),yto=o(" \u2014 "),MP=a("a"),xto=o("XLMRobertaConfig"),$to=o(" (XLM-RoBERTa model)"),kto=l(),Gg=a("li"),Qne=a("strong"),Sto=o("xlm-roberta-xl"),Rto=o(" \u2014 "),EP=a("a"),Pto=o("XLMRobertaXLConfig"),Bto=o(" (XLM-RoBERTa-XL model)"),Nto=l(),Og=a("li"),Wne=a("strong"),Ito=o("xlnet"),qto=o(" \u2014 "),CP=a("a"),jto=o("XLNetConfig"),Dto=o(" (XLNet model)"),Gto=l(),Vg=a("li"),Hne=a("strong"),Oto=o("yolos"),Vto=o(" \u2014 "),wP=a("a"),Xto=o("YolosConfig"),zto=o(" (YOLOS model)"),Qto=l(),Xg=a("li"),Une=a("strong"),Wto=o("yoso"),Hto=o(" \u2014 "),AP=a("a"),Uto=o("YosoConfig"),Jto=o(" (YOSO model)"),Yto=l(),F(zg.$$.fragment),Kto=l(),Qg=a("div"),F(z6.$$.fragment),Zto=l(),Jne=a("p"),eao=o("Register a new configuration for this class."),xOe=l(),Ri=a("h2"),Wg=a("a"),Yne=a("span"),F(Q6.$$.fragment),oao=l(),Kne=a("span"),rao=o("AutoTokenizer"),$Oe=l(),Ao=a("div"),F(W6.$$.fragment),tao=l(),H6=a("p"),aao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LP=a("a"),nao=o("AutoTokenizer.from_pretrained()"),sao=o(" class method."),lao=l(),U6=a("p"),iao=o("This class cannot be instantiated directly using "),Zne=a("code"),dao=o("__init__()"),cao=o(" (throws an error)."),fao=l(),Lr=a("div"),F(J6.$$.fragment),mao=l(),ese=a("p"),gao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hao=l(),Sa=a("p"),pao=o("The tokenizer class to instantiate is selected based on the "),ose=a("code"),_ao=o("model_type"),uao=o(` property of the config object (either
passed as an argument or loaded from `),rse=a("code"),bao=o("pretrained_model_name_or_path"),vao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=a("code"),Fao=o("pretrained_model_name_or_path"),Tao=o(":"),Mao=l(),k=a("ul"),qn=a("li"),ase=a("strong"),Eao=o("albert"),Cao=o(" \u2014 "),yP=a("a"),wao=o("AlbertTokenizer"),Aao=o(" or "),xP=a("a"),Lao=o("AlbertTokenizerFast"),yao=o(" (ALBERT model)"),xao=l(),jn=a("li"),nse=a("strong"),$ao=o("bart"),kao=o(" \u2014 "),$P=a("a"),Sao=o("BartTokenizer"),Rao=o(" or "),kP=a("a"),Pao=o("BartTokenizerFast"),Bao=o(" (BART model)"),Nao=l(),Dn=a("li"),sse=a("strong"),Iao=o("barthez"),qao=o(" \u2014 "),SP=a("a"),jao=o("BarthezTokenizer"),Dao=o(" or "),RP=a("a"),Gao=o("BarthezTokenizerFast"),Oao=o(" (BARThez model)"),Vao=l(),Hg=a("li"),lse=a("strong"),Xao=o("bartpho"),zao=o(" \u2014 "),PP=a("a"),Qao=o("BartphoTokenizer"),Wao=o(" (BARTpho model)"),Hao=l(),Gn=a("li"),ise=a("strong"),Uao=o("bert"),Jao=o(" \u2014 "),BP=a("a"),Yao=o("BertTokenizer"),Kao=o(" or "),NP=a("a"),Zao=o("BertTokenizerFast"),eno=o(" (BERT model)"),ono=l(),Ug=a("li"),dse=a("strong"),rno=o("bert-generation"),tno=o(" \u2014 "),IP=a("a"),ano=o("BertGenerationTokenizer"),nno=o(" (Bert Generation model)"),sno=l(),Jg=a("li"),cse=a("strong"),lno=o("bert-japanese"),ino=o(" \u2014 "),qP=a("a"),dno=o("BertJapaneseTokenizer"),cno=o(" (BertJapanese model)"),fno=l(),Yg=a("li"),fse=a("strong"),mno=o("bertweet"),gno=o(" \u2014 "),jP=a("a"),hno=o("BertweetTokenizer"),pno=o(" (BERTweet model)"),_no=l(),On=a("li"),mse=a("strong"),uno=o("big_bird"),bno=o(" \u2014 "),DP=a("a"),vno=o("BigBirdTokenizer"),Fno=o(" or "),GP=a("a"),Tno=o("BigBirdTokenizerFast"),Mno=o(" (BigBird model)"),Eno=l(),Vn=a("li"),gse=a("strong"),Cno=o("bigbird_pegasus"),wno=o(" \u2014 "),OP=a("a"),Ano=o("PegasusTokenizer"),Lno=o(" or "),VP=a("a"),yno=o("PegasusTokenizerFast"),xno=o(" (BigBird-Pegasus model)"),$no=l(),Xn=a("li"),hse=a("strong"),kno=o("blenderbot"),Sno=o(" \u2014 "),XP=a("a"),Rno=o("BlenderbotTokenizer"),Pno=o(" or "),zP=a("a"),Bno=o("BlenderbotTokenizerFast"),Nno=o(" (Blenderbot model)"),Ino=l(),Kg=a("li"),pse=a("strong"),qno=o("blenderbot-small"),jno=o(" \u2014 "),QP=a("a"),Dno=o("BlenderbotSmallTokenizer"),Gno=o(" (BlenderbotSmall model)"),Ono=l(),Zg=a("li"),_se=a("strong"),Vno=o("bloom"),Xno=o(" \u2014 "),WP=a("a"),zno=o("BloomTokenizerFast"),Qno=o(" (BLOOM model)"),Wno=l(),eh=a("li"),use=a("strong"),Hno=o("byt5"),Uno=o(" \u2014 "),HP=a("a"),Jno=o("ByT5Tokenizer"),Yno=o(" (ByT5 model)"),Kno=l(),zn=a("li"),bse=a("strong"),Zno=o("camembert"),eso=o(" \u2014 "),UP=a("a"),oso=o("CamembertTokenizer"),rso=o(" or "),JP=a("a"),tso=o("CamembertTokenizerFast"),aso=o(" (CamemBERT model)"),nso=l(),oh=a("li"),vse=a("strong"),sso=o("canine"),lso=o(" \u2014 "),YP=a("a"),iso=o("CanineTokenizer"),dso=o(" (CANINE model)"),cso=l(),Qn=a("li"),Fse=a("strong"),fso=o("clip"),mso=o(" \u2014 "),KP=a("a"),gso=o("CLIPTokenizer"),hso=o(" or "),ZP=a("a"),pso=o("CLIPTokenizerFast"),_so=o(" (CLIP model)"),uso=l(),Wn=a("li"),Tse=a("strong"),bso=o("codegen"),vso=o(" \u2014 "),eB=a("a"),Fso=o("CodeGenTokenizer"),Tso=o(" or "),oB=a("a"),Mso=o("CodeGenTokenizerFast"),Eso=o(" (CodeGen model)"),Cso=l(),Hn=a("li"),Mse=a("strong"),wso=o("convbert"),Aso=o(" \u2014 "),rB=a("a"),Lso=o("ConvBertTokenizer"),yso=o(" or "),tB=a("a"),xso=o("ConvBertTokenizerFast"),$so=o(" (ConvBERT model)"),kso=l(),Un=a("li"),Ese=a("strong"),Sso=o("cpm"),Rso=o(" \u2014 "),aB=a("a"),Pso=o("CpmTokenizer"),Bso=o(" or "),nB=a("a"),Nso=o("CpmTokenizerFast"),Iso=o(" (CPM model)"),qso=l(),rh=a("li"),Cse=a("strong"),jso=o("ctrl"),Dso=o(" \u2014 "),sB=a("a"),Gso=o("CTRLTokenizer"),Oso=o(" (CTRL model)"),Vso=l(),Jn=a("li"),wse=a("strong"),Xso=o("data2vec-text"),zso=o(" \u2014 "),lB=a("a"),Qso=o("RobertaTokenizer"),Wso=o(" or "),iB=a("a"),Hso=o("RobertaTokenizerFast"),Uso=o(" (Data2VecText model)"),Jso=l(),Yn=a("li"),Ase=a("strong"),Yso=o("deberta"),Kso=o(" \u2014 "),dB=a("a"),Zso=o("DebertaTokenizer"),elo=o(" or "),cB=a("a"),olo=o("DebertaTokenizerFast"),rlo=o(" (DeBERTa model)"),tlo=l(),Kn=a("li"),Lse=a("strong"),alo=o("deberta-v2"),nlo=o(" \u2014 "),fB=a("a"),slo=o("DebertaV2Tokenizer"),llo=o(" or "),mB=a("a"),ilo=o("DebertaV2TokenizerFast"),dlo=o(" (DeBERTa-v2 model)"),clo=l(),Zn=a("li"),yse=a("strong"),flo=o("distilbert"),mlo=o(" \u2014 "),gB=a("a"),glo=o("DistilBertTokenizer"),hlo=o(" or "),hB=a("a"),plo=o("DistilBertTokenizerFast"),_lo=o(" (DistilBERT model)"),ulo=l(),es=a("li"),xse=a("strong"),blo=o("dpr"),vlo=o(" \u2014 "),pB=a("a"),Flo=o("DPRQuestionEncoderTokenizer"),Tlo=o(" or "),_B=a("a"),Mlo=o("DPRQuestionEncoderTokenizerFast"),Elo=o(" (DPR model)"),Clo=l(),os=a("li"),$se=a("strong"),wlo=o("electra"),Alo=o(" \u2014 "),uB=a("a"),Llo=o("ElectraTokenizer"),ylo=o(" or "),bB=a("a"),xlo=o("ElectraTokenizerFast"),$lo=o(" (ELECTRA model)"),klo=l(),th=a("li"),kse=a("strong"),Slo=o("flaubert"),Rlo=o(" \u2014 "),vB=a("a"),Plo=o("FlaubertTokenizer"),Blo=o(" (FlauBERT model)"),Nlo=l(),rs=a("li"),Sse=a("strong"),Ilo=o("fnet"),qlo=o(" \u2014 "),FB=a("a"),jlo=o("FNetTokenizer"),Dlo=o(" or "),TB=a("a"),Glo=o("FNetTokenizerFast"),Olo=o(" (FNet model)"),Vlo=l(),ah=a("li"),Rse=a("strong"),Xlo=o("fsmt"),zlo=o(" \u2014 "),MB=a("a"),Qlo=o("FSMTTokenizer"),Wlo=o(" (FairSeq Machine-Translation model)"),Hlo=l(),ts=a("li"),Pse=a("strong"),Ulo=o("funnel"),Jlo=o(" \u2014 "),EB=a("a"),Ylo=o("FunnelTokenizer"),Klo=o(" or "),CB=a("a"),Zlo=o("FunnelTokenizerFast"),eio=o(" (Funnel Transformer model)"),oio=l(),as=a("li"),Bse=a("strong"),rio=o("gpt2"),tio=o(" \u2014 "),wB=a("a"),aio=o("GPT2Tokenizer"),nio=o(" or "),AB=a("a"),sio=o("GPT2TokenizerFast"),lio=o(" (OpenAI GPT-2 model)"),iio=l(),ns=a("li"),Nse=a("strong"),dio=o("gpt_neo"),cio=o(" \u2014 "),LB=a("a"),fio=o("GPT2Tokenizer"),mio=o(" or "),yB=a("a"),gio=o("GPT2TokenizerFast"),hio=o(" (GPT Neo model)"),pio=l(),nh=a("li"),Ise=a("strong"),_io=o("gpt_neox"),uio=o(" \u2014 "),xB=a("a"),bio=o("GPTNeoXTokenizerFast"),vio=o(" (GPT NeoX model)"),Fio=l(),ss=a("li"),qse=a("strong"),Tio=o("gptj"),Mio=o(" \u2014 "),$B=a("a"),Eio=o("GPT2Tokenizer"),Cio=o(" or "),kB=a("a"),wio=o("GPT2TokenizerFast"),Aio=o(" (GPT-J model)"),Lio=l(),ls=a("li"),jse=a("strong"),yio=o("herbert"),xio=o(" \u2014 "),SB=a("a"),$io=o("HerbertTokenizer"),kio=o(" or "),RB=a("a"),Sio=o("HerbertTokenizerFast"),Rio=o(" (HerBERT model)"),Pio=l(),sh=a("li"),Dse=a("strong"),Bio=o("hubert"),Nio=o(" \u2014 "),PB=a("a"),Iio=o("Wav2Vec2CTCTokenizer"),qio=o(" (Hubert model)"),jio=l(),is=a("li"),Gse=a("strong"),Dio=o("ibert"),Gio=o(" \u2014 "),BB=a("a"),Oio=o("RobertaTokenizer"),Vio=o(" or "),NB=a("a"),Xio=o("RobertaTokenizerFast"),zio=o(" (I-BERT model)"),Qio=l(),ds=a("li"),Ose=a("strong"),Wio=o("layoutlm"),Hio=o(" \u2014 "),IB=a("a"),Uio=o("LayoutLMTokenizer"),Jio=o(" or "),qB=a("a"),Yio=o("LayoutLMTokenizerFast"),Kio=o(" (LayoutLM model)"),Zio=l(),cs=a("li"),Vse=a("strong"),edo=o("layoutlmv2"),odo=o(" \u2014 "),jB=a("a"),rdo=o("LayoutLMv2Tokenizer"),tdo=o(" or "),DB=a("a"),ado=o("LayoutLMv2TokenizerFast"),ndo=o(" (LayoutLMv2 model)"),sdo=l(),fs=a("li"),Xse=a("strong"),ldo=o("layoutlmv3"),ido=o(" \u2014 "),GB=a("a"),ddo=o("LayoutLMv3Tokenizer"),cdo=o(" or "),OB=a("a"),fdo=o("LayoutLMv3TokenizerFast"),mdo=o(" (LayoutLMv3 model)"),gdo=l(),ms=a("li"),zse=a("strong"),hdo=o("layoutxlm"),pdo=o(" \u2014 "),VB=a("a"),_do=o("LayoutXLMTokenizer"),udo=o(" or "),XB=a("a"),bdo=o("LayoutXLMTokenizerFast"),vdo=o(" (LayoutXLM model)"),Fdo=l(),gs=a("li"),Qse=a("strong"),Tdo=o("led"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("LEDTokenizer"),Cdo=o(" or "),QB=a("a"),wdo=o("LEDTokenizerFast"),Ado=o(" (LED model)"),Ldo=l(),hs=a("li"),Wse=a("strong"),ydo=o("longformer"),xdo=o(" \u2014 "),WB=a("a"),$do=o("LongformerTokenizer"),kdo=o(" or "),HB=a("a"),Sdo=o("LongformerTokenizerFast"),Rdo=o(" (Longformer model)"),Pdo=l(),ps=a("li"),Hse=a("strong"),Bdo=o("longt5"),Ndo=o(" \u2014 "),UB=a("a"),Ido=o("T5Tokenizer"),qdo=o(" or "),JB=a("a"),jdo=o("T5TokenizerFast"),Ddo=o(" (LongT5 model)"),Gdo=l(),lh=a("li"),Use=a("strong"),Odo=o("luke"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("LukeTokenizer"),zdo=o(" (LUKE model)"),Qdo=l(),_s=a("li"),Jse=a("strong"),Wdo=o("lxmert"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("LxmertTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("LxmertTokenizerFast"),Kdo=o(" (LXMERT model)"),Zdo=l(),ih=a("li"),Yse=a("strong"),eco=o("m2m_100"),oco=o(" \u2014 "),eN=a("a"),rco=o("M2M100Tokenizer"),tco=o(" (M2M100 model)"),aco=l(),dh=a("li"),Kse=a("strong"),nco=o("marian"),sco=o(" \u2014 "),oN=a("a"),lco=o("MarianTokenizer"),ico=o(" (Marian model)"),dco=l(),us=a("li"),Zse=a("strong"),cco=o("mbart"),fco=o(" \u2014 "),rN=a("a"),mco=o("MBartTokenizer"),gco=o(" or "),tN=a("a"),hco=o("MBartTokenizerFast"),pco=o(" (mBART model)"),_co=l(),bs=a("li"),ele=a("strong"),uco=o("mbart50"),bco=o(" \u2014 "),aN=a("a"),vco=o("MBart50Tokenizer"),Fco=o(" or "),nN=a("a"),Tco=o("MBart50TokenizerFast"),Mco=o(" (mBART-50 model)"),Eco=l(),vs=a("li"),ole=a("strong"),Cco=o("megatron-bert"),wco=o(" \u2014 "),sN=a("a"),Aco=o("BertTokenizer"),Lco=o(" or "),lN=a("a"),yco=o("BertTokenizerFast"),xco=o(" (Megatron-BERT model)"),$co=l(),ch=a("li"),rle=a("strong"),kco=o("mluke"),Sco=o(" \u2014 "),iN=a("a"),Rco=o("MLukeTokenizer"),Pco=o(" (mLUKE model)"),Bco=l(),Fs=a("li"),tle=a("strong"),Nco=o("mobilebert"),Ico=o(" \u2014 "),dN=a("a"),qco=o("MobileBertTokenizer"),jco=o(" or "),cN=a("a"),Dco=o("MobileBertTokenizerFast"),Gco=o(" (MobileBERT model)"),Oco=l(),Ts=a("li"),ale=a("strong"),Vco=o("mpnet"),Xco=o(" \u2014 "),fN=a("a"),zco=o("MPNetTokenizer"),Qco=o(" or "),mN=a("a"),Wco=o("MPNetTokenizerFast"),Hco=o(" (MPNet model)"),Uco=l(),Ms=a("li"),nle=a("strong"),Jco=o("mt5"),Yco=o(" \u2014 "),gN=a("a"),Kco=o("MT5Tokenizer"),Zco=o(" or "),hN=a("a"),efo=o("MT5TokenizerFast"),ofo=o(" (MT5 model)"),rfo=l(),Es=a("li"),sle=a("strong"),tfo=o("nezha"),afo=o(" \u2014 "),pN=a("a"),nfo=o("BertTokenizer"),sfo=o(" or "),_N=a("a"),lfo=o("BertTokenizerFast"),ifo=o(" (Nezha model)"),dfo=l(),Cs=a("li"),lle=a("strong"),cfo=o("nystromformer"),ffo=o(" \u2014 "),uN=a("a"),mfo=o("AlbertTokenizer"),gfo=o(" or "),bN=a("a"),hfo=o("AlbertTokenizerFast"),pfo=o(" (Nystr\xF6mformer model)"),_fo=l(),ws=a("li"),ile=a("strong"),ufo=o("openai-gpt"),bfo=o(" \u2014 "),vN=a("a"),vfo=o("OpenAIGPTTokenizer"),Ffo=o(" or "),FN=a("a"),Tfo=o("OpenAIGPTTokenizerFast"),Mfo=o(" (OpenAI GPT model)"),Efo=l(),fh=a("li"),dle=a("strong"),Cfo=o("opt"),wfo=o(" \u2014 "),TN=a("a"),Afo=o("GPT2Tokenizer"),Lfo=o(" (OPT model)"),yfo=l(),As=a("li"),cle=a("strong"),xfo=o("pegasus"),$fo=o(" \u2014 "),MN=a("a"),kfo=o("PegasusTokenizer"),Sfo=o(" or "),EN=a("a"),Rfo=o("PegasusTokenizerFast"),Pfo=o(" (Pegasus model)"),Bfo=l(),mh=a("li"),fle=a("strong"),Nfo=o("perceiver"),Ifo=o(" \u2014 "),CN=a("a"),qfo=o("PerceiverTokenizer"),jfo=o(" (Perceiver model)"),Dfo=l(),gh=a("li"),mle=a("strong"),Gfo=o("phobert"),Ofo=o(" \u2014 "),wN=a("a"),Vfo=o("PhobertTokenizer"),Xfo=o(" (PhoBERT model)"),zfo=l(),hh=a("li"),gle=a("strong"),Qfo=o("plbart"),Wfo=o(" \u2014 "),AN=a("a"),Hfo=o("PLBartTokenizer"),Ufo=o(" (PLBart model)"),Jfo=l(),ph=a("li"),hle=a("strong"),Yfo=o("prophetnet"),Kfo=o(" \u2014 "),LN=a("a"),Zfo=o("ProphetNetTokenizer"),emo=o(" (ProphetNet model)"),omo=l(),Ls=a("li"),ple=a("strong"),rmo=o("qdqbert"),tmo=o(" \u2014 "),yN=a("a"),amo=o("BertTokenizer"),nmo=o(" or "),xN=a("a"),smo=o("BertTokenizerFast"),lmo=o(" (QDQBert model)"),imo=l(),_h=a("li"),_le=a("strong"),dmo=o("rag"),cmo=o(" \u2014 "),$N=a("a"),fmo=o("RagTokenizer"),mmo=o(" (RAG model)"),gmo=l(),ys=a("li"),ule=a("strong"),hmo=o("realm"),pmo=o(" \u2014 "),kN=a("a"),_mo=o("RealmTokenizer"),umo=o(" or "),SN=a("a"),bmo=o("RealmTokenizerFast"),vmo=o(" (REALM model)"),Fmo=l(),xs=a("li"),ble=a("strong"),Tmo=o("reformer"),Mmo=o(" \u2014 "),RN=a("a"),Emo=o("ReformerTokenizer"),Cmo=o(" or "),PN=a("a"),wmo=o("ReformerTokenizerFast"),Amo=o(" (Reformer model)"),Lmo=l(),$s=a("li"),vle=a("strong"),ymo=o("rembert"),xmo=o(" \u2014 "),BN=a("a"),$mo=o("RemBertTokenizer"),kmo=o(" or "),NN=a("a"),Smo=o("RemBertTokenizerFast"),Rmo=o(" (RemBERT model)"),Pmo=l(),ks=a("li"),Fle=a("strong"),Bmo=o("retribert"),Nmo=o(" \u2014 "),IN=a("a"),Imo=o("RetriBertTokenizer"),qmo=o(" or "),qN=a("a"),jmo=o("RetriBertTokenizerFast"),Dmo=o(" (RetriBERT model)"),Gmo=l(),Ss=a("li"),Tle=a("strong"),Omo=o("roberta"),Vmo=o(" \u2014 "),jN=a("a"),Xmo=o("RobertaTokenizer"),zmo=o(" or "),DN=a("a"),Qmo=o("RobertaTokenizerFast"),Wmo=o(" (RoBERTa model)"),Hmo=l(),Rs=a("li"),Mle=a("strong"),Umo=o("roformer"),Jmo=o(" \u2014 "),GN=a("a"),Ymo=o("RoFormerTokenizer"),Kmo=o(" or "),ON=a("a"),Zmo=o("RoFormerTokenizerFast"),ego=o(" (RoFormer model)"),ogo=l(),uh=a("li"),Ele=a("strong"),rgo=o("speech_to_text"),tgo=o(" \u2014 "),VN=a("a"),ago=o("Speech2TextTokenizer"),ngo=o(" (Speech2Text model)"),sgo=l(),bh=a("li"),Cle=a("strong"),lgo=o("speech_to_text_2"),igo=o(" \u2014 "),XN=a("a"),dgo=o("Speech2Text2Tokenizer"),cgo=o(" (Speech2Text2 model)"),fgo=l(),Ps=a("li"),wle=a("strong"),mgo=o("splinter"),ggo=o(" \u2014 "),zN=a("a"),hgo=o("SplinterTokenizer"),pgo=o(" or "),QN=a("a"),_go=o("SplinterTokenizerFast"),ugo=o(" (Splinter model)"),bgo=l(),Bs=a("li"),Ale=a("strong"),vgo=o("squeezebert"),Fgo=o(" \u2014 "),WN=a("a"),Tgo=o("SqueezeBertTokenizer"),Mgo=o(" or "),HN=a("a"),Ego=o("SqueezeBertTokenizerFast"),Cgo=o(" (SqueezeBERT model)"),wgo=l(),Ns=a("li"),Lle=a("strong"),Ago=o("t5"),Lgo=o(" \u2014 "),UN=a("a"),ygo=o("T5Tokenizer"),xgo=o(" or "),JN=a("a"),$go=o("T5TokenizerFast"),kgo=o(" (T5 model)"),Sgo=l(),vh=a("li"),yle=a("strong"),Rgo=o("tapas"),Pgo=o(" \u2014 "),YN=a("a"),Bgo=o("TapasTokenizer"),Ngo=o(" (TAPAS model)"),Igo=l(),Fh=a("li"),xle=a("strong"),qgo=o("tapex"),jgo=o(" \u2014 "),KN=a("a"),Dgo=o("TapexTokenizer"),Ggo=o(" (TAPEX model)"),Ogo=l(),Th=a("li"),$le=a("strong"),Vgo=o("transfo-xl"),Xgo=o(" \u2014 "),ZN=a("a"),zgo=o("TransfoXLTokenizer"),Qgo=o(" (Transformer-XL model)"),Wgo=l(),Is=a("li"),kle=a("strong"),Hgo=o("vilt"),Ugo=o(" \u2014 "),eI=a("a"),Jgo=o("BertTokenizer"),Ygo=o(" or "),oI=a("a"),Kgo=o("BertTokenizerFast"),Zgo=o(" (ViLT model)"),eho=l(),qs=a("li"),Sle=a("strong"),oho=o("visual_bert"),rho=o(" \u2014 "),rI=a("a"),tho=o("BertTokenizer"),aho=o(" or "),tI=a("a"),nho=o("BertTokenizerFast"),sho=o(" (VisualBERT model)"),lho=l(),Mh=a("li"),Rle=a("strong"),iho=o("wav2vec2"),dho=o(" \u2014 "),aI=a("a"),cho=o("Wav2Vec2CTCTokenizer"),fho=o(" (Wav2Vec2 model)"),mho=l(),Eh=a("li"),Ple=a("strong"),gho=o("wav2vec2-conformer"),hho=o(" \u2014 "),nI=a("a"),pho=o("Wav2Vec2CTCTokenizer"),_ho=o(" (Wav2Vec2-Conformer model)"),uho=l(),Ch=a("li"),Ble=a("strong"),bho=o("wav2vec2_phoneme"),vho=o(" \u2014 "),sI=a("a"),Fho=o("Wav2Vec2PhonemeCTCTokenizer"),Tho=o(" (Wav2Vec2Phoneme model)"),Mho=l(),js=a("li"),Nle=a("strong"),Eho=o("xglm"),Cho=o(" \u2014 "),lI=a("a"),who=o("XGLMTokenizer"),Aho=o(" or "),iI=a("a"),Lho=o("XGLMTokenizerFast"),yho=o(" (XGLM model)"),xho=l(),wh=a("li"),Ile=a("strong"),$ho=o("xlm"),kho=o(" \u2014 "),dI=a("a"),Sho=o("XLMTokenizer"),Rho=o(" (XLM model)"),Pho=l(),Ah=a("li"),qle=a("strong"),Bho=o("xlm-prophetnet"),Nho=o(" \u2014 "),cI=a("a"),Iho=o("XLMProphetNetTokenizer"),qho=o(" (XLM-ProphetNet model)"),jho=l(),Ds=a("li"),jle=a("strong"),Dho=o("xlm-roberta"),Gho=o(" \u2014 "),fI=a("a"),Oho=o("XLMRobertaTokenizer"),Vho=o(" or "),mI=a("a"),Xho=o("XLMRobertaTokenizerFast"),zho=o(" (XLM-RoBERTa model)"),Qho=l(),Gs=a("li"),Dle=a("strong"),Who=o("xlm-roberta-xl"),Hho=o(" \u2014 "),gI=a("a"),Uho=o("RobertaTokenizer"),Jho=o(" or "),hI=a("a"),Yho=o("RobertaTokenizerFast"),Kho=o(" (XLM-RoBERTa-XL model)"),Zho=l(),Os=a("li"),Gle=a("strong"),epo=o("xlnet"),opo=o(" \u2014 "),pI=a("a"),rpo=o("XLNetTokenizer"),tpo=o(" or "),_I=a("a"),apo=o("XLNetTokenizerFast"),npo=o(" (XLNet model)"),spo=l(),Vs=a("li"),Ole=a("strong"),lpo=o("yoso"),ipo=o(" \u2014 "),uI=a("a"),dpo=o("AlbertTokenizer"),cpo=o(" or "),bI=a("a"),fpo=o("AlbertTokenizerFast"),mpo=o(" (YOSO model)"),gpo=l(),F(Lh.$$.fragment),hpo=l(),yh=a("div"),F(Y6.$$.fragment),ppo=l(),Vle=a("p"),_po=o("Register a new tokenizer in this mapping."),kOe=l(),Pi=a("h2"),xh=a("a"),Xle=a("span"),F(K6.$$.fragment),upo=l(),zle=a("span"),bpo=o("AutoFeatureExtractor"),SOe=l(),Lo=a("div"),F(Z6.$$.fragment),vpo=l(),eL=a("p"),Fpo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vI=a("a"),Tpo=o("AutoFeatureExtractor.from_pretrained()"),Mpo=o(" class method."),Epo=l(),oL=a("p"),Cpo=o("This class cannot be instantiated directly using "),Qle=a("code"),wpo=o("__init__()"),Apo=o(" (throws an error)."),Lpo=l(),He=a("div"),F(rL.$$.fragment),ypo=l(),Wle=a("p"),xpo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$po=l(),Ra=a("p"),kpo=o("The feature extractor class to instantiate is selected based on the "),Hle=a("code"),Spo=o("model_type"),Rpo=o(` property of the config object
(either passed as an argument or loaded from `),Ule=a("code"),Ppo=o("pretrained_model_name_or_path"),Bpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jle=a("code"),Npo=o("pretrained_model_name_or_path"),Ipo=o(":"),qpo=l(),Y=a("ul"),$h=a("li"),Yle=a("strong"),jpo=o("beit"),Dpo=o(" \u2014 "),FI=a("a"),Gpo=o("BeitFeatureExtractor"),Opo=o(" (BEiT model)"),Vpo=l(),kh=a("li"),Kle=a("strong"),Xpo=o("clip"),zpo=o(" \u2014 "),TI=a("a"),Qpo=o("CLIPFeatureExtractor"),Wpo=o(" (CLIP model)"),Hpo=l(),Sh=a("li"),Zle=a("strong"),Upo=o("convnext"),Jpo=o(" \u2014 "),MI=a("a"),Ypo=o("ConvNextFeatureExtractor"),Kpo=o(" (ConvNeXT model)"),Zpo=l(),Rh=a("li"),eie=a("strong"),e_o=o("cvt"),o_o=o(" \u2014 "),EI=a("a"),r_o=o("ConvNextFeatureExtractor"),t_o=o(" (CvT model)"),a_o=l(),Ph=a("li"),oie=a("strong"),n_o=o("data2vec-audio"),s_o=o(" \u2014 "),CI=a("a"),l_o=o("Wav2Vec2FeatureExtractor"),i_o=o(" (Data2VecAudio model)"),d_o=l(),Bh=a("li"),rie=a("strong"),c_o=o("data2vec-vision"),f_o=o(" \u2014 "),wI=a("a"),m_o=o("BeitFeatureExtractor"),g_o=o(" (Data2VecVision model)"),h_o=l(),Nh=a("li"),tie=a("strong"),p_o=o("deit"),__o=o(" \u2014 "),AI=a("a"),u_o=o("DeiTFeatureExtractor"),b_o=o(" (DeiT model)"),v_o=l(),Ih=a("li"),aie=a("strong"),F_o=o("detr"),T_o=o(" \u2014 "),LI=a("a"),M_o=o("DetrFeatureExtractor"),E_o=o(" (DETR model)"),C_o=l(),qh=a("li"),nie=a("strong"),w_o=o("dpt"),A_o=o(" \u2014 "),yI=a("a"),L_o=o("DPTFeatureExtractor"),y_o=o(" (DPT model)"),x_o=l(),jh=a("li"),sie=a("strong"),$_o=o("flava"),k_o=o(" \u2014 "),xI=a("a"),S_o=o("FlavaFeatureExtractor"),R_o=o(" (FLAVA model)"),P_o=l(),Dh=a("li"),lie=a("strong"),B_o=o("glpn"),N_o=o(" \u2014 "),$I=a("a"),I_o=o("GLPNFeatureExtractor"),q_o=o(" (GLPN model)"),j_o=l(),Gh=a("li"),iie=a("strong"),D_o=o("hubert"),G_o=o(" \u2014 "),kI=a("a"),O_o=o("Wav2Vec2FeatureExtractor"),V_o=o(" (Hubert model)"),X_o=l(),Oh=a("li"),die=a("strong"),z_o=o("imagegpt"),Q_o=o(" \u2014 "),SI=a("a"),W_o=o("ImageGPTFeatureExtractor"),H_o=o(" (ImageGPT model)"),U_o=l(),Vh=a("li"),cie=a("strong"),J_o=o("layoutlmv2"),Y_o=o(" \u2014 "),RI=a("a"),K_o=o("LayoutLMv2FeatureExtractor"),Z_o=o(" (LayoutLMv2 model)"),euo=l(),Xh=a("li"),fie=a("strong"),ouo=o("layoutlmv3"),ruo=o(" \u2014 "),PI=a("a"),tuo=o("LayoutLMv3FeatureExtractor"),auo=o(" (LayoutLMv3 model)"),nuo=l(),zh=a("li"),mie=a("strong"),suo=o("levit"),luo=o(" \u2014 "),BI=a("a"),iuo=o("LevitFeatureExtractor"),duo=o(" (LeViT model)"),cuo=l(),Qh=a("li"),gie=a("strong"),fuo=o("maskformer"),muo=o(" \u2014 "),NI=a("a"),guo=o("MaskFormerFeatureExtractor"),huo=o(" (MaskFormer model)"),puo=l(),Wh=a("li"),hie=a("strong"),_uo=o("mctct"),uuo=o(" \u2014 "),II=a("a"),buo=o("MCTCTFeatureExtractor"),vuo=o(" (M-CTC-T model)"),Fuo=l(),Hh=a("li"),pie=a("strong"),Tuo=o("mobilenet_v2"),Muo=o(" \u2014 "),qI=a("a"),Euo=o("MobileNetV2FeatureExtractor"),Cuo=o(" (MobileNetV2 model)"),wuo=l(),Uh=a("li"),_ie=a("strong"),Auo=o("perceiver"),Luo=o(" \u2014 "),jI=a("a"),yuo=o("PerceiverFeatureExtractor"),xuo=o(" (Perceiver model)"),$uo=l(),Jh=a("li"),uie=a("strong"),kuo=o("poolformer"),Suo=o(" \u2014 "),DI=a("a"),Ruo=o("PoolFormerFeatureExtractor"),Puo=o(" (PoolFormer model)"),Buo=l(),Yh=a("li"),bie=a("strong"),Nuo=o("regnet"),Iuo=o(" \u2014 "),GI=a("a"),quo=o("ConvNextFeatureExtractor"),juo=o(" (RegNet model)"),Duo=l(),Kh=a("li"),vie=a("strong"),Guo=o("resnet"),Ouo=o(" \u2014 "),OI=a("a"),Vuo=o("ConvNextFeatureExtractor"),Xuo=o(" (ResNet model)"),zuo=l(),Zh=a("li"),Fie=a("strong"),Quo=o("segformer"),Wuo=o(" \u2014 "),VI=a("a"),Huo=o("SegformerFeatureExtractor"),Uuo=o(" (SegFormer model)"),Juo=l(),ep=a("li"),Tie=a("strong"),Yuo=o("speech_to_text"),Kuo=o(" \u2014 "),XI=a("a"),Zuo=o("Speech2TextFeatureExtractor"),e1o=o(" (Speech2Text model)"),o1o=l(),op=a("li"),Mie=a("strong"),r1o=o("swin"),t1o=o(" \u2014 "),zI=a("a"),a1o=o("ViTFeatureExtractor"),n1o=o(" (Swin Transformer model)"),s1o=l(),rp=a("li"),Eie=a("strong"),l1o=o("van"),i1o=o(" \u2014 "),QI=a("a"),d1o=o("ConvNextFeatureExtractor"),c1o=o(" (VAN model)"),f1o=l(),tp=a("li"),Cie=a("strong"),m1o=o("vilt"),g1o=o(" \u2014 "),WI=a("a"),h1o=o("ViltFeatureExtractor"),p1o=o(" (ViLT model)"),_1o=l(),ap=a("li"),wie=a("strong"),u1o=o("vit"),b1o=o(" \u2014 "),HI=a("a"),v1o=o("ViTFeatureExtractor"),F1o=o(" (ViT model)"),T1o=l(),np=a("li"),Aie=a("strong"),M1o=o("vit_mae"),E1o=o(" \u2014 "),UI=a("a"),C1o=o("ViTFeatureExtractor"),w1o=o(" (ViTMAE model)"),A1o=l(),sp=a("li"),Lie=a("strong"),L1o=o("wav2vec2"),y1o=o(" \u2014 "),JI=a("a"),x1o=o("Wav2Vec2FeatureExtractor"),$1o=o(" (Wav2Vec2 model)"),k1o=l(),lp=a("li"),yie=a("strong"),S1o=o("wav2vec2-conformer"),R1o=o(" \u2014 "),YI=a("a"),P1o=o("Wav2Vec2FeatureExtractor"),B1o=o(" (Wav2Vec2-Conformer model)"),N1o=l(),ip=a("li"),xie=a("strong"),I1o=o("yolos"),q1o=o(" \u2014 "),KI=a("a"),j1o=o("YolosFeatureExtractor"),D1o=o(" (YOLOS model)"),G1o=l(),F(dp.$$.fragment),O1o=l(),F(cp.$$.fragment),V1o=l(),fp=a("div"),F(tL.$$.fragment),X1o=l(),$ie=a("p"),z1o=o("Register a new feature extractor for this class."),ROe=l(),Bi=a("h2"),mp=a("a"),kie=a("span"),F(aL.$$.fragment),Q1o=l(),Sie=a("span"),W1o=o("AutoProcessor"),POe=l(),yo=a("div"),F(nL.$$.fragment),H1o=l(),sL=a("p"),U1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZI=a("a"),J1o=o("AutoProcessor.from_pretrained()"),Y1o=o(" class method."),K1o=l(),lL=a("p"),Z1o=o("This class cannot be instantiated directly using "),Rie=a("code"),e2o=o("__init__()"),o2o=o(" (throws an error)."),r2o=l(),Ue=a("div"),F(iL.$$.fragment),t2o=l(),Pie=a("p"),a2o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),n2o=l(),Ni=a("p"),s2o=o("The processor class to instantiate is selected based on the "),Bie=a("code"),l2o=o("model_type"),i2o=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),d2o=o("pretrained_model_name_or_path"),c2o=o(" if possible):"),f2o=l(),he=a("ul"),gp=a("li"),Iie=a("strong"),m2o=o("clip"),g2o=o(" \u2014 "),eq=a("a"),h2o=o("CLIPProcessor"),p2o=o(" (CLIP model)"),_2o=l(),hp=a("li"),qie=a("strong"),u2o=o("flava"),b2o=o(" \u2014 "),jie=a("code"),v2o=o("FLAVAProcessor"),F2o=o(" (FLAVA model)"),T2o=l(),pp=a("li"),Die=a("strong"),M2o=o("layoutlmv2"),E2o=o(" \u2014 "),oq=a("a"),C2o=o("LayoutLMv2Processor"),w2o=o(" (LayoutLMv2 model)"),A2o=l(),_p=a("li"),Gie=a("strong"),L2o=o("layoutlmv3"),y2o=o(" \u2014 "),rq=a("a"),x2o=o("LayoutLMv3Processor"),$2o=o(" (LayoutLMv3 model)"),k2o=l(),up=a("li"),Oie=a("strong"),S2o=o("layoutxlm"),R2o=o(" \u2014 "),tq=a("a"),P2o=o("LayoutXLMProcessor"),B2o=o(" (LayoutXLM model)"),N2o=l(),bp=a("li"),Vie=a("strong"),I2o=o("sew"),q2o=o(" \u2014 "),aq=a("a"),j2o=o("Wav2Vec2Processor"),D2o=o(" (SEW model)"),G2o=l(),vp=a("li"),Xie=a("strong"),O2o=o("sew-d"),V2o=o(" \u2014 "),nq=a("a"),X2o=o("Wav2Vec2Processor"),z2o=o(" (SEW-D model)"),Q2o=l(),Fp=a("li"),zie=a("strong"),W2o=o("speech_to_text"),H2o=o(" \u2014 "),sq=a("a"),U2o=o("Speech2TextProcessor"),J2o=o(" (Speech2Text model)"),Y2o=l(),Tp=a("li"),Qie=a("strong"),K2o=o("speech_to_text_2"),Z2o=o(" \u2014 "),lq=a("a"),ebo=o("Speech2Text2Processor"),obo=o(" (Speech2Text2 model)"),rbo=l(),Mp=a("li"),Wie=a("strong"),tbo=o("trocr"),abo=o(" \u2014 "),iq=a("a"),nbo=o("TrOCRProcessor"),sbo=o(" (TrOCR model)"),lbo=l(),Ep=a("li"),Hie=a("strong"),ibo=o("unispeech"),dbo=o(" \u2014 "),dq=a("a"),cbo=o("Wav2Vec2Processor"),fbo=o(" (UniSpeech model)"),mbo=l(),Cp=a("li"),Uie=a("strong"),gbo=o("unispeech-sat"),hbo=o(" \u2014 "),cq=a("a"),pbo=o("Wav2Vec2Processor"),_bo=o(" (UniSpeechSat model)"),ubo=l(),wp=a("li"),Jie=a("strong"),bbo=o("vilt"),vbo=o(" \u2014 "),fq=a("a"),Fbo=o("ViltProcessor"),Tbo=o(" (ViLT model)"),Mbo=l(),Ap=a("li"),Yie=a("strong"),Ebo=o("vision-text-dual-encoder"),Cbo=o(" \u2014 "),mq=a("a"),wbo=o("VisionTextDualEncoderProcessor"),Abo=o(" (VisionTextDualEncoder model)"),Lbo=l(),Lp=a("li"),Kie=a("strong"),ybo=o("wav2vec2"),xbo=o(" \u2014 "),gq=a("a"),$bo=o("Wav2Vec2Processor"),kbo=o(" (Wav2Vec2 model)"),Sbo=l(),yp=a("li"),Zie=a("strong"),Rbo=o("wav2vec2-conformer"),Pbo=o(" \u2014 "),hq=a("a"),Bbo=o("Wav2Vec2Processor"),Nbo=o(" (Wav2Vec2-Conformer model)"),Ibo=l(),xp=a("li"),ede=a("strong"),qbo=o("wavlm"),jbo=o(" \u2014 "),pq=a("a"),Dbo=o("Wav2Vec2Processor"),Gbo=o(" (WavLM model)"),Obo=l(),F($p.$$.fragment),Vbo=l(),F(kp.$$.fragment),Xbo=l(),Sp=a("div"),F(dL.$$.fragment),zbo=l(),ode=a("p"),Qbo=o("Register a new processor for this class."),BOe=l(),Ii=a("h2"),Rp=a("a"),rde=a("span"),F(cL.$$.fragment),Wbo=l(),tde=a("span"),Hbo=o("AutoModel"),NOe=l(),xo=a("div"),F(fL.$$.fragment),Ubo=l(),qi=a("p"),Jbo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_q=a("a"),Ybo=o("from_pretrained()"),Kbo=o(" class method or the "),uq=a("a"),Zbo=o("from_config()"),e4o=o(` class
method.`),o4o=l(),mL=a("p"),r4o=o("This class cannot be instantiated directly using "),ade=a("code"),t4o=o("__init__()"),a4o=o(" (throws an error)."),n4o=l(),st=a("div"),F(gL.$$.fragment),s4o=l(),nde=a("p"),l4o=o("Instantiates one of the base model classes of the library from a configuration."),i4o=l(),ji=a("p"),d4o=o(`Note:
Loading a model from its configuration file does `),sde=a("strong"),c4o=o("not"),f4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=a("a"),m4o=o("from_pretrained()"),g4o=o(" to load the model weights."),h4o=l(),F(Pp.$$.fragment),p4o=l(),Je=a("div"),F(hL.$$.fragment),_4o=l(),lde=a("p"),u4o=o("Instantiate one of the base model classes of the library from a pretrained model."),b4o=l(),Pa=a("p"),v4o=o("The model class to instantiate is selected based on the "),ide=a("code"),F4o=o("model_type"),T4o=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),M4o=o("pretrained_model_name_or_path"),E4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),C4o=o("pretrained_model_name_or_path"),w4o=o(":"),A4o=l(),y=a("ul"),Bp=a("li"),fde=a("strong"),L4o=o("albert"),y4o=o(" \u2014 "),vq=a("a"),x4o=o("AlbertModel"),$4o=o(" (ALBERT model)"),k4o=l(),Np=a("li"),mde=a("strong"),S4o=o("bart"),R4o=o(" \u2014 "),Fq=a("a"),P4o=o("BartModel"),B4o=o(" (BART model)"),N4o=l(),Ip=a("li"),gde=a("strong"),I4o=o("beit"),q4o=o(" \u2014 "),Tq=a("a"),j4o=o("BeitModel"),D4o=o(" (BEiT model)"),G4o=l(),qp=a("li"),hde=a("strong"),O4o=o("bert"),V4o=o(" \u2014 "),Mq=a("a"),X4o=o("BertModel"),z4o=o(" (BERT model)"),Q4o=l(),jp=a("li"),pde=a("strong"),W4o=o("bert-generation"),H4o=o(" \u2014 "),Eq=a("a"),U4o=o("BertGenerationEncoder"),J4o=o(" (Bert Generation model)"),Y4o=l(),Dp=a("li"),_de=a("strong"),K4o=o("big_bird"),Z4o=o(" \u2014 "),Cq=a("a"),e5o=o("BigBirdModel"),o5o=o(" (BigBird model)"),r5o=l(),Gp=a("li"),ude=a("strong"),t5o=o("bigbird_pegasus"),a5o=o(" \u2014 "),wq=a("a"),n5o=o("BigBirdPegasusModel"),s5o=o(" (BigBird-Pegasus model)"),l5o=l(),Op=a("li"),bde=a("strong"),i5o=o("blenderbot"),d5o=o(" \u2014 "),Aq=a("a"),c5o=o("BlenderbotModel"),f5o=o(" (Blenderbot model)"),m5o=l(),Vp=a("li"),vde=a("strong"),g5o=o("blenderbot-small"),h5o=o(" \u2014 "),Lq=a("a"),p5o=o("BlenderbotSmallModel"),_5o=o(" (BlenderbotSmall model)"),u5o=l(),Xp=a("li"),Fde=a("strong"),b5o=o("bloom"),v5o=o(" \u2014 "),yq=a("a"),F5o=o("BloomModel"),T5o=o(" (BLOOM model)"),M5o=l(),zp=a("li"),Tde=a("strong"),E5o=o("camembert"),C5o=o(" \u2014 "),xq=a("a"),w5o=o("CamembertModel"),A5o=o(" (CamemBERT model)"),L5o=l(),Qp=a("li"),Mde=a("strong"),y5o=o("canine"),x5o=o(" \u2014 "),$q=a("a"),$5o=o("CanineModel"),k5o=o(" (CANINE model)"),S5o=l(),Wp=a("li"),Ede=a("strong"),R5o=o("clip"),P5o=o(" \u2014 "),kq=a("a"),B5o=o("CLIPModel"),N5o=o(" (CLIP model)"),I5o=l(),Hp=a("li"),Cde=a("strong"),q5o=o("codegen"),j5o=o(" \u2014 "),Sq=a("a"),D5o=o("CodeGenModel"),G5o=o(" (CodeGen model)"),O5o=l(),Up=a("li"),wde=a("strong"),V5o=o("convbert"),X5o=o(" \u2014 "),Rq=a("a"),z5o=o("ConvBertModel"),Q5o=o(" (ConvBERT model)"),W5o=l(),Jp=a("li"),Ade=a("strong"),H5o=o("convnext"),U5o=o(" \u2014 "),Pq=a("a"),J5o=o("ConvNextModel"),Y5o=o(" (ConvNeXT model)"),K5o=l(),Yp=a("li"),Lde=a("strong"),Z5o=o("ctrl"),evo=o(" \u2014 "),Bq=a("a"),ovo=o("CTRLModel"),rvo=o(" (CTRL model)"),tvo=l(),Kp=a("li"),yde=a("strong"),avo=o("cvt"),nvo=o(" \u2014 "),Nq=a("a"),svo=o("CvtModel"),lvo=o(" (CvT model)"),ivo=l(),Zp=a("li"),xde=a("strong"),dvo=o("data2vec-audio"),cvo=o(" \u2014 "),Iq=a("a"),fvo=o("Data2VecAudioModel"),mvo=o(" (Data2VecAudio model)"),gvo=l(),e_=a("li"),$de=a("strong"),hvo=o("data2vec-text"),pvo=o(" \u2014 "),qq=a("a"),_vo=o("Data2VecTextModel"),uvo=o(" (Data2VecText model)"),bvo=l(),o_=a("li"),kde=a("strong"),vvo=o("data2vec-vision"),Fvo=o(" \u2014 "),jq=a("a"),Tvo=o("Data2VecVisionModel"),Mvo=o(" (Data2VecVision model)"),Evo=l(),r_=a("li"),Sde=a("strong"),Cvo=o("deberta"),wvo=o(" \u2014 "),Dq=a("a"),Avo=o("DebertaModel"),Lvo=o(" (DeBERTa model)"),yvo=l(),t_=a("li"),Rde=a("strong"),xvo=o("deberta-v2"),$vo=o(" \u2014 "),Gq=a("a"),kvo=o("DebertaV2Model"),Svo=o(" (DeBERTa-v2 model)"),Rvo=l(),a_=a("li"),Pde=a("strong"),Pvo=o("decision_transformer"),Bvo=o(" \u2014 "),Oq=a("a"),Nvo=o("DecisionTransformerModel"),Ivo=o(" (Decision Transformer model)"),qvo=l(),n_=a("li"),Bde=a("strong"),jvo=o("deit"),Dvo=o(" \u2014 "),Vq=a("a"),Gvo=o("DeiTModel"),Ovo=o(" (DeiT model)"),Vvo=l(),s_=a("li"),Nde=a("strong"),Xvo=o("detr"),zvo=o(" \u2014 "),Xq=a("a"),Qvo=o("DetrModel"),Wvo=o(" (DETR model)"),Hvo=l(),l_=a("li"),Ide=a("strong"),Uvo=o("distilbert"),Jvo=o(" \u2014 "),zq=a("a"),Yvo=o("DistilBertModel"),Kvo=o(" (DistilBERT model)"),Zvo=l(),i_=a("li"),qde=a("strong"),eFo=o("dpr"),oFo=o(" \u2014 "),Qq=a("a"),rFo=o("DPRQuestionEncoder"),tFo=o(" (DPR model)"),aFo=l(),d_=a("li"),jde=a("strong"),nFo=o("dpt"),sFo=o(" \u2014 "),Wq=a("a"),lFo=o("DPTModel"),iFo=o(" (DPT model)"),dFo=l(),c_=a("li"),Dde=a("strong"),cFo=o("electra"),fFo=o(" \u2014 "),Hq=a("a"),mFo=o("ElectraModel"),gFo=o(" (ELECTRA model)"),hFo=l(),f_=a("li"),Gde=a("strong"),pFo=o("flaubert"),_Fo=o(" \u2014 "),Uq=a("a"),uFo=o("FlaubertModel"),bFo=o(" (FlauBERT model)"),vFo=l(),m_=a("li"),Ode=a("strong"),FFo=o("flava"),TFo=o(" \u2014 "),Jq=a("a"),MFo=o("FlavaModel"),EFo=o(" (FLAVA model)"),CFo=l(),g_=a("li"),Vde=a("strong"),wFo=o("fnet"),AFo=o(" \u2014 "),Yq=a("a"),LFo=o("FNetModel"),yFo=o(" (FNet model)"),xFo=l(),h_=a("li"),Xde=a("strong"),$Fo=o("fsmt"),kFo=o(" \u2014 "),Kq=a("a"),SFo=o("FSMTModel"),RFo=o(" (FairSeq Machine-Translation model)"),PFo=l(),Xs=a("li"),zde=a("strong"),BFo=o("funnel"),NFo=o(" \u2014 "),Zq=a("a"),IFo=o("FunnelModel"),qFo=o(" or "),ej=a("a"),jFo=o("FunnelBaseModel"),DFo=o(" (Funnel Transformer model)"),GFo=l(),p_=a("li"),Qde=a("strong"),OFo=o("glpn"),VFo=o(" \u2014 "),oj=a("a"),XFo=o("GLPNModel"),zFo=o(" (GLPN model)"),QFo=l(),__=a("li"),Wde=a("strong"),WFo=o("gpt2"),HFo=o(" \u2014 "),rj=a("a"),UFo=o("GPT2Model"),JFo=o(" (OpenAI GPT-2 model)"),YFo=l(),u_=a("li"),Hde=a("strong"),KFo=o("gpt_neo"),ZFo=o(" \u2014 "),tj=a("a"),eTo=o("GPTNeoModel"),oTo=o(" (GPT Neo model)"),rTo=l(),b_=a("li"),Ude=a("strong"),tTo=o("gpt_neox"),aTo=o(" \u2014 "),aj=a("a"),nTo=o("GPTNeoXModel"),sTo=o(" (GPT NeoX model)"),lTo=l(),v_=a("li"),Jde=a("strong"),iTo=o("gptj"),dTo=o(" \u2014 "),nj=a("a"),cTo=o("GPTJModel"),fTo=o(" (GPT-J model)"),mTo=l(),F_=a("li"),Yde=a("strong"),gTo=o("hubert"),hTo=o(" \u2014 "),sj=a("a"),pTo=o("HubertModel"),_To=o(" (Hubert model)"),uTo=l(),T_=a("li"),Kde=a("strong"),bTo=o("ibert"),vTo=o(" \u2014 "),lj=a("a"),FTo=o("IBertModel"),TTo=o(" (I-BERT model)"),MTo=l(),M_=a("li"),Zde=a("strong"),ETo=o("imagegpt"),CTo=o(" \u2014 "),ij=a("a"),wTo=o("ImageGPTModel"),ATo=o(" (ImageGPT model)"),LTo=l(),E_=a("li"),ece=a("strong"),yTo=o("layoutlm"),xTo=o(" \u2014 "),dj=a("a"),$To=o("LayoutLMModel"),kTo=o(" (LayoutLM model)"),STo=l(),C_=a("li"),oce=a("strong"),RTo=o("layoutlmv2"),PTo=o(" \u2014 "),cj=a("a"),BTo=o("LayoutLMv2Model"),NTo=o(" (LayoutLMv2 model)"),ITo=l(),w_=a("li"),rce=a("strong"),qTo=o("layoutlmv3"),jTo=o(" \u2014 "),fj=a("a"),DTo=o("LayoutLMv3Model"),GTo=o(" (LayoutLMv3 model)"),OTo=l(),A_=a("li"),tce=a("strong"),VTo=o("led"),XTo=o(" \u2014 "),mj=a("a"),zTo=o("LEDModel"),QTo=o(" (LED model)"),WTo=l(),L_=a("li"),ace=a("strong"),HTo=o("levit"),UTo=o(" \u2014 "),gj=a("a"),JTo=o("LevitModel"),YTo=o(" (LeViT model)"),KTo=l(),y_=a("li"),nce=a("strong"),ZTo=o("longformer"),e7o=o(" \u2014 "),hj=a("a"),o7o=o("LongformerModel"),r7o=o(" (Longformer model)"),t7o=l(),x_=a("li"),sce=a("strong"),a7o=o("longt5"),n7o=o(" \u2014 "),pj=a("a"),s7o=o("LongT5Model"),l7o=o(" (LongT5 model)"),i7o=l(),$_=a("li"),lce=a("strong"),d7o=o("luke"),c7o=o(" \u2014 "),_j=a("a"),f7o=o("LukeModel"),m7o=o(" (LUKE model)"),g7o=l(),k_=a("li"),ice=a("strong"),h7o=o("lxmert"),p7o=o(" \u2014 "),uj=a("a"),_7o=o("LxmertModel"),u7o=o(" (LXMERT model)"),b7o=l(),S_=a("li"),dce=a("strong"),v7o=o("m2m_100"),F7o=o(" \u2014 "),bj=a("a"),T7o=o("M2M100Model"),M7o=o(" (M2M100 model)"),E7o=l(),R_=a("li"),cce=a("strong"),C7o=o("marian"),w7o=o(" \u2014 "),vj=a("a"),A7o=o("MarianModel"),L7o=o(" (Marian model)"),y7o=l(),P_=a("li"),fce=a("strong"),x7o=o("maskformer"),$7o=o(" \u2014 "),Fj=a("a"),k7o=o("MaskFormerModel"),S7o=o(" (MaskFormer model)"),R7o=l(),B_=a("li"),mce=a("strong"),P7o=o("mbart"),B7o=o(" \u2014 "),Tj=a("a"),N7o=o("MBartModel"),I7o=o(" (mBART model)"),q7o=l(),N_=a("li"),gce=a("strong"),j7o=o("mctct"),D7o=o(" \u2014 "),Mj=a("a"),G7o=o("MCTCTModel"),O7o=o(" (M-CTC-T model)"),V7o=l(),I_=a("li"),hce=a("strong"),X7o=o("megatron-bert"),z7o=o(" \u2014 "),Ej=a("a"),Q7o=o("MegatronBertModel"),W7o=o(" (Megatron-BERT model)"),H7o=l(),q_=a("li"),pce=a("strong"),U7o=o("mobilebert"),J7o=o(" \u2014 "),Cj=a("a"),Y7o=o("MobileBertModel"),K7o=o(" (MobileBERT model)"),Z7o=l(),j_=a("li"),_ce=a("strong"),e8o=o("mobilenet_v2"),o8o=o(" \u2014 "),wj=a("a"),r8o=o("MobileNetV2Model"),t8o=o(" (MobileNetV2 model)"),a8o=l(),D_=a("li"),uce=a("strong"),n8o=o("mpnet"),s8o=o(" \u2014 "),Aj=a("a"),l8o=o("MPNetModel"),i8o=o(" (MPNet model)"),d8o=l(),G_=a("li"),bce=a("strong"),c8o=o("mt5"),f8o=o(" \u2014 "),Lj=a("a"),m8o=o("MT5Model"),g8o=o(" (MT5 model)"),h8o=l(),O_=a("li"),vce=a("strong"),p8o=o("nezha"),_8o=o(" \u2014 "),yj=a("a"),u8o=o("NezhaModel"),b8o=o(" (Nezha model)"),v8o=l(),V_=a("li"),Fce=a("strong"),F8o=o("nystromformer"),T8o=o(" \u2014 "),xj=a("a"),M8o=o("NystromformerModel"),E8o=o(" (Nystr\xF6mformer model)"),C8o=l(),X_=a("li"),Tce=a("strong"),w8o=o("openai-gpt"),A8o=o(" \u2014 "),$j=a("a"),L8o=o("OpenAIGPTModel"),y8o=o(" (OpenAI GPT model)"),x8o=l(),z_=a("li"),Mce=a("strong"),$8o=o("opt"),k8o=o(" \u2014 "),kj=a("a"),S8o=o("OPTModel"),R8o=o(" (OPT model)"),P8o=l(),Q_=a("li"),Ece=a("strong"),B8o=o("pegasus"),N8o=o(" \u2014 "),Sj=a("a"),I8o=o("PegasusModel"),q8o=o(" (Pegasus model)"),j8o=l(),W_=a("li"),Cce=a("strong"),D8o=o("perceiver"),G8o=o(" \u2014 "),Rj=a("a"),O8o=o("PerceiverModel"),V8o=o(" (Perceiver model)"),X8o=l(),H_=a("li"),wce=a("strong"),z8o=o("plbart"),Q8o=o(" \u2014 "),Pj=a("a"),W8o=o("PLBartModel"),H8o=o(" (PLBart model)"),U8o=l(),U_=a("li"),Ace=a("strong"),J8o=o("poolformer"),Y8o=o(" \u2014 "),Bj=a("a"),K8o=o("PoolFormerModel"),Z8o=o(" (PoolFormer model)"),eMo=l(),J_=a("li"),Lce=a("strong"),oMo=o("prophetnet"),rMo=o(" \u2014 "),Nj=a("a"),tMo=o("ProphetNetModel"),aMo=o(" (ProphetNet model)"),nMo=l(),Y_=a("li"),yce=a("strong"),sMo=o("qdqbert"),lMo=o(" \u2014 "),Ij=a("a"),iMo=o("QDQBertModel"),dMo=o(" (QDQBert model)"),cMo=l(),K_=a("li"),xce=a("strong"),fMo=o("reformer"),mMo=o(" \u2014 "),qj=a("a"),gMo=o("ReformerModel"),hMo=o(" (Reformer model)"),pMo=l(),Z_=a("li"),$ce=a("strong"),_Mo=o("regnet"),uMo=o(" \u2014 "),jj=a("a"),bMo=o("RegNetModel"),vMo=o(" (RegNet model)"),FMo=l(),eu=a("li"),kce=a("strong"),TMo=o("rembert"),MMo=o(" \u2014 "),Dj=a("a"),EMo=o("RemBertModel"),CMo=o(" (RemBERT model)"),wMo=l(),ou=a("li"),Sce=a("strong"),AMo=o("resnet"),LMo=o(" \u2014 "),Gj=a("a"),yMo=o("ResNetModel"),xMo=o(" (ResNet model)"),$Mo=l(),ru=a("li"),Rce=a("strong"),kMo=o("retribert"),SMo=o(" \u2014 "),Oj=a("a"),RMo=o("RetriBertModel"),PMo=o(" (RetriBERT model)"),BMo=l(),tu=a("li"),Pce=a("strong"),NMo=o("roberta"),IMo=o(" \u2014 "),Vj=a("a"),qMo=o("RobertaModel"),jMo=o(" (RoBERTa model)"),DMo=l(),au=a("li"),Bce=a("strong"),GMo=o("roformer"),OMo=o(" \u2014 "),Xj=a("a"),VMo=o("RoFormerModel"),XMo=o(" (RoFormer model)"),zMo=l(),nu=a("li"),Nce=a("strong"),QMo=o("segformer"),WMo=o(" \u2014 "),zj=a("a"),HMo=o("SegformerModel"),UMo=o(" (SegFormer model)"),JMo=l(),su=a("li"),Ice=a("strong"),YMo=o("sew"),KMo=o(" \u2014 "),Qj=a("a"),ZMo=o("SEWModel"),eEo=o(" (SEW model)"),oEo=l(),lu=a("li"),qce=a("strong"),rEo=o("sew-d"),tEo=o(" \u2014 "),Wj=a("a"),aEo=o("SEWDModel"),nEo=o(" (SEW-D model)"),sEo=l(),iu=a("li"),jce=a("strong"),lEo=o("speech_to_text"),iEo=o(" \u2014 "),Hj=a("a"),dEo=o("Speech2TextModel"),cEo=o(" (Speech2Text model)"),fEo=l(),du=a("li"),Dce=a("strong"),mEo=o("splinter"),gEo=o(" \u2014 "),Uj=a("a"),hEo=o("SplinterModel"),pEo=o(" (Splinter model)"),_Eo=l(),cu=a("li"),Gce=a("strong"),uEo=o("squeezebert"),bEo=o(" \u2014 "),Jj=a("a"),vEo=o("SqueezeBertModel"),FEo=o(" (SqueezeBERT model)"),TEo=l(),fu=a("li"),Oce=a("strong"),MEo=o("swin"),EEo=o(" \u2014 "),Yj=a("a"),CEo=o("SwinModel"),wEo=o(" (Swin Transformer model)"),AEo=l(),mu=a("li"),Vce=a("strong"),LEo=o("t5"),yEo=o(" \u2014 "),Kj=a("a"),xEo=o("T5Model"),$Eo=o(" (T5 model)"),kEo=l(),gu=a("li"),Xce=a("strong"),SEo=o("tapas"),REo=o(" \u2014 "),Zj=a("a"),PEo=o("TapasModel"),BEo=o(" (TAPAS model)"),NEo=l(),hu=a("li"),zce=a("strong"),IEo=o("trajectory_transformer"),qEo=o(" \u2014 "),eD=a("a"),jEo=o("TrajectoryTransformerModel"),DEo=o(" (Trajectory Transformer model)"),GEo=l(),pu=a("li"),Qce=a("strong"),OEo=o("transfo-xl"),VEo=o(" \u2014 "),oD=a("a"),XEo=o("TransfoXLModel"),zEo=o(" (Transformer-XL model)"),QEo=l(),_u=a("li"),Wce=a("strong"),WEo=o("unispeech"),HEo=o(" \u2014 "),rD=a("a"),UEo=o("UniSpeechModel"),JEo=o(" (UniSpeech model)"),YEo=l(),uu=a("li"),Hce=a("strong"),KEo=o("unispeech-sat"),ZEo=o(" \u2014 "),tD=a("a"),eCo=o("UniSpeechSatModel"),oCo=o(" (UniSpeechSat model)"),rCo=l(),bu=a("li"),Uce=a("strong"),tCo=o("van"),aCo=o(" \u2014 "),aD=a("a"),nCo=o("VanModel"),sCo=o(" (VAN model)"),lCo=l(),vu=a("li"),Jce=a("strong"),iCo=o("vilt"),dCo=o(" \u2014 "),nD=a("a"),cCo=o("ViltModel"),fCo=o(" (ViLT model)"),mCo=l(),Fu=a("li"),Yce=a("strong"),gCo=o("vision-text-dual-encoder"),hCo=o(" \u2014 "),sD=a("a"),pCo=o("VisionTextDualEncoderModel"),_Co=o(" (VisionTextDualEncoder model)"),uCo=l(),Tu=a("li"),Kce=a("strong"),bCo=o("visual_bert"),vCo=o(" \u2014 "),lD=a("a"),FCo=o("VisualBertModel"),TCo=o(" (VisualBERT model)"),MCo=l(),Mu=a("li"),Zce=a("strong"),ECo=o("vit"),CCo=o(" \u2014 "),iD=a("a"),wCo=o("ViTModel"),ACo=o(" (ViT model)"),LCo=l(),Eu=a("li"),efe=a("strong"),yCo=o("vit_mae"),xCo=o(" \u2014 "),dD=a("a"),$Co=o("ViTMAEModel"),kCo=o(" (ViTMAE model)"),SCo=l(),Cu=a("li"),ofe=a("strong"),RCo=o("wav2vec2"),PCo=o(" \u2014 "),cD=a("a"),BCo=o("Wav2Vec2Model"),NCo=o(" (Wav2Vec2 model)"),ICo=l(),wu=a("li"),rfe=a("strong"),qCo=o("wav2vec2-conformer"),jCo=o(" \u2014 "),fD=a("a"),DCo=o("Wav2Vec2ConformerModel"),GCo=o(" (Wav2Vec2-Conformer model)"),OCo=l(),Au=a("li"),tfe=a("strong"),VCo=o("wavlm"),XCo=o(" \u2014 "),mD=a("a"),zCo=o("WavLMModel"),QCo=o(" (WavLM model)"),WCo=l(),Lu=a("li"),afe=a("strong"),HCo=o("xglm"),UCo=o(" \u2014 "),gD=a("a"),JCo=o("XGLMModel"),YCo=o(" (XGLM model)"),KCo=l(),yu=a("li"),nfe=a("strong"),ZCo=o("xlm"),e3o=o(" \u2014 "),hD=a("a"),o3o=o("XLMModel"),r3o=o(" (XLM model)"),t3o=l(),xu=a("li"),sfe=a("strong"),a3o=o("xlm-prophetnet"),n3o=o(" \u2014 "),pD=a("a"),s3o=o("XLMProphetNetModel"),l3o=o(" (XLM-ProphetNet model)"),i3o=l(),$u=a("li"),lfe=a("strong"),d3o=o("xlm-roberta"),c3o=o(" \u2014 "),_D=a("a"),f3o=o("XLMRobertaModel"),m3o=o(" (XLM-RoBERTa model)"),g3o=l(),ku=a("li"),ife=a("strong"),h3o=o("xlm-roberta-xl"),p3o=o(" \u2014 "),uD=a("a"),_3o=o("XLMRobertaXLModel"),u3o=o(" (XLM-RoBERTa-XL model)"),b3o=l(),Su=a("li"),dfe=a("strong"),v3o=o("xlnet"),F3o=o(" \u2014 "),bD=a("a"),T3o=o("XLNetModel"),M3o=o(" (XLNet model)"),E3o=l(),Ru=a("li"),cfe=a("strong"),C3o=o("yolos"),w3o=o(" \u2014 "),vD=a("a"),A3o=o("YolosModel"),L3o=o(" (YOLOS model)"),y3o=l(),Pu=a("li"),ffe=a("strong"),x3o=o("yoso"),$3o=o(" \u2014 "),FD=a("a"),k3o=o("YosoModel"),S3o=o(" (YOSO model)"),R3o=l(),Bu=a("p"),P3o=o("The model is set in evaluation mode by default using "),mfe=a("code"),B3o=o("model.eval()"),N3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),I3o=o("model.train()"),q3o=l(),F(Nu.$$.fragment),IOe=l(),Di=a("h2"),Iu=a("a"),hfe=a("span"),F(pL.$$.fragment),j3o=l(),pfe=a("span"),D3o=o("AutoModelForPreTraining"),qOe=l(),$o=a("div"),F(_L.$$.fragment),G3o=l(),Gi=a("p"),O3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TD=a("a"),V3o=o("from_pretrained()"),X3o=o(" class method or the "),MD=a("a"),z3o=o("from_config()"),Q3o=o(` class
method.`),W3o=l(),uL=a("p"),H3o=o("This class cannot be instantiated directly using "),_fe=a("code"),U3o=o("__init__()"),J3o=o(" (throws an error)."),Y3o=l(),lt=a("div"),F(bL.$$.fragment),K3o=l(),ufe=a("p"),Z3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),e0o=l(),Oi=a("p"),o0o=o(`Note:
Loading a model from its configuration file does `),bfe=a("strong"),r0o=o("not"),t0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=a("a"),a0o=o("from_pretrained()"),n0o=o(" to load the model weights."),s0o=l(),F(qu.$$.fragment),l0o=l(),Ye=a("div"),F(vL.$$.fragment),i0o=l(),vfe=a("p"),d0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c0o=l(),Ba=a("p"),f0o=o("The model class to instantiate is selected based on the "),Ffe=a("code"),m0o=o("model_type"),g0o=o(` property of the config object (either
passed as an argument or loaded from `),Tfe=a("code"),h0o=o("pretrained_model_name_or_path"),p0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=a("code"),_0o=o("pretrained_model_name_or_path"),u0o=o(":"),b0o=l(),G=a("ul"),ju=a("li"),Efe=a("strong"),v0o=o("albert"),F0o=o(" \u2014 "),CD=a("a"),T0o=o("AlbertForPreTraining"),M0o=o(" (ALBERT model)"),E0o=l(),Du=a("li"),Cfe=a("strong"),C0o=o("bart"),w0o=o(" \u2014 "),wD=a("a"),A0o=o("BartForConditionalGeneration"),L0o=o(" (BART model)"),y0o=l(),Gu=a("li"),wfe=a("strong"),x0o=o("bert"),$0o=o(" \u2014 "),AD=a("a"),k0o=o("BertForPreTraining"),S0o=o(" (BERT model)"),R0o=l(),Ou=a("li"),Afe=a("strong"),P0o=o("big_bird"),B0o=o(" \u2014 "),LD=a("a"),N0o=o("BigBirdForPreTraining"),I0o=o(" (BigBird model)"),q0o=l(),Vu=a("li"),Lfe=a("strong"),j0o=o("bloom"),D0o=o(" \u2014 "),yD=a("a"),G0o=o("BloomForCausalLM"),O0o=o(" (BLOOM model)"),V0o=l(),Xu=a("li"),yfe=a("strong"),X0o=o("camembert"),z0o=o(" \u2014 "),xD=a("a"),Q0o=o("CamembertForMaskedLM"),W0o=o(" (CamemBERT model)"),H0o=l(),zu=a("li"),xfe=a("strong"),U0o=o("ctrl"),J0o=o(" \u2014 "),$D=a("a"),Y0o=o("CTRLLMHeadModel"),K0o=o(" (CTRL model)"),Z0o=l(),Qu=a("li"),$fe=a("strong"),ewo=o("data2vec-text"),owo=o(" \u2014 "),kD=a("a"),rwo=o("Data2VecTextForMaskedLM"),two=o(" (Data2VecText model)"),awo=l(),Wu=a("li"),kfe=a("strong"),nwo=o("deberta"),swo=o(" \u2014 "),SD=a("a"),lwo=o("DebertaForMaskedLM"),iwo=o(" (DeBERTa model)"),dwo=l(),Hu=a("li"),Sfe=a("strong"),cwo=o("deberta-v2"),fwo=o(" \u2014 "),RD=a("a"),mwo=o("DebertaV2ForMaskedLM"),gwo=o(" (DeBERTa-v2 model)"),hwo=l(),Uu=a("li"),Rfe=a("strong"),pwo=o("distilbert"),_wo=o(" \u2014 "),PD=a("a"),uwo=o("DistilBertForMaskedLM"),bwo=o(" (DistilBERT model)"),vwo=l(),Ju=a("li"),Pfe=a("strong"),Fwo=o("electra"),Two=o(" \u2014 "),BD=a("a"),Mwo=o("ElectraForPreTraining"),Ewo=o(" (ELECTRA model)"),Cwo=l(),Yu=a("li"),Bfe=a("strong"),wwo=o("flaubert"),Awo=o(" \u2014 "),ND=a("a"),Lwo=o("FlaubertWithLMHeadModel"),ywo=o(" (FlauBERT model)"),xwo=l(),Ku=a("li"),Nfe=a("strong"),$wo=o("flava"),kwo=o(" \u2014 "),ID=a("a"),Swo=o("FlavaForPreTraining"),Rwo=o(" (FLAVA model)"),Pwo=l(),Zu=a("li"),Ife=a("strong"),Bwo=o("fnet"),Nwo=o(" \u2014 "),qD=a("a"),Iwo=o("FNetForPreTraining"),qwo=o(" (FNet model)"),jwo=l(),e1=a("li"),qfe=a("strong"),Dwo=o("fsmt"),Gwo=o(" \u2014 "),jD=a("a"),Owo=o("FSMTForConditionalGeneration"),Vwo=o(" (FairSeq Machine-Translation model)"),Xwo=l(),o1=a("li"),jfe=a("strong"),zwo=o("funnel"),Qwo=o(" \u2014 "),DD=a("a"),Wwo=o("FunnelForPreTraining"),Hwo=o(" (Funnel Transformer model)"),Uwo=l(),r1=a("li"),Dfe=a("strong"),Jwo=o("gpt2"),Ywo=o(" \u2014 "),GD=a("a"),Kwo=o("GPT2LMHeadModel"),Zwo=o(" (OpenAI GPT-2 model)"),eAo=l(),t1=a("li"),Gfe=a("strong"),oAo=o("ibert"),rAo=o(" \u2014 "),OD=a("a"),tAo=o("IBertForMaskedLM"),aAo=o(" (I-BERT model)"),nAo=l(),a1=a("li"),Ofe=a("strong"),sAo=o("layoutlm"),lAo=o(" \u2014 "),VD=a("a"),iAo=o("LayoutLMForMaskedLM"),dAo=o(" (LayoutLM model)"),cAo=l(),n1=a("li"),Vfe=a("strong"),fAo=o("longformer"),mAo=o(" \u2014 "),XD=a("a"),gAo=o("LongformerForMaskedLM"),hAo=o(" (Longformer model)"),pAo=l(),s1=a("li"),Xfe=a("strong"),_Ao=o("lxmert"),uAo=o(" \u2014 "),zD=a("a"),bAo=o("LxmertForPreTraining"),vAo=o(" (LXMERT model)"),FAo=l(),l1=a("li"),zfe=a("strong"),TAo=o("megatron-bert"),MAo=o(" \u2014 "),QD=a("a"),EAo=o("MegatronBertForPreTraining"),CAo=o(" (Megatron-BERT model)"),wAo=l(),i1=a("li"),Qfe=a("strong"),AAo=o("mobilebert"),LAo=o(" \u2014 "),WD=a("a"),yAo=o("MobileBertForPreTraining"),xAo=o(" (MobileBERT model)"),$Ao=l(),d1=a("li"),Wfe=a("strong"),kAo=o("mpnet"),SAo=o(" \u2014 "),HD=a("a"),RAo=o("MPNetForMaskedLM"),PAo=o(" (MPNet model)"),BAo=l(),c1=a("li"),Hfe=a("strong"),NAo=o("nezha"),IAo=o(" \u2014 "),UD=a("a"),qAo=o("NezhaForPreTraining"),jAo=o(" (Nezha model)"),DAo=l(),f1=a("li"),Ufe=a("strong"),GAo=o("openai-gpt"),OAo=o(" \u2014 "),JD=a("a"),VAo=o("OpenAIGPTLMHeadModel"),XAo=o(" (OpenAI GPT model)"),zAo=l(),m1=a("li"),Jfe=a("strong"),QAo=o("retribert"),WAo=o(" \u2014 "),YD=a("a"),HAo=o("RetriBertModel"),UAo=o(" (RetriBERT model)"),JAo=l(),g1=a("li"),Yfe=a("strong"),YAo=o("roberta"),KAo=o(" \u2014 "),KD=a("a"),ZAo=o("RobertaForMaskedLM"),e6o=o(" (RoBERTa model)"),o6o=l(),h1=a("li"),Kfe=a("strong"),r6o=o("splinter"),t6o=o(" \u2014 "),ZD=a("a"),a6o=o("SplinterForPreTraining"),n6o=o(" (Splinter model)"),s6o=l(),p1=a("li"),Zfe=a("strong"),l6o=o("squeezebert"),i6o=o(" \u2014 "),eG=a("a"),d6o=o("SqueezeBertForMaskedLM"),c6o=o(" (SqueezeBERT model)"),f6o=l(),_1=a("li"),eme=a("strong"),m6o=o("t5"),g6o=o(" \u2014 "),oG=a("a"),h6o=o("T5ForConditionalGeneration"),p6o=o(" (T5 model)"),_6o=l(),u1=a("li"),ome=a("strong"),u6o=o("tapas"),b6o=o(" \u2014 "),rG=a("a"),v6o=o("TapasForMaskedLM"),F6o=o(" (TAPAS model)"),T6o=l(),b1=a("li"),rme=a("strong"),M6o=o("transfo-xl"),E6o=o(" \u2014 "),tG=a("a"),C6o=o("TransfoXLLMHeadModel"),w6o=o(" (Transformer-XL model)"),A6o=l(),v1=a("li"),tme=a("strong"),L6o=o("unispeech"),y6o=o(" \u2014 "),aG=a("a"),x6o=o("UniSpeechForPreTraining"),$6o=o(" (UniSpeech model)"),k6o=l(),F1=a("li"),ame=a("strong"),S6o=o("unispeech-sat"),R6o=o(" \u2014 "),nG=a("a"),P6o=o("UniSpeechSatForPreTraining"),B6o=o(" (UniSpeechSat model)"),N6o=l(),T1=a("li"),nme=a("strong"),I6o=o("visual_bert"),q6o=o(" \u2014 "),sG=a("a"),j6o=o("VisualBertForPreTraining"),D6o=o(" (VisualBERT model)"),G6o=l(),M1=a("li"),sme=a("strong"),O6o=o("vit_mae"),V6o=o(" \u2014 "),lG=a("a"),X6o=o("ViTMAEForPreTraining"),z6o=o(" (ViTMAE model)"),Q6o=l(),E1=a("li"),lme=a("strong"),W6o=o("wav2vec2"),H6o=o(" \u2014 "),iG=a("a"),U6o=o("Wav2Vec2ForPreTraining"),J6o=o(" (Wav2Vec2 model)"),Y6o=l(),C1=a("li"),ime=a("strong"),K6o=o("wav2vec2-conformer"),Z6o=o(" \u2014 "),dG=a("a"),eLo=o("Wav2Vec2ConformerForPreTraining"),oLo=o(" (Wav2Vec2-Conformer model)"),rLo=l(),w1=a("li"),dme=a("strong"),tLo=o("xlm"),aLo=o(" \u2014 "),cG=a("a"),nLo=o("XLMWithLMHeadModel"),sLo=o(" (XLM model)"),lLo=l(),A1=a("li"),cme=a("strong"),iLo=o("xlm-roberta"),dLo=o(" \u2014 "),fG=a("a"),cLo=o("XLMRobertaForMaskedLM"),fLo=o(" (XLM-RoBERTa model)"),mLo=l(),L1=a("li"),fme=a("strong"),gLo=o("xlm-roberta-xl"),hLo=o(" \u2014 "),mG=a("a"),pLo=o("XLMRobertaXLForMaskedLM"),_Lo=o(" (XLM-RoBERTa-XL model)"),uLo=l(),y1=a("li"),mme=a("strong"),bLo=o("xlnet"),vLo=o(" \u2014 "),gG=a("a"),FLo=o("XLNetLMHeadModel"),TLo=o(" (XLNet model)"),MLo=l(),x1=a("p"),ELo=o("The model is set in evaluation mode by default using "),gme=a("code"),CLo=o("model.eval()"),wLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=a("code"),ALo=o("model.train()"),LLo=l(),F($1.$$.fragment),jOe=l(),Vi=a("h2"),k1=a("a"),pme=a("span"),F(FL.$$.fragment),yLo=l(),_me=a("span"),xLo=o("AutoModelForCausalLM"),DOe=l(),ko=a("div"),F(TL.$$.fragment),$Lo=l(),Xi=a("p"),kLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hG=a("a"),SLo=o("from_pretrained()"),RLo=o(" class method or the "),pG=a("a"),PLo=o("from_config()"),BLo=o(` class
method.`),NLo=l(),ML=a("p"),ILo=o("This class cannot be instantiated directly using "),ume=a("code"),qLo=o("__init__()"),jLo=o(" (throws an error)."),DLo=l(),it=a("div"),F(EL.$$.fragment),GLo=l(),bme=a("p"),OLo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VLo=l(),zi=a("p"),XLo=o(`Note:
Loading a model from its configuration file does `),vme=a("strong"),zLo=o("not"),QLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),WLo=o("from_pretrained()"),HLo=o(" to load the model weights."),ULo=l(),F(S1.$$.fragment),JLo=l(),Ke=a("div"),F(CL.$$.fragment),YLo=l(),Fme=a("p"),KLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZLo=l(),Na=a("p"),eyo=o("The model class to instantiate is selected based on the "),Tme=a("code"),oyo=o("model_type"),ryo=o(` property of the config object (either
passed as an argument or loaded from `),Mme=a("code"),tyo=o("pretrained_model_name_or_path"),ayo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=a("code"),nyo=o("pretrained_model_name_or_path"),syo=o(":"),lyo=l(),z=a("ul"),R1=a("li"),Cme=a("strong"),iyo=o("bart"),dyo=o(" \u2014 "),uG=a("a"),cyo=o("BartForCausalLM"),fyo=o(" (BART model)"),myo=l(),P1=a("li"),wme=a("strong"),gyo=o("bert"),hyo=o(" \u2014 "),bG=a("a"),pyo=o("BertLMHeadModel"),_yo=o(" (BERT model)"),uyo=l(),B1=a("li"),Ame=a("strong"),byo=o("bert-generation"),vyo=o(" \u2014 "),vG=a("a"),Fyo=o("BertGenerationDecoder"),Tyo=o(" (Bert Generation model)"),Myo=l(),N1=a("li"),Lme=a("strong"),Eyo=o("big_bird"),Cyo=o(" \u2014 "),FG=a("a"),wyo=o("BigBirdForCausalLM"),Ayo=o(" (BigBird model)"),Lyo=l(),I1=a("li"),yme=a("strong"),yyo=o("bigbird_pegasus"),xyo=o(" \u2014 "),TG=a("a"),$yo=o("BigBirdPegasusForCausalLM"),kyo=o(" (BigBird-Pegasus model)"),Syo=l(),q1=a("li"),xme=a("strong"),Ryo=o("blenderbot"),Pyo=o(" \u2014 "),MG=a("a"),Byo=o("BlenderbotForCausalLM"),Nyo=o(" (Blenderbot model)"),Iyo=l(),j1=a("li"),$me=a("strong"),qyo=o("blenderbot-small"),jyo=o(" \u2014 "),EG=a("a"),Dyo=o("BlenderbotSmallForCausalLM"),Gyo=o(" (BlenderbotSmall model)"),Oyo=l(),D1=a("li"),kme=a("strong"),Vyo=o("bloom"),Xyo=o(" \u2014 "),CG=a("a"),zyo=o("BloomForCausalLM"),Qyo=o(" (BLOOM model)"),Wyo=l(),G1=a("li"),Sme=a("strong"),Hyo=o("camembert"),Uyo=o(" \u2014 "),wG=a("a"),Jyo=o("CamembertForCausalLM"),Yyo=o(" (CamemBERT model)"),Kyo=l(),O1=a("li"),Rme=a("strong"),Zyo=o("codegen"),e9o=o(" \u2014 "),AG=a("a"),o9o=o("CodeGenForCausalLM"),r9o=o(" (CodeGen model)"),t9o=l(),V1=a("li"),Pme=a("strong"),a9o=o("ctrl"),n9o=o(" \u2014 "),LG=a("a"),s9o=o("CTRLLMHeadModel"),l9o=o(" (CTRL model)"),i9o=l(),X1=a("li"),Bme=a("strong"),d9o=o("data2vec-text"),c9o=o(" \u2014 "),yG=a("a"),f9o=o("Data2VecTextForCausalLM"),m9o=o(" (Data2VecText model)"),g9o=l(),z1=a("li"),Nme=a("strong"),h9o=o("electra"),p9o=o(" \u2014 "),xG=a("a"),_9o=o("ElectraForCausalLM"),u9o=o(" (ELECTRA model)"),b9o=l(),Q1=a("li"),Ime=a("strong"),v9o=o("gpt2"),F9o=o(" \u2014 "),$G=a("a"),T9o=o("GPT2LMHeadModel"),M9o=o(" (OpenAI GPT-2 model)"),E9o=l(),W1=a("li"),qme=a("strong"),C9o=o("gpt_neo"),w9o=o(" \u2014 "),kG=a("a"),A9o=o("GPTNeoForCausalLM"),L9o=o(" (GPT Neo model)"),y9o=l(),H1=a("li"),jme=a("strong"),x9o=o("gpt_neox"),$9o=o(" \u2014 "),SG=a("a"),k9o=o("GPTNeoXForCausalLM"),S9o=o(" (GPT NeoX model)"),R9o=l(),U1=a("li"),Dme=a("strong"),P9o=o("gptj"),B9o=o(" \u2014 "),RG=a("a"),N9o=o("GPTJForCausalLM"),I9o=o(" (GPT-J model)"),q9o=l(),J1=a("li"),Gme=a("strong"),j9o=o("marian"),D9o=o(" \u2014 "),PG=a("a"),G9o=o("MarianForCausalLM"),O9o=o(" (Marian model)"),V9o=l(),Y1=a("li"),Ome=a("strong"),X9o=o("mbart"),z9o=o(" \u2014 "),BG=a("a"),Q9o=o("MBartForCausalLM"),W9o=o(" (mBART model)"),H9o=l(),K1=a("li"),Vme=a("strong"),U9o=o("megatron-bert"),J9o=o(" \u2014 "),NG=a("a"),Y9o=o("MegatronBertForCausalLM"),K9o=o(" (Megatron-BERT model)"),Z9o=l(),Z1=a("li"),Xme=a("strong"),exo=o("openai-gpt"),oxo=o(" \u2014 "),IG=a("a"),rxo=o("OpenAIGPTLMHeadModel"),txo=o(" (OpenAI GPT model)"),axo=l(),e2=a("li"),zme=a("strong"),nxo=o("opt"),sxo=o(" \u2014 "),qG=a("a"),lxo=o("OPTForCausalLM"),ixo=o(" (OPT model)"),dxo=l(),o2=a("li"),Qme=a("strong"),cxo=o("pegasus"),fxo=o(" \u2014 "),jG=a("a"),mxo=o("PegasusForCausalLM"),gxo=o(" (Pegasus model)"),hxo=l(),r2=a("li"),Wme=a("strong"),pxo=o("plbart"),_xo=o(" \u2014 "),DG=a("a"),uxo=o("PLBartForCausalLM"),bxo=o(" (PLBart model)"),vxo=l(),t2=a("li"),Hme=a("strong"),Fxo=o("prophetnet"),Txo=o(" \u2014 "),GG=a("a"),Mxo=o("ProphetNetForCausalLM"),Exo=o(" (ProphetNet model)"),Cxo=l(),a2=a("li"),Ume=a("strong"),wxo=o("qdqbert"),Axo=o(" \u2014 "),OG=a("a"),Lxo=o("QDQBertLMHeadModel"),yxo=o(" (QDQBert model)"),xxo=l(),n2=a("li"),Jme=a("strong"),$xo=o("reformer"),kxo=o(" \u2014 "),VG=a("a"),Sxo=o("ReformerModelWithLMHead"),Rxo=o(" (Reformer model)"),Pxo=l(),s2=a("li"),Yme=a("strong"),Bxo=o("rembert"),Nxo=o(" \u2014 "),XG=a("a"),Ixo=o("RemBertForCausalLM"),qxo=o(" (RemBERT model)"),jxo=l(),l2=a("li"),Kme=a("strong"),Dxo=o("roberta"),Gxo=o(" \u2014 "),zG=a("a"),Oxo=o("RobertaForCausalLM"),Vxo=o(" (RoBERTa model)"),Xxo=l(),i2=a("li"),Zme=a("strong"),zxo=o("roformer"),Qxo=o(" \u2014 "),QG=a("a"),Wxo=o("RoFormerForCausalLM"),Hxo=o(" (RoFormer model)"),Uxo=l(),d2=a("li"),ege=a("strong"),Jxo=o("speech_to_text_2"),Yxo=o(" \u2014 "),WG=a("a"),Kxo=o("Speech2Text2ForCausalLM"),Zxo=o(" (Speech2Text2 model)"),e$o=l(),c2=a("li"),oge=a("strong"),o$o=o("transfo-xl"),r$o=o(" \u2014 "),HG=a("a"),t$o=o("TransfoXLLMHeadModel"),a$o=o(" (Transformer-XL model)"),n$o=l(),f2=a("li"),rge=a("strong"),s$o=o("trocr"),l$o=o(" \u2014 "),UG=a("a"),i$o=o("TrOCRForCausalLM"),d$o=o(" (TrOCR model)"),c$o=l(),m2=a("li"),tge=a("strong"),f$o=o("xglm"),m$o=o(" \u2014 "),JG=a("a"),g$o=o("XGLMForCausalLM"),h$o=o(" (XGLM model)"),p$o=l(),g2=a("li"),age=a("strong"),_$o=o("xlm"),u$o=o(" \u2014 "),YG=a("a"),b$o=o("XLMWithLMHeadModel"),v$o=o(" (XLM model)"),F$o=l(),h2=a("li"),nge=a("strong"),T$o=o("xlm-prophetnet"),M$o=o(" \u2014 "),KG=a("a"),E$o=o("XLMProphetNetForCausalLM"),C$o=o(" (XLM-ProphetNet model)"),w$o=l(),p2=a("li"),sge=a("strong"),A$o=o("xlm-roberta"),L$o=o(" \u2014 "),ZG=a("a"),y$o=o("XLMRobertaForCausalLM"),x$o=o(" (XLM-RoBERTa model)"),$$o=l(),_2=a("li"),lge=a("strong"),k$o=o("xlm-roberta-xl"),S$o=o(" \u2014 "),eO=a("a"),R$o=o("XLMRobertaXLForCausalLM"),P$o=o(" (XLM-RoBERTa-XL model)"),B$o=l(),u2=a("li"),ige=a("strong"),N$o=o("xlnet"),I$o=o(" \u2014 "),oO=a("a"),q$o=o("XLNetLMHeadModel"),j$o=o(" (XLNet model)"),D$o=l(),b2=a("p"),G$o=o("The model is set in evaluation mode by default using "),dge=a("code"),O$o=o("model.eval()"),V$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=a("code"),X$o=o("model.train()"),z$o=l(),F(v2.$$.fragment),GOe=l(),Qi=a("h2"),F2=a("a"),fge=a("span"),F(wL.$$.fragment),Q$o=l(),mge=a("span"),W$o=o("AutoModelForMaskedLM"),OOe=l(),So=a("div"),F(AL.$$.fragment),H$o=l(),Wi=a("p"),U$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rO=a("a"),J$o=o("from_pretrained()"),Y$o=o(" class method or the "),tO=a("a"),K$o=o("from_config()"),Z$o=o(` class
method.`),eko=l(),LL=a("p"),oko=o("This class cannot be instantiated directly using "),gge=a("code"),rko=o("__init__()"),tko=o(" (throws an error)."),ako=l(),dt=a("div"),F(yL.$$.fragment),nko=l(),hge=a("p"),sko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lko=l(),Hi=a("p"),iko=o(`Note:
Loading a model from its configuration file does `),pge=a("strong"),dko=o("not"),cko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),fko=o("from_pretrained()"),mko=o(" to load the model weights."),gko=l(),F(T2.$$.fragment),hko=l(),Ze=a("div"),F(xL.$$.fragment),pko=l(),_ge=a("p"),_ko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uko=l(),Ia=a("p"),bko=o("The model class to instantiate is selected based on the "),uge=a("code"),vko=o("model_type"),Fko=o(` property of the config object (either
passed as an argument or loaded from `),bge=a("code"),Tko=o("pretrained_model_name_or_path"),Mko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=a("code"),Eko=o("pretrained_model_name_or_path"),Cko=o(":"),wko=l(),W=a("ul"),M2=a("li"),Fge=a("strong"),Ako=o("albert"),Lko=o(" \u2014 "),nO=a("a"),yko=o("AlbertForMaskedLM"),xko=o(" (ALBERT model)"),$ko=l(),E2=a("li"),Tge=a("strong"),kko=o("bart"),Sko=o(" \u2014 "),sO=a("a"),Rko=o("BartForConditionalGeneration"),Pko=o(" (BART model)"),Bko=l(),C2=a("li"),Mge=a("strong"),Nko=o("bert"),Iko=o(" \u2014 "),lO=a("a"),qko=o("BertForMaskedLM"),jko=o(" (BERT model)"),Dko=l(),w2=a("li"),Ege=a("strong"),Gko=o("big_bird"),Oko=o(" \u2014 "),iO=a("a"),Vko=o("BigBirdForMaskedLM"),Xko=o(" (BigBird model)"),zko=l(),A2=a("li"),Cge=a("strong"),Qko=o("camembert"),Wko=o(" \u2014 "),dO=a("a"),Hko=o("CamembertForMaskedLM"),Uko=o(" (CamemBERT model)"),Jko=l(),L2=a("li"),wge=a("strong"),Yko=o("convbert"),Kko=o(" \u2014 "),cO=a("a"),Zko=o("ConvBertForMaskedLM"),eSo=o(" (ConvBERT model)"),oSo=l(),y2=a("li"),Age=a("strong"),rSo=o("data2vec-text"),tSo=o(" \u2014 "),fO=a("a"),aSo=o("Data2VecTextForMaskedLM"),nSo=o(" (Data2VecText model)"),sSo=l(),x2=a("li"),Lge=a("strong"),lSo=o("deberta"),iSo=o(" \u2014 "),mO=a("a"),dSo=o("DebertaForMaskedLM"),cSo=o(" (DeBERTa model)"),fSo=l(),$2=a("li"),yge=a("strong"),mSo=o("deberta-v2"),gSo=o(" \u2014 "),gO=a("a"),hSo=o("DebertaV2ForMaskedLM"),pSo=o(" (DeBERTa-v2 model)"),_So=l(),k2=a("li"),xge=a("strong"),uSo=o("distilbert"),bSo=o(" \u2014 "),hO=a("a"),vSo=o("DistilBertForMaskedLM"),FSo=o(" (DistilBERT model)"),TSo=l(),S2=a("li"),$ge=a("strong"),MSo=o("electra"),ESo=o(" \u2014 "),pO=a("a"),CSo=o("ElectraForMaskedLM"),wSo=o(" (ELECTRA model)"),ASo=l(),R2=a("li"),kge=a("strong"),LSo=o("flaubert"),ySo=o(" \u2014 "),_O=a("a"),xSo=o("FlaubertWithLMHeadModel"),$So=o(" (FlauBERT model)"),kSo=l(),P2=a("li"),Sge=a("strong"),SSo=o("fnet"),RSo=o(" \u2014 "),uO=a("a"),PSo=o("FNetForMaskedLM"),BSo=o(" (FNet model)"),NSo=l(),B2=a("li"),Rge=a("strong"),ISo=o("funnel"),qSo=o(" \u2014 "),bO=a("a"),jSo=o("FunnelForMaskedLM"),DSo=o(" (Funnel Transformer model)"),GSo=l(),N2=a("li"),Pge=a("strong"),OSo=o("ibert"),VSo=o(" \u2014 "),vO=a("a"),XSo=o("IBertForMaskedLM"),zSo=o(" (I-BERT model)"),QSo=l(),I2=a("li"),Bge=a("strong"),WSo=o("layoutlm"),HSo=o(" \u2014 "),FO=a("a"),USo=o("LayoutLMForMaskedLM"),JSo=o(" (LayoutLM model)"),YSo=l(),q2=a("li"),Nge=a("strong"),KSo=o("longformer"),ZSo=o(" \u2014 "),TO=a("a"),eRo=o("LongformerForMaskedLM"),oRo=o(" (Longformer model)"),rRo=l(),j2=a("li"),Ige=a("strong"),tRo=o("luke"),aRo=o(" \u2014 "),MO=a("a"),nRo=o("LukeForMaskedLM"),sRo=o(" (LUKE model)"),lRo=l(),D2=a("li"),qge=a("strong"),iRo=o("mbart"),dRo=o(" \u2014 "),EO=a("a"),cRo=o("MBartForConditionalGeneration"),fRo=o(" (mBART model)"),mRo=l(),G2=a("li"),jge=a("strong"),gRo=o("megatron-bert"),hRo=o(" \u2014 "),CO=a("a"),pRo=o("MegatronBertForMaskedLM"),_Ro=o(" (Megatron-BERT model)"),uRo=l(),O2=a("li"),Dge=a("strong"),bRo=o("mobilebert"),vRo=o(" \u2014 "),wO=a("a"),FRo=o("MobileBertForMaskedLM"),TRo=o(" (MobileBERT model)"),MRo=l(),V2=a("li"),Gge=a("strong"),ERo=o("mpnet"),CRo=o(" \u2014 "),AO=a("a"),wRo=o("MPNetForMaskedLM"),ARo=o(" (MPNet model)"),LRo=l(),X2=a("li"),Oge=a("strong"),yRo=o("nezha"),xRo=o(" \u2014 "),LO=a("a"),$Ro=o("NezhaForMaskedLM"),kRo=o(" (Nezha model)"),SRo=l(),z2=a("li"),Vge=a("strong"),RRo=o("nystromformer"),PRo=o(" \u2014 "),yO=a("a"),BRo=o("NystromformerForMaskedLM"),NRo=o(" (Nystr\xF6mformer model)"),IRo=l(),Q2=a("li"),Xge=a("strong"),qRo=o("perceiver"),jRo=o(" \u2014 "),xO=a("a"),DRo=o("PerceiverForMaskedLM"),GRo=o(" (Perceiver model)"),ORo=l(),W2=a("li"),zge=a("strong"),VRo=o("qdqbert"),XRo=o(" \u2014 "),$O=a("a"),zRo=o("QDQBertForMaskedLM"),QRo=o(" (QDQBert model)"),WRo=l(),H2=a("li"),Qge=a("strong"),HRo=o("reformer"),URo=o(" \u2014 "),kO=a("a"),JRo=o("ReformerForMaskedLM"),YRo=o(" (Reformer model)"),KRo=l(),U2=a("li"),Wge=a("strong"),ZRo=o("rembert"),ePo=o(" \u2014 "),SO=a("a"),oPo=o("RemBertForMaskedLM"),rPo=o(" (RemBERT model)"),tPo=l(),J2=a("li"),Hge=a("strong"),aPo=o("roberta"),nPo=o(" \u2014 "),RO=a("a"),sPo=o("RobertaForMaskedLM"),lPo=o(" (RoBERTa model)"),iPo=l(),Y2=a("li"),Uge=a("strong"),dPo=o("roformer"),cPo=o(" \u2014 "),PO=a("a"),fPo=o("RoFormerForMaskedLM"),mPo=o(" (RoFormer model)"),gPo=l(),K2=a("li"),Jge=a("strong"),hPo=o("squeezebert"),pPo=o(" \u2014 "),BO=a("a"),_Po=o("SqueezeBertForMaskedLM"),uPo=o(" (SqueezeBERT model)"),bPo=l(),Z2=a("li"),Yge=a("strong"),vPo=o("tapas"),FPo=o(" \u2014 "),NO=a("a"),TPo=o("TapasForMaskedLM"),MPo=o(" (TAPAS model)"),EPo=l(),eb=a("li"),Kge=a("strong"),CPo=o("wav2vec2"),wPo=o(" \u2014 "),Zge=a("code"),APo=o("Wav2Vec2ForMaskedLM"),LPo=o(" (Wav2Vec2 model)"),yPo=l(),ob=a("li"),ehe=a("strong"),xPo=o("xlm"),$Po=o(" \u2014 "),IO=a("a"),kPo=o("XLMWithLMHeadModel"),SPo=o(" (XLM model)"),RPo=l(),rb=a("li"),ohe=a("strong"),PPo=o("xlm-roberta"),BPo=o(" \u2014 "),qO=a("a"),NPo=o("XLMRobertaForMaskedLM"),IPo=o(" (XLM-RoBERTa model)"),qPo=l(),tb=a("li"),rhe=a("strong"),jPo=o("xlm-roberta-xl"),DPo=o(" \u2014 "),jO=a("a"),GPo=o("XLMRobertaXLForMaskedLM"),OPo=o(" (XLM-RoBERTa-XL model)"),VPo=l(),ab=a("li"),the=a("strong"),XPo=o("yoso"),zPo=o(" \u2014 "),DO=a("a"),QPo=o("YosoForMaskedLM"),WPo=o(" (YOSO model)"),HPo=l(),nb=a("p"),UPo=o("The model is set in evaluation mode by default using "),ahe=a("code"),JPo=o("model.eval()"),YPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),KPo=o("model.train()"),ZPo=l(),F(sb.$$.fragment),VOe=l(),Ui=a("h2"),lb=a("a"),she=a("span"),F($L.$$.fragment),eBo=l(),lhe=a("span"),oBo=o("AutoModelForSeq2SeqLM"),XOe=l(),Ro=a("div"),F(kL.$$.fragment),rBo=l(),Ji=a("p"),tBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GO=a("a"),aBo=o("from_pretrained()"),nBo=o(" class method or the "),OO=a("a"),sBo=o("from_config()"),lBo=o(` class
method.`),iBo=l(),SL=a("p"),dBo=o("This class cannot be instantiated directly using "),ihe=a("code"),cBo=o("__init__()"),fBo=o(" (throws an error)."),mBo=l(),ct=a("div"),F(RL.$$.fragment),gBo=l(),dhe=a("p"),hBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pBo=l(),Yi=a("p"),_Bo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),uBo=o("not"),bBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),vBo=o("from_pretrained()"),FBo=o(" to load the model weights."),TBo=l(),F(ib.$$.fragment),MBo=l(),eo=a("div"),F(PL.$$.fragment),EBo=l(),fhe=a("p"),CBo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wBo=l(),qa=a("p"),ABo=o("The model class to instantiate is selected based on the "),mhe=a("code"),LBo=o("model_type"),yBo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),xBo=o("pretrained_model_name_or_path"),$Bo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),kBo=o("pretrained_model_name_or_path"),SBo=o(":"),RBo=l(),pe=a("ul"),db=a("li"),phe=a("strong"),PBo=o("bart"),BBo=o(" \u2014 "),XO=a("a"),NBo=o("BartForConditionalGeneration"),IBo=o(" (BART model)"),qBo=l(),cb=a("li"),_he=a("strong"),jBo=o("bigbird_pegasus"),DBo=o(" \u2014 "),zO=a("a"),GBo=o("BigBirdPegasusForConditionalGeneration"),OBo=o(" (BigBird-Pegasus model)"),VBo=l(),fb=a("li"),uhe=a("strong"),XBo=o("blenderbot"),zBo=o(" \u2014 "),QO=a("a"),QBo=o("BlenderbotForConditionalGeneration"),WBo=o(" (Blenderbot model)"),HBo=l(),mb=a("li"),bhe=a("strong"),UBo=o("blenderbot-small"),JBo=o(" \u2014 "),WO=a("a"),YBo=o("BlenderbotSmallForConditionalGeneration"),KBo=o(" (BlenderbotSmall model)"),ZBo=l(),gb=a("li"),vhe=a("strong"),eNo=o("encoder-decoder"),oNo=o(" \u2014 "),HO=a("a"),rNo=o("EncoderDecoderModel"),tNo=o(" (Encoder decoder model)"),aNo=l(),hb=a("li"),Fhe=a("strong"),nNo=o("fsmt"),sNo=o(" \u2014 "),UO=a("a"),lNo=o("FSMTForConditionalGeneration"),iNo=o(" (FairSeq Machine-Translation model)"),dNo=l(),pb=a("li"),The=a("strong"),cNo=o("led"),fNo=o(" \u2014 "),JO=a("a"),mNo=o("LEDForConditionalGeneration"),gNo=o(" (LED model)"),hNo=l(),_b=a("li"),Mhe=a("strong"),pNo=o("longt5"),_No=o(" \u2014 "),YO=a("a"),uNo=o("LongT5ForConditionalGeneration"),bNo=o(" (LongT5 model)"),vNo=l(),ub=a("li"),Ehe=a("strong"),FNo=o("m2m_100"),TNo=o(" \u2014 "),KO=a("a"),MNo=o("M2M100ForConditionalGeneration"),ENo=o(" (M2M100 model)"),CNo=l(),bb=a("li"),Che=a("strong"),wNo=o("marian"),ANo=o(" \u2014 "),ZO=a("a"),LNo=o("MarianMTModel"),yNo=o(" (Marian model)"),xNo=l(),vb=a("li"),whe=a("strong"),$No=o("mbart"),kNo=o(" \u2014 "),eV=a("a"),SNo=o("MBartForConditionalGeneration"),RNo=o(" (mBART model)"),PNo=l(),Fb=a("li"),Ahe=a("strong"),BNo=o("mt5"),NNo=o(" \u2014 "),oV=a("a"),INo=o("MT5ForConditionalGeneration"),qNo=o(" (MT5 model)"),jNo=l(),Tb=a("li"),Lhe=a("strong"),DNo=o("pegasus"),GNo=o(" \u2014 "),rV=a("a"),ONo=o("PegasusForConditionalGeneration"),VNo=o(" (Pegasus model)"),XNo=l(),Mb=a("li"),yhe=a("strong"),zNo=o("plbart"),QNo=o(" \u2014 "),tV=a("a"),WNo=o("PLBartForConditionalGeneration"),HNo=o(" (PLBart model)"),UNo=l(),Eb=a("li"),xhe=a("strong"),JNo=o("prophetnet"),YNo=o(" \u2014 "),aV=a("a"),KNo=o("ProphetNetForConditionalGeneration"),ZNo=o(" (ProphetNet model)"),eIo=l(),Cb=a("li"),$he=a("strong"),oIo=o("t5"),rIo=o(" \u2014 "),nV=a("a"),tIo=o("T5ForConditionalGeneration"),aIo=o(" (T5 model)"),nIo=l(),wb=a("li"),khe=a("strong"),sIo=o("xlm-prophetnet"),lIo=o(" \u2014 "),sV=a("a"),iIo=o("XLMProphetNetForConditionalGeneration"),dIo=o(" (XLM-ProphetNet model)"),cIo=l(),Ab=a("p"),fIo=o("The model is set in evaluation mode by default using "),She=a("code"),mIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),hIo=o("model.train()"),pIo=l(),F(Lb.$$.fragment),zOe=l(),Ki=a("h2"),yb=a("a"),Phe=a("span"),F(BL.$$.fragment),_Io=l(),Bhe=a("span"),uIo=o("AutoModelForSequenceClassification"),QOe=l(),Po=a("div"),F(NL.$$.fragment),bIo=l(),Zi=a("p"),vIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lV=a("a"),FIo=o("from_pretrained()"),TIo=o(" class method or the "),iV=a("a"),MIo=o("from_config()"),EIo=o(` class
method.`),CIo=l(),IL=a("p"),wIo=o("This class cannot be instantiated directly using "),Nhe=a("code"),AIo=o("__init__()"),LIo=o(" (throws an error)."),yIo=l(),ft=a("div"),F(qL.$$.fragment),xIo=l(),Ihe=a("p"),$Io=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kIo=l(),ed=a("p"),SIo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),RIo=o("not"),PIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),BIo=o("from_pretrained()"),NIo=o(" to load the model weights."),IIo=l(),F(xb.$$.fragment),qIo=l(),oo=a("div"),F(jL.$$.fragment),jIo=l(),jhe=a("p"),DIo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GIo=l(),ja=a("p"),OIo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),VIo=o("model_type"),XIo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),zIo=o("pretrained_model_name_or_path"),QIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),WIo=o("pretrained_model_name_or_path"),HIo=o(":"),UIo=l(),I=a("ul"),$b=a("li"),Vhe=a("strong"),JIo=o("albert"),YIo=o(" \u2014 "),cV=a("a"),KIo=o("AlbertForSequenceClassification"),ZIo=o(" (ALBERT model)"),eqo=l(),kb=a("li"),Xhe=a("strong"),oqo=o("bart"),rqo=o(" \u2014 "),fV=a("a"),tqo=o("BartForSequenceClassification"),aqo=o(" (BART model)"),nqo=l(),Sb=a("li"),zhe=a("strong"),sqo=o("bert"),lqo=o(" \u2014 "),mV=a("a"),iqo=o("BertForSequenceClassification"),dqo=o(" (BERT model)"),cqo=l(),Rb=a("li"),Qhe=a("strong"),fqo=o("big_bird"),mqo=o(" \u2014 "),gV=a("a"),gqo=o("BigBirdForSequenceClassification"),hqo=o(" (BigBird model)"),pqo=l(),Pb=a("li"),Whe=a("strong"),_qo=o("bigbird_pegasus"),uqo=o(" \u2014 "),hV=a("a"),bqo=o("BigBirdPegasusForSequenceClassification"),vqo=o(" (BigBird-Pegasus model)"),Fqo=l(),Bb=a("li"),Hhe=a("strong"),Tqo=o("bloom"),Mqo=o(" \u2014 "),pV=a("a"),Eqo=o("BloomForSequenceClassification"),Cqo=o(" (BLOOM model)"),wqo=l(),Nb=a("li"),Uhe=a("strong"),Aqo=o("camembert"),Lqo=o(" \u2014 "),_V=a("a"),yqo=o("CamembertForSequenceClassification"),xqo=o(" (CamemBERT model)"),$qo=l(),Ib=a("li"),Jhe=a("strong"),kqo=o("canine"),Sqo=o(" \u2014 "),uV=a("a"),Rqo=o("CanineForSequenceClassification"),Pqo=o(" (CANINE model)"),Bqo=l(),qb=a("li"),Yhe=a("strong"),Nqo=o("convbert"),Iqo=o(" \u2014 "),bV=a("a"),qqo=o("ConvBertForSequenceClassification"),jqo=o(" (ConvBERT model)"),Dqo=l(),jb=a("li"),Khe=a("strong"),Gqo=o("ctrl"),Oqo=o(" \u2014 "),vV=a("a"),Vqo=o("CTRLForSequenceClassification"),Xqo=o(" (CTRL model)"),zqo=l(),Db=a("li"),Zhe=a("strong"),Qqo=o("data2vec-text"),Wqo=o(" \u2014 "),FV=a("a"),Hqo=o("Data2VecTextForSequenceClassification"),Uqo=o(" (Data2VecText model)"),Jqo=l(),Gb=a("li"),epe=a("strong"),Yqo=o("deberta"),Kqo=o(" \u2014 "),TV=a("a"),Zqo=o("DebertaForSequenceClassification"),ejo=o(" (DeBERTa model)"),ojo=l(),Ob=a("li"),ope=a("strong"),rjo=o("deberta-v2"),tjo=o(" \u2014 "),MV=a("a"),ajo=o("DebertaV2ForSequenceClassification"),njo=o(" (DeBERTa-v2 model)"),sjo=l(),Vb=a("li"),rpe=a("strong"),ljo=o("distilbert"),ijo=o(" \u2014 "),EV=a("a"),djo=o("DistilBertForSequenceClassification"),cjo=o(" (DistilBERT model)"),fjo=l(),Xb=a("li"),tpe=a("strong"),mjo=o("electra"),gjo=o(" \u2014 "),CV=a("a"),hjo=o("ElectraForSequenceClassification"),pjo=o(" (ELECTRA model)"),_jo=l(),zb=a("li"),ape=a("strong"),ujo=o("flaubert"),bjo=o(" \u2014 "),wV=a("a"),vjo=o("FlaubertForSequenceClassification"),Fjo=o(" (FlauBERT model)"),Tjo=l(),Qb=a("li"),npe=a("strong"),Mjo=o("fnet"),Ejo=o(" \u2014 "),AV=a("a"),Cjo=o("FNetForSequenceClassification"),wjo=o(" (FNet model)"),Ajo=l(),Wb=a("li"),spe=a("strong"),Ljo=o("funnel"),yjo=o(" \u2014 "),LV=a("a"),xjo=o("FunnelForSequenceClassification"),$jo=o(" (Funnel Transformer model)"),kjo=l(),Hb=a("li"),lpe=a("strong"),Sjo=o("gpt2"),Rjo=o(" \u2014 "),yV=a("a"),Pjo=o("GPT2ForSequenceClassification"),Bjo=o(" (OpenAI GPT-2 model)"),Njo=l(),Ub=a("li"),ipe=a("strong"),Ijo=o("gpt_neo"),qjo=o(" \u2014 "),xV=a("a"),jjo=o("GPTNeoForSequenceClassification"),Djo=o(" (GPT Neo model)"),Gjo=l(),Jb=a("li"),dpe=a("strong"),Ojo=o("gptj"),Vjo=o(" \u2014 "),$V=a("a"),Xjo=o("GPTJForSequenceClassification"),zjo=o(" (GPT-J model)"),Qjo=l(),Yb=a("li"),cpe=a("strong"),Wjo=o("ibert"),Hjo=o(" \u2014 "),kV=a("a"),Ujo=o("IBertForSequenceClassification"),Jjo=o(" (I-BERT model)"),Yjo=l(),Kb=a("li"),fpe=a("strong"),Kjo=o("layoutlm"),Zjo=o(" \u2014 "),SV=a("a"),eDo=o("LayoutLMForSequenceClassification"),oDo=o(" (LayoutLM model)"),rDo=l(),Zb=a("li"),mpe=a("strong"),tDo=o("layoutlmv2"),aDo=o(" \u2014 "),RV=a("a"),nDo=o("LayoutLMv2ForSequenceClassification"),sDo=o(" (LayoutLMv2 model)"),lDo=l(),e4=a("li"),gpe=a("strong"),iDo=o("layoutlmv3"),dDo=o(" \u2014 "),PV=a("a"),cDo=o("LayoutLMv3ForSequenceClassification"),fDo=o(" (LayoutLMv3 model)"),mDo=l(),o4=a("li"),hpe=a("strong"),gDo=o("led"),hDo=o(" \u2014 "),BV=a("a"),pDo=o("LEDForSequenceClassification"),_Do=o(" (LED model)"),uDo=l(),r4=a("li"),ppe=a("strong"),bDo=o("longformer"),vDo=o(" \u2014 "),NV=a("a"),FDo=o("LongformerForSequenceClassification"),TDo=o(" (Longformer model)"),MDo=l(),t4=a("li"),_pe=a("strong"),EDo=o("mbart"),CDo=o(" \u2014 "),IV=a("a"),wDo=o("MBartForSequenceClassification"),ADo=o(" (mBART model)"),LDo=l(),a4=a("li"),upe=a("strong"),yDo=o("megatron-bert"),xDo=o(" \u2014 "),qV=a("a"),$Do=o("MegatronBertForSequenceClassification"),kDo=o(" (Megatron-BERT model)"),SDo=l(),n4=a("li"),bpe=a("strong"),RDo=o("mobilebert"),PDo=o(" \u2014 "),jV=a("a"),BDo=o("MobileBertForSequenceClassification"),NDo=o(" (MobileBERT model)"),IDo=l(),s4=a("li"),vpe=a("strong"),qDo=o("mpnet"),jDo=o(" \u2014 "),DV=a("a"),DDo=o("MPNetForSequenceClassification"),GDo=o(" (MPNet model)"),ODo=l(),l4=a("li"),Fpe=a("strong"),VDo=o("nezha"),XDo=o(" \u2014 "),GV=a("a"),zDo=o("NezhaForSequenceClassification"),QDo=o(" (Nezha model)"),WDo=l(),i4=a("li"),Tpe=a("strong"),HDo=o("nystromformer"),UDo=o(" \u2014 "),OV=a("a"),JDo=o("NystromformerForSequenceClassification"),YDo=o(" (Nystr\xF6mformer model)"),KDo=l(),d4=a("li"),Mpe=a("strong"),ZDo=o("openai-gpt"),eGo=o(" \u2014 "),VV=a("a"),oGo=o("OpenAIGPTForSequenceClassification"),rGo=o(" (OpenAI GPT model)"),tGo=l(),c4=a("li"),Epe=a("strong"),aGo=o("perceiver"),nGo=o(" \u2014 "),XV=a("a"),sGo=o("PerceiverForSequenceClassification"),lGo=o(" (Perceiver model)"),iGo=l(),f4=a("li"),Cpe=a("strong"),dGo=o("plbart"),cGo=o(" \u2014 "),zV=a("a"),fGo=o("PLBartForSequenceClassification"),mGo=o(" (PLBart model)"),gGo=l(),m4=a("li"),wpe=a("strong"),hGo=o("qdqbert"),pGo=o(" \u2014 "),QV=a("a"),_Go=o("QDQBertForSequenceClassification"),uGo=o(" (QDQBert model)"),bGo=l(),g4=a("li"),Ape=a("strong"),vGo=o("reformer"),FGo=o(" \u2014 "),WV=a("a"),TGo=o("ReformerForSequenceClassification"),MGo=o(" (Reformer model)"),EGo=l(),h4=a("li"),Lpe=a("strong"),CGo=o("rembert"),wGo=o(" \u2014 "),HV=a("a"),AGo=o("RemBertForSequenceClassification"),LGo=o(" (RemBERT model)"),yGo=l(),p4=a("li"),ype=a("strong"),xGo=o("roberta"),$Go=o(" \u2014 "),UV=a("a"),kGo=o("RobertaForSequenceClassification"),SGo=o(" (RoBERTa model)"),RGo=l(),_4=a("li"),xpe=a("strong"),PGo=o("roformer"),BGo=o(" \u2014 "),JV=a("a"),NGo=o("RoFormerForSequenceClassification"),IGo=o(" (RoFormer model)"),qGo=l(),u4=a("li"),$pe=a("strong"),jGo=o("squeezebert"),DGo=o(" \u2014 "),YV=a("a"),GGo=o("SqueezeBertForSequenceClassification"),OGo=o(" (SqueezeBERT model)"),VGo=l(),b4=a("li"),kpe=a("strong"),XGo=o("tapas"),zGo=o(" \u2014 "),KV=a("a"),QGo=o("TapasForSequenceClassification"),WGo=o(" (TAPAS model)"),HGo=l(),v4=a("li"),Spe=a("strong"),UGo=o("transfo-xl"),JGo=o(" \u2014 "),ZV=a("a"),YGo=o("TransfoXLForSequenceClassification"),KGo=o(" (Transformer-XL model)"),ZGo=l(),F4=a("li"),Rpe=a("strong"),eOo=o("xlm"),oOo=o(" \u2014 "),eX=a("a"),rOo=o("XLMForSequenceClassification"),tOo=o(" (XLM model)"),aOo=l(),T4=a("li"),Ppe=a("strong"),nOo=o("xlm-roberta"),sOo=o(" \u2014 "),oX=a("a"),lOo=o("XLMRobertaForSequenceClassification"),iOo=o(" (XLM-RoBERTa model)"),dOo=l(),M4=a("li"),Bpe=a("strong"),cOo=o("xlm-roberta-xl"),fOo=o(" \u2014 "),rX=a("a"),mOo=o("XLMRobertaXLForSequenceClassification"),gOo=o(" (XLM-RoBERTa-XL model)"),hOo=l(),E4=a("li"),Npe=a("strong"),pOo=o("xlnet"),_Oo=o(" \u2014 "),tX=a("a"),uOo=o("XLNetForSequenceClassification"),bOo=o(" (XLNet model)"),vOo=l(),C4=a("li"),Ipe=a("strong"),FOo=o("yoso"),TOo=o(" \u2014 "),aX=a("a"),MOo=o("YosoForSequenceClassification"),EOo=o(" (YOSO model)"),COo=l(),w4=a("p"),wOo=o("The model is set in evaluation mode by default using "),qpe=a("code"),AOo=o("model.eval()"),LOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),yOo=o("model.train()"),xOo=l(),F(A4.$$.fragment),WOe=l(),od=a("h2"),L4=a("a"),Dpe=a("span"),F(DL.$$.fragment),$Oo=l(),Gpe=a("span"),kOo=o("AutoModelForMultipleChoice"),HOe=l(),Bo=a("div"),F(GL.$$.fragment),SOo=l(),rd=a("p"),ROo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nX=a("a"),POo=o("from_pretrained()"),BOo=o(" class method or the "),sX=a("a"),NOo=o("from_config()"),IOo=o(` class
method.`),qOo=l(),OL=a("p"),jOo=o("This class cannot be instantiated directly using "),Ope=a("code"),DOo=o("__init__()"),GOo=o(" (throws an error)."),OOo=l(),mt=a("div"),F(VL.$$.fragment),VOo=l(),Vpe=a("p"),XOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zOo=l(),td=a("p"),QOo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),WOo=o("not"),HOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),UOo=o("from_pretrained()"),JOo=o(" to load the model weights."),YOo=l(),F(y4.$$.fragment),KOo=l(),ro=a("div"),F(XL.$$.fragment),ZOo=l(),zpe=a("p"),eVo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oVo=l(),Da=a("p"),rVo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),tVo=o("model_type"),aVo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),nVo=o("pretrained_model_name_or_path"),sVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),lVo=o("pretrained_model_name_or_path"),iVo=o(":"),dVo=l(),Z=a("ul"),x4=a("li"),Upe=a("strong"),cVo=o("albert"),fVo=o(" \u2014 "),iX=a("a"),mVo=o("AlbertForMultipleChoice"),gVo=o(" (ALBERT model)"),hVo=l(),$4=a("li"),Jpe=a("strong"),pVo=o("bert"),_Vo=o(" \u2014 "),dX=a("a"),uVo=o("BertForMultipleChoice"),bVo=o(" (BERT model)"),vVo=l(),k4=a("li"),Ype=a("strong"),FVo=o("big_bird"),TVo=o(" \u2014 "),cX=a("a"),MVo=o("BigBirdForMultipleChoice"),EVo=o(" (BigBird model)"),CVo=l(),S4=a("li"),Kpe=a("strong"),wVo=o("camembert"),AVo=o(" \u2014 "),fX=a("a"),LVo=o("CamembertForMultipleChoice"),yVo=o(" (CamemBERT model)"),xVo=l(),R4=a("li"),Zpe=a("strong"),$Vo=o("canine"),kVo=o(" \u2014 "),mX=a("a"),SVo=o("CanineForMultipleChoice"),RVo=o(" (CANINE model)"),PVo=l(),P4=a("li"),e_e=a("strong"),BVo=o("convbert"),NVo=o(" \u2014 "),gX=a("a"),IVo=o("ConvBertForMultipleChoice"),qVo=o(" (ConvBERT model)"),jVo=l(),B4=a("li"),o_e=a("strong"),DVo=o("data2vec-text"),GVo=o(" \u2014 "),hX=a("a"),OVo=o("Data2VecTextForMultipleChoice"),VVo=o(" (Data2VecText model)"),XVo=l(),N4=a("li"),r_e=a("strong"),zVo=o("deberta-v2"),QVo=o(" \u2014 "),pX=a("a"),WVo=o("DebertaV2ForMultipleChoice"),HVo=o(" (DeBERTa-v2 model)"),UVo=l(),I4=a("li"),t_e=a("strong"),JVo=o("distilbert"),YVo=o(" \u2014 "),_X=a("a"),KVo=o("DistilBertForMultipleChoice"),ZVo=o(" (DistilBERT model)"),eXo=l(),q4=a("li"),a_e=a("strong"),oXo=o("electra"),rXo=o(" \u2014 "),uX=a("a"),tXo=o("ElectraForMultipleChoice"),aXo=o(" (ELECTRA model)"),nXo=l(),j4=a("li"),n_e=a("strong"),sXo=o("flaubert"),lXo=o(" \u2014 "),bX=a("a"),iXo=o("FlaubertForMultipleChoice"),dXo=o(" (FlauBERT model)"),cXo=l(),D4=a("li"),s_e=a("strong"),fXo=o("fnet"),mXo=o(" \u2014 "),vX=a("a"),gXo=o("FNetForMultipleChoice"),hXo=o(" (FNet model)"),pXo=l(),G4=a("li"),l_e=a("strong"),_Xo=o("funnel"),uXo=o(" \u2014 "),FX=a("a"),bXo=o("FunnelForMultipleChoice"),vXo=o(" (Funnel Transformer model)"),FXo=l(),O4=a("li"),i_e=a("strong"),TXo=o("ibert"),MXo=o(" \u2014 "),TX=a("a"),EXo=o("IBertForMultipleChoice"),CXo=o(" (I-BERT model)"),wXo=l(),V4=a("li"),d_e=a("strong"),AXo=o("longformer"),LXo=o(" \u2014 "),MX=a("a"),yXo=o("LongformerForMultipleChoice"),xXo=o(" (Longformer model)"),$Xo=l(),X4=a("li"),c_e=a("strong"),kXo=o("megatron-bert"),SXo=o(" \u2014 "),EX=a("a"),RXo=o("MegatronBertForMultipleChoice"),PXo=o(" (Megatron-BERT model)"),BXo=l(),z4=a("li"),f_e=a("strong"),NXo=o("mobilebert"),IXo=o(" \u2014 "),CX=a("a"),qXo=o("MobileBertForMultipleChoice"),jXo=o(" (MobileBERT model)"),DXo=l(),Q4=a("li"),m_e=a("strong"),GXo=o("mpnet"),OXo=o(" \u2014 "),wX=a("a"),VXo=o("MPNetForMultipleChoice"),XXo=o(" (MPNet model)"),zXo=l(),W4=a("li"),g_e=a("strong"),QXo=o("nezha"),WXo=o(" \u2014 "),AX=a("a"),HXo=o("NezhaForMultipleChoice"),UXo=o(" (Nezha model)"),JXo=l(),H4=a("li"),h_e=a("strong"),YXo=o("nystromformer"),KXo=o(" \u2014 "),LX=a("a"),ZXo=o("NystromformerForMultipleChoice"),ezo=o(" (Nystr\xF6mformer model)"),ozo=l(),U4=a("li"),p_e=a("strong"),rzo=o("qdqbert"),tzo=o(" \u2014 "),yX=a("a"),azo=o("QDQBertForMultipleChoice"),nzo=o(" (QDQBert model)"),szo=l(),J4=a("li"),__e=a("strong"),lzo=o("rembert"),izo=o(" \u2014 "),xX=a("a"),dzo=o("RemBertForMultipleChoice"),czo=o(" (RemBERT model)"),fzo=l(),Y4=a("li"),u_e=a("strong"),mzo=o("roberta"),gzo=o(" \u2014 "),$X=a("a"),hzo=o("RobertaForMultipleChoice"),pzo=o(" (RoBERTa model)"),_zo=l(),K4=a("li"),b_e=a("strong"),uzo=o("roformer"),bzo=o(" \u2014 "),kX=a("a"),vzo=o("RoFormerForMultipleChoice"),Fzo=o(" (RoFormer model)"),Tzo=l(),Z4=a("li"),v_e=a("strong"),Mzo=o("squeezebert"),Ezo=o(" \u2014 "),SX=a("a"),Czo=o("SqueezeBertForMultipleChoice"),wzo=o(" (SqueezeBERT model)"),Azo=l(),e5=a("li"),F_e=a("strong"),Lzo=o("xlm"),yzo=o(" \u2014 "),RX=a("a"),xzo=o("XLMForMultipleChoice"),$zo=o(" (XLM model)"),kzo=l(),o5=a("li"),T_e=a("strong"),Szo=o("xlm-roberta"),Rzo=o(" \u2014 "),PX=a("a"),Pzo=o("XLMRobertaForMultipleChoice"),Bzo=o(" (XLM-RoBERTa model)"),Nzo=l(),r5=a("li"),M_e=a("strong"),Izo=o("xlm-roberta-xl"),qzo=o(" \u2014 "),BX=a("a"),jzo=o("XLMRobertaXLForMultipleChoice"),Dzo=o(" (XLM-RoBERTa-XL model)"),Gzo=l(),t5=a("li"),E_e=a("strong"),Ozo=o("xlnet"),Vzo=o(" \u2014 "),NX=a("a"),Xzo=o("XLNetForMultipleChoice"),zzo=o(" (XLNet model)"),Qzo=l(),a5=a("li"),C_e=a("strong"),Wzo=o("yoso"),Hzo=o(" \u2014 "),IX=a("a"),Uzo=o("YosoForMultipleChoice"),Jzo=o(" (YOSO model)"),Yzo=l(),n5=a("p"),Kzo=o("The model is set in evaluation mode by default using "),w_e=a("code"),Zzo=o("model.eval()"),eQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),oQo=o("model.train()"),rQo=l(),F(s5.$$.fragment),UOe=l(),ad=a("h2"),l5=a("a"),L_e=a("span"),F(zL.$$.fragment),tQo=l(),y_e=a("span"),aQo=o("AutoModelForNextSentencePrediction"),JOe=l(),No=a("div"),F(QL.$$.fragment),nQo=l(),nd=a("p"),sQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qX=a("a"),lQo=o("from_pretrained()"),iQo=o(" class method or the "),jX=a("a"),dQo=o("from_config()"),cQo=o(` class
method.`),fQo=l(),WL=a("p"),mQo=o("This class cannot be instantiated directly using "),x_e=a("code"),gQo=o("__init__()"),hQo=o(" (throws an error)."),pQo=l(),gt=a("div"),F(HL.$$.fragment),_Qo=l(),$_e=a("p"),uQo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bQo=l(),sd=a("p"),vQo=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),FQo=o("not"),TQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),MQo=o("from_pretrained()"),EQo=o(" to load the model weights."),CQo=l(),F(i5.$$.fragment),wQo=l(),to=a("div"),F(UL.$$.fragment),AQo=l(),S_e=a("p"),LQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yQo=l(),Ga=a("p"),xQo=o("The model class to instantiate is selected based on the "),R_e=a("code"),$Qo=o("model_type"),kQo=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),SQo=o("pretrained_model_name_or_path"),RQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),PQo=o("pretrained_model_name_or_path"),BQo=o(":"),NQo=l(),Io=a("ul"),d5=a("li"),N_e=a("strong"),IQo=o("bert"),qQo=o(" \u2014 "),GX=a("a"),jQo=o("BertForNextSentencePrediction"),DQo=o(" (BERT model)"),GQo=l(),c5=a("li"),I_e=a("strong"),OQo=o("fnet"),VQo=o(" \u2014 "),OX=a("a"),XQo=o("FNetForNextSentencePrediction"),zQo=o(" (FNet model)"),QQo=l(),f5=a("li"),q_e=a("strong"),WQo=o("megatron-bert"),HQo=o(" \u2014 "),VX=a("a"),UQo=o("MegatronBertForNextSentencePrediction"),JQo=o(" (Megatron-BERT model)"),YQo=l(),m5=a("li"),j_e=a("strong"),KQo=o("mobilebert"),ZQo=o(" \u2014 "),XX=a("a"),eWo=o("MobileBertForNextSentencePrediction"),oWo=o(" (MobileBERT model)"),rWo=l(),g5=a("li"),D_e=a("strong"),tWo=o("nezha"),aWo=o(" \u2014 "),zX=a("a"),nWo=o("NezhaForNextSentencePrediction"),sWo=o(" (Nezha model)"),lWo=l(),h5=a("li"),G_e=a("strong"),iWo=o("qdqbert"),dWo=o(" \u2014 "),QX=a("a"),cWo=o("QDQBertForNextSentencePrediction"),fWo=o(" (QDQBert model)"),mWo=l(),p5=a("p"),gWo=o("The model is set in evaluation mode by default using "),O_e=a("code"),hWo=o("model.eval()"),pWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=a("code"),_Wo=o("model.train()"),uWo=l(),F(_5.$$.fragment),YOe=l(),ld=a("h2"),u5=a("a"),X_e=a("span"),F(JL.$$.fragment),bWo=l(),z_e=a("span"),vWo=o("AutoModelForTokenClassification"),KOe=l(),qo=a("div"),F(YL.$$.fragment),FWo=l(),id=a("p"),TWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WX=a("a"),MWo=o("from_pretrained()"),EWo=o(" class method or the "),HX=a("a"),CWo=o("from_config()"),wWo=o(` class
method.`),AWo=l(),KL=a("p"),LWo=o("This class cannot be instantiated directly using "),Q_e=a("code"),yWo=o("__init__()"),xWo=o(" (throws an error)."),$Wo=l(),ht=a("div"),F(ZL.$$.fragment),kWo=l(),W_e=a("p"),SWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RWo=l(),dd=a("p"),PWo=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),BWo=o("not"),NWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),IWo=o("from_pretrained()"),qWo=o(" to load the model weights."),jWo=l(),F(b5.$$.fragment),DWo=l(),ao=a("div"),F(ey.$$.fragment),GWo=l(),U_e=a("p"),OWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VWo=l(),Oa=a("p"),XWo=o("The model class to instantiate is selected based on the "),J_e=a("code"),zWo=o("model_type"),QWo=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),WWo=o("pretrained_model_name_or_path"),HWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),UWo=o("pretrained_model_name_or_path"),JWo=o(":"),YWo=l(),H=a("ul"),v5=a("li"),Z_e=a("strong"),KWo=o("albert"),ZWo=o(" \u2014 "),JX=a("a"),eHo=o("AlbertForTokenClassification"),oHo=o(" (ALBERT model)"),rHo=l(),F5=a("li"),eue=a("strong"),tHo=o("bert"),aHo=o(" \u2014 "),YX=a("a"),nHo=o("BertForTokenClassification"),sHo=o(" (BERT model)"),lHo=l(),T5=a("li"),oue=a("strong"),iHo=o("big_bird"),dHo=o(" \u2014 "),KX=a("a"),cHo=o("BigBirdForTokenClassification"),fHo=o(" (BigBird model)"),mHo=l(),M5=a("li"),rue=a("strong"),gHo=o("bloom"),hHo=o(" \u2014 "),ZX=a("a"),pHo=o("BloomForTokenClassification"),_Ho=o(" (BLOOM model)"),uHo=l(),E5=a("li"),tue=a("strong"),bHo=o("camembert"),vHo=o(" \u2014 "),ez=a("a"),FHo=o("CamembertForTokenClassification"),THo=o(" (CamemBERT model)"),MHo=l(),C5=a("li"),aue=a("strong"),EHo=o("canine"),CHo=o(" \u2014 "),oz=a("a"),wHo=o("CanineForTokenClassification"),AHo=o(" (CANINE model)"),LHo=l(),w5=a("li"),nue=a("strong"),yHo=o("convbert"),xHo=o(" \u2014 "),rz=a("a"),$Ho=o("ConvBertForTokenClassification"),kHo=o(" (ConvBERT model)"),SHo=l(),A5=a("li"),sue=a("strong"),RHo=o("data2vec-text"),PHo=o(" \u2014 "),tz=a("a"),BHo=o("Data2VecTextForTokenClassification"),NHo=o(" (Data2VecText model)"),IHo=l(),L5=a("li"),lue=a("strong"),qHo=o("deberta"),jHo=o(" \u2014 "),az=a("a"),DHo=o("DebertaForTokenClassification"),GHo=o(" (DeBERTa model)"),OHo=l(),y5=a("li"),iue=a("strong"),VHo=o("deberta-v2"),XHo=o(" \u2014 "),nz=a("a"),zHo=o("DebertaV2ForTokenClassification"),QHo=o(" (DeBERTa-v2 model)"),WHo=l(),x5=a("li"),due=a("strong"),HHo=o("distilbert"),UHo=o(" \u2014 "),sz=a("a"),JHo=o("DistilBertForTokenClassification"),YHo=o(" (DistilBERT model)"),KHo=l(),$5=a("li"),cue=a("strong"),ZHo=o("electra"),eUo=o(" \u2014 "),lz=a("a"),oUo=o("ElectraForTokenClassification"),rUo=o(" (ELECTRA model)"),tUo=l(),k5=a("li"),fue=a("strong"),aUo=o("flaubert"),nUo=o(" \u2014 "),iz=a("a"),sUo=o("FlaubertForTokenClassification"),lUo=o(" (FlauBERT model)"),iUo=l(),S5=a("li"),mue=a("strong"),dUo=o("fnet"),cUo=o(" \u2014 "),dz=a("a"),fUo=o("FNetForTokenClassification"),mUo=o(" (FNet model)"),gUo=l(),R5=a("li"),gue=a("strong"),hUo=o("funnel"),pUo=o(" \u2014 "),cz=a("a"),_Uo=o("FunnelForTokenClassification"),uUo=o(" (Funnel Transformer model)"),bUo=l(),P5=a("li"),hue=a("strong"),vUo=o("gpt2"),FUo=o(" \u2014 "),fz=a("a"),TUo=o("GPT2ForTokenClassification"),MUo=o(" (OpenAI GPT-2 model)"),EUo=l(),B5=a("li"),pue=a("strong"),CUo=o("ibert"),wUo=o(" \u2014 "),mz=a("a"),AUo=o("IBertForTokenClassification"),LUo=o(" (I-BERT model)"),yUo=l(),N5=a("li"),_ue=a("strong"),xUo=o("layoutlm"),$Uo=o(" \u2014 "),gz=a("a"),kUo=o("LayoutLMForTokenClassification"),SUo=o(" (LayoutLM model)"),RUo=l(),I5=a("li"),uue=a("strong"),PUo=o("layoutlmv2"),BUo=o(" \u2014 "),hz=a("a"),NUo=o("LayoutLMv2ForTokenClassification"),IUo=o(" (LayoutLMv2 model)"),qUo=l(),q5=a("li"),bue=a("strong"),jUo=o("layoutlmv3"),DUo=o(" \u2014 "),pz=a("a"),GUo=o("LayoutLMv3ForTokenClassification"),OUo=o(" (LayoutLMv3 model)"),VUo=l(),j5=a("li"),vue=a("strong"),XUo=o("longformer"),zUo=o(" \u2014 "),_z=a("a"),QUo=o("LongformerForTokenClassification"),WUo=o(" (Longformer model)"),HUo=l(),D5=a("li"),Fue=a("strong"),UUo=o("megatron-bert"),JUo=o(" \u2014 "),uz=a("a"),YUo=o("MegatronBertForTokenClassification"),KUo=o(" (Megatron-BERT model)"),ZUo=l(),G5=a("li"),Tue=a("strong"),eJo=o("mobilebert"),oJo=o(" \u2014 "),bz=a("a"),rJo=o("MobileBertForTokenClassification"),tJo=o(" (MobileBERT model)"),aJo=l(),O5=a("li"),Mue=a("strong"),nJo=o("mpnet"),sJo=o(" \u2014 "),vz=a("a"),lJo=o("MPNetForTokenClassification"),iJo=o(" (MPNet model)"),dJo=l(),V5=a("li"),Eue=a("strong"),cJo=o("nezha"),fJo=o(" \u2014 "),Fz=a("a"),mJo=o("NezhaForTokenClassification"),gJo=o(" (Nezha model)"),hJo=l(),X5=a("li"),Cue=a("strong"),pJo=o("nystromformer"),_Jo=o(" \u2014 "),Tz=a("a"),uJo=o("NystromformerForTokenClassification"),bJo=o(" (Nystr\xF6mformer model)"),vJo=l(),z5=a("li"),wue=a("strong"),FJo=o("qdqbert"),TJo=o(" \u2014 "),Mz=a("a"),MJo=o("QDQBertForTokenClassification"),EJo=o(" (QDQBert model)"),CJo=l(),Q5=a("li"),Aue=a("strong"),wJo=o("rembert"),AJo=o(" \u2014 "),Ez=a("a"),LJo=o("RemBertForTokenClassification"),yJo=o(" (RemBERT model)"),xJo=l(),W5=a("li"),Lue=a("strong"),$Jo=o("roberta"),kJo=o(" \u2014 "),Cz=a("a"),SJo=o("RobertaForTokenClassification"),RJo=o(" (RoBERTa model)"),PJo=l(),H5=a("li"),yue=a("strong"),BJo=o("roformer"),NJo=o(" \u2014 "),wz=a("a"),IJo=o("RoFormerForTokenClassification"),qJo=o(" (RoFormer model)"),jJo=l(),U5=a("li"),xue=a("strong"),DJo=o("squeezebert"),GJo=o(" \u2014 "),Az=a("a"),OJo=o("SqueezeBertForTokenClassification"),VJo=o(" (SqueezeBERT model)"),XJo=l(),J5=a("li"),$ue=a("strong"),zJo=o("xlm"),QJo=o(" \u2014 "),Lz=a("a"),WJo=o("XLMForTokenClassification"),HJo=o(" (XLM model)"),UJo=l(),Y5=a("li"),kue=a("strong"),JJo=o("xlm-roberta"),YJo=o(" \u2014 "),yz=a("a"),KJo=o("XLMRobertaForTokenClassification"),ZJo=o(" (XLM-RoBERTa model)"),eYo=l(),K5=a("li"),Sue=a("strong"),oYo=o("xlm-roberta-xl"),rYo=o(" \u2014 "),xz=a("a"),tYo=o("XLMRobertaXLForTokenClassification"),aYo=o(" (XLM-RoBERTa-XL model)"),nYo=l(),Z5=a("li"),Rue=a("strong"),sYo=o("xlnet"),lYo=o(" \u2014 "),$z=a("a"),iYo=o("XLNetForTokenClassification"),dYo=o(" (XLNet model)"),cYo=l(),ev=a("li"),Pue=a("strong"),fYo=o("yoso"),mYo=o(" \u2014 "),kz=a("a"),gYo=o("YosoForTokenClassification"),hYo=o(" (YOSO model)"),pYo=l(),ov=a("p"),_Yo=o("The model is set in evaluation mode by default using "),Bue=a("code"),uYo=o("model.eval()"),bYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),vYo=o("model.train()"),FYo=l(),F(rv.$$.fragment),ZOe=l(),cd=a("h2"),tv=a("a"),Iue=a("span"),F(oy.$$.fragment),TYo=l(),que=a("span"),MYo=o("AutoModelForQuestionAnswering"),eVe=l(),jo=a("div"),F(ry.$$.fragment),EYo=l(),fd=a("p"),CYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Sz=a("a"),wYo=o("from_pretrained()"),AYo=o(" class method or the "),Rz=a("a"),LYo=o("from_config()"),yYo=o(` class
method.`),xYo=l(),ty=a("p"),$Yo=o("This class cannot be instantiated directly using "),jue=a("code"),kYo=o("__init__()"),SYo=o(" (throws an error)."),RYo=l(),pt=a("div"),F(ay.$$.fragment),PYo=l(),Due=a("p"),BYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NYo=l(),md=a("p"),IYo=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),qYo=o("not"),jYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),DYo=o("from_pretrained()"),GYo=o(" to load the model weights."),OYo=l(),F(av.$$.fragment),VYo=l(),no=a("div"),F(ny.$$.fragment),XYo=l(),Oue=a("p"),zYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QYo=l(),Va=a("p"),WYo=o("The model class to instantiate is selected based on the "),Vue=a("code"),HYo=o("model_type"),UYo=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),JYo=o("pretrained_model_name_or_path"),YYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(":"),eKo=l(),V=a("ul"),nv=a("li"),Que=a("strong"),oKo=o("albert"),rKo=o(" \u2014 "),Bz=a("a"),tKo=o("AlbertForQuestionAnswering"),aKo=o(" (ALBERT model)"),nKo=l(),sv=a("li"),Wue=a("strong"),sKo=o("bart"),lKo=o(" \u2014 "),Nz=a("a"),iKo=o("BartForQuestionAnswering"),dKo=o(" (BART model)"),cKo=l(),lv=a("li"),Hue=a("strong"),fKo=o("bert"),mKo=o(" \u2014 "),Iz=a("a"),gKo=o("BertForQuestionAnswering"),hKo=o(" (BERT model)"),pKo=l(),iv=a("li"),Uue=a("strong"),_Ko=o("big_bird"),uKo=o(" \u2014 "),qz=a("a"),bKo=o("BigBirdForQuestionAnswering"),vKo=o(" (BigBird model)"),FKo=l(),dv=a("li"),Jue=a("strong"),TKo=o("bigbird_pegasus"),MKo=o(" \u2014 "),jz=a("a"),EKo=o("BigBirdPegasusForQuestionAnswering"),CKo=o(" (BigBird-Pegasus model)"),wKo=l(),cv=a("li"),Yue=a("strong"),AKo=o("camembert"),LKo=o(" \u2014 "),Dz=a("a"),yKo=o("CamembertForQuestionAnswering"),xKo=o(" (CamemBERT model)"),$Ko=l(),fv=a("li"),Kue=a("strong"),kKo=o("canine"),SKo=o(" \u2014 "),Gz=a("a"),RKo=o("CanineForQuestionAnswering"),PKo=o(" (CANINE model)"),BKo=l(),mv=a("li"),Zue=a("strong"),NKo=o("convbert"),IKo=o(" \u2014 "),Oz=a("a"),qKo=o("ConvBertForQuestionAnswering"),jKo=o(" (ConvBERT model)"),DKo=l(),gv=a("li"),e1e=a("strong"),GKo=o("data2vec-text"),OKo=o(" \u2014 "),Vz=a("a"),VKo=o("Data2VecTextForQuestionAnswering"),XKo=o(" (Data2VecText model)"),zKo=l(),hv=a("li"),o1e=a("strong"),QKo=o("deberta"),WKo=o(" \u2014 "),Xz=a("a"),HKo=o("DebertaForQuestionAnswering"),UKo=o(" (DeBERTa model)"),JKo=l(),pv=a("li"),r1e=a("strong"),YKo=o("deberta-v2"),KKo=o(" \u2014 "),zz=a("a"),ZKo=o("DebertaV2ForQuestionAnswering"),eZo=o(" (DeBERTa-v2 model)"),oZo=l(),_v=a("li"),t1e=a("strong"),rZo=o("distilbert"),tZo=o(" \u2014 "),Qz=a("a"),aZo=o("DistilBertForQuestionAnswering"),nZo=o(" (DistilBERT model)"),sZo=l(),uv=a("li"),a1e=a("strong"),lZo=o("electra"),iZo=o(" \u2014 "),Wz=a("a"),dZo=o("ElectraForQuestionAnswering"),cZo=o(" (ELECTRA model)"),fZo=l(),bv=a("li"),n1e=a("strong"),mZo=o("flaubert"),gZo=o(" \u2014 "),Hz=a("a"),hZo=o("FlaubertForQuestionAnsweringSimple"),pZo=o(" (FlauBERT model)"),_Zo=l(),vv=a("li"),s1e=a("strong"),uZo=o("fnet"),bZo=o(" \u2014 "),Uz=a("a"),vZo=o("FNetForQuestionAnswering"),FZo=o(" (FNet model)"),TZo=l(),Fv=a("li"),l1e=a("strong"),MZo=o("funnel"),EZo=o(" \u2014 "),Jz=a("a"),CZo=o("FunnelForQuestionAnswering"),wZo=o(" (Funnel Transformer model)"),AZo=l(),Tv=a("li"),i1e=a("strong"),LZo=o("gptj"),yZo=o(" \u2014 "),Yz=a("a"),xZo=o("GPTJForQuestionAnswering"),$Zo=o(" (GPT-J model)"),kZo=l(),Mv=a("li"),d1e=a("strong"),SZo=o("ibert"),RZo=o(" \u2014 "),Kz=a("a"),PZo=o("IBertForQuestionAnswering"),BZo=o(" (I-BERT model)"),NZo=l(),Ev=a("li"),c1e=a("strong"),IZo=o("layoutlmv2"),qZo=o(" \u2014 "),Zz=a("a"),jZo=o("LayoutLMv2ForQuestionAnswering"),DZo=o(" (LayoutLMv2 model)"),GZo=l(),Cv=a("li"),f1e=a("strong"),OZo=o("layoutlmv3"),VZo=o(" \u2014 "),eQ=a("a"),XZo=o("LayoutLMv3ForQuestionAnswering"),zZo=o(" (LayoutLMv3 model)"),QZo=l(),wv=a("li"),m1e=a("strong"),WZo=o("led"),HZo=o(" \u2014 "),oQ=a("a"),UZo=o("LEDForQuestionAnswering"),JZo=o(" (LED model)"),YZo=l(),Av=a("li"),g1e=a("strong"),KZo=o("longformer"),ZZo=o(" \u2014 "),rQ=a("a"),eer=o("LongformerForQuestionAnswering"),oer=o(" (Longformer model)"),rer=l(),Lv=a("li"),h1e=a("strong"),ter=o("lxmert"),aer=o(" \u2014 "),tQ=a("a"),ner=o("LxmertForQuestionAnswering"),ser=o(" (LXMERT model)"),ler=l(),yv=a("li"),p1e=a("strong"),ier=o("mbart"),der=o(" \u2014 "),aQ=a("a"),cer=o("MBartForQuestionAnswering"),fer=o(" (mBART model)"),mer=l(),xv=a("li"),_1e=a("strong"),ger=o("megatron-bert"),her=o(" \u2014 "),nQ=a("a"),per=o("MegatronBertForQuestionAnswering"),_er=o(" (Megatron-BERT model)"),uer=l(),$v=a("li"),u1e=a("strong"),ber=o("mobilebert"),ver=o(" \u2014 "),sQ=a("a"),Fer=o("MobileBertForQuestionAnswering"),Ter=o(" (MobileBERT model)"),Mer=l(),kv=a("li"),b1e=a("strong"),Eer=o("mpnet"),Cer=o(" \u2014 "),lQ=a("a"),wer=o("MPNetForQuestionAnswering"),Aer=o(" (MPNet model)"),Ler=l(),Sv=a("li"),v1e=a("strong"),yer=o("nezha"),xer=o(" \u2014 "),iQ=a("a"),$er=o("NezhaForQuestionAnswering"),ker=o(" (Nezha model)"),Ser=l(),Rv=a("li"),F1e=a("strong"),Rer=o("nystromformer"),Per=o(" \u2014 "),dQ=a("a"),Ber=o("NystromformerForQuestionAnswering"),Ner=o(" (Nystr\xF6mformer model)"),Ier=l(),Pv=a("li"),T1e=a("strong"),qer=o("qdqbert"),jer=o(" \u2014 "),cQ=a("a"),Der=o("QDQBertForQuestionAnswering"),Ger=o(" (QDQBert model)"),Oer=l(),Bv=a("li"),M1e=a("strong"),Ver=o("reformer"),Xer=o(" \u2014 "),fQ=a("a"),zer=o("ReformerForQuestionAnswering"),Qer=o(" (Reformer model)"),Wer=l(),Nv=a("li"),E1e=a("strong"),Her=o("rembert"),Uer=o(" \u2014 "),mQ=a("a"),Jer=o("RemBertForQuestionAnswering"),Yer=o(" (RemBERT model)"),Ker=l(),Iv=a("li"),C1e=a("strong"),Zer=o("roberta"),eor=o(" \u2014 "),gQ=a("a"),oor=o("RobertaForQuestionAnswering"),ror=o(" (RoBERTa model)"),tor=l(),qv=a("li"),w1e=a("strong"),aor=o("roformer"),nor=o(" \u2014 "),hQ=a("a"),sor=o("RoFormerForQuestionAnswering"),lor=o(" (RoFormer model)"),ior=l(),jv=a("li"),A1e=a("strong"),dor=o("splinter"),cor=o(" \u2014 "),pQ=a("a"),mor=o("SplinterForQuestionAnswering"),gor=o(" (Splinter model)"),hor=l(),Dv=a("li"),L1e=a("strong"),por=o("squeezebert"),_or=o(" \u2014 "),_Q=a("a"),uor=o("SqueezeBertForQuestionAnswering"),bor=o(" (SqueezeBERT model)"),vor=l(),Gv=a("li"),y1e=a("strong"),For=o("xlm"),Tor=o(" \u2014 "),uQ=a("a"),Mor=o("XLMForQuestionAnsweringSimple"),Eor=o(" (XLM model)"),Cor=l(),Ov=a("li"),x1e=a("strong"),wor=o("xlm-roberta"),Aor=o(" \u2014 "),bQ=a("a"),Lor=o("XLMRobertaForQuestionAnswering"),yor=o(" (XLM-RoBERTa model)"),xor=l(),Vv=a("li"),$1e=a("strong"),$or=o("xlm-roberta-xl"),kor=o(" \u2014 "),vQ=a("a"),Sor=o("XLMRobertaXLForQuestionAnswering"),Ror=o(" (XLM-RoBERTa-XL model)"),Por=l(),Xv=a("li"),k1e=a("strong"),Bor=o("xlnet"),Nor=o(" \u2014 "),FQ=a("a"),Ior=o("XLNetForQuestionAnsweringSimple"),qor=o(" (XLNet model)"),jor=l(),zv=a("li"),S1e=a("strong"),Dor=o("yoso"),Gor=o(" \u2014 "),TQ=a("a"),Oor=o("YosoForQuestionAnswering"),Vor=o(" (YOSO model)"),Xor=l(),Qv=a("p"),zor=o("The model is set in evaluation mode by default using "),R1e=a("code"),Qor=o("model.eval()"),Wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),Hor=o("model.train()"),Uor=l(),F(Wv.$$.fragment),oVe=l(),gd=a("h2"),Hv=a("a"),B1e=a("span"),F(sy.$$.fragment),Jor=l(),N1e=a("span"),Yor=o("AutoModelForTableQuestionAnswering"),rVe=l(),Do=a("div"),F(ly.$$.fragment),Kor=l(),hd=a("p"),Zor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MQ=a("a"),err=o("from_pretrained()"),orr=o(" class method or the "),EQ=a("a"),rrr=o("from_config()"),trr=o(` class
method.`),arr=l(),iy=a("p"),nrr=o("This class cannot be instantiated directly using "),I1e=a("code"),srr=o("__init__()"),lrr=o(" (throws an error)."),irr=l(),_t=a("div"),F(dy.$$.fragment),drr=l(),q1e=a("p"),crr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),frr=l(),pd=a("p"),mrr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),grr=o("not"),hrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),prr=o("from_pretrained()"),_rr=o(" to load the model weights."),urr=l(),F(Uv.$$.fragment),brr=l(),so=a("div"),F(cy.$$.fragment),vrr=l(),D1e=a("p"),Frr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Trr=l(),Xa=a("p"),Mrr=o("The model class to instantiate is selected based on the "),G1e=a("code"),Err=o("model_type"),Crr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),Lrr=o("pretrained_model_name_or_path"),yrr=o(":"),xrr=l(),X1e=a("ul"),Jv=a("li"),z1e=a("strong"),$rr=o("tapas"),krr=o(" \u2014 "),wQ=a("a"),Srr=o("TapasForQuestionAnswering"),Rrr=o(" (TAPAS model)"),Prr=l(),Yv=a("p"),Brr=o("The model is set in evaluation mode by default using "),Q1e=a("code"),Nrr=o("model.eval()"),Irr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=a("code"),qrr=o("model.train()"),jrr=l(),F(Kv.$$.fragment),tVe=l(),_d=a("h2"),Zv=a("a"),H1e=a("span"),F(fy.$$.fragment),Drr=l(),U1e=a("span"),Grr=o("AutoModelForImageClassification"),aVe=l(),Go=a("div"),F(my.$$.fragment),Orr=l(),ud=a("p"),Vrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AQ=a("a"),Xrr=o("from_pretrained()"),zrr=o(" class method or the "),LQ=a("a"),Qrr=o("from_config()"),Wrr=o(` class
method.`),Hrr=l(),gy=a("p"),Urr=o("This class cannot be instantiated directly using "),J1e=a("code"),Jrr=o("__init__()"),Yrr=o(" (throws an error)."),Krr=l(),ut=a("div"),F(hy.$$.fragment),Zrr=l(),Y1e=a("p"),etr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),otr=l(),bd=a("p"),rtr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),ttr=o("not"),atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),ntr=o("from_pretrained()"),str=o(" to load the model weights."),ltr=l(),F(eF.$$.fragment),itr=l(),lo=a("div"),F(py.$$.fragment),dtr=l(),Z1e=a("p"),ctr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ftr=l(),za=a("p"),mtr=o("The model class to instantiate is selected based on the "),e2e=a("code"),gtr=o("model_type"),htr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),ptr=o("pretrained_model_name_or_path"),_tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),utr=o("pretrained_model_name_or_path"),btr=o(":"),vtr=l(),ue=a("ul"),oF=a("li"),t2e=a("strong"),Ftr=o("beit"),Ttr=o(" \u2014 "),xQ=a("a"),Mtr=o("BeitForImageClassification"),Etr=o(" (BEiT model)"),Ctr=l(),rF=a("li"),a2e=a("strong"),wtr=o("convnext"),Atr=o(" \u2014 "),$Q=a("a"),Ltr=o("ConvNextForImageClassification"),ytr=o(" (ConvNeXT model)"),xtr=l(),tF=a("li"),n2e=a("strong"),$tr=o("cvt"),ktr=o(" \u2014 "),kQ=a("a"),Str=o("CvtForImageClassification"),Rtr=o(" (CvT model)"),Ptr=l(),aF=a("li"),s2e=a("strong"),Btr=o("data2vec-vision"),Ntr=o(" \u2014 "),SQ=a("a"),Itr=o("Data2VecVisionForImageClassification"),qtr=o(" (Data2VecVision model)"),jtr=l(),zs=a("li"),l2e=a("strong"),Dtr=o("deit"),Gtr=o(" \u2014 "),RQ=a("a"),Otr=o("DeiTForImageClassification"),Vtr=o(" or "),PQ=a("a"),Xtr=o("DeiTForImageClassificationWithTeacher"),ztr=o(" (DeiT model)"),Qtr=l(),nF=a("li"),i2e=a("strong"),Wtr=o("imagegpt"),Htr=o(" \u2014 "),BQ=a("a"),Utr=o("ImageGPTForImageClassification"),Jtr=o(" (ImageGPT model)"),Ytr=l(),Qs=a("li"),d2e=a("strong"),Ktr=o("levit"),Ztr=o(" \u2014 "),NQ=a("a"),ear=o("LevitForImageClassification"),oar=o(" or "),IQ=a("a"),rar=o("LevitForImageClassificationWithTeacher"),tar=o(" (LeViT model)"),aar=l(),sF=a("li"),c2e=a("strong"),nar=o("mobilenet_v2"),sar=o(" \u2014 "),qQ=a("a"),lar=o("MobileNetV2ForImageClassification"),iar=o(" (MobileNetV2 model)"),dar=l(),bt=a("li"),f2e=a("strong"),car=o("perceiver"),far=o(" \u2014 "),jQ=a("a"),mar=o("PerceiverForImageClassificationLearned"),gar=o(" or "),DQ=a("a"),har=o("PerceiverForImageClassificationFourier"),par=o(" or "),GQ=a("a"),_ar=o("PerceiverForImageClassificationConvProcessing"),uar=o(" (Perceiver model)"),bar=l(),lF=a("li"),m2e=a("strong"),Far=o("poolformer"),Tar=o(" \u2014 "),OQ=a("a"),Mar=o("PoolFormerForImageClassification"),Ear=o(" (PoolFormer model)"),Car=l(),iF=a("li"),g2e=a("strong"),war=o("regnet"),Aar=o(" \u2014 "),VQ=a("a"),Lar=o("RegNetForImageClassification"),yar=o(" (RegNet model)"),xar=l(),dF=a("li"),h2e=a("strong"),$ar=o("resnet"),kar=o(" \u2014 "),XQ=a("a"),Sar=o("ResNetForImageClassification"),Rar=o(" (ResNet model)"),Par=l(),cF=a("li"),p2e=a("strong"),Bar=o("segformer"),Nar=o(" \u2014 "),zQ=a("a"),Iar=o("SegformerForImageClassification"),qar=o(" (SegFormer model)"),jar=l(),fF=a("li"),_2e=a("strong"),Dar=o("swin"),Gar=o(" \u2014 "),QQ=a("a"),Oar=o("SwinForImageClassification"),Var=o(" (Swin Transformer model)"),Xar=l(),mF=a("li"),u2e=a("strong"),zar=o("van"),Qar=o(" \u2014 "),WQ=a("a"),War=o("VanForImageClassification"),Har=o(" (VAN model)"),Uar=l(),gF=a("li"),b2e=a("strong"),Jar=o("vit"),Yar=o(" \u2014 "),HQ=a("a"),Kar=o("ViTForImageClassification"),Zar=o(" (ViT model)"),enr=l(),hF=a("p"),onr=o("The model is set in evaluation mode by default using "),v2e=a("code"),rnr=o("model.eval()"),tnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=a("code"),anr=o("model.train()"),nnr=l(),F(pF.$$.fragment),nVe=l(),vd=a("h2"),_F=a("a"),T2e=a("span"),F(_y.$$.fragment),snr=l(),M2e=a("span"),lnr=o("AutoModelForVision2Seq"),sVe=l(),Oo=a("div"),F(uy.$$.fragment),inr=l(),Fd=a("p"),dnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UQ=a("a"),cnr=o("from_pretrained()"),fnr=o(" class method or the "),JQ=a("a"),mnr=o("from_config()"),gnr=o(` class
method.`),hnr=l(),by=a("p"),pnr=o("This class cannot be instantiated directly using "),E2e=a("code"),_nr=o("__init__()"),unr=o(" (throws an error)."),bnr=l(),vt=a("div"),F(vy.$$.fragment),vnr=l(),C2e=a("p"),Fnr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tnr=l(),Td=a("p"),Mnr=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),Enr=o("not"),Cnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),wnr=o("from_pretrained()"),Anr=o(" to load the model weights."),Lnr=l(),F(uF.$$.fragment),ynr=l(),io=a("div"),F(Fy.$$.fragment),xnr=l(),A2e=a("p"),$nr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),knr=l(),Qa=a("p"),Snr=o("The model class to instantiate is selected based on the "),L2e=a("code"),Rnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),Bnr=o("pretrained_model_name_or_path"),Nnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),Inr=o("pretrained_model_name_or_path"),qnr=o(":"),jnr=l(),$2e=a("ul"),bF=a("li"),k2e=a("strong"),Dnr=o("vision-encoder-decoder"),Gnr=o(" \u2014 "),KQ=a("a"),Onr=o("VisionEncoderDecoderModel"),Vnr=o(" (Vision Encoder decoder model)"),Xnr=l(),vF=a("p"),znr=o("The model is set in evaluation mode by default using "),S2e=a("code"),Qnr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=a("code"),Hnr=o("model.train()"),Unr=l(),F(FF.$$.fragment),lVe=l(),Md=a("h2"),TF=a("a"),P2e=a("span"),F(Ty.$$.fragment),Jnr=l(),B2e=a("span"),Ynr=o("AutoModelForVisualQuestionAnswering"),iVe=l(),Vo=a("div"),F(My.$$.fragment),Knr=l(),Ed=a("p"),Znr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),ZQ=a("a"),esr=o("from_pretrained()"),osr=o(" class method or the "),eW=a("a"),rsr=o("from_config()"),tsr=o(` class
method.`),asr=l(),Ey=a("p"),nsr=o("This class cannot be instantiated directly using "),N2e=a("code"),ssr=o("__init__()"),lsr=o(" (throws an error)."),isr=l(),Ft=a("div"),F(Cy.$$.fragment),dsr=l(),I2e=a("p"),csr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),fsr=l(),Cd=a("p"),msr=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),gsr=o("not"),hsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),psr=o("from_pretrained()"),_sr=o(" to load the model weights."),usr=l(),F(MF.$$.fragment),bsr=l(),co=a("div"),F(wy.$$.fragment),vsr=l(),j2e=a("p"),Fsr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Tsr=l(),Wa=a("p"),Msr=o("The model class to instantiate is selected based on the "),D2e=a("code"),Esr=o("model_type"),Csr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),Lsr=o("pretrained_model_name_or_path"),ysr=o(":"),xsr=l(),V2e=a("ul"),EF=a("li"),X2e=a("strong"),$sr=o("vilt"),ksr=o(" \u2014 "),rW=a("a"),Ssr=o("ViltForQuestionAnswering"),Rsr=o(" (ViLT model)"),Psr=l(),CF=a("p"),Bsr=o("The model is set in evaluation mode by default using "),z2e=a("code"),Nsr=o("model.eval()"),Isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=a("code"),qsr=o("model.train()"),jsr=l(),F(wF.$$.fragment),dVe=l(),wd=a("h2"),AF=a("a"),W2e=a("span"),F(Ay.$$.fragment),Dsr=l(),H2e=a("span"),Gsr=o("AutoModelForAudioClassification"),cVe=l(),Xo=a("div"),F(Ly.$$.fragment),Osr=l(),Ad=a("p"),Vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tW=a("a"),Xsr=o("from_pretrained()"),zsr=o(" class method or the "),aW=a("a"),Qsr=o("from_config()"),Wsr=o(` class
method.`),Hsr=l(),yy=a("p"),Usr=o("This class cannot be instantiated directly using "),U2e=a("code"),Jsr=o("__init__()"),Ysr=o(" (throws an error)."),Ksr=l(),Tt=a("div"),F(xy.$$.fragment),Zsr=l(),J2e=a("p"),elr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),olr=l(),Ld=a("p"),rlr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),tlr=o("not"),alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),nlr=o("from_pretrained()"),slr=o(" to load the model weights."),llr=l(),F(LF.$$.fragment),ilr=l(),fo=a("div"),F($y.$$.fragment),dlr=l(),K2e=a("p"),clr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),flr=l(),Ha=a("p"),mlr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),glr=o("model_type"),hlr=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),ulr=o("pretrained_model_name_or_path"),blr=o(":"),vlr=l(),Pe=a("ul"),yF=a("li"),rbe=a("strong"),Flr=o("data2vec-audio"),Tlr=o(" \u2014 "),sW=a("a"),Mlr=o("Data2VecAudioForSequenceClassification"),Elr=o(" (Data2VecAudio model)"),Clr=l(),xF=a("li"),tbe=a("strong"),wlr=o("hubert"),Alr=o(" \u2014 "),lW=a("a"),Llr=o("HubertForSequenceClassification"),ylr=o(" (Hubert model)"),xlr=l(),$F=a("li"),abe=a("strong"),$lr=o("sew"),klr=o(" \u2014 "),iW=a("a"),Slr=o("SEWForSequenceClassification"),Rlr=o(" (SEW model)"),Plr=l(),kF=a("li"),nbe=a("strong"),Blr=o("sew-d"),Nlr=o(" \u2014 "),dW=a("a"),Ilr=o("SEWDForSequenceClassification"),qlr=o(" (SEW-D model)"),jlr=l(),SF=a("li"),sbe=a("strong"),Dlr=o("unispeech"),Glr=o(" \u2014 "),cW=a("a"),Olr=o("UniSpeechForSequenceClassification"),Vlr=o(" (UniSpeech model)"),Xlr=l(),RF=a("li"),lbe=a("strong"),zlr=o("unispeech-sat"),Qlr=o(" \u2014 "),fW=a("a"),Wlr=o("UniSpeechSatForSequenceClassification"),Hlr=o(" (UniSpeechSat model)"),Ulr=l(),PF=a("li"),ibe=a("strong"),Jlr=o("wav2vec2"),Ylr=o(" \u2014 "),mW=a("a"),Klr=o("Wav2Vec2ForSequenceClassification"),Zlr=o(" (Wav2Vec2 model)"),eir=l(),BF=a("li"),dbe=a("strong"),oir=o("wav2vec2-conformer"),rir=o(" \u2014 "),gW=a("a"),tir=o("Wav2Vec2ConformerForSequenceClassification"),air=o(" (Wav2Vec2-Conformer model)"),nir=l(),NF=a("li"),cbe=a("strong"),sir=o("wavlm"),lir=o(" \u2014 "),hW=a("a"),iir=o("WavLMForSequenceClassification"),dir=o(" (WavLM model)"),cir=l(),IF=a("p"),fir=o("The model is set in evaluation mode by default using "),fbe=a("code"),mir=o("model.eval()"),gir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=a("code"),hir=o("model.train()"),pir=l(),F(qF.$$.fragment),fVe=l(),yd=a("h2"),jF=a("a"),gbe=a("span"),F(ky.$$.fragment),_ir=l(),hbe=a("span"),uir=o("AutoModelForAudioFrameClassification"),mVe=l(),zo=a("div"),F(Sy.$$.fragment),bir=l(),xd=a("p"),vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pW=a("a"),Fir=o("from_pretrained()"),Tir=o(" class method or the "),_W=a("a"),Mir=o("from_config()"),Eir=o(` class
method.`),Cir=l(),Ry=a("p"),wir=o("This class cannot be instantiated directly using "),pbe=a("code"),Air=o("__init__()"),Lir=o(" (throws an error)."),yir=l(),Mt=a("div"),F(Py.$$.fragment),xir=l(),_be=a("p"),$ir=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kir=l(),$d=a("p"),Sir=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),Rir=o("not"),Pir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Bir=o("from_pretrained()"),Nir=o(" to load the model weights."),Iir=l(),F(DF.$$.fragment),qir=l(),mo=a("div"),F(By.$$.fragment),jir=l(),bbe=a("p"),Dir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Gir=l(),Ua=a("p"),Oir=o("The model class to instantiate is selected based on the "),vbe=a("code"),Vir=o("model_type"),Xir=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),zir=o("pretrained_model_name_or_path"),Qir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),Wir=o("pretrained_model_name_or_path"),Hir=o(":"),Uir=l(),et=a("ul"),GF=a("li"),Mbe=a("strong"),Jir=o("data2vec-audio"),Yir=o(" \u2014 "),bW=a("a"),Kir=o("Data2VecAudioForAudioFrameClassification"),Zir=o(" (Data2VecAudio model)"),edr=l(),OF=a("li"),Ebe=a("strong"),odr=o("unispeech-sat"),rdr=o(" \u2014 "),vW=a("a"),tdr=o("UniSpeechSatForAudioFrameClassification"),adr=o(" (UniSpeechSat model)"),ndr=l(),VF=a("li"),Cbe=a("strong"),sdr=o("wav2vec2"),ldr=o(" \u2014 "),FW=a("a"),idr=o("Wav2Vec2ForAudioFrameClassification"),ddr=o(" (Wav2Vec2 model)"),cdr=l(),XF=a("li"),wbe=a("strong"),fdr=o("wav2vec2-conformer"),mdr=o(" \u2014 "),TW=a("a"),gdr=o("Wav2Vec2ConformerForAudioFrameClassification"),hdr=o(" (Wav2Vec2-Conformer model)"),pdr=l(),zF=a("li"),Abe=a("strong"),_dr=o("wavlm"),udr=o(" \u2014 "),MW=a("a"),bdr=o("WavLMForAudioFrameClassification"),vdr=o(" (WavLM model)"),Fdr=l(),QF=a("p"),Tdr=o("The model is set in evaluation mode by default using "),Lbe=a("code"),Mdr=o("model.eval()"),Edr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),Cdr=o("model.train()"),wdr=l(),F(WF.$$.fragment),gVe=l(),kd=a("h2"),HF=a("a"),xbe=a("span"),F(Ny.$$.fragment),Adr=l(),$be=a("span"),Ldr=o("AutoModelForCTC"),hVe=l(),Qo=a("div"),F(Iy.$$.fragment),ydr=l(),Sd=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EW=a("a"),$dr=o("from_pretrained()"),kdr=o(" class method or the "),CW=a("a"),Sdr=o("from_config()"),Rdr=o(` class
method.`),Pdr=l(),qy=a("p"),Bdr=o("This class cannot be instantiated directly using "),kbe=a("code"),Ndr=o("__init__()"),Idr=o(" (throws an error)."),qdr=l(),Et=a("div"),F(jy.$$.fragment),jdr=l(),Sbe=a("p"),Ddr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Gdr=l(),Rd=a("p"),Odr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),Vdr=o("not"),Xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),zdr=o("from_pretrained()"),Qdr=o(" to load the model weights."),Wdr=l(),F(UF.$$.fragment),Hdr=l(),go=a("div"),F(Dy.$$.fragment),Udr=l(),Pbe=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ydr=l(),Ja=a("p"),Kdr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),Le=a("ul"),JF=a("li"),qbe=a("strong"),scr=o("data2vec-audio"),lcr=o(" \u2014 "),AW=a("a"),icr=o("Data2VecAudioForCTC"),dcr=o(" (Data2VecAudio model)"),ccr=l(),YF=a("li"),jbe=a("strong"),fcr=o("hubert"),mcr=o(" \u2014 "),LW=a("a"),gcr=o("HubertForCTC"),hcr=o(" (Hubert model)"),pcr=l(),KF=a("li"),Dbe=a("strong"),_cr=o("mctct"),ucr=o(" \u2014 "),yW=a("a"),bcr=o("MCTCTForCTC"),vcr=o(" (M-CTC-T model)"),Fcr=l(),ZF=a("li"),Gbe=a("strong"),Tcr=o("sew"),Mcr=o(" \u2014 "),xW=a("a"),Ecr=o("SEWForCTC"),Ccr=o(" (SEW model)"),wcr=l(),eT=a("li"),Obe=a("strong"),Acr=o("sew-d"),Lcr=o(" \u2014 "),$W=a("a"),ycr=o("SEWDForCTC"),xcr=o(" (SEW-D model)"),$cr=l(),oT=a("li"),Vbe=a("strong"),kcr=o("unispeech"),Scr=o(" \u2014 "),kW=a("a"),Rcr=o("UniSpeechForCTC"),Pcr=o(" (UniSpeech model)"),Bcr=l(),rT=a("li"),Xbe=a("strong"),Ncr=o("unispeech-sat"),Icr=o(" \u2014 "),SW=a("a"),qcr=o("UniSpeechSatForCTC"),jcr=o(" (UniSpeechSat model)"),Dcr=l(),tT=a("li"),zbe=a("strong"),Gcr=o("wav2vec2"),Ocr=o(" \u2014 "),RW=a("a"),Vcr=o("Wav2Vec2ForCTC"),Xcr=o(" (Wav2Vec2 model)"),zcr=l(),aT=a("li"),Qbe=a("strong"),Qcr=o("wav2vec2-conformer"),Wcr=o(" \u2014 "),PW=a("a"),Hcr=o("Wav2Vec2ConformerForCTC"),Ucr=o(" (Wav2Vec2-Conformer model)"),Jcr=l(),nT=a("li"),Wbe=a("strong"),Ycr=o("wavlm"),Kcr=o(" \u2014 "),BW=a("a"),Zcr=o("WavLMForCTC"),efr=o(" (WavLM model)"),ofr=l(),sT=a("p"),rfr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),tfr=o("model.eval()"),afr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),nfr=o("model.train()"),sfr=l(),F(lT.$$.fragment),pVe=l(),Pd=a("h2"),iT=a("a"),Jbe=a("span"),F(Gy.$$.fragment),lfr=l(),Ybe=a("span"),ifr=o("AutoModelForSpeechSeq2Seq"),_Ve=l(),Wo=a("div"),F(Oy.$$.fragment),dfr=l(),Bd=a("p"),cfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NW=a("a"),ffr=o("from_pretrained()"),mfr=o(" class method or the "),IW=a("a"),gfr=o("from_config()"),hfr=o(` class
method.`),pfr=l(),Vy=a("p"),_fr=o("This class cannot be instantiated directly using "),Kbe=a("code"),ufr=o("__init__()"),bfr=o(" (throws an error)."),vfr=l(),Ct=a("div"),F(Xy.$$.fragment),Ffr=l(),Zbe=a("p"),Tfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mfr=l(),Nd=a("p"),Efr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),Cfr=o("not"),wfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),Afr=o("from_pretrained()"),Lfr=o(" to load the model weights."),yfr=l(),F(dT.$$.fragment),xfr=l(),ho=a("div"),F(zy.$$.fragment),$fr=l(),o4e=a("p"),kfr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Sfr=l(),Ya=a("p"),Rfr=o("The model class to instantiate is selected based on the "),r4e=a("code"),Pfr=o("model_type"),Bfr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),Nfr=o("pretrained_model_name_or_path"),Ifr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),qfr=o("pretrained_model_name_or_path"),jfr=o(":"),Dfr=l(),Qy=a("ul"),cT=a("li"),n4e=a("strong"),Gfr=o("speech-encoder-decoder"),Ofr=o(" \u2014 "),jW=a("a"),Vfr=o("SpeechEncoderDecoderModel"),Xfr=o(" (Speech Encoder decoder model)"),zfr=l(),fT=a("li"),s4e=a("strong"),Qfr=o("speech_to_text"),Wfr=o(" \u2014 "),DW=a("a"),Hfr=o("Speech2TextForConditionalGeneration"),Ufr=o(" (Speech2Text model)"),Jfr=l(),mT=a("p"),Yfr=o("The model is set in evaluation mode by default using "),l4e=a("code"),Kfr=o("model.eval()"),Zfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=a("code"),emr=o("model.train()"),omr=l(),F(gT.$$.fragment),uVe=l(),Id=a("h2"),hT=a("a"),d4e=a("span"),F(Wy.$$.fragment),rmr=l(),c4e=a("span"),tmr=o("AutoModelForAudioXVector"),bVe=l(),Ho=a("div"),F(Hy.$$.fragment),amr=l(),qd=a("p"),nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GW=a("a"),smr=o("from_pretrained()"),lmr=o(" class method or the "),OW=a("a"),imr=o("from_config()"),dmr=o(` class
method.`),cmr=l(),Uy=a("p"),fmr=o("This class cannot be instantiated directly using "),f4e=a("code"),mmr=o("__init__()"),gmr=o(" (throws an error)."),hmr=l(),wt=a("div"),F(Jy.$$.fragment),pmr=l(),m4e=a("p"),_mr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),umr=l(),jd=a("p"),bmr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),vmr=o("not"),Fmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Tmr=o("from_pretrained()"),Mmr=o(" to load the model weights."),Emr=l(),F(pT.$$.fragment),Cmr=l(),po=a("div"),F(Yy.$$.fragment),wmr=l(),h4e=a("p"),Amr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Lmr=l(),Ka=a("p"),ymr=o("The model class to instantiate is selected based on the "),p4e=a("code"),xmr=o("model_type"),$mr=o(` property of the config object (either
passed as an argument or loaded from `),_4e=a("code"),kmr=o("pretrained_model_name_or_path"),Smr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=a("code"),Rmr=o("pretrained_model_name_or_path"),Pmr=o(":"),Bmr=l(),ot=a("ul"),_T=a("li"),b4e=a("strong"),Nmr=o("data2vec-audio"),Imr=o(" \u2014 "),XW=a("a"),qmr=o("Data2VecAudioForXVector"),jmr=o(" (Data2VecAudio model)"),Dmr=l(),uT=a("li"),v4e=a("strong"),Gmr=o("unispeech-sat"),Omr=o(" \u2014 "),zW=a("a"),Vmr=o("UniSpeechSatForXVector"),Xmr=o(" (UniSpeechSat model)"),zmr=l(),bT=a("li"),F4e=a("strong"),Qmr=o("wav2vec2"),Wmr=o(" \u2014 "),QW=a("a"),Hmr=o("Wav2Vec2ForXVector"),Umr=o(" (Wav2Vec2 model)"),Jmr=l(),vT=a("li"),T4e=a("strong"),Ymr=o("wav2vec2-conformer"),Kmr=o(" \u2014 "),WW=a("a"),Zmr=o("Wav2Vec2ConformerForXVector"),egr=o(" (Wav2Vec2-Conformer model)"),ogr=l(),FT=a("li"),M4e=a("strong"),rgr=o("wavlm"),tgr=o(" \u2014 "),HW=a("a"),agr=o("WavLMForXVector"),ngr=o(" (WavLM model)"),sgr=l(),TT=a("p"),lgr=o("The model is set in evaluation mode by default using "),E4e=a("code"),igr=o("model.eval()"),dgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C4e=a("code"),cgr=o("model.train()"),fgr=l(),F(MT.$$.fragment),vVe=l(),Dd=a("h2"),ET=a("a"),w4e=a("span"),F(Ky.$$.fragment),mgr=l(),A4e=a("span"),ggr=o("AutoModelForMaskedImageModeling"),FVe=l(),Uo=a("div"),F(Zy.$$.fragment),hgr=l(),Gd=a("p"),pgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),UW=a("a"),_gr=o("from_pretrained()"),ugr=o(" class method or the "),JW=a("a"),bgr=o("from_config()"),vgr=o(` class
method.`),Fgr=l(),e9=a("p"),Tgr=o("This class cannot be instantiated directly using "),L4e=a("code"),Mgr=o("__init__()"),Egr=o(" (throws an error)."),Cgr=l(),At=a("div"),F(o9.$$.fragment),wgr=l(),y4e=a("p"),Agr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Lgr=l(),Od=a("p"),ygr=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),xgr=o("not"),$gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),kgr=o("from_pretrained()"),Sgr=o(" to load the model weights."),Rgr=l(),F(CT.$$.fragment),Pgr=l(),_o=a("div"),F(r9.$$.fragment),Bgr=l(),$4e=a("p"),Ngr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Igr=l(),Za=a("p"),qgr=o("The model class to instantiate is selected based on the "),k4e=a("code"),jgr=o("model_type"),Dgr=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),Ggr=o("pretrained_model_name_or_path"),Ogr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),Vgr=o("pretrained_model_name_or_path"),Xgr=o(":"),zgr=l(),Vd=a("ul"),wT=a("li"),P4e=a("strong"),Qgr=o("deit"),Wgr=o(" \u2014 "),KW=a("a"),Hgr=o("DeiTForMaskedImageModeling"),Ugr=o(" (DeiT model)"),Jgr=l(),AT=a("li"),B4e=a("strong"),Ygr=o("swin"),Kgr=o(" \u2014 "),ZW=a("a"),Zgr=o("SwinForMaskedImageModeling"),ehr=o(" (Swin Transformer model)"),ohr=l(),LT=a("li"),N4e=a("strong"),rhr=o("vit"),thr=o(" \u2014 "),eH=a("a"),ahr=o("ViTForMaskedImageModeling"),nhr=o(" (ViT model)"),shr=l(),yT=a("p"),lhr=o("The model is set in evaluation mode by default using "),I4e=a("code"),ihr=o("model.eval()"),dhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=a("code"),chr=o("model.train()"),fhr=l(),F(xT.$$.fragment),TVe=l(),Xd=a("h2"),$T=a("a"),j4e=a("span"),F(t9.$$.fragment),mhr=l(),D4e=a("span"),ghr=o("AutoModelForObjectDetection"),MVe=l(),Jo=a("div"),F(a9.$$.fragment),hhr=l(),zd=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),oH=a("a"),_hr=o("from_pretrained()"),uhr=o(" class method or the "),rH=a("a"),bhr=o("from_config()"),vhr=o(` class
method.`),Fhr=l(),n9=a("p"),Thr=o("This class cannot be instantiated directly using "),G4e=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),Chr=l(),Lt=a("div"),F(s9.$$.fragment),whr=l(),O4e=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Lhr=l(),Qd=a("p"),yhr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),xhr=o("not"),$hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),khr=o("from_pretrained()"),Shr=o(" to load the model weights."),Rhr=l(),F(kT.$$.fragment),Phr=l(),uo=a("div"),F(l9.$$.fragment),Bhr=l(),X4e=a("p"),Nhr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ihr=l(),en=a("p"),qhr=o("The model class to instantiate is selected based on the "),z4e=a("code"),jhr=o("model_type"),Dhr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(":"),zhr=l(),i9=a("ul"),ST=a("li"),H4e=a("strong"),Qhr=o("detr"),Whr=o(" \u2014 "),aH=a("a"),Hhr=o("DetrForObjectDetection"),Uhr=o(" (DETR model)"),Jhr=l(),RT=a("li"),U4e=a("strong"),Yhr=o("yolos"),Khr=o(" \u2014 "),nH=a("a"),Zhr=o("YolosForObjectDetection"),epr=o(" (YOLOS model)"),opr=l(),PT=a("p"),rpr=o("The model is set in evaluation mode by default using "),J4e=a("code"),tpr=o("model.eval()"),apr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=a("code"),npr=o("model.train()"),spr=l(),F(BT.$$.fragment),EVe=l(),Wd=a("h2"),NT=a("a"),K4e=a("span"),F(d9.$$.fragment),lpr=l(),Z4e=a("span"),ipr=o("AutoModelForImageSegmentation"),CVe=l(),Yo=a("div"),F(c9.$$.fragment),dpr=l(),Hd=a("p"),cpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sH=a("a"),fpr=o("from_pretrained()"),mpr=o(" class method or the "),lH=a("a"),gpr=o("from_config()"),hpr=o(` class
method.`),ppr=l(),f9=a("p"),_pr=o("This class cannot be instantiated directly using "),e5e=a("code"),upr=o("__init__()"),bpr=o(" (throws an error)."),vpr=l(),yt=a("div"),F(m9.$$.fragment),Fpr=l(),o5e=a("p"),Tpr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mpr=l(),Ud=a("p"),Epr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),Cpr=o("not"),wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Apr=o("from_pretrained()"),Lpr=o(" to load the model weights."),ypr=l(),F(IT.$$.fragment),xpr=l(),bo=a("div"),F(g9.$$.fragment),$pr=l(),t5e=a("p"),kpr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Spr=l(),on=a("p"),Rpr=o("The model class to instantiate is selected based on the "),a5e=a("code"),Ppr=o("model_type"),Bpr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),Npr=o("pretrained_model_name_or_path"),Ipr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),qpr=o("pretrained_model_name_or_path"),jpr=o(":"),Dpr=l(),l5e=a("ul"),qT=a("li"),i5e=a("strong"),Gpr=o("detr"),Opr=o(" \u2014 "),dH=a("a"),Vpr=o("DetrForSegmentation"),Xpr=o(" (DETR model)"),zpr=l(),jT=a("p"),Qpr=o("The model is set in evaluation mode by default using "),d5e=a("code"),Wpr=o("model.eval()"),Hpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c5e=a("code"),Upr=o("model.train()"),Jpr=l(),F(DT.$$.fragment),wVe=l(),Jd=a("h2"),GT=a("a"),f5e=a("span"),F(h9.$$.fragment),Ypr=l(),m5e=a("span"),Kpr=o("AutoModelForSemanticSegmentation"),AVe=l(),Ko=a("div"),F(p9.$$.fragment),Zpr=l(),Yd=a("p"),e_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cH=a("a"),o_r=o("from_pretrained()"),r_r=o(" class method or the "),fH=a("a"),t_r=o("from_config()"),a_r=o(` class
method.`),n_r=l(),_9=a("p"),s_r=o("This class cannot be instantiated directly using "),g5e=a("code"),l_r=o("__init__()"),i_r=o(" (throws an error)."),d_r=l(),xt=a("div"),F(u9.$$.fragment),c_r=l(),h5e=a("p"),f_r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),m_r=l(),Kd=a("p"),g_r=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),h_r=o("not"),p_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),__r=o("from_pretrained()"),u_r=o(" to load the model weights."),b_r=l(),F(OT.$$.fragment),v_r=l(),vo=a("div"),F(b9.$$.fragment),F_r=l(),_5e=a("p"),T_r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),M_r=l(),rn=a("p"),E_r=o("The model class to instantiate is selected based on the "),u5e=a("code"),C_r=o("model_type"),w_r=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),A_r=o("pretrained_model_name_or_path"),L_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),y_r=o("pretrained_model_name_or_path"),x_r=o(":"),$_r=l(),rt=a("ul"),VT=a("li"),F5e=a("strong"),k_r=o("beit"),S_r=o(" \u2014 "),gH=a("a"),R_r=o("BeitForSemanticSegmentation"),P_r=o(" (BEiT model)"),B_r=l(),XT=a("li"),T5e=a("strong"),N_r=o("data2vec-vision"),I_r=o(" \u2014 "),hH=a("a"),q_r=o("Data2VecVisionForSemanticSegmentation"),j_r=o(" (Data2VecVision model)"),D_r=l(),zT=a("li"),M5e=a("strong"),G_r=o("dpt"),O_r=o(" \u2014 "),pH=a("a"),V_r=o("DPTForSemanticSegmentation"),X_r=o(" (DPT model)"),z_r=l(),QT=a("li"),E5e=a("strong"),Q_r=o("mobilenet_v2"),W_r=o(" \u2014 "),_H=a("a"),H_r=o("MobileNetV2ForSemanticSegmentation"),U_r=o(" (MobileNetV2 model)"),J_r=l(),WT=a("li"),C5e=a("strong"),Y_r=o("segformer"),K_r=o(" \u2014 "),uH=a("a"),Z_r=o("SegformerForSemanticSegmentation"),eur=o(" (SegFormer model)"),our=l(),HT=a("p"),rur=o("The model is set in evaluation mode by default using "),w5e=a("code"),tur=o("model.eval()"),aur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=a("code"),nur=o("model.train()"),sur=l(),F(UT.$$.fragment),LVe=l(),Zd=a("h2"),JT=a("a"),L5e=a("span"),F(v9.$$.fragment),lur=l(),y5e=a("span"),iur=o("AutoModelForInstanceSegmentation"),yVe=l(),Zo=a("div"),F(F9.$$.fragment),dur=l(),ec=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),bH=a("a"),fur=o("from_pretrained()"),mur=o(" class method or the "),vH=a("a"),gur=o("from_config()"),hur=o(` class
method.`),pur=l(),T9=a("p"),_ur=o("This class cannot be instantiated directly using "),x5e=a("code"),uur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),$t=a("div"),F(M9.$$.fragment),Fur=l(),$5e=a("p"),Tur=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Mur=l(),oc=a("p"),Eur=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),Cur=o("not"),wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),Aur=o("from_pretrained()"),Lur=o(" to load the model weights."),yur=l(),F(YT.$$.fragment),xur=l(),Fo=a("div"),F(E9.$$.fragment),$ur=l(),S5e=a("p"),kur=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Sur=l(),tn=a("p"),Rur=o("The model class to instantiate is selected based on the "),R5e=a("code"),Pur=o("model_type"),Bur=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),Nur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),qur=o("pretrained_model_name_or_path"),jur=o(":"),Dur=l(),N5e=a("ul"),KT=a("li"),I5e=a("strong"),Gur=o("maskformer"),Our=o(" \u2014 "),TH=a("a"),Vur=o("MaskFormerForInstanceSegmentation"),Xur=o(" (MaskFormer model)"),zur=l(),ZT=a("p"),Qur=o("The model is set in evaluation mode by default using "),q5e=a("code"),Wur=o("model.eval()"),Hur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j5e=a("code"),Uur=o("model.train()"),Jur=l(),F(e7.$$.fragment),xVe=l(),rc=a("h2"),o7=a("a"),D5e=a("span"),F(C9.$$.fragment),Yur=l(),G5e=a("span"),Kur=o("TFAutoModel"),$Ve=l(),er=a("div"),F(w9.$$.fragment),Zur=l(),tc=a("p"),e1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MH=a("a"),o1r=o("from_pretrained()"),r1r=o(" class method or the "),EH=a("a"),t1r=o("from_config()"),a1r=o(` class
method.`),n1r=l(),A9=a("p"),s1r=o("This class cannot be instantiated directly using "),O5e=a("code"),l1r=o("__init__()"),i1r=o(" (throws an error)."),d1r=l(),kt=a("div"),F(L9.$$.fragment),c1r=l(),V5e=a("p"),f1r=o("Instantiates one of the base model classes of the library from a configuration."),m1r=l(),ac=a("p"),g1r=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),h1r=o("not"),p1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),_1r=o("from_pretrained()"),u1r=o(" to load the model weights."),b1r=l(),F(r7.$$.fragment),v1r=l(),yr=a("div"),F(y9.$$.fragment),F1r=l(),z5e=a("p"),T1r=o("Instantiate one of the base model classes of the library from a pretrained model."),M1r=l(),an=a("p"),E1r=o("The model class to instantiate is selected based on the "),Q5e=a("code"),C1r=o("model_type"),w1r=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),A1r=o("pretrained_model_name_or_path"),L1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),y1r=o("pretrained_model_name_or_path"),x1r=o(":"),$1r=l(),j=a("ul"),t7=a("li"),U5e=a("strong"),k1r=o("albert"),S1r=o(" \u2014 "),wH=a("a"),R1r=o("TFAlbertModel"),P1r=o(" (ALBERT model)"),B1r=l(),a7=a("li"),J5e=a("strong"),N1r=o("bart"),I1r=o(" \u2014 "),AH=a("a"),q1r=o("TFBartModel"),j1r=o(" (BART model)"),D1r=l(),n7=a("li"),Y5e=a("strong"),G1r=o("bert"),O1r=o(" \u2014 "),LH=a("a"),V1r=o("TFBertModel"),X1r=o(" (BERT model)"),z1r=l(),s7=a("li"),K5e=a("strong"),Q1r=o("blenderbot"),W1r=o(" \u2014 "),yH=a("a"),H1r=o("TFBlenderbotModel"),U1r=o(" (Blenderbot model)"),J1r=l(),l7=a("li"),Z5e=a("strong"),Y1r=o("blenderbot-small"),K1r=o(" \u2014 "),xH=a("a"),Z1r=o("TFBlenderbotSmallModel"),e2r=o(" (BlenderbotSmall model)"),o2r=l(),i7=a("li"),eve=a("strong"),r2r=o("camembert"),t2r=o(" \u2014 "),$H=a("a"),a2r=o("TFCamembertModel"),n2r=o(" (CamemBERT model)"),s2r=l(),d7=a("li"),ove=a("strong"),l2r=o("clip"),i2r=o(" \u2014 "),kH=a("a"),d2r=o("TFCLIPModel"),c2r=o(" (CLIP model)"),f2r=l(),c7=a("li"),rve=a("strong"),m2r=o("convbert"),g2r=o(" \u2014 "),SH=a("a"),h2r=o("TFConvBertModel"),p2r=o(" (ConvBERT model)"),_2r=l(),f7=a("li"),tve=a("strong"),u2r=o("convnext"),b2r=o(" \u2014 "),RH=a("a"),v2r=o("TFConvNextModel"),F2r=o(" (ConvNeXT model)"),T2r=l(),m7=a("li"),ave=a("strong"),M2r=o("ctrl"),E2r=o(" \u2014 "),PH=a("a"),C2r=o("TFCTRLModel"),w2r=o(" (CTRL model)"),A2r=l(),g7=a("li"),nve=a("strong"),L2r=o("data2vec-vision"),y2r=o(" \u2014 "),BH=a("a"),x2r=o("TFData2VecVisionModel"),$2r=o(" (Data2VecVision model)"),k2r=l(),h7=a("li"),sve=a("strong"),S2r=o("deberta"),R2r=o(" \u2014 "),NH=a("a"),P2r=o("TFDebertaModel"),B2r=o(" (DeBERTa model)"),N2r=l(),p7=a("li"),lve=a("strong"),I2r=o("deberta-v2"),q2r=o(" \u2014 "),IH=a("a"),j2r=o("TFDebertaV2Model"),D2r=o(" (DeBERTa-v2 model)"),G2r=l(),_7=a("li"),ive=a("strong"),O2r=o("distilbert"),V2r=o(" \u2014 "),qH=a("a"),X2r=o("TFDistilBertModel"),z2r=o(" (DistilBERT model)"),Q2r=l(),u7=a("li"),dve=a("strong"),W2r=o("dpr"),H2r=o(" \u2014 "),jH=a("a"),U2r=o("TFDPRQuestionEncoder"),J2r=o(" (DPR model)"),Y2r=l(),b7=a("li"),cve=a("strong"),K2r=o("electra"),Z2r=o(" \u2014 "),DH=a("a"),ebr=o("TFElectraModel"),obr=o(" (ELECTRA model)"),rbr=l(),v7=a("li"),fve=a("strong"),tbr=o("flaubert"),abr=o(" \u2014 "),GH=a("a"),nbr=o("TFFlaubertModel"),sbr=o(" (FlauBERT model)"),lbr=l(),Ws=a("li"),mve=a("strong"),ibr=o("funnel"),dbr=o(" \u2014 "),OH=a("a"),cbr=o("TFFunnelModel"),fbr=o(" or "),VH=a("a"),mbr=o("TFFunnelBaseModel"),gbr=o(" (Funnel Transformer model)"),hbr=l(),F7=a("li"),gve=a("strong"),pbr=o("gpt2"),_br=o(" \u2014 "),XH=a("a"),ubr=o("TFGPT2Model"),bbr=o(" (OpenAI GPT-2 model)"),vbr=l(),T7=a("li"),hve=a("strong"),Fbr=o("gptj"),Tbr=o(" \u2014 "),zH=a("a"),Mbr=o("TFGPTJModel"),Ebr=o(" (GPT-J model)"),Cbr=l(),M7=a("li"),pve=a("strong"),wbr=o("hubert"),Abr=o(" \u2014 "),QH=a("a"),Lbr=o("TFHubertModel"),ybr=o(" (Hubert model)"),xbr=l(),E7=a("li"),_ve=a("strong"),$br=o("layoutlm"),kbr=o(" \u2014 "),WH=a("a"),Sbr=o("TFLayoutLMModel"),Rbr=o(" (LayoutLM model)"),Pbr=l(),C7=a("li"),uve=a("strong"),Bbr=o("led"),Nbr=o(" \u2014 "),HH=a("a"),Ibr=o("TFLEDModel"),qbr=o(" (LED model)"),jbr=l(),w7=a("li"),bve=a("strong"),Dbr=o("longformer"),Gbr=o(" \u2014 "),UH=a("a"),Obr=o("TFLongformerModel"),Vbr=o(" (Longformer model)"),Xbr=l(),A7=a("li"),vve=a("strong"),zbr=o("lxmert"),Qbr=o(" \u2014 "),JH=a("a"),Wbr=o("TFLxmertModel"),Hbr=o(" (LXMERT model)"),Ubr=l(),L7=a("li"),Fve=a("strong"),Jbr=o("marian"),Ybr=o(" \u2014 "),YH=a("a"),Kbr=o("TFMarianModel"),Zbr=o(" (Marian model)"),e4r=l(),y7=a("li"),Tve=a("strong"),o4r=o("mbart"),r4r=o(" \u2014 "),KH=a("a"),t4r=o("TFMBartModel"),a4r=o(" (mBART model)"),n4r=l(),x7=a("li"),Mve=a("strong"),s4r=o("mobilebert"),l4r=o(" \u2014 "),ZH=a("a"),i4r=o("TFMobileBertModel"),d4r=o(" (MobileBERT model)"),c4r=l(),$7=a("li"),Eve=a("strong"),f4r=o("mpnet"),m4r=o(" \u2014 "),eU=a("a"),g4r=o("TFMPNetModel"),h4r=o(" (MPNet model)"),p4r=l(),k7=a("li"),Cve=a("strong"),_4r=o("mt5"),u4r=o(" \u2014 "),oU=a("a"),b4r=o("TFMT5Model"),v4r=o(" (MT5 model)"),F4r=l(),S7=a("li"),wve=a("strong"),T4r=o("openai-gpt"),M4r=o(" \u2014 "),rU=a("a"),E4r=o("TFOpenAIGPTModel"),C4r=o(" (OpenAI GPT model)"),w4r=l(),R7=a("li"),Ave=a("strong"),A4r=o("opt"),L4r=o(" \u2014 "),tU=a("a"),y4r=o("TFOPTModel"),x4r=o(" (OPT model)"),$4r=l(),P7=a("li"),Lve=a("strong"),k4r=o("pegasus"),S4r=o(" \u2014 "),aU=a("a"),R4r=o("TFPegasusModel"),P4r=o(" (Pegasus model)"),B4r=l(),B7=a("li"),yve=a("strong"),N4r=o("rembert"),I4r=o(" \u2014 "),nU=a("a"),q4r=o("TFRemBertModel"),j4r=o(" (RemBERT model)"),D4r=l(),N7=a("li"),xve=a("strong"),G4r=o("roberta"),O4r=o(" \u2014 "),sU=a("a"),V4r=o("TFRobertaModel"),X4r=o(" (RoBERTa model)"),z4r=l(),I7=a("li"),$ve=a("strong"),Q4r=o("roformer"),W4r=o(" \u2014 "),lU=a("a"),H4r=o("TFRoFormerModel"),U4r=o(" (RoFormer model)"),J4r=l(),q7=a("li"),kve=a("strong"),Y4r=o("speech_to_text"),K4r=o(" \u2014 "),iU=a("a"),Z4r=o("TFSpeech2TextModel"),e5r=o(" (Speech2Text model)"),o5r=l(),j7=a("li"),Sve=a("strong"),r5r=o("swin"),t5r=o(" \u2014 "),dU=a("a"),a5r=o("TFSwinModel"),n5r=o(" (Swin Transformer model)"),s5r=l(),D7=a("li"),Rve=a("strong"),l5r=o("t5"),i5r=o(" \u2014 "),cU=a("a"),d5r=o("TFT5Model"),c5r=o(" (T5 model)"),f5r=l(),G7=a("li"),Pve=a("strong"),m5r=o("tapas"),g5r=o(" \u2014 "),fU=a("a"),h5r=o("TFTapasModel"),p5r=o(" (TAPAS model)"),_5r=l(),O7=a("li"),Bve=a("strong"),u5r=o("transfo-xl"),b5r=o(" \u2014 "),mU=a("a"),v5r=o("TFTransfoXLModel"),F5r=o(" (Transformer-XL model)"),T5r=l(),V7=a("li"),Nve=a("strong"),M5r=o("vit"),E5r=o(" \u2014 "),gU=a("a"),C5r=o("TFViTModel"),w5r=o(" (ViT model)"),A5r=l(),X7=a("li"),Ive=a("strong"),L5r=o("vit_mae"),y5r=o(" \u2014 "),hU=a("a"),x5r=o("TFViTMAEModel"),$5r=o(" (ViTMAE model)"),k5r=l(),z7=a("li"),qve=a("strong"),S5r=o("wav2vec2"),R5r=o(" \u2014 "),pU=a("a"),P5r=o("TFWav2Vec2Model"),B5r=o(" (Wav2Vec2 model)"),N5r=l(),Q7=a("li"),jve=a("strong"),I5r=o("xlm"),q5r=o(" \u2014 "),_U=a("a"),j5r=o("TFXLMModel"),D5r=o(" (XLM model)"),G5r=l(),W7=a("li"),Dve=a("strong"),O5r=o("xlm-roberta"),V5r=o(" \u2014 "),uU=a("a"),X5r=o("TFXLMRobertaModel"),z5r=o(" (XLM-RoBERTa model)"),Q5r=l(),H7=a("li"),Gve=a("strong"),W5r=o("xlnet"),H5r=o(" \u2014 "),bU=a("a"),U5r=o("TFXLNetModel"),J5r=o(" (XLNet model)"),Y5r=l(),F(U7.$$.fragment),kVe=l(),nc=a("h2"),J7=a("a"),Ove=a("span"),F(x9.$$.fragment),K5r=l(),Vve=a("span"),Z5r=o("TFAutoModelForPreTraining"),SVe=l(),or=a("div"),F($9.$$.fragment),evr=l(),sc=a("p"),ovr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vU=a("a"),rvr=o("from_pretrained()"),tvr=o(" class method or the "),FU=a("a"),avr=o("from_config()"),nvr=o(` class
method.`),svr=l(),k9=a("p"),lvr=o("This class cannot be instantiated directly using "),Xve=a("code"),ivr=o("__init__()"),dvr=o(" (throws an error)."),cvr=l(),St=a("div"),F(S9.$$.fragment),fvr=l(),zve=a("p"),mvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gvr=l(),lc=a("p"),hvr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),pvr=o("not"),_vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),uvr=o("from_pretrained()"),bvr=o(" to load the model weights."),vvr=l(),F(Y7.$$.fragment),Fvr=l(),xr=a("div"),F(R9.$$.fragment),Tvr=l(),Wve=a("p"),Mvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Evr=l(),nn=a("p"),Cvr=o("The model class to instantiate is selected based on the "),Hve=a("code"),wvr=o("model_type"),Avr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),Lvr=o("pretrained_model_name_or_path"),yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),xvr=o("pretrained_model_name_or_path"),$vr=o(":"),kvr=l(),se=a("ul"),K7=a("li"),Yve=a("strong"),Svr=o("albert"),Rvr=o(" \u2014 "),MU=a("a"),Pvr=o("TFAlbertForPreTraining"),Bvr=o(" (ALBERT model)"),Nvr=l(),Z7=a("li"),Kve=a("strong"),Ivr=o("bart"),qvr=o(" \u2014 "),EU=a("a"),jvr=o("TFBartForConditionalGeneration"),Dvr=o(" (BART model)"),Gvr=l(),e8=a("li"),Zve=a("strong"),Ovr=o("bert"),Vvr=o(" \u2014 "),CU=a("a"),Xvr=o("TFBertForPreTraining"),zvr=o(" (BERT model)"),Qvr=l(),o8=a("li"),eFe=a("strong"),Wvr=o("camembert"),Hvr=o(" \u2014 "),wU=a("a"),Uvr=o("TFCamembertForMaskedLM"),Jvr=o(" (CamemBERT model)"),Yvr=l(),r8=a("li"),oFe=a("strong"),Kvr=o("ctrl"),Zvr=o(" \u2014 "),AU=a("a"),eFr=o("TFCTRLLMHeadModel"),oFr=o(" (CTRL model)"),rFr=l(),t8=a("li"),rFe=a("strong"),tFr=o("distilbert"),aFr=o(" \u2014 "),LU=a("a"),nFr=o("TFDistilBertForMaskedLM"),sFr=o(" (DistilBERT model)"),lFr=l(),a8=a("li"),tFe=a("strong"),iFr=o("electra"),dFr=o(" \u2014 "),yU=a("a"),cFr=o("TFElectraForPreTraining"),fFr=o(" (ELECTRA model)"),mFr=l(),n8=a("li"),aFe=a("strong"),gFr=o("flaubert"),hFr=o(" \u2014 "),xU=a("a"),pFr=o("TFFlaubertWithLMHeadModel"),_Fr=o(" (FlauBERT model)"),uFr=l(),s8=a("li"),nFe=a("strong"),bFr=o("funnel"),vFr=o(" \u2014 "),$U=a("a"),FFr=o("TFFunnelForPreTraining"),TFr=o(" (Funnel Transformer model)"),MFr=l(),l8=a("li"),sFe=a("strong"),EFr=o("gpt2"),CFr=o(" \u2014 "),kU=a("a"),wFr=o("TFGPT2LMHeadModel"),AFr=o(" (OpenAI GPT-2 model)"),LFr=l(),i8=a("li"),lFe=a("strong"),yFr=o("layoutlm"),xFr=o(" \u2014 "),SU=a("a"),$Fr=o("TFLayoutLMForMaskedLM"),kFr=o(" (LayoutLM model)"),SFr=l(),d8=a("li"),iFe=a("strong"),RFr=o("lxmert"),PFr=o(" \u2014 "),RU=a("a"),BFr=o("TFLxmertForPreTraining"),NFr=o(" (LXMERT model)"),IFr=l(),c8=a("li"),dFe=a("strong"),qFr=o("mobilebert"),jFr=o(" \u2014 "),PU=a("a"),DFr=o("TFMobileBertForPreTraining"),GFr=o(" (MobileBERT model)"),OFr=l(),f8=a("li"),cFe=a("strong"),VFr=o("mpnet"),XFr=o(" \u2014 "),BU=a("a"),zFr=o("TFMPNetForMaskedLM"),QFr=o(" (MPNet model)"),WFr=l(),m8=a("li"),fFe=a("strong"),HFr=o("openai-gpt"),UFr=o(" \u2014 "),NU=a("a"),JFr=o("TFOpenAIGPTLMHeadModel"),YFr=o(" (OpenAI GPT model)"),KFr=l(),g8=a("li"),mFe=a("strong"),ZFr=o("roberta"),eTr=o(" \u2014 "),IU=a("a"),oTr=o("TFRobertaForMaskedLM"),rTr=o(" (RoBERTa model)"),tTr=l(),h8=a("li"),gFe=a("strong"),aTr=o("t5"),nTr=o(" \u2014 "),qU=a("a"),sTr=o("TFT5ForConditionalGeneration"),lTr=o(" (T5 model)"),iTr=l(),p8=a("li"),hFe=a("strong"),dTr=o("tapas"),cTr=o(" \u2014 "),jU=a("a"),fTr=o("TFTapasForMaskedLM"),mTr=o(" (TAPAS model)"),gTr=l(),_8=a("li"),pFe=a("strong"),hTr=o("transfo-xl"),pTr=o(" \u2014 "),DU=a("a"),_Tr=o("TFTransfoXLLMHeadModel"),uTr=o(" (Transformer-XL model)"),bTr=l(),u8=a("li"),_Fe=a("strong"),vTr=o("vit_mae"),FTr=o(" \u2014 "),GU=a("a"),TTr=o("TFViTMAEForPreTraining"),MTr=o(" (ViTMAE model)"),ETr=l(),b8=a("li"),uFe=a("strong"),CTr=o("xlm"),wTr=o(" \u2014 "),OU=a("a"),ATr=o("TFXLMWithLMHeadModel"),LTr=o(" (XLM model)"),yTr=l(),v8=a("li"),bFe=a("strong"),xTr=o("xlm-roberta"),$Tr=o(" \u2014 "),VU=a("a"),kTr=o("TFXLMRobertaForMaskedLM"),STr=o(" (XLM-RoBERTa model)"),RTr=l(),F8=a("li"),vFe=a("strong"),PTr=o("xlnet"),BTr=o(" \u2014 "),XU=a("a"),NTr=o("TFXLNetLMHeadModel"),ITr=o(" (XLNet model)"),qTr=l(),F(T8.$$.fragment),RVe=l(),ic=a("h2"),M8=a("a"),FFe=a("span"),F(P9.$$.fragment),jTr=l(),TFe=a("span"),DTr=o("TFAutoModelForCausalLM"),PVe=l(),rr=a("div"),F(B9.$$.fragment),GTr=l(),dc=a("p"),OTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zU=a("a"),VTr=o("from_pretrained()"),XTr=o(" class method or the "),QU=a("a"),zTr=o("from_config()"),QTr=o(` class
method.`),WTr=l(),N9=a("p"),HTr=o("This class cannot be instantiated directly using "),MFe=a("code"),UTr=o("__init__()"),JTr=o(" (throws an error)."),YTr=l(),Rt=a("div"),F(I9.$$.fragment),KTr=l(),EFe=a("p"),ZTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e7r=l(),cc=a("p"),o7r=o(`Note:
Loading a model from its configuration file does `),CFe=a("strong"),r7r=o("not"),t7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),a7r=o("from_pretrained()"),n7r=o(" to load the model weights."),s7r=l(),F(E8.$$.fragment),l7r=l(),$r=a("div"),F(q9.$$.fragment),i7r=l(),wFe=a("p"),d7r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c7r=l(),sn=a("p"),f7r=o("The model class to instantiate is selected based on the "),AFe=a("code"),m7r=o("model_type"),g7r=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),h7r=o("pretrained_model_name_or_path"),p7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),_7r=o("pretrained_model_name_or_path"),u7r=o(":"),b7r=l(),Me=a("ul"),C8=a("li"),xFe=a("strong"),v7r=o("bert"),F7r=o(" \u2014 "),HU=a("a"),T7r=o("TFBertLMHeadModel"),M7r=o(" (BERT model)"),E7r=l(),w8=a("li"),$Fe=a("strong"),C7r=o("camembert"),w7r=o(" \u2014 "),UU=a("a"),A7r=o("TFCamembertForCausalLM"),L7r=o(" (CamemBERT model)"),y7r=l(),A8=a("li"),kFe=a("strong"),x7r=o("ctrl"),$7r=o(" \u2014 "),JU=a("a"),k7r=o("TFCTRLLMHeadModel"),S7r=o(" (CTRL model)"),R7r=l(),L8=a("li"),SFe=a("strong"),P7r=o("gpt2"),B7r=o(" \u2014 "),YU=a("a"),N7r=o("TFGPT2LMHeadModel"),I7r=o(" (OpenAI GPT-2 model)"),q7r=l(),y8=a("li"),RFe=a("strong"),j7r=o("gptj"),D7r=o(" \u2014 "),KU=a("a"),G7r=o("TFGPTJForCausalLM"),O7r=o(" (GPT-J model)"),V7r=l(),x8=a("li"),PFe=a("strong"),X7r=o("openai-gpt"),z7r=o(" \u2014 "),ZU=a("a"),Q7r=o("TFOpenAIGPTLMHeadModel"),W7r=o(" (OpenAI GPT model)"),H7r=l(),$8=a("li"),BFe=a("strong"),U7r=o("opt"),J7r=o(" \u2014 "),eJ=a("a"),Y7r=o("TFOPTForCausalLM"),K7r=o(" (OPT model)"),Z7r=l(),k8=a("li"),NFe=a("strong"),e8r=o("rembert"),o8r=o(" \u2014 "),oJ=a("a"),r8r=o("TFRemBertForCausalLM"),t8r=o(" (RemBERT model)"),a8r=l(),S8=a("li"),IFe=a("strong"),n8r=o("roberta"),s8r=o(" \u2014 "),rJ=a("a"),l8r=o("TFRobertaForCausalLM"),i8r=o(" (RoBERTa model)"),d8r=l(),R8=a("li"),qFe=a("strong"),c8r=o("roformer"),f8r=o(" \u2014 "),tJ=a("a"),m8r=o("TFRoFormerForCausalLM"),g8r=o(" (RoFormer model)"),h8r=l(),P8=a("li"),jFe=a("strong"),p8r=o("transfo-xl"),_8r=o(" \u2014 "),aJ=a("a"),u8r=o("TFTransfoXLLMHeadModel"),b8r=o(" (Transformer-XL model)"),v8r=l(),B8=a("li"),DFe=a("strong"),F8r=o("xlm"),T8r=o(" \u2014 "),nJ=a("a"),M8r=o("TFXLMWithLMHeadModel"),E8r=o(" (XLM model)"),C8r=l(),N8=a("li"),GFe=a("strong"),w8r=o("xlnet"),A8r=o(" \u2014 "),sJ=a("a"),L8r=o("TFXLNetLMHeadModel"),y8r=o(" (XLNet model)"),x8r=l(),F(I8.$$.fragment),BVe=l(),fc=a("h2"),q8=a("a"),OFe=a("span"),F(j9.$$.fragment),$8r=l(),VFe=a("span"),k8r=o("TFAutoModelForImageClassification"),NVe=l(),tr=a("div"),F(D9.$$.fragment),S8r=l(),mc=a("p"),R8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lJ=a("a"),P8r=o("from_pretrained()"),B8r=o(" class method or the "),iJ=a("a"),N8r=o("from_config()"),I8r=o(` class
method.`),q8r=l(),G9=a("p"),j8r=o("This class cannot be instantiated directly using "),XFe=a("code"),D8r=o("__init__()"),G8r=o(" (throws an error)."),O8r=l(),Pt=a("div"),F(O9.$$.fragment),V8r=l(),zFe=a("p"),X8r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z8r=l(),gc=a("p"),Q8r=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),W8r=o("not"),H8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),U8r=o("from_pretrained()"),J8r=o(" to load the model weights."),Y8r=l(),F(j8.$$.fragment),K8r=l(),kr=a("div"),F(V9.$$.fragment),Z8r=l(),WFe=a("p"),eMr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oMr=l(),ln=a("p"),rMr=o("The model class to instantiate is selected based on the "),HFe=a("code"),tMr=o("model_type"),aMr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),nMr=o("pretrained_model_name_or_path"),sMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),lMr=o("pretrained_model_name_or_path"),iMr=o(":"),dMr=l(),dn=a("ul"),D8=a("li"),YFe=a("strong"),cMr=o("convnext"),fMr=o(" \u2014 "),cJ=a("a"),mMr=o("TFConvNextForImageClassification"),gMr=o(" (ConvNeXT model)"),hMr=l(),G8=a("li"),KFe=a("strong"),pMr=o("data2vec-vision"),_Mr=o(" \u2014 "),fJ=a("a"),uMr=o("TFData2VecVisionForImageClassification"),bMr=o(" (Data2VecVision model)"),vMr=l(),O8=a("li"),ZFe=a("strong"),FMr=o("swin"),TMr=o(" \u2014 "),mJ=a("a"),MMr=o("TFSwinForImageClassification"),EMr=o(" (Swin Transformer model)"),CMr=l(),V8=a("li"),eTe=a("strong"),wMr=o("vit"),AMr=o(" \u2014 "),gJ=a("a"),LMr=o("TFViTForImageClassification"),yMr=o(" (ViT model)"),xMr=l(),F(X8.$$.fragment),IVe=l(),hc=a("h2"),z8=a("a"),oTe=a("span"),F(X9.$$.fragment),$Mr=l(),rTe=a("span"),kMr=o("TFAutoModelForMaskedLM"),qVe=l(),ar=a("div"),F(z9.$$.fragment),SMr=l(),pc=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hJ=a("a"),PMr=o("from_pretrained()"),BMr=o(" class method or the "),pJ=a("a"),NMr=o("from_config()"),IMr=o(` class
method.`),qMr=l(),Q9=a("p"),jMr=o("This class cannot be instantiated directly using "),tTe=a("code"),DMr=o("__init__()"),GMr=o(" (throws an error)."),OMr=l(),Bt=a("div"),F(W9.$$.fragment),VMr=l(),aTe=a("p"),XMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zMr=l(),_c=a("p"),QMr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),WMr=o("not"),HMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),UMr=o("from_pretrained()"),JMr=o(" to load the model weights."),YMr=l(),F(Q8.$$.fragment),KMr=l(),Sr=a("div"),F(H9.$$.fragment),ZMr=l(),sTe=a("p"),eEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oEr=l(),cn=a("p"),rEr=o("The model class to instantiate is selected based on the "),lTe=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),ie=a("ul"),W8=a("li"),cTe=a("strong"),cEr=o("albert"),fEr=o(" \u2014 "),uJ=a("a"),mEr=o("TFAlbertForMaskedLM"),gEr=o(" (ALBERT model)"),hEr=l(),H8=a("li"),fTe=a("strong"),pEr=o("bert"),_Er=o(" \u2014 "),bJ=a("a"),uEr=o("TFBertForMaskedLM"),bEr=o(" (BERT model)"),vEr=l(),U8=a("li"),mTe=a("strong"),FEr=o("camembert"),TEr=o(" \u2014 "),vJ=a("a"),MEr=o("TFCamembertForMaskedLM"),EEr=o(" (CamemBERT model)"),CEr=l(),J8=a("li"),gTe=a("strong"),wEr=o("convbert"),AEr=o(" \u2014 "),FJ=a("a"),LEr=o("TFConvBertForMaskedLM"),yEr=o(" (ConvBERT model)"),xEr=l(),Y8=a("li"),hTe=a("strong"),$Er=o("deberta"),kEr=o(" \u2014 "),TJ=a("a"),SEr=o("TFDebertaForMaskedLM"),REr=o(" (DeBERTa model)"),PEr=l(),K8=a("li"),pTe=a("strong"),BEr=o("deberta-v2"),NEr=o(" \u2014 "),MJ=a("a"),IEr=o("TFDebertaV2ForMaskedLM"),qEr=o(" (DeBERTa-v2 model)"),jEr=l(),Z8=a("li"),_Te=a("strong"),DEr=o("distilbert"),GEr=o(" \u2014 "),EJ=a("a"),OEr=o("TFDistilBertForMaskedLM"),VEr=o(" (DistilBERT model)"),XEr=l(),eM=a("li"),uTe=a("strong"),zEr=o("electra"),QEr=o(" \u2014 "),CJ=a("a"),WEr=o("TFElectraForMaskedLM"),HEr=o(" (ELECTRA model)"),UEr=l(),oM=a("li"),bTe=a("strong"),JEr=o("flaubert"),YEr=o(" \u2014 "),wJ=a("a"),KEr=o("TFFlaubertWithLMHeadModel"),ZEr=o(" (FlauBERT model)"),eCr=l(),rM=a("li"),vTe=a("strong"),oCr=o("funnel"),rCr=o(" \u2014 "),AJ=a("a"),tCr=o("TFFunnelForMaskedLM"),aCr=o(" (Funnel Transformer model)"),nCr=l(),tM=a("li"),FTe=a("strong"),sCr=o("layoutlm"),lCr=o(" \u2014 "),LJ=a("a"),iCr=o("TFLayoutLMForMaskedLM"),dCr=o(" (LayoutLM model)"),cCr=l(),aM=a("li"),TTe=a("strong"),fCr=o("longformer"),mCr=o(" \u2014 "),yJ=a("a"),gCr=o("TFLongformerForMaskedLM"),hCr=o(" (Longformer model)"),pCr=l(),nM=a("li"),MTe=a("strong"),_Cr=o("mobilebert"),uCr=o(" \u2014 "),xJ=a("a"),bCr=o("TFMobileBertForMaskedLM"),vCr=o(" (MobileBERT model)"),FCr=l(),sM=a("li"),ETe=a("strong"),TCr=o("mpnet"),MCr=o(" \u2014 "),$J=a("a"),ECr=o("TFMPNetForMaskedLM"),CCr=o(" (MPNet model)"),wCr=l(),lM=a("li"),CTe=a("strong"),ACr=o("rembert"),LCr=o(" \u2014 "),kJ=a("a"),yCr=o("TFRemBertForMaskedLM"),xCr=o(" (RemBERT model)"),$Cr=l(),iM=a("li"),wTe=a("strong"),kCr=o("roberta"),SCr=o(" \u2014 "),SJ=a("a"),RCr=o("TFRobertaForMaskedLM"),PCr=o(" (RoBERTa model)"),BCr=l(),dM=a("li"),ATe=a("strong"),NCr=o("roformer"),ICr=o(" \u2014 "),RJ=a("a"),qCr=o("TFRoFormerForMaskedLM"),jCr=o(" (RoFormer model)"),DCr=l(),cM=a("li"),LTe=a("strong"),GCr=o("tapas"),OCr=o(" \u2014 "),PJ=a("a"),VCr=o("TFTapasForMaskedLM"),XCr=o(" (TAPAS model)"),zCr=l(),fM=a("li"),yTe=a("strong"),QCr=o("xlm"),WCr=o(" \u2014 "),BJ=a("a"),HCr=o("TFXLMWithLMHeadModel"),UCr=o(" (XLM model)"),JCr=l(),mM=a("li"),xTe=a("strong"),YCr=o("xlm-roberta"),KCr=o(" \u2014 "),NJ=a("a"),ZCr=o("TFXLMRobertaForMaskedLM"),e3r=o(" (XLM-RoBERTa model)"),o3r=l(),F(gM.$$.fragment),jVe=l(),uc=a("h2"),hM=a("a"),$Te=a("span"),F(U9.$$.fragment),r3r=l(),kTe=a("span"),t3r=o("TFAutoModelForSeq2SeqLM"),DVe=l(),nr=a("div"),F(J9.$$.fragment),a3r=l(),bc=a("p"),n3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IJ=a("a"),s3r=o("from_pretrained()"),l3r=o(" class method or the "),qJ=a("a"),i3r=o("from_config()"),d3r=o(` class
method.`),c3r=l(),Y9=a("p"),f3r=o("This class cannot be instantiated directly using "),STe=a("code"),m3r=o("__init__()"),g3r=o(" (throws an error)."),h3r=l(),Nt=a("div"),F(K9.$$.fragment),p3r=l(),RTe=a("p"),_3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),u3r=l(),vc=a("p"),b3r=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),v3r=o("not"),F3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),T3r=o("from_pretrained()"),M3r=o(" to load the model weights."),E3r=l(),F(pM.$$.fragment),C3r=l(),Rr=a("div"),F(Z9.$$.fragment),w3r=l(),BTe=a("p"),A3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L3r=l(),fn=a("p"),y3r=o("The model class to instantiate is selected based on the "),NTe=a("code"),x3r=o("model_type"),$3r=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),k3r=o("pretrained_model_name_or_path"),S3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),R3r=o("pretrained_model_name_or_path"),P3r=o(":"),B3r=l(),ye=a("ul"),_M=a("li"),jTe=a("strong"),N3r=o("bart"),I3r=o(" \u2014 "),DJ=a("a"),q3r=o("TFBartForConditionalGeneration"),j3r=o(" (BART model)"),D3r=l(),uM=a("li"),DTe=a("strong"),G3r=o("blenderbot"),O3r=o(" \u2014 "),GJ=a("a"),V3r=o("TFBlenderbotForConditionalGeneration"),X3r=o(" (Blenderbot model)"),z3r=l(),bM=a("li"),GTe=a("strong"),Q3r=o("blenderbot-small"),W3r=o(" \u2014 "),OJ=a("a"),H3r=o("TFBlenderbotSmallForConditionalGeneration"),U3r=o(" (BlenderbotSmall model)"),J3r=l(),vM=a("li"),OTe=a("strong"),Y3r=o("encoder-decoder"),K3r=o(" \u2014 "),VJ=a("a"),Z3r=o("TFEncoderDecoderModel"),e0r=o(" (Encoder decoder model)"),o0r=l(),FM=a("li"),VTe=a("strong"),r0r=o("led"),t0r=o(" \u2014 "),XJ=a("a"),a0r=o("TFLEDForConditionalGeneration"),n0r=o(" (LED model)"),s0r=l(),TM=a("li"),XTe=a("strong"),l0r=o("marian"),i0r=o(" \u2014 "),zJ=a("a"),d0r=o("TFMarianMTModel"),c0r=o(" (Marian model)"),f0r=l(),MM=a("li"),zTe=a("strong"),m0r=o("mbart"),g0r=o(" \u2014 "),QJ=a("a"),h0r=o("TFMBartForConditionalGeneration"),p0r=o(" (mBART model)"),_0r=l(),EM=a("li"),QTe=a("strong"),u0r=o("mt5"),b0r=o(" \u2014 "),WJ=a("a"),v0r=o("TFMT5ForConditionalGeneration"),F0r=o(" (MT5 model)"),T0r=l(),CM=a("li"),WTe=a("strong"),M0r=o("pegasus"),E0r=o(" \u2014 "),HJ=a("a"),C0r=o("TFPegasusForConditionalGeneration"),w0r=o(" (Pegasus model)"),A0r=l(),wM=a("li"),HTe=a("strong"),L0r=o("t5"),y0r=o(" \u2014 "),UJ=a("a"),x0r=o("TFT5ForConditionalGeneration"),$0r=o(" (T5 model)"),k0r=l(),F(AM.$$.fragment),GVe=l(),Fc=a("h2"),LM=a("a"),UTe=a("span"),F(ex.$$.fragment),S0r=l(),JTe=a("span"),R0r=o("TFAutoModelForSequenceClassification"),OVe=l(),sr=a("div"),F(ox.$$.fragment),P0r=l(),Tc=a("p"),B0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JJ=a("a"),N0r=o("from_pretrained()"),I0r=o(" class method or the "),YJ=a("a"),q0r=o("from_config()"),j0r=o(` class
method.`),D0r=l(),rx=a("p"),G0r=o("This class cannot be instantiated directly using "),YTe=a("code"),O0r=o("__init__()"),V0r=o(" (throws an error)."),X0r=l(),It=a("div"),F(tx.$$.fragment),z0r=l(),KTe=a("p"),Q0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W0r=l(),Mc=a("p"),H0r=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),U0r=o("not"),J0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),Y0r=o("from_pretrained()"),K0r=o(" to load the model weights."),Z0r=l(),F(yM.$$.fragment),ewr=l(),Pr=a("div"),F(ax.$$.fragment),owr=l(),e7e=a("p"),rwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),twr=l(),mn=a("p"),awr=o("The model class to instantiate is selected based on the "),o7e=a("code"),nwr=o("model_type"),swr=o(` property of the config object (either
passed as an argument or loaded from `),r7e=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=a("code"),dwr=o("pretrained_model_name_or_path"),cwr=o(":"),fwr=l(),te=a("ul"),xM=a("li"),a7e=a("strong"),mwr=o("albert"),gwr=o(" \u2014 "),ZJ=a("a"),hwr=o("TFAlbertForSequenceClassification"),pwr=o(" (ALBERT model)"),_wr=l(),$M=a("li"),n7e=a("strong"),uwr=o("bert"),bwr=o(" \u2014 "),eY=a("a"),vwr=o("TFBertForSequenceClassification"),Fwr=o(" (BERT model)"),Twr=l(),kM=a("li"),s7e=a("strong"),Mwr=o("camembert"),Ewr=o(" \u2014 "),oY=a("a"),Cwr=o("TFCamembertForSequenceClassification"),wwr=o(" (CamemBERT model)"),Awr=l(),SM=a("li"),l7e=a("strong"),Lwr=o("convbert"),ywr=o(" \u2014 "),rY=a("a"),xwr=o("TFConvBertForSequenceClassification"),$wr=o(" (ConvBERT model)"),kwr=l(),RM=a("li"),i7e=a("strong"),Swr=o("ctrl"),Rwr=o(" \u2014 "),tY=a("a"),Pwr=o("TFCTRLForSequenceClassification"),Bwr=o(" (CTRL model)"),Nwr=l(),PM=a("li"),d7e=a("strong"),Iwr=o("deberta"),qwr=o(" \u2014 "),aY=a("a"),jwr=o("TFDebertaForSequenceClassification"),Dwr=o(" (DeBERTa model)"),Gwr=l(),BM=a("li"),c7e=a("strong"),Owr=o("deberta-v2"),Vwr=o(" \u2014 "),nY=a("a"),Xwr=o("TFDebertaV2ForSequenceClassification"),zwr=o(" (DeBERTa-v2 model)"),Qwr=l(),NM=a("li"),f7e=a("strong"),Wwr=o("distilbert"),Hwr=o(" \u2014 "),sY=a("a"),Uwr=o("TFDistilBertForSequenceClassification"),Jwr=o(" (DistilBERT model)"),Ywr=l(),IM=a("li"),m7e=a("strong"),Kwr=o("electra"),Zwr=o(" \u2014 "),lY=a("a"),eAr=o("TFElectraForSequenceClassification"),oAr=o(" (ELECTRA model)"),rAr=l(),qM=a("li"),g7e=a("strong"),tAr=o("flaubert"),aAr=o(" \u2014 "),iY=a("a"),nAr=o("TFFlaubertForSequenceClassification"),sAr=o(" (FlauBERT model)"),lAr=l(),jM=a("li"),h7e=a("strong"),iAr=o("funnel"),dAr=o(" \u2014 "),dY=a("a"),cAr=o("TFFunnelForSequenceClassification"),fAr=o(" (Funnel Transformer model)"),mAr=l(),DM=a("li"),p7e=a("strong"),gAr=o("gpt2"),hAr=o(" \u2014 "),cY=a("a"),pAr=o("TFGPT2ForSequenceClassification"),_Ar=o(" (OpenAI GPT-2 model)"),uAr=l(),GM=a("li"),_7e=a("strong"),bAr=o("gptj"),vAr=o(" \u2014 "),fY=a("a"),FAr=o("TFGPTJForSequenceClassification"),TAr=o(" (GPT-J model)"),MAr=l(),OM=a("li"),u7e=a("strong"),EAr=o("layoutlm"),CAr=o(" \u2014 "),mY=a("a"),wAr=o("TFLayoutLMForSequenceClassification"),AAr=o(" (LayoutLM model)"),LAr=l(),VM=a("li"),b7e=a("strong"),yAr=o("longformer"),xAr=o(" \u2014 "),gY=a("a"),$Ar=o("TFLongformerForSequenceClassification"),kAr=o(" (Longformer model)"),SAr=l(),XM=a("li"),v7e=a("strong"),RAr=o("mobilebert"),PAr=o(" \u2014 "),hY=a("a"),BAr=o("TFMobileBertForSequenceClassification"),NAr=o(" (MobileBERT model)"),IAr=l(),zM=a("li"),F7e=a("strong"),qAr=o("mpnet"),jAr=o(" \u2014 "),pY=a("a"),DAr=o("TFMPNetForSequenceClassification"),GAr=o(" (MPNet model)"),OAr=l(),QM=a("li"),T7e=a("strong"),VAr=o("openai-gpt"),XAr=o(" \u2014 "),_Y=a("a"),zAr=o("TFOpenAIGPTForSequenceClassification"),QAr=o(" (OpenAI GPT model)"),WAr=l(),WM=a("li"),M7e=a("strong"),HAr=o("rembert"),UAr=o(" \u2014 "),uY=a("a"),JAr=o("TFRemBertForSequenceClassification"),YAr=o(" (RemBERT model)"),KAr=l(),HM=a("li"),E7e=a("strong"),ZAr=o("roberta"),e6r=o(" \u2014 "),bY=a("a"),o6r=o("TFRobertaForSequenceClassification"),r6r=o(" (RoBERTa model)"),t6r=l(),UM=a("li"),C7e=a("strong"),a6r=o("roformer"),n6r=o(" \u2014 "),vY=a("a"),s6r=o("TFRoFormerForSequenceClassification"),l6r=o(" (RoFormer model)"),i6r=l(),JM=a("li"),w7e=a("strong"),d6r=o("tapas"),c6r=o(" \u2014 "),FY=a("a"),f6r=o("TFTapasForSequenceClassification"),m6r=o(" (TAPAS model)"),g6r=l(),YM=a("li"),A7e=a("strong"),h6r=o("transfo-xl"),p6r=o(" \u2014 "),TY=a("a"),_6r=o("TFTransfoXLForSequenceClassification"),u6r=o(" (Transformer-XL model)"),b6r=l(),KM=a("li"),L7e=a("strong"),v6r=o("xlm"),F6r=o(" \u2014 "),MY=a("a"),T6r=o("TFXLMForSequenceClassification"),M6r=o(" (XLM model)"),E6r=l(),ZM=a("li"),y7e=a("strong"),C6r=o("xlm-roberta"),w6r=o(" \u2014 "),EY=a("a"),A6r=o("TFXLMRobertaForSequenceClassification"),L6r=o(" (XLM-RoBERTa model)"),y6r=l(),eE=a("li"),x7e=a("strong"),x6r=o("xlnet"),$6r=o(" \u2014 "),CY=a("a"),k6r=o("TFXLNetForSequenceClassification"),S6r=o(" (XLNet model)"),R6r=l(),F(oE.$$.fragment),VVe=l(),Ec=a("h2"),rE=a("a"),$7e=a("span"),F(nx.$$.fragment),P6r=l(),k7e=a("span"),B6r=o("TFAutoModelForMultipleChoice"),XVe=l(),lr=a("div"),F(sx.$$.fragment),N6r=l(),Cc=a("p"),I6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wY=a("a"),q6r=o("from_pretrained()"),j6r=o(" class method or the "),AY=a("a"),D6r=o("from_config()"),G6r=o(` class
method.`),O6r=l(),lx=a("p"),V6r=o("This class cannot be instantiated directly using "),S7e=a("code"),X6r=o("__init__()"),z6r=o(" (throws an error)."),Q6r=l(),qt=a("div"),F(ix.$$.fragment),W6r=l(),R7e=a("p"),H6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),U6r=l(),wc=a("p"),J6r=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),Y6r=o("not"),K6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),Z6r=o("from_pretrained()"),eLr=o(" to load the model weights."),oLr=l(),F(tE.$$.fragment),rLr=l(),Br=a("div"),F(dx.$$.fragment),tLr=l(),B7e=a("p"),aLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nLr=l(),gn=a("p"),sLr=o("The model class to instantiate is selected based on the "),N7e=a("code"),lLr=o("model_type"),iLr=o(` property of the config object (either
passed as an argument or loaded from `),I7e=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(":"),gLr=l(),_e=a("ul"),aE=a("li"),j7e=a("strong"),hLr=o("albert"),pLr=o(" \u2014 "),yY=a("a"),_Lr=o("TFAlbertForMultipleChoice"),uLr=o(" (ALBERT model)"),bLr=l(),nE=a("li"),D7e=a("strong"),vLr=o("bert"),FLr=o(" \u2014 "),xY=a("a"),TLr=o("TFBertForMultipleChoice"),MLr=o(" (BERT model)"),ELr=l(),sE=a("li"),G7e=a("strong"),CLr=o("camembert"),wLr=o(" \u2014 "),$Y=a("a"),ALr=o("TFCamembertForMultipleChoice"),LLr=o(" (CamemBERT model)"),yLr=l(),lE=a("li"),O7e=a("strong"),xLr=o("convbert"),$Lr=o(" \u2014 "),kY=a("a"),kLr=o("TFConvBertForMultipleChoice"),SLr=o(" (ConvBERT model)"),RLr=l(),iE=a("li"),V7e=a("strong"),PLr=o("distilbert"),BLr=o(" \u2014 "),SY=a("a"),NLr=o("TFDistilBertForMultipleChoice"),ILr=o(" (DistilBERT model)"),qLr=l(),dE=a("li"),X7e=a("strong"),jLr=o("electra"),DLr=o(" \u2014 "),RY=a("a"),GLr=o("TFElectraForMultipleChoice"),OLr=o(" (ELECTRA model)"),VLr=l(),cE=a("li"),z7e=a("strong"),XLr=o("flaubert"),zLr=o(" \u2014 "),PY=a("a"),QLr=o("TFFlaubertForMultipleChoice"),WLr=o(" (FlauBERT model)"),HLr=l(),fE=a("li"),Q7e=a("strong"),ULr=o("funnel"),JLr=o(" \u2014 "),BY=a("a"),YLr=o("TFFunnelForMultipleChoice"),KLr=o(" (Funnel Transformer model)"),ZLr=l(),mE=a("li"),W7e=a("strong"),eyr=o("longformer"),oyr=o(" \u2014 "),NY=a("a"),ryr=o("TFLongformerForMultipleChoice"),tyr=o(" (Longformer model)"),ayr=l(),gE=a("li"),H7e=a("strong"),nyr=o("mobilebert"),syr=o(" \u2014 "),IY=a("a"),lyr=o("TFMobileBertForMultipleChoice"),iyr=o(" (MobileBERT model)"),dyr=l(),hE=a("li"),U7e=a("strong"),cyr=o("mpnet"),fyr=o(" \u2014 "),qY=a("a"),myr=o("TFMPNetForMultipleChoice"),gyr=o(" (MPNet model)"),hyr=l(),pE=a("li"),J7e=a("strong"),pyr=o("rembert"),_yr=o(" \u2014 "),jY=a("a"),uyr=o("TFRemBertForMultipleChoice"),byr=o(" (RemBERT model)"),vyr=l(),_E=a("li"),Y7e=a("strong"),Fyr=o("roberta"),Tyr=o(" \u2014 "),DY=a("a"),Myr=o("TFRobertaForMultipleChoice"),Eyr=o(" (RoBERTa model)"),Cyr=l(),uE=a("li"),K7e=a("strong"),wyr=o("roformer"),Ayr=o(" \u2014 "),GY=a("a"),Lyr=o("TFRoFormerForMultipleChoice"),yyr=o(" (RoFormer model)"),xyr=l(),bE=a("li"),Z7e=a("strong"),$yr=o("xlm"),kyr=o(" \u2014 "),OY=a("a"),Syr=o("TFXLMForMultipleChoice"),Ryr=o(" (XLM model)"),Pyr=l(),vE=a("li"),e8e=a("strong"),Byr=o("xlm-roberta"),Nyr=o(" \u2014 "),VY=a("a"),Iyr=o("TFXLMRobertaForMultipleChoice"),qyr=o(" (XLM-RoBERTa model)"),jyr=l(),FE=a("li"),o8e=a("strong"),Dyr=o("xlnet"),Gyr=o(" \u2014 "),XY=a("a"),Oyr=o("TFXLNetForMultipleChoice"),Vyr=o(" (XLNet model)"),Xyr=l(),F(TE.$$.fragment),zVe=l(),Ac=a("h2"),ME=a("a"),r8e=a("span"),F(cx.$$.fragment),zyr=l(),t8e=a("span"),Qyr=o("TFAutoModelForNextSentencePrediction"),QVe=l(),ir=a("div"),F(fx.$$.fragment),Wyr=l(),Lc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zY=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" class method or the "),QY=a("a"),Yyr=o("from_config()"),Kyr=o(` class
method.`),Zyr=l(),mx=a("p"),e9r=o("This class cannot be instantiated directly using "),a8e=a("code"),o9r=o("__init__()"),r9r=o(" (throws an error)."),t9r=l(),jt=a("div"),F(gx.$$.fragment),a9r=l(),n8e=a("p"),n9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),s9r=l(),yc=a("p"),l9r=o(`Note:
Loading a model from its configuration file does `),s8e=a("strong"),i9r=o("not"),d9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),c9r=o("from_pretrained()"),f9r=o(" to load the model weights."),m9r=l(),F(EE.$$.fragment),g9r=l(),Nr=a("div"),F(hx.$$.fragment),h9r=l(),l8e=a("p"),p9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_9r=l(),hn=a("p"),u9r=o("The model class to instantiate is selected based on the "),i8e=a("code"),b9r=o("model_type"),v9r=o(` property of the config object (either
passed as an argument or loaded from `),d8e=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(":"),C9r=l(),px=a("ul"),CE=a("li"),f8e=a("strong"),w9r=o("bert"),A9r=o(" \u2014 "),HY=a("a"),L9r=o("TFBertForNextSentencePrediction"),y9r=o(" (BERT model)"),x9r=l(),wE=a("li"),m8e=a("strong"),$9r=o("mobilebert"),k9r=o(" \u2014 "),UY=a("a"),S9r=o("TFMobileBertForNextSentencePrediction"),R9r=o(" (MobileBERT model)"),P9r=l(),F(AE.$$.fragment),WVe=l(),xc=a("h2"),LE=a("a"),g8e=a("span"),F(_x.$$.fragment),B9r=l(),h8e=a("span"),N9r=o("TFAutoModelForTableQuestionAnswering"),HVe=l(),dr=a("div"),F(ux.$$.fragment),I9r=l(),$c=a("p"),q9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JY=a("a"),j9r=o("from_pretrained()"),D9r=o(" class method or the "),YY=a("a"),G9r=o("from_config()"),O9r=o(` class
method.`),V9r=l(),bx=a("p"),X9r=o("This class cannot be instantiated directly using "),p8e=a("code"),z9r=o("__init__()"),Q9r=o(" (throws an error)."),W9r=l(),Dt=a("div"),F(vx.$$.fragment),H9r=l(),_8e=a("p"),U9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),J9r=l(),kc=a("p"),Y9r=o(`Note:
Loading a model from its configuration file does `),u8e=a("strong"),K9r=o("not"),Z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),exr=o("from_pretrained()"),oxr=o(" to load the model weights."),rxr=l(),F(yE.$$.fragment),txr=l(),Ir=a("div"),F(Fx.$$.fragment),axr=l(),b8e=a("p"),nxr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sxr=l(),pn=a("p"),lxr=o("The model class to instantiate is selected based on the "),v8e=a("code"),ixr=o("model_type"),dxr=o(` property of the config object (either
passed as an argument or loaded from `),F8e=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(":"),hxr=l(),M8e=a("ul"),xE=a("li"),E8e=a("strong"),pxr=o("tapas"),_xr=o(" \u2014 "),ZY=a("a"),uxr=o("TFTapasForQuestionAnswering"),bxr=o(" (TAPAS model)"),vxr=l(),F($E.$$.fragment),UVe=l(),Sc=a("h2"),kE=a("a"),C8e=a("span"),F(Tx.$$.fragment),Fxr=l(),w8e=a("span"),Txr=o("TFAutoModelForTokenClassification"),JVe=l(),cr=a("div"),F(Mx.$$.fragment),Mxr=l(),Rc=a("p"),Exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eK=a("a"),Cxr=o("from_pretrained()"),wxr=o(" class method or the "),oK=a("a"),Axr=o("from_config()"),Lxr=o(` class
method.`),yxr=l(),Ex=a("p"),xxr=o("This class cannot be instantiated directly using "),A8e=a("code"),$xr=o("__init__()"),kxr=o(" (throws an error)."),Sxr=l(),Gt=a("div"),F(Cx.$$.fragment),Rxr=l(),L8e=a("p"),Pxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bxr=l(),Pc=a("p"),Nxr=o(`Note:
Loading a model from its configuration file does `),y8e=a("strong"),Ixr=o("not"),qxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),jxr=o("from_pretrained()"),Dxr=o(" to load the model weights."),Gxr=l(),F(SE.$$.fragment),Oxr=l(),qr=a("div"),F(wx.$$.fragment),Vxr=l(),x8e=a("p"),Xxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zxr=l(),_n=a("p"),Qxr=o("The model class to instantiate is selected based on the "),$8e=a("code"),Wxr=o("model_type"),Hxr=o(` property of the config object (either
passed as an argument or loaded from `),k8e=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S8e=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(":"),Zxr=l(),de=a("ul"),RE=a("li"),R8e=a("strong"),e$r=o("albert"),o$r=o(" \u2014 "),tK=a("a"),r$r=o("TFAlbertForTokenClassification"),t$r=o(" (ALBERT model)"),a$r=l(),PE=a("li"),P8e=a("strong"),n$r=o("bert"),s$r=o(" \u2014 "),aK=a("a"),l$r=o("TFBertForTokenClassification"),i$r=o(" (BERT model)"),d$r=l(),BE=a("li"),B8e=a("strong"),c$r=o("camembert"),f$r=o(" \u2014 "),nK=a("a"),m$r=o("TFCamembertForTokenClassification"),g$r=o(" (CamemBERT model)"),h$r=l(),NE=a("li"),N8e=a("strong"),p$r=o("convbert"),_$r=o(" \u2014 "),sK=a("a"),u$r=o("TFConvBertForTokenClassification"),b$r=o(" (ConvBERT model)"),v$r=l(),IE=a("li"),I8e=a("strong"),F$r=o("deberta"),T$r=o(" \u2014 "),lK=a("a"),M$r=o("TFDebertaForTokenClassification"),E$r=o(" (DeBERTa model)"),C$r=l(),qE=a("li"),q8e=a("strong"),w$r=o("deberta-v2"),A$r=o(" \u2014 "),iK=a("a"),L$r=o("TFDebertaV2ForTokenClassification"),y$r=o(" (DeBERTa-v2 model)"),x$r=l(),jE=a("li"),j8e=a("strong"),$$r=o("distilbert"),k$r=o(" \u2014 "),dK=a("a"),S$r=o("TFDistilBertForTokenClassification"),R$r=o(" (DistilBERT model)"),P$r=l(),DE=a("li"),D8e=a("strong"),B$r=o("electra"),N$r=o(" \u2014 "),cK=a("a"),I$r=o("TFElectraForTokenClassification"),q$r=o(" (ELECTRA model)"),j$r=l(),GE=a("li"),G8e=a("strong"),D$r=o("flaubert"),G$r=o(" \u2014 "),fK=a("a"),O$r=o("TFFlaubertForTokenClassification"),V$r=o(" (FlauBERT model)"),X$r=l(),OE=a("li"),O8e=a("strong"),z$r=o("funnel"),Q$r=o(" \u2014 "),mK=a("a"),W$r=o("TFFunnelForTokenClassification"),H$r=o(" (Funnel Transformer model)"),U$r=l(),VE=a("li"),V8e=a("strong"),J$r=o("layoutlm"),Y$r=o(" \u2014 "),gK=a("a"),K$r=o("TFLayoutLMForTokenClassification"),Z$r=o(" (LayoutLM model)"),ekr=l(),XE=a("li"),X8e=a("strong"),okr=o("longformer"),rkr=o(" \u2014 "),hK=a("a"),tkr=o("TFLongformerForTokenClassification"),akr=o(" (Longformer model)"),nkr=l(),zE=a("li"),z8e=a("strong"),skr=o("mobilebert"),lkr=o(" \u2014 "),pK=a("a"),ikr=o("TFMobileBertForTokenClassification"),dkr=o(" (MobileBERT model)"),ckr=l(),QE=a("li"),Q8e=a("strong"),fkr=o("mpnet"),mkr=o(" \u2014 "),_K=a("a"),gkr=o("TFMPNetForTokenClassification"),hkr=o(" (MPNet model)"),pkr=l(),WE=a("li"),W8e=a("strong"),_kr=o("rembert"),ukr=o(" \u2014 "),uK=a("a"),bkr=o("TFRemBertForTokenClassification"),vkr=o(" (RemBERT model)"),Fkr=l(),HE=a("li"),H8e=a("strong"),Tkr=o("roberta"),Mkr=o(" \u2014 "),bK=a("a"),Ekr=o("TFRobertaForTokenClassification"),Ckr=o(" (RoBERTa model)"),wkr=l(),UE=a("li"),U8e=a("strong"),Akr=o("roformer"),Lkr=o(" \u2014 "),vK=a("a"),ykr=o("TFRoFormerForTokenClassification"),xkr=o(" (RoFormer model)"),$kr=l(),JE=a("li"),J8e=a("strong"),kkr=o("xlm"),Skr=o(" \u2014 "),FK=a("a"),Rkr=o("TFXLMForTokenClassification"),Pkr=o(" (XLM model)"),Bkr=l(),YE=a("li"),Y8e=a("strong"),Nkr=o("xlm-roberta"),Ikr=o(" \u2014 "),TK=a("a"),qkr=o("TFXLMRobertaForTokenClassification"),jkr=o(" (XLM-RoBERTa model)"),Dkr=l(),KE=a("li"),K8e=a("strong"),Gkr=o("xlnet"),Okr=o(" \u2014 "),MK=a("a"),Vkr=o("TFXLNetForTokenClassification"),Xkr=o(" (XLNet model)"),zkr=l(),F(ZE.$$.fragment),YVe=l(),Bc=a("h2"),eC=a("a"),Z8e=a("span"),F(Ax.$$.fragment),Qkr=l(),eMe=a("span"),Wkr=o("TFAutoModelForQuestionAnswering"),KVe=l(),fr=a("div"),F(Lx.$$.fragment),Hkr=l(),Nc=a("p"),Ukr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EK=a("a"),Jkr=o("from_pretrained()"),Ykr=o(" class method or the "),CK=a("a"),Kkr=o("from_config()"),Zkr=o(` class
method.`),eSr=l(),yx=a("p"),oSr=o("This class cannot be instantiated directly using "),oMe=a("code"),rSr=o("__init__()"),tSr=o(" (throws an error)."),aSr=l(),Ot=a("div"),F(xx.$$.fragment),nSr=l(),rMe=a("p"),sSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lSr=l(),Ic=a("p"),iSr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),dSr=o("not"),cSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),fSr=o("from_pretrained()"),mSr=o(" to load the model weights."),gSr=l(),F(oC.$$.fragment),hSr=l(),jr=a("div"),F($x.$$.fragment),pSr=l(),aMe=a("p"),_Sr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uSr=l(),un=a("p"),bSr=o("The model class to instantiate is selected based on the "),nMe=a("code"),vSr=o("model_type"),FSr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),TSr=o("pretrained_model_name_or_path"),MSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(":"),wSr=l(),ce=a("ul"),rC=a("li"),iMe=a("strong"),ASr=o("albert"),LSr=o(" \u2014 "),AK=a("a"),ySr=o("TFAlbertForQuestionAnswering"),xSr=o(" (ALBERT model)"),$Sr=l(),tC=a("li"),dMe=a("strong"),kSr=o("bert"),SSr=o(" \u2014 "),LK=a("a"),RSr=o("TFBertForQuestionAnswering"),PSr=o(" (BERT model)"),BSr=l(),aC=a("li"),cMe=a("strong"),NSr=o("camembert"),ISr=o(" \u2014 "),yK=a("a"),qSr=o("TFCamembertForQuestionAnswering"),jSr=o(" (CamemBERT model)"),DSr=l(),nC=a("li"),fMe=a("strong"),GSr=o("convbert"),OSr=o(" \u2014 "),xK=a("a"),VSr=o("TFConvBertForQuestionAnswering"),XSr=o(" (ConvBERT model)"),zSr=l(),sC=a("li"),mMe=a("strong"),QSr=o("deberta"),WSr=o(" \u2014 "),$K=a("a"),HSr=o("TFDebertaForQuestionAnswering"),USr=o(" (DeBERTa model)"),JSr=l(),lC=a("li"),gMe=a("strong"),YSr=o("deberta-v2"),KSr=o(" \u2014 "),kK=a("a"),ZSr=o("TFDebertaV2ForQuestionAnswering"),eRr=o(" (DeBERTa-v2 model)"),oRr=l(),iC=a("li"),hMe=a("strong"),rRr=o("distilbert"),tRr=o(" \u2014 "),SK=a("a"),aRr=o("TFDistilBertForQuestionAnswering"),nRr=o(" (DistilBERT model)"),sRr=l(),dC=a("li"),pMe=a("strong"),lRr=o("electra"),iRr=o(" \u2014 "),RK=a("a"),dRr=o("TFElectraForQuestionAnswering"),cRr=o(" (ELECTRA model)"),fRr=l(),cC=a("li"),_Me=a("strong"),mRr=o("flaubert"),gRr=o(" \u2014 "),PK=a("a"),hRr=o("TFFlaubertForQuestionAnsweringSimple"),pRr=o(" (FlauBERT model)"),_Rr=l(),fC=a("li"),uMe=a("strong"),uRr=o("funnel"),bRr=o(" \u2014 "),BK=a("a"),vRr=o("TFFunnelForQuestionAnswering"),FRr=o(" (Funnel Transformer model)"),TRr=l(),mC=a("li"),bMe=a("strong"),MRr=o("gptj"),ERr=o(" \u2014 "),NK=a("a"),CRr=o("TFGPTJForQuestionAnswering"),wRr=o(" (GPT-J model)"),ARr=l(),gC=a("li"),vMe=a("strong"),LRr=o("longformer"),yRr=o(" \u2014 "),IK=a("a"),xRr=o("TFLongformerForQuestionAnswering"),$Rr=o(" (Longformer model)"),kRr=l(),hC=a("li"),FMe=a("strong"),SRr=o("mobilebert"),RRr=o(" \u2014 "),qK=a("a"),PRr=o("TFMobileBertForQuestionAnswering"),BRr=o(" (MobileBERT model)"),NRr=l(),pC=a("li"),TMe=a("strong"),IRr=o("mpnet"),qRr=o(" \u2014 "),jK=a("a"),jRr=o("TFMPNetForQuestionAnswering"),DRr=o(" (MPNet model)"),GRr=l(),_C=a("li"),MMe=a("strong"),ORr=o("rembert"),VRr=o(" \u2014 "),DK=a("a"),XRr=o("TFRemBertForQuestionAnswering"),zRr=o(" (RemBERT model)"),QRr=l(),uC=a("li"),EMe=a("strong"),WRr=o("roberta"),HRr=o(" \u2014 "),GK=a("a"),URr=o("TFRobertaForQuestionAnswering"),JRr=o(" (RoBERTa model)"),YRr=l(),bC=a("li"),CMe=a("strong"),KRr=o("roformer"),ZRr=o(" \u2014 "),OK=a("a"),ePr=o("TFRoFormerForQuestionAnswering"),oPr=o(" (RoFormer model)"),rPr=l(),vC=a("li"),wMe=a("strong"),tPr=o("xlm"),aPr=o(" \u2014 "),VK=a("a"),nPr=o("TFXLMForQuestionAnsweringSimple"),sPr=o(" (XLM model)"),lPr=l(),FC=a("li"),AMe=a("strong"),iPr=o("xlm-roberta"),dPr=o(" \u2014 "),XK=a("a"),cPr=o("TFXLMRobertaForQuestionAnswering"),fPr=o(" (XLM-RoBERTa model)"),mPr=l(),TC=a("li"),LMe=a("strong"),gPr=o("xlnet"),hPr=o(" \u2014 "),zK=a("a"),pPr=o("TFXLNetForQuestionAnsweringSimple"),_Pr=o(" (XLNet model)"),uPr=l(),F(MC.$$.fragment),ZVe=l(),qc=a("h2"),EC=a("a"),yMe=a("span"),F(kx.$$.fragment),bPr=l(),xMe=a("span"),vPr=o("TFAutoModelForVision2Seq"),eXe=l(),mr=a("div"),F(Sx.$$.fragment),FPr=l(),jc=a("p"),TPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QK=a("a"),MPr=o("from_pretrained()"),EPr=o(" class method or the "),WK=a("a"),CPr=o("from_config()"),wPr=o(` class
method.`),APr=l(),Rx=a("p"),LPr=o("This class cannot be instantiated directly using "),$Me=a("code"),yPr=o("__init__()"),xPr=o(" (throws an error)."),$Pr=l(),Vt=a("div"),F(Px.$$.fragment),kPr=l(),kMe=a("p"),SPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RPr=l(),Dc=a("p"),PPr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),BPr=o("not"),NPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),IPr=o("from_pretrained()"),qPr=o(" to load the model weights."),jPr=l(),F(CC.$$.fragment),DPr=l(),Dr=a("div"),F(Bx.$$.fragment),GPr=l(),RMe=a("p"),OPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VPr=l(),bn=a("p"),XPr=o("The model class to instantiate is selected based on the "),PMe=a("code"),zPr=o("model_type"),QPr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),WPr=o("pretrained_model_name_or_path"),HPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=a("code"),UPr=o("pretrained_model_name_or_path"),JPr=o(":"),YPr=l(),IMe=a("ul"),wC=a("li"),qMe=a("strong"),KPr=o("vision-encoder-decoder"),ZPr=o(" \u2014 "),UK=a("a"),eBr=o("TFVisionEncoderDecoderModel"),oBr=o(" (Vision Encoder decoder model)"),rBr=l(),F(AC.$$.fragment),oXe=l(),Gc=a("h2"),LC=a("a"),jMe=a("span"),F(Nx.$$.fragment),tBr=l(),DMe=a("span"),aBr=o("TFAutoModelForSpeechSeq2Seq"),rXe=l(),gr=a("div"),F(Ix.$$.fragment),nBr=l(),Oc=a("p"),sBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JK=a("a"),lBr=o("from_pretrained()"),iBr=o(" class method or the "),YK=a("a"),dBr=o("from_config()"),cBr=o(` class
method.`),fBr=l(),qx=a("p"),mBr=o("This class cannot be instantiated directly using "),GMe=a("code"),gBr=o("__init__()"),hBr=o(" (throws an error)."),pBr=l(),Xt=a("div"),F(jx.$$.fragment),_Br=l(),OMe=a("p"),uBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bBr=l(),Vc=a("p"),vBr=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),FBr=o("not"),TBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=a("a"),MBr=o("from_pretrained()"),EBr=o(" to load the model weights."),CBr=l(),F(yC.$$.fragment),wBr=l(),Gr=a("div"),F(Dx.$$.fragment),ABr=l(),XMe=a("p"),LBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yBr=l(),vn=a("p"),xBr=o("The model class to instantiate is selected based on the "),zMe=a("code"),$Br=o("model_type"),kBr=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),PBr=o("pretrained_model_name_or_path"),BBr=o(":"),NBr=l(),HMe=a("ul"),xC=a("li"),UMe=a("strong"),IBr=o("speech_to_text"),qBr=o(" \u2014 "),ZK=a("a"),jBr=o("TFSpeech2TextForConditionalGeneration"),DBr=o(" (Speech2Text model)"),GBr=l(),F($C.$$.fragment),tXe=l(),Xc=a("h2"),kC=a("a"),JMe=a("span"),F(Gx.$$.fragment),OBr=l(),YMe=a("span"),VBr=o("FlaxAutoModel"),aXe=l(),hr=a("div"),F(Ox.$$.fragment),XBr=l(),zc=a("p"),zBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eZ=a("a"),QBr=o("from_pretrained()"),WBr=o(" class method or the "),oZ=a("a"),HBr=o("from_config()"),UBr=o(` class
method.`),JBr=l(),Vx=a("p"),YBr=o("This class cannot be instantiated directly using "),KMe=a("code"),KBr=o("__init__()"),ZBr=o(" (throws an error)."),eNr=l(),zt=a("div"),F(Xx.$$.fragment),oNr=l(),ZMe=a("p"),rNr=o("Instantiates one of the base model classes of the library from a configuration."),tNr=l(),Qc=a("p"),aNr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),nNr=o("not"),sNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),lNr=o("from_pretrained()"),iNr=o(" to load the model weights."),dNr=l(),F(SC.$$.fragment),cNr=l(),Or=a("div"),F(zx.$$.fragment),fNr=l(),oEe=a("p"),mNr=o("Instantiate one of the base model classes of the library from a pretrained model."),gNr=l(),Fn=a("p"),hNr=o("The model class to instantiate is selected based on the "),rEe=a("code"),pNr=o("model_type"),_Nr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),uNr=o("pretrained_model_name_or_path"),bNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),vNr=o("pretrained_model_name_or_path"),FNr=o(":"),TNr=l(),oe=a("ul"),RC=a("li"),nEe=a("strong"),MNr=o("albert"),ENr=o(" \u2014 "),tZ=a("a"),CNr=o("FlaxAlbertModel"),wNr=o(" (ALBERT model)"),ANr=l(),PC=a("li"),sEe=a("strong"),LNr=o("bart"),yNr=o(" \u2014 "),aZ=a("a"),xNr=o("FlaxBartModel"),$Nr=o(" (BART model)"),kNr=l(),BC=a("li"),lEe=a("strong"),SNr=o("beit"),RNr=o(" \u2014 "),nZ=a("a"),PNr=o("FlaxBeitModel"),BNr=o(" (BEiT model)"),NNr=l(),NC=a("li"),iEe=a("strong"),INr=o("bert"),qNr=o(" \u2014 "),sZ=a("a"),jNr=o("FlaxBertModel"),DNr=o(" (BERT model)"),GNr=l(),IC=a("li"),dEe=a("strong"),ONr=o("big_bird"),VNr=o(" \u2014 "),lZ=a("a"),XNr=o("FlaxBigBirdModel"),zNr=o(" (BigBird model)"),QNr=l(),qC=a("li"),cEe=a("strong"),WNr=o("blenderbot"),HNr=o(" \u2014 "),iZ=a("a"),UNr=o("FlaxBlenderbotModel"),JNr=o(" (Blenderbot model)"),YNr=l(),jC=a("li"),fEe=a("strong"),KNr=o("blenderbot-small"),ZNr=o(" \u2014 "),dZ=a("a"),eIr=o("FlaxBlenderbotSmallModel"),oIr=o(" (BlenderbotSmall model)"),rIr=l(),DC=a("li"),mEe=a("strong"),tIr=o("clip"),aIr=o(" \u2014 "),cZ=a("a"),nIr=o("FlaxCLIPModel"),sIr=o(" (CLIP model)"),lIr=l(),GC=a("li"),gEe=a("strong"),iIr=o("distilbert"),dIr=o(" \u2014 "),fZ=a("a"),cIr=o("FlaxDistilBertModel"),fIr=o(" (DistilBERT model)"),mIr=l(),OC=a("li"),hEe=a("strong"),gIr=o("electra"),hIr=o(" \u2014 "),mZ=a("a"),pIr=o("FlaxElectraModel"),_Ir=o(" (ELECTRA model)"),uIr=l(),VC=a("li"),pEe=a("strong"),bIr=o("gpt2"),vIr=o(" \u2014 "),gZ=a("a"),FIr=o("FlaxGPT2Model"),TIr=o(" (OpenAI GPT-2 model)"),MIr=l(),XC=a("li"),_Ee=a("strong"),EIr=o("gpt_neo"),CIr=o(" \u2014 "),hZ=a("a"),wIr=o("FlaxGPTNeoModel"),AIr=o(" (GPT Neo model)"),LIr=l(),zC=a("li"),uEe=a("strong"),yIr=o("gptj"),xIr=o(" \u2014 "),pZ=a("a"),$Ir=o("FlaxGPTJModel"),kIr=o(" (GPT-J model)"),SIr=l(),QC=a("li"),bEe=a("strong"),RIr=o("longt5"),PIr=o(" \u2014 "),_Z=a("a"),BIr=o("FlaxLongT5Model"),NIr=o(" (LongT5 model)"),IIr=l(),WC=a("li"),vEe=a("strong"),qIr=o("marian"),jIr=o(" \u2014 "),uZ=a("a"),DIr=o("FlaxMarianModel"),GIr=o(" (Marian model)"),OIr=l(),HC=a("li"),FEe=a("strong"),VIr=o("mbart"),XIr=o(" \u2014 "),bZ=a("a"),zIr=o("FlaxMBartModel"),QIr=o(" (mBART model)"),WIr=l(),UC=a("li"),TEe=a("strong"),HIr=o("mt5"),UIr=o(" \u2014 "),vZ=a("a"),JIr=o("FlaxMT5Model"),YIr=o(" (MT5 model)"),KIr=l(),JC=a("li"),MEe=a("strong"),ZIr=o("opt"),eqr=o(" \u2014 "),FZ=a("a"),oqr=o("FlaxOPTModel"),rqr=o(" (OPT model)"),tqr=l(),YC=a("li"),EEe=a("strong"),aqr=o("pegasus"),nqr=o(" \u2014 "),TZ=a("a"),sqr=o("FlaxPegasusModel"),lqr=o(" (Pegasus model)"),iqr=l(),KC=a("li"),CEe=a("strong"),dqr=o("roberta"),cqr=o(" \u2014 "),MZ=a("a"),fqr=o("FlaxRobertaModel"),mqr=o(" (RoBERTa model)"),gqr=l(),ZC=a("li"),wEe=a("strong"),hqr=o("roformer"),pqr=o(" \u2014 "),EZ=a("a"),_qr=o("FlaxRoFormerModel"),uqr=o(" (RoFormer model)"),bqr=l(),e3=a("li"),AEe=a("strong"),vqr=o("t5"),Fqr=o(" \u2014 "),CZ=a("a"),Tqr=o("FlaxT5Model"),Mqr=o(" (T5 model)"),Eqr=l(),o3=a("li"),LEe=a("strong"),Cqr=o("vision-text-dual-encoder"),wqr=o(" \u2014 "),wZ=a("a"),Aqr=o("FlaxVisionTextDualEncoderModel"),Lqr=o(" (VisionTextDualEncoder model)"),yqr=l(),r3=a("li"),yEe=a("strong"),xqr=o("vit"),$qr=o(" \u2014 "),AZ=a("a"),kqr=o("FlaxViTModel"),Sqr=o(" (ViT model)"),Rqr=l(),t3=a("li"),xEe=a("strong"),Pqr=o("wav2vec2"),Bqr=o(" \u2014 "),LZ=a("a"),Nqr=o("FlaxWav2Vec2Model"),Iqr=o(" (Wav2Vec2 model)"),qqr=l(),a3=a("li"),$Ee=a("strong"),jqr=o("xglm"),Dqr=o(" \u2014 "),yZ=a("a"),Gqr=o("FlaxXGLMModel"),Oqr=o(" (XGLM model)"),Vqr=l(),n3=a("li"),kEe=a("strong"),Xqr=o("xlm-roberta"),zqr=o(" \u2014 "),xZ=a("a"),Qqr=o("FlaxXLMRobertaModel"),Wqr=o(" (XLM-RoBERTa model)"),Hqr=l(),F(s3.$$.fragment),nXe=l(),Wc=a("h2"),l3=a("a"),SEe=a("span"),F(Qx.$$.fragment),Uqr=l(),REe=a("span"),Jqr=o("FlaxAutoModelForCausalLM"),sXe=l(),pr=a("div"),F(Wx.$$.fragment),Yqr=l(),Hc=a("p"),Kqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$Z=a("a"),Zqr=o("from_pretrained()"),ejr=o(" class method or the "),kZ=a("a"),ojr=o("from_config()"),rjr=o(` class
method.`),tjr=l(),Hx=a("p"),ajr=o("This class cannot be instantiated directly using "),PEe=a("code"),njr=o("__init__()"),sjr=o(" (throws an error)."),ljr=l(),Qt=a("div"),F(Ux.$$.fragment),ijr=l(),BEe=a("p"),djr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cjr=l(),Uc=a("p"),fjr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),mjr=o("not"),gjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),hjr=o("from_pretrained()"),pjr=o(" to load the model weights."),_jr=l(),F(i3.$$.fragment),ujr=l(),Vr=a("div"),F(Jx.$$.fragment),bjr=l(),IEe=a("p"),vjr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fjr=l(),Tn=a("p"),Tjr=o("The model class to instantiate is selected based on the "),qEe=a("code"),Mjr=o("model_type"),Ejr=o(` property of the config object (either
passed as an argument or loaded from `),jEe=a("code"),Cjr=o("pretrained_model_name_or_path"),wjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=a("code"),Ajr=o("pretrained_model_name_or_path"),Ljr=o(":"),yjr=l(),xe=a("ul"),d3=a("li"),GEe=a("strong"),xjr=o("bart"),$jr=o(" \u2014 "),RZ=a("a"),kjr=o("FlaxBartForCausalLM"),Sjr=o(" (BART model)"),Rjr=l(),c3=a("li"),OEe=a("strong"),Pjr=o("bert"),Bjr=o(" \u2014 "),PZ=a("a"),Njr=o("FlaxBertForCausalLM"),Ijr=o(" (BERT model)"),qjr=l(),f3=a("li"),VEe=a("strong"),jjr=o("big_bird"),Djr=o(" \u2014 "),BZ=a("a"),Gjr=o("FlaxBigBirdForCausalLM"),Ojr=o(" (BigBird model)"),Vjr=l(),m3=a("li"),XEe=a("strong"),Xjr=o("electra"),zjr=o(" \u2014 "),NZ=a("a"),Qjr=o("FlaxElectraForCausalLM"),Wjr=o(" (ELECTRA model)"),Hjr=l(),g3=a("li"),zEe=a("strong"),Ujr=o("gpt2"),Jjr=o(" \u2014 "),IZ=a("a"),Yjr=o("FlaxGPT2LMHeadModel"),Kjr=o(" (OpenAI GPT-2 model)"),Zjr=l(),h3=a("li"),QEe=a("strong"),eDr=o("gpt_neo"),oDr=o(" \u2014 "),qZ=a("a"),rDr=o("FlaxGPTNeoForCausalLM"),tDr=o(" (GPT Neo model)"),aDr=l(),p3=a("li"),WEe=a("strong"),nDr=o("gptj"),sDr=o(" \u2014 "),jZ=a("a"),lDr=o("FlaxGPTJForCausalLM"),iDr=o(" (GPT-J model)"),dDr=l(),_3=a("li"),HEe=a("strong"),cDr=o("opt"),fDr=o(" \u2014 "),DZ=a("a"),mDr=o("FlaxOPTForCausalLM"),gDr=o(" (OPT model)"),hDr=l(),u3=a("li"),UEe=a("strong"),pDr=o("roberta"),_Dr=o(" \u2014 "),GZ=a("a"),uDr=o("FlaxRobertaForCausalLM"),bDr=o(" (RoBERTa model)"),vDr=l(),b3=a("li"),JEe=a("strong"),FDr=o("xglm"),TDr=o(" \u2014 "),OZ=a("a"),MDr=o("FlaxXGLMForCausalLM"),EDr=o(" (XGLM model)"),CDr=l(),F(v3.$$.fragment),lXe=l(),Jc=a("h2"),F3=a("a"),YEe=a("span"),F(Yx.$$.fragment),wDr=l(),KEe=a("span"),ADr=o("FlaxAutoModelForPreTraining"),iXe=l(),_r=a("div"),F(Kx.$$.fragment),LDr=l(),Yc=a("p"),yDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VZ=a("a"),xDr=o("from_pretrained()"),$Dr=o(" class method or the "),XZ=a("a"),kDr=o("from_config()"),SDr=o(` class
method.`),RDr=l(),Zx=a("p"),PDr=o("This class cannot be instantiated directly using "),ZEe=a("code"),BDr=o("__init__()"),NDr=o(" (throws an error)."),IDr=l(),Wt=a("div"),F(e$.$$.fragment),qDr=l(),eCe=a("p"),jDr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DDr=l(),Kc=a("p"),GDr=o(`Note:
Loading a model from its configuration file does `),oCe=a("strong"),ODr=o("not"),VDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),XDr=o("from_pretrained()"),zDr=o(" to load the model weights."),QDr=l(),F(T3.$$.fragment),WDr=l(),Xr=a("div"),F(o$.$$.fragment),HDr=l(),rCe=a("p"),UDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JDr=l(),Mn=a("p"),YDr=o("The model class to instantiate is selected based on the "),tCe=a("code"),KDr=o("model_type"),ZDr=o(` property of the config object (either
passed as an argument or loaded from `),aCe=a("code"),eGr=o("pretrained_model_name_or_path"),oGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(":"),aGr=l(),Ee=a("ul"),M3=a("li"),sCe=a("strong"),nGr=o("albert"),sGr=o(" \u2014 "),QZ=a("a"),lGr=o("FlaxAlbertForPreTraining"),iGr=o(" (ALBERT model)"),dGr=l(),E3=a("li"),lCe=a("strong"),cGr=o("bart"),fGr=o(" \u2014 "),WZ=a("a"),mGr=o("FlaxBartForConditionalGeneration"),gGr=o(" (BART model)"),hGr=l(),C3=a("li"),iCe=a("strong"),pGr=o("bert"),_Gr=o(" \u2014 "),HZ=a("a"),uGr=o("FlaxBertForPreTraining"),bGr=o(" (BERT model)"),vGr=l(),w3=a("li"),dCe=a("strong"),FGr=o("big_bird"),TGr=o(" \u2014 "),UZ=a("a"),MGr=o("FlaxBigBirdForPreTraining"),EGr=o(" (BigBird model)"),CGr=l(),A3=a("li"),cCe=a("strong"),wGr=o("electra"),AGr=o(" \u2014 "),JZ=a("a"),LGr=o("FlaxElectraForPreTraining"),yGr=o(" (ELECTRA model)"),xGr=l(),L3=a("li"),fCe=a("strong"),$Gr=o("longt5"),kGr=o(" \u2014 "),YZ=a("a"),SGr=o("FlaxLongT5ForConditionalGeneration"),RGr=o(" (LongT5 model)"),PGr=l(),y3=a("li"),mCe=a("strong"),BGr=o("mbart"),NGr=o(" \u2014 "),KZ=a("a"),IGr=o("FlaxMBartForConditionalGeneration"),qGr=o(" (mBART model)"),jGr=l(),x3=a("li"),gCe=a("strong"),DGr=o("mt5"),GGr=o(" \u2014 "),ZZ=a("a"),OGr=o("FlaxMT5ForConditionalGeneration"),VGr=o(" (MT5 model)"),XGr=l(),$3=a("li"),hCe=a("strong"),zGr=o("roberta"),QGr=o(" \u2014 "),eee=a("a"),WGr=o("FlaxRobertaForMaskedLM"),HGr=o(" (RoBERTa model)"),UGr=l(),k3=a("li"),pCe=a("strong"),JGr=o("roformer"),YGr=o(" \u2014 "),oee=a("a"),KGr=o("FlaxRoFormerForMaskedLM"),ZGr=o(" (RoFormer model)"),eOr=l(),S3=a("li"),_Ce=a("strong"),oOr=o("t5"),rOr=o(" \u2014 "),ree=a("a"),tOr=o("FlaxT5ForConditionalGeneration"),aOr=o(" (T5 model)"),nOr=l(),R3=a("li"),uCe=a("strong"),sOr=o("wav2vec2"),lOr=o(" \u2014 "),tee=a("a"),iOr=o("FlaxWav2Vec2ForPreTraining"),dOr=o(" (Wav2Vec2 model)"),cOr=l(),P3=a("li"),bCe=a("strong"),fOr=o("xlm-roberta"),mOr=o(" \u2014 "),aee=a("a"),gOr=o("FlaxXLMRobertaForMaskedLM"),hOr=o(" (XLM-RoBERTa model)"),pOr=l(),F(B3.$$.fragment),dXe=l(),Zc=a("h2"),N3=a("a"),vCe=a("span"),F(r$.$$.fragment),_Or=l(),FCe=a("span"),uOr=o("FlaxAutoModelForMaskedLM"),cXe=l(),ur=a("div"),F(t$.$$.fragment),bOr=l(),ef=a("p"),vOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nee=a("a"),FOr=o("from_pretrained()"),TOr=o(" class method or the "),see=a("a"),MOr=o("from_config()"),EOr=o(` class
method.`),COr=l(),a$=a("p"),wOr=o("This class cannot be instantiated directly using "),TCe=a("code"),AOr=o("__init__()"),LOr=o(" (throws an error)."),yOr=l(),Ht=a("div"),F(n$.$$.fragment),xOr=l(),MCe=a("p"),$Or=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kOr=l(),of=a("p"),SOr=o(`Note:
Loading a model from its configuration file does `),ECe=a("strong"),ROr=o("not"),POr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=a("a"),BOr=o("from_pretrained()"),NOr=o(" to load the model weights."),IOr=l(),F(I3.$$.fragment),qOr=l(),zr=a("div"),F(s$.$$.fragment),jOr=l(),CCe=a("p"),DOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GOr=l(),En=a("p"),OOr=o("The model class to instantiate is selected based on the "),wCe=a("code"),VOr=o("model_type"),XOr=o(` property of the config object (either
passed as an argument or loaded from `),ACe=a("code"),zOr=o("pretrained_model_name_or_path"),QOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=a("code"),WOr=o("pretrained_model_name_or_path"),HOr=o(":"),UOr=l(),$e=a("ul"),q3=a("li"),yCe=a("strong"),JOr=o("albert"),YOr=o(" \u2014 "),iee=a("a"),KOr=o("FlaxAlbertForMaskedLM"),ZOr=o(" (ALBERT model)"),eVr=l(),j3=a("li"),xCe=a("strong"),oVr=o("bart"),rVr=o(" \u2014 "),dee=a("a"),tVr=o("FlaxBartForConditionalGeneration"),aVr=o(" (BART model)"),nVr=l(),D3=a("li"),$Ce=a("strong"),sVr=o("bert"),lVr=o(" \u2014 "),cee=a("a"),iVr=o("FlaxBertForMaskedLM"),dVr=o(" (BERT model)"),cVr=l(),G3=a("li"),kCe=a("strong"),fVr=o("big_bird"),mVr=o(" \u2014 "),fee=a("a"),gVr=o("FlaxBigBirdForMaskedLM"),hVr=o(" (BigBird model)"),pVr=l(),O3=a("li"),SCe=a("strong"),_Vr=o("distilbert"),uVr=o(" \u2014 "),mee=a("a"),bVr=o("FlaxDistilBertForMaskedLM"),vVr=o(" (DistilBERT model)"),FVr=l(),V3=a("li"),RCe=a("strong"),TVr=o("electra"),MVr=o(" \u2014 "),gee=a("a"),EVr=o("FlaxElectraForMaskedLM"),CVr=o(" (ELECTRA model)"),wVr=l(),X3=a("li"),PCe=a("strong"),AVr=o("mbart"),LVr=o(" \u2014 "),hee=a("a"),yVr=o("FlaxMBartForConditionalGeneration"),xVr=o(" (mBART model)"),$Vr=l(),z3=a("li"),BCe=a("strong"),kVr=o("roberta"),SVr=o(" \u2014 "),pee=a("a"),RVr=o("FlaxRobertaForMaskedLM"),PVr=o(" (RoBERTa model)"),BVr=l(),Q3=a("li"),NCe=a("strong"),NVr=o("roformer"),IVr=o(" \u2014 "),_ee=a("a"),qVr=o("FlaxRoFormerForMaskedLM"),jVr=o(" (RoFormer model)"),DVr=l(),W3=a("li"),ICe=a("strong"),GVr=o("xlm-roberta"),OVr=o(" \u2014 "),uee=a("a"),VVr=o("FlaxXLMRobertaForMaskedLM"),XVr=o(" (XLM-RoBERTa model)"),zVr=l(),F(H3.$$.fragment),fXe=l(),rf=a("h2"),U3=a("a"),qCe=a("span"),F(l$.$$.fragment),QVr=l(),jCe=a("span"),WVr=o("FlaxAutoModelForSeq2SeqLM"),mXe=l(),br=a("div"),F(i$.$$.fragment),HVr=l(),tf=a("p"),UVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bee=a("a"),JVr=o("from_pretrained()"),YVr=o(" class method or the "),vee=a("a"),KVr=o("from_config()"),ZVr=o(` class
method.`),eXr=l(),d$=a("p"),oXr=o("This class cannot be instantiated directly using "),DCe=a("code"),rXr=o("__init__()"),tXr=o(" (throws an error)."),aXr=l(),Ut=a("div"),F(c$.$$.fragment),nXr=l(),GCe=a("p"),sXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lXr=l(),af=a("p"),iXr=o(`Note:
Loading a model from its configuration file does `),OCe=a("strong"),dXr=o("not"),cXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("a"),fXr=o("from_pretrained()"),mXr=o(" to load the model weights."),gXr=l(),F(J3.$$.fragment),hXr=l(),Qr=a("div"),F(f$.$$.fragment),pXr=l(),VCe=a("p"),_Xr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uXr=l(),Cn=a("p"),bXr=o("The model class to instantiate is selected based on the "),XCe=a("code"),vXr=o("model_type"),FXr=o(` property of the config object (either
passed as an argument or loaded from `),zCe=a("code"),TXr=o("pretrained_model_name_or_path"),MXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=a("code"),EXr=o("pretrained_model_name_or_path"),CXr=o(":"),wXr=l(),ke=a("ul"),Y3=a("li"),WCe=a("strong"),AXr=o("bart"),LXr=o(" \u2014 "),Tee=a("a"),yXr=o("FlaxBartForConditionalGeneration"),xXr=o(" (BART model)"),$Xr=l(),K3=a("li"),HCe=a("strong"),kXr=o("blenderbot"),SXr=o(" \u2014 "),Mee=a("a"),RXr=o("FlaxBlenderbotForConditionalGeneration"),PXr=o(" (Blenderbot model)"),BXr=l(),Z3=a("li"),UCe=a("strong"),NXr=o("blenderbot-small"),IXr=o(" \u2014 "),Eee=a("a"),qXr=o("FlaxBlenderbotSmallForConditionalGeneration"),jXr=o(" (BlenderbotSmall model)"),DXr=l(),e0=a("li"),JCe=a("strong"),GXr=o("encoder-decoder"),OXr=o(" \u2014 "),Cee=a("a"),VXr=o("FlaxEncoderDecoderModel"),XXr=o(" (Encoder decoder model)"),zXr=l(),o0=a("li"),YCe=a("strong"),QXr=o("longt5"),WXr=o(" \u2014 "),wee=a("a"),HXr=o("FlaxLongT5ForConditionalGeneration"),UXr=o(" (LongT5 model)"),JXr=l(),r0=a("li"),KCe=a("strong"),YXr=o("marian"),KXr=o(" \u2014 "),Aee=a("a"),ZXr=o("FlaxMarianMTModel"),ezr=o(" (Marian model)"),ozr=l(),t0=a("li"),ZCe=a("strong"),rzr=o("mbart"),tzr=o(" \u2014 "),Lee=a("a"),azr=o("FlaxMBartForConditionalGeneration"),nzr=o(" (mBART model)"),szr=l(),a0=a("li"),e3e=a("strong"),lzr=o("mt5"),izr=o(" \u2014 "),yee=a("a"),dzr=o("FlaxMT5ForConditionalGeneration"),czr=o(" (MT5 model)"),fzr=l(),n0=a("li"),o3e=a("strong"),mzr=o("pegasus"),gzr=o(" \u2014 "),xee=a("a"),hzr=o("FlaxPegasusForConditionalGeneration"),pzr=o(" (Pegasus model)"),_zr=l(),s0=a("li"),r3e=a("strong"),uzr=o("t5"),bzr=o(" \u2014 "),$ee=a("a"),vzr=o("FlaxT5ForConditionalGeneration"),Fzr=o(" (T5 model)"),Tzr=l(),F(l0.$$.fragment),gXe=l(),nf=a("h2"),i0=a("a"),t3e=a("span"),F(m$.$$.fragment),Mzr=l(),a3e=a("span"),Ezr=o("FlaxAutoModelForSequenceClassification"),hXe=l(),vr=a("div"),F(g$.$$.fragment),Czr=l(),sf=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kee=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),See=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),h$=a("p"),kzr=o("This class cannot be instantiated directly using "),n3e=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Jt=a("div"),F(p$.$$.fragment),Bzr=l(),s3e=a("p"),Nzr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Izr=l(),lf=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(d0.$$.fragment),Xzr=l(),Wr=a("div"),F(_$.$$.fragment),zzr=l(),i3e=a("p"),Qzr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wzr=l(),wn=a("p"),Hzr=o("The model class to instantiate is selected based on the "),d3e=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),Zzr=o("pretrained_model_name_or_path"),eQr=o(":"),oQr=l(),Se=a("ul"),c0=a("li"),m3e=a("strong"),rQr=o("albert"),tQr=o(" \u2014 "),Pee=a("a"),aQr=o("FlaxAlbertForSequenceClassification"),nQr=o(" (ALBERT model)"),sQr=l(),f0=a("li"),g3e=a("strong"),lQr=o("bart"),iQr=o(" \u2014 "),Bee=a("a"),dQr=o("FlaxBartForSequenceClassification"),cQr=o(" (BART model)"),fQr=l(),m0=a("li"),h3e=a("strong"),mQr=o("bert"),gQr=o(" \u2014 "),Nee=a("a"),hQr=o("FlaxBertForSequenceClassification"),pQr=o(" (BERT model)"),_Qr=l(),g0=a("li"),p3e=a("strong"),uQr=o("big_bird"),bQr=o(" \u2014 "),Iee=a("a"),vQr=o("FlaxBigBirdForSequenceClassification"),FQr=o(" (BigBird model)"),TQr=l(),h0=a("li"),_3e=a("strong"),MQr=o("distilbert"),EQr=o(" \u2014 "),qee=a("a"),CQr=o("FlaxDistilBertForSequenceClassification"),wQr=o(" (DistilBERT model)"),AQr=l(),p0=a("li"),u3e=a("strong"),LQr=o("electra"),yQr=o(" \u2014 "),jee=a("a"),xQr=o("FlaxElectraForSequenceClassification"),$Qr=o(" (ELECTRA model)"),kQr=l(),_0=a("li"),b3e=a("strong"),SQr=o("mbart"),RQr=o(" \u2014 "),Dee=a("a"),PQr=o("FlaxMBartForSequenceClassification"),BQr=o(" (mBART model)"),NQr=l(),u0=a("li"),v3e=a("strong"),IQr=o("roberta"),qQr=o(" \u2014 "),Gee=a("a"),jQr=o("FlaxRobertaForSequenceClassification"),DQr=o(" (RoBERTa model)"),GQr=l(),b0=a("li"),F3e=a("strong"),OQr=o("roformer"),VQr=o(" \u2014 "),Oee=a("a"),XQr=o("FlaxRoFormerForSequenceClassification"),zQr=o(" (RoFormer model)"),QQr=l(),v0=a("li"),T3e=a("strong"),WQr=o("xlm-roberta"),HQr=o(" \u2014 "),Vee=a("a"),UQr=o("FlaxXLMRobertaForSequenceClassification"),JQr=o(" (XLM-RoBERTa model)"),YQr=l(),F(F0.$$.fragment),pXe=l(),df=a("h2"),T0=a("a"),M3e=a("span"),F(u$.$$.fragment),KQr=l(),E3e=a("span"),ZQr=o("FlaxAutoModelForQuestionAnswering"),_Xe=l(),Fr=a("div"),F(b$.$$.fragment),eWr=l(),cf=a("p"),oWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xee=a("a"),rWr=o("from_pretrained()"),tWr=o(" class method or the "),zee=a("a"),aWr=o("from_config()"),nWr=o(` class
method.`),sWr=l(),v$=a("p"),lWr=o("This class cannot be instantiated directly using "),C3e=a("code"),iWr=o("__init__()"),dWr=o(" (throws an error)."),cWr=l(),Yt=a("div"),F(F$.$$.fragment),fWr=l(),w3e=a("p"),mWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gWr=l(),ff=a("p"),hWr=o(`Note:
Loading a model from its configuration file does `),A3e=a("strong"),pWr=o("not"),_Wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),uWr=o("from_pretrained()"),bWr=o(" to load the model weights."),vWr=l(),F(M0.$$.fragment),FWr=l(),Hr=a("div"),F(T$.$$.fragment),TWr=l(),L3e=a("p"),MWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EWr=l(),An=a("p"),CWr=o("The model class to instantiate is selected based on the "),y3e=a("code"),wWr=o("model_type"),AWr=o(` property of the config object (either
passed as an argument or loaded from `),x3e=a("code"),LWr=o("pretrained_model_name_or_path"),yWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),xWr=o("pretrained_model_name_or_path"),$Wr=o(":"),kWr=l(),Re=a("ul"),E0=a("li"),k3e=a("strong"),SWr=o("albert"),RWr=o(" \u2014 "),Wee=a("a"),PWr=o("FlaxAlbertForQuestionAnswering"),BWr=o(" (ALBERT model)"),NWr=l(),C0=a("li"),S3e=a("strong"),IWr=o("bart"),qWr=o(" \u2014 "),Hee=a("a"),jWr=o("FlaxBartForQuestionAnswering"),DWr=o(" (BART model)"),GWr=l(),w0=a("li"),R3e=a("strong"),OWr=o("bert"),VWr=o(" \u2014 "),Uee=a("a"),XWr=o("FlaxBertForQuestionAnswering"),zWr=o(" (BERT model)"),QWr=l(),A0=a("li"),P3e=a("strong"),WWr=o("big_bird"),HWr=o(" \u2014 "),Jee=a("a"),UWr=o("FlaxBigBirdForQuestionAnswering"),JWr=o(" (BigBird model)"),YWr=l(),L0=a("li"),B3e=a("strong"),KWr=o("distilbert"),ZWr=o(" \u2014 "),Yee=a("a"),eHr=o("FlaxDistilBertForQuestionAnswering"),oHr=o(" (DistilBERT model)"),rHr=l(),y0=a("li"),N3e=a("strong"),tHr=o("electra"),aHr=o(" \u2014 "),Kee=a("a"),nHr=o("FlaxElectraForQuestionAnswering"),sHr=o(" (ELECTRA model)"),lHr=l(),x0=a("li"),I3e=a("strong"),iHr=o("mbart"),dHr=o(" \u2014 "),Zee=a("a"),cHr=o("FlaxMBartForQuestionAnswering"),fHr=o(" (mBART model)"),mHr=l(),$0=a("li"),q3e=a("strong"),gHr=o("roberta"),hHr=o(" \u2014 "),eoe=a("a"),pHr=o("FlaxRobertaForQuestionAnswering"),_Hr=o(" (RoBERTa model)"),uHr=l(),k0=a("li"),j3e=a("strong"),bHr=o("roformer"),vHr=o(" \u2014 "),ooe=a("a"),FHr=o("FlaxRoFormerForQuestionAnswering"),THr=o(" (RoFormer model)"),MHr=l(),S0=a("li"),D3e=a("strong"),EHr=o("xlm-roberta"),CHr=o(" \u2014 "),roe=a("a"),wHr=o("FlaxXLMRobertaForQuestionAnswering"),AHr=o(" (XLM-RoBERTa model)"),LHr=l(),F(R0.$$.fragment),uXe=l(),mf=a("h2"),P0=a("a"),G3e=a("span"),F(M$.$$.fragment),yHr=l(),O3e=a("span"),xHr=o("FlaxAutoModelForTokenClassification"),bXe=l(),Tr=a("div"),F(E$.$$.fragment),$Hr=l(),gf=a("p"),kHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),toe=a("a"),SHr=o("from_pretrained()"),RHr=o(" class method or the "),aoe=a("a"),PHr=o("from_config()"),BHr=o(` class
method.`),NHr=l(),C$=a("p"),IHr=o("This class cannot be instantiated directly using "),V3e=a("code"),qHr=o("__init__()"),jHr=o(" (throws an error)."),DHr=l(),Kt=a("div"),F(w$.$$.fragment),GHr=l(),X3e=a("p"),OHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VHr=l(),hf=a("p"),XHr=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),zHr=o("not"),QHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),WHr=o("from_pretrained()"),HHr=o(" to load the model weights."),UHr=l(),F(B0.$$.fragment),JHr=l(),Ur=a("div"),F(A$.$$.fragment),YHr=l(),Q3e=a("p"),KHr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZHr=l(),Ln=a("p"),eUr=o("The model class to instantiate is selected based on the "),W3e=a("code"),oUr=o("model_type"),rUr=o(` property of the config object (either
passed as an argument or loaded from `),H3e=a("code"),tUr=o("pretrained_model_name_or_path"),aUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=a("code"),nUr=o("pretrained_model_name_or_path"),sUr=o(":"),lUr=l(),Ve=a("ul"),N0=a("li"),J3e=a("strong"),iUr=o("albert"),dUr=o(" \u2014 "),soe=a("a"),cUr=o("FlaxAlbertForTokenClassification"),fUr=o(" (ALBERT model)"),mUr=l(),I0=a("li"),Y3e=a("strong"),gUr=o("bert"),hUr=o(" \u2014 "),loe=a("a"),pUr=o("FlaxBertForTokenClassification"),_Ur=o(" (BERT model)"),uUr=l(),q0=a("li"),K3e=a("strong"),bUr=o("big_bird"),vUr=o(" \u2014 "),ioe=a("a"),FUr=o("FlaxBigBirdForTokenClassification"),TUr=o(" (BigBird model)"),MUr=l(),j0=a("li"),Z3e=a("strong"),EUr=o("distilbert"),CUr=o(" \u2014 "),doe=a("a"),wUr=o("FlaxDistilBertForTokenClassification"),AUr=o(" (DistilBERT model)"),LUr=l(),D0=a("li"),e0e=a("strong"),yUr=o("electra"),xUr=o(" \u2014 "),coe=a("a"),$Ur=o("FlaxElectraForTokenClassification"),kUr=o(" (ELECTRA model)"),SUr=l(),G0=a("li"),o0e=a("strong"),RUr=o("roberta"),PUr=o(" \u2014 "),foe=a("a"),BUr=o("FlaxRobertaForTokenClassification"),NUr=o(" (RoBERTa model)"),IUr=l(),O0=a("li"),r0e=a("strong"),qUr=o("roformer"),jUr=o(" \u2014 "),moe=a("a"),DUr=o("FlaxRoFormerForTokenClassification"),GUr=o(" (RoFormer model)"),OUr=l(),V0=a("li"),t0e=a("strong"),VUr=o("xlm-roberta"),XUr=o(" \u2014 "),goe=a("a"),zUr=o("FlaxXLMRobertaForTokenClassification"),QUr=o(" (XLM-RoBERTa model)"),WUr=l(),F(X0.$$.fragment),vXe=l(),pf=a("h2"),z0=a("a"),a0e=a("span"),F(L$.$$.fragment),HUr=l(),n0e=a("span"),UUr=o("FlaxAutoModelForMultipleChoice"),FXe=l(),Mr=a("div"),F(y$.$$.fragment),JUr=l(),_f=a("p"),YUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hoe=a("a"),KUr=o("from_pretrained()"),ZUr=o(" class method or the "),poe=a("a"),eJr=o("from_config()"),oJr=o(` class
method.`),rJr=l(),x$=a("p"),tJr=o("This class cannot be instantiated directly using "),s0e=a("code"),aJr=o("__init__()"),nJr=o(" (throws an error)."),sJr=l(),Zt=a("div"),F($$.$$.fragment),lJr=l(),l0e=a("p"),iJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dJr=l(),uf=a("p"),cJr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),fJr=o("not"),mJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("a"),gJr=o("from_pretrained()"),hJr=o(" to load the model weights."),pJr=l(),F(Q0.$$.fragment),_Jr=l(),Jr=a("div"),F(k$.$$.fragment),uJr=l(),d0e=a("p"),bJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vJr=l(),yn=a("p"),FJr=o("The model class to instantiate is selected based on the "),c0e=a("code"),TJr=o("model_type"),MJr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),EJr=o("pretrained_model_name_or_path"),CJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),wJr=o("pretrained_model_name_or_path"),AJr=o(":"),LJr=l(),Xe=a("ul"),W0=a("li"),g0e=a("strong"),yJr=o("albert"),xJr=o(" \u2014 "),uoe=a("a"),$Jr=o("FlaxAlbertForMultipleChoice"),kJr=o(" (ALBERT model)"),SJr=l(),H0=a("li"),h0e=a("strong"),RJr=o("bert"),PJr=o(" \u2014 "),boe=a("a"),BJr=o("FlaxBertForMultipleChoice"),NJr=o(" (BERT model)"),IJr=l(),U0=a("li"),p0e=a("strong"),qJr=o("big_bird"),jJr=o(" \u2014 "),voe=a("a"),DJr=o("FlaxBigBirdForMultipleChoice"),GJr=o(" (BigBird model)"),OJr=l(),J0=a("li"),_0e=a("strong"),VJr=o("distilbert"),XJr=o(" \u2014 "),Foe=a("a"),zJr=o("FlaxDistilBertForMultipleChoice"),QJr=o(" (DistilBERT model)"),WJr=l(),Y0=a("li"),u0e=a("strong"),HJr=o("electra"),UJr=o(" \u2014 "),Toe=a("a"),JJr=o("FlaxElectraForMultipleChoice"),YJr=o(" (ELECTRA model)"),KJr=l(),K0=a("li"),b0e=a("strong"),ZJr=o("roberta"),eYr=o(" \u2014 "),Moe=a("a"),oYr=o("FlaxRobertaForMultipleChoice"),rYr=o(" (RoBERTa model)"),tYr=l(),Z0=a("li"),v0e=a("strong"),aYr=o("roformer"),nYr=o(" \u2014 "),Eoe=a("a"),sYr=o("FlaxRoFormerForMultipleChoice"),lYr=o(" (RoFormer model)"),iYr=l(),ew=a("li"),F0e=a("strong"),dYr=o("xlm-roberta"),cYr=o(" \u2014 "),Coe=a("a"),fYr=o("FlaxXLMRobertaForMultipleChoice"),mYr=o(" (XLM-RoBERTa model)"),gYr=l(),F(ow.$$.fragment),TXe=l(),bf=a("h2"),rw=a("a"),T0e=a("span"),F(S$.$$.fragment),hYr=l(),M0e=a("span"),pYr=o("FlaxAutoModelForNextSentencePrediction"),MXe=l(),Er=a("div"),F(R$.$$.fragment),_Yr=l(),vf=a("p"),uYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),woe=a("a"),bYr=o("from_pretrained()"),vYr=o(" class method or the "),Aoe=a("a"),FYr=o("from_config()"),TYr=o(` class
method.`),MYr=l(),P$=a("p"),EYr=o("This class cannot be instantiated directly using "),E0e=a("code"),CYr=o("__init__()"),wYr=o(" (throws an error)."),AYr=l(),ea=a("div"),F(B$.$$.fragment),LYr=l(),C0e=a("p"),yYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xYr=l(),Ff=a("p"),$Yr=o(`Note:
Loading a model from its configuration file does `),w0e=a("strong"),kYr=o("not"),SYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=a("a"),RYr=o("from_pretrained()"),PYr=o(" to load the model weights."),BYr=l(),F(tw.$$.fragment),NYr=l(),Yr=a("div"),F(N$.$$.fragment),IYr=l(),A0e=a("p"),qYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jYr=l(),xn=a("p"),DYr=o("The model class to instantiate is selected based on the "),L0e=a("code"),GYr=o("model_type"),OYr=o(` property of the config object (either
passed as an argument or loaded from `),y0e=a("code"),VYr=o("pretrained_model_name_or_path"),XYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=a("code"),zYr=o("pretrained_model_name_or_path"),QYr=o(":"),WYr=l(),$0e=a("ul"),aw=a("li"),k0e=a("strong"),HYr=o("bert"),UYr=o(" \u2014 "),yoe=a("a"),JYr=o("FlaxBertForNextSentencePrediction"),YYr=o(" (BERT model)"),KYr=l(),F(nw.$$.fragment),EXe=l(),Tf=a("h2"),sw=a("a"),S0e=a("span"),F(I$.$$.fragment),ZYr=l(),R0e=a("span"),eKr=o("FlaxAutoModelForImageClassification"),CXe=l(),Cr=a("div"),F(q$.$$.fragment),oKr=l(),Mf=a("p"),rKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xoe=a("a"),tKr=o("from_pretrained()"),aKr=o(" class method or the "),$oe=a("a"),nKr=o("from_config()"),sKr=o(` class
method.`),lKr=l(),j$=a("p"),iKr=o("This class cannot be instantiated directly using "),P0e=a("code"),dKr=o("__init__()"),cKr=o(" (throws an error)."),fKr=l(),oa=a("div"),F(D$.$$.fragment),mKr=l(),B0e=a("p"),gKr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hKr=l(),Ef=a("p"),pKr=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),_Kr=o("not"),uKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("a"),bKr=o("from_pretrained()"),vKr=o(" to load the model weights."),FKr=l(),F(lw.$$.fragment),TKr=l(),Kr=a("div"),F(G$.$$.fragment),MKr=l(),I0e=a("p"),EKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CKr=l(),$n=a("p"),wKr=o("The model class to instantiate is selected based on the "),q0e=a("code"),AKr=o("model_type"),LKr=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),yKr=o("pretrained_model_name_or_path"),xKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),$Kr=o("pretrained_model_name_or_path"),kKr=o(":"),SKr=l(),O$=a("ul"),iw=a("li"),G0e=a("strong"),RKr=o("beit"),PKr=o(" \u2014 "),Soe=a("a"),BKr=o("FlaxBeitForImageClassification"),NKr=o(" (BEiT model)"),IKr=l(),dw=a("li"),O0e=a("strong"),qKr=o("vit"),jKr=o(" \u2014 "),Roe=a("a"),DKr=o("FlaxViTForImageClassification"),GKr=o(" (ViT model)"),OKr=l(),F(cw.$$.fragment),wXe=l(),Cf=a("h2"),fw=a("a"),V0e=a("span"),F(V$.$$.fragment),VKr=l(),X0e=a("span"),XKr=o("FlaxAutoModelForVision2Seq"),AXe=l(),wr=a("div"),F(X$.$$.fragment),zKr=l(),wf=a("p"),QKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Poe=a("a"),WKr=o("from_pretrained()"),HKr=o(" class method or the "),Boe=a("a"),UKr=o("from_config()"),JKr=o(` class
method.`),YKr=l(),z$=a("p"),KKr=o("This class cannot be instantiated directly using "),z0e=a("code"),ZKr=o("__init__()"),eZr=o(" (throws an error)."),oZr=l(),ra=a("div"),F(Q$.$$.fragment),rZr=l(),Q0e=a("p"),tZr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aZr=l(),Af=a("p"),nZr=o(`Note:
Loading a model from its configuration file does `),W0e=a("strong"),sZr=o("not"),lZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),iZr=o("from_pretrained()"),dZr=o(" to load the model weights."),cZr=l(),F(mw.$$.fragment),fZr=l(),Zr=a("div"),F(W$.$$.fragment),mZr=l(),H0e=a("p"),gZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hZr=l(),kn=a("p"),pZr=o("The model class to instantiate is selected based on the "),U0e=a("code"),_Zr=o("model_type"),uZr=o(` property of the config object (either
passed as an argument or loaded from `),J0e=a("code"),bZr=o("pretrained_model_name_or_path"),vZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=a("code"),FZr=o("pretrained_model_name_or_path"),TZr=o(":"),MZr=l(),K0e=a("ul"),gw=a("li"),Z0e=a("strong"),EZr=o("vision-encoder-decoder"),CZr=o(" \u2014 "),Ioe=a("a"),wZr=o("FlaxVisionEncoderDecoderModel"),AZr=o(" (Vision Encoder decoder model)"),LZr=l(),F(hw.$$.fragment),this.h()},l(f){const u=uOt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var H$=s(p);m=n(H$,"A",{id:!0,class:!0,href:!0});var ewe=s(m);_=n(ewe,"SPAN",{});var owe=s(_);T(d.$$.fragment,owe),owe.forEach(t),ewe.forEach(t),h=i(H$),Eo=n(H$,"SPAN",{});var rwe=s(Eo);Ei=r(rwe,"Auto Classes"),rwe.forEach(t),H$.forEach(t),$f=i(f),nt=n(f,"P",{});var U$=s(nt);Ci=r(U$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=n(U$,"CODE",{});var twe=s(wi);P6=r(twe,"from_pretrained()"),twe.forEach(t),kf=r(U$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),U$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);Ai=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var awe=s(Rn);B6=r(awe,"AutoConfig"),awe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var nwe=s(Bn);N6=r(nwe,"AutoModel"),nwe.forEach(t),Li=r(Sn,`, and
`),Nn=n(Sn,"A",{href:!0});var swe=s(Nn);I6=r(swe,"AutoTokenizer"),swe.forEach(t),yi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Sf=i(f),T($a.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var J$=s(Ae);mS=r(J$,"will create a model that is an instance of "),xi=n(J$,"A",{href:!0});var lwe=s(xi);gS=r(lwe,"BertModel"),lwe.forEach(t),hS=r(J$,"."),J$.forEach(t),Co=i(f),ka=n(f,"P",{});var Y$=s(ka);pS=r(Y$,"There is one class of "),Rf=n(Y$,"CODE",{});var iwe=s(Rf);_S=r(iwe,"AutoModel"),iwe.forEach(t),IQe=r(Y$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Y$.forEach(t),MOe=i(f),$i=n(f,"H2",{class:!0});var K$=s($i);Pf=n(K$,"A",{id:!0,class:!0,href:!0});var dwe=s(Pf);Ste=n(dwe,"SPAN",{});var cwe=s(Ste);T(q6.$$.fragment,cwe),cwe.forEach(t),dwe.forEach(t),qQe=i(K$),Rte=n(K$,"SPAN",{});var fwe=s(Rte);jQe=r(fwe,"Extending the Auto Classes"),fwe.forEach(t),K$.forEach(t),EOe=i(f),In=n(f,"P",{});var Lf=s(In);DQe=r(Lf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pte=n(Lf,"CODE",{});var mwe=s(Pte);GQe=r(mwe,"NewModel"),mwe.forEach(t),OQe=r(Lf,", make sure you have a "),Bte=n(Lf,"CODE",{});var gwe=s(Bte);VQe=r(gwe,"NewModelConfig"),gwe.forEach(t),XQe=r(Lf,` then you can add those to the auto
classes like this:`),Lf.forEach(t),COe=i(f),T(j6.$$.fragment,f),wOe=i(f),uS=n(f,"P",{});var hwe=s(uS);zQe=r(hwe,"You will then be able to use the auto classes like you would usually do!"),hwe.forEach(t),AOe=i(f),T(Bf.$$.fragment,f),LOe=i(f),ki=n(f,"H2",{class:!0});var Z$=s(ki);Nf=n(Z$,"A",{id:!0,class:!0,href:!0});var pwe=s(Nf);Nte=n(pwe,"SPAN",{});var _we=s(Nte);T(D6.$$.fragment,_we),_we.forEach(t),pwe.forEach(t),QQe=i(Z$),Ite=n(Z$,"SPAN",{});var uwe=s(Ite);WQe=r(uwe,"AutoConfig"),uwe.forEach(t),Z$.forEach(t),yOe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(G6.$$.fragment,tt),HQe=i(tt),O6=n(tt,"P",{});var ek=s(O6);UQe=r(ek,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bS=n(ek,"A",{href:!0});var bwe=s(bS);JQe=r(bwe,"from_pretrained()"),bwe.forEach(t),YQe=r(ek," class method."),ek.forEach(t),KQe=i(tt),V6=n(tt,"P",{});var ok=s(V6);ZQe=r(ok,"This class cannot be instantiated directly using "),qte=n(ok,"CODE",{});var vwe=s(qte);eWe=r(vwe,"__init__()"),vwe.forEach(t),oWe=r(ok," (throws an error)."),ok.forEach(t),rWe=i(tt),Ar=n(tt,"DIV",{class:!0});var at=s(Ar);T(X6.$$.fragment,at),tWe=i(at),jte=n(at,"P",{});var Fwe=s(jte);aWe=r(Fwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Fwe.forEach(t),nWe=i(at),Si=n(at,"P",{});var yf=s(Si);sWe=r(yf,"The configuration class to instantiate is selected based on the "),Dte=n(yf,"CODE",{});var Twe=s(Dte);lWe=r(Twe,"model_type"),Twe.forEach(t),iWe=r(yf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gte=n(yf,"CODE",{});var Mwe=s(Gte);dWe=r(Mwe,"pretrained_model_name_or_path"),Mwe.forEach(t),cWe=r(yf,":"),yf.forEach(t),fWe=i(at),A=n(at,"UL",{});var L=s(A);If=n(L,"LI",{});var pw=s(If);Ote=n(pw,"STRONG",{});var Ewe=s(Ote);mWe=r(Ewe,"albert"),Ewe.forEach(t),gWe=r(pw," \u2014 "),vS=n(pw,"A",{href:!0});var Cwe=s(vS);hWe=r(Cwe,"AlbertConfig"),Cwe.forEach(t),pWe=r(pw," (ALBERT model)"),pw.forEach(t),_We=i(L),qf=n(L,"LI",{});var _w=s(qf);Vte=n(_w,"STRONG",{});var wwe=s(Vte);uWe=r(wwe,"bart"),wwe.forEach(t),bWe=r(_w," \u2014 "),FS=n(_w,"A",{href:!0});var Awe=s(FS);vWe=r(Awe,"BartConfig"),Awe.forEach(t),FWe=r(_w," (BART model)"),_w.forEach(t),TWe=i(L),jf=n(L,"LI",{});var uw=s(jf);Xte=n(uw,"STRONG",{});var Lwe=s(Xte);MWe=r(Lwe,"beit"),Lwe.forEach(t),EWe=r(uw," \u2014 "),TS=n(uw,"A",{href:!0});var ywe=s(TS);CWe=r(ywe,"BeitConfig"),ywe.forEach(t),wWe=r(uw," (BEiT model)"),uw.forEach(t),AWe=i(L),Df=n(L,"LI",{});var bw=s(Df);zte=n(bw,"STRONG",{});var xwe=s(zte);LWe=r(xwe,"bert"),xwe.forEach(t),yWe=r(bw," \u2014 "),MS=n(bw,"A",{href:!0});var $we=s(MS);xWe=r($we,"BertConfig"),$we.forEach(t),$We=r(bw," (BERT model)"),bw.forEach(t),kWe=i(L),Gf=n(L,"LI",{});var vw=s(Gf);Qte=n(vw,"STRONG",{});var kwe=s(Qte);SWe=r(kwe,"bert-generation"),kwe.forEach(t),RWe=r(vw," \u2014 "),ES=n(vw,"A",{href:!0});var Swe=s(ES);PWe=r(Swe,"BertGenerationConfig"),Swe.forEach(t),BWe=r(vw," (Bert Generation model)"),vw.forEach(t),NWe=i(L),Of=n(L,"LI",{});var Fw=s(Of);Wte=n(Fw,"STRONG",{});var Rwe=s(Wte);IWe=r(Rwe,"big_bird"),Rwe.forEach(t),qWe=r(Fw," \u2014 "),CS=n(Fw,"A",{href:!0});var Pwe=s(CS);jWe=r(Pwe,"BigBirdConfig"),Pwe.forEach(t),DWe=r(Fw," (BigBird model)"),Fw.forEach(t),GWe=i(L),Vf=n(L,"LI",{});var Tw=s(Vf);Hte=n(Tw,"STRONG",{});var Bwe=s(Hte);OWe=r(Bwe,"bigbird_pegasus"),Bwe.forEach(t),VWe=r(Tw," \u2014 "),wS=n(Tw,"A",{href:!0});var Nwe=s(wS);XWe=r(Nwe,"BigBirdPegasusConfig"),Nwe.forEach(t),zWe=r(Tw," (BigBird-Pegasus model)"),Tw.forEach(t),QWe=i(L),Xf=n(L,"LI",{});var Mw=s(Xf);Ute=n(Mw,"STRONG",{});var Iwe=s(Ute);WWe=r(Iwe,"blenderbot"),Iwe.forEach(t),HWe=r(Mw," \u2014 "),AS=n(Mw,"A",{href:!0});var qwe=s(AS);UWe=r(qwe,"BlenderbotConfig"),qwe.forEach(t),JWe=r(Mw," (Blenderbot model)"),Mw.forEach(t),YWe=i(L),zf=n(L,"LI",{});var Ew=s(zf);Jte=n(Ew,"STRONG",{});var jwe=s(Jte);KWe=r(jwe,"blenderbot-small"),jwe.forEach(t),ZWe=r(Ew," \u2014 "),LS=n(Ew,"A",{href:!0});var Dwe=s(LS);eHe=r(Dwe,"BlenderbotSmallConfig"),Dwe.forEach(t),oHe=r(Ew," (BlenderbotSmall model)"),Ew.forEach(t),rHe=i(L),Qf=n(L,"LI",{});var Cw=s(Qf);Yte=n(Cw,"STRONG",{});var Gwe=s(Yte);tHe=r(Gwe,"bloom"),Gwe.forEach(t),aHe=r(Cw," \u2014 "),yS=n(Cw,"A",{href:!0});var Owe=s(yS);nHe=r(Owe,"BloomConfig"),Owe.forEach(t),sHe=r(Cw," (BLOOM model)"),Cw.forEach(t),lHe=i(L),Wf=n(L,"LI",{});var ww=s(Wf);Kte=n(ww,"STRONG",{});var Vwe=s(Kte);iHe=r(Vwe,"camembert"),Vwe.forEach(t),dHe=r(ww," \u2014 "),xS=n(ww,"A",{href:!0});var Xwe=s(xS);cHe=r(Xwe,"CamembertConfig"),Xwe.forEach(t),fHe=r(ww," (CamemBERT model)"),ww.forEach(t),mHe=i(L),Hf=n(L,"LI",{});var Aw=s(Hf);Zte=n(Aw,"STRONG",{});var zwe=s(Zte);gHe=r(zwe,"canine"),zwe.forEach(t),hHe=r(Aw," \u2014 "),$S=n(Aw,"A",{href:!0});var Qwe=s($S);pHe=r(Qwe,"CanineConfig"),Qwe.forEach(t),_He=r(Aw," (CANINE model)"),Aw.forEach(t),uHe=i(L),Uf=n(L,"LI",{});var Lw=s(Uf);eae=n(Lw,"STRONG",{});var Wwe=s(eae);bHe=r(Wwe,"clip"),Wwe.forEach(t),vHe=r(Lw," \u2014 "),kS=n(Lw,"A",{href:!0});var Hwe=s(kS);FHe=r(Hwe,"CLIPConfig"),Hwe.forEach(t),THe=r(Lw," (CLIP model)"),Lw.forEach(t),MHe=i(L),Jf=n(L,"LI",{});var yw=s(Jf);oae=n(yw,"STRONG",{});var Uwe=s(oae);EHe=r(Uwe,"codegen"),Uwe.forEach(t),CHe=r(yw," \u2014 "),SS=n(yw,"A",{href:!0});var Jwe=s(SS);wHe=r(Jwe,"CodeGenConfig"),Jwe.forEach(t),AHe=r(yw," (CodeGen model)"),yw.forEach(t),LHe=i(L),Yf=n(L,"LI",{});var xw=s(Yf);rae=n(xw,"STRONG",{});var Ywe=s(rae);yHe=r(Ywe,"convbert"),Ywe.forEach(t),xHe=r(xw," \u2014 "),RS=n(xw,"A",{href:!0});var Kwe=s(RS);$He=r(Kwe,"ConvBertConfig"),Kwe.forEach(t),kHe=r(xw," (ConvBERT model)"),xw.forEach(t),SHe=i(L),Kf=n(L,"LI",{});var $w=s(Kf);tae=n($w,"STRONG",{});var Zwe=s(tae);RHe=r(Zwe,"convnext"),Zwe.forEach(t),PHe=r($w," \u2014 "),PS=n($w,"A",{href:!0});var eAe=s(PS);BHe=r(eAe,"ConvNextConfig"),eAe.forEach(t),NHe=r($w," (ConvNeXT model)"),$w.forEach(t),IHe=i(L),Zf=n(L,"LI",{});var kw=s(Zf);aae=n(kw,"STRONG",{});var oAe=s(aae);qHe=r(oAe,"ctrl"),oAe.forEach(t),jHe=r(kw," \u2014 "),BS=n(kw,"A",{href:!0});var rAe=s(BS);DHe=r(rAe,"CTRLConfig"),rAe.forEach(t),GHe=r(kw," (CTRL model)"),kw.forEach(t),OHe=i(L),em=n(L,"LI",{});var Sw=s(em);nae=n(Sw,"STRONG",{});var tAe=s(nae);VHe=r(tAe,"cvt"),tAe.forEach(t),XHe=r(Sw," \u2014 "),NS=n(Sw,"A",{href:!0});var aAe=s(NS);zHe=r(aAe,"CvtConfig"),aAe.forEach(t),QHe=r(Sw," (CvT model)"),Sw.forEach(t),WHe=i(L),om=n(L,"LI",{});var Rw=s(om);sae=n(Rw,"STRONG",{});var nAe=s(sae);HHe=r(nAe,"data2vec-audio"),nAe.forEach(t),UHe=r(Rw," \u2014 "),IS=n(Rw,"A",{href:!0});var sAe=s(IS);JHe=r(sAe,"Data2VecAudioConfig"),sAe.forEach(t),YHe=r(Rw," (Data2VecAudio model)"),Rw.forEach(t),KHe=i(L),rm=n(L,"LI",{});var Pw=s(rm);lae=n(Pw,"STRONG",{});var lAe=s(lae);ZHe=r(lAe,"data2vec-text"),lAe.forEach(t),eUe=r(Pw," \u2014 "),qS=n(Pw,"A",{href:!0});var iAe=s(qS);oUe=r(iAe,"Data2VecTextConfig"),iAe.forEach(t),rUe=r(Pw," (Data2VecText model)"),Pw.forEach(t),tUe=i(L),tm=n(L,"LI",{});var Bw=s(tm);iae=n(Bw,"STRONG",{});var dAe=s(iae);aUe=r(dAe,"data2vec-vision"),dAe.forEach(t),nUe=r(Bw," \u2014 "),jS=n(Bw,"A",{href:!0});var cAe=s(jS);sUe=r(cAe,"Data2VecVisionConfig"),cAe.forEach(t),lUe=r(Bw," (Data2VecVision model)"),Bw.forEach(t),iUe=i(L),am=n(L,"LI",{});var Nw=s(am);dae=n(Nw,"STRONG",{});var fAe=s(dae);dUe=r(fAe,"deberta"),fAe.forEach(t),cUe=r(Nw," \u2014 "),DS=n(Nw,"A",{href:!0});var mAe=s(DS);fUe=r(mAe,"DebertaConfig"),mAe.forEach(t),mUe=r(Nw," (DeBERTa model)"),Nw.forEach(t),gUe=i(L),nm=n(L,"LI",{});var Iw=s(nm);cae=n(Iw,"STRONG",{});var gAe=s(cae);hUe=r(gAe,"deberta-v2"),gAe.forEach(t),pUe=r(Iw," \u2014 "),GS=n(Iw,"A",{href:!0});var hAe=s(GS);_Ue=r(hAe,"DebertaV2Config"),hAe.forEach(t),uUe=r(Iw," (DeBERTa-v2 model)"),Iw.forEach(t),bUe=i(L),sm=n(L,"LI",{});var qw=s(sm);fae=n(qw,"STRONG",{});var xZr=s(fae);vUe=r(xZr,"decision_transformer"),xZr.forEach(t),FUe=r(qw," \u2014 "),OS=n(qw,"A",{href:!0});var $Zr=s(OS);TUe=r($Zr,"DecisionTransformerConfig"),$Zr.forEach(t),MUe=r(qw," (Decision Transformer model)"),qw.forEach(t),EUe=i(L),lm=n(L,"LI",{});var pAe=s(lm);mae=n(pAe,"STRONG",{});var kZr=s(mae);CUe=r(kZr,"deit"),kZr.forEach(t),wUe=r(pAe," \u2014 "),VS=n(pAe,"A",{href:!0});var SZr=s(VS);AUe=r(SZr,"DeiTConfig"),SZr.forEach(t),LUe=r(pAe," (DeiT model)"),pAe.forEach(t),yUe=i(L),im=n(L,"LI",{});var _Ae=s(im);gae=n(_Ae,"STRONG",{});var RZr=s(gae);xUe=r(RZr,"detr"),RZr.forEach(t),$Ue=r(_Ae," \u2014 "),XS=n(_Ae,"A",{href:!0});var PZr=s(XS);kUe=r(PZr,"DetrConfig"),PZr.forEach(t),SUe=r(_Ae," (DETR model)"),_Ae.forEach(t),RUe=i(L),dm=n(L,"LI",{});var uAe=s(dm);hae=n(uAe,"STRONG",{});var BZr=s(hae);PUe=r(BZr,"distilbert"),BZr.forEach(t),BUe=r(uAe," \u2014 "),zS=n(uAe,"A",{href:!0});var NZr=s(zS);NUe=r(NZr,"DistilBertConfig"),NZr.forEach(t),IUe=r(uAe," (DistilBERT model)"),uAe.forEach(t),qUe=i(L),cm=n(L,"LI",{});var bAe=s(cm);pae=n(bAe,"STRONG",{});var IZr=s(pae);jUe=r(IZr,"dpr"),IZr.forEach(t),DUe=r(bAe," \u2014 "),QS=n(bAe,"A",{href:!0});var qZr=s(QS);GUe=r(qZr,"DPRConfig"),qZr.forEach(t),OUe=r(bAe," (DPR model)"),bAe.forEach(t),VUe=i(L),fm=n(L,"LI",{});var vAe=s(fm);_ae=n(vAe,"STRONG",{});var jZr=s(_ae);XUe=r(jZr,"dpt"),jZr.forEach(t),zUe=r(vAe," \u2014 "),WS=n(vAe,"A",{href:!0});var DZr=s(WS);QUe=r(DZr,"DPTConfig"),DZr.forEach(t),WUe=r(vAe," (DPT model)"),vAe.forEach(t),HUe=i(L),mm=n(L,"LI",{});var FAe=s(mm);uae=n(FAe,"STRONG",{});var GZr=s(uae);UUe=r(GZr,"electra"),GZr.forEach(t),JUe=r(FAe," \u2014 "),HS=n(FAe,"A",{href:!0});var OZr=s(HS);YUe=r(OZr,"ElectraConfig"),OZr.forEach(t),KUe=r(FAe," (ELECTRA model)"),FAe.forEach(t),ZUe=i(L),gm=n(L,"LI",{});var TAe=s(gm);bae=n(TAe,"STRONG",{});var VZr=s(bae);eJe=r(VZr,"encoder-decoder"),VZr.forEach(t),oJe=r(TAe," \u2014 "),US=n(TAe,"A",{href:!0});var XZr=s(US);rJe=r(XZr,"EncoderDecoderConfig"),XZr.forEach(t),tJe=r(TAe," (Encoder decoder model)"),TAe.forEach(t),aJe=i(L),hm=n(L,"LI",{});var MAe=s(hm);vae=n(MAe,"STRONG",{});var zZr=s(vae);nJe=r(zZr,"flaubert"),zZr.forEach(t),sJe=r(MAe," \u2014 "),JS=n(MAe,"A",{href:!0});var QZr=s(JS);lJe=r(QZr,"FlaubertConfig"),QZr.forEach(t),iJe=r(MAe," (FlauBERT model)"),MAe.forEach(t),dJe=i(L),pm=n(L,"LI",{});var EAe=s(pm);Fae=n(EAe,"STRONG",{});var WZr=s(Fae);cJe=r(WZr,"flava"),WZr.forEach(t),fJe=r(EAe," \u2014 "),YS=n(EAe,"A",{href:!0});var HZr=s(YS);mJe=r(HZr,"FlavaConfig"),HZr.forEach(t),gJe=r(EAe," (FLAVA model)"),EAe.forEach(t),hJe=i(L),_m=n(L,"LI",{});var CAe=s(_m);Tae=n(CAe,"STRONG",{});var UZr=s(Tae);pJe=r(UZr,"fnet"),UZr.forEach(t),_Je=r(CAe," \u2014 "),KS=n(CAe,"A",{href:!0});var JZr=s(KS);uJe=r(JZr,"FNetConfig"),JZr.forEach(t),bJe=r(CAe," (FNet model)"),CAe.forEach(t),vJe=i(L),um=n(L,"LI",{});var wAe=s(um);Mae=n(wAe,"STRONG",{});var YZr=s(Mae);FJe=r(YZr,"fsmt"),YZr.forEach(t),TJe=r(wAe," \u2014 "),ZS=n(wAe,"A",{href:!0});var KZr=s(ZS);MJe=r(KZr,"FSMTConfig"),KZr.forEach(t),EJe=r(wAe," (FairSeq Machine-Translation model)"),wAe.forEach(t),CJe=i(L),bm=n(L,"LI",{});var AAe=s(bm);Eae=n(AAe,"STRONG",{});var ZZr=s(Eae);wJe=r(ZZr,"funnel"),ZZr.forEach(t),AJe=r(AAe," \u2014 "),eR=n(AAe,"A",{href:!0});var eet=s(eR);LJe=r(eet,"FunnelConfig"),eet.forEach(t),yJe=r(AAe," (Funnel Transformer model)"),AAe.forEach(t),xJe=i(L),vm=n(L,"LI",{});var LAe=s(vm);Cae=n(LAe,"STRONG",{});var oet=s(Cae);$Je=r(oet,"glpn"),oet.forEach(t),kJe=r(LAe," \u2014 "),oR=n(LAe,"A",{href:!0});var ret=s(oR);SJe=r(ret,"GLPNConfig"),ret.forEach(t),RJe=r(LAe," (GLPN model)"),LAe.forEach(t),PJe=i(L),Fm=n(L,"LI",{});var yAe=s(Fm);wae=n(yAe,"STRONG",{});var tet=s(wae);BJe=r(tet,"gpt2"),tet.forEach(t),NJe=r(yAe," \u2014 "),rR=n(yAe,"A",{href:!0});var aet=s(rR);IJe=r(aet,"GPT2Config"),aet.forEach(t),qJe=r(yAe," (OpenAI GPT-2 model)"),yAe.forEach(t),jJe=i(L),Tm=n(L,"LI",{});var xAe=s(Tm);Aae=n(xAe,"STRONG",{});var net=s(Aae);DJe=r(net,"gpt_neo"),net.forEach(t),GJe=r(xAe," \u2014 "),tR=n(xAe,"A",{href:!0});var set=s(tR);OJe=r(set,"GPTNeoConfig"),set.forEach(t),VJe=r(xAe," (GPT Neo model)"),xAe.forEach(t),XJe=i(L),Mm=n(L,"LI",{});var $Ae=s(Mm);Lae=n($Ae,"STRONG",{});var iet=s(Lae);zJe=r(iet,"gpt_neox"),iet.forEach(t),QJe=r($Ae," \u2014 "),aR=n($Ae,"A",{href:!0});var det=s(aR);WJe=r(det,"GPTNeoXConfig"),det.forEach(t),HJe=r($Ae," (GPT NeoX model)"),$Ae.forEach(t),UJe=i(L),Em=n(L,"LI",{});var kAe=s(Em);yae=n(kAe,"STRONG",{});var cet=s(yae);JJe=r(cet,"gptj"),cet.forEach(t),YJe=r(kAe," \u2014 "),nR=n(kAe,"A",{href:!0});var fet=s(nR);KJe=r(fet,"GPTJConfig"),fet.forEach(t),ZJe=r(kAe," (GPT-J model)"),kAe.forEach(t),eYe=i(L),Cm=n(L,"LI",{});var SAe=s(Cm);xae=n(SAe,"STRONG",{});var met=s(xae);oYe=r(met,"hubert"),met.forEach(t),rYe=r(SAe," \u2014 "),sR=n(SAe,"A",{href:!0});var get=s(sR);tYe=r(get,"HubertConfig"),get.forEach(t),aYe=r(SAe," (Hubert model)"),SAe.forEach(t),nYe=i(L),wm=n(L,"LI",{});var RAe=s(wm);$ae=n(RAe,"STRONG",{});var het=s($ae);sYe=r(het,"ibert"),het.forEach(t),lYe=r(RAe," \u2014 "),lR=n(RAe,"A",{href:!0});var pet=s(lR);iYe=r(pet,"IBertConfig"),pet.forEach(t),dYe=r(RAe," (I-BERT model)"),RAe.forEach(t),cYe=i(L),Am=n(L,"LI",{});var PAe=s(Am);kae=n(PAe,"STRONG",{});var _et=s(kae);fYe=r(_et,"imagegpt"),_et.forEach(t),mYe=r(PAe," \u2014 "),iR=n(PAe,"A",{href:!0});var uet=s(iR);gYe=r(uet,"ImageGPTConfig"),uet.forEach(t),hYe=r(PAe," (ImageGPT model)"),PAe.forEach(t),pYe=i(L),Lm=n(L,"LI",{});var BAe=s(Lm);Sae=n(BAe,"STRONG",{});var bet=s(Sae);_Ye=r(bet,"layoutlm"),bet.forEach(t),uYe=r(BAe," \u2014 "),dR=n(BAe,"A",{href:!0});var vet=s(dR);bYe=r(vet,"LayoutLMConfig"),vet.forEach(t),vYe=r(BAe," (LayoutLM model)"),BAe.forEach(t),FYe=i(L),ym=n(L,"LI",{});var NAe=s(ym);Rae=n(NAe,"STRONG",{});var Fet=s(Rae);TYe=r(Fet,"layoutlmv2"),Fet.forEach(t),MYe=r(NAe," \u2014 "),cR=n(NAe,"A",{href:!0});var Tet=s(cR);EYe=r(Tet,"LayoutLMv2Config"),Tet.forEach(t),CYe=r(NAe," (LayoutLMv2 model)"),NAe.forEach(t),wYe=i(L),xm=n(L,"LI",{});var IAe=s(xm);Pae=n(IAe,"STRONG",{});var Met=s(Pae);AYe=r(Met,"layoutlmv3"),Met.forEach(t),LYe=r(IAe," \u2014 "),fR=n(IAe,"A",{href:!0});var Eet=s(fR);yYe=r(Eet,"LayoutLMv3Config"),Eet.forEach(t),xYe=r(IAe," (LayoutLMv3 model)"),IAe.forEach(t),$Ye=i(L),$m=n(L,"LI",{});var qAe=s($m);Bae=n(qAe,"STRONG",{});var Cet=s(Bae);kYe=r(Cet,"led"),Cet.forEach(t),SYe=r(qAe," \u2014 "),mR=n(qAe,"A",{href:!0});var wet=s(mR);RYe=r(wet,"LEDConfig"),wet.forEach(t),PYe=r(qAe," (LED model)"),qAe.forEach(t),BYe=i(L),km=n(L,"LI",{});var jAe=s(km);Nae=n(jAe,"STRONG",{});var Aet=s(Nae);NYe=r(Aet,"levit"),Aet.forEach(t),IYe=r(jAe," \u2014 "),gR=n(jAe,"A",{href:!0});var Let=s(gR);qYe=r(Let,"LevitConfig"),Let.forEach(t),jYe=r(jAe," (LeViT model)"),jAe.forEach(t),DYe=i(L),Sm=n(L,"LI",{});var DAe=s(Sm);Iae=n(DAe,"STRONG",{});var yet=s(Iae);GYe=r(yet,"longformer"),yet.forEach(t),OYe=r(DAe," \u2014 "),hR=n(DAe,"A",{href:!0});var xet=s(hR);VYe=r(xet,"LongformerConfig"),xet.forEach(t),XYe=r(DAe," (Longformer model)"),DAe.forEach(t),zYe=i(L),Rm=n(L,"LI",{});var GAe=s(Rm);qae=n(GAe,"STRONG",{});var $et=s(qae);QYe=r($et,"longt5"),$et.forEach(t),WYe=r(GAe," \u2014 "),pR=n(GAe,"A",{href:!0});var ket=s(pR);HYe=r(ket,"LongT5Config"),ket.forEach(t),UYe=r(GAe," (LongT5 model)"),GAe.forEach(t),JYe=i(L),Pm=n(L,"LI",{});var OAe=s(Pm);jae=n(OAe,"STRONG",{});var Set=s(jae);YYe=r(Set,"luke"),Set.forEach(t),KYe=r(OAe," \u2014 "),_R=n(OAe,"A",{href:!0});var Ret=s(_R);ZYe=r(Ret,"LukeConfig"),Ret.forEach(t),eKe=r(OAe," (LUKE model)"),OAe.forEach(t),oKe=i(L),Bm=n(L,"LI",{});var VAe=s(Bm);Dae=n(VAe,"STRONG",{});var Pet=s(Dae);rKe=r(Pet,"lxmert"),Pet.forEach(t),tKe=r(VAe," \u2014 "),uR=n(VAe,"A",{href:!0});var Bet=s(uR);aKe=r(Bet,"LxmertConfig"),Bet.forEach(t),nKe=r(VAe," (LXMERT model)"),VAe.forEach(t),sKe=i(L),Nm=n(L,"LI",{});var XAe=s(Nm);Gae=n(XAe,"STRONG",{});var Net=s(Gae);lKe=r(Net,"m2m_100"),Net.forEach(t),iKe=r(XAe," \u2014 "),bR=n(XAe,"A",{href:!0});var Iet=s(bR);dKe=r(Iet,"M2M100Config"),Iet.forEach(t),cKe=r(XAe," (M2M100 model)"),XAe.forEach(t),fKe=i(L),Im=n(L,"LI",{});var zAe=s(Im);Oae=n(zAe,"STRONG",{});var qet=s(Oae);mKe=r(qet,"marian"),qet.forEach(t),gKe=r(zAe," \u2014 "),vR=n(zAe,"A",{href:!0});var jet=s(vR);hKe=r(jet,"MarianConfig"),jet.forEach(t),pKe=r(zAe," (Marian model)"),zAe.forEach(t),_Ke=i(L),qm=n(L,"LI",{});var QAe=s(qm);Vae=n(QAe,"STRONG",{});var Det=s(Vae);uKe=r(Det,"maskformer"),Det.forEach(t),bKe=r(QAe," \u2014 "),FR=n(QAe,"A",{href:!0});var Get=s(FR);vKe=r(Get,"MaskFormerConfig"),Get.forEach(t),FKe=r(QAe," (MaskFormer model)"),QAe.forEach(t),TKe=i(L),jm=n(L,"LI",{});var WAe=s(jm);Xae=n(WAe,"STRONG",{});var Oet=s(Xae);MKe=r(Oet,"mbart"),Oet.forEach(t),EKe=r(WAe," \u2014 "),TR=n(WAe,"A",{href:!0});var Vet=s(TR);CKe=r(Vet,"MBartConfig"),Vet.forEach(t),wKe=r(WAe," (mBART model)"),WAe.forEach(t),AKe=i(L),Dm=n(L,"LI",{});var HAe=s(Dm);zae=n(HAe,"STRONG",{});var Xet=s(zae);LKe=r(Xet,"mctct"),Xet.forEach(t),yKe=r(HAe," \u2014 "),MR=n(HAe,"A",{href:!0});var zet=s(MR);xKe=r(zet,"MCTCTConfig"),zet.forEach(t),$Ke=r(HAe," (M-CTC-T model)"),HAe.forEach(t),kKe=i(L),Gm=n(L,"LI",{});var UAe=s(Gm);Qae=n(UAe,"STRONG",{});var Qet=s(Qae);SKe=r(Qet,"megatron-bert"),Qet.forEach(t),RKe=r(UAe," \u2014 "),ER=n(UAe,"A",{href:!0});var Wet=s(ER);PKe=r(Wet,"MegatronBertConfig"),Wet.forEach(t),BKe=r(UAe," (Megatron-BERT model)"),UAe.forEach(t),NKe=i(L),Om=n(L,"LI",{});var JAe=s(Om);Wae=n(JAe,"STRONG",{});var Het=s(Wae);IKe=r(Het,"mobilebert"),Het.forEach(t),qKe=r(JAe," \u2014 "),CR=n(JAe,"A",{href:!0});var Uet=s(CR);jKe=r(Uet,"MobileBertConfig"),Uet.forEach(t),DKe=r(JAe," (MobileBERT model)"),JAe.forEach(t),GKe=i(L),Vm=n(L,"LI",{});var YAe=s(Vm);Hae=n(YAe,"STRONG",{});var Jet=s(Hae);OKe=r(Jet,"mobilenet_v2"),Jet.forEach(t),VKe=r(YAe," \u2014 "),wR=n(YAe,"A",{href:!0});var Yet=s(wR);XKe=r(Yet,"MobileNetV2Config"),Yet.forEach(t),zKe=r(YAe," (MobileNetV2 model)"),YAe.forEach(t),QKe=i(L),Xm=n(L,"LI",{});var KAe=s(Xm);Uae=n(KAe,"STRONG",{});var Ket=s(Uae);WKe=r(Ket,"mpnet"),Ket.forEach(t),HKe=r(KAe," \u2014 "),AR=n(KAe,"A",{href:!0});var Zet=s(AR);UKe=r(Zet,"MPNetConfig"),Zet.forEach(t),JKe=r(KAe," (MPNet model)"),KAe.forEach(t),YKe=i(L),zm=n(L,"LI",{});var ZAe=s(zm);Jae=n(ZAe,"STRONG",{});var eot=s(Jae);KKe=r(eot,"mt5"),eot.forEach(t),ZKe=r(ZAe," \u2014 "),LR=n(ZAe,"A",{href:!0});var oot=s(LR);eZe=r(oot,"MT5Config"),oot.forEach(t),oZe=r(ZAe," (MT5 model)"),ZAe.forEach(t),rZe=i(L),Qm=n(L,"LI",{});var e6e=s(Qm);Yae=n(e6e,"STRONG",{});var rot=s(Yae);tZe=r(rot,"nezha"),rot.forEach(t),aZe=r(e6e," \u2014 "),yR=n(e6e,"A",{href:!0});var tot=s(yR);nZe=r(tot,"NezhaConfig"),tot.forEach(t),sZe=r(e6e," (Nezha model)"),e6e.forEach(t),lZe=i(L),Wm=n(L,"LI",{});var o6e=s(Wm);Kae=n(o6e,"STRONG",{});var aot=s(Kae);iZe=r(aot,"nystromformer"),aot.forEach(t),dZe=r(o6e," \u2014 "),xR=n(o6e,"A",{href:!0});var not=s(xR);cZe=r(not,"NystromformerConfig"),not.forEach(t),fZe=r(o6e," (Nystr\xF6mformer model)"),o6e.forEach(t),mZe=i(L),Hm=n(L,"LI",{});var r6e=s(Hm);Zae=n(r6e,"STRONG",{});var sot=s(Zae);gZe=r(sot,"openai-gpt"),sot.forEach(t),hZe=r(r6e," \u2014 "),$R=n(r6e,"A",{href:!0});var lot=s($R);pZe=r(lot,"OpenAIGPTConfig"),lot.forEach(t),_Ze=r(r6e," (OpenAI GPT model)"),r6e.forEach(t),uZe=i(L),Um=n(L,"LI",{});var t6e=s(Um);ene=n(t6e,"STRONG",{});var iot=s(ene);bZe=r(iot,"opt"),iot.forEach(t),vZe=r(t6e," \u2014 "),kR=n(t6e,"A",{href:!0});var dot=s(kR);FZe=r(dot,"OPTConfig"),dot.forEach(t),TZe=r(t6e," (OPT model)"),t6e.forEach(t),MZe=i(L),Jm=n(L,"LI",{});var a6e=s(Jm);one=n(a6e,"STRONG",{});var cot=s(one);EZe=r(cot,"pegasus"),cot.forEach(t),CZe=r(a6e," \u2014 "),SR=n(a6e,"A",{href:!0});var fot=s(SR);wZe=r(fot,"PegasusConfig"),fot.forEach(t),AZe=r(a6e," (Pegasus model)"),a6e.forEach(t),LZe=i(L),Ym=n(L,"LI",{});var n6e=s(Ym);rne=n(n6e,"STRONG",{});var mot=s(rne);yZe=r(mot,"perceiver"),mot.forEach(t),xZe=r(n6e," \u2014 "),RR=n(n6e,"A",{href:!0});var got=s(RR);$Ze=r(got,"PerceiverConfig"),got.forEach(t),kZe=r(n6e," (Perceiver model)"),n6e.forEach(t),SZe=i(L),Km=n(L,"LI",{});var s6e=s(Km);tne=n(s6e,"STRONG",{});var hot=s(tne);RZe=r(hot,"plbart"),hot.forEach(t),PZe=r(s6e," \u2014 "),PR=n(s6e,"A",{href:!0});var pot=s(PR);BZe=r(pot,"PLBartConfig"),pot.forEach(t),NZe=r(s6e," (PLBart model)"),s6e.forEach(t),IZe=i(L),Zm=n(L,"LI",{});var l6e=s(Zm);ane=n(l6e,"STRONG",{});var _ot=s(ane);qZe=r(_ot,"poolformer"),_ot.forEach(t),jZe=r(l6e," \u2014 "),BR=n(l6e,"A",{href:!0});var uot=s(BR);DZe=r(uot,"PoolFormerConfig"),uot.forEach(t),GZe=r(l6e," (PoolFormer model)"),l6e.forEach(t),OZe=i(L),eg=n(L,"LI",{});var i6e=s(eg);nne=n(i6e,"STRONG",{});var bot=s(nne);VZe=r(bot,"prophetnet"),bot.forEach(t),XZe=r(i6e," \u2014 "),NR=n(i6e,"A",{href:!0});var vot=s(NR);zZe=r(vot,"ProphetNetConfig"),vot.forEach(t),QZe=r(i6e," (ProphetNet model)"),i6e.forEach(t),WZe=i(L),og=n(L,"LI",{});var d6e=s(og);sne=n(d6e,"STRONG",{});var Fot=s(sne);HZe=r(Fot,"qdqbert"),Fot.forEach(t),UZe=r(d6e," \u2014 "),IR=n(d6e,"A",{href:!0});var Tot=s(IR);JZe=r(Tot,"QDQBertConfig"),Tot.forEach(t),YZe=r(d6e," (QDQBert model)"),d6e.forEach(t),KZe=i(L),rg=n(L,"LI",{});var c6e=s(rg);lne=n(c6e,"STRONG",{});var Mot=s(lne);ZZe=r(Mot,"rag"),Mot.forEach(t),eeo=r(c6e," \u2014 "),qR=n(c6e,"A",{href:!0});var Eot=s(qR);oeo=r(Eot,"RagConfig"),Eot.forEach(t),reo=r(c6e," (RAG model)"),c6e.forEach(t),teo=i(L),tg=n(L,"LI",{});var f6e=s(tg);ine=n(f6e,"STRONG",{});var Cot=s(ine);aeo=r(Cot,"realm"),Cot.forEach(t),neo=r(f6e," \u2014 "),jR=n(f6e,"A",{href:!0});var wot=s(jR);seo=r(wot,"RealmConfig"),wot.forEach(t),leo=r(f6e," (REALM model)"),f6e.forEach(t),ieo=i(L),ag=n(L,"LI",{});var m6e=s(ag);dne=n(m6e,"STRONG",{});var Aot=s(dne);deo=r(Aot,"reformer"),Aot.forEach(t),ceo=r(m6e," \u2014 "),DR=n(m6e,"A",{href:!0});var Lot=s(DR);feo=r(Lot,"ReformerConfig"),Lot.forEach(t),meo=r(m6e," (Reformer model)"),m6e.forEach(t),geo=i(L),ng=n(L,"LI",{});var g6e=s(ng);cne=n(g6e,"STRONG",{});var yot=s(cne);heo=r(yot,"regnet"),yot.forEach(t),peo=r(g6e," \u2014 "),GR=n(g6e,"A",{href:!0});var xot=s(GR);_eo=r(xot,"RegNetConfig"),xot.forEach(t),ueo=r(g6e," (RegNet model)"),g6e.forEach(t),beo=i(L),sg=n(L,"LI",{});var h6e=s(sg);fne=n(h6e,"STRONG",{});var $ot=s(fne);veo=r($ot,"rembert"),$ot.forEach(t),Feo=r(h6e," \u2014 "),OR=n(h6e,"A",{href:!0});var kot=s(OR);Teo=r(kot,"RemBertConfig"),kot.forEach(t),Meo=r(h6e," (RemBERT model)"),h6e.forEach(t),Eeo=i(L),lg=n(L,"LI",{});var p6e=s(lg);mne=n(p6e,"STRONG",{});var Sot=s(mne);Ceo=r(Sot,"resnet"),Sot.forEach(t),weo=r(p6e," \u2014 "),VR=n(p6e,"A",{href:!0});var Rot=s(VR);Aeo=r(Rot,"ResNetConfig"),Rot.forEach(t),Leo=r(p6e," (ResNet model)"),p6e.forEach(t),yeo=i(L),ig=n(L,"LI",{});var _6e=s(ig);gne=n(_6e,"STRONG",{});var Pot=s(gne);xeo=r(Pot,"retribert"),Pot.forEach(t),$eo=r(_6e," \u2014 "),XR=n(_6e,"A",{href:!0});var Bot=s(XR);keo=r(Bot,"RetriBertConfig"),Bot.forEach(t),Seo=r(_6e," (RetriBERT model)"),_6e.forEach(t),Reo=i(L),dg=n(L,"LI",{});var u6e=s(dg);hne=n(u6e,"STRONG",{});var Not=s(hne);Peo=r(Not,"roberta"),Not.forEach(t),Beo=r(u6e," \u2014 "),zR=n(u6e,"A",{href:!0});var Iot=s(zR);Neo=r(Iot,"RobertaConfig"),Iot.forEach(t),Ieo=r(u6e," (RoBERTa model)"),u6e.forEach(t),qeo=i(L),cg=n(L,"LI",{});var b6e=s(cg);pne=n(b6e,"STRONG",{});var qot=s(pne);jeo=r(qot,"roformer"),qot.forEach(t),Deo=r(b6e," \u2014 "),QR=n(b6e,"A",{href:!0});var jot=s(QR);Geo=r(jot,"RoFormerConfig"),jot.forEach(t),Oeo=r(b6e," (RoFormer model)"),b6e.forEach(t),Veo=i(L),fg=n(L,"LI",{});var v6e=s(fg);_ne=n(v6e,"STRONG",{});var Dot=s(_ne);Xeo=r(Dot,"segformer"),Dot.forEach(t),zeo=r(v6e," \u2014 "),WR=n(v6e,"A",{href:!0});var Got=s(WR);Qeo=r(Got,"SegformerConfig"),Got.forEach(t),Weo=r(v6e," (SegFormer model)"),v6e.forEach(t),Heo=i(L),mg=n(L,"LI",{});var F6e=s(mg);une=n(F6e,"STRONG",{});var Oot=s(une);Ueo=r(Oot,"sew"),Oot.forEach(t),Jeo=r(F6e," \u2014 "),HR=n(F6e,"A",{href:!0});var Vot=s(HR);Yeo=r(Vot,"SEWConfig"),Vot.forEach(t),Keo=r(F6e," (SEW model)"),F6e.forEach(t),Zeo=i(L),gg=n(L,"LI",{});var T6e=s(gg);bne=n(T6e,"STRONG",{});var Xot=s(bne);eoo=r(Xot,"sew-d"),Xot.forEach(t),ooo=r(T6e," \u2014 "),UR=n(T6e,"A",{href:!0});var zot=s(UR);roo=r(zot,"SEWDConfig"),zot.forEach(t),too=r(T6e," (SEW-D model)"),T6e.forEach(t),aoo=i(L),hg=n(L,"LI",{});var M6e=s(hg);vne=n(M6e,"STRONG",{});var Qot=s(vne);noo=r(Qot,"speech-encoder-decoder"),Qot.forEach(t),soo=r(M6e," \u2014 "),JR=n(M6e,"A",{href:!0});var Wot=s(JR);loo=r(Wot,"SpeechEncoderDecoderConfig"),Wot.forEach(t),ioo=r(M6e," (Speech Encoder decoder model)"),M6e.forEach(t),doo=i(L),pg=n(L,"LI",{});var E6e=s(pg);Fne=n(E6e,"STRONG",{});var Hot=s(Fne);coo=r(Hot,"speech_to_text"),Hot.forEach(t),foo=r(E6e," \u2014 "),YR=n(E6e,"A",{href:!0});var Uot=s(YR);moo=r(Uot,"Speech2TextConfig"),Uot.forEach(t),goo=r(E6e," (Speech2Text model)"),E6e.forEach(t),hoo=i(L),_g=n(L,"LI",{});var C6e=s(_g);Tne=n(C6e,"STRONG",{});var Jot=s(Tne);poo=r(Jot,"speech_to_text_2"),Jot.forEach(t),_oo=r(C6e," \u2014 "),KR=n(C6e,"A",{href:!0});var Yot=s(KR);uoo=r(Yot,"Speech2Text2Config"),Yot.forEach(t),boo=r(C6e," (Speech2Text2 model)"),C6e.forEach(t),voo=i(L),ug=n(L,"LI",{});var w6e=s(ug);Mne=n(w6e,"STRONG",{});var Kot=s(Mne);Foo=r(Kot,"splinter"),Kot.forEach(t),Too=r(w6e," \u2014 "),ZR=n(w6e,"A",{href:!0});var Zot=s(ZR);Moo=r(Zot,"SplinterConfig"),Zot.forEach(t),Eoo=r(w6e," (Splinter model)"),w6e.forEach(t),Coo=i(L),bg=n(L,"LI",{});var A6e=s(bg);Ene=n(A6e,"STRONG",{});var ert=s(Ene);woo=r(ert,"squeezebert"),ert.forEach(t),Aoo=r(A6e," \u2014 "),eP=n(A6e,"A",{href:!0});var ort=s(eP);Loo=r(ort,"SqueezeBertConfig"),ort.forEach(t),yoo=r(A6e," (SqueezeBERT model)"),A6e.forEach(t),xoo=i(L),vg=n(L,"LI",{});var L6e=s(vg);Cne=n(L6e,"STRONG",{});var rrt=s(Cne);$oo=r(rrt,"swin"),rrt.forEach(t),koo=r(L6e," \u2014 "),oP=n(L6e,"A",{href:!0});var trt=s(oP);Soo=r(trt,"SwinConfig"),trt.forEach(t),Roo=r(L6e," (Swin Transformer model)"),L6e.forEach(t),Poo=i(L),Fg=n(L,"LI",{});var y6e=s(Fg);wne=n(y6e,"STRONG",{});var art=s(wne);Boo=r(art,"t5"),art.forEach(t),Noo=r(y6e," \u2014 "),rP=n(y6e,"A",{href:!0});var nrt=s(rP);Ioo=r(nrt,"T5Config"),nrt.forEach(t),qoo=r(y6e," (T5 model)"),y6e.forEach(t),joo=i(L),Tg=n(L,"LI",{});var x6e=s(Tg);Ane=n(x6e,"STRONG",{});var srt=s(Ane);Doo=r(srt,"tapas"),srt.forEach(t),Goo=r(x6e," \u2014 "),tP=n(x6e,"A",{href:!0});var lrt=s(tP);Ooo=r(lrt,"TapasConfig"),lrt.forEach(t),Voo=r(x6e," (TAPAS model)"),x6e.forEach(t),Xoo=i(L),Mg=n(L,"LI",{});var $6e=s(Mg);Lne=n($6e,"STRONG",{});var irt=s(Lne);zoo=r(irt,"trajectory_transformer"),irt.forEach(t),Qoo=r($6e," \u2014 "),aP=n($6e,"A",{href:!0});var drt=s(aP);Woo=r(drt,"TrajectoryTransformerConfig"),drt.forEach(t),Hoo=r($6e," (Trajectory Transformer model)"),$6e.forEach(t),Uoo=i(L),Eg=n(L,"LI",{});var k6e=s(Eg);yne=n(k6e,"STRONG",{});var crt=s(yne);Joo=r(crt,"transfo-xl"),crt.forEach(t),Yoo=r(k6e," \u2014 "),nP=n(k6e,"A",{href:!0});var frt=s(nP);Koo=r(frt,"TransfoXLConfig"),frt.forEach(t),Zoo=r(k6e," (Transformer-XL model)"),k6e.forEach(t),ero=i(L),Cg=n(L,"LI",{});var S6e=s(Cg);xne=n(S6e,"STRONG",{});var mrt=s(xne);oro=r(mrt,"trocr"),mrt.forEach(t),rro=r(S6e," \u2014 "),sP=n(S6e,"A",{href:!0});var grt=s(sP);tro=r(grt,"TrOCRConfig"),grt.forEach(t),aro=r(S6e," (TrOCR model)"),S6e.forEach(t),nro=i(L),wg=n(L,"LI",{});var R6e=s(wg);$ne=n(R6e,"STRONG",{});var hrt=s($ne);sro=r(hrt,"unispeech"),hrt.forEach(t),lro=r(R6e," \u2014 "),lP=n(R6e,"A",{href:!0});var prt=s(lP);iro=r(prt,"UniSpeechConfig"),prt.forEach(t),dro=r(R6e," (UniSpeech model)"),R6e.forEach(t),cro=i(L),Ag=n(L,"LI",{});var P6e=s(Ag);kne=n(P6e,"STRONG",{});var _rt=s(kne);fro=r(_rt,"unispeech-sat"),_rt.forEach(t),mro=r(P6e," \u2014 "),iP=n(P6e,"A",{href:!0});var urt=s(iP);gro=r(urt,"UniSpeechSatConfig"),urt.forEach(t),hro=r(P6e," (UniSpeechSat model)"),P6e.forEach(t),pro=i(L),Lg=n(L,"LI",{});var B6e=s(Lg);Sne=n(B6e,"STRONG",{});var brt=s(Sne);_ro=r(brt,"van"),brt.forEach(t),uro=r(B6e," \u2014 "),dP=n(B6e,"A",{href:!0});var vrt=s(dP);bro=r(vrt,"VanConfig"),vrt.forEach(t),vro=r(B6e," (VAN model)"),B6e.forEach(t),Fro=i(L),yg=n(L,"LI",{});var N6e=s(yg);Rne=n(N6e,"STRONG",{});var Frt=s(Rne);Tro=r(Frt,"vilt"),Frt.forEach(t),Mro=r(N6e," \u2014 "),cP=n(N6e,"A",{href:!0});var Trt=s(cP);Ero=r(Trt,"ViltConfig"),Trt.forEach(t),Cro=r(N6e," (ViLT model)"),N6e.forEach(t),wro=i(L),xg=n(L,"LI",{});var I6e=s(xg);Pne=n(I6e,"STRONG",{});var Mrt=s(Pne);Aro=r(Mrt,"vision-encoder-decoder"),Mrt.forEach(t),Lro=r(I6e," \u2014 "),fP=n(I6e,"A",{href:!0});var Ert=s(fP);yro=r(Ert,"VisionEncoderDecoderConfig"),Ert.forEach(t),xro=r(I6e," (Vision Encoder decoder model)"),I6e.forEach(t),$ro=i(L),$g=n(L,"LI",{});var q6e=s($g);Bne=n(q6e,"STRONG",{});var Crt=s(Bne);kro=r(Crt,"vision-text-dual-encoder"),Crt.forEach(t),Sro=r(q6e," \u2014 "),mP=n(q6e,"A",{href:!0});var wrt=s(mP);Rro=r(wrt,"VisionTextDualEncoderConfig"),wrt.forEach(t),Pro=r(q6e," (VisionTextDualEncoder model)"),q6e.forEach(t),Bro=i(L),kg=n(L,"LI",{});var j6e=s(kg);Nne=n(j6e,"STRONG",{});var Art=s(Nne);Nro=r(Art,"visual_bert"),Art.forEach(t),Iro=r(j6e," \u2014 "),gP=n(j6e,"A",{href:!0});var Lrt=s(gP);qro=r(Lrt,"VisualBertConfig"),Lrt.forEach(t),jro=r(j6e," (VisualBERT model)"),j6e.forEach(t),Dro=i(L),Sg=n(L,"LI",{});var D6e=s(Sg);Ine=n(D6e,"STRONG",{});var yrt=s(Ine);Gro=r(yrt,"vit"),yrt.forEach(t),Oro=r(D6e," \u2014 "),hP=n(D6e,"A",{href:!0});var xrt=s(hP);Vro=r(xrt,"ViTConfig"),xrt.forEach(t),Xro=r(D6e," (ViT model)"),D6e.forEach(t),zro=i(L),Rg=n(L,"LI",{});var G6e=s(Rg);qne=n(G6e,"STRONG",{});var $rt=s(qne);Qro=r($rt,"vit_mae"),$rt.forEach(t),Wro=r(G6e," \u2014 "),pP=n(G6e,"A",{href:!0});var krt=s(pP);Hro=r(krt,"ViTMAEConfig"),krt.forEach(t),Uro=r(G6e," (ViTMAE model)"),G6e.forEach(t),Jro=i(L),Pg=n(L,"LI",{});var O6e=s(Pg);jne=n(O6e,"STRONG",{});var Srt=s(jne);Yro=r(Srt,"wav2vec2"),Srt.forEach(t),Kro=r(O6e," \u2014 "),_P=n(O6e,"A",{href:!0});var Rrt=s(_P);Zro=r(Rrt,"Wav2Vec2Config"),Rrt.forEach(t),eto=r(O6e," (Wav2Vec2 model)"),O6e.forEach(t),oto=i(L),Bg=n(L,"LI",{});var V6e=s(Bg);Dne=n(V6e,"STRONG",{});var Prt=s(Dne);rto=r(Prt,"wav2vec2-conformer"),Prt.forEach(t),tto=r(V6e," \u2014 "),uP=n(V6e,"A",{href:!0});var Brt=s(uP);ato=r(Brt,"Wav2Vec2ConformerConfig"),Brt.forEach(t),nto=r(V6e," (Wav2Vec2-Conformer model)"),V6e.forEach(t),sto=i(L),Ng=n(L,"LI",{});var X6e=s(Ng);Gne=n(X6e,"STRONG",{});var Nrt=s(Gne);lto=r(Nrt,"wavlm"),Nrt.forEach(t),ito=r(X6e," \u2014 "),bP=n(X6e,"A",{href:!0});var Irt=s(bP);dto=r(Irt,"WavLMConfig"),Irt.forEach(t),cto=r(X6e," (WavLM model)"),X6e.forEach(t),fto=i(L),Ig=n(L,"LI",{});var z6e=s(Ig);One=n(z6e,"STRONG",{});var qrt=s(One);mto=r(qrt,"xglm"),qrt.forEach(t),gto=r(z6e," \u2014 "),vP=n(z6e,"A",{href:!0});var jrt=s(vP);hto=r(jrt,"XGLMConfig"),jrt.forEach(t),pto=r(z6e," (XGLM model)"),z6e.forEach(t),_to=i(L),qg=n(L,"LI",{});var Q6e=s(qg);Vne=n(Q6e,"STRONG",{});var Drt=s(Vne);uto=r(Drt,"xlm"),Drt.forEach(t),bto=r(Q6e," \u2014 "),FP=n(Q6e,"A",{href:!0});var Grt=s(FP);vto=r(Grt,"XLMConfig"),Grt.forEach(t),Fto=r(Q6e," (XLM model)"),Q6e.forEach(t),Tto=i(L),jg=n(L,"LI",{});var W6e=s(jg);Xne=n(W6e,"STRONG",{});var Ort=s(Xne);Mto=r(Ort,"xlm-prophetnet"),Ort.forEach(t),Eto=r(W6e," \u2014 "),TP=n(W6e,"A",{href:!0});var Vrt=s(TP);Cto=r(Vrt,"XLMProphetNetConfig"),Vrt.forEach(t),wto=r(W6e," (XLM-ProphetNet model)"),W6e.forEach(t),Ato=i(L),Dg=n(L,"LI",{});var H6e=s(Dg);zne=n(H6e,"STRONG",{});var Xrt=s(zne);Lto=r(Xrt,"xlm-roberta"),Xrt.forEach(t),yto=r(H6e," \u2014 "),MP=n(H6e,"A",{href:!0});var zrt=s(MP);xto=r(zrt,"XLMRobertaConfig"),zrt.forEach(t),$to=r(H6e," (XLM-RoBERTa model)"),H6e.forEach(t),kto=i(L),Gg=n(L,"LI",{});var U6e=s(Gg);Qne=n(U6e,"STRONG",{});var Qrt=s(Qne);Sto=r(Qrt,"xlm-roberta-xl"),Qrt.forEach(t),Rto=r(U6e," \u2014 "),EP=n(U6e,"A",{href:!0});var Wrt=s(EP);Pto=r(Wrt,"XLMRobertaXLConfig"),Wrt.forEach(t),Bto=r(U6e," (XLM-RoBERTa-XL model)"),U6e.forEach(t),Nto=i(L),Og=n(L,"LI",{});var J6e=s(Og);Wne=n(J6e,"STRONG",{});var Hrt=s(Wne);Ito=r(Hrt,"xlnet"),Hrt.forEach(t),qto=r(J6e," \u2014 "),CP=n(J6e,"A",{href:!0});var Urt=s(CP);jto=r(Urt,"XLNetConfig"),Urt.forEach(t),Dto=r(J6e," (XLNet model)"),J6e.forEach(t),Gto=i(L),Vg=n(L,"LI",{});var Y6e=s(Vg);Hne=n(Y6e,"STRONG",{});var Jrt=s(Hne);Oto=r(Jrt,"yolos"),Jrt.forEach(t),Vto=r(Y6e," \u2014 "),wP=n(Y6e,"A",{href:!0});var Yrt=s(wP);Xto=r(Yrt,"YolosConfig"),Yrt.forEach(t),zto=r(Y6e," (YOLOS model)"),Y6e.forEach(t),Qto=i(L),Xg=n(L,"LI",{});var K6e=s(Xg);Une=n(K6e,"STRONG",{});var Krt=s(Une);Wto=r(Krt,"yoso"),Krt.forEach(t),Hto=r(K6e," \u2014 "),AP=n(K6e,"A",{href:!0});var Zrt=s(AP);Uto=r(Zrt,"YosoConfig"),Zrt.forEach(t),Jto=r(K6e," (YOSO model)"),K6e.forEach(t),L.forEach(t),Yto=i(at),T(zg.$$.fragment,at),at.forEach(t),Kto=i(tt),Qg=n(tt,"DIV",{class:!0});var yXe=s(Qg);T(z6.$$.fragment,yXe),Zto=i(yXe),Jne=n(yXe,"P",{});var ett=s(Jne);eao=r(ett,"Register a new configuration for this class."),ett.forEach(t),yXe.forEach(t),tt.forEach(t),xOe=i(f),Ri=n(f,"H2",{class:!0});var xXe=s(Ri);Wg=n(xXe,"A",{id:!0,class:!0,href:!0});var ott=s(Wg);Yne=n(ott,"SPAN",{});var rtt=s(Yne);T(Q6.$$.fragment,rtt),rtt.forEach(t),ott.forEach(t),oao=i(xXe),Kne=n(xXe,"SPAN",{});var ttt=s(Kne);rao=r(ttt,"AutoTokenizer"),ttt.forEach(t),xXe.forEach(t),$Oe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(W6.$$.fragment,Hs),tao=i(Hs),H6=n(Hs,"P",{});var $Xe=s(H6);aao=r($Xe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LP=n($Xe,"A",{href:!0});var att=s(LP);nao=r(att,"AutoTokenizer.from_pretrained()"),att.forEach(t),sao=r($Xe," class method."),$Xe.forEach(t),lao=i(Hs),U6=n(Hs,"P",{});var kXe=s(U6);iao=r(kXe,"This class cannot be instantiated directly using "),Zne=n(kXe,"CODE",{});var ntt=s(Zne);dao=r(ntt,"__init__()"),ntt.forEach(t),cao=r(kXe," (throws an error)."),kXe.forEach(t),fao=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(J6.$$.fragment,Us),mao=i(Us),ese=n(Us,"P",{});var stt=s(ese);gao=r(stt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),stt.forEach(t),hao=i(Us),Sa=n(Us,"P",{});var jw=s(Sa);pao=r(jw,"The tokenizer class to instantiate is selected based on the "),ose=n(jw,"CODE",{});var ltt=s(ose);_ao=r(ltt,"model_type"),ltt.forEach(t),uao=r(jw,` property of the config object (either
passed as an argument or loaded from `),rse=n(jw,"CODE",{});var itt=s(rse);bao=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),vao=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tse=n(jw,"CODE",{});var dtt=s(tse);Fao=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),Tao=r(jw,":"),jw.forEach(t),Mao=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var rk=s(qn);ase=n(rk,"STRONG",{});var ctt=s(ase);Eao=r(ctt,"albert"),ctt.forEach(t),Cao=r(rk," \u2014 "),yP=n(rk,"A",{href:!0});var ftt=s(yP);wao=r(ftt,"AlbertTokenizer"),ftt.forEach(t),Aao=r(rk," or "),xP=n(rk,"A",{href:!0});var mtt=s(xP);Lao=r(mtt,"AlbertTokenizerFast"),mtt.forEach(t),yao=r(rk," (ALBERT model)"),rk.forEach(t),xao=i(S),jn=n(S,"LI",{});var tk=s(jn);nse=n(tk,"STRONG",{});var gtt=s(nse);$ao=r(gtt,"bart"),gtt.forEach(t),kao=r(tk," \u2014 "),$P=n(tk,"A",{href:!0});var htt=s($P);Sao=r(htt,"BartTokenizer"),htt.forEach(t),Rao=r(tk," or "),kP=n(tk,"A",{href:!0});var ptt=s(kP);Pao=r(ptt,"BartTokenizerFast"),ptt.forEach(t),Bao=r(tk," (BART model)"),tk.forEach(t),Nao=i(S),Dn=n(S,"LI",{});var ak=s(Dn);sse=n(ak,"STRONG",{});var _tt=s(sse);Iao=r(_tt,"barthez"),_tt.forEach(t),qao=r(ak," \u2014 "),SP=n(ak,"A",{href:!0});var utt=s(SP);jao=r(utt,"BarthezTokenizer"),utt.forEach(t),Dao=r(ak," or "),RP=n(ak,"A",{href:!0});var btt=s(RP);Gao=r(btt,"BarthezTokenizerFast"),btt.forEach(t),Oao=r(ak," (BARThez model)"),ak.forEach(t),Vao=i(S),Hg=n(S,"LI",{});var Z6e=s(Hg);lse=n(Z6e,"STRONG",{});var vtt=s(lse);Xao=r(vtt,"bartpho"),vtt.forEach(t),zao=r(Z6e," \u2014 "),PP=n(Z6e,"A",{href:!0});var Ftt=s(PP);Qao=r(Ftt,"BartphoTokenizer"),Ftt.forEach(t),Wao=r(Z6e," (BARTpho model)"),Z6e.forEach(t),Hao=i(S),Gn=n(S,"LI",{});var nk=s(Gn);ise=n(nk,"STRONG",{});var Ttt=s(ise);Uao=r(Ttt,"bert"),Ttt.forEach(t),Jao=r(nk," \u2014 "),BP=n(nk,"A",{href:!0});var Mtt=s(BP);Yao=r(Mtt,"BertTokenizer"),Mtt.forEach(t),Kao=r(nk," or "),NP=n(nk,"A",{href:!0});var Ett=s(NP);Zao=r(Ett,"BertTokenizerFast"),Ett.forEach(t),eno=r(nk," (BERT model)"),nk.forEach(t),ono=i(S),Ug=n(S,"LI",{});var eLe=s(Ug);dse=n(eLe,"STRONG",{});var Ctt=s(dse);rno=r(Ctt,"bert-generation"),Ctt.forEach(t),tno=r(eLe," \u2014 "),IP=n(eLe,"A",{href:!0});var wtt=s(IP);ano=r(wtt,"BertGenerationTokenizer"),wtt.forEach(t),nno=r(eLe," (Bert Generation model)"),eLe.forEach(t),sno=i(S),Jg=n(S,"LI",{});var oLe=s(Jg);cse=n(oLe,"STRONG",{});var Att=s(cse);lno=r(Att,"bert-japanese"),Att.forEach(t),ino=r(oLe," \u2014 "),qP=n(oLe,"A",{href:!0});var Ltt=s(qP);dno=r(Ltt,"BertJapaneseTokenizer"),Ltt.forEach(t),cno=r(oLe," (BertJapanese model)"),oLe.forEach(t),fno=i(S),Yg=n(S,"LI",{});var rLe=s(Yg);fse=n(rLe,"STRONG",{});var ytt=s(fse);mno=r(ytt,"bertweet"),ytt.forEach(t),gno=r(rLe," \u2014 "),jP=n(rLe,"A",{href:!0});var xtt=s(jP);hno=r(xtt,"BertweetTokenizer"),xtt.forEach(t),pno=r(rLe," (BERTweet model)"),rLe.forEach(t),_no=i(S),On=n(S,"LI",{});var sk=s(On);mse=n(sk,"STRONG",{});var $tt=s(mse);uno=r($tt,"big_bird"),$tt.forEach(t),bno=r(sk," \u2014 "),DP=n(sk,"A",{href:!0});var ktt=s(DP);vno=r(ktt,"BigBirdTokenizer"),ktt.forEach(t),Fno=r(sk," or "),GP=n(sk,"A",{href:!0});var Stt=s(GP);Tno=r(Stt,"BigBirdTokenizerFast"),Stt.forEach(t),Mno=r(sk," (BigBird model)"),sk.forEach(t),Eno=i(S),Vn=n(S,"LI",{});var lk=s(Vn);gse=n(lk,"STRONG",{});var Rtt=s(gse);Cno=r(Rtt,"bigbird_pegasus"),Rtt.forEach(t),wno=r(lk," \u2014 "),OP=n(lk,"A",{href:!0});var Ptt=s(OP);Ano=r(Ptt,"PegasusTokenizer"),Ptt.forEach(t),Lno=r(lk," or "),VP=n(lk,"A",{href:!0});var Btt=s(VP);yno=r(Btt,"PegasusTokenizerFast"),Btt.forEach(t),xno=r(lk," (BigBird-Pegasus model)"),lk.forEach(t),$no=i(S),Xn=n(S,"LI",{});var ik=s(Xn);hse=n(ik,"STRONG",{});var Ntt=s(hse);kno=r(Ntt,"blenderbot"),Ntt.forEach(t),Sno=r(ik," \u2014 "),XP=n(ik,"A",{href:!0});var Itt=s(XP);Rno=r(Itt,"BlenderbotTokenizer"),Itt.forEach(t),Pno=r(ik," or "),zP=n(ik,"A",{href:!0});var qtt=s(zP);Bno=r(qtt,"BlenderbotTokenizerFast"),qtt.forEach(t),Nno=r(ik," (Blenderbot model)"),ik.forEach(t),Ino=i(S),Kg=n(S,"LI",{});var tLe=s(Kg);pse=n(tLe,"STRONG",{});var jtt=s(pse);qno=r(jtt,"blenderbot-small"),jtt.forEach(t),jno=r(tLe," \u2014 "),QP=n(tLe,"A",{href:!0});var Dtt=s(QP);Dno=r(Dtt,"BlenderbotSmallTokenizer"),Dtt.forEach(t),Gno=r(tLe," (BlenderbotSmall model)"),tLe.forEach(t),Ono=i(S),Zg=n(S,"LI",{});var aLe=s(Zg);_se=n(aLe,"STRONG",{});var Gtt=s(_se);Vno=r(Gtt,"bloom"),Gtt.forEach(t),Xno=r(aLe," \u2014 "),WP=n(aLe,"A",{href:!0});var Ott=s(WP);zno=r(Ott,"BloomTokenizerFast"),Ott.forEach(t),Qno=r(aLe," (BLOOM model)"),aLe.forEach(t),Wno=i(S),eh=n(S,"LI",{});var nLe=s(eh);use=n(nLe,"STRONG",{});var Vtt=s(use);Hno=r(Vtt,"byt5"),Vtt.forEach(t),Uno=r(nLe," \u2014 "),HP=n(nLe,"A",{href:!0});var Xtt=s(HP);Jno=r(Xtt,"ByT5Tokenizer"),Xtt.forEach(t),Yno=r(nLe," (ByT5 model)"),nLe.forEach(t),Kno=i(S),zn=n(S,"LI",{});var dk=s(zn);bse=n(dk,"STRONG",{});var ztt=s(bse);Zno=r(ztt,"camembert"),ztt.forEach(t),eso=r(dk," \u2014 "),UP=n(dk,"A",{href:!0});var Qtt=s(UP);oso=r(Qtt,"CamembertTokenizer"),Qtt.forEach(t),rso=r(dk," or "),JP=n(dk,"A",{href:!0});var Wtt=s(JP);tso=r(Wtt,"CamembertTokenizerFast"),Wtt.forEach(t),aso=r(dk," (CamemBERT model)"),dk.forEach(t),nso=i(S),oh=n(S,"LI",{});var sLe=s(oh);vse=n(sLe,"STRONG",{});var Htt=s(vse);sso=r(Htt,"canine"),Htt.forEach(t),lso=r(sLe," \u2014 "),YP=n(sLe,"A",{href:!0});var Utt=s(YP);iso=r(Utt,"CanineTokenizer"),Utt.forEach(t),dso=r(sLe," (CANINE model)"),sLe.forEach(t),cso=i(S),Qn=n(S,"LI",{});var ck=s(Qn);Fse=n(ck,"STRONG",{});var Jtt=s(Fse);fso=r(Jtt,"clip"),Jtt.forEach(t),mso=r(ck," \u2014 "),KP=n(ck,"A",{href:!0});var Ytt=s(KP);gso=r(Ytt,"CLIPTokenizer"),Ytt.forEach(t),hso=r(ck," or "),ZP=n(ck,"A",{href:!0});var Ktt=s(ZP);pso=r(Ktt,"CLIPTokenizerFast"),Ktt.forEach(t),_so=r(ck," (CLIP model)"),ck.forEach(t),uso=i(S),Wn=n(S,"LI",{});var fk=s(Wn);Tse=n(fk,"STRONG",{});var Ztt=s(Tse);bso=r(Ztt,"codegen"),Ztt.forEach(t),vso=r(fk," \u2014 "),eB=n(fk,"A",{href:!0});var eat=s(eB);Fso=r(eat,"CodeGenTokenizer"),eat.forEach(t),Tso=r(fk," or "),oB=n(fk,"A",{href:!0});var oat=s(oB);Mso=r(oat,"CodeGenTokenizerFast"),oat.forEach(t),Eso=r(fk," (CodeGen model)"),fk.forEach(t),Cso=i(S),Hn=n(S,"LI",{});var mk=s(Hn);Mse=n(mk,"STRONG",{});var rat=s(Mse);wso=r(rat,"convbert"),rat.forEach(t),Aso=r(mk," \u2014 "),rB=n(mk,"A",{href:!0});var tat=s(rB);Lso=r(tat,"ConvBertTokenizer"),tat.forEach(t),yso=r(mk," or "),tB=n(mk,"A",{href:!0});var aat=s(tB);xso=r(aat,"ConvBertTokenizerFast"),aat.forEach(t),$so=r(mk," (ConvBERT model)"),mk.forEach(t),kso=i(S),Un=n(S,"LI",{});var gk=s(Un);Ese=n(gk,"STRONG",{});var nat=s(Ese);Sso=r(nat,"cpm"),nat.forEach(t),Rso=r(gk," \u2014 "),aB=n(gk,"A",{href:!0});var sat=s(aB);Pso=r(sat,"CpmTokenizer"),sat.forEach(t),Bso=r(gk," or "),nB=n(gk,"A",{href:!0});var lat=s(nB);Nso=r(lat,"CpmTokenizerFast"),lat.forEach(t),Iso=r(gk," (CPM model)"),gk.forEach(t),qso=i(S),rh=n(S,"LI",{});var lLe=s(rh);Cse=n(lLe,"STRONG",{});var iat=s(Cse);jso=r(iat,"ctrl"),iat.forEach(t),Dso=r(lLe," \u2014 "),sB=n(lLe,"A",{href:!0});var dat=s(sB);Gso=r(dat,"CTRLTokenizer"),dat.forEach(t),Oso=r(lLe," (CTRL model)"),lLe.forEach(t),Vso=i(S),Jn=n(S,"LI",{});var hk=s(Jn);wse=n(hk,"STRONG",{});var cat=s(wse);Xso=r(cat,"data2vec-text"),cat.forEach(t),zso=r(hk," \u2014 "),lB=n(hk,"A",{href:!0});var fat=s(lB);Qso=r(fat,"RobertaTokenizer"),fat.forEach(t),Wso=r(hk," or "),iB=n(hk,"A",{href:!0});var mat=s(iB);Hso=r(mat,"RobertaTokenizerFast"),mat.forEach(t),Uso=r(hk," (Data2VecText model)"),hk.forEach(t),Jso=i(S),Yn=n(S,"LI",{});var pk=s(Yn);Ase=n(pk,"STRONG",{});var gat=s(Ase);Yso=r(gat,"deberta"),gat.forEach(t),Kso=r(pk," \u2014 "),dB=n(pk,"A",{href:!0});var hat=s(dB);Zso=r(hat,"DebertaTokenizer"),hat.forEach(t),elo=r(pk," or "),cB=n(pk,"A",{href:!0});var pat=s(cB);olo=r(pat,"DebertaTokenizerFast"),pat.forEach(t),rlo=r(pk," (DeBERTa model)"),pk.forEach(t),tlo=i(S),Kn=n(S,"LI",{});var _k=s(Kn);Lse=n(_k,"STRONG",{});var _at=s(Lse);alo=r(_at,"deberta-v2"),_at.forEach(t),nlo=r(_k," \u2014 "),fB=n(_k,"A",{href:!0});var uat=s(fB);slo=r(uat,"DebertaV2Tokenizer"),uat.forEach(t),llo=r(_k," or "),mB=n(_k,"A",{href:!0});var bat=s(mB);ilo=r(bat,"DebertaV2TokenizerFast"),bat.forEach(t),dlo=r(_k," (DeBERTa-v2 model)"),_k.forEach(t),clo=i(S),Zn=n(S,"LI",{});var uk=s(Zn);yse=n(uk,"STRONG",{});var vat=s(yse);flo=r(vat,"distilbert"),vat.forEach(t),mlo=r(uk," \u2014 "),gB=n(uk,"A",{href:!0});var Fat=s(gB);glo=r(Fat,"DistilBertTokenizer"),Fat.forEach(t),hlo=r(uk," or "),hB=n(uk,"A",{href:!0});var Tat=s(hB);plo=r(Tat,"DistilBertTokenizerFast"),Tat.forEach(t),_lo=r(uk," (DistilBERT model)"),uk.forEach(t),ulo=i(S),es=n(S,"LI",{});var bk=s(es);xse=n(bk,"STRONG",{});var Mat=s(xse);blo=r(Mat,"dpr"),Mat.forEach(t),vlo=r(bk," \u2014 "),pB=n(bk,"A",{href:!0});var Eat=s(pB);Flo=r(Eat,"DPRQuestionEncoderTokenizer"),Eat.forEach(t),Tlo=r(bk," or "),_B=n(bk,"A",{href:!0});var Cat=s(_B);Mlo=r(Cat,"DPRQuestionEncoderTokenizerFast"),Cat.forEach(t),Elo=r(bk," (DPR model)"),bk.forEach(t),Clo=i(S),os=n(S,"LI",{});var vk=s(os);$se=n(vk,"STRONG",{});var wat=s($se);wlo=r(wat,"electra"),wat.forEach(t),Alo=r(vk," \u2014 "),uB=n(vk,"A",{href:!0});var Aat=s(uB);Llo=r(Aat,"ElectraTokenizer"),Aat.forEach(t),ylo=r(vk," or "),bB=n(vk,"A",{href:!0});var Lat=s(bB);xlo=r(Lat,"ElectraTokenizerFast"),Lat.forEach(t),$lo=r(vk," (ELECTRA model)"),vk.forEach(t),klo=i(S),th=n(S,"LI",{});var iLe=s(th);kse=n(iLe,"STRONG",{});var yat=s(kse);Slo=r(yat,"flaubert"),yat.forEach(t),Rlo=r(iLe," \u2014 "),vB=n(iLe,"A",{href:!0});var xat=s(vB);Plo=r(xat,"FlaubertTokenizer"),xat.forEach(t),Blo=r(iLe," (FlauBERT model)"),iLe.forEach(t),Nlo=i(S),rs=n(S,"LI",{});var Fk=s(rs);Sse=n(Fk,"STRONG",{});var $at=s(Sse);Ilo=r($at,"fnet"),$at.forEach(t),qlo=r(Fk," \u2014 "),FB=n(Fk,"A",{href:!0});var kat=s(FB);jlo=r(kat,"FNetTokenizer"),kat.forEach(t),Dlo=r(Fk," or "),TB=n(Fk,"A",{href:!0});var Sat=s(TB);Glo=r(Sat,"FNetTokenizerFast"),Sat.forEach(t),Olo=r(Fk," (FNet model)"),Fk.forEach(t),Vlo=i(S),ah=n(S,"LI",{});var dLe=s(ah);Rse=n(dLe,"STRONG",{});var Rat=s(Rse);Xlo=r(Rat,"fsmt"),Rat.forEach(t),zlo=r(dLe," \u2014 "),MB=n(dLe,"A",{href:!0});var Pat=s(MB);Qlo=r(Pat,"FSMTTokenizer"),Pat.forEach(t),Wlo=r(dLe," (FairSeq Machine-Translation model)"),dLe.forEach(t),Hlo=i(S),ts=n(S,"LI",{});var Tk=s(ts);Pse=n(Tk,"STRONG",{});var Bat=s(Pse);Ulo=r(Bat,"funnel"),Bat.forEach(t),Jlo=r(Tk," \u2014 "),EB=n(Tk,"A",{href:!0});var Nat=s(EB);Ylo=r(Nat,"FunnelTokenizer"),Nat.forEach(t),Klo=r(Tk," or "),CB=n(Tk,"A",{href:!0});var Iat=s(CB);Zlo=r(Iat,"FunnelTokenizerFast"),Iat.forEach(t),eio=r(Tk," (Funnel Transformer model)"),Tk.forEach(t),oio=i(S),as=n(S,"LI",{});var Mk=s(as);Bse=n(Mk,"STRONG",{});var qat=s(Bse);rio=r(qat,"gpt2"),qat.forEach(t),tio=r(Mk," \u2014 "),wB=n(Mk,"A",{href:!0});var jat=s(wB);aio=r(jat,"GPT2Tokenizer"),jat.forEach(t),nio=r(Mk," or "),AB=n(Mk,"A",{href:!0});var Dat=s(AB);sio=r(Dat,"GPT2TokenizerFast"),Dat.forEach(t),lio=r(Mk," (OpenAI GPT-2 model)"),Mk.forEach(t),iio=i(S),ns=n(S,"LI",{});var Ek=s(ns);Nse=n(Ek,"STRONG",{});var Gat=s(Nse);dio=r(Gat,"gpt_neo"),Gat.forEach(t),cio=r(Ek," \u2014 "),LB=n(Ek,"A",{href:!0});var Oat=s(LB);fio=r(Oat,"GPT2Tokenizer"),Oat.forEach(t),mio=r(Ek," or "),yB=n(Ek,"A",{href:!0});var Vat=s(yB);gio=r(Vat,"GPT2TokenizerFast"),Vat.forEach(t),hio=r(Ek," (GPT Neo model)"),Ek.forEach(t),pio=i(S),nh=n(S,"LI",{});var cLe=s(nh);Ise=n(cLe,"STRONG",{});var Xat=s(Ise);_io=r(Xat,"gpt_neox"),Xat.forEach(t),uio=r(cLe," \u2014 "),xB=n(cLe,"A",{href:!0});var zat=s(xB);bio=r(zat,"GPTNeoXTokenizerFast"),zat.forEach(t),vio=r(cLe," (GPT NeoX model)"),cLe.forEach(t),Fio=i(S),ss=n(S,"LI",{});var Ck=s(ss);qse=n(Ck,"STRONG",{});var Qat=s(qse);Tio=r(Qat,"gptj"),Qat.forEach(t),Mio=r(Ck," \u2014 "),$B=n(Ck,"A",{href:!0});var Wat=s($B);Eio=r(Wat,"GPT2Tokenizer"),Wat.forEach(t),Cio=r(Ck," or "),kB=n(Ck,"A",{href:!0});var Hat=s(kB);wio=r(Hat,"GPT2TokenizerFast"),Hat.forEach(t),Aio=r(Ck," (GPT-J model)"),Ck.forEach(t),Lio=i(S),ls=n(S,"LI",{});var wk=s(ls);jse=n(wk,"STRONG",{});var Uat=s(jse);yio=r(Uat,"herbert"),Uat.forEach(t),xio=r(wk," \u2014 "),SB=n(wk,"A",{href:!0});var Jat=s(SB);$io=r(Jat,"HerbertTokenizer"),Jat.forEach(t),kio=r(wk," or "),RB=n(wk,"A",{href:!0});var Yat=s(RB);Sio=r(Yat,"HerbertTokenizerFast"),Yat.forEach(t),Rio=r(wk," (HerBERT model)"),wk.forEach(t),Pio=i(S),sh=n(S,"LI",{});var fLe=s(sh);Dse=n(fLe,"STRONG",{});var Kat=s(Dse);Bio=r(Kat,"hubert"),Kat.forEach(t),Nio=r(fLe," \u2014 "),PB=n(fLe,"A",{href:!0});var Zat=s(PB);Iio=r(Zat,"Wav2Vec2CTCTokenizer"),Zat.forEach(t),qio=r(fLe," (Hubert model)"),fLe.forEach(t),jio=i(S),is=n(S,"LI",{});var Ak=s(is);Gse=n(Ak,"STRONG",{});var ent=s(Gse);Dio=r(ent,"ibert"),ent.forEach(t),Gio=r(Ak," \u2014 "),BB=n(Ak,"A",{href:!0});var ont=s(BB);Oio=r(ont,"RobertaTokenizer"),ont.forEach(t),Vio=r(Ak," or "),NB=n(Ak,"A",{href:!0});var rnt=s(NB);Xio=r(rnt,"RobertaTokenizerFast"),rnt.forEach(t),zio=r(Ak," (I-BERT model)"),Ak.forEach(t),Qio=i(S),ds=n(S,"LI",{});var Lk=s(ds);Ose=n(Lk,"STRONG",{});var tnt=s(Ose);Wio=r(tnt,"layoutlm"),tnt.forEach(t),Hio=r(Lk," \u2014 "),IB=n(Lk,"A",{href:!0});var ant=s(IB);Uio=r(ant,"LayoutLMTokenizer"),ant.forEach(t),Jio=r(Lk," or "),qB=n(Lk,"A",{href:!0});var nnt=s(qB);Yio=r(nnt,"LayoutLMTokenizerFast"),nnt.forEach(t),Kio=r(Lk," (LayoutLM model)"),Lk.forEach(t),Zio=i(S),cs=n(S,"LI",{});var yk=s(cs);Vse=n(yk,"STRONG",{});var snt=s(Vse);edo=r(snt,"layoutlmv2"),snt.forEach(t),odo=r(yk," \u2014 "),jB=n(yk,"A",{href:!0});var lnt=s(jB);rdo=r(lnt,"LayoutLMv2Tokenizer"),lnt.forEach(t),tdo=r(yk," or "),DB=n(yk,"A",{href:!0});var int=s(DB);ado=r(int,"LayoutLMv2TokenizerFast"),int.forEach(t),ndo=r(yk," (LayoutLMv2 model)"),yk.forEach(t),sdo=i(S),fs=n(S,"LI",{});var xk=s(fs);Xse=n(xk,"STRONG",{});var dnt=s(Xse);ldo=r(dnt,"layoutlmv3"),dnt.forEach(t),ido=r(xk," \u2014 "),GB=n(xk,"A",{href:!0});var cnt=s(GB);ddo=r(cnt,"LayoutLMv3Tokenizer"),cnt.forEach(t),cdo=r(xk," or "),OB=n(xk,"A",{href:!0});var fnt=s(OB);fdo=r(fnt,"LayoutLMv3TokenizerFast"),fnt.forEach(t),mdo=r(xk," (LayoutLMv3 model)"),xk.forEach(t),gdo=i(S),ms=n(S,"LI",{});var $k=s(ms);zse=n($k,"STRONG",{});var mnt=s(zse);hdo=r(mnt,"layoutxlm"),mnt.forEach(t),pdo=r($k," \u2014 "),VB=n($k,"A",{href:!0});var gnt=s(VB);_do=r(gnt,"LayoutXLMTokenizer"),gnt.forEach(t),udo=r($k," or "),XB=n($k,"A",{href:!0});var hnt=s(XB);bdo=r(hnt,"LayoutXLMTokenizerFast"),hnt.forEach(t),vdo=r($k," (LayoutXLM model)"),$k.forEach(t),Fdo=i(S),gs=n(S,"LI",{});var kk=s(gs);Qse=n(kk,"STRONG",{});var pnt=s(Qse);Tdo=r(pnt,"led"),pnt.forEach(t),Mdo=r(kk," \u2014 "),zB=n(kk,"A",{href:!0});var _nt=s(zB);Edo=r(_nt,"LEDTokenizer"),_nt.forEach(t),Cdo=r(kk," or "),QB=n(kk,"A",{href:!0});var unt=s(QB);wdo=r(unt,"LEDTokenizerFast"),unt.forEach(t),Ado=r(kk," (LED model)"),kk.forEach(t),Ldo=i(S),hs=n(S,"LI",{});var Sk=s(hs);Wse=n(Sk,"STRONG",{});var bnt=s(Wse);ydo=r(bnt,"longformer"),bnt.forEach(t),xdo=r(Sk," \u2014 "),WB=n(Sk,"A",{href:!0});var vnt=s(WB);$do=r(vnt,"LongformerTokenizer"),vnt.forEach(t),kdo=r(Sk," or "),HB=n(Sk,"A",{href:!0});var Fnt=s(HB);Sdo=r(Fnt,"LongformerTokenizerFast"),Fnt.forEach(t),Rdo=r(Sk," (Longformer model)"),Sk.forEach(t),Pdo=i(S),ps=n(S,"LI",{});var Rk=s(ps);Hse=n(Rk,"STRONG",{});var Tnt=s(Hse);Bdo=r(Tnt,"longt5"),Tnt.forEach(t),Ndo=r(Rk," \u2014 "),UB=n(Rk,"A",{href:!0});var Mnt=s(UB);Ido=r(Mnt,"T5Tokenizer"),Mnt.forEach(t),qdo=r(Rk," or "),JB=n(Rk,"A",{href:!0});var Ent=s(JB);jdo=r(Ent,"T5TokenizerFast"),Ent.forEach(t),Ddo=r(Rk," (LongT5 model)"),Rk.forEach(t),Gdo=i(S),lh=n(S,"LI",{});var mLe=s(lh);Use=n(mLe,"STRONG",{});var Cnt=s(Use);Odo=r(Cnt,"luke"),Cnt.forEach(t),Vdo=r(mLe," \u2014 "),YB=n(mLe,"A",{href:!0});var wnt=s(YB);Xdo=r(wnt,"LukeTokenizer"),wnt.forEach(t),zdo=r(mLe," (LUKE model)"),mLe.forEach(t),Qdo=i(S),_s=n(S,"LI",{});var Pk=s(_s);Jse=n(Pk,"STRONG",{});var Ant=s(Jse);Wdo=r(Ant,"lxmert"),Ant.forEach(t),Hdo=r(Pk," \u2014 "),KB=n(Pk,"A",{href:!0});var Lnt=s(KB);Udo=r(Lnt,"LxmertTokenizer"),Lnt.forEach(t),Jdo=r(Pk," or "),ZB=n(Pk,"A",{href:!0});var ynt=s(ZB);Ydo=r(ynt,"LxmertTokenizerFast"),ynt.forEach(t),Kdo=r(Pk," (LXMERT model)"),Pk.forEach(t),Zdo=i(S),ih=n(S,"LI",{});var gLe=s(ih);Yse=n(gLe,"STRONG",{});var xnt=s(Yse);eco=r(xnt,"m2m_100"),xnt.forEach(t),oco=r(gLe," \u2014 "),eN=n(gLe,"A",{href:!0});var $nt=s(eN);rco=r($nt,"M2M100Tokenizer"),$nt.forEach(t),tco=r(gLe," (M2M100 model)"),gLe.forEach(t),aco=i(S),dh=n(S,"LI",{});var hLe=s(dh);Kse=n(hLe,"STRONG",{});var knt=s(Kse);nco=r(knt,"marian"),knt.forEach(t),sco=r(hLe," \u2014 "),oN=n(hLe,"A",{href:!0});var Snt=s(oN);lco=r(Snt,"MarianTokenizer"),Snt.forEach(t),ico=r(hLe," (Marian model)"),hLe.forEach(t),dco=i(S),us=n(S,"LI",{});var Bk=s(us);Zse=n(Bk,"STRONG",{});var Rnt=s(Zse);cco=r(Rnt,"mbart"),Rnt.forEach(t),fco=r(Bk," \u2014 "),rN=n(Bk,"A",{href:!0});var Pnt=s(rN);mco=r(Pnt,"MBartTokenizer"),Pnt.forEach(t),gco=r(Bk," or "),tN=n(Bk,"A",{href:!0});var Bnt=s(tN);hco=r(Bnt,"MBartTokenizerFast"),Bnt.forEach(t),pco=r(Bk," (mBART model)"),Bk.forEach(t),_co=i(S),bs=n(S,"LI",{});var Nk=s(bs);ele=n(Nk,"STRONG",{});var Nnt=s(ele);uco=r(Nnt,"mbart50"),Nnt.forEach(t),bco=r(Nk," \u2014 "),aN=n(Nk,"A",{href:!0});var Int=s(aN);vco=r(Int,"MBart50Tokenizer"),Int.forEach(t),Fco=r(Nk," or "),nN=n(Nk,"A",{href:!0});var qnt=s(nN);Tco=r(qnt,"MBart50TokenizerFast"),qnt.forEach(t),Mco=r(Nk," (mBART-50 model)"),Nk.forEach(t),Eco=i(S),vs=n(S,"LI",{});var Ik=s(vs);ole=n(Ik,"STRONG",{});var jnt=s(ole);Cco=r(jnt,"megatron-bert"),jnt.forEach(t),wco=r(Ik," \u2014 "),sN=n(Ik,"A",{href:!0});var Dnt=s(sN);Aco=r(Dnt,"BertTokenizer"),Dnt.forEach(t),Lco=r(Ik," or "),lN=n(Ik,"A",{href:!0});var Gnt=s(lN);yco=r(Gnt,"BertTokenizerFast"),Gnt.forEach(t),xco=r(Ik," (Megatron-BERT model)"),Ik.forEach(t),$co=i(S),ch=n(S,"LI",{});var pLe=s(ch);rle=n(pLe,"STRONG",{});var Ont=s(rle);kco=r(Ont,"mluke"),Ont.forEach(t),Sco=r(pLe," \u2014 "),iN=n(pLe,"A",{href:!0});var Vnt=s(iN);Rco=r(Vnt,"MLukeTokenizer"),Vnt.forEach(t),Pco=r(pLe," (mLUKE model)"),pLe.forEach(t),Bco=i(S),Fs=n(S,"LI",{});var qk=s(Fs);tle=n(qk,"STRONG",{});var Xnt=s(tle);Nco=r(Xnt,"mobilebert"),Xnt.forEach(t),Ico=r(qk," \u2014 "),dN=n(qk,"A",{href:!0});var znt=s(dN);qco=r(znt,"MobileBertTokenizer"),znt.forEach(t),jco=r(qk," or "),cN=n(qk,"A",{href:!0});var Qnt=s(cN);Dco=r(Qnt,"MobileBertTokenizerFast"),Qnt.forEach(t),Gco=r(qk," (MobileBERT model)"),qk.forEach(t),Oco=i(S),Ts=n(S,"LI",{});var jk=s(Ts);ale=n(jk,"STRONG",{});var Wnt=s(ale);Vco=r(Wnt,"mpnet"),Wnt.forEach(t),Xco=r(jk," \u2014 "),fN=n(jk,"A",{href:!0});var Hnt=s(fN);zco=r(Hnt,"MPNetTokenizer"),Hnt.forEach(t),Qco=r(jk," or "),mN=n(jk,"A",{href:!0});var Unt=s(mN);Wco=r(Unt,"MPNetTokenizerFast"),Unt.forEach(t),Hco=r(jk," (MPNet model)"),jk.forEach(t),Uco=i(S),Ms=n(S,"LI",{});var Dk=s(Ms);nle=n(Dk,"STRONG",{});var Jnt=s(nle);Jco=r(Jnt,"mt5"),Jnt.forEach(t),Yco=r(Dk," \u2014 "),gN=n(Dk,"A",{href:!0});var Ynt=s(gN);Kco=r(Ynt,"MT5Tokenizer"),Ynt.forEach(t),Zco=r(Dk," or "),hN=n(Dk,"A",{href:!0});var Knt=s(hN);efo=r(Knt,"MT5TokenizerFast"),Knt.forEach(t),ofo=r(Dk," (MT5 model)"),Dk.forEach(t),rfo=i(S),Es=n(S,"LI",{});var Gk=s(Es);sle=n(Gk,"STRONG",{});var Znt=s(sle);tfo=r(Znt,"nezha"),Znt.forEach(t),afo=r(Gk," \u2014 "),pN=n(Gk,"A",{href:!0});var est=s(pN);nfo=r(est,"BertTokenizer"),est.forEach(t),sfo=r(Gk," or "),_N=n(Gk,"A",{href:!0});var ost=s(_N);lfo=r(ost,"BertTokenizerFast"),ost.forEach(t),ifo=r(Gk," (Nezha model)"),Gk.forEach(t),dfo=i(S),Cs=n(S,"LI",{});var Ok=s(Cs);lle=n(Ok,"STRONG",{});var rst=s(lle);cfo=r(rst,"nystromformer"),rst.forEach(t),ffo=r(Ok," \u2014 "),uN=n(Ok,"A",{href:!0});var tst=s(uN);mfo=r(tst,"AlbertTokenizer"),tst.forEach(t),gfo=r(Ok," or "),bN=n(Ok,"A",{href:!0});var ast=s(bN);hfo=r(ast,"AlbertTokenizerFast"),ast.forEach(t),pfo=r(Ok," (Nystr\xF6mformer model)"),Ok.forEach(t),_fo=i(S),ws=n(S,"LI",{});var Vk=s(ws);ile=n(Vk,"STRONG",{});var nst=s(ile);ufo=r(nst,"openai-gpt"),nst.forEach(t),bfo=r(Vk," \u2014 "),vN=n(Vk,"A",{href:!0});var sst=s(vN);vfo=r(sst,"OpenAIGPTTokenizer"),sst.forEach(t),Ffo=r(Vk," or "),FN=n(Vk,"A",{href:!0});var lst=s(FN);Tfo=r(lst,"OpenAIGPTTokenizerFast"),lst.forEach(t),Mfo=r(Vk," (OpenAI GPT model)"),Vk.forEach(t),Efo=i(S),fh=n(S,"LI",{});var _Le=s(fh);dle=n(_Le,"STRONG",{});var ist=s(dle);Cfo=r(ist,"opt"),ist.forEach(t),wfo=r(_Le," \u2014 "),TN=n(_Le,"A",{href:!0});var dst=s(TN);Afo=r(dst,"GPT2Tokenizer"),dst.forEach(t),Lfo=r(_Le," (OPT model)"),_Le.forEach(t),yfo=i(S),As=n(S,"LI",{});var Xk=s(As);cle=n(Xk,"STRONG",{});var cst=s(cle);xfo=r(cst,"pegasus"),cst.forEach(t),$fo=r(Xk," \u2014 "),MN=n(Xk,"A",{href:!0});var fst=s(MN);kfo=r(fst,"PegasusTokenizer"),fst.forEach(t),Sfo=r(Xk," or "),EN=n(Xk,"A",{href:!0});var mst=s(EN);Rfo=r(mst,"PegasusTokenizerFast"),mst.forEach(t),Pfo=r(Xk," (Pegasus model)"),Xk.forEach(t),Bfo=i(S),mh=n(S,"LI",{});var uLe=s(mh);fle=n(uLe,"STRONG",{});var gst=s(fle);Nfo=r(gst,"perceiver"),gst.forEach(t),Ifo=r(uLe," \u2014 "),CN=n(uLe,"A",{href:!0});var hst=s(CN);qfo=r(hst,"PerceiverTokenizer"),hst.forEach(t),jfo=r(uLe," (Perceiver model)"),uLe.forEach(t),Dfo=i(S),gh=n(S,"LI",{});var bLe=s(gh);mle=n(bLe,"STRONG",{});var pst=s(mle);Gfo=r(pst,"phobert"),pst.forEach(t),Ofo=r(bLe," \u2014 "),wN=n(bLe,"A",{href:!0});var _st=s(wN);Vfo=r(_st,"PhobertTokenizer"),_st.forEach(t),Xfo=r(bLe," (PhoBERT model)"),bLe.forEach(t),zfo=i(S),hh=n(S,"LI",{});var vLe=s(hh);gle=n(vLe,"STRONG",{});var ust=s(gle);Qfo=r(ust,"plbart"),ust.forEach(t),Wfo=r(vLe," \u2014 "),AN=n(vLe,"A",{href:!0});var bst=s(AN);Hfo=r(bst,"PLBartTokenizer"),bst.forEach(t),Ufo=r(vLe," (PLBart model)"),vLe.forEach(t),Jfo=i(S),ph=n(S,"LI",{});var FLe=s(ph);hle=n(FLe,"STRONG",{});var vst=s(hle);Yfo=r(vst,"prophetnet"),vst.forEach(t),Kfo=r(FLe," \u2014 "),LN=n(FLe,"A",{href:!0});var Fst=s(LN);Zfo=r(Fst,"ProphetNetTokenizer"),Fst.forEach(t),emo=r(FLe," (ProphetNet model)"),FLe.forEach(t),omo=i(S),Ls=n(S,"LI",{});var zk=s(Ls);ple=n(zk,"STRONG",{});var Tst=s(ple);rmo=r(Tst,"qdqbert"),Tst.forEach(t),tmo=r(zk," \u2014 "),yN=n(zk,"A",{href:!0});var Mst=s(yN);amo=r(Mst,"BertTokenizer"),Mst.forEach(t),nmo=r(zk," or "),xN=n(zk,"A",{href:!0});var Est=s(xN);smo=r(Est,"BertTokenizerFast"),Est.forEach(t),lmo=r(zk," (QDQBert model)"),zk.forEach(t),imo=i(S),_h=n(S,"LI",{});var TLe=s(_h);_le=n(TLe,"STRONG",{});var Cst=s(_le);dmo=r(Cst,"rag"),Cst.forEach(t),cmo=r(TLe," \u2014 "),$N=n(TLe,"A",{href:!0});var wst=s($N);fmo=r(wst,"RagTokenizer"),wst.forEach(t),mmo=r(TLe," (RAG model)"),TLe.forEach(t),gmo=i(S),ys=n(S,"LI",{});var Qk=s(ys);ule=n(Qk,"STRONG",{});var Ast=s(ule);hmo=r(Ast,"realm"),Ast.forEach(t),pmo=r(Qk," \u2014 "),kN=n(Qk,"A",{href:!0});var Lst=s(kN);_mo=r(Lst,"RealmTokenizer"),Lst.forEach(t),umo=r(Qk," or "),SN=n(Qk,"A",{href:!0});var yst=s(SN);bmo=r(yst,"RealmTokenizerFast"),yst.forEach(t),vmo=r(Qk," (REALM model)"),Qk.forEach(t),Fmo=i(S),xs=n(S,"LI",{});var Wk=s(xs);ble=n(Wk,"STRONG",{});var xst=s(ble);Tmo=r(xst,"reformer"),xst.forEach(t),Mmo=r(Wk," \u2014 "),RN=n(Wk,"A",{href:!0});var $st=s(RN);Emo=r($st,"ReformerTokenizer"),$st.forEach(t),Cmo=r(Wk," or "),PN=n(Wk,"A",{href:!0});var kst=s(PN);wmo=r(kst,"ReformerTokenizerFast"),kst.forEach(t),Amo=r(Wk," (Reformer model)"),Wk.forEach(t),Lmo=i(S),$s=n(S,"LI",{});var Hk=s($s);vle=n(Hk,"STRONG",{});var Sst=s(vle);ymo=r(Sst,"rembert"),Sst.forEach(t),xmo=r(Hk," \u2014 "),BN=n(Hk,"A",{href:!0});var Rst=s(BN);$mo=r(Rst,"RemBertTokenizer"),Rst.forEach(t),kmo=r(Hk," or "),NN=n(Hk,"A",{href:!0});var Pst=s(NN);Smo=r(Pst,"RemBertTokenizerFast"),Pst.forEach(t),Rmo=r(Hk," (RemBERT model)"),Hk.forEach(t),Pmo=i(S),ks=n(S,"LI",{});var Uk=s(ks);Fle=n(Uk,"STRONG",{});var Bst=s(Fle);Bmo=r(Bst,"retribert"),Bst.forEach(t),Nmo=r(Uk," \u2014 "),IN=n(Uk,"A",{href:!0});var Nst=s(IN);Imo=r(Nst,"RetriBertTokenizer"),Nst.forEach(t),qmo=r(Uk," or "),qN=n(Uk,"A",{href:!0});var Ist=s(qN);jmo=r(Ist,"RetriBertTokenizerFast"),Ist.forEach(t),Dmo=r(Uk," (RetriBERT model)"),Uk.forEach(t),Gmo=i(S),Ss=n(S,"LI",{});var Jk=s(Ss);Tle=n(Jk,"STRONG",{});var qst=s(Tle);Omo=r(qst,"roberta"),qst.forEach(t),Vmo=r(Jk," \u2014 "),jN=n(Jk,"A",{href:!0});var jst=s(jN);Xmo=r(jst,"RobertaTokenizer"),jst.forEach(t),zmo=r(Jk," or "),DN=n(Jk,"A",{href:!0});var Dst=s(DN);Qmo=r(Dst,"RobertaTokenizerFast"),Dst.forEach(t),Wmo=r(Jk," (RoBERTa model)"),Jk.forEach(t),Hmo=i(S),Rs=n(S,"LI",{});var Yk=s(Rs);Mle=n(Yk,"STRONG",{});var Gst=s(Mle);Umo=r(Gst,"roformer"),Gst.forEach(t),Jmo=r(Yk," \u2014 "),GN=n(Yk,"A",{href:!0});var Ost=s(GN);Ymo=r(Ost,"RoFormerTokenizer"),Ost.forEach(t),Kmo=r(Yk," or "),ON=n(Yk,"A",{href:!0});var Vst=s(ON);Zmo=r(Vst,"RoFormerTokenizerFast"),Vst.forEach(t),ego=r(Yk," (RoFormer model)"),Yk.forEach(t),ogo=i(S),uh=n(S,"LI",{});var MLe=s(uh);Ele=n(MLe,"STRONG",{});var Xst=s(Ele);rgo=r(Xst,"speech_to_text"),Xst.forEach(t),tgo=r(MLe," \u2014 "),VN=n(MLe,"A",{href:!0});var zst=s(VN);ago=r(zst,"Speech2TextTokenizer"),zst.forEach(t),ngo=r(MLe," (Speech2Text model)"),MLe.forEach(t),sgo=i(S),bh=n(S,"LI",{});var ELe=s(bh);Cle=n(ELe,"STRONG",{});var Qst=s(Cle);lgo=r(Qst,"speech_to_text_2"),Qst.forEach(t),igo=r(ELe," \u2014 "),XN=n(ELe,"A",{href:!0});var Wst=s(XN);dgo=r(Wst,"Speech2Text2Tokenizer"),Wst.forEach(t),cgo=r(ELe," (Speech2Text2 model)"),ELe.forEach(t),fgo=i(S),Ps=n(S,"LI",{});var Kk=s(Ps);wle=n(Kk,"STRONG",{});var Hst=s(wle);mgo=r(Hst,"splinter"),Hst.forEach(t),ggo=r(Kk," \u2014 "),zN=n(Kk,"A",{href:!0});var Ust=s(zN);hgo=r(Ust,"SplinterTokenizer"),Ust.forEach(t),pgo=r(Kk," or "),QN=n(Kk,"A",{href:!0});var Jst=s(QN);_go=r(Jst,"SplinterTokenizerFast"),Jst.forEach(t),ugo=r(Kk," (Splinter model)"),Kk.forEach(t),bgo=i(S),Bs=n(S,"LI",{});var Zk=s(Bs);Ale=n(Zk,"STRONG",{});var Yst=s(Ale);vgo=r(Yst,"squeezebert"),Yst.forEach(t),Fgo=r(Zk," \u2014 "),WN=n(Zk,"A",{href:!0});var Kst=s(WN);Tgo=r(Kst,"SqueezeBertTokenizer"),Kst.forEach(t),Mgo=r(Zk," or "),HN=n(Zk,"A",{href:!0});var Zst=s(HN);Ego=r(Zst,"SqueezeBertTokenizerFast"),Zst.forEach(t),Cgo=r(Zk," (SqueezeBERT model)"),Zk.forEach(t),wgo=i(S),Ns=n(S,"LI",{});var eS=s(Ns);Lle=n(eS,"STRONG",{});var elt=s(Lle);Ago=r(elt,"t5"),elt.forEach(t),Lgo=r(eS," \u2014 "),UN=n(eS,"A",{href:!0});var olt=s(UN);ygo=r(olt,"T5Tokenizer"),olt.forEach(t),xgo=r(eS," or "),JN=n(eS,"A",{href:!0});var rlt=s(JN);$go=r(rlt,"T5TokenizerFast"),rlt.forEach(t),kgo=r(eS," (T5 model)"),eS.forEach(t),Sgo=i(S),vh=n(S,"LI",{});var CLe=s(vh);yle=n(CLe,"STRONG",{});var tlt=s(yle);Rgo=r(tlt,"tapas"),tlt.forEach(t),Pgo=r(CLe," \u2014 "),YN=n(CLe,"A",{href:!0});var alt=s(YN);Bgo=r(alt,"TapasTokenizer"),alt.forEach(t),Ngo=r(CLe," (TAPAS model)"),CLe.forEach(t),Igo=i(S),Fh=n(S,"LI",{});var wLe=s(Fh);xle=n(wLe,"STRONG",{});var nlt=s(xle);qgo=r(nlt,"tapex"),nlt.forEach(t),jgo=r(wLe," \u2014 "),KN=n(wLe,"A",{href:!0});var slt=s(KN);Dgo=r(slt,"TapexTokenizer"),slt.forEach(t),Ggo=r(wLe," (TAPEX model)"),wLe.forEach(t),Ogo=i(S),Th=n(S,"LI",{});var ALe=s(Th);$le=n(ALe,"STRONG",{});var llt=s($le);Vgo=r(llt,"transfo-xl"),llt.forEach(t),Xgo=r(ALe," \u2014 "),ZN=n(ALe,"A",{href:!0});var ilt=s(ZN);zgo=r(ilt,"TransfoXLTokenizer"),ilt.forEach(t),Qgo=r(ALe," (Transformer-XL model)"),ALe.forEach(t),Wgo=i(S),Is=n(S,"LI",{});var oS=s(Is);kle=n(oS,"STRONG",{});var dlt=s(kle);Hgo=r(dlt,"vilt"),dlt.forEach(t),Ugo=r(oS," \u2014 "),eI=n(oS,"A",{href:!0});var clt=s(eI);Jgo=r(clt,"BertTokenizer"),clt.forEach(t),Ygo=r(oS," or "),oI=n(oS,"A",{href:!0});var flt=s(oI);Kgo=r(flt,"BertTokenizerFast"),flt.forEach(t),Zgo=r(oS," (ViLT model)"),oS.forEach(t),eho=i(S),qs=n(S,"LI",{});var rS=s(qs);Sle=n(rS,"STRONG",{});var mlt=s(Sle);oho=r(mlt,"visual_bert"),mlt.forEach(t),rho=r(rS," \u2014 "),rI=n(rS,"A",{href:!0});var glt=s(rI);tho=r(glt,"BertTokenizer"),glt.forEach(t),aho=r(rS," or "),tI=n(rS,"A",{href:!0});var hlt=s(tI);nho=r(hlt,"BertTokenizerFast"),hlt.forEach(t),sho=r(rS," (VisualBERT model)"),rS.forEach(t),lho=i(S),Mh=n(S,"LI",{});var LLe=s(Mh);Rle=n(LLe,"STRONG",{});var plt=s(Rle);iho=r(plt,"wav2vec2"),plt.forEach(t),dho=r(LLe," \u2014 "),aI=n(LLe,"A",{href:!0});var _lt=s(aI);cho=r(_lt,"Wav2Vec2CTCTokenizer"),_lt.forEach(t),fho=r(LLe," (Wav2Vec2 model)"),LLe.forEach(t),mho=i(S),Eh=n(S,"LI",{});var yLe=s(Eh);Ple=n(yLe,"STRONG",{});var ult=s(Ple);gho=r(ult,"wav2vec2-conformer"),ult.forEach(t),hho=r(yLe," \u2014 "),nI=n(yLe,"A",{href:!0});var blt=s(nI);pho=r(blt,"Wav2Vec2CTCTokenizer"),blt.forEach(t),_ho=r(yLe," (Wav2Vec2-Conformer model)"),yLe.forEach(t),uho=i(S),Ch=n(S,"LI",{});var xLe=s(Ch);Ble=n(xLe,"STRONG",{});var vlt=s(Ble);bho=r(vlt,"wav2vec2_phoneme"),vlt.forEach(t),vho=r(xLe," \u2014 "),sI=n(xLe,"A",{href:!0});var Flt=s(sI);Fho=r(Flt,"Wav2Vec2PhonemeCTCTokenizer"),Flt.forEach(t),Tho=r(xLe," (Wav2Vec2Phoneme model)"),xLe.forEach(t),Mho=i(S),js=n(S,"LI",{});var tS=s(js);Nle=n(tS,"STRONG",{});var Tlt=s(Nle);Eho=r(Tlt,"xglm"),Tlt.forEach(t),Cho=r(tS," \u2014 "),lI=n(tS,"A",{href:!0});var Mlt=s(lI);who=r(Mlt,"XGLMTokenizer"),Mlt.forEach(t),Aho=r(tS," or "),iI=n(tS,"A",{href:!0});var Elt=s(iI);Lho=r(Elt,"XGLMTokenizerFast"),Elt.forEach(t),yho=r(tS," (XGLM model)"),tS.forEach(t),xho=i(S),wh=n(S,"LI",{});var $Le=s(wh);Ile=n($Le,"STRONG",{});var Clt=s(Ile);$ho=r(Clt,"xlm"),Clt.forEach(t),kho=r($Le," \u2014 "),dI=n($Le,"A",{href:!0});var wlt=s(dI);Sho=r(wlt,"XLMTokenizer"),wlt.forEach(t),Rho=r($Le," (XLM model)"),$Le.forEach(t),Pho=i(S),Ah=n(S,"LI",{});var kLe=s(Ah);qle=n(kLe,"STRONG",{});var Alt=s(qle);Bho=r(Alt,"xlm-prophetnet"),Alt.forEach(t),Nho=r(kLe," \u2014 "),cI=n(kLe,"A",{href:!0});var Llt=s(cI);Iho=r(Llt,"XLMProphetNetTokenizer"),Llt.forEach(t),qho=r(kLe," (XLM-ProphetNet model)"),kLe.forEach(t),jho=i(S),Ds=n(S,"LI",{});var aS=s(Ds);jle=n(aS,"STRONG",{});var ylt=s(jle);Dho=r(ylt,"xlm-roberta"),ylt.forEach(t),Gho=r(aS," \u2014 "),fI=n(aS,"A",{href:!0});var xlt=s(fI);Oho=r(xlt,"XLMRobertaTokenizer"),xlt.forEach(t),Vho=r(aS," or "),mI=n(aS,"A",{href:!0});var $lt=s(mI);Xho=r($lt,"XLMRobertaTokenizerFast"),$lt.forEach(t),zho=r(aS," (XLM-RoBERTa model)"),aS.forEach(t),Qho=i(S),Gs=n(S,"LI",{});var nS=s(Gs);Dle=n(nS,"STRONG",{});var klt=s(Dle);Who=r(klt,"xlm-roberta-xl"),klt.forEach(t),Hho=r(nS," \u2014 "),gI=n(nS,"A",{href:!0});var Slt=s(gI);Uho=r(Slt,"RobertaTokenizer"),Slt.forEach(t),Jho=r(nS," or "),hI=n(nS,"A",{href:!0});var Rlt=s(hI);Yho=r(Rlt,"RobertaTokenizerFast"),Rlt.forEach(t),Kho=r(nS," (XLM-RoBERTa-XL model)"),nS.forEach(t),Zho=i(S),Os=n(S,"LI",{});var sS=s(Os);Gle=n(sS,"STRONG",{});var Plt=s(Gle);epo=r(Plt,"xlnet"),Plt.forEach(t),opo=r(sS," \u2014 "),pI=n(sS,"A",{href:!0});var Blt=s(pI);rpo=r(Blt,"XLNetTokenizer"),Blt.forEach(t),tpo=r(sS," or "),_I=n(sS,"A",{href:!0});var Nlt=s(_I);apo=r(Nlt,"XLNetTokenizerFast"),Nlt.forEach(t),npo=r(sS," (XLNet model)"),sS.forEach(t),spo=i(S),Vs=n(S,"LI",{});var lS=s(Vs);Ole=n(lS,"STRONG",{});var Ilt=s(Ole);lpo=r(Ilt,"yoso"),Ilt.forEach(t),ipo=r(lS," \u2014 "),uI=n(lS,"A",{href:!0});var qlt=s(uI);dpo=r(qlt,"AlbertTokenizer"),qlt.forEach(t),cpo=r(lS," or "),bI=n(lS,"A",{href:!0});var jlt=s(bI);fpo=r(jlt,"AlbertTokenizerFast"),jlt.forEach(t),mpo=r(lS," (YOSO model)"),lS.forEach(t),S.forEach(t),gpo=i(Us),T(Lh.$$.fragment,Us),Us.forEach(t),hpo=i(Hs),yh=n(Hs,"DIV",{class:!0});var SXe=s(yh);T(Y6.$$.fragment,SXe),ppo=i(SXe),Vle=n(SXe,"P",{});var Dlt=s(Vle);_po=r(Dlt,"Register a new tokenizer in this mapping."),Dlt.forEach(t),SXe.forEach(t),Hs.forEach(t),kOe=i(f),Pi=n(f,"H2",{class:!0});var RXe=s(Pi);xh=n(RXe,"A",{id:!0,class:!0,href:!0});var Glt=s(xh);Xle=n(Glt,"SPAN",{});var Olt=s(Xle);T(K6.$$.fragment,Olt),Olt.forEach(t),Glt.forEach(t),upo=i(RXe),zle=n(RXe,"SPAN",{});var Vlt=s(zle);bpo=r(Vlt,"AutoFeatureExtractor"),Vlt.forEach(t),RXe.forEach(t),SOe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(Z6.$$.fragment,Js),vpo=i(Js),eL=n(Js,"P",{});var PXe=s(eL);Fpo=r(PXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vI=n(PXe,"A",{href:!0});var Xlt=s(vI);Tpo=r(Xlt,"AutoFeatureExtractor.from_pretrained()"),Xlt.forEach(t),Mpo=r(PXe," class method."),PXe.forEach(t),Epo=i(Js),oL=n(Js,"P",{});var BXe=s(oL);Cpo=r(BXe,"This class cannot be instantiated directly using "),Qle=n(BXe,"CODE",{});var zlt=s(Qle);wpo=r(zlt,"__init__()"),zlt.forEach(t),Apo=r(BXe," (throws an error)."),BXe.forEach(t),Lpo=i(Js),He=n(Js,"DIV",{class:!0});var ta=s(He);T(rL.$$.fragment,ta),ypo=i(ta),Wle=n(ta,"P",{});var Qlt=s(Wle);xpo=r(Qlt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qlt.forEach(t),$po=i(ta),Ra=n(ta,"P",{});var Dw=s(Ra);kpo=r(Dw,"The feature extractor class to instantiate is selected based on the "),Hle=n(Dw,"CODE",{});var Wlt=s(Hle);Spo=r(Wlt,"model_type"),Wlt.forEach(t),Rpo=r(Dw,` property of the config object
(either passed as an argument or loaded from `),Ule=n(Dw,"CODE",{});var Hlt=s(Ule);Ppo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),Bpo=r(Dw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jle=n(Dw,"CODE",{});var Ult=s(Jle);Npo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),Ipo=r(Dw,":"),Dw.forEach(t),qpo=i(ta),Y=n(ta,"UL",{});var K=s(Y);$h=n(K,"LI",{});var SLe=s($h);Yle=n(SLe,"STRONG",{});var Jlt=s(Yle);jpo=r(Jlt,"beit"),Jlt.forEach(t),Dpo=r(SLe," \u2014 "),FI=n(SLe,"A",{href:!0});var Ylt=s(FI);Gpo=r(Ylt,"BeitFeatureExtractor"),Ylt.forEach(t),Opo=r(SLe," (BEiT model)"),SLe.forEach(t),Vpo=i(K),kh=n(K,"LI",{});var RLe=s(kh);Kle=n(RLe,"STRONG",{});var Klt=s(Kle);Xpo=r(Klt,"clip"),Klt.forEach(t),zpo=r(RLe," \u2014 "),TI=n(RLe,"A",{href:!0});var Zlt=s(TI);Qpo=r(Zlt,"CLIPFeatureExtractor"),Zlt.forEach(t),Wpo=r(RLe," (CLIP model)"),RLe.forEach(t),Hpo=i(K),Sh=n(K,"LI",{});var PLe=s(Sh);Zle=n(PLe,"STRONG",{});var eit=s(Zle);Upo=r(eit,"convnext"),eit.forEach(t),Jpo=r(PLe," \u2014 "),MI=n(PLe,"A",{href:!0});var oit=s(MI);Ypo=r(oit,"ConvNextFeatureExtractor"),oit.forEach(t),Kpo=r(PLe," (ConvNeXT model)"),PLe.forEach(t),Zpo=i(K),Rh=n(K,"LI",{});var BLe=s(Rh);eie=n(BLe,"STRONG",{});var rit=s(eie);e_o=r(rit,"cvt"),rit.forEach(t),o_o=r(BLe," \u2014 "),EI=n(BLe,"A",{href:!0});var tit=s(EI);r_o=r(tit,"ConvNextFeatureExtractor"),tit.forEach(t),t_o=r(BLe," (CvT model)"),BLe.forEach(t),a_o=i(K),Ph=n(K,"LI",{});var NLe=s(Ph);oie=n(NLe,"STRONG",{});var ait=s(oie);n_o=r(ait,"data2vec-audio"),ait.forEach(t),s_o=r(NLe," \u2014 "),CI=n(NLe,"A",{href:!0});var nit=s(CI);l_o=r(nit,"Wav2Vec2FeatureExtractor"),nit.forEach(t),i_o=r(NLe," (Data2VecAudio model)"),NLe.forEach(t),d_o=i(K),Bh=n(K,"LI",{});var ILe=s(Bh);rie=n(ILe,"STRONG",{});var sit=s(rie);c_o=r(sit,"data2vec-vision"),sit.forEach(t),f_o=r(ILe," \u2014 "),wI=n(ILe,"A",{href:!0});var lit=s(wI);m_o=r(lit,"BeitFeatureExtractor"),lit.forEach(t),g_o=r(ILe," (Data2VecVision model)"),ILe.forEach(t),h_o=i(K),Nh=n(K,"LI",{});var qLe=s(Nh);tie=n(qLe,"STRONG",{});var iit=s(tie);p_o=r(iit,"deit"),iit.forEach(t),__o=r(qLe," \u2014 "),AI=n(qLe,"A",{href:!0});var dit=s(AI);u_o=r(dit,"DeiTFeatureExtractor"),dit.forEach(t),b_o=r(qLe," (DeiT model)"),qLe.forEach(t),v_o=i(K),Ih=n(K,"LI",{});var jLe=s(Ih);aie=n(jLe,"STRONG",{});var cit=s(aie);F_o=r(cit,"detr"),cit.forEach(t),T_o=r(jLe," \u2014 "),LI=n(jLe,"A",{href:!0});var fit=s(LI);M_o=r(fit,"DetrFeatureExtractor"),fit.forEach(t),E_o=r(jLe," (DETR model)"),jLe.forEach(t),C_o=i(K),qh=n(K,"LI",{});var DLe=s(qh);nie=n(DLe,"STRONG",{});var mit=s(nie);w_o=r(mit,"dpt"),mit.forEach(t),A_o=r(DLe," \u2014 "),yI=n(DLe,"A",{href:!0});var git=s(yI);L_o=r(git,"DPTFeatureExtractor"),git.forEach(t),y_o=r(DLe," (DPT model)"),DLe.forEach(t),x_o=i(K),jh=n(K,"LI",{});var GLe=s(jh);sie=n(GLe,"STRONG",{});var hit=s(sie);$_o=r(hit,"flava"),hit.forEach(t),k_o=r(GLe," \u2014 "),xI=n(GLe,"A",{href:!0});var pit=s(xI);S_o=r(pit,"FlavaFeatureExtractor"),pit.forEach(t),R_o=r(GLe," (FLAVA model)"),GLe.forEach(t),P_o=i(K),Dh=n(K,"LI",{});var OLe=s(Dh);lie=n(OLe,"STRONG",{});var _it=s(lie);B_o=r(_it,"glpn"),_it.forEach(t),N_o=r(OLe," \u2014 "),$I=n(OLe,"A",{href:!0});var uit=s($I);I_o=r(uit,"GLPNFeatureExtractor"),uit.forEach(t),q_o=r(OLe," (GLPN model)"),OLe.forEach(t),j_o=i(K),Gh=n(K,"LI",{});var VLe=s(Gh);iie=n(VLe,"STRONG",{});var bit=s(iie);D_o=r(bit,"hubert"),bit.forEach(t),G_o=r(VLe," \u2014 "),kI=n(VLe,"A",{href:!0});var vit=s(kI);O_o=r(vit,"Wav2Vec2FeatureExtractor"),vit.forEach(t),V_o=r(VLe," (Hubert model)"),VLe.forEach(t),X_o=i(K),Oh=n(K,"LI",{});var XLe=s(Oh);die=n(XLe,"STRONG",{});var Fit=s(die);z_o=r(Fit,"imagegpt"),Fit.forEach(t),Q_o=r(XLe," \u2014 "),SI=n(XLe,"A",{href:!0});var Tit=s(SI);W_o=r(Tit,"ImageGPTFeatureExtractor"),Tit.forEach(t),H_o=r(XLe," (ImageGPT model)"),XLe.forEach(t),U_o=i(K),Vh=n(K,"LI",{});var zLe=s(Vh);cie=n(zLe,"STRONG",{});var Mit=s(cie);J_o=r(Mit,"layoutlmv2"),Mit.forEach(t),Y_o=r(zLe," \u2014 "),RI=n(zLe,"A",{href:!0});var Eit=s(RI);K_o=r(Eit,"LayoutLMv2FeatureExtractor"),Eit.forEach(t),Z_o=r(zLe," (LayoutLMv2 model)"),zLe.forEach(t),euo=i(K),Xh=n(K,"LI",{});var QLe=s(Xh);fie=n(QLe,"STRONG",{});var Cit=s(fie);ouo=r(Cit,"layoutlmv3"),Cit.forEach(t),ruo=r(QLe," \u2014 "),PI=n(QLe,"A",{href:!0});var wit=s(PI);tuo=r(wit,"LayoutLMv3FeatureExtractor"),wit.forEach(t),auo=r(QLe," (LayoutLMv3 model)"),QLe.forEach(t),nuo=i(K),zh=n(K,"LI",{});var WLe=s(zh);mie=n(WLe,"STRONG",{});var Ait=s(mie);suo=r(Ait,"levit"),Ait.forEach(t),luo=r(WLe," \u2014 "),BI=n(WLe,"A",{href:!0});var Lit=s(BI);iuo=r(Lit,"LevitFeatureExtractor"),Lit.forEach(t),duo=r(WLe," (LeViT model)"),WLe.forEach(t),cuo=i(K),Qh=n(K,"LI",{});var HLe=s(Qh);gie=n(HLe,"STRONG",{});var yit=s(gie);fuo=r(yit,"maskformer"),yit.forEach(t),muo=r(HLe," \u2014 "),NI=n(HLe,"A",{href:!0});var xit=s(NI);guo=r(xit,"MaskFormerFeatureExtractor"),xit.forEach(t),huo=r(HLe," (MaskFormer model)"),HLe.forEach(t),puo=i(K),Wh=n(K,"LI",{});var ULe=s(Wh);hie=n(ULe,"STRONG",{});var $it=s(hie);_uo=r($it,"mctct"),$it.forEach(t),uuo=r(ULe," \u2014 "),II=n(ULe,"A",{href:!0});var kit=s(II);buo=r(kit,"MCTCTFeatureExtractor"),kit.forEach(t),vuo=r(ULe," (M-CTC-T model)"),ULe.forEach(t),Fuo=i(K),Hh=n(K,"LI",{});var JLe=s(Hh);pie=n(JLe,"STRONG",{});var Sit=s(pie);Tuo=r(Sit,"mobilenet_v2"),Sit.forEach(t),Muo=r(JLe," \u2014 "),qI=n(JLe,"A",{href:!0});var Rit=s(qI);Euo=r(Rit,"MobileNetV2FeatureExtractor"),Rit.forEach(t),Cuo=r(JLe," (MobileNetV2 model)"),JLe.forEach(t),wuo=i(K),Uh=n(K,"LI",{});var YLe=s(Uh);_ie=n(YLe,"STRONG",{});var Pit=s(_ie);Auo=r(Pit,"perceiver"),Pit.forEach(t),Luo=r(YLe," \u2014 "),jI=n(YLe,"A",{href:!0});var Bit=s(jI);yuo=r(Bit,"PerceiverFeatureExtractor"),Bit.forEach(t),xuo=r(YLe," (Perceiver model)"),YLe.forEach(t),$uo=i(K),Jh=n(K,"LI",{});var KLe=s(Jh);uie=n(KLe,"STRONG",{});var Nit=s(uie);kuo=r(Nit,"poolformer"),Nit.forEach(t),Suo=r(KLe," \u2014 "),DI=n(KLe,"A",{href:!0});var Iit=s(DI);Ruo=r(Iit,"PoolFormerFeatureExtractor"),Iit.forEach(t),Puo=r(KLe," (PoolFormer model)"),KLe.forEach(t),Buo=i(K),Yh=n(K,"LI",{});var ZLe=s(Yh);bie=n(ZLe,"STRONG",{});var qit=s(bie);Nuo=r(qit,"regnet"),qit.forEach(t),Iuo=r(ZLe," \u2014 "),GI=n(ZLe,"A",{href:!0});var jit=s(GI);quo=r(jit,"ConvNextFeatureExtractor"),jit.forEach(t),juo=r(ZLe," (RegNet model)"),ZLe.forEach(t),Duo=i(K),Kh=n(K,"LI",{});var eye=s(Kh);vie=n(eye,"STRONG",{});var Dit=s(vie);Guo=r(Dit,"resnet"),Dit.forEach(t),Ouo=r(eye," \u2014 "),OI=n(eye,"A",{href:!0});var Git=s(OI);Vuo=r(Git,"ConvNextFeatureExtractor"),Git.forEach(t),Xuo=r(eye," (ResNet model)"),eye.forEach(t),zuo=i(K),Zh=n(K,"LI",{});var oye=s(Zh);Fie=n(oye,"STRONG",{});var Oit=s(Fie);Quo=r(Oit,"segformer"),Oit.forEach(t),Wuo=r(oye," \u2014 "),VI=n(oye,"A",{href:!0});var Vit=s(VI);Huo=r(Vit,"SegformerFeatureExtractor"),Vit.forEach(t),Uuo=r(oye," (SegFormer model)"),oye.forEach(t),Juo=i(K),ep=n(K,"LI",{});var rye=s(ep);Tie=n(rye,"STRONG",{});var Xit=s(Tie);Yuo=r(Xit,"speech_to_text"),Xit.forEach(t),Kuo=r(rye," \u2014 "),XI=n(rye,"A",{href:!0});var zit=s(XI);Zuo=r(zit,"Speech2TextFeatureExtractor"),zit.forEach(t),e1o=r(rye," (Speech2Text model)"),rye.forEach(t),o1o=i(K),op=n(K,"LI",{});var tye=s(op);Mie=n(tye,"STRONG",{});var Qit=s(Mie);r1o=r(Qit,"swin"),Qit.forEach(t),t1o=r(tye," \u2014 "),zI=n(tye,"A",{href:!0});var Wit=s(zI);a1o=r(Wit,"ViTFeatureExtractor"),Wit.forEach(t),n1o=r(tye," (Swin Transformer model)"),tye.forEach(t),s1o=i(K),rp=n(K,"LI",{});var aye=s(rp);Eie=n(aye,"STRONG",{});var Hit=s(Eie);l1o=r(Hit,"van"),Hit.forEach(t),i1o=r(aye," \u2014 "),QI=n(aye,"A",{href:!0});var Uit=s(QI);d1o=r(Uit,"ConvNextFeatureExtractor"),Uit.forEach(t),c1o=r(aye," (VAN model)"),aye.forEach(t),f1o=i(K),tp=n(K,"LI",{});var nye=s(tp);Cie=n(nye,"STRONG",{});var Jit=s(Cie);m1o=r(Jit,"vilt"),Jit.forEach(t),g1o=r(nye," \u2014 "),WI=n(nye,"A",{href:!0});var Yit=s(WI);h1o=r(Yit,"ViltFeatureExtractor"),Yit.forEach(t),p1o=r(nye," (ViLT model)"),nye.forEach(t),_1o=i(K),ap=n(K,"LI",{});var sye=s(ap);wie=n(sye,"STRONG",{});var Kit=s(wie);u1o=r(Kit,"vit"),Kit.forEach(t),b1o=r(sye," \u2014 "),HI=n(sye,"A",{href:!0});var Zit=s(HI);v1o=r(Zit,"ViTFeatureExtractor"),Zit.forEach(t),F1o=r(sye," (ViT model)"),sye.forEach(t),T1o=i(K),np=n(K,"LI",{});var lye=s(np);Aie=n(lye,"STRONG",{});var edt=s(Aie);M1o=r(edt,"vit_mae"),edt.forEach(t),E1o=r(lye," \u2014 "),UI=n(lye,"A",{href:!0});var odt=s(UI);C1o=r(odt,"ViTFeatureExtractor"),odt.forEach(t),w1o=r(lye," (ViTMAE model)"),lye.forEach(t),A1o=i(K),sp=n(K,"LI",{});var iye=s(sp);Lie=n(iye,"STRONG",{});var rdt=s(Lie);L1o=r(rdt,"wav2vec2"),rdt.forEach(t),y1o=r(iye," \u2014 "),JI=n(iye,"A",{href:!0});var tdt=s(JI);x1o=r(tdt,"Wav2Vec2FeatureExtractor"),tdt.forEach(t),$1o=r(iye," (Wav2Vec2 model)"),iye.forEach(t),k1o=i(K),lp=n(K,"LI",{});var dye=s(lp);yie=n(dye,"STRONG",{});var adt=s(yie);S1o=r(adt,"wav2vec2-conformer"),adt.forEach(t),R1o=r(dye," \u2014 "),YI=n(dye,"A",{href:!0});var ndt=s(YI);P1o=r(ndt,"Wav2Vec2FeatureExtractor"),ndt.forEach(t),B1o=r(dye," (Wav2Vec2-Conformer model)"),dye.forEach(t),N1o=i(K),ip=n(K,"LI",{});var cye=s(ip);xie=n(cye,"STRONG",{});var sdt=s(xie);I1o=r(sdt,"yolos"),sdt.forEach(t),q1o=r(cye," \u2014 "),KI=n(cye,"A",{href:!0});var ldt=s(KI);j1o=r(ldt,"YolosFeatureExtractor"),ldt.forEach(t),D1o=r(cye," (YOLOS model)"),cye.forEach(t),K.forEach(t),G1o=i(ta),T(dp.$$.fragment,ta),O1o=i(ta),T(cp.$$.fragment,ta),ta.forEach(t),V1o=i(Js),fp=n(Js,"DIV",{class:!0});var NXe=s(fp);T(tL.$$.fragment,NXe),X1o=i(NXe),$ie=n(NXe,"P",{});var idt=s($ie);z1o=r(idt,"Register a new feature extractor for this class."),idt.forEach(t),NXe.forEach(t),Js.forEach(t),ROe=i(f),Bi=n(f,"H2",{class:!0});var IXe=s(Bi);mp=n(IXe,"A",{id:!0,class:!0,href:!0});var ddt=s(mp);kie=n(ddt,"SPAN",{});var cdt=s(kie);T(aL.$$.fragment,cdt),cdt.forEach(t),ddt.forEach(t),Q1o=i(IXe),Sie=n(IXe,"SPAN",{});var fdt=s(Sie);W1o=r(fdt,"AutoProcessor"),fdt.forEach(t),IXe.forEach(t),POe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(nL.$$.fragment,Ys),H1o=i(Ys),sL=n(Ys,"P",{});var qXe=s(sL);U1o=r(qXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZI=n(qXe,"A",{href:!0});var mdt=s(ZI);J1o=r(mdt,"AutoProcessor.from_pretrained()"),mdt.forEach(t),Y1o=r(qXe," class method."),qXe.forEach(t),K1o=i(Ys),lL=n(Ys,"P",{});var jXe=s(lL);Z1o=r(jXe,"This class cannot be instantiated directly using "),Rie=n(jXe,"CODE",{});var gdt=s(Rie);e2o=r(gdt,"__init__()"),gdt.forEach(t),o2o=r(jXe," (throws an error)."),jXe.forEach(t),r2o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var aa=s(Ue);T(iL.$$.fragment,aa),t2o=i(aa),Pie=n(aa,"P",{});var hdt=s(Pie);a2o=r(hdt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hdt.forEach(t),n2o=i(aa),Ni=n(aa,"P",{});var qoe=s(Ni);s2o=r(qoe,"The processor class to instantiate is selected based on the "),Bie=n(qoe,"CODE",{});var pdt=s(Bie);l2o=r(pdt,"model_type"),pdt.forEach(t),i2o=r(qoe,` property of the config object (either
passed as an argument or loaded from `),Nie=n(qoe,"CODE",{});var _dt=s(Nie);d2o=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),c2o=r(qoe," if possible):"),qoe.forEach(t),f2o=i(aa),he=n(aa,"UL",{});var be=s(he);gp=n(be,"LI",{});var fye=s(gp);Iie=n(fye,"STRONG",{});var udt=s(Iie);m2o=r(udt,"clip"),udt.forEach(t),g2o=r(fye," \u2014 "),eq=n(fye,"A",{href:!0});var bdt=s(eq);h2o=r(bdt,"CLIPProcessor"),bdt.forEach(t),p2o=r(fye," (CLIP model)"),fye.forEach(t),_2o=i(be),hp=n(be,"LI",{});var mye=s(hp);qie=n(mye,"STRONG",{});var vdt=s(qie);u2o=r(vdt,"flava"),vdt.forEach(t),b2o=r(mye," \u2014 "),jie=n(mye,"CODE",{});var Fdt=s(jie);v2o=r(Fdt,"FLAVAProcessor"),Fdt.forEach(t),F2o=r(mye," (FLAVA model)"),mye.forEach(t),T2o=i(be),pp=n(be,"LI",{});var gye=s(pp);Die=n(gye,"STRONG",{});var Tdt=s(Die);M2o=r(Tdt,"layoutlmv2"),Tdt.forEach(t),E2o=r(gye," \u2014 "),oq=n(gye,"A",{href:!0});var Mdt=s(oq);C2o=r(Mdt,"LayoutLMv2Processor"),Mdt.forEach(t),w2o=r(gye," (LayoutLMv2 model)"),gye.forEach(t),A2o=i(be),_p=n(be,"LI",{});var hye=s(_p);Gie=n(hye,"STRONG",{});var Edt=s(Gie);L2o=r(Edt,"layoutlmv3"),Edt.forEach(t),y2o=r(hye," \u2014 "),rq=n(hye,"A",{href:!0});var Cdt=s(rq);x2o=r(Cdt,"LayoutLMv3Processor"),Cdt.forEach(t),$2o=r(hye," (LayoutLMv3 model)"),hye.forEach(t),k2o=i(be),up=n(be,"LI",{});var pye=s(up);Oie=n(pye,"STRONG",{});var wdt=s(Oie);S2o=r(wdt,"layoutxlm"),wdt.forEach(t),R2o=r(pye," \u2014 "),tq=n(pye,"A",{href:!0});var Adt=s(tq);P2o=r(Adt,"LayoutXLMProcessor"),Adt.forEach(t),B2o=r(pye," (LayoutXLM model)"),pye.forEach(t),N2o=i(be),bp=n(be,"LI",{});var _ye=s(bp);Vie=n(_ye,"STRONG",{});var Ldt=s(Vie);I2o=r(Ldt,"sew"),Ldt.forEach(t),q2o=r(_ye," \u2014 "),aq=n(_ye,"A",{href:!0});var ydt=s(aq);j2o=r(ydt,"Wav2Vec2Processor"),ydt.forEach(t),D2o=r(_ye," (SEW model)"),_ye.forEach(t),G2o=i(be),vp=n(be,"LI",{});var uye=s(vp);Xie=n(uye,"STRONG",{});var xdt=s(Xie);O2o=r(xdt,"sew-d"),xdt.forEach(t),V2o=r(uye," \u2014 "),nq=n(uye,"A",{href:!0});var $dt=s(nq);X2o=r($dt,"Wav2Vec2Processor"),$dt.forEach(t),z2o=r(uye," (SEW-D model)"),uye.forEach(t),Q2o=i(be),Fp=n(be,"LI",{});var bye=s(Fp);zie=n(bye,"STRONG",{});var kdt=s(zie);W2o=r(kdt,"speech_to_text"),kdt.forEach(t),H2o=r(bye," \u2014 "),sq=n(bye,"A",{href:!0});var Sdt=s(sq);U2o=r(Sdt,"Speech2TextProcessor"),Sdt.forEach(t),J2o=r(bye," (Speech2Text model)"),bye.forEach(t),Y2o=i(be),Tp=n(be,"LI",{});var vye=s(Tp);Qie=n(vye,"STRONG",{});var Rdt=s(Qie);K2o=r(Rdt,"speech_to_text_2"),Rdt.forEach(t),Z2o=r(vye," \u2014 "),lq=n(vye,"A",{href:!0});var Pdt=s(lq);ebo=r(Pdt,"Speech2Text2Processor"),Pdt.forEach(t),obo=r(vye," (Speech2Text2 model)"),vye.forEach(t),rbo=i(be),Mp=n(be,"LI",{});var Fye=s(Mp);Wie=n(Fye,"STRONG",{});var Bdt=s(Wie);tbo=r(Bdt,"trocr"),Bdt.forEach(t),abo=r(Fye," \u2014 "),iq=n(Fye,"A",{href:!0});var Ndt=s(iq);nbo=r(Ndt,"TrOCRProcessor"),Ndt.forEach(t),sbo=r(Fye," (TrOCR model)"),Fye.forEach(t),lbo=i(be),Ep=n(be,"LI",{});var Tye=s(Ep);Hie=n(Tye,"STRONG",{});var Idt=s(Hie);ibo=r(Idt,"unispeech"),Idt.forEach(t),dbo=r(Tye," \u2014 "),dq=n(Tye,"A",{href:!0});var qdt=s(dq);cbo=r(qdt,"Wav2Vec2Processor"),qdt.forEach(t),fbo=r(Tye," (UniSpeech model)"),Tye.forEach(t),mbo=i(be),Cp=n(be,"LI",{});var Mye=s(Cp);Uie=n(Mye,"STRONG",{});var jdt=s(Uie);gbo=r(jdt,"unispeech-sat"),jdt.forEach(t),hbo=r(Mye," \u2014 "),cq=n(Mye,"A",{href:!0});var Ddt=s(cq);pbo=r(Ddt,"Wav2Vec2Processor"),Ddt.forEach(t),_bo=r(Mye," (UniSpeechSat model)"),Mye.forEach(t),ubo=i(be),wp=n(be,"LI",{});var Eye=s(wp);Jie=n(Eye,"STRONG",{});var Gdt=s(Jie);bbo=r(Gdt,"vilt"),Gdt.forEach(t),vbo=r(Eye," \u2014 "),fq=n(Eye,"A",{href:!0});var Odt=s(fq);Fbo=r(Odt,"ViltProcessor"),Odt.forEach(t),Tbo=r(Eye," (ViLT model)"),Eye.forEach(t),Mbo=i(be),Ap=n(be,"LI",{});var Cye=s(Ap);Yie=n(Cye,"STRONG",{});var Vdt=s(Yie);Ebo=r(Vdt,"vision-text-dual-encoder"),Vdt.forEach(t),Cbo=r(Cye," \u2014 "),mq=n(Cye,"A",{href:!0});var Xdt=s(mq);wbo=r(Xdt,"VisionTextDualEncoderProcessor"),Xdt.forEach(t),Abo=r(Cye," (VisionTextDualEncoder model)"),Cye.forEach(t),Lbo=i(be),Lp=n(be,"LI",{});var wye=s(Lp);Kie=n(wye,"STRONG",{});var zdt=s(Kie);ybo=r(zdt,"wav2vec2"),zdt.forEach(t),xbo=r(wye," \u2014 "),gq=n(wye,"A",{href:!0});var Qdt=s(gq);$bo=r(Qdt,"Wav2Vec2Processor"),Qdt.forEach(t),kbo=r(wye," (Wav2Vec2 model)"),wye.forEach(t),Sbo=i(be),yp=n(be,"LI",{});var Aye=s(yp);Zie=n(Aye,"STRONG",{});var Wdt=s(Zie);Rbo=r(Wdt,"wav2vec2-conformer"),Wdt.forEach(t),Pbo=r(Aye," \u2014 "),hq=n(Aye,"A",{href:!0});var Hdt=s(hq);Bbo=r(Hdt,"Wav2Vec2Processor"),Hdt.forEach(t),Nbo=r(Aye," (Wav2Vec2-Conformer model)"),Aye.forEach(t),Ibo=i(be),xp=n(be,"LI",{});var Lye=s(xp);ede=n(Lye,"STRONG",{});var Udt=s(ede);qbo=r(Udt,"wavlm"),Udt.forEach(t),jbo=r(Lye," \u2014 "),pq=n(Lye,"A",{href:!0});var Jdt=s(pq);Dbo=r(Jdt,"Wav2Vec2Processor"),Jdt.forEach(t),Gbo=r(Lye," (WavLM model)"),Lye.forEach(t),be.forEach(t),Obo=i(aa),T($p.$$.fragment,aa),Vbo=i(aa),T(kp.$$.fragment,aa),aa.forEach(t),Xbo=i(Ys),Sp=n(Ys,"DIV",{class:!0});var DXe=s(Sp);T(dL.$$.fragment,DXe),zbo=i(DXe),ode=n(DXe,"P",{});var Ydt=s(ode);Qbo=r(Ydt,"Register a new processor for this class."),Ydt.forEach(t),DXe.forEach(t),Ys.forEach(t),BOe=i(f),Ii=n(f,"H2",{class:!0});var GXe=s(Ii);Rp=n(GXe,"A",{id:!0,class:!0,href:!0});var Kdt=s(Rp);rde=n(Kdt,"SPAN",{});var Zdt=s(rde);T(cL.$$.fragment,Zdt),Zdt.forEach(t),Kdt.forEach(t),Wbo=i(GXe),tde=n(GXe,"SPAN",{});var ect=s(tde);Hbo=r(ect,"AutoModel"),ect.forEach(t),GXe.forEach(t),NOe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(fL.$$.fragment,Ks),Ubo=i(Ks),qi=n(Ks,"P",{});var joe=s(qi);Jbo=r(joe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_q=n(joe,"A",{href:!0});var oct=s(_q);Ybo=r(oct,"from_pretrained()"),oct.forEach(t),Kbo=r(joe," class method or the "),uq=n(joe,"A",{href:!0});var rct=s(uq);Zbo=r(rct,"from_config()"),rct.forEach(t),e4o=r(joe,` class
method.`),joe.forEach(t),o4o=i(Ks),mL=n(Ks,"P",{});var OXe=s(mL);r4o=r(OXe,"This class cannot be instantiated directly using "),ade=n(OXe,"CODE",{});var tct=s(ade);t4o=r(tct,"__init__()"),tct.forEach(t),a4o=r(OXe," (throws an error)."),OXe.forEach(t),n4o=i(Ks),st=n(Ks,"DIV",{class:!0});var Gw=s(st);T(gL.$$.fragment,Gw),s4o=i(Gw),nde=n(Gw,"P",{});var act=s(nde);l4o=r(act,"Instantiates one of the base model classes of the library from a configuration."),act.forEach(t),i4o=i(Gw),ji=n(Gw,"P",{});var Doe=s(ji);d4o=r(Doe,`Note:
Loading a model from its configuration file does `),sde=n(Doe,"STRONG",{});var nct=s(sde);c4o=r(nct,"not"),nct.forEach(t),f4o=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=n(Doe,"A",{href:!0});var sct=s(bq);m4o=r(sct,"from_pretrained()"),sct.forEach(t),g4o=r(Doe," to load the model weights."),Doe.forEach(t),h4o=i(Gw),T(Pp.$$.fragment,Gw),Gw.forEach(t),p4o=i(Ks),Je=n(Ks,"DIV",{class:!0});var na=s(Je);T(hL.$$.fragment,na),_4o=i(na),lde=n(na,"P",{});var lct=s(lde);u4o=r(lct,"Instantiate one of the base model classes of the library from a pretrained model."),lct.forEach(t),b4o=i(na),Pa=n(na,"P",{});var Ow=s(Pa);v4o=r(Ow,"The model class to instantiate is selected based on the "),ide=n(Ow,"CODE",{});var ict=s(ide);F4o=r(ict,"model_type"),ict.forEach(t),T4o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),dde=n(Ow,"CODE",{});var dct=s(dde);M4o=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),E4o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(Ow,"CODE",{});var cct=s(cde);C4o=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),w4o=r(Ow,":"),Ow.forEach(t),A4o=i(na),y=n(na,"UL",{});var x=s(y);Bp=n(x,"LI",{});var yye=s(Bp);fde=n(yye,"STRONG",{});var fct=s(fde);L4o=r(fct,"albert"),fct.forEach(t),y4o=r(yye," \u2014 "),vq=n(yye,"A",{href:!0});var mct=s(vq);x4o=r(mct,"AlbertModel"),mct.forEach(t),$4o=r(yye," (ALBERT model)"),yye.forEach(t),k4o=i(x),Np=n(x,"LI",{});var xye=s(Np);mde=n(xye,"STRONG",{});var gct=s(mde);S4o=r(gct,"bart"),gct.forEach(t),R4o=r(xye," \u2014 "),Fq=n(xye,"A",{href:!0});var hct=s(Fq);P4o=r(hct,"BartModel"),hct.forEach(t),B4o=r(xye," (BART model)"),xye.forEach(t),N4o=i(x),Ip=n(x,"LI",{});var $ye=s(Ip);gde=n($ye,"STRONG",{});var pct=s(gde);I4o=r(pct,"beit"),pct.forEach(t),q4o=r($ye," \u2014 "),Tq=n($ye,"A",{href:!0});var _ct=s(Tq);j4o=r(_ct,"BeitModel"),_ct.forEach(t),D4o=r($ye," (BEiT model)"),$ye.forEach(t),G4o=i(x),qp=n(x,"LI",{});var kye=s(qp);hde=n(kye,"STRONG",{});var uct=s(hde);O4o=r(uct,"bert"),uct.forEach(t),V4o=r(kye," \u2014 "),Mq=n(kye,"A",{href:!0});var bct=s(Mq);X4o=r(bct,"BertModel"),bct.forEach(t),z4o=r(kye," (BERT model)"),kye.forEach(t),Q4o=i(x),jp=n(x,"LI",{});var Sye=s(jp);pde=n(Sye,"STRONG",{});var vct=s(pde);W4o=r(vct,"bert-generation"),vct.forEach(t),H4o=r(Sye," \u2014 "),Eq=n(Sye,"A",{href:!0});var Fct=s(Eq);U4o=r(Fct,"BertGenerationEncoder"),Fct.forEach(t),J4o=r(Sye," (Bert Generation model)"),Sye.forEach(t),Y4o=i(x),Dp=n(x,"LI",{});var Rye=s(Dp);_de=n(Rye,"STRONG",{});var Tct=s(_de);K4o=r(Tct,"big_bird"),Tct.forEach(t),Z4o=r(Rye," \u2014 "),Cq=n(Rye,"A",{href:!0});var Mct=s(Cq);e5o=r(Mct,"BigBirdModel"),Mct.forEach(t),o5o=r(Rye," (BigBird model)"),Rye.forEach(t),r5o=i(x),Gp=n(x,"LI",{});var Pye=s(Gp);ude=n(Pye,"STRONG",{});var Ect=s(ude);t5o=r(Ect,"bigbird_pegasus"),Ect.forEach(t),a5o=r(Pye," \u2014 "),wq=n(Pye,"A",{href:!0});var Cct=s(wq);n5o=r(Cct,"BigBirdPegasusModel"),Cct.forEach(t),s5o=r(Pye," (BigBird-Pegasus model)"),Pye.forEach(t),l5o=i(x),Op=n(x,"LI",{});var Bye=s(Op);bde=n(Bye,"STRONG",{});var wct=s(bde);i5o=r(wct,"blenderbot"),wct.forEach(t),d5o=r(Bye," \u2014 "),Aq=n(Bye,"A",{href:!0});var Act=s(Aq);c5o=r(Act,"BlenderbotModel"),Act.forEach(t),f5o=r(Bye," (Blenderbot model)"),Bye.forEach(t),m5o=i(x),Vp=n(x,"LI",{});var Nye=s(Vp);vde=n(Nye,"STRONG",{});var Lct=s(vde);g5o=r(Lct,"blenderbot-small"),Lct.forEach(t),h5o=r(Nye," \u2014 "),Lq=n(Nye,"A",{href:!0});var yct=s(Lq);p5o=r(yct,"BlenderbotSmallModel"),yct.forEach(t),_5o=r(Nye," (BlenderbotSmall model)"),Nye.forEach(t),u5o=i(x),Xp=n(x,"LI",{});var Iye=s(Xp);Fde=n(Iye,"STRONG",{});var xct=s(Fde);b5o=r(xct,"bloom"),xct.forEach(t),v5o=r(Iye," \u2014 "),yq=n(Iye,"A",{href:!0});var $ct=s(yq);F5o=r($ct,"BloomModel"),$ct.forEach(t),T5o=r(Iye," (BLOOM model)"),Iye.forEach(t),M5o=i(x),zp=n(x,"LI",{});var qye=s(zp);Tde=n(qye,"STRONG",{});var kct=s(Tde);E5o=r(kct,"camembert"),kct.forEach(t),C5o=r(qye," \u2014 "),xq=n(qye,"A",{href:!0});var Sct=s(xq);w5o=r(Sct,"CamembertModel"),Sct.forEach(t),A5o=r(qye," (CamemBERT model)"),qye.forEach(t),L5o=i(x),Qp=n(x,"LI",{});var jye=s(Qp);Mde=n(jye,"STRONG",{});var Rct=s(Mde);y5o=r(Rct,"canine"),Rct.forEach(t),x5o=r(jye," \u2014 "),$q=n(jye,"A",{href:!0});var Pct=s($q);$5o=r(Pct,"CanineModel"),Pct.forEach(t),k5o=r(jye," (CANINE model)"),jye.forEach(t),S5o=i(x),Wp=n(x,"LI",{});var Dye=s(Wp);Ede=n(Dye,"STRONG",{});var Bct=s(Ede);R5o=r(Bct,"clip"),Bct.forEach(t),P5o=r(Dye," \u2014 "),kq=n(Dye,"A",{href:!0});var Nct=s(kq);B5o=r(Nct,"CLIPModel"),Nct.forEach(t),N5o=r(Dye," (CLIP model)"),Dye.forEach(t),I5o=i(x),Hp=n(x,"LI",{});var Gye=s(Hp);Cde=n(Gye,"STRONG",{});var Ict=s(Cde);q5o=r(Ict,"codegen"),Ict.forEach(t),j5o=r(Gye," \u2014 "),Sq=n(Gye,"A",{href:!0});var qct=s(Sq);D5o=r(qct,"CodeGenModel"),qct.forEach(t),G5o=r(Gye," (CodeGen model)"),Gye.forEach(t),O5o=i(x),Up=n(x,"LI",{});var Oye=s(Up);wde=n(Oye,"STRONG",{});var jct=s(wde);V5o=r(jct,"convbert"),jct.forEach(t),X5o=r(Oye," \u2014 "),Rq=n(Oye,"A",{href:!0});var Dct=s(Rq);z5o=r(Dct,"ConvBertModel"),Dct.forEach(t),Q5o=r(Oye," (ConvBERT model)"),Oye.forEach(t),W5o=i(x),Jp=n(x,"LI",{});var Vye=s(Jp);Ade=n(Vye,"STRONG",{});var Gct=s(Ade);H5o=r(Gct,"convnext"),Gct.forEach(t),U5o=r(Vye," \u2014 "),Pq=n(Vye,"A",{href:!0});var Oct=s(Pq);J5o=r(Oct,"ConvNextModel"),Oct.forEach(t),Y5o=r(Vye," (ConvNeXT model)"),Vye.forEach(t),K5o=i(x),Yp=n(x,"LI",{});var Xye=s(Yp);Lde=n(Xye,"STRONG",{});var Vct=s(Lde);Z5o=r(Vct,"ctrl"),Vct.forEach(t),evo=r(Xye," \u2014 "),Bq=n(Xye,"A",{href:!0});var Xct=s(Bq);ovo=r(Xct,"CTRLModel"),Xct.forEach(t),rvo=r(Xye," (CTRL model)"),Xye.forEach(t),tvo=i(x),Kp=n(x,"LI",{});var zye=s(Kp);yde=n(zye,"STRONG",{});var zct=s(yde);avo=r(zct,"cvt"),zct.forEach(t),nvo=r(zye," \u2014 "),Nq=n(zye,"A",{href:!0});var Qct=s(Nq);svo=r(Qct,"CvtModel"),Qct.forEach(t),lvo=r(zye," (CvT model)"),zye.forEach(t),ivo=i(x),Zp=n(x,"LI",{});var Qye=s(Zp);xde=n(Qye,"STRONG",{});var Wct=s(xde);dvo=r(Wct,"data2vec-audio"),Wct.forEach(t),cvo=r(Qye," \u2014 "),Iq=n(Qye,"A",{href:!0});var Hct=s(Iq);fvo=r(Hct,"Data2VecAudioModel"),Hct.forEach(t),mvo=r(Qye," (Data2VecAudio model)"),Qye.forEach(t),gvo=i(x),e_=n(x,"LI",{});var Wye=s(e_);$de=n(Wye,"STRONG",{});var Uct=s($de);hvo=r(Uct,"data2vec-text"),Uct.forEach(t),pvo=r(Wye," \u2014 "),qq=n(Wye,"A",{href:!0});var Jct=s(qq);_vo=r(Jct,"Data2VecTextModel"),Jct.forEach(t),uvo=r(Wye," (Data2VecText model)"),Wye.forEach(t),bvo=i(x),o_=n(x,"LI",{});var Hye=s(o_);kde=n(Hye,"STRONG",{});var Yct=s(kde);vvo=r(Yct,"data2vec-vision"),Yct.forEach(t),Fvo=r(Hye," \u2014 "),jq=n(Hye,"A",{href:!0});var Kct=s(jq);Tvo=r(Kct,"Data2VecVisionModel"),Kct.forEach(t),Mvo=r(Hye," (Data2VecVision model)"),Hye.forEach(t),Evo=i(x),r_=n(x,"LI",{});var Uye=s(r_);Sde=n(Uye,"STRONG",{});var Zct=s(Sde);Cvo=r(Zct,"deberta"),Zct.forEach(t),wvo=r(Uye," \u2014 "),Dq=n(Uye,"A",{href:!0});var eft=s(Dq);Avo=r(eft,"DebertaModel"),eft.forEach(t),Lvo=r(Uye," (DeBERTa model)"),Uye.forEach(t),yvo=i(x),t_=n(x,"LI",{});var Jye=s(t_);Rde=n(Jye,"STRONG",{});var oft=s(Rde);xvo=r(oft,"deberta-v2"),oft.forEach(t),$vo=r(Jye," \u2014 "),Gq=n(Jye,"A",{href:!0});var rft=s(Gq);kvo=r(rft,"DebertaV2Model"),rft.forEach(t),Svo=r(Jye," (DeBERTa-v2 model)"),Jye.forEach(t),Rvo=i(x),a_=n(x,"LI",{});var Yye=s(a_);Pde=n(Yye,"STRONG",{});var tft=s(Pde);Pvo=r(tft,"decision_transformer"),tft.forEach(t),Bvo=r(Yye," \u2014 "),Oq=n(Yye,"A",{href:!0});var aft=s(Oq);Nvo=r(aft,"DecisionTransformerModel"),aft.forEach(t),Ivo=r(Yye," (Decision Transformer model)"),Yye.forEach(t),qvo=i(x),n_=n(x,"LI",{});var Kye=s(n_);Bde=n(Kye,"STRONG",{});var nft=s(Bde);jvo=r(nft,"deit"),nft.forEach(t),Dvo=r(Kye," \u2014 "),Vq=n(Kye,"A",{href:!0});var sft=s(Vq);Gvo=r(sft,"DeiTModel"),sft.forEach(t),Ovo=r(Kye," (DeiT model)"),Kye.forEach(t),Vvo=i(x),s_=n(x,"LI",{});var Zye=s(s_);Nde=n(Zye,"STRONG",{});var lft=s(Nde);Xvo=r(lft,"detr"),lft.forEach(t),zvo=r(Zye," \u2014 "),Xq=n(Zye,"A",{href:!0});var ift=s(Xq);Qvo=r(ift,"DetrModel"),ift.forEach(t),Wvo=r(Zye," (DETR model)"),Zye.forEach(t),Hvo=i(x),l_=n(x,"LI",{});var e9e=s(l_);Ide=n(e9e,"STRONG",{});var dft=s(Ide);Uvo=r(dft,"distilbert"),dft.forEach(t),Jvo=r(e9e," \u2014 "),zq=n(e9e,"A",{href:!0});var cft=s(zq);Yvo=r(cft,"DistilBertModel"),cft.forEach(t),Kvo=r(e9e," (DistilBERT model)"),e9e.forEach(t),Zvo=i(x),i_=n(x,"LI",{});var o9e=s(i_);qde=n(o9e,"STRONG",{});var fft=s(qde);eFo=r(fft,"dpr"),fft.forEach(t),oFo=r(o9e," \u2014 "),Qq=n(o9e,"A",{href:!0});var mft=s(Qq);rFo=r(mft,"DPRQuestionEncoder"),mft.forEach(t),tFo=r(o9e," (DPR model)"),o9e.forEach(t),aFo=i(x),d_=n(x,"LI",{});var r9e=s(d_);jde=n(r9e,"STRONG",{});var gft=s(jde);nFo=r(gft,"dpt"),gft.forEach(t),sFo=r(r9e," \u2014 "),Wq=n(r9e,"A",{href:!0});var hft=s(Wq);lFo=r(hft,"DPTModel"),hft.forEach(t),iFo=r(r9e," (DPT model)"),r9e.forEach(t),dFo=i(x),c_=n(x,"LI",{});var t9e=s(c_);Dde=n(t9e,"STRONG",{});var pft=s(Dde);cFo=r(pft,"electra"),pft.forEach(t),fFo=r(t9e," \u2014 "),Hq=n(t9e,"A",{href:!0});var _ft=s(Hq);mFo=r(_ft,"ElectraModel"),_ft.forEach(t),gFo=r(t9e," (ELECTRA model)"),t9e.forEach(t),hFo=i(x),f_=n(x,"LI",{});var a9e=s(f_);Gde=n(a9e,"STRONG",{});var uft=s(Gde);pFo=r(uft,"flaubert"),uft.forEach(t),_Fo=r(a9e," \u2014 "),Uq=n(a9e,"A",{href:!0});var bft=s(Uq);uFo=r(bft,"FlaubertModel"),bft.forEach(t),bFo=r(a9e," (FlauBERT model)"),a9e.forEach(t),vFo=i(x),m_=n(x,"LI",{});var n9e=s(m_);Ode=n(n9e,"STRONG",{});var vft=s(Ode);FFo=r(vft,"flava"),vft.forEach(t),TFo=r(n9e," \u2014 "),Jq=n(n9e,"A",{href:!0});var Fft=s(Jq);MFo=r(Fft,"FlavaModel"),Fft.forEach(t),EFo=r(n9e," (FLAVA model)"),n9e.forEach(t),CFo=i(x),g_=n(x,"LI",{});var s9e=s(g_);Vde=n(s9e,"STRONG",{});var Tft=s(Vde);wFo=r(Tft,"fnet"),Tft.forEach(t),AFo=r(s9e," \u2014 "),Yq=n(s9e,"A",{href:!0});var Mft=s(Yq);LFo=r(Mft,"FNetModel"),Mft.forEach(t),yFo=r(s9e," (FNet model)"),s9e.forEach(t),xFo=i(x),h_=n(x,"LI",{});var l9e=s(h_);Xde=n(l9e,"STRONG",{});var Eft=s(Xde);$Fo=r(Eft,"fsmt"),Eft.forEach(t),kFo=r(l9e," \u2014 "),Kq=n(l9e,"A",{href:!0});var Cft=s(Kq);SFo=r(Cft,"FSMTModel"),Cft.forEach(t),RFo=r(l9e," (FairSeq Machine-Translation model)"),l9e.forEach(t),PFo=i(x),Xs=n(x,"LI",{});var iS=s(Xs);zde=n(iS,"STRONG",{});var wft=s(zde);BFo=r(wft,"funnel"),wft.forEach(t),NFo=r(iS," \u2014 "),Zq=n(iS,"A",{href:!0});var Aft=s(Zq);IFo=r(Aft,"FunnelModel"),Aft.forEach(t),qFo=r(iS," or "),ej=n(iS,"A",{href:!0});var Lft=s(ej);jFo=r(Lft,"FunnelBaseModel"),Lft.forEach(t),DFo=r(iS," (Funnel Transformer model)"),iS.forEach(t),GFo=i(x),p_=n(x,"LI",{});var i9e=s(p_);Qde=n(i9e,"STRONG",{});var yft=s(Qde);OFo=r(yft,"glpn"),yft.forEach(t),VFo=r(i9e," \u2014 "),oj=n(i9e,"A",{href:!0});var xft=s(oj);XFo=r(xft,"GLPNModel"),xft.forEach(t),zFo=r(i9e," (GLPN model)"),i9e.forEach(t),QFo=i(x),__=n(x,"LI",{});var d9e=s(__);Wde=n(d9e,"STRONG",{});var $ft=s(Wde);WFo=r($ft,"gpt2"),$ft.forEach(t),HFo=r(d9e," \u2014 "),rj=n(d9e,"A",{href:!0});var kft=s(rj);UFo=r(kft,"GPT2Model"),kft.forEach(t),JFo=r(d9e," (OpenAI GPT-2 model)"),d9e.forEach(t),YFo=i(x),u_=n(x,"LI",{});var c9e=s(u_);Hde=n(c9e,"STRONG",{});var Sft=s(Hde);KFo=r(Sft,"gpt_neo"),Sft.forEach(t),ZFo=r(c9e," \u2014 "),tj=n(c9e,"A",{href:!0});var Rft=s(tj);eTo=r(Rft,"GPTNeoModel"),Rft.forEach(t),oTo=r(c9e," (GPT Neo model)"),c9e.forEach(t),rTo=i(x),b_=n(x,"LI",{});var f9e=s(b_);Ude=n(f9e,"STRONG",{});var Pft=s(Ude);tTo=r(Pft,"gpt_neox"),Pft.forEach(t),aTo=r(f9e," \u2014 "),aj=n(f9e,"A",{href:!0});var Bft=s(aj);nTo=r(Bft,"GPTNeoXModel"),Bft.forEach(t),sTo=r(f9e," (GPT NeoX model)"),f9e.forEach(t),lTo=i(x),v_=n(x,"LI",{});var m9e=s(v_);Jde=n(m9e,"STRONG",{});var Nft=s(Jde);iTo=r(Nft,"gptj"),Nft.forEach(t),dTo=r(m9e," \u2014 "),nj=n(m9e,"A",{href:!0});var Ift=s(nj);cTo=r(Ift,"GPTJModel"),Ift.forEach(t),fTo=r(m9e," (GPT-J model)"),m9e.forEach(t),mTo=i(x),F_=n(x,"LI",{});var g9e=s(F_);Yde=n(g9e,"STRONG",{});var qft=s(Yde);gTo=r(qft,"hubert"),qft.forEach(t),hTo=r(g9e," \u2014 "),sj=n(g9e,"A",{href:!0});var jft=s(sj);pTo=r(jft,"HubertModel"),jft.forEach(t),_To=r(g9e," (Hubert model)"),g9e.forEach(t),uTo=i(x),T_=n(x,"LI",{});var h9e=s(T_);Kde=n(h9e,"STRONG",{});var Dft=s(Kde);bTo=r(Dft,"ibert"),Dft.forEach(t),vTo=r(h9e," \u2014 "),lj=n(h9e,"A",{href:!0});var Gft=s(lj);FTo=r(Gft,"IBertModel"),Gft.forEach(t),TTo=r(h9e," (I-BERT model)"),h9e.forEach(t),MTo=i(x),M_=n(x,"LI",{});var p9e=s(M_);Zde=n(p9e,"STRONG",{});var Oft=s(Zde);ETo=r(Oft,"imagegpt"),Oft.forEach(t),CTo=r(p9e," \u2014 "),ij=n(p9e,"A",{href:!0});var Vft=s(ij);wTo=r(Vft,"ImageGPTModel"),Vft.forEach(t),ATo=r(p9e," (ImageGPT model)"),p9e.forEach(t),LTo=i(x),E_=n(x,"LI",{});var _9e=s(E_);ece=n(_9e,"STRONG",{});var Xft=s(ece);yTo=r(Xft,"layoutlm"),Xft.forEach(t),xTo=r(_9e," \u2014 "),dj=n(_9e,"A",{href:!0});var zft=s(dj);$To=r(zft,"LayoutLMModel"),zft.forEach(t),kTo=r(_9e," (LayoutLM model)"),_9e.forEach(t),STo=i(x),C_=n(x,"LI",{});var u9e=s(C_);oce=n(u9e,"STRONG",{});var Qft=s(oce);RTo=r(Qft,"layoutlmv2"),Qft.forEach(t),PTo=r(u9e," \u2014 "),cj=n(u9e,"A",{href:!0});var Wft=s(cj);BTo=r(Wft,"LayoutLMv2Model"),Wft.forEach(t),NTo=r(u9e," (LayoutLMv2 model)"),u9e.forEach(t),ITo=i(x),w_=n(x,"LI",{});var b9e=s(w_);rce=n(b9e,"STRONG",{});var Hft=s(rce);qTo=r(Hft,"layoutlmv3"),Hft.forEach(t),jTo=r(b9e," \u2014 "),fj=n(b9e,"A",{href:!0});var Uft=s(fj);DTo=r(Uft,"LayoutLMv3Model"),Uft.forEach(t),GTo=r(b9e," (LayoutLMv3 model)"),b9e.forEach(t),OTo=i(x),A_=n(x,"LI",{});var v9e=s(A_);tce=n(v9e,"STRONG",{});var Jft=s(tce);VTo=r(Jft,"led"),Jft.forEach(t),XTo=r(v9e," \u2014 "),mj=n(v9e,"A",{href:!0});var Yft=s(mj);zTo=r(Yft,"LEDModel"),Yft.forEach(t),QTo=r(v9e," (LED model)"),v9e.forEach(t),WTo=i(x),L_=n(x,"LI",{});var F9e=s(L_);ace=n(F9e,"STRONG",{});var Kft=s(ace);HTo=r(Kft,"levit"),Kft.forEach(t),UTo=r(F9e," \u2014 "),gj=n(F9e,"A",{href:!0});var Zft=s(gj);JTo=r(Zft,"LevitModel"),Zft.forEach(t),YTo=r(F9e," (LeViT model)"),F9e.forEach(t),KTo=i(x),y_=n(x,"LI",{});var T9e=s(y_);nce=n(T9e,"STRONG",{});var emt=s(nce);ZTo=r(emt,"longformer"),emt.forEach(t),e7o=r(T9e," \u2014 "),hj=n(T9e,"A",{href:!0});var omt=s(hj);o7o=r(omt,"LongformerModel"),omt.forEach(t),r7o=r(T9e," (Longformer model)"),T9e.forEach(t),t7o=i(x),x_=n(x,"LI",{});var M9e=s(x_);sce=n(M9e,"STRONG",{});var rmt=s(sce);a7o=r(rmt,"longt5"),rmt.forEach(t),n7o=r(M9e," \u2014 "),pj=n(M9e,"A",{href:!0});var tmt=s(pj);s7o=r(tmt,"LongT5Model"),tmt.forEach(t),l7o=r(M9e," (LongT5 model)"),M9e.forEach(t),i7o=i(x),$_=n(x,"LI",{});var E9e=s($_);lce=n(E9e,"STRONG",{});var amt=s(lce);d7o=r(amt,"luke"),amt.forEach(t),c7o=r(E9e," \u2014 "),_j=n(E9e,"A",{href:!0});var nmt=s(_j);f7o=r(nmt,"LukeModel"),nmt.forEach(t),m7o=r(E9e," (LUKE model)"),E9e.forEach(t),g7o=i(x),k_=n(x,"LI",{});var C9e=s(k_);ice=n(C9e,"STRONG",{});var smt=s(ice);h7o=r(smt,"lxmert"),smt.forEach(t),p7o=r(C9e," \u2014 "),uj=n(C9e,"A",{href:!0});var lmt=s(uj);_7o=r(lmt,"LxmertModel"),lmt.forEach(t),u7o=r(C9e," (LXMERT model)"),C9e.forEach(t),b7o=i(x),S_=n(x,"LI",{});var w9e=s(S_);dce=n(w9e,"STRONG",{});var imt=s(dce);v7o=r(imt,"m2m_100"),imt.forEach(t),F7o=r(w9e," \u2014 "),bj=n(w9e,"A",{href:!0});var dmt=s(bj);T7o=r(dmt,"M2M100Model"),dmt.forEach(t),M7o=r(w9e," (M2M100 model)"),w9e.forEach(t),E7o=i(x),R_=n(x,"LI",{});var A9e=s(R_);cce=n(A9e,"STRONG",{});var cmt=s(cce);C7o=r(cmt,"marian"),cmt.forEach(t),w7o=r(A9e," \u2014 "),vj=n(A9e,"A",{href:!0});var fmt=s(vj);A7o=r(fmt,"MarianModel"),fmt.forEach(t),L7o=r(A9e," (Marian model)"),A9e.forEach(t),y7o=i(x),P_=n(x,"LI",{});var L9e=s(P_);fce=n(L9e,"STRONG",{});var mmt=s(fce);x7o=r(mmt,"maskformer"),mmt.forEach(t),$7o=r(L9e," \u2014 "),Fj=n(L9e,"A",{href:!0});var gmt=s(Fj);k7o=r(gmt,"MaskFormerModel"),gmt.forEach(t),S7o=r(L9e," (MaskFormer model)"),L9e.forEach(t),R7o=i(x),B_=n(x,"LI",{});var y9e=s(B_);mce=n(y9e,"STRONG",{});var hmt=s(mce);P7o=r(hmt,"mbart"),hmt.forEach(t),B7o=r(y9e," \u2014 "),Tj=n(y9e,"A",{href:!0});var pmt=s(Tj);N7o=r(pmt,"MBartModel"),pmt.forEach(t),I7o=r(y9e," (mBART model)"),y9e.forEach(t),q7o=i(x),N_=n(x,"LI",{});var x9e=s(N_);gce=n(x9e,"STRONG",{});var _mt=s(gce);j7o=r(_mt,"mctct"),_mt.forEach(t),D7o=r(x9e," \u2014 "),Mj=n(x9e,"A",{href:!0});var umt=s(Mj);G7o=r(umt,"MCTCTModel"),umt.forEach(t),O7o=r(x9e," (M-CTC-T model)"),x9e.forEach(t),V7o=i(x),I_=n(x,"LI",{});var $9e=s(I_);hce=n($9e,"STRONG",{});var bmt=s(hce);X7o=r(bmt,"megatron-bert"),bmt.forEach(t),z7o=r($9e," \u2014 "),Ej=n($9e,"A",{href:!0});var vmt=s(Ej);Q7o=r(vmt,"MegatronBertModel"),vmt.forEach(t),W7o=r($9e," (Megatron-BERT model)"),$9e.forEach(t),H7o=i(x),q_=n(x,"LI",{});var k9e=s(q_);pce=n(k9e,"STRONG",{});var Fmt=s(pce);U7o=r(Fmt,"mobilebert"),Fmt.forEach(t),J7o=r(k9e," \u2014 "),Cj=n(k9e,"A",{href:!0});var Tmt=s(Cj);Y7o=r(Tmt,"MobileBertModel"),Tmt.forEach(t),K7o=r(k9e," (MobileBERT model)"),k9e.forEach(t),Z7o=i(x),j_=n(x,"LI",{});var S9e=s(j_);_ce=n(S9e,"STRONG",{});var Mmt=s(_ce);e8o=r(Mmt,"mobilenet_v2"),Mmt.forEach(t),o8o=r(S9e," \u2014 "),wj=n(S9e,"A",{href:!0});var Emt=s(wj);r8o=r(Emt,"MobileNetV2Model"),Emt.forEach(t),t8o=r(S9e," (MobileNetV2 model)"),S9e.forEach(t),a8o=i(x),D_=n(x,"LI",{});var R9e=s(D_);uce=n(R9e,"STRONG",{});var Cmt=s(uce);n8o=r(Cmt,"mpnet"),Cmt.forEach(t),s8o=r(R9e," \u2014 "),Aj=n(R9e,"A",{href:!0});var wmt=s(Aj);l8o=r(wmt,"MPNetModel"),wmt.forEach(t),i8o=r(R9e," (MPNet model)"),R9e.forEach(t),d8o=i(x),G_=n(x,"LI",{});var P9e=s(G_);bce=n(P9e,"STRONG",{});var Amt=s(bce);c8o=r(Amt,"mt5"),Amt.forEach(t),f8o=r(P9e," \u2014 "),Lj=n(P9e,"A",{href:!0});var Lmt=s(Lj);m8o=r(Lmt,"MT5Model"),Lmt.forEach(t),g8o=r(P9e," (MT5 model)"),P9e.forEach(t),h8o=i(x),O_=n(x,"LI",{});var B9e=s(O_);vce=n(B9e,"STRONG",{});var ymt=s(vce);p8o=r(ymt,"nezha"),ymt.forEach(t),_8o=r(B9e," \u2014 "),yj=n(B9e,"A",{href:!0});var xmt=s(yj);u8o=r(xmt,"NezhaModel"),xmt.forEach(t),b8o=r(B9e," (Nezha model)"),B9e.forEach(t),v8o=i(x),V_=n(x,"LI",{});var N9e=s(V_);Fce=n(N9e,"STRONG",{});var $mt=s(Fce);F8o=r($mt,"nystromformer"),$mt.forEach(t),T8o=r(N9e," \u2014 "),xj=n(N9e,"A",{href:!0});var kmt=s(xj);M8o=r(kmt,"NystromformerModel"),kmt.forEach(t),E8o=r(N9e," (Nystr\xF6mformer model)"),N9e.forEach(t),C8o=i(x),X_=n(x,"LI",{});var I9e=s(X_);Tce=n(I9e,"STRONG",{});var Smt=s(Tce);w8o=r(Smt,"openai-gpt"),Smt.forEach(t),A8o=r(I9e," \u2014 "),$j=n(I9e,"A",{href:!0});var Rmt=s($j);L8o=r(Rmt,"OpenAIGPTModel"),Rmt.forEach(t),y8o=r(I9e," (OpenAI GPT model)"),I9e.forEach(t),x8o=i(x),z_=n(x,"LI",{});var q9e=s(z_);Mce=n(q9e,"STRONG",{});var Pmt=s(Mce);$8o=r(Pmt,"opt"),Pmt.forEach(t),k8o=r(q9e," \u2014 "),kj=n(q9e,"A",{href:!0});var Bmt=s(kj);S8o=r(Bmt,"OPTModel"),Bmt.forEach(t),R8o=r(q9e," (OPT model)"),q9e.forEach(t),P8o=i(x),Q_=n(x,"LI",{});var j9e=s(Q_);Ece=n(j9e,"STRONG",{});var Nmt=s(Ece);B8o=r(Nmt,"pegasus"),Nmt.forEach(t),N8o=r(j9e," \u2014 "),Sj=n(j9e,"A",{href:!0});var Imt=s(Sj);I8o=r(Imt,"PegasusModel"),Imt.forEach(t),q8o=r(j9e," (Pegasus model)"),j9e.forEach(t),j8o=i(x),W_=n(x,"LI",{});var D9e=s(W_);Cce=n(D9e,"STRONG",{});var qmt=s(Cce);D8o=r(qmt,"perceiver"),qmt.forEach(t),G8o=r(D9e," \u2014 "),Rj=n(D9e,"A",{href:!0});var jmt=s(Rj);O8o=r(jmt,"PerceiverModel"),jmt.forEach(t),V8o=r(D9e," (Perceiver model)"),D9e.forEach(t),X8o=i(x),H_=n(x,"LI",{});var G9e=s(H_);wce=n(G9e,"STRONG",{});var Dmt=s(wce);z8o=r(Dmt,"plbart"),Dmt.forEach(t),Q8o=r(G9e," \u2014 "),Pj=n(G9e,"A",{href:!0});var Gmt=s(Pj);W8o=r(Gmt,"PLBartModel"),Gmt.forEach(t),H8o=r(G9e," (PLBart model)"),G9e.forEach(t),U8o=i(x),U_=n(x,"LI",{});var O9e=s(U_);Ace=n(O9e,"STRONG",{});var Omt=s(Ace);J8o=r(Omt,"poolformer"),Omt.forEach(t),Y8o=r(O9e," \u2014 "),Bj=n(O9e,"A",{href:!0});var Vmt=s(Bj);K8o=r(Vmt,"PoolFormerModel"),Vmt.forEach(t),Z8o=r(O9e," (PoolFormer model)"),O9e.forEach(t),eMo=i(x),J_=n(x,"LI",{});var V9e=s(J_);Lce=n(V9e,"STRONG",{});var Xmt=s(Lce);oMo=r(Xmt,"prophetnet"),Xmt.forEach(t),rMo=r(V9e," \u2014 "),Nj=n(V9e,"A",{href:!0});var zmt=s(Nj);tMo=r(zmt,"ProphetNetModel"),zmt.forEach(t),aMo=r(V9e," (ProphetNet model)"),V9e.forEach(t),nMo=i(x),Y_=n(x,"LI",{});var X9e=s(Y_);yce=n(X9e,"STRONG",{});var Qmt=s(yce);sMo=r(Qmt,"qdqbert"),Qmt.forEach(t),lMo=r(X9e," \u2014 "),Ij=n(X9e,"A",{href:!0});var Wmt=s(Ij);iMo=r(Wmt,"QDQBertModel"),Wmt.forEach(t),dMo=r(X9e," (QDQBert model)"),X9e.forEach(t),cMo=i(x),K_=n(x,"LI",{});var z9e=s(K_);xce=n(z9e,"STRONG",{});var Hmt=s(xce);fMo=r(Hmt,"reformer"),Hmt.forEach(t),mMo=r(z9e," \u2014 "),qj=n(z9e,"A",{href:!0});var Umt=s(qj);gMo=r(Umt,"ReformerModel"),Umt.forEach(t),hMo=r(z9e," (Reformer model)"),z9e.forEach(t),pMo=i(x),Z_=n(x,"LI",{});var Q9e=s(Z_);$ce=n(Q9e,"STRONG",{});var Jmt=s($ce);_Mo=r(Jmt,"regnet"),Jmt.forEach(t),uMo=r(Q9e," \u2014 "),jj=n(Q9e,"A",{href:!0});var Ymt=s(jj);bMo=r(Ymt,"RegNetModel"),Ymt.forEach(t),vMo=r(Q9e," (RegNet model)"),Q9e.forEach(t),FMo=i(x),eu=n(x,"LI",{});var W9e=s(eu);kce=n(W9e,"STRONG",{});var Kmt=s(kce);TMo=r(Kmt,"rembert"),Kmt.forEach(t),MMo=r(W9e," \u2014 "),Dj=n(W9e,"A",{href:!0});var Zmt=s(Dj);EMo=r(Zmt,"RemBertModel"),Zmt.forEach(t),CMo=r(W9e," (RemBERT model)"),W9e.forEach(t),wMo=i(x),ou=n(x,"LI",{});var H9e=s(ou);Sce=n(H9e,"STRONG",{});var egt=s(Sce);AMo=r(egt,"resnet"),egt.forEach(t),LMo=r(H9e," \u2014 "),Gj=n(H9e,"A",{href:!0});var ogt=s(Gj);yMo=r(ogt,"ResNetModel"),ogt.forEach(t),xMo=r(H9e," (ResNet model)"),H9e.forEach(t),$Mo=i(x),ru=n(x,"LI",{});var U9e=s(ru);Rce=n(U9e,"STRONG",{});var rgt=s(Rce);kMo=r(rgt,"retribert"),rgt.forEach(t),SMo=r(U9e," \u2014 "),Oj=n(U9e,"A",{href:!0});var tgt=s(Oj);RMo=r(tgt,"RetriBertModel"),tgt.forEach(t),PMo=r(U9e," (RetriBERT model)"),U9e.forEach(t),BMo=i(x),tu=n(x,"LI",{});var J9e=s(tu);Pce=n(J9e,"STRONG",{});var agt=s(Pce);NMo=r(agt,"roberta"),agt.forEach(t),IMo=r(J9e," \u2014 "),Vj=n(J9e,"A",{href:!0});var ngt=s(Vj);qMo=r(ngt,"RobertaModel"),ngt.forEach(t),jMo=r(J9e," (RoBERTa model)"),J9e.forEach(t),DMo=i(x),au=n(x,"LI",{});var Y9e=s(au);Bce=n(Y9e,"STRONG",{});var sgt=s(Bce);GMo=r(sgt,"roformer"),sgt.forEach(t),OMo=r(Y9e," \u2014 "),Xj=n(Y9e,"A",{href:!0});var lgt=s(Xj);VMo=r(lgt,"RoFormerModel"),lgt.forEach(t),XMo=r(Y9e," (RoFormer model)"),Y9e.forEach(t),zMo=i(x),nu=n(x,"LI",{});var K9e=s(nu);Nce=n(K9e,"STRONG",{});var igt=s(Nce);QMo=r(igt,"segformer"),igt.forEach(t),WMo=r(K9e," \u2014 "),zj=n(K9e,"A",{href:!0});var dgt=s(zj);HMo=r(dgt,"SegformerModel"),dgt.forEach(t),UMo=r(K9e," (SegFormer model)"),K9e.forEach(t),JMo=i(x),su=n(x,"LI",{});var Z9e=s(su);Ice=n(Z9e,"STRONG",{});var cgt=s(Ice);YMo=r(cgt,"sew"),cgt.forEach(t),KMo=r(Z9e," \u2014 "),Qj=n(Z9e,"A",{href:!0});var fgt=s(Qj);ZMo=r(fgt,"SEWModel"),fgt.forEach(t),eEo=r(Z9e," (SEW model)"),Z9e.forEach(t),oEo=i(x),lu=n(x,"LI",{});var exe=s(lu);qce=n(exe,"STRONG",{});var mgt=s(qce);rEo=r(mgt,"sew-d"),mgt.forEach(t),tEo=r(exe," \u2014 "),Wj=n(exe,"A",{href:!0});var ggt=s(Wj);aEo=r(ggt,"SEWDModel"),ggt.forEach(t),nEo=r(exe," (SEW-D model)"),exe.forEach(t),sEo=i(x),iu=n(x,"LI",{});var oxe=s(iu);jce=n(oxe,"STRONG",{});var hgt=s(jce);lEo=r(hgt,"speech_to_text"),hgt.forEach(t),iEo=r(oxe," \u2014 "),Hj=n(oxe,"A",{href:!0});var pgt=s(Hj);dEo=r(pgt,"Speech2TextModel"),pgt.forEach(t),cEo=r(oxe," (Speech2Text model)"),oxe.forEach(t),fEo=i(x),du=n(x,"LI",{});var rxe=s(du);Dce=n(rxe,"STRONG",{});var _gt=s(Dce);mEo=r(_gt,"splinter"),_gt.forEach(t),gEo=r(rxe," \u2014 "),Uj=n(rxe,"A",{href:!0});var ugt=s(Uj);hEo=r(ugt,"SplinterModel"),ugt.forEach(t),pEo=r(rxe," (Splinter model)"),rxe.forEach(t),_Eo=i(x),cu=n(x,"LI",{});var txe=s(cu);Gce=n(txe,"STRONG",{});var bgt=s(Gce);uEo=r(bgt,"squeezebert"),bgt.forEach(t),bEo=r(txe," \u2014 "),Jj=n(txe,"A",{href:!0});var vgt=s(Jj);vEo=r(vgt,"SqueezeBertModel"),vgt.forEach(t),FEo=r(txe," (SqueezeBERT model)"),txe.forEach(t),TEo=i(x),fu=n(x,"LI",{});var axe=s(fu);Oce=n(axe,"STRONG",{});var Fgt=s(Oce);MEo=r(Fgt,"swin"),Fgt.forEach(t),EEo=r(axe," \u2014 "),Yj=n(axe,"A",{href:!0});var Tgt=s(Yj);CEo=r(Tgt,"SwinModel"),Tgt.forEach(t),wEo=r(axe," (Swin Transformer model)"),axe.forEach(t),AEo=i(x),mu=n(x,"LI",{});var nxe=s(mu);Vce=n(nxe,"STRONG",{});var Mgt=s(Vce);LEo=r(Mgt,"t5"),Mgt.forEach(t),yEo=r(nxe," \u2014 "),Kj=n(nxe,"A",{href:!0});var Egt=s(Kj);xEo=r(Egt,"T5Model"),Egt.forEach(t),$Eo=r(nxe," (T5 model)"),nxe.forEach(t),kEo=i(x),gu=n(x,"LI",{});var sxe=s(gu);Xce=n(sxe,"STRONG",{});var Cgt=s(Xce);SEo=r(Cgt,"tapas"),Cgt.forEach(t),REo=r(sxe," \u2014 "),Zj=n(sxe,"A",{href:!0});var wgt=s(Zj);PEo=r(wgt,"TapasModel"),wgt.forEach(t),BEo=r(sxe," (TAPAS model)"),sxe.forEach(t),NEo=i(x),hu=n(x,"LI",{});var lxe=s(hu);zce=n(lxe,"STRONG",{});var Agt=s(zce);IEo=r(Agt,"trajectory_transformer"),Agt.forEach(t),qEo=r(lxe," \u2014 "),eD=n(lxe,"A",{href:!0});var Lgt=s(eD);jEo=r(Lgt,"TrajectoryTransformerModel"),Lgt.forEach(t),DEo=r(lxe," (Trajectory Transformer model)"),lxe.forEach(t),GEo=i(x),pu=n(x,"LI",{});var ixe=s(pu);Qce=n(ixe,"STRONG",{});var ygt=s(Qce);OEo=r(ygt,"transfo-xl"),ygt.forEach(t),VEo=r(ixe," \u2014 "),oD=n(ixe,"A",{href:!0});var xgt=s(oD);XEo=r(xgt,"TransfoXLModel"),xgt.forEach(t),zEo=r(ixe," (Transformer-XL model)"),ixe.forEach(t),QEo=i(x),_u=n(x,"LI",{});var dxe=s(_u);Wce=n(dxe,"STRONG",{});var $gt=s(Wce);WEo=r($gt,"unispeech"),$gt.forEach(t),HEo=r(dxe," \u2014 "),rD=n(dxe,"A",{href:!0});var kgt=s(rD);UEo=r(kgt,"UniSpeechModel"),kgt.forEach(t),JEo=r(dxe," (UniSpeech model)"),dxe.forEach(t),YEo=i(x),uu=n(x,"LI",{});var cxe=s(uu);Hce=n(cxe,"STRONG",{});var Sgt=s(Hce);KEo=r(Sgt,"unispeech-sat"),Sgt.forEach(t),ZEo=r(cxe," \u2014 "),tD=n(cxe,"A",{href:!0});var Rgt=s(tD);eCo=r(Rgt,"UniSpeechSatModel"),Rgt.forEach(t),oCo=r(cxe," (UniSpeechSat model)"),cxe.forEach(t),rCo=i(x),bu=n(x,"LI",{});var fxe=s(bu);Uce=n(fxe,"STRONG",{});var Pgt=s(Uce);tCo=r(Pgt,"van"),Pgt.forEach(t),aCo=r(fxe," \u2014 "),aD=n(fxe,"A",{href:!0});var Bgt=s(aD);nCo=r(Bgt,"VanModel"),Bgt.forEach(t),sCo=r(fxe," (VAN model)"),fxe.forEach(t),lCo=i(x),vu=n(x,"LI",{});var mxe=s(vu);Jce=n(mxe,"STRONG",{});var Ngt=s(Jce);iCo=r(Ngt,"vilt"),Ngt.forEach(t),dCo=r(mxe," \u2014 "),nD=n(mxe,"A",{href:!0});var Igt=s(nD);cCo=r(Igt,"ViltModel"),Igt.forEach(t),fCo=r(mxe," (ViLT model)"),mxe.forEach(t),mCo=i(x),Fu=n(x,"LI",{});var gxe=s(Fu);Yce=n(gxe,"STRONG",{});var qgt=s(Yce);gCo=r(qgt,"vision-text-dual-encoder"),qgt.forEach(t),hCo=r(gxe," \u2014 "),sD=n(gxe,"A",{href:!0});var jgt=s(sD);pCo=r(jgt,"VisionTextDualEncoderModel"),jgt.forEach(t),_Co=r(gxe," (VisionTextDualEncoder model)"),gxe.forEach(t),uCo=i(x),Tu=n(x,"LI",{});var hxe=s(Tu);Kce=n(hxe,"STRONG",{});var Dgt=s(Kce);bCo=r(Dgt,"visual_bert"),Dgt.forEach(t),vCo=r(hxe," \u2014 "),lD=n(hxe,"A",{href:!0});var Ggt=s(lD);FCo=r(Ggt,"VisualBertModel"),Ggt.forEach(t),TCo=r(hxe," (VisualBERT model)"),hxe.forEach(t),MCo=i(x),Mu=n(x,"LI",{});var pxe=s(Mu);Zce=n(pxe,"STRONG",{});var Ogt=s(Zce);ECo=r(Ogt,"vit"),Ogt.forEach(t),CCo=r(pxe," \u2014 "),iD=n(pxe,"A",{href:!0});var Vgt=s(iD);wCo=r(Vgt,"ViTModel"),Vgt.forEach(t),ACo=r(pxe," (ViT model)"),pxe.forEach(t),LCo=i(x),Eu=n(x,"LI",{});var _xe=s(Eu);efe=n(_xe,"STRONG",{});var Xgt=s(efe);yCo=r(Xgt,"vit_mae"),Xgt.forEach(t),xCo=r(_xe," \u2014 "),dD=n(_xe,"A",{href:!0});var zgt=s(dD);$Co=r(zgt,"ViTMAEModel"),zgt.forEach(t),kCo=r(_xe," (ViTMAE model)"),_xe.forEach(t),SCo=i(x),Cu=n(x,"LI",{});var uxe=s(Cu);ofe=n(uxe,"STRONG",{});var Qgt=s(ofe);RCo=r(Qgt,"wav2vec2"),Qgt.forEach(t),PCo=r(uxe," \u2014 "),cD=n(uxe,"A",{href:!0});var Wgt=s(cD);BCo=r(Wgt,"Wav2Vec2Model"),Wgt.forEach(t),NCo=r(uxe," (Wav2Vec2 model)"),uxe.forEach(t),ICo=i(x),wu=n(x,"LI",{});var bxe=s(wu);rfe=n(bxe,"STRONG",{});var Hgt=s(rfe);qCo=r(Hgt,"wav2vec2-conformer"),Hgt.forEach(t),jCo=r(bxe," \u2014 "),fD=n(bxe,"A",{href:!0});var Ugt=s(fD);DCo=r(Ugt,"Wav2Vec2ConformerModel"),Ugt.forEach(t),GCo=r(bxe," (Wav2Vec2-Conformer model)"),bxe.forEach(t),OCo=i(x),Au=n(x,"LI",{});var vxe=s(Au);tfe=n(vxe,"STRONG",{});var Jgt=s(tfe);VCo=r(Jgt,"wavlm"),Jgt.forEach(t),XCo=r(vxe," \u2014 "),mD=n(vxe,"A",{href:!0});var Ygt=s(mD);zCo=r(Ygt,"WavLMModel"),Ygt.forEach(t),QCo=r(vxe," (WavLM model)"),vxe.forEach(t),WCo=i(x),Lu=n(x,"LI",{});var Fxe=s(Lu);afe=n(Fxe,"STRONG",{});var Kgt=s(afe);HCo=r(Kgt,"xglm"),Kgt.forEach(t),UCo=r(Fxe," \u2014 "),gD=n(Fxe,"A",{href:!0});var Zgt=s(gD);JCo=r(Zgt,"XGLMModel"),Zgt.forEach(t),YCo=r(Fxe," (XGLM model)"),Fxe.forEach(t),KCo=i(x),yu=n(x,"LI",{});var Txe=s(yu);nfe=n(Txe,"STRONG",{});var eht=s(nfe);ZCo=r(eht,"xlm"),eht.forEach(t),e3o=r(Txe," \u2014 "),hD=n(Txe,"A",{href:!0});var oht=s(hD);o3o=r(oht,"XLMModel"),oht.forEach(t),r3o=r(Txe," (XLM model)"),Txe.forEach(t),t3o=i(x),xu=n(x,"LI",{});var Mxe=s(xu);sfe=n(Mxe,"STRONG",{});var rht=s(sfe);a3o=r(rht,"xlm-prophetnet"),rht.forEach(t),n3o=r(Mxe," \u2014 "),pD=n(Mxe,"A",{href:!0});var tht=s(pD);s3o=r(tht,"XLMProphetNetModel"),tht.forEach(t),l3o=r(Mxe," (XLM-ProphetNet model)"),Mxe.forEach(t),i3o=i(x),$u=n(x,"LI",{});var Exe=s($u);lfe=n(Exe,"STRONG",{});var aht=s(lfe);d3o=r(aht,"xlm-roberta"),aht.forEach(t),c3o=r(Exe," \u2014 "),_D=n(Exe,"A",{href:!0});var nht=s(_D);f3o=r(nht,"XLMRobertaModel"),nht.forEach(t),m3o=r(Exe," (XLM-RoBERTa model)"),Exe.forEach(t),g3o=i(x),ku=n(x,"LI",{});var Cxe=s(ku);ife=n(Cxe,"STRONG",{});var sht=s(ife);h3o=r(sht,"xlm-roberta-xl"),sht.forEach(t),p3o=r(Cxe," \u2014 "),uD=n(Cxe,"A",{href:!0});var lht=s(uD);_3o=r(lht,"XLMRobertaXLModel"),lht.forEach(t),u3o=r(Cxe," (XLM-RoBERTa-XL model)"),Cxe.forEach(t),b3o=i(x),Su=n(x,"LI",{});var wxe=s(Su);dfe=n(wxe,"STRONG",{});var iht=s(dfe);v3o=r(iht,"xlnet"),iht.forEach(t),F3o=r(wxe," \u2014 "),bD=n(wxe,"A",{href:!0});var dht=s(bD);T3o=r(dht,"XLNetModel"),dht.forEach(t),M3o=r(wxe," (XLNet model)"),wxe.forEach(t),E3o=i(x),Ru=n(x,"LI",{});var Axe=s(Ru);cfe=n(Axe,"STRONG",{});var cht=s(cfe);C3o=r(cht,"yolos"),cht.forEach(t),w3o=r(Axe," \u2014 "),vD=n(Axe,"A",{href:!0});var fht=s(vD);A3o=r(fht,"YolosModel"),fht.forEach(t),L3o=r(Axe," (YOLOS model)"),Axe.forEach(t),y3o=i(x),Pu=n(x,"LI",{});var Lxe=s(Pu);ffe=n(Lxe,"STRONG",{});var mht=s(ffe);x3o=r(mht,"yoso"),mht.forEach(t),$3o=r(Lxe," \u2014 "),FD=n(Lxe,"A",{href:!0});var ght=s(FD);k3o=r(ght,"YosoModel"),ght.forEach(t),S3o=r(Lxe," (YOSO model)"),Lxe.forEach(t),x.forEach(t),R3o=i(na),Bu=n(na,"P",{});var yxe=s(Bu);P3o=r(yxe,"The model is set in evaluation mode by default using "),mfe=n(yxe,"CODE",{});var hht=s(mfe);B3o=r(hht,"model.eval()"),hht.forEach(t),N3o=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n(yxe,"CODE",{});var pht=s(gfe);I3o=r(pht,"model.train()"),pht.forEach(t),yxe.forEach(t),q3o=i(na),T(Nu.$$.fragment,na),na.forEach(t),Ks.forEach(t),IOe=i(f),Di=n(f,"H2",{class:!0});var VXe=s(Di);Iu=n(VXe,"A",{id:!0,class:!0,href:!0});var _ht=s(Iu);hfe=n(_ht,"SPAN",{});var uht=s(hfe);T(pL.$$.fragment,uht),uht.forEach(t),_ht.forEach(t),j3o=i(VXe),pfe=n(VXe,"SPAN",{});var bht=s(pfe);D3o=r(bht,"AutoModelForPreTraining"),bht.forEach(t),VXe.forEach(t),qOe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(_L.$$.fragment,Zs),G3o=i(Zs),Gi=n(Zs,"P",{});var Goe=s(Gi);O3o=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TD=n(Goe,"A",{href:!0});var vht=s(TD);V3o=r(vht,"from_pretrained()"),vht.forEach(t),X3o=r(Goe," class method or the "),MD=n(Goe,"A",{href:!0});var Fht=s(MD);z3o=r(Fht,"from_config()"),Fht.forEach(t),Q3o=r(Goe,` class
method.`),Goe.forEach(t),W3o=i(Zs),uL=n(Zs,"P",{});var XXe=s(uL);H3o=r(XXe,"This class cannot be instantiated directly using "),_fe=n(XXe,"CODE",{});var Tht=s(_fe);U3o=r(Tht,"__init__()"),Tht.forEach(t),J3o=r(XXe," (throws an error)."),XXe.forEach(t),Y3o=i(Zs),lt=n(Zs,"DIV",{class:!0});var Vw=s(lt);T(bL.$$.fragment,Vw),K3o=i(Vw),ufe=n(Vw,"P",{});var Mht=s(ufe);Z3o=r(Mht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mht.forEach(t),e0o=i(Vw),Oi=n(Vw,"P",{});var Ooe=s(Oi);o0o=r(Ooe,`Note:
Loading a model from its configuration file does `),bfe=n(Ooe,"STRONG",{});var Eht=s(bfe);r0o=r(Eht,"not"),Eht.forEach(t),t0o=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=n(Ooe,"A",{href:!0});var Cht=s(ED);a0o=r(Cht,"from_pretrained()"),Cht.forEach(t),n0o=r(Ooe," to load the model weights."),Ooe.forEach(t),s0o=i(Vw),T(qu.$$.fragment,Vw),Vw.forEach(t),l0o=i(Zs),Ye=n(Zs,"DIV",{class:!0});var sa=s(Ye);T(vL.$$.fragment,sa),i0o=i(sa),vfe=n(sa,"P",{});var wht=s(vfe);d0o=r(wht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wht.forEach(t),c0o=i(sa),Ba=n(sa,"P",{});var Xw=s(Ba);f0o=r(Xw,"The model class to instantiate is selected based on the "),Ffe=n(Xw,"CODE",{});var Aht=s(Ffe);m0o=r(Aht,"model_type"),Aht.forEach(t),g0o=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Tfe=n(Xw,"CODE",{});var Lht=s(Tfe);h0o=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),p0o=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=n(Xw,"CODE",{});var yht=s(Mfe);_0o=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),u0o=r(Xw,":"),Xw.forEach(t),b0o=i(sa),G=n(sa,"UL",{});var O=s(G);ju=n(O,"LI",{});var xxe=s(ju);Efe=n(xxe,"STRONG",{});var xht=s(Efe);v0o=r(xht,"albert"),xht.forEach(t),F0o=r(xxe," \u2014 "),CD=n(xxe,"A",{href:!0});var $ht=s(CD);T0o=r($ht,"AlbertForPreTraining"),$ht.forEach(t),M0o=r(xxe," (ALBERT model)"),xxe.forEach(t),E0o=i(O),Du=n(O,"LI",{});var $xe=s(Du);Cfe=n($xe,"STRONG",{});var kht=s(Cfe);C0o=r(kht,"bart"),kht.forEach(t),w0o=r($xe," \u2014 "),wD=n($xe,"A",{href:!0});var Sht=s(wD);A0o=r(Sht,"BartForConditionalGeneration"),Sht.forEach(t),L0o=r($xe," (BART model)"),$xe.forEach(t),y0o=i(O),Gu=n(O,"LI",{});var kxe=s(Gu);wfe=n(kxe,"STRONG",{});var Rht=s(wfe);x0o=r(Rht,"bert"),Rht.forEach(t),$0o=r(kxe," \u2014 "),AD=n(kxe,"A",{href:!0});var Pht=s(AD);k0o=r(Pht,"BertForPreTraining"),Pht.forEach(t),S0o=r(kxe," (BERT model)"),kxe.forEach(t),R0o=i(O),Ou=n(O,"LI",{});var Sxe=s(Ou);Afe=n(Sxe,"STRONG",{});var Bht=s(Afe);P0o=r(Bht,"big_bird"),Bht.forEach(t),B0o=r(Sxe," \u2014 "),LD=n(Sxe,"A",{href:!0});var Nht=s(LD);N0o=r(Nht,"BigBirdForPreTraining"),Nht.forEach(t),I0o=r(Sxe," (BigBird model)"),Sxe.forEach(t),q0o=i(O),Vu=n(O,"LI",{});var Rxe=s(Vu);Lfe=n(Rxe,"STRONG",{});var Iht=s(Lfe);j0o=r(Iht,"bloom"),Iht.forEach(t),D0o=r(Rxe," \u2014 "),yD=n(Rxe,"A",{href:!0});var qht=s(yD);G0o=r(qht,"BloomForCausalLM"),qht.forEach(t),O0o=r(Rxe," (BLOOM model)"),Rxe.forEach(t),V0o=i(O),Xu=n(O,"LI",{});var Pxe=s(Xu);yfe=n(Pxe,"STRONG",{});var jht=s(yfe);X0o=r(jht,"camembert"),jht.forEach(t),z0o=r(Pxe," \u2014 "),xD=n(Pxe,"A",{href:!0});var Dht=s(xD);Q0o=r(Dht,"CamembertForMaskedLM"),Dht.forEach(t),W0o=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),H0o=i(O),zu=n(O,"LI",{});var Bxe=s(zu);xfe=n(Bxe,"STRONG",{});var Ght=s(xfe);U0o=r(Ght,"ctrl"),Ght.forEach(t),J0o=r(Bxe," \u2014 "),$D=n(Bxe,"A",{href:!0});var Oht=s($D);Y0o=r(Oht,"CTRLLMHeadModel"),Oht.forEach(t),K0o=r(Bxe," (CTRL model)"),Bxe.forEach(t),Z0o=i(O),Qu=n(O,"LI",{});var Nxe=s(Qu);$fe=n(Nxe,"STRONG",{});var Vht=s($fe);ewo=r(Vht,"data2vec-text"),Vht.forEach(t),owo=r(Nxe," \u2014 "),kD=n(Nxe,"A",{href:!0});var Xht=s(kD);rwo=r(Xht,"Data2VecTextForMaskedLM"),Xht.forEach(t),two=r(Nxe," (Data2VecText model)"),Nxe.forEach(t),awo=i(O),Wu=n(O,"LI",{});var Ixe=s(Wu);kfe=n(Ixe,"STRONG",{});var zht=s(kfe);nwo=r(zht,"deberta"),zht.forEach(t),swo=r(Ixe," \u2014 "),SD=n(Ixe,"A",{href:!0});var Qht=s(SD);lwo=r(Qht,"DebertaForMaskedLM"),Qht.forEach(t),iwo=r(Ixe," (DeBERTa model)"),Ixe.forEach(t),dwo=i(O),Hu=n(O,"LI",{});var qxe=s(Hu);Sfe=n(qxe,"STRONG",{});var Wht=s(Sfe);cwo=r(Wht,"deberta-v2"),Wht.forEach(t),fwo=r(qxe," \u2014 "),RD=n(qxe,"A",{href:!0});var Hht=s(RD);mwo=r(Hht,"DebertaV2ForMaskedLM"),Hht.forEach(t),gwo=r(qxe," (DeBERTa-v2 model)"),qxe.forEach(t),hwo=i(O),Uu=n(O,"LI",{});var jxe=s(Uu);Rfe=n(jxe,"STRONG",{});var Uht=s(Rfe);pwo=r(Uht,"distilbert"),Uht.forEach(t),_wo=r(jxe," \u2014 "),PD=n(jxe,"A",{href:!0});var Jht=s(PD);uwo=r(Jht,"DistilBertForMaskedLM"),Jht.forEach(t),bwo=r(jxe," (DistilBERT model)"),jxe.forEach(t),vwo=i(O),Ju=n(O,"LI",{});var Dxe=s(Ju);Pfe=n(Dxe,"STRONG",{});var Yht=s(Pfe);Fwo=r(Yht,"electra"),Yht.forEach(t),Two=r(Dxe," \u2014 "),BD=n(Dxe,"A",{href:!0});var Kht=s(BD);Mwo=r(Kht,"ElectraForPreTraining"),Kht.forEach(t),Ewo=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),Cwo=i(O),Yu=n(O,"LI",{});var Gxe=s(Yu);Bfe=n(Gxe,"STRONG",{});var Zht=s(Bfe);wwo=r(Zht,"flaubert"),Zht.forEach(t),Awo=r(Gxe," \u2014 "),ND=n(Gxe,"A",{href:!0});var ept=s(ND);Lwo=r(ept,"FlaubertWithLMHeadModel"),ept.forEach(t),ywo=r(Gxe," (FlauBERT model)"),Gxe.forEach(t),xwo=i(O),Ku=n(O,"LI",{});var Oxe=s(Ku);Nfe=n(Oxe,"STRONG",{});var opt=s(Nfe);$wo=r(opt,"flava"),opt.forEach(t),kwo=r(Oxe," \u2014 "),ID=n(Oxe,"A",{href:!0});var rpt=s(ID);Swo=r(rpt,"FlavaForPreTraining"),rpt.forEach(t),Rwo=r(Oxe," (FLAVA model)"),Oxe.forEach(t),Pwo=i(O),Zu=n(O,"LI",{});var Vxe=s(Zu);Ife=n(Vxe,"STRONG",{});var tpt=s(Ife);Bwo=r(tpt,"fnet"),tpt.forEach(t),Nwo=r(Vxe," \u2014 "),qD=n(Vxe,"A",{href:!0});var apt=s(qD);Iwo=r(apt,"FNetForPreTraining"),apt.forEach(t),qwo=r(Vxe," (FNet model)"),Vxe.forEach(t),jwo=i(O),e1=n(O,"LI",{});var Xxe=s(e1);qfe=n(Xxe,"STRONG",{});var npt=s(qfe);Dwo=r(npt,"fsmt"),npt.forEach(t),Gwo=r(Xxe," \u2014 "),jD=n(Xxe,"A",{href:!0});var spt=s(jD);Owo=r(spt,"FSMTForConditionalGeneration"),spt.forEach(t),Vwo=r(Xxe," (FairSeq Machine-Translation model)"),Xxe.forEach(t),Xwo=i(O),o1=n(O,"LI",{});var zxe=s(o1);jfe=n(zxe,"STRONG",{});var lpt=s(jfe);zwo=r(lpt,"funnel"),lpt.forEach(t),Qwo=r(zxe," \u2014 "),DD=n(zxe,"A",{href:!0});var ipt=s(DD);Wwo=r(ipt,"FunnelForPreTraining"),ipt.forEach(t),Hwo=r(zxe," (Funnel Transformer model)"),zxe.forEach(t),Uwo=i(O),r1=n(O,"LI",{});var Qxe=s(r1);Dfe=n(Qxe,"STRONG",{});var dpt=s(Dfe);Jwo=r(dpt,"gpt2"),dpt.forEach(t),Ywo=r(Qxe," \u2014 "),GD=n(Qxe,"A",{href:!0});var cpt=s(GD);Kwo=r(cpt,"GPT2LMHeadModel"),cpt.forEach(t),Zwo=r(Qxe," (OpenAI GPT-2 model)"),Qxe.forEach(t),eAo=i(O),t1=n(O,"LI",{});var Wxe=s(t1);Gfe=n(Wxe,"STRONG",{});var fpt=s(Gfe);oAo=r(fpt,"ibert"),fpt.forEach(t),rAo=r(Wxe," \u2014 "),OD=n(Wxe,"A",{href:!0});var mpt=s(OD);tAo=r(mpt,"IBertForMaskedLM"),mpt.forEach(t),aAo=r(Wxe," (I-BERT model)"),Wxe.forEach(t),nAo=i(O),a1=n(O,"LI",{});var Hxe=s(a1);Ofe=n(Hxe,"STRONG",{});var gpt=s(Ofe);sAo=r(gpt,"layoutlm"),gpt.forEach(t),lAo=r(Hxe," \u2014 "),VD=n(Hxe,"A",{href:!0});var hpt=s(VD);iAo=r(hpt,"LayoutLMForMaskedLM"),hpt.forEach(t),dAo=r(Hxe," (LayoutLM model)"),Hxe.forEach(t),cAo=i(O),n1=n(O,"LI",{});var Uxe=s(n1);Vfe=n(Uxe,"STRONG",{});var ppt=s(Vfe);fAo=r(ppt,"longformer"),ppt.forEach(t),mAo=r(Uxe," \u2014 "),XD=n(Uxe,"A",{href:!0});var _pt=s(XD);gAo=r(_pt,"LongformerForMaskedLM"),_pt.forEach(t),hAo=r(Uxe," (Longformer model)"),Uxe.forEach(t),pAo=i(O),s1=n(O,"LI",{});var Jxe=s(s1);Xfe=n(Jxe,"STRONG",{});var upt=s(Xfe);_Ao=r(upt,"lxmert"),upt.forEach(t),uAo=r(Jxe," \u2014 "),zD=n(Jxe,"A",{href:!0});var bpt=s(zD);bAo=r(bpt,"LxmertForPreTraining"),bpt.forEach(t),vAo=r(Jxe," (LXMERT model)"),Jxe.forEach(t),FAo=i(O),l1=n(O,"LI",{});var Yxe=s(l1);zfe=n(Yxe,"STRONG",{});var vpt=s(zfe);TAo=r(vpt,"megatron-bert"),vpt.forEach(t),MAo=r(Yxe," \u2014 "),QD=n(Yxe,"A",{href:!0});var Fpt=s(QD);EAo=r(Fpt,"MegatronBertForPreTraining"),Fpt.forEach(t),CAo=r(Yxe," (Megatron-BERT model)"),Yxe.forEach(t),wAo=i(O),i1=n(O,"LI",{});var Kxe=s(i1);Qfe=n(Kxe,"STRONG",{});var Tpt=s(Qfe);AAo=r(Tpt,"mobilebert"),Tpt.forEach(t),LAo=r(Kxe," \u2014 "),WD=n(Kxe,"A",{href:!0});var Mpt=s(WD);yAo=r(Mpt,"MobileBertForPreTraining"),Mpt.forEach(t),xAo=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),$Ao=i(O),d1=n(O,"LI",{});var Zxe=s(d1);Wfe=n(Zxe,"STRONG",{});var Ept=s(Wfe);kAo=r(Ept,"mpnet"),Ept.forEach(t),SAo=r(Zxe," \u2014 "),HD=n(Zxe,"A",{href:!0});var Cpt=s(HD);RAo=r(Cpt,"MPNetForMaskedLM"),Cpt.forEach(t),PAo=r(Zxe," (MPNet model)"),Zxe.forEach(t),BAo=i(O),c1=n(O,"LI",{});var e$e=s(c1);Hfe=n(e$e,"STRONG",{});var wpt=s(Hfe);NAo=r(wpt,"nezha"),wpt.forEach(t),IAo=r(e$e," \u2014 "),UD=n(e$e,"A",{href:!0});var Apt=s(UD);qAo=r(Apt,"NezhaForPreTraining"),Apt.forEach(t),jAo=r(e$e," (Nezha model)"),e$e.forEach(t),DAo=i(O),f1=n(O,"LI",{});var o$e=s(f1);Ufe=n(o$e,"STRONG",{});var Lpt=s(Ufe);GAo=r(Lpt,"openai-gpt"),Lpt.forEach(t),OAo=r(o$e," \u2014 "),JD=n(o$e,"A",{href:!0});var ypt=s(JD);VAo=r(ypt,"OpenAIGPTLMHeadModel"),ypt.forEach(t),XAo=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),zAo=i(O),m1=n(O,"LI",{});var r$e=s(m1);Jfe=n(r$e,"STRONG",{});var xpt=s(Jfe);QAo=r(xpt,"retribert"),xpt.forEach(t),WAo=r(r$e," \u2014 "),YD=n(r$e,"A",{href:!0});var $pt=s(YD);HAo=r($pt,"RetriBertModel"),$pt.forEach(t),UAo=r(r$e," (RetriBERT model)"),r$e.forEach(t),JAo=i(O),g1=n(O,"LI",{});var t$e=s(g1);Yfe=n(t$e,"STRONG",{});var kpt=s(Yfe);YAo=r(kpt,"roberta"),kpt.forEach(t),KAo=r(t$e," \u2014 "),KD=n(t$e,"A",{href:!0});var Spt=s(KD);ZAo=r(Spt,"RobertaForMaskedLM"),Spt.forEach(t),e6o=r(t$e," (RoBERTa model)"),t$e.forEach(t),o6o=i(O),h1=n(O,"LI",{});var a$e=s(h1);Kfe=n(a$e,"STRONG",{});var Rpt=s(Kfe);r6o=r(Rpt,"splinter"),Rpt.forEach(t),t6o=r(a$e," \u2014 "),ZD=n(a$e,"A",{href:!0});var Ppt=s(ZD);a6o=r(Ppt,"SplinterForPreTraining"),Ppt.forEach(t),n6o=r(a$e," (Splinter model)"),a$e.forEach(t),s6o=i(O),p1=n(O,"LI",{});var n$e=s(p1);Zfe=n(n$e,"STRONG",{});var Bpt=s(Zfe);l6o=r(Bpt,"squeezebert"),Bpt.forEach(t),i6o=r(n$e," \u2014 "),eG=n(n$e,"A",{href:!0});var Npt=s(eG);d6o=r(Npt,"SqueezeBertForMaskedLM"),Npt.forEach(t),c6o=r(n$e," (SqueezeBERT model)"),n$e.forEach(t),f6o=i(O),_1=n(O,"LI",{});var s$e=s(_1);eme=n(s$e,"STRONG",{});var Ipt=s(eme);m6o=r(Ipt,"t5"),Ipt.forEach(t),g6o=r(s$e," \u2014 "),oG=n(s$e,"A",{href:!0});var qpt=s(oG);h6o=r(qpt,"T5ForConditionalGeneration"),qpt.forEach(t),p6o=r(s$e," (T5 model)"),s$e.forEach(t),_6o=i(O),u1=n(O,"LI",{});var l$e=s(u1);ome=n(l$e,"STRONG",{});var jpt=s(ome);u6o=r(jpt,"tapas"),jpt.forEach(t),b6o=r(l$e," \u2014 "),rG=n(l$e,"A",{href:!0});var Dpt=s(rG);v6o=r(Dpt,"TapasForMaskedLM"),Dpt.forEach(t),F6o=r(l$e," (TAPAS model)"),l$e.forEach(t),T6o=i(O),b1=n(O,"LI",{});var i$e=s(b1);rme=n(i$e,"STRONG",{});var Gpt=s(rme);M6o=r(Gpt,"transfo-xl"),Gpt.forEach(t),E6o=r(i$e," \u2014 "),tG=n(i$e,"A",{href:!0});var Opt=s(tG);C6o=r(Opt,"TransfoXLLMHeadModel"),Opt.forEach(t),w6o=r(i$e," (Transformer-XL model)"),i$e.forEach(t),A6o=i(O),v1=n(O,"LI",{});var d$e=s(v1);tme=n(d$e,"STRONG",{});var Vpt=s(tme);L6o=r(Vpt,"unispeech"),Vpt.forEach(t),y6o=r(d$e," \u2014 "),aG=n(d$e,"A",{href:!0});var Xpt=s(aG);x6o=r(Xpt,"UniSpeechForPreTraining"),Xpt.forEach(t),$6o=r(d$e," (UniSpeech model)"),d$e.forEach(t),k6o=i(O),F1=n(O,"LI",{});var c$e=s(F1);ame=n(c$e,"STRONG",{});var zpt=s(ame);S6o=r(zpt,"unispeech-sat"),zpt.forEach(t),R6o=r(c$e," \u2014 "),nG=n(c$e,"A",{href:!0});var Qpt=s(nG);P6o=r(Qpt,"UniSpeechSatForPreTraining"),Qpt.forEach(t),B6o=r(c$e," (UniSpeechSat model)"),c$e.forEach(t),N6o=i(O),T1=n(O,"LI",{});var f$e=s(T1);nme=n(f$e,"STRONG",{});var Wpt=s(nme);I6o=r(Wpt,"visual_bert"),Wpt.forEach(t),q6o=r(f$e," \u2014 "),sG=n(f$e,"A",{href:!0});var Hpt=s(sG);j6o=r(Hpt,"VisualBertForPreTraining"),Hpt.forEach(t),D6o=r(f$e," (VisualBERT model)"),f$e.forEach(t),G6o=i(O),M1=n(O,"LI",{});var m$e=s(M1);sme=n(m$e,"STRONG",{});var Upt=s(sme);O6o=r(Upt,"vit_mae"),Upt.forEach(t),V6o=r(m$e," \u2014 "),lG=n(m$e,"A",{href:!0});var Jpt=s(lG);X6o=r(Jpt,"ViTMAEForPreTraining"),Jpt.forEach(t),z6o=r(m$e," (ViTMAE model)"),m$e.forEach(t),Q6o=i(O),E1=n(O,"LI",{});var g$e=s(E1);lme=n(g$e,"STRONG",{});var Ypt=s(lme);W6o=r(Ypt,"wav2vec2"),Ypt.forEach(t),H6o=r(g$e," \u2014 "),iG=n(g$e,"A",{href:!0});var Kpt=s(iG);U6o=r(Kpt,"Wav2Vec2ForPreTraining"),Kpt.forEach(t),J6o=r(g$e," (Wav2Vec2 model)"),g$e.forEach(t),Y6o=i(O),C1=n(O,"LI",{});var h$e=s(C1);ime=n(h$e,"STRONG",{});var Zpt=s(ime);K6o=r(Zpt,"wav2vec2-conformer"),Zpt.forEach(t),Z6o=r(h$e," \u2014 "),dG=n(h$e,"A",{href:!0});var e_t=s(dG);eLo=r(e_t,"Wav2Vec2ConformerForPreTraining"),e_t.forEach(t),oLo=r(h$e," (Wav2Vec2-Conformer model)"),h$e.forEach(t),rLo=i(O),w1=n(O,"LI",{});var p$e=s(w1);dme=n(p$e,"STRONG",{});var o_t=s(dme);tLo=r(o_t,"xlm"),o_t.forEach(t),aLo=r(p$e," \u2014 "),cG=n(p$e,"A",{href:!0});var r_t=s(cG);nLo=r(r_t,"XLMWithLMHeadModel"),r_t.forEach(t),sLo=r(p$e," (XLM model)"),p$e.forEach(t),lLo=i(O),A1=n(O,"LI",{});var _$e=s(A1);cme=n(_$e,"STRONG",{});var t_t=s(cme);iLo=r(t_t,"xlm-roberta"),t_t.forEach(t),dLo=r(_$e," \u2014 "),fG=n(_$e,"A",{href:!0});var a_t=s(fG);cLo=r(a_t,"XLMRobertaForMaskedLM"),a_t.forEach(t),fLo=r(_$e," (XLM-RoBERTa model)"),_$e.forEach(t),mLo=i(O),L1=n(O,"LI",{});var u$e=s(L1);fme=n(u$e,"STRONG",{});var n_t=s(fme);gLo=r(n_t,"xlm-roberta-xl"),n_t.forEach(t),hLo=r(u$e," \u2014 "),mG=n(u$e,"A",{href:!0});var s_t=s(mG);pLo=r(s_t,"XLMRobertaXLForMaskedLM"),s_t.forEach(t),_Lo=r(u$e," (XLM-RoBERTa-XL model)"),u$e.forEach(t),uLo=i(O),y1=n(O,"LI",{});var b$e=s(y1);mme=n(b$e,"STRONG",{});var l_t=s(mme);bLo=r(l_t,"xlnet"),l_t.forEach(t),vLo=r(b$e," \u2014 "),gG=n(b$e,"A",{href:!0});var i_t=s(gG);FLo=r(i_t,"XLNetLMHeadModel"),i_t.forEach(t),TLo=r(b$e," (XLNet model)"),b$e.forEach(t),O.forEach(t),MLo=i(sa),x1=n(sa,"P",{});var v$e=s(x1);ELo=r(v$e,"The model is set in evaluation mode by default using "),gme=n(v$e,"CODE",{});var d_t=s(gme);CLo=r(d_t,"model.eval()"),d_t.forEach(t),wLo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=n(v$e,"CODE",{});var c_t=s(hme);ALo=r(c_t,"model.train()"),c_t.forEach(t),v$e.forEach(t),LLo=i(sa),T($1.$$.fragment,sa),sa.forEach(t),Zs.forEach(t),jOe=i(f),Vi=n(f,"H2",{class:!0});var zXe=s(Vi);k1=n(zXe,"A",{id:!0,class:!0,href:!0});var f_t=s(k1);pme=n(f_t,"SPAN",{});var m_t=s(pme);T(FL.$$.fragment,m_t),m_t.forEach(t),f_t.forEach(t),yLo=i(zXe),_me=n(zXe,"SPAN",{});var g_t=s(_me);xLo=r(g_t,"AutoModelForCausalLM"),g_t.forEach(t),zXe.forEach(t),DOe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(TL.$$.fragment,el),$Lo=i(el),Xi=n(el,"P",{});var Voe=s(Xi);kLo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hG=n(Voe,"A",{href:!0});var h_t=s(hG);SLo=r(h_t,"from_pretrained()"),h_t.forEach(t),RLo=r(Voe," class method or the "),pG=n(Voe,"A",{href:!0});var p_t=s(pG);PLo=r(p_t,"from_config()"),p_t.forEach(t),BLo=r(Voe,` class
method.`),Voe.forEach(t),NLo=i(el),ML=n(el,"P",{});var QXe=s(ML);ILo=r(QXe,"This class cannot be instantiated directly using "),ume=n(QXe,"CODE",{});var __t=s(ume);qLo=r(__t,"__init__()"),__t.forEach(t),jLo=r(QXe," (throws an error)."),QXe.forEach(t),DLo=i(el),it=n(el,"DIV",{class:!0});var zw=s(it);T(EL.$$.fragment,zw),GLo=i(zw),bme=n(zw,"P",{});var u_t=s(bme);OLo=r(u_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u_t.forEach(t),VLo=i(zw),zi=n(zw,"P",{});var Xoe=s(zi);XLo=r(Xoe,`Note:
Loading a model from its configuration file does `),vme=n(Xoe,"STRONG",{});var b_t=s(vme);zLo=r(b_t,"not"),b_t.forEach(t),QLo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(Xoe,"A",{href:!0});var v_t=s(_G);WLo=r(v_t,"from_pretrained()"),v_t.forEach(t),HLo=r(Xoe," to load the model weights."),Xoe.forEach(t),ULo=i(zw),T(S1.$$.fragment,zw),zw.forEach(t),JLo=i(el),Ke=n(el,"DIV",{class:!0});var la=s(Ke);T(CL.$$.fragment,la),YLo=i(la),Fme=n(la,"P",{});var F_t=s(Fme);KLo=r(F_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F_t.forEach(t),ZLo=i(la),Na=n(la,"P",{});var Qw=s(Na);eyo=r(Qw,"The model class to instantiate is selected based on the "),Tme=n(Qw,"CODE",{});var T_t=s(Tme);oyo=r(T_t,"model_type"),T_t.forEach(t),ryo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Mme=n(Qw,"CODE",{});var M_t=s(Mme);tyo=r(M_t,"pretrained_model_name_or_path"),M_t.forEach(t),ayo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eme=n(Qw,"CODE",{});var E_t=s(Eme);nyo=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),syo=r(Qw,":"),Qw.forEach(t),lyo=i(la),z=n(la,"UL",{});var Q=s(z);R1=n(Q,"LI",{});var F$e=s(R1);Cme=n(F$e,"STRONG",{});var C_t=s(Cme);iyo=r(C_t,"bart"),C_t.forEach(t),dyo=r(F$e," \u2014 "),uG=n(F$e,"A",{href:!0});var w_t=s(uG);cyo=r(w_t,"BartForCausalLM"),w_t.forEach(t),fyo=r(F$e," (BART model)"),F$e.forEach(t),myo=i(Q),P1=n(Q,"LI",{});var T$e=s(P1);wme=n(T$e,"STRONG",{});var A_t=s(wme);gyo=r(A_t,"bert"),A_t.forEach(t),hyo=r(T$e," \u2014 "),bG=n(T$e,"A",{href:!0});var L_t=s(bG);pyo=r(L_t,"BertLMHeadModel"),L_t.forEach(t),_yo=r(T$e," (BERT model)"),T$e.forEach(t),uyo=i(Q),B1=n(Q,"LI",{});var M$e=s(B1);Ame=n(M$e,"STRONG",{});var y_t=s(Ame);byo=r(y_t,"bert-generation"),y_t.forEach(t),vyo=r(M$e," \u2014 "),vG=n(M$e,"A",{href:!0});var x_t=s(vG);Fyo=r(x_t,"BertGenerationDecoder"),x_t.forEach(t),Tyo=r(M$e," (Bert Generation model)"),M$e.forEach(t),Myo=i(Q),N1=n(Q,"LI",{});var E$e=s(N1);Lme=n(E$e,"STRONG",{});var $_t=s(Lme);Eyo=r($_t,"big_bird"),$_t.forEach(t),Cyo=r(E$e," \u2014 "),FG=n(E$e,"A",{href:!0});var k_t=s(FG);wyo=r(k_t,"BigBirdForCausalLM"),k_t.forEach(t),Ayo=r(E$e," (BigBird model)"),E$e.forEach(t),Lyo=i(Q),I1=n(Q,"LI",{});var C$e=s(I1);yme=n(C$e,"STRONG",{});var S_t=s(yme);yyo=r(S_t,"bigbird_pegasus"),S_t.forEach(t),xyo=r(C$e," \u2014 "),TG=n(C$e,"A",{href:!0});var R_t=s(TG);$yo=r(R_t,"BigBirdPegasusForCausalLM"),R_t.forEach(t),kyo=r(C$e," (BigBird-Pegasus model)"),C$e.forEach(t),Syo=i(Q),q1=n(Q,"LI",{});var w$e=s(q1);xme=n(w$e,"STRONG",{});var P_t=s(xme);Ryo=r(P_t,"blenderbot"),P_t.forEach(t),Pyo=r(w$e," \u2014 "),MG=n(w$e,"A",{href:!0});var B_t=s(MG);Byo=r(B_t,"BlenderbotForCausalLM"),B_t.forEach(t),Nyo=r(w$e," (Blenderbot model)"),w$e.forEach(t),Iyo=i(Q),j1=n(Q,"LI",{});var A$e=s(j1);$me=n(A$e,"STRONG",{});var N_t=s($me);qyo=r(N_t,"blenderbot-small"),N_t.forEach(t),jyo=r(A$e," \u2014 "),EG=n(A$e,"A",{href:!0});var I_t=s(EG);Dyo=r(I_t,"BlenderbotSmallForCausalLM"),I_t.forEach(t),Gyo=r(A$e," (BlenderbotSmall model)"),A$e.forEach(t),Oyo=i(Q),D1=n(Q,"LI",{});var L$e=s(D1);kme=n(L$e,"STRONG",{});var q_t=s(kme);Vyo=r(q_t,"bloom"),q_t.forEach(t),Xyo=r(L$e," \u2014 "),CG=n(L$e,"A",{href:!0});var j_t=s(CG);zyo=r(j_t,"BloomForCausalLM"),j_t.forEach(t),Qyo=r(L$e," (BLOOM model)"),L$e.forEach(t),Wyo=i(Q),G1=n(Q,"LI",{});var y$e=s(G1);Sme=n(y$e,"STRONG",{});var D_t=s(Sme);Hyo=r(D_t,"camembert"),D_t.forEach(t),Uyo=r(y$e," \u2014 "),wG=n(y$e,"A",{href:!0});var G_t=s(wG);Jyo=r(G_t,"CamembertForCausalLM"),G_t.forEach(t),Yyo=r(y$e," (CamemBERT model)"),y$e.forEach(t),Kyo=i(Q),O1=n(Q,"LI",{});var x$e=s(O1);Rme=n(x$e,"STRONG",{});var O_t=s(Rme);Zyo=r(O_t,"codegen"),O_t.forEach(t),e9o=r(x$e," \u2014 "),AG=n(x$e,"A",{href:!0});var V_t=s(AG);o9o=r(V_t,"CodeGenForCausalLM"),V_t.forEach(t),r9o=r(x$e," (CodeGen model)"),x$e.forEach(t),t9o=i(Q),V1=n(Q,"LI",{});var $$e=s(V1);Pme=n($$e,"STRONG",{});var X_t=s(Pme);a9o=r(X_t,"ctrl"),X_t.forEach(t),n9o=r($$e," \u2014 "),LG=n($$e,"A",{href:!0});var z_t=s(LG);s9o=r(z_t,"CTRLLMHeadModel"),z_t.forEach(t),l9o=r($$e," (CTRL model)"),$$e.forEach(t),i9o=i(Q),X1=n(Q,"LI",{});var k$e=s(X1);Bme=n(k$e,"STRONG",{});var Q_t=s(Bme);d9o=r(Q_t,"data2vec-text"),Q_t.forEach(t),c9o=r(k$e," \u2014 "),yG=n(k$e,"A",{href:!0});var W_t=s(yG);f9o=r(W_t,"Data2VecTextForCausalLM"),W_t.forEach(t),m9o=r(k$e," (Data2VecText model)"),k$e.forEach(t),g9o=i(Q),z1=n(Q,"LI",{});var S$e=s(z1);Nme=n(S$e,"STRONG",{});var H_t=s(Nme);h9o=r(H_t,"electra"),H_t.forEach(t),p9o=r(S$e," \u2014 "),xG=n(S$e,"A",{href:!0});var U_t=s(xG);_9o=r(U_t,"ElectraForCausalLM"),U_t.forEach(t),u9o=r(S$e," (ELECTRA model)"),S$e.forEach(t),b9o=i(Q),Q1=n(Q,"LI",{});var R$e=s(Q1);Ime=n(R$e,"STRONG",{});var J_t=s(Ime);v9o=r(J_t,"gpt2"),J_t.forEach(t),F9o=r(R$e," \u2014 "),$G=n(R$e,"A",{href:!0});var Y_t=s($G);T9o=r(Y_t,"GPT2LMHeadModel"),Y_t.forEach(t),M9o=r(R$e," (OpenAI GPT-2 model)"),R$e.forEach(t),E9o=i(Q),W1=n(Q,"LI",{});var P$e=s(W1);qme=n(P$e,"STRONG",{});var K_t=s(qme);C9o=r(K_t,"gpt_neo"),K_t.forEach(t),w9o=r(P$e," \u2014 "),kG=n(P$e,"A",{href:!0});var Z_t=s(kG);A9o=r(Z_t,"GPTNeoForCausalLM"),Z_t.forEach(t),L9o=r(P$e," (GPT Neo model)"),P$e.forEach(t),y9o=i(Q),H1=n(Q,"LI",{});var B$e=s(H1);jme=n(B$e,"STRONG",{});var eut=s(jme);x9o=r(eut,"gpt_neox"),eut.forEach(t),$9o=r(B$e," \u2014 "),SG=n(B$e,"A",{href:!0});var out=s(SG);k9o=r(out,"GPTNeoXForCausalLM"),out.forEach(t),S9o=r(B$e," (GPT NeoX model)"),B$e.forEach(t),R9o=i(Q),U1=n(Q,"LI",{});var N$e=s(U1);Dme=n(N$e,"STRONG",{});var rut=s(Dme);P9o=r(rut,"gptj"),rut.forEach(t),B9o=r(N$e," \u2014 "),RG=n(N$e,"A",{href:!0});var tut=s(RG);N9o=r(tut,"GPTJForCausalLM"),tut.forEach(t),I9o=r(N$e," (GPT-J model)"),N$e.forEach(t),q9o=i(Q),J1=n(Q,"LI",{});var I$e=s(J1);Gme=n(I$e,"STRONG",{});var aut=s(Gme);j9o=r(aut,"marian"),aut.forEach(t),D9o=r(I$e," \u2014 "),PG=n(I$e,"A",{href:!0});var nut=s(PG);G9o=r(nut,"MarianForCausalLM"),nut.forEach(t),O9o=r(I$e," (Marian model)"),I$e.forEach(t),V9o=i(Q),Y1=n(Q,"LI",{});var q$e=s(Y1);Ome=n(q$e,"STRONG",{});var sut=s(Ome);X9o=r(sut,"mbart"),sut.forEach(t),z9o=r(q$e," \u2014 "),BG=n(q$e,"A",{href:!0});var lut=s(BG);Q9o=r(lut,"MBartForCausalLM"),lut.forEach(t),W9o=r(q$e," (mBART model)"),q$e.forEach(t),H9o=i(Q),K1=n(Q,"LI",{});var j$e=s(K1);Vme=n(j$e,"STRONG",{});var iut=s(Vme);U9o=r(iut,"megatron-bert"),iut.forEach(t),J9o=r(j$e," \u2014 "),NG=n(j$e,"A",{href:!0});var dut=s(NG);Y9o=r(dut,"MegatronBertForCausalLM"),dut.forEach(t),K9o=r(j$e," (Megatron-BERT model)"),j$e.forEach(t),Z9o=i(Q),Z1=n(Q,"LI",{});var D$e=s(Z1);Xme=n(D$e,"STRONG",{});var cut=s(Xme);exo=r(cut,"openai-gpt"),cut.forEach(t),oxo=r(D$e," \u2014 "),IG=n(D$e,"A",{href:!0});var fut=s(IG);rxo=r(fut,"OpenAIGPTLMHeadModel"),fut.forEach(t),txo=r(D$e," (OpenAI GPT model)"),D$e.forEach(t),axo=i(Q),e2=n(Q,"LI",{});var G$e=s(e2);zme=n(G$e,"STRONG",{});var mut=s(zme);nxo=r(mut,"opt"),mut.forEach(t),sxo=r(G$e," \u2014 "),qG=n(G$e,"A",{href:!0});var gut=s(qG);lxo=r(gut,"OPTForCausalLM"),gut.forEach(t),ixo=r(G$e," (OPT model)"),G$e.forEach(t),dxo=i(Q),o2=n(Q,"LI",{});var O$e=s(o2);Qme=n(O$e,"STRONG",{});var hut=s(Qme);cxo=r(hut,"pegasus"),hut.forEach(t),fxo=r(O$e," \u2014 "),jG=n(O$e,"A",{href:!0});var put=s(jG);mxo=r(put,"PegasusForCausalLM"),put.forEach(t),gxo=r(O$e," (Pegasus model)"),O$e.forEach(t),hxo=i(Q),r2=n(Q,"LI",{});var V$e=s(r2);Wme=n(V$e,"STRONG",{});var _ut=s(Wme);pxo=r(_ut,"plbart"),_ut.forEach(t),_xo=r(V$e," \u2014 "),DG=n(V$e,"A",{href:!0});var uut=s(DG);uxo=r(uut,"PLBartForCausalLM"),uut.forEach(t),bxo=r(V$e," (PLBart model)"),V$e.forEach(t),vxo=i(Q),t2=n(Q,"LI",{});var X$e=s(t2);Hme=n(X$e,"STRONG",{});var but=s(Hme);Fxo=r(but,"prophetnet"),but.forEach(t),Txo=r(X$e," \u2014 "),GG=n(X$e,"A",{href:!0});var vut=s(GG);Mxo=r(vut,"ProphetNetForCausalLM"),vut.forEach(t),Exo=r(X$e," (ProphetNet model)"),X$e.forEach(t),Cxo=i(Q),a2=n(Q,"LI",{});var z$e=s(a2);Ume=n(z$e,"STRONG",{});var Fut=s(Ume);wxo=r(Fut,"qdqbert"),Fut.forEach(t),Axo=r(z$e," \u2014 "),OG=n(z$e,"A",{href:!0});var Tut=s(OG);Lxo=r(Tut,"QDQBertLMHeadModel"),Tut.forEach(t),yxo=r(z$e," (QDQBert model)"),z$e.forEach(t),xxo=i(Q),n2=n(Q,"LI",{});var Q$e=s(n2);Jme=n(Q$e,"STRONG",{});var Mut=s(Jme);$xo=r(Mut,"reformer"),Mut.forEach(t),kxo=r(Q$e," \u2014 "),VG=n(Q$e,"A",{href:!0});var Eut=s(VG);Sxo=r(Eut,"ReformerModelWithLMHead"),Eut.forEach(t),Rxo=r(Q$e," (Reformer model)"),Q$e.forEach(t),Pxo=i(Q),s2=n(Q,"LI",{});var W$e=s(s2);Yme=n(W$e,"STRONG",{});var Cut=s(Yme);Bxo=r(Cut,"rembert"),Cut.forEach(t),Nxo=r(W$e," \u2014 "),XG=n(W$e,"A",{href:!0});var wut=s(XG);Ixo=r(wut,"RemBertForCausalLM"),wut.forEach(t),qxo=r(W$e," (RemBERT model)"),W$e.forEach(t),jxo=i(Q),l2=n(Q,"LI",{});var H$e=s(l2);Kme=n(H$e,"STRONG",{});var Aut=s(Kme);Dxo=r(Aut,"roberta"),Aut.forEach(t),Gxo=r(H$e," \u2014 "),zG=n(H$e,"A",{href:!0});var Lut=s(zG);Oxo=r(Lut,"RobertaForCausalLM"),Lut.forEach(t),Vxo=r(H$e," (RoBERTa model)"),H$e.forEach(t),Xxo=i(Q),i2=n(Q,"LI",{});var U$e=s(i2);Zme=n(U$e,"STRONG",{});var yut=s(Zme);zxo=r(yut,"roformer"),yut.forEach(t),Qxo=r(U$e," \u2014 "),QG=n(U$e,"A",{href:!0});var xut=s(QG);Wxo=r(xut,"RoFormerForCausalLM"),xut.forEach(t),Hxo=r(U$e," (RoFormer model)"),U$e.forEach(t),Uxo=i(Q),d2=n(Q,"LI",{});var J$e=s(d2);ege=n(J$e,"STRONG",{});var $ut=s(ege);Jxo=r($ut,"speech_to_text_2"),$ut.forEach(t),Yxo=r(J$e," \u2014 "),WG=n(J$e,"A",{href:!0});var kut=s(WG);Kxo=r(kut,"Speech2Text2ForCausalLM"),kut.forEach(t),Zxo=r(J$e," (Speech2Text2 model)"),J$e.forEach(t),e$o=i(Q),c2=n(Q,"LI",{});var Y$e=s(c2);oge=n(Y$e,"STRONG",{});var Sut=s(oge);o$o=r(Sut,"transfo-xl"),Sut.forEach(t),r$o=r(Y$e," \u2014 "),HG=n(Y$e,"A",{href:!0});var Rut=s(HG);t$o=r(Rut,"TransfoXLLMHeadModel"),Rut.forEach(t),a$o=r(Y$e," (Transformer-XL model)"),Y$e.forEach(t),n$o=i(Q),f2=n(Q,"LI",{});var K$e=s(f2);rge=n(K$e,"STRONG",{});var Put=s(rge);s$o=r(Put,"trocr"),Put.forEach(t),l$o=r(K$e," \u2014 "),UG=n(K$e,"A",{href:!0});var But=s(UG);i$o=r(But,"TrOCRForCausalLM"),But.forEach(t),d$o=r(K$e," (TrOCR model)"),K$e.forEach(t),c$o=i(Q),m2=n(Q,"LI",{});var Z$e=s(m2);tge=n(Z$e,"STRONG",{});var Nut=s(tge);f$o=r(Nut,"xglm"),Nut.forEach(t),m$o=r(Z$e," \u2014 "),JG=n(Z$e,"A",{href:!0});var Iut=s(JG);g$o=r(Iut,"XGLMForCausalLM"),Iut.forEach(t),h$o=r(Z$e," (XGLM model)"),Z$e.forEach(t),p$o=i(Q),g2=n(Q,"LI",{});var eke=s(g2);age=n(eke,"STRONG",{});var qut=s(age);_$o=r(qut,"xlm"),qut.forEach(t),u$o=r(eke," \u2014 "),YG=n(eke,"A",{href:!0});var jut=s(YG);b$o=r(jut,"XLMWithLMHeadModel"),jut.forEach(t),v$o=r(eke," (XLM model)"),eke.forEach(t),F$o=i(Q),h2=n(Q,"LI",{});var oke=s(h2);nge=n(oke,"STRONG",{});var Dut=s(nge);T$o=r(Dut,"xlm-prophetnet"),Dut.forEach(t),M$o=r(oke," \u2014 "),KG=n(oke,"A",{href:!0});var Gut=s(KG);E$o=r(Gut,"XLMProphetNetForCausalLM"),Gut.forEach(t),C$o=r(oke," (XLM-ProphetNet model)"),oke.forEach(t),w$o=i(Q),p2=n(Q,"LI",{});var rke=s(p2);sge=n(rke,"STRONG",{});var Out=s(sge);A$o=r(Out,"xlm-roberta"),Out.forEach(t),L$o=r(rke," \u2014 "),ZG=n(rke,"A",{href:!0});var Vut=s(ZG);y$o=r(Vut,"XLMRobertaForCausalLM"),Vut.forEach(t),x$o=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),$$o=i(Q),_2=n(Q,"LI",{});var tke=s(_2);lge=n(tke,"STRONG",{});var Xut=s(lge);k$o=r(Xut,"xlm-roberta-xl"),Xut.forEach(t),S$o=r(tke," \u2014 "),eO=n(tke,"A",{href:!0});var zut=s(eO);R$o=r(zut,"XLMRobertaXLForCausalLM"),zut.forEach(t),P$o=r(tke," (XLM-RoBERTa-XL model)"),tke.forEach(t),B$o=i(Q),u2=n(Q,"LI",{});var ake=s(u2);ige=n(ake,"STRONG",{});var Qut=s(ige);N$o=r(Qut,"xlnet"),Qut.forEach(t),I$o=r(ake," \u2014 "),oO=n(ake,"A",{href:!0});var Wut=s(oO);q$o=r(Wut,"XLNetLMHeadModel"),Wut.forEach(t),j$o=r(ake," (XLNet model)"),ake.forEach(t),Q.forEach(t),D$o=i(la),b2=n(la,"P",{});var nke=s(b2);G$o=r(nke,"The model is set in evaluation mode by default using "),dge=n(nke,"CODE",{});var Hut=s(dge);O$o=r(Hut,"model.eval()"),Hut.forEach(t),V$o=r(nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=n(nke,"CODE",{});var Uut=s(cge);X$o=r(Uut,"model.train()"),Uut.forEach(t),nke.forEach(t),z$o=i(la),T(v2.$$.fragment,la),la.forEach(t),el.forEach(t),GOe=i(f),Qi=n(f,"H2",{class:!0});var WXe=s(Qi);F2=n(WXe,"A",{id:!0,class:!0,href:!0});var Jut=s(F2);fge=n(Jut,"SPAN",{});var Yut=s(fge);T(wL.$$.fragment,Yut),Yut.forEach(t),Jut.forEach(t),Q$o=i(WXe),mge=n(WXe,"SPAN",{});var Kut=s(mge);W$o=r(Kut,"AutoModelForMaskedLM"),Kut.forEach(t),WXe.forEach(t),OOe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(AL.$$.fragment,ol),H$o=i(ol),Wi=n(ol,"P",{});var zoe=s(Wi);U$o=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rO=n(zoe,"A",{href:!0});var Zut=s(rO);J$o=r(Zut,"from_pretrained()"),Zut.forEach(t),Y$o=r(zoe," class method or the "),tO=n(zoe,"A",{href:!0});var e1t=s(tO);K$o=r(e1t,"from_config()"),e1t.forEach(t),Z$o=r(zoe,` class
method.`),zoe.forEach(t),eko=i(ol),LL=n(ol,"P",{});var HXe=s(LL);oko=r(HXe,"This class cannot be instantiated directly using "),gge=n(HXe,"CODE",{});var o1t=s(gge);rko=r(o1t,"__init__()"),o1t.forEach(t),tko=r(HXe," (throws an error)."),HXe.forEach(t),ako=i(ol),dt=n(ol,"DIV",{class:!0});var Ww=s(dt);T(yL.$$.fragment,Ww),nko=i(Ww),hge=n(Ww,"P",{});var r1t=s(hge);sko=r(r1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),r1t.forEach(t),lko=i(Ww),Hi=n(Ww,"P",{});var Qoe=s(Hi);iko=r(Qoe,`Note:
Loading a model from its configuration file does `),pge=n(Qoe,"STRONG",{});var t1t=s(pge);dko=r(t1t,"not"),t1t.forEach(t),cko=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(Qoe,"A",{href:!0});var a1t=s(aO);fko=r(a1t,"from_pretrained()"),a1t.forEach(t),mko=r(Qoe," to load the model weights."),Qoe.forEach(t),gko=i(Ww),T(T2.$$.fragment,Ww),Ww.forEach(t),hko=i(ol),Ze=n(ol,"DIV",{class:!0});var ia=s(Ze);T(xL.$$.fragment,ia),pko=i(ia),_ge=n(ia,"P",{});var n1t=s(_ge);_ko=r(n1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n1t.forEach(t),uko=i(ia),Ia=n(ia,"P",{});var Hw=s(Ia);bko=r(Hw,"The model class to instantiate is selected based on the "),uge=n(Hw,"CODE",{});var s1t=s(uge);vko=r(s1t,"model_type"),s1t.forEach(t),Fko=r(Hw,` property of the config object (either
passed as an argument or loaded from `),bge=n(Hw,"CODE",{});var l1t=s(bge);Tko=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),Mko=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=n(Hw,"CODE",{});var i1t=s(vge);Eko=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),Cko=r(Hw,":"),Hw.forEach(t),wko=i(ia),W=n(ia,"UL",{});var U=s(W);M2=n(U,"LI",{});var ske=s(M2);Fge=n(ske,"STRONG",{});var d1t=s(Fge);Ako=r(d1t,"albert"),d1t.forEach(t),Lko=r(ske," \u2014 "),nO=n(ske,"A",{href:!0});var c1t=s(nO);yko=r(c1t,"AlbertForMaskedLM"),c1t.forEach(t),xko=r(ske," (ALBERT model)"),ske.forEach(t),$ko=i(U),E2=n(U,"LI",{});var lke=s(E2);Tge=n(lke,"STRONG",{});var f1t=s(Tge);kko=r(f1t,"bart"),f1t.forEach(t),Sko=r(lke," \u2014 "),sO=n(lke,"A",{href:!0});var m1t=s(sO);Rko=r(m1t,"BartForConditionalGeneration"),m1t.forEach(t),Pko=r(lke," (BART model)"),lke.forEach(t),Bko=i(U),C2=n(U,"LI",{});var ike=s(C2);Mge=n(ike,"STRONG",{});var g1t=s(Mge);Nko=r(g1t,"bert"),g1t.forEach(t),Iko=r(ike," \u2014 "),lO=n(ike,"A",{href:!0});var h1t=s(lO);qko=r(h1t,"BertForMaskedLM"),h1t.forEach(t),jko=r(ike," (BERT model)"),ike.forEach(t),Dko=i(U),w2=n(U,"LI",{});var dke=s(w2);Ege=n(dke,"STRONG",{});var p1t=s(Ege);Gko=r(p1t,"big_bird"),p1t.forEach(t),Oko=r(dke," \u2014 "),iO=n(dke,"A",{href:!0});var _1t=s(iO);Vko=r(_1t,"BigBirdForMaskedLM"),_1t.forEach(t),Xko=r(dke," (BigBird model)"),dke.forEach(t),zko=i(U),A2=n(U,"LI",{});var cke=s(A2);Cge=n(cke,"STRONG",{});var u1t=s(Cge);Qko=r(u1t,"camembert"),u1t.forEach(t),Wko=r(cke," \u2014 "),dO=n(cke,"A",{href:!0});var b1t=s(dO);Hko=r(b1t,"CamembertForMaskedLM"),b1t.forEach(t),Uko=r(cke," (CamemBERT model)"),cke.forEach(t),Jko=i(U),L2=n(U,"LI",{});var fke=s(L2);wge=n(fke,"STRONG",{});var v1t=s(wge);Yko=r(v1t,"convbert"),v1t.forEach(t),Kko=r(fke," \u2014 "),cO=n(fke,"A",{href:!0});var F1t=s(cO);Zko=r(F1t,"ConvBertForMaskedLM"),F1t.forEach(t),eSo=r(fke," (ConvBERT model)"),fke.forEach(t),oSo=i(U),y2=n(U,"LI",{});var mke=s(y2);Age=n(mke,"STRONG",{});var T1t=s(Age);rSo=r(T1t,"data2vec-text"),T1t.forEach(t),tSo=r(mke," \u2014 "),fO=n(mke,"A",{href:!0});var M1t=s(fO);aSo=r(M1t,"Data2VecTextForMaskedLM"),M1t.forEach(t),nSo=r(mke," (Data2VecText model)"),mke.forEach(t),sSo=i(U),x2=n(U,"LI",{});var gke=s(x2);Lge=n(gke,"STRONG",{});var E1t=s(Lge);lSo=r(E1t,"deberta"),E1t.forEach(t),iSo=r(gke," \u2014 "),mO=n(gke,"A",{href:!0});var C1t=s(mO);dSo=r(C1t,"DebertaForMaskedLM"),C1t.forEach(t),cSo=r(gke," (DeBERTa model)"),gke.forEach(t),fSo=i(U),$2=n(U,"LI",{});var hke=s($2);yge=n(hke,"STRONG",{});var w1t=s(yge);mSo=r(w1t,"deberta-v2"),w1t.forEach(t),gSo=r(hke," \u2014 "),gO=n(hke,"A",{href:!0});var A1t=s(gO);hSo=r(A1t,"DebertaV2ForMaskedLM"),A1t.forEach(t),pSo=r(hke," (DeBERTa-v2 model)"),hke.forEach(t),_So=i(U),k2=n(U,"LI",{});var pke=s(k2);xge=n(pke,"STRONG",{});var L1t=s(xge);uSo=r(L1t,"distilbert"),L1t.forEach(t),bSo=r(pke," \u2014 "),hO=n(pke,"A",{href:!0});var y1t=s(hO);vSo=r(y1t,"DistilBertForMaskedLM"),y1t.forEach(t),FSo=r(pke," (DistilBERT model)"),pke.forEach(t),TSo=i(U),S2=n(U,"LI",{});var _ke=s(S2);$ge=n(_ke,"STRONG",{});var x1t=s($ge);MSo=r(x1t,"electra"),x1t.forEach(t),ESo=r(_ke," \u2014 "),pO=n(_ke,"A",{href:!0});var $1t=s(pO);CSo=r($1t,"ElectraForMaskedLM"),$1t.forEach(t),wSo=r(_ke," (ELECTRA model)"),_ke.forEach(t),ASo=i(U),R2=n(U,"LI",{});var uke=s(R2);kge=n(uke,"STRONG",{});var k1t=s(kge);LSo=r(k1t,"flaubert"),k1t.forEach(t),ySo=r(uke," \u2014 "),_O=n(uke,"A",{href:!0});var S1t=s(_O);xSo=r(S1t,"FlaubertWithLMHeadModel"),S1t.forEach(t),$So=r(uke," (FlauBERT model)"),uke.forEach(t),kSo=i(U),P2=n(U,"LI",{});var bke=s(P2);Sge=n(bke,"STRONG",{});var R1t=s(Sge);SSo=r(R1t,"fnet"),R1t.forEach(t),RSo=r(bke," \u2014 "),uO=n(bke,"A",{href:!0});var P1t=s(uO);PSo=r(P1t,"FNetForMaskedLM"),P1t.forEach(t),BSo=r(bke," (FNet model)"),bke.forEach(t),NSo=i(U),B2=n(U,"LI",{});var vke=s(B2);Rge=n(vke,"STRONG",{});var B1t=s(Rge);ISo=r(B1t,"funnel"),B1t.forEach(t),qSo=r(vke," \u2014 "),bO=n(vke,"A",{href:!0});var N1t=s(bO);jSo=r(N1t,"FunnelForMaskedLM"),N1t.forEach(t),DSo=r(vke," (Funnel Transformer model)"),vke.forEach(t),GSo=i(U),N2=n(U,"LI",{});var Fke=s(N2);Pge=n(Fke,"STRONG",{});var I1t=s(Pge);OSo=r(I1t,"ibert"),I1t.forEach(t),VSo=r(Fke," \u2014 "),vO=n(Fke,"A",{href:!0});var q1t=s(vO);XSo=r(q1t,"IBertForMaskedLM"),q1t.forEach(t),zSo=r(Fke," (I-BERT model)"),Fke.forEach(t),QSo=i(U),I2=n(U,"LI",{});var Tke=s(I2);Bge=n(Tke,"STRONG",{});var j1t=s(Bge);WSo=r(j1t,"layoutlm"),j1t.forEach(t),HSo=r(Tke," \u2014 "),FO=n(Tke,"A",{href:!0});var D1t=s(FO);USo=r(D1t,"LayoutLMForMaskedLM"),D1t.forEach(t),JSo=r(Tke," (LayoutLM model)"),Tke.forEach(t),YSo=i(U),q2=n(U,"LI",{});var Mke=s(q2);Nge=n(Mke,"STRONG",{});var G1t=s(Nge);KSo=r(G1t,"longformer"),G1t.forEach(t),ZSo=r(Mke," \u2014 "),TO=n(Mke,"A",{href:!0});var O1t=s(TO);eRo=r(O1t,"LongformerForMaskedLM"),O1t.forEach(t),oRo=r(Mke," (Longformer model)"),Mke.forEach(t),rRo=i(U),j2=n(U,"LI",{});var Eke=s(j2);Ige=n(Eke,"STRONG",{});var V1t=s(Ige);tRo=r(V1t,"luke"),V1t.forEach(t),aRo=r(Eke," \u2014 "),MO=n(Eke,"A",{href:!0});var X1t=s(MO);nRo=r(X1t,"LukeForMaskedLM"),X1t.forEach(t),sRo=r(Eke," (LUKE model)"),Eke.forEach(t),lRo=i(U),D2=n(U,"LI",{});var Cke=s(D2);qge=n(Cke,"STRONG",{});var z1t=s(qge);iRo=r(z1t,"mbart"),z1t.forEach(t),dRo=r(Cke," \u2014 "),EO=n(Cke,"A",{href:!0});var Q1t=s(EO);cRo=r(Q1t,"MBartForConditionalGeneration"),Q1t.forEach(t),fRo=r(Cke," (mBART model)"),Cke.forEach(t),mRo=i(U),G2=n(U,"LI",{});var wke=s(G2);jge=n(wke,"STRONG",{});var W1t=s(jge);gRo=r(W1t,"megatron-bert"),W1t.forEach(t),hRo=r(wke," \u2014 "),CO=n(wke,"A",{href:!0});var H1t=s(CO);pRo=r(H1t,"MegatronBertForMaskedLM"),H1t.forEach(t),_Ro=r(wke," (Megatron-BERT model)"),wke.forEach(t),uRo=i(U),O2=n(U,"LI",{});var Ake=s(O2);Dge=n(Ake,"STRONG",{});var U1t=s(Dge);bRo=r(U1t,"mobilebert"),U1t.forEach(t),vRo=r(Ake," \u2014 "),wO=n(Ake,"A",{href:!0});var J1t=s(wO);FRo=r(J1t,"MobileBertForMaskedLM"),J1t.forEach(t),TRo=r(Ake," (MobileBERT model)"),Ake.forEach(t),MRo=i(U),V2=n(U,"LI",{});var Lke=s(V2);Gge=n(Lke,"STRONG",{});var Y1t=s(Gge);ERo=r(Y1t,"mpnet"),Y1t.forEach(t),CRo=r(Lke," \u2014 "),AO=n(Lke,"A",{href:!0});var K1t=s(AO);wRo=r(K1t,"MPNetForMaskedLM"),K1t.forEach(t),ARo=r(Lke," (MPNet model)"),Lke.forEach(t),LRo=i(U),X2=n(U,"LI",{});var yke=s(X2);Oge=n(yke,"STRONG",{});var Z1t=s(Oge);yRo=r(Z1t,"nezha"),Z1t.forEach(t),xRo=r(yke," \u2014 "),LO=n(yke,"A",{href:!0});var e2t=s(LO);$Ro=r(e2t,"NezhaForMaskedLM"),e2t.forEach(t),kRo=r(yke," (Nezha model)"),yke.forEach(t),SRo=i(U),z2=n(U,"LI",{});var xke=s(z2);Vge=n(xke,"STRONG",{});var o2t=s(Vge);RRo=r(o2t,"nystromformer"),o2t.forEach(t),PRo=r(xke," \u2014 "),yO=n(xke,"A",{href:!0});var r2t=s(yO);BRo=r(r2t,"NystromformerForMaskedLM"),r2t.forEach(t),NRo=r(xke," (Nystr\xF6mformer model)"),xke.forEach(t),IRo=i(U),Q2=n(U,"LI",{});var $ke=s(Q2);Xge=n($ke,"STRONG",{});var t2t=s(Xge);qRo=r(t2t,"perceiver"),t2t.forEach(t),jRo=r($ke," \u2014 "),xO=n($ke,"A",{href:!0});var a2t=s(xO);DRo=r(a2t,"PerceiverForMaskedLM"),a2t.forEach(t),GRo=r($ke," (Perceiver model)"),$ke.forEach(t),ORo=i(U),W2=n(U,"LI",{});var kke=s(W2);zge=n(kke,"STRONG",{});var n2t=s(zge);VRo=r(n2t,"qdqbert"),n2t.forEach(t),XRo=r(kke," \u2014 "),$O=n(kke,"A",{href:!0});var s2t=s($O);zRo=r(s2t,"QDQBertForMaskedLM"),s2t.forEach(t),QRo=r(kke," (QDQBert model)"),kke.forEach(t),WRo=i(U),H2=n(U,"LI",{});var Ske=s(H2);Qge=n(Ske,"STRONG",{});var l2t=s(Qge);HRo=r(l2t,"reformer"),l2t.forEach(t),URo=r(Ske," \u2014 "),kO=n(Ske,"A",{href:!0});var i2t=s(kO);JRo=r(i2t,"ReformerForMaskedLM"),i2t.forEach(t),YRo=r(Ske," (Reformer model)"),Ske.forEach(t),KRo=i(U),U2=n(U,"LI",{});var Rke=s(U2);Wge=n(Rke,"STRONG",{});var d2t=s(Wge);ZRo=r(d2t,"rembert"),d2t.forEach(t),ePo=r(Rke," \u2014 "),SO=n(Rke,"A",{href:!0});var c2t=s(SO);oPo=r(c2t,"RemBertForMaskedLM"),c2t.forEach(t),rPo=r(Rke," (RemBERT model)"),Rke.forEach(t),tPo=i(U),J2=n(U,"LI",{});var Pke=s(J2);Hge=n(Pke,"STRONG",{});var f2t=s(Hge);aPo=r(f2t,"roberta"),f2t.forEach(t),nPo=r(Pke," \u2014 "),RO=n(Pke,"A",{href:!0});var m2t=s(RO);sPo=r(m2t,"RobertaForMaskedLM"),m2t.forEach(t),lPo=r(Pke," (RoBERTa model)"),Pke.forEach(t),iPo=i(U),Y2=n(U,"LI",{});var Bke=s(Y2);Uge=n(Bke,"STRONG",{});var g2t=s(Uge);dPo=r(g2t,"roformer"),g2t.forEach(t),cPo=r(Bke," \u2014 "),PO=n(Bke,"A",{href:!0});var h2t=s(PO);fPo=r(h2t,"RoFormerForMaskedLM"),h2t.forEach(t),mPo=r(Bke," (RoFormer model)"),Bke.forEach(t),gPo=i(U),K2=n(U,"LI",{});var Nke=s(K2);Jge=n(Nke,"STRONG",{});var p2t=s(Jge);hPo=r(p2t,"squeezebert"),p2t.forEach(t),pPo=r(Nke," \u2014 "),BO=n(Nke,"A",{href:!0});var _2t=s(BO);_Po=r(_2t,"SqueezeBertForMaskedLM"),_2t.forEach(t),uPo=r(Nke," (SqueezeBERT model)"),Nke.forEach(t),bPo=i(U),Z2=n(U,"LI",{});var Ike=s(Z2);Yge=n(Ike,"STRONG",{});var u2t=s(Yge);vPo=r(u2t,"tapas"),u2t.forEach(t),FPo=r(Ike," \u2014 "),NO=n(Ike,"A",{href:!0});var b2t=s(NO);TPo=r(b2t,"TapasForMaskedLM"),b2t.forEach(t),MPo=r(Ike," (TAPAS model)"),Ike.forEach(t),EPo=i(U),eb=n(U,"LI",{});var qke=s(eb);Kge=n(qke,"STRONG",{});var v2t=s(Kge);CPo=r(v2t,"wav2vec2"),v2t.forEach(t),wPo=r(qke," \u2014 "),Zge=n(qke,"CODE",{});var F2t=s(Zge);APo=r(F2t,"Wav2Vec2ForMaskedLM"),F2t.forEach(t),LPo=r(qke," (Wav2Vec2 model)"),qke.forEach(t),yPo=i(U),ob=n(U,"LI",{});var jke=s(ob);ehe=n(jke,"STRONG",{});var T2t=s(ehe);xPo=r(T2t,"xlm"),T2t.forEach(t),$Po=r(jke," \u2014 "),IO=n(jke,"A",{href:!0});var M2t=s(IO);kPo=r(M2t,"XLMWithLMHeadModel"),M2t.forEach(t),SPo=r(jke," (XLM model)"),jke.forEach(t),RPo=i(U),rb=n(U,"LI",{});var Dke=s(rb);ohe=n(Dke,"STRONG",{});var E2t=s(ohe);PPo=r(E2t,"xlm-roberta"),E2t.forEach(t),BPo=r(Dke," \u2014 "),qO=n(Dke,"A",{href:!0});var C2t=s(qO);NPo=r(C2t,"XLMRobertaForMaskedLM"),C2t.forEach(t),IPo=r(Dke," (XLM-RoBERTa model)"),Dke.forEach(t),qPo=i(U),tb=n(U,"LI",{});var Gke=s(tb);rhe=n(Gke,"STRONG",{});var w2t=s(rhe);jPo=r(w2t,"xlm-roberta-xl"),w2t.forEach(t),DPo=r(Gke," \u2014 "),jO=n(Gke,"A",{href:!0});var A2t=s(jO);GPo=r(A2t,"XLMRobertaXLForMaskedLM"),A2t.forEach(t),OPo=r(Gke," (XLM-RoBERTa-XL model)"),Gke.forEach(t),VPo=i(U),ab=n(U,"LI",{});var Oke=s(ab);the=n(Oke,"STRONG",{});var L2t=s(the);XPo=r(L2t,"yoso"),L2t.forEach(t),zPo=r(Oke," \u2014 "),DO=n(Oke,"A",{href:!0});var y2t=s(DO);QPo=r(y2t,"YosoForMaskedLM"),y2t.forEach(t),WPo=r(Oke," (YOSO model)"),Oke.forEach(t),U.forEach(t),HPo=i(ia),nb=n(ia,"P",{});var Vke=s(nb);UPo=r(Vke,"The model is set in evaluation mode by default using "),ahe=n(Vke,"CODE",{});var x2t=s(ahe);JPo=r(x2t,"model.eval()"),x2t.forEach(t),YPo=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(Vke,"CODE",{});var $2t=s(nhe);KPo=r($2t,"model.train()"),$2t.forEach(t),Vke.forEach(t),ZPo=i(ia),T(sb.$$.fragment,ia),ia.forEach(t),ol.forEach(t),VOe=i(f),Ui=n(f,"H2",{class:!0});var UXe=s(Ui);lb=n(UXe,"A",{id:!0,class:!0,href:!0});var k2t=s(lb);she=n(k2t,"SPAN",{});var S2t=s(she);T($L.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),eBo=i(UXe),lhe=n(UXe,"SPAN",{});var R2t=s(lhe);oBo=r(R2t,"AutoModelForSeq2SeqLM"),R2t.forEach(t),UXe.forEach(t),XOe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T(kL.$$.fragment,rl),rBo=i(rl),Ji=n(rl,"P",{});var Woe=s(Ji);tBo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GO=n(Woe,"A",{href:!0});var P2t=s(GO);aBo=r(P2t,"from_pretrained()"),P2t.forEach(t),nBo=r(Woe," class method or the "),OO=n(Woe,"A",{href:!0});var B2t=s(OO);sBo=r(B2t,"from_config()"),B2t.forEach(t),lBo=r(Woe,` class
method.`),Woe.forEach(t),iBo=i(rl),SL=n(rl,"P",{});var JXe=s(SL);dBo=r(JXe,"This class cannot be instantiated directly using "),ihe=n(JXe,"CODE",{});var N2t=s(ihe);cBo=r(N2t,"__init__()"),N2t.forEach(t),fBo=r(JXe," (throws an error)."),JXe.forEach(t),mBo=i(rl),ct=n(rl,"DIV",{class:!0});var Uw=s(ct);T(RL.$$.fragment,Uw),gBo=i(Uw),dhe=n(Uw,"P",{});var I2t=s(dhe);hBo=r(I2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),I2t.forEach(t),pBo=i(Uw),Yi=n(Uw,"P",{});var Hoe=s(Yi);_Bo=r(Hoe,`Note:
Loading a model from its configuration file does `),che=n(Hoe,"STRONG",{});var q2t=s(che);uBo=r(q2t,"not"),q2t.forEach(t),bBo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(Hoe,"A",{href:!0});var j2t=s(VO);vBo=r(j2t,"from_pretrained()"),j2t.forEach(t),FBo=r(Hoe," to load the model weights."),Hoe.forEach(t),TBo=i(Uw),T(ib.$$.fragment,Uw),Uw.forEach(t),MBo=i(rl),eo=n(rl,"DIV",{class:!0});var da=s(eo);T(PL.$$.fragment,da),EBo=i(da),fhe=n(da,"P",{});var D2t=s(fhe);CBo=r(D2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D2t.forEach(t),wBo=i(da),qa=n(da,"P",{});var Jw=s(qa);ABo=r(Jw,"The model class to instantiate is selected based on the "),mhe=n(Jw,"CODE",{});var G2t=s(mhe);LBo=r(G2t,"model_type"),G2t.forEach(t),yBo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),ghe=n(Jw,"CODE",{});var O2t=s(ghe);xBo=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),$Bo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(Jw,"CODE",{});var V2t=s(hhe);kBo=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),SBo=r(Jw,":"),Jw.forEach(t),RBo=i(da),pe=n(da,"UL",{});var ve=s(pe);db=n(ve,"LI",{});var Xke=s(db);phe=n(Xke,"STRONG",{});var X2t=s(phe);PBo=r(X2t,"bart"),X2t.forEach(t),BBo=r(Xke," \u2014 "),XO=n(Xke,"A",{href:!0});var z2t=s(XO);NBo=r(z2t,"BartForConditionalGeneration"),z2t.forEach(t),IBo=r(Xke," (BART model)"),Xke.forEach(t),qBo=i(ve),cb=n(ve,"LI",{});var zke=s(cb);_he=n(zke,"STRONG",{});var Q2t=s(_he);jBo=r(Q2t,"bigbird_pegasus"),Q2t.forEach(t),DBo=r(zke," \u2014 "),zO=n(zke,"A",{href:!0});var W2t=s(zO);GBo=r(W2t,"BigBirdPegasusForConditionalGeneration"),W2t.forEach(t),OBo=r(zke," (BigBird-Pegasus model)"),zke.forEach(t),VBo=i(ve),fb=n(ve,"LI",{});var Qke=s(fb);uhe=n(Qke,"STRONG",{});var H2t=s(uhe);XBo=r(H2t,"blenderbot"),H2t.forEach(t),zBo=r(Qke," \u2014 "),QO=n(Qke,"A",{href:!0});var U2t=s(QO);QBo=r(U2t,"BlenderbotForConditionalGeneration"),U2t.forEach(t),WBo=r(Qke," (Blenderbot model)"),Qke.forEach(t),HBo=i(ve),mb=n(ve,"LI",{});var Wke=s(mb);bhe=n(Wke,"STRONG",{});var J2t=s(bhe);UBo=r(J2t,"blenderbot-small"),J2t.forEach(t),JBo=r(Wke," \u2014 "),WO=n(Wke,"A",{href:!0});var Y2t=s(WO);YBo=r(Y2t,"BlenderbotSmallForConditionalGeneration"),Y2t.forEach(t),KBo=r(Wke," (BlenderbotSmall model)"),Wke.forEach(t),ZBo=i(ve),gb=n(ve,"LI",{});var Hke=s(gb);vhe=n(Hke,"STRONG",{});var K2t=s(vhe);eNo=r(K2t,"encoder-decoder"),K2t.forEach(t),oNo=r(Hke," \u2014 "),HO=n(Hke,"A",{href:!0});var Z2t=s(HO);rNo=r(Z2t,"EncoderDecoderModel"),Z2t.forEach(t),tNo=r(Hke," (Encoder decoder model)"),Hke.forEach(t),aNo=i(ve),hb=n(ve,"LI",{});var Uke=s(hb);Fhe=n(Uke,"STRONG",{});var ebt=s(Fhe);nNo=r(ebt,"fsmt"),ebt.forEach(t),sNo=r(Uke," \u2014 "),UO=n(Uke,"A",{href:!0});var obt=s(UO);lNo=r(obt,"FSMTForConditionalGeneration"),obt.forEach(t),iNo=r(Uke," (FairSeq Machine-Translation model)"),Uke.forEach(t),dNo=i(ve),pb=n(ve,"LI",{});var Jke=s(pb);The=n(Jke,"STRONG",{});var rbt=s(The);cNo=r(rbt,"led"),rbt.forEach(t),fNo=r(Jke," \u2014 "),JO=n(Jke,"A",{href:!0});var tbt=s(JO);mNo=r(tbt,"LEDForConditionalGeneration"),tbt.forEach(t),gNo=r(Jke," (LED model)"),Jke.forEach(t),hNo=i(ve),_b=n(ve,"LI",{});var Yke=s(_b);Mhe=n(Yke,"STRONG",{});var abt=s(Mhe);pNo=r(abt,"longt5"),abt.forEach(t),_No=r(Yke," \u2014 "),YO=n(Yke,"A",{href:!0});var nbt=s(YO);uNo=r(nbt,"LongT5ForConditionalGeneration"),nbt.forEach(t),bNo=r(Yke," (LongT5 model)"),Yke.forEach(t),vNo=i(ve),ub=n(ve,"LI",{});var Kke=s(ub);Ehe=n(Kke,"STRONG",{});var sbt=s(Ehe);FNo=r(sbt,"m2m_100"),sbt.forEach(t),TNo=r(Kke," \u2014 "),KO=n(Kke,"A",{href:!0});var lbt=s(KO);MNo=r(lbt,"M2M100ForConditionalGeneration"),lbt.forEach(t),ENo=r(Kke," (M2M100 model)"),Kke.forEach(t),CNo=i(ve),bb=n(ve,"LI",{});var Zke=s(bb);Che=n(Zke,"STRONG",{});var ibt=s(Che);wNo=r(ibt,"marian"),ibt.forEach(t),ANo=r(Zke," \u2014 "),ZO=n(Zke,"A",{href:!0});var dbt=s(ZO);LNo=r(dbt,"MarianMTModel"),dbt.forEach(t),yNo=r(Zke," (Marian model)"),Zke.forEach(t),xNo=i(ve),vb=n(ve,"LI",{});var eSe=s(vb);whe=n(eSe,"STRONG",{});var cbt=s(whe);$No=r(cbt,"mbart"),cbt.forEach(t),kNo=r(eSe," \u2014 "),eV=n(eSe,"A",{href:!0});var fbt=s(eV);SNo=r(fbt,"MBartForConditionalGeneration"),fbt.forEach(t),RNo=r(eSe," (mBART model)"),eSe.forEach(t),PNo=i(ve),Fb=n(ve,"LI",{});var oSe=s(Fb);Ahe=n(oSe,"STRONG",{});var mbt=s(Ahe);BNo=r(mbt,"mt5"),mbt.forEach(t),NNo=r(oSe," \u2014 "),oV=n(oSe,"A",{href:!0});var gbt=s(oV);INo=r(gbt,"MT5ForConditionalGeneration"),gbt.forEach(t),qNo=r(oSe," (MT5 model)"),oSe.forEach(t),jNo=i(ve),Tb=n(ve,"LI",{});var rSe=s(Tb);Lhe=n(rSe,"STRONG",{});var hbt=s(Lhe);DNo=r(hbt,"pegasus"),hbt.forEach(t),GNo=r(rSe," \u2014 "),rV=n(rSe,"A",{href:!0});var pbt=s(rV);ONo=r(pbt,"PegasusForConditionalGeneration"),pbt.forEach(t),VNo=r(rSe," (Pegasus model)"),rSe.forEach(t),XNo=i(ve),Mb=n(ve,"LI",{});var tSe=s(Mb);yhe=n(tSe,"STRONG",{});var _bt=s(yhe);zNo=r(_bt,"plbart"),_bt.forEach(t),QNo=r(tSe," \u2014 "),tV=n(tSe,"A",{href:!0});var ubt=s(tV);WNo=r(ubt,"PLBartForConditionalGeneration"),ubt.forEach(t),HNo=r(tSe," (PLBart model)"),tSe.forEach(t),UNo=i(ve),Eb=n(ve,"LI",{});var aSe=s(Eb);xhe=n(aSe,"STRONG",{});var bbt=s(xhe);JNo=r(bbt,"prophetnet"),bbt.forEach(t),YNo=r(aSe," \u2014 "),aV=n(aSe,"A",{href:!0});var vbt=s(aV);KNo=r(vbt,"ProphetNetForConditionalGeneration"),vbt.forEach(t),ZNo=r(aSe," (ProphetNet model)"),aSe.forEach(t),eIo=i(ve),Cb=n(ve,"LI",{});var nSe=s(Cb);$he=n(nSe,"STRONG",{});var Fbt=s($he);oIo=r(Fbt,"t5"),Fbt.forEach(t),rIo=r(nSe," \u2014 "),nV=n(nSe,"A",{href:!0});var Tbt=s(nV);tIo=r(Tbt,"T5ForConditionalGeneration"),Tbt.forEach(t),aIo=r(nSe," (T5 model)"),nSe.forEach(t),nIo=i(ve),wb=n(ve,"LI",{});var sSe=s(wb);khe=n(sSe,"STRONG",{});var Mbt=s(khe);sIo=r(Mbt,"xlm-prophetnet"),Mbt.forEach(t),lIo=r(sSe," \u2014 "),sV=n(sSe,"A",{href:!0});var Ebt=s(sV);iIo=r(Ebt,"XLMProphetNetForConditionalGeneration"),Ebt.forEach(t),dIo=r(sSe," (XLM-ProphetNet model)"),sSe.forEach(t),ve.forEach(t),cIo=i(da),Ab=n(da,"P",{});var lSe=s(Ab);fIo=r(lSe,"The model is set in evaluation mode by default using "),She=n(lSe,"CODE",{});var Cbt=s(She);mIo=r(Cbt,"model.eval()"),Cbt.forEach(t),gIo=r(lSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(lSe,"CODE",{});var wbt=s(Rhe);hIo=r(wbt,"model.train()"),wbt.forEach(t),lSe.forEach(t),pIo=i(da),T(Lb.$$.fragment,da),da.forEach(t),rl.forEach(t),zOe=i(f),Ki=n(f,"H2",{class:!0});var YXe=s(Ki);yb=n(YXe,"A",{id:!0,class:!0,href:!0});var Abt=s(yb);Phe=n(Abt,"SPAN",{});var Lbt=s(Phe);T(BL.$$.fragment,Lbt),Lbt.forEach(t),Abt.forEach(t),_Io=i(YXe),Bhe=n(YXe,"SPAN",{});var ybt=s(Bhe);uIo=r(ybt,"AutoModelForSequenceClassification"),ybt.forEach(t),YXe.forEach(t),QOe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(NL.$$.fragment,tl),bIo=i(tl),Zi=n(tl,"P",{});var Uoe=s(Zi);vIo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lV=n(Uoe,"A",{href:!0});var xbt=s(lV);FIo=r(xbt,"from_pretrained()"),xbt.forEach(t),TIo=r(Uoe," class method or the "),iV=n(Uoe,"A",{href:!0});var $bt=s(iV);MIo=r($bt,"from_config()"),$bt.forEach(t),EIo=r(Uoe,` class
method.`),Uoe.forEach(t),CIo=i(tl),IL=n(tl,"P",{});var KXe=s(IL);wIo=r(KXe,"This class cannot be instantiated directly using "),Nhe=n(KXe,"CODE",{});var kbt=s(Nhe);AIo=r(kbt,"__init__()"),kbt.forEach(t),LIo=r(KXe," (throws an error)."),KXe.forEach(t),yIo=i(tl),ft=n(tl,"DIV",{class:!0});var Yw=s(ft);T(qL.$$.fragment,Yw),xIo=i(Yw),Ihe=n(Yw,"P",{});var Sbt=s(Ihe);$Io=r(Sbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sbt.forEach(t),kIo=i(Yw),ed=n(Yw,"P",{});var Joe=s(ed);SIo=r(Joe,`Note:
Loading a model from its configuration file does `),qhe=n(Joe,"STRONG",{});var Rbt=s(qhe);RIo=r(Rbt,"not"),Rbt.forEach(t),PIo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(Joe,"A",{href:!0});var Pbt=s(dV);BIo=r(Pbt,"from_pretrained()"),Pbt.forEach(t),NIo=r(Joe," to load the model weights."),Joe.forEach(t),IIo=i(Yw),T(xb.$$.fragment,Yw),Yw.forEach(t),qIo=i(tl),oo=n(tl,"DIV",{class:!0});var ca=s(oo);T(jL.$$.fragment,ca),jIo=i(ca),jhe=n(ca,"P",{});var Bbt=s(jhe);DIo=r(Bbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bbt.forEach(t),GIo=i(ca),ja=n(ca,"P",{});var Kw=s(ja);OIo=r(Kw,"The model class to instantiate is selected based on the "),Dhe=n(Kw,"CODE",{});var Nbt=s(Dhe);VIo=r(Nbt,"model_type"),Nbt.forEach(t),XIo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(Kw,"CODE",{});var Ibt=s(Ghe);zIo=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),QIo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(Kw,"CODE",{});var qbt=s(Ohe);WIo=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),HIo=r(Kw,":"),Kw.forEach(t),UIo=i(ca),I=n(ca,"UL",{});var q=s(I);$b=n(q,"LI",{});var iSe=s($b);Vhe=n(iSe,"STRONG",{});var jbt=s(Vhe);JIo=r(jbt,"albert"),jbt.forEach(t),YIo=r(iSe," \u2014 "),cV=n(iSe,"A",{href:!0});var Dbt=s(cV);KIo=r(Dbt,"AlbertForSequenceClassification"),Dbt.forEach(t),ZIo=r(iSe," (ALBERT model)"),iSe.forEach(t),eqo=i(q),kb=n(q,"LI",{});var dSe=s(kb);Xhe=n(dSe,"STRONG",{});var Gbt=s(Xhe);oqo=r(Gbt,"bart"),Gbt.forEach(t),rqo=r(dSe," \u2014 "),fV=n(dSe,"A",{href:!0});var Obt=s(fV);tqo=r(Obt,"BartForSequenceClassification"),Obt.forEach(t),aqo=r(dSe," (BART model)"),dSe.forEach(t),nqo=i(q),Sb=n(q,"LI",{});var cSe=s(Sb);zhe=n(cSe,"STRONG",{});var Vbt=s(zhe);sqo=r(Vbt,"bert"),Vbt.forEach(t),lqo=r(cSe," \u2014 "),mV=n(cSe,"A",{href:!0});var Xbt=s(mV);iqo=r(Xbt,"BertForSequenceClassification"),Xbt.forEach(t),dqo=r(cSe," (BERT model)"),cSe.forEach(t),cqo=i(q),Rb=n(q,"LI",{});var fSe=s(Rb);Qhe=n(fSe,"STRONG",{});var zbt=s(Qhe);fqo=r(zbt,"big_bird"),zbt.forEach(t),mqo=r(fSe," \u2014 "),gV=n(fSe,"A",{href:!0});var Qbt=s(gV);gqo=r(Qbt,"BigBirdForSequenceClassification"),Qbt.forEach(t),hqo=r(fSe," (BigBird model)"),fSe.forEach(t),pqo=i(q),Pb=n(q,"LI",{});var mSe=s(Pb);Whe=n(mSe,"STRONG",{});var Wbt=s(Whe);_qo=r(Wbt,"bigbird_pegasus"),Wbt.forEach(t),uqo=r(mSe," \u2014 "),hV=n(mSe,"A",{href:!0});var Hbt=s(hV);bqo=r(Hbt,"BigBirdPegasusForSequenceClassification"),Hbt.forEach(t),vqo=r(mSe," (BigBird-Pegasus model)"),mSe.forEach(t),Fqo=i(q),Bb=n(q,"LI",{});var gSe=s(Bb);Hhe=n(gSe,"STRONG",{});var Ubt=s(Hhe);Tqo=r(Ubt,"bloom"),Ubt.forEach(t),Mqo=r(gSe," \u2014 "),pV=n(gSe,"A",{href:!0});var Jbt=s(pV);Eqo=r(Jbt,"BloomForSequenceClassification"),Jbt.forEach(t),Cqo=r(gSe," (BLOOM model)"),gSe.forEach(t),wqo=i(q),Nb=n(q,"LI",{});var hSe=s(Nb);Uhe=n(hSe,"STRONG",{});var Ybt=s(Uhe);Aqo=r(Ybt,"camembert"),Ybt.forEach(t),Lqo=r(hSe," \u2014 "),_V=n(hSe,"A",{href:!0});var Kbt=s(_V);yqo=r(Kbt,"CamembertForSequenceClassification"),Kbt.forEach(t),xqo=r(hSe," (CamemBERT model)"),hSe.forEach(t),$qo=i(q),Ib=n(q,"LI",{});var pSe=s(Ib);Jhe=n(pSe,"STRONG",{});var Zbt=s(Jhe);kqo=r(Zbt,"canine"),Zbt.forEach(t),Sqo=r(pSe," \u2014 "),uV=n(pSe,"A",{href:!0});var e4t=s(uV);Rqo=r(e4t,"CanineForSequenceClassification"),e4t.forEach(t),Pqo=r(pSe," (CANINE model)"),pSe.forEach(t),Bqo=i(q),qb=n(q,"LI",{});var _Se=s(qb);Yhe=n(_Se,"STRONG",{});var o4t=s(Yhe);Nqo=r(o4t,"convbert"),o4t.forEach(t),Iqo=r(_Se," \u2014 "),bV=n(_Se,"A",{href:!0});var r4t=s(bV);qqo=r(r4t,"ConvBertForSequenceClassification"),r4t.forEach(t),jqo=r(_Se," (ConvBERT model)"),_Se.forEach(t),Dqo=i(q),jb=n(q,"LI",{});var uSe=s(jb);Khe=n(uSe,"STRONG",{});var t4t=s(Khe);Gqo=r(t4t,"ctrl"),t4t.forEach(t),Oqo=r(uSe," \u2014 "),vV=n(uSe,"A",{href:!0});var a4t=s(vV);Vqo=r(a4t,"CTRLForSequenceClassification"),a4t.forEach(t),Xqo=r(uSe," (CTRL model)"),uSe.forEach(t),zqo=i(q),Db=n(q,"LI",{});var bSe=s(Db);Zhe=n(bSe,"STRONG",{});var n4t=s(Zhe);Qqo=r(n4t,"data2vec-text"),n4t.forEach(t),Wqo=r(bSe," \u2014 "),FV=n(bSe,"A",{href:!0});var s4t=s(FV);Hqo=r(s4t,"Data2VecTextForSequenceClassification"),s4t.forEach(t),Uqo=r(bSe," (Data2VecText model)"),bSe.forEach(t),Jqo=i(q),Gb=n(q,"LI",{});var vSe=s(Gb);epe=n(vSe,"STRONG",{});var l4t=s(epe);Yqo=r(l4t,"deberta"),l4t.forEach(t),Kqo=r(vSe," \u2014 "),TV=n(vSe,"A",{href:!0});var i4t=s(TV);Zqo=r(i4t,"DebertaForSequenceClassification"),i4t.forEach(t),ejo=r(vSe," (DeBERTa model)"),vSe.forEach(t),ojo=i(q),Ob=n(q,"LI",{});var FSe=s(Ob);ope=n(FSe,"STRONG",{});var d4t=s(ope);rjo=r(d4t,"deberta-v2"),d4t.forEach(t),tjo=r(FSe," \u2014 "),MV=n(FSe,"A",{href:!0});var c4t=s(MV);ajo=r(c4t,"DebertaV2ForSequenceClassification"),c4t.forEach(t),njo=r(FSe," (DeBERTa-v2 model)"),FSe.forEach(t),sjo=i(q),Vb=n(q,"LI",{});var TSe=s(Vb);rpe=n(TSe,"STRONG",{});var f4t=s(rpe);ljo=r(f4t,"distilbert"),f4t.forEach(t),ijo=r(TSe," \u2014 "),EV=n(TSe,"A",{href:!0});var m4t=s(EV);djo=r(m4t,"DistilBertForSequenceClassification"),m4t.forEach(t),cjo=r(TSe," (DistilBERT model)"),TSe.forEach(t),fjo=i(q),Xb=n(q,"LI",{});var MSe=s(Xb);tpe=n(MSe,"STRONG",{});var g4t=s(tpe);mjo=r(g4t,"electra"),g4t.forEach(t),gjo=r(MSe," \u2014 "),CV=n(MSe,"A",{href:!0});var h4t=s(CV);hjo=r(h4t,"ElectraForSequenceClassification"),h4t.forEach(t),pjo=r(MSe," (ELECTRA model)"),MSe.forEach(t),_jo=i(q),zb=n(q,"LI",{});var ESe=s(zb);ape=n(ESe,"STRONG",{});var p4t=s(ape);ujo=r(p4t,"flaubert"),p4t.forEach(t),bjo=r(ESe," \u2014 "),wV=n(ESe,"A",{href:!0});var _4t=s(wV);vjo=r(_4t,"FlaubertForSequenceClassification"),_4t.forEach(t),Fjo=r(ESe," (FlauBERT model)"),ESe.forEach(t),Tjo=i(q),Qb=n(q,"LI",{});var CSe=s(Qb);npe=n(CSe,"STRONG",{});var u4t=s(npe);Mjo=r(u4t,"fnet"),u4t.forEach(t),Ejo=r(CSe," \u2014 "),AV=n(CSe,"A",{href:!0});var b4t=s(AV);Cjo=r(b4t,"FNetForSequenceClassification"),b4t.forEach(t),wjo=r(CSe," (FNet model)"),CSe.forEach(t),Ajo=i(q),Wb=n(q,"LI",{});var wSe=s(Wb);spe=n(wSe,"STRONG",{});var v4t=s(spe);Ljo=r(v4t,"funnel"),v4t.forEach(t),yjo=r(wSe," \u2014 "),LV=n(wSe,"A",{href:!0});var F4t=s(LV);xjo=r(F4t,"FunnelForSequenceClassification"),F4t.forEach(t),$jo=r(wSe," (Funnel Transformer model)"),wSe.forEach(t),kjo=i(q),Hb=n(q,"LI",{});var ASe=s(Hb);lpe=n(ASe,"STRONG",{});var T4t=s(lpe);Sjo=r(T4t,"gpt2"),T4t.forEach(t),Rjo=r(ASe," \u2014 "),yV=n(ASe,"A",{href:!0});var M4t=s(yV);Pjo=r(M4t,"GPT2ForSequenceClassification"),M4t.forEach(t),Bjo=r(ASe," (OpenAI GPT-2 model)"),ASe.forEach(t),Njo=i(q),Ub=n(q,"LI",{});var LSe=s(Ub);ipe=n(LSe,"STRONG",{});var E4t=s(ipe);Ijo=r(E4t,"gpt_neo"),E4t.forEach(t),qjo=r(LSe," \u2014 "),xV=n(LSe,"A",{href:!0});var C4t=s(xV);jjo=r(C4t,"GPTNeoForSequenceClassification"),C4t.forEach(t),Djo=r(LSe," (GPT Neo model)"),LSe.forEach(t),Gjo=i(q),Jb=n(q,"LI",{});var ySe=s(Jb);dpe=n(ySe,"STRONG",{});var w4t=s(dpe);Ojo=r(w4t,"gptj"),w4t.forEach(t),Vjo=r(ySe," \u2014 "),$V=n(ySe,"A",{href:!0});var A4t=s($V);Xjo=r(A4t,"GPTJForSequenceClassification"),A4t.forEach(t),zjo=r(ySe," (GPT-J model)"),ySe.forEach(t),Qjo=i(q),Yb=n(q,"LI",{});var xSe=s(Yb);cpe=n(xSe,"STRONG",{});var L4t=s(cpe);Wjo=r(L4t,"ibert"),L4t.forEach(t),Hjo=r(xSe," \u2014 "),kV=n(xSe,"A",{href:!0});var y4t=s(kV);Ujo=r(y4t,"IBertForSequenceClassification"),y4t.forEach(t),Jjo=r(xSe," (I-BERT model)"),xSe.forEach(t),Yjo=i(q),Kb=n(q,"LI",{});var $Se=s(Kb);fpe=n($Se,"STRONG",{});var x4t=s(fpe);Kjo=r(x4t,"layoutlm"),x4t.forEach(t),Zjo=r($Se," \u2014 "),SV=n($Se,"A",{href:!0});var $4t=s(SV);eDo=r($4t,"LayoutLMForSequenceClassification"),$4t.forEach(t),oDo=r($Se," (LayoutLM model)"),$Se.forEach(t),rDo=i(q),Zb=n(q,"LI",{});var kSe=s(Zb);mpe=n(kSe,"STRONG",{});var k4t=s(mpe);tDo=r(k4t,"layoutlmv2"),k4t.forEach(t),aDo=r(kSe," \u2014 "),RV=n(kSe,"A",{href:!0});var S4t=s(RV);nDo=r(S4t,"LayoutLMv2ForSequenceClassification"),S4t.forEach(t),sDo=r(kSe," (LayoutLMv2 model)"),kSe.forEach(t),lDo=i(q),e4=n(q,"LI",{});var SSe=s(e4);gpe=n(SSe,"STRONG",{});var R4t=s(gpe);iDo=r(R4t,"layoutlmv3"),R4t.forEach(t),dDo=r(SSe," \u2014 "),PV=n(SSe,"A",{href:!0});var P4t=s(PV);cDo=r(P4t,"LayoutLMv3ForSequenceClassification"),P4t.forEach(t),fDo=r(SSe," (LayoutLMv3 model)"),SSe.forEach(t),mDo=i(q),o4=n(q,"LI",{});var RSe=s(o4);hpe=n(RSe,"STRONG",{});var B4t=s(hpe);gDo=r(B4t,"led"),B4t.forEach(t),hDo=r(RSe," \u2014 "),BV=n(RSe,"A",{href:!0});var N4t=s(BV);pDo=r(N4t,"LEDForSequenceClassification"),N4t.forEach(t),_Do=r(RSe," (LED model)"),RSe.forEach(t),uDo=i(q),r4=n(q,"LI",{});var PSe=s(r4);ppe=n(PSe,"STRONG",{});var I4t=s(ppe);bDo=r(I4t,"longformer"),I4t.forEach(t),vDo=r(PSe," \u2014 "),NV=n(PSe,"A",{href:!0});var q4t=s(NV);FDo=r(q4t,"LongformerForSequenceClassification"),q4t.forEach(t),TDo=r(PSe," (Longformer model)"),PSe.forEach(t),MDo=i(q),t4=n(q,"LI",{});var BSe=s(t4);_pe=n(BSe,"STRONG",{});var j4t=s(_pe);EDo=r(j4t,"mbart"),j4t.forEach(t),CDo=r(BSe," \u2014 "),IV=n(BSe,"A",{href:!0});var D4t=s(IV);wDo=r(D4t,"MBartForSequenceClassification"),D4t.forEach(t),ADo=r(BSe," (mBART model)"),BSe.forEach(t),LDo=i(q),a4=n(q,"LI",{});var NSe=s(a4);upe=n(NSe,"STRONG",{});var G4t=s(upe);yDo=r(G4t,"megatron-bert"),G4t.forEach(t),xDo=r(NSe," \u2014 "),qV=n(NSe,"A",{href:!0});var O4t=s(qV);$Do=r(O4t,"MegatronBertForSequenceClassification"),O4t.forEach(t),kDo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),SDo=i(q),n4=n(q,"LI",{});var ISe=s(n4);bpe=n(ISe,"STRONG",{});var V4t=s(bpe);RDo=r(V4t,"mobilebert"),V4t.forEach(t),PDo=r(ISe," \u2014 "),jV=n(ISe,"A",{href:!0});var X4t=s(jV);BDo=r(X4t,"MobileBertForSequenceClassification"),X4t.forEach(t),NDo=r(ISe," (MobileBERT model)"),ISe.forEach(t),IDo=i(q),s4=n(q,"LI",{});var qSe=s(s4);vpe=n(qSe,"STRONG",{});var z4t=s(vpe);qDo=r(z4t,"mpnet"),z4t.forEach(t),jDo=r(qSe," \u2014 "),DV=n(qSe,"A",{href:!0});var Q4t=s(DV);DDo=r(Q4t,"MPNetForSequenceClassification"),Q4t.forEach(t),GDo=r(qSe," (MPNet model)"),qSe.forEach(t),ODo=i(q),l4=n(q,"LI",{});var jSe=s(l4);Fpe=n(jSe,"STRONG",{});var W4t=s(Fpe);VDo=r(W4t,"nezha"),W4t.forEach(t),XDo=r(jSe," \u2014 "),GV=n(jSe,"A",{href:!0});var H4t=s(GV);zDo=r(H4t,"NezhaForSequenceClassification"),H4t.forEach(t),QDo=r(jSe," (Nezha model)"),jSe.forEach(t),WDo=i(q),i4=n(q,"LI",{});var DSe=s(i4);Tpe=n(DSe,"STRONG",{});var U4t=s(Tpe);HDo=r(U4t,"nystromformer"),U4t.forEach(t),UDo=r(DSe," \u2014 "),OV=n(DSe,"A",{href:!0});var J4t=s(OV);JDo=r(J4t,"NystromformerForSequenceClassification"),J4t.forEach(t),YDo=r(DSe," (Nystr\xF6mformer model)"),DSe.forEach(t),KDo=i(q),d4=n(q,"LI",{});var GSe=s(d4);Mpe=n(GSe,"STRONG",{});var Y4t=s(Mpe);ZDo=r(Y4t,"openai-gpt"),Y4t.forEach(t),eGo=r(GSe," \u2014 "),VV=n(GSe,"A",{href:!0});var K4t=s(VV);oGo=r(K4t,"OpenAIGPTForSequenceClassification"),K4t.forEach(t),rGo=r(GSe," (OpenAI GPT model)"),GSe.forEach(t),tGo=i(q),c4=n(q,"LI",{});var OSe=s(c4);Epe=n(OSe,"STRONG",{});var Z4t=s(Epe);aGo=r(Z4t,"perceiver"),Z4t.forEach(t),nGo=r(OSe," \u2014 "),XV=n(OSe,"A",{href:!0});var e5t=s(XV);sGo=r(e5t,"PerceiverForSequenceClassification"),e5t.forEach(t),lGo=r(OSe," (Perceiver model)"),OSe.forEach(t),iGo=i(q),f4=n(q,"LI",{});var VSe=s(f4);Cpe=n(VSe,"STRONG",{});var o5t=s(Cpe);dGo=r(o5t,"plbart"),o5t.forEach(t),cGo=r(VSe," \u2014 "),zV=n(VSe,"A",{href:!0});var r5t=s(zV);fGo=r(r5t,"PLBartForSequenceClassification"),r5t.forEach(t),mGo=r(VSe," (PLBart model)"),VSe.forEach(t),gGo=i(q),m4=n(q,"LI",{});var XSe=s(m4);wpe=n(XSe,"STRONG",{});var t5t=s(wpe);hGo=r(t5t,"qdqbert"),t5t.forEach(t),pGo=r(XSe," \u2014 "),QV=n(XSe,"A",{href:!0});var a5t=s(QV);_Go=r(a5t,"QDQBertForSequenceClassification"),a5t.forEach(t),uGo=r(XSe," (QDQBert model)"),XSe.forEach(t),bGo=i(q),g4=n(q,"LI",{});var zSe=s(g4);Ape=n(zSe,"STRONG",{});var n5t=s(Ape);vGo=r(n5t,"reformer"),n5t.forEach(t),FGo=r(zSe," \u2014 "),WV=n(zSe,"A",{href:!0});var s5t=s(WV);TGo=r(s5t,"ReformerForSequenceClassification"),s5t.forEach(t),MGo=r(zSe," (Reformer model)"),zSe.forEach(t),EGo=i(q),h4=n(q,"LI",{});var QSe=s(h4);Lpe=n(QSe,"STRONG",{});var l5t=s(Lpe);CGo=r(l5t,"rembert"),l5t.forEach(t),wGo=r(QSe," \u2014 "),HV=n(QSe,"A",{href:!0});var i5t=s(HV);AGo=r(i5t,"RemBertForSequenceClassification"),i5t.forEach(t),LGo=r(QSe," (RemBERT model)"),QSe.forEach(t),yGo=i(q),p4=n(q,"LI",{});var WSe=s(p4);ype=n(WSe,"STRONG",{});var d5t=s(ype);xGo=r(d5t,"roberta"),d5t.forEach(t),$Go=r(WSe," \u2014 "),UV=n(WSe,"A",{href:!0});var c5t=s(UV);kGo=r(c5t,"RobertaForSequenceClassification"),c5t.forEach(t),SGo=r(WSe," (RoBERTa model)"),WSe.forEach(t),RGo=i(q),_4=n(q,"LI",{});var HSe=s(_4);xpe=n(HSe,"STRONG",{});var f5t=s(xpe);PGo=r(f5t,"roformer"),f5t.forEach(t),BGo=r(HSe," \u2014 "),JV=n(HSe,"A",{href:!0});var m5t=s(JV);NGo=r(m5t,"RoFormerForSequenceClassification"),m5t.forEach(t),IGo=r(HSe," (RoFormer model)"),HSe.forEach(t),qGo=i(q),u4=n(q,"LI",{});var USe=s(u4);$pe=n(USe,"STRONG",{});var g5t=s($pe);jGo=r(g5t,"squeezebert"),g5t.forEach(t),DGo=r(USe," \u2014 "),YV=n(USe,"A",{href:!0});var h5t=s(YV);GGo=r(h5t,"SqueezeBertForSequenceClassification"),h5t.forEach(t),OGo=r(USe," (SqueezeBERT model)"),USe.forEach(t),VGo=i(q),b4=n(q,"LI",{});var JSe=s(b4);kpe=n(JSe,"STRONG",{});var p5t=s(kpe);XGo=r(p5t,"tapas"),p5t.forEach(t),zGo=r(JSe," \u2014 "),KV=n(JSe,"A",{href:!0});var _5t=s(KV);QGo=r(_5t,"TapasForSequenceClassification"),_5t.forEach(t),WGo=r(JSe," (TAPAS model)"),JSe.forEach(t),HGo=i(q),v4=n(q,"LI",{});var YSe=s(v4);Spe=n(YSe,"STRONG",{});var u5t=s(Spe);UGo=r(u5t,"transfo-xl"),u5t.forEach(t),JGo=r(YSe," \u2014 "),ZV=n(YSe,"A",{href:!0});var b5t=s(ZV);YGo=r(b5t,"TransfoXLForSequenceClassification"),b5t.forEach(t),KGo=r(YSe," (Transformer-XL model)"),YSe.forEach(t),ZGo=i(q),F4=n(q,"LI",{});var KSe=s(F4);Rpe=n(KSe,"STRONG",{});var v5t=s(Rpe);eOo=r(v5t,"xlm"),v5t.forEach(t),oOo=r(KSe," \u2014 "),eX=n(KSe,"A",{href:!0});var F5t=s(eX);rOo=r(F5t,"XLMForSequenceClassification"),F5t.forEach(t),tOo=r(KSe," (XLM model)"),KSe.forEach(t),aOo=i(q),T4=n(q,"LI",{});var ZSe=s(T4);Ppe=n(ZSe,"STRONG",{});var T5t=s(Ppe);nOo=r(T5t,"xlm-roberta"),T5t.forEach(t),sOo=r(ZSe," \u2014 "),oX=n(ZSe,"A",{href:!0});var M5t=s(oX);lOo=r(M5t,"XLMRobertaForSequenceClassification"),M5t.forEach(t),iOo=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),dOo=i(q),M4=n(q,"LI",{});var eRe=s(M4);Bpe=n(eRe,"STRONG",{});var E5t=s(Bpe);cOo=r(E5t,"xlm-roberta-xl"),E5t.forEach(t),fOo=r(eRe," \u2014 "),rX=n(eRe,"A",{href:!0});var C5t=s(rX);mOo=r(C5t,"XLMRobertaXLForSequenceClassification"),C5t.forEach(t),gOo=r(eRe," (XLM-RoBERTa-XL model)"),eRe.forEach(t),hOo=i(q),E4=n(q,"LI",{});var oRe=s(E4);Npe=n(oRe,"STRONG",{});var w5t=s(Npe);pOo=r(w5t,"xlnet"),w5t.forEach(t),_Oo=r(oRe," \u2014 "),tX=n(oRe,"A",{href:!0});var A5t=s(tX);uOo=r(A5t,"XLNetForSequenceClassification"),A5t.forEach(t),bOo=r(oRe," (XLNet model)"),oRe.forEach(t),vOo=i(q),C4=n(q,"LI",{});var rRe=s(C4);Ipe=n(rRe,"STRONG",{});var L5t=s(Ipe);FOo=r(L5t,"yoso"),L5t.forEach(t),TOo=r(rRe," \u2014 "),aX=n(rRe,"A",{href:!0});var y5t=s(aX);MOo=r(y5t,"YosoForSequenceClassification"),y5t.forEach(t),EOo=r(rRe," (YOSO model)"),rRe.forEach(t),q.forEach(t),COo=i(ca),w4=n(ca,"P",{});var tRe=s(w4);wOo=r(tRe,"The model is set in evaluation mode by default using "),qpe=n(tRe,"CODE",{});var x5t=s(qpe);AOo=r(x5t,"model.eval()"),x5t.forEach(t),LOo=r(tRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(tRe,"CODE",{});var $5t=s(jpe);yOo=r($5t,"model.train()"),$5t.forEach(t),tRe.forEach(t),xOo=i(ca),T(A4.$$.fragment,ca),ca.forEach(t),tl.forEach(t),WOe=i(f),od=n(f,"H2",{class:!0});var ZXe=s(od);L4=n(ZXe,"A",{id:!0,class:!0,href:!0});var k5t=s(L4);Dpe=n(k5t,"SPAN",{});var S5t=s(Dpe);T(DL.$$.fragment,S5t),S5t.forEach(t),k5t.forEach(t),$Oo=i(ZXe),Gpe=n(ZXe,"SPAN",{});var R5t=s(Gpe);kOo=r(R5t,"AutoModelForMultipleChoice"),R5t.forEach(t),ZXe.forEach(t),HOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(GL.$$.fragment,al),SOo=i(al),rd=n(al,"P",{});var Yoe=s(rd);ROo=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nX=n(Yoe,"A",{href:!0});var P5t=s(nX);POo=r(P5t,"from_pretrained()"),P5t.forEach(t),BOo=r(Yoe," class method or the "),sX=n(Yoe,"A",{href:!0});var B5t=s(sX);NOo=r(B5t,"from_config()"),B5t.forEach(t),IOo=r(Yoe,` class
method.`),Yoe.forEach(t),qOo=i(al),OL=n(al,"P",{});var eze=s(OL);jOo=r(eze,"This class cannot be instantiated directly using "),Ope=n(eze,"CODE",{});var N5t=s(Ope);DOo=r(N5t,"__init__()"),N5t.forEach(t),GOo=r(eze," (throws an error)."),eze.forEach(t),OOo=i(al),mt=n(al,"DIV",{class:!0});var Zw=s(mt);T(VL.$$.fragment,Zw),VOo=i(Zw),Vpe=n(Zw,"P",{});var I5t=s(Vpe);XOo=r(I5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I5t.forEach(t),zOo=i(Zw),td=n(Zw,"P",{});var Koe=s(td);QOo=r(Koe,`Note:
Loading a model from its configuration file does `),Xpe=n(Koe,"STRONG",{});var q5t=s(Xpe);WOo=r(q5t,"not"),q5t.forEach(t),HOo=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(Koe,"A",{href:!0});var j5t=s(lX);UOo=r(j5t,"from_pretrained()"),j5t.forEach(t),JOo=r(Koe," to load the model weights."),Koe.forEach(t),YOo=i(Zw),T(y4.$$.fragment,Zw),Zw.forEach(t),KOo=i(al),ro=n(al,"DIV",{class:!0});var fa=s(ro);T(XL.$$.fragment,fa),ZOo=i(fa),zpe=n(fa,"P",{});var D5t=s(zpe);eVo=r(D5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D5t.forEach(t),oVo=i(fa),Da=n(fa,"P",{});var eA=s(Da);rVo=r(eA,"The model class to instantiate is selected based on the "),Qpe=n(eA,"CODE",{});var G5t=s(Qpe);tVo=r(G5t,"model_type"),G5t.forEach(t),aVo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(eA,"CODE",{});var O5t=s(Wpe);nVo=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),sVo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(eA,"CODE",{});var V5t=s(Hpe);lVo=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),iVo=r(eA,":"),eA.forEach(t),dVo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);x4=n(ee,"LI",{});var aRe=s(x4);Upe=n(aRe,"STRONG",{});var X5t=s(Upe);cVo=r(X5t,"albert"),X5t.forEach(t),fVo=r(aRe," \u2014 "),iX=n(aRe,"A",{href:!0});var z5t=s(iX);mVo=r(z5t,"AlbertForMultipleChoice"),z5t.forEach(t),gVo=r(aRe," (ALBERT model)"),aRe.forEach(t),hVo=i(ee),$4=n(ee,"LI",{});var nRe=s($4);Jpe=n(nRe,"STRONG",{});var Q5t=s(Jpe);pVo=r(Q5t,"bert"),Q5t.forEach(t),_Vo=r(nRe," \u2014 "),dX=n(nRe,"A",{href:!0});var W5t=s(dX);uVo=r(W5t,"BertForMultipleChoice"),W5t.forEach(t),bVo=r(nRe," (BERT model)"),nRe.forEach(t),vVo=i(ee),k4=n(ee,"LI",{});var sRe=s(k4);Ype=n(sRe,"STRONG",{});var H5t=s(Ype);FVo=r(H5t,"big_bird"),H5t.forEach(t),TVo=r(sRe," \u2014 "),cX=n(sRe,"A",{href:!0});var U5t=s(cX);MVo=r(U5t,"BigBirdForMultipleChoice"),U5t.forEach(t),EVo=r(sRe," (BigBird model)"),sRe.forEach(t),CVo=i(ee),S4=n(ee,"LI",{});var lRe=s(S4);Kpe=n(lRe,"STRONG",{});var J5t=s(Kpe);wVo=r(J5t,"camembert"),J5t.forEach(t),AVo=r(lRe," \u2014 "),fX=n(lRe,"A",{href:!0});var Y5t=s(fX);LVo=r(Y5t,"CamembertForMultipleChoice"),Y5t.forEach(t),yVo=r(lRe," (CamemBERT model)"),lRe.forEach(t),xVo=i(ee),R4=n(ee,"LI",{});var iRe=s(R4);Zpe=n(iRe,"STRONG",{});var K5t=s(Zpe);$Vo=r(K5t,"canine"),K5t.forEach(t),kVo=r(iRe," \u2014 "),mX=n(iRe,"A",{href:!0});var Z5t=s(mX);SVo=r(Z5t,"CanineForMultipleChoice"),Z5t.forEach(t),RVo=r(iRe," (CANINE model)"),iRe.forEach(t),PVo=i(ee),P4=n(ee,"LI",{});var dRe=s(P4);e_e=n(dRe,"STRONG",{});var evt=s(e_e);BVo=r(evt,"convbert"),evt.forEach(t),NVo=r(dRe," \u2014 "),gX=n(dRe,"A",{href:!0});var ovt=s(gX);IVo=r(ovt,"ConvBertForMultipleChoice"),ovt.forEach(t),qVo=r(dRe," (ConvBERT model)"),dRe.forEach(t),jVo=i(ee),B4=n(ee,"LI",{});var cRe=s(B4);o_e=n(cRe,"STRONG",{});var rvt=s(o_e);DVo=r(rvt,"data2vec-text"),rvt.forEach(t),GVo=r(cRe," \u2014 "),hX=n(cRe,"A",{href:!0});var tvt=s(hX);OVo=r(tvt,"Data2VecTextForMultipleChoice"),tvt.forEach(t),VVo=r(cRe," (Data2VecText model)"),cRe.forEach(t),XVo=i(ee),N4=n(ee,"LI",{});var fRe=s(N4);r_e=n(fRe,"STRONG",{});var avt=s(r_e);zVo=r(avt,"deberta-v2"),avt.forEach(t),QVo=r(fRe," \u2014 "),pX=n(fRe,"A",{href:!0});var nvt=s(pX);WVo=r(nvt,"DebertaV2ForMultipleChoice"),nvt.forEach(t),HVo=r(fRe," (DeBERTa-v2 model)"),fRe.forEach(t),UVo=i(ee),I4=n(ee,"LI",{});var mRe=s(I4);t_e=n(mRe,"STRONG",{});var svt=s(t_e);JVo=r(svt,"distilbert"),svt.forEach(t),YVo=r(mRe," \u2014 "),_X=n(mRe,"A",{href:!0});var lvt=s(_X);KVo=r(lvt,"DistilBertForMultipleChoice"),lvt.forEach(t),ZVo=r(mRe," (DistilBERT model)"),mRe.forEach(t),eXo=i(ee),q4=n(ee,"LI",{});var gRe=s(q4);a_e=n(gRe,"STRONG",{});var ivt=s(a_e);oXo=r(ivt,"electra"),ivt.forEach(t),rXo=r(gRe," \u2014 "),uX=n(gRe,"A",{href:!0});var dvt=s(uX);tXo=r(dvt,"ElectraForMultipleChoice"),dvt.forEach(t),aXo=r(gRe," (ELECTRA model)"),gRe.forEach(t),nXo=i(ee),j4=n(ee,"LI",{});var hRe=s(j4);n_e=n(hRe,"STRONG",{});var cvt=s(n_e);sXo=r(cvt,"flaubert"),cvt.forEach(t),lXo=r(hRe," \u2014 "),bX=n(hRe,"A",{href:!0});var fvt=s(bX);iXo=r(fvt,"FlaubertForMultipleChoice"),fvt.forEach(t),dXo=r(hRe," (FlauBERT model)"),hRe.forEach(t),cXo=i(ee),D4=n(ee,"LI",{});var pRe=s(D4);s_e=n(pRe,"STRONG",{});var mvt=s(s_e);fXo=r(mvt,"fnet"),mvt.forEach(t),mXo=r(pRe," \u2014 "),vX=n(pRe,"A",{href:!0});var gvt=s(vX);gXo=r(gvt,"FNetForMultipleChoice"),gvt.forEach(t),hXo=r(pRe," (FNet model)"),pRe.forEach(t),pXo=i(ee),G4=n(ee,"LI",{});var _Re=s(G4);l_e=n(_Re,"STRONG",{});var hvt=s(l_e);_Xo=r(hvt,"funnel"),hvt.forEach(t),uXo=r(_Re," \u2014 "),FX=n(_Re,"A",{href:!0});var pvt=s(FX);bXo=r(pvt,"FunnelForMultipleChoice"),pvt.forEach(t),vXo=r(_Re," (Funnel Transformer model)"),_Re.forEach(t),FXo=i(ee),O4=n(ee,"LI",{});var uRe=s(O4);i_e=n(uRe,"STRONG",{});var _vt=s(i_e);TXo=r(_vt,"ibert"),_vt.forEach(t),MXo=r(uRe," \u2014 "),TX=n(uRe,"A",{href:!0});var uvt=s(TX);EXo=r(uvt,"IBertForMultipleChoice"),uvt.forEach(t),CXo=r(uRe," (I-BERT model)"),uRe.forEach(t),wXo=i(ee),V4=n(ee,"LI",{});var bRe=s(V4);d_e=n(bRe,"STRONG",{});var bvt=s(d_e);AXo=r(bvt,"longformer"),bvt.forEach(t),LXo=r(bRe," \u2014 "),MX=n(bRe,"A",{href:!0});var vvt=s(MX);yXo=r(vvt,"LongformerForMultipleChoice"),vvt.forEach(t),xXo=r(bRe," (Longformer model)"),bRe.forEach(t),$Xo=i(ee),X4=n(ee,"LI",{});var vRe=s(X4);c_e=n(vRe,"STRONG",{});var Fvt=s(c_e);kXo=r(Fvt,"megatron-bert"),Fvt.forEach(t),SXo=r(vRe," \u2014 "),EX=n(vRe,"A",{href:!0});var Tvt=s(EX);RXo=r(Tvt,"MegatronBertForMultipleChoice"),Tvt.forEach(t),PXo=r(vRe," (Megatron-BERT model)"),vRe.forEach(t),BXo=i(ee),z4=n(ee,"LI",{});var FRe=s(z4);f_e=n(FRe,"STRONG",{});var Mvt=s(f_e);NXo=r(Mvt,"mobilebert"),Mvt.forEach(t),IXo=r(FRe," \u2014 "),CX=n(FRe,"A",{href:!0});var Evt=s(CX);qXo=r(Evt,"MobileBertForMultipleChoice"),Evt.forEach(t),jXo=r(FRe," (MobileBERT model)"),FRe.forEach(t),DXo=i(ee),Q4=n(ee,"LI",{});var TRe=s(Q4);m_e=n(TRe,"STRONG",{});var Cvt=s(m_e);GXo=r(Cvt,"mpnet"),Cvt.forEach(t),OXo=r(TRe," \u2014 "),wX=n(TRe,"A",{href:!0});var wvt=s(wX);VXo=r(wvt,"MPNetForMultipleChoice"),wvt.forEach(t),XXo=r(TRe," (MPNet model)"),TRe.forEach(t),zXo=i(ee),W4=n(ee,"LI",{});var MRe=s(W4);g_e=n(MRe,"STRONG",{});var Avt=s(g_e);QXo=r(Avt,"nezha"),Avt.forEach(t),WXo=r(MRe," \u2014 "),AX=n(MRe,"A",{href:!0});var Lvt=s(AX);HXo=r(Lvt,"NezhaForMultipleChoice"),Lvt.forEach(t),UXo=r(MRe," (Nezha model)"),MRe.forEach(t),JXo=i(ee),H4=n(ee,"LI",{});var ERe=s(H4);h_e=n(ERe,"STRONG",{});var yvt=s(h_e);YXo=r(yvt,"nystromformer"),yvt.forEach(t),KXo=r(ERe," \u2014 "),LX=n(ERe,"A",{href:!0});var xvt=s(LX);ZXo=r(xvt,"NystromformerForMultipleChoice"),xvt.forEach(t),ezo=r(ERe," (Nystr\xF6mformer model)"),ERe.forEach(t),ozo=i(ee),U4=n(ee,"LI",{});var CRe=s(U4);p_e=n(CRe,"STRONG",{});var $vt=s(p_e);rzo=r($vt,"qdqbert"),$vt.forEach(t),tzo=r(CRe," \u2014 "),yX=n(CRe,"A",{href:!0});var kvt=s(yX);azo=r(kvt,"QDQBertForMultipleChoice"),kvt.forEach(t),nzo=r(CRe," (QDQBert model)"),CRe.forEach(t),szo=i(ee),J4=n(ee,"LI",{});var wRe=s(J4);__e=n(wRe,"STRONG",{});var Svt=s(__e);lzo=r(Svt,"rembert"),Svt.forEach(t),izo=r(wRe," \u2014 "),xX=n(wRe,"A",{href:!0});var Rvt=s(xX);dzo=r(Rvt,"RemBertForMultipleChoice"),Rvt.forEach(t),czo=r(wRe," (RemBERT model)"),wRe.forEach(t),fzo=i(ee),Y4=n(ee,"LI",{});var ARe=s(Y4);u_e=n(ARe,"STRONG",{});var Pvt=s(u_e);mzo=r(Pvt,"roberta"),Pvt.forEach(t),gzo=r(ARe," \u2014 "),$X=n(ARe,"A",{href:!0});var Bvt=s($X);hzo=r(Bvt,"RobertaForMultipleChoice"),Bvt.forEach(t),pzo=r(ARe," (RoBERTa model)"),ARe.forEach(t),_zo=i(ee),K4=n(ee,"LI",{});var LRe=s(K4);b_e=n(LRe,"STRONG",{});var Nvt=s(b_e);uzo=r(Nvt,"roformer"),Nvt.forEach(t),bzo=r(LRe," \u2014 "),kX=n(LRe,"A",{href:!0});var Ivt=s(kX);vzo=r(Ivt,"RoFormerForMultipleChoice"),Ivt.forEach(t),Fzo=r(LRe," (RoFormer model)"),LRe.forEach(t),Tzo=i(ee),Z4=n(ee,"LI",{});var yRe=s(Z4);v_e=n(yRe,"STRONG",{});var qvt=s(v_e);Mzo=r(qvt,"squeezebert"),qvt.forEach(t),Ezo=r(yRe," \u2014 "),SX=n(yRe,"A",{href:!0});var jvt=s(SX);Czo=r(jvt,"SqueezeBertForMultipleChoice"),jvt.forEach(t),wzo=r(yRe," (SqueezeBERT model)"),yRe.forEach(t),Azo=i(ee),e5=n(ee,"LI",{});var xRe=s(e5);F_e=n(xRe,"STRONG",{});var Dvt=s(F_e);Lzo=r(Dvt,"xlm"),Dvt.forEach(t),yzo=r(xRe," \u2014 "),RX=n(xRe,"A",{href:!0});var Gvt=s(RX);xzo=r(Gvt,"XLMForMultipleChoice"),Gvt.forEach(t),$zo=r(xRe," (XLM model)"),xRe.forEach(t),kzo=i(ee),o5=n(ee,"LI",{});var $Re=s(o5);T_e=n($Re,"STRONG",{});var Ovt=s(T_e);Szo=r(Ovt,"xlm-roberta"),Ovt.forEach(t),Rzo=r($Re," \u2014 "),PX=n($Re,"A",{href:!0});var Vvt=s(PX);Pzo=r(Vvt,"XLMRobertaForMultipleChoice"),Vvt.forEach(t),Bzo=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),Nzo=i(ee),r5=n(ee,"LI",{});var kRe=s(r5);M_e=n(kRe,"STRONG",{});var Xvt=s(M_e);Izo=r(Xvt,"xlm-roberta-xl"),Xvt.forEach(t),qzo=r(kRe," \u2014 "),BX=n(kRe,"A",{href:!0});var zvt=s(BX);jzo=r(zvt,"XLMRobertaXLForMultipleChoice"),zvt.forEach(t),Dzo=r(kRe," (XLM-RoBERTa-XL model)"),kRe.forEach(t),Gzo=i(ee),t5=n(ee,"LI",{});var SRe=s(t5);E_e=n(SRe,"STRONG",{});var Qvt=s(E_e);Ozo=r(Qvt,"xlnet"),Qvt.forEach(t),Vzo=r(SRe," \u2014 "),NX=n(SRe,"A",{href:!0});var Wvt=s(NX);Xzo=r(Wvt,"XLNetForMultipleChoice"),Wvt.forEach(t),zzo=r(SRe," (XLNet model)"),SRe.forEach(t),Qzo=i(ee),a5=n(ee,"LI",{});var RRe=s(a5);C_e=n(RRe,"STRONG",{});var Hvt=s(C_e);Wzo=r(Hvt,"yoso"),Hvt.forEach(t),Hzo=r(RRe," \u2014 "),IX=n(RRe,"A",{href:!0});var Uvt=s(IX);Uzo=r(Uvt,"YosoForMultipleChoice"),Uvt.forEach(t),Jzo=r(RRe," (YOSO model)"),RRe.forEach(t),ee.forEach(t),Yzo=i(fa),n5=n(fa,"P",{});var PRe=s(n5);Kzo=r(PRe,"The model is set in evaluation mode by default using "),w_e=n(PRe,"CODE",{});var Jvt=s(w_e);Zzo=r(Jvt,"model.eval()"),Jvt.forEach(t),eQo=r(PRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(PRe,"CODE",{});var Yvt=s(A_e);oQo=r(Yvt,"model.train()"),Yvt.forEach(t),PRe.forEach(t),rQo=i(fa),T(s5.$$.fragment,fa),fa.forEach(t),al.forEach(t),UOe=i(f),ad=n(f,"H2",{class:!0});var oze=s(ad);l5=n(oze,"A",{id:!0,class:!0,href:!0});var Kvt=s(l5);L_e=n(Kvt,"SPAN",{});var Zvt=s(L_e);T(zL.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),tQo=i(oze),y_e=n(oze,"SPAN",{});var eFt=s(y_e);aQo=r(eFt,"AutoModelForNextSentencePrediction"),eFt.forEach(t),oze.forEach(t),JOe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(QL.$$.fragment,nl),nQo=i(nl),nd=n(nl,"P",{});var Zoe=s(nd);sQo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qX=n(Zoe,"A",{href:!0});var oFt=s(qX);lQo=r(oFt,"from_pretrained()"),oFt.forEach(t),iQo=r(Zoe," class method or the "),jX=n(Zoe,"A",{href:!0});var rFt=s(jX);dQo=r(rFt,"from_config()"),rFt.forEach(t),cQo=r(Zoe,` class
method.`),Zoe.forEach(t),fQo=i(nl),WL=n(nl,"P",{});var rze=s(WL);mQo=r(rze,"This class cannot be instantiated directly using "),x_e=n(rze,"CODE",{});var tFt=s(x_e);gQo=r(tFt,"__init__()"),tFt.forEach(t),hQo=r(rze," (throws an error)."),rze.forEach(t),pQo=i(nl),gt=n(nl,"DIV",{class:!0});var oA=s(gt);T(HL.$$.fragment,oA),_Qo=i(oA),$_e=n(oA,"P",{});var aFt=s($_e);uQo=r(aFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aFt.forEach(t),bQo=i(oA),sd=n(oA,"P",{});var ere=s(sd);vQo=r(ere,`Note:
Loading a model from its configuration file does `),k_e=n(ere,"STRONG",{});var nFt=s(k_e);FQo=r(nFt,"not"),nFt.forEach(t),TQo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(ere,"A",{href:!0});var sFt=s(DX);MQo=r(sFt,"from_pretrained()"),sFt.forEach(t),EQo=r(ere," to load the model weights."),ere.forEach(t),CQo=i(oA),T(i5.$$.fragment,oA),oA.forEach(t),wQo=i(nl),to=n(nl,"DIV",{class:!0});var ma=s(to);T(UL.$$.fragment,ma),AQo=i(ma),S_e=n(ma,"P",{});var lFt=s(S_e);LQo=r(lFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lFt.forEach(t),yQo=i(ma),Ga=n(ma,"P",{});var rA=s(Ga);xQo=r(rA,"The model class to instantiate is selected based on the "),R_e=n(rA,"CODE",{});var iFt=s(R_e);$Qo=r(iFt,"model_type"),iFt.forEach(t),kQo=r(rA,` property of the config object (either
passed as an argument or loaded from `),P_e=n(rA,"CODE",{});var dFt=s(P_e);SQo=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),RQo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(rA,"CODE",{});var cFt=s(B_e);PQo=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),BQo=r(rA,":"),rA.forEach(t),NQo=i(ma),Io=n(ma,"UL",{});var ga=s(Io);d5=n(ga,"LI",{});var BRe=s(d5);N_e=n(BRe,"STRONG",{});var fFt=s(N_e);IQo=r(fFt,"bert"),fFt.forEach(t),qQo=r(BRe," \u2014 "),GX=n(BRe,"A",{href:!0});var mFt=s(GX);jQo=r(mFt,"BertForNextSentencePrediction"),mFt.forEach(t),DQo=r(BRe," (BERT model)"),BRe.forEach(t),GQo=i(ga),c5=n(ga,"LI",{});var NRe=s(c5);I_e=n(NRe,"STRONG",{});var gFt=s(I_e);OQo=r(gFt,"fnet"),gFt.forEach(t),VQo=r(NRe," \u2014 "),OX=n(NRe,"A",{href:!0});var hFt=s(OX);XQo=r(hFt,"FNetForNextSentencePrediction"),hFt.forEach(t),zQo=r(NRe," (FNet model)"),NRe.forEach(t),QQo=i(ga),f5=n(ga,"LI",{});var IRe=s(f5);q_e=n(IRe,"STRONG",{});var pFt=s(q_e);WQo=r(pFt,"megatron-bert"),pFt.forEach(t),HQo=r(IRe," \u2014 "),VX=n(IRe,"A",{href:!0});var _Ft=s(VX);UQo=r(_Ft,"MegatronBertForNextSentencePrediction"),_Ft.forEach(t),JQo=r(IRe," (Megatron-BERT model)"),IRe.forEach(t),YQo=i(ga),m5=n(ga,"LI",{});var qRe=s(m5);j_e=n(qRe,"STRONG",{});var uFt=s(j_e);KQo=r(uFt,"mobilebert"),uFt.forEach(t),ZQo=r(qRe," \u2014 "),XX=n(qRe,"A",{href:!0});var bFt=s(XX);eWo=r(bFt,"MobileBertForNextSentencePrediction"),bFt.forEach(t),oWo=r(qRe," (MobileBERT model)"),qRe.forEach(t),rWo=i(ga),g5=n(ga,"LI",{});var jRe=s(g5);D_e=n(jRe,"STRONG",{});var vFt=s(D_e);tWo=r(vFt,"nezha"),vFt.forEach(t),aWo=r(jRe," \u2014 "),zX=n(jRe,"A",{href:!0});var FFt=s(zX);nWo=r(FFt,"NezhaForNextSentencePrediction"),FFt.forEach(t),sWo=r(jRe," (Nezha model)"),jRe.forEach(t),lWo=i(ga),h5=n(ga,"LI",{});var DRe=s(h5);G_e=n(DRe,"STRONG",{});var TFt=s(G_e);iWo=r(TFt,"qdqbert"),TFt.forEach(t),dWo=r(DRe," \u2014 "),QX=n(DRe,"A",{href:!0});var MFt=s(QX);cWo=r(MFt,"QDQBertForNextSentencePrediction"),MFt.forEach(t),fWo=r(DRe," (QDQBert model)"),DRe.forEach(t),ga.forEach(t),mWo=i(ma),p5=n(ma,"P",{});var GRe=s(p5);gWo=r(GRe,"The model is set in evaluation mode by default using "),O_e=n(GRe,"CODE",{});var EFt=s(O_e);hWo=r(EFt,"model.eval()"),EFt.forEach(t),pWo=r(GRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V_e=n(GRe,"CODE",{});var CFt=s(V_e);_Wo=r(CFt,"model.train()"),CFt.forEach(t),GRe.forEach(t),uWo=i(ma),T(_5.$$.fragment,ma),ma.forEach(t),nl.forEach(t),YOe=i(f),ld=n(f,"H2",{class:!0});var tze=s(ld);u5=n(tze,"A",{id:!0,class:!0,href:!0});var wFt=s(u5);X_e=n(wFt,"SPAN",{});var AFt=s(X_e);T(JL.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),bWo=i(tze),z_e=n(tze,"SPAN",{});var LFt=s(z_e);vWo=r(LFt,"AutoModelForTokenClassification"),LFt.forEach(t),tze.forEach(t),KOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(YL.$$.fragment,sl),FWo=i(sl),id=n(sl,"P",{});var ore=s(id);TWo=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WX=n(ore,"A",{href:!0});var yFt=s(WX);MWo=r(yFt,"from_pretrained()"),yFt.forEach(t),EWo=r(ore," class method or the "),HX=n(ore,"A",{href:!0});var xFt=s(HX);CWo=r(xFt,"from_config()"),xFt.forEach(t),wWo=r(ore,` class
method.`),ore.forEach(t),AWo=i(sl),KL=n(sl,"P",{});var aze=s(KL);LWo=r(aze,"This class cannot be instantiated directly using "),Q_e=n(aze,"CODE",{});var $Ft=s(Q_e);yWo=r($Ft,"__init__()"),$Ft.forEach(t),xWo=r(aze," (throws an error)."),aze.forEach(t),$Wo=i(sl),ht=n(sl,"DIV",{class:!0});var tA=s(ht);T(ZL.$$.fragment,tA),kWo=i(tA),W_e=n(tA,"P",{});var kFt=s(W_e);SWo=r(kFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kFt.forEach(t),RWo=i(tA),dd=n(tA,"P",{});var rre=s(dd);PWo=r(rre,`Note:
Loading a model from its configuration file does `),H_e=n(rre,"STRONG",{});var SFt=s(H_e);BWo=r(SFt,"not"),SFt.forEach(t),NWo=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(rre,"A",{href:!0});var RFt=s(UX);IWo=r(RFt,"from_pretrained()"),RFt.forEach(t),qWo=r(rre," to load the model weights."),rre.forEach(t),jWo=i(tA),T(b5.$$.fragment,tA),tA.forEach(t),DWo=i(sl),ao=n(sl,"DIV",{class:!0});var ha=s(ao);T(ey.$$.fragment,ha),GWo=i(ha),U_e=n(ha,"P",{});var PFt=s(U_e);OWo=r(PFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PFt.forEach(t),VWo=i(ha),Oa=n(ha,"P",{});var aA=s(Oa);XWo=r(aA,"The model class to instantiate is selected based on the "),J_e=n(aA,"CODE",{});var BFt=s(J_e);zWo=r(BFt,"model_type"),BFt.forEach(t),QWo=r(aA,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(aA,"CODE",{});var NFt=s(Y_e);WWo=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),HWo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(aA,"CODE",{});var IFt=s(K_e);UWo=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),JWo=r(aA,":"),aA.forEach(t),YWo=i(ha),H=n(ha,"UL",{});var J=s(H);v5=n(J,"LI",{});var ORe=s(v5);Z_e=n(ORe,"STRONG",{});var qFt=s(Z_e);KWo=r(qFt,"albert"),qFt.forEach(t),ZWo=r(ORe," \u2014 "),JX=n(ORe,"A",{href:!0});var jFt=s(JX);eHo=r(jFt,"AlbertForTokenClassification"),jFt.forEach(t),oHo=r(ORe," (ALBERT model)"),ORe.forEach(t),rHo=i(J),F5=n(J,"LI",{});var VRe=s(F5);eue=n(VRe,"STRONG",{});var DFt=s(eue);tHo=r(DFt,"bert"),DFt.forEach(t),aHo=r(VRe," \u2014 "),YX=n(VRe,"A",{href:!0});var GFt=s(YX);nHo=r(GFt,"BertForTokenClassification"),GFt.forEach(t),sHo=r(VRe," (BERT model)"),VRe.forEach(t),lHo=i(J),T5=n(J,"LI",{});var XRe=s(T5);oue=n(XRe,"STRONG",{});var OFt=s(oue);iHo=r(OFt,"big_bird"),OFt.forEach(t),dHo=r(XRe," \u2014 "),KX=n(XRe,"A",{href:!0});var VFt=s(KX);cHo=r(VFt,"BigBirdForTokenClassification"),VFt.forEach(t),fHo=r(XRe," (BigBird model)"),XRe.forEach(t),mHo=i(J),M5=n(J,"LI",{});var zRe=s(M5);rue=n(zRe,"STRONG",{});var XFt=s(rue);gHo=r(XFt,"bloom"),XFt.forEach(t),hHo=r(zRe," \u2014 "),ZX=n(zRe,"A",{href:!0});var zFt=s(ZX);pHo=r(zFt,"BloomForTokenClassification"),zFt.forEach(t),_Ho=r(zRe," (BLOOM model)"),zRe.forEach(t),uHo=i(J),E5=n(J,"LI",{});var QRe=s(E5);tue=n(QRe,"STRONG",{});var QFt=s(tue);bHo=r(QFt,"camembert"),QFt.forEach(t),vHo=r(QRe," \u2014 "),ez=n(QRe,"A",{href:!0});var WFt=s(ez);FHo=r(WFt,"CamembertForTokenClassification"),WFt.forEach(t),THo=r(QRe," (CamemBERT model)"),QRe.forEach(t),MHo=i(J),C5=n(J,"LI",{});var WRe=s(C5);aue=n(WRe,"STRONG",{});var HFt=s(aue);EHo=r(HFt,"canine"),HFt.forEach(t),CHo=r(WRe," \u2014 "),oz=n(WRe,"A",{href:!0});var UFt=s(oz);wHo=r(UFt,"CanineForTokenClassification"),UFt.forEach(t),AHo=r(WRe," (CANINE model)"),WRe.forEach(t),LHo=i(J),w5=n(J,"LI",{});var HRe=s(w5);nue=n(HRe,"STRONG",{});var JFt=s(nue);yHo=r(JFt,"convbert"),JFt.forEach(t),xHo=r(HRe," \u2014 "),rz=n(HRe,"A",{href:!0});var YFt=s(rz);$Ho=r(YFt,"ConvBertForTokenClassification"),YFt.forEach(t),kHo=r(HRe," (ConvBERT model)"),HRe.forEach(t),SHo=i(J),A5=n(J,"LI",{});var URe=s(A5);sue=n(URe,"STRONG",{});var KFt=s(sue);RHo=r(KFt,"data2vec-text"),KFt.forEach(t),PHo=r(URe," \u2014 "),tz=n(URe,"A",{href:!0});var ZFt=s(tz);BHo=r(ZFt,"Data2VecTextForTokenClassification"),ZFt.forEach(t),NHo=r(URe," (Data2VecText model)"),URe.forEach(t),IHo=i(J),L5=n(J,"LI",{});var JRe=s(L5);lue=n(JRe,"STRONG",{});var eTt=s(lue);qHo=r(eTt,"deberta"),eTt.forEach(t),jHo=r(JRe," \u2014 "),az=n(JRe,"A",{href:!0});var oTt=s(az);DHo=r(oTt,"DebertaForTokenClassification"),oTt.forEach(t),GHo=r(JRe," (DeBERTa model)"),JRe.forEach(t),OHo=i(J),y5=n(J,"LI",{});var YRe=s(y5);iue=n(YRe,"STRONG",{});var rTt=s(iue);VHo=r(rTt,"deberta-v2"),rTt.forEach(t),XHo=r(YRe," \u2014 "),nz=n(YRe,"A",{href:!0});var tTt=s(nz);zHo=r(tTt,"DebertaV2ForTokenClassification"),tTt.forEach(t),QHo=r(YRe," (DeBERTa-v2 model)"),YRe.forEach(t),WHo=i(J),x5=n(J,"LI",{});var KRe=s(x5);due=n(KRe,"STRONG",{});var aTt=s(due);HHo=r(aTt,"distilbert"),aTt.forEach(t),UHo=r(KRe," \u2014 "),sz=n(KRe,"A",{href:!0});var nTt=s(sz);JHo=r(nTt,"DistilBertForTokenClassification"),nTt.forEach(t),YHo=r(KRe," (DistilBERT model)"),KRe.forEach(t),KHo=i(J),$5=n(J,"LI",{});var ZRe=s($5);cue=n(ZRe,"STRONG",{});var sTt=s(cue);ZHo=r(sTt,"electra"),sTt.forEach(t),eUo=r(ZRe," \u2014 "),lz=n(ZRe,"A",{href:!0});var lTt=s(lz);oUo=r(lTt,"ElectraForTokenClassification"),lTt.forEach(t),rUo=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),tUo=i(J),k5=n(J,"LI",{});var ePe=s(k5);fue=n(ePe,"STRONG",{});var iTt=s(fue);aUo=r(iTt,"flaubert"),iTt.forEach(t),nUo=r(ePe," \u2014 "),iz=n(ePe,"A",{href:!0});var dTt=s(iz);sUo=r(dTt,"FlaubertForTokenClassification"),dTt.forEach(t),lUo=r(ePe," (FlauBERT model)"),ePe.forEach(t),iUo=i(J),S5=n(J,"LI",{});var oPe=s(S5);mue=n(oPe,"STRONG",{});var cTt=s(mue);dUo=r(cTt,"fnet"),cTt.forEach(t),cUo=r(oPe," \u2014 "),dz=n(oPe,"A",{href:!0});var fTt=s(dz);fUo=r(fTt,"FNetForTokenClassification"),fTt.forEach(t),mUo=r(oPe," (FNet model)"),oPe.forEach(t),gUo=i(J),R5=n(J,"LI",{});var rPe=s(R5);gue=n(rPe,"STRONG",{});var mTt=s(gue);hUo=r(mTt,"funnel"),mTt.forEach(t),pUo=r(rPe," \u2014 "),cz=n(rPe,"A",{href:!0});var gTt=s(cz);_Uo=r(gTt,"FunnelForTokenClassification"),gTt.forEach(t),uUo=r(rPe," (Funnel Transformer model)"),rPe.forEach(t),bUo=i(J),P5=n(J,"LI",{});var tPe=s(P5);hue=n(tPe,"STRONG",{});var hTt=s(hue);vUo=r(hTt,"gpt2"),hTt.forEach(t),FUo=r(tPe," \u2014 "),fz=n(tPe,"A",{href:!0});var pTt=s(fz);TUo=r(pTt,"GPT2ForTokenClassification"),pTt.forEach(t),MUo=r(tPe," (OpenAI GPT-2 model)"),tPe.forEach(t),EUo=i(J),B5=n(J,"LI",{});var aPe=s(B5);pue=n(aPe,"STRONG",{});var _Tt=s(pue);CUo=r(_Tt,"ibert"),_Tt.forEach(t),wUo=r(aPe," \u2014 "),mz=n(aPe,"A",{href:!0});var uTt=s(mz);AUo=r(uTt,"IBertForTokenClassification"),uTt.forEach(t),LUo=r(aPe," (I-BERT model)"),aPe.forEach(t),yUo=i(J),N5=n(J,"LI",{});var nPe=s(N5);_ue=n(nPe,"STRONG",{});var bTt=s(_ue);xUo=r(bTt,"layoutlm"),bTt.forEach(t),$Uo=r(nPe," \u2014 "),gz=n(nPe,"A",{href:!0});var vTt=s(gz);kUo=r(vTt,"LayoutLMForTokenClassification"),vTt.forEach(t),SUo=r(nPe," (LayoutLM model)"),nPe.forEach(t),RUo=i(J),I5=n(J,"LI",{});var sPe=s(I5);uue=n(sPe,"STRONG",{});var FTt=s(uue);PUo=r(FTt,"layoutlmv2"),FTt.forEach(t),BUo=r(sPe," \u2014 "),hz=n(sPe,"A",{href:!0});var TTt=s(hz);NUo=r(TTt,"LayoutLMv2ForTokenClassification"),TTt.forEach(t),IUo=r(sPe," (LayoutLMv2 model)"),sPe.forEach(t),qUo=i(J),q5=n(J,"LI",{});var lPe=s(q5);bue=n(lPe,"STRONG",{});var MTt=s(bue);jUo=r(MTt,"layoutlmv3"),MTt.forEach(t),DUo=r(lPe," \u2014 "),pz=n(lPe,"A",{href:!0});var ETt=s(pz);GUo=r(ETt,"LayoutLMv3ForTokenClassification"),ETt.forEach(t),OUo=r(lPe," (LayoutLMv3 model)"),lPe.forEach(t),VUo=i(J),j5=n(J,"LI",{});var iPe=s(j5);vue=n(iPe,"STRONG",{});var CTt=s(vue);XUo=r(CTt,"longformer"),CTt.forEach(t),zUo=r(iPe," \u2014 "),_z=n(iPe,"A",{href:!0});var wTt=s(_z);QUo=r(wTt,"LongformerForTokenClassification"),wTt.forEach(t),WUo=r(iPe," (Longformer model)"),iPe.forEach(t),HUo=i(J),D5=n(J,"LI",{});var dPe=s(D5);Fue=n(dPe,"STRONG",{});var ATt=s(Fue);UUo=r(ATt,"megatron-bert"),ATt.forEach(t),JUo=r(dPe," \u2014 "),uz=n(dPe,"A",{href:!0});var LTt=s(uz);YUo=r(LTt,"MegatronBertForTokenClassification"),LTt.forEach(t),KUo=r(dPe," (Megatron-BERT model)"),dPe.forEach(t),ZUo=i(J),G5=n(J,"LI",{});var cPe=s(G5);Tue=n(cPe,"STRONG",{});var yTt=s(Tue);eJo=r(yTt,"mobilebert"),yTt.forEach(t),oJo=r(cPe," \u2014 "),bz=n(cPe,"A",{href:!0});var xTt=s(bz);rJo=r(xTt,"MobileBertForTokenClassification"),xTt.forEach(t),tJo=r(cPe," (MobileBERT model)"),cPe.forEach(t),aJo=i(J),O5=n(J,"LI",{});var fPe=s(O5);Mue=n(fPe,"STRONG",{});var $Tt=s(Mue);nJo=r($Tt,"mpnet"),$Tt.forEach(t),sJo=r(fPe," \u2014 "),vz=n(fPe,"A",{href:!0});var kTt=s(vz);lJo=r(kTt,"MPNetForTokenClassification"),kTt.forEach(t),iJo=r(fPe," (MPNet model)"),fPe.forEach(t),dJo=i(J),V5=n(J,"LI",{});var mPe=s(V5);Eue=n(mPe,"STRONG",{});var STt=s(Eue);cJo=r(STt,"nezha"),STt.forEach(t),fJo=r(mPe," \u2014 "),Fz=n(mPe,"A",{href:!0});var RTt=s(Fz);mJo=r(RTt,"NezhaForTokenClassification"),RTt.forEach(t),gJo=r(mPe," (Nezha model)"),mPe.forEach(t),hJo=i(J),X5=n(J,"LI",{});var gPe=s(X5);Cue=n(gPe,"STRONG",{});var PTt=s(Cue);pJo=r(PTt,"nystromformer"),PTt.forEach(t),_Jo=r(gPe," \u2014 "),Tz=n(gPe,"A",{href:!0});var BTt=s(Tz);uJo=r(BTt,"NystromformerForTokenClassification"),BTt.forEach(t),bJo=r(gPe," (Nystr\xF6mformer model)"),gPe.forEach(t),vJo=i(J),z5=n(J,"LI",{});var hPe=s(z5);wue=n(hPe,"STRONG",{});var NTt=s(wue);FJo=r(NTt,"qdqbert"),NTt.forEach(t),TJo=r(hPe," \u2014 "),Mz=n(hPe,"A",{href:!0});var ITt=s(Mz);MJo=r(ITt,"QDQBertForTokenClassification"),ITt.forEach(t),EJo=r(hPe," (QDQBert model)"),hPe.forEach(t),CJo=i(J),Q5=n(J,"LI",{});var pPe=s(Q5);Aue=n(pPe,"STRONG",{});var qTt=s(Aue);wJo=r(qTt,"rembert"),qTt.forEach(t),AJo=r(pPe," \u2014 "),Ez=n(pPe,"A",{href:!0});var jTt=s(Ez);LJo=r(jTt,"RemBertForTokenClassification"),jTt.forEach(t),yJo=r(pPe," (RemBERT model)"),pPe.forEach(t),xJo=i(J),W5=n(J,"LI",{});var _Pe=s(W5);Lue=n(_Pe,"STRONG",{});var DTt=s(Lue);$Jo=r(DTt,"roberta"),DTt.forEach(t),kJo=r(_Pe," \u2014 "),Cz=n(_Pe,"A",{href:!0});var GTt=s(Cz);SJo=r(GTt,"RobertaForTokenClassification"),GTt.forEach(t),RJo=r(_Pe," (RoBERTa model)"),_Pe.forEach(t),PJo=i(J),H5=n(J,"LI",{});var uPe=s(H5);yue=n(uPe,"STRONG",{});var OTt=s(yue);BJo=r(OTt,"roformer"),OTt.forEach(t),NJo=r(uPe," \u2014 "),wz=n(uPe,"A",{href:!0});var VTt=s(wz);IJo=r(VTt,"RoFormerForTokenClassification"),VTt.forEach(t),qJo=r(uPe," (RoFormer model)"),uPe.forEach(t),jJo=i(J),U5=n(J,"LI",{});var bPe=s(U5);xue=n(bPe,"STRONG",{});var XTt=s(xue);DJo=r(XTt,"squeezebert"),XTt.forEach(t),GJo=r(bPe," \u2014 "),Az=n(bPe,"A",{href:!0});var zTt=s(Az);OJo=r(zTt,"SqueezeBertForTokenClassification"),zTt.forEach(t),VJo=r(bPe," (SqueezeBERT model)"),bPe.forEach(t),XJo=i(J),J5=n(J,"LI",{});var vPe=s(J5);$ue=n(vPe,"STRONG",{});var QTt=s($ue);zJo=r(QTt,"xlm"),QTt.forEach(t),QJo=r(vPe," \u2014 "),Lz=n(vPe,"A",{href:!0});var WTt=s(Lz);WJo=r(WTt,"XLMForTokenClassification"),WTt.forEach(t),HJo=r(vPe," (XLM model)"),vPe.forEach(t),UJo=i(J),Y5=n(J,"LI",{});var FPe=s(Y5);kue=n(FPe,"STRONG",{});var HTt=s(kue);JJo=r(HTt,"xlm-roberta"),HTt.forEach(t),YJo=r(FPe," \u2014 "),yz=n(FPe,"A",{href:!0});var UTt=s(yz);KJo=r(UTt,"XLMRobertaForTokenClassification"),UTt.forEach(t),ZJo=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),eYo=i(J),K5=n(J,"LI",{});var TPe=s(K5);Sue=n(TPe,"STRONG",{});var JTt=s(Sue);oYo=r(JTt,"xlm-roberta-xl"),JTt.forEach(t),rYo=r(TPe," \u2014 "),xz=n(TPe,"A",{href:!0});var YTt=s(xz);tYo=r(YTt,"XLMRobertaXLForTokenClassification"),YTt.forEach(t),aYo=r(TPe," (XLM-RoBERTa-XL model)"),TPe.forEach(t),nYo=i(J),Z5=n(J,"LI",{});var MPe=s(Z5);Rue=n(MPe,"STRONG",{});var KTt=s(Rue);sYo=r(KTt,"xlnet"),KTt.forEach(t),lYo=r(MPe," \u2014 "),$z=n(MPe,"A",{href:!0});var ZTt=s($z);iYo=r(ZTt,"XLNetForTokenClassification"),ZTt.forEach(t),dYo=r(MPe," (XLNet model)"),MPe.forEach(t),cYo=i(J),ev=n(J,"LI",{});var EPe=s(ev);Pue=n(EPe,"STRONG",{});var e7t=s(Pue);fYo=r(e7t,"yoso"),e7t.forEach(t),mYo=r(EPe," \u2014 "),kz=n(EPe,"A",{href:!0});var o7t=s(kz);gYo=r(o7t,"YosoForTokenClassification"),o7t.forEach(t),hYo=r(EPe," (YOSO model)"),EPe.forEach(t),J.forEach(t),pYo=i(ha),ov=n(ha,"P",{});var CPe=s(ov);_Yo=r(CPe,"The model is set in evaluation mode by default using "),Bue=n(CPe,"CODE",{});var r7t=s(Bue);uYo=r(r7t,"model.eval()"),r7t.forEach(t),bYo=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(CPe,"CODE",{});var t7t=s(Nue);vYo=r(t7t,"model.train()"),t7t.forEach(t),CPe.forEach(t),FYo=i(ha),T(rv.$$.fragment,ha),ha.forEach(t),sl.forEach(t),ZOe=i(f),cd=n(f,"H2",{class:!0});var nze=s(cd);tv=n(nze,"A",{id:!0,class:!0,href:!0});var a7t=s(tv);Iue=n(a7t,"SPAN",{});var n7t=s(Iue);T(oy.$$.fragment,n7t),n7t.forEach(t),a7t.forEach(t),TYo=i(nze),que=n(nze,"SPAN",{});var s7t=s(que);MYo=r(s7t,"AutoModelForQuestionAnswering"),s7t.forEach(t),nze.forEach(t),eVe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(ry.$$.fragment,ll),EYo=i(ll),fd=n(ll,"P",{});var tre=s(fd);CYo=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Sz=n(tre,"A",{href:!0});var l7t=s(Sz);wYo=r(l7t,"from_pretrained()"),l7t.forEach(t),AYo=r(tre," class method or the "),Rz=n(tre,"A",{href:!0});var i7t=s(Rz);LYo=r(i7t,"from_config()"),i7t.forEach(t),yYo=r(tre,` class
method.`),tre.forEach(t),xYo=i(ll),ty=n(ll,"P",{});var sze=s(ty);$Yo=r(sze,"This class cannot be instantiated directly using "),jue=n(sze,"CODE",{});var d7t=s(jue);kYo=r(d7t,"__init__()"),d7t.forEach(t),SYo=r(sze," (throws an error)."),sze.forEach(t),RYo=i(ll),pt=n(ll,"DIV",{class:!0});var nA=s(pt);T(ay.$$.fragment,nA),PYo=i(nA),Due=n(nA,"P",{});var c7t=s(Due);BYo=r(c7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),c7t.forEach(t),NYo=i(nA),md=n(nA,"P",{});var are=s(md);IYo=r(are,`Note:
Loading a model from its configuration file does `),Gue=n(are,"STRONG",{});var f7t=s(Gue);qYo=r(f7t,"not"),f7t.forEach(t),jYo=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(are,"A",{href:!0});var m7t=s(Pz);DYo=r(m7t,"from_pretrained()"),m7t.forEach(t),GYo=r(are," to load the model weights."),are.forEach(t),OYo=i(nA),T(av.$$.fragment,nA),nA.forEach(t),VYo=i(ll),no=n(ll,"DIV",{class:!0});var pa=s(no);T(ny.$$.fragment,pa),XYo=i(pa),Oue=n(pa,"P",{});var g7t=s(Oue);zYo=r(g7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),g7t.forEach(t),QYo=i(pa),Va=n(pa,"P",{});var sA=s(Va);WYo=r(sA,"The model class to instantiate is selected based on the "),Vue=n(sA,"CODE",{});var h7t=s(Vue);HYo=r(h7t,"model_type"),h7t.forEach(t),UYo=r(sA,` property of the config object (either
passed as an argument or loaded from `),Xue=n(sA,"CODE",{});var p7t=s(Xue);JYo=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),YYo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(sA,"CODE",{});var _7t=s(zue);KYo=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),ZYo=r(sA,":"),sA.forEach(t),eKo=i(pa),V=n(pa,"UL",{});var X=s(V);nv=n(X,"LI",{});var wPe=s(nv);Que=n(wPe,"STRONG",{});var u7t=s(Que);oKo=r(u7t,"albert"),u7t.forEach(t),rKo=r(wPe," \u2014 "),Bz=n(wPe,"A",{href:!0});var b7t=s(Bz);tKo=r(b7t,"AlbertForQuestionAnswering"),b7t.forEach(t),aKo=r(wPe," (ALBERT model)"),wPe.forEach(t),nKo=i(X),sv=n(X,"LI",{});var APe=s(sv);Wue=n(APe,"STRONG",{});var v7t=s(Wue);sKo=r(v7t,"bart"),v7t.forEach(t),lKo=r(APe," \u2014 "),Nz=n(APe,"A",{href:!0});var F7t=s(Nz);iKo=r(F7t,"BartForQuestionAnswering"),F7t.forEach(t),dKo=r(APe," (BART model)"),APe.forEach(t),cKo=i(X),lv=n(X,"LI",{});var LPe=s(lv);Hue=n(LPe,"STRONG",{});var T7t=s(Hue);fKo=r(T7t,"bert"),T7t.forEach(t),mKo=r(LPe," \u2014 "),Iz=n(LPe,"A",{href:!0});var M7t=s(Iz);gKo=r(M7t,"BertForQuestionAnswering"),M7t.forEach(t),hKo=r(LPe," (BERT model)"),LPe.forEach(t),pKo=i(X),iv=n(X,"LI",{});var yPe=s(iv);Uue=n(yPe,"STRONG",{});var E7t=s(Uue);_Ko=r(E7t,"big_bird"),E7t.forEach(t),uKo=r(yPe," \u2014 "),qz=n(yPe,"A",{href:!0});var C7t=s(qz);bKo=r(C7t,"BigBirdForQuestionAnswering"),C7t.forEach(t),vKo=r(yPe," (BigBird model)"),yPe.forEach(t),FKo=i(X),dv=n(X,"LI",{});var xPe=s(dv);Jue=n(xPe,"STRONG",{});var w7t=s(Jue);TKo=r(w7t,"bigbird_pegasus"),w7t.forEach(t),MKo=r(xPe," \u2014 "),jz=n(xPe,"A",{href:!0});var A7t=s(jz);EKo=r(A7t,"BigBirdPegasusForQuestionAnswering"),A7t.forEach(t),CKo=r(xPe," (BigBird-Pegasus model)"),xPe.forEach(t),wKo=i(X),cv=n(X,"LI",{});var $Pe=s(cv);Yue=n($Pe,"STRONG",{});var L7t=s(Yue);AKo=r(L7t,"camembert"),L7t.forEach(t),LKo=r($Pe," \u2014 "),Dz=n($Pe,"A",{href:!0});var y7t=s(Dz);yKo=r(y7t,"CamembertForQuestionAnswering"),y7t.forEach(t),xKo=r($Pe," (CamemBERT model)"),$Pe.forEach(t),$Ko=i(X),fv=n(X,"LI",{});var kPe=s(fv);Kue=n(kPe,"STRONG",{});var x7t=s(Kue);kKo=r(x7t,"canine"),x7t.forEach(t),SKo=r(kPe," \u2014 "),Gz=n(kPe,"A",{href:!0});var $7t=s(Gz);RKo=r($7t,"CanineForQuestionAnswering"),$7t.forEach(t),PKo=r(kPe," (CANINE model)"),kPe.forEach(t),BKo=i(X),mv=n(X,"LI",{});var SPe=s(mv);Zue=n(SPe,"STRONG",{});var k7t=s(Zue);NKo=r(k7t,"convbert"),k7t.forEach(t),IKo=r(SPe," \u2014 "),Oz=n(SPe,"A",{href:!0});var S7t=s(Oz);qKo=r(S7t,"ConvBertForQuestionAnswering"),S7t.forEach(t),jKo=r(SPe," (ConvBERT model)"),SPe.forEach(t),DKo=i(X),gv=n(X,"LI",{});var RPe=s(gv);e1e=n(RPe,"STRONG",{});var R7t=s(e1e);GKo=r(R7t,"data2vec-text"),R7t.forEach(t),OKo=r(RPe," \u2014 "),Vz=n(RPe,"A",{href:!0});var P7t=s(Vz);VKo=r(P7t,"Data2VecTextForQuestionAnswering"),P7t.forEach(t),XKo=r(RPe," (Data2VecText model)"),RPe.forEach(t),zKo=i(X),hv=n(X,"LI",{});var PPe=s(hv);o1e=n(PPe,"STRONG",{});var B7t=s(o1e);QKo=r(B7t,"deberta"),B7t.forEach(t),WKo=r(PPe," \u2014 "),Xz=n(PPe,"A",{href:!0});var N7t=s(Xz);HKo=r(N7t,"DebertaForQuestionAnswering"),N7t.forEach(t),UKo=r(PPe," (DeBERTa model)"),PPe.forEach(t),JKo=i(X),pv=n(X,"LI",{});var BPe=s(pv);r1e=n(BPe,"STRONG",{});var I7t=s(r1e);YKo=r(I7t,"deberta-v2"),I7t.forEach(t),KKo=r(BPe," \u2014 "),zz=n(BPe,"A",{href:!0});var q7t=s(zz);ZKo=r(q7t,"DebertaV2ForQuestionAnswering"),q7t.forEach(t),eZo=r(BPe," (DeBERTa-v2 model)"),BPe.forEach(t),oZo=i(X),_v=n(X,"LI",{});var NPe=s(_v);t1e=n(NPe,"STRONG",{});var j7t=s(t1e);rZo=r(j7t,"distilbert"),j7t.forEach(t),tZo=r(NPe," \u2014 "),Qz=n(NPe,"A",{href:!0});var D7t=s(Qz);aZo=r(D7t,"DistilBertForQuestionAnswering"),D7t.forEach(t),nZo=r(NPe," (DistilBERT model)"),NPe.forEach(t),sZo=i(X),uv=n(X,"LI",{});var IPe=s(uv);a1e=n(IPe,"STRONG",{});var G7t=s(a1e);lZo=r(G7t,"electra"),G7t.forEach(t),iZo=r(IPe," \u2014 "),Wz=n(IPe,"A",{href:!0});var O7t=s(Wz);dZo=r(O7t,"ElectraForQuestionAnswering"),O7t.forEach(t),cZo=r(IPe," (ELECTRA model)"),IPe.forEach(t),fZo=i(X),bv=n(X,"LI",{});var qPe=s(bv);n1e=n(qPe,"STRONG",{});var V7t=s(n1e);mZo=r(V7t,"flaubert"),V7t.forEach(t),gZo=r(qPe," \u2014 "),Hz=n(qPe,"A",{href:!0});var X7t=s(Hz);hZo=r(X7t,"FlaubertForQuestionAnsweringSimple"),X7t.forEach(t),pZo=r(qPe," (FlauBERT model)"),qPe.forEach(t),_Zo=i(X),vv=n(X,"LI",{});var jPe=s(vv);s1e=n(jPe,"STRONG",{});var z7t=s(s1e);uZo=r(z7t,"fnet"),z7t.forEach(t),bZo=r(jPe," \u2014 "),Uz=n(jPe,"A",{href:!0});var Q7t=s(Uz);vZo=r(Q7t,"FNetForQuestionAnswering"),Q7t.forEach(t),FZo=r(jPe," (FNet model)"),jPe.forEach(t),TZo=i(X),Fv=n(X,"LI",{});var DPe=s(Fv);l1e=n(DPe,"STRONG",{});var W7t=s(l1e);MZo=r(W7t,"funnel"),W7t.forEach(t),EZo=r(DPe," \u2014 "),Jz=n(DPe,"A",{href:!0});var H7t=s(Jz);CZo=r(H7t,"FunnelForQuestionAnswering"),H7t.forEach(t),wZo=r(DPe," (Funnel Transformer model)"),DPe.forEach(t),AZo=i(X),Tv=n(X,"LI",{});var GPe=s(Tv);i1e=n(GPe,"STRONG",{});var U7t=s(i1e);LZo=r(U7t,"gptj"),U7t.forEach(t),yZo=r(GPe," \u2014 "),Yz=n(GPe,"A",{href:!0});var J7t=s(Yz);xZo=r(J7t,"GPTJForQuestionAnswering"),J7t.forEach(t),$Zo=r(GPe," (GPT-J model)"),GPe.forEach(t),kZo=i(X),Mv=n(X,"LI",{});var OPe=s(Mv);d1e=n(OPe,"STRONG",{});var Y7t=s(d1e);SZo=r(Y7t,"ibert"),Y7t.forEach(t),RZo=r(OPe," \u2014 "),Kz=n(OPe,"A",{href:!0});var K7t=s(Kz);PZo=r(K7t,"IBertForQuestionAnswering"),K7t.forEach(t),BZo=r(OPe," (I-BERT model)"),OPe.forEach(t),NZo=i(X),Ev=n(X,"LI",{});var VPe=s(Ev);c1e=n(VPe,"STRONG",{});var Z7t=s(c1e);IZo=r(Z7t,"layoutlmv2"),Z7t.forEach(t),qZo=r(VPe," \u2014 "),Zz=n(VPe,"A",{href:!0});var e8t=s(Zz);jZo=r(e8t,"LayoutLMv2ForQuestionAnswering"),e8t.forEach(t),DZo=r(VPe," (LayoutLMv2 model)"),VPe.forEach(t),GZo=i(X),Cv=n(X,"LI",{});var XPe=s(Cv);f1e=n(XPe,"STRONG",{});var o8t=s(f1e);OZo=r(o8t,"layoutlmv3"),o8t.forEach(t),VZo=r(XPe," \u2014 "),eQ=n(XPe,"A",{href:!0});var r8t=s(eQ);XZo=r(r8t,"LayoutLMv3ForQuestionAnswering"),r8t.forEach(t),zZo=r(XPe," (LayoutLMv3 model)"),XPe.forEach(t),QZo=i(X),wv=n(X,"LI",{});var zPe=s(wv);m1e=n(zPe,"STRONG",{});var t8t=s(m1e);WZo=r(t8t,"led"),t8t.forEach(t),HZo=r(zPe," \u2014 "),oQ=n(zPe,"A",{href:!0});var a8t=s(oQ);UZo=r(a8t,"LEDForQuestionAnswering"),a8t.forEach(t),JZo=r(zPe," (LED model)"),zPe.forEach(t),YZo=i(X),Av=n(X,"LI",{});var QPe=s(Av);g1e=n(QPe,"STRONG",{});var n8t=s(g1e);KZo=r(n8t,"longformer"),n8t.forEach(t),ZZo=r(QPe," \u2014 "),rQ=n(QPe,"A",{href:!0});var s8t=s(rQ);eer=r(s8t,"LongformerForQuestionAnswering"),s8t.forEach(t),oer=r(QPe," (Longformer model)"),QPe.forEach(t),rer=i(X),Lv=n(X,"LI",{});var WPe=s(Lv);h1e=n(WPe,"STRONG",{});var l8t=s(h1e);ter=r(l8t,"lxmert"),l8t.forEach(t),aer=r(WPe," \u2014 "),tQ=n(WPe,"A",{href:!0});var i8t=s(tQ);ner=r(i8t,"LxmertForQuestionAnswering"),i8t.forEach(t),ser=r(WPe," (LXMERT model)"),WPe.forEach(t),ler=i(X),yv=n(X,"LI",{});var HPe=s(yv);p1e=n(HPe,"STRONG",{});var d8t=s(p1e);ier=r(d8t,"mbart"),d8t.forEach(t),der=r(HPe," \u2014 "),aQ=n(HPe,"A",{href:!0});var c8t=s(aQ);cer=r(c8t,"MBartForQuestionAnswering"),c8t.forEach(t),fer=r(HPe," (mBART model)"),HPe.forEach(t),mer=i(X),xv=n(X,"LI",{});var UPe=s(xv);_1e=n(UPe,"STRONG",{});var f8t=s(_1e);ger=r(f8t,"megatron-bert"),f8t.forEach(t),her=r(UPe," \u2014 "),nQ=n(UPe,"A",{href:!0});var m8t=s(nQ);per=r(m8t,"MegatronBertForQuestionAnswering"),m8t.forEach(t),_er=r(UPe," (Megatron-BERT model)"),UPe.forEach(t),uer=i(X),$v=n(X,"LI",{});var JPe=s($v);u1e=n(JPe,"STRONG",{});var g8t=s(u1e);ber=r(g8t,"mobilebert"),g8t.forEach(t),ver=r(JPe," \u2014 "),sQ=n(JPe,"A",{href:!0});var h8t=s(sQ);Fer=r(h8t,"MobileBertForQuestionAnswering"),h8t.forEach(t),Ter=r(JPe," (MobileBERT model)"),JPe.forEach(t),Mer=i(X),kv=n(X,"LI",{});var YPe=s(kv);b1e=n(YPe,"STRONG",{});var p8t=s(b1e);Eer=r(p8t,"mpnet"),p8t.forEach(t),Cer=r(YPe," \u2014 "),lQ=n(YPe,"A",{href:!0});var _8t=s(lQ);wer=r(_8t,"MPNetForQuestionAnswering"),_8t.forEach(t),Aer=r(YPe," (MPNet model)"),YPe.forEach(t),Ler=i(X),Sv=n(X,"LI",{});var KPe=s(Sv);v1e=n(KPe,"STRONG",{});var u8t=s(v1e);yer=r(u8t,"nezha"),u8t.forEach(t),xer=r(KPe," \u2014 "),iQ=n(KPe,"A",{href:!0});var b8t=s(iQ);$er=r(b8t,"NezhaForQuestionAnswering"),b8t.forEach(t),ker=r(KPe," (Nezha model)"),KPe.forEach(t),Ser=i(X),Rv=n(X,"LI",{});var ZPe=s(Rv);F1e=n(ZPe,"STRONG",{});var v8t=s(F1e);Rer=r(v8t,"nystromformer"),v8t.forEach(t),Per=r(ZPe," \u2014 "),dQ=n(ZPe,"A",{href:!0});var F8t=s(dQ);Ber=r(F8t,"NystromformerForQuestionAnswering"),F8t.forEach(t),Ner=r(ZPe," (Nystr\xF6mformer model)"),ZPe.forEach(t),Ier=i(X),Pv=n(X,"LI",{});var eBe=s(Pv);T1e=n(eBe,"STRONG",{});var T8t=s(T1e);qer=r(T8t,"qdqbert"),T8t.forEach(t),jer=r(eBe," \u2014 "),cQ=n(eBe,"A",{href:!0});var M8t=s(cQ);Der=r(M8t,"QDQBertForQuestionAnswering"),M8t.forEach(t),Ger=r(eBe," (QDQBert model)"),eBe.forEach(t),Oer=i(X),Bv=n(X,"LI",{});var oBe=s(Bv);M1e=n(oBe,"STRONG",{});var E8t=s(M1e);Ver=r(E8t,"reformer"),E8t.forEach(t),Xer=r(oBe," \u2014 "),fQ=n(oBe,"A",{href:!0});var C8t=s(fQ);zer=r(C8t,"ReformerForQuestionAnswering"),C8t.forEach(t),Qer=r(oBe," (Reformer model)"),oBe.forEach(t),Wer=i(X),Nv=n(X,"LI",{});var rBe=s(Nv);E1e=n(rBe,"STRONG",{});var w8t=s(E1e);Her=r(w8t,"rembert"),w8t.forEach(t),Uer=r(rBe," \u2014 "),mQ=n(rBe,"A",{href:!0});var A8t=s(mQ);Jer=r(A8t,"RemBertForQuestionAnswering"),A8t.forEach(t),Yer=r(rBe," (RemBERT model)"),rBe.forEach(t),Ker=i(X),Iv=n(X,"LI",{});var tBe=s(Iv);C1e=n(tBe,"STRONG",{});var L8t=s(C1e);Zer=r(L8t,"roberta"),L8t.forEach(t),eor=r(tBe," \u2014 "),gQ=n(tBe,"A",{href:!0});var y8t=s(gQ);oor=r(y8t,"RobertaForQuestionAnswering"),y8t.forEach(t),ror=r(tBe," (RoBERTa model)"),tBe.forEach(t),tor=i(X),qv=n(X,"LI",{});var aBe=s(qv);w1e=n(aBe,"STRONG",{});var x8t=s(w1e);aor=r(x8t,"roformer"),x8t.forEach(t),nor=r(aBe," \u2014 "),hQ=n(aBe,"A",{href:!0});var $8t=s(hQ);sor=r($8t,"RoFormerForQuestionAnswering"),$8t.forEach(t),lor=r(aBe," (RoFormer model)"),aBe.forEach(t),ior=i(X),jv=n(X,"LI",{});var nBe=s(jv);A1e=n(nBe,"STRONG",{});var k8t=s(A1e);dor=r(k8t,"splinter"),k8t.forEach(t),cor=r(nBe," \u2014 "),pQ=n(nBe,"A",{href:!0});var S8t=s(pQ);mor=r(S8t,"SplinterForQuestionAnswering"),S8t.forEach(t),gor=r(nBe," (Splinter model)"),nBe.forEach(t),hor=i(X),Dv=n(X,"LI",{});var sBe=s(Dv);L1e=n(sBe,"STRONG",{});var R8t=s(L1e);por=r(R8t,"squeezebert"),R8t.forEach(t),_or=r(sBe," \u2014 "),_Q=n(sBe,"A",{href:!0});var P8t=s(_Q);uor=r(P8t,"SqueezeBertForQuestionAnswering"),P8t.forEach(t),bor=r(sBe," (SqueezeBERT model)"),sBe.forEach(t),vor=i(X),Gv=n(X,"LI",{});var lBe=s(Gv);y1e=n(lBe,"STRONG",{});var B8t=s(y1e);For=r(B8t,"xlm"),B8t.forEach(t),Tor=r(lBe," \u2014 "),uQ=n(lBe,"A",{href:!0});var N8t=s(uQ);Mor=r(N8t,"XLMForQuestionAnsweringSimple"),N8t.forEach(t),Eor=r(lBe," (XLM model)"),lBe.forEach(t),Cor=i(X),Ov=n(X,"LI",{});var iBe=s(Ov);x1e=n(iBe,"STRONG",{});var I8t=s(x1e);wor=r(I8t,"xlm-roberta"),I8t.forEach(t),Aor=r(iBe," \u2014 "),bQ=n(iBe,"A",{href:!0});var q8t=s(bQ);Lor=r(q8t,"XLMRobertaForQuestionAnswering"),q8t.forEach(t),yor=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),xor=i(X),Vv=n(X,"LI",{});var dBe=s(Vv);$1e=n(dBe,"STRONG",{});var j8t=s($1e);$or=r(j8t,"xlm-roberta-xl"),j8t.forEach(t),kor=r(dBe," \u2014 "),vQ=n(dBe,"A",{href:!0});var D8t=s(vQ);Sor=r(D8t,"XLMRobertaXLForQuestionAnswering"),D8t.forEach(t),Ror=r(dBe," (XLM-RoBERTa-XL model)"),dBe.forEach(t),Por=i(X),Xv=n(X,"LI",{});var cBe=s(Xv);k1e=n(cBe,"STRONG",{});var G8t=s(k1e);Bor=r(G8t,"xlnet"),G8t.forEach(t),Nor=r(cBe," \u2014 "),FQ=n(cBe,"A",{href:!0});var O8t=s(FQ);Ior=r(O8t,"XLNetForQuestionAnsweringSimple"),O8t.forEach(t),qor=r(cBe," (XLNet model)"),cBe.forEach(t),jor=i(X),zv=n(X,"LI",{});var fBe=s(zv);S1e=n(fBe,"STRONG",{});var V8t=s(S1e);Dor=r(V8t,"yoso"),V8t.forEach(t),Gor=r(fBe," \u2014 "),TQ=n(fBe,"A",{href:!0});var X8t=s(TQ);Oor=r(X8t,"YosoForQuestionAnswering"),X8t.forEach(t),Vor=r(fBe," (YOSO model)"),fBe.forEach(t),X.forEach(t),Xor=i(pa),Qv=n(pa,"P",{});var mBe=s(Qv);zor=r(mBe,"The model is set in evaluation mode by default using "),R1e=n(mBe,"CODE",{});var z8t=s(R1e);Qor=r(z8t,"model.eval()"),z8t.forEach(t),Wor=r(mBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(mBe,"CODE",{});var Q8t=s(P1e);Hor=r(Q8t,"model.train()"),Q8t.forEach(t),mBe.forEach(t),Uor=i(pa),T(Wv.$$.fragment,pa),pa.forEach(t),ll.forEach(t),oVe=i(f),gd=n(f,"H2",{class:!0});var lze=s(gd);Hv=n(lze,"A",{id:!0,class:!0,href:!0});var W8t=s(Hv);B1e=n(W8t,"SPAN",{});var H8t=s(B1e);T(sy.$$.fragment,H8t),H8t.forEach(t),W8t.forEach(t),Jor=i(lze),N1e=n(lze,"SPAN",{});var U8t=s(N1e);Yor=r(U8t,"AutoModelForTableQuestionAnswering"),U8t.forEach(t),lze.forEach(t),rVe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(ly.$$.fragment,il),Kor=i(il),hd=n(il,"P",{});var nre=s(hd);Zor=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),MQ=n(nre,"A",{href:!0});var J8t=s(MQ);err=r(J8t,"from_pretrained()"),J8t.forEach(t),orr=r(nre," class method or the "),EQ=n(nre,"A",{href:!0});var Y8t=s(EQ);rrr=r(Y8t,"from_config()"),Y8t.forEach(t),trr=r(nre,` class
method.`),nre.forEach(t),arr=i(il),iy=n(il,"P",{});var ize=s(iy);nrr=r(ize,"This class cannot be instantiated directly using "),I1e=n(ize,"CODE",{});var K8t=s(I1e);srr=r(K8t,"__init__()"),K8t.forEach(t),lrr=r(ize," (throws an error)."),ize.forEach(t),irr=i(il),_t=n(il,"DIV",{class:!0});var lA=s(_t);T(dy.$$.fragment,lA),drr=i(lA),q1e=n(lA,"P",{});var Z8t=s(q1e);crr=r(Z8t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z8t.forEach(t),frr=i(lA),pd=n(lA,"P",{});var sre=s(pd);mrr=r(sre,`Note:
Loading a model from its configuration file does `),j1e=n(sre,"STRONG",{});var eMt=s(j1e);grr=r(eMt,"not"),eMt.forEach(t),hrr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(sre,"A",{href:!0});var oMt=s(CQ);prr=r(oMt,"from_pretrained()"),oMt.forEach(t),_rr=r(sre," to load the model weights."),sre.forEach(t),urr=i(lA),T(Uv.$$.fragment,lA),lA.forEach(t),brr=i(il),so=n(il,"DIV",{class:!0});var _a=s(so);T(cy.$$.fragment,_a),vrr=i(_a),D1e=n(_a,"P",{});var rMt=s(D1e);Frr=r(rMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rMt.forEach(t),Trr=i(_a),Xa=n(_a,"P",{});var iA=s(Xa);Mrr=r(iA,"The model class to instantiate is selected based on the "),G1e=n(iA,"CODE",{});var tMt=s(G1e);Err=r(tMt,"model_type"),tMt.forEach(t),Crr=r(iA,` property of the config object (either
passed as an argument or loaded from `),O1e=n(iA,"CODE",{});var aMt=s(O1e);wrr=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),Arr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(iA,"CODE",{});var nMt=s(V1e);Lrr=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),yrr=r(iA,":"),iA.forEach(t),xrr=i(_a),X1e=n(_a,"UL",{});var sMt=s(X1e);Jv=n(sMt,"LI",{});var gBe=s(Jv);z1e=n(gBe,"STRONG",{});var lMt=s(z1e);$rr=r(lMt,"tapas"),lMt.forEach(t),krr=r(gBe," \u2014 "),wQ=n(gBe,"A",{href:!0});var iMt=s(wQ);Srr=r(iMt,"TapasForQuestionAnswering"),iMt.forEach(t),Rrr=r(gBe," (TAPAS model)"),gBe.forEach(t),sMt.forEach(t),Prr=i(_a),Yv=n(_a,"P",{});var hBe=s(Yv);Brr=r(hBe,"The model is set in evaluation mode by default using "),Q1e=n(hBe,"CODE",{});var dMt=s(Q1e);Nrr=r(dMt,"model.eval()"),dMt.forEach(t),Irr=r(hBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=n(hBe,"CODE",{});var cMt=s(W1e);qrr=r(cMt,"model.train()"),cMt.forEach(t),hBe.forEach(t),jrr=i(_a),T(Kv.$$.fragment,_a),_a.forEach(t),il.forEach(t),tVe=i(f),_d=n(f,"H2",{class:!0});var dze=s(_d);Zv=n(dze,"A",{id:!0,class:!0,href:!0});var fMt=s(Zv);H1e=n(fMt,"SPAN",{});var mMt=s(H1e);T(fy.$$.fragment,mMt),mMt.forEach(t),fMt.forEach(t),Drr=i(dze),U1e=n(dze,"SPAN",{});var gMt=s(U1e);Grr=r(gMt,"AutoModelForImageClassification"),gMt.forEach(t),dze.forEach(t),aVe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(my.$$.fragment,dl),Orr=i(dl),ud=n(dl,"P",{});var lre=s(ud);Vrr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AQ=n(lre,"A",{href:!0});var hMt=s(AQ);Xrr=r(hMt,"from_pretrained()"),hMt.forEach(t),zrr=r(lre," class method or the "),LQ=n(lre,"A",{href:!0});var pMt=s(LQ);Qrr=r(pMt,"from_config()"),pMt.forEach(t),Wrr=r(lre,` class
method.`),lre.forEach(t),Hrr=i(dl),gy=n(dl,"P",{});var cze=s(gy);Urr=r(cze,"This class cannot be instantiated directly using "),J1e=n(cze,"CODE",{});var _Mt=s(J1e);Jrr=r(_Mt,"__init__()"),_Mt.forEach(t),Yrr=r(cze," (throws an error)."),cze.forEach(t),Krr=i(dl),ut=n(dl,"DIV",{class:!0});var dA=s(ut);T(hy.$$.fragment,dA),Zrr=i(dA),Y1e=n(dA,"P",{});var uMt=s(Y1e);etr=r(uMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uMt.forEach(t),otr=i(dA),bd=n(dA,"P",{});var ire=s(bd);rtr=r(ire,`Note:
Loading a model from its configuration file does `),K1e=n(ire,"STRONG",{});var bMt=s(K1e);ttr=r(bMt,"not"),bMt.forEach(t),atr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(ire,"A",{href:!0});var vMt=s(yQ);ntr=r(vMt,"from_pretrained()"),vMt.forEach(t),str=r(ire," to load the model weights."),ire.forEach(t),ltr=i(dA),T(eF.$$.fragment,dA),dA.forEach(t),itr=i(dl),lo=n(dl,"DIV",{class:!0});var ua=s(lo);T(py.$$.fragment,ua),dtr=i(ua),Z1e=n(ua,"P",{});var FMt=s(Z1e);ctr=r(FMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FMt.forEach(t),ftr=i(ua),za=n(ua,"P",{});var cA=s(za);mtr=r(cA,"The model class to instantiate is selected based on the "),e2e=n(cA,"CODE",{});var TMt=s(e2e);gtr=r(TMt,"model_type"),TMt.forEach(t),htr=r(cA,` property of the config object (either
passed as an argument or loaded from `),o2e=n(cA,"CODE",{});var MMt=s(o2e);ptr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),_tr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(cA,"CODE",{});var EMt=s(r2e);utr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),btr=r(cA,":"),cA.forEach(t),vtr=i(ua),ue=n(ua,"UL",{});var Te=s(ue);oF=n(Te,"LI",{});var pBe=s(oF);t2e=n(pBe,"STRONG",{});var CMt=s(t2e);Ftr=r(CMt,"beit"),CMt.forEach(t),Ttr=r(pBe," \u2014 "),xQ=n(pBe,"A",{href:!0});var wMt=s(xQ);Mtr=r(wMt,"BeitForImageClassification"),wMt.forEach(t),Etr=r(pBe," (BEiT model)"),pBe.forEach(t),Ctr=i(Te),rF=n(Te,"LI",{});var _Be=s(rF);a2e=n(_Be,"STRONG",{});var AMt=s(a2e);wtr=r(AMt,"convnext"),AMt.forEach(t),Atr=r(_Be," \u2014 "),$Q=n(_Be,"A",{href:!0});var LMt=s($Q);Ltr=r(LMt,"ConvNextForImageClassification"),LMt.forEach(t),ytr=r(_Be," (ConvNeXT model)"),_Be.forEach(t),xtr=i(Te),tF=n(Te,"LI",{});var uBe=s(tF);n2e=n(uBe,"STRONG",{});var yMt=s(n2e);$tr=r(yMt,"cvt"),yMt.forEach(t),ktr=r(uBe," \u2014 "),kQ=n(uBe,"A",{href:!0});var xMt=s(kQ);Str=r(xMt,"CvtForImageClassification"),xMt.forEach(t),Rtr=r(uBe," (CvT model)"),uBe.forEach(t),Ptr=i(Te),aF=n(Te,"LI",{});var bBe=s(aF);s2e=n(bBe,"STRONG",{});var $Mt=s(s2e);Btr=r($Mt,"data2vec-vision"),$Mt.forEach(t),Ntr=r(bBe," \u2014 "),SQ=n(bBe,"A",{href:!0});var kMt=s(SQ);Itr=r(kMt,"Data2VecVisionForImageClassification"),kMt.forEach(t),qtr=r(bBe," (Data2VecVision model)"),bBe.forEach(t),jtr=i(Te),zs=n(Te,"LI",{});var dS=s(zs);l2e=n(dS,"STRONG",{});var SMt=s(l2e);Dtr=r(SMt,"deit"),SMt.forEach(t),Gtr=r(dS," \u2014 "),RQ=n(dS,"A",{href:!0});var RMt=s(RQ);Otr=r(RMt,"DeiTForImageClassification"),RMt.forEach(t),Vtr=r(dS," or "),PQ=n(dS,"A",{href:!0});var PMt=s(PQ);Xtr=r(PMt,"DeiTForImageClassificationWithTeacher"),PMt.forEach(t),ztr=r(dS," (DeiT model)"),dS.forEach(t),Qtr=i(Te),nF=n(Te,"LI",{});var vBe=s(nF);i2e=n(vBe,"STRONG",{});var BMt=s(i2e);Wtr=r(BMt,"imagegpt"),BMt.forEach(t),Htr=r(vBe," \u2014 "),BQ=n(vBe,"A",{href:!0});var NMt=s(BQ);Utr=r(NMt,"ImageGPTForImageClassification"),NMt.forEach(t),Jtr=r(vBe," (ImageGPT model)"),vBe.forEach(t),Ytr=i(Te),Qs=n(Te,"LI",{});var cS=s(Qs);d2e=n(cS,"STRONG",{});var IMt=s(d2e);Ktr=r(IMt,"levit"),IMt.forEach(t),Ztr=r(cS," \u2014 "),NQ=n(cS,"A",{href:!0});var qMt=s(NQ);ear=r(qMt,"LevitForImageClassification"),qMt.forEach(t),oar=r(cS," or "),IQ=n(cS,"A",{href:!0});var jMt=s(IQ);rar=r(jMt,"LevitForImageClassificationWithTeacher"),jMt.forEach(t),tar=r(cS," (LeViT model)"),cS.forEach(t),aar=i(Te),sF=n(Te,"LI",{});var FBe=s(sF);c2e=n(FBe,"STRONG",{});var DMt=s(c2e);nar=r(DMt,"mobilenet_v2"),DMt.forEach(t),sar=r(FBe," \u2014 "),qQ=n(FBe,"A",{href:!0});var GMt=s(qQ);lar=r(GMt,"MobileNetV2ForImageClassification"),GMt.forEach(t),iar=r(FBe," (MobileNetV2 model)"),FBe.forEach(t),dar=i(Te),bt=n(Te,"LI",{});var xf=s(bt);f2e=n(xf,"STRONG",{});var OMt=s(f2e);car=r(OMt,"perceiver"),OMt.forEach(t),far=r(xf," \u2014 "),jQ=n(xf,"A",{href:!0});var VMt=s(jQ);mar=r(VMt,"PerceiverForImageClassificationLearned"),VMt.forEach(t),gar=r(xf," or "),DQ=n(xf,"A",{href:!0});var XMt=s(DQ);har=r(XMt,"PerceiverForImageClassificationFourier"),XMt.forEach(t),par=r(xf," or "),GQ=n(xf,"A",{href:!0});var zMt=s(GQ);_ar=r(zMt,"PerceiverForImageClassificationConvProcessing"),zMt.forEach(t),uar=r(xf," (Perceiver model)"),xf.forEach(t),bar=i(Te),lF=n(Te,"LI",{});var TBe=s(lF);m2e=n(TBe,"STRONG",{});var QMt=s(m2e);Far=r(QMt,"poolformer"),QMt.forEach(t),Tar=r(TBe," \u2014 "),OQ=n(TBe,"A",{href:!0});var WMt=s(OQ);Mar=r(WMt,"PoolFormerForImageClassification"),WMt.forEach(t),Ear=r(TBe," (PoolFormer model)"),TBe.forEach(t),Car=i(Te),iF=n(Te,"LI",{});var MBe=s(iF);g2e=n(MBe,"STRONG",{});var HMt=s(g2e);war=r(HMt,"regnet"),HMt.forEach(t),Aar=r(MBe," \u2014 "),VQ=n(MBe,"A",{href:!0});var UMt=s(VQ);Lar=r(UMt,"RegNetForImageClassification"),UMt.forEach(t),yar=r(MBe," (RegNet model)"),MBe.forEach(t),xar=i(Te),dF=n(Te,"LI",{});var EBe=s(dF);h2e=n(EBe,"STRONG",{});var JMt=s(h2e);$ar=r(JMt,"resnet"),JMt.forEach(t),kar=r(EBe," \u2014 "),XQ=n(EBe,"A",{href:!0});var YMt=s(XQ);Sar=r(YMt,"ResNetForImageClassification"),YMt.forEach(t),Rar=r(EBe," (ResNet model)"),EBe.forEach(t),Par=i(Te),cF=n(Te,"LI",{});var CBe=s(cF);p2e=n(CBe,"STRONG",{});var KMt=s(p2e);Bar=r(KMt,"segformer"),KMt.forEach(t),Nar=r(CBe," \u2014 "),zQ=n(CBe,"A",{href:!0});var ZMt=s(zQ);Iar=r(ZMt,"SegformerForImageClassification"),ZMt.forEach(t),qar=r(CBe," (SegFormer model)"),CBe.forEach(t),jar=i(Te),fF=n(Te,"LI",{});var wBe=s(fF);_2e=n(wBe,"STRONG",{});var eEt=s(_2e);Dar=r(eEt,"swin"),eEt.forEach(t),Gar=r(wBe," \u2014 "),QQ=n(wBe,"A",{href:!0});var oEt=s(QQ);Oar=r(oEt,"SwinForImageClassification"),oEt.forEach(t),Var=r(wBe," (Swin Transformer model)"),wBe.forEach(t),Xar=i(Te),mF=n(Te,"LI",{});var ABe=s(mF);u2e=n(ABe,"STRONG",{});var rEt=s(u2e);zar=r(rEt,"van"),rEt.forEach(t),Qar=r(ABe," \u2014 "),WQ=n(ABe,"A",{href:!0});var tEt=s(WQ);War=r(tEt,"VanForImageClassification"),tEt.forEach(t),Har=r(ABe," (VAN model)"),ABe.forEach(t),Uar=i(Te),gF=n(Te,"LI",{});var LBe=s(gF);b2e=n(LBe,"STRONG",{});var aEt=s(b2e);Jar=r(aEt,"vit"),aEt.forEach(t),Yar=r(LBe," \u2014 "),HQ=n(LBe,"A",{href:!0});var nEt=s(HQ);Kar=r(nEt,"ViTForImageClassification"),nEt.forEach(t),Zar=r(LBe," (ViT model)"),LBe.forEach(t),Te.forEach(t),enr=i(ua),hF=n(ua,"P",{});var yBe=s(hF);onr=r(yBe,"The model is set in evaluation mode by default using "),v2e=n(yBe,"CODE",{});var sEt=s(v2e);rnr=r(sEt,"model.eval()"),sEt.forEach(t),tnr=r(yBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=n(yBe,"CODE",{});var lEt=s(F2e);anr=r(lEt,"model.train()"),lEt.forEach(t),yBe.forEach(t),nnr=i(ua),T(pF.$$.fragment,ua),ua.forEach(t),dl.forEach(t),nVe=i(f),vd=n(f,"H2",{class:!0});var fze=s(vd);_F=n(fze,"A",{id:!0,class:!0,href:!0});var iEt=s(_F);T2e=n(iEt,"SPAN",{});var dEt=s(T2e);T(_y.$$.fragment,dEt),dEt.forEach(t),iEt.forEach(t),snr=i(fze),M2e=n(fze,"SPAN",{});var cEt=s(M2e);lnr=r(cEt,"AutoModelForVision2Seq"),cEt.forEach(t),fze.forEach(t),sVe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(uy.$$.fragment,cl),inr=i(cl),Fd=n(cl,"P",{});var dre=s(Fd);dnr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UQ=n(dre,"A",{href:!0});var fEt=s(UQ);cnr=r(fEt,"from_pretrained()"),fEt.forEach(t),fnr=r(dre," class method or the "),JQ=n(dre,"A",{href:!0});var mEt=s(JQ);mnr=r(mEt,"from_config()"),mEt.forEach(t),gnr=r(dre,` class
method.`),dre.forEach(t),hnr=i(cl),by=n(cl,"P",{});var mze=s(by);pnr=r(mze,"This class cannot be instantiated directly using "),E2e=n(mze,"CODE",{});var gEt=s(E2e);_nr=r(gEt,"__init__()"),gEt.forEach(t),unr=r(mze," (throws an error)."),mze.forEach(t),bnr=i(cl),vt=n(cl,"DIV",{class:!0});var fA=s(vt);T(vy.$$.fragment,fA),vnr=i(fA),C2e=n(fA,"P",{});var hEt=s(C2e);Fnr=r(hEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hEt.forEach(t),Tnr=i(fA),Td=n(fA,"P",{});var cre=s(Td);Mnr=r(cre,`Note:
Loading a model from its configuration file does `),w2e=n(cre,"STRONG",{});var pEt=s(w2e);Enr=r(pEt,"not"),pEt.forEach(t),Cnr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(cre,"A",{href:!0});var _Et=s(YQ);wnr=r(_Et,"from_pretrained()"),_Et.forEach(t),Anr=r(cre," to load the model weights."),cre.forEach(t),Lnr=i(fA),T(uF.$$.fragment,fA),fA.forEach(t),ynr=i(cl),io=n(cl,"DIV",{class:!0});var ba=s(io);T(Fy.$$.fragment,ba),xnr=i(ba),A2e=n(ba,"P",{});var uEt=s(A2e);$nr=r(uEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uEt.forEach(t),knr=i(ba),Qa=n(ba,"P",{});var mA=s(Qa);Snr=r(mA,"The model class to instantiate is selected based on the "),L2e=n(mA,"CODE",{});var bEt=s(L2e);Rnr=r(bEt,"model_type"),bEt.forEach(t),Pnr=r(mA,` property of the config object (either
passed as an argument or loaded from `),y2e=n(mA,"CODE",{});var vEt=s(y2e);Bnr=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),Nnr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(mA,"CODE",{});var FEt=s(x2e);Inr=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),qnr=r(mA,":"),mA.forEach(t),jnr=i(ba),$2e=n(ba,"UL",{});var TEt=s($2e);bF=n(TEt,"LI",{});var xBe=s(bF);k2e=n(xBe,"STRONG",{});var MEt=s(k2e);Dnr=r(MEt,"vision-encoder-decoder"),MEt.forEach(t),Gnr=r(xBe," \u2014 "),KQ=n(xBe,"A",{href:!0});var EEt=s(KQ);Onr=r(EEt,"VisionEncoderDecoderModel"),EEt.forEach(t),Vnr=r(xBe," (Vision Encoder decoder model)"),xBe.forEach(t),TEt.forEach(t),Xnr=i(ba),vF=n(ba,"P",{});var $Be=s(vF);znr=r($Be,"The model is set in evaluation mode by default using "),S2e=n($Be,"CODE",{});var CEt=s(S2e);Qnr=r(CEt,"model.eval()"),CEt.forEach(t),Wnr=r($Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R2e=n($Be,"CODE",{});var wEt=s(R2e);Hnr=r(wEt,"model.train()"),wEt.forEach(t),$Be.forEach(t),Unr=i(ba),T(FF.$$.fragment,ba),ba.forEach(t),cl.forEach(t),lVe=i(f),Md=n(f,"H2",{class:!0});var gze=s(Md);TF=n(gze,"A",{id:!0,class:!0,href:!0});var AEt=s(TF);P2e=n(AEt,"SPAN",{});var LEt=s(P2e);T(Ty.$$.fragment,LEt),LEt.forEach(t),AEt.forEach(t),Jnr=i(gze),B2e=n(gze,"SPAN",{});var yEt=s(B2e);Ynr=r(yEt,"AutoModelForVisualQuestionAnswering"),yEt.forEach(t),gze.forEach(t),iVe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(My.$$.fragment,fl),Knr=i(fl),Ed=n(fl,"P",{});var fre=s(Ed);Znr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),ZQ=n(fre,"A",{href:!0});var xEt=s(ZQ);esr=r(xEt,"from_pretrained()"),xEt.forEach(t),osr=r(fre," class method or the "),eW=n(fre,"A",{href:!0});var $Et=s(eW);rsr=r($Et,"from_config()"),$Et.forEach(t),tsr=r(fre,` class
method.`),fre.forEach(t),asr=i(fl),Ey=n(fl,"P",{});var hze=s(Ey);nsr=r(hze,"This class cannot be instantiated directly using "),N2e=n(hze,"CODE",{});var kEt=s(N2e);ssr=r(kEt,"__init__()"),kEt.forEach(t),lsr=r(hze," (throws an error)."),hze.forEach(t),isr=i(fl),Ft=n(fl,"DIV",{class:!0});var gA=s(Ft);T(Cy.$$.fragment,gA),dsr=i(gA),I2e=n(gA,"P",{});var SEt=s(I2e);csr=r(SEt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),SEt.forEach(t),fsr=i(gA),Cd=n(gA,"P",{});var mre=s(Cd);msr=r(mre,`Note:
Loading a model from its configuration file does `),q2e=n(mre,"STRONG",{});var REt=s(q2e);gsr=r(REt,"not"),REt.forEach(t),hsr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(mre,"A",{href:!0});var PEt=s(oW);psr=r(PEt,"from_pretrained()"),PEt.forEach(t),_sr=r(mre," to load the model weights."),mre.forEach(t),usr=i(gA),T(MF.$$.fragment,gA),gA.forEach(t),bsr=i(fl),co=n(fl,"DIV",{class:!0});var va=s(co);T(wy.$$.fragment,va),vsr=i(va),j2e=n(va,"P",{});var BEt=s(j2e);Fsr=r(BEt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),BEt.forEach(t),Tsr=i(va),Wa=n(va,"P",{});var hA=s(Wa);Msr=r(hA,"The model class to instantiate is selected based on the "),D2e=n(hA,"CODE",{});var NEt=s(D2e);Esr=r(NEt,"model_type"),NEt.forEach(t),Csr=r(hA,` property of the config object (either
passed as an argument or loaded from `),G2e=n(hA,"CODE",{});var IEt=s(G2e);wsr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),Asr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(hA,"CODE",{});var qEt=s(O2e);Lsr=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),ysr=r(hA,":"),hA.forEach(t),xsr=i(va),V2e=n(va,"UL",{});var jEt=s(V2e);EF=n(jEt,"LI",{});var kBe=s(EF);X2e=n(kBe,"STRONG",{});var DEt=s(X2e);$sr=r(DEt,"vilt"),DEt.forEach(t),ksr=r(kBe," \u2014 "),rW=n(kBe,"A",{href:!0});var GEt=s(rW);Ssr=r(GEt,"ViltForQuestionAnswering"),GEt.forEach(t),Rsr=r(kBe," (ViLT model)"),kBe.forEach(t),jEt.forEach(t),Psr=i(va),CF=n(va,"P",{});var SBe=s(CF);Bsr=r(SBe,"The model is set in evaluation mode by default using "),z2e=n(SBe,"CODE",{});var OEt=s(z2e);Nsr=r(OEt,"model.eval()"),OEt.forEach(t),Isr=r(SBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q2e=n(SBe,"CODE",{});var VEt=s(Q2e);qsr=r(VEt,"model.train()"),VEt.forEach(t),SBe.forEach(t),jsr=i(va),T(wF.$$.fragment,va),va.forEach(t),fl.forEach(t),dVe=i(f),wd=n(f,"H2",{class:!0});var pze=s(wd);AF=n(pze,"A",{id:!0,class:!0,href:!0});var XEt=s(AF);W2e=n(XEt,"SPAN",{});var zEt=s(W2e);T(Ay.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),Dsr=i(pze),H2e=n(pze,"SPAN",{});var QEt=s(H2e);Gsr=r(QEt,"AutoModelForAudioClassification"),QEt.forEach(t),pze.forEach(t),cVe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(Ly.$$.fragment,ml),Osr=i(ml),Ad=n(ml,"P",{});var gre=s(Ad);Vsr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tW=n(gre,"A",{href:!0});var WEt=s(tW);Xsr=r(WEt,"from_pretrained()"),WEt.forEach(t),zsr=r(gre," class method or the "),aW=n(gre,"A",{href:!0});var HEt=s(aW);Qsr=r(HEt,"from_config()"),HEt.forEach(t),Wsr=r(gre,` class
method.`),gre.forEach(t),Hsr=i(ml),yy=n(ml,"P",{});var _ze=s(yy);Usr=r(_ze,"This class cannot be instantiated directly using "),U2e=n(_ze,"CODE",{});var UEt=s(U2e);Jsr=r(UEt,"__init__()"),UEt.forEach(t),Ysr=r(_ze," (throws an error)."),_ze.forEach(t),Ksr=i(ml),Tt=n(ml,"DIV",{class:!0});var pA=s(Tt);T(xy.$$.fragment,pA),Zsr=i(pA),J2e=n(pA,"P",{});var JEt=s(J2e);elr=r(JEt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),JEt.forEach(t),olr=i(pA),Ld=n(pA,"P",{});var hre=s(Ld);rlr=r(hre,`Note:
Loading a model from its configuration file does `),Y2e=n(hre,"STRONG",{});var YEt=s(Y2e);tlr=r(YEt,"not"),YEt.forEach(t),alr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(hre,"A",{href:!0});var KEt=s(nW);nlr=r(KEt,"from_pretrained()"),KEt.forEach(t),slr=r(hre," to load the model weights."),hre.forEach(t),llr=i(pA),T(LF.$$.fragment,pA),pA.forEach(t),ilr=i(ml),fo=n(ml,"DIV",{class:!0});var Fa=s(fo);T($y.$$.fragment,Fa),dlr=i(Fa),K2e=n(Fa,"P",{});var ZEt=s(K2e);clr=r(ZEt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZEt.forEach(t),flr=i(Fa),Ha=n(Fa,"P",{});var _A=s(Ha);mlr=r(_A,"The model class to instantiate is selected based on the "),Z2e=n(_A,"CODE",{});var eCt=s(Z2e);glr=r(eCt,"model_type"),eCt.forEach(t),hlr=r(_A,` property of the config object (either
passed as an argument or loaded from `),ebe=n(_A,"CODE",{});var oCt=s(ebe);plr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),_lr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(_A,"CODE",{});var rCt=s(obe);ulr=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),blr=r(_A,":"),_A.forEach(t),vlr=i(Fa),Pe=n(Fa,"UL",{});var ze=s(Pe);yF=n(ze,"LI",{});var RBe=s(yF);rbe=n(RBe,"STRONG",{});var tCt=s(rbe);Flr=r(tCt,"data2vec-audio"),tCt.forEach(t),Tlr=r(RBe," \u2014 "),sW=n(RBe,"A",{href:!0});var aCt=s(sW);Mlr=r(aCt,"Data2VecAudioForSequenceClassification"),aCt.forEach(t),Elr=r(RBe," (Data2VecAudio model)"),RBe.forEach(t),Clr=i(ze),xF=n(ze,"LI",{});var PBe=s(xF);tbe=n(PBe,"STRONG",{});var nCt=s(tbe);wlr=r(nCt,"hubert"),nCt.forEach(t),Alr=r(PBe," \u2014 "),lW=n(PBe,"A",{href:!0});var sCt=s(lW);Llr=r(sCt,"HubertForSequenceClassification"),sCt.forEach(t),ylr=r(PBe," (Hubert model)"),PBe.forEach(t),xlr=i(ze),$F=n(ze,"LI",{});var BBe=s($F);abe=n(BBe,"STRONG",{});var lCt=s(abe);$lr=r(lCt,"sew"),lCt.forEach(t),klr=r(BBe," \u2014 "),iW=n(BBe,"A",{href:!0});var iCt=s(iW);Slr=r(iCt,"SEWForSequenceClassification"),iCt.forEach(t),Rlr=r(BBe," (SEW model)"),BBe.forEach(t),Plr=i(ze),kF=n(ze,"LI",{});var NBe=s(kF);nbe=n(NBe,"STRONG",{});var dCt=s(nbe);Blr=r(dCt,"sew-d"),dCt.forEach(t),Nlr=r(NBe," \u2014 "),dW=n(NBe,"A",{href:!0});var cCt=s(dW);Ilr=r(cCt,"SEWDForSequenceClassification"),cCt.forEach(t),qlr=r(NBe," (SEW-D model)"),NBe.forEach(t),jlr=i(ze),SF=n(ze,"LI",{});var IBe=s(SF);sbe=n(IBe,"STRONG",{});var fCt=s(sbe);Dlr=r(fCt,"unispeech"),fCt.forEach(t),Glr=r(IBe," \u2014 "),cW=n(IBe,"A",{href:!0});var mCt=s(cW);Olr=r(mCt,"UniSpeechForSequenceClassification"),mCt.forEach(t),Vlr=r(IBe," (UniSpeech model)"),IBe.forEach(t),Xlr=i(ze),RF=n(ze,"LI",{});var qBe=s(RF);lbe=n(qBe,"STRONG",{});var gCt=s(lbe);zlr=r(gCt,"unispeech-sat"),gCt.forEach(t),Qlr=r(qBe," \u2014 "),fW=n(qBe,"A",{href:!0});var hCt=s(fW);Wlr=r(hCt,"UniSpeechSatForSequenceClassification"),hCt.forEach(t),Hlr=r(qBe," (UniSpeechSat model)"),qBe.forEach(t),Ulr=i(ze),PF=n(ze,"LI",{});var jBe=s(PF);ibe=n(jBe,"STRONG",{});var pCt=s(ibe);Jlr=r(pCt,"wav2vec2"),pCt.forEach(t),Ylr=r(jBe," \u2014 "),mW=n(jBe,"A",{href:!0});var _Ct=s(mW);Klr=r(_Ct,"Wav2Vec2ForSequenceClassification"),_Ct.forEach(t),Zlr=r(jBe," (Wav2Vec2 model)"),jBe.forEach(t),eir=i(ze),BF=n(ze,"LI",{});var DBe=s(BF);dbe=n(DBe,"STRONG",{});var uCt=s(dbe);oir=r(uCt,"wav2vec2-conformer"),uCt.forEach(t),rir=r(DBe," \u2014 "),gW=n(DBe,"A",{href:!0});var bCt=s(gW);tir=r(bCt,"Wav2Vec2ConformerForSequenceClassification"),bCt.forEach(t),air=r(DBe," (Wav2Vec2-Conformer model)"),DBe.forEach(t),nir=i(ze),NF=n(ze,"LI",{});var GBe=s(NF);cbe=n(GBe,"STRONG",{});var vCt=s(cbe);sir=r(vCt,"wavlm"),vCt.forEach(t),lir=r(GBe," \u2014 "),hW=n(GBe,"A",{href:!0});var FCt=s(hW);iir=r(FCt,"WavLMForSequenceClassification"),FCt.forEach(t),dir=r(GBe," (WavLM model)"),GBe.forEach(t),ze.forEach(t),cir=i(Fa),IF=n(Fa,"P",{});var OBe=s(IF);fir=r(OBe,"The model is set in evaluation mode by default using "),fbe=n(OBe,"CODE",{});var TCt=s(fbe);mir=r(TCt,"model.eval()"),TCt.forEach(t),gir=r(OBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=n(OBe,"CODE",{});var MCt=s(mbe);hir=r(MCt,"model.train()"),MCt.forEach(t),OBe.forEach(t),pir=i(Fa),T(qF.$$.fragment,Fa),Fa.forEach(t),ml.forEach(t),fVe=i(f),yd=n(f,"H2",{class:!0});var uze=s(yd);jF=n(uze,"A",{id:!0,class:!0,href:!0});var ECt=s(jF);gbe=n(ECt,"SPAN",{});var CCt=s(gbe);T(ky.$$.fragment,CCt),CCt.forEach(t),ECt.forEach(t),_ir=i(uze),hbe=n(uze,"SPAN",{});var wCt=s(hbe);uir=r(wCt,"AutoModelForAudioFrameClassification"),wCt.forEach(t),uze.forEach(t),mVe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(Sy.$$.fragment,gl),bir=i(gl),xd=n(gl,"P",{});var pre=s(xd);vir=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),pW=n(pre,"A",{href:!0});var ACt=s(pW);Fir=r(ACt,"from_pretrained()"),ACt.forEach(t),Tir=r(pre," class method or the "),_W=n(pre,"A",{href:!0});var LCt=s(_W);Mir=r(LCt,"from_config()"),LCt.forEach(t),Eir=r(pre,` class
method.`),pre.forEach(t),Cir=i(gl),Ry=n(gl,"P",{});var bze=s(Ry);wir=r(bze,"This class cannot be instantiated directly using "),pbe=n(bze,"CODE",{});var yCt=s(pbe);Air=r(yCt,"__init__()"),yCt.forEach(t),Lir=r(bze," (throws an error)."),bze.forEach(t),yir=i(gl),Mt=n(gl,"DIV",{class:!0});var uA=s(Mt);T(Py.$$.fragment,uA),xir=i(uA),_be=n(uA,"P",{});var xCt=s(_be);$ir=r(xCt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xCt.forEach(t),kir=i(uA),$d=n(uA,"P",{});var _re=s($d);Sir=r(_re,`Note:
Loading a model from its configuration file does `),ube=n(_re,"STRONG",{});var $Ct=s(ube);Rir=r($Ct,"not"),$Ct.forEach(t),Pir=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(_re,"A",{href:!0});var kCt=s(uW);Bir=r(kCt,"from_pretrained()"),kCt.forEach(t),Nir=r(_re," to load the model weights."),_re.forEach(t),Iir=i(uA),T(DF.$$.fragment,uA),uA.forEach(t),qir=i(gl),mo=n(gl,"DIV",{class:!0});var Ta=s(mo);T(By.$$.fragment,Ta),jir=i(Ta),bbe=n(Ta,"P",{});var SCt=s(bbe);Dir=r(SCt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SCt.forEach(t),Gir=i(Ta),Ua=n(Ta,"P",{});var bA=s(Ua);Oir=r(bA,"The model class to instantiate is selected based on the "),vbe=n(bA,"CODE",{});var RCt=s(vbe);Vir=r(RCt,"model_type"),RCt.forEach(t),Xir=r(bA,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(bA,"CODE",{});var PCt=s(Fbe);zir=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),Qir=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(bA,"CODE",{});var BCt=s(Tbe);Wir=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),Hir=r(bA,":"),bA.forEach(t),Uir=i(Ta),et=n(Ta,"UL",{});var hl=s(et);GF=n(hl,"LI",{});var VBe=s(GF);Mbe=n(VBe,"STRONG",{});var NCt=s(Mbe);Jir=r(NCt,"data2vec-audio"),NCt.forEach(t),Yir=r(VBe," \u2014 "),bW=n(VBe,"A",{href:!0});var ICt=s(bW);Kir=r(ICt,"Data2VecAudioForAudioFrameClassification"),ICt.forEach(t),Zir=r(VBe," (Data2VecAudio model)"),VBe.forEach(t),edr=i(hl),OF=n(hl,"LI",{});var XBe=s(OF);Ebe=n(XBe,"STRONG",{});var qCt=s(Ebe);odr=r(qCt,"unispeech-sat"),qCt.forEach(t),rdr=r(XBe," \u2014 "),vW=n(XBe,"A",{href:!0});var jCt=s(vW);tdr=r(jCt,"UniSpeechSatForAudioFrameClassification"),jCt.forEach(t),adr=r(XBe," (UniSpeechSat model)"),XBe.forEach(t),ndr=i(hl),VF=n(hl,"LI",{});var zBe=s(VF);Cbe=n(zBe,"STRONG",{});var DCt=s(Cbe);sdr=r(DCt,"wav2vec2"),DCt.forEach(t),ldr=r(zBe," \u2014 "),FW=n(zBe,"A",{href:!0});var GCt=s(FW);idr=r(GCt,"Wav2Vec2ForAudioFrameClassification"),GCt.forEach(t),ddr=r(zBe," (Wav2Vec2 model)"),zBe.forEach(t),cdr=i(hl),XF=n(hl,"LI",{});var QBe=s(XF);wbe=n(QBe,"STRONG",{});var OCt=s(wbe);fdr=r(OCt,"wav2vec2-conformer"),OCt.forEach(t),mdr=r(QBe," \u2014 "),TW=n(QBe,"A",{href:!0});var VCt=s(TW);gdr=r(VCt,"Wav2Vec2ConformerForAudioFrameClassification"),VCt.forEach(t),hdr=r(QBe," (Wav2Vec2-Conformer model)"),QBe.forEach(t),pdr=i(hl),zF=n(hl,"LI",{});var WBe=s(zF);Abe=n(WBe,"STRONG",{});var XCt=s(Abe);_dr=r(XCt,"wavlm"),XCt.forEach(t),udr=r(WBe," \u2014 "),MW=n(WBe,"A",{href:!0});var zCt=s(MW);bdr=r(zCt,"WavLMForAudioFrameClassification"),zCt.forEach(t),vdr=r(WBe," (WavLM model)"),WBe.forEach(t),hl.forEach(t),Fdr=i(Ta),QF=n(Ta,"P",{});var HBe=s(QF);Tdr=r(HBe,"The model is set in evaluation mode by default using "),Lbe=n(HBe,"CODE",{});var QCt=s(Lbe);Mdr=r(QCt,"model.eval()"),QCt.forEach(t),Edr=r(HBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(HBe,"CODE",{});var WCt=s(ybe);Cdr=r(WCt,"model.train()"),WCt.forEach(t),HBe.forEach(t),wdr=i(Ta),T(WF.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),gVe=i(f),kd=n(f,"H2",{class:!0});var vze=s(kd);HF=n(vze,"A",{id:!0,class:!0,href:!0});var HCt=s(HF);xbe=n(HCt,"SPAN",{});var UCt=s(xbe);T(Ny.$$.fragment,UCt),UCt.forEach(t),HCt.forEach(t),Adr=i(vze),$be=n(vze,"SPAN",{});var JCt=s($be);Ldr=r(JCt,"AutoModelForCTC"),JCt.forEach(t),vze.forEach(t),hVe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(Iy.$$.fragment,pl),ydr=i(pl),Sd=n(pl,"P",{});var ure=s(Sd);xdr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EW=n(ure,"A",{href:!0});var YCt=s(EW);$dr=r(YCt,"from_pretrained()"),YCt.forEach(t),kdr=r(ure," class method or the "),CW=n(ure,"A",{href:!0});var KCt=s(CW);Sdr=r(KCt,"from_config()"),KCt.forEach(t),Rdr=r(ure,` class
method.`),ure.forEach(t),Pdr=i(pl),qy=n(pl,"P",{});var Fze=s(qy);Bdr=r(Fze,"This class cannot be instantiated directly using "),kbe=n(Fze,"CODE",{});var ZCt=s(kbe);Ndr=r(ZCt,"__init__()"),ZCt.forEach(t),Idr=r(Fze," (throws an error)."),Fze.forEach(t),qdr=i(pl),Et=n(pl,"DIV",{class:!0});var vA=s(Et);T(jy.$$.fragment,vA),jdr=i(vA),Sbe=n(vA,"P",{});var e3t=s(Sbe);Ddr=r(e3t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),e3t.forEach(t),Gdr=i(vA),Rd=n(vA,"P",{});var bre=s(Rd);Odr=r(bre,`Note:
Loading a model from its configuration file does `),Rbe=n(bre,"STRONG",{});var o3t=s(Rbe);Vdr=r(o3t,"not"),o3t.forEach(t),Xdr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(bre,"A",{href:!0});var r3t=s(wW);zdr=r(r3t,"from_pretrained()"),r3t.forEach(t),Qdr=r(bre," to load the model weights."),bre.forEach(t),Wdr=i(vA),T(UF.$$.fragment,vA),vA.forEach(t),Hdr=i(pl),go=n(pl,"DIV",{class:!0});var Ma=s(go);T(Dy.$$.fragment,Ma),Udr=i(Ma),Pbe=n(Ma,"P",{});var t3t=s(Pbe);Jdr=r(t3t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),t3t.forEach(t),Ydr=i(Ma),Ja=n(Ma,"P",{});var FA=s(Ja);Kdr=r(FA,"The model class to instantiate is selected based on the "),Bbe=n(FA,"CODE",{});var a3t=s(Bbe);Zdr=r(a3t,"model_type"),a3t.forEach(t),ecr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(FA,"CODE",{});var n3t=s(Nbe);ocr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),rcr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(FA,"CODE",{});var s3t=s(Ibe);tcr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),acr=r(FA,":"),FA.forEach(t),ncr=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);JF=n(Be,"LI",{});var UBe=s(JF);qbe=n(UBe,"STRONG",{});var l3t=s(qbe);scr=r(l3t,"data2vec-audio"),l3t.forEach(t),lcr=r(UBe," \u2014 "),AW=n(UBe,"A",{href:!0});var i3t=s(AW);icr=r(i3t,"Data2VecAudioForCTC"),i3t.forEach(t),dcr=r(UBe," (Data2VecAudio model)"),UBe.forEach(t),ccr=i(Be),YF=n(Be,"LI",{});var JBe=s(YF);jbe=n(JBe,"STRONG",{});var d3t=s(jbe);fcr=r(d3t,"hubert"),d3t.forEach(t),mcr=r(JBe," \u2014 "),LW=n(JBe,"A",{href:!0});var c3t=s(LW);gcr=r(c3t,"HubertForCTC"),c3t.forEach(t),hcr=r(JBe," (Hubert model)"),JBe.forEach(t),pcr=i(Be),KF=n(Be,"LI",{});var YBe=s(KF);Dbe=n(YBe,"STRONG",{});var f3t=s(Dbe);_cr=r(f3t,"mctct"),f3t.forEach(t),ucr=r(YBe," \u2014 "),yW=n(YBe,"A",{href:!0});var m3t=s(yW);bcr=r(m3t,"MCTCTForCTC"),m3t.forEach(t),vcr=r(YBe," (M-CTC-T model)"),YBe.forEach(t),Fcr=i(Be),ZF=n(Be,"LI",{});var KBe=s(ZF);Gbe=n(KBe,"STRONG",{});var g3t=s(Gbe);Tcr=r(g3t,"sew"),g3t.forEach(t),Mcr=r(KBe," \u2014 "),xW=n(KBe,"A",{href:!0});var h3t=s(xW);Ecr=r(h3t,"SEWForCTC"),h3t.forEach(t),Ccr=r(KBe," (SEW model)"),KBe.forEach(t),wcr=i(Be),eT=n(Be,"LI",{});var ZBe=s(eT);Obe=n(ZBe,"STRONG",{});var p3t=s(Obe);Acr=r(p3t,"sew-d"),p3t.forEach(t),Lcr=r(ZBe," \u2014 "),$W=n(ZBe,"A",{href:!0});var _3t=s($W);ycr=r(_3t,"SEWDForCTC"),_3t.forEach(t),xcr=r(ZBe," (SEW-D model)"),ZBe.forEach(t),$cr=i(Be),oT=n(Be,"LI",{});var eNe=s(oT);Vbe=n(eNe,"STRONG",{});var u3t=s(Vbe);kcr=r(u3t,"unispeech"),u3t.forEach(t),Scr=r(eNe," \u2014 "),kW=n(eNe,"A",{href:!0});var b3t=s(kW);Rcr=r(b3t,"UniSpeechForCTC"),b3t.forEach(t),Pcr=r(eNe," (UniSpeech model)"),eNe.forEach(t),Bcr=i(Be),rT=n(Be,"LI",{});var oNe=s(rT);Xbe=n(oNe,"STRONG",{});var v3t=s(Xbe);Ncr=r(v3t,"unispeech-sat"),v3t.forEach(t),Icr=r(oNe," \u2014 "),SW=n(oNe,"A",{href:!0});var F3t=s(SW);qcr=r(F3t,"UniSpeechSatForCTC"),F3t.forEach(t),jcr=r(oNe," (UniSpeechSat model)"),oNe.forEach(t),Dcr=i(Be),tT=n(Be,"LI",{});var rNe=s(tT);zbe=n(rNe,"STRONG",{});var T3t=s(zbe);Gcr=r(T3t,"wav2vec2"),T3t.forEach(t),Ocr=r(rNe," \u2014 "),RW=n(rNe,"A",{href:!0});var M3t=s(RW);Vcr=r(M3t,"Wav2Vec2ForCTC"),M3t.forEach(t),Xcr=r(rNe," (Wav2Vec2 model)"),rNe.forEach(t),zcr=i(Be),aT=n(Be,"LI",{});var tNe=s(aT);Qbe=n(tNe,"STRONG",{});var E3t=s(Qbe);Qcr=r(E3t,"wav2vec2-conformer"),E3t.forEach(t),Wcr=r(tNe," \u2014 "),PW=n(tNe,"A",{href:!0});var C3t=s(PW);Hcr=r(C3t,"Wav2Vec2ConformerForCTC"),C3t.forEach(t),Ucr=r(tNe," (Wav2Vec2-Conformer model)"),tNe.forEach(t),Jcr=i(Be),nT=n(Be,"LI",{});var aNe=s(nT);Wbe=n(aNe,"STRONG",{});var w3t=s(Wbe);Ycr=r(w3t,"wavlm"),w3t.forEach(t),Kcr=r(aNe," \u2014 "),BW=n(aNe,"A",{href:!0});var A3t=s(BW);Zcr=r(A3t,"WavLMForCTC"),A3t.forEach(t),efr=r(aNe," (WavLM model)"),aNe.forEach(t),Be.forEach(t),ofr=i(Ma),sT=n(Ma,"P",{});var nNe=s(sT);rfr=r(nNe,"The model is set in evaluation mode by default using "),Hbe=n(nNe,"CODE",{});var L3t=s(Hbe);tfr=r(L3t,"model.eval()"),L3t.forEach(t),afr=r(nNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(nNe,"CODE",{});var y3t=s(Ube);nfr=r(y3t,"model.train()"),y3t.forEach(t),nNe.forEach(t),sfr=i(Ma),T(lT.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),pVe=i(f),Pd=n(f,"H2",{class:!0});var Tze=s(Pd);iT=n(Tze,"A",{id:!0,class:!0,href:!0});var x3t=s(iT);Jbe=n(x3t,"SPAN",{});var $3t=s(Jbe);T(Gy.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),lfr=i(Tze),Ybe=n(Tze,"SPAN",{});var k3t=s(Ybe);ifr=r(k3t,"AutoModelForSpeechSeq2Seq"),k3t.forEach(t),Tze.forEach(t),_Ve=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(Oy.$$.fragment,_l),dfr=i(_l),Bd=n(_l,"P",{});var vre=s(Bd);cfr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NW=n(vre,"A",{href:!0});var S3t=s(NW);ffr=r(S3t,"from_pretrained()"),S3t.forEach(t),mfr=r(vre," class method or the "),IW=n(vre,"A",{href:!0});var R3t=s(IW);gfr=r(R3t,"from_config()"),R3t.forEach(t),hfr=r(vre,` class
method.`),vre.forEach(t),pfr=i(_l),Vy=n(_l,"P",{});var Mze=s(Vy);_fr=r(Mze,"This class cannot be instantiated directly using "),Kbe=n(Mze,"CODE",{});var P3t=s(Kbe);ufr=r(P3t,"__init__()"),P3t.forEach(t),bfr=r(Mze," (throws an error)."),Mze.forEach(t),vfr=i(_l),Ct=n(_l,"DIV",{class:!0});var TA=s(Ct);T(Xy.$$.fragment,TA),Ffr=i(TA),Zbe=n(TA,"P",{});var B3t=s(Zbe);Tfr=r(B3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B3t.forEach(t),Mfr=i(TA),Nd=n(TA,"P",{});var Fre=s(Nd);Efr=r(Fre,`Note:
Loading a model from its configuration file does `),e4e=n(Fre,"STRONG",{});var N3t=s(e4e);Cfr=r(N3t,"not"),N3t.forEach(t),wfr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(Fre,"A",{href:!0});var I3t=s(qW);Afr=r(I3t,"from_pretrained()"),I3t.forEach(t),Lfr=r(Fre," to load the model weights."),Fre.forEach(t),yfr=i(TA),T(dT.$$.fragment,TA),TA.forEach(t),xfr=i(_l),ho=n(_l,"DIV",{class:!0});var Ea=s(ho);T(zy.$$.fragment,Ea),$fr=i(Ea),o4e=n(Ea,"P",{});var q3t=s(o4e);kfr=r(q3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),q3t.forEach(t),Sfr=i(Ea),Ya=n(Ea,"P",{});var MA=s(Ya);Rfr=r(MA,"The model class to instantiate is selected based on the "),r4e=n(MA,"CODE",{});var j3t=s(r4e);Pfr=r(j3t,"model_type"),j3t.forEach(t),Bfr=r(MA,` property of the config object (either
passed as an argument or loaded from `),t4e=n(MA,"CODE",{});var D3t=s(t4e);Nfr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),Ifr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(MA,"CODE",{});var G3t=s(a4e);qfr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),jfr=r(MA,":"),MA.forEach(t),Dfr=i(Ea),Qy=n(Ea,"UL",{});var Eze=s(Qy);cT=n(Eze,"LI",{});var sNe=s(cT);n4e=n(sNe,"STRONG",{});var O3t=s(n4e);Gfr=r(O3t,"speech-encoder-decoder"),O3t.forEach(t),Ofr=r(sNe," \u2014 "),jW=n(sNe,"A",{href:!0});var V3t=s(jW);Vfr=r(V3t,"SpeechEncoderDecoderModel"),V3t.forEach(t),Xfr=r(sNe," (Speech Encoder decoder model)"),sNe.forEach(t),zfr=i(Eze),fT=n(Eze,"LI",{});var lNe=s(fT);s4e=n(lNe,"STRONG",{});var X3t=s(s4e);Qfr=r(X3t,"speech_to_text"),X3t.forEach(t),Wfr=r(lNe," \u2014 "),DW=n(lNe,"A",{href:!0});var z3t=s(DW);Hfr=r(z3t,"Speech2TextForConditionalGeneration"),z3t.forEach(t),Ufr=r(lNe," (Speech2Text model)"),lNe.forEach(t),Eze.forEach(t),Jfr=i(Ea),mT=n(Ea,"P",{});var iNe=s(mT);Yfr=r(iNe,"The model is set in evaluation mode by default using "),l4e=n(iNe,"CODE",{});var Q3t=s(l4e);Kfr=r(Q3t,"model.eval()"),Q3t.forEach(t),Zfr=r(iNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=n(iNe,"CODE",{});var W3t=s(i4e);emr=r(W3t,"model.train()"),W3t.forEach(t),iNe.forEach(t),omr=i(Ea),T(gT.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),uVe=i(f),Id=n(f,"H2",{class:!0});var Cze=s(Id);hT=n(Cze,"A",{id:!0,class:!0,href:!0});var H3t=s(hT);d4e=n(H3t,"SPAN",{});var U3t=s(d4e);T(Wy.$$.fragment,U3t),U3t.forEach(t),H3t.forEach(t),rmr=i(Cze),c4e=n(Cze,"SPAN",{});var J3t=s(c4e);tmr=r(J3t,"AutoModelForAudioXVector"),J3t.forEach(t),Cze.forEach(t),bVe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(Hy.$$.fragment,ul),amr=i(ul),qd=n(ul,"P",{});var Tre=s(qd);nmr=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GW=n(Tre,"A",{href:!0});var Y3t=s(GW);smr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),lmr=r(Tre," class method or the "),OW=n(Tre,"A",{href:!0});var K3t=s(OW);imr=r(K3t,"from_config()"),K3t.forEach(t),dmr=r(Tre,` class
method.`),Tre.forEach(t),cmr=i(ul),Uy=n(ul,"P",{});var wze=s(Uy);fmr=r(wze,"This class cannot be instantiated directly using "),f4e=n(wze,"CODE",{});var Z3t=s(f4e);mmr=r(Z3t,"__init__()"),Z3t.forEach(t),gmr=r(wze," (throws an error)."),wze.forEach(t),hmr=i(ul),wt=n(ul,"DIV",{class:!0});var EA=s(wt);T(Jy.$$.fragment,EA),pmr=i(EA),m4e=n(EA,"P",{});var e0t=s(m4e);_mr=r(e0t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),e0t.forEach(t),umr=i(EA),jd=n(EA,"P",{});var Mre=s(jd);bmr=r(Mre,`Note:
Loading a model from its configuration file does `),g4e=n(Mre,"STRONG",{});var o0t=s(g4e);vmr=r(o0t,"not"),o0t.forEach(t),Fmr=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Mre,"A",{href:!0});var r0t=s(VW);Tmr=r(r0t,"from_pretrained()"),r0t.forEach(t),Mmr=r(Mre," to load the model weights."),Mre.forEach(t),Emr=i(EA),T(pT.$$.fragment,EA),EA.forEach(t),Cmr=i(ul),po=n(ul,"DIV",{class:!0});var Ca=s(po);T(Yy.$$.fragment,Ca),wmr=i(Ca),h4e=n(Ca,"P",{});var t0t=s(h4e);Amr=r(t0t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),t0t.forEach(t),Lmr=i(Ca),Ka=n(Ca,"P",{});var CA=s(Ka);ymr=r(CA,"The model class to instantiate is selected based on the "),p4e=n(CA,"CODE",{});var a0t=s(p4e);xmr=r(a0t,"model_type"),a0t.forEach(t),$mr=r(CA,` property of the config object (either
passed as an argument or loaded from `),_4e=n(CA,"CODE",{});var n0t=s(_4e);kmr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),Smr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=n(CA,"CODE",{});var s0t=s(u4e);Rmr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),Pmr=r(CA,":"),CA.forEach(t),Bmr=i(Ca),ot=n(Ca,"UL",{});var bl=s(ot);_T=n(bl,"LI",{});var dNe=s(_T);b4e=n(dNe,"STRONG",{});var l0t=s(b4e);Nmr=r(l0t,"data2vec-audio"),l0t.forEach(t),Imr=r(dNe," \u2014 "),XW=n(dNe,"A",{href:!0});var i0t=s(XW);qmr=r(i0t,"Data2VecAudioForXVector"),i0t.forEach(t),jmr=r(dNe," (Data2VecAudio model)"),dNe.forEach(t),Dmr=i(bl),uT=n(bl,"LI",{});var cNe=s(uT);v4e=n(cNe,"STRONG",{});var d0t=s(v4e);Gmr=r(d0t,"unispeech-sat"),d0t.forEach(t),Omr=r(cNe," \u2014 "),zW=n(cNe,"A",{href:!0});var c0t=s(zW);Vmr=r(c0t,"UniSpeechSatForXVector"),c0t.forEach(t),Xmr=r(cNe," (UniSpeechSat model)"),cNe.forEach(t),zmr=i(bl),bT=n(bl,"LI",{});var fNe=s(bT);F4e=n(fNe,"STRONG",{});var f0t=s(F4e);Qmr=r(f0t,"wav2vec2"),f0t.forEach(t),Wmr=r(fNe," \u2014 "),QW=n(fNe,"A",{href:!0});var m0t=s(QW);Hmr=r(m0t,"Wav2Vec2ForXVector"),m0t.forEach(t),Umr=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),Jmr=i(bl),vT=n(bl,"LI",{});var mNe=s(vT);T4e=n(mNe,"STRONG",{});var g0t=s(T4e);Ymr=r(g0t,"wav2vec2-conformer"),g0t.forEach(t),Kmr=r(mNe," \u2014 "),WW=n(mNe,"A",{href:!0});var h0t=s(WW);Zmr=r(h0t,"Wav2Vec2ConformerForXVector"),h0t.forEach(t),egr=r(mNe," (Wav2Vec2-Conformer model)"),mNe.forEach(t),ogr=i(bl),FT=n(bl,"LI",{});var gNe=s(FT);M4e=n(gNe,"STRONG",{});var p0t=s(M4e);rgr=r(p0t,"wavlm"),p0t.forEach(t),tgr=r(gNe," \u2014 "),HW=n(gNe,"A",{href:!0});var _0t=s(HW);agr=r(_0t,"WavLMForXVector"),_0t.forEach(t),ngr=r(gNe," (WavLM model)"),gNe.forEach(t),bl.forEach(t),sgr=i(Ca),TT=n(Ca,"P",{});var hNe=s(TT);lgr=r(hNe,"The model is set in evaluation mode by default using "),E4e=n(hNe,"CODE",{});var u0t=s(E4e);igr=r(u0t,"model.eval()"),u0t.forEach(t),dgr=r(hNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C4e=n(hNe,"CODE",{});var b0t=s(C4e);cgr=r(b0t,"model.train()"),b0t.forEach(t),hNe.forEach(t),fgr=i(Ca),T(MT.$$.fragment,Ca),Ca.forEach(t),ul.forEach(t),vVe=i(f),Dd=n(f,"H2",{class:!0});var Aze=s(Dd);ET=n(Aze,"A",{id:!0,class:!0,href:!0});var v0t=s(ET);w4e=n(v0t,"SPAN",{});var F0t=s(w4e);T(Ky.$$.fragment,F0t),F0t.forEach(t),v0t.forEach(t),mgr=i(Aze),A4e=n(Aze,"SPAN",{});var T0t=s(A4e);ggr=r(T0t,"AutoModelForMaskedImageModeling"),T0t.forEach(t),Aze.forEach(t),FVe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Zy.$$.fragment,vl),hgr=i(vl),Gd=n(vl,"P",{});var Ere=s(Gd);pgr=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),UW=n(Ere,"A",{href:!0});var M0t=s(UW);_gr=r(M0t,"from_pretrained()"),M0t.forEach(t),ugr=r(Ere," class method or the "),JW=n(Ere,"A",{href:!0});var E0t=s(JW);bgr=r(E0t,"from_config()"),E0t.forEach(t),vgr=r(Ere,` class
method.`),Ere.forEach(t),Fgr=i(vl),e9=n(vl,"P",{});var Lze=s(e9);Tgr=r(Lze,"This class cannot be instantiated directly using "),L4e=n(Lze,"CODE",{});var C0t=s(L4e);Mgr=r(C0t,"__init__()"),C0t.forEach(t),Egr=r(Lze," (throws an error)."),Lze.forEach(t),Cgr=i(vl),At=n(vl,"DIV",{class:!0});var wA=s(At);T(o9.$$.fragment,wA),wgr=i(wA),y4e=n(wA,"P",{});var w0t=s(y4e);Agr=r(w0t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),w0t.forEach(t),Lgr=i(wA),Od=n(wA,"P",{});var Cre=s(Od);ygr=r(Cre,`Note:
Loading a model from its configuration file does `),x4e=n(Cre,"STRONG",{});var A0t=s(x4e);xgr=r(A0t,"not"),A0t.forEach(t),$gr=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(Cre,"A",{href:!0});var L0t=s(YW);kgr=r(L0t,"from_pretrained()"),L0t.forEach(t),Sgr=r(Cre," to load the model weights."),Cre.forEach(t),Rgr=i(wA),T(CT.$$.fragment,wA),wA.forEach(t),Pgr=i(vl),_o=n(vl,"DIV",{class:!0});var wa=s(_o);T(r9.$$.fragment,wa),Bgr=i(wa),$4e=n(wa,"P",{});var y0t=s($4e);Ngr=r(y0t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),y0t.forEach(t),Igr=i(wa),Za=n(wa,"P",{});var AA=s(Za);qgr=r(AA,"The model class to instantiate is selected based on the "),k4e=n(AA,"CODE",{});var x0t=s(k4e);jgr=r(x0t,"model_type"),x0t.forEach(t),Dgr=r(AA,` property of the config object (either
passed as an argument or loaded from `),S4e=n(AA,"CODE",{});var $0t=s(S4e);Ggr=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),Ogr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(AA,"CODE",{});var k0t=s(R4e);Vgr=r(k0t,"pretrained_model_name_or_path"),k0t.forEach(t),Xgr=r(AA,":"),AA.forEach(t),zgr=i(wa),Vd=n(wa,"UL",{});var wre=s(Vd);wT=n(wre,"LI",{});var pNe=s(wT);P4e=n(pNe,"STRONG",{});var S0t=s(P4e);Qgr=r(S0t,"deit"),S0t.forEach(t),Wgr=r(pNe," \u2014 "),KW=n(pNe,"A",{href:!0});var R0t=s(KW);Hgr=r(R0t,"DeiTForMaskedImageModeling"),R0t.forEach(t),Ugr=r(pNe," (DeiT model)"),pNe.forEach(t),Jgr=i(wre),AT=n(wre,"LI",{});var _Ne=s(AT);B4e=n(_Ne,"STRONG",{});var P0t=s(B4e);Ygr=r(P0t,"swin"),P0t.forEach(t),Kgr=r(_Ne," \u2014 "),ZW=n(_Ne,"A",{href:!0});var B0t=s(ZW);Zgr=r(B0t,"SwinForMaskedImageModeling"),B0t.forEach(t),ehr=r(_Ne," (Swin Transformer model)"),_Ne.forEach(t),ohr=i(wre),LT=n(wre,"LI",{});var uNe=s(LT);N4e=n(uNe,"STRONG",{});var N0t=s(N4e);rhr=r(N0t,"vit"),N0t.forEach(t),thr=r(uNe," \u2014 "),eH=n(uNe,"A",{href:!0});var I0t=s(eH);ahr=r(I0t,"ViTForMaskedImageModeling"),I0t.forEach(t),nhr=r(uNe," (ViT model)"),uNe.forEach(t),wre.forEach(t),shr=i(wa),yT=n(wa,"P",{});var bNe=s(yT);lhr=r(bNe,"The model is set in evaluation mode by default using "),I4e=n(bNe,"CODE",{});var q0t=s(I4e);ihr=r(q0t,"model.eval()"),q0t.forEach(t),dhr=r(bNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=n(bNe,"CODE",{});var j0t=s(q4e);chr=r(j0t,"model.train()"),j0t.forEach(t),bNe.forEach(t),fhr=i(wa),T(xT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),TVe=i(f),Xd=n(f,"H2",{class:!0});var yze=s(Xd);$T=n(yze,"A",{id:!0,class:!0,href:!0});var D0t=s($T);j4e=n(D0t,"SPAN",{});var G0t=s(j4e);T(t9.$$.fragment,G0t),G0t.forEach(t),D0t.forEach(t),mhr=i(yze),D4e=n(yze,"SPAN",{});var O0t=s(D4e);ghr=r(O0t,"AutoModelForObjectDetection"),O0t.forEach(t),yze.forEach(t),MVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(a9.$$.fragment,Fl),hhr=i(Fl),zd=n(Fl,"P",{});var Are=s(zd);phr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),oH=n(Are,"A",{href:!0});var V0t=s(oH);_hr=r(V0t,"from_pretrained()"),V0t.forEach(t),uhr=r(Are," class method or the "),rH=n(Are,"A",{href:!0});var X0t=s(rH);bhr=r(X0t,"from_config()"),X0t.forEach(t),vhr=r(Are,` class
method.`),Are.forEach(t),Fhr=i(Fl),n9=n(Fl,"P",{});var xze=s(n9);Thr=r(xze,"This class cannot be instantiated directly using "),G4e=n(xze,"CODE",{});var z0t=s(G4e);Mhr=r(z0t,"__init__()"),z0t.forEach(t),Ehr=r(xze," (throws an error)."),xze.forEach(t),Chr=i(Fl),Lt=n(Fl,"DIV",{class:!0});var LA=s(Lt);T(s9.$$.fragment,LA),whr=i(LA),O4e=n(LA,"P",{});var Q0t=s(O4e);Ahr=r(Q0t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Q0t.forEach(t),Lhr=i(LA),Qd=n(LA,"P",{});var Lre=s(Qd);yhr=r(Lre,`Note:
Loading a model from its configuration file does `),V4e=n(Lre,"STRONG",{});var W0t=s(V4e);xhr=r(W0t,"not"),W0t.forEach(t),$hr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Lre,"A",{href:!0});var H0t=s(tH);khr=r(H0t,"from_pretrained()"),H0t.forEach(t),Shr=r(Lre," to load the model weights."),Lre.forEach(t),Rhr=i(LA),T(kT.$$.fragment,LA),LA.forEach(t),Phr=i(Fl),uo=n(Fl,"DIV",{class:!0});var Aa=s(uo);T(l9.$$.fragment,Aa),Bhr=i(Aa),X4e=n(Aa,"P",{});var U0t=s(X4e);Nhr=r(U0t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),U0t.forEach(t),Ihr=i(Aa),en=n(Aa,"P",{});var yA=s(en);qhr=r(yA,"The model class to instantiate is selected based on the "),z4e=n(yA,"CODE",{});var J0t=s(z4e);jhr=r(J0t,"model_type"),J0t.forEach(t),Dhr=r(yA,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(yA,"CODE",{});var Y0t=s(Q4e);Ghr=r(Y0t,"pretrained_model_name_or_path"),Y0t.forEach(t),Ohr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(yA,"CODE",{});var K0t=s(W4e);Vhr=r(K0t,"pretrained_model_name_or_path"),K0t.forEach(t),Xhr=r(yA,":"),yA.forEach(t),zhr=i(Aa),i9=n(Aa,"UL",{});var $ze=s(i9);ST=n($ze,"LI",{});var vNe=s(ST);H4e=n(vNe,"STRONG",{});var Z0t=s(H4e);Qhr=r(Z0t,"detr"),Z0t.forEach(t),Whr=r(vNe," \u2014 "),aH=n(vNe,"A",{href:!0});var ewt=s(aH);Hhr=r(ewt,"DetrForObjectDetection"),ewt.forEach(t),Uhr=r(vNe," (DETR model)"),vNe.forEach(t),Jhr=i($ze),RT=n($ze,"LI",{});var FNe=s(RT);U4e=n(FNe,"STRONG",{});var owt=s(U4e);Yhr=r(owt,"yolos"),owt.forEach(t),Khr=r(FNe," \u2014 "),nH=n(FNe,"A",{href:!0});var rwt=s(nH);Zhr=r(rwt,"YolosForObjectDetection"),rwt.forEach(t),epr=r(FNe," (YOLOS model)"),FNe.forEach(t),$ze.forEach(t),opr=i(Aa),PT=n(Aa,"P",{});var TNe=s(PT);rpr=r(TNe,"The model is set in evaluation mode by default using "),J4e=n(TNe,"CODE",{});var twt=s(J4e);tpr=r(twt,"model.eval()"),twt.forEach(t),apr=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=n(TNe,"CODE",{});var awt=s(Y4e);npr=r(awt,"model.train()"),awt.forEach(t),TNe.forEach(t),spr=i(Aa),T(BT.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),EVe=i(f),Wd=n(f,"H2",{class:!0});var kze=s(Wd);NT=n(kze,"A",{id:!0,class:!0,href:!0});var nwt=s(NT);K4e=n(nwt,"SPAN",{});var swt=s(K4e);T(d9.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),lpr=i(kze),Z4e=n(kze,"SPAN",{});var lwt=s(Z4e);ipr=r(lwt,"AutoModelForImageSegmentation"),lwt.forEach(t),kze.forEach(t),CVe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(c9.$$.fragment,Tl),dpr=i(Tl),Hd=n(Tl,"P",{});var yre=s(Hd);cpr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sH=n(yre,"A",{href:!0});var iwt=s(sH);fpr=r(iwt,"from_pretrained()"),iwt.forEach(t),mpr=r(yre," class method or the "),lH=n(yre,"A",{href:!0});var dwt=s(lH);gpr=r(dwt,"from_config()"),dwt.forEach(t),hpr=r(yre,` class
method.`),yre.forEach(t),ppr=i(Tl),f9=n(Tl,"P",{});var Sze=s(f9);_pr=r(Sze,"This class cannot be instantiated directly using "),e5e=n(Sze,"CODE",{});var cwt=s(e5e);upr=r(cwt,"__init__()"),cwt.forEach(t),bpr=r(Sze," (throws an error)."),Sze.forEach(t),vpr=i(Tl),yt=n(Tl,"DIV",{class:!0});var xA=s(yt);T(m9.$$.fragment,xA),Fpr=i(xA),o5e=n(xA,"P",{});var fwt=s(o5e);Tpr=r(fwt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fwt.forEach(t),Mpr=i(xA),Ud=n(xA,"P",{});var xre=s(Ud);Epr=r(xre,`Note:
Loading a model from its configuration file does `),r5e=n(xre,"STRONG",{});var mwt=s(r5e);Cpr=r(mwt,"not"),mwt.forEach(t),wpr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(xre,"A",{href:!0});var gwt=s(iH);Apr=r(gwt,"from_pretrained()"),gwt.forEach(t),Lpr=r(xre," to load the model weights."),xre.forEach(t),ypr=i(xA),T(IT.$$.fragment,xA),xA.forEach(t),xpr=i(Tl),bo=n(Tl,"DIV",{class:!0});var La=s(bo);T(g9.$$.fragment,La),$pr=i(La),t5e=n(La,"P",{});var hwt=s(t5e);kpr=r(hwt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hwt.forEach(t),Spr=i(La),on=n(La,"P",{});var $A=s(on);Rpr=r($A,"The model class to instantiate is selected based on the "),a5e=n($A,"CODE",{});var pwt=s(a5e);Ppr=r(pwt,"model_type"),pwt.forEach(t),Bpr=r($A,` property of the config object (either
passed as an argument or loaded from `),n5e=n($A,"CODE",{});var _wt=s(n5e);Npr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),Ipr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n($A,"CODE",{});var uwt=s(s5e);qpr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),jpr=r($A,":"),$A.forEach(t),Dpr=i(La),l5e=n(La,"UL",{});var bwt=s(l5e);qT=n(bwt,"LI",{});var MNe=s(qT);i5e=n(MNe,"STRONG",{});var vwt=s(i5e);Gpr=r(vwt,"detr"),vwt.forEach(t),Opr=r(MNe," \u2014 "),dH=n(MNe,"A",{href:!0});var Fwt=s(dH);Vpr=r(Fwt,"DetrForSegmentation"),Fwt.forEach(t),Xpr=r(MNe," (DETR model)"),MNe.forEach(t),bwt.forEach(t),zpr=i(La),jT=n(La,"P",{});var ENe=s(jT);Qpr=r(ENe,"The model is set in evaluation mode by default using "),d5e=n(ENe,"CODE",{});var Twt=s(d5e);Wpr=r(Twt,"model.eval()"),Twt.forEach(t),Hpr=r(ENe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c5e=n(ENe,"CODE",{});var Mwt=s(c5e);Upr=r(Mwt,"model.train()"),Mwt.forEach(t),ENe.forEach(t),Jpr=i(La),T(DT.$$.fragment,La),La.forEach(t),Tl.forEach(t),wVe=i(f),Jd=n(f,"H2",{class:!0});var Rze=s(Jd);GT=n(Rze,"A",{id:!0,class:!0,href:!0});var Ewt=s(GT);f5e=n(Ewt,"SPAN",{});var Cwt=s(f5e);T(h9.$$.fragment,Cwt),Cwt.forEach(t),Ewt.forEach(t),Ypr=i(Rze),m5e=n(Rze,"SPAN",{});var wwt=s(m5e);Kpr=r(wwt,"AutoModelForSemanticSegmentation"),wwt.forEach(t),Rze.forEach(t),AVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(p9.$$.fragment,Ml),Zpr=i(Ml),Yd=n(Ml,"P",{});var $re=s(Yd);e_r=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cH=n($re,"A",{href:!0});var Awt=s(cH);o_r=r(Awt,"from_pretrained()"),Awt.forEach(t),r_r=r($re," class method or the "),fH=n($re,"A",{href:!0});var Lwt=s(fH);t_r=r(Lwt,"from_config()"),Lwt.forEach(t),a_r=r($re,` class
method.`),$re.forEach(t),n_r=i(Ml),_9=n(Ml,"P",{});var Pze=s(_9);s_r=r(Pze,"This class cannot be instantiated directly using "),g5e=n(Pze,"CODE",{});var ywt=s(g5e);l_r=r(ywt,"__init__()"),ywt.forEach(t),i_r=r(Pze," (throws an error)."),Pze.forEach(t),d_r=i(Ml),xt=n(Ml,"DIV",{class:!0});var kA=s(xt);T(u9.$$.fragment,kA),c_r=i(kA),h5e=n(kA,"P",{});var xwt=s(h5e);f_r=r(xwt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xwt.forEach(t),m_r=i(kA),Kd=n(kA,"P",{});var kre=s(Kd);g_r=r(kre,`Note:
Loading a model from its configuration file does `),p5e=n(kre,"STRONG",{});var $wt=s(p5e);h_r=r($wt,"not"),$wt.forEach(t),p_r=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(kre,"A",{href:!0});var kwt=s(mH);__r=r(kwt,"from_pretrained()"),kwt.forEach(t),u_r=r(kre," to load the model weights."),kre.forEach(t),b_r=i(kA),T(OT.$$.fragment,kA),kA.forEach(t),v_r=i(Ml),vo=n(Ml,"DIV",{class:!0});var ya=s(vo);T(b9.$$.fragment,ya),F_r=i(ya),_5e=n(ya,"P",{});var Swt=s(_5e);T_r=r(Swt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Swt.forEach(t),M_r=i(ya),rn=n(ya,"P",{});var SA=s(rn);E_r=r(SA,"The model class to instantiate is selected based on the "),u5e=n(SA,"CODE",{});var Rwt=s(u5e);C_r=r(Rwt,"model_type"),Rwt.forEach(t),w_r=r(SA,` property of the config object (either
passed as an argument or loaded from `),b5e=n(SA,"CODE",{});var Pwt=s(b5e);A_r=r(Pwt,"pretrained_model_name_or_path"),Pwt.forEach(t),L_r=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(SA,"CODE",{});var Bwt=s(v5e);y_r=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),x_r=r(SA,":"),SA.forEach(t),$_r=i(ya),rt=n(ya,"UL",{});var El=s(rt);VT=n(El,"LI",{});var CNe=s(VT);F5e=n(CNe,"STRONG",{});var Nwt=s(F5e);k_r=r(Nwt,"beit"),Nwt.forEach(t),S_r=r(CNe," \u2014 "),gH=n(CNe,"A",{href:!0});var Iwt=s(gH);R_r=r(Iwt,"BeitForSemanticSegmentation"),Iwt.forEach(t),P_r=r(CNe," (BEiT model)"),CNe.forEach(t),B_r=i(El),XT=n(El,"LI",{});var wNe=s(XT);T5e=n(wNe,"STRONG",{});var qwt=s(T5e);N_r=r(qwt,"data2vec-vision"),qwt.forEach(t),I_r=r(wNe," \u2014 "),hH=n(wNe,"A",{href:!0});var jwt=s(hH);q_r=r(jwt,"Data2VecVisionForSemanticSegmentation"),jwt.forEach(t),j_r=r(wNe," (Data2VecVision model)"),wNe.forEach(t),D_r=i(El),zT=n(El,"LI",{});var ANe=s(zT);M5e=n(ANe,"STRONG",{});var Dwt=s(M5e);G_r=r(Dwt,"dpt"),Dwt.forEach(t),O_r=r(ANe," \u2014 "),pH=n(ANe,"A",{href:!0});var Gwt=s(pH);V_r=r(Gwt,"DPTForSemanticSegmentation"),Gwt.forEach(t),X_r=r(ANe," (DPT model)"),ANe.forEach(t),z_r=i(El),QT=n(El,"LI",{});var LNe=s(QT);E5e=n(LNe,"STRONG",{});var Owt=s(E5e);Q_r=r(Owt,"mobilenet_v2"),Owt.forEach(t),W_r=r(LNe," \u2014 "),_H=n(LNe,"A",{href:!0});var Vwt=s(_H);H_r=r(Vwt,"MobileNetV2ForSemanticSegmentation"),Vwt.forEach(t),U_r=r(LNe," (MobileNetV2 model)"),LNe.forEach(t),J_r=i(El),WT=n(El,"LI",{});var yNe=s(WT);C5e=n(yNe,"STRONG",{});var Xwt=s(C5e);Y_r=r(Xwt,"segformer"),Xwt.forEach(t),K_r=r(yNe," \u2014 "),uH=n(yNe,"A",{href:!0});var zwt=s(uH);Z_r=r(zwt,"SegformerForSemanticSegmentation"),zwt.forEach(t),eur=r(yNe," (SegFormer model)"),yNe.forEach(t),El.forEach(t),our=i(ya),HT=n(ya,"P",{});var xNe=s(HT);rur=r(xNe,"The model is set in evaluation mode by default using "),w5e=n(xNe,"CODE",{});var Qwt=s(w5e);tur=r(Qwt,"model.eval()"),Qwt.forEach(t),aur=r(xNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A5e=n(xNe,"CODE",{});var Wwt=s(A5e);nur=r(Wwt,"model.train()"),Wwt.forEach(t),xNe.forEach(t),sur=i(ya),T(UT.$$.fragment,ya),ya.forEach(t),Ml.forEach(t),LVe=i(f),Zd=n(f,"H2",{class:!0});var Bze=s(Zd);JT=n(Bze,"A",{id:!0,class:!0,href:!0});var Hwt=s(JT);L5e=n(Hwt,"SPAN",{});var Uwt=s(L5e);T(v9.$$.fragment,Uwt),Uwt.forEach(t),Hwt.forEach(t),lur=i(Bze),y5e=n(Bze,"SPAN",{});var Jwt=s(y5e);iur=r(Jwt,"AutoModelForInstanceSegmentation"),Jwt.forEach(t),Bze.forEach(t),yVe=i(f),Zo=n(f,"DIV",{class:!0});var Cl=s(Zo);T(F9.$$.fragment,Cl),dur=i(Cl),ec=n(Cl,"P",{});var Sre=s(ec);cur=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),bH=n(Sre,"A",{href:!0});var Ywt=s(bH);fur=r(Ywt,"from_pretrained()"),Ywt.forEach(t),mur=r(Sre," class method or the "),vH=n(Sre,"A",{href:!0});var Kwt=s(vH);gur=r(Kwt,"from_config()"),Kwt.forEach(t),hur=r(Sre,` class
method.`),Sre.forEach(t),pur=i(Cl),T9=n(Cl,"P",{});var Nze=s(T9);_ur=r(Nze,"This class cannot be instantiated directly using "),x5e=n(Nze,"CODE",{});var Zwt=s(x5e);uur=r(Zwt,"__init__()"),Zwt.forEach(t),bur=r(Nze," (throws an error)."),Nze.forEach(t),vur=i(Cl),$t=n(Cl,"DIV",{class:!0});var RA=s($t);T(M9.$$.fragment,RA),Fur=i(RA),$5e=n(RA,"P",{});var eAt=s($5e);Tur=r(eAt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eAt.forEach(t),Mur=i(RA),oc=n(RA,"P",{});var Rre=s(oc);Eur=r(Rre,`Note:
Loading a model from its configuration file does `),k5e=n(Rre,"STRONG",{});var oAt=s(k5e);Cur=r(oAt,"not"),oAt.forEach(t),wur=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(Rre,"A",{href:!0});var rAt=s(FH);Aur=r(rAt,"from_pretrained()"),rAt.forEach(t),Lur=r(Rre," to load the model weights."),Rre.forEach(t),yur=i(RA),T(YT.$$.fragment,RA),RA.forEach(t),xur=i(Cl),Fo=n(Cl,"DIV",{class:!0});var xa=s(Fo);T(E9.$$.fragment,xa),$ur=i(xa),S5e=n(xa,"P",{});var tAt=s(S5e);kur=r(tAt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tAt.forEach(t),Sur=i(xa),tn=n(xa,"P",{});var PA=s(tn);Rur=r(PA,"The model class to instantiate is selected based on the "),R5e=n(PA,"CODE",{});var aAt=s(R5e);Pur=r(aAt,"model_type"),aAt.forEach(t),Bur=r(PA,` property of the config object (either
passed as an argument or loaded from `),P5e=n(PA,"CODE",{});var nAt=s(P5e);Nur=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),Iur=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(PA,"CODE",{});var sAt=s(B5e);qur=r(sAt,"pretrained_model_name_or_path"),sAt.forEach(t),jur=r(PA,":"),PA.forEach(t),Dur=i(xa),N5e=n(xa,"UL",{});var lAt=s(N5e);KT=n(lAt,"LI",{});var $Ne=s(KT);I5e=n($Ne,"STRONG",{});var iAt=s(I5e);Gur=r(iAt,"maskformer"),iAt.forEach(t),Our=r($Ne," \u2014 "),TH=n($Ne,"A",{href:!0});var dAt=s(TH);Vur=r(dAt,"MaskFormerForInstanceSegmentation"),dAt.forEach(t),Xur=r($Ne," (MaskFormer model)"),$Ne.forEach(t),lAt.forEach(t),zur=i(xa),ZT=n(xa,"P",{});var kNe=s(ZT);Qur=r(kNe,"The model is set in evaluation mode by default using "),q5e=n(kNe,"CODE",{});var cAt=s(q5e);Wur=r(cAt,"model.eval()"),cAt.forEach(t),Hur=r(kNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j5e=n(kNe,"CODE",{});var fAt=s(j5e);Uur=r(fAt,"model.train()"),fAt.forEach(t),kNe.forEach(t),Jur=i(xa),T(e7.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),xVe=i(f),rc=n(f,"H2",{class:!0});var Ize=s(rc);o7=n(Ize,"A",{id:!0,class:!0,href:!0});var mAt=s(o7);D5e=n(mAt,"SPAN",{});var gAt=s(D5e);T(C9.$$.fragment,gAt),gAt.forEach(t),mAt.forEach(t),Yur=i(Ize),G5e=n(Ize,"SPAN",{});var hAt=s(G5e);Kur=r(hAt,"TFAutoModel"),hAt.forEach(t),Ize.forEach(t),$Ve=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(w9.$$.fragment,wl),Zur=i(wl),tc=n(wl,"P",{});var Pre=s(tc);e1r=r(Pre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),MH=n(Pre,"A",{href:!0});var pAt=s(MH);o1r=r(pAt,"from_pretrained()"),pAt.forEach(t),r1r=r(Pre," class method or the "),EH=n(Pre,"A",{href:!0});var _At=s(EH);t1r=r(_At,"from_config()"),_At.forEach(t),a1r=r(Pre,` class
method.`),Pre.forEach(t),n1r=i(wl),A9=n(wl,"P",{});var qze=s(A9);s1r=r(qze,"This class cannot be instantiated directly using "),O5e=n(qze,"CODE",{});var uAt=s(O5e);l1r=r(uAt,"__init__()"),uAt.forEach(t),i1r=r(qze," (throws an error)."),qze.forEach(t),d1r=i(wl),kt=n(wl,"DIV",{class:!0});var BA=s(kt);T(L9.$$.fragment,BA),c1r=i(BA),V5e=n(BA,"P",{});var bAt=s(V5e);f1r=r(bAt,"Instantiates one of the base model classes of the library from a configuration."),bAt.forEach(t),m1r=i(BA),ac=n(BA,"P",{});var Bre=s(ac);g1r=r(Bre,`Note:
Loading a model from its configuration file does `),X5e=n(Bre,"STRONG",{});var vAt=s(X5e);h1r=r(vAt,"not"),vAt.forEach(t),p1r=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(Bre,"A",{href:!0});var FAt=s(CH);_1r=r(FAt,"from_pretrained()"),FAt.forEach(t),u1r=r(Bre," to load the model weights."),Bre.forEach(t),b1r=i(BA),T(r7.$$.fragment,BA),BA.forEach(t),v1r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(y9.$$.fragment,Al),F1r=i(Al),z5e=n(Al,"P",{});var TAt=s(z5e);T1r=r(TAt,"Instantiate one of the base model classes of the library from a pretrained model."),TAt.forEach(t),M1r=i(Al),an=n(Al,"P",{});var NA=s(an);E1r=r(NA,"The model class to instantiate is selected based on the "),Q5e=n(NA,"CODE",{});var MAt=s(Q5e);C1r=r(MAt,"model_type"),MAt.forEach(t),w1r=r(NA,` property of the config object (either
passed as an argument or loaded from `),W5e=n(NA,"CODE",{});var EAt=s(W5e);A1r=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),L1r=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(NA,"CODE",{});var CAt=s(H5e);y1r=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),x1r=r(NA,":"),NA.forEach(t),$1r=i(Al),j=n(Al,"UL",{});var D=s(j);t7=n(D,"LI",{});var SNe=s(t7);U5e=n(SNe,"STRONG",{});var wAt=s(U5e);k1r=r(wAt,"albert"),wAt.forEach(t),S1r=r(SNe," \u2014 "),wH=n(SNe,"A",{href:!0});var AAt=s(wH);R1r=r(AAt,"TFAlbertModel"),AAt.forEach(t),P1r=r(SNe," (ALBERT model)"),SNe.forEach(t),B1r=i(D),a7=n(D,"LI",{});var RNe=s(a7);J5e=n(RNe,"STRONG",{});var LAt=s(J5e);N1r=r(LAt,"bart"),LAt.forEach(t),I1r=r(RNe," \u2014 "),AH=n(RNe,"A",{href:!0});var yAt=s(AH);q1r=r(yAt,"TFBartModel"),yAt.forEach(t),j1r=r(RNe," (BART model)"),RNe.forEach(t),D1r=i(D),n7=n(D,"LI",{});var PNe=s(n7);Y5e=n(PNe,"STRONG",{});var xAt=s(Y5e);G1r=r(xAt,"bert"),xAt.forEach(t),O1r=r(PNe," \u2014 "),LH=n(PNe,"A",{href:!0});var $At=s(LH);V1r=r($At,"TFBertModel"),$At.forEach(t),X1r=r(PNe," (BERT model)"),PNe.forEach(t),z1r=i(D),s7=n(D,"LI",{});var BNe=s(s7);K5e=n(BNe,"STRONG",{});var kAt=s(K5e);Q1r=r(kAt,"blenderbot"),kAt.forEach(t),W1r=r(BNe," \u2014 "),yH=n(BNe,"A",{href:!0});var SAt=s(yH);H1r=r(SAt,"TFBlenderbotModel"),SAt.forEach(t),U1r=r(BNe," (Blenderbot model)"),BNe.forEach(t),J1r=i(D),l7=n(D,"LI",{});var NNe=s(l7);Z5e=n(NNe,"STRONG",{});var RAt=s(Z5e);Y1r=r(RAt,"blenderbot-small"),RAt.forEach(t),K1r=r(NNe," \u2014 "),xH=n(NNe,"A",{href:!0});var PAt=s(xH);Z1r=r(PAt,"TFBlenderbotSmallModel"),PAt.forEach(t),e2r=r(NNe," (BlenderbotSmall model)"),NNe.forEach(t),o2r=i(D),i7=n(D,"LI",{});var INe=s(i7);eve=n(INe,"STRONG",{});var BAt=s(eve);r2r=r(BAt,"camembert"),BAt.forEach(t),t2r=r(INe," \u2014 "),$H=n(INe,"A",{href:!0});var NAt=s($H);a2r=r(NAt,"TFCamembertModel"),NAt.forEach(t),n2r=r(INe," (CamemBERT model)"),INe.forEach(t),s2r=i(D),d7=n(D,"LI",{});var qNe=s(d7);ove=n(qNe,"STRONG",{});var IAt=s(ove);l2r=r(IAt,"clip"),IAt.forEach(t),i2r=r(qNe," \u2014 "),kH=n(qNe,"A",{href:!0});var qAt=s(kH);d2r=r(qAt,"TFCLIPModel"),qAt.forEach(t),c2r=r(qNe," (CLIP model)"),qNe.forEach(t),f2r=i(D),c7=n(D,"LI",{});var jNe=s(c7);rve=n(jNe,"STRONG",{});var jAt=s(rve);m2r=r(jAt,"convbert"),jAt.forEach(t),g2r=r(jNe," \u2014 "),SH=n(jNe,"A",{href:!0});var DAt=s(SH);h2r=r(DAt,"TFConvBertModel"),DAt.forEach(t),p2r=r(jNe," (ConvBERT model)"),jNe.forEach(t),_2r=i(D),f7=n(D,"LI",{});var DNe=s(f7);tve=n(DNe,"STRONG",{});var GAt=s(tve);u2r=r(GAt,"convnext"),GAt.forEach(t),b2r=r(DNe," \u2014 "),RH=n(DNe,"A",{href:!0});var OAt=s(RH);v2r=r(OAt,"TFConvNextModel"),OAt.forEach(t),F2r=r(DNe," (ConvNeXT model)"),DNe.forEach(t),T2r=i(D),m7=n(D,"LI",{});var GNe=s(m7);ave=n(GNe,"STRONG",{});var VAt=s(ave);M2r=r(VAt,"ctrl"),VAt.forEach(t),E2r=r(GNe," \u2014 "),PH=n(GNe,"A",{href:!0});var XAt=s(PH);C2r=r(XAt,"TFCTRLModel"),XAt.forEach(t),w2r=r(GNe," (CTRL model)"),GNe.forEach(t),A2r=i(D),g7=n(D,"LI",{});var ONe=s(g7);nve=n(ONe,"STRONG",{});var zAt=s(nve);L2r=r(zAt,"data2vec-vision"),zAt.forEach(t),y2r=r(ONe," \u2014 "),BH=n(ONe,"A",{href:!0});var QAt=s(BH);x2r=r(QAt,"TFData2VecVisionModel"),QAt.forEach(t),$2r=r(ONe," (Data2VecVision model)"),ONe.forEach(t),k2r=i(D),h7=n(D,"LI",{});var VNe=s(h7);sve=n(VNe,"STRONG",{});var WAt=s(sve);S2r=r(WAt,"deberta"),WAt.forEach(t),R2r=r(VNe," \u2014 "),NH=n(VNe,"A",{href:!0});var HAt=s(NH);P2r=r(HAt,"TFDebertaModel"),HAt.forEach(t),B2r=r(VNe," (DeBERTa model)"),VNe.forEach(t),N2r=i(D),p7=n(D,"LI",{});var XNe=s(p7);lve=n(XNe,"STRONG",{});var UAt=s(lve);I2r=r(UAt,"deberta-v2"),UAt.forEach(t),q2r=r(XNe," \u2014 "),IH=n(XNe,"A",{href:!0});var JAt=s(IH);j2r=r(JAt,"TFDebertaV2Model"),JAt.forEach(t),D2r=r(XNe," (DeBERTa-v2 model)"),XNe.forEach(t),G2r=i(D),_7=n(D,"LI",{});var zNe=s(_7);ive=n(zNe,"STRONG",{});var YAt=s(ive);O2r=r(YAt,"distilbert"),YAt.forEach(t),V2r=r(zNe," \u2014 "),qH=n(zNe,"A",{href:!0});var KAt=s(qH);X2r=r(KAt,"TFDistilBertModel"),KAt.forEach(t),z2r=r(zNe," (DistilBERT model)"),zNe.forEach(t),Q2r=i(D),u7=n(D,"LI",{});var QNe=s(u7);dve=n(QNe,"STRONG",{});var ZAt=s(dve);W2r=r(ZAt,"dpr"),ZAt.forEach(t),H2r=r(QNe," \u2014 "),jH=n(QNe,"A",{href:!0});var e6t=s(jH);U2r=r(e6t,"TFDPRQuestionEncoder"),e6t.forEach(t),J2r=r(QNe," (DPR model)"),QNe.forEach(t),Y2r=i(D),b7=n(D,"LI",{});var WNe=s(b7);cve=n(WNe,"STRONG",{});var o6t=s(cve);K2r=r(o6t,"electra"),o6t.forEach(t),Z2r=r(WNe," \u2014 "),DH=n(WNe,"A",{href:!0});var r6t=s(DH);ebr=r(r6t,"TFElectraModel"),r6t.forEach(t),obr=r(WNe," (ELECTRA model)"),WNe.forEach(t),rbr=i(D),v7=n(D,"LI",{});var HNe=s(v7);fve=n(HNe,"STRONG",{});var t6t=s(fve);tbr=r(t6t,"flaubert"),t6t.forEach(t),abr=r(HNe," \u2014 "),GH=n(HNe,"A",{href:!0});var a6t=s(GH);nbr=r(a6t,"TFFlaubertModel"),a6t.forEach(t),sbr=r(HNe," (FlauBERT model)"),HNe.forEach(t),lbr=i(D),Ws=n(D,"LI",{});var fS=s(Ws);mve=n(fS,"STRONG",{});var n6t=s(mve);ibr=r(n6t,"funnel"),n6t.forEach(t),dbr=r(fS," \u2014 "),OH=n(fS,"A",{href:!0});var s6t=s(OH);cbr=r(s6t,"TFFunnelModel"),s6t.forEach(t),fbr=r(fS," or "),VH=n(fS,"A",{href:!0});var l6t=s(VH);mbr=r(l6t,"TFFunnelBaseModel"),l6t.forEach(t),gbr=r(fS," (Funnel Transformer model)"),fS.forEach(t),hbr=i(D),F7=n(D,"LI",{});var UNe=s(F7);gve=n(UNe,"STRONG",{});var i6t=s(gve);pbr=r(i6t,"gpt2"),i6t.forEach(t),_br=r(UNe," \u2014 "),XH=n(UNe,"A",{href:!0});var d6t=s(XH);ubr=r(d6t,"TFGPT2Model"),d6t.forEach(t),bbr=r(UNe," (OpenAI GPT-2 model)"),UNe.forEach(t),vbr=i(D),T7=n(D,"LI",{});var JNe=s(T7);hve=n(JNe,"STRONG",{});var c6t=s(hve);Fbr=r(c6t,"gptj"),c6t.forEach(t),Tbr=r(JNe," \u2014 "),zH=n(JNe,"A",{href:!0});var f6t=s(zH);Mbr=r(f6t,"TFGPTJModel"),f6t.forEach(t),Ebr=r(JNe," (GPT-J model)"),JNe.forEach(t),Cbr=i(D),M7=n(D,"LI",{});var YNe=s(M7);pve=n(YNe,"STRONG",{});var m6t=s(pve);wbr=r(m6t,"hubert"),m6t.forEach(t),Abr=r(YNe," \u2014 "),QH=n(YNe,"A",{href:!0});var g6t=s(QH);Lbr=r(g6t,"TFHubertModel"),g6t.forEach(t),ybr=r(YNe," (Hubert model)"),YNe.forEach(t),xbr=i(D),E7=n(D,"LI",{});var KNe=s(E7);_ve=n(KNe,"STRONG",{});var h6t=s(_ve);$br=r(h6t,"layoutlm"),h6t.forEach(t),kbr=r(KNe," \u2014 "),WH=n(KNe,"A",{href:!0});var p6t=s(WH);Sbr=r(p6t,"TFLayoutLMModel"),p6t.forEach(t),Rbr=r(KNe," (LayoutLM model)"),KNe.forEach(t),Pbr=i(D),C7=n(D,"LI",{});var ZNe=s(C7);uve=n(ZNe,"STRONG",{});var _6t=s(uve);Bbr=r(_6t,"led"),_6t.forEach(t),Nbr=r(ZNe," \u2014 "),HH=n(ZNe,"A",{href:!0});var u6t=s(HH);Ibr=r(u6t,"TFLEDModel"),u6t.forEach(t),qbr=r(ZNe," (LED model)"),ZNe.forEach(t),jbr=i(D),w7=n(D,"LI",{});var eIe=s(w7);bve=n(eIe,"STRONG",{});var b6t=s(bve);Dbr=r(b6t,"longformer"),b6t.forEach(t),Gbr=r(eIe," \u2014 "),UH=n(eIe,"A",{href:!0});var v6t=s(UH);Obr=r(v6t,"TFLongformerModel"),v6t.forEach(t),Vbr=r(eIe," (Longformer model)"),eIe.forEach(t),Xbr=i(D),A7=n(D,"LI",{});var oIe=s(A7);vve=n(oIe,"STRONG",{});var F6t=s(vve);zbr=r(F6t,"lxmert"),F6t.forEach(t),Qbr=r(oIe," \u2014 "),JH=n(oIe,"A",{href:!0});var T6t=s(JH);Wbr=r(T6t,"TFLxmertModel"),T6t.forEach(t),Hbr=r(oIe," (LXMERT model)"),oIe.forEach(t),Ubr=i(D),L7=n(D,"LI",{});var rIe=s(L7);Fve=n(rIe,"STRONG",{});var M6t=s(Fve);Jbr=r(M6t,"marian"),M6t.forEach(t),Ybr=r(rIe," \u2014 "),YH=n(rIe,"A",{href:!0});var E6t=s(YH);Kbr=r(E6t,"TFMarianModel"),E6t.forEach(t),Zbr=r(rIe," (Marian model)"),rIe.forEach(t),e4r=i(D),y7=n(D,"LI",{});var tIe=s(y7);Tve=n(tIe,"STRONG",{});var C6t=s(Tve);o4r=r(C6t,"mbart"),C6t.forEach(t),r4r=r(tIe," \u2014 "),KH=n(tIe,"A",{href:!0});var w6t=s(KH);t4r=r(w6t,"TFMBartModel"),w6t.forEach(t),a4r=r(tIe," (mBART model)"),tIe.forEach(t),n4r=i(D),x7=n(D,"LI",{});var aIe=s(x7);Mve=n(aIe,"STRONG",{});var A6t=s(Mve);s4r=r(A6t,"mobilebert"),A6t.forEach(t),l4r=r(aIe," \u2014 "),ZH=n(aIe,"A",{href:!0});var L6t=s(ZH);i4r=r(L6t,"TFMobileBertModel"),L6t.forEach(t),d4r=r(aIe," (MobileBERT model)"),aIe.forEach(t),c4r=i(D),$7=n(D,"LI",{});var nIe=s($7);Eve=n(nIe,"STRONG",{});var y6t=s(Eve);f4r=r(y6t,"mpnet"),y6t.forEach(t),m4r=r(nIe," \u2014 "),eU=n(nIe,"A",{href:!0});var x6t=s(eU);g4r=r(x6t,"TFMPNetModel"),x6t.forEach(t),h4r=r(nIe," (MPNet model)"),nIe.forEach(t),p4r=i(D),k7=n(D,"LI",{});var sIe=s(k7);Cve=n(sIe,"STRONG",{});var $6t=s(Cve);_4r=r($6t,"mt5"),$6t.forEach(t),u4r=r(sIe," \u2014 "),oU=n(sIe,"A",{href:!0});var k6t=s(oU);b4r=r(k6t,"TFMT5Model"),k6t.forEach(t),v4r=r(sIe," (MT5 model)"),sIe.forEach(t),F4r=i(D),S7=n(D,"LI",{});var lIe=s(S7);wve=n(lIe,"STRONG",{});var S6t=s(wve);T4r=r(S6t,"openai-gpt"),S6t.forEach(t),M4r=r(lIe," \u2014 "),rU=n(lIe,"A",{href:!0});var R6t=s(rU);E4r=r(R6t,"TFOpenAIGPTModel"),R6t.forEach(t),C4r=r(lIe," (OpenAI GPT model)"),lIe.forEach(t),w4r=i(D),R7=n(D,"LI",{});var iIe=s(R7);Ave=n(iIe,"STRONG",{});var P6t=s(Ave);A4r=r(P6t,"opt"),P6t.forEach(t),L4r=r(iIe," \u2014 "),tU=n(iIe,"A",{href:!0});var B6t=s(tU);y4r=r(B6t,"TFOPTModel"),B6t.forEach(t),x4r=r(iIe," (OPT model)"),iIe.forEach(t),$4r=i(D),P7=n(D,"LI",{});var dIe=s(P7);Lve=n(dIe,"STRONG",{});var N6t=s(Lve);k4r=r(N6t,"pegasus"),N6t.forEach(t),S4r=r(dIe," \u2014 "),aU=n(dIe,"A",{href:!0});var I6t=s(aU);R4r=r(I6t,"TFPegasusModel"),I6t.forEach(t),P4r=r(dIe," (Pegasus model)"),dIe.forEach(t),B4r=i(D),B7=n(D,"LI",{});var cIe=s(B7);yve=n(cIe,"STRONG",{});var q6t=s(yve);N4r=r(q6t,"rembert"),q6t.forEach(t),I4r=r(cIe," \u2014 "),nU=n(cIe,"A",{href:!0});var j6t=s(nU);q4r=r(j6t,"TFRemBertModel"),j6t.forEach(t),j4r=r(cIe," (RemBERT model)"),cIe.forEach(t),D4r=i(D),N7=n(D,"LI",{});var fIe=s(N7);xve=n(fIe,"STRONG",{});var D6t=s(xve);G4r=r(D6t,"roberta"),D6t.forEach(t),O4r=r(fIe," \u2014 "),sU=n(fIe,"A",{href:!0});var G6t=s(sU);V4r=r(G6t,"TFRobertaModel"),G6t.forEach(t),X4r=r(fIe," (RoBERTa model)"),fIe.forEach(t),z4r=i(D),I7=n(D,"LI",{});var mIe=s(I7);$ve=n(mIe,"STRONG",{});var O6t=s($ve);Q4r=r(O6t,"roformer"),O6t.forEach(t),W4r=r(mIe," \u2014 "),lU=n(mIe,"A",{href:!0});var V6t=s(lU);H4r=r(V6t,"TFRoFormerModel"),V6t.forEach(t),U4r=r(mIe," (RoFormer model)"),mIe.forEach(t),J4r=i(D),q7=n(D,"LI",{});var gIe=s(q7);kve=n(gIe,"STRONG",{});var X6t=s(kve);Y4r=r(X6t,"speech_to_text"),X6t.forEach(t),K4r=r(gIe," \u2014 "),iU=n(gIe,"A",{href:!0});var z6t=s(iU);Z4r=r(z6t,"TFSpeech2TextModel"),z6t.forEach(t),e5r=r(gIe," (Speech2Text model)"),gIe.forEach(t),o5r=i(D),j7=n(D,"LI",{});var hIe=s(j7);Sve=n(hIe,"STRONG",{});var Q6t=s(Sve);r5r=r(Q6t,"swin"),Q6t.forEach(t),t5r=r(hIe," \u2014 "),dU=n(hIe,"A",{href:!0});var W6t=s(dU);a5r=r(W6t,"TFSwinModel"),W6t.forEach(t),n5r=r(hIe," (Swin Transformer model)"),hIe.forEach(t),s5r=i(D),D7=n(D,"LI",{});var pIe=s(D7);Rve=n(pIe,"STRONG",{});var H6t=s(Rve);l5r=r(H6t,"t5"),H6t.forEach(t),i5r=r(pIe," \u2014 "),cU=n(pIe,"A",{href:!0});var U6t=s(cU);d5r=r(U6t,"TFT5Model"),U6t.forEach(t),c5r=r(pIe," (T5 model)"),pIe.forEach(t),f5r=i(D),G7=n(D,"LI",{});var _Ie=s(G7);Pve=n(_Ie,"STRONG",{});var J6t=s(Pve);m5r=r(J6t,"tapas"),J6t.forEach(t),g5r=r(_Ie," \u2014 "),fU=n(_Ie,"A",{href:!0});var Y6t=s(fU);h5r=r(Y6t,"TFTapasModel"),Y6t.forEach(t),p5r=r(_Ie," (TAPAS model)"),_Ie.forEach(t),_5r=i(D),O7=n(D,"LI",{});var uIe=s(O7);Bve=n(uIe,"STRONG",{});var K6t=s(Bve);u5r=r(K6t,"transfo-xl"),K6t.forEach(t),b5r=r(uIe," \u2014 "),mU=n(uIe,"A",{href:!0});var Z6t=s(mU);v5r=r(Z6t,"TFTransfoXLModel"),Z6t.forEach(t),F5r=r(uIe," (Transformer-XL model)"),uIe.forEach(t),T5r=i(D),V7=n(D,"LI",{});var bIe=s(V7);Nve=n(bIe,"STRONG",{});var eLt=s(Nve);M5r=r(eLt,"vit"),eLt.forEach(t),E5r=r(bIe," \u2014 "),gU=n(bIe,"A",{href:!0});var oLt=s(gU);C5r=r(oLt,"TFViTModel"),oLt.forEach(t),w5r=r(bIe," (ViT model)"),bIe.forEach(t),A5r=i(D),X7=n(D,"LI",{});var vIe=s(X7);Ive=n(vIe,"STRONG",{});var rLt=s(Ive);L5r=r(rLt,"vit_mae"),rLt.forEach(t),y5r=r(vIe," \u2014 "),hU=n(vIe,"A",{href:!0});var tLt=s(hU);x5r=r(tLt,"TFViTMAEModel"),tLt.forEach(t),$5r=r(vIe," (ViTMAE model)"),vIe.forEach(t),k5r=i(D),z7=n(D,"LI",{});var FIe=s(z7);qve=n(FIe,"STRONG",{});var aLt=s(qve);S5r=r(aLt,"wav2vec2"),aLt.forEach(t),R5r=r(FIe," \u2014 "),pU=n(FIe,"A",{href:!0});var nLt=s(pU);P5r=r(nLt,"TFWav2Vec2Model"),nLt.forEach(t),B5r=r(FIe," (Wav2Vec2 model)"),FIe.forEach(t),N5r=i(D),Q7=n(D,"LI",{});var TIe=s(Q7);jve=n(TIe,"STRONG",{});var sLt=s(jve);I5r=r(sLt,"xlm"),sLt.forEach(t),q5r=r(TIe," \u2014 "),_U=n(TIe,"A",{href:!0});var lLt=s(_U);j5r=r(lLt,"TFXLMModel"),lLt.forEach(t),D5r=r(TIe," (XLM model)"),TIe.forEach(t),G5r=i(D),W7=n(D,"LI",{});var MIe=s(W7);Dve=n(MIe,"STRONG",{});var iLt=s(Dve);O5r=r(iLt,"xlm-roberta"),iLt.forEach(t),V5r=r(MIe," \u2014 "),uU=n(MIe,"A",{href:!0});var dLt=s(uU);X5r=r(dLt,"TFXLMRobertaModel"),dLt.forEach(t),z5r=r(MIe," (XLM-RoBERTa model)"),MIe.forEach(t),Q5r=i(D),H7=n(D,"LI",{});var EIe=s(H7);Gve=n(EIe,"STRONG",{});var cLt=s(Gve);W5r=r(cLt,"xlnet"),cLt.forEach(t),H5r=r(EIe," \u2014 "),bU=n(EIe,"A",{href:!0});var fLt=s(bU);U5r=r(fLt,"TFXLNetModel"),fLt.forEach(t),J5r=r(EIe," (XLNet model)"),EIe.forEach(t),D.forEach(t),Y5r=i(Al),T(U7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),kVe=i(f),nc=n(f,"H2",{class:!0});var jze=s(nc);J7=n(jze,"A",{id:!0,class:!0,href:!0});var mLt=s(J7);Ove=n(mLt,"SPAN",{});var gLt=s(Ove);T(x9.$$.fragment,gLt),gLt.forEach(t),mLt.forEach(t),K5r=i(jze),Vve=n(jze,"SPAN",{});var hLt=s(Vve);Z5r=r(hLt,"TFAutoModelForPreTraining"),hLt.forEach(t),jze.forEach(t),SVe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T($9.$$.fragment,Ll),evr=i(Ll),sc=n(Ll,"P",{});var Nre=s(sc);ovr=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vU=n(Nre,"A",{href:!0});var pLt=s(vU);rvr=r(pLt,"from_pretrained()"),pLt.forEach(t),tvr=r(Nre," class method or the "),FU=n(Nre,"A",{href:!0});var _Lt=s(FU);avr=r(_Lt,"from_config()"),_Lt.forEach(t),nvr=r(Nre,` class
method.`),Nre.forEach(t),svr=i(Ll),k9=n(Ll,"P",{});var Dze=s(k9);lvr=r(Dze,"This class cannot be instantiated directly using "),Xve=n(Dze,"CODE",{});var uLt=s(Xve);ivr=r(uLt,"__init__()"),uLt.forEach(t),dvr=r(Dze," (throws an error)."),Dze.forEach(t),cvr=i(Ll),St=n(Ll,"DIV",{class:!0});var IA=s(St);T(S9.$$.fragment,IA),fvr=i(IA),zve=n(IA,"P",{});var bLt=s(zve);mvr=r(bLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bLt.forEach(t),gvr=i(IA),lc=n(IA,"P",{});var Ire=s(lc);hvr=r(Ire,`Note:
Loading a model from its configuration file does `),Qve=n(Ire,"STRONG",{});var vLt=s(Qve);pvr=r(vLt,"not"),vLt.forEach(t),_vr=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(Ire,"A",{href:!0});var FLt=s(TU);uvr=r(FLt,"from_pretrained()"),FLt.forEach(t),bvr=r(Ire," to load the model weights."),Ire.forEach(t),vvr=i(IA),T(Y7.$$.fragment,IA),IA.forEach(t),Fvr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(R9.$$.fragment,yl),Tvr=i(yl),Wve=n(yl,"P",{});var TLt=s(Wve);Mvr=r(TLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TLt.forEach(t),Evr=i(yl),nn=n(yl,"P",{});var qA=s(nn);Cvr=r(qA,"The model class to instantiate is selected based on the "),Hve=n(qA,"CODE",{});var MLt=s(Hve);wvr=r(MLt,"model_type"),MLt.forEach(t),Avr=r(qA,` property of the config object (either
passed as an argument or loaded from `),Uve=n(qA,"CODE",{});var ELt=s(Uve);Lvr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),yvr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(qA,"CODE",{});var CLt=s(Jve);xvr=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),$vr=r(qA,":"),qA.forEach(t),kvr=i(yl),se=n(yl,"UL",{});var le=s(se);K7=n(le,"LI",{});var CIe=s(K7);Yve=n(CIe,"STRONG",{});var wLt=s(Yve);Svr=r(wLt,"albert"),wLt.forEach(t),Rvr=r(CIe," \u2014 "),MU=n(CIe,"A",{href:!0});var ALt=s(MU);Pvr=r(ALt,"TFAlbertForPreTraining"),ALt.forEach(t),Bvr=r(CIe," (ALBERT model)"),CIe.forEach(t),Nvr=i(le),Z7=n(le,"LI",{});var wIe=s(Z7);Kve=n(wIe,"STRONG",{});var LLt=s(Kve);Ivr=r(LLt,"bart"),LLt.forEach(t),qvr=r(wIe," \u2014 "),EU=n(wIe,"A",{href:!0});var yLt=s(EU);jvr=r(yLt,"TFBartForConditionalGeneration"),yLt.forEach(t),Dvr=r(wIe," (BART model)"),wIe.forEach(t),Gvr=i(le),e8=n(le,"LI",{});var AIe=s(e8);Zve=n(AIe,"STRONG",{});var xLt=s(Zve);Ovr=r(xLt,"bert"),xLt.forEach(t),Vvr=r(AIe," \u2014 "),CU=n(AIe,"A",{href:!0});var $Lt=s(CU);Xvr=r($Lt,"TFBertForPreTraining"),$Lt.forEach(t),zvr=r(AIe," (BERT model)"),AIe.forEach(t),Qvr=i(le),o8=n(le,"LI",{});var LIe=s(o8);eFe=n(LIe,"STRONG",{});var kLt=s(eFe);Wvr=r(kLt,"camembert"),kLt.forEach(t),Hvr=r(LIe," \u2014 "),wU=n(LIe,"A",{href:!0});var SLt=s(wU);Uvr=r(SLt,"TFCamembertForMaskedLM"),SLt.forEach(t),Jvr=r(LIe," (CamemBERT model)"),LIe.forEach(t),Yvr=i(le),r8=n(le,"LI",{});var yIe=s(r8);oFe=n(yIe,"STRONG",{});var RLt=s(oFe);Kvr=r(RLt,"ctrl"),RLt.forEach(t),Zvr=r(yIe," \u2014 "),AU=n(yIe,"A",{href:!0});var PLt=s(AU);eFr=r(PLt,"TFCTRLLMHeadModel"),PLt.forEach(t),oFr=r(yIe," (CTRL model)"),yIe.forEach(t),rFr=i(le),t8=n(le,"LI",{});var xIe=s(t8);rFe=n(xIe,"STRONG",{});var BLt=s(rFe);tFr=r(BLt,"distilbert"),BLt.forEach(t),aFr=r(xIe," \u2014 "),LU=n(xIe,"A",{href:!0});var NLt=s(LU);nFr=r(NLt,"TFDistilBertForMaskedLM"),NLt.forEach(t),sFr=r(xIe," (DistilBERT model)"),xIe.forEach(t),lFr=i(le),a8=n(le,"LI",{});var $Ie=s(a8);tFe=n($Ie,"STRONG",{});var ILt=s(tFe);iFr=r(ILt,"electra"),ILt.forEach(t),dFr=r($Ie," \u2014 "),yU=n($Ie,"A",{href:!0});var qLt=s(yU);cFr=r(qLt,"TFElectraForPreTraining"),qLt.forEach(t),fFr=r($Ie," (ELECTRA model)"),$Ie.forEach(t),mFr=i(le),n8=n(le,"LI",{});var kIe=s(n8);aFe=n(kIe,"STRONG",{});var jLt=s(aFe);gFr=r(jLt,"flaubert"),jLt.forEach(t),hFr=r(kIe," \u2014 "),xU=n(kIe,"A",{href:!0});var DLt=s(xU);pFr=r(DLt,"TFFlaubertWithLMHeadModel"),DLt.forEach(t),_Fr=r(kIe," (FlauBERT model)"),kIe.forEach(t),uFr=i(le),s8=n(le,"LI",{});var SIe=s(s8);nFe=n(SIe,"STRONG",{});var GLt=s(nFe);bFr=r(GLt,"funnel"),GLt.forEach(t),vFr=r(SIe," \u2014 "),$U=n(SIe,"A",{href:!0});var OLt=s($U);FFr=r(OLt,"TFFunnelForPreTraining"),OLt.forEach(t),TFr=r(SIe," (Funnel Transformer model)"),SIe.forEach(t),MFr=i(le),l8=n(le,"LI",{});var RIe=s(l8);sFe=n(RIe,"STRONG",{});var VLt=s(sFe);EFr=r(VLt,"gpt2"),VLt.forEach(t),CFr=r(RIe," \u2014 "),kU=n(RIe,"A",{href:!0});var XLt=s(kU);wFr=r(XLt,"TFGPT2LMHeadModel"),XLt.forEach(t),AFr=r(RIe," (OpenAI GPT-2 model)"),RIe.forEach(t),LFr=i(le),i8=n(le,"LI",{});var PIe=s(i8);lFe=n(PIe,"STRONG",{});var zLt=s(lFe);yFr=r(zLt,"layoutlm"),zLt.forEach(t),xFr=r(PIe," \u2014 "),SU=n(PIe,"A",{href:!0});var QLt=s(SU);$Fr=r(QLt,"TFLayoutLMForMaskedLM"),QLt.forEach(t),kFr=r(PIe," (LayoutLM model)"),PIe.forEach(t),SFr=i(le),d8=n(le,"LI",{});var BIe=s(d8);iFe=n(BIe,"STRONG",{});var WLt=s(iFe);RFr=r(WLt,"lxmert"),WLt.forEach(t),PFr=r(BIe," \u2014 "),RU=n(BIe,"A",{href:!0});var HLt=s(RU);BFr=r(HLt,"TFLxmertForPreTraining"),HLt.forEach(t),NFr=r(BIe," (LXMERT model)"),BIe.forEach(t),IFr=i(le),c8=n(le,"LI",{});var NIe=s(c8);dFe=n(NIe,"STRONG",{});var ULt=s(dFe);qFr=r(ULt,"mobilebert"),ULt.forEach(t),jFr=r(NIe," \u2014 "),PU=n(NIe,"A",{href:!0});var JLt=s(PU);DFr=r(JLt,"TFMobileBertForPreTraining"),JLt.forEach(t),GFr=r(NIe," (MobileBERT model)"),NIe.forEach(t),OFr=i(le),f8=n(le,"LI",{});var IIe=s(f8);cFe=n(IIe,"STRONG",{});var YLt=s(cFe);VFr=r(YLt,"mpnet"),YLt.forEach(t),XFr=r(IIe," \u2014 "),BU=n(IIe,"A",{href:!0});var KLt=s(BU);zFr=r(KLt,"TFMPNetForMaskedLM"),KLt.forEach(t),QFr=r(IIe," (MPNet model)"),IIe.forEach(t),WFr=i(le),m8=n(le,"LI",{});var qIe=s(m8);fFe=n(qIe,"STRONG",{});var ZLt=s(fFe);HFr=r(ZLt,"openai-gpt"),ZLt.forEach(t),UFr=r(qIe," \u2014 "),NU=n(qIe,"A",{href:!0});var eyt=s(NU);JFr=r(eyt,"TFOpenAIGPTLMHeadModel"),eyt.forEach(t),YFr=r(qIe," (OpenAI GPT model)"),qIe.forEach(t),KFr=i(le),g8=n(le,"LI",{});var jIe=s(g8);mFe=n(jIe,"STRONG",{});var oyt=s(mFe);ZFr=r(oyt,"roberta"),oyt.forEach(t),eTr=r(jIe," \u2014 "),IU=n(jIe,"A",{href:!0});var ryt=s(IU);oTr=r(ryt,"TFRobertaForMaskedLM"),ryt.forEach(t),rTr=r(jIe," (RoBERTa model)"),jIe.forEach(t),tTr=i(le),h8=n(le,"LI",{});var DIe=s(h8);gFe=n(DIe,"STRONG",{});var tyt=s(gFe);aTr=r(tyt,"t5"),tyt.forEach(t),nTr=r(DIe," \u2014 "),qU=n(DIe,"A",{href:!0});var ayt=s(qU);sTr=r(ayt,"TFT5ForConditionalGeneration"),ayt.forEach(t),lTr=r(DIe," (T5 model)"),DIe.forEach(t),iTr=i(le),p8=n(le,"LI",{});var GIe=s(p8);hFe=n(GIe,"STRONG",{});var nyt=s(hFe);dTr=r(nyt,"tapas"),nyt.forEach(t),cTr=r(GIe," \u2014 "),jU=n(GIe,"A",{href:!0});var syt=s(jU);fTr=r(syt,"TFTapasForMaskedLM"),syt.forEach(t),mTr=r(GIe," (TAPAS model)"),GIe.forEach(t),gTr=i(le),_8=n(le,"LI",{});var OIe=s(_8);pFe=n(OIe,"STRONG",{});var lyt=s(pFe);hTr=r(lyt,"transfo-xl"),lyt.forEach(t),pTr=r(OIe," \u2014 "),DU=n(OIe,"A",{href:!0});var iyt=s(DU);_Tr=r(iyt,"TFTransfoXLLMHeadModel"),iyt.forEach(t),uTr=r(OIe," (Transformer-XL model)"),OIe.forEach(t),bTr=i(le),u8=n(le,"LI",{});var VIe=s(u8);_Fe=n(VIe,"STRONG",{});var dyt=s(_Fe);vTr=r(dyt,"vit_mae"),dyt.forEach(t),FTr=r(VIe," \u2014 "),GU=n(VIe,"A",{href:!0});var cyt=s(GU);TTr=r(cyt,"TFViTMAEForPreTraining"),cyt.forEach(t),MTr=r(VIe," (ViTMAE model)"),VIe.forEach(t),ETr=i(le),b8=n(le,"LI",{});var XIe=s(b8);uFe=n(XIe,"STRONG",{});var fyt=s(uFe);CTr=r(fyt,"xlm"),fyt.forEach(t),wTr=r(XIe," \u2014 "),OU=n(XIe,"A",{href:!0});var myt=s(OU);ATr=r(myt,"TFXLMWithLMHeadModel"),myt.forEach(t),LTr=r(XIe," (XLM model)"),XIe.forEach(t),yTr=i(le),v8=n(le,"LI",{});var zIe=s(v8);bFe=n(zIe,"STRONG",{});var gyt=s(bFe);xTr=r(gyt,"xlm-roberta"),gyt.forEach(t),$Tr=r(zIe," \u2014 "),VU=n(zIe,"A",{href:!0});var hyt=s(VU);kTr=r(hyt,"TFXLMRobertaForMaskedLM"),hyt.forEach(t),STr=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),RTr=i(le),F8=n(le,"LI",{});var QIe=s(F8);vFe=n(QIe,"STRONG",{});var pyt=s(vFe);PTr=r(pyt,"xlnet"),pyt.forEach(t),BTr=r(QIe," \u2014 "),XU=n(QIe,"A",{href:!0});var _yt=s(XU);NTr=r(_yt,"TFXLNetLMHeadModel"),_yt.forEach(t),ITr=r(QIe," (XLNet model)"),QIe.forEach(t),le.forEach(t),qTr=i(yl),T(T8.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),RVe=i(f),ic=n(f,"H2",{class:!0});var Gze=s(ic);M8=n(Gze,"A",{id:!0,class:!0,href:!0});var uyt=s(M8);FFe=n(uyt,"SPAN",{});var byt=s(FFe);T(P9.$$.fragment,byt),byt.forEach(t),uyt.forEach(t),jTr=i(Gze),TFe=n(Gze,"SPAN",{});var vyt=s(TFe);DTr=r(vyt,"TFAutoModelForCausalLM"),vyt.forEach(t),Gze.forEach(t),PVe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(B9.$$.fragment,xl),GTr=i(xl),dc=n(xl,"P",{});var qre=s(dc);OTr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zU=n(qre,"A",{href:!0});var Fyt=s(zU);VTr=r(Fyt,"from_pretrained()"),Fyt.forEach(t),XTr=r(qre," class method or the "),QU=n(qre,"A",{href:!0});var Tyt=s(QU);zTr=r(Tyt,"from_config()"),Tyt.forEach(t),QTr=r(qre,` class
method.`),qre.forEach(t),WTr=i(xl),N9=n(xl,"P",{});var Oze=s(N9);HTr=r(Oze,"This class cannot be instantiated directly using "),MFe=n(Oze,"CODE",{});var Myt=s(MFe);UTr=r(Myt,"__init__()"),Myt.forEach(t),JTr=r(Oze," (throws an error)."),Oze.forEach(t),YTr=i(xl),Rt=n(xl,"DIV",{class:!0});var jA=s(Rt);T(I9.$$.fragment,jA),KTr=i(jA),EFe=n(jA,"P",{});var Eyt=s(EFe);ZTr=r(Eyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Eyt.forEach(t),e7r=i(jA),cc=n(jA,"P",{});var jre=s(cc);o7r=r(jre,`Note:
Loading a model from its configuration file does `),CFe=n(jre,"STRONG",{});var Cyt=s(CFe);r7r=r(Cyt,"not"),Cyt.forEach(t),t7r=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(jre,"A",{href:!0});var wyt=s(WU);a7r=r(wyt,"from_pretrained()"),wyt.forEach(t),n7r=r(jre," to load the model weights."),jre.forEach(t),s7r=i(jA),T(E8.$$.fragment,jA),jA.forEach(t),l7r=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(q9.$$.fragment,$l),i7r=i($l),wFe=n($l,"P",{});var Ayt=s(wFe);d7r=r(Ayt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ayt.forEach(t),c7r=i($l),sn=n($l,"P",{});var DA=s(sn);f7r=r(DA,"The model class to instantiate is selected based on the "),AFe=n(DA,"CODE",{});var Lyt=s(AFe);m7r=r(Lyt,"model_type"),Lyt.forEach(t),g7r=r(DA,` property of the config object (either
passed as an argument or loaded from `),LFe=n(DA,"CODE",{});var yyt=s(LFe);h7r=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),p7r=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(DA,"CODE",{});var xyt=s(yFe);_7r=r(xyt,"pretrained_model_name_or_path"),xyt.forEach(t),u7r=r(DA,":"),DA.forEach(t),b7r=i($l),Me=n($l,"UL",{});var Ce=s(Me);C8=n(Ce,"LI",{});var WIe=s(C8);xFe=n(WIe,"STRONG",{});var $yt=s(xFe);v7r=r($yt,"bert"),$yt.forEach(t),F7r=r(WIe," \u2014 "),HU=n(WIe,"A",{href:!0});var kyt=s(HU);T7r=r(kyt,"TFBertLMHeadModel"),kyt.forEach(t),M7r=r(WIe," (BERT model)"),WIe.forEach(t),E7r=i(Ce),w8=n(Ce,"LI",{});var HIe=s(w8);$Fe=n(HIe,"STRONG",{});var Syt=s($Fe);C7r=r(Syt,"camembert"),Syt.forEach(t),w7r=r(HIe," \u2014 "),UU=n(HIe,"A",{href:!0});var Ryt=s(UU);A7r=r(Ryt,"TFCamembertForCausalLM"),Ryt.forEach(t),L7r=r(HIe," (CamemBERT model)"),HIe.forEach(t),y7r=i(Ce),A8=n(Ce,"LI",{});var UIe=s(A8);kFe=n(UIe,"STRONG",{});var Pyt=s(kFe);x7r=r(Pyt,"ctrl"),Pyt.forEach(t),$7r=r(UIe," \u2014 "),JU=n(UIe,"A",{href:!0});var Byt=s(JU);k7r=r(Byt,"TFCTRLLMHeadModel"),Byt.forEach(t),S7r=r(UIe," (CTRL model)"),UIe.forEach(t),R7r=i(Ce),L8=n(Ce,"LI",{});var JIe=s(L8);SFe=n(JIe,"STRONG",{});var Nyt=s(SFe);P7r=r(Nyt,"gpt2"),Nyt.forEach(t),B7r=r(JIe," \u2014 "),YU=n(JIe,"A",{href:!0});var Iyt=s(YU);N7r=r(Iyt,"TFGPT2LMHeadModel"),Iyt.forEach(t),I7r=r(JIe," (OpenAI GPT-2 model)"),JIe.forEach(t),q7r=i(Ce),y8=n(Ce,"LI",{});var YIe=s(y8);RFe=n(YIe,"STRONG",{});var qyt=s(RFe);j7r=r(qyt,"gptj"),qyt.forEach(t),D7r=r(YIe," \u2014 "),KU=n(YIe,"A",{href:!0});var jyt=s(KU);G7r=r(jyt,"TFGPTJForCausalLM"),jyt.forEach(t),O7r=r(YIe," (GPT-J model)"),YIe.forEach(t),V7r=i(Ce),x8=n(Ce,"LI",{});var KIe=s(x8);PFe=n(KIe,"STRONG",{});var Dyt=s(PFe);X7r=r(Dyt,"openai-gpt"),Dyt.forEach(t),z7r=r(KIe," \u2014 "),ZU=n(KIe,"A",{href:!0});var Gyt=s(ZU);Q7r=r(Gyt,"TFOpenAIGPTLMHeadModel"),Gyt.forEach(t),W7r=r(KIe," (OpenAI GPT model)"),KIe.forEach(t),H7r=i(Ce),$8=n(Ce,"LI",{});var ZIe=s($8);BFe=n(ZIe,"STRONG",{});var Oyt=s(BFe);U7r=r(Oyt,"opt"),Oyt.forEach(t),J7r=r(ZIe," \u2014 "),eJ=n(ZIe,"A",{href:!0});var Vyt=s(eJ);Y7r=r(Vyt,"TFOPTForCausalLM"),Vyt.forEach(t),K7r=r(ZIe," (OPT model)"),ZIe.forEach(t),Z7r=i(Ce),k8=n(Ce,"LI",{});var eqe=s(k8);NFe=n(eqe,"STRONG",{});var Xyt=s(NFe);e8r=r(Xyt,"rembert"),Xyt.forEach(t),o8r=r(eqe," \u2014 "),oJ=n(eqe,"A",{href:!0});var zyt=s(oJ);r8r=r(zyt,"TFRemBertForCausalLM"),zyt.forEach(t),t8r=r(eqe," (RemBERT model)"),eqe.forEach(t),a8r=i(Ce),S8=n(Ce,"LI",{});var oqe=s(S8);IFe=n(oqe,"STRONG",{});var Qyt=s(IFe);n8r=r(Qyt,"roberta"),Qyt.forEach(t),s8r=r(oqe," \u2014 "),rJ=n(oqe,"A",{href:!0});var Wyt=s(rJ);l8r=r(Wyt,"TFRobertaForCausalLM"),Wyt.forEach(t),i8r=r(oqe," (RoBERTa model)"),oqe.forEach(t),d8r=i(Ce),R8=n(Ce,"LI",{});var rqe=s(R8);qFe=n(rqe,"STRONG",{});var Hyt=s(qFe);c8r=r(Hyt,"roformer"),Hyt.forEach(t),f8r=r(rqe," \u2014 "),tJ=n(rqe,"A",{href:!0});var Uyt=s(tJ);m8r=r(Uyt,"TFRoFormerForCausalLM"),Uyt.forEach(t),g8r=r(rqe," (RoFormer model)"),rqe.forEach(t),h8r=i(Ce),P8=n(Ce,"LI",{});var tqe=s(P8);jFe=n(tqe,"STRONG",{});var Jyt=s(jFe);p8r=r(Jyt,"transfo-xl"),Jyt.forEach(t),_8r=r(tqe," \u2014 "),aJ=n(tqe,"A",{href:!0});var Yyt=s(aJ);u8r=r(Yyt,"TFTransfoXLLMHeadModel"),Yyt.forEach(t),b8r=r(tqe," (Transformer-XL model)"),tqe.forEach(t),v8r=i(Ce),B8=n(Ce,"LI",{});var aqe=s(B8);DFe=n(aqe,"STRONG",{});var Kyt=s(DFe);F8r=r(Kyt,"xlm"),Kyt.forEach(t),T8r=r(aqe," \u2014 "),nJ=n(aqe,"A",{href:!0});var Zyt=s(nJ);M8r=r(Zyt,"TFXLMWithLMHeadModel"),Zyt.forEach(t),E8r=r(aqe," (XLM model)"),aqe.forEach(t),C8r=i(Ce),N8=n(Ce,"LI",{});var nqe=s(N8);GFe=n(nqe,"STRONG",{});var e9t=s(GFe);w8r=r(e9t,"xlnet"),e9t.forEach(t),A8r=r(nqe," \u2014 "),sJ=n(nqe,"A",{href:!0});var o9t=s(sJ);L8r=r(o9t,"TFXLNetLMHeadModel"),o9t.forEach(t),y8r=r(nqe," (XLNet model)"),nqe.forEach(t),Ce.forEach(t),x8r=i($l),T(I8.$$.fragment,$l),$l.forEach(t),xl.forEach(t),BVe=i(f),fc=n(f,"H2",{class:!0});var Vze=s(fc);q8=n(Vze,"A",{id:!0,class:!0,href:!0});var r9t=s(q8);OFe=n(r9t,"SPAN",{});var t9t=s(OFe);T(j9.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),$8r=i(Vze),VFe=n(Vze,"SPAN",{});var a9t=s(VFe);k8r=r(a9t,"TFAutoModelForImageClassification"),a9t.forEach(t),Vze.forEach(t),NVe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(D9.$$.fragment,kl),S8r=i(kl),mc=n(kl,"P",{});var Dre=s(mc);R8r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lJ=n(Dre,"A",{href:!0});var n9t=s(lJ);P8r=r(n9t,"from_pretrained()"),n9t.forEach(t),B8r=r(Dre," class method or the "),iJ=n(Dre,"A",{href:!0});var s9t=s(iJ);N8r=r(s9t,"from_config()"),s9t.forEach(t),I8r=r(Dre,` class
method.`),Dre.forEach(t),q8r=i(kl),G9=n(kl,"P",{});var Xze=s(G9);j8r=r(Xze,"This class cannot be instantiated directly using "),XFe=n(Xze,"CODE",{});var l9t=s(XFe);D8r=r(l9t,"__init__()"),l9t.forEach(t),G8r=r(Xze," (throws an error)."),Xze.forEach(t),O8r=i(kl),Pt=n(kl,"DIV",{class:!0});var GA=s(Pt);T(O9.$$.fragment,GA),V8r=i(GA),zFe=n(GA,"P",{});var i9t=s(zFe);X8r=r(i9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),i9t.forEach(t),z8r=i(GA),gc=n(GA,"P",{});var Gre=s(gc);Q8r=r(Gre,`Note:
Loading a model from its configuration file does `),QFe=n(Gre,"STRONG",{});var d9t=s(QFe);W8r=r(d9t,"not"),d9t.forEach(t),H8r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(Gre,"A",{href:!0});var c9t=s(dJ);U8r=r(c9t,"from_pretrained()"),c9t.forEach(t),J8r=r(Gre," to load the model weights."),Gre.forEach(t),Y8r=i(GA),T(j8.$$.fragment,GA),GA.forEach(t),K8r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(V9.$$.fragment,Sl),Z8r=i(Sl),WFe=n(Sl,"P",{});var f9t=s(WFe);eMr=r(f9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f9t.forEach(t),oMr=i(Sl),ln=n(Sl,"P",{});var OA=s(ln);rMr=r(OA,"The model class to instantiate is selected based on the "),HFe=n(OA,"CODE",{});var m9t=s(HFe);tMr=r(m9t,"model_type"),m9t.forEach(t),aMr=r(OA,` property of the config object (either
passed as an argument or loaded from `),UFe=n(OA,"CODE",{});var g9t=s(UFe);nMr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),sMr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(OA,"CODE",{});var h9t=s(JFe);lMr=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),iMr=r(OA,":"),OA.forEach(t),dMr=i(Sl),dn=n(Sl,"UL",{});var VA=s(dn);D8=n(VA,"LI",{});var sqe=s(D8);YFe=n(sqe,"STRONG",{});var p9t=s(YFe);cMr=r(p9t,"convnext"),p9t.forEach(t),fMr=r(sqe," \u2014 "),cJ=n(sqe,"A",{href:!0});var _9t=s(cJ);mMr=r(_9t,"TFConvNextForImageClassification"),_9t.forEach(t),gMr=r(sqe," (ConvNeXT model)"),sqe.forEach(t),hMr=i(VA),G8=n(VA,"LI",{});var lqe=s(G8);KFe=n(lqe,"STRONG",{});var u9t=s(KFe);pMr=r(u9t,"data2vec-vision"),u9t.forEach(t),_Mr=r(lqe," \u2014 "),fJ=n(lqe,"A",{href:!0});var b9t=s(fJ);uMr=r(b9t,"TFData2VecVisionForImageClassification"),b9t.forEach(t),bMr=r(lqe," (Data2VecVision model)"),lqe.forEach(t),vMr=i(VA),O8=n(VA,"LI",{});var iqe=s(O8);ZFe=n(iqe,"STRONG",{});var v9t=s(ZFe);FMr=r(v9t,"swin"),v9t.forEach(t),TMr=r(iqe," \u2014 "),mJ=n(iqe,"A",{href:!0});var F9t=s(mJ);MMr=r(F9t,"TFSwinForImageClassification"),F9t.forEach(t),EMr=r(iqe," (Swin Transformer model)"),iqe.forEach(t),CMr=i(VA),V8=n(VA,"LI",{});var dqe=s(V8);eTe=n(dqe,"STRONG",{});var T9t=s(eTe);wMr=r(T9t,"vit"),T9t.forEach(t),AMr=r(dqe," \u2014 "),gJ=n(dqe,"A",{href:!0});var M9t=s(gJ);LMr=r(M9t,"TFViTForImageClassification"),M9t.forEach(t),yMr=r(dqe," (ViT model)"),dqe.forEach(t),VA.forEach(t),xMr=i(Sl),T(X8.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),IVe=i(f),hc=n(f,"H2",{class:!0});var zze=s(hc);z8=n(zze,"A",{id:!0,class:!0,href:!0});var E9t=s(z8);oTe=n(E9t,"SPAN",{});var C9t=s(oTe);T(X9.$$.fragment,C9t),C9t.forEach(t),E9t.forEach(t),$Mr=i(zze),rTe=n(zze,"SPAN",{});var w9t=s(rTe);kMr=r(w9t,"TFAutoModelForMaskedLM"),w9t.forEach(t),zze.forEach(t),qVe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(z9.$$.fragment,Rl),SMr=i(Rl),pc=n(Rl,"P",{});var Ore=s(pc);RMr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hJ=n(Ore,"A",{href:!0});var A9t=s(hJ);PMr=r(A9t,"from_pretrained()"),A9t.forEach(t),BMr=r(Ore," class method or the "),pJ=n(Ore,"A",{href:!0});var L9t=s(pJ);NMr=r(L9t,"from_config()"),L9t.forEach(t),IMr=r(Ore,` class
method.`),Ore.forEach(t),qMr=i(Rl),Q9=n(Rl,"P",{});var Qze=s(Q9);jMr=r(Qze,"This class cannot be instantiated directly using "),tTe=n(Qze,"CODE",{});var y9t=s(tTe);DMr=r(y9t,"__init__()"),y9t.forEach(t),GMr=r(Qze," (throws an error)."),Qze.forEach(t),OMr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var XA=s(Bt);T(W9.$$.fragment,XA),VMr=i(XA),aTe=n(XA,"P",{});var x9t=s(aTe);XMr=r(x9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x9t.forEach(t),zMr=i(XA),_c=n(XA,"P",{});var Vre=s(_c);QMr=r(Vre,`Note:
Loading a model from its configuration file does `),nTe=n(Vre,"STRONG",{});var $9t=s(nTe);WMr=r($9t,"not"),$9t.forEach(t),HMr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Vre,"A",{href:!0});var k9t=s(_J);UMr=r(k9t,"from_pretrained()"),k9t.forEach(t),JMr=r(Vre," to load the model weights."),Vre.forEach(t),YMr=i(XA),T(Q8.$$.fragment,XA),XA.forEach(t),KMr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(H9.$$.fragment,Pl),ZMr=i(Pl),sTe=n(Pl,"P",{});var S9t=s(sTe);eEr=r(S9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),S9t.forEach(t),oEr=i(Pl),cn=n(Pl,"P",{});var zA=s(cn);rEr=r(zA,"The model class to instantiate is selected based on the "),lTe=n(zA,"CODE",{});var R9t=s(lTe);tEr=r(R9t,"model_type"),R9t.forEach(t),aEr=r(zA,` property of the config object (either
passed as an argument or loaded from `),iTe=n(zA,"CODE",{});var P9t=s(iTe);nEr=r(P9t,"pretrained_model_name_or_path"),P9t.forEach(t),sEr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(zA,"CODE",{});var B9t=s(dTe);lEr=r(B9t,"pretrained_model_name_or_path"),B9t.forEach(t),iEr=r(zA,":"),zA.forEach(t),dEr=i(Pl),ie=n(Pl,"UL",{});var fe=s(ie);W8=n(fe,"LI",{});var cqe=s(W8);cTe=n(cqe,"STRONG",{});var N9t=s(cTe);cEr=r(N9t,"albert"),N9t.forEach(t),fEr=r(cqe," \u2014 "),uJ=n(cqe,"A",{href:!0});var I9t=s(uJ);mEr=r(I9t,"TFAlbertForMaskedLM"),I9t.forEach(t),gEr=r(cqe," (ALBERT model)"),cqe.forEach(t),hEr=i(fe),H8=n(fe,"LI",{});var fqe=s(H8);fTe=n(fqe,"STRONG",{});var q9t=s(fTe);pEr=r(q9t,"bert"),q9t.forEach(t),_Er=r(fqe," \u2014 "),bJ=n(fqe,"A",{href:!0});var j9t=s(bJ);uEr=r(j9t,"TFBertForMaskedLM"),j9t.forEach(t),bEr=r(fqe," (BERT model)"),fqe.forEach(t),vEr=i(fe),U8=n(fe,"LI",{});var mqe=s(U8);mTe=n(mqe,"STRONG",{});var D9t=s(mTe);FEr=r(D9t,"camembert"),D9t.forEach(t),TEr=r(mqe," \u2014 "),vJ=n(mqe,"A",{href:!0});var G9t=s(vJ);MEr=r(G9t,"TFCamembertForMaskedLM"),G9t.forEach(t),EEr=r(mqe," (CamemBERT model)"),mqe.forEach(t),CEr=i(fe),J8=n(fe,"LI",{});var gqe=s(J8);gTe=n(gqe,"STRONG",{});var O9t=s(gTe);wEr=r(O9t,"convbert"),O9t.forEach(t),AEr=r(gqe," \u2014 "),FJ=n(gqe,"A",{href:!0});var V9t=s(FJ);LEr=r(V9t,"TFConvBertForMaskedLM"),V9t.forEach(t),yEr=r(gqe," (ConvBERT model)"),gqe.forEach(t),xEr=i(fe),Y8=n(fe,"LI",{});var hqe=s(Y8);hTe=n(hqe,"STRONG",{});var X9t=s(hTe);$Er=r(X9t,"deberta"),X9t.forEach(t),kEr=r(hqe," \u2014 "),TJ=n(hqe,"A",{href:!0});var z9t=s(TJ);SEr=r(z9t,"TFDebertaForMaskedLM"),z9t.forEach(t),REr=r(hqe," (DeBERTa model)"),hqe.forEach(t),PEr=i(fe),K8=n(fe,"LI",{});var pqe=s(K8);pTe=n(pqe,"STRONG",{});var Q9t=s(pTe);BEr=r(Q9t,"deberta-v2"),Q9t.forEach(t),NEr=r(pqe," \u2014 "),MJ=n(pqe,"A",{href:!0});var W9t=s(MJ);IEr=r(W9t,"TFDebertaV2ForMaskedLM"),W9t.forEach(t),qEr=r(pqe," (DeBERTa-v2 model)"),pqe.forEach(t),jEr=i(fe),Z8=n(fe,"LI",{});var _qe=s(Z8);_Te=n(_qe,"STRONG",{});var H9t=s(_Te);DEr=r(H9t,"distilbert"),H9t.forEach(t),GEr=r(_qe," \u2014 "),EJ=n(_qe,"A",{href:!0});var U9t=s(EJ);OEr=r(U9t,"TFDistilBertForMaskedLM"),U9t.forEach(t),VEr=r(_qe," (DistilBERT model)"),_qe.forEach(t),XEr=i(fe),eM=n(fe,"LI",{});var uqe=s(eM);uTe=n(uqe,"STRONG",{});var J9t=s(uTe);zEr=r(J9t,"electra"),J9t.forEach(t),QEr=r(uqe," \u2014 "),CJ=n(uqe,"A",{href:!0});var Y9t=s(CJ);WEr=r(Y9t,"TFElectraForMaskedLM"),Y9t.forEach(t),HEr=r(uqe," (ELECTRA model)"),uqe.forEach(t),UEr=i(fe),oM=n(fe,"LI",{});var bqe=s(oM);bTe=n(bqe,"STRONG",{});var K9t=s(bTe);JEr=r(K9t,"flaubert"),K9t.forEach(t),YEr=r(bqe," \u2014 "),wJ=n(bqe,"A",{href:!0});var Z9t=s(wJ);KEr=r(Z9t,"TFFlaubertWithLMHeadModel"),Z9t.forEach(t),ZEr=r(bqe," (FlauBERT model)"),bqe.forEach(t),eCr=i(fe),rM=n(fe,"LI",{});var vqe=s(rM);vTe=n(vqe,"STRONG",{});var ext=s(vTe);oCr=r(ext,"funnel"),ext.forEach(t),rCr=r(vqe," \u2014 "),AJ=n(vqe,"A",{href:!0});var oxt=s(AJ);tCr=r(oxt,"TFFunnelForMaskedLM"),oxt.forEach(t),aCr=r(vqe," (Funnel Transformer model)"),vqe.forEach(t),nCr=i(fe),tM=n(fe,"LI",{});var Fqe=s(tM);FTe=n(Fqe,"STRONG",{});var rxt=s(FTe);sCr=r(rxt,"layoutlm"),rxt.forEach(t),lCr=r(Fqe," \u2014 "),LJ=n(Fqe,"A",{href:!0});var txt=s(LJ);iCr=r(txt,"TFLayoutLMForMaskedLM"),txt.forEach(t),dCr=r(Fqe," (LayoutLM model)"),Fqe.forEach(t),cCr=i(fe),aM=n(fe,"LI",{});var Tqe=s(aM);TTe=n(Tqe,"STRONG",{});var axt=s(TTe);fCr=r(axt,"longformer"),axt.forEach(t),mCr=r(Tqe," \u2014 "),yJ=n(Tqe,"A",{href:!0});var nxt=s(yJ);gCr=r(nxt,"TFLongformerForMaskedLM"),nxt.forEach(t),hCr=r(Tqe," (Longformer model)"),Tqe.forEach(t),pCr=i(fe),nM=n(fe,"LI",{});var Mqe=s(nM);MTe=n(Mqe,"STRONG",{});var sxt=s(MTe);_Cr=r(sxt,"mobilebert"),sxt.forEach(t),uCr=r(Mqe," \u2014 "),xJ=n(Mqe,"A",{href:!0});var lxt=s(xJ);bCr=r(lxt,"TFMobileBertForMaskedLM"),lxt.forEach(t),vCr=r(Mqe," (MobileBERT model)"),Mqe.forEach(t),FCr=i(fe),sM=n(fe,"LI",{});var Eqe=s(sM);ETe=n(Eqe,"STRONG",{});var ixt=s(ETe);TCr=r(ixt,"mpnet"),ixt.forEach(t),MCr=r(Eqe," \u2014 "),$J=n(Eqe,"A",{href:!0});var dxt=s($J);ECr=r(dxt,"TFMPNetForMaskedLM"),dxt.forEach(t),CCr=r(Eqe," (MPNet model)"),Eqe.forEach(t),wCr=i(fe),lM=n(fe,"LI",{});var Cqe=s(lM);CTe=n(Cqe,"STRONG",{});var cxt=s(CTe);ACr=r(cxt,"rembert"),cxt.forEach(t),LCr=r(Cqe," \u2014 "),kJ=n(Cqe,"A",{href:!0});var fxt=s(kJ);yCr=r(fxt,"TFRemBertForMaskedLM"),fxt.forEach(t),xCr=r(Cqe," (RemBERT model)"),Cqe.forEach(t),$Cr=i(fe),iM=n(fe,"LI",{});var wqe=s(iM);wTe=n(wqe,"STRONG",{});var mxt=s(wTe);kCr=r(mxt,"roberta"),mxt.forEach(t),SCr=r(wqe," \u2014 "),SJ=n(wqe,"A",{href:!0});var gxt=s(SJ);RCr=r(gxt,"TFRobertaForMaskedLM"),gxt.forEach(t),PCr=r(wqe," (RoBERTa model)"),wqe.forEach(t),BCr=i(fe),dM=n(fe,"LI",{});var Aqe=s(dM);ATe=n(Aqe,"STRONG",{});var hxt=s(ATe);NCr=r(hxt,"roformer"),hxt.forEach(t),ICr=r(Aqe," \u2014 "),RJ=n(Aqe,"A",{href:!0});var pxt=s(RJ);qCr=r(pxt,"TFRoFormerForMaskedLM"),pxt.forEach(t),jCr=r(Aqe," (RoFormer model)"),Aqe.forEach(t),DCr=i(fe),cM=n(fe,"LI",{});var Lqe=s(cM);LTe=n(Lqe,"STRONG",{});var _xt=s(LTe);GCr=r(_xt,"tapas"),_xt.forEach(t),OCr=r(Lqe," \u2014 "),PJ=n(Lqe,"A",{href:!0});var uxt=s(PJ);VCr=r(uxt,"TFTapasForMaskedLM"),uxt.forEach(t),XCr=r(Lqe," (TAPAS model)"),Lqe.forEach(t),zCr=i(fe),fM=n(fe,"LI",{});var yqe=s(fM);yTe=n(yqe,"STRONG",{});var bxt=s(yTe);QCr=r(bxt,"xlm"),bxt.forEach(t),WCr=r(yqe," \u2014 "),BJ=n(yqe,"A",{href:!0});var vxt=s(BJ);HCr=r(vxt,"TFXLMWithLMHeadModel"),vxt.forEach(t),UCr=r(yqe," (XLM model)"),yqe.forEach(t),JCr=i(fe),mM=n(fe,"LI",{});var xqe=s(mM);xTe=n(xqe,"STRONG",{});var Fxt=s(xTe);YCr=r(Fxt,"xlm-roberta"),Fxt.forEach(t),KCr=r(xqe," \u2014 "),NJ=n(xqe,"A",{href:!0});var Txt=s(NJ);ZCr=r(Txt,"TFXLMRobertaForMaskedLM"),Txt.forEach(t),e3r=r(xqe," (XLM-RoBERTa model)"),xqe.forEach(t),fe.forEach(t),o3r=i(Pl),T(gM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),jVe=i(f),uc=n(f,"H2",{class:!0});var Wze=s(uc);hM=n(Wze,"A",{id:!0,class:!0,href:!0});var Mxt=s(hM);$Te=n(Mxt,"SPAN",{});var Ext=s($Te);T(U9.$$.fragment,Ext),Ext.forEach(t),Mxt.forEach(t),r3r=i(Wze),kTe=n(Wze,"SPAN",{});var Cxt=s(kTe);t3r=r(Cxt,"TFAutoModelForSeq2SeqLM"),Cxt.forEach(t),Wze.forEach(t),DVe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(J9.$$.fragment,Bl),a3r=i(Bl),bc=n(Bl,"P",{});var Xre=s(bc);n3r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IJ=n(Xre,"A",{href:!0});var wxt=s(IJ);s3r=r(wxt,"from_pretrained()"),wxt.forEach(t),l3r=r(Xre," class method or the "),qJ=n(Xre,"A",{href:!0});var Axt=s(qJ);i3r=r(Axt,"from_config()"),Axt.forEach(t),d3r=r(Xre,` class
method.`),Xre.forEach(t),c3r=i(Bl),Y9=n(Bl,"P",{});var Hze=s(Y9);f3r=r(Hze,"This class cannot be instantiated directly using "),STe=n(Hze,"CODE",{});var Lxt=s(STe);m3r=r(Lxt,"__init__()"),Lxt.forEach(t),g3r=r(Hze," (throws an error)."),Hze.forEach(t),h3r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var QA=s(Nt);T(K9.$$.fragment,QA),p3r=i(QA),RTe=n(QA,"P",{});var yxt=s(RTe);_3r=r(yxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yxt.forEach(t),u3r=i(QA),vc=n(QA,"P",{});var zre=s(vc);b3r=r(zre,`Note:
Loading a model from its configuration file does `),PTe=n(zre,"STRONG",{});var xxt=s(PTe);v3r=r(xxt,"not"),xxt.forEach(t),F3r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(zre,"A",{href:!0});var $xt=s(jJ);T3r=r($xt,"from_pretrained()"),$xt.forEach(t),M3r=r(zre," to load the model weights."),zre.forEach(t),E3r=i(QA),T(pM.$$.fragment,QA),QA.forEach(t),C3r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Nl=s(Rr);T(Z9.$$.fragment,Nl),w3r=i(Nl),BTe=n(Nl,"P",{});var kxt=s(BTe);A3r=r(kxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kxt.forEach(t),L3r=i(Nl),fn=n(Nl,"P",{});var WA=s(fn);y3r=r(WA,"The model class to instantiate is selected based on the "),NTe=n(WA,"CODE",{});var Sxt=s(NTe);x3r=r(Sxt,"model_type"),Sxt.forEach(t),$3r=r(WA,` property of the config object (either
passed as an argument or loaded from `),ITe=n(WA,"CODE",{});var Rxt=s(ITe);k3r=r(Rxt,"pretrained_model_name_or_path"),Rxt.forEach(t),S3r=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(WA,"CODE",{});var Pxt=s(qTe);R3r=r(Pxt,"pretrained_model_name_or_path"),Pxt.forEach(t),P3r=r(WA,":"),WA.forEach(t),B3r=i(Nl),ye=n(Nl,"UL",{});var Ne=s(ye);_M=n(Ne,"LI",{});var $qe=s(_M);jTe=n($qe,"STRONG",{});var Bxt=s(jTe);N3r=r(Bxt,"bart"),Bxt.forEach(t),I3r=r($qe," \u2014 "),DJ=n($qe,"A",{href:!0});var Nxt=s(DJ);q3r=r(Nxt,"TFBartForConditionalGeneration"),Nxt.forEach(t),j3r=r($qe," (BART model)"),$qe.forEach(t),D3r=i(Ne),uM=n(Ne,"LI",{});var kqe=s(uM);DTe=n(kqe,"STRONG",{});var Ixt=s(DTe);G3r=r(Ixt,"blenderbot"),Ixt.forEach(t),O3r=r(kqe," \u2014 "),GJ=n(kqe,"A",{href:!0});var qxt=s(GJ);V3r=r(qxt,"TFBlenderbotForConditionalGeneration"),qxt.forEach(t),X3r=r(kqe," (Blenderbot model)"),kqe.forEach(t),z3r=i(Ne),bM=n(Ne,"LI",{});var Sqe=s(bM);GTe=n(Sqe,"STRONG",{});var jxt=s(GTe);Q3r=r(jxt,"blenderbot-small"),jxt.forEach(t),W3r=r(Sqe," \u2014 "),OJ=n(Sqe,"A",{href:!0});var Dxt=s(OJ);H3r=r(Dxt,"TFBlenderbotSmallForConditionalGeneration"),Dxt.forEach(t),U3r=r(Sqe," (BlenderbotSmall model)"),Sqe.forEach(t),J3r=i(Ne),vM=n(Ne,"LI",{});var Rqe=s(vM);OTe=n(Rqe,"STRONG",{});var Gxt=s(OTe);Y3r=r(Gxt,"encoder-decoder"),Gxt.forEach(t),K3r=r(Rqe," \u2014 "),VJ=n(Rqe,"A",{href:!0});var Oxt=s(VJ);Z3r=r(Oxt,"TFEncoderDecoderModel"),Oxt.forEach(t),e0r=r(Rqe," (Encoder decoder model)"),Rqe.forEach(t),o0r=i(Ne),FM=n(Ne,"LI",{});var Pqe=s(FM);VTe=n(Pqe,"STRONG",{});var Vxt=s(VTe);r0r=r(Vxt,"led"),Vxt.forEach(t),t0r=r(Pqe," \u2014 "),XJ=n(Pqe,"A",{href:!0});var Xxt=s(XJ);a0r=r(Xxt,"TFLEDForConditionalGeneration"),Xxt.forEach(t),n0r=r(Pqe," (LED model)"),Pqe.forEach(t),s0r=i(Ne),TM=n(Ne,"LI",{});var Bqe=s(TM);XTe=n(Bqe,"STRONG",{});var zxt=s(XTe);l0r=r(zxt,"marian"),zxt.forEach(t),i0r=r(Bqe," \u2014 "),zJ=n(Bqe,"A",{href:!0});var Qxt=s(zJ);d0r=r(Qxt,"TFMarianMTModel"),Qxt.forEach(t),c0r=r(Bqe," (Marian model)"),Bqe.forEach(t),f0r=i(Ne),MM=n(Ne,"LI",{});var Nqe=s(MM);zTe=n(Nqe,"STRONG",{});var Wxt=s(zTe);m0r=r(Wxt,"mbart"),Wxt.forEach(t),g0r=r(Nqe," \u2014 "),QJ=n(Nqe,"A",{href:!0});var Hxt=s(QJ);h0r=r(Hxt,"TFMBartForConditionalGeneration"),Hxt.forEach(t),p0r=r(Nqe," (mBART model)"),Nqe.forEach(t),_0r=i(Ne),EM=n(Ne,"LI",{});var Iqe=s(EM);QTe=n(Iqe,"STRONG",{});var Uxt=s(QTe);u0r=r(Uxt,"mt5"),Uxt.forEach(t),b0r=r(Iqe," \u2014 "),WJ=n(Iqe,"A",{href:!0});var Jxt=s(WJ);v0r=r(Jxt,"TFMT5ForConditionalGeneration"),Jxt.forEach(t),F0r=r(Iqe," (MT5 model)"),Iqe.forEach(t),T0r=i(Ne),CM=n(Ne,"LI",{});var qqe=s(CM);WTe=n(qqe,"STRONG",{});var Yxt=s(WTe);M0r=r(Yxt,"pegasus"),Yxt.forEach(t),E0r=r(qqe," \u2014 "),HJ=n(qqe,"A",{href:!0});var Kxt=s(HJ);C0r=r(Kxt,"TFPegasusForConditionalGeneration"),Kxt.forEach(t),w0r=r(qqe," (Pegasus model)"),qqe.forEach(t),A0r=i(Ne),wM=n(Ne,"LI",{});var jqe=s(wM);HTe=n(jqe,"STRONG",{});var Zxt=s(HTe);L0r=r(Zxt,"t5"),Zxt.forEach(t),y0r=r(jqe," \u2014 "),UJ=n(jqe,"A",{href:!0});var e$t=s(UJ);x0r=r(e$t,"TFT5ForConditionalGeneration"),e$t.forEach(t),$0r=r(jqe," (T5 model)"),jqe.forEach(t),Ne.forEach(t),k0r=i(Nl),T(AM.$$.fragment,Nl),Nl.forEach(t),Bl.forEach(t),GVe=i(f),Fc=n(f,"H2",{class:!0});var Uze=s(Fc);LM=n(Uze,"A",{id:!0,class:!0,href:!0});var o$t=s(LM);UTe=n(o$t,"SPAN",{});var r$t=s(UTe);T(ex.$$.fragment,r$t),r$t.forEach(t),o$t.forEach(t),S0r=i(Uze),JTe=n(Uze,"SPAN",{});var t$t=s(JTe);R0r=r(t$t,"TFAutoModelForSequenceClassification"),t$t.forEach(t),Uze.forEach(t),OVe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(ox.$$.fragment,Il),P0r=i(Il),Tc=n(Il,"P",{});var Qre=s(Tc);B0r=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JJ=n(Qre,"A",{href:!0});var a$t=s(JJ);N0r=r(a$t,"from_pretrained()"),a$t.forEach(t),I0r=r(Qre," class method or the "),YJ=n(Qre,"A",{href:!0});var n$t=s(YJ);q0r=r(n$t,"from_config()"),n$t.forEach(t),j0r=r(Qre,` class
method.`),Qre.forEach(t),D0r=i(Il),rx=n(Il,"P",{});var Jze=s(rx);G0r=r(Jze,"This class cannot be instantiated directly using "),YTe=n(Jze,"CODE",{});var s$t=s(YTe);O0r=r(s$t,"__init__()"),s$t.forEach(t),V0r=r(Jze," (throws an error)."),Jze.forEach(t),X0r=i(Il),It=n(Il,"DIV",{class:!0});var HA=s(It);T(tx.$$.fragment,HA),z0r=i(HA),KTe=n(HA,"P",{});var l$t=s(KTe);Q0r=r(l$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l$t.forEach(t),W0r=i(HA),Mc=n(HA,"P",{});var Wre=s(Mc);H0r=r(Wre,`Note:
Loading a model from its configuration file does `),ZTe=n(Wre,"STRONG",{});var i$t=s(ZTe);U0r=r(i$t,"not"),i$t.forEach(t),J0r=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(Wre,"A",{href:!0});var d$t=s(KJ);Y0r=r(d$t,"from_pretrained()"),d$t.forEach(t),K0r=r(Wre," to load the model weights."),Wre.forEach(t),Z0r=i(HA),T(yM.$$.fragment,HA),HA.forEach(t),ewr=i(Il),Pr=n(Il,"DIV",{class:!0});var ql=s(Pr);T(ax.$$.fragment,ql),owr=i(ql),e7e=n(ql,"P",{});var c$t=s(e7e);rwr=r(c$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c$t.forEach(t),twr=i(ql),mn=n(ql,"P",{});var UA=s(mn);awr=r(UA,"The model class to instantiate is selected based on the "),o7e=n(UA,"CODE",{});var f$t=s(o7e);nwr=r(f$t,"model_type"),f$t.forEach(t),swr=r(UA,` property of the config object (either
passed as an argument or loaded from `),r7e=n(UA,"CODE",{});var m$t=s(r7e);lwr=r(m$t,"pretrained_model_name_or_path"),m$t.forEach(t),iwr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=n(UA,"CODE",{});var g$t=s(t7e);dwr=r(g$t,"pretrained_model_name_or_path"),g$t.forEach(t),cwr=r(UA,":"),UA.forEach(t),fwr=i(ql),te=n(ql,"UL",{});var ne=s(te);xM=n(ne,"LI",{});var Dqe=s(xM);a7e=n(Dqe,"STRONG",{});var h$t=s(a7e);mwr=r(h$t,"albert"),h$t.forEach(t),gwr=r(Dqe," \u2014 "),ZJ=n(Dqe,"A",{href:!0});var p$t=s(ZJ);hwr=r(p$t,"TFAlbertForSequenceClassification"),p$t.forEach(t),pwr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),_wr=i(ne),$M=n(ne,"LI",{});var Gqe=s($M);n7e=n(Gqe,"STRONG",{});var _$t=s(n7e);uwr=r(_$t,"bert"),_$t.forEach(t),bwr=r(Gqe," \u2014 "),eY=n(Gqe,"A",{href:!0});var u$t=s(eY);vwr=r(u$t,"TFBertForSequenceClassification"),u$t.forEach(t),Fwr=r(Gqe," (BERT model)"),Gqe.forEach(t),Twr=i(ne),kM=n(ne,"LI",{});var Oqe=s(kM);s7e=n(Oqe,"STRONG",{});var b$t=s(s7e);Mwr=r(b$t,"camembert"),b$t.forEach(t),Ewr=r(Oqe," \u2014 "),oY=n(Oqe,"A",{href:!0});var v$t=s(oY);Cwr=r(v$t,"TFCamembertForSequenceClassification"),v$t.forEach(t),wwr=r(Oqe," (CamemBERT model)"),Oqe.forEach(t),Awr=i(ne),SM=n(ne,"LI",{});var Vqe=s(SM);l7e=n(Vqe,"STRONG",{});var F$t=s(l7e);Lwr=r(F$t,"convbert"),F$t.forEach(t),ywr=r(Vqe," \u2014 "),rY=n(Vqe,"A",{href:!0});var T$t=s(rY);xwr=r(T$t,"TFConvBertForSequenceClassification"),T$t.forEach(t),$wr=r(Vqe," (ConvBERT model)"),Vqe.forEach(t),kwr=i(ne),RM=n(ne,"LI",{});var Xqe=s(RM);i7e=n(Xqe,"STRONG",{});var M$t=s(i7e);Swr=r(M$t,"ctrl"),M$t.forEach(t),Rwr=r(Xqe," \u2014 "),tY=n(Xqe,"A",{href:!0});var E$t=s(tY);Pwr=r(E$t,"TFCTRLForSequenceClassification"),E$t.forEach(t),Bwr=r(Xqe," (CTRL model)"),Xqe.forEach(t),Nwr=i(ne),PM=n(ne,"LI",{});var zqe=s(PM);d7e=n(zqe,"STRONG",{});var C$t=s(d7e);Iwr=r(C$t,"deberta"),C$t.forEach(t),qwr=r(zqe," \u2014 "),aY=n(zqe,"A",{href:!0});var w$t=s(aY);jwr=r(w$t,"TFDebertaForSequenceClassification"),w$t.forEach(t),Dwr=r(zqe," (DeBERTa model)"),zqe.forEach(t),Gwr=i(ne),BM=n(ne,"LI",{});var Qqe=s(BM);c7e=n(Qqe,"STRONG",{});var A$t=s(c7e);Owr=r(A$t,"deberta-v2"),A$t.forEach(t),Vwr=r(Qqe," \u2014 "),nY=n(Qqe,"A",{href:!0});var L$t=s(nY);Xwr=r(L$t,"TFDebertaV2ForSequenceClassification"),L$t.forEach(t),zwr=r(Qqe," (DeBERTa-v2 model)"),Qqe.forEach(t),Qwr=i(ne),NM=n(ne,"LI",{});var Wqe=s(NM);f7e=n(Wqe,"STRONG",{});var y$t=s(f7e);Wwr=r(y$t,"distilbert"),y$t.forEach(t),Hwr=r(Wqe," \u2014 "),sY=n(Wqe,"A",{href:!0});var x$t=s(sY);Uwr=r(x$t,"TFDistilBertForSequenceClassification"),x$t.forEach(t),Jwr=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),Ywr=i(ne),IM=n(ne,"LI",{});var Hqe=s(IM);m7e=n(Hqe,"STRONG",{});var $$t=s(m7e);Kwr=r($$t,"electra"),$$t.forEach(t),Zwr=r(Hqe," \u2014 "),lY=n(Hqe,"A",{href:!0});var k$t=s(lY);eAr=r(k$t,"TFElectraForSequenceClassification"),k$t.forEach(t),oAr=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),rAr=i(ne),qM=n(ne,"LI",{});var Uqe=s(qM);g7e=n(Uqe,"STRONG",{});var S$t=s(g7e);tAr=r(S$t,"flaubert"),S$t.forEach(t),aAr=r(Uqe," \u2014 "),iY=n(Uqe,"A",{href:!0});var R$t=s(iY);nAr=r(R$t,"TFFlaubertForSequenceClassification"),R$t.forEach(t),sAr=r(Uqe," (FlauBERT model)"),Uqe.forEach(t),lAr=i(ne),jM=n(ne,"LI",{});var Jqe=s(jM);h7e=n(Jqe,"STRONG",{});var P$t=s(h7e);iAr=r(P$t,"funnel"),P$t.forEach(t),dAr=r(Jqe," \u2014 "),dY=n(Jqe,"A",{href:!0});var B$t=s(dY);cAr=r(B$t,"TFFunnelForSequenceClassification"),B$t.forEach(t),fAr=r(Jqe," (Funnel Transformer model)"),Jqe.forEach(t),mAr=i(ne),DM=n(ne,"LI",{});var Yqe=s(DM);p7e=n(Yqe,"STRONG",{});var N$t=s(p7e);gAr=r(N$t,"gpt2"),N$t.forEach(t),hAr=r(Yqe," \u2014 "),cY=n(Yqe,"A",{href:!0});var I$t=s(cY);pAr=r(I$t,"TFGPT2ForSequenceClassification"),I$t.forEach(t),_Ar=r(Yqe," (OpenAI GPT-2 model)"),Yqe.forEach(t),uAr=i(ne),GM=n(ne,"LI",{});var Kqe=s(GM);_7e=n(Kqe,"STRONG",{});var q$t=s(_7e);bAr=r(q$t,"gptj"),q$t.forEach(t),vAr=r(Kqe," \u2014 "),fY=n(Kqe,"A",{href:!0});var j$t=s(fY);FAr=r(j$t,"TFGPTJForSequenceClassification"),j$t.forEach(t),TAr=r(Kqe," (GPT-J model)"),Kqe.forEach(t),MAr=i(ne),OM=n(ne,"LI",{});var Zqe=s(OM);u7e=n(Zqe,"STRONG",{});var D$t=s(u7e);EAr=r(D$t,"layoutlm"),D$t.forEach(t),CAr=r(Zqe," \u2014 "),mY=n(Zqe,"A",{href:!0});var G$t=s(mY);wAr=r(G$t,"TFLayoutLMForSequenceClassification"),G$t.forEach(t),AAr=r(Zqe," (LayoutLM model)"),Zqe.forEach(t),LAr=i(ne),VM=n(ne,"LI",{});var eje=s(VM);b7e=n(eje,"STRONG",{});var O$t=s(b7e);yAr=r(O$t,"longformer"),O$t.forEach(t),xAr=r(eje," \u2014 "),gY=n(eje,"A",{href:!0});var V$t=s(gY);$Ar=r(V$t,"TFLongformerForSequenceClassification"),V$t.forEach(t),kAr=r(eje," (Longformer model)"),eje.forEach(t),SAr=i(ne),XM=n(ne,"LI",{});var oje=s(XM);v7e=n(oje,"STRONG",{});var X$t=s(v7e);RAr=r(X$t,"mobilebert"),X$t.forEach(t),PAr=r(oje," \u2014 "),hY=n(oje,"A",{href:!0});var z$t=s(hY);BAr=r(z$t,"TFMobileBertForSequenceClassification"),z$t.forEach(t),NAr=r(oje," (MobileBERT model)"),oje.forEach(t),IAr=i(ne),zM=n(ne,"LI",{});var rje=s(zM);F7e=n(rje,"STRONG",{});var Q$t=s(F7e);qAr=r(Q$t,"mpnet"),Q$t.forEach(t),jAr=r(rje," \u2014 "),pY=n(rje,"A",{href:!0});var W$t=s(pY);DAr=r(W$t,"TFMPNetForSequenceClassification"),W$t.forEach(t),GAr=r(rje," (MPNet model)"),rje.forEach(t),OAr=i(ne),QM=n(ne,"LI",{});var tje=s(QM);T7e=n(tje,"STRONG",{});var H$t=s(T7e);VAr=r(H$t,"openai-gpt"),H$t.forEach(t),XAr=r(tje," \u2014 "),_Y=n(tje,"A",{href:!0});var U$t=s(_Y);zAr=r(U$t,"TFOpenAIGPTForSequenceClassification"),U$t.forEach(t),QAr=r(tje," (OpenAI GPT model)"),tje.forEach(t),WAr=i(ne),WM=n(ne,"LI",{});var aje=s(WM);M7e=n(aje,"STRONG",{});var J$t=s(M7e);HAr=r(J$t,"rembert"),J$t.forEach(t),UAr=r(aje," \u2014 "),uY=n(aje,"A",{href:!0});var Y$t=s(uY);JAr=r(Y$t,"TFRemBertForSequenceClassification"),Y$t.forEach(t),YAr=r(aje," (RemBERT model)"),aje.forEach(t),KAr=i(ne),HM=n(ne,"LI",{});var nje=s(HM);E7e=n(nje,"STRONG",{});var K$t=s(E7e);ZAr=r(K$t,"roberta"),K$t.forEach(t),e6r=r(nje," \u2014 "),bY=n(nje,"A",{href:!0});var Z$t=s(bY);o6r=r(Z$t,"TFRobertaForSequenceClassification"),Z$t.forEach(t),r6r=r(nje," (RoBERTa model)"),nje.forEach(t),t6r=i(ne),UM=n(ne,"LI",{});var sje=s(UM);C7e=n(sje,"STRONG",{});var ekt=s(C7e);a6r=r(ekt,"roformer"),ekt.forEach(t),n6r=r(sje," \u2014 "),vY=n(sje,"A",{href:!0});var okt=s(vY);s6r=r(okt,"TFRoFormerForSequenceClassification"),okt.forEach(t),l6r=r(sje," (RoFormer model)"),sje.forEach(t),i6r=i(ne),JM=n(ne,"LI",{});var lje=s(JM);w7e=n(lje,"STRONG",{});var rkt=s(w7e);d6r=r(rkt,"tapas"),rkt.forEach(t),c6r=r(lje," \u2014 "),FY=n(lje,"A",{href:!0});var tkt=s(FY);f6r=r(tkt,"TFTapasForSequenceClassification"),tkt.forEach(t),m6r=r(lje," (TAPAS model)"),lje.forEach(t),g6r=i(ne),YM=n(ne,"LI",{});var ije=s(YM);A7e=n(ije,"STRONG",{});var akt=s(A7e);h6r=r(akt,"transfo-xl"),akt.forEach(t),p6r=r(ije," \u2014 "),TY=n(ije,"A",{href:!0});var nkt=s(TY);_6r=r(nkt,"TFTransfoXLForSequenceClassification"),nkt.forEach(t),u6r=r(ije," (Transformer-XL model)"),ije.forEach(t),b6r=i(ne),KM=n(ne,"LI",{});var dje=s(KM);L7e=n(dje,"STRONG",{});var skt=s(L7e);v6r=r(skt,"xlm"),skt.forEach(t),F6r=r(dje," \u2014 "),MY=n(dje,"A",{href:!0});var lkt=s(MY);T6r=r(lkt,"TFXLMForSequenceClassification"),lkt.forEach(t),M6r=r(dje," (XLM model)"),dje.forEach(t),E6r=i(ne),ZM=n(ne,"LI",{});var cje=s(ZM);y7e=n(cje,"STRONG",{});var ikt=s(y7e);C6r=r(ikt,"xlm-roberta"),ikt.forEach(t),w6r=r(cje," \u2014 "),EY=n(cje,"A",{href:!0});var dkt=s(EY);A6r=r(dkt,"TFXLMRobertaForSequenceClassification"),dkt.forEach(t),L6r=r(cje," (XLM-RoBERTa model)"),cje.forEach(t),y6r=i(ne),eE=n(ne,"LI",{});var fje=s(eE);x7e=n(fje,"STRONG",{});var ckt=s(x7e);x6r=r(ckt,"xlnet"),ckt.forEach(t),$6r=r(fje," \u2014 "),CY=n(fje,"A",{href:!0});var fkt=s(CY);k6r=r(fkt,"TFXLNetForSequenceClassification"),fkt.forEach(t),S6r=r(fje," (XLNet model)"),fje.forEach(t),ne.forEach(t),R6r=i(ql),T(oE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),VVe=i(f),Ec=n(f,"H2",{class:!0});var Yze=s(Ec);rE=n(Yze,"A",{id:!0,class:!0,href:!0});var mkt=s(rE);$7e=n(mkt,"SPAN",{});var gkt=s($7e);T(nx.$$.fragment,gkt),gkt.forEach(t),mkt.forEach(t),P6r=i(Yze),k7e=n(Yze,"SPAN",{});var hkt=s(k7e);B6r=r(hkt,"TFAutoModelForMultipleChoice"),hkt.forEach(t),Yze.forEach(t),XVe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(sx.$$.fragment,jl),N6r=i(jl),Cc=n(jl,"P",{});var Hre=s(Cc);I6r=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wY=n(Hre,"A",{href:!0});var pkt=s(wY);q6r=r(pkt,"from_pretrained()"),pkt.forEach(t),j6r=r(Hre," class method or the "),AY=n(Hre,"A",{href:!0});var _kt=s(AY);D6r=r(_kt,"from_config()"),_kt.forEach(t),G6r=r(Hre,` class
method.`),Hre.forEach(t),O6r=i(jl),lx=n(jl,"P",{});var Kze=s(lx);V6r=r(Kze,"This class cannot be instantiated directly using "),S7e=n(Kze,"CODE",{});var ukt=s(S7e);X6r=r(ukt,"__init__()"),ukt.forEach(t),z6r=r(Kze," (throws an error)."),Kze.forEach(t),Q6r=i(jl),qt=n(jl,"DIV",{class:!0});var JA=s(qt);T(ix.$$.fragment,JA),W6r=i(JA),R7e=n(JA,"P",{});var bkt=s(R7e);H6r=r(bkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bkt.forEach(t),U6r=i(JA),wc=n(JA,"P",{});var Ure=s(wc);J6r=r(Ure,`Note:
Loading a model from its configuration file does `),P7e=n(Ure,"STRONG",{});var vkt=s(P7e);Y6r=r(vkt,"not"),vkt.forEach(t),K6r=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(Ure,"A",{href:!0});var Fkt=s(LY);Z6r=r(Fkt,"from_pretrained()"),Fkt.forEach(t),eLr=r(Ure," to load the model weights."),Ure.forEach(t),oLr=i(JA),T(tE.$$.fragment,JA),JA.forEach(t),rLr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(dx.$$.fragment,Dl),tLr=i(Dl),B7e=n(Dl,"P",{});var Tkt=s(B7e);aLr=r(Tkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tkt.forEach(t),nLr=i(Dl),gn=n(Dl,"P",{});var YA=s(gn);sLr=r(YA,"The model class to instantiate is selected based on the "),N7e=n(YA,"CODE",{});var Mkt=s(N7e);lLr=r(Mkt,"model_type"),Mkt.forEach(t),iLr=r(YA,` property of the config object (either
passed as an argument or loaded from `),I7e=n(YA,"CODE",{});var Ekt=s(I7e);dLr=r(Ekt,"pretrained_model_name_or_path"),Ekt.forEach(t),cLr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(YA,"CODE",{});var Ckt=s(q7e);fLr=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),mLr=r(YA,":"),YA.forEach(t),gLr=i(Dl),_e=n(Dl,"UL",{});var Fe=s(_e);aE=n(Fe,"LI",{});var mje=s(aE);j7e=n(mje,"STRONG",{});var wkt=s(j7e);hLr=r(wkt,"albert"),wkt.forEach(t),pLr=r(mje," \u2014 "),yY=n(mje,"A",{href:!0});var Akt=s(yY);_Lr=r(Akt,"TFAlbertForMultipleChoice"),Akt.forEach(t),uLr=r(mje," (ALBERT model)"),mje.forEach(t),bLr=i(Fe),nE=n(Fe,"LI",{});var gje=s(nE);D7e=n(gje,"STRONG",{});var Lkt=s(D7e);vLr=r(Lkt,"bert"),Lkt.forEach(t),FLr=r(gje," \u2014 "),xY=n(gje,"A",{href:!0});var ykt=s(xY);TLr=r(ykt,"TFBertForMultipleChoice"),ykt.forEach(t),MLr=r(gje," (BERT model)"),gje.forEach(t),ELr=i(Fe),sE=n(Fe,"LI",{});var hje=s(sE);G7e=n(hje,"STRONG",{});var xkt=s(G7e);CLr=r(xkt,"camembert"),xkt.forEach(t),wLr=r(hje," \u2014 "),$Y=n(hje,"A",{href:!0});var $kt=s($Y);ALr=r($kt,"TFCamembertForMultipleChoice"),$kt.forEach(t),LLr=r(hje," (CamemBERT model)"),hje.forEach(t),yLr=i(Fe),lE=n(Fe,"LI",{});var pje=s(lE);O7e=n(pje,"STRONG",{});var kkt=s(O7e);xLr=r(kkt,"convbert"),kkt.forEach(t),$Lr=r(pje," \u2014 "),kY=n(pje,"A",{href:!0});var Skt=s(kY);kLr=r(Skt,"TFConvBertForMultipleChoice"),Skt.forEach(t),SLr=r(pje," (ConvBERT model)"),pje.forEach(t),RLr=i(Fe),iE=n(Fe,"LI",{});var _je=s(iE);V7e=n(_je,"STRONG",{});var Rkt=s(V7e);PLr=r(Rkt,"distilbert"),Rkt.forEach(t),BLr=r(_je," \u2014 "),SY=n(_je,"A",{href:!0});var Pkt=s(SY);NLr=r(Pkt,"TFDistilBertForMultipleChoice"),Pkt.forEach(t),ILr=r(_je," (DistilBERT model)"),_je.forEach(t),qLr=i(Fe),dE=n(Fe,"LI",{});var uje=s(dE);X7e=n(uje,"STRONG",{});var Bkt=s(X7e);jLr=r(Bkt,"electra"),Bkt.forEach(t),DLr=r(uje," \u2014 "),RY=n(uje,"A",{href:!0});var Nkt=s(RY);GLr=r(Nkt,"TFElectraForMultipleChoice"),Nkt.forEach(t),OLr=r(uje," (ELECTRA model)"),uje.forEach(t),VLr=i(Fe),cE=n(Fe,"LI",{});var bje=s(cE);z7e=n(bje,"STRONG",{});var Ikt=s(z7e);XLr=r(Ikt,"flaubert"),Ikt.forEach(t),zLr=r(bje," \u2014 "),PY=n(bje,"A",{href:!0});var qkt=s(PY);QLr=r(qkt,"TFFlaubertForMultipleChoice"),qkt.forEach(t),WLr=r(bje," (FlauBERT model)"),bje.forEach(t),HLr=i(Fe),fE=n(Fe,"LI",{});var vje=s(fE);Q7e=n(vje,"STRONG",{});var jkt=s(Q7e);ULr=r(jkt,"funnel"),jkt.forEach(t),JLr=r(vje," \u2014 "),BY=n(vje,"A",{href:!0});var Dkt=s(BY);YLr=r(Dkt,"TFFunnelForMultipleChoice"),Dkt.forEach(t),KLr=r(vje," (Funnel Transformer model)"),vje.forEach(t),ZLr=i(Fe),mE=n(Fe,"LI",{});var Fje=s(mE);W7e=n(Fje,"STRONG",{});var Gkt=s(W7e);eyr=r(Gkt,"longformer"),Gkt.forEach(t),oyr=r(Fje," \u2014 "),NY=n(Fje,"A",{href:!0});var Okt=s(NY);ryr=r(Okt,"TFLongformerForMultipleChoice"),Okt.forEach(t),tyr=r(Fje," (Longformer model)"),Fje.forEach(t),ayr=i(Fe),gE=n(Fe,"LI",{});var Tje=s(gE);H7e=n(Tje,"STRONG",{});var Vkt=s(H7e);nyr=r(Vkt,"mobilebert"),Vkt.forEach(t),syr=r(Tje," \u2014 "),IY=n(Tje,"A",{href:!0});var Xkt=s(IY);lyr=r(Xkt,"TFMobileBertForMultipleChoice"),Xkt.forEach(t),iyr=r(Tje," (MobileBERT model)"),Tje.forEach(t),dyr=i(Fe),hE=n(Fe,"LI",{});var Mje=s(hE);U7e=n(Mje,"STRONG",{});var zkt=s(U7e);cyr=r(zkt,"mpnet"),zkt.forEach(t),fyr=r(Mje," \u2014 "),qY=n(Mje,"A",{href:!0});var Qkt=s(qY);myr=r(Qkt,"TFMPNetForMultipleChoice"),Qkt.forEach(t),gyr=r(Mje," (MPNet model)"),Mje.forEach(t),hyr=i(Fe),pE=n(Fe,"LI",{});var Eje=s(pE);J7e=n(Eje,"STRONG",{});var Wkt=s(J7e);pyr=r(Wkt,"rembert"),Wkt.forEach(t),_yr=r(Eje," \u2014 "),jY=n(Eje,"A",{href:!0});var Hkt=s(jY);uyr=r(Hkt,"TFRemBertForMultipleChoice"),Hkt.forEach(t),byr=r(Eje," (RemBERT model)"),Eje.forEach(t),vyr=i(Fe),_E=n(Fe,"LI",{});var Cje=s(_E);Y7e=n(Cje,"STRONG",{});var Ukt=s(Y7e);Fyr=r(Ukt,"roberta"),Ukt.forEach(t),Tyr=r(Cje," \u2014 "),DY=n(Cje,"A",{href:!0});var Jkt=s(DY);Myr=r(Jkt,"TFRobertaForMultipleChoice"),Jkt.forEach(t),Eyr=r(Cje," (RoBERTa model)"),Cje.forEach(t),Cyr=i(Fe),uE=n(Fe,"LI",{});var wje=s(uE);K7e=n(wje,"STRONG",{});var Ykt=s(K7e);wyr=r(Ykt,"roformer"),Ykt.forEach(t),Ayr=r(wje," \u2014 "),GY=n(wje,"A",{href:!0});var Kkt=s(GY);Lyr=r(Kkt,"TFRoFormerForMultipleChoice"),Kkt.forEach(t),yyr=r(wje," (RoFormer model)"),wje.forEach(t),xyr=i(Fe),bE=n(Fe,"LI",{});var Aje=s(bE);Z7e=n(Aje,"STRONG",{});var Zkt=s(Z7e);$yr=r(Zkt,"xlm"),Zkt.forEach(t),kyr=r(Aje," \u2014 "),OY=n(Aje,"A",{href:!0});var eSt=s(OY);Syr=r(eSt,"TFXLMForMultipleChoice"),eSt.forEach(t),Ryr=r(Aje," (XLM model)"),Aje.forEach(t),Pyr=i(Fe),vE=n(Fe,"LI",{});var Lje=s(vE);e8e=n(Lje,"STRONG",{});var oSt=s(e8e);Byr=r(oSt,"xlm-roberta"),oSt.forEach(t),Nyr=r(Lje," \u2014 "),VY=n(Lje,"A",{href:!0});var rSt=s(VY);Iyr=r(rSt,"TFXLMRobertaForMultipleChoice"),rSt.forEach(t),qyr=r(Lje," (XLM-RoBERTa model)"),Lje.forEach(t),jyr=i(Fe),FE=n(Fe,"LI",{});var yje=s(FE);o8e=n(yje,"STRONG",{});var tSt=s(o8e);Dyr=r(tSt,"xlnet"),tSt.forEach(t),Gyr=r(yje," \u2014 "),XY=n(yje,"A",{href:!0});var aSt=s(XY);Oyr=r(aSt,"TFXLNetForMultipleChoice"),aSt.forEach(t),Vyr=r(yje," (XLNet model)"),yje.forEach(t),Fe.forEach(t),Xyr=i(Dl),T(TE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),zVe=i(f),Ac=n(f,"H2",{class:!0});var Zze=s(Ac);ME=n(Zze,"A",{id:!0,class:!0,href:!0});var nSt=s(ME);r8e=n(nSt,"SPAN",{});var sSt=s(r8e);T(cx.$$.fragment,sSt),sSt.forEach(t),nSt.forEach(t),zyr=i(Zze),t8e=n(Zze,"SPAN",{});var lSt=s(t8e);Qyr=r(lSt,"TFAutoModelForNextSentencePrediction"),lSt.forEach(t),Zze.forEach(t),QVe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(fx.$$.fragment,Gl),Wyr=i(Gl),Lc=n(Gl,"P",{});var Jre=s(Lc);Hyr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zY=n(Jre,"A",{href:!0});var iSt=s(zY);Uyr=r(iSt,"from_pretrained()"),iSt.forEach(t),Jyr=r(Jre," class method or the "),QY=n(Jre,"A",{href:!0});var dSt=s(QY);Yyr=r(dSt,"from_config()"),dSt.forEach(t),Kyr=r(Jre,` class
method.`),Jre.forEach(t),Zyr=i(Gl),mx=n(Gl,"P",{});var eQe=s(mx);e9r=r(eQe,"This class cannot be instantiated directly using "),a8e=n(eQe,"CODE",{});var cSt=s(a8e);o9r=r(cSt,"__init__()"),cSt.forEach(t),r9r=r(eQe," (throws an error)."),eQe.forEach(t),t9r=i(Gl),jt=n(Gl,"DIV",{class:!0});var KA=s(jt);T(gx.$$.fragment,KA),a9r=i(KA),n8e=n(KA,"P",{});var fSt=s(n8e);n9r=r(fSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fSt.forEach(t),s9r=i(KA),yc=n(KA,"P",{});var Yre=s(yc);l9r=r(Yre,`Note:
Loading a model from its configuration file does `),s8e=n(Yre,"STRONG",{});var mSt=s(s8e);i9r=r(mSt,"not"),mSt.forEach(t),d9r=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(Yre,"A",{href:!0});var gSt=s(WY);c9r=r(gSt,"from_pretrained()"),gSt.forEach(t),f9r=r(Yre," to load the model weights."),Yre.forEach(t),m9r=i(KA),T(EE.$$.fragment,KA),KA.forEach(t),g9r=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(hx.$$.fragment,Ol),h9r=i(Ol),l8e=n(Ol,"P",{});var hSt=s(l8e);p9r=r(hSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hSt.forEach(t),_9r=i(Ol),hn=n(Ol,"P",{});var ZA=s(hn);u9r=r(ZA,"The model class to instantiate is selected based on the "),i8e=n(ZA,"CODE",{});var pSt=s(i8e);b9r=r(pSt,"model_type"),pSt.forEach(t),v9r=r(ZA,` property of the config object (either
passed as an argument or loaded from `),d8e=n(ZA,"CODE",{});var _St=s(d8e);F9r=r(_St,"pretrained_model_name_or_path"),_St.forEach(t),T9r=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=n(ZA,"CODE",{});var uSt=s(c8e);M9r=r(uSt,"pretrained_model_name_or_path"),uSt.forEach(t),E9r=r(ZA,":"),ZA.forEach(t),C9r=i(Ol),px=n(Ol,"UL",{});var oQe=s(px);CE=n(oQe,"LI",{});var xje=s(CE);f8e=n(xje,"STRONG",{});var bSt=s(f8e);w9r=r(bSt,"bert"),bSt.forEach(t),A9r=r(xje," \u2014 "),HY=n(xje,"A",{href:!0});var vSt=s(HY);L9r=r(vSt,"TFBertForNextSentencePrediction"),vSt.forEach(t),y9r=r(xje," (BERT model)"),xje.forEach(t),x9r=i(oQe),wE=n(oQe,"LI",{});var $je=s(wE);m8e=n($je,"STRONG",{});var FSt=s(m8e);$9r=r(FSt,"mobilebert"),FSt.forEach(t),k9r=r($je," \u2014 "),UY=n($je,"A",{href:!0});var TSt=s(UY);S9r=r(TSt,"TFMobileBertForNextSentencePrediction"),TSt.forEach(t),R9r=r($je," (MobileBERT model)"),$je.forEach(t),oQe.forEach(t),P9r=i(Ol),T(AE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),WVe=i(f),xc=n(f,"H2",{class:!0});var rQe=s(xc);LE=n(rQe,"A",{id:!0,class:!0,href:!0});var MSt=s(LE);g8e=n(MSt,"SPAN",{});var ESt=s(g8e);T(_x.$$.fragment,ESt),ESt.forEach(t),MSt.forEach(t),B9r=i(rQe),h8e=n(rQe,"SPAN",{});var CSt=s(h8e);N9r=r(CSt,"TFAutoModelForTableQuestionAnswering"),CSt.forEach(t),rQe.forEach(t),HVe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(ux.$$.fragment,Vl),I9r=i(Vl),$c=n(Vl,"P",{});var Kre=s($c);q9r=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JY=n(Kre,"A",{href:!0});var wSt=s(JY);j9r=r(wSt,"from_pretrained()"),wSt.forEach(t),D9r=r(Kre," class method or the "),YY=n(Kre,"A",{href:!0});var ASt=s(YY);G9r=r(ASt,"from_config()"),ASt.forEach(t),O9r=r(Kre,` class
method.`),Kre.forEach(t),V9r=i(Vl),bx=n(Vl,"P",{});var tQe=s(bx);X9r=r(tQe,"This class cannot be instantiated directly using "),p8e=n(tQe,"CODE",{});var LSt=s(p8e);z9r=r(LSt,"__init__()"),LSt.forEach(t),Q9r=r(tQe," (throws an error)."),tQe.forEach(t),W9r=i(Vl),Dt=n(Vl,"DIV",{class:!0});var e6=s(Dt);T(vx.$$.fragment,e6),H9r=i(e6),_8e=n(e6,"P",{});var ySt=s(_8e);U9r=r(ySt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ySt.forEach(t),J9r=i(e6),kc=n(e6,"P",{});var Zre=s(kc);Y9r=r(Zre,`Note:
Loading a model from its configuration file does `),u8e=n(Zre,"STRONG",{});var xSt=s(u8e);K9r=r(xSt,"not"),xSt.forEach(t),Z9r=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(Zre,"A",{href:!0});var $St=s(KY);exr=r($St,"from_pretrained()"),$St.forEach(t),oxr=r(Zre," to load the model weights."),Zre.forEach(t),rxr=i(e6),T(yE.$$.fragment,e6),e6.forEach(t),txr=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(Fx.$$.fragment,Xl),axr=i(Xl),b8e=n(Xl,"P",{});var kSt=s(b8e);nxr=r(kSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kSt.forEach(t),sxr=i(Xl),pn=n(Xl,"P",{});var o6=s(pn);lxr=r(o6,"The model class to instantiate is selected based on the "),v8e=n(o6,"CODE",{});var SSt=s(v8e);ixr=r(SSt,"model_type"),SSt.forEach(t),dxr=r(o6,` property of the config object (either
passed as an argument or loaded from `),F8e=n(o6,"CODE",{});var RSt=s(F8e);cxr=r(RSt,"pretrained_model_name_or_path"),RSt.forEach(t),fxr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=n(o6,"CODE",{});var PSt=s(T8e);mxr=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),gxr=r(o6,":"),o6.forEach(t),hxr=i(Xl),M8e=n(Xl,"UL",{});var BSt=s(M8e);xE=n(BSt,"LI",{});var kje=s(xE);E8e=n(kje,"STRONG",{});var NSt=s(E8e);pxr=r(NSt,"tapas"),NSt.forEach(t),_xr=r(kje," \u2014 "),ZY=n(kje,"A",{href:!0});var ISt=s(ZY);uxr=r(ISt,"TFTapasForQuestionAnswering"),ISt.forEach(t),bxr=r(kje," (TAPAS model)"),kje.forEach(t),BSt.forEach(t),vxr=i(Xl),T($E.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),UVe=i(f),Sc=n(f,"H2",{class:!0});var aQe=s(Sc);kE=n(aQe,"A",{id:!0,class:!0,href:!0});var qSt=s(kE);C8e=n(qSt,"SPAN",{});var jSt=s(C8e);T(Tx.$$.fragment,jSt),jSt.forEach(t),qSt.forEach(t),Fxr=i(aQe),w8e=n(aQe,"SPAN",{});var DSt=s(w8e);Txr=r(DSt,"TFAutoModelForTokenClassification"),DSt.forEach(t),aQe.forEach(t),JVe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(Mx.$$.fragment,zl),Mxr=i(zl),Rc=n(zl,"P",{});var ete=s(Rc);Exr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eK=n(ete,"A",{href:!0});var GSt=s(eK);Cxr=r(GSt,"from_pretrained()"),GSt.forEach(t),wxr=r(ete," class method or the "),oK=n(ete,"A",{href:!0});var OSt=s(oK);Axr=r(OSt,"from_config()"),OSt.forEach(t),Lxr=r(ete,` class
method.`),ete.forEach(t),yxr=i(zl),Ex=n(zl,"P",{});var nQe=s(Ex);xxr=r(nQe,"This class cannot be instantiated directly using "),A8e=n(nQe,"CODE",{});var VSt=s(A8e);$xr=r(VSt,"__init__()"),VSt.forEach(t),kxr=r(nQe," (throws an error)."),nQe.forEach(t),Sxr=i(zl),Gt=n(zl,"DIV",{class:!0});var r6=s(Gt);T(Cx.$$.fragment,r6),Rxr=i(r6),L8e=n(r6,"P",{});var XSt=s(L8e);Pxr=r(XSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XSt.forEach(t),Bxr=i(r6),Pc=n(r6,"P",{});var ote=s(Pc);Nxr=r(ote,`Note:
Loading a model from its configuration file does `),y8e=n(ote,"STRONG",{});var zSt=s(y8e);Ixr=r(zSt,"not"),zSt.forEach(t),qxr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(ote,"A",{href:!0});var QSt=s(rK);jxr=r(QSt,"from_pretrained()"),QSt.forEach(t),Dxr=r(ote," to load the model weights."),ote.forEach(t),Gxr=i(r6),T(SE.$$.fragment,r6),r6.forEach(t),Oxr=i(zl),qr=n(zl,"DIV",{class:!0});var Ql=s(qr);T(wx.$$.fragment,Ql),Vxr=i(Ql),x8e=n(Ql,"P",{});var WSt=s(x8e);Xxr=r(WSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WSt.forEach(t),zxr=i(Ql),_n=n(Ql,"P",{});var t6=s(_n);Qxr=r(t6,"The model class to instantiate is selected based on the "),$8e=n(t6,"CODE",{});var HSt=s($8e);Wxr=r(HSt,"model_type"),HSt.forEach(t),Hxr=r(t6,` property of the config object (either
passed as an argument or loaded from `),k8e=n(t6,"CODE",{});var USt=s(k8e);Uxr=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),Jxr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S8e=n(t6,"CODE",{});var JSt=s(S8e);Yxr=r(JSt,"pretrained_model_name_or_path"),JSt.forEach(t),Kxr=r(t6,":"),t6.forEach(t),Zxr=i(Ql),de=n(Ql,"UL",{});var me=s(de);RE=n(me,"LI",{});var Sje=s(RE);R8e=n(Sje,"STRONG",{});var YSt=s(R8e);e$r=r(YSt,"albert"),YSt.forEach(t),o$r=r(Sje," \u2014 "),tK=n(Sje,"A",{href:!0});var KSt=s(tK);r$r=r(KSt,"TFAlbertForTokenClassification"),KSt.forEach(t),t$r=r(Sje," (ALBERT model)"),Sje.forEach(t),a$r=i(me),PE=n(me,"LI",{});var Rje=s(PE);P8e=n(Rje,"STRONG",{});var ZSt=s(P8e);n$r=r(ZSt,"bert"),ZSt.forEach(t),s$r=r(Rje," \u2014 "),aK=n(Rje,"A",{href:!0});var eRt=s(aK);l$r=r(eRt,"TFBertForTokenClassification"),eRt.forEach(t),i$r=r(Rje," (BERT model)"),Rje.forEach(t),d$r=i(me),BE=n(me,"LI",{});var Pje=s(BE);B8e=n(Pje,"STRONG",{});var oRt=s(B8e);c$r=r(oRt,"camembert"),oRt.forEach(t),f$r=r(Pje," \u2014 "),nK=n(Pje,"A",{href:!0});var rRt=s(nK);m$r=r(rRt,"TFCamembertForTokenClassification"),rRt.forEach(t),g$r=r(Pje," (CamemBERT model)"),Pje.forEach(t),h$r=i(me),NE=n(me,"LI",{});var Bje=s(NE);N8e=n(Bje,"STRONG",{});var tRt=s(N8e);p$r=r(tRt,"convbert"),tRt.forEach(t),_$r=r(Bje," \u2014 "),sK=n(Bje,"A",{href:!0});var aRt=s(sK);u$r=r(aRt,"TFConvBertForTokenClassification"),aRt.forEach(t),b$r=r(Bje," (ConvBERT model)"),Bje.forEach(t),v$r=i(me),IE=n(me,"LI",{});var Nje=s(IE);I8e=n(Nje,"STRONG",{});var nRt=s(I8e);F$r=r(nRt,"deberta"),nRt.forEach(t),T$r=r(Nje," \u2014 "),lK=n(Nje,"A",{href:!0});var sRt=s(lK);M$r=r(sRt,"TFDebertaForTokenClassification"),sRt.forEach(t),E$r=r(Nje," (DeBERTa model)"),Nje.forEach(t),C$r=i(me),qE=n(me,"LI",{});var Ije=s(qE);q8e=n(Ije,"STRONG",{});var lRt=s(q8e);w$r=r(lRt,"deberta-v2"),lRt.forEach(t),A$r=r(Ije," \u2014 "),iK=n(Ije,"A",{href:!0});var iRt=s(iK);L$r=r(iRt,"TFDebertaV2ForTokenClassification"),iRt.forEach(t),y$r=r(Ije," (DeBERTa-v2 model)"),Ije.forEach(t),x$r=i(me),jE=n(me,"LI",{});var qje=s(jE);j8e=n(qje,"STRONG",{});var dRt=s(j8e);$$r=r(dRt,"distilbert"),dRt.forEach(t),k$r=r(qje," \u2014 "),dK=n(qje,"A",{href:!0});var cRt=s(dK);S$r=r(cRt,"TFDistilBertForTokenClassification"),cRt.forEach(t),R$r=r(qje," (DistilBERT model)"),qje.forEach(t),P$r=i(me),DE=n(me,"LI",{});var jje=s(DE);D8e=n(jje,"STRONG",{});var fRt=s(D8e);B$r=r(fRt,"electra"),fRt.forEach(t),N$r=r(jje," \u2014 "),cK=n(jje,"A",{href:!0});var mRt=s(cK);I$r=r(mRt,"TFElectraForTokenClassification"),mRt.forEach(t),q$r=r(jje," (ELECTRA model)"),jje.forEach(t),j$r=i(me),GE=n(me,"LI",{});var Dje=s(GE);G8e=n(Dje,"STRONG",{});var gRt=s(G8e);D$r=r(gRt,"flaubert"),gRt.forEach(t),G$r=r(Dje," \u2014 "),fK=n(Dje,"A",{href:!0});var hRt=s(fK);O$r=r(hRt,"TFFlaubertForTokenClassification"),hRt.forEach(t),V$r=r(Dje," (FlauBERT model)"),Dje.forEach(t),X$r=i(me),OE=n(me,"LI",{});var Gje=s(OE);O8e=n(Gje,"STRONG",{});var pRt=s(O8e);z$r=r(pRt,"funnel"),pRt.forEach(t),Q$r=r(Gje," \u2014 "),mK=n(Gje,"A",{href:!0});var _Rt=s(mK);W$r=r(_Rt,"TFFunnelForTokenClassification"),_Rt.forEach(t),H$r=r(Gje," (Funnel Transformer model)"),Gje.forEach(t),U$r=i(me),VE=n(me,"LI",{});var Oje=s(VE);V8e=n(Oje,"STRONG",{});var uRt=s(V8e);J$r=r(uRt,"layoutlm"),uRt.forEach(t),Y$r=r(Oje," \u2014 "),gK=n(Oje,"A",{href:!0});var bRt=s(gK);K$r=r(bRt,"TFLayoutLMForTokenClassification"),bRt.forEach(t),Z$r=r(Oje," (LayoutLM model)"),Oje.forEach(t),ekr=i(me),XE=n(me,"LI",{});var Vje=s(XE);X8e=n(Vje,"STRONG",{});var vRt=s(X8e);okr=r(vRt,"longformer"),vRt.forEach(t),rkr=r(Vje," \u2014 "),hK=n(Vje,"A",{href:!0});var FRt=s(hK);tkr=r(FRt,"TFLongformerForTokenClassification"),FRt.forEach(t),akr=r(Vje," (Longformer model)"),Vje.forEach(t),nkr=i(me),zE=n(me,"LI",{});var Xje=s(zE);z8e=n(Xje,"STRONG",{});var TRt=s(z8e);skr=r(TRt,"mobilebert"),TRt.forEach(t),lkr=r(Xje," \u2014 "),pK=n(Xje,"A",{href:!0});var MRt=s(pK);ikr=r(MRt,"TFMobileBertForTokenClassification"),MRt.forEach(t),dkr=r(Xje," (MobileBERT model)"),Xje.forEach(t),ckr=i(me),QE=n(me,"LI",{});var zje=s(QE);Q8e=n(zje,"STRONG",{});var ERt=s(Q8e);fkr=r(ERt,"mpnet"),ERt.forEach(t),mkr=r(zje," \u2014 "),_K=n(zje,"A",{href:!0});var CRt=s(_K);gkr=r(CRt,"TFMPNetForTokenClassification"),CRt.forEach(t),hkr=r(zje," (MPNet model)"),zje.forEach(t),pkr=i(me),WE=n(me,"LI",{});var Qje=s(WE);W8e=n(Qje,"STRONG",{});var wRt=s(W8e);_kr=r(wRt,"rembert"),wRt.forEach(t),ukr=r(Qje," \u2014 "),uK=n(Qje,"A",{href:!0});var ARt=s(uK);bkr=r(ARt,"TFRemBertForTokenClassification"),ARt.forEach(t),vkr=r(Qje," (RemBERT model)"),Qje.forEach(t),Fkr=i(me),HE=n(me,"LI",{});var Wje=s(HE);H8e=n(Wje,"STRONG",{});var LRt=s(H8e);Tkr=r(LRt,"roberta"),LRt.forEach(t),Mkr=r(Wje," \u2014 "),bK=n(Wje,"A",{href:!0});var yRt=s(bK);Ekr=r(yRt,"TFRobertaForTokenClassification"),yRt.forEach(t),Ckr=r(Wje," (RoBERTa model)"),Wje.forEach(t),wkr=i(me),UE=n(me,"LI",{});var Hje=s(UE);U8e=n(Hje,"STRONG",{});var xRt=s(U8e);Akr=r(xRt,"roformer"),xRt.forEach(t),Lkr=r(Hje," \u2014 "),vK=n(Hje,"A",{href:!0});var $Rt=s(vK);ykr=r($Rt,"TFRoFormerForTokenClassification"),$Rt.forEach(t),xkr=r(Hje," (RoFormer model)"),Hje.forEach(t),$kr=i(me),JE=n(me,"LI",{});var Uje=s(JE);J8e=n(Uje,"STRONG",{});var kRt=s(J8e);kkr=r(kRt,"xlm"),kRt.forEach(t),Skr=r(Uje," \u2014 "),FK=n(Uje,"A",{href:!0});var SRt=s(FK);Rkr=r(SRt,"TFXLMForTokenClassification"),SRt.forEach(t),Pkr=r(Uje," (XLM model)"),Uje.forEach(t),Bkr=i(me),YE=n(me,"LI",{});var Jje=s(YE);Y8e=n(Jje,"STRONG",{});var RRt=s(Y8e);Nkr=r(RRt,"xlm-roberta"),RRt.forEach(t),Ikr=r(Jje," \u2014 "),TK=n(Jje,"A",{href:!0});var PRt=s(TK);qkr=r(PRt,"TFXLMRobertaForTokenClassification"),PRt.forEach(t),jkr=r(Jje," (XLM-RoBERTa model)"),Jje.forEach(t),Dkr=i(me),KE=n(me,"LI",{});var Yje=s(KE);K8e=n(Yje,"STRONG",{});var BRt=s(K8e);Gkr=r(BRt,"xlnet"),BRt.forEach(t),Okr=r(Yje," \u2014 "),MK=n(Yje,"A",{href:!0});var NRt=s(MK);Vkr=r(NRt,"TFXLNetForTokenClassification"),NRt.forEach(t),Xkr=r(Yje," (XLNet model)"),Yje.forEach(t),me.forEach(t),zkr=i(Ql),T(ZE.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),YVe=i(f),Bc=n(f,"H2",{class:!0});var sQe=s(Bc);eC=n(sQe,"A",{id:!0,class:!0,href:!0});var IRt=s(eC);Z8e=n(IRt,"SPAN",{});var qRt=s(Z8e);T(Ax.$$.fragment,qRt),qRt.forEach(t),IRt.forEach(t),Qkr=i(sQe),eMe=n(sQe,"SPAN",{});var jRt=s(eMe);Wkr=r(jRt,"TFAutoModelForQuestionAnswering"),jRt.forEach(t),sQe.forEach(t),KVe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(Lx.$$.fragment,Wl),Hkr=i(Wl),Nc=n(Wl,"P",{});var rte=s(Nc);Ukr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EK=n(rte,"A",{href:!0});var DRt=s(EK);Jkr=r(DRt,"from_pretrained()"),DRt.forEach(t),Ykr=r(rte," class method or the "),CK=n(rte,"A",{href:!0});var GRt=s(CK);Kkr=r(GRt,"from_config()"),GRt.forEach(t),Zkr=r(rte,` class
method.`),rte.forEach(t),eSr=i(Wl),yx=n(Wl,"P",{});var lQe=s(yx);oSr=r(lQe,"This class cannot be instantiated directly using "),oMe=n(lQe,"CODE",{});var ORt=s(oMe);rSr=r(ORt,"__init__()"),ORt.forEach(t),tSr=r(lQe," (throws an error)."),lQe.forEach(t),aSr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var a6=s(Ot);T(xx.$$.fragment,a6),nSr=i(a6),rMe=n(a6,"P",{});var VRt=s(rMe);sSr=r(VRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VRt.forEach(t),lSr=i(a6),Ic=n(a6,"P",{});var tte=s(Ic);iSr=r(tte,`Note:
Loading a model from its configuration file does `),tMe=n(tte,"STRONG",{});var XRt=s(tMe);dSr=r(XRt,"not"),XRt.forEach(t),cSr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(tte,"A",{href:!0});var zRt=s(wK);fSr=r(zRt,"from_pretrained()"),zRt.forEach(t),mSr=r(tte," to load the model weights."),tte.forEach(t),gSr=i(a6),T(oC.$$.fragment,a6),a6.forEach(t),hSr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Hl=s(jr);T($x.$$.fragment,Hl),pSr=i(Hl),aMe=n(Hl,"P",{});var QRt=s(aMe);_Sr=r(QRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QRt.forEach(t),uSr=i(Hl),un=n(Hl,"P",{});var n6=s(un);bSr=r(n6,"The model class to instantiate is selected based on the "),nMe=n(n6,"CODE",{});var WRt=s(nMe);vSr=r(WRt,"model_type"),WRt.forEach(t),FSr=r(n6,` property of the config object (either
passed as an argument or loaded from `),sMe=n(n6,"CODE",{});var HRt=s(sMe);TSr=r(HRt,"pretrained_model_name_or_path"),HRt.forEach(t),MSr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(n6,"CODE",{});var URt=s(lMe);ESr=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),CSr=r(n6,":"),n6.forEach(t),wSr=i(Hl),ce=n(Hl,"UL",{});var ge=s(ce);rC=n(ge,"LI",{});var Kje=s(rC);iMe=n(Kje,"STRONG",{});var JRt=s(iMe);ASr=r(JRt,"albert"),JRt.forEach(t),LSr=r(Kje," \u2014 "),AK=n(Kje,"A",{href:!0});var YRt=s(AK);ySr=r(YRt,"TFAlbertForQuestionAnswering"),YRt.forEach(t),xSr=r(Kje," (ALBERT model)"),Kje.forEach(t),$Sr=i(ge),tC=n(ge,"LI",{});var Zje=s(tC);dMe=n(Zje,"STRONG",{});var KRt=s(dMe);kSr=r(KRt,"bert"),KRt.forEach(t),SSr=r(Zje," \u2014 "),LK=n(Zje,"A",{href:!0});var ZRt=s(LK);RSr=r(ZRt,"TFBertForQuestionAnswering"),ZRt.forEach(t),PSr=r(Zje," (BERT model)"),Zje.forEach(t),BSr=i(ge),aC=n(ge,"LI",{});var eDe=s(aC);cMe=n(eDe,"STRONG",{});var ePt=s(cMe);NSr=r(ePt,"camembert"),ePt.forEach(t),ISr=r(eDe," \u2014 "),yK=n(eDe,"A",{href:!0});var oPt=s(yK);qSr=r(oPt,"TFCamembertForQuestionAnswering"),oPt.forEach(t),jSr=r(eDe," (CamemBERT model)"),eDe.forEach(t),DSr=i(ge),nC=n(ge,"LI",{});var oDe=s(nC);fMe=n(oDe,"STRONG",{});var rPt=s(fMe);GSr=r(rPt,"convbert"),rPt.forEach(t),OSr=r(oDe," \u2014 "),xK=n(oDe,"A",{href:!0});var tPt=s(xK);VSr=r(tPt,"TFConvBertForQuestionAnswering"),tPt.forEach(t),XSr=r(oDe," (ConvBERT model)"),oDe.forEach(t),zSr=i(ge),sC=n(ge,"LI",{});var rDe=s(sC);mMe=n(rDe,"STRONG",{});var aPt=s(mMe);QSr=r(aPt,"deberta"),aPt.forEach(t),WSr=r(rDe," \u2014 "),$K=n(rDe,"A",{href:!0});var nPt=s($K);HSr=r(nPt,"TFDebertaForQuestionAnswering"),nPt.forEach(t),USr=r(rDe," (DeBERTa model)"),rDe.forEach(t),JSr=i(ge),lC=n(ge,"LI",{});var tDe=s(lC);gMe=n(tDe,"STRONG",{});var sPt=s(gMe);YSr=r(sPt,"deberta-v2"),sPt.forEach(t),KSr=r(tDe," \u2014 "),kK=n(tDe,"A",{href:!0});var lPt=s(kK);ZSr=r(lPt,"TFDebertaV2ForQuestionAnswering"),lPt.forEach(t),eRr=r(tDe," (DeBERTa-v2 model)"),tDe.forEach(t),oRr=i(ge),iC=n(ge,"LI",{});var aDe=s(iC);hMe=n(aDe,"STRONG",{});var iPt=s(hMe);rRr=r(iPt,"distilbert"),iPt.forEach(t),tRr=r(aDe," \u2014 "),SK=n(aDe,"A",{href:!0});var dPt=s(SK);aRr=r(dPt,"TFDistilBertForQuestionAnswering"),dPt.forEach(t),nRr=r(aDe," (DistilBERT model)"),aDe.forEach(t),sRr=i(ge),dC=n(ge,"LI",{});var nDe=s(dC);pMe=n(nDe,"STRONG",{});var cPt=s(pMe);lRr=r(cPt,"electra"),cPt.forEach(t),iRr=r(nDe," \u2014 "),RK=n(nDe,"A",{href:!0});var fPt=s(RK);dRr=r(fPt,"TFElectraForQuestionAnswering"),fPt.forEach(t),cRr=r(nDe," (ELECTRA model)"),nDe.forEach(t),fRr=i(ge),cC=n(ge,"LI",{});var sDe=s(cC);_Me=n(sDe,"STRONG",{});var mPt=s(_Me);mRr=r(mPt,"flaubert"),mPt.forEach(t),gRr=r(sDe," \u2014 "),PK=n(sDe,"A",{href:!0});var gPt=s(PK);hRr=r(gPt,"TFFlaubertForQuestionAnsweringSimple"),gPt.forEach(t),pRr=r(sDe," (FlauBERT model)"),sDe.forEach(t),_Rr=i(ge),fC=n(ge,"LI",{});var lDe=s(fC);uMe=n(lDe,"STRONG",{});var hPt=s(uMe);uRr=r(hPt,"funnel"),hPt.forEach(t),bRr=r(lDe," \u2014 "),BK=n(lDe,"A",{href:!0});var pPt=s(BK);vRr=r(pPt,"TFFunnelForQuestionAnswering"),pPt.forEach(t),FRr=r(lDe," (Funnel Transformer model)"),lDe.forEach(t),TRr=i(ge),mC=n(ge,"LI",{});var iDe=s(mC);bMe=n(iDe,"STRONG",{});var _Pt=s(bMe);MRr=r(_Pt,"gptj"),_Pt.forEach(t),ERr=r(iDe," \u2014 "),NK=n(iDe,"A",{href:!0});var uPt=s(NK);CRr=r(uPt,"TFGPTJForQuestionAnswering"),uPt.forEach(t),wRr=r(iDe," (GPT-J model)"),iDe.forEach(t),ARr=i(ge),gC=n(ge,"LI",{});var dDe=s(gC);vMe=n(dDe,"STRONG",{});var bPt=s(vMe);LRr=r(bPt,"longformer"),bPt.forEach(t),yRr=r(dDe," \u2014 "),IK=n(dDe,"A",{href:!0});var vPt=s(IK);xRr=r(vPt,"TFLongformerForQuestionAnswering"),vPt.forEach(t),$Rr=r(dDe," (Longformer model)"),dDe.forEach(t),kRr=i(ge),hC=n(ge,"LI",{});var cDe=s(hC);FMe=n(cDe,"STRONG",{});var FPt=s(FMe);SRr=r(FPt,"mobilebert"),FPt.forEach(t),RRr=r(cDe," \u2014 "),qK=n(cDe,"A",{href:!0});var TPt=s(qK);PRr=r(TPt,"TFMobileBertForQuestionAnswering"),TPt.forEach(t),BRr=r(cDe," (MobileBERT model)"),cDe.forEach(t),NRr=i(ge),pC=n(ge,"LI",{});var fDe=s(pC);TMe=n(fDe,"STRONG",{});var MPt=s(TMe);IRr=r(MPt,"mpnet"),MPt.forEach(t),qRr=r(fDe," \u2014 "),jK=n(fDe,"A",{href:!0});var EPt=s(jK);jRr=r(EPt,"TFMPNetForQuestionAnswering"),EPt.forEach(t),DRr=r(fDe," (MPNet model)"),fDe.forEach(t),GRr=i(ge),_C=n(ge,"LI",{});var mDe=s(_C);MMe=n(mDe,"STRONG",{});var CPt=s(MMe);ORr=r(CPt,"rembert"),CPt.forEach(t),VRr=r(mDe," \u2014 "),DK=n(mDe,"A",{href:!0});var wPt=s(DK);XRr=r(wPt,"TFRemBertForQuestionAnswering"),wPt.forEach(t),zRr=r(mDe," (RemBERT model)"),mDe.forEach(t),QRr=i(ge),uC=n(ge,"LI",{});var gDe=s(uC);EMe=n(gDe,"STRONG",{});var APt=s(EMe);WRr=r(APt,"roberta"),APt.forEach(t),HRr=r(gDe," \u2014 "),GK=n(gDe,"A",{href:!0});var LPt=s(GK);URr=r(LPt,"TFRobertaForQuestionAnswering"),LPt.forEach(t),JRr=r(gDe," (RoBERTa model)"),gDe.forEach(t),YRr=i(ge),bC=n(ge,"LI",{});var hDe=s(bC);CMe=n(hDe,"STRONG",{});var yPt=s(CMe);KRr=r(yPt,"roformer"),yPt.forEach(t),ZRr=r(hDe," \u2014 "),OK=n(hDe,"A",{href:!0});var xPt=s(OK);ePr=r(xPt,"TFRoFormerForQuestionAnswering"),xPt.forEach(t),oPr=r(hDe," (RoFormer model)"),hDe.forEach(t),rPr=i(ge),vC=n(ge,"LI",{});var pDe=s(vC);wMe=n(pDe,"STRONG",{});var $Pt=s(wMe);tPr=r($Pt,"xlm"),$Pt.forEach(t),aPr=r(pDe," \u2014 "),VK=n(pDe,"A",{href:!0});var kPt=s(VK);nPr=r(kPt,"TFXLMForQuestionAnsweringSimple"),kPt.forEach(t),sPr=r(pDe," (XLM model)"),pDe.forEach(t),lPr=i(ge),FC=n(ge,"LI",{});var _De=s(FC);AMe=n(_De,"STRONG",{});var SPt=s(AMe);iPr=r(SPt,"xlm-roberta"),SPt.forEach(t),dPr=r(_De," \u2014 "),XK=n(_De,"A",{href:!0});var RPt=s(XK);cPr=r(RPt,"TFXLMRobertaForQuestionAnswering"),RPt.forEach(t),fPr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),mPr=i(ge),TC=n(ge,"LI",{});var uDe=s(TC);LMe=n(uDe,"STRONG",{});var PPt=s(LMe);gPr=r(PPt,"xlnet"),PPt.forEach(t),hPr=r(uDe," \u2014 "),zK=n(uDe,"A",{href:!0});var BPt=s(zK);pPr=r(BPt,"TFXLNetForQuestionAnsweringSimple"),BPt.forEach(t),_Pr=r(uDe," (XLNet model)"),uDe.forEach(t),ge.forEach(t),uPr=i(Hl),T(MC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),ZVe=i(f),qc=n(f,"H2",{class:!0});var iQe=s(qc);EC=n(iQe,"A",{id:!0,class:!0,href:!0});var NPt=s(EC);yMe=n(NPt,"SPAN",{});var IPt=s(yMe);T(kx.$$.fragment,IPt),IPt.forEach(t),NPt.forEach(t),bPr=i(iQe),xMe=n(iQe,"SPAN",{});var qPt=s(xMe);vPr=r(qPt,"TFAutoModelForVision2Seq"),qPt.forEach(t),iQe.forEach(t),eXe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(Sx.$$.fragment,Ul),FPr=i(Ul),jc=n(Ul,"P",{});var ate=s(jc);TPr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),QK=n(ate,"A",{href:!0});var jPt=s(QK);MPr=r(jPt,"from_pretrained()"),jPt.forEach(t),EPr=r(ate," class method or the "),WK=n(ate,"A",{href:!0});var DPt=s(WK);CPr=r(DPt,"from_config()"),DPt.forEach(t),wPr=r(ate,` class
method.`),ate.forEach(t),APr=i(Ul),Rx=n(Ul,"P",{});var dQe=s(Rx);LPr=r(dQe,"This class cannot be instantiated directly using "),$Me=n(dQe,"CODE",{});var GPt=s($Me);yPr=r(GPt,"__init__()"),GPt.forEach(t),xPr=r(dQe," (throws an error)."),dQe.forEach(t),$Pr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var s6=s(Vt);T(Px.$$.fragment,s6),kPr=i(s6),kMe=n(s6,"P",{});var OPt=s(kMe);SPr=r(OPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OPt.forEach(t),RPr=i(s6),Dc=n(s6,"P",{});var nte=s(Dc);PPr=r(nte,`Note:
Loading a model from its configuration file does `),SMe=n(nte,"STRONG",{});var VPt=s(SMe);BPr=r(VPt,"not"),VPt.forEach(t),NPr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(nte,"A",{href:!0});var XPt=s(HK);IPr=r(XPt,"from_pretrained()"),XPt.forEach(t),qPr=r(nte," to load the model weights."),nte.forEach(t),jPr=i(s6),T(CC.$$.fragment,s6),s6.forEach(t),DPr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Bx.$$.fragment,Jl),GPr=i(Jl),RMe=n(Jl,"P",{});var zPt=s(RMe);OPr=r(zPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zPt.forEach(t),VPr=i(Jl),bn=n(Jl,"P",{});var l6=s(bn);XPr=r(l6,"The model class to instantiate is selected based on the "),PMe=n(l6,"CODE",{});var QPt=s(PMe);zPr=r(QPt,"model_type"),QPt.forEach(t),QPr=r(l6,` property of the config object (either
passed as an argument or loaded from `),BMe=n(l6,"CODE",{});var WPt=s(BMe);WPr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),HPr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NMe=n(l6,"CODE",{});var HPt=s(NMe);UPr=r(HPt,"pretrained_model_name_or_path"),HPt.forEach(t),JPr=r(l6,":"),l6.forEach(t),YPr=i(Jl),IMe=n(Jl,"UL",{});var UPt=s(IMe);wC=n(UPt,"LI",{});var bDe=s(wC);qMe=n(bDe,"STRONG",{});var JPt=s(qMe);KPr=r(JPt,"vision-encoder-decoder"),JPt.forEach(t),ZPr=r(bDe," \u2014 "),UK=n(bDe,"A",{href:!0});var YPt=s(UK);eBr=r(YPt,"TFVisionEncoderDecoderModel"),YPt.forEach(t),oBr=r(bDe," (Vision Encoder decoder model)"),bDe.forEach(t),UPt.forEach(t),rBr=i(Jl),T(AC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),oXe=i(f),Gc=n(f,"H2",{class:!0});var cQe=s(Gc);LC=n(cQe,"A",{id:!0,class:!0,href:!0});var KPt=s(LC);jMe=n(KPt,"SPAN",{});var ZPt=s(jMe);T(Nx.$$.fragment,ZPt),ZPt.forEach(t),KPt.forEach(t),tBr=i(cQe),DMe=n(cQe,"SPAN",{});var eBt=s(DMe);aBr=r(eBt,"TFAutoModelForSpeechSeq2Seq"),eBt.forEach(t),cQe.forEach(t),rXe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Ix.$$.fragment,Yl),nBr=i(Yl),Oc=n(Yl,"P",{});var ste=s(Oc);sBr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),JK=n(ste,"A",{href:!0});var oBt=s(JK);lBr=r(oBt,"from_pretrained()"),oBt.forEach(t),iBr=r(ste," class method or the "),YK=n(ste,"A",{href:!0});var rBt=s(YK);dBr=r(rBt,"from_config()"),rBt.forEach(t),cBr=r(ste,` class
method.`),ste.forEach(t),fBr=i(Yl),qx=n(Yl,"P",{});var fQe=s(qx);mBr=r(fQe,"This class cannot be instantiated directly using "),GMe=n(fQe,"CODE",{});var tBt=s(GMe);gBr=r(tBt,"__init__()"),tBt.forEach(t),hBr=r(fQe," (throws an error)."),fQe.forEach(t),pBr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var i6=s(Xt);T(jx.$$.fragment,i6),_Br=i(i6),OMe=n(i6,"P",{});var aBt=s(OMe);uBr=r(aBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),aBt.forEach(t),bBr=i(i6),Vc=n(i6,"P",{});var lte=s(Vc);vBr=r(lte,`Note:
Loading a model from its configuration file does `),VMe=n(lte,"STRONG",{});var nBt=s(VMe);FBr=r(nBt,"not"),nBt.forEach(t),TBr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KK=n(lte,"A",{href:!0});var sBt=s(KK);MBr=r(sBt,"from_pretrained()"),sBt.forEach(t),EBr=r(lte," to load the model weights."),lte.forEach(t),CBr=i(i6),T(yC.$$.fragment,i6),i6.forEach(t),wBr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Dx.$$.fragment,Kl),ABr=i(Kl),XMe=n(Kl,"P",{});var lBt=s(XMe);LBr=r(lBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lBt.forEach(t),yBr=i(Kl),vn=n(Kl,"P",{});var d6=s(vn);xBr=r(d6,"The model class to instantiate is selected based on the "),zMe=n(d6,"CODE",{});var iBt=s(zMe);$Br=r(iBt,"model_type"),iBt.forEach(t),kBr=r(d6,` property of the config object (either
passed as an argument or loaded from `),QMe=n(d6,"CODE",{});var dBt=s(QMe);SBr=r(dBt,"pretrained_model_name_or_path"),dBt.forEach(t),RBr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(d6,"CODE",{});var cBt=s(WMe);PBr=r(cBt,"pretrained_model_name_or_path"),cBt.forEach(t),BBr=r(d6,":"),d6.forEach(t),NBr=i(Kl),HMe=n(Kl,"UL",{});var fBt=s(HMe);xC=n(fBt,"LI",{});var vDe=s(xC);UMe=n(vDe,"STRONG",{});var mBt=s(UMe);IBr=r(mBt,"speech_to_text"),mBt.forEach(t),qBr=r(vDe," \u2014 "),ZK=n(vDe,"A",{href:!0});var gBt=s(ZK);jBr=r(gBt,"TFSpeech2TextForConditionalGeneration"),gBt.forEach(t),DBr=r(vDe," (Speech2Text model)"),vDe.forEach(t),fBt.forEach(t),GBr=i(Kl),T($C.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),tXe=i(f),Xc=n(f,"H2",{class:!0});var mQe=s(Xc);kC=n(mQe,"A",{id:!0,class:!0,href:!0});var hBt=s(kC);JMe=n(hBt,"SPAN",{});var pBt=s(JMe);T(Gx.$$.fragment,pBt),pBt.forEach(t),hBt.forEach(t),OBr=i(mQe),YMe=n(mQe,"SPAN",{});var _Bt=s(YMe);VBr=r(_Bt,"FlaxAutoModel"),_Bt.forEach(t),mQe.forEach(t),aXe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(Ox.$$.fragment,Zl),XBr=i(Zl),zc=n(Zl,"P",{});var ite=s(zc);zBr=r(ite,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eZ=n(ite,"A",{href:!0});var uBt=s(eZ);QBr=r(uBt,"from_pretrained()"),uBt.forEach(t),WBr=r(ite," class method or the "),oZ=n(ite,"A",{href:!0});var bBt=s(oZ);HBr=r(bBt,"from_config()"),bBt.forEach(t),UBr=r(ite,` class
method.`),ite.forEach(t),JBr=i(Zl),Vx=n(Zl,"P",{});var gQe=s(Vx);YBr=r(gQe,"This class cannot be instantiated directly using "),KMe=n(gQe,"CODE",{});var vBt=s(KMe);KBr=r(vBt,"__init__()"),vBt.forEach(t),ZBr=r(gQe," (throws an error)."),gQe.forEach(t),eNr=i(Zl),zt=n(Zl,"DIV",{class:!0});var c6=s(zt);T(Xx.$$.fragment,c6),oNr=i(c6),ZMe=n(c6,"P",{});var FBt=s(ZMe);rNr=r(FBt,"Instantiates one of the base model classes of the library from a configuration."),FBt.forEach(t),tNr=i(c6),Qc=n(c6,"P",{});var dte=s(Qc);aNr=r(dte,`Note:
Loading a model from its configuration file does `),eEe=n(dte,"STRONG",{});var TBt=s(eEe);nNr=r(TBt,"not"),TBt.forEach(t),sNr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(dte,"A",{href:!0});var MBt=s(rZ);lNr=r(MBt,"from_pretrained()"),MBt.forEach(t),iNr=r(dte," to load the model weights."),dte.forEach(t),dNr=i(c6),T(SC.$$.fragment,c6),c6.forEach(t),cNr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(zx.$$.fragment,ei),fNr=i(ei),oEe=n(ei,"P",{});var EBt=s(oEe);mNr=r(EBt,"Instantiate one of the base model classes of the library from a pretrained model."),EBt.forEach(t),gNr=i(ei),Fn=n(ei,"P",{});var f6=s(Fn);hNr=r(f6,"The model class to instantiate is selected based on the "),rEe=n(f6,"CODE",{});var CBt=s(rEe);pNr=r(CBt,"model_type"),CBt.forEach(t),_Nr=r(f6,` property of the config object (either
passed as an argument or loaded from `),tEe=n(f6,"CODE",{});var wBt=s(tEe);uNr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),bNr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(f6,"CODE",{});var ABt=s(aEe);vNr=r(ABt,"pretrained_model_name_or_path"),ABt.forEach(t),FNr=r(f6,":"),f6.forEach(t),TNr=i(ei),oe=n(ei,"UL",{});var ae=s(oe);RC=n(ae,"LI",{});var FDe=s(RC);nEe=n(FDe,"STRONG",{});var LBt=s(nEe);MNr=r(LBt,"albert"),LBt.forEach(t),ENr=r(FDe," \u2014 "),tZ=n(FDe,"A",{href:!0});var yBt=s(tZ);CNr=r(yBt,"FlaxAlbertModel"),yBt.forEach(t),wNr=r(FDe," (ALBERT model)"),FDe.forEach(t),ANr=i(ae),PC=n(ae,"LI",{});var TDe=s(PC);sEe=n(TDe,"STRONG",{});var xBt=s(sEe);LNr=r(xBt,"bart"),xBt.forEach(t),yNr=r(TDe," \u2014 "),aZ=n(TDe,"A",{href:!0});var $Bt=s(aZ);xNr=r($Bt,"FlaxBartModel"),$Bt.forEach(t),$Nr=r(TDe," (BART model)"),TDe.forEach(t),kNr=i(ae),BC=n(ae,"LI",{});var MDe=s(BC);lEe=n(MDe,"STRONG",{});var kBt=s(lEe);SNr=r(kBt,"beit"),kBt.forEach(t),RNr=r(MDe," \u2014 "),nZ=n(MDe,"A",{href:!0});var SBt=s(nZ);PNr=r(SBt,"FlaxBeitModel"),SBt.forEach(t),BNr=r(MDe," (BEiT model)"),MDe.forEach(t),NNr=i(ae),NC=n(ae,"LI",{});var EDe=s(NC);iEe=n(EDe,"STRONG",{});var RBt=s(iEe);INr=r(RBt,"bert"),RBt.forEach(t),qNr=r(EDe," \u2014 "),sZ=n(EDe,"A",{href:!0});var PBt=s(sZ);jNr=r(PBt,"FlaxBertModel"),PBt.forEach(t),DNr=r(EDe," (BERT model)"),EDe.forEach(t),GNr=i(ae),IC=n(ae,"LI",{});var CDe=s(IC);dEe=n(CDe,"STRONG",{});var BBt=s(dEe);ONr=r(BBt,"big_bird"),BBt.forEach(t),VNr=r(CDe," \u2014 "),lZ=n(CDe,"A",{href:!0});var NBt=s(lZ);XNr=r(NBt,"FlaxBigBirdModel"),NBt.forEach(t),zNr=r(CDe," (BigBird model)"),CDe.forEach(t),QNr=i(ae),qC=n(ae,"LI",{});var wDe=s(qC);cEe=n(wDe,"STRONG",{});var IBt=s(cEe);WNr=r(IBt,"blenderbot"),IBt.forEach(t),HNr=r(wDe," \u2014 "),iZ=n(wDe,"A",{href:!0});var qBt=s(iZ);UNr=r(qBt,"FlaxBlenderbotModel"),qBt.forEach(t),JNr=r(wDe," (Blenderbot model)"),wDe.forEach(t),YNr=i(ae),jC=n(ae,"LI",{});var ADe=s(jC);fEe=n(ADe,"STRONG",{});var jBt=s(fEe);KNr=r(jBt,"blenderbot-small"),jBt.forEach(t),ZNr=r(ADe," \u2014 "),dZ=n(ADe,"A",{href:!0});var DBt=s(dZ);eIr=r(DBt,"FlaxBlenderbotSmallModel"),DBt.forEach(t),oIr=r(ADe," (BlenderbotSmall model)"),ADe.forEach(t),rIr=i(ae),DC=n(ae,"LI",{});var LDe=s(DC);mEe=n(LDe,"STRONG",{});var GBt=s(mEe);tIr=r(GBt,"clip"),GBt.forEach(t),aIr=r(LDe," \u2014 "),cZ=n(LDe,"A",{href:!0});var OBt=s(cZ);nIr=r(OBt,"FlaxCLIPModel"),OBt.forEach(t),sIr=r(LDe," (CLIP model)"),LDe.forEach(t),lIr=i(ae),GC=n(ae,"LI",{});var yDe=s(GC);gEe=n(yDe,"STRONG",{});var VBt=s(gEe);iIr=r(VBt,"distilbert"),VBt.forEach(t),dIr=r(yDe," \u2014 "),fZ=n(yDe,"A",{href:!0});var XBt=s(fZ);cIr=r(XBt,"FlaxDistilBertModel"),XBt.forEach(t),fIr=r(yDe," (DistilBERT model)"),yDe.forEach(t),mIr=i(ae),OC=n(ae,"LI",{});var xDe=s(OC);hEe=n(xDe,"STRONG",{});var zBt=s(hEe);gIr=r(zBt,"electra"),zBt.forEach(t),hIr=r(xDe," \u2014 "),mZ=n(xDe,"A",{href:!0});var QBt=s(mZ);pIr=r(QBt,"FlaxElectraModel"),QBt.forEach(t),_Ir=r(xDe," (ELECTRA model)"),xDe.forEach(t),uIr=i(ae),VC=n(ae,"LI",{});var $De=s(VC);pEe=n($De,"STRONG",{});var WBt=s(pEe);bIr=r(WBt,"gpt2"),WBt.forEach(t),vIr=r($De," \u2014 "),gZ=n($De,"A",{href:!0});var HBt=s(gZ);FIr=r(HBt,"FlaxGPT2Model"),HBt.forEach(t),TIr=r($De," (OpenAI GPT-2 model)"),$De.forEach(t),MIr=i(ae),XC=n(ae,"LI",{});var kDe=s(XC);_Ee=n(kDe,"STRONG",{});var UBt=s(_Ee);EIr=r(UBt,"gpt_neo"),UBt.forEach(t),CIr=r(kDe," \u2014 "),hZ=n(kDe,"A",{href:!0});var JBt=s(hZ);wIr=r(JBt,"FlaxGPTNeoModel"),JBt.forEach(t),AIr=r(kDe," (GPT Neo model)"),kDe.forEach(t),LIr=i(ae),zC=n(ae,"LI",{});var SDe=s(zC);uEe=n(SDe,"STRONG",{});var YBt=s(uEe);yIr=r(YBt,"gptj"),YBt.forEach(t),xIr=r(SDe," \u2014 "),pZ=n(SDe,"A",{href:!0});var KBt=s(pZ);$Ir=r(KBt,"FlaxGPTJModel"),KBt.forEach(t),kIr=r(SDe," (GPT-J model)"),SDe.forEach(t),SIr=i(ae),QC=n(ae,"LI",{});var RDe=s(QC);bEe=n(RDe,"STRONG",{});var ZBt=s(bEe);RIr=r(ZBt,"longt5"),ZBt.forEach(t),PIr=r(RDe," \u2014 "),_Z=n(RDe,"A",{href:!0});var eNt=s(_Z);BIr=r(eNt,"FlaxLongT5Model"),eNt.forEach(t),NIr=r(RDe," (LongT5 model)"),RDe.forEach(t),IIr=i(ae),WC=n(ae,"LI",{});var PDe=s(WC);vEe=n(PDe,"STRONG",{});var oNt=s(vEe);qIr=r(oNt,"marian"),oNt.forEach(t),jIr=r(PDe," \u2014 "),uZ=n(PDe,"A",{href:!0});var rNt=s(uZ);DIr=r(rNt,"FlaxMarianModel"),rNt.forEach(t),GIr=r(PDe," (Marian model)"),PDe.forEach(t),OIr=i(ae),HC=n(ae,"LI",{});var BDe=s(HC);FEe=n(BDe,"STRONG",{});var tNt=s(FEe);VIr=r(tNt,"mbart"),tNt.forEach(t),XIr=r(BDe," \u2014 "),bZ=n(BDe,"A",{href:!0});var aNt=s(bZ);zIr=r(aNt,"FlaxMBartModel"),aNt.forEach(t),QIr=r(BDe," (mBART model)"),BDe.forEach(t),WIr=i(ae),UC=n(ae,"LI",{});var NDe=s(UC);TEe=n(NDe,"STRONG",{});var nNt=s(TEe);HIr=r(nNt,"mt5"),nNt.forEach(t),UIr=r(NDe," \u2014 "),vZ=n(NDe,"A",{href:!0});var sNt=s(vZ);JIr=r(sNt,"FlaxMT5Model"),sNt.forEach(t),YIr=r(NDe," (MT5 model)"),NDe.forEach(t),KIr=i(ae),JC=n(ae,"LI",{});var IDe=s(JC);MEe=n(IDe,"STRONG",{});var lNt=s(MEe);ZIr=r(lNt,"opt"),lNt.forEach(t),eqr=r(IDe," \u2014 "),FZ=n(IDe,"A",{href:!0});var iNt=s(FZ);oqr=r(iNt,"FlaxOPTModel"),iNt.forEach(t),rqr=r(IDe," (OPT model)"),IDe.forEach(t),tqr=i(ae),YC=n(ae,"LI",{});var qDe=s(YC);EEe=n(qDe,"STRONG",{});var dNt=s(EEe);aqr=r(dNt,"pegasus"),dNt.forEach(t),nqr=r(qDe," \u2014 "),TZ=n(qDe,"A",{href:!0});var cNt=s(TZ);sqr=r(cNt,"FlaxPegasusModel"),cNt.forEach(t),lqr=r(qDe," (Pegasus model)"),qDe.forEach(t),iqr=i(ae),KC=n(ae,"LI",{});var jDe=s(KC);CEe=n(jDe,"STRONG",{});var fNt=s(CEe);dqr=r(fNt,"roberta"),fNt.forEach(t),cqr=r(jDe," \u2014 "),MZ=n(jDe,"A",{href:!0});var mNt=s(MZ);fqr=r(mNt,"FlaxRobertaModel"),mNt.forEach(t),mqr=r(jDe," (RoBERTa model)"),jDe.forEach(t),gqr=i(ae),ZC=n(ae,"LI",{});var DDe=s(ZC);wEe=n(DDe,"STRONG",{});var gNt=s(wEe);hqr=r(gNt,"roformer"),gNt.forEach(t),pqr=r(DDe," \u2014 "),EZ=n(DDe,"A",{href:!0});var hNt=s(EZ);_qr=r(hNt,"FlaxRoFormerModel"),hNt.forEach(t),uqr=r(DDe," (RoFormer model)"),DDe.forEach(t),bqr=i(ae),e3=n(ae,"LI",{});var GDe=s(e3);AEe=n(GDe,"STRONG",{});var pNt=s(AEe);vqr=r(pNt,"t5"),pNt.forEach(t),Fqr=r(GDe," \u2014 "),CZ=n(GDe,"A",{href:!0});var _Nt=s(CZ);Tqr=r(_Nt,"FlaxT5Model"),_Nt.forEach(t),Mqr=r(GDe," (T5 model)"),GDe.forEach(t),Eqr=i(ae),o3=n(ae,"LI",{});var ODe=s(o3);LEe=n(ODe,"STRONG",{});var uNt=s(LEe);Cqr=r(uNt,"vision-text-dual-encoder"),uNt.forEach(t),wqr=r(ODe," \u2014 "),wZ=n(ODe,"A",{href:!0});var bNt=s(wZ);Aqr=r(bNt,"FlaxVisionTextDualEncoderModel"),bNt.forEach(t),Lqr=r(ODe," (VisionTextDualEncoder model)"),ODe.forEach(t),yqr=i(ae),r3=n(ae,"LI",{});var VDe=s(r3);yEe=n(VDe,"STRONG",{});var vNt=s(yEe);xqr=r(vNt,"vit"),vNt.forEach(t),$qr=r(VDe," \u2014 "),AZ=n(VDe,"A",{href:!0});var FNt=s(AZ);kqr=r(FNt,"FlaxViTModel"),FNt.forEach(t),Sqr=r(VDe," (ViT model)"),VDe.forEach(t),Rqr=i(ae),t3=n(ae,"LI",{});var XDe=s(t3);xEe=n(XDe,"STRONG",{});var TNt=s(xEe);Pqr=r(TNt,"wav2vec2"),TNt.forEach(t),Bqr=r(XDe," \u2014 "),LZ=n(XDe,"A",{href:!0});var MNt=s(LZ);Nqr=r(MNt,"FlaxWav2Vec2Model"),MNt.forEach(t),Iqr=r(XDe," (Wav2Vec2 model)"),XDe.forEach(t),qqr=i(ae),a3=n(ae,"LI",{});var zDe=s(a3);$Ee=n(zDe,"STRONG",{});var ENt=s($Ee);jqr=r(ENt,"xglm"),ENt.forEach(t),Dqr=r(zDe," \u2014 "),yZ=n(zDe,"A",{href:!0});var CNt=s(yZ);Gqr=r(CNt,"FlaxXGLMModel"),CNt.forEach(t),Oqr=r(zDe," (XGLM model)"),zDe.forEach(t),Vqr=i(ae),n3=n(ae,"LI",{});var QDe=s(n3);kEe=n(QDe,"STRONG",{});var wNt=s(kEe);Xqr=r(wNt,"xlm-roberta"),wNt.forEach(t),zqr=r(QDe," \u2014 "),xZ=n(QDe,"A",{href:!0});var ANt=s(xZ);Qqr=r(ANt,"FlaxXLMRobertaModel"),ANt.forEach(t),Wqr=r(QDe," (XLM-RoBERTa model)"),QDe.forEach(t),ae.forEach(t),Hqr=i(ei),T(s3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),nXe=i(f),Wc=n(f,"H2",{class:!0});var hQe=s(Wc);l3=n(hQe,"A",{id:!0,class:!0,href:!0});var LNt=s(l3);SEe=n(LNt,"SPAN",{});var yNt=s(SEe);T(Qx.$$.fragment,yNt),yNt.forEach(t),LNt.forEach(t),Uqr=i(hQe),REe=n(hQe,"SPAN",{});var xNt=s(REe);Jqr=r(xNt,"FlaxAutoModelForCausalLM"),xNt.forEach(t),hQe.forEach(t),sXe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Wx.$$.fragment,oi),Yqr=i(oi),Hc=n(oi,"P",{});var cte=s(Hc);Kqr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$Z=n(cte,"A",{href:!0});var $Nt=s($Z);Zqr=r($Nt,"from_pretrained()"),$Nt.forEach(t),ejr=r(cte," class method or the "),kZ=n(cte,"A",{href:!0});var kNt=s(kZ);ojr=r(kNt,"from_config()"),kNt.forEach(t),rjr=r(cte,` class
method.`),cte.forEach(t),tjr=i(oi),Hx=n(oi,"P",{});var pQe=s(Hx);ajr=r(pQe,"This class cannot be instantiated directly using "),PEe=n(pQe,"CODE",{});var SNt=s(PEe);njr=r(SNt,"__init__()"),SNt.forEach(t),sjr=r(pQe," (throws an error)."),pQe.forEach(t),ljr=i(oi),Qt=n(oi,"DIV",{class:!0});var m6=s(Qt);T(Ux.$$.fragment,m6),ijr=i(m6),BEe=n(m6,"P",{});var RNt=s(BEe);djr=r(RNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RNt.forEach(t),cjr=i(m6),Uc=n(m6,"P",{});var fte=s(Uc);fjr=r(fte,`Note:
Loading a model from its configuration file does `),NEe=n(fte,"STRONG",{});var PNt=s(NEe);mjr=r(PNt,"not"),PNt.forEach(t),gjr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(fte,"A",{href:!0});var BNt=s(SZ);hjr=r(BNt,"from_pretrained()"),BNt.forEach(t),pjr=r(fte," to load the model weights."),fte.forEach(t),_jr=i(m6),T(i3.$$.fragment,m6),m6.forEach(t),ujr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Jx.$$.fragment,ri),bjr=i(ri),IEe=n(ri,"P",{});var NNt=s(IEe);vjr=r(NNt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NNt.forEach(t),Fjr=i(ri),Tn=n(ri,"P",{});var g6=s(Tn);Tjr=r(g6,"The model class to instantiate is selected based on the "),qEe=n(g6,"CODE",{});var INt=s(qEe);Mjr=r(INt,"model_type"),INt.forEach(t),Ejr=r(g6,` property of the config object (either
passed as an argument or loaded from `),jEe=n(g6,"CODE",{});var qNt=s(jEe);Cjr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),wjr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=n(g6,"CODE",{});var jNt=s(DEe);Ajr=r(jNt,"pretrained_model_name_or_path"),jNt.forEach(t),Ljr=r(g6,":"),g6.forEach(t),yjr=i(ri),xe=n(ri,"UL",{});var Ie=s(xe);d3=n(Ie,"LI",{});var WDe=s(d3);GEe=n(WDe,"STRONG",{});var DNt=s(GEe);xjr=r(DNt,"bart"),DNt.forEach(t),$jr=r(WDe," \u2014 "),RZ=n(WDe,"A",{href:!0});var GNt=s(RZ);kjr=r(GNt,"FlaxBartForCausalLM"),GNt.forEach(t),Sjr=r(WDe," (BART model)"),WDe.forEach(t),Rjr=i(Ie),c3=n(Ie,"LI",{});var HDe=s(c3);OEe=n(HDe,"STRONG",{});var ONt=s(OEe);Pjr=r(ONt,"bert"),ONt.forEach(t),Bjr=r(HDe," \u2014 "),PZ=n(HDe,"A",{href:!0});var VNt=s(PZ);Njr=r(VNt,"FlaxBertForCausalLM"),VNt.forEach(t),Ijr=r(HDe," (BERT model)"),HDe.forEach(t),qjr=i(Ie),f3=n(Ie,"LI",{});var UDe=s(f3);VEe=n(UDe,"STRONG",{});var XNt=s(VEe);jjr=r(XNt,"big_bird"),XNt.forEach(t),Djr=r(UDe," \u2014 "),BZ=n(UDe,"A",{href:!0});var zNt=s(BZ);Gjr=r(zNt,"FlaxBigBirdForCausalLM"),zNt.forEach(t),Ojr=r(UDe," (BigBird model)"),UDe.forEach(t),Vjr=i(Ie),m3=n(Ie,"LI",{});var JDe=s(m3);XEe=n(JDe,"STRONG",{});var QNt=s(XEe);Xjr=r(QNt,"electra"),QNt.forEach(t),zjr=r(JDe," \u2014 "),NZ=n(JDe,"A",{href:!0});var WNt=s(NZ);Qjr=r(WNt,"FlaxElectraForCausalLM"),WNt.forEach(t),Wjr=r(JDe," (ELECTRA model)"),JDe.forEach(t),Hjr=i(Ie),g3=n(Ie,"LI",{});var YDe=s(g3);zEe=n(YDe,"STRONG",{});var HNt=s(zEe);Ujr=r(HNt,"gpt2"),HNt.forEach(t),Jjr=r(YDe," \u2014 "),IZ=n(YDe,"A",{href:!0});var UNt=s(IZ);Yjr=r(UNt,"FlaxGPT2LMHeadModel"),UNt.forEach(t),Kjr=r(YDe," (OpenAI GPT-2 model)"),YDe.forEach(t),Zjr=i(Ie),h3=n(Ie,"LI",{});var KDe=s(h3);QEe=n(KDe,"STRONG",{});var JNt=s(QEe);eDr=r(JNt,"gpt_neo"),JNt.forEach(t),oDr=r(KDe," \u2014 "),qZ=n(KDe,"A",{href:!0});var YNt=s(qZ);rDr=r(YNt,"FlaxGPTNeoForCausalLM"),YNt.forEach(t),tDr=r(KDe," (GPT Neo model)"),KDe.forEach(t),aDr=i(Ie),p3=n(Ie,"LI",{});var ZDe=s(p3);WEe=n(ZDe,"STRONG",{});var KNt=s(WEe);nDr=r(KNt,"gptj"),KNt.forEach(t),sDr=r(ZDe," \u2014 "),jZ=n(ZDe,"A",{href:!0});var ZNt=s(jZ);lDr=r(ZNt,"FlaxGPTJForCausalLM"),ZNt.forEach(t),iDr=r(ZDe," (GPT-J model)"),ZDe.forEach(t),dDr=i(Ie),_3=n(Ie,"LI",{});var eGe=s(_3);HEe=n(eGe,"STRONG",{});var eIt=s(HEe);cDr=r(eIt,"opt"),eIt.forEach(t),fDr=r(eGe," \u2014 "),DZ=n(eGe,"A",{href:!0});var oIt=s(DZ);mDr=r(oIt,"FlaxOPTForCausalLM"),oIt.forEach(t),gDr=r(eGe," (OPT model)"),eGe.forEach(t),hDr=i(Ie),u3=n(Ie,"LI",{});var oGe=s(u3);UEe=n(oGe,"STRONG",{});var rIt=s(UEe);pDr=r(rIt,"roberta"),rIt.forEach(t),_Dr=r(oGe," \u2014 "),GZ=n(oGe,"A",{href:!0});var tIt=s(GZ);uDr=r(tIt,"FlaxRobertaForCausalLM"),tIt.forEach(t),bDr=r(oGe," (RoBERTa model)"),oGe.forEach(t),vDr=i(Ie),b3=n(Ie,"LI",{});var rGe=s(b3);JEe=n(rGe,"STRONG",{});var aIt=s(JEe);FDr=r(aIt,"xglm"),aIt.forEach(t),TDr=r(rGe," \u2014 "),OZ=n(rGe,"A",{href:!0});var nIt=s(OZ);MDr=r(nIt,"FlaxXGLMForCausalLM"),nIt.forEach(t),EDr=r(rGe," (XGLM model)"),rGe.forEach(t),Ie.forEach(t),CDr=i(ri),T(v3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),lXe=i(f),Jc=n(f,"H2",{class:!0});var _Qe=s(Jc);F3=n(_Qe,"A",{id:!0,class:!0,href:!0});var sIt=s(F3);YEe=n(sIt,"SPAN",{});var lIt=s(YEe);T(Yx.$$.fragment,lIt),lIt.forEach(t),sIt.forEach(t),wDr=i(_Qe),KEe=n(_Qe,"SPAN",{});var iIt=s(KEe);ADr=r(iIt,"FlaxAutoModelForPreTraining"),iIt.forEach(t),_Qe.forEach(t),iXe=i(f),_r=n(f,"DIV",{class:!0});var ti=s(_r);T(Kx.$$.fragment,ti),LDr=i(ti),Yc=n(ti,"P",{});var mte=s(Yc);yDr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VZ=n(mte,"A",{href:!0});var dIt=s(VZ);xDr=r(dIt,"from_pretrained()"),dIt.forEach(t),$Dr=r(mte," class method or the "),XZ=n(mte,"A",{href:!0});var cIt=s(XZ);kDr=r(cIt,"from_config()"),cIt.forEach(t),SDr=r(mte,` class
method.`),mte.forEach(t),RDr=i(ti),Zx=n(ti,"P",{});var uQe=s(Zx);PDr=r(uQe,"This class cannot be instantiated directly using "),ZEe=n(uQe,"CODE",{});var fIt=s(ZEe);BDr=r(fIt,"__init__()"),fIt.forEach(t),NDr=r(uQe," (throws an error)."),uQe.forEach(t),IDr=i(ti),Wt=n(ti,"DIV",{class:!0});var h6=s(Wt);T(e$.$$.fragment,h6),qDr=i(h6),eCe=n(h6,"P",{});var mIt=s(eCe);jDr=r(mIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mIt.forEach(t),DDr=i(h6),Kc=n(h6,"P",{});var gte=s(Kc);GDr=r(gte,`Note:
Loading a model from its configuration file does `),oCe=n(gte,"STRONG",{});var gIt=s(oCe);ODr=r(gIt,"not"),gIt.forEach(t),VDr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(gte,"A",{href:!0});var hIt=s(zZ);XDr=r(hIt,"from_pretrained()"),hIt.forEach(t),zDr=r(gte," to load the model weights."),gte.forEach(t),QDr=i(h6),T(T3.$$.fragment,h6),h6.forEach(t),WDr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(o$.$$.fragment,ai),HDr=i(ai),rCe=n(ai,"P",{});var pIt=s(rCe);UDr=r(pIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pIt.forEach(t),JDr=i(ai),Mn=n(ai,"P",{});var p6=s(Mn);YDr=r(p6,"The model class to instantiate is selected based on the "),tCe=n(p6,"CODE",{});var _It=s(tCe);KDr=r(_It,"model_type"),_It.forEach(t),ZDr=r(p6,` property of the config object (either
passed as an argument or loaded from `),aCe=n(p6,"CODE",{});var uIt=s(aCe);eGr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),oGr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nCe=n(p6,"CODE",{});var bIt=s(nCe);rGr=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),tGr=r(p6,":"),p6.forEach(t),aGr=i(ai),Ee=n(ai,"UL",{});var we=s(Ee);M3=n(we,"LI",{});var tGe=s(M3);sCe=n(tGe,"STRONG",{});var vIt=s(sCe);nGr=r(vIt,"albert"),vIt.forEach(t),sGr=r(tGe," \u2014 "),QZ=n(tGe,"A",{href:!0});var FIt=s(QZ);lGr=r(FIt,"FlaxAlbertForPreTraining"),FIt.forEach(t),iGr=r(tGe," (ALBERT model)"),tGe.forEach(t),dGr=i(we),E3=n(we,"LI",{});var aGe=s(E3);lCe=n(aGe,"STRONG",{});var TIt=s(lCe);cGr=r(TIt,"bart"),TIt.forEach(t),fGr=r(aGe," \u2014 "),WZ=n(aGe,"A",{href:!0});var MIt=s(WZ);mGr=r(MIt,"FlaxBartForConditionalGeneration"),MIt.forEach(t),gGr=r(aGe," (BART model)"),aGe.forEach(t),hGr=i(we),C3=n(we,"LI",{});var nGe=s(C3);iCe=n(nGe,"STRONG",{});var EIt=s(iCe);pGr=r(EIt,"bert"),EIt.forEach(t),_Gr=r(nGe," \u2014 "),HZ=n(nGe,"A",{href:!0});var CIt=s(HZ);uGr=r(CIt,"FlaxBertForPreTraining"),CIt.forEach(t),bGr=r(nGe," (BERT model)"),nGe.forEach(t),vGr=i(we),w3=n(we,"LI",{});var sGe=s(w3);dCe=n(sGe,"STRONG",{});var wIt=s(dCe);FGr=r(wIt,"big_bird"),wIt.forEach(t),TGr=r(sGe," \u2014 "),UZ=n(sGe,"A",{href:!0});var AIt=s(UZ);MGr=r(AIt,"FlaxBigBirdForPreTraining"),AIt.forEach(t),EGr=r(sGe," (BigBird model)"),sGe.forEach(t),CGr=i(we),A3=n(we,"LI",{});var lGe=s(A3);cCe=n(lGe,"STRONG",{});var LIt=s(cCe);wGr=r(LIt,"electra"),LIt.forEach(t),AGr=r(lGe," \u2014 "),JZ=n(lGe,"A",{href:!0});var yIt=s(JZ);LGr=r(yIt,"FlaxElectraForPreTraining"),yIt.forEach(t),yGr=r(lGe," (ELECTRA model)"),lGe.forEach(t),xGr=i(we),L3=n(we,"LI",{});var iGe=s(L3);fCe=n(iGe,"STRONG",{});var xIt=s(fCe);$Gr=r(xIt,"longt5"),xIt.forEach(t),kGr=r(iGe," \u2014 "),YZ=n(iGe,"A",{href:!0});var $It=s(YZ);SGr=r($It,"FlaxLongT5ForConditionalGeneration"),$It.forEach(t),RGr=r(iGe," (LongT5 model)"),iGe.forEach(t),PGr=i(we),y3=n(we,"LI",{});var dGe=s(y3);mCe=n(dGe,"STRONG",{});var kIt=s(mCe);BGr=r(kIt,"mbart"),kIt.forEach(t),NGr=r(dGe," \u2014 "),KZ=n(dGe,"A",{href:!0});var SIt=s(KZ);IGr=r(SIt,"FlaxMBartForConditionalGeneration"),SIt.forEach(t),qGr=r(dGe," (mBART model)"),dGe.forEach(t),jGr=i(we),x3=n(we,"LI",{});var cGe=s(x3);gCe=n(cGe,"STRONG",{});var RIt=s(gCe);DGr=r(RIt,"mt5"),RIt.forEach(t),GGr=r(cGe," \u2014 "),ZZ=n(cGe,"A",{href:!0});var PIt=s(ZZ);OGr=r(PIt,"FlaxMT5ForConditionalGeneration"),PIt.forEach(t),VGr=r(cGe," (MT5 model)"),cGe.forEach(t),XGr=i(we),$3=n(we,"LI",{});var fGe=s($3);hCe=n(fGe,"STRONG",{});var BIt=s(hCe);zGr=r(BIt,"roberta"),BIt.forEach(t),QGr=r(fGe," \u2014 "),eee=n(fGe,"A",{href:!0});var NIt=s(eee);WGr=r(NIt,"FlaxRobertaForMaskedLM"),NIt.forEach(t),HGr=r(fGe," (RoBERTa model)"),fGe.forEach(t),UGr=i(we),k3=n(we,"LI",{});var mGe=s(k3);pCe=n(mGe,"STRONG",{});var IIt=s(pCe);JGr=r(IIt,"roformer"),IIt.forEach(t),YGr=r(mGe," \u2014 "),oee=n(mGe,"A",{href:!0});var qIt=s(oee);KGr=r(qIt,"FlaxRoFormerForMaskedLM"),qIt.forEach(t),ZGr=r(mGe," (RoFormer model)"),mGe.forEach(t),eOr=i(we),S3=n(we,"LI",{});var gGe=s(S3);_Ce=n(gGe,"STRONG",{});var jIt=s(_Ce);oOr=r(jIt,"t5"),jIt.forEach(t),rOr=r(gGe," \u2014 "),ree=n(gGe,"A",{href:!0});var DIt=s(ree);tOr=r(DIt,"FlaxT5ForConditionalGeneration"),DIt.forEach(t),aOr=r(gGe," (T5 model)"),gGe.forEach(t),nOr=i(we),R3=n(we,"LI",{});var hGe=s(R3);uCe=n(hGe,"STRONG",{});var GIt=s(uCe);sOr=r(GIt,"wav2vec2"),GIt.forEach(t),lOr=r(hGe," \u2014 "),tee=n(hGe,"A",{href:!0});var OIt=s(tee);iOr=r(OIt,"FlaxWav2Vec2ForPreTraining"),OIt.forEach(t),dOr=r(hGe," (Wav2Vec2 model)"),hGe.forEach(t),cOr=i(we),P3=n(we,"LI",{});var pGe=s(P3);bCe=n(pGe,"STRONG",{});var VIt=s(bCe);fOr=r(VIt,"xlm-roberta"),VIt.forEach(t),mOr=r(pGe," \u2014 "),aee=n(pGe,"A",{href:!0});var XIt=s(aee);gOr=r(XIt,"FlaxXLMRobertaForMaskedLM"),XIt.forEach(t),hOr=r(pGe," (XLM-RoBERTa model)"),pGe.forEach(t),we.forEach(t),pOr=i(ai),T(B3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),dXe=i(f),Zc=n(f,"H2",{class:!0});var bQe=s(Zc);N3=n(bQe,"A",{id:!0,class:!0,href:!0});var zIt=s(N3);vCe=n(zIt,"SPAN",{});var QIt=s(vCe);T(r$.$$.fragment,QIt),QIt.forEach(t),zIt.forEach(t),_Or=i(bQe),FCe=n(bQe,"SPAN",{});var WIt=s(FCe);uOr=r(WIt,"FlaxAutoModelForMaskedLM"),WIt.forEach(t),bQe.forEach(t),cXe=i(f),ur=n(f,"DIV",{class:!0});var ni=s(ur);T(t$.$$.fragment,ni),bOr=i(ni),ef=n(ni,"P",{});var hte=s(ef);vOr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nee=n(hte,"A",{href:!0});var HIt=s(nee);FOr=r(HIt,"from_pretrained()"),HIt.forEach(t),TOr=r(hte," class method or the "),see=n(hte,"A",{href:!0});var UIt=s(see);MOr=r(UIt,"from_config()"),UIt.forEach(t),EOr=r(hte,` class
method.`),hte.forEach(t),COr=i(ni),a$=n(ni,"P",{});var vQe=s(a$);wOr=r(vQe,"This class cannot be instantiated directly using "),TCe=n(vQe,"CODE",{});var JIt=s(TCe);AOr=r(JIt,"__init__()"),JIt.forEach(t),LOr=r(vQe," (throws an error)."),vQe.forEach(t),yOr=i(ni),Ht=n(ni,"DIV",{class:!0});var _6=s(Ht);T(n$.$$.fragment,_6),xOr=i(_6),MCe=n(_6,"P",{});var YIt=s(MCe);$Or=r(YIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YIt.forEach(t),kOr=i(_6),of=n(_6,"P",{});var pte=s(of);SOr=r(pte,`Note:
Loading a model from its configuration file does `),ECe=n(pte,"STRONG",{});var KIt=s(ECe);ROr=r(KIt,"not"),KIt.forEach(t),POr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=n(pte,"A",{href:!0});var ZIt=s(lee);BOr=r(ZIt,"from_pretrained()"),ZIt.forEach(t),NOr=r(pte," to load the model weights."),pte.forEach(t),IOr=i(_6),T(I3.$$.fragment,_6),_6.forEach(t),qOr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(s$.$$.fragment,si),jOr=i(si),CCe=n(si,"P",{});var eqt=s(CCe);DOr=r(eqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eqt.forEach(t),GOr=i(si),En=n(si,"P",{});var u6=s(En);OOr=r(u6,"The model class to instantiate is selected based on the "),wCe=n(u6,"CODE",{});var oqt=s(wCe);VOr=r(oqt,"model_type"),oqt.forEach(t),XOr=r(u6,` property of the config object (either
passed as an argument or loaded from `),ACe=n(u6,"CODE",{});var rqt=s(ACe);zOr=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),QOr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=n(u6,"CODE",{});var tqt=s(LCe);WOr=r(tqt,"pretrained_model_name_or_path"),tqt.forEach(t),HOr=r(u6,":"),u6.forEach(t),UOr=i(si),$e=n(si,"UL",{});var qe=s($e);q3=n(qe,"LI",{});var _Ge=s(q3);yCe=n(_Ge,"STRONG",{});var aqt=s(yCe);JOr=r(aqt,"albert"),aqt.forEach(t),YOr=r(_Ge," \u2014 "),iee=n(_Ge,"A",{href:!0});var nqt=s(iee);KOr=r(nqt,"FlaxAlbertForMaskedLM"),nqt.forEach(t),ZOr=r(_Ge," (ALBERT model)"),_Ge.forEach(t),eVr=i(qe),j3=n(qe,"LI",{});var uGe=s(j3);xCe=n(uGe,"STRONG",{});var sqt=s(xCe);oVr=r(sqt,"bart"),sqt.forEach(t),rVr=r(uGe," \u2014 "),dee=n(uGe,"A",{href:!0});var lqt=s(dee);tVr=r(lqt,"FlaxBartForConditionalGeneration"),lqt.forEach(t),aVr=r(uGe," (BART model)"),uGe.forEach(t),nVr=i(qe),D3=n(qe,"LI",{});var bGe=s(D3);$Ce=n(bGe,"STRONG",{});var iqt=s($Ce);sVr=r(iqt,"bert"),iqt.forEach(t),lVr=r(bGe," \u2014 "),cee=n(bGe,"A",{href:!0});var dqt=s(cee);iVr=r(dqt,"FlaxBertForMaskedLM"),dqt.forEach(t),dVr=r(bGe," (BERT model)"),bGe.forEach(t),cVr=i(qe),G3=n(qe,"LI",{});var vGe=s(G3);kCe=n(vGe,"STRONG",{});var cqt=s(kCe);fVr=r(cqt,"big_bird"),cqt.forEach(t),mVr=r(vGe," \u2014 "),fee=n(vGe,"A",{href:!0});var fqt=s(fee);gVr=r(fqt,"FlaxBigBirdForMaskedLM"),fqt.forEach(t),hVr=r(vGe," (BigBird model)"),vGe.forEach(t),pVr=i(qe),O3=n(qe,"LI",{});var FGe=s(O3);SCe=n(FGe,"STRONG",{});var mqt=s(SCe);_Vr=r(mqt,"distilbert"),mqt.forEach(t),uVr=r(FGe," \u2014 "),mee=n(FGe,"A",{href:!0});var gqt=s(mee);bVr=r(gqt,"FlaxDistilBertForMaskedLM"),gqt.forEach(t),vVr=r(FGe," (DistilBERT model)"),FGe.forEach(t),FVr=i(qe),V3=n(qe,"LI",{});var TGe=s(V3);RCe=n(TGe,"STRONG",{});var hqt=s(RCe);TVr=r(hqt,"electra"),hqt.forEach(t),MVr=r(TGe," \u2014 "),gee=n(TGe,"A",{href:!0});var pqt=s(gee);EVr=r(pqt,"FlaxElectraForMaskedLM"),pqt.forEach(t),CVr=r(TGe," (ELECTRA model)"),TGe.forEach(t),wVr=i(qe),X3=n(qe,"LI",{});var MGe=s(X3);PCe=n(MGe,"STRONG",{});var _qt=s(PCe);AVr=r(_qt,"mbart"),_qt.forEach(t),LVr=r(MGe," \u2014 "),hee=n(MGe,"A",{href:!0});var uqt=s(hee);yVr=r(uqt,"FlaxMBartForConditionalGeneration"),uqt.forEach(t),xVr=r(MGe," (mBART model)"),MGe.forEach(t),$Vr=i(qe),z3=n(qe,"LI",{});var EGe=s(z3);BCe=n(EGe,"STRONG",{});var bqt=s(BCe);kVr=r(bqt,"roberta"),bqt.forEach(t),SVr=r(EGe," \u2014 "),pee=n(EGe,"A",{href:!0});var vqt=s(pee);RVr=r(vqt,"FlaxRobertaForMaskedLM"),vqt.forEach(t),PVr=r(EGe," (RoBERTa model)"),EGe.forEach(t),BVr=i(qe),Q3=n(qe,"LI",{});var CGe=s(Q3);NCe=n(CGe,"STRONG",{});var Fqt=s(NCe);NVr=r(Fqt,"roformer"),Fqt.forEach(t),IVr=r(CGe," \u2014 "),_ee=n(CGe,"A",{href:!0});var Tqt=s(_ee);qVr=r(Tqt,"FlaxRoFormerForMaskedLM"),Tqt.forEach(t),jVr=r(CGe," (RoFormer model)"),CGe.forEach(t),DVr=i(qe),W3=n(qe,"LI",{});var wGe=s(W3);ICe=n(wGe,"STRONG",{});var Mqt=s(ICe);GVr=r(Mqt,"xlm-roberta"),Mqt.forEach(t),OVr=r(wGe," \u2014 "),uee=n(wGe,"A",{href:!0});var Eqt=s(uee);VVr=r(Eqt,"FlaxXLMRobertaForMaskedLM"),Eqt.forEach(t),XVr=r(wGe," (XLM-RoBERTa model)"),wGe.forEach(t),qe.forEach(t),zVr=i(si),T(H3.$$.fragment,si),si.forEach(t),ni.forEach(t),fXe=i(f),rf=n(f,"H2",{class:!0});var FQe=s(rf);U3=n(FQe,"A",{id:!0,class:!0,href:!0});var Cqt=s(U3);qCe=n(Cqt,"SPAN",{});var wqt=s(qCe);T(l$.$$.fragment,wqt),wqt.forEach(t),Cqt.forEach(t),QVr=i(FQe),jCe=n(FQe,"SPAN",{});var Aqt=s(jCe);WVr=r(Aqt,"FlaxAutoModelForSeq2SeqLM"),Aqt.forEach(t),FQe.forEach(t),mXe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(i$.$$.fragment,li),HVr=i(li),tf=n(li,"P",{});var _te=s(tf);UVr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bee=n(_te,"A",{href:!0});var Lqt=s(bee);JVr=r(Lqt,"from_pretrained()"),Lqt.forEach(t),YVr=r(_te," class method or the "),vee=n(_te,"A",{href:!0});var yqt=s(vee);KVr=r(yqt,"from_config()"),yqt.forEach(t),ZVr=r(_te,` class
method.`),_te.forEach(t),eXr=i(li),d$=n(li,"P",{});var TQe=s(d$);oXr=r(TQe,"This class cannot be instantiated directly using "),DCe=n(TQe,"CODE",{});var xqt=s(DCe);rXr=r(xqt,"__init__()"),xqt.forEach(t),tXr=r(TQe," (throws an error)."),TQe.forEach(t),aXr=i(li),Ut=n(li,"DIV",{class:!0});var b6=s(Ut);T(c$.$$.fragment,b6),nXr=i(b6),GCe=n(b6,"P",{});var $qt=s(GCe);sXr=r($qt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$qt.forEach(t),lXr=i(b6),af=n(b6,"P",{});var ute=s(af);iXr=r(ute,`Note:
Loading a model from its configuration file does `),OCe=n(ute,"STRONG",{});var kqt=s(OCe);dXr=r(kqt,"not"),kqt.forEach(t),cXr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(ute,"A",{href:!0});var Sqt=s(Fee);fXr=r(Sqt,"from_pretrained()"),Sqt.forEach(t),mXr=r(ute," to load the model weights."),ute.forEach(t),gXr=i(b6),T(J3.$$.fragment,b6),b6.forEach(t),hXr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(f$.$$.fragment,ii),pXr=i(ii),VCe=n(ii,"P",{});var Rqt=s(VCe);_Xr=r(Rqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rqt.forEach(t),uXr=i(ii),Cn=n(ii,"P",{});var v6=s(Cn);bXr=r(v6,"The model class to instantiate is selected based on the "),XCe=n(v6,"CODE",{});var Pqt=s(XCe);vXr=r(Pqt,"model_type"),Pqt.forEach(t),FXr=r(v6,` property of the config object (either
passed as an argument or loaded from `),zCe=n(v6,"CODE",{});var Bqt=s(zCe);TXr=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),MXr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=n(v6,"CODE",{});var Nqt=s(QCe);EXr=r(Nqt,"pretrained_model_name_or_path"),Nqt.forEach(t),CXr=r(v6,":"),v6.forEach(t),wXr=i(ii),ke=n(ii,"UL",{});var je=s(ke);Y3=n(je,"LI",{});var AGe=s(Y3);WCe=n(AGe,"STRONG",{});var Iqt=s(WCe);AXr=r(Iqt,"bart"),Iqt.forEach(t),LXr=r(AGe," \u2014 "),Tee=n(AGe,"A",{href:!0});var qqt=s(Tee);yXr=r(qqt,"FlaxBartForConditionalGeneration"),qqt.forEach(t),xXr=r(AGe," (BART model)"),AGe.forEach(t),$Xr=i(je),K3=n(je,"LI",{});var LGe=s(K3);HCe=n(LGe,"STRONG",{});var jqt=s(HCe);kXr=r(jqt,"blenderbot"),jqt.forEach(t),SXr=r(LGe," \u2014 "),Mee=n(LGe,"A",{href:!0});var Dqt=s(Mee);RXr=r(Dqt,"FlaxBlenderbotForConditionalGeneration"),Dqt.forEach(t),PXr=r(LGe," (Blenderbot model)"),LGe.forEach(t),BXr=i(je),Z3=n(je,"LI",{});var yGe=s(Z3);UCe=n(yGe,"STRONG",{});var Gqt=s(UCe);NXr=r(Gqt,"blenderbot-small"),Gqt.forEach(t),IXr=r(yGe," \u2014 "),Eee=n(yGe,"A",{href:!0});var Oqt=s(Eee);qXr=r(Oqt,"FlaxBlenderbotSmallForConditionalGeneration"),Oqt.forEach(t),jXr=r(yGe," (BlenderbotSmall model)"),yGe.forEach(t),DXr=i(je),e0=n(je,"LI",{});var xGe=s(e0);JCe=n(xGe,"STRONG",{});var Vqt=s(JCe);GXr=r(Vqt,"encoder-decoder"),Vqt.forEach(t),OXr=r(xGe," \u2014 "),Cee=n(xGe,"A",{href:!0});var Xqt=s(Cee);VXr=r(Xqt,"FlaxEncoderDecoderModel"),Xqt.forEach(t),XXr=r(xGe," (Encoder decoder model)"),xGe.forEach(t),zXr=i(je),o0=n(je,"LI",{});var $Ge=s(o0);YCe=n($Ge,"STRONG",{});var zqt=s(YCe);QXr=r(zqt,"longt5"),zqt.forEach(t),WXr=r($Ge," \u2014 "),wee=n($Ge,"A",{href:!0});var Qqt=s(wee);HXr=r(Qqt,"FlaxLongT5ForConditionalGeneration"),Qqt.forEach(t),UXr=r($Ge," (LongT5 model)"),$Ge.forEach(t),JXr=i(je),r0=n(je,"LI",{});var kGe=s(r0);KCe=n(kGe,"STRONG",{});var Wqt=s(KCe);YXr=r(Wqt,"marian"),Wqt.forEach(t),KXr=r(kGe," \u2014 "),Aee=n(kGe,"A",{href:!0});var Hqt=s(Aee);ZXr=r(Hqt,"FlaxMarianMTModel"),Hqt.forEach(t),ezr=r(kGe," (Marian model)"),kGe.forEach(t),ozr=i(je),t0=n(je,"LI",{});var SGe=s(t0);ZCe=n(SGe,"STRONG",{});var Uqt=s(ZCe);rzr=r(Uqt,"mbart"),Uqt.forEach(t),tzr=r(SGe," \u2014 "),Lee=n(SGe,"A",{href:!0});var Jqt=s(Lee);azr=r(Jqt,"FlaxMBartForConditionalGeneration"),Jqt.forEach(t),nzr=r(SGe," (mBART model)"),SGe.forEach(t),szr=i(je),a0=n(je,"LI",{});var RGe=s(a0);e3e=n(RGe,"STRONG",{});var Yqt=s(e3e);lzr=r(Yqt,"mt5"),Yqt.forEach(t),izr=r(RGe," \u2014 "),yee=n(RGe,"A",{href:!0});var Kqt=s(yee);dzr=r(Kqt,"FlaxMT5ForConditionalGeneration"),Kqt.forEach(t),czr=r(RGe," (MT5 model)"),RGe.forEach(t),fzr=i(je),n0=n(je,"LI",{});var PGe=s(n0);o3e=n(PGe,"STRONG",{});var Zqt=s(o3e);mzr=r(Zqt,"pegasus"),Zqt.forEach(t),gzr=r(PGe," \u2014 "),xee=n(PGe,"A",{href:!0});var ejt=s(xee);hzr=r(ejt,"FlaxPegasusForConditionalGeneration"),ejt.forEach(t),pzr=r(PGe," (Pegasus model)"),PGe.forEach(t),_zr=i(je),s0=n(je,"LI",{});var BGe=s(s0);r3e=n(BGe,"STRONG",{});var ojt=s(r3e);uzr=r(ojt,"t5"),ojt.forEach(t),bzr=r(BGe," \u2014 "),$ee=n(BGe,"A",{href:!0});var rjt=s($ee);vzr=r(rjt,"FlaxT5ForConditionalGeneration"),rjt.forEach(t),Fzr=r(BGe," (T5 model)"),BGe.forEach(t),je.forEach(t),Tzr=i(ii),T(l0.$$.fragment,ii),ii.forEach(t),li.forEach(t),gXe=i(f),nf=n(f,"H2",{class:!0});var MQe=s(nf);i0=n(MQe,"A",{id:!0,class:!0,href:!0});var tjt=s(i0);t3e=n(tjt,"SPAN",{});var ajt=s(t3e);T(m$.$$.fragment,ajt),ajt.forEach(t),tjt.forEach(t),Mzr=i(MQe),a3e=n(MQe,"SPAN",{});var njt=s(a3e);Ezr=r(njt,"FlaxAutoModelForSequenceClassification"),njt.forEach(t),MQe.forEach(t),hXe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(g$.$$.fragment,di),Czr=i(di),sf=n(di,"P",{});var bte=s(sf);wzr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kee=n(bte,"A",{href:!0});var sjt=s(kee);Azr=r(sjt,"from_pretrained()"),sjt.forEach(t),Lzr=r(bte," class method or the "),See=n(bte,"A",{href:!0});var ljt=s(See);yzr=r(ljt,"from_config()"),ljt.forEach(t),xzr=r(bte,` class
method.`),bte.forEach(t),$zr=i(di),h$=n(di,"P",{});var EQe=s(h$);kzr=r(EQe,"This class cannot be instantiated directly using "),n3e=n(EQe,"CODE",{});var ijt=s(n3e);Szr=r(ijt,"__init__()"),ijt.forEach(t),Rzr=r(EQe," (throws an error)."),EQe.forEach(t),Pzr=i(di),Jt=n(di,"DIV",{class:!0});var F6=s(Jt);T(p$.$$.fragment,F6),Bzr=i(F6),s3e=n(F6,"P",{});var djt=s(s3e);Nzr=r(djt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),djt.forEach(t),Izr=i(F6),lf=n(F6,"P",{});var vte=s(lf);qzr=r(vte,`Note:
Loading a model from its configuration file does `),l3e=n(vte,"STRONG",{});var cjt=s(l3e);jzr=r(cjt,"not"),cjt.forEach(t),Dzr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(vte,"A",{href:!0});var fjt=s(Ree);Gzr=r(fjt,"from_pretrained()"),fjt.forEach(t),Ozr=r(vte," to load the model weights."),vte.forEach(t),Vzr=i(F6),T(d0.$$.fragment,F6),F6.forEach(t),Xzr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(_$.$$.fragment,ci),zzr=i(ci),i3e=n(ci,"P",{});var mjt=s(i3e);Qzr=r(mjt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mjt.forEach(t),Wzr=i(ci),wn=n(ci,"P",{});var T6=s(wn);Hzr=r(T6,"The model class to instantiate is selected based on the "),d3e=n(T6,"CODE",{});var gjt=s(d3e);Uzr=r(gjt,"model_type"),gjt.forEach(t),Jzr=r(T6,` property of the config object (either
passed as an argument or loaded from `),c3e=n(T6,"CODE",{});var hjt=s(c3e);Yzr=r(hjt,"pretrained_model_name_or_path"),hjt.forEach(t),Kzr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(T6,"CODE",{});var pjt=s(f3e);Zzr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),eQr=r(T6,":"),T6.forEach(t),oQr=i(ci),Se=n(ci,"UL",{});var De=s(Se);c0=n(De,"LI",{});var NGe=s(c0);m3e=n(NGe,"STRONG",{});var _jt=s(m3e);rQr=r(_jt,"albert"),_jt.forEach(t),tQr=r(NGe," \u2014 "),Pee=n(NGe,"A",{href:!0});var ujt=s(Pee);aQr=r(ujt,"FlaxAlbertForSequenceClassification"),ujt.forEach(t),nQr=r(NGe," (ALBERT model)"),NGe.forEach(t),sQr=i(De),f0=n(De,"LI",{});var IGe=s(f0);g3e=n(IGe,"STRONG",{});var bjt=s(g3e);lQr=r(bjt,"bart"),bjt.forEach(t),iQr=r(IGe," \u2014 "),Bee=n(IGe,"A",{href:!0});var vjt=s(Bee);dQr=r(vjt,"FlaxBartForSequenceClassification"),vjt.forEach(t),cQr=r(IGe," (BART model)"),IGe.forEach(t),fQr=i(De),m0=n(De,"LI",{});var qGe=s(m0);h3e=n(qGe,"STRONG",{});var Fjt=s(h3e);mQr=r(Fjt,"bert"),Fjt.forEach(t),gQr=r(qGe," \u2014 "),Nee=n(qGe,"A",{href:!0});var Tjt=s(Nee);hQr=r(Tjt,"FlaxBertForSequenceClassification"),Tjt.forEach(t),pQr=r(qGe," (BERT model)"),qGe.forEach(t),_Qr=i(De),g0=n(De,"LI",{});var jGe=s(g0);p3e=n(jGe,"STRONG",{});var Mjt=s(p3e);uQr=r(Mjt,"big_bird"),Mjt.forEach(t),bQr=r(jGe," \u2014 "),Iee=n(jGe,"A",{href:!0});var Ejt=s(Iee);vQr=r(Ejt,"FlaxBigBirdForSequenceClassification"),Ejt.forEach(t),FQr=r(jGe," (BigBird model)"),jGe.forEach(t),TQr=i(De),h0=n(De,"LI",{});var DGe=s(h0);_3e=n(DGe,"STRONG",{});var Cjt=s(_3e);MQr=r(Cjt,"distilbert"),Cjt.forEach(t),EQr=r(DGe," \u2014 "),qee=n(DGe,"A",{href:!0});var wjt=s(qee);CQr=r(wjt,"FlaxDistilBertForSequenceClassification"),wjt.forEach(t),wQr=r(DGe," (DistilBERT model)"),DGe.forEach(t),AQr=i(De),p0=n(De,"LI",{});var GGe=s(p0);u3e=n(GGe,"STRONG",{});var Ajt=s(u3e);LQr=r(Ajt,"electra"),Ajt.forEach(t),yQr=r(GGe," \u2014 "),jee=n(GGe,"A",{href:!0});var Ljt=s(jee);xQr=r(Ljt,"FlaxElectraForSequenceClassification"),Ljt.forEach(t),$Qr=r(GGe," (ELECTRA model)"),GGe.forEach(t),kQr=i(De),_0=n(De,"LI",{});var OGe=s(_0);b3e=n(OGe,"STRONG",{});var yjt=s(b3e);SQr=r(yjt,"mbart"),yjt.forEach(t),RQr=r(OGe," \u2014 "),Dee=n(OGe,"A",{href:!0});var xjt=s(Dee);PQr=r(xjt,"FlaxMBartForSequenceClassification"),xjt.forEach(t),BQr=r(OGe," (mBART model)"),OGe.forEach(t),NQr=i(De),u0=n(De,"LI",{});var VGe=s(u0);v3e=n(VGe,"STRONG",{});var $jt=s(v3e);IQr=r($jt,"roberta"),$jt.forEach(t),qQr=r(VGe," \u2014 "),Gee=n(VGe,"A",{href:!0});var kjt=s(Gee);jQr=r(kjt,"FlaxRobertaForSequenceClassification"),kjt.forEach(t),DQr=r(VGe," (RoBERTa model)"),VGe.forEach(t),GQr=i(De),b0=n(De,"LI",{});var XGe=s(b0);F3e=n(XGe,"STRONG",{});var Sjt=s(F3e);OQr=r(Sjt,"roformer"),Sjt.forEach(t),VQr=r(XGe," \u2014 "),Oee=n(XGe,"A",{href:!0});var Rjt=s(Oee);XQr=r(Rjt,"FlaxRoFormerForSequenceClassification"),Rjt.forEach(t),zQr=r(XGe," (RoFormer model)"),XGe.forEach(t),QQr=i(De),v0=n(De,"LI",{});var zGe=s(v0);T3e=n(zGe,"STRONG",{});var Pjt=s(T3e);WQr=r(Pjt,"xlm-roberta"),Pjt.forEach(t),HQr=r(zGe," \u2014 "),Vee=n(zGe,"A",{href:!0});var Bjt=s(Vee);UQr=r(Bjt,"FlaxXLMRobertaForSequenceClassification"),Bjt.forEach(t),JQr=r(zGe," (XLM-RoBERTa model)"),zGe.forEach(t),De.forEach(t),YQr=i(ci),T(F0.$$.fragment,ci),ci.forEach(t),di.forEach(t),pXe=i(f),df=n(f,"H2",{class:!0});var CQe=s(df);T0=n(CQe,"A",{id:!0,class:!0,href:!0});var Njt=s(T0);M3e=n(Njt,"SPAN",{});var Ijt=s(M3e);T(u$.$$.fragment,Ijt),Ijt.forEach(t),Njt.forEach(t),KQr=i(CQe),E3e=n(CQe,"SPAN",{});var qjt=s(E3e);ZQr=r(qjt,"FlaxAutoModelForQuestionAnswering"),qjt.forEach(t),CQe.forEach(t),_Xe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(b$.$$.fragment,fi),eWr=i(fi),cf=n(fi,"P",{});var Fte=s(cf);oWr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xee=n(Fte,"A",{href:!0});var jjt=s(Xee);rWr=r(jjt,"from_pretrained()"),jjt.forEach(t),tWr=r(Fte," class method or the "),zee=n(Fte,"A",{href:!0});var Djt=s(zee);aWr=r(Djt,"from_config()"),Djt.forEach(t),nWr=r(Fte,` class
method.`),Fte.forEach(t),sWr=i(fi),v$=n(fi,"P",{});var wQe=s(v$);lWr=r(wQe,"This class cannot be instantiated directly using "),C3e=n(wQe,"CODE",{});var Gjt=s(C3e);iWr=r(Gjt,"__init__()"),Gjt.forEach(t),dWr=r(wQe," (throws an error)."),wQe.forEach(t),cWr=i(fi),Yt=n(fi,"DIV",{class:!0});var M6=s(Yt);T(F$.$$.fragment,M6),fWr=i(M6),w3e=n(M6,"P",{});var Ojt=s(w3e);mWr=r(Ojt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ojt.forEach(t),gWr=i(M6),ff=n(M6,"P",{});var Tte=s(ff);hWr=r(Tte,`Note:
Loading a model from its configuration file does `),A3e=n(Tte,"STRONG",{});var Vjt=s(A3e);pWr=r(Vjt,"not"),Vjt.forEach(t),_Wr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(Tte,"A",{href:!0});var Xjt=s(Qee);uWr=r(Xjt,"from_pretrained()"),Xjt.forEach(t),bWr=r(Tte," to load the model weights."),Tte.forEach(t),vWr=i(M6),T(M0.$$.fragment,M6),M6.forEach(t),FWr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(T$.$$.fragment,mi),TWr=i(mi),L3e=n(mi,"P",{});var zjt=s(L3e);MWr=r(zjt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zjt.forEach(t),EWr=i(mi),An=n(mi,"P",{});var E6=s(An);CWr=r(E6,"The model class to instantiate is selected based on the "),y3e=n(E6,"CODE",{});var Qjt=s(y3e);wWr=r(Qjt,"model_type"),Qjt.forEach(t),AWr=r(E6,` property of the config object (either
passed as an argument or loaded from `),x3e=n(E6,"CODE",{});var Wjt=s(x3e);LWr=r(Wjt,"pretrained_model_name_or_path"),Wjt.forEach(t),yWr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(E6,"CODE",{});var Hjt=s($3e);xWr=r(Hjt,"pretrained_model_name_or_path"),Hjt.forEach(t),$Wr=r(E6,":"),E6.forEach(t),kWr=i(mi),Re=n(mi,"UL",{});var Ge=s(Re);E0=n(Ge,"LI",{});var QGe=s(E0);k3e=n(QGe,"STRONG",{});var Ujt=s(k3e);SWr=r(Ujt,"albert"),Ujt.forEach(t),RWr=r(QGe," \u2014 "),Wee=n(QGe,"A",{href:!0});var Jjt=s(Wee);PWr=r(Jjt,"FlaxAlbertForQuestionAnswering"),Jjt.forEach(t),BWr=r(QGe," (ALBERT model)"),QGe.forEach(t),NWr=i(Ge),C0=n(Ge,"LI",{});var WGe=s(C0);S3e=n(WGe,"STRONG",{});var Yjt=s(S3e);IWr=r(Yjt,"bart"),Yjt.forEach(t),qWr=r(WGe," \u2014 "),Hee=n(WGe,"A",{href:!0});var Kjt=s(Hee);jWr=r(Kjt,"FlaxBartForQuestionAnswering"),Kjt.forEach(t),DWr=r(WGe," (BART model)"),WGe.forEach(t),GWr=i(Ge),w0=n(Ge,"LI",{});var HGe=s(w0);R3e=n(HGe,"STRONG",{});var Zjt=s(R3e);OWr=r(Zjt,"bert"),Zjt.forEach(t),VWr=r(HGe," \u2014 "),Uee=n(HGe,"A",{href:!0});var eDt=s(Uee);XWr=r(eDt,"FlaxBertForQuestionAnswering"),eDt.forEach(t),zWr=r(HGe," (BERT model)"),HGe.forEach(t),QWr=i(Ge),A0=n(Ge,"LI",{});var UGe=s(A0);P3e=n(UGe,"STRONG",{});var oDt=s(P3e);WWr=r(oDt,"big_bird"),oDt.forEach(t),HWr=r(UGe," \u2014 "),Jee=n(UGe,"A",{href:!0});var rDt=s(Jee);UWr=r(rDt,"FlaxBigBirdForQuestionAnswering"),rDt.forEach(t),JWr=r(UGe," (BigBird model)"),UGe.forEach(t),YWr=i(Ge),L0=n(Ge,"LI",{});var JGe=s(L0);B3e=n(JGe,"STRONG",{});var tDt=s(B3e);KWr=r(tDt,"distilbert"),tDt.forEach(t),ZWr=r(JGe," \u2014 "),Yee=n(JGe,"A",{href:!0});var aDt=s(Yee);eHr=r(aDt,"FlaxDistilBertForQuestionAnswering"),aDt.forEach(t),oHr=r(JGe," (DistilBERT model)"),JGe.forEach(t),rHr=i(Ge),y0=n(Ge,"LI",{});var YGe=s(y0);N3e=n(YGe,"STRONG",{});var nDt=s(N3e);tHr=r(nDt,"electra"),nDt.forEach(t),aHr=r(YGe," \u2014 "),Kee=n(YGe,"A",{href:!0});var sDt=s(Kee);nHr=r(sDt,"FlaxElectraForQuestionAnswering"),sDt.forEach(t),sHr=r(YGe," (ELECTRA model)"),YGe.forEach(t),lHr=i(Ge),x0=n(Ge,"LI",{});var KGe=s(x0);I3e=n(KGe,"STRONG",{});var lDt=s(I3e);iHr=r(lDt,"mbart"),lDt.forEach(t),dHr=r(KGe," \u2014 "),Zee=n(KGe,"A",{href:!0});var iDt=s(Zee);cHr=r(iDt,"FlaxMBartForQuestionAnswering"),iDt.forEach(t),fHr=r(KGe," (mBART model)"),KGe.forEach(t),mHr=i(Ge),$0=n(Ge,"LI",{});var ZGe=s($0);q3e=n(ZGe,"STRONG",{});var dDt=s(q3e);gHr=r(dDt,"roberta"),dDt.forEach(t),hHr=r(ZGe," \u2014 "),eoe=n(ZGe,"A",{href:!0});var cDt=s(eoe);pHr=r(cDt,"FlaxRobertaForQuestionAnswering"),cDt.forEach(t),_Hr=r(ZGe," (RoBERTa model)"),ZGe.forEach(t),uHr=i(Ge),k0=n(Ge,"LI",{});var eOe=s(k0);j3e=n(eOe,"STRONG",{});var fDt=s(j3e);bHr=r(fDt,"roformer"),fDt.forEach(t),vHr=r(eOe," \u2014 "),ooe=n(eOe,"A",{href:!0});var mDt=s(ooe);FHr=r(mDt,"FlaxRoFormerForQuestionAnswering"),mDt.forEach(t),THr=r(eOe," (RoFormer model)"),eOe.forEach(t),MHr=i(Ge),S0=n(Ge,"LI",{});var oOe=s(S0);D3e=n(oOe,"STRONG",{});var gDt=s(D3e);EHr=r(gDt,"xlm-roberta"),gDt.forEach(t),CHr=r(oOe," \u2014 "),roe=n(oOe,"A",{href:!0});var hDt=s(roe);wHr=r(hDt,"FlaxXLMRobertaForQuestionAnswering"),hDt.forEach(t),AHr=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),Ge.forEach(t),LHr=i(mi),T(R0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),uXe=i(f),mf=n(f,"H2",{class:!0});var AQe=s(mf);P0=n(AQe,"A",{id:!0,class:!0,href:!0});var pDt=s(P0);G3e=n(pDt,"SPAN",{});var _Dt=s(G3e);T(M$.$$.fragment,_Dt),_Dt.forEach(t),pDt.forEach(t),yHr=i(AQe),O3e=n(AQe,"SPAN",{});var uDt=s(O3e);xHr=r(uDt,"FlaxAutoModelForTokenClassification"),uDt.forEach(t),AQe.forEach(t),bXe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(E$.$$.fragment,gi),$Hr=i(gi),gf=n(gi,"P",{});var Mte=s(gf);kHr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),toe=n(Mte,"A",{href:!0});var bDt=s(toe);SHr=r(bDt,"from_pretrained()"),bDt.forEach(t),RHr=r(Mte," class method or the "),aoe=n(Mte,"A",{href:!0});var vDt=s(aoe);PHr=r(vDt,"from_config()"),vDt.forEach(t),BHr=r(Mte,` class
method.`),Mte.forEach(t),NHr=i(gi),C$=n(gi,"P",{});var LQe=s(C$);IHr=r(LQe,"This class cannot be instantiated directly using "),V3e=n(LQe,"CODE",{});var FDt=s(V3e);qHr=r(FDt,"__init__()"),FDt.forEach(t),jHr=r(LQe," (throws an error)."),LQe.forEach(t),DHr=i(gi),Kt=n(gi,"DIV",{class:!0});var C6=s(Kt);T(w$.$$.fragment,C6),GHr=i(C6),X3e=n(C6,"P",{});var TDt=s(X3e);OHr=r(TDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TDt.forEach(t),VHr=i(C6),hf=n(C6,"P",{});var Ete=s(hf);XHr=r(Ete,`Note:
Loading a model from its configuration file does `),z3e=n(Ete,"STRONG",{});var MDt=s(z3e);zHr=r(MDt,"not"),MDt.forEach(t),QHr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(Ete,"A",{href:!0});var EDt=s(noe);WHr=r(EDt,"from_pretrained()"),EDt.forEach(t),HHr=r(Ete," to load the model weights."),Ete.forEach(t),UHr=i(C6),T(B0.$$.fragment,C6),C6.forEach(t),JHr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(A$.$$.fragment,hi),YHr=i(hi),Q3e=n(hi,"P",{});var CDt=s(Q3e);KHr=r(CDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CDt.forEach(t),ZHr=i(hi),Ln=n(hi,"P",{});var w6=s(Ln);eUr=r(w6,"The model class to instantiate is selected based on the "),W3e=n(w6,"CODE",{});var wDt=s(W3e);oUr=r(wDt,"model_type"),wDt.forEach(t),rUr=r(w6,` property of the config object (either
passed as an argument or loaded from `),H3e=n(w6,"CODE",{});var ADt=s(H3e);tUr=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),aUr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=n(w6,"CODE",{});var LDt=s(U3e);nUr=r(LDt,"pretrained_model_name_or_path"),LDt.forEach(t),sUr=r(w6,":"),w6.forEach(t),lUr=i(hi),Ve=n(hi,"UL",{});var To=s(Ve);N0=n(To,"LI",{});var rOe=s(N0);J3e=n(rOe,"STRONG",{});var yDt=s(J3e);iUr=r(yDt,"albert"),yDt.forEach(t),dUr=r(rOe," \u2014 "),soe=n(rOe,"A",{href:!0});var xDt=s(soe);cUr=r(xDt,"FlaxAlbertForTokenClassification"),xDt.forEach(t),fUr=r(rOe," (ALBERT model)"),rOe.forEach(t),mUr=i(To),I0=n(To,"LI",{});var tOe=s(I0);Y3e=n(tOe,"STRONG",{});var $Dt=s(Y3e);gUr=r($Dt,"bert"),$Dt.forEach(t),hUr=r(tOe," \u2014 "),loe=n(tOe,"A",{href:!0});var kDt=s(loe);pUr=r(kDt,"FlaxBertForTokenClassification"),kDt.forEach(t),_Ur=r(tOe," (BERT model)"),tOe.forEach(t),uUr=i(To),q0=n(To,"LI",{});var aOe=s(q0);K3e=n(aOe,"STRONG",{});var SDt=s(K3e);bUr=r(SDt,"big_bird"),SDt.forEach(t),vUr=r(aOe," \u2014 "),ioe=n(aOe,"A",{href:!0});var RDt=s(ioe);FUr=r(RDt,"FlaxBigBirdForTokenClassification"),RDt.forEach(t),TUr=r(aOe," (BigBird model)"),aOe.forEach(t),MUr=i(To),j0=n(To,"LI",{});var nOe=s(j0);Z3e=n(nOe,"STRONG",{});var PDt=s(Z3e);EUr=r(PDt,"distilbert"),PDt.forEach(t),CUr=r(nOe," \u2014 "),doe=n(nOe,"A",{href:!0});var BDt=s(doe);wUr=r(BDt,"FlaxDistilBertForTokenClassification"),BDt.forEach(t),AUr=r(nOe," (DistilBERT model)"),nOe.forEach(t),LUr=i(To),D0=n(To,"LI",{});var sOe=s(D0);e0e=n(sOe,"STRONG",{});var NDt=s(e0e);yUr=r(NDt,"electra"),NDt.forEach(t),xUr=r(sOe," \u2014 "),coe=n(sOe,"A",{href:!0});var IDt=s(coe);$Ur=r(IDt,"FlaxElectraForTokenClassification"),IDt.forEach(t),kUr=r(sOe," (ELECTRA model)"),sOe.forEach(t),SUr=i(To),G0=n(To,"LI",{});var lOe=s(G0);o0e=n(lOe,"STRONG",{});var qDt=s(o0e);RUr=r(qDt,"roberta"),qDt.forEach(t),PUr=r(lOe," \u2014 "),foe=n(lOe,"A",{href:!0});var jDt=s(foe);BUr=r(jDt,"FlaxRobertaForTokenClassification"),jDt.forEach(t),NUr=r(lOe," (RoBERTa model)"),lOe.forEach(t),IUr=i(To),O0=n(To,"LI",{});var iOe=s(O0);r0e=n(iOe,"STRONG",{});var DDt=s(r0e);qUr=r(DDt,"roformer"),DDt.forEach(t),jUr=r(iOe," \u2014 "),moe=n(iOe,"A",{href:!0});var GDt=s(moe);DUr=r(GDt,"FlaxRoFormerForTokenClassification"),GDt.forEach(t),GUr=r(iOe," (RoFormer model)"),iOe.forEach(t),OUr=i(To),V0=n(To,"LI",{});var dOe=s(V0);t0e=n(dOe,"STRONG",{});var ODt=s(t0e);VUr=r(ODt,"xlm-roberta"),ODt.forEach(t),XUr=r(dOe," \u2014 "),goe=n(dOe,"A",{href:!0});var VDt=s(goe);zUr=r(VDt,"FlaxXLMRobertaForTokenClassification"),VDt.forEach(t),QUr=r(dOe," (XLM-RoBERTa model)"),dOe.forEach(t),To.forEach(t),WUr=i(hi),T(X0.$$.fragment,hi),hi.forEach(t),gi.forEach(t),vXe=i(f),pf=n(f,"H2",{class:!0});var yQe=s(pf);z0=n(yQe,"A",{id:!0,class:!0,href:!0});var XDt=s(z0);a0e=n(XDt,"SPAN",{});var zDt=s(a0e);T(L$.$$.fragment,zDt),zDt.forEach(t),XDt.forEach(t),HUr=i(yQe),n0e=n(yQe,"SPAN",{});var QDt=s(n0e);UUr=r(QDt,"FlaxAutoModelForMultipleChoice"),QDt.forEach(t),yQe.forEach(t),FXe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(y$.$$.fragment,pi),JUr=i(pi),_f=n(pi,"P",{});var Cte=s(_f);YUr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hoe=n(Cte,"A",{href:!0});var WDt=s(hoe);KUr=r(WDt,"from_pretrained()"),WDt.forEach(t),ZUr=r(Cte," class method or the "),poe=n(Cte,"A",{href:!0});var HDt=s(poe);eJr=r(HDt,"from_config()"),HDt.forEach(t),oJr=r(Cte,` class
method.`),Cte.forEach(t),rJr=i(pi),x$=n(pi,"P",{});var xQe=s(x$);tJr=r(xQe,"This class cannot be instantiated directly using "),s0e=n(xQe,"CODE",{});var UDt=s(s0e);aJr=r(UDt,"__init__()"),UDt.forEach(t),nJr=r(xQe," (throws an error)."),xQe.forEach(t),sJr=i(pi),Zt=n(pi,"DIV",{class:!0});var A6=s(Zt);T($$.$$.fragment,A6),lJr=i(A6),l0e=n(A6,"P",{});var JDt=s(l0e);iJr=r(JDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JDt.forEach(t),dJr=i(A6),uf=n(A6,"P",{});var wte=s(uf);cJr=r(wte,`Note:
Loading a model from its configuration file does `),i0e=n(wte,"STRONG",{});var YDt=s(i0e);fJr=r(YDt,"not"),YDt.forEach(t),mJr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(wte,"A",{href:!0});var KDt=s(_oe);gJr=r(KDt,"from_pretrained()"),KDt.forEach(t),hJr=r(wte," to load the model weights."),wte.forEach(t),pJr=i(A6),T(Q0.$$.fragment,A6),A6.forEach(t),_Jr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(k$.$$.fragment,_i),uJr=i(_i),d0e=n(_i,"P",{});var ZDt=s(d0e);bJr=r(ZDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZDt.forEach(t),vJr=i(_i),yn=n(_i,"P",{});var L6=s(yn);FJr=r(L6,"The model class to instantiate is selected based on the "),c0e=n(L6,"CODE",{});var eGt=s(c0e);TJr=r(eGt,"model_type"),eGt.forEach(t),MJr=r(L6,` property of the config object (either
passed as an argument or loaded from `),f0e=n(L6,"CODE",{});var oGt=s(f0e);EJr=r(oGt,"pretrained_model_name_or_path"),oGt.forEach(t),CJr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(L6,"CODE",{});var rGt=s(m0e);wJr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),AJr=r(L6,":"),L6.forEach(t),LJr=i(_i),Xe=n(_i,"UL",{});var Mo=s(Xe);W0=n(Mo,"LI",{});var cOe=s(W0);g0e=n(cOe,"STRONG",{});var tGt=s(g0e);yJr=r(tGt,"albert"),tGt.forEach(t),xJr=r(cOe," \u2014 "),uoe=n(cOe,"A",{href:!0});var aGt=s(uoe);$Jr=r(aGt,"FlaxAlbertForMultipleChoice"),aGt.forEach(t),kJr=r(cOe," (ALBERT model)"),cOe.forEach(t),SJr=i(Mo),H0=n(Mo,"LI",{});var fOe=s(H0);h0e=n(fOe,"STRONG",{});var nGt=s(h0e);RJr=r(nGt,"bert"),nGt.forEach(t),PJr=r(fOe," \u2014 "),boe=n(fOe,"A",{href:!0});var sGt=s(boe);BJr=r(sGt,"FlaxBertForMultipleChoice"),sGt.forEach(t),NJr=r(fOe," (BERT model)"),fOe.forEach(t),IJr=i(Mo),U0=n(Mo,"LI",{});var mOe=s(U0);p0e=n(mOe,"STRONG",{});var lGt=s(p0e);qJr=r(lGt,"big_bird"),lGt.forEach(t),jJr=r(mOe," \u2014 "),voe=n(mOe,"A",{href:!0});var iGt=s(voe);DJr=r(iGt,"FlaxBigBirdForMultipleChoice"),iGt.forEach(t),GJr=r(mOe," (BigBird model)"),mOe.forEach(t),OJr=i(Mo),J0=n(Mo,"LI",{});var gOe=s(J0);_0e=n(gOe,"STRONG",{});var dGt=s(_0e);VJr=r(dGt,"distilbert"),dGt.forEach(t),XJr=r(gOe," \u2014 "),Foe=n(gOe,"A",{href:!0});var cGt=s(Foe);zJr=r(cGt,"FlaxDistilBertForMultipleChoice"),cGt.forEach(t),QJr=r(gOe," (DistilBERT model)"),gOe.forEach(t),WJr=i(Mo),Y0=n(Mo,"LI",{});var hOe=s(Y0);u0e=n(hOe,"STRONG",{});var fGt=s(u0e);HJr=r(fGt,"electra"),fGt.forEach(t),UJr=r(hOe," \u2014 "),Toe=n(hOe,"A",{href:!0});var mGt=s(Toe);JJr=r(mGt,"FlaxElectraForMultipleChoice"),mGt.forEach(t),YJr=r(hOe," (ELECTRA model)"),hOe.forEach(t),KJr=i(Mo),K0=n(Mo,"LI",{});var pOe=s(K0);b0e=n(pOe,"STRONG",{});var gGt=s(b0e);ZJr=r(gGt,"roberta"),gGt.forEach(t),eYr=r(pOe," \u2014 "),Moe=n(pOe,"A",{href:!0});var hGt=s(Moe);oYr=r(hGt,"FlaxRobertaForMultipleChoice"),hGt.forEach(t),rYr=r(pOe," (RoBERTa model)"),pOe.forEach(t),tYr=i(Mo),Z0=n(Mo,"LI",{});var _Oe=s(Z0);v0e=n(_Oe,"STRONG",{});var pGt=s(v0e);aYr=r(pGt,"roformer"),pGt.forEach(t),nYr=r(_Oe," \u2014 "),Eoe=n(_Oe,"A",{href:!0});var _Gt=s(Eoe);sYr=r(_Gt,"FlaxRoFormerForMultipleChoice"),_Gt.forEach(t),lYr=r(_Oe," (RoFormer model)"),_Oe.forEach(t),iYr=i(Mo),ew=n(Mo,"LI",{});var uOe=s(ew);F0e=n(uOe,"STRONG",{});var uGt=s(F0e);dYr=r(uGt,"xlm-roberta"),uGt.forEach(t),cYr=r(uOe," \u2014 "),Coe=n(uOe,"A",{href:!0});var bGt=s(Coe);fYr=r(bGt,"FlaxXLMRobertaForMultipleChoice"),bGt.forEach(t),mYr=r(uOe," (XLM-RoBERTa model)"),uOe.forEach(t),Mo.forEach(t),gYr=i(_i),T(ow.$$.fragment,_i),_i.forEach(t),pi.forEach(t),TXe=i(f),bf=n(f,"H2",{class:!0});var $Qe=s(bf);rw=n($Qe,"A",{id:!0,class:!0,href:!0});var vGt=s(rw);T0e=n(vGt,"SPAN",{});var FGt=s(T0e);T(S$.$$.fragment,FGt),FGt.forEach(t),vGt.forEach(t),hYr=i($Qe),M0e=n($Qe,"SPAN",{});var TGt=s(M0e);pYr=r(TGt,"FlaxAutoModelForNextSentencePrediction"),TGt.forEach(t),$Qe.forEach(t),MXe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(R$.$$.fragment,ui),_Yr=i(ui),vf=n(ui,"P",{});var Ate=s(vf);uYr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),woe=n(Ate,"A",{href:!0});var MGt=s(woe);bYr=r(MGt,"from_pretrained()"),MGt.forEach(t),vYr=r(Ate," class method or the "),Aoe=n(Ate,"A",{href:!0});var EGt=s(Aoe);FYr=r(EGt,"from_config()"),EGt.forEach(t),TYr=r(Ate,` class
method.`),Ate.forEach(t),MYr=i(ui),P$=n(ui,"P",{});var kQe=s(P$);EYr=r(kQe,"This class cannot be instantiated directly using "),E0e=n(kQe,"CODE",{});var CGt=s(E0e);CYr=r(CGt,"__init__()"),CGt.forEach(t),wYr=r(kQe," (throws an error)."),kQe.forEach(t),AYr=i(ui),ea=n(ui,"DIV",{class:!0});var y6=s(ea);T(B$.$$.fragment,y6),LYr=i(y6),C0e=n(y6,"P",{});var wGt=s(C0e);yYr=r(wGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wGt.forEach(t),xYr=i(y6),Ff=n(y6,"P",{});var Lte=s(Ff);$Yr=r(Lte,`Note:
Loading a model from its configuration file does `),w0e=n(Lte,"STRONG",{});var AGt=s(w0e);kYr=r(AGt,"not"),AGt.forEach(t),SYr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Loe=n(Lte,"A",{href:!0});var LGt=s(Loe);RYr=r(LGt,"from_pretrained()"),LGt.forEach(t),PYr=r(Lte," to load the model weights."),Lte.forEach(t),BYr=i(y6),T(tw.$$.fragment,y6),y6.forEach(t),NYr=i(ui),Yr=n(ui,"DIV",{class:!0});var bi=s(Yr);T(N$.$$.fragment,bi),IYr=i(bi),A0e=n(bi,"P",{});var yGt=s(A0e);qYr=r(yGt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yGt.forEach(t),jYr=i(bi),xn=n(bi,"P",{});var x6=s(xn);DYr=r(x6,"The model class to instantiate is selected based on the "),L0e=n(x6,"CODE",{});var xGt=s(L0e);GYr=r(xGt,"model_type"),xGt.forEach(t),OYr=r(x6,` property of the config object (either
passed as an argument or loaded from `),y0e=n(x6,"CODE",{});var $Gt=s(y0e);VYr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),XYr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=n(x6,"CODE",{});var kGt=s(x0e);zYr=r(kGt,"pretrained_model_name_or_path"),kGt.forEach(t),QYr=r(x6,":"),x6.forEach(t),WYr=i(bi),$0e=n(bi,"UL",{});var SGt=s($0e);aw=n(SGt,"LI",{});var bOe=s(aw);k0e=n(bOe,"STRONG",{});var RGt=s(k0e);HYr=r(RGt,"bert"),RGt.forEach(t),UYr=r(bOe," \u2014 "),yoe=n(bOe,"A",{href:!0});var PGt=s(yoe);JYr=r(PGt,"FlaxBertForNextSentencePrediction"),PGt.forEach(t),YYr=r(bOe," (BERT model)"),bOe.forEach(t),SGt.forEach(t),KYr=i(bi),T(nw.$$.fragment,bi),bi.forEach(t),ui.forEach(t),EXe=i(f),Tf=n(f,"H2",{class:!0});var SQe=s(Tf);sw=n(SQe,"A",{id:!0,class:!0,href:!0});var BGt=s(sw);S0e=n(BGt,"SPAN",{});var NGt=s(S0e);T(I$.$$.fragment,NGt),NGt.forEach(t),BGt.forEach(t),ZYr=i(SQe),R0e=n(SQe,"SPAN",{});var IGt=s(R0e);eKr=r(IGt,"FlaxAutoModelForImageClassification"),IGt.forEach(t),SQe.forEach(t),CXe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(q$.$$.fragment,vi),oKr=i(vi),Mf=n(vi,"P",{});var yte=s(Mf);rKr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xoe=n(yte,"A",{href:!0});var qGt=s(xoe);tKr=r(qGt,"from_pretrained()"),qGt.forEach(t),aKr=r(yte," class method or the "),$oe=n(yte,"A",{href:!0});var jGt=s($oe);nKr=r(jGt,"from_config()"),jGt.forEach(t),sKr=r(yte,` class
method.`),yte.forEach(t),lKr=i(vi),j$=n(vi,"P",{});var RQe=s(j$);iKr=r(RQe,"This class cannot be instantiated directly using "),P0e=n(RQe,"CODE",{});var DGt=s(P0e);dKr=r(DGt,"__init__()"),DGt.forEach(t),cKr=r(RQe," (throws an error)."),RQe.forEach(t),fKr=i(vi),oa=n(vi,"DIV",{class:!0});var $6=s(oa);T(D$.$$.fragment,$6),mKr=i($6),B0e=n($6,"P",{});var GGt=s(B0e);gKr=r(GGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GGt.forEach(t),hKr=i($6),Ef=n($6,"P",{});var xte=s(Ef);pKr=r(xte,`Note:
Loading a model from its configuration file does `),N0e=n(xte,"STRONG",{});var OGt=s(N0e);_Kr=r(OGt,"not"),OGt.forEach(t),uKr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(xte,"A",{href:!0});var VGt=s(koe);bKr=r(VGt,"from_pretrained()"),VGt.forEach(t),vKr=r(xte," to load the model weights."),xte.forEach(t),FKr=i($6),T(lw.$$.fragment,$6),$6.forEach(t),TKr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(G$.$$.fragment,Fi),MKr=i(Fi),I0e=n(Fi,"P",{});var XGt=s(I0e);EKr=r(XGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XGt.forEach(t),CKr=i(Fi),$n=n(Fi,"P",{});var k6=s($n);wKr=r(k6,"The model class to instantiate is selected based on the "),q0e=n(k6,"CODE",{});var zGt=s(q0e);AKr=r(zGt,"model_type"),zGt.forEach(t),LKr=r(k6,` property of the config object (either
passed as an argument or loaded from `),j0e=n(k6,"CODE",{});var QGt=s(j0e);yKr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),xKr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(k6,"CODE",{});var WGt=s(D0e);$Kr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),kKr=r(k6,":"),k6.forEach(t),SKr=i(Fi),O$=n(Fi,"UL",{});var PQe=s(O$);iw=n(PQe,"LI",{});var vOe=s(iw);G0e=n(vOe,"STRONG",{});var HGt=s(G0e);RKr=r(HGt,"beit"),HGt.forEach(t),PKr=r(vOe," \u2014 "),Soe=n(vOe,"A",{href:!0});var UGt=s(Soe);BKr=r(UGt,"FlaxBeitForImageClassification"),UGt.forEach(t),NKr=r(vOe," (BEiT model)"),vOe.forEach(t),IKr=i(PQe),dw=n(PQe,"LI",{});var FOe=s(dw);O0e=n(FOe,"STRONG",{});var JGt=s(O0e);qKr=r(JGt,"vit"),JGt.forEach(t),jKr=r(FOe," \u2014 "),Roe=n(FOe,"A",{href:!0});var YGt=s(Roe);DKr=r(YGt,"FlaxViTForImageClassification"),YGt.forEach(t),GKr=r(FOe," (ViT model)"),FOe.forEach(t),PQe.forEach(t),OKr=i(Fi),T(cw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),wXe=i(f),Cf=n(f,"H2",{class:!0});var BQe=s(Cf);fw=n(BQe,"A",{id:!0,class:!0,href:!0});var KGt=s(fw);V0e=n(KGt,"SPAN",{});var ZGt=s(V0e);T(V$.$$.fragment,ZGt),ZGt.forEach(t),KGt.forEach(t),VKr=i(BQe),X0e=n(BQe,"SPAN",{});var eOt=s(X0e);XKr=r(eOt,"FlaxAutoModelForVision2Seq"),eOt.forEach(t),BQe.forEach(t),AXe=i(f),wr=n(f,"DIV",{class:!0});var Ti=s(wr);T(X$.$$.fragment,Ti),zKr=i(Ti),wf=n(Ti,"P",{});var $te=s(wf);QKr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Poe=n($te,"A",{href:!0});var oOt=s(Poe);WKr=r(oOt,"from_pretrained()"),oOt.forEach(t),HKr=r($te," class method or the "),Boe=n($te,"A",{href:!0});var rOt=s(Boe);UKr=r(rOt,"from_config()"),rOt.forEach(t),JKr=r($te,` class
method.`),$te.forEach(t),YKr=i(Ti),z$=n(Ti,"P",{});var NQe=s(z$);KKr=r(NQe,"This class cannot be instantiated directly using "),z0e=n(NQe,"CODE",{});var tOt=s(z0e);ZKr=r(tOt,"__init__()"),tOt.forEach(t),eZr=r(NQe," (throws an error)."),NQe.forEach(t),oZr=i(Ti),ra=n(Ti,"DIV",{class:!0});var S6=s(ra);T(Q$.$$.fragment,S6),rZr=i(S6),Q0e=n(S6,"P",{});var aOt=s(Q0e);tZr=r(aOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aOt.forEach(t),aZr=i(S6),Af=n(S6,"P",{});var kte=s(Af);nZr=r(kte,`Note:
Loading a model from its configuration file does `),W0e=n(kte,"STRONG",{});var nOt=s(W0e);sZr=r(nOt,"not"),nOt.forEach(t),lZr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(kte,"A",{href:!0});var sOt=s(Noe);iZr=r(sOt,"from_pretrained()"),sOt.forEach(t),dZr=r(kte," to load the model weights."),kte.forEach(t),cZr=i(S6),T(mw.$$.fragment,S6),S6.forEach(t),fZr=i(Ti),Zr=n(Ti,"DIV",{class:!0});var Mi=s(Zr);T(W$.$$.fragment,Mi),mZr=i(Mi),H0e=n(Mi,"P",{});var lOt=s(H0e);gZr=r(lOt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lOt.forEach(t),hZr=i(Mi),kn=n(Mi,"P",{});var R6=s(kn);pZr=r(R6,"The model class to instantiate is selected based on the "),U0e=n(R6,"CODE",{});var iOt=s(U0e);_Zr=r(iOt,"model_type"),iOt.forEach(t),uZr=r(R6,` property of the config object (either
passed as an argument or loaded from `),J0e=n(R6,"CODE",{});var dOt=s(J0e);bZr=r(dOt,"pretrained_model_name_or_path"),dOt.forEach(t),vZr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y0e=n(R6,"CODE",{});var cOt=s(Y0e);FZr=r(cOt,"pretrained_model_name_or_path"),cOt.forEach(t),TZr=r(R6,":"),R6.forEach(t),MZr=i(Mi),K0e=n(Mi,"UL",{});var fOt=s(K0e);gw=n(fOt,"LI",{});var TOe=s(gw);Z0e=n(TOe,"STRONG",{});var mOt=s(Z0e);EZr=r(mOt,"vision-encoder-decoder"),mOt.forEach(t),CZr=r(TOe," \u2014 "),Ioe=n(TOe,"A",{href:!0});var gOt=s(Ioe);wZr=r(gOt,"FlaxVisionEncoderDecoderModel"),gOt.forEach(t),AZr=r(TOe," (Vision Encoder decoder model)"),TOe.forEach(t),fOt.forEach(t),LZr=i(Mi),T(hw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(vXt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoTokenizer"),c(xi,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertModel"),c(Pf,"id","extending-the-auto-classes"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#extending-the-auto-classes"),c($i,"class","relative group"),c(Nf,"id","transformers.AutoConfig"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#transformers.AutoConfig"),c(ki,"class","relative group"),c(bS,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(vS,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertConfig"),c(FS,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartConfig"),c(TS,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitConfig"),c(MS,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertConfig"),c(ES,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(CS,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdConfig"),c(wS,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(AS,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(LS,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(yS,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomConfig"),c(xS,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertConfig"),c($S,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineConfig"),c(kS,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPConfig"),c(SS,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenConfig"),c(RS,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertConfig"),c(PS,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextConfig"),c(BS,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLConfig"),c(NS,"href","/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtConfig"),c(IS,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(qS,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(jS,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(DS,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaConfig"),c(GS,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(OS,"href","/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(VS,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTConfig"),c(XS,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrConfig"),c(zS,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertConfig"),c(QS,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRConfig"),c(WS,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTConfig"),c(HS,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraConfig"),c(US,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(JS,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertConfig"),c(YS,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaConfig"),c(KS,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetConfig"),c(ZS,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTConfig"),c(eR,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelConfig"),c(oR,"href","/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNConfig"),c(rR,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Config"),c(tR,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(aR,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(nR,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJConfig"),c(sR,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertConfig"),c(lR,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertConfig"),c(iR,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(dR,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(cR,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(fR,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(mR,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDConfig"),c(gR,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitConfig"),c(hR,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerConfig"),c(pR,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Config"),c(_R,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeConfig"),c(uR,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertConfig"),c(bR,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Config"),c(vR,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianConfig"),c(FR,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(TR,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartConfig"),c(MR,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTConfig"),c(ER,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(CR,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(wR,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config"),c(AR,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetConfig"),c(LR,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Config"),c(yR,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaConfig"),c(xR,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerConfig"),c($R,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(kR,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTConfig"),c(SR,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusConfig"),c(RR,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverConfig"),c(PR,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartConfig"),c(BR,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(NR,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(IR,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(qR,"href","/docs/transformers/pr_17845/en/model_doc/rag#transformers.RagConfig"),c(jR,"href","/docs/transformers/pr_17845/en/model_doc/realm#transformers.RealmConfig"),c(DR,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerConfig"),c(GR,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetConfig"),c(OR,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertConfig"),c(VR,"href","/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetConfig"),c(XR,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertConfig"),c(zR,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaConfig"),c(QR,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerConfig"),c(WR,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerConfig"),c(HR,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWConfig"),c(UR,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDConfig"),c(JR,"href","/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(YR,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(KR,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ZR,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterConfig"),c(eP,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(oP,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinConfig"),c(rP,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Config"),c(tP,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasConfig"),c(aP,"href","/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(nP,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(sP,"href","/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRConfig"),c(lP,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(iP,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(dP,"href","/docs/transformers/pr_17845/en/model_doc/van#transformers.VanConfig"),c(cP,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltConfig"),c(fP,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(mP,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(gP,"href","/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(hP,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTConfig"),c(pP,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_P,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(uP,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(bP,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMConfig"),c(vP,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMConfig"),c(FP,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMConfig"),c(TP,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(MP,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(EP,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(CP,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetConfig"),c(wP,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosConfig"),c(AP,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"id","transformers.AutoTokenizer"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoTokenizer"),c(Ri,"class","relative group"),c(LP,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(yP,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizer"),c(xP,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($P,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartTokenizer"),c(kP,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartTokenizerFast"),c(SP,"href","/docs/transformers/pr_17845/en/model_doc/barthez#transformers.BarthezTokenizer"),c(RP,"href","/docs/transformers/pr_17845/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(PP,"href","/docs/transformers/pr_17845/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(BP,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(NP,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(qP,"href","/docs/transformers/pr_17845/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(jP,"href","/docs/transformers/pr_17845/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(DP,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(GP,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(OP,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(VP,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(XP,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zP,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(QP,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(WP,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(HP,"href","/docs/transformers/pr_17845/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(UP,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertTokenizer"),c(JP,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineTokenizer"),c(KP,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZP,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eB,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(oB,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(rB,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tB,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17845/en/model_doc/cpm#transformers.CpmTokenizer"),c(nB,"href","/docs/transformers/pr_17845/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(sB,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lB,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cB,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mB,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(gB,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(hB,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_B,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uB,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraTokenizer"),c(bB,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vB,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(FB,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetTokenizer"),c(TB,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(MB,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(EB,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CB,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(wB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xB,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c($B,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kB,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SB,"href","/docs/transformers/pr_17845/en/model_doc/herbert#transformers.HerbertTokenizer"),c(RB,"href","/docs/transformers/pr_17845/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BB,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NB,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IB,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(qB,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(jB,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(DB,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(GB,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(OB,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(VB,"href","/docs/transformers/pr_17845/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(XB,"href","/docs/transformers/pr_17845/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(zB,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDTokenizer"),c(QB,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDTokenizerFast"),c(WB,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerTokenizer"),c(HB,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(UB,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Tokenizer"),c(JB,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5TokenizerFast"),c(YB,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeTokenizer"),c(KB,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ZB,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(eN,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(oN,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianTokenizer"),c(rN,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartTokenizer"),c(tN,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(aN,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(nN,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(sN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(lN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(iN,"href","/docs/transformers/pr_17845/en/model_doc/mluke#transformers.MLukeTokenizer"),c(dN,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(cN,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(fN,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(mN,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(gN,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Tokenizer"),c(hN,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5TokenizerFast"),c(pN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(_N,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(uN,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizer"),c(bN,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vN,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(FN,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(TN,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MN,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(EN,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CN,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(wN,"href","/docs/transformers/pr_17845/en/model_doc/phobert#transformers.PhobertTokenizer"),c(AN,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartTokenizer"),c(LN,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(yN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(xN,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c($N,"href","/docs/transformers/pr_17845/en/model_doc/rag#transformers.RagTokenizer"),c(kN,"href","/docs/transformers/pr_17845/en/model_doc/realm#transformers.RealmTokenizer"),c(SN,"href","/docs/transformers/pr_17845/en/model_doc/realm#transformers.RealmTokenizerFast"),c(RN,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerTokenizer"),c(PN,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(BN,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertTokenizer"),c(NN,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(IN,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(qN,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(jN,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DN,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GN,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(ON,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(VN,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(XN,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(zN,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterTokenizer"),c(QN,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(WN,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(HN,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(UN,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Tokenizer"),c(JN,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5TokenizerFast"),c(YN,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasTokenizer"),c(KN,"href","/docs/transformers/pr_17845/en/model_doc/tapex#transformers.TapexTokenizer"),c(ZN,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(eI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(oI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(rI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizer"),c(tI,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertTokenizerFast"),c(aI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(lI,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMTokenizer"),c(iI,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(dI,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMTokenizer"),c(cI,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(fI,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(mI,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(gI,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hI,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pI,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_I,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uI,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizer"),c(bI,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoFeatureExtractor"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoFeatureExtractor"),c(Pi,"class","relative group"),c(vI,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(FI,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wI,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AI,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(LI,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(yI,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(xI,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c($I,"href","/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SI,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(RI,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(PI,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(BI,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(II,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(qI,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2FeatureExtractor"),c(jI,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(DI,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(GI,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OI,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VI,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(XI,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(zI,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(QI,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WI,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YI,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KI,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mp,"id","transformers.AutoProcessor"),c(mp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mp,"href","#transformers.AutoProcessor"),c(Bi,"class","relative group"),c(ZI,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(eq,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPProcessor"),c(oq,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(rq,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(tq,"href","/docs/transformers/pr_17845/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(aq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sq,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(lq,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(iq,"href","/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRProcessor"),c(dq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltProcessor"),c(mq,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(gq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pq,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rp,"id","transformers.AutoModel"),c(Rp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rp,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(_q,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uq,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bq,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vq,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertModel"),c(Fq,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartModel"),c(Tq,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitModel"),c(Mq,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertModel"),c(Eq,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Cq,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdModel"),c(wq,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Aq,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Lq,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(yq,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomModel"),c(xq,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertModel"),c($q,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineModel"),c(kq,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.CLIPModel"),c(Sq,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenModel"),c(Rq,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertModel"),c(Pq,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextModel"),c(Bq,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLModel"),c(Nq,"href","/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtModel"),c(Iq,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(qq,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(jq,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Dq,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaModel"),c(Gq,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Oq,"href","/docs/transformers/pr_17845/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Vq,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTModel"),c(Xq,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrModel"),c(zq,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertModel"),c(Qq,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Wq,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTModel"),c(Hq,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraModel"),c(Uq,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertModel"),c(Jq,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaModel"),c(Yq,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetModel"),c(Kq,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTModel"),c(Zq,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelModel"),c(ej,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelBaseModel"),c(oj,"href","/docs/transformers/pr_17845/en/model_doc/glpn#transformers.GLPNModel"),c(rj,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2Model"),c(tj,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(aj,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(nj,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJModel"),c(sj,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertModel"),c(lj,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertModel"),c(ij,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(dj,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(cj,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(fj,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(mj,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDModel"),c(gj,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitModel"),c(hj,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerModel"),c(pj,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5Model"),c(_j,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeModel"),c(uj,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertModel"),c(bj,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100Model"),c(vj,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianModel"),c(Fj,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Tj,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartModel"),c(Mj,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTModel"),c(Ej,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Cj,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertModel"),c(wj,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model"),c(Aj,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetModel"),c(Lj,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5Model"),c(yj,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaModel"),c(xj,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerModel"),c($j,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(kj,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTModel"),c(Sj,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusModel"),c(Rj,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverModel"),c(Pj,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartModel"),c(Bj,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Nj,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Ij,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertModel"),c(qj,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModel"),c(jj,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetModel"),c(Dj,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertModel"),c(Gj,"href","/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetModel"),c(Oj,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel"),c(Vj,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaModel"),c(Xj,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerModel"),c(zj,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerModel"),c(Qj,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWModel"),c(Wj,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDModel"),c(Hj,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Uj,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterModel"),c(Jj,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Yj,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinModel"),c(Kj,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5Model"),c(Zj,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasModel"),c(eD,"href","/docs/transformers/pr_17845/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(oD,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(rD,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechModel"),c(tD,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(aD,"href","/docs/transformers/pr_17845/en/model_doc/van#transformers.VanModel"),c(nD,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltModel"),c(sD,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(lD,"href","/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertModel"),c(iD,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTModel"),c(dD,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(cD,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(fD,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(mD,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMModel"),c(gD,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMModel"),c(hD,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMModel"),c(pD,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(_D,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(uD,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(bD,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetModel"),c(vD,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosModel"),c(FD,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(Di,"class","relative group"),c(TD,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MD,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ED,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CD,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForPreTraining"),c(wD,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForPreTraining"),c(LD,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(yD,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM"),c(xD,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($D,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kD,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(SD,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(RD,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(PD,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForPreTraining"),c(ND,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ID,"href","/docs/transformers/pr_17845/en/model_doc/flava#transformers.FlavaForPreTraining"),c(qD,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForPreTraining"),c(jD,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(GD,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(OD,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(XD,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(zD,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(QD,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(WD,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(HD,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(UD,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(JD,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(YD,"href","/docs/transformers/pr_17845/en/model_doc/retribert#transformers.RetriBertModel"),c(KD,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(eG,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(oG,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(tG,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aG,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(nG,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(sG,"href","/docs/transformers/pr_17845/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(lG,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(iG,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(dG,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(cG,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fG,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(mG,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(gG,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForCausalLM"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForCausalLM"),c(Vi,"class","relative group"),c(hG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pG,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_G,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uG,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForCausalLM"),c(bG,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertLMHeadModel"),c(vG,"href","/docs/transformers/pr_17845/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(FG,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(TG,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(MG,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(EG,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(CG,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForCausalLM"),c(wG,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(AG,"href","/docs/transformers/pr_17845/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(LG,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(yG,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(xG,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForCausalLM"),c($G,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(kG,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(SG,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(RG,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(PG,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianForCausalLM"),c(BG,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForCausalLM"),c(NG,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(IG,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(qG,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.OPTForCausalLM"),c(jG,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(DG,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(GG,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(OG,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(VG,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(XG,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(zG,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(QG,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(WG,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(HG,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(UG,"href","/docs/transformers/pr_17845/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(JG,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(YG,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KG,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(ZG,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(eO,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(oO,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForMaskedLM"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForMaskedLM"),c(Qi,"class","relative group"),c(rO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(sO,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lO,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMaskedLM"),c(iO,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(dO,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cO,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(fO,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mO,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gO,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hO,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pO,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(_O,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(uO,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(bO,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(vO,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(FO,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(TO,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(MO,"href","/docs/transformers/pr_17845/en/model_doc/luke#transformers.LukeForMaskedLM"),c(EO,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(AO,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LO,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(yO,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xO,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($O,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kO,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SO,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RO,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PO,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BO,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NO,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(IO,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qO,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jO,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DO,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lb,"id","transformers.AutoModelForSeq2SeqLM"),c(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ui,"class","relative group"),c(GO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UO,"href","/docs/transformers/pr_17845/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17845/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.MarianMTModel"),c(eV,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oV,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(tV,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(aV,"href","/docs/transformers/pr_17845/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_17845/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForSequenceClassification"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForSequenceClassification"),c(Ki,"class","relative group"),c(lV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($V,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17845/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.AutoModelForMultipleChoice"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.AutoModelForMultipleChoice"),c(od,"class","relative group"),c(nX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c($X,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(kX,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(SX,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(RX,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(PX,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(BX,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(NX,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(IX,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.AutoModelForNextSentencePrediction"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForNextSentencePrediction"),c(ad,"class","relative group"),c(qX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(OX,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(VX,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(XX,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(zX,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(QX,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.AutoModelForTokenClassification"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.AutoModelForTokenClassification"),c(ld,"class","relative group"),c(WX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(YX,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForTokenClassification"),c(KX,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17845/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(ez,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(oz,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForTokenClassification"),c(rz,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(tz,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(az,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(nz,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(sz,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(lz,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(iz,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(dz,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(cz,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(fz,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(mz,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(gz,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(hz,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(pz,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(_z,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uz,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(bz,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vz,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Cz,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(wz,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Az,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Lz,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(yz,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(xz,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c($z,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(kz,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForQuestionAnswering"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForQuestionAnswering"),c(cd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17845/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17845/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Uz,"href","/docs/transformers/pr_17845/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17845/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17845/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17845/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17845/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_17845/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17845/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(gQ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(pQ,"href","/docs/transformers/pr_17845/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(_Q,"href","/docs/transformers/pr_17845/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(bQ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(TQ,"href","/docs/transformers/pr_17845/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(gd,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForImageClassification"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForImageClassification"),c(_d,"class","relative group"),c(AQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForImageClassification"),c($Q,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(kQ,"href","/docs/transformers/pr_17845/en/model_doc/cvt#transformers.CvtForImageClassification"),c(SQ,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(RQ,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassification"),c(PQ,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(BQ,"href","/docs/transformers/pr_17845/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(NQ,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassification"),c(IQ,"href","/docs/transformers/pr_17845/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(qQ,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification"),c(jQ,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(DQ,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(GQ,"href","/docs/transformers/pr_17845/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(OQ,"href","/docs/transformers/pr_17845/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(VQ,"href","/docs/transformers/pr_17845/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(XQ,"href","/docs/transformers/pr_17845/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(zQ,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(QQ,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForImageClassification"),c(WQ,"href","/docs/transformers/pr_17845/en/model_doc/van#transformers.VanForImageClassification"),c(HQ,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForVision2Seq"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForVision2Seq"),c(vd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Md,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/pr_17845/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForAudioClassification"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForAudioClassification"),c(wd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForAudioFrameClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForAudioFrameClassification"),c(yd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(vW,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(FW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(TW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(MW,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForCTC"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForCTC"),c(kd,"class","relative group"),c(EW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(LW,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.HubertForCTC"),c(yW,"href","/docs/transformers/pr_17845/en/model_doc/mctct#transformers.MCTCTForCTC"),c(xW,"href","/docs/transformers/pr_17845/en/model_doc/sew#transformers.SEWForCTC"),c($W,"href","/docs/transformers/pr_17845/en/model_doc/sew-d#transformers.SEWDForCTC"),c(kW,"href","/docs/transformers/pr_17845/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(SW,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(RW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(PW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(BW,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Pd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17845/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(DW,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForAudioXVector"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(GW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(zW,"href","/docs/transformers/pr_17845/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(QW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(WW,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(HW,"href","/docs/transformers/pr_17845/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForMaskedImageModeling"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForMaskedImageModeling"),c(Dd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17845/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(ZW,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(eH,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForObjectDetection"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForObjectDetection"),c(Xd,"class","relative group"),c(oH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForObjectDetection"),c(nH,"href","/docs/transformers/pr_17845/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForImageSegmentation"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForImageSegmentation"),c(Wd,"class","relative group"),c(sH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_17845/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.AutoModelForSemanticSegmentation"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Jd,"class","relative group"),c(cH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(hH,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(pH,"href","/docs/transformers/pr_17845/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(_H,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation"),c(uH,"href","/docs/transformers/pr_17845/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForInstanceSegmentation"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Zd,"class","relative group"),c(bH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17845/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.TFAutoModel"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.TFAutoModel"),c(rc,"class","relative group"),c(MH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertModel"),c(AH,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartModel"),c(LH,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertModel"),c(yH,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(xH,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c($H,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertModel"),c(kH,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.TFCLIPModel"),c(SH,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertModel"),c(RH,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextModel"),c(PH,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLModel"),c(BH,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(NH,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaModel"),c(IH,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(qH,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(jH,"href","/docs/transformers/pr_17845/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(DH,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraModel"),c(GH,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(OH,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelModel"),c(VH,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(XH,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2Model"),c(zH,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJModel"),c(QH,"href","/docs/transformers/pr_17845/en/model_doc/hubert#transformers.TFHubertModel"),c(WH,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(HH,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDModel"),c(UH,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerModel"),c(JH,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertModel"),c(YH,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianModel"),c(KH,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartModel"),c(ZH,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(eU,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetModel"),c(oU,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5Model"),c(rU,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(tU,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTModel"),c(aU,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusModel"),c(nU,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertModel"),c(sU,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaModel"),c(lU,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerModel"),c(iU,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(dU,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinModel"),c(cU,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5Model"),c(fU,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasModel"),c(mU,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(gU,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTModel"),c(hU,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(pU,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(_U,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMModel"),c(uU,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(bU,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.TFAutoModelForPreTraining"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.TFAutoModelForPreTraining"),c(nc,"class","relative group"),c(vU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(EU,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(CU,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForPreTraining"),c(wU,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AU,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LU,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yU,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(xU,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c($U,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(kU,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SU,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(RU,"href","/docs/transformers/pr_17845/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(PU,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(BU,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NU,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IU,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qU,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(DU,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(GU,"href","/docs/transformers/pr_17845/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(OU,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VU,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(XU,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M8,"id","transformers.TFAutoModelForCausalLM"),c(M8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M8,"href","#transformers.TFAutoModelForCausalLM"),c(ic,"class","relative group"),c(zU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(UU,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(JU,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(YU,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(KU,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(ZU,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(eJ,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(oJ,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(rJ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(tJ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(aJ,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sJ,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q8,"id","transformers.TFAutoModelForImageClassification"),c(q8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q8,"href","#transformers.TFAutoModelForImageClassification"),c(fc,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17845/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(fJ,"href","/docs/transformers/pr_17845/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(mJ,"href","/docs/transformers/pr_17845/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(gJ,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z8,"id","transformers.TFAutoModelForMaskedLM"),c(z8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z8,"href","#transformers.TFAutoModelForMaskedLM"),c(hc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AJ,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(LJ,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c($J,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RJ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NJ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(uc,"class","relative group"),c(IJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(XJ,"href","/docs/transformers/pr_17845/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.TFMarianMTModel"),c(QJ,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.TFAutoModelForSequenceClassification"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17845/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17845/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17845/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(EY,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(CY,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForMultipleChoice"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ec,"class","relative group"),c(wY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(BY,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(NY,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IY,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(qY,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(jY,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForNextSentencePrediction"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ac,"class","relative group"),c(zY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(UY,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xc,"class","relative group"),c(JY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17845/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.TFAutoModelForTokenClassification"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.TFAutoModelForTokenClassification"),c(Sc,"class","relative group"),c(eK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(aK,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(nK,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(lK,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(iK,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(dK,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(cK,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(fK,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(gK,"href","/docs/transformers/pr_17845/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(hK,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(pK,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(_K,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(uK,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(bK,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(vK,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(FK,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(TK,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(MK,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForQuestionAnswering"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(EK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17845/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17845/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17845/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17845/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17845/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(BK,"href","/docs/transformers/pr_17845/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17845/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17845/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17845/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17845/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(VK,"href","/docs/transformers/pr_17845/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(XK,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(zK,"href","/docs/transformers/pr_17845/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForVision2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForVision2Seq"),c(qc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Gc,"class","relative group"),c(JK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KK,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZK,"href","/docs/transformers/pr_17845/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModel"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModel"),c(Xc,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertModel"),c(aZ,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartModel"),c(nZ,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitModel"),c(sZ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertModel"),c(lZ,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(iZ,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(dZ,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(cZ,"href","/docs/transformers/pr_17845/en/model_doc/clip#transformers.FlaxCLIPModel"),c(fZ,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(mZ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraModel"),c(gZ,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(hZ,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(pZ,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(_Z,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(uZ,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianModel"),c(bZ,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartModel"),c(vZ,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5Model"),c(FZ,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTModel"),c(TZ,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(MZ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(EZ,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(CZ,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5Model"),c(wZ,"href","/docs/transformers/pr_17845/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(AZ,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTModel"),c(LZ,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(yZ,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(xZ,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.FlaxAutoModelForCausalLM"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Wc,"class","relative group"),c($Z,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(PZ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(BZ,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(NZ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(IZ,"href","/docs/transformers/pr_17845/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(qZ,"href","/docs/transformers/pr_17845/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(jZ,"href","/docs/transformers/pr_17845/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(DZ,"href","/docs/transformers/pr_17845/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(GZ,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(OZ,"href","/docs/transformers/pr_17845/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F3,"id","transformers.FlaxAutoModelForPreTraining"),c(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Jc,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(WZ,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(UZ,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(JZ,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(YZ,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ZZ,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oee,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ree,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(tee,"href","/docs/transformers/pr_17845/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(aee,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForMaskedLM"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Zc,"class","relative group"),c(nee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(see,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iee,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(dee,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cee,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(fee,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(mee,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(gee,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(hee,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(pee,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(_ee,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(uee,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(rf,"class","relative group"),c(bee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tee,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Mee,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Eee,"href","/docs/transformers/pr_17845/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Cee,"href","/docs/transformers/pr_17845/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(wee,"href","/docs/transformers/pr_17845/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Aee,"href","/docs/transformers/pr_17845/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Lee,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yee,"href","/docs/transformers/pr_17845/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xee,"href","/docs/transformers/pr_17845/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c($ee,"href","/docs/transformers/pr_17845/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(nf,"class","relative group"),c(kee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(See,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ree,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pee,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(qee,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(jee,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Dee,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Oee,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Vee,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(df,"class","relative group"),c(Xee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_17845/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Uee,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Jee,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Yee,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Kee,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Zee,"href","/docs/transformers/pr_17845/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(eoe,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ooe,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(roe,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForTokenClassification"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(mf,"class","relative group"),c(toe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(loe,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(ioe,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(doe,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(coe,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(foe,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(moe,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(goe,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(pf,"class","relative group"),c(hoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(poe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_oe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uoe,"href","/docs/transformers/pr_17845/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(boe,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(voe,"href","/docs/transformers/pr_17845/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Foe,"href","/docs/transformers/pr_17845/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Toe,"href","/docs/transformers/pr_17845/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Moe,"href","/docs/transformers/pr_17845/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Eoe,"href","/docs/transformers/pr_17845/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Coe,"href","/docs/transformers/pr_17845/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(bf,"class","relative group"),c(woe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Loe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yoe,"href","/docs/transformers/pr_17845/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForImageClassification"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForImageClassification"),c(Tf,"class","relative group"),c(xoe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($oe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(koe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Soe,"href","/docs/transformers/pr_17845/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Roe,"href","/docs/transformers/pr_17845/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForVision2Seq"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Cf,"class","relative group"),c(Poe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Boe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/pr_17845/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ioe,"href","/docs/transformers/pr_17845/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ei),b(f,$f,u),b(f,nt,u),e(nt,Ci),e(nt,wi),e(wi,P6),e(nt,kf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ai),e(Qe,Rn),e(Rn,B6),e(Qe,Pn),e(Qe,Bn),e(Bn,N6),e(Qe,Li),e(Qe,Nn),e(Nn,I6),e(Qe,yi),b(f,Sf,u),M($a,f,u),b(f,We,u),b(f,Ae,u),e(Ae,mS),e(Ae,xi),e(xi,gS),e(Ae,hS),b(f,Co,u),b(f,ka,u),e(ka,pS),e(ka,Rf),e(Rf,_S),e(ka,IQe),b(f,MOe,u),b(f,$i,u),e($i,Pf),e(Pf,Ste),M(q6,Ste,null),e($i,qQe),e($i,Rte),e(Rte,jQe),b(f,EOe,u),b(f,In,u),e(In,DQe),e(In,Pte),e(Pte,GQe),e(In,OQe),e(In,Bte),e(Bte,VQe),e(In,XQe),b(f,COe,u),M(j6,f,u),b(f,wOe,u),b(f,uS,u),e(uS,zQe),b(f,AOe,u),M(Bf,f,u),b(f,LOe,u),b(f,ki,u),e(ki,Nf),e(Nf,Nte),M(D6,Nte,null),e(ki,QQe),e(ki,Ite),e(Ite,WQe),b(f,yOe,u),b(f,wo,u),M(G6,wo,null),e(wo,HQe),e(wo,O6),e(O6,UQe),e(O6,bS),e(bS,JQe),e(O6,YQe),e(wo,KQe),e(wo,V6),e(V6,ZQe),e(V6,qte),e(qte,eWe),e(V6,oWe),e(wo,rWe),e(wo,Ar),M(X6,Ar,null),e(Ar,tWe),e(Ar,jte),e(jte,aWe),e(Ar,nWe),e(Ar,Si),e(Si,sWe),e(Si,Dte),e(Dte,lWe),e(Si,iWe),e(Si,Gte),e(Gte,dWe),e(Si,cWe),e(Ar,fWe),e(Ar,A),e(A,If),e(If,Ote),e(Ote,mWe),e(If,gWe),e(If,vS),e(vS,hWe),e(If,pWe),e(A,_We),e(A,qf),e(qf,Vte),e(Vte,uWe),e(qf,bWe),e(qf,FS),e(FS,vWe),e(qf,FWe),e(A,TWe),e(A,jf),e(jf,Xte),e(Xte,MWe),e(jf,EWe),e(jf,TS),e(TS,CWe),e(jf,wWe),e(A,AWe),e(A,Df),e(Df,zte),e(zte,LWe),e(Df,yWe),e(Df,MS),e(MS,xWe),e(Df,$We),e(A,kWe),e(A,Gf),e(Gf,Qte),e(Qte,SWe),e(Gf,RWe),e(Gf,ES),e(ES,PWe),e(Gf,BWe),e(A,NWe),e(A,Of),e(Of,Wte),e(Wte,IWe),e(Of,qWe),e(Of,CS),e(CS,jWe),e(Of,DWe),e(A,GWe),e(A,Vf),e(Vf,Hte),e(Hte,OWe),e(Vf,VWe),e(Vf,wS),e(wS,XWe),e(Vf,zWe),e(A,QWe),e(A,Xf),e(Xf,Ute),e(Ute,WWe),e(Xf,HWe),e(Xf,AS),e(AS,UWe),e(Xf,JWe),e(A,YWe),e(A,zf),e(zf,Jte),e(Jte,KWe),e(zf,ZWe),e(zf,LS),e(LS,eHe),e(zf,oHe),e(A,rHe),e(A,Qf),e(Qf,Yte),e(Yte,tHe),e(Qf,aHe),e(Qf,yS),e(yS,nHe),e(Qf,sHe),e(A,lHe),e(A,Wf),e(Wf,Kte),e(Kte,iHe),e(Wf,dHe),e(Wf,xS),e(xS,cHe),e(Wf,fHe),e(A,mHe),e(A,Hf),e(Hf,Zte),e(Zte,gHe),e(Hf,hHe),e(Hf,$S),e($S,pHe),e(Hf,_He),e(A,uHe),e(A,Uf),e(Uf,eae),e(eae,bHe),e(Uf,vHe),e(Uf,kS),e(kS,FHe),e(Uf,THe),e(A,MHe),e(A,Jf),e(Jf,oae),e(oae,EHe),e(Jf,CHe),e(Jf,SS),e(SS,wHe),e(Jf,AHe),e(A,LHe),e(A,Yf),e(Yf,rae),e(rae,yHe),e(Yf,xHe),e(Yf,RS),e(RS,$He),e(Yf,kHe),e(A,SHe),e(A,Kf),e(Kf,tae),e(tae,RHe),e(Kf,PHe),e(Kf,PS),e(PS,BHe),e(Kf,NHe),e(A,IHe),e(A,Zf),e(Zf,aae),e(aae,qHe),e(Zf,jHe),e(Zf,BS),e(BS,DHe),e(Zf,GHe),e(A,OHe),e(A,em),e(em,nae),e(nae,VHe),e(em,XHe),e(em,NS),e(NS,zHe),e(em,QHe),e(A,WHe),e(A,om),e(om,sae),e(sae,HHe),e(om,UHe),e(om,IS),e(IS,JHe),e(om,YHe),e(A,KHe),e(A,rm),e(rm,lae),e(lae,ZHe),e(rm,eUe),e(rm,qS),e(qS,oUe),e(rm,rUe),e(A,tUe),e(A,tm),e(tm,iae),e(iae,aUe),e(tm,nUe),e(tm,jS),e(jS,sUe),e(tm,lUe),e(A,iUe),e(A,am),e(am,dae),e(dae,dUe),e(am,cUe),e(am,DS),e(DS,fUe),e(am,mUe),e(A,gUe),e(A,nm),e(nm,cae),e(cae,hUe),e(nm,pUe),e(nm,GS),e(GS,_Ue),e(nm,uUe),e(A,bUe),e(A,sm),e(sm,fae),e(fae,vUe),e(sm,FUe),e(sm,OS),e(OS,TUe),e(sm,MUe),e(A,EUe),e(A,lm),e(lm,mae),e(mae,CUe),e(lm,wUe),e(lm,VS),e(VS,AUe),e(lm,LUe),e(A,yUe),e(A,im),e(im,gae),e(gae,xUe),e(im,$Ue),e(im,XS),e(XS,kUe),e(im,SUe),e(A,RUe),e(A,dm),e(dm,hae),e(hae,PUe),e(dm,BUe),e(dm,zS),e(zS,NUe),e(dm,IUe),e(A,qUe),e(A,cm),e(cm,pae),e(pae,jUe),e(cm,DUe),e(cm,QS),e(QS,GUe),e(cm,OUe),e(A,VUe),e(A,fm),e(fm,_ae),e(_ae,XUe),e(fm,zUe),e(fm,WS),e(WS,QUe),e(fm,WUe),e(A,HUe),e(A,mm),e(mm,uae),e(uae,UUe),e(mm,JUe),e(mm,HS),e(HS,YUe),e(mm,KUe),e(A,ZUe),e(A,gm),e(gm,bae),e(bae,eJe),e(gm,oJe),e(gm,US),e(US,rJe),e(gm,tJe),e(A,aJe),e(A,hm),e(hm,vae),e(vae,nJe),e(hm,sJe),e(hm,JS),e(JS,lJe),e(hm,iJe),e(A,dJe),e(A,pm),e(pm,Fae),e(Fae,cJe),e(pm,fJe),e(pm,YS),e(YS,mJe),e(pm,gJe),e(A,hJe),e(A,_m),e(_m,Tae),e(Tae,pJe),e(_m,_Je),e(_m,KS),e(KS,uJe),e(_m,bJe),e(A,vJe),e(A,um),e(um,Mae),e(Mae,FJe),e(um,TJe),e(um,ZS),e(ZS,MJe),e(um,EJe),e(A,CJe),e(A,bm),e(bm,Eae),e(Eae,wJe),e(bm,AJe),e(bm,eR),e(eR,LJe),e(bm,yJe),e(A,xJe),e(A,vm),e(vm,Cae),e(Cae,$Je),e(vm,kJe),e(vm,oR),e(oR,SJe),e(vm,RJe),e(A,PJe),e(A,Fm),e(Fm,wae),e(wae,BJe),e(Fm,NJe),e(Fm,rR),e(rR,IJe),e(Fm,qJe),e(A,jJe),e(A,Tm),e(Tm,Aae),e(Aae,DJe),e(Tm,GJe),e(Tm,tR),e(tR,OJe),e(Tm,VJe),e(A,XJe),e(A,Mm),e(Mm,Lae),e(Lae,zJe),e(Mm,QJe),e(Mm,aR),e(aR,WJe),e(Mm,HJe),e(A,UJe),e(A,Em),e(Em,yae),e(yae,JJe),e(Em,YJe),e(Em,nR),e(nR,KJe),e(Em,ZJe),e(A,eYe),e(A,Cm),e(Cm,xae),e(xae,oYe),e(Cm,rYe),e(Cm,sR),e(sR,tYe),e(Cm,aYe),e(A,nYe),e(A,wm),e(wm,$ae),e($ae,sYe),e(wm,lYe),e(wm,lR),e(lR,iYe),e(wm,dYe),e(A,cYe),e(A,Am),e(Am,kae),e(kae,fYe),e(Am,mYe),e(Am,iR),e(iR,gYe),e(Am,hYe),e(A,pYe),e(A,Lm),e(Lm,Sae),e(Sae,_Ye),e(Lm,uYe),e(Lm,dR),e(dR,bYe),e(Lm,vYe),e(A,FYe),e(A,ym),e(ym,Rae),e(Rae,TYe),e(ym,MYe),e(ym,cR),e(cR,EYe),e(ym,CYe),e(A,wYe),e(A,xm),e(xm,Pae),e(Pae,AYe),e(xm,LYe),e(xm,fR),e(fR,yYe),e(xm,xYe),e(A,$Ye),e(A,$m),e($m,Bae),e(Bae,kYe),e($m,SYe),e($m,mR),e(mR,RYe),e($m,PYe),e(A,BYe),e(A,km),e(km,Nae),e(Nae,NYe),e(km,IYe),e(km,gR),e(gR,qYe),e(km,jYe),e(A,DYe),e(A,Sm),e(Sm,Iae),e(Iae,GYe),e(Sm,OYe),e(Sm,hR),e(hR,VYe),e(Sm,XYe),e(A,zYe),e(A,Rm),e(Rm,qae),e(qae,QYe),e(Rm,WYe),e(Rm,pR),e(pR,HYe),e(Rm,UYe),e(A,JYe),e(A,Pm),e(Pm,jae),e(jae,YYe),e(Pm,KYe),e(Pm,_R),e(_R,ZYe),e(Pm,eKe),e(A,oKe),e(A,Bm),e(Bm,Dae),e(Dae,rKe),e(Bm,tKe),e(Bm,uR),e(uR,aKe),e(Bm,nKe),e(A,sKe),e(A,Nm),e(Nm,Gae),e(Gae,lKe),e(Nm,iKe),e(Nm,bR),e(bR,dKe),e(Nm,cKe),e(A,fKe),e(A,Im),e(Im,Oae),e(Oae,mKe),e(Im,gKe),e(Im,vR),e(vR,hKe),e(Im,pKe),e(A,_Ke),e(A,qm),e(qm,Vae),e(Vae,uKe),e(qm,bKe),e(qm,FR),e(FR,vKe),e(qm,FKe),e(A,TKe),e(A,jm),e(jm,Xae),e(Xae,MKe),e(jm,EKe),e(jm,TR),e(TR,CKe),e(jm,wKe),e(A,AKe),e(A,Dm),e(Dm,zae),e(zae,LKe),e(Dm,yKe),e(Dm,MR),e(MR,xKe),e(Dm,$Ke),e(A,kKe),e(A,Gm),e(Gm,Qae),e(Qae,SKe),e(Gm,RKe),e(Gm,ER),e(ER,PKe),e(Gm,BKe),e(A,NKe),e(A,Om),e(Om,Wae),e(Wae,IKe),e(Om,qKe),e(Om,CR),e(CR,jKe),e(Om,DKe),e(A,GKe),e(A,Vm),e(Vm,Hae),e(Hae,OKe),e(Vm,VKe),e(Vm,wR),e(wR,XKe),e(Vm,zKe),e(A,QKe),e(A,Xm),e(Xm,Uae),e(Uae,WKe),e(Xm,HKe),e(Xm,AR),e(AR,UKe),e(Xm,JKe),e(A,YKe),e(A,zm),e(zm,Jae),e(Jae,KKe),e(zm,ZKe),e(zm,LR),e(LR,eZe),e(zm,oZe),e(A,rZe),e(A,Qm),e(Qm,Yae),e(Yae,tZe),e(Qm,aZe),e(Qm,yR),e(yR,nZe),e(Qm,sZe),e(A,lZe),e(A,Wm),e(Wm,Kae),e(Kae,iZe),e(Wm,dZe),e(Wm,xR),e(xR,cZe),e(Wm,fZe),e(A,mZe),e(A,Hm),e(Hm,Zae),e(Zae,gZe),e(Hm,hZe),e(Hm,$R),e($R,pZe),e(Hm,_Ze),e(A,uZe),e(A,Um),e(Um,ene),e(ene,bZe),e(Um,vZe),e(Um,kR),e(kR,FZe),e(Um,TZe),e(A,MZe),e(A,Jm),e(Jm,one),e(one,EZe),e(Jm,CZe),e(Jm,SR),e(SR,wZe),e(Jm,AZe),e(A,LZe),e(A,Ym),e(Ym,rne),e(rne,yZe),e(Ym,xZe),e(Ym,RR),e(RR,$Ze),e(Ym,kZe),e(A,SZe),e(A,Km),e(Km,tne),e(tne,RZe),e(Km,PZe),e(Km,PR),e(PR,BZe),e(Km,NZe),e(A,IZe),e(A,Zm),e(Zm,ane),e(ane,qZe),e(Zm,jZe),e(Zm,BR),e(BR,DZe),e(Zm,GZe),e(A,OZe),e(A,eg),e(eg,nne),e(nne,VZe),e(eg,XZe),e(eg,NR),e(NR,zZe),e(eg,QZe),e(A,WZe),e(A,og),e(og,sne),e(sne,HZe),e(og,UZe),e(og,IR),e(IR,JZe),e(og,YZe),e(A,KZe),e(A,rg),e(rg,lne),e(lne,ZZe),e(rg,eeo),e(rg,qR),e(qR,oeo),e(rg,reo),e(A,teo),e(A,tg),e(tg,ine),e(ine,aeo),e(tg,neo),e(tg,jR),e(jR,seo),e(tg,leo),e(A,ieo),e(A,ag),e(ag,dne),e(dne,deo),e(ag,ceo),e(ag,DR),e(DR,feo),e(ag,meo),e(A,geo),e(A,ng),e(ng,cne),e(cne,heo),e(ng,peo),e(ng,GR),e(GR,_eo),e(ng,ueo),e(A,beo),e(A,sg),e(sg,fne),e(fne,veo),e(sg,Feo),e(sg,OR),e(OR,Teo),e(sg,Meo),e(A,Eeo),e(A,lg),e(lg,mne),e(mne,Ceo),e(lg,weo),e(lg,VR),e(VR,Aeo),e(lg,Leo),e(A,yeo),e(A,ig),e(ig,gne),e(gne,xeo),e(ig,$eo),e(ig,XR),e(XR,keo),e(ig,Seo),e(A,Reo),e(A,dg),e(dg,hne),e(hne,Peo),e(dg,Beo),e(dg,zR),e(zR,Neo),e(dg,Ieo),e(A,qeo),e(A,cg),e(cg,pne),e(pne,jeo),e(cg,Deo),e(cg,QR),e(QR,Geo),e(cg,Oeo),e(A,Veo),e(A,fg),e(fg,_ne),e(_ne,Xeo),e(fg,zeo),e(fg,WR),e(WR,Qeo),e(fg,Weo),e(A,Heo),e(A,mg),e(mg,une),e(une,Ueo),e(mg,Jeo),e(mg,HR),e(HR,Yeo),e(mg,Keo),e(A,Zeo),e(A,gg),e(gg,bne),e(bne,eoo),e(gg,ooo),e(gg,UR),e(UR,roo),e(gg,too),e(A,aoo),e(A,hg),e(hg,vne),e(vne,noo),e(hg,soo),e(hg,JR),e(JR,loo),e(hg,ioo),e(A,doo),e(A,pg),e(pg,Fne),e(Fne,coo),e(pg,foo),e(pg,YR),e(YR,moo),e(pg,goo),e(A,hoo),e(A,_g),e(_g,Tne),e(Tne,poo),e(_g,_oo),e(_g,KR),e(KR,uoo),e(_g,boo),e(A,voo),e(A,ug),e(ug,Mne),e(Mne,Foo),e(ug,Too),e(ug,ZR),e(ZR,Moo),e(ug,Eoo),e(A,Coo),e(A,bg),e(bg,Ene),e(Ene,woo),e(bg,Aoo),e(bg,eP),e(eP,Loo),e(bg,yoo),e(A,xoo),e(A,vg),e(vg,Cne),e(Cne,$oo),e(vg,koo),e(vg,oP),e(oP,Soo),e(vg,Roo),e(A,Poo),e(A,Fg),e(Fg,wne),e(wne,Boo),e(Fg,Noo),e(Fg,rP),e(rP,Ioo),e(Fg,qoo),e(A,joo),e(A,Tg),e(Tg,Ane),e(Ane,Doo),e(Tg,Goo),e(Tg,tP),e(tP,Ooo),e(Tg,Voo),e(A,Xoo),e(A,Mg),e(Mg,Lne),e(Lne,zoo),e(Mg,Qoo),e(Mg,aP),e(aP,Woo),e(Mg,Hoo),e(A,Uoo),e(A,Eg),e(Eg,yne),e(yne,Joo),e(Eg,Yoo),e(Eg,nP),e(nP,Koo),e(Eg,Zoo),e(A,ero),e(A,Cg),e(Cg,xne),e(xne,oro),e(Cg,rro),e(Cg,sP),e(sP,tro),e(Cg,aro),e(A,nro),e(A,wg),e(wg,$ne),e($ne,sro),e(wg,lro),e(wg,lP),e(lP,iro),e(wg,dro),e(A,cro),e(A,Ag),e(Ag,kne),e(kne,fro),e(Ag,mro),e(Ag,iP),e(iP,gro),e(Ag,hro),e(A,pro),e(A,Lg),e(Lg,Sne),e(Sne,_ro),e(Lg,uro),e(Lg,dP),e(dP,bro),e(Lg,vro),e(A,Fro),e(A,yg),e(yg,Rne),e(Rne,Tro),e(yg,Mro),e(yg,cP),e(cP,Ero),e(yg,Cro),e(A,wro),e(A,xg),e(xg,Pne),e(Pne,Aro),e(xg,Lro),e(xg,fP),e(fP,yro),e(xg,xro),e(A,$ro),e(A,$g),e($g,Bne),e(Bne,kro),e($g,Sro),e($g,mP),e(mP,Rro),e($g,Pro),e(A,Bro),e(A,kg),e(kg,Nne),e(Nne,Nro),e(kg,Iro),e(kg,gP),e(gP,qro),e(kg,jro),e(A,Dro),e(A,Sg),e(Sg,Ine),e(Ine,Gro),e(Sg,Oro),e(Sg,hP),e(hP,Vro),e(Sg,Xro),e(A,zro),e(A,Rg),e(Rg,qne),e(qne,Qro),e(Rg,Wro),e(Rg,pP),e(pP,Hro),e(Rg,Uro),e(A,Jro),e(A,Pg),e(Pg,jne),e(jne,Yro),e(Pg,Kro),e(Pg,_P),e(_P,Zro),e(Pg,eto),e(A,oto),e(A,Bg),e(Bg,Dne),e(Dne,rto),e(Bg,tto),e(Bg,uP),e(uP,ato),e(Bg,nto),e(A,sto),e(A,Ng),e(Ng,Gne),e(Gne,lto),e(Ng,ito),e(Ng,bP),e(bP,dto),e(Ng,cto),e(A,fto),e(A,Ig),e(Ig,One),e(One,mto),e(Ig,gto),e(Ig,vP),e(vP,hto),e(Ig,pto),e(A,_to),e(A,qg),e(qg,Vne),e(Vne,uto),e(qg,bto),e(qg,FP),e(FP,vto),e(qg,Fto),e(A,Tto),e(A,jg),e(jg,Xne),e(Xne,Mto),e(jg,Eto),e(jg,TP),e(TP,Cto),e(jg,wto),e(A,Ato),e(A,Dg),e(Dg,zne),e(zne,Lto),e(Dg,yto),e(Dg,MP),e(MP,xto),e(Dg,$to),e(A,kto),e(A,Gg),e(Gg,Qne),e(Qne,Sto),e(Gg,Rto),e(Gg,EP),e(EP,Pto),e(Gg,Bto),e(A,Nto),e(A,Og),e(Og,Wne),e(Wne,Ito),e(Og,qto),e(Og,CP),e(CP,jto),e(Og,Dto),e(A,Gto),e(A,Vg),e(Vg,Hne),e(Hne,Oto),e(Vg,Vto),e(Vg,wP),e(wP,Xto),e(Vg,zto),e(A,Qto),e(A,Xg),e(Xg,Une),e(Une,Wto),e(Xg,Hto),e(Xg,AP),e(AP,Uto),e(Xg,Jto),e(Ar,Yto),M(zg,Ar,null),e(wo,Kto),e(wo,Qg),M(z6,Qg,null),e(Qg,Zto),e(Qg,Jne),e(Jne,eao),b(f,xOe,u),b(f,Ri,u),e(Ri,Wg),e(Wg,Yne),M(Q6,Yne,null),e(Ri,oao),e(Ri,Kne),e(Kne,rao),b(f,$Oe,u),b(f,Ao,u),M(W6,Ao,null),e(Ao,tao),e(Ao,H6),e(H6,aao),e(H6,LP),e(LP,nao),e(H6,sao),e(Ao,lao),e(Ao,U6),e(U6,iao),e(U6,Zne),e(Zne,dao),e(U6,cao),e(Ao,fao),e(Ao,Lr),M(J6,Lr,null),e(Lr,mao),e(Lr,ese),e(ese,gao),e(Lr,hao),e(Lr,Sa),e(Sa,pao),e(Sa,ose),e(ose,_ao),e(Sa,uao),e(Sa,rse),e(rse,bao),e(Sa,vao),e(Sa,tse),e(tse,Fao),e(Sa,Tao),e(Lr,Mao),e(Lr,k),e(k,qn),e(qn,ase),e(ase,Eao),e(qn,Cao),e(qn,yP),e(yP,wao),e(qn,Aao),e(qn,xP),e(xP,Lao),e(qn,yao),e(k,xao),e(k,jn),e(jn,nse),e(nse,$ao),e(jn,kao),e(jn,$P),e($P,Sao),e(jn,Rao),e(jn,kP),e(kP,Pao),e(jn,Bao),e(k,Nao),e(k,Dn),e(Dn,sse),e(sse,Iao),e(Dn,qao),e(Dn,SP),e(SP,jao),e(Dn,Dao),e(Dn,RP),e(RP,Gao),e(Dn,Oao),e(k,Vao),e(k,Hg),e(Hg,lse),e(lse,Xao),e(Hg,zao),e(Hg,PP),e(PP,Qao),e(Hg,Wao),e(k,Hao),e(k,Gn),e(Gn,ise),e(ise,Uao),e(Gn,Jao),e(Gn,BP),e(BP,Yao),e(Gn,Kao),e(Gn,NP),e(NP,Zao),e(Gn,eno),e(k,ono),e(k,Ug),e(Ug,dse),e(dse,rno),e(Ug,tno),e(Ug,IP),e(IP,ano),e(Ug,nno),e(k,sno),e(k,Jg),e(Jg,cse),e(cse,lno),e(Jg,ino),e(Jg,qP),e(qP,dno),e(Jg,cno),e(k,fno),e(k,Yg),e(Yg,fse),e(fse,mno),e(Yg,gno),e(Yg,jP),e(jP,hno),e(Yg,pno),e(k,_no),e(k,On),e(On,mse),e(mse,uno),e(On,bno),e(On,DP),e(DP,vno),e(On,Fno),e(On,GP),e(GP,Tno),e(On,Mno),e(k,Eno),e(k,Vn),e(Vn,gse),e(gse,Cno),e(Vn,wno),e(Vn,OP),e(OP,Ano),e(Vn,Lno),e(Vn,VP),e(VP,yno),e(Vn,xno),e(k,$no),e(k,Xn),e(Xn,hse),e(hse,kno),e(Xn,Sno),e(Xn,XP),e(XP,Rno),e(Xn,Pno),e(Xn,zP),e(zP,Bno),e(Xn,Nno),e(k,Ino),e(k,Kg),e(Kg,pse),e(pse,qno),e(Kg,jno),e(Kg,QP),e(QP,Dno),e(Kg,Gno),e(k,Ono),e(k,Zg),e(Zg,_se),e(_se,Vno),e(Zg,Xno),e(Zg,WP),e(WP,zno),e(Zg,Qno),e(k,Wno),e(k,eh),e(eh,use),e(use,Hno),e(eh,Uno),e(eh,HP),e(HP,Jno),e(eh,Yno),e(k,Kno),e(k,zn),e(zn,bse),e(bse,Zno),e(zn,eso),e(zn,UP),e(UP,oso),e(zn,rso),e(zn,JP),e(JP,tso),e(zn,aso),e(k,nso),e(k,oh),e(oh,vse),e(vse,sso),e(oh,lso),e(oh,YP),e(YP,iso),e(oh,dso),e(k,cso),e(k,Qn),e(Qn,Fse),e(Fse,fso),e(Qn,mso),e(Qn,KP),e(KP,gso),e(Qn,hso),e(Qn,ZP),e(ZP,pso),e(Qn,_so),e(k,uso),e(k,Wn),e(Wn,Tse),e(Tse,bso),e(Wn,vso),e(Wn,eB),e(eB,Fso),e(Wn,Tso),e(Wn,oB),e(oB,Mso),e(Wn,Eso),e(k,Cso),e(k,Hn),e(Hn,Mse),e(Mse,wso),e(Hn,Aso),e(Hn,rB),e(rB,Lso),e(Hn,yso),e(Hn,tB),e(tB,xso),e(Hn,$so),e(k,kso),e(k,Un),e(Un,Ese),e(Ese,Sso),e(Un,Rso),e(Un,aB),e(aB,Pso),e(Un,Bso),e(Un,nB),e(nB,Nso),e(Un,Iso),e(k,qso),e(k,rh),e(rh,Cse),e(Cse,jso),e(rh,Dso),e(rh,sB),e(sB,Gso),e(rh,Oso),e(k,Vso),e(k,Jn),e(Jn,wse),e(wse,Xso),e(Jn,zso),e(Jn,lB),e(lB,Qso),e(Jn,Wso),e(Jn,iB),e(iB,Hso),e(Jn,Uso),e(k,Jso),e(k,Yn),e(Yn,Ase),e(Ase,Yso),e(Yn,Kso),e(Yn,dB),e(dB,Zso),e(Yn,elo),e(Yn,cB),e(cB,olo),e(Yn,rlo),e(k,tlo),e(k,Kn),e(Kn,Lse),e(Lse,alo),e(Kn,nlo),e(Kn,fB),e(fB,slo),e(Kn,llo),e(Kn,mB),e(mB,ilo),e(Kn,dlo),e(k,clo),e(k,Zn),e(Zn,yse),e(yse,flo),e(Zn,mlo),e(Zn,gB),e(gB,glo),e(Zn,hlo),e(Zn,hB),e(hB,plo),e(Zn,_lo),e(k,ulo),e(k,es),e(es,xse),e(xse,blo),e(es,vlo),e(es,pB),e(pB,Flo),e(es,Tlo),e(es,_B),e(_B,Mlo),e(es,Elo),e(k,Clo),e(k,os),e(os,$se),e($se,wlo),e(os,Alo),e(os,uB),e(uB,Llo),e(os,ylo),e(os,bB),e(bB,xlo),e(os,$lo),e(k,klo),e(k,th),e(th,kse),e(kse,Slo),e(th,Rlo),e(th,vB),e(vB,Plo),e(th,Blo),e(k,Nlo),e(k,rs),e(rs,Sse),e(Sse,Ilo),e(rs,qlo),e(rs,FB),e(FB,jlo),e(rs,Dlo),e(rs,TB),e(TB,Glo),e(rs,Olo),e(k,Vlo),e(k,ah),e(ah,Rse),e(Rse,Xlo),e(ah,zlo),e(ah,MB),e(MB,Qlo),e(ah,Wlo),e(k,Hlo),e(k,ts),e(ts,Pse),e(Pse,Ulo),e(ts,Jlo),e(ts,EB),e(EB,Ylo),e(ts,Klo),e(ts,CB),e(CB,Zlo),e(ts,eio),e(k,oio),e(k,as),e(as,Bse),e(Bse,rio),e(as,tio),e(as,wB),e(wB,aio),e(as,nio),e(as,AB),e(AB,sio),e(as,lio),e(k,iio),e(k,ns),e(ns,Nse),e(Nse,dio),e(ns,cio),e(ns,LB),e(LB,fio),e(ns,mio),e(ns,yB),e(yB,gio),e(ns,hio),e(k,pio),e(k,nh),e(nh,Ise),e(Ise,_io),e(nh,uio),e(nh,xB),e(xB,bio),e(nh,vio),e(k,Fio),e(k,ss),e(ss,qse),e(qse,Tio),e(ss,Mio),e(ss,$B),e($B,Eio),e(ss,Cio),e(ss,kB),e(kB,wio),e(ss,Aio),e(k,Lio),e(k,ls),e(ls,jse),e(jse,yio),e(ls,xio),e(ls,SB),e(SB,$io),e(ls,kio),e(ls,RB),e(RB,Sio),e(ls,Rio),e(k,Pio),e(k,sh),e(sh,Dse),e(Dse,Bio),e(sh,Nio),e(sh,PB),e(PB,Iio),e(sh,qio),e(k,jio),e(k,is),e(is,Gse),e(Gse,Dio),e(is,Gio),e(is,BB),e(BB,Oio),e(is,Vio),e(is,NB),e(NB,Xio),e(is,zio),e(k,Qio),e(k,ds),e(ds,Ose),e(Ose,Wio),e(ds,Hio),e(ds,IB),e(IB,Uio),e(ds,Jio),e(ds,qB),e(qB,Yio),e(ds,Kio),e(k,Zio),e(k,cs),e(cs,Vse),e(Vse,edo),e(cs,odo),e(cs,jB),e(jB,rdo),e(cs,tdo),e(cs,DB),e(DB,ado),e(cs,ndo),e(k,sdo),e(k,fs),e(fs,Xse),e(Xse,ldo),e(fs,ido),e(fs,GB),e(GB,ddo),e(fs,cdo),e(fs,OB),e(OB,fdo),e(fs,mdo),e(k,gdo),e(k,ms),e(ms,zse),e(zse,hdo),e(ms,pdo),e(ms,VB),e(VB,_do),e(ms,udo),e(ms,XB),e(XB,bdo),e(ms,vdo),e(k,Fdo),e(k,gs),e(gs,Qse),e(Qse,Tdo),e(gs,Mdo),e(gs,zB),e(zB,Edo),e(gs,Cdo),e(gs,QB),e(QB,wdo),e(gs,Ado),e(k,Ldo),e(k,hs),e(hs,Wse),e(Wse,ydo),e(hs,xdo),e(hs,WB),e(WB,$do),e(hs,kdo),e(hs,HB),e(HB,Sdo),e(hs,Rdo),e(k,Pdo),e(k,ps),e(ps,Hse),e(Hse,Bdo),e(ps,Ndo),e(ps,UB),e(UB,Ido),e(ps,qdo),e(ps,JB),e(JB,jdo),e(ps,Ddo),e(k,Gdo),e(k,lh),e(lh,Use),e(Use,Odo),e(lh,Vdo),e(lh,YB),e(YB,Xdo),e(lh,zdo),e(k,Qdo),e(k,_s),e(_s,Jse),e(Jse,Wdo),e(_s,Hdo),e(_s,KB),e(KB,Udo),e(_s,Jdo),e(_s,ZB),e(ZB,Ydo),e(_s,Kdo),e(k,Zdo),e(k,ih),e(ih,Yse),e(Yse,eco),e(ih,oco),e(ih,eN),e(eN,rco),e(ih,tco),e(k,aco),e(k,dh),e(dh,Kse),e(Kse,nco),e(dh,sco),e(dh,oN),e(oN,lco),e(dh,ico),e(k,dco),e(k,us),e(us,Zse),e(Zse,cco),e(us,fco),e(us,rN),e(rN,mco),e(us,gco),e(us,tN),e(tN,hco),e(us,pco),e(k,_co),e(k,bs),e(bs,ele),e(ele,uco),e(bs,bco),e(bs,aN),e(aN,vco),e(bs,Fco),e(bs,nN),e(nN,Tco),e(bs,Mco),e(k,Eco),e(k,vs),e(vs,ole),e(ole,Cco),e(vs,wco),e(vs,sN),e(sN,Aco),e(vs,Lco),e(vs,lN),e(lN,yco),e(vs,xco),e(k,$co),e(k,ch),e(ch,rle),e(rle,kco),e(ch,Sco),e(ch,iN),e(iN,Rco),e(ch,Pco),e(k,Bco),e(k,Fs),e(Fs,tle),e(tle,Nco),e(Fs,Ico),e(Fs,dN),e(dN,qco),e(Fs,jco),e(Fs,cN),e(cN,Dco),e(Fs,Gco),e(k,Oco),e(k,Ts),e(Ts,ale),e(ale,Vco),e(Ts,Xco),e(Ts,fN),e(fN,zco),e(Ts,Qco),e(Ts,mN),e(mN,Wco),e(Ts,Hco),e(k,Uco),e(k,Ms),e(Ms,nle),e(nle,Jco),e(Ms,Yco),e(Ms,gN),e(gN,Kco),e(Ms,Zco),e(Ms,hN),e(hN,efo),e(Ms,ofo),e(k,rfo),e(k,Es),e(Es,sle),e(sle,tfo),e(Es,afo),e(Es,pN),e(pN,nfo),e(Es,sfo),e(Es,_N),e(_N,lfo),e(Es,ifo),e(k,dfo),e(k,Cs),e(Cs,lle),e(lle,cfo),e(Cs,ffo),e(Cs,uN),e(uN,mfo),e(Cs,gfo),e(Cs,bN),e(bN,hfo),e(Cs,pfo),e(k,_fo),e(k,ws),e(ws,ile),e(ile,ufo),e(ws,bfo),e(ws,vN),e(vN,vfo),e(ws,Ffo),e(ws,FN),e(FN,Tfo),e(ws,Mfo),e(k,Efo),e(k,fh),e(fh,dle),e(dle,Cfo),e(fh,wfo),e(fh,TN),e(TN,Afo),e(fh,Lfo),e(k,yfo),e(k,As),e(As,cle),e(cle,xfo),e(As,$fo),e(As,MN),e(MN,kfo),e(As,Sfo),e(As,EN),e(EN,Rfo),e(As,Pfo),e(k,Bfo),e(k,mh),e(mh,fle),e(fle,Nfo),e(mh,Ifo),e(mh,CN),e(CN,qfo),e(mh,jfo),e(k,Dfo),e(k,gh),e(gh,mle),e(mle,Gfo),e(gh,Ofo),e(gh,wN),e(wN,Vfo),e(gh,Xfo),e(k,zfo),e(k,hh),e(hh,gle),e(gle,Qfo),e(hh,Wfo),e(hh,AN),e(AN,Hfo),e(hh,Ufo),e(k,Jfo),e(k,ph),e(ph,hle),e(hle,Yfo),e(ph,Kfo),e(ph,LN),e(LN,Zfo),e(ph,emo),e(k,omo),e(k,Ls),e(Ls,ple),e(ple,rmo),e(Ls,tmo),e(Ls,yN),e(yN,amo),e(Ls,nmo),e(Ls,xN),e(xN,smo),e(Ls,lmo),e(k,imo),e(k,_h),e(_h,_le),e(_le,dmo),e(_h,cmo),e(_h,$N),e($N,fmo),e(_h,mmo),e(k,gmo),e(k,ys),e(ys,ule),e(ule,hmo),e(ys,pmo),e(ys,kN),e(kN,_mo),e(ys,umo),e(ys,SN),e(SN,bmo),e(ys,vmo),e(k,Fmo),e(k,xs),e(xs,ble),e(ble,Tmo),e(xs,Mmo),e(xs,RN),e(RN,Emo),e(xs,Cmo),e(xs,PN),e(PN,wmo),e(xs,Amo),e(k,Lmo),e(k,$s),e($s,vle),e(vle,ymo),e($s,xmo),e($s,BN),e(BN,$mo),e($s,kmo),e($s,NN),e(NN,Smo),e($s,Rmo),e(k,Pmo),e(k,ks),e(ks,Fle),e(Fle,Bmo),e(ks,Nmo),e(ks,IN),e(IN,Imo),e(ks,qmo),e(ks,qN),e(qN,jmo),e(ks,Dmo),e(k,Gmo),e(k,Ss),e(Ss,Tle),e(Tle,Omo),e(Ss,Vmo),e(Ss,jN),e(jN,Xmo),e(Ss,zmo),e(Ss,DN),e(DN,Qmo),e(Ss,Wmo),e(k,Hmo),e(k,Rs),e(Rs,Mle),e(Mle,Umo),e(Rs,Jmo),e(Rs,GN),e(GN,Ymo),e(Rs,Kmo),e(Rs,ON),e(ON,Zmo),e(Rs,ego),e(k,ogo),e(k,uh),e(uh,Ele),e(Ele,rgo),e(uh,tgo),e(uh,VN),e(VN,ago),e(uh,ngo),e(k,sgo),e(k,bh),e(bh,Cle),e(Cle,lgo),e(bh,igo),e(bh,XN),e(XN,dgo),e(bh,cgo),e(k,fgo),e(k,Ps),e(Ps,wle),e(wle,mgo),e(Ps,ggo),e(Ps,zN),e(zN,hgo),e(Ps,pgo),e(Ps,QN),e(QN,_go),e(Ps,ugo),e(k,bgo),e(k,Bs),e(Bs,Ale),e(Ale,vgo),e(Bs,Fgo),e(Bs,WN),e(WN,Tgo),e(Bs,Mgo),e(Bs,HN),e(HN,Ego),e(Bs,Cgo),e(k,wgo),e(k,Ns),e(Ns,Lle),e(Lle,Ago),e(Ns,Lgo),e(Ns,UN),e(UN,ygo),e(Ns,xgo),e(Ns,JN),e(JN,$go),e(Ns,kgo),e(k,Sgo),e(k,vh),e(vh,yle),e(yle,Rgo),e(vh,Pgo),e(vh,YN),e(YN,Bgo),e(vh,Ngo),e(k,Igo),e(k,Fh),e(Fh,xle),e(xle,qgo),e(Fh,jgo),e(Fh,KN),e(KN,Dgo),e(Fh,Ggo),e(k,Ogo),e(k,Th),e(Th,$le),e($le,Vgo),e(Th,Xgo),e(Th,ZN),e(ZN,zgo),e(Th,Qgo),e(k,Wgo),e(k,Is),e(Is,kle),e(kle,Hgo),e(Is,Ugo),e(Is,eI),e(eI,Jgo),e(Is,Ygo),e(Is,oI),e(oI,Kgo),e(Is,Zgo),e(k,eho),e(k,qs),e(qs,Sle),e(Sle,oho),e(qs,rho),e(qs,rI),e(rI,tho),e(qs,aho),e(qs,tI),e(tI,nho),e(qs,sho),e(k,lho),e(k,Mh),e(Mh,Rle),e(Rle,iho),e(Mh,dho),e(Mh,aI),e(aI,cho),e(Mh,fho),e(k,mho),e(k,Eh),e(Eh,Ple),e(Ple,gho),e(Eh,hho),e(Eh,nI),e(nI,pho),e(Eh,_ho),e(k,uho),e(k,Ch),e(Ch,Ble),e(Ble,bho),e(Ch,vho),e(Ch,sI),e(sI,Fho),e(Ch,Tho),e(k,Mho),e(k,js),e(js,Nle),e(Nle,Eho),e(js,Cho),e(js,lI),e(lI,who),e(js,Aho),e(js,iI),e(iI,Lho),e(js,yho),e(k,xho),e(k,wh),e(wh,Ile),e(Ile,$ho),e(wh,kho),e(wh,dI),e(dI,Sho),e(wh,Rho),e(k,Pho),e(k,Ah),e(Ah,qle),e(qle,Bho),e(Ah,Nho),e(Ah,cI),e(cI,Iho),e(Ah,qho),e(k,jho),e(k,Ds),e(Ds,jle),e(jle,Dho),e(Ds,Gho),e(Ds,fI),e(fI,Oho),e(Ds,Vho),e(Ds,mI),e(mI,Xho),e(Ds,zho),e(k,Qho),e(k,Gs),e(Gs,Dle),e(Dle,Who),e(Gs,Hho),e(Gs,gI),e(gI,Uho),e(Gs,Jho),e(Gs,hI),e(hI,Yho),e(Gs,Kho),e(k,Zho),e(k,Os),e(Os,Gle),e(Gle,epo),e(Os,opo),e(Os,pI),e(pI,rpo),e(Os,tpo),e(Os,_I),e(_I,apo),e(Os,npo),e(k,spo),e(k,Vs),e(Vs,Ole),e(Ole,lpo),e(Vs,ipo),e(Vs,uI),e(uI,dpo),e(Vs,cpo),e(Vs,bI),e(bI,fpo),e(Vs,mpo),e(Lr,gpo),M(Lh,Lr,null),e(Ao,hpo),e(Ao,yh),M(Y6,yh,null),e(yh,ppo),e(yh,Vle),e(Vle,_po),b(f,kOe,u),b(f,Pi,u),e(Pi,xh),e(xh,Xle),M(K6,Xle,null),e(Pi,upo),e(Pi,zle),e(zle,bpo),b(f,SOe,u),b(f,Lo,u),M(Z6,Lo,null),e(Lo,vpo),e(Lo,eL),e(eL,Fpo),e(eL,vI),e(vI,Tpo),e(eL,Mpo),e(Lo,Epo),e(Lo,oL),e(oL,Cpo),e(oL,Qle),e(Qle,wpo),e(oL,Apo),e(Lo,Lpo),e(Lo,He),M(rL,He,null),e(He,ypo),e(He,Wle),e(Wle,xpo),e(He,$po),e(He,Ra),e(Ra,kpo),e(Ra,Hle),e(Hle,Spo),e(Ra,Rpo),e(Ra,Ule),e(Ule,Ppo),e(Ra,Bpo),e(Ra,Jle),e(Jle,Npo),e(Ra,Ipo),e(He,qpo),e(He,Y),e(Y,$h),e($h,Yle),e(Yle,jpo),e($h,Dpo),e($h,FI),e(FI,Gpo),e($h,Opo),e(Y,Vpo),e(Y,kh),e(kh,Kle),e(Kle,Xpo),e(kh,zpo),e(kh,TI),e(TI,Qpo),e(kh,Wpo),e(Y,Hpo),e(Y,Sh),e(Sh,Zle),e(Zle,Upo),e(Sh,Jpo),e(Sh,MI),e(MI,Ypo),e(Sh,Kpo),e(Y,Zpo),e(Y,Rh),e(Rh,eie),e(eie,e_o),e(Rh,o_o),e(Rh,EI),e(EI,r_o),e(Rh,t_o),e(Y,a_o),e(Y,Ph),e(Ph,oie),e(oie,n_o),e(Ph,s_o),e(Ph,CI),e(CI,l_o),e(Ph,i_o),e(Y,d_o),e(Y,Bh),e(Bh,rie),e(rie,c_o),e(Bh,f_o),e(Bh,wI),e(wI,m_o),e(Bh,g_o),e(Y,h_o),e(Y,Nh),e(Nh,tie),e(tie,p_o),e(Nh,__o),e(Nh,AI),e(AI,u_o),e(Nh,b_o),e(Y,v_o),e(Y,Ih),e(Ih,aie),e(aie,F_o),e(Ih,T_o),e(Ih,LI),e(LI,M_o),e(Ih,E_o),e(Y,C_o),e(Y,qh),e(qh,nie),e(nie,w_o),e(qh,A_o),e(qh,yI),e(yI,L_o),e(qh,y_o),e(Y,x_o),e(Y,jh),e(jh,sie),e(sie,$_o),e(jh,k_o),e(jh,xI),e(xI,S_o),e(jh,R_o),e(Y,P_o),e(Y,Dh),e(Dh,lie),e(lie,B_o),e(Dh,N_o),e(Dh,$I),e($I,I_o),e(Dh,q_o),e(Y,j_o),e(Y,Gh),e(Gh,iie),e(iie,D_o),e(Gh,G_o),e(Gh,kI),e(kI,O_o),e(Gh,V_o),e(Y,X_o),e(Y,Oh),e(Oh,die),e(die,z_o),e(Oh,Q_o),e(Oh,SI),e(SI,W_o),e(Oh,H_o),e(Y,U_o),e(Y,Vh),e(Vh,cie),e(cie,J_o),e(Vh,Y_o),e(Vh,RI),e(RI,K_o),e(Vh,Z_o),e(Y,euo),e(Y,Xh),e(Xh,fie),e(fie,ouo),e(Xh,ruo),e(Xh,PI),e(PI,tuo),e(Xh,auo),e(Y,nuo),e(Y,zh),e(zh,mie),e(mie,suo),e(zh,luo),e(zh,BI),e(BI,iuo),e(zh,duo),e(Y,cuo),e(Y,Qh),e(Qh,gie),e(gie,fuo),e(Qh,muo),e(Qh,NI),e(NI,guo),e(Qh,huo),e(Y,puo),e(Y,Wh),e(Wh,hie),e(hie,_uo),e(Wh,uuo),e(Wh,II),e(II,buo),e(Wh,vuo),e(Y,Fuo),e(Y,Hh),e(Hh,pie),e(pie,Tuo),e(Hh,Muo),e(Hh,qI),e(qI,Euo),e(Hh,Cuo),e(Y,wuo),e(Y,Uh),e(Uh,_ie),e(_ie,Auo),e(Uh,Luo),e(Uh,jI),e(jI,yuo),e(Uh,xuo),e(Y,$uo),e(Y,Jh),e(Jh,uie),e(uie,kuo),e(Jh,Suo),e(Jh,DI),e(DI,Ruo),e(Jh,Puo),e(Y,Buo),e(Y,Yh),e(Yh,bie),e(bie,Nuo),e(Yh,Iuo),e(Yh,GI),e(GI,quo),e(Yh,juo),e(Y,Duo),e(Y,Kh),e(Kh,vie),e(vie,Guo),e(Kh,Ouo),e(Kh,OI),e(OI,Vuo),e(Kh,Xuo),e(Y,zuo),e(Y,Zh),e(Zh,Fie),e(Fie,Quo),e(Zh,Wuo),e(Zh,VI),e(VI,Huo),e(Zh,Uuo),e(Y,Juo),e(Y,ep),e(ep,Tie),e(Tie,Yuo),e(ep,Kuo),e(ep,XI),e(XI,Zuo),e(ep,e1o),e(Y,o1o),e(Y,op),e(op,Mie),e(Mie,r1o),e(op,t1o),e(op,zI),e(zI,a1o),e(op,n1o),e(Y,s1o),e(Y,rp),e(rp,Eie),e(Eie,l1o),e(rp,i1o),e(rp,QI),e(QI,d1o),e(rp,c1o),e(Y,f1o),e(Y,tp),e(tp,Cie),e(Cie,m1o),e(tp,g1o),e(tp,WI),e(WI,h1o),e(tp,p1o),e(Y,_1o),e(Y,ap),e(ap,wie),e(wie,u1o),e(ap,b1o),e(ap,HI),e(HI,v1o),e(ap,F1o),e(Y,T1o),e(Y,np),e(np,Aie),e(Aie,M1o),e(np,E1o),e(np,UI),e(UI,C1o),e(np,w1o),e(Y,A1o),e(Y,sp),e(sp,Lie),e(Lie,L1o),e(sp,y1o),e(sp,JI),e(JI,x1o),e(sp,$1o),e(Y,k1o),e(Y,lp),e(lp,yie),e(yie,S1o),e(lp,R1o),e(lp,YI),e(YI,P1o),e(lp,B1o),e(Y,N1o),e(Y,ip),e(ip,xie),e(xie,I1o),e(ip,q1o),e(ip,KI),e(KI,j1o),e(ip,D1o),e(He,G1o),M(dp,He,null),e(He,O1o),M(cp,He,null),e(Lo,V1o),e(Lo,fp),M(tL,fp,null),e(fp,X1o),e(fp,$ie),e($ie,z1o),b(f,ROe,u),b(f,Bi,u),e(Bi,mp),e(mp,kie),M(aL,kie,null),e(Bi,Q1o),e(Bi,Sie),e(Sie,W1o),b(f,POe,u),b(f,yo,u),M(nL,yo,null),e(yo,H1o),e(yo,sL),e(sL,U1o),e(sL,ZI),e(ZI,J1o),e(sL,Y1o),e(yo,K1o),e(yo,lL),e(lL,Z1o),e(lL,Rie),e(Rie,e2o),e(lL,o2o),e(yo,r2o),e(yo,Ue),M(iL,Ue,null),e(Ue,t2o),e(Ue,Pie),e(Pie,a2o),e(Ue,n2o),e(Ue,Ni),e(Ni,s2o),e(Ni,Bie),e(Bie,l2o),e(Ni,i2o),e(Ni,Nie),e(Nie,d2o),e(Ni,c2o),e(Ue,f2o),e(Ue,he),e(he,gp),e(gp,Iie),e(Iie,m2o),e(gp,g2o),e(gp,eq),e(eq,h2o),e(gp,p2o),e(he,_2o),e(he,hp),e(hp,qie),e(qie,u2o),e(hp,b2o),e(hp,jie),e(jie,v2o),e(hp,F2o),e(he,T2o),e(he,pp),e(pp,Die),e(Die,M2o),e(pp,E2o),e(pp,oq),e(oq,C2o),e(pp,w2o),e(he,A2o),e(he,_p),e(_p,Gie),e(Gie,L2o),e(_p,y2o),e(_p,rq),e(rq,x2o),e(_p,$2o),e(he,k2o),e(he,up),e(up,Oie),e(Oie,S2o),e(up,R2o),e(up,tq),e(tq,P2o),e(up,B2o),e(he,N2o),e(he,bp),e(bp,Vie),e(Vie,I2o),e(bp,q2o),e(bp,aq),e(aq,j2o),e(bp,D2o),e(he,G2o),e(he,vp),e(vp,Xie),e(Xie,O2o),e(vp,V2o),e(vp,nq),e(nq,X2o),e(vp,z2o),e(he,Q2o),e(he,Fp),e(Fp,zie),e(zie,W2o),e(Fp,H2o),e(Fp,sq),e(sq,U2o),e(Fp,J2o),e(he,Y2o),e(he,Tp),e(Tp,Qie),e(Qie,K2o),e(Tp,Z2o),e(Tp,lq),e(lq,ebo),e(Tp,obo),e(he,rbo),e(he,Mp),e(Mp,Wie),e(Wie,tbo),e(Mp,abo),e(Mp,iq),e(iq,nbo),e(Mp,sbo),e(he,lbo),e(he,Ep),e(Ep,Hie),e(Hie,ibo),e(Ep,dbo),e(Ep,dq),e(dq,cbo),e(Ep,fbo),e(he,mbo),e(he,Cp),e(Cp,Uie),e(Uie,gbo),e(Cp,hbo),e(Cp,cq),e(cq,pbo),e(Cp,_bo),e(he,ubo),e(he,wp),e(wp,Jie),e(Jie,bbo),e(wp,vbo),e(wp,fq),e(fq,Fbo),e(wp,Tbo),e(he,Mbo),e(he,Ap),e(Ap,Yie),e(Yie,Ebo),e(Ap,Cbo),e(Ap,mq),e(mq,wbo),e(Ap,Abo),e(he,Lbo),e(he,Lp),e(Lp,Kie),e(Kie,ybo),e(Lp,xbo),e(Lp,gq),e(gq,$bo),e(Lp,kbo),e(he,Sbo),e(he,yp),e(yp,Zie),e(Zie,Rbo),e(yp,Pbo),e(yp,hq),e(hq,Bbo),e(yp,Nbo),e(he,Ibo),e(he,xp),e(xp,ede),e(ede,qbo),e(xp,jbo),e(xp,pq),e(pq,Dbo),e(xp,Gbo),e(Ue,Obo),M($p,Ue,null),e(Ue,Vbo),M(kp,Ue,null),e(yo,Xbo),e(yo,Sp),M(dL,Sp,null),e(Sp,zbo),e(Sp,ode),e(ode,Qbo),b(f,BOe,u),b(f,Ii,u),e(Ii,Rp),e(Rp,rde),M(cL,rde,null),e(Ii,Wbo),e(Ii,tde),e(tde,Hbo),b(f,NOe,u),b(f,xo,u),M(fL,xo,null),e(xo,Ubo),e(xo,qi),e(qi,Jbo),e(qi,_q),e(_q,Ybo),e(qi,Kbo),e(qi,uq),e(uq,Zbo),e(qi,e4o),e(xo,o4o),e(xo,mL),e(mL,r4o),e(mL,ade),e(ade,t4o),e(mL,a4o),e(xo,n4o),e(xo,st),M(gL,st,null),e(st,s4o),e(st,nde),e(nde,l4o),e(st,i4o),e(st,ji),e(ji,d4o),e(ji,sde),e(sde,c4o),e(ji,f4o),e(ji,bq),e(bq,m4o),e(ji,g4o),e(st,h4o),M(Pp,st,null),e(xo,p4o),e(xo,Je),M(hL,Je,null),e(Je,_4o),e(Je,lde),e(lde,u4o),e(Je,b4o),e(Je,Pa),e(Pa,v4o),e(Pa,ide),e(ide,F4o),e(Pa,T4o),e(Pa,dde),e(dde,M4o),e(Pa,E4o),e(Pa,cde),e(cde,C4o),e(Pa,w4o),e(Je,A4o),e(Je,y),e(y,Bp),e(Bp,fde),e(fde,L4o),e(Bp,y4o),e(Bp,vq),e(vq,x4o),e(Bp,$4o),e(y,k4o),e(y,Np),e(Np,mde),e(mde,S4o),e(Np,R4o),e(Np,Fq),e(Fq,P4o),e(Np,B4o),e(y,N4o),e(y,Ip),e(Ip,gde),e(gde,I4o),e(Ip,q4o),e(Ip,Tq),e(Tq,j4o),e(Ip,D4o),e(y,G4o),e(y,qp),e(qp,hde),e(hde,O4o),e(qp,V4o),e(qp,Mq),e(Mq,X4o),e(qp,z4o),e(y,Q4o),e(y,jp),e(jp,pde),e(pde,W4o),e(jp,H4o),e(jp,Eq),e(Eq,U4o),e(jp,J4o),e(y,Y4o),e(y,Dp),e(Dp,_de),e(_de,K4o),e(Dp,Z4o),e(Dp,Cq),e(Cq,e5o),e(Dp,o5o),e(y,r5o),e(y,Gp),e(Gp,ude),e(ude,t5o),e(Gp,a5o),e(Gp,wq),e(wq,n5o),e(Gp,s5o),e(y,l5o),e(y,Op),e(Op,bde),e(bde,i5o),e(Op,d5o),e(Op,Aq),e(Aq,c5o),e(Op,f5o),e(y,m5o),e(y,Vp),e(Vp,vde),e(vde,g5o),e(Vp,h5o),e(Vp,Lq),e(Lq,p5o),e(Vp,_5o),e(y,u5o),e(y,Xp),e(Xp,Fde),e(Fde,b5o),e(Xp,v5o),e(Xp,yq),e(yq,F5o),e(Xp,T5o),e(y,M5o),e(y,zp),e(zp,Tde),e(Tde,E5o),e(zp,C5o),e(zp,xq),e(xq,w5o),e(zp,A5o),e(y,L5o),e(y,Qp),e(Qp,Mde),e(Mde,y5o),e(Qp,x5o),e(Qp,$q),e($q,$5o),e(Qp,k5o),e(y,S5o),e(y,Wp),e(Wp,Ede),e(Ede,R5o),e(Wp,P5o),e(Wp,kq),e(kq,B5o),e(Wp,N5o),e(y,I5o),e(y,Hp),e(Hp,Cde),e(Cde,q5o),e(Hp,j5o),e(Hp,Sq),e(Sq,D5o),e(Hp,G5o),e(y,O5o),e(y,Up),e(Up,wde),e(wde,V5o),e(Up,X5o),e(Up,Rq),e(Rq,z5o),e(Up,Q5o),e(y,W5o),e(y,Jp),e(Jp,Ade),e(Ade,H5o),e(Jp,U5o),e(Jp,Pq),e(Pq,J5o),e(Jp,Y5o),e(y,K5o),e(y,Yp),e(Yp,Lde),e(Lde,Z5o),e(Yp,evo),e(Yp,Bq),e(Bq,ovo),e(Yp,rvo),e(y,tvo),e(y,Kp),e(Kp,yde),e(yde,avo),e(Kp,nvo),e(Kp,Nq),e(Nq,svo),e(Kp,lvo),e(y,ivo),e(y,Zp),e(Zp,xde),e(xde,dvo),e(Zp,cvo),e(Zp,Iq),e(Iq,fvo),e(Zp,mvo),e(y,gvo),e(y,e_),e(e_,$de),e($de,hvo),e(e_,pvo),e(e_,qq),e(qq,_vo),e(e_,uvo),e(y,bvo),e(y,o_),e(o_,kde),e(kde,vvo),e(o_,Fvo),e(o_,jq),e(jq,Tvo),e(o_,Mvo),e(y,Evo),e(y,r_),e(r_,Sde),e(Sde,Cvo),e(r_,wvo),e(r_,Dq),e(Dq,Avo),e(r_,Lvo),e(y,yvo),e(y,t_),e(t_,Rde),e(Rde,xvo),e(t_,$vo),e(t_,Gq),e(Gq,kvo),e(t_,Svo),e(y,Rvo),e(y,a_),e(a_,Pde),e(Pde,Pvo),e(a_,Bvo),e(a_,Oq),e(Oq,Nvo),e(a_,Ivo),e(y,qvo),e(y,n_),e(n_,Bde),e(Bde,jvo),e(n_,Dvo),e(n_,Vq),e(Vq,Gvo),e(n_,Ovo),e(y,Vvo),e(y,s_),e(s_,Nde),e(Nde,Xvo),e(s_,zvo),e(s_,Xq),e(Xq,Qvo),e(s_,Wvo),e(y,Hvo),e(y,l_),e(l_,Ide),e(Ide,Uvo),e(l_,Jvo),e(l_,zq),e(zq,Yvo),e(l_,Kvo),e(y,Zvo),e(y,i_),e(i_,qde),e(qde,eFo),e(i_,oFo),e(i_,Qq),e(Qq,rFo),e(i_,tFo),e(y,aFo),e(y,d_),e(d_,jde),e(jde,nFo),e(d_,sFo),e(d_,Wq),e(Wq,lFo),e(d_,iFo),e(y,dFo),e(y,c_),e(c_,Dde),e(Dde,cFo),e(c_,fFo),e(c_,Hq),e(Hq,mFo),e(c_,gFo),e(y,hFo),e(y,f_),e(f_,Gde),e(Gde,pFo),e(f_,_Fo),e(f_,Uq),e(Uq,uFo),e(f_,bFo),e(y,vFo),e(y,m_),e(m_,Ode),e(Ode,FFo),e(m_,TFo),e(m_,Jq),e(Jq,MFo),e(m_,EFo),e(y,CFo),e(y,g_),e(g_,Vde),e(Vde,wFo),e(g_,AFo),e(g_,Yq),e(Yq,LFo),e(g_,yFo),e(y,xFo),e(y,h_),e(h_,Xde),e(Xde,$Fo),e(h_,kFo),e(h_,Kq),e(Kq,SFo),e(h_,RFo),e(y,PFo),e(y,Xs),e(Xs,zde),e(zde,BFo),e(Xs,NFo),e(Xs,Zq),e(Zq,IFo),e(Xs,qFo),e(Xs,ej),e(ej,jFo),e(Xs,DFo),e(y,GFo),e(y,p_),e(p_,Qde),e(Qde,OFo),e(p_,VFo),e(p_,oj),e(oj,XFo),e(p_,zFo),e(y,QFo),e(y,__),e(__,Wde),e(Wde,WFo),e(__,HFo),e(__,rj),e(rj,UFo),e(__,JFo),e(y,YFo),e(y,u_),e(u_,Hde),e(Hde,KFo),e(u_,ZFo),e(u_,tj),e(tj,eTo),e(u_,oTo),e(y,rTo),e(y,b_),e(b_,Ude),e(Ude,tTo),e(b_,aTo),e(b_,aj),e(aj,nTo),e(b_,sTo),e(y,lTo),e(y,v_),e(v_,Jde),e(Jde,iTo),e(v_,dTo),e(v_,nj),e(nj,cTo),e(v_,fTo),e(y,mTo),e(y,F_),e(F_,Yde),e(Yde,gTo),e(F_,hTo),e(F_,sj),e(sj,pTo),e(F_,_To),e(y,uTo),e(y,T_),e(T_,Kde),e(Kde,bTo),e(T_,vTo),e(T_,lj),e(lj,FTo),e(T_,TTo),e(y,MTo),e(y,M_),e(M_,Zde),e(Zde,ETo),e(M_,CTo),e(M_,ij),e(ij,wTo),e(M_,ATo),e(y,LTo),e(y,E_),e(E_,ece),e(ece,yTo),e(E_,xTo),e(E_,dj),e(dj,$To),e(E_,kTo),e(y,STo),e(y,C_),e(C_,oce),e(oce,RTo),e(C_,PTo),e(C_,cj),e(cj,BTo),e(C_,NTo),e(y,ITo),e(y,w_),e(w_,rce),e(rce,qTo),e(w_,jTo),e(w_,fj),e(fj,DTo),e(w_,GTo),e(y,OTo),e(y,A_),e(A_,tce),e(tce,VTo),e(A_,XTo),e(A_,mj),e(mj,zTo),e(A_,QTo),e(y,WTo),e(y,L_),e(L_,ace),e(ace,HTo),e(L_,UTo),e(L_,gj),e(gj,JTo),e(L_,YTo),e(y,KTo),e(y,y_),e(y_,nce),e(nce,ZTo),e(y_,e7o),e(y_,hj),e(hj,o7o),e(y_,r7o),e(y,t7o),e(y,x_),e(x_,sce),e(sce,a7o),e(x_,n7o),e(x_,pj),e(pj,s7o),e(x_,l7o),e(y,i7o),e(y,$_),e($_,lce),e(lce,d7o),e($_,c7o),e($_,_j),e(_j,f7o),e($_,m7o),e(y,g7o),e(y,k_),e(k_,ice),e(ice,h7o),e(k_,p7o),e(k_,uj),e(uj,_7o),e(k_,u7o),e(y,b7o),e(y,S_),e(S_,dce),e(dce,v7o),e(S_,F7o),e(S_,bj),e(bj,T7o),e(S_,M7o),e(y,E7o),e(y,R_),e(R_,cce),e(cce,C7o),e(R_,w7o),e(R_,vj),e(vj,A7o),e(R_,L7o),e(y,y7o),e(y,P_),e(P_,fce),e(fce,x7o),e(P_,$7o),e(P_,Fj),e(Fj,k7o),e(P_,S7o),e(y,R7o),e(y,B_),e(B_,mce),e(mce,P7o),e(B_,B7o),e(B_,Tj),e(Tj,N7o),e(B_,I7o),e(y,q7o),e(y,N_),e(N_,gce),e(gce,j7o),e(N_,D7o),e(N_,Mj),e(Mj,G7o),e(N_,O7o),e(y,V7o),e(y,I_),e(I_,hce),e(hce,X7o),e(I_,z7o),e(I_,Ej),e(Ej,Q7o),e(I_,W7o),e(y,H7o),e(y,q_),e(q_,pce),e(pce,U7o),e(q_,J7o),e(q_,Cj),e(Cj,Y7o),e(q_,K7o),e(y,Z7o),e(y,j_),e(j_,_ce),e(_ce,e8o),e(j_,o8o),e(j_,wj),e(wj,r8o),e(j_,t8o),e(y,a8o),e(y,D_),e(D_,uce),e(uce,n8o),e(D_,s8o),e(D_,Aj),e(Aj,l8o),e(D_,i8o),e(y,d8o),e(y,G_),e(G_,bce),e(bce,c8o),e(G_,f8o),e(G_,Lj),e(Lj,m8o),e(G_,g8o),e(y,h8o),e(y,O_),e(O_,vce),e(vce,p8o),e(O_,_8o),e(O_,yj),e(yj,u8o),e(O_,b8o),e(y,v8o),e(y,V_),e(V_,Fce),e(Fce,F8o),e(V_,T8o),e(V_,xj),e(xj,M8o),e(V_,E8o),e(y,C8o),e(y,X_),e(X_,Tce),e(Tce,w8o),e(X_,A8o),e(X_,$j),e($j,L8o),e(X_,y8o),e(y,x8o),e(y,z_),e(z_,Mce),e(Mce,$8o),e(z_,k8o),e(z_,kj),e(kj,S8o),e(z_,R8o),e(y,P8o),e(y,Q_),e(Q_,Ece),e(Ece,B8o),e(Q_,N8o),e(Q_,Sj),e(Sj,I8o),e(Q_,q8o),e(y,j8o),e(y,W_),e(W_,Cce),e(Cce,D8o),e(W_,G8o),e(W_,Rj),e(Rj,O8o),e(W_,V8o),e(y,X8o),e(y,H_),e(H_,wce),e(wce,z8o),e(H_,Q8o),e(H_,Pj),e(Pj,W8o),e(H_,H8o),e(y,U8o),e(y,U_),e(U_,Ace),e(Ace,J8o),e(U_,Y8o),e(U_,Bj),e(Bj,K8o),e(U_,Z8o),e(y,eMo),e(y,J_),e(J_,Lce),e(Lce,oMo),e(J_,rMo),e(J_,Nj),e(Nj,tMo),e(J_,aMo),e(y,nMo),e(y,Y_),e(Y_,yce),e(yce,sMo),e(Y_,lMo),e(Y_,Ij),e(Ij,iMo),e(Y_,dMo),e(y,cMo),e(y,K_),e(K_,xce),e(xce,fMo),e(K_,mMo),e(K_,qj),e(qj,gMo),e(K_,hMo),e(y,pMo),e(y,Z_),e(Z_,$ce),e($ce,_Mo),e(Z_,uMo),e(Z_,jj),e(jj,bMo),e(Z_,vMo),e(y,FMo),e(y,eu),e(eu,kce),e(kce,TMo),e(eu,MMo),e(eu,Dj),e(Dj,EMo),e(eu,CMo),e(y,wMo),e(y,ou),e(ou,Sce),e(Sce,AMo),e(ou,LMo),e(ou,Gj),e(Gj,yMo),e(ou,xMo),e(y,$Mo),e(y,ru),e(ru,Rce),e(Rce,kMo),e(ru,SMo),e(ru,Oj),e(Oj,RMo),e(ru,PMo),e(y,BMo),e(y,tu),e(tu,Pce),e(Pce,NMo),e(tu,IMo),e(tu,Vj),e(Vj,qMo),e(tu,jMo),e(y,DMo),e(y,au),e(au,Bce),e(Bce,GMo),e(au,OMo),e(au,Xj),e(Xj,VMo),e(au,XMo),e(y,zMo),e(y,nu),e(nu,Nce),e(Nce,QMo),e(nu,WMo),e(nu,zj),e(zj,HMo),e(nu,UMo),e(y,JMo),e(y,su),e(su,Ice),e(Ice,YMo),e(su,KMo),e(su,Qj),e(Qj,ZMo),e(su,eEo),e(y,oEo),e(y,lu),e(lu,qce),e(qce,rEo),e(lu,tEo),e(lu,Wj),e(Wj,aEo),e(lu,nEo),e(y,sEo),e(y,iu),e(iu,jce),e(jce,lEo),e(iu,iEo),e(iu,Hj),e(Hj,dEo),e(iu,cEo),e(y,fEo),e(y,du),e(du,Dce),e(Dce,mEo),e(du,gEo),e(du,Uj),e(Uj,hEo),e(du,pEo),e(y,_Eo),e(y,cu),e(cu,Gce),e(Gce,uEo),e(cu,bEo),e(cu,Jj),e(Jj,vEo),e(cu,FEo),e(y,TEo),e(y,fu),e(fu,Oce),e(Oce,MEo),e(fu,EEo),e(fu,Yj),e(Yj,CEo),e(fu,wEo),e(y,AEo),e(y,mu),e(mu,Vce),e(Vce,LEo),e(mu,yEo),e(mu,Kj),e(Kj,xEo),e(mu,$Eo),e(y,kEo),e(y,gu),e(gu,Xce),e(Xce,SEo),e(gu,REo),e(gu,Zj),e(Zj,PEo),e(gu,BEo),e(y,NEo),e(y,hu),e(hu,zce),e(zce,IEo),e(hu,qEo),e(hu,eD),e(eD,jEo),e(hu,DEo),e(y,GEo),e(y,pu),e(pu,Qce),e(Qce,OEo),e(pu,VEo),e(pu,oD),e(oD,XEo),e(pu,zEo),e(y,QEo),e(y,_u),e(_u,Wce),e(Wce,WEo),e(_u,HEo),e(_u,rD),e(rD,UEo),e(_u,JEo),e(y,YEo),e(y,uu),e(uu,Hce),e(Hce,KEo),e(uu,ZEo),e(uu,tD),e(tD,eCo),e(uu,oCo),e(y,rCo),e(y,bu),e(bu,Uce),e(Uce,tCo),e(bu,aCo),e(bu,aD),e(aD,nCo),e(bu,sCo),e(y,lCo),e(y,vu),e(vu,Jce),e(Jce,iCo),e(vu,dCo),e(vu,nD),e(nD,cCo),e(vu,fCo),e(y,mCo),e(y,Fu),e(Fu,Yce),e(Yce,gCo),e(Fu,hCo),e(Fu,sD),e(sD,pCo),e(Fu,_Co),e(y,uCo),e(y,Tu),e(Tu,Kce),e(Kce,bCo),e(Tu,vCo),e(Tu,lD),e(lD,FCo),e(Tu,TCo),e(y,MCo),e(y,Mu),e(Mu,Zce),e(Zce,ECo),e(Mu,CCo),e(Mu,iD),e(iD,wCo),e(Mu,ACo),e(y,LCo),e(y,Eu),e(Eu,efe),e(efe,yCo),e(Eu,xCo),e(Eu,dD),e(dD,$Co),e(Eu,kCo),e(y,SCo),e(y,Cu),e(Cu,ofe),e(ofe,RCo),e(Cu,PCo),e(Cu,cD),e(cD,BCo),e(Cu,NCo),e(y,ICo),e(y,wu),e(wu,rfe),e(rfe,qCo),e(wu,jCo),e(wu,fD),e(fD,DCo),e(wu,GCo),e(y,OCo),e(y,Au),e(Au,tfe),e(tfe,VCo),e(Au,XCo),e(Au,mD),e(mD,zCo),e(Au,QCo),e(y,WCo),e(y,Lu),e(Lu,afe),e(afe,HCo),e(Lu,UCo),e(Lu,gD),e(gD,JCo),e(Lu,YCo),e(y,KCo),e(y,yu),e(yu,nfe),e(nfe,ZCo),e(yu,e3o),e(yu,hD),e(hD,o3o),e(yu,r3o),e(y,t3o),e(y,xu),e(xu,sfe),e(sfe,a3o),e(xu,n3o),e(xu,pD),e(pD,s3o),e(xu,l3o),e(y,i3o),e(y,$u),e($u,lfe),e(lfe,d3o),e($u,c3o),e($u,_D),e(_D,f3o),e($u,m3o),e(y,g3o),e(y,ku),e(ku,ife),e(ife,h3o),e(ku,p3o),e(ku,uD),e(uD,_3o),e(ku,u3o),e(y,b3o),e(y,Su),e(Su,dfe),e(dfe,v3o),e(Su,F3o),e(Su,bD),e(bD,T3o),e(Su,M3o),e(y,E3o),e(y,Ru),e(Ru,cfe),e(cfe,C3o),e(Ru,w3o),e(Ru,vD),e(vD,A3o),e(Ru,L3o),e(y,y3o),e(y,Pu),e(Pu,ffe),e(ffe,x3o),e(Pu,$3o),e(Pu,FD),e(FD,k3o),e(Pu,S3o),e(Je,R3o),e(Je,Bu),e(Bu,P3o),e(Bu,mfe),e(mfe,B3o),e(Bu,N3o),e(Bu,gfe),e(gfe,I3o),e(Je,q3o),M(Nu,Je,null),b(f,IOe,u),b(f,Di,u),e(Di,Iu),e(Iu,hfe),M(pL,hfe,null),e(Di,j3o),e(Di,pfe),e(pfe,D3o),b(f,qOe,u),b(f,$o,u),M(_L,$o,null),e($o,G3o),e($o,Gi),e(Gi,O3o),e(Gi,TD),e(TD,V3o),e(Gi,X3o),e(Gi,MD),e(MD,z3o),e(Gi,Q3o),e($o,W3o),e($o,uL),e(uL,H3o),e(uL,_fe),e(_fe,U3o),e(uL,J3o),e($o,Y3o),e($o,lt),M(bL,lt,null),e(lt,K3o),e(lt,ufe),e(ufe,Z3o),e(lt,e0o),e(lt,Oi),e(Oi,o0o),e(Oi,bfe),e(bfe,r0o),e(Oi,t0o),e(Oi,ED),e(ED,a0o),e(Oi,n0o),e(lt,s0o),M(qu,lt,null),e($o,l0o),e($o,Ye),M(vL,Ye,null),e(Ye,i0o),e(Ye,vfe),e(vfe,d0o),e(Ye,c0o),e(Ye,Ba),e(Ba,f0o),e(Ba,Ffe),e(Ffe,m0o),e(Ba,g0o),e(Ba,Tfe),e(Tfe,h0o),e(Ba,p0o),e(Ba,Mfe),e(Mfe,_0o),e(Ba,u0o),e(Ye,b0o),e(Ye,G),e(G,ju),e(ju,Efe),e(Efe,v0o),e(ju,F0o),e(ju,CD),e(CD,T0o),e(ju,M0o),e(G,E0o),e(G,Du),e(Du,Cfe),e(Cfe,C0o),e(Du,w0o),e(Du,wD),e(wD,A0o),e(Du,L0o),e(G,y0o),e(G,Gu),e(Gu,wfe),e(wfe,x0o),e(Gu,$0o),e(Gu,AD),e(AD,k0o),e(Gu,S0o),e(G,R0o),e(G,Ou),e(Ou,Afe),e(Afe,P0o),e(Ou,B0o),e(Ou,LD),e(LD,N0o),e(Ou,I0o),e(G,q0o),e(G,Vu),e(Vu,Lfe),e(Lfe,j0o),e(Vu,D0o),e(Vu,yD),e(yD,G0o),e(Vu,O0o),e(G,V0o),e(G,Xu),e(Xu,yfe),e(yfe,X0o),e(Xu,z0o),e(Xu,xD),e(xD,Q0o),e(Xu,W0o),e(G,H0o),e(G,zu),e(zu,xfe),e(xfe,U0o),e(zu,J0o),e(zu,$D),e($D,Y0o),e(zu,K0o),e(G,Z0o),e(G,Qu),e(Qu,$fe),e($fe,ewo),e(Qu,owo),e(Qu,kD),e(kD,rwo),e(Qu,two),e(G,awo),e(G,Wu),e(Wu,kfe),e(kfe,nwo),e(Wu,swo),e(Wu,SD),e(SD,lwo),e(Wu,iwo),e(G,dwo),e(G,Hu),e(Hu,Sfe),e(Sfe,cwo),e(Hu,fwo),e(Hu,RD),e(RD,mwo),e(Hu,gwo),e(G,hwo),e(G,Uu),e(Uu,Rfe),e(Rfe,pwo),e(Uu,_wo),e(Uu,PD),e(PD,uwo),e(Uu,bwo),e(G,vwo),e(G,Ju),e(Ju,Pfe),e(Pfe,Fwo),e(Ju,Two),e(Ju,BD),e(BD,Mwo),e(Ju,Ewo),e(G,Cwo),e(G,Yu),e(Yu,Bfe),e(Bfe,wwo),e(Yu,Awo),e(Yu,ND),e(ND,Lwo),e(Yu,ywo),e(G,xwo),e(G,Ku),e(Ku,Nfe),e(Nfe,$wo),e(Ku,kwo),e(Ku,ID),e(ID,Swo),e(Ku,Rwo),e(G,Pwo),e(G,Zu),e(Zu,Ife),e(Ife,Bwo),e(Zu,Nwo),e(Zu,qD),e(qD,Iwo),e(Zu,qwo),e(G,jwo),e(G,e1),e(e1,qfe),e(qfe,Dwo),e(e1,Gwo),e(e1,jD),e(jD,Owo),e(e1,Vwo),e(G,Xwo),e(G,o1),e(o1,jfe),e(jfe,zwo),e(o1,Qwo),e(o1,DD),e(DD,Wwo),e(o1,Hwo),e(G,Uwo),e(G,r1),e(r1,Dfe),e(Dfe,Jwo),e(r1,Ywo),e(r1,GD),e(GD,Kwo),e(r1,Zwo),e(G,eAo),e(G,t1),e(t1,Gfe),e(Gfe,oAo),e(t1,rAo),e(t1,OD),e(OD,tAo),e(t1,aAo),e(G,nAo),e(G,a1),e(a1,Ofe),e(Ofe,sAo),e(a1,lAo),e(a1,VD),e(VD,iAo),e(a1,dAo),e(G,cAo),e(G,n1),e(n1,Vfe),e(Vfe,fAo),e(n1,mAo),e(n1,XD),e(XD,gAo),e(n1,hAo),e(G,pAo),e(G,s1),e(s1,Xfe),e(Xfe,_Ao),e(s1,uAo),e(s1,zD),e(zD,bAo),e(s1,vAo),e(G,FAo),e(G,l1),e(l1,zfe),e(zfe,TAo),e(l1,MAo),e(l1,QD),e(QD,EAo),e(l1,CAo),e(G,wAo),e(G,i1),e(i1,Qfe),e(Qfe,AAo),e(i1,LAo),e(i1,WD),e(WD,yAo),e(i1,xAo),e(G,$Ao),e(G,d1),e(d1,Wfe),e(Wfe,kAo),e(d1,SAo),e(d1,HD),e(HD,RAo),e(d1,PAo),e(G,BAo),e(G,c1),e(c1,Hfe),e(Hfe,NAo),e(c1,IAo),e(c1,UD),e(UD,qAo),e(c1,jAo),e(G,DAo),e(G,f1),e(f1,Ufe),e(Ufe,GAo),e(f1,OAo),e(f1,JD),e(JD,VAo),e(f1,XAo),e(G,zAo),e(G,m1),e(m1,Jfe),e(Jfe,QAo),e(m1,WAo),e(m1,YD),e(YD,HAo),e(m1,UAo),e(G,JAo),e(G,g1),e(g1,Yfe),e(Yfe,YAo),e(g1,KAo),e(g1,KD),e(KD,ZAo),e(g1,e6o),e(G,o6o),e(G,h1),e(h1,Kfe),e(Kfe,r6o),e(h1,t6o),e(h1,ZD),e(ZD,a6o),e(h1,n6o),e(G,s6o),e(G,p1),e(p1,Zfe),e(Zfe,l6o),e(p1,i6o),e(p1,eG),e(eG,d6o),e(p1,c6o),e(G,f6o),e(G,_1),e(_1,eme),e(eme,m6o),e(_1,g6o),e(_1,oG),e(oG,h6o),e(_1,p6o),e(G,_6o),e(G,u1),e(u1,ome),e(ome,u6o),e(u1,b6o),e(u1,rG),e(rG,v6o),e(u1,F6o),e(G,T6o),e(G,b1),e(b1,rme),e(rme,M6o),e(b1,E6o),e(b1,tG),e(tG,C6o),e(b1,w6o),e(G,A6o),e(G,v1),e(v1,tme),e(tme,L6o),e(v1,y6o),e(v1,aG),e(aG,x6o),e(v1,$6o),e(G,k6o),e(G,F1),e(F1,ame),e(ame,S6o),e(F1,R6o),e(F1,nG),e(nG,P6o),e(F1,B6o),e(G,N6o),e(G,T1),e(T1,nme),e(nme,I6o),e(T1,q6o),e(T1,sG),e(sG,j6o),e(T1,D6o),e(G,G6o),e(G,M1),e(M1,sme),e(sme,O6o),e(M1,V6o),e(M1,lG),e(lG,X6o),e(M1,z6o),e(G,Q6o),e(G,E1),e(E1,lme),e(lme,W6o),e(E1,H6o),e(E1,iG),e(iG,U6o),e(E1,J6o),e(G,Y6o),e(G,C1),e(C1,ime),e(ime,K6o),e(C1,Z6o),e(C1,dG),e(dG,eLo),e(C1,oLo),e(G,rLo),e(G,w1),e(w1,dme),e(dme,tLo),e(w1,aLo),e(w1,cG),e(cG,nLo),e(w1,sLo),e(G,lLo),e(G,A1),e(A1,cme),e(cme,iLo),e(A1,dLo),e(A1,fG),e(fG,cLo),e(A1,fLo),e(G,mLo),e(G,L1),e(L1,fme),e(fme,gLo),e(L1,hLo),e(L1,mG),e(mG,pLo),e(L1,_Lo),e(G,uLo),e(G,y1),e(y1,mme),e(mme,bLo),e(y1,vLo),e(y1,gG),e(gG,FLo),e(y1,TLo),e(Ye,MLo),e(Ye,x1),e(x1,ELo),e(x1,gme),e(gme,CLo),e(x1,wLo),e(x1,hme),e(hme,ALo),e(Ye,LLo),M($1,Ye,null),b(f,jOe,u),b(f,Vi,u),e(Vi,k1),e(k1,pme),M(FL,pme,null),e(Vi,yLo),e(Vi,_me),e(_me,xLo),b(f,DOe,u),b(f,ko,u),M(TL,ko,null),e(ko,$Lo),e(ko,Xi),e(Xi,kLo),e(Xi,hG),e(hG,SLo),e(Xi,RLo),e(Xi,pG),e(pG,PLo),e(Xi,BLo),e(ko,NLo),e(ko,ML),e(ML,ILo),e(ML,ume),e(ume,qLo),e(ML,jLo),e(ko,DLo),e(ko,it),M(EL,it,null),e(it,GLo),e(it,bme),e(bme,OLo),e(it,VLo),e(it,zi),e(zi,XLo),e(zi,vme),e(vme,zLo),e(zi,QLo),e(zi,_G),e(_G,WLo),e(zi,HLo),e(it,ULo),M(S1,it,null),e(ko,JLo),e(ko,Ke),M(CL,Ke,null),e(Ke,YLo),e(Ke,Fme),e(Fme,KLo),e(Ke,ZLo),e(Ke,Na),e(Na,eyo),e(Na,Tme),e(Tme,oyo),e(Na,ryo),e(Na,Mme),e(Mme,tyo),e(Na,ayo),e(Na,Eme),e(Eme,nyo),e(Na,syo),e(Ke,lyo),e(Ke,z),e(z,R1),e(R1,Cme),e(Cme,iyo),e(R1,dyo),e(R1,uG),e(uG,cyo),e(R1,fyo),e(z,myo),e(z,P1),e(P1,wme),e(wme,gyo),e(P1,hyo),e(P1,bG),e(bG,pyo),e(P1,_yo),e(z,uyo),e(z,B1),e(B1,Ame),e(Ame,byo),e(B1,vyo),e(B1,vG),e(vG,Fyo),e(B1,Tyo),e(z,Myo),e(z,N1),e(N1,Lme),e(Lme,Eyo),e(N1,Cyo),e(N1,FG),e(FG,wyo),e(N1,Ayo),e(z,Lyo),e(z,I1),e(I1,yme),e(yme,yyo),e(I1,xyo),e(I1,TG),e(TG,$yo),e(I1,kyo),e(z,Syo),e(z,q1),e(q1,xme),e(xme,Ryo),e(q1,Pyo),e(q1,MG),e(MG,Byo),e(q1,Nyo),e(z,Iyo),e(z,j1),e(j1,$me),e($me,qyo),e(j1,jyo),e(j1,EG),e(EG,Dyo),e(j1,Gyo),e(z,Oyo),e(z,D1),e(D1,kme),e(kme,Vyo),e(D1,Xyo),e(D1,CG),e(CG,zyo),e(D1,Qyo),e(z,Wyo),e(z,G1),e(G1,Sme),e(Sme,Hyo),e(G1,Uyo),e(G1,wG),e(wG,Jyo),e(G1,Yyo),e(z,Kyo),e(z,O1),e(O1,Rme),e(Rme,Zyo),e(O1,e9o),e(O1,AG),e(AG,o9o),e(O1,r9o),e(z,t9o),e(z,V1),e(V1,Pme),e(Pme,a9o),e(V1,n9o),e(V1,LG),e(LG,s9o),e(V1,l9o),e(z,i9o),e(z,X1),e(X1,Bme),e(Bme,d9o),e(X1,c9o),e(X1,yG),e(yG,f9o),e(X1,m9o),e(z,g9o),e(z,z1),e(z1,Nme),e(Nme,h9o),e(z1,p9o),e(z1,xG),e(xG,_9o),e(z1,u9o),e(z,b9o),e(z,Q1),e(Q1,Ime),e(Ime,v9o),e(Q1,F9o),e(Q1,$G),e($G,T9o),e(Q1,M9o),e(z,E9o),e(z,W1),e(W1,qme),e(qme,C9o),e(W1,w9o),e(W1,kG),e(kG,A9o),e(W1,L9o),e(z,y9o),e(z,H1),e(H1,jme),e(jme,x9o),e(H1,$9o),e(H1,SG),e(SG,k9o),e(H1,S9o),e(z,R9o),e(z,U1),e(U1,Dme),e(Dme,P9o),e(U1,B9o),e(U1,RG),e(RG,N9o),e(U1,I9o),e(z,q9o),e(z,J1),e(J1,Gme),e(Gme,j9o),e(J1,D9o),e(J1,PG),e(PG,G9o),e(J1,O9o),e(z,V9o),e(z,Y1),e(Y1,Ome),e(Ome,X9o),e(Y1,z9o),e(Y1,BG),e(BG,Q9o),e(Y1,W9o),e(z,H9o),e(z,K1),e(K1,Vme),e(Vme,U9o),e(K1,J9o),e(K1,NG),e(NG,Y9o),e(K1,K9o),e(z,Z9o),e(z,Z1),e(Z1,Xme),e(Xme,exo),e(Z1,oxo),e(Z1,IG),e(IG,rxo),e(Z1,txo),e(z,axo),e(z,e2),e(e2,zme),e(zme,nxo),e(e2,sxo),e(e2,qG),e(qG,lxo),e(e2,ixo),e(z,dxo),e(z,o2),e(o2,Qme),e(Qme,cxo),e(o2,fxo),e(o2,jG),e(jG,mxo),e(o2,gxo),e(z,hxo),e(z,r2),e(r2,Wme),e(Wme,pxo),e(r2,_xo),e(r2,DG),e(DG,uxo),e(r2,bxo),e(z,vxo),e(z,t2),e(t2,Hme),e(Hme,Fxo),e(t2,Txo),e(t2,GG),e(GG,Mxo),e(t2,Exo),e(z,Cxo),e(z,a2),e(a2,Ume),e(Ume,wxo),e(a2,Axo),e(a2,OG),e(OG,Lxo),e(a2,yxo),e(z,xxo),e(z,n2),e(n2,Jme),e(Jme,$xo),e(n2,kxo),e(n2,VG),e(VG,Sxo),e(n2,Rxo),e(z,Pxo),e(z,s2),e(s2,Yme),e(Yme,Bxo),e(s2,Nxo),e(s2,XG),e(XG,Ixo),e(s2,qxo),e(z,jxo),e(z,l2),e(l2,Kme),e(Kme,Dxo),e(l2,Gxo),e(l2,zG),e(zG,Oxo),e(l2,Vxo),e(z,Xxo),e(z,i2),e(i2,Zme),e(Zme,zxo),e(i2,Qxo),e(i2,QG),e(QG,Wxo),e(i2,Hxo),e(z,Uxo),e(z,d2),e(d2,ege),e(ege,Jxo),e(d2,Yxo),e(d2,WG),e(WG,Kxo),e(d2,Zxo),e(z,e$o),e(z,c2),e(c2,oge),e(oge,o$o),e(c2,r$o),e(c2,HG),e(HG,t$o),e(c2,a$o),e(z,n$o),e(z,f2),e(f2,rge),e(rge,s$o),e(f2,l$o),e(f2,UG),e(UG,i$o),e(f2,d$o),e(z,c$o),e(z,m2),e(m2,tge),e(tge,f$o),e(m2,m$o),e(m2,JG),e(JG,g$o),e(m2,h$o),e(z,p$o),e(z,g2),e(g2,age),e(age,_$o),e(g2,u$o),e(g2,YG),e(YG,b$o),e(g2,v$o),e(z,F$o),e(z,h2),e(h2,nge),e(nge,T$o),e(h2,M$o),e(h2,KG),e(KG,E$o),e(h2,C$o),e(z,w$o),e(z,p2),e(p2,sge),e(sge,A$o),e(p2,L$o),e(p2,ZG),e(ZG,y$o),e(p2,x$o),e(z,$$o),e(z,_2),e(_2,lge),e(lge,k$o),e(_2,S$o),e(_2,eO),e(eO,R$o),e(_2,P$o),e(z,B$o),e(z,u2),e(u2,ige),e(ige,N$o),e(u2,I$o),e(u2,oO),e(oO,q$o),e(u2,j$o),e(Ke,D$o),e(Ke,b2),e(b2,G$o),e(b2,dge),e(dge,O$o),e(b2,V$o),e(b2,cge),e(cge,X$o),e(Ke,z$o),M(v2,Ke,null),b(f,GOe,u),b(f,Qi,u),e(Qi,F2),e(F2,fge),M(wL,fge,null),e(Qi,Q$o),e(Qi,mge),e(mge,W$o),b(f,OOe,u),b(f,So,u),M(AL,So,null),e(So,H$o),e(So,Wi),e(Wi,U$o),e(Wi,rO),e(rO,J$o),e(Wi,Y$o),e(Wi,tO),e(tO,K$o),e(Wi,Z$o),e(So,eko),e(So,LL),e(LL,oko),e(LL,gge),e(gge,rko),e(LL,tko),e(So,ako),e(So,dt),M(yL,dt,null),e(dt,nko),e(dt,hge),e(hge,sko),e(dt,lko),e(dt,Hi),e(Hi,iko),e(Hi,pge),e(pge,dko),e(Hi,cko),e(Hi,aO),e(aO,fko),e(Hi,mko),e(dt,gko),M(T2,dt,null),e(So,hko),e(So,Ze),M(xL,Ze,null),e(Ze,pko),e(Ze,_ge),e(_ge,_ko),e(Ze,uko),e(Ze,Ia),e(Ia,bko),e(Ia,uge),e(uge,vko),e(Ia,Fko),e(Ia,bge),e(bge,Tko),e(Ia,Mko),e(Ia,vge),e(vge,Eko),e(Ia,Cko),e(Ze,wko),e(Ze,W),e(W,M2),e(M2,Fge),e(Fge,Ako),e(M2,Lko),e(M2,nO),e(nO,yko),e(M2,xko),e(W,$ko),e(W,E2),e(E2,Tge),e(Tge,kko),e(E2,Sko),e(E2,sO),e(sO,Rko),e(E2,Pko),e(W,Bko),e(W,C2),e(C2,Mge),e(Mge,Nko),e(C2,Iko),e(C2,lO),e(lO,qko),e(C2,jko),e(W,Dko),e(W,w2),e(w2,Ege),e(Ege,Gko),e(w2,Oko),e(w2,iO),e(iO,Vko),e(w2,Xko),e(W,zko),e(W,A2),e(A2,Cge),e(Cge,Qko),e(A2,Wko),e(A2,dO),e(dO,Hko),e(A2,Uko),e(W,Jko),e(W,L2),e(L2,wge),e(wge,Yko),e(L2,Kko),e(L2,cO),e(cO,Zko),e(L2,eSo),e(W,oSo),e(W,y2),e(y2,Age),e(Age,rSo),e(y2,tSo),e(y2,fO),e(fO,aSo),e(y2,nSo),e(W,sSo),e(W,x2),e(x2,Lge),e(Lge,lSo),e(x2,iSo),e(x2,mO),e(mO,dSo),e(x2,cSo),e(W,fSo),e(W,$2),e($2,yge),e(yge,mSo),e($2,gSo),e($2,gO),e(gO,hSo),e($2,pSo),e(W,_So),e(W,k2),e(k2,xge),e(xge,uSo),e(k2,bSo),e(k2,hO),e(hO,vSo),e(k2,FSo),e(W,TSo),e(W,S2),e(S2,$ge),e($ge,MSo),e(S2,ESo),e(S2,pO),e(pO,CSo),e(S2,wSo),e(W,ASo),e(W,R2),e(R2,kge),e(kge,LSo),e(R2,ySo),e(R2,_O),e(_O,xSo),e(R2,$So),e(W,kSo),e(W,P2),e(P2,Sge),e(Sge,SSo),e(P2,RSo),e(P2,uO),e(uO,PSo),e(P2,BSo),e(W,NSo),e(W,B2),e(B2,Rge),e(Rge,ISo),e(B2,qSo),e(B2,bO),e(bO,jSo),e(B2,DSo),e(W,GSo),e(W,N2),e(N2,Pge),e(Pge,OSo),e(N2,VSo),e(N2,vO),e(vO,XSo),e(N2,zSo),e(W,QSo),e(W,I2),e(I2,Bge),e(Bge,WSo),e(I2,HSo),e(I2,FO),e(FO,USo),e(I2,JSo),e(W,YSo),e(W,q2),e(q2,Nge),e(Nge,KSo),e(q2,ZSo),e(q2,TO),e(TO,eRo),e(q2,oRo),e(W,rRo),e(W,j2),e(j2,Ige),e(Ige,tRo),e(j2,aRo),e(j2,MO),e(MO,nRo),e(j2,sRo),e(W,lRo),e(W,D2),e(D2,qge),e(qge,iRo),e(D2,dRo),e(D2,EO),e(EO,cRo),e(D2,fRo),e(W,mRo),e(W,G2),e(G2,jge),e(jge,gRo),e(G2,hRo),e(G2,CO),e(CO,pRo),e(G2,_Ro),e(W,uRo),e(W,O2),e(O2,Dge),e(Dge,bRo),e(O2,vRo),e(O2,wO),e(wO,FRo),e(O2,TRo),e(W,MRo),e(W,V2),e(V2,Gge),e(Gge,ERo),e(V2,CRo),e(V2,AO),e(AO,wRo),e(V2,ARo),e(W,LRo),e(W,X2),e(X2,Oge),e(Oge,yRo),e(X2,xRo),e(X2,LO),e(LO,$Ro),e(X2,kRo),e(W,SRo),e(W,z2),e(z2,Vge),e(Vge,RRo),e(z2,PRo),e(z2,yO),e(yO,BRo),e(z2,NRo),e(W,IRo),e(W,Q2),e(Q2,Xge),e(Xge,qRo),e(Q2,jRo),e(Q2,xO),e(xO,DRo),e(Q2,GRo),e(W,ORo),e(W,W2),e(W2,zge),e(zge,VRo),e(W2,XRo),e(W2,$O),e($O,zRo),e(W2,QRo),e(W,WRo),e(W,H2),e(H2,Qge),e(Qge,HRo),e(H2,URo),e(H2,kO),e(kO,JRo),e(H2,YRo),e(W,KRo),e(W,U2),e(U2,Wge),e(Wge,ZRo),e(U2,ePo),e(U2,SO),e(SO,oPo),e(U2,rPo),e(W,tPo),e(W,J2),e(J2,Hge),e(Hge,aPo),e(J2,nPo),e(J2,RO),e(RO,sPo),e(J2,lPo),e(W,iPo),e(W,Y2),e(Y2,Uge),e(Uge,dPo),e(Y2,cPo),e(Y2,PO),e(PO,fPo),e(Y2,mPo),e(W,gPo),e(W,K2),e(K2,Jge),e(Jge,hPo),e(K2,pPo),e(K2,BO),e(BO,_Po),e(K2,uPo),e(W,bPo),e(W,Z2),e(Z2,Yge),e(Yge,vPo),e(Z2,FPo),e(Z2,NO),e(NO,TPo),e(Z2,MPo),e(W,EPo),e(W,eb),e(eb,Kge),e(Kge,CPo),e(eb,wPo),e(eb,Zge),e(Zge,APo),e(eb,LPo),e(W,yPo),e(W,ob),e(ob,ehe),e(ehe,xPo),e(ob,$Po),e(ob,IO),e(IO,kPo),e(ob,SPo),e(W,RPo),e(W,rb),e(rb,ohe),e(ohe,PPo),e(rb,BPo),e(rb,qO),e(qO,NPo),e(rb,IPo),e(W,qPo),e(W,tb),e(tb,rhe),e(rhe,jPo),e(tb,DPo),e(tb,jO),e(jO,GPo),e(tb,OPo),e(W,VPo),e(W,ab),e(ab,the),e(the,XPo),e(ab,zPo),e(ab,DO),e(DO,QPo),e(ab,WPo),e(Ze,HPo),e(Ze,nb),e(nb,UPo),e(nb,ahe),e(ahe,JPo),e(nb,YPo),e(nb,nhe),e(nhe,KPo),e(Ze,ZPo),M(sb,Ze,null),b(f,VOe,u),b(f,Ui,u),e(Ui,lb),e(lb,she),M($L,she,null),e(Ui,eBo),e(Ui,lhe),e(lhe,oBo),b(f,XOe,u),b(f,Ro,u),M(kL,Ro,null),e(Ro,rBo),e(Ro,Ji),e(Ji,tBo),e(Ji,GO),e(GO,aBo),e(Ji,nBo),e(Ji,OO),e(OO,sBo),e(Ji,lBo),e(Ro,iBo),e(Ro,SL),e(SL,dBo),e(SL,ihe),e(ihe,cBo),e(SL,fBo),e(Ro,mBo),e(Ro,ct),M(RL,ct,null),e(ct,gBo),e(ct,dhe),e(dhe,hBo),e(ct,pBo),e(ct,Yi),e(Yi,_Bo),e(Yi,che),e(che,uBo),e(Yi,bBo),e(Yi,VO),e(VO,vBo),e(Yi,FBo),e(ct,TBo),M(ib,ct,null),e(Ro,MBo),e(Ro,eo),M(PL,eo,null),e(eo,EBo),e(eo,fhe),e(fhe,CBo),e(eo,wBo),e(eo,qa),e(qa,ABo),e(qa,mhe),e(mhe,LBo),e(qa,yBo),e(qa,ghe),e(ghe,xBo),e(qa,$Bo),e(qa,hhe),e(hhe,kBo),e(qa,SBo),e(eo,RBo),e(eo,pe),e(pe,db),e(db,phe),e(phe,PBo),e(db,BBo),e(db,XO),e(XO,NBo),e(db,IBo),e(pe,qBo),e(pe,cb),e(cb,_he),e(_he,jBo),e(cb,DBo),e(cb,zO),e(zO,GBo),e(cb,OBo),e(pe,VBo),e(pe,fb),e(fb,uhe),e(uhe,XBo),e(fb,zBo),e(fb,QO),e(QO,QBo),e(fb,WBo),e(pe,HBo),e(pe,mb),e(mb,bhe),e(bhe,UBo),e(mb,JBo),e(mb,WO),e(WO,YBo),e(mb,KBo),e(pe,ZBo),e(pe,gb),e(gb,vhe),e(vhe,eNo),e(gb,oNo),e(gb,HO),e(HO,rNo),e(gb,tNo),e(pe,aNo),e(pe,hb),e(hb,Fhe),e(Fhe,nNo),e(hb,sNo),e(hb,UO),e(UO,lNo),e(hb,iNo),e(pe,dNo),e(pe,pb),e(pb,The),e(The,cNo),e(pb,fNo),e(pb,JO),e(JO,mNo),e(pb,gNo),e(pe,hNo),e(pe,_b),e(_b,Mhe),e(Mhe,pNo),e(_b,_No),e(_b,YO),e(YO,uNo),e(_b,bNo),e(pe,vNo),e(pe,ub),e(ub,Ehe),e(Ehe,FNo),e(ub,TNo),e(ub,KO),e(KO,MNo),e(ub,ENo),e(pe,CNo),e(pe,bb),e(bb,Che),e(Che,wNo),e(bb,ANo),e(bb,ZO),e(ZO,LNo),e(bb,yNo),e(pe,xNo),e(pe,vb),e(vb,whe),e(whe,$No),e(vb,kNo),e(vb,eV),e(eV,SNo),e(vb,RNo),e(pe,PNo),e(pe,Fb),e(Fb,Ahe),e(Ahe,BNo),e(Fb,NNo),e(Fb,oV),e(oV,INo),e(Fb,qNo),e(pe,jNo),e(pe,Tb),e(Tb,Lhe),e(Lhe,DNo),e(Tb,GNo),e(Tb,rV),e(rV,ONo),e(Tb,VNo),e(pe,XNo),e(pe,Mb),e(Mb,yhe),e(yhe,zNo),e(Mb,QNo),e(Mb,tV),e(tV,WNo),e(Mb,HNo),e(pe,UNo),e(pe,Eb),e(Eb,xhe),e(xhe,JNo),e(Eb,YNo),e(Eb,aV),e(aV,KNo),e(Eb,ZNo),e(pe,eIo),e(pe,Cb),e(Cb,$he),e($he,oIo),e(Cb,rIo),e(Cb,nV),e(nV,tIo),e(Cb,aIo),e(pe,nIo),e(pe,wb),e(wb,khe),e(khe,sIo),e(wb,lIo),e(wb,sV),e(sV,iIo),e(wb,dIo),e(eo,cIo),e(eo,Ab),e(Ab,fIo),e(Ab,She),e(She,mIo),e(Ab,gIo),e(Ab,Rhe),e(Rhe,hIo),e(eo,pIo),M(Lb,eo,null),b(f,zOe,u),b(f,Ki,u),e(Ki,yb),e(yb,Phe),M(BL,Phe,null),e(Ki,_Io),e(Ki,Bhe),e(Bhe,uIo),b(f,QOe,u),b(f,Po,u),M(NL,Po,null),e(Po,bIo),e(Po,Zi),e(Zi,vIo),e(Zi,lV),e(lV,FIo),e(Zi,TIo),e(Zi,iV),e(iV,MIo),e(Zi,EIo),e(Po,CIo),e(Po,IL),e(IL,wIo),e(IL,Nhe),e(Nhe,AIo),e(IL,LIo),e(Po,yIo),e(Po,ft),M(qL,ft,null),e(ft,xIo),e(ft,Ihe),e(Ihe,$Io),e(ft,kIo),e(ft,ed),e(ed,SIo),e(ed,qhe),e(qhe,RIo),e(ed,PIo),e(ed,dV),e(dV,BIo),e(ed,NIo),e(ft,IIo),M(xb,ft,null),e(Po,qIo),e(Po,oo),M(jL,oo,null),e(oo,jIo),e(oo,jhe),e(jhe,DIo),e(oo,GIo),e(oo,ja),e(ja,OIo),e(ja,Dhe),e(Dhe,VIo),e(ja,XIo),e(ja,Ghe),e(Ghe,zIo),e(ja,QIo),e(ja,Ohe),e(Ohe,WIo),e(ja,HIo),e(oo,UIo),e(oo,I),e(I,$b),e($b,Vhe),e(Vhe,JIo),e($b,YIo),e($b,cV),e(cV,KIo),e($b,ZIo),e(I,eqo),e(I,kb),e(kb,Xhe),e(Xhe,oqo),e(kb,rqo),e(kb,fV),e(fV,tqo),e(kb,aqo),e(I,nqo),e(I,Sb),e(Sb,zhe),e(zhe,sqo),e(Sb,lqo),e(Sb,mV),e(mV,iqo),e(Sb,dqo),e(I,cqo),e(I,Rb),e(Rb,Qhe),e(Qhe,fqo),e(Rb,mqo),e(Rb,gV),e(gV,gqo),e(Rb,hqo),e(I,pqo),e(I,Pb),e(Pb,Whe),e(Whe,_qo),e(Pb,uqo),e(Pb,hV),e(hV,bqo),e(Pb,vqo),e(I,Fqo),e(I,Bb),e(Bb,Hhe),e(Hhe,Tqo),e(Bb,Mqo),e(Bb,pV),e(pV,Eqo),e(Bb,Cqo),e(I,wqo),e(I,Nb),e(Nb,Uhe),e(Uhe,Aqo),e(Nb,Lqo),e(Nb,_V),e(_V,yqo),e(Nb,xqo),e(I,$qo),e(I,Ib),e(Ib,Jhe),e(Jhe,kqo),e(Ib,Sqo),e(Ib,uV),e(uV,Rqo),e(Ib,Pqo),e(I,Bqo),e(I,qb),e(qb,Yhe),e(Yhe,Nqo),e(qb,Iqo),e(qb,bV),e(bV,qqo),e(qb,jqo),e(I,Dqo),e(I,jb),e(jb,Khe),e(Khe,Gqo),e(jb,Oqo),e(jb,vV),e(vV,Vqo),e(jb,Xqo),e(I,zqo),e(I,Db),e(Db,Zhe),e(Zhe,Qqo),e(Db,Wqo),e(Db,FV),e(FV,Hqo),e(Db,Uqo),e(I,Jqo),e(I,Gb),e(Gb,epe),e(epe,Yqo),e(Gb,Kqo),e(Gb,TV),e(TV,Zqo),e(Gb,ejo),e(I,ojo),e(I,Ob),e(Ob,ope),e(ope,rjo),e(Ob,tjo),e(Ob,MV),e(MV,ajo),e(Ob,njo),e(I,sjo),e(I,Vb),e(Vb,rpe),e(rpe,ljo),e(Vb,ijo),e(Vb,EV),e(EV,djo),e(Vb,cjo),e(I,fjo),e(I,Xb),e(Xb,tpe),e(tpe,mjo),e(Xb,gjo),e(Xb,CV),e(CV,hjo),e(Xb,pjo),e(I,_jo),e(I,zb),e(zb,ape),e(ape,ujo),e(zb,bjo),e(zb,wV),e(wV,vjo),e(zb,Fjo),e(I,Tjo),e(I,Qb),e(Qb,npe),e(npe,Mjo),e(Qb,Ejo),e(Qb,AV),e(AV,Cjo),e(Qb,wjo),e(I,Ajo),e(I,Wb),e(Wb,spe),e(spe,Ljo),e(Wb,yjo),e(Wb,LV),e(LV,xjo),e(Wb,$jo),e(I,kjo),e(I,Hb),e(Hb,lpe),e(lpe,Sjo),e(Hb,Rjo),e(Hb,yV),e(yV,Pjo),e(Hb,Bjo),e(I,Njo),e(I,Ub),e(Ub,ipe),e(ipe,Ijo),e(Ub,qjo),e(Ub,xV),e(xV,jjo),e(Ub,Djo),e(I,Gjo),e(I,Jb),e(Jb,dpe),e(dpe,Ojo),e(Jb,Vjo),e(Jb,$V),e($V,Xjo),e(Jb,zjo),e(I,Qjo),e(I,Yb),e(Yb,cpe),e(cpe,Wjo),e(Yb,Hjo),e(Yb,kV),e(kV,Ujo),e(Yb,Jjo),e(I,Yjo),e(I,Kb),e(Kb,fpe),e(fpe,Kjo),e(Kb,Zjo),e(Kb,SV),e(SV,eDo),e(Kb,oDo),e(I,rDo),e(I,Zb),e(Zb,mpe),e(mpe,tDo),e(Zb,aDo),e(Zb,RV),e(RV,nDo),e(Zb,sDo),e(I,lDo),e(I,e4),e(e4,gpe),e(gpe,iDo),e(e4,dDo),e(e4,PV),e(PV,cDo),e(e4,fDo),e(I,mDo),e(I,o4),e(o4,hpe),e(hpe,gDo),e(o4,hDo),e(o4,BV),e(BV,pDo),e(o4,_Do),e(I,uDo),e(I,r4),e(r4,ppe),e(ppe,bDo),e(r4,vDo),e(r4,NV),e(NV,FDo),e(r4,TDo),e(I,MDo),e(I,t4),e(t4,_pe),e(_pe,EDo),e(t4,CDo),e(t4,IV),e(IV,wDo),e(t4,ADo),e(I,LDo),e(I,a4),e(a4,upe),e(upe,yDo),e(a4,xDo),e(a4,qV),e(qV,$Do),e(a4,kDo),e(I,SDo),e(I,n4),e(n4,bpe),e(bpe,RDo),e(n4,PDo),e(n4,jV),e(jV,BDo),e(n4,NDo),e(I,IDo),e(I,s4),e(s4,vpe),e(vpe,qDo),e(s4,jDo),e(s4,DV),e(DV,DDo),e(s4,GDo),e(I,ODo),e(I,l4),e(l4,Fpe),e(Fpe,VDo),e(l4,XDo),e(l4,GV),e(GV,zDo),e(l4,QDo),e(I,WDo),e(I,i4),e(i4,Tpe),e(Tpe,HDo),e(i4,UDo),e(i4,OV),e(OV,JDo),e(i4,YDo),e(I,KDo),e(I,d4),e(d4,Mpe),e(Mpe,ZDo),e(d4,eGo),e(d4,VV),e(VV,oGo),e(d4,rGo),e(I,tGo),e(I,c4),e(c4,Epe),e(Epe,aGo),e(c4,nGo),e(c4,XV),e(XV,sGo),e(c4,lGo),e(I,iGo),e(I,f4),e(f4,Cpe),e(Cpe,dGo),e(f4,cGo),e(f4,zV),e(zV,fGo),e(f4,mGo),e(I,gGo),e(I,m4),e(m4,wpe),e(wpe,hGo),e(m4,pGo),e(m4,QV),e(QV,_Go),e(m4,uGo),e(I,bGo),e(I,g4),e(g4,Ape),e(Ape,vGo),e(g4,FGo),e(g4,WV),e(WV,TGo),e(g4,MGo),e(I,EGo),e(I,h4),e(h4,Lpe),e(Lpe,CGo),e(h4,wGo),e(h4,HV),e(HV,AGo),e(h4,LGo),e(I,yGo),e(I,p4),e(p4,ype),e(ype,xGo),e(p4,$Go),e(p4,UV),e(UV,kGo),e(p4,SGo),e(I,RGo),e(I,_4),e(_4,xpe),e(xpe,PGo),e(_4,BGo),e(_4,JV),e(JV,NGo),e(_4,IGo),e(I,qGo),e(I,u4),e(u4,$pe),e($pe,jGo),e(u4,DGo),e(u4,YV),e(YV,GGo),e(u4,OGo),e(I,VGo),e(I,b4),e(b4,kpe),e(kpe,XGo),e(b4,zGo),e(b4,KV),e(KV,QGo),e(b4,WGo),e(I,HGo),e(I,v4),e(v4,Spe),e(Spe,UGo),e(v4,JGo),e(v4,ZV),e(ZV,YGo),e(v4,KGo),e(I,ZGo),e(I,F4),e(F4,Rpe),e(Rpe,eOo),e(F4,oOo),e(F4,eX),e(eX,rOo),e(F4,tOo),e(I,aOo),e(I,T4),e(T4,Ppe),e(Ppe,nOo),e(T4,sOo),e(T4,oX),e(oX,lOo),e(T4,iOo),e(I,dOo),e(I,M4),e(M4,Bpe),e(Bpe,cOo),e(M4,fOo),e(M4,rX),e(rX,mOo),e(M4,gOo),e(I,hOo),e(I,E4),e(E4,Npe),e(Npe,pOo),e(E4,_Oo),e(E4,tX),e(tX,uOo),e(E4,bOo),e(I,vOo),e(I,C4),e(C4,Ipe),e(Ipe,FOo),e(C4,TOo),e(C4,aX),e(aX,MOo),e(C4,EOo),e(oo,COo),e(oo,w4),e(w4,wOo),e(w4,qpe),e(qpe,AOo),e(w4,LOo),e(w4,jpe),e(jpe,yOo),e(oo,xOo),M(A4,oo,null),b(f,WOe,u),b(f,od,u),e(od,L4),e(L4,Dpe),M(DL,Dpe,null),e(od,$Oo),e(od,Gpe),e(Gpe,kOo),b(f,HOe,u),b(f,Bo,u),M(GL,Bo,null),e(Bo,SOo),e(Bo,rd),e(rd,ROo),e(rd,nX),e(nX,POo),e(rd,BOo),e(rd,sX),e(sX,NOo),e(rd,IOo),e(Bo,qOo),e(Bo,OL),e(OL,jOo),e(OL,Ope),e(Ope,DOo),e(OL,GOo),e(Bo,OOo),e(Bo,mt),M(VL,mt,null),e(mt,VOo),e(mt,Vpe),e(Vpe,XOo),e(mt,zOo),e(mt,td),e(td,QOo),e(td,Xpe),e(Xpe,WOo),e(td,HOo),e(td,lX),e(lX,UOo),e(td,JOo),e(mt,YOo),M(y4,mt,null),e(Bo,KOo),e(Bo,ro),M(XL,ro,null),e(ro,ZOo),e(ro,zpe),e(zpe,eVo),e(ro,oVo),e(ro,Da),e(Da,rVo),e(Da,Qpe),e(Qpe,tVo),e(Da,aVo),e(Da,Wpe),e(Wpe,nVo),e(Da,sVo),e(Da,Hpe),e(Hpe,lVo),e(Da,iVo),e(ro,dVo),e(ro,Z),e(Z,x4),e(x4,Upe),e(Upe,cVo),e(x4,fVo),e(x4,iX),e(iX,mVo),e(x4,gVo),e(Z,hVo),e(Z,$4),e($4,Jpe),e(Jpe,pVo),e($4,_Vo),e($4,dX),e(dX,uVo),e($4,bVo),e(Z,vVo),e(Z,k4),e(k4,Ype),e(Ype,FVo),e(k4,TVo),e(k4,cX),e(cX,MVo),e(k4,EVo),e(Z,CVo),e(Z,S4),e(S4,Kpe),e(Kpe,wVo),e(S4,AVo),e(S4,fX),e(fX,LVo),e(S4,yVo),e(Z,xVo),e(Z,R4),e(R4,Zpe),e(Zpe,$Vo),e(R4,kVo),e(R4,mX),e(mX,SVo),e(R4,RVo),e(Z,PVo),e(Z,P4),e(P4,e_e),e(e_e,BVo),e(P4,NVo),e(P4,gX),e(gX,IVo),e(P4,qVo),e(Z,jVo),e(Z,B4),e(B4,o_e),e(o_e,DVo),e(B4,GVo),e(B4,hX),e(hX,OVo),e(B4,VVo),e(Z,XVo),e(Z,N4),e(N4,r_e),e(r_e,zVo),e(N4,QVo),e(N4,pX),e(pX,WVo),e(N4,HVo),e(Z,UVo),e(Z,I4),e(I4,t_e),e(t_e,JVo),e(I4,YVo),e(I4,_X),e(_X,KVo),e(I4,ZVo),e(Z,eXo),e(Z,q4),e(q4,a_e),e(a_e,oXo),e(q4,rXo),e(q4,uX),e(uX,tXo),e(q4,aXo),e(Z,nXo),e(Z,j4),e(j4,n_e),e(n_e,sXo),e(j4,lXo),e(j4,bX),e(bX,iXo),e(j4,dXo),e(Z,cXo),e(Z,D4),e(D4,s_e),e(s_e,fXo),e(D4,mXo),e(D4,vX),e(vX,gXo),e(D4,hXo),e(Z,pXo),e(Z,G4),e(G4,l_e),e(l_e,_Xo),e(G4,uXo),e(G4,FX),e(FX,bXo),e(G4,vXo),e(Z,FXo),e(Z,O4),e(O4,i_e),e(i_e,TXo),e(O4,MXo),e(O4,TX),e(TX,EXo),e(O4,CXo),e(Z,wXo),e(Z,V4),e(V4,d_e),e(d_e,AXo),e(V4,LXo),e(V4,MX),e(MX,yXo),e(V4,xXo),e(Z,$Xo),e(Z,X4),e(X4,c_e),e(c_e,kXo),e(X4,SXo),e(X4,EX),e(EX,RXo),e(X4,PXo),e(Z,BXo),e(Z,z4),e(z4,f_e),e(f_e,NXo),e(z4,IXo),e(z4,CX),e(CX,qXo),e(z4,jXo),e(Z,DXo),e(Z,Q4),e(Q4,m_e),e(m_e,GXo),e(Q4,OXo),e(Q4,wX),e(wX,VXo),e(Q4,XXo),e(Z,zXo),e(Z,W4),e(W4,g_e),e(g_e,QXo),e(W4,WXo),e(W4,AX),e(AX,HXo),e(W4,UXo),e(Z,JXo),e(Z,H4),e(H4,h_e),e(h_e,YXo),e(H4,KXo),e(H4,LX),e(LX,ZXo),e(H4,ezo),e(Z,ozo),e(Z,U4),e(U4,p_e),e(p_e,rzo),e(U4,tzo),e(U4,yX),e(yX,azo),e(U4,nzo),e(Z,szo),e(Z,J4),e(J4,__e),e(__e,lzo),e(J4,izo),e(J4,xX),e(xX,dzo),e(J4,czo),e(Z,fzo),e(Z,Y4),e(Y4,u_e),e(u_e,mzo),e(Y4,gzo),e(Y4,$X),e($X,hzo),e(Y4,pzo),e(Z,_zo),e(Z,K4),e(K4,b_e),e(b_e,uzo),e(K4,bzo),e(K4,kX),e(kX,vzo),e(K4,Fzo),e(Z,Tzo),e(Z,Z4),e(Z4,v_e),e(v_e,Mzo),e(Z4,Ezo),e(Z4,SX),e(SX,Czo),e(Z4,wzo),e(Z,Azo),e(Z,e5),e(e5,F_e),e(F_e,Lzo),e(e5,yzo),e(e5,RX),e(RX,xzo),e(e5,$zo),e(Z,kzo),e(Z,o5),e(o5,T_e),e(T_e,Szo),e(o5,Rzo),e(o5,PX),e(PX,Pzo),e(o5,Bzo),e(Z,Nzo),e(Z,r5),e(r5,M_e),e(M_e,Izo),e(r5,qzo),e(r5,BX),e(BX,jzo),e(r5,Dzo),e(Z,Gzo),e(Z,t5),e(t5,E_e),e(E_e,Ozo),e(t5,Vzo),e(t5,NX),e(NX,Xzo),e(t5,zzo),e(Z,Qzo),e(Z,a5),e(a5,C_e),e(C_e,Wzo),e(a5,Hzo),e(a5,IX),e(IX,Uzo),e(a5,Jzo),e(ro,Yzo),e(ro,n5),e(n5,Kzo),e(n5,w_e),e(w_e,Zzo),e(n5,eQo),e(n5,A_e),e(A_e,oQo),e(ro,rQo),M(s5,ro,null),b(f,UOe,u),b(f,ad,u),e(ad,l5),e(l5,L_e),M(zL,L_e,null),e(ad,tQo),e(ad,y_e),e(y_e,aQo),b(f,JOe,u),b(f,No,u),M(QL,No,null),e(No,nQo),e(No,nd),e(nd,sQo),e(nd,qX),e(qX,lQo),e(nd,iQo),e(nd,jX),e(jX,dQo),e(nd,cQo),e(No,fQo),e(No,WL),e(WL,mQo),e(WL,x_e),e(x_e,gQo),e(WL,hQo),e(No,pQo),e(No,gt),M(HL,gt,null),e(gt,_Qo),e(gt,$_e),e($_e,uQo),e(gt,bQo),e(gt,sd),e(sd,vQo),e(sd,k_e),e(k_e,FQo),e(sd,TQo),e(sd,DX),e(DX,MQo),e(sd,EQo),e(gt,CQo),M(i5,gt,null),e(No,wQo),e(No,to),M(UL,to,null),e(to,AQo),e(to,S_e),e(S_e,LQo),e(to,yQo),e(to,Ga),e(Ga,xQo),e(Ga,R_e),e(R_e,$Qo),e(Ga,kQo),e(Ga,P_e),e(P_e,SQo),e(Ga,RQo),e(Ga,B_e),e(B_e,PQo),e(Ga,BQo),e(to,NQo),e(to,Io),e(Io,d5),e(d5,N_e),e(N_e,IQo),e(d5,qQo),e(d5,GX),e(GX,jQo),e(d5,DQo),e(Io,GQo),e(Io,c5),e(c5,I_e),e(I_e,OQo),e(c5,VQo),e(c5,OX),e(OX,XQo),e(c5,zQo),e(Io,QQo),e(Io,f5),e(f5,q_e),e(q_e,WQo),e(f5,HQo),e(f5,VX),e(VX,UQo),e(f5,JQo),e(Io,YQo),e(Io,m5),e(m5,j_e),e(j_e,KQo),e(m5,ZQo),e(m5,XX),e(XX,eWo),e(m5,oWo),e(Io,rWo),e(Io,g5),e(g5,D_e),e(D_e,tWo),e(g5,aWo),e(g5,zX),e(zX,nWo),e(g5,sWo),e(Io,lWo),e(Io,h5),e(h5,G_e),e(G_e,iWo),e(h5,dWo),e(h5,QX),e(QX,cWo),e(h5,fWo),e(to,mWo),e(to,p5),e(p5,gWo),e(p5,O_e),e(O_e,hWo),e(p5,pWo),e(p5,V_e),e(V_e,_Wo),e(to,uWo),M(_5,to,null),b(f,YOe,u),b(f,ld,u),e(ld,u5),e(u5,X_e),M(JL,X_e,null),e(ld,bWo),e(ld,z_e),e(z_e,vWo),b(f,KOe,u),b(f,qo,u),M(YL,qo,null),e(qo,FWo),e(qo,id),e(id,TWo),e(id,WX),e(WX,MWo),e(id,EWo),e(id,HX),e(HX,CWo),e(id,wWo),e(qo,AWo),e(qo,KL),e(KL,LWo),e(KL,Q_e),e(Q_e,yWo),e(KL,xWo),e(qo,$Wo),e(qo,ht),M(ZL,ht,null),e(ht,kWo),e(ht,W_e),e(W_e,SWo),e(ht,RWo),e(ht,dd),e(dd,PWo),e(dd,H_e),e(H_e,BWo),e(dd,NWo),e(dd,UX),e(UX,IWo),e(dd,qWo),e(ht,jWo),M(b5,ht,null),e(qo,DWo),e(qo,ao),M(ey,ao,null),e(ao,GWo),e(ao,U_e),e(U_e,OWo),e(ao,VWo),e(ao,Oa),e(Oa,XWo),e(Oa,J_e),e(J_e,zWo),e(Oa,QWo),e(Oa,Y_e),e(Y_e,WWo),e(Oa,HWo),e(Oa,K_e),e(K_e,UWo),e(Oa,JWo),e(ao,YWo),e(ao,H),e(H,v5),e(v5,Z_e),e(Z_e,KWo),e(v5,ZWo),e(v5,JX),e(JX,eHo),e(v5,oHo),e(H,rHo),e(H,F5),e(F5,eue),e(eue,tHo),e(F5,aHo),e(F5,YX),e(YX,nHo),e(F5,sHo),e(H,lHo),e(H,T5),e(T5,oue),e(oue,iHo),e(T5,dHo),e(T5,KX),e(KX,cHo),e(T5,fHo),e(H,mHo),e(H,M5),e(M5,rue),e(rue,gHo),e(M5,hHo),e(M5,ZX),e(ZX,pHo),e(M5,_Ho),e(H,uHo),e(H,E5),e(E5,tue),e(tue,bHo),e(E5,vHo),e(E5,ez),e(ez,FHo),e(E5,THo),e(H,MHo),e(H,C5),e(C5,aue),e(aue,EHo),e(C5,CHo),e(C5,oz),e(oz,wHo),e(C5,AHo),e(H,LHo),e(H,w5),e(w5,nue),e(nue,yHo),e(w5,xHo),e(w5,rz),e(rz,$Ho),e(w5,kHo),e(H,SHo),e(H,A5),e(A5,sue),e(sue,RHo),e(A5,PHo),e(A5,tz),e(tz,BHo),e(A5,NHo),e(H,IHo),e(H,L5),e(L5,lue),e(lue,qHo),e(L5,jHo),e(L5,az),e(az,DHo),e(L5,GHo),e(H,OHo),e(H,y5),e(y5,iue),e(iue,VHo),e(y5,XHo),e(y5,nz),e(nz,zHo),e(y5,QHo),e(H,WHo),e(H,x5),e(x5,due),e(due,HHo),e(x5,UHo),e(x5,sz),e(sz,JHo),e(x5,YHo),e(H,KHo),e(H,$5),e($5,cue),e(cue,ZHo),e($5,eUo),e($5,lz),e(lz,oUo),e($5,rUo),e(H,tUo),e(H,k5),e(k5,fue),e(fue,aUo),e(k5,nUo),e(k5,iz),e(iz,sUo),e(k5,lUo),e(H,iUo),e(H,S5),e(S5,mue),e(mue,dUo),e(S5,cUo),e(S5,dz),e(dz,fUo),e(S5,mUo),e(H,gUo),e(H,R5),e(R5,gue),e(gue,hUo),e(R5,pUo),e(R5,cz),e(cz,_Uo),e(R5,uUo),e(H,bUo),e(H,P5),e(P5,hue),e(hue,vUo),e(P5,FUo),e(P5,fz),e(fz,TUo),e(P5,MUo),e(H,EUo),e(H,B5),e(B5,pue),e(pue,CUo),e(B5,wUo),e(B5,mz),e(mz,AUo),e(B5,LUo),e(H,yUo),e(H,N5),e(N5,_ue),e(_ue,xUo),e(N5,$Uo),e(N5,gz),e(gz,kUo),e(N5,SUo),e(H,RUo),e(H,I5),e(I5,uue),e(uue,PUo),e(I5,BUo),e(I5,hz),e(hz,NUo),e(I5,IUo),e(H,qUo),e(H,q5),e(q5,bue),e(bue,jUo),e(q5,DUo),e(q5,pz),e(pz,GUo),e(q5,OUo),e(H,VUo),e(H,j5),e(j5,vue),e(vue,XUo),e(j5,zUo),e(j5,_z),e(_z,QUo),e(j5,WUo),e(H,HUo),e(H,D5),e(D5,Fue),e(Fue,UUo),e(D5,JUo),e(D5,uz),e(uz,YUo),e(D5,KUo),e(H,ZUo),e(H,G5),e(G5,Tue),e(Tue,eJo),e(G5,oJo),e(G5,bz),e(bz,rJo),e(G5,tJo),e(H,aJo),e(H,O5),e(O5,Mue),e(Mue,nJo),e(O5,sJo),e(O5,vz),e(vz,lJo),e(O5,iJo),e(H,dJo),e(H,V5),e(V5,Eue),e(Eue,cJo),e(V5,fJo),e(V5,Fz),e(Fz,mJo),e(V5,gJo),e(H,hJo),e(H,X5),e(X5,Cue),e(Cue,pJo),e(X5,_Jo),e(X5,Tz),e(Tz,uJo),e(X5,bJo),e(H,vJo),e(H,z5),e(z5,wue),e(wue,FJo),e(z5,TJo),e(z5,Mz),e(Mz,MJo),e(z5,EJo),e(H,CJo),e(H,Q5),e(Q5,Aue),e(Aue,wJo),e(Q5,AJo),e(Q5,Ez),e(Ez,LJo),e(Q5,yJo),e(H,xJo),e(H,W5),e(W5,Lue),e(Lue,$Jo),e(W5,kJo),e(W5,Cz),e(Cz,SJo),e(W5,RJo),e(H,PJo),e(H,H5),e(H5,yue),e(yue,BJo),e(H5,NJo),e(H5,wz),e(wz,IJo),e(H5,qJo),e(H,jJo),e(H,U5),e(U5,xue),e(xue,DJo),e(U5,GJo),e(U5,Az),e(Az,OJo),e(U5,VJo),e(H,XJo),e(H,J5),e(J5,$ue),e($ue,zJo),e(J5,QJo),e(J5,Lz),e(Lz,WJo),e(J5,HJo),e(H,UJo),e(H,Y5),e(Y5,kue),e(kue,JJo),e(Y5,YJo),e(Y5,yz),e(yz,KJo),e(Y5,ZJo),e(H,eYo),e(H,K5),e(K5,Sue),e(Sue,oYo),e(K5,rYo),e(K5,xz),e(xz,tYo),e(K5,aYo),e(H,nYo),e(H,Z5),e(Z5,Rue),e(Rue,sYo),e(Z5,lYo),e(Z5,$z),e($z,iYo),e(Z5,dYo),e(H,cYo),e(H,ev),e(ev,Pue),e(Pue,fYo),e(ev,mYo),e(ev,kz),e(kz,gYo),e(ev,hYo),e(ao,pYo),e(ao,ov),e(ov,_Yo),e(ov,Bue),e(Bue,uYo),e(ov,bYo),e(ov,Nue),e(Nue,vYo),e(ao,FYo),M(rv,ao,null),b(f,ZOe,u),b(f,cd,u),e(cd,tv),e(tv,Iue),M(oy,Iue,null),e(cd,TYo),e(cd,que),e(que,MYo),b(f,eVe,u),b(f,jo,u),M(ry,jo,null),e(jo,EYo),e(jo,fd),e(fd,CYo),e(fd,Sz),e(Sz,wYo),e(fd,AYo),e(fd,Rz),e(Rz,LYo),e(fd,yYo),e(jo,xYo),e(jo,ty),e(ty,$Yo),e(ty,jue),e(jue,kYo),e(ty,SYo),e(jo,RYo),e(jo,pt),M(ay,pt,null),e(pt,PYo),e(pt,Due),e(Due,BYo),e(pt,NYo),e(pt,md),e(md,IYo),e(md,Gue),e(Gue,qYo),e(md,jYo),e(md,Pz),e(Pz,DYo),e(md,GYo),e(pt,OYo),M(av,pt,null),e(jo,VYo),e(jo,no),M(ny,no,null),e(no,XYo),e(no,Oue),e(Oue,zYo),e(no,QYo),e(no,Va),e(Va,WYo),e(Va,Vue),e(Vue,HYo),e(Va,UYo),e(Va,Xue),e(Xue,JYo),e(Va,YYo),e(Va,zue),e(zue,KYo),e(Va,ZYo),e(no,eKo),e(no,V),e(V,nv),e(nv,Que),e(Que,oKo),e(nv,rKo),e(nv,Bz),e(Bz,tKo),e(nv,aKo),e(V,nKo),e(V,sv),e(sv,Wue),e(Wue,sKo),e(sv,lKo),e(sv,Nz),e(Nz,iKo),e(sv,dKo),e(V,cKo),e(V,lv),e(lv,Hue),e(Hue,fKo),e(lv,mKo),e(lv,Iz),e(Iz,gKo),e(lv,hKo),e(V,pKo),e(V,iv),e(iv,Uue),e(Uue,_Ko),e(iv,uKo),e(iv,qz),e(qz,bKo),e(iv,vKo),e(V,FKo),e(V,dv),e(dv,Jue),e(Jue,TKo),e(dv,MKo),e(dv,jz),e(jz,EKo),e(dv,CKo),e(V,wKo),e(V,cv),e(cv,Yue),e(Yue,AKo),e(cv,LKo),e(cv,Dz),e(Dz,yKo),e(cv,xKo),e(V,$Ko),e(V,fv),e(fv,Kue),e(Kue,kKo),e(fv,SKo),e(fv,Gz),e(Gz,RKo),e(fv,PKo),e(V,BKo),e(V,mv),e(mv,Zue),e(Zue,NKo),e(mv,IKo),e(mv,Oz),e(Oz,qKo),e(mv,jKo),e(V,DKo),e(V,gv),e(gv,e1e),e(e1e,GKo),e(gv,OKo),e(gv,Vz),e(Vz,VKo),e(gv,XKo),e(V,zKo),e(V,hv),e(hv,o1e),e(o1e,QKo),e(hv,WKo),e(hv,Xz),e(Xz,HKo),e(hv,UKo),e(V,JKo),e(V,pv),e(pv,r1e),e(r1e,YKo),e(pv,KKo),e(pv,zz),e(zz,ZKo),e(pv,eZo),e(V,oZo),e(V,_v),e(_v,t1e),e(t1e,rZo),e(_v,tZo),e(_v,Qz),e(Qz,aZo),e(_v,nZo),e(V,sZo),e(V,uv),e(uv,a1e),e(a1e,lZo),e(uv,iZo),e(uv,Wz),e(Wz,dZo),e(uv,cZo),e(V,fZo),e(V,bv),e(bv,n1e),e(n1e,mZo),e(bv,gZo),e(bv,Hz),e(Hz,hZo),e(bv,pZo),e(V,_Zo),e(V,vv),e(vv,s1e),e(s1e,uZo),e(vv,bZo),e(vv,Uz),e(Uz,vZo),e(vv,FZo),e(V,TZo),e(V,Fv),e(Fv,l1e),e(l1e,MZo),e(Fv,EZo),e(Fv,Jz),e(Jz,CZo),e(Fv,wZo),e(V,AZo),e(V,Tv),e(Tv,i1e),e(i1e,LZo),e(Tv,yZo),e(Tv,Yz),e(Yz,xZo),e(Tv,$Zo),e(V,kZo),e(V,Mv),e(Mv,d1e),e(d1e,SZo),e(Mv,RZo),e(Mv,Kz),e(Kz,PZo),e(Mv,BZo),e(V,NZo),e(V,Ev),e(Ev,c1e),e(c1e,IZo),e(Ev,qZo),e(Ev,Zz),e(Zz,jZo),e(Ev,DZo),e(V,GZo),e(V,Cv),e(Cv,f1e),e(f1e,OZo),e(Cv,VZo),e(Cv,eQ),e(eQ,XZo),e(Cv,zZo),e(V,QZo),e(V,wv),e(wv,m1e),e(m1e,WZo),e(wv,HZo),e(wv,oQ),e(oQ,UZo),e(wv,JZo),e(V,YZo),e(V,Av),e(Av,g1e),e(g1e,KZo),e(Av,ZZo),e(Av,rQ),e(rQ,eer),e(Av,oer),e(V,rer),e(V,Lv),e(Lv,h1e),e(h1e,ter),e(Lv,aer),e(Lv,tQ),e(tQ,ner),e(Lv,ser),e(V,ler),e(V,yv),e(yv,p1e),e(p1e,ier),e(yv,der),e(yv,aQ),e(aQ,cer),e(yv,fer),e(V,mer),e(V,xv),e(xv,_1e),e(_1e,ger),e(xv,her),e(xv,nQ),e(nQ,per),e(xv,_er),e(V,uer),e(V,$v),e($v,u1e),e(u1e,ber),e($v,ver),e($v,sQ),e(sQ,Fer),e($v,Ter),e(V,Mer),e(V,kv),e(kv,b1e),e(b1e,Eer),e(kv,Cer),e(kv,lQ),e(lQ,wer),e(kv,Aer),e(V,Ler),e(V,Sv),e(Sv,v1e),e(v1e,yer),e(Sv,xer),e(Sv,iQ),e(iQ,$er),e(Sv,ker),e(V,Ser),e(V,Rv),e(Rv,F1e),e(F1e,Rer),e(Rv,Per),e(Rv,dQ),e(dQ,Ber),e(Rv,Ner),e(V,Ier),e(V,Pv),e(Pv,T1e),e(T1e,qer),e(Pv,jer),e(Pv,cQ),e(cQ,Der),e(Pv,Ger),e(V,Oer),e(V,Bv),e(Bv,M1e),e(M1e,Ver),e(Bv,Xer),e(Bv,fQ),e(fQ,zer),e(Bv,Qer),e(V,Wer),e(V,Nv),e(Nv,E1e),e(E1e,Her),e(Nv,Uer),e(Nv,mQ),e(mQ,Jer),e(Nv,Yer),e(V,Ker),e(V,Iv),e(Iv,C1e),e(C1e,Zer),e(Iv,eor),e(Iv,gQ),e(gQ,oor),e(Iv,ror),e(V,tor),e(V,qv),e(qv,w1e),e(w1e,aor),e(qv,nor),e(qv,hQ),e(hQ,sor),e(qv,lor),e(V,ior),e(V,jv),e(jv,A1e),e(A1e,dor),e(jv,cor),e(jv,pQ),e(pQ,mor),e(jv,gor),e(V,hor),e(V,Dv),e(Dv,L1e),e(L1e,por),e(Dv,_or),e(Dv,_Q),e(_Q,uor),e(Dv,bor),e(V,vor),e(V,Gv),e(Gv,y1e),e(y1e,For),e(Gv,Tor),e(Gv,uQ),e(uQ,Mor),e(Gv,Eor),e(V,Cor),e(V,Ov),e(Ov,x1e),e(x1e,wor),e(Ov,Aor),e(Ov,bQ),e(bQ,Lor),e(Ov,yor),e(V,xor),e(V,Vv),e(Vv,$1e),e($1e,$or),e(Vv,kor),e(Vv,vQ),e(vQ,Sor),e(Vv,Ror),e(V,Por),e(V,Xv),e(Xv,k1e),e(k1e,Bor),e(Xv,Nor),e(Xv,FQ),e(FQ,Ior),e(Xv,qor),e(V,jor),e(V,zv),e(zv,S1e),e(S1e,Dor),e(zv,Gor),e(zv,TQ),e(TQ,Oor),e(zv,Vor),e(no,Xor),e(no,Qv),e(Qv,zor),e(Qv,R1e),e(R1e,Qor),e(Qv,Wor),e(Qv,P1e),e(P1e,Hor),e(no,Uor),M(Wv,no,null),b(f,oVe,u),b(f,gd,u),e(gd,Hv),e(Hv,B1e),M(sy,B1e,null),e(gd,Jor),e(gd,N1e),e(N1e,Yor),b(f,rVe,u),b(f,Do,u),M(ly,Do,null),e(Do,Kor),e(Do,hd),e(hd,Zor),e(hd,MQ),e(MQ,err),e(hd,orr),e(hd,EQ),e(EQ,rrr),e(hd,trr),e(Do,arr),e(Do,iy),e(iy,nrr),e(iy,I1e),e(I1e,srr),e(iy,lrr),e(Do,irr),e(Do,_t),M(dy,_t,null),e(_t,drr),e(_t,q1e),e(q1e,crr),e(_t,frr),e(_t,pd),e(pd,mrr),e(pd,j1e),e(j1e,grr),e(pd,hrr),e(pd,CQ),e(CQ,prr),e(pd,_rr),e(_t,urr),M(Uv,_t,null),e(Do,brr),e(Do,so),M(cy,so,null),e(so,vrr),e(so,D1e),e(D1e,Frr),e(so,Trr),e(so,Xa),e(Xa,Mrr),e(Xa,G1e),e(G1e,Err),e(Xa,Crr),e(Xa,O1e),e(O1e,wrr),e(Xa,Arr),e(Xa,V1e),e(V1e,Lrr),e(Xa,yrr),e(so,xrr),e(so,X1e),e(X1e,Jv),e(Jv,z1e),e(z1e,$rr),e(Jv,krr),e(Jv,wQ),e(wQ,Srr),e(Jv,Rrr),e(so,Prr),e(so,Yv),e(Yv,Brr),e(Yv,Q1e),e(Q1e,Nrr),e(Yv,Irr),e(Yv,W1e),e(W1e,qrr),e(so,jrr),M(Kv,so,null),b(f,tVe,u),b(f,_d,u),e(_d,Zv),e(Zv,H1e),M(fy,H1e,null),e(_d,Drr),e(_d,U1e),e(U1e,Grr),b(f,aVe,u),b(f,Go,u),M(my,Go,null),e(Go,Orr),e(Go,ud),e(ud,Vrr),e(ud,AQ),e(AQ,Xrr),e(ud,zrr),e(ud,LQ),e(LQ,Qrr),e(ud,Wrr),e(Go,Hrr),e(Go,gy),e(gy,Urr),e(gy,J1e),e(J1e,Jrr),e(gy,Yrr),e(Go,Krr),e(Go,ut),M(hy,ut,null),e(ut,Zrr),e(ut,Y1e),e(Y1e,etr),e(ut,otr),e(ut,bd),e(bd,rtr),e(bd,K1e),e(K1e,ttr),e(bd,atr),e(bd,yQ),e(yQ,ntr),e(bd,str),e(ut,ltr),M(eF,ut,null),e(Go,itr),e(Go,lo),M(py,lo,null),e(lo,dtr),e(lo,Z1e),e(Z1e,ctr),e(lo,ftr),e(lo,za),e(za,mtr),e(za,e2e),e(e2e,gtr),e(za,htr),e(za,o2e),e(o2e,ptr),e(za,_tr),e(za,r2e),e(r2e,utr),e(za,btr),e(lo,vtr),e(lo,ue),e(ue,oF),e(oF,t2e),e(t2e,Ftr),e(oF,Ttr),e(oF,xQ),e(xQ,Mtr),e(oF,Etr),e(ue,Ctr),e(ue,rF),e(rF,a2e),e(a2e,wtr),e(rF,Atr),e(rF,$Q),e($Q,Ltr),e(rF,ytr),e(ue,xtr),e(ue,tF),e(tF,n2e),e(n2e,$tr),e(tF,ktr),e(tF,kQ),e(kQ,Str),e(tF,Rtr),e(ue,Ptr),e(ue,aF),e(aF,s2e),e(s2e,Btr),e(aF,Ntr),e(aF,SQ),e(SQ,Itr),e(aF,qtr),e(ue,jtr),e(ue,zs),e(zs,l2e),e(l2e,Dtr),e(zs,Gtr),e(zs,RQ),e(RQ,Otr),e(zs,Vtr),e(zs,PQ),e(PQ,Xtr),e(zs,ztr),e(ue,Qtr),e(ue,nF),e(nF,i2e),e(i2e,Wtr),e(nF,Htr),e(nF,BQ),e(BQ,Utr),e(nF,Jtr),e(ue,Ytr),e(ue,Qs),e(Qs,d2e),e(d2e,Ktr),e(Qs,Ztr),e(Qs,NQ),e(NQ,ear),e(Qs,oar),e(Qs,IQ),e(IQ,rar),e(Qs,tar),e(ue,aar),e(ue,sF),e(sF,c2e),e(c2e,nar),e(sF,sar),e(sF,qQ),e(qQ,lar),e(sF,iar),e(ue,dar),e(ue,bt),e(bt,f2e),e(f2e,car),e(bt,far),e(bt,jQ),e(jQ,mar),e(bt,gar),e(bt,DQ),e(DQ,har),e(bt,par),e(bt,GQ),e(GQ,_ar),e(bt,uar),e(ue,bar),e(ue,lF),e(lF,m2e),e(m2e,Far),e(lF,Tar),e(lF,OQ),e(OQ,Mar),e(lF,Ear),e(ue,Car),e(ue,iF),e(iF,g2e),e(g2e,war),e(iF,Aar),e(iF,VQ),e(VQ,Lar),e(iF,yar),e(ue,xar),e(ue,dF),e(dF,h2e),e(h2e,$ar),e(dF,kar),e(dF,XQ),e(XQ,Sar),e(dF,Rar),e(ue,Par),e(ue,cF),e(cF,p2e),e(p2e,Bar),e(cF,Nar),e(cF,zQ),e(zQ,Iar),e(cF,qar),e(ue,jar),e(ue,fF),e(fF,_2e),e(_2e,Dar),e(fF,Gar),e(fF,QQ),e(QQ,Oar),e(fF,Var),e(ue,Xar),e(ue,mF),e(mF,u2e),e(u2e,zar),e(mF,Qar),e(mF,WQ),e(WQ,War),e(mF,Har),e(ue,Uar),e(ue,gF),e(gF,b2e),e(b2e,Jar),e(gF,Yar),e(gF,HQ),e(HQ,Kar),e(gF,Zar),e(lo,enr),e(lo,hF),e(hF,onr),e(hF,v2e),e(v2e,rnr),e(hF,tnr),e(hF,F2e),e(F2e,anr),e(lo,nnr),M(pF,lo,null),b(f,nVe,u),b(f,vd,u),e(vd,_F),e(_F,T2e),M(_y,T2e,null),e(vd,snr),e(vd,M2e),e(M2e,lnr),b(f,sVe,u),b(f,Oo,u),M(uy,Oo,null),e(Oo,inr),e(Oo,Fd),e(Fd,dnr),e(Fd,UQ),e(UQ,cnr),e(Fd,fnr),e(Fd,JQ),e(JQ,mnr),e(Fd,gnr),e(Oo,hnr),e(Oo,by),e(by,pnr),e(by,E2e),e(E2e,_nr),e(by,unr),e(Oo,bnr),e(Oo,vt),M(vy,vt,null),e(vt,vnr),e(vt,C2e),e(C2e,Fnr),e(vt,Tnr),e(vt,Td),e(Td,Mnr),e(Td,w2e),e(w2e,Enr),e(Td,Cnr),e(Td,YQ),e(YQ,wnr),e(Td,Anr),e(vt,Lnr),M(uF,vt,null),e(Oo,ynr),e(Oo,io),M(Fy,io,null),e(io,xnr),e(io,A2e),e(A2e,$nr),e(io,knr),e(io,Qa),e(Qa,Snr),e(Qa,L2e),e(L2e,Rnr),e(Qa,Pnr),e(Qa,y2e),e(y2e,Bnr),e(Qa,Nnr),e(Qa,x2e),e(x2e,Inr),e(Qa,qnr),e(io,jnr),e(io,$2e),e($2e,bF),e(bF,k2e),e(k2e,Dnr),e(bF,Gnr),e(bF,KQ),e(KQ,Onr),e(bF,Vnr),e(io,Xnr),e(io,vF),e(vF,znr),e(vF,S2e),e(S2e,Qnr),e(vF,Wnr),e(vF,R2e),e(R2e,Hnr),e(io,Unr),M(FF,io,null),b(f,lVe,u),b(f,Md,u),e(Md,TF),e(TF,P2e),M(Ty,P2e,null),e(Md,Jnr),e(Md,B2e),e(B2e,Ynr),b(f,iVe,u),b(f,Vo,u),M(My,Vo,null),e(Vo,Knr),e(Vo,Ed),e(Ed,Znr),e(Ed,ZQ),e(ZQ,esr),e(Ed,osr),e(Ed,eW),e(eW,rsr),e(Ed,tsr),e(Vo,asr),e(Vo,Ey),e(Ey,nsr),e(Ey,N2e),e(N2e,ssr),e(Ey,lsr),e(Vo,isr),e(Vo,Ft),M(Cy,Ft,null),e(Ft,dsr),e(Ft,I2e),e(I2e,csr),e(Ft,fsr),e(Ft,Cd),e(Cd,msr),e(Cd,q2e),e(q2e,gsr),e(Cd,hsr),e(Cd,oW),e(oW,psr),e(Cd,_sr),e(Ft,usr),M(MF,Ft,null),e(Vo,bsr),e(Vo,co),M(wy,co,null),e(co,vsr),e(co,j2e),e(j2e,Fsr),e(co,Tsr),e(co,Wa),e(Wa,Msr),e(Wa,D2e),e(D2e,Esr),e(Wa,Csr),e(Wa,G2e),e(G2e,wsr),e(Wa,Asr),e(Wa,O2e),e(O2e,Lsr),e(Wa,ysr),e(co,xsr),e(co,V2e),e(V2e,EF),e(EF,X2e),e(X2e,$sr),e(EF,ksr),e(EF,rW),e(rW,Ssr),e(EF,Rsr),e(co,Psr),e(co,CF),e(CF,Bsr),e(CF,z2e),e(z2e,Nsr),e(CF,Isr),e(CF,Q2e),e(Q2e,qsr),e(co,jsr),M(wF,co,null),b(f,dVe,u),b(f,wd,u),e(wd,AF),e(AF,W2e),M(Ay,W2e,null),e(wd,Dsr),e(wd,H2e),e(H2e,Gsr),b(f,cVe,u),b(f,Xo,u),M(Ly,Xo,null),e(Xo,Osr),e(Xo,Ad),e(Ad,Vsr),e(Ad,tW),e(tW,Xsr),e(Ad,zsr),e(Ad,aW),e(aW,Qsr),e(Ad,Wsr),e(Xo,Hsr),e(Xo,yy),e(yy,Usr),e(yy,U2e),e(U2e,Jsr),e(yy,Ysr),e(Xo,Ksr),e(Xo,Tt),M(xy,Tt,null),e(Tt,Zsr),e(Tt,J2e),e(J2e,elr),e(Tt,olr),e(Tt,Ld),e(Ld,rlr),e(Ld,Y2e),e(Y2e,tlr),e(Ld,alr),e(Ld,nW),e(nW,nlr),e(Ld,slr),e(Tt,llr),M(LF,Tt,null),e(Xo,ilr),e(Xo,fo),M($y,fo,null),e(fo,dlr),e(fo,K2e),e(K2e,clr),e(fo,flr),e(fo,Ha),e(Ha,mlr),e(Ha,Z2e),e(Z2e,glr),e(Ha,hlr),e(Ha,ebe),e(ebe,plr),e(Ha,_lr),e(Ha,obe),e(obe,ulr),e(Ha,blr),e(fo,vlr),e(fo,Pe),e(Pe,yF),e(yF,rbe),e(rbe,Flr),e(yF,Tlr),e(yF,sW),e(sW,Mlr),e(yF,Elr),e(Pe,Clr),e(Pe,xF),e(xF,tbe),e(tbe,wlr),e(xF,Alr),e(xF,lW),e(lW,Llr),e(xF,ylr),e(Pe,xlr),e(Pe,$F),e($F,abe),e(abe,$lr),e($F,klr),e($F,iW),e(iW,Slr),e($F,Rlr),e(Pe,Plr),e(Pe,kF),e(kF,nbe),e(nbe,Blr),e(kF,Nlr),e(kF,dW),e(dW,Ilr),e(kF,qlr),e(Pe,jlr),e(Pe,SF),e(SF,sbe),e(sbe,Dlr),e(SF,Glr),e(SF,cW),e(cW,Olr),e(SF,Vlr),e(Pe,Xlr),e(Pe,RF),e(RF,lbe),e(lbe,zlr),e(RF,Qlr),e(RF,fW),e(fW,Wlr),e(RF,Hlr),e(Pe,Ulr),e(Pe,PF),e(PF,ibe),e(ibe,Jlr),e(PF,Ylr),e(PF,mW),e(mW,Klr),e(PF,Zlr),e(Pe,eir),e(Pe,BF),e(BF,dbe),e(dbe,oir),e(BF,rir),e(BF,gW),e(gW,tir),e(BF,air),e(Pe,nir),e(Pe,NF),e(NF,cbe),e(cbe,sir),e(NF,lir),e(NF,hW),e(hW,iir),e(NF,dir),e(fo,cir),e(fo,IF),e(IF,fir),e(IF,fbe),e(fbe,mir),e(IF,gir),e(IF,mbe),e(mbe,hir),e(fo,pir),M(qF,fo,null),b(f,fVe,u),b(f,yd,u),e(yd,jF),e(jF,gbe),M(ky,gbe,null),e(yd,_ir),e(yd,hbe),e(hbe,uir),b(f,mVe,u),b(f,zo,u),M(Sy,zo,null),e(zo,bir),e(zo,xd),e(xd,vir),e(xd,pW),e(pW,Fir),e(xd,Tir),e(xd,_W),e(_W,Mir),e(xd,Eir),e(zo,Cir),e(zo,Ry),e(Ry,wir),e(Ry,pbe),e(pbe,Air),e(Ry,Lir),e(zo,yir),e(zo,Mt),M(Py,Mt,null),e(Mt,xir),e(Mt,_be),e(_be,$ir),e(Mt,kir),e(Mt,$d),e($d,Sir),e($d,ube),e(ube,Rir),e($d,Pir),e($d,uW),e(uW,Bir),e($d,Nir),e(Mt,Iir),M(DF,Mt,null),e(zo,qir),e(zo,mo),M(By,mo,null),e(mo,jir),e(mo,bbe),e(bbe,Dir),e(mo,Gir),e(mo,Ua),e(Ua,Oir),e(Ua,vbe),e(vbe,Vir),e(Ua,Xir),e(Ua,Fbe),e(Fbe,zir),e(Ua,Qir),e(Ua,Tbe),e(Tbe,Wir),e(Ua,Hir),e(mo,Uir),e(mo,et),e(et,GF),e(GF,Mbe),e(Mbe,Jir),e(GF,Yir),e(GF,bW),e(bW,Kir),e(GF,Zir),e(et,edr),e(et,OF),e(OF,Ebe),e(Ebe,odr),e(OF,rdr),e(OF,vW),e(vW,tdr),e(OF,adr),e(et,ndr),e(et,VF),e(VF,Cbe),e(Cbe,sdr),e(VF,ldr),e(VF,FW),e(FW,idr),e(VF,ddr),e(et,cdr),e(et,XF),e(XF,wbe),e(wbe,fdr),e(XF,mdr),e(XF,TW),e(TW,gdr),e(XF,hdr),e(et,pdr),e(et,zF),e(zF,Abe),e(Abe,_dr),e(zF,udr),e(zF,MW),e(MW,bdr),e(zF,vdr),e(mo,Fdr),e(mo,QF),e(QF,Tdr),e(QF,Lbe),e(Lbe,Mdr),e(QF,Edr),e(QF,ybe),e(ybe,Cdr),e(mo,wdr),M(WF,mo,null),b(f,gVe,u),b(f,kd,u),e(kd,HF),e(HF,xbe),M(Ny,xbe,null),e(kd,Adr),e(kd,$be),e($be,Ldr),b(f,hVe,u),b(f,Qo,u),M(Iy,Qo,null),e(Qo,ydr),e(Qo,Sd),e(Sd,xdr),e(Sd,EW),e(EW,$dr),e(Sd,kdr),e(Sd,CW),e(CW,Sdr),e(Sd,Rdr),e(Qo,Pdr),e(Qo,qy),e(qy,Bdr),e(qy,kbe),e(kbe,Ndr),e(qy,Idr),e(Qo,qdr),e(Qo,Et),M(jy,Et,null),e(Et,jdr),e(Et,Sbe),e(Sbe,Ddr),e(Et,Gdr),e(Et,Rd),e(Rd,Odr),e(Rd,Rbe),e(Rbe,Vdr),e(Rd,Xdr),e(Rd,wW),e(wW,zdr),e(Rd,Qdr),e(Et,Wdr),M(UF,Et,null),e(Qo,Hdr),e(Qo,go),M(Dy,go,null),e(go,Udr),e(go,Pbe),e(Pbe,Jdr),e(go,Ydr),e(go,Ja),e(Ja,Kdr),e(Ja,Bbe),e(Bbe,Zdr),e(Ja,ecr),e(Ja,Nbe),e(Nbe,ocr),e(Ja,rcr),e(Ja,Ibe),e(Ibe,tcr),e(Ja,acr),e(go,ncr),e(go,Le),e(Le,JF),e(JF,qbe),e(qbe,scr),e(JF,lcr),e(JF,AW),e(AW,icr),e(JF,dcr),e(Le,ccr),e(Le,YF),e(YF,jbe),e(jbe,fcr),e(YF,mcr),e(YF,LW),e(LW,gcr),e(YF,hcr),e(Le,pcr),e(Le,KF),e(KF,Dbe),e(Dbe,_cr),e(KF,ucr),e(KF,yW),e(yW,bcr),e(KF,vcr),e(Le,Fcr),e(Le,ZF),e(ZF,Gbe),e(Gbe,Tcr),e(ZF,Mcr),e(ZF,xW),e(xW,Ecr),e(ZF,Ccr),e(Le,wcr),e(Le,eT),e(eT,Obe),e(Obe,Acr),e(eT,Lcr),e(eT,$W),e($W,ycr),e(eT,xcr),e(Le,$cr),e(Le,oT),e(oT,Vbe),e(Vbe,kcr),e(oT,Scr),e(oT,kW),e(kW,Rcr),e(oT,Pcr),e(Le,Bcr),e(Le,rT),e(rT,Xbe),e(Xbe,Ncr),e(rT,Icr),e(rT,SW),e(SW,qcr),e(rT,jcr),e(Le,Dcr),e(Le,tT),e(tT,zbe),e(zbe,Gcr),e(tT,Ocr),e(tT,RW),e(RW,Vcr),e(tT,Xcr),e(Le,zcr),e(Le,aT),e(aT,Qbe),e(Qbe,Qcr),e(aT,Wcr),e(aT,PW),e(PW,Hcr),e(aT,Ucr),e(Le,Jcr),e(Le,nT),e(nT,Wbe),e(Wbe,Ycr),e(nT,Kcr),e(nT,BW),e(BW,Zcr),e(nT,efr),e(go,ofr),e(go,sT),e(sT,rfr),e(sT,Hbe),e(Hbe,tfr),e(sT,afr),e(sT,Ube),e(Ube,nfr),e(go,sfr),M(lT,go,null),b(f,pVe,u),b(f,Pd,u),e(Pd,iT),e(iT,Jbe),M(Gy,Jbe,null),e(Pd,lfr),e(Pd,Ybe),e(Ybe,ifr),b(f,_Ve,u),b(f,Wo,u),M(Oy,Wo,null),e(Wo,dfr),e(Wo,Bd),e(Bd,cfr),e(Bd,NW),e(NW,ffr),e(Bd,mfr),e(Bd,IW),e(IW,gfr),e(Bd,hfr),e(Wo,pfr),e(Wo,Vy),e(Vy,_fr),e(Vy,Kbe),e(Kbe,ufr),e(Vy,bfr),e(Wo,vfr),e(Wo,Ct),M(Xy,Ct,null),e(Ct,Ffr),e(Ct,Zbe),e(Zbe,Tfr),e(Ct,Mfr),e(Ct,Nd),e(Nd,Efr),e(Nd,e4e),e(e4e,Cfr),e(Nd,wfr),e(Nd,qW),e(qW,Afr),e(Nd,Lfr),e(Ct,yfr),M(dT,Ct,null),e(Wo,xfr),e(Wo,ho),M(zy,ho,null),e(ho,$fr),e(ho,o4e),e(o4e,kfr),e(ho,Sfr),e(ho,Ya),e(Ya,Rfr),e(Ya,r4e),e(r4e,Pfr),e(Ya,Bfr),e(Ya,t4e),e(t4e,Nfr),e(Ya,Ifr),e(Ya,a4e),e(a4e,qfr),e(Ya,jfr),e(ho,Dfr),e(ho,Qy),e(Qy,cT),e(cT,n4e),e(n4e,Gfr),e(cT,Ofr),e(cT,jW),e(jW,Vfr),e(cT,Xfr),e(Qy,zfr),e(Qy,fT),e(fT,s4e),e(s4e,Qfr),e(fT,Wfr),e(fT,DW),e(DW,Hfr),e(fT,Ufr),e(ho,Jfr),e(ho,mT),e(mT,Yfr),e(mT,l4e),e(l4e,Kfr),e(mT,Zfr),e(mT,i4e),e(i4e,emr),e(ho,omr),M(gT,ho,null),b(f,uVe,u),b(f,Id,u),e(Id,hT),e(hT,d4e),M(Wy,d4e,null),e(Id,rmr),e(Id,c4e),e(c4e,tmr),b(f,bVe,u),b(f,Ho,u),M(Hy,Ho,null),e(Ho,amr),e(Ho,qd),e(qd,nmr),e(qd,GW),e(GW,smr),e(qd,lmr),e(qd,OW),e(OW,imr),e(qd,dmr),e(Ho,cmr),e(Ho,Uy),e(Uy,fmr),e(Uy,f4e),e(f4e,mmr),e(Uy,gmr),e(Ho,hmr),e(Ho,wt),M(Jy,wt,null),e(wt,pmr),e(wt,m4e),e(m4e,_mr),e(wt,umr),e(wt,jd),e(jd,bmr),e(jd,g4e),e(g4e,vmr),e(jd,Fmr),e(jd,VW),e(VW,Tmr),e(jd,Mmr),e(wt,Emr),M(pT,wt,null),e(Ho,Cmr),e(Ho,po),M(Yy,po,null),e(po,wmr),e(po,h4e),e(h4e,Amr),e(po,Lmr),e(po,Ka),e(Ka,ymr),e(Ka,p4e),e(p4e,xmr),e(Ka,$mr),e(Ka,_4e),e(_4e,kmr),e(Ka,Smr),e(Ka,u4e),e(u4e,Rmr),e(Ka,Pmr),e(po,Bmr),e(po,ot),e(ot,_T),e(_T,b4e),e(b4e,Nmr),e(_T,Imr),e(_T,XW),e(XW,qmr),e(_T,jmr),e(ot,Dmr),e(ot,uT),e(uT,v4e),e(v4e,Gmr),e(uT,Omr),e(uT,zW),e(zW,Vmr),e(uT,Xmr),e(ot,zmr),e(ot,bT),e(bT,F4e),e(F4e,Qmr),e(bT,Wmr),e(bT,QW),e(QW,Hmr),e(bT,Umr),e(ot,Jmr),e(ot,vT),e(vT,T4e),e(T4e,Ymr),e(vT,Kmr),e(vT,WW),e(WW,Zmr),e(vT,egr),e(ot,ogr),e(ot,FT),e(FT,M4e),e(M4e,rgr),e(FT,tgr),e(FT,HW),e(HW,agr),e(FT,ngr),e(po,sgr),e(po,TT),e(TT,lgr),e(TT,E4e),e(E4e,igr),e(TT,dgr),e(TT,C4e),e(C4e,cgr),e(po,fgr),M(MT,po,null),b(f,vVe,u),b(f,Dd,u),e(Dd,ET),e(ET,w4e),M(Ky,w4e,null),e(Dd,mgr),e(Dd,A4e),e(A4e,ggr),b(f,FVe,u),b(f,Uo,u),M(Zy,Uo,null),e(Uo,hgr),e(Uo,Gd),e(Gd,pgr),e(Gd,UW),e(UW,_gr),e(Gd,ugr),e(Gd,JW),e(JW,bgr),e(Gd,vgr),e(Uo,Fgr),e(Uo,e9),e(e9,Tgr),e(e9,L4e),e(L4e,Mgr),e(e9,Egr),e(Uo,Cgr),e(Uo,At),M(o9,At,null),e(At,wgr),e(At,y4e),e(y4e,Agr),e(At,Lgr),e(At,Od),e(Od,ygr),e(Od,x4e),e(x4e,xgr),e(Od,$gr),e(Od,YW),e(YW,kgr),e(Od,Sgr),e(At,Rgr),M(CT,At,null),e(Uo,Pgr),e(Uo,_o),M(r9,_o,null),e(_o,Bgr),e(_o,$4e),e($4e,Ngr),e(_o,Igr),e(_o,Za),e(Za,qgr),e(Za,k4e),e(k4e,jgr),e(Za,Dgr),e(Za,S4e),e(S4e,Ggr),e(Za,Ogr),e(Za,R4e),e(R4e,Vgr),e(Za,Xgr),e(_o,zgr),e(_o,Vd),e(Vd,wT),e(wT,P4e),e(P4e,Qgr),e(wT,Wgr),e(wT,KW),e(KW,Hgr),e(wT,Ugr),e(Vd,Jgr),e(Vd,AT),e(AT,B4e),e(B4e,Ygr),e(AT,Kgr),e(AT,ZW),e(ZW,Zgr),e(AT,ehr),e(Vd,ohr),e(Vd,LT),e(LT,N4e),e(N4e,rhr),e(LT,thr),e(LT,eH),e(eH,ahr),e(LT,nhr),e(_o,shr),e(_o,yT),e(yT,lhr),e(yT,I4e),e(I4e,ihr),e(yT,dhr),e(yT,q4e),e(q4e,chr),e(_o,fhr),M(xT,_o,null),b(f,TVe,u),b(f,Xd,u),e(Xd,$T),e($T,j4e),M(t9,j4e,null),e(Xd,mhr),e(Xd,D4e),e(D4e,ghr),b(f,MVe,u),b(f,Jo,u),M(a9,Jo,null),e(Jo,hhr),e(Jo,zd),e(zd,phr),e(zd,oH),e(oH,_hr),e(zd,uhr),e(zd,rH),e(rH,bhr),e(zd,vhr),e(Jo,Fhr),e(Jo,n9),e(n9,Thr),e(n9,G4e),e(G4e,Mhr),e(n9,Ehr),e(Jo,Chr),e(Jo,Lt),M(s9,Lt,null),e(Lt,whr),e(Lt,O4e),e(O4e,Ahr),e(Lt,Lhr),e(Lt,Qd),e(Qd,yhr),e(Qd,V4e),e(V4e,xhr),e(Qd,$hr),e(Qd,tH),e(tH,khr),e(Qd,Shr),e(Lt,Rhr),M(kT,Lt,null),e(Jo,Phr),e(Jo,uo),M(l9,uo,null),e(uo,Bhr),e(uo,X4e),e(X4e,Nhr),e(uo,Ihr),e(uo,en),e(en,qhr),e(en,z4e),e(z4e,jhr),e(en,Dhr),e(en,Q4e),e(Q4e,Ghr),e(en,Ohr),e(en,W4e),e(W4e,Vhr),e(en,Xhr),e(uo,zhr),e(uo,i9),e(i9,ST),e(ST,H4e),e(H4e,Qhr),e(ST,Whr),e(ST,aH),e(aH,Hhr),e(ST,Uhr),e(i9,Jhr),e(i9,RT),e(RT,U4e),e(U4e,Yhr),e(RT,Khr),e(RT,nH),e(nH,Zhr),e(RT,epr),e(uo,opr),e(uo,PT),e(PT,rpr),e(PT,J4e),e(J4e,tpr),e(PT,apr),e(PT,Y4e),e(Y4e,npr),e(uo,spr),M(BT,uo,null),b(f,EVe,u),b(f,Wd,u),e(Wd,NT),e(NT,K4e),M(d9,K4e,null),e(Wd,lpr),e(Wd,Z4e),e(Z4e,ipr),b(f,CVe,u),b(f,Yo,u),M(c9,Yo,null),e(Yo,dpr),e(Yo,Hd),e(Hd,cpr),e(Hd,sH),e(sH,fpr),e(Hd,mpr),e(Hd,lH),e(lH,gpr),e(Hd,hpr),e(Yo,ppr),e(Yo,f9),e(f9,_pr),e(f9,e5e),e(e5e,upr),e(f9,bpr),e(Yo,vpr),e(Yo,yt),M(m9,yt,null),e(yt,Fpr),e(yt,o5e),e(o5e,Tpr),e(yt,Mpr),e(yt,Ud),e(Ud,Epr),e(Ud,r5e),e(r5e,Cpr),e(Ud,wpr),e(Ud,iH),e(iH,Apr),e(Ud,Lpr),e(yt,ypr),M(IT,yt,null),e(Yo,xpr),e(Yo,bo),M(g9,bo,null),e(bo,$pr),e(bo,t5e),e(t5e,kpr),e(bo,Spr),e(bo,on),e(on,Rpr),e(on,a5e),e(a5e,Ppr),e(on,Bpr),e(on,n5e),e(n5e,Npr),e(on,Ipr),e(on,s5e),e(s5e,qpr),e(on,jpr),e(bo,Dpr),e(bo,l5e),e(l5e,qT),e(qT,i5e),e(i5e,Gpr),e(qT,Opr),e(qT,dH),e(dH,Vpr),e(qT,Xpr),e(bo,zpr),e(bo,jT),e(jT,Qpr),e(jT,d5e),e(d5e,Wpr),e(jT,Hpr),e(jT,c5e),e(c5e,Upr),e(bo,Jpr),M(DT,bo,null),b(f,wVe,u),b(f,Jd,u),e(Jd,GT),e(GT,f5e),M(h9,f5e,null),e(Jd,Ypr),e(Jd,m5e),e(m5e,Kpr),b(f,AVe,u),b(f,Ko,u),M(p9,Ko,null),e(Ko,Zpr),e(Ko,Yd),e(Yd,e_r),e(Yd,cH),e(cH,o_r),e(Yd,r_r),e(Yd,fH),e(fH,t_r),e(Yd,a_r),e(Ko,n_r),e(Ko,_9),e(_9,s_r),e(_9,g5e),e(g5e,l_r),e(_9,i_r),e(Ko,d_r),e(Ko,xt),M(u9,xt,null),e(xt,c_r),e(xt,h5e),e(h5e,f_r),e(xt,m_r),e(xt,Kd),e(Kd,g_r),e(Kd,p5e),e(p5e,h_r),e(Kd,p_r),e(Kd,mH),e(mH,__r),e(Kd,u_r),e(xt,b_r),M(OT,xt,null),e(Ko,v_r),e(Ko,vo),M(b9,vo,null),e(vo,F_r),e(vo,_5e),e(_5e,T_r),e(vo,M_r),e(vo,rn),e(rn,E_r),e(rn,u5e),e(u5e,C_r),e(rn,w_r),e(rn,b5e),e(b5e,A_r),e(rn,L_r),e(rn,v5e),e(v5e,y_r),e(rn,x_r),e(vo,$_r),e(vo,rt),e(rt,VT),e(VT,F5e),e(F5e,k_r),e(VT,S_r),e(VT,gH),e(gH,R_r),e(VT,P_r),e(rt,B_r),e(rt,XT),e(XT,T5e),e(T5e,N_r),e(XT,I_r),e(XT,hH),e(hH,q_r),e(XT,j_r),e(rt,D_r),e(rt,zT),e(zT,M5e),e(M5e,G_r),e(zT,O_r),e(zT,pH),e(pH,V_r),e(zT,X_r),e(rt,z_r),e(rt,QT),e(QT,E5e),e(E5e,Q_r),e(QT,W_r),e(QT,_H),e(_H,H_r),e(QT,U_r),e(rt,J_r),e(rt,WT),e(WT,C5e),e(C5e,Y_r),e(WT,K_r),e(WT,uH),e(uH,Z_r),e(WT,eur),e(vo,our),e(vo,HT),e(HT,rur),e(HT,w5e),e(w5e,tur),e(HT,aur),e(HT,A5e),e(A5e,nur),e(vo,sur),M(UT,vo,null),b(f,LVe,u),b(f,Zd,u),e(Zd,JT),e(JT,L5e),M(v9,L5e,null),e(Zd,lur),e(Zd,y5e),e(y5e,iur),b(f,yVe,u),b(f,Zo,u),M(F9,Zo,null),e(Zo,dur),e(Zo,ec),e(ec,cur),e(ec,bH),e(bH,fur),e(ec,mur),e(ec,vH),e(vH,gur),e(ec,hur),e(Zo,pur),e(Zo,T9),e(T9,_ur),e(T9,x5e),e(x5e,uur),e(T9,bur),e(Zo,vur),e(Zo,$t),M(M9,$t,null),e($t,Fur),e($t,$5e),e($5e,Tur),e($t,Mur),e($t,oc),e(oc,Eur),e(oc,k5e),e(k5e,Cur),e(oc,wur),e(oc,FH),e(FH,Aur),e(oc,Lur),e($t,yur),M(YT,$t,null),e(Zo,xur),e(Zo,Fo),M(E9,Fo,null),e(Fo,$ur),e(Fo,S5e),e(S5e,kur),e(Fo,Sur),e(Fo,tn),e(tn,Rur),e(tn,R5e),e(R5e,Pur),e(tn,Bur),e(tn,P5e),e(P5e,Nur),e(tn,Iur),e(tn,B5e),e(B5e,qur),e(tn,jur),e(Fo,Dur),e(Fo,N5e),e(N5e,KT),e(KT,I5e),e(I5e,Gur),e(KT,Our),e(KT,TH),e(TH,Vur),e(KT,Xur),e(Fo,zur),e(Fo,ZT),e(ZT,Qur),e(ZT,q5e),e(q5e,Wur),e(ZT,Hur),e(ZT,j5e),e(j5e,Uur),e(Fo,Jur),M(e7,Fo,null),b(f,xVe,u),b(f,rc,u),e(rc,o7),e(o7,D5e),M(C9,D5e,null),e(rc,Yur),e(rc,G5e),e(G5e,Kur),b(f,$Ve,u),b(f,er,u),M(w9,er,null),e(er,Zur),e(er,tc),e(tc,e1r),e(tc,MH),e(MH,o1r),e(tc,r1r),e(tc,EH),e(EH,t1r),e(tc,a1r),e(er,n1r),e(er,A9),e(A9,s1r),e(A9,O5e),e(O5e,l1r),e(A9,i1r),e(er,d1r),e(er,kt),M(L9,kt,null),e(kt,c1r),e(kt,V5e),e(V5e,f1r),e(kt,m1r),e(kt,ac),e(ac,g1r),e(ac,X5e),e(X5e,h1r),e(ac,p1r),e(ac,CH),e(CH,_1r),e(ac,u1r),e(kt,b1r),M(r7,kt,null),e(er,v1r),e(er,yr),M(y9,yr,null),e(yr,F1r),e(yr,z5e),e(z5e,T1r),e(yr,M1r),e(yr,an),e(an,E1r),e(an,Q5e),e(Q5e,C1r),e(an,w1r),e(an,W5e),e(W5e,A1r),e(an,L1r),e(an,H5e),e(H5e,y1r),e(an,x1r),e(yr,$1r),e(yr,j),e(j,t7),e(t7,U5e),e(U5e,k1r),e(t7,S1r),e(t7,wH),e(wH,R1r),e(t7,P1r),e(j,B1r),e(j,a7),e(a7,J5e),e(J5e,N1r),e(a7,I1r),e(a7,AH),e(AH,q1r),e(a7,j1r),e(j,D1r),e(j,n7),e(n7,Y5e),e(Y5e,G1r),e(n7,O1r),e(n7,LH),e(LH,V1r),e(n7,X1r),e(j,z1r),e(j,s7),e(s7,K5e),e(K5e,Q1r),e(s7,W1r),e(s7,yH),e(yH,H1r),e(s7,U1r),e(j,J1r),e(j,l7),e(l7,Z5e),e(Z5e,Y1r),e(l7,K1r),e(l7,xH),e(xH,Z1r),e(l7,e2r),e(j,o2r),e(j,i7),e(i7,eve),e(eve,r2r),e(i7,t2r),e(i7,$H),e($H,a2r),e(i7,n2r),e(j,s2r),e(j,d7),e(d7,ove),e(ove,l2r),e(d7,i2r),e(d7,kH),e(kH,d2r),e(d7,c2r),e(j,f2r),e(j,c7),e(c7,rve),e(rve,m2r),e(c7,g2r),e(c7,SH),e(SH,h2r),e(c7,p2r),e(j,_2r),e(j,f7),e(f7,tve),e(tve,u2r),e(f7,b2r),e(f7,RH),e(RH,v2r),e(f7,F2r),e(j,T2r),e(j,m7),e(m7,ave),e(ave,M2r),e(m7,E2r),e(m7,PH),e(PH,C2r),e(m7,w2r),e(j,A2r),e(j,g7),e(g7,nve),e(nve,L2r),e(g7,y2r),e(g7,BH),e(BH,x2r),e(g7,$2r),e(j,k2r),e(j,h7),e(h7,sve),e(sve,S2r),e(h7,R2r),e(h7,NH),e(NH,P2r),e(h7,B2r),e(j,N2r),e(j,p7),e(p7,lve),e(lve,I2r),e(p7,q2r),e(p7,IH),e(IH,j2r),e(p7,D2r),e(j,G2r),e(j,_7),e(_7,ive),e(ive,O2r),e(_7,V2r),e(_7,qH),e(qH,X2r),e(_7,z2r),e(j,Q2r),e(j,u7),e(u7,dve),e(dve,W2r),e(u7,H2r),e(u7,jH),e(jH,U2r),e(u7,J2r),e(j,Y2r),e(j,b7),e(b7,cve),e(cve,K2r),e(b7,Z2r),e(b7,DH),e(DH,ebr),e(b7,obr),e(j,rbr),e(j,v7),e(v7,fve),e(fve,tbr),e(v7,abr),e(v7,GH),e(GH,nbr),e(v7,sbr),e(j,lbr),e(j,Ws),e(Ws,mve),e(mve,ibr),e(Ws,dbr),e(Ws,OH),e(OH,cbr),e(Ws,fbr),e(Ws,VH),e(VH,mbr),e(Ws,gbr),e(j,hbr),e(j,F7),e(F7,gve),e(gve,pbr),e(F7,_br),e(F7,XH),e(XH,ubr),e(F7,bbr),e(j,vbr),e(j,T7),e(T7,hve),e(hve,Fbr),e(T7,Tbr),e(T7,zH),e(zH,Mbr),e(T7,Ebr),e(j,Cbr),e(j,M7),e(M7,pve),e(pve,wbr),e(M7,Abr),e(M7,QH),e(QH,Lbr),e(M7,ybr),e(j,xbr),e(j,E7),e(E7,_ve),e(_ve,$br),e(E7,kbr),e(E7,WH),e(WH,Sbr),e(E7,Rbr),e(j,Pbr),e(j,C7),e(C7,uve),e(uve,Bbr),e(C7,Nbr),e(C7,HH),e(HH,Ibr),e(C7,qbr),e(j,jbr),e(j,w7),e(w7,bve),e(bve,Dbr),e(w7,Gbr),e(w7,UH),e(UH,Obr),e(w7,Vbr),e(j,Xbr),e(j,A7),e(A7,vve),e(vve,zbr),e(A7,Qbr),e(A7,JH),e(JH,Wbr),e(A7,Hbr),e(j,Ubr),e(j,L7),e(L7,Fve),e(Fve,Jbr),e(L7,Ybr),e(L7,YH),e(YH,Kbr),e(L7,Zbr),e(j,e4r),e(j,y7),e(y7,Tve),e(Tve,o4r),e(y7,r4r),e(y7,KH),e(KH,t4r),e(y7,a4r),e(j,n4r),e(j,x7),e(x7,Mve),e(Mve,s4r),e(x7,l4r),e(x7,ZH),e(ZH,i4r),e(x7,d4r),e(j,c4r),e(j,$7),e($7,Eve),e(Eve,f4r),e($7,m4r),e($7,eU),e(eU,g4r),e($7,h4r),e(j,p4r),e(j,k7),e(k7,Cve),e(Cve,_4r),e(k7,u4r),e(k7,oU),e(oU,b4r),e(k7,v4r),e(j,F4r),e(j,S7),e(S7,wve),e(wve,T4r),e(S7,M4r),e(S7,rU),e(rU,E4r),e(S7,C4r),e(j,w4r),e(j,R7),e(R7,Ave),e(Ave,A4r),e(R7,L4r),e(R7,tU),e(tU,y4r),e(R7,x4r),e(j,$4r),e(j,P7),e(P7,Lve),e(Lve,k4r),e(P7,S4r),e(P7,aU),e(aU,R4r),e(P7,P4r),e(j,B4r),e(j,B7),e(B7,yve),e(yve,N4r),e(B7,I4r),e(B7,nU),e(nU,q4r),e(B7,j4r),e(j,D4r),e(j,N7),e(N7,xve),e(xve,G4r),e(N7,O4r),e(N7,sU),e(sU,V4r),e(N7,X4r),e(j,z4r),e(j,I7),e(I7,$ve),e($ve,Q4r),e(I7,W4r),e(I7,lU),e(lU,H4r),e(I7,U4r),e(j,J4r),e(j,q7),e(q7,kve),e(kve,Y4r),e(q7,K4r),e(q7,iU),e(iU,Z4r),e(q7,e5r),e(j,o5r),e(j,j7),e(j7,Sve),e(Sve,r5r),e(j7,t5r),e(j7,dU),e(dU,a5r),e(j7,n5r),e(j,s5r),e(j,D7),e(D7,Rve),e(Rve,l5r),e(D7,i5r),e(D7,cU),e(cU,d5r),e(D7,c5r),e(j,f5r),e(j,G7),e(G7,Pve),e(Pve,m5r),e(G7,g5r),e(G7,fU),e(fU,h5r),e(G7,p5r),e(j,_5r),e(j,O7),e(O7,Bve),e(Bve,u5r),e(O7,b5r),e(O7,mU),e(mU,v5r),e(O7,F5r),e(j,T5r),e(j,V7),e(V7,Nve),e(Nve,M5r),e(V7,E5r),e(V7,gU),e(gU,C5r),e(V7,w5r),e(j,A5r),e(j,X7),e(X7,Ive),e(Ive,L5r),e(X7,y5r),e(X7,hU),e(hU,x5r),e(X7,$5r),e(j,k5r),e(j,z7),e(z7,qve),e(qve,S5r),e(z7,R5r),e(z7,pU),e(pU,P5r),e(z7,B5r),e(j,N5r),e(j,Q7),e(Q7,jve),e(jve,I5r),e(Q7,q5r),e(Q7,_U),e(_U,j5r),e(Q7,D5r),e(j,G5r),e(j,W7),e(W7,Dve),e(Dve,O5r),e(W7,V5r),e(W7,uU),e(uU,X5r),e(W7,z5r),e(j,Q5r),e(j,H7),e(H7,Gve),e(Gve,W5r),e(H7,H5r),e(H7,bU),e(bU,U5r),e(H7,J5r),e(yr,Y5r),M(U7,yr,null),b(f,kVe,u),b(f,nc,u),e(nc,J7),e(J7,Ove),M(x9,Ove,null),e(nc,K5r),e(nc,Vve),e(Vve,Z5r),b(f,SVe,u),b(f,or,u),M($9,or,null),e(or,evr),e(or,sc),e(sc,ovr),e(sc,vU),e(vU,rvr),e(sc,tvr),e(sc,FU),e(FU,avr),e(sc,nvr),e(or,svr),e(or,k9),e(k9,lvr),e(k9,Xve),e(Xve,ivr),e(k9,dvr),e(or,cvr),e(or,St),M(S9,St,null),e(St,fvr),e(St,zve),e(zve,mvr),e(St,gvr),e(St,lc),e(lc,hvr),e(lc,Qve),e(Qve,pvr),e(lc,_vr),e(lc,TU),e(TU,uvr),e(lc,bvr),e(St,vvr),M(Y7,St,null),e(or,Fvr),e(or,xr),M(R9,xr,null),e(xr,Tvr),e(xr,Wve),e(Wve,Mvr),e(xr,Evr),e(xr,nn),e(nn,Cvr),e(nn,Hve),e(Hve,wvr),e(nn,Avr),e(nn,Uve),e(Uve,Lvr),e(nn,yvr),e(nn,Jve),e(Jve,xvr),e(nn,$vr),e(xr,kvr),e(xr,se),e(se,K7),e(K7,Yve),e(Yve,Svr),e(K7,Rvr),e(K7,MU),e(MU,Pvr),e(K7,Bvr),e(se,Nvr),e(se,Z7),e(Z7,Kve),e(Kve,Ivr),e(Z7,qvr),e(Z7,EU),e(EU,jvr),e(Z7,Dvr),e(se,Gvr),e(se,e8),e(e8,Zve),e(Zve,Ovr),e(e8,Vvr),e(e8,CU),e(CU,Xvr),e(e8,zvr),e(se,Qvr),e(se,o8),e(o8,eFe),e(eFe,Wvr),e(o8,Hvr),e(o8,wU),e(wU,Uvr),e(o8,Jvr),e(se,Yvr),e(se,r8),e(r8,oFe),e(oFe,Kvr),e(r8,Zvr),e(r8,AU),e(AU,eFr),e(r8,oFr),e(se,rFr),e(se,t8),e(t8,rFe),e(rFe,tFr),e(t8,aFr),e(t8,LU),e(LU,nFr),e(t8,sFr),e(se,lFr),e(se,a8),e(a8,tFe),e(tFe,iFr),e(a8,dFr),e(a8,yU),e(yU,cFr),e(a8,fFr),e(se,mFr),e(se,n8),e(n8,aFe),e(aFe,gFr),e(n8,hFr),e(n8,xU),e(xU,pFr),e(n8,_Fr),e(se,uFr),e(se,s8),e(s8,nFe),e(nFe,bFr),e(s8,vFr),e(s8,$U),e($U,FFr),e(s8,TFr),e(se,MFr),e(se,l8),e(l8,sFe),e(sFe,EFr),e(l8,CFr),e(l8,kU),e(kU,wFr),e(l8,AFr),e(se,LFr),e(se,i8),e(i8,lFe),e(lFe,yFr),e(i8,xFr),e(i8,SU),e(SU,$Fr),e(i8,kFr),e(se,SFr),e(se,d8),e(d8,iFe),e(iFe,RFr),e(d8,PFr),e(d8,RU),e(RU,BFr),e(d8,NFr),e(se,IFr),e(se,c8),e(c8,dFe),e(dFe,qFr),e(c8,jFr),e(c8,PU),e(PU,DFr),e(c8,GFr),e(se,OFr),e(se,f8),e(f8,cFe),e(cFe,VFr),e(f8,XFr),e(f8,BU),e(BU,zFr),e(f8,QFr),e(se,WFr),e(se,m8),e(m8,fFe),e(fFe,HFr),e(m8,UFr),e(m8,NU),e(NU,JFr),e(m8,YFr),e(se,KFr),e(se,g8),e(g8,mFe),e(mFe,ZFr),e(g8,eTr),e(g8,IU),e(IU,oTr),e(g8,rTr),e(se,tTr),e(se,h8),e(h8,gFe),e(gFe,aTr),e(h8,nTr),e(h8,qU),e(qU,sTr),e(h8,lTr),e(se,iTr),e(se,p8),e(p8,hFe),e(hFe,dTr),e(p8,cTr),e(p8,jU),e(jU,fTr),e(p8,mTr),e(se,gTr),e(se,_8),e(_8,pFe),e(pFe,hTr),e(_8,pTr),e(_8,DU),e(DU,_Tr),e(_8,uTr),e(se,bTr),e(se,u8),e(u8,_Fe),e(_Fe,vTr),e(u8,FTr),e(u8,GU),e(GU,TTr),e(u8,MTr),e(se,ETr),e(se,b8),e(b8,uFe),e(uFe,CTr),e(b8,wTr),e(b8,OU),e(OU,ATr),e(b8,LTr),e(se,yTr),e(se,v8),e(v8,bFe),e(bFe,xTr),e(v8,$Tr),e(v8,VU),e(VU,kTr),e(v8,STr),e(se,RTr),e(se,F8),e(F8,vFe),e(vFe,PTr),e(F8,BTr),e(F8,XU),e(XU,NTr),e(F8,ITr),e(xr,qTr),M(T8,xr,null),b(f,RVe,u),b(f,ic,u),e(ic,M8),e(M8,FFe),M(P9,FFe,null),e(ic,jTr),e(ic,TFe),e(TFe,DTr),b(f,PVe,u),b(f,rr,u),M(B9,rr,null),e(rr,GTr),e(rr,dc),e(dc,OTr),e(dc,zU),e(zU,VTr),e(dc,XTr),e(dc,QU),e(QU,zTr),e(dc,QTr),e(rr,WTr),e(rr,N9),e(N9,HTr),e(N9,MFe),e(MFe,UTr),e(N9,JTr),e(rr,YTr),e(rr,Rt),M(I9,Rt,null),e(Rt,KTr),e(Rt,EFe),e(EFe,ZTr),e(Rt,e7r),e(Rt,cc),e(cc,o7r),e(cc,CFe),e(CFe,r7r),e(cc,t7r),e(cc,WU),e(WU,a7r),e(cc,n7r),e(Rt,s7r),M(E8,Rt,null),e(rr,l7r),e(rr,$r),M(q9,$r,null),e($r,i7r),e($r,wFe),e(wFe,d7r),e($r,c7r),e($r,sn),e(sn,f7r),e(sn,AFe),e(AFe,m7r),e(sn,g7r),e(sn,LFe),e(LFe,h7r),e(sn,p7r),e(sn,yFe),e(yFe,_7r),e(sn,u7r),e($r,b7r),e($r,Me),e(Me,C8),e(C8,xFe),e(xFe,v7r),e(C8,F7r),e(C8,HU),e(HU,T7r),e(C8,M7r),e(Me,E7r),e(Me,w8),e(w8,$Fe),e($Fe,C7r),e(w8,w7r),e(w8,UU),e(UU,A7r),e(w8,L7r),e(Me,y7r),e(Me,A8),e(A8,kFe),e(kFe,x7r),e(A8,$7r),e(A8,JU),e(JU,k7r),e(A8,S7r),e(Me,R7r),e(Me,L8),e(L8,SFe),e(SFe,P7r),e(L8,B7r),e(L8,YU),e(YU,N7r),e(L8,I7r),e(Me,q7r),e(Me,y8),e(y8,RFe),e(RFe,j7r),e(y8,D7r),e(y8,KU),e(KU,G7r),e(y8,O7r),e(Me,V7r),e(Me,x8),e(x8,PFe),e(PFe,X7r),e(x8,z7r),e(x8,ZU),e(ZU,Q7r),e(x8,W7r),e(Me,H7r),e(Me,$8),e($8,BFe),e(BFe,U7r),e($8,J7r),e($8,eJ),e(eJ,Y7r),e($8,K7r),e(Me,Z7r),e(Me,k8),e(k8,NFe),e(NFe,e8r),e(k8,o8r),e(k8,oJ),e(oJ,r8r),e(k8,t8r),e(Me,a8r),e(Me,S8),e(S8,IFe),e(IFe,n8r),e(S8,s8r),e(S8,rJ),e(rJ,l8r),e(S8,i8r),e(Me,d8r),e(Me,R8),e(R8,qFe),e(qFe,c8r),e(R8,f8r),e(R8,tJ),e(tJ,m8r),e(R8,g8r),e(Me,h8r),e(Me,P8),e(P8,jFe),e(jFe,p8r),e(P8,_8r),e(P8,aJ),e(aJ,u8r),e(P8,b8r),e(Me,v8r),e(Me,B8),e(B8,DFe),e(DFe,F8r),e(B8,T8r),e(B8,nJ),e(nJ,M8r),e(B8,E8r),e(Me,C8r),e(Me,N8),e(N8,GFe),e(GFe,w8r),e(N8,A8r),e(N8,sJ),e(sJ,L8r),e(N8,y8r),e($r,x8r),M(I8,$r,null),b(f,BVe,u),b(f,fc,u),e(fc,q8),e(q8,OFe),M(j9,OFe,null),e(fc,$8r),e(fc,VFe),e(VFe,k8r),b(f,NVe,u),b(f,tr,u),M(D9,tr,null),e(tr,S8r),e(tr,mc),e(mc,R8r),e(mc,lJ),e(lJ,P8r),e(mc,B8r),e(mc,iJ),e(iJ,N8r),e(mc,I8r),e(tr,q8r),e(tr,G9),e(G9,j8r),e(G9,XFe),e(XFe,D8r),e(G9,G8r),e(tr,O8r),e(tr,Pt),M(O9,Pt,null),e(Pt,V8r),e(Pt,zFe),e(zFe,X8r),e(Pt,z8r),e(Pt,gc),e(gc,Q8r),e(gc,QFe),e(QFe,W8r),e(gc,H8r),e(gc,dJ),e(dJ,U8r),e(gc,J8r),e(Pt,Y8r),M(j8,Pt,null),e(tr,K8r),e(tr,kr),M(V9,kr,null),e(kr,Z8r),e(kr,WFe),e(WFe,eMr),e(kr,oMr),e(kr,ln),e(ln,rMr),e(ln,HFe),e(HFe,tMr),e(ln,aMr),e(ln,UFe),e(UFe,nMr),e(ln,sMr),e(ln,JFe),e(JFe,lMr),e(ln,iMr),e(kr,dMr),e(kr,dn),e(dn,D8),e(D8,YFe),e(YFe,cMr),e(D8,fMr),e(D8,cJ),e(cJ,mMr),e(D8,gMr),e(dn,hMr),e(dn,G8),e(G8,KFe),e(KFe,pMr),e(G8,_Mr),e(G8,fJ),e(fJ,uMr),e(G8,bMr),e(dn,vMr),e(dn,O8),e(O8,ZFe),e(ZFe,FMr),e(O8,TMr),e(O8,mJ),e(mJ,MMr),e(O8,EMr),e(dn,CMr),e(dn,V8),e(V8,eTe),e(eTe,wMr),e(V8,AMr),e(V8,gJ),e(gJ,LMr),e(V8,yMr),e(kr,xMr),M(X8,kr,null),b(f,IVe,u),b(f,hc,u),e(hc,z8),e(z8,oTe),M(X9,oTe,null),e(hc,$Mr),e(hc,rTe),e(rTe,kMr),b(f,qVe,u),b(f,ar,u),M(z9,ar,null),e(ar,SMr),e(ar,pc),e(pc,RMr),e(pc,hJ),e(hJ,PMr),e(pc,BMr),e(pc,pJ),e(pJ,NMr),e(pc,IMr),e(ar,qMr),e(ar,Q9),e(Q9,jMr),e(Q9,tTe),e(tTe,DMr),e(Q9,GMr),e(ar,OMr),e(ar,Bt),M(W9,Bt,null),e(Bt,VMr),e(Bt,aTe),e(aTe,XMr),e(Bt,zMr),e(Bt,_c),e(_c,QMr),e(_c,nTe),e(nTe,WMr),e(_c,HMr),e(_c,_J),e(_J,UMr),e(_c,JMr),e(Bt,YMr),M(Q8,Bt,null),e(ar,KMr),e(ar,Sr),M(H9,Sr,null),e(Sr,ZMr),e(Sr,sTe),e(sTe,eEr),e(Sr,oEr),e(Sr,cn),e(cn,rEr),e(cn,lTe),e(lTe,tEr),e(cn,aEr),e(cn,iTe),e(iTe,nEr),e(cn,sEr),e(cn,dTe),e(dTe,lEr),e(cn,iEr),e(Sr,dEr),e(Sr,ie),e(ie,W8),e(W8,cTe),e(cTe,cEr),e(W8,fEr),e(W8,uJ),e(uJ,mEr),e(W8,gEr),e(ie,hEr),e(ie,H8),e(H8,fTe),e(fTe,pEr),e(H8,_Er),e(H8,bJ),e(bJ,uEr),e(H8,bEr),e(ie,vEr),e(ie,U8),e(U8,mTe),e(mTe,FEr),e(U8,TEr),e(U8,vJ),e(vJ,MEr),e(U8,EEr),e(ie,CEr),e(ie,J8),e(J8,gTe),e(gTe,wEr),e(J8,AEr),e(J8,FJ),e(FJ,LEr),e(J8,yEr),e(ie,xEr),e(ie,Y8),e(Y8,hTe),e(hTe,$Er),e(Y8,kEr),e(Y8,TJ),e(TJ,SEr),e(Y8,REr),e(ie,PEr),e(ie,K8),e(K8,pTe),e(pTe,BEr),e(K8,NEr),e(K8,MJ),e(MJ,IEr),e(K8,qEr),e(ie,jEr),e(ie,Z8),e(Z8,_Te),e(_Te,DEr),e(Z8,GEr),e(Z8,EJ),e(EJ,OEr),e(Z8,VEr),e(ie,XEr),e(ie,eM),e(eM,uTe),e(uTe,zEr),e(eM,QEr),e(eM,CJ),e(CJ,WEr),e(eM,HEr),e(ie,UEr),e(ie,oM),e(oM,bTe),e(bTe,JEr),e(oM,YEr),e(oM,wJ),e(wJ,KEr),e(oM,ZEr),e(ie,eCr),e(ie,rM),e(rM,vTe),e(vTe,oCr),e(rM,rCr),e(rM,AJ),e(AJ,tCr),e(rM,aCr),e(ie,nCr),e(ie,tM),e(tM,FTe),e(FTe,sCr),e(tM,lCr),e(tM,LJ),e(LJ,iCr),e(tM,dCr),e(ie,cCr),e(ie,aM),e(aM,TTe),e(TTe,fCr),e(aM,mCr),e(aM,yJ),e(yJ,gCr),e(aM,hCr),e(ie,pCr),e(ie,nM),e(nM,MTe),e(MTe,_Cr),e(nM,uCr),e(nM,xJ),e(xJ,bCr),e(nM,vCr),e(ie,FCr),e(ie,sM),e(sM,ETe),e(ETe,TCr),e(sM,MCr),e(sM,$J),e($J,ECr),e(sM,CCr),e(ie,wCr),e(ie,lM),e(lM,CTe),e(CTe,ACr),e(lM,LCr),e(lM,kJ),e(kJ,yCr),e(lM,xCr),e(ie,$Cr),e(ie,iM),e(iM,wTe),e(wTe,kCr),e(iM,SCr),e(iM,SJ),e(SJ,RCr),e(iM,PCr),e(ie,BCr),e(ie,dM),e(dM,ATe),e(ATe,NCr),e(dM,ICr),e(dM,RJ),e(RJ,qCr),e(dM,jCr),e(ie,DCr),e(ie,cM),e(cM,LTe),e(LTe,GCr),e(cM,OCr),e(cM,PJ),e(PJ,VCr),e(cM,XCr),e(ie,zCr),e(ie,fM),e(fM,yTe),e(yTe,QCr),e(fM,WCr),e(fM,BJ),e(BJ,HCr),e(fM,UCr),e(ie,JCr),e(ie,mM),e(mM,xTe),e(xTe,YCr),e(mM,KCr),e(mM,NJ),e(NJ,ZCr),e(mM,e3r),e(Sr,o3r),M(gM,Sr,null),b(f,jVe,u),b(f,uc,u),e(uc,hM),e(hM,$Te),M(U9,$Te,null),e(uc,r3r),e(uc,kTe),e(kTe,t3r),b(f,DVe,u),b(f,nr,u),M(J9,nr,null),e(nr,a3r),e(nr,bc),e(bc,n3r),e(bc,IJ),e(IJ,s3r),e(bc,l3r),e(bc,qJ),e(qJ,i3r),e(bc,d3r),e(nr,c3r),e(nr,Y9),e(Y9,f3r),e(Y9,STe),e(STe,m3r),e(Y9,g3r),e(nr,h3r),e(nr,Nt),M(K9,Nt,null),e(Nt,p3r),e(Nt,RTe),e(RTe,_3r),e(Nt,u3r),e(Nt,vc),e(vc,b3r),e(vc,PTe),e(PTe,v3r),e(vc,F3r),e(vc,jJ),e(jJ,T3r),e(vc,M3r),e(Nt,E3r),M(pM,Nt,null),e(nr,C3r),e(nr,Rr),M(Z9,Rr,null),e(Rr,w3r),e(Rr,BTe),e(BTe,A3r),e(Rr,L3r),e(Rr,fn),e(fn,y3r),e(fn,NTe),e(NTe,x3r),e(fn,$3r),e(fn,ITe),e(ITe,k3r),e(fn,S3r),e(fn,qTe),e(qTe,R3r),e(fn,P3r),e(Rr,B3r),e(Rr,ye),e(ye,_M),e(_M,jTe),e(jTe,N3r),e(_M,I3r),e(_M,DJ),e(DJ,q3r),e(_M,j3r),e(ye,D3r),e(ye,uM),e(uM,DTe),e(DTe,G3r),e(uM,O3r),e(uM,GJ),e(GJ,V3r),e(uM,X3r),e(ye,z3r),e(ye,bM),e(bM,GTe),e(GTe,Q3r),e(bM,W3r),e(bM,OJ),e(OJ,H3r),e(bM,U3r),e(ye,J3r),e(ye,vM),e(vM,OTe),e(OTe,Y3r),e(vM,K3r),e(vM,VJ),e(VJ,Z3r),e(vM,e0r),e(ye,o0r),e(ye,FM),e(FM,VTe),e(VTe,r0r),e(FM,t0r),e(FM,XJ),e(XJ,a0r),e(FM,n0r),e(ye,s0r),e(ye,TM),e(TM,XTe),e(XTe,l0r),e(TM,i0r),e(TM,zJ),e(zJ,d0r),e(TM,c0r),e(ye,f0r),e(ye,MM),e(MM,zTe),e(zTe,m0r),e(MM,g0r),e(MM,QJ),e(QJ,h0r),e(MM,p0r),e(ye,_0r),e(ye,EM),e(EM,QTe),e(QTe,u0r),e(EM,b0r),e(EM,WJ),e(WJ,v0r),e(EM,F0r),e(ye,T0r),e(ye,CM),e(CM,WTe),e(WTe,M0r),e(CM,E0r),e(CM,HJ),e(HJ,C0r),e(CM,w0r),e(ye,A0r),e(ye,wM),e(wM,HTe),e(HTe,L0r),e(wM,y0r),e(wM,UJ),e(UJ,x0r),e(wM,$0r),e(Rr,k0r),M(AM,Rr,null),b(f,GVe,u),b(f,Fc,u),e(Fc,LM),e(LM,UTe),M(ex,UTe,null),e(Fc,S0r),e(Fc,JTe),e(JTe,R0r),b(f,OVe,u),b(f,sr,u),M(ox,sr,null),e(sr,P0r),e(sr,Tc),e(Tc,B0r),e(Tc,JJ),e(JJ,N0r),e(Tc,I0r),e(Tc,YJ),e(YJ,q0r),e(Tc,j0r),e(sr,D0r),e(sr,rx),e(rx,G0r),e(rx,YTe),e(YTe,O0r),e(rx,V0r),e(sr,X0r),e(sr,It),M(tx,It,null),e(It,z0r),e(It,KTe),e(KTe,Q0r),e(It,W0r),e(It,Mc),e(Mc,H0r),e(Mc,ZTe),e(ZTe,U0r),e(Mc,J0r),e(Mc,KJ),e(KJ,Y0r),e(Mc,K0r),e(It,Z0r),M(yM,It,null),e(sr,ewr),e(sr,Pr),M(ax,Pr,null),e(Pr,owr),e(Pr,e7e),e(e7e,rwr),e(Pr,twr),e(Pr,mn),e(mn,awr),e(mn,o7e),e(o7e,nwr),e(mn,swr),e(mn,r7e),e(r7e,lwr),e(mn,iwr),e(mn,t7e),e(t7e,dwr),e(mn,cwr),e(Pr,fwr),e(Pr,te),e(te,xM),e(xM,a7e),e(a7e,mwr),e(xM,gwr),e(xM,ZJ),e(ZJ,hwr),e(xM,pwr),e(te,_wr),e(te,$M),e($M,n7e),e(n7e,uwr),e($M,bwr),e($M,eY),e(eY,vwr),e($M,Fwr),e(te,Twr),e(te,kM),e(kM,s7e),e(s7e,Mwr),e(kM,Ewr),e(kM,oY),e(oY,Cwr),e(kM,wwr),e(te,Awr),e(te,SM),e(SM,l7e),e(l7e,Lwr),e(SM,ywr),e(SM,rY),e(rY,xwr),e(SM,$wr),e(te,kwr),e(te,RM),e(RM,i7e),e(i7e,Swr),e(RM,Rwr),e(RM,tY),e(tY,Pwr),e(RM,Bwr),e(te,Nwr),e(te,PM),e(PM,d7e),e(d7e,Iwr),e(PM,qwr),e(PM,aY),e(aY,jwr),e(PM,Dwr),e(te,Gwr),e(te,BM),e(BM,c7e),e(c7e,Owr),e(BM,Vwr),e(BM,nY),e(nY,Xwr),e(BM,zwr),e(te,Qwr),e(te,NM),e(NM,f7e),e(f7e,Wwr),e(NM,Hwr),e(NM,sY),e(sY,Uwr),e(NM,Jwr),e(te,Ywr),e(te,IM),e(IM,m7e),e(m7e,Kwr),e(IM,Zwr),e(IM,lY),e(lY,eAr),e(IM,oAr),e(te,rAr),e(te,qM),e(qM,g7e),e(g7e,tAr),e(qM,aAr),e(qM,iY),e(iY,nAr),e(qM,sAr),e(te,lAr),e(te,jM),e(jM,h7e),e(h7e,iAr),e(jM,dAr),e(jM,dY),e(dY,cAr),e(jM,fAr),e(te,mAr),e(te,DM),e(DM,p7e),e(p7e,gAr),e(DM,hAr),e(DM,cY),e(cY,pAr),e(DM,_Ar),e(te,uAr),e(te,GM),e(GM,_7e),e(_7e,bAr),e(GM,vAr),e(GM,fY),e(fY,FAr),e(GM,TAr),e(te,MAr),e(te,OM),e(OM,u7e),e(u7e,EAr),e(OM,CAr),e(OM,mY),e(mY,wAr),e(OM,AAr),e(te,LAr),e(te,VM),e(VM,b7e),e(b7e,yAr),e(VM,xAr),e(VM,gY),e(gY,$Ar),e(VM,kAr),e(te,SAr),e(te,XM),e(XM,v7e),e(v7e,RAr),e(XM,PAr),e(XM,hY),e(hY,BAr),e(XM,NAr),e(te,IAr),e(te,zM),e(zM,F7e),e(F7e,qAr),e(zM,jAr),e(zM,pY),e(pY,DAr),e(zM,GAr),e(te,OAr),e(te,QM),e(QM,T7e),e(T7e,VAr),e(QM,XAr),e(QM,_Y),e(_Y,zAr),e(QM,QAr),e(te,WAr),e(te,WM),e(WM,M7e),e(M7e,HAr),e(WM,UAr),e(WM,uY),e(uY,JAr),e(WM,YAr),e(te,KAr),e(te,HM),e(HM,E7e),e(E7e,ZAr),e(HM,e6r),e(HM,bY),e(bY,o6r),e(HM,r6r),e(te,t6r),e(te,UM),e(UM,C7e),e(C7e,a6r),e(UM,n6r),e(UM,vY),e(vY,s6r),e(UM,l6r),e(te,i6r),e(te,JM),e(JM,w7e),e(w7e,d6r),e(JM,c6r),e(JM,FY),e(FY,f6r),e(JM,m6r),e(te,g6r),e(te,YM),e(YM,A7e),e(A7e,h6r),e(YM,p6r),e(YM,TY),e(TY,_6r),e(YM,u6r),e(te,b6r),e(te,KM),e(KM,L7e),e(L7e,v6r),e(KM,F6r),e(KM,MY),e(MY,T6r),e(KM,M6r),e(te,E6r),e(te,ZM),e(ZM,y7e),e(y7e,C6r),e(ZM,w6r),e(ZM,EY),e(EY,A6r),e(ZM,L6r),e(te,y6r),e(te,eE),e(eE,x7e),e(x7e,x6r),e(eE,$6r),e(eE,CY),e(CY,k6r),e(eE,S6r),e(Pr,R6r),M(oE,Pr,null),b(f,VVe,u),b(f,Ec,u),e(Ec,rE),e(rE,$7e),M(nx,$7e,null),e(Ec,P6r),e(Ec,k7e),e(k7e,B6r),b(f,XVe,u),b(f,lr,u),M(sx,lr,null),e(lr,N6r),e(lr,Cc),e(Cc,I6r),e(Cc,wY),e(wY,q6r),e(Cc,j6r),e(Cc,AY),e(AY,D6r),e(Cc,G6r),e(lr,O6r),e(lr,lx),e(lx,V6r),e(lx,S7e),e(S7e,X6r),e(lx,z6r),e(lr,Q6r),e(lr,qt),M(ix,qt,null),e(qt,W6r),e(qt,R7e),e(R7e,H6r),e(qt,U6r),e(qt,wc),e(wc,J6r),e(wc,P7e),e(P7e,Y6r),e(wc,K6r),e(wc,LY),e(LY,Z6r),e(wc,eLr),e(qt,oLr),M(tE,qt,null),e(lr,rLr),e(lr,Br),M(dx,Br,null),e(Br,tLr),e(Br,B7e),e(B7e,aLr),e(Br,nLr),e(Br,gn),e(gn,sLr),e(gn,N7e),e(N7e,lLr),e(gn,iLr),e(gn,I7e),e(I7e,dLr),e(gn,cLr),e(gn,q7e),e(q7e,fLr),e(gn,mLr),e(Br,gLr),e(Br,_e),e(_e,aE),e(aE,j7e),e(j7e,hLr),e(aE,pLr),e(aE,yY),e(yY,_Lr),e(aE,uLr),e(_e,bLr),e(_e,nE),e(nE,D7e),e(D7e,vLr),e(nE,FLr),e(nE,xY),e(xY,TLr),e(nE,MLr),e(_e,ELr),e(_e,sE),e(sE,G7e),e(G7e,CLr),e(sE,wLr),e(sE,$Y),e($Y,ALr),e(sE,LLr),e(_e,yLr),e(_e,lE),e(lE,O7e),e(O7e,xLr),e(lE,$Lr),e(lE,kY),e(kY,kLr),e(lE,SLr),e(_e,RLr),e(_e,iE),e(iE,V7e),e(V7e,PLr),e(iE,BLr),e(iE,SY),e(SY,NLr),e(iE,ILr),e(_e,qLr),e(_e,dE),e(dE,X7e),e(X7e,jLr),e(dE,DLr),e(dE,RY),e(RY,GLr),e(dE,OLr),e(_e,VLr),e(_e,cE),e(cE,z7e),e(z7e,XLr),e(cE,zLr),e(cE,PY),e(PY,QLr),e(cE,WLr),e(_e,HLr),e(_e,fE),e(fE,Q7e),e(Q7e,ULr),e(fE,JLr),e(fE,BY),e(BY,YLr),e(fE,KLr),e(_e,ZLr),e(_e,mE),e(mE,W7e),e(W7e,eyr),e(mE,oyr),e(mE,NY),e(NY,ryr),e(mE,tyr),e(_e,ayr),e(_e,gE),e(gE,H7e),e(H7e,nyr),e(gE,syr),e(gE,IY),e(IY,lyr),e(gE,iyr),e(_e,dyr),e(_e,hE),e(hE,U7e),e(U7e,cyr),e(hE,fyr),e(hE,qY),e(qY,myr),e(hE,gyr),e(_e,hyr),e(_e,pE),e(pE,J7e),e(J7e,pyr),e(pE,_yr),e(pE,jY),e(jY,uyr),e(pE,byr),e(_e,vyr),e(_e,_E),e(_E,Y7e),e(Y7e,Fyr),e(_E,Tyr),e(_E,DY),e(DY,Myr),e(_E,Eyr),e(_e,Cyr),e(_e,uE),e(uE,K7e),e(K7e,wyr),e(uE,Ayr),e(uE,GY),e(GY,Lyr),e(uE,yyr),e(_e,xyr),e(_e,bE),e(bE,Z7e),e(Z7e,$yr),e(bE,kyr),e(bE,OY),e(OY,Syr),e(bE,Ryr),e(_e,Pyr),e(_e,vE),e(vE,e8e),e(e8e,Byr),e(vE,Nyr),e(vE,VY),e(VY,Iyr),e(vE,qyr),e(_e,jyr),e(_e,FE),e(FE,o8e),e(o8e,Dyr),e(FE,Gyr),e(FE,XY),e(XY,Oyr),e(FE,Vyr),e(Br,Xyr),M(TE,Br,null),b(f,zVe,u),b(f,Ac,u),e(Ac,ME),e(ME,r8e),M(cx,r8e,null),e(Ac,zyr),e(Ac,t8e),e(t8e,Qyr),b(f,QVe,u),b(f,ir,u),M(fx,ir,null),e(ir,Wyr),e(ir,Lc),e(Lc,Hyr),e(Lc,zY),e(zY,Uyr),e(Lc,Jyr),e(Lc,QY),e(QY,Yyr),e(Lc,Kyr),e(ir,Zyr),e(ir,mx),e(mx,e9r),e(mx,a8e),e(a8e,o9r),e(mx,r9r),e(ir,t9r),e(ir,jt),M(gx,jt,null),e(jt,a9r),e(jt,n8e),e(n8e,n9r),e(jt,s9r),e(jt,yc),e(yc,l9r),e(yc,s8e),e(s8e,i9r),e(yc,d9r),e(yc,WY),e(WY,c9r),e(yc,f9r),e(jt,m9r),M(EE,jt,null),e(ir,g9r),e(ir,Nr),M(hx,Nr,null),e(Nr,h9r),e(Nr,l8e),e(l8e,p9r),e(Nr,_9r),e(Nr,hn),e(hn,u9r),e(hn,i8e),e(i8e,b9r),e(hn,v9r),e(hn,d8e),e(d8e,F9r),e(hn,T9r),e(hn,c8e),e(c8e,M9r),e(hn,E9r),e(Nr,C9r),e(Nr,px),e(px,CE),e(CE,f8e),e(f8e,w9r),e(CE,A9r),e(CE,HY),e(HY,L9r),e(CE,y9r),e(px,x9r),e(px,wE),e(wE,m8e),e(m8e,$9r),e(wE,k9r),e(wE,UY),e(UY,S9r),e(wE,R9r),e(Nr,P9r),M(AE,Nr,null),b(f,WVe,u),b(f,xc,u),e(xc,LE),e(LE,g8e),M(_x,g8e,null),e(xc,B9r),e(xc,h8e),e(h8e,N9r),b(f,HVe,u),b(f,dr,u),M(ux,dr,null),e(dr,I9r),e(dr,$c),e($c,q9r),e($c,JY),e(JY,j9r),e($c,D9r),e($c,YY),e(YY,G9r),e($c,O9r),e(dr,V9r),e(dr,bx),e(bx,X9r),e(bx,p8e),e(p8e,z9r),e(bx,Q9r),e(dr,W9r),e(dr,Dt),M(vx,Dt,null),e(Dt,H9r),e(Dt,_8e),e(_8e,U9r),e(Dt,J9r),e(Dt,kc),e(kc,Y9r),e(kc,u8e),e(u8e,K9r),e(kc,Z9r),e(kc,KY),e(KY,exr),e(kc,oxr),e(Dt,rxr),M(yE,Dt,null),e(dr,txr),e(dr,Ir),M(Fx,Ir,null),e(Ir,axr),e(Ir,b8e),e(b8e,nxr),e(Ir,sxr),e(Ir,pn),e(pn,lxr),e(pn,v8e),e(v8e,ixr),e(pn,dxr),e(pn,F8e),e(F8e,cxr),e(pn,fxr),e(pn,T8e),e(T8e,mxr),e(pn,gxr),e(Ir,hxr),e(Ir,M8e),e(M8e,xE),e(xE,E8e),e(E8e,pxr),e(xE,_xr),e(xE,ZY),e(ZY,uxr),e(xE,bxr),e(Ir,vxr),M($E,Ir,null),b(f,UVe,u),b(f,Sc,u),e(Sc,kE),e(kE,C8e),M(Tx,C8e,null),e(Sc,Fxr),e(Sc,w8e),e(w8e,Txr),b(f,JVe,u),b(f,cr,u),M(Mx,cr,null),e(cr,Mxr),e(cr,Rc),e(Rc,Exr),e(Rc,eK),e(eK,Cxr),e(Rc,wxr),e(Rc,oK),e(oK,Axr),e(Rc,Lxr),e(cr,yxr),e(cr,Ex),e(Ex,xxr),e(Ex,A8e),e(A8e,$xr),e(Ex,kxr),e(cr,Sxr),e(cr,Gt),M(Cx,Gt,null),e(Gt,Rxr),e(Gt,L8e),e(L8e,Pxr),e(Gt,Bxr),e(Gt,Pc),e(Pc,Nxr),e(Pc,y8e),e(y8e,Ixr),e(Pc,qxr),e(Pc,rK),e(rK,jxr),e(Pc,Dxr),e(Gt,Gxr),M(SE,Gt,null),e(cr,Oxr),e(cr,qr),M(wx,qr,null),e(qr,Vxr),e(qr,x8e),e(x8e,Xxr),e(qr,zxr),e(qr,_n),e(_n,Qxr),e(_n,$8e),e($8e,Wxr),e(_n,Hxr),e(_n,k8e),e(k8e,Uxr),e(_n,Jxr),e(_n,S8e),e(S8e,Yxr),e(_n,Kxr),e(qr,Zxr),e(qr,de),e(de,RE),e(RE,R8e),e(R8e,e$r),e(RE,o$r),e(RE,tK),e(tK,r$r),e(RE,t$r),e(de,a$r),e(de,PE),e(PE,P8e),e(P8e,n$r),e(PE,s$r),e(PE,aK),e(aK,l$r),e(PE,i$r),e(de,d$r),e(de,BE),e(BE,B8e),e(B8e,c$r),e(BE,f$r),e(BE,nK),e(nK,m$r),e(BE,g$r),e(de,h$r),e(de,NE),e(NE,N8e),e(N8e,p$r),e(NE,_$r),e(NE,sK),e(sK,u$r),e(NE,b$r),e(de,v$r),e(de,IE),e(IE,I8e),e(I8e,F$r),e(IE,T$r),e(IE,lK),e(lK,M$r),e(IE,E$r),e(de,C$r),e(de,qE),e(qE,q8e),e(q8e,w$r),e(qE,A$r),e(qE,iK),e(iK,L$r),e(qE,y$r),e(de,x$r),e(de,jE),e(jE,j8e),e(j8e,$$r),e(jE,k$r),e(jE,dK),e(dK,S$r),e(jE,R$r),e(de,P$r),e(de,DE),e(DE,D8e),e(D8e,B$r),e(DE,N$r),e(DE,cK),e(cK,I$r),e(DE,q$r),e(de,j$r),e(de,GE),e(GE,G8e),e(G8e,D$r),e(GE,G$r),e(GE,fK),e(fK,O$r),e(GE,V$r),e(de,X$r),e(de,OE),e(OE,O8e),e(O8e,z$r),e(OE,Q$r),e(OE,mK),e(mK,W$r),e(OE,H$r),e(de,U$r),e(de,VE),e(VE,V8e),e(V8e,J$r),e(VE,Y$r),e(VE,gK),e(gK,K$r),e(VE,Z$r),e(de,ekr),e(de,XE),e(XE,X8e),e(X8e,okr),e(XE,rkr),e(XE,hK),e(hK,tkr),e(XE,akr),e(de,nkr),e(de,zE),e(zE,z8e),e(z8e,skr),e(zE,lkr),e(zE,pK),e(pK,ikr),e(zE,dkr),e(de,ckr),e(de,QE),e(QE,Q8e),e(Q8e,fkr),e(QE,mkr),e(QE,_K),e(_K,gkr),e(QE,hkr),e(de,pkr),e(de,WE),e(WE,W8e),e(W8e,_kr),e(WE,ukr),e(WE,uK),e(uK,bkr),e(WE,vkr),e(de,Fkr),e(de,HE),e(HE,H8e),e(H8e,Tkr),e(HE,Mkr),e(HE,bK),e(bK,Ekr),e(HE,Ckr),e(de,wkr),e(de,UE),e(UE,U8e),e(U8e,Akr),e(UE,Lkr),e(UE,vK),e(vK,ykr),e(UE,xkr),e(de,$kr),e(de,JE),e(JE,J8e),e(J8e,kkr),e(JE,Skr),e(JE,FK),e(FK,Rkr),e(JE,Pkr),e(de,Bkr),e(de,YE),e(YE,Y8e),e(Y8e,Nkr),e(YE,Ikr),e(YE,TK),e(TK,qkr),e(YE,jkr),e(de,Dkr),e(de,KE),e(KE,K8e),e(K8e,Gkr),e(KE,Okr),e(KE,MK),e(MK,Vkr),e(KE,Xkr),e(qr,zkr),M(ZE,qr,null),b(f,YVe,u),b(f,Bc,u),e(Bc,eC),e(eC,Z8e),M(Ax,Z8e,null),e(Bc,Qkr),e(Bc,eMe),e(eMe,Wkr),b(f,KVe,u),b(f,fr,u),M(Lx,fr,null),e(fr,Hkr),e(fr,Nc),e(Nc,Ukr),e(Nc,EK),e(EK,Jkr),e(Nc,Ykr),e(Nc,CK),e(CK,Kkr),e(Nc,Zkr),e(fr,eSr),e(fr,yx),e(yx,oSr),e(yx,oMe),e(oMe,rSr),e(yx,tSr),e(fr,aSr),e(fr,Ot),M(xx,Ot,null),e(Ot,nSr),e(Ot,rMe),e(rMe,sSr),e(Ot,lSr),e(Ot,Ic),e(Ic,iSr),e(Ic,tMe),e(tMe,dSr),e(Ic,cSr),e(Ic,wK),e(wK,fSr),e(Ic,mSr),e(Ot,gSr),M(oC,Ot,null),e(fr,hSr),e(fr,jr),M($x,jr,null),e(jr,pSr),e(jr,aMe),e(aMe,_Sr),e(jr,uSr),e(jr,un),e(un,bSr),e(un,nMe),e(nMe,vSr),e(un,FSr),e(un,sMe),e(sMe,TSr),e(un,MSr),e(un,lMe),e(lMe,ESr),e(un,CSr),e(jr,wSr),e(jr,ce),e(ce,rC),e(rC,iMe),e(iMe,ASr),e(rC,LSr),e(rC,AK),e(AK,ySr),e(rC,xSr),e(ce,$Sr),e(ce,tC),e(tC,dMe),e(dMe,kSr),e(tC,SSr),e(tC,LK),e(LK,RSr),e(tC,PSr),e(ce,BSr),e(ce,aC),e(aC,cMe),e(cMe,NSr),e(aC,ISr),e(aC,yK),e(yK,qSr),e(aC,jSr),e(ce,DSr),e(ce,nC),e(nC,fMe),e(fMe,GSr),e(nC,OSr),e(nC,xK),e(xK,VSr),e(nC,XSr),e(ce,zSr),e(ce,sC),e(sC,mMe),e(mMe,QSr),e(sC,WSr),e(sC,$K),e($K,HSr),e(sC,USr),e(ce,JSr),e(ce,lC),e(lC,gMe),e(gMe,YSr),e(lC,KSr),e(lC,kK),e(kK,ZSr),e(lC,eRr),e(ce,oRr),e(ce,iC),e(iC,hMe),e(hMe,rRr),e(iC,tRr),e(iC,SK),e(SK,aRr),e(iC,nRr),e(ce,sRr),e(ce,dC),e(dC,pMe),e(pMe,lRr),e(dC,iRr),e(dC,RK),e(RK,dRr),e(dC,cRr),e(ce,fRr),e(ce,cC),e(cC,_Me),e(_Me,mRr),e(cC,gRr),e(cC,PK),e(PK,hRr),e(cC,pRr),e(ce,_Rr),e(ce,fC),e(fC,uMe),e(uMe,uRr),e(fC,bRr),e(fC,BK),e(BK,vRr),e(fC,FRr),e(ce,TRr),e(ce,mC),e(mC,bMe),e(bMe,MRr),e(mC,ERr),e(mC,NK),e(NK,CRr),e(mC,wRr),e(ce,ARr),e(ce,gC),e(gC,vMe),e(vMe,LRr),e(gC,yRr),e(gC,IK),e(IK,xRr),e(gC,$Rr),e(ce,kRr),e(ce,hC),e(hC,FMe),e(FMe,SRr),e(hC,RRr),e(hC,qK),e(qK,PRr),e(hC,BRr),e(ce,NRr),e(ce,pC),e(pC,TMe),e(TMe,IRr),e(pC,qRr),e(pC,jK),e(jK,jRr),e(pC,DRr),e(ce,GRr),e(ce,_C),e(_C,MMe),e(MMe,ORr),e(_C,VRr),e(_C,DK),e(DK,XRr),e(_C,zRr),e(ce,QRr),e(ce,uC),e(uC,EMe),e(EMe,WRr),e(uC,HRr),e(uC,GK),e(GK,URr),e(uC,JRr),e(ce,YRr),e(ce,bC),e(bC,CMe),e(CMe,KRr),e(bC,ZRr),e(bC,OK),e(OK,ePr),e(bC,oPr),e(ce,rPr),e(ce,vC),e(vC,wMe),e(wMe,tPr),e(vC,aPr),e(vC,VK),e(VK,nPr),e(vC,sPr),e(ce,lPr),e(ce,FC),e(FC,AMe),e(AMe,iPr),e(FC,dPr),e(FC,XK),e(XK,cPr),e(FC,fPr),e(ce,mPr),e(ce,TC),e(TC,LMe),e(LMe,gPr),e(TC,hPr),e(TC,zK),e(zK,pPr),e(TC,_Pr),e(jr,uPr),M(MC,jr,null),b(f,ZVe,u),b(f,qc,u),e(qc,EC),e(EC,yMe),M(kx,yMe,null),e(qc,bPr),e(qc,xMe),e(xMe,vPr),b(f,eXe,u),b(f,mr,u),M(Sx,mr,null),e(mr,FPr),e(mr,jc),e(jc,TPr),e(jc,QK),e(QK,MPr),e(jc,EPr),e(jc,WK),e(WK,CPr),e(jc,wPr),e(mr,APr),e(mr,Rx),e(Rx,LPr),e(Rx,$Me),e($Me,yPr),e(Rx,xPr),e(mr,$Pr),e(mr,Vt),M(Px,Vt,null),e(Vt,kPr),e(Vt,kMe),e(kMe,SPr),e(Vt,RPr),e(Vt,Dc),e(Dc,PPr),e(Dc,SMe),e(SMe,BPr),e(Dc,NPr),e(Dc,HK),e(HK,IPr),e(Dc,qPr),e(Vt,jPr),M(CC,Vt,null),e(mr,DPr),e(mr,Dr),M(Bx,Dr,null),e(Dr,GPr),e(Dr,RMe),e(RMe,OPr),e(Dr,VPr),e(Dr,bn),e(bn,XPr),e(bn,PMe),e(PMe,zPr),e(bn,QPr),e(bn,BMe),e(BMe,WPr),e(bn,HPr),e(bn,NMe),e(NMe,UPr),e(bn,JPr),e(Dr,YPr),e(Dr,IMe),e(IMe,wC),e(wC,qMe),e(qMe,KPr),e(wC,ZPr),e(wC,UK),e(UK,eBr),e(wC,oBr),e(Dr,rBr),M(AC,Dr,null),b(f,oXe,u),b(f,Gc,u),e(Gc,LC),e(LC,jMe),M(Nx,jMe,null),e(Gc,tBr),e(Gc,DMe),e(DMe,aBr),b(f,rXe,u),b(f,gr,u),M(Ix,gr,null),e(gr,nBr),e(gr,Oc),e(Oc,sBr),e(Oc,JK),e(JK,lBr),e(Oc,iBr),e(Oc,YK),e(YK,dBr),e(Oc,cBr),e(gr,fBr),e(gr,qx),e(qx,mBr),e(qx,GMe),e(GMe,gBr),e(qx,hBr),e(gr,pBr),e(gr,Xt),M(jx,Xt,null),e(Xt,_Br),e(Xt,OMe),e(OMe,uBr),e(Xt,bBr),e(Xt,Vc),e(Vc,vBr),e(Vc,VMe),e(VMe,FBr),e(Vc,TBr),e(Vc,KK),e(KK,MBr),e(Vc,EBr),e(Xt,CBr),M(yC,Xt,null),e(gr,wBr),e(gr,Gr),M(Dx,Gr,null),e(Gr,ABr),e(Gr,XMe),e(XMe,LBr),e(Gr,yBr),e(Gr,vn),e(vn,xBr),e(vn,zMe),e(zMe,$Br),e(vn,kBr),e(vn,QMe),e(QMe,SBr),e(vn,RBr),e(vn,WMe),e(WMe,PBr),e(vn,BBr),e(Gr,NBr),e(Gr,HMe),e(HMe,xC),e(xC,UMe),e(UMe,IBr),e(xC,qBr),e(xC,ZK),e(ZK,jBr),e(xC,DBr),e(Gr,GBr),M($C,Gr,null),b(f,tXe,u),b(f,Xc,u),e(Xc,kC),e(kC,JMe),M(Gx,JMe,null),e(Xc,OBr),e(Xc,YMe),e(YMe,VBr),b(f,aXe,u),b(f,hr,u),M(Ox,hr,null),e(hr,XBr),e(hr,zc),e(zc,zBr),e(zc,eZ),e(eZ,QBr),e(zc,WBr),e(zc,oZ),e(oZ,HBr),e(zc,UBr),e(hr,JBr),e(hr,Vx),e(Vx,YBr),e(Vx,KMe),e(KMe,KBr),e(Vx,ZBr),e(hr,eNr),e(hr,zt),M(Xx,zt,null),e(zt,oNr),e(zt,ZMe),e(ZMe,rNr),e(zt,tNr),e(zt,Qc),e(Qc,aNr),e(Qc,eEe),e(eEe,nNr),e(Qc,sNr),e(Qc,rZ),e(rZ,lNr),e(Qc,iNr),e(zt,dNr),M(SC,zt,null),e(hr,cNr),e(hr,Or),M(zx,Or,null),e(Or,fNr),e(Or,oEe),e(oEe,mNr),e(Or,gNr),e(Or,Fn),e(Fn,hNr),e(Fn,rEe),e(rEe,pNr),e(Fn,_Nr),e(Fn,tEe),e(tEe,uNr),e(Fn,bNr),e(Fn,aEe),e(aEe,vNr),e(Fn,FNr),e(Or,TNr),e(Or,oe),e(oe,RC),e(RC,nEe),e(nEe,MNr),e(RC,ENr),e(RC,tZ),e(tZ,CNr),e(RC,wNr),e(oe,ANr),e(oe,PC),e(PC,sEe),e(sEe,LNr),e(PC,yNr),e(PC,aZ),e(aZ,xNr),e(PC,$Nr),e(oe,kNr),e(oe,BC),e(BC,lEe),e(lEe,SNr),e(BC,RNr),e(BC,nZ),e(nZ,PNr),e(BC,BNr),e(oe,NNr),e(oe,NC),e(NC,iEe),e(iEe,INr),e(NC,qNr),e(NC,sZ),e(sZ,jNr),e(NC,DNr),e(oe,GNr),e(oe,IC),e(IC,dEe),e(dEe,ONr),e(IC,VNr),e(IC,lZ),e(lZ,XNr),e(IC,zNr),e(oe,QNr),e(oe,qC),e(qC,cEe),e(cEe,WNr),e(qC,HNr),e(qC,iZ),e(iZ,UNr),e(qC,JNr),e(oe,YNr),e(oe,jC),e(jC,fEe),e(fEe,KNr),e(jC,ZNr),e(jC,dZ),e(dZ,eIr),e(jC,oIr),e(oe,rIr),e(oe,DC),e(DC,mEe),e(mEe,tIr),e(DC,aIr),e(DC,cZ),e(cZ,nIr),e(DC,sIr),e(oe,lIr),e(oe,GC),e(GC,gEe),e(gEe,iIr),e(GC,dIr),e(GC,fZ),e(fZ,cIr),e(GC,fIr),e(oe,mIr),e(oe,OC),e(OC,hEe),e(hEe,gIr),e(OC,hIr),e(OC,mZ),e(mZ,pIr),e(OC,_Ir),e(oe,uIr),e(oe,VC),e(VC,pEe),e(pEe,bIr),e(VC,vIr),e(VC,gZ),e(gZ,FIr),e(VC,TIr),e(oe,MIr),e(oe,XC),e(XC,_Ee),e(_Ee,EIr),e(XC,CIr),e(XC,hZ),e(hZ,wIr),e(XC,AIr),e(oe,LIr),e(oe,zC),e(zC,uEe),e(uEe,yIr),e(zC,xIr),e(zC,pZ),e(pZ,$Ir),e(zC,kIr),e(oe,SIr),e(oe,QC),e(QC,bEe),e(bEe,RIr),e(QC,PIr),e(QC,_Z),e(_Z,BIr),e(QC,NIr),e(oe,IIr),e(oe,WC),e(WC,vEe),e(vEe,qIr),e(WC,jIr),e(WC,uZ),e(uZ,DIr),e(WC,GIr),e(oe,OIr),e(oe,HC),e(HC,FEe),e(FEe,VIr),e(HC,XIr),e(HC,bZ),e(bZ,zIr),e(HC,QIr),e(oe,WIr),e(oe,UC),e(UC,TEe),e(TEe,HIr),e(UC,UIr),e(UC,vZ),e(vZ,JIr),e(UC,YIr),e(oe,KIr),e(oe,JC),e(JC,MEe),e(MEe,ZIr),e(JC,eqr),e(JC,FZ),e(FZ,oqr),e(JC,rqr),e(oe,tqr),e(oe,YC),e(YC,EEe),e(EEe,aqr),e(YC,nqr),e(YC,TZ),e(TZ,sqr),e(YC,lqr),e(oe,iqr),e(oe,KC),e(KC,CEe),e(CEe,dqr),e(KC,cqr),e(KC,MZ),e(MZ,fqr),e(KC,mqr),e(oe,gqr),e(oe,ZC),e(ZC,wEe),e(wEe,hqr),e(ZC,pqr),e(ZC,EZ),e(EZ,_qr),e(ZC,uqr),e(oe,bqr),e(oe,e3),e(e3,AEe),e(AEe,vqr),e(e3,Fqr),e(e3,CZ),e(CZ,Tqr),e(e3,Mqr),e(oe,Eqr),e(oe,o3),e(o3,LEe),e(LEe,Cqr),e(o3,wqr),e(o3,wZ),e(wZ,Aqr),e(o3,Lqr),e(oe,yqr),e(oe,r3),e(r3,yEe),e(yEe,xqr),e(r3,$qr),e(r3,AZ),e(AZ,kqr),e(r3,Sqr),e(oe,Rqr),e(oe,t3),e(t3,xEe),e(xEe,Pqr),e(t3,Bqr),e(t3,LZ),e(LZ,Nqr),e(t3,Iqr),e(oe,qqr),e(oe,a3),e(a3,$Ee),e($Ee,jqr),e(a3,Dqr),e(a3,yZ),e(yZ,Gqr),e(a3,Oqr),e(oe,Vqr),e(oe,n3),e(n3,kEe),e(kEe,Xqr),e(n3,zqr),e(n3,xZ),e(xZ,Qqr),e(n3,Wqr),e(Or,Hqr),M(s3,Or,null),b(f,nXe,u),b(f,Wc,u),e(Wc,l3),e(l3,SEe),M(Qx,SEe,null),e(Wc,Uqr),e(Wc,REe),e(REe,Jqr),b(f,sXe,u),b(f,pr,u),M(Wx,pr,null),e(pr,Yqr),e(pr,Hc),e(Hc,Kqr),e(Hc,$Z),e($Z,Zqr),e(Hc,ejr),e(Hc,kZ),e(kZ,ojr),e(Hc,rjr),e(pr,tjr),e(pr,Hx),e(Hx,ajr),e(Hx,PEe),e(PEe,njr),e(Hx,sjr),e(pr,ljr),e(pr,Qt),M(Ux,Qt,null),e(Qt,ijr),e(Qt,BEe),e(BEe,djr),e(Qt,cjr),e(Qt,Uc),e(Uc,fjr),e(Uc,NEe),e(NEe,mjr),e(Uc,gjr),e(Uc,SZ),e(SZ,hjr),e(Uc,pjr),e(Qt,_jr),M(i3,Qt,null),e(pr,ujr),e(pr,Vr),M(Jx,Vr,null),e(Vr,bjr),e(Vr,IEe),e(IEe,vjr),e(Vr,Fjr),e(Vr,Tn),e(Tn,Tjr),e(Tn,qEe),e(qEe,Mjr),e(Tn,Ejr),e(Tn,jEe),e(jEe,Cjr),e(Tn,wjr),e(Tn,DEe),e(DEe,Ajr),e(Tn,Ljr),e(Vr,yjr),e(Vr,xe),e(xe,d3),e(d3,GEe),e(GEe,xjr),e(d3,$jr),e(d3,RZ),e(RZ,kjr),e(d3,Sjr),e(xe,Rjr),e(xe,c3),e(c3,OEe),e(OEe,Pjr),e(c3,Bjr),e(c3,PZ),e(PZ,Njr),e(c3,Ijr),e(xe,qjr),e(xe,f3),e(f3,VEe),e(VEe,jjr),e(f3,Djr),e(f3,BZ),e(BZ,Gjr),e(f3,Ojr),e(xe,Vjr),e(xe,m3),e(m3,XEe),e(XEe,Xjr),e(m3,zjr),e(m3,NZ),e(NZ,Qjr),e(m3,Wjr),e(xe,Hjr),e(xe,g3),e(g3,zEe),e(zEe,Ujr),e(g3,Jjr),e(g3,IZ),e(IZ,Yjr),e(g3,Kjr),e(xe,Zjr),e(xe,h3),e(h3,QEe),e(QEe,eDr),e(h3,oDr),e(h3,qZ),e(qZ,rDr),e(h3,tDr),e(xe,aDr),e(xe,p3),e(p3,WEe),e(WEe,nDr),e(p3,sDr),e(p3,jZ),e(jZ,lDr),e(p3,iDr),e(xe,dDr),e(xe,_3),e(_3,HEe),e(HEe,cDr),e(_3,fDr),e(_3,DZ),e(DZ,mDr),e(_3,gDr),e(xe,hDr),e(xe,u3),e(u3,UEe),e(UEe,pDr),e(u3,_Dr),e(u3,GZ),e(GZ,uDr),e(u3,bDr),e(xe,vDr),e(xe,b3),e(b3,JEe),e(JEe,FDr),e(b3,TDr),e(b3,OZ),e(OZ,MDr),e(b3,EDr),e(Vr,CDr),M(v3,Vr,null),b(f,lXe,u),b(f,Jc,u),e(Jc,F3),e(F3,YEe),M(Yx,YEe,null),e(Jc,wDr),e(Jc,KEe),e(KEe,ADr),b(f,iXe,u),b(f,_r,u),M(Kx,_r,null),e(_r,LDr),e(_r,Yc),e(Yc,yDr),e(Yc,VZ),e(VZ,xDr),e(Yc,$Dr),e(Yc,XZ),e(XZ,kDr),e(Yc,SDr),e(_r,RDr),e(_r,Zx),e(Zx,PDr),e(Zx,ZEe),e(ZEe,BDr),e(Zx,NDr),e(_r,IDr),e(_r,Wt),M(e$,Wt,null),e(Wt,qDr),e(Wt,eCe),e(eCe,jDr),e(Wt,DDr),e(Wt,Kc),e(Kc,GDr),e(Kc,oCe),e(oCe,ODr),e(Kc,VDr),e(Kc,zZ),e(zZ,XDr),e(Kc,zDr),e(Wt,QDr),M(T3,Wt,null),e(_r,WDr),e(_r,Xr),M(o$,Xr,null),e(Xr,HDr),e(Xr,rCe),e(rCe,UDr),e(Xr,JDr),e(Xr,Mn),e(Mn,YDr),e(Mn,tCe),e(tCe,KDr),e(Mn,ZDr),e(Mn,aCe),e(aCe,eGr),e(Mn,oGr),e(Mn,nCe),e(nCe,rGr),e(Mn,tGr),e(Xr,aGr),e(Xr,Ee),e(Ee,M3),e(M3,sCe),e(sCe,nGr),e(M3,sGr),e(M3,QZ),e(QZ,lGr),e(M3,iGr),e(Ee,dGr),e(Ee,E3),e(E3,lCe),e(lCe,cGr),e(E3,fGr),e(E3,WZ),e(WZ,mGr),e(E3,gGr),e(Ee,hGr),e(Ee,C3),e(C3,iCe),e(iCe,pGr),e(C3,_Gr),e(C3,HZ),e(HZ,uGr),e(C3,bGr),e(Ee,vGr),e(Ee,w3),e(w3,dCe),e(dCe,FGr),e(w3,TGr),e(w3,UZ),e(UZ,MGr),e(w3,EGr),e(Ee,CGr),e(Ee,A3),e(A3,cCe),e(cCe,wGr),e(A3,AGr),e(A3,JZ),e(JZ,LGr),e(A3,yGr),e(Ee,xGr),e(Ee,L3),e(L3,fCe),e(fCe,$Gr),e(L3,kGr),e(L3,YZ),e(YZ,SGr),e(L3,RGr),e(Ee,PGr),e(Ee,y3),e(y3,mCe),e(mCe,BGr),e(y3,NGr),e(y3,KZ),e(KZ,IGr),e(y3,qGr),e(Ee,jGr),e(Ee,x3),e(x3,gCe),e(gCe,DGr),e(x3,GGr),e(x3,ZZ),e(ZZ,OGr),e(x3,VGr),e(Ee,XGr),e(Ee,$3),e($3,hCe),e(hCe,zGr),e($3,QGr),e($3,eee),e(eee,WGr),e($3,HGr),e(Ee,UGr),e(Ee,k3),e(k3,pCe),e(pCe,JGr),e(k3,YGr),e(k3,oee),e(oee,KGr),e(k3,ZGr),e(Ee,eOr),e(Ee,S3),e(S3,_Ce),e(_Ce,oOr),e(S3,rOr),e(S3,ree),e(ree,tOr),e(S3,aOr),e(Ee,nOr),e(Ee,R3),e(R3,uCe),e(uCe,sOr),e(R3,lOr),e(R3,tee),e(tee,iOr),e(R3,dOr),e(Ee,cOr),e(Ee,P3),e(P3,bCe),e(bCe,fOr),e(P3,mOr),e(P3,aee),e(aee,gOr),e(P3,hOr),e(Xr,pOr),M(B3,Xr,null),b(f,dXe,u),b(f,Zc,u),e(Zc,N3),e(N3,vCe),M(r$,vCe,null),e(Zc,_Or),e(Zc,FCe),e(FCe,uOr),b(f,cXe,u),b(f,ur,u),M(t$,ur,null),e(ur,bOr),e(ur,ef),e(ef,vOr),e(ef,nee),e(nee,FOr),e(ef,TOr),e(ef,see),e(see,MOr),e(ef,EOr),e(ur,COr),e(ur,a$),e(a$,wOr),e(a$,TCe),e(TCe,AOr),e(a$,LOr),e(ur,yOr),e(ur,Ht),M(n$,Ht,null),e(Ht,xOr),e(Ht,MCe),e(MCe,$Or),e(Ht,kOr),e(Ht,of),e(of,SOr),e(of,ECe),e(ECe,ROr),e(of,POr),e(of,lee),e(lee,BOr),e(of,NOr),e(Ht,IOr),M(I3,Ht,null),e(ur,qOr),e(ur,zr),M(s$,zr,null),e(zr,jOr),e(zr,CCe),e(CCe,DOr),e(zr,GOr),e(zr,En),e(En,OOr),e(En,wCe),e(wCe,VOr),e(En,XOr),e(En,ACe),e(ACe,zOr),e(En,QOr),e(En,LCe),e(LCe,WOr),e(En,HOr),e(zr,UOr),e(zr,$e),e($e,q3),e(q3,yCe),e(yCe,JOr),e(q3,YOr),e(q3,iee),e(iee,KOr),e(q3,ZOr),e($e,eVr),e($e,j3),e(j3,xCe),e(xCe,oVr),e(j3,rVr),e(j3,dee),e(dee,tVr),e(j3,aVr),e($e,nVr),e($e,D3),e(D3,$Ce),e($Ce,sVr),e(D3,lVr),e(D3,cee),e(cee,iVr),e(D3,dVr),e($e,cVr),e($e,G3),e(G3,kCe),e(kCe,fVr),e(G3,mVr),e(G3,fee),e(fee,gVr),e(G3,hVr),e($e,pVr),e($e,O3),e(O3,SCe),e(SCe,_Vr),e(O3,uVr),e(O3,mee),e(mee,bVr),e(O3,vVr),e($e,FVr),e($e,V3),e(V3,RCe),e(RCe,TVr),e(V3,MVr),e(V3,gee),e(gee,EVr),e(V3,CVr),e($e,wVr),e($e,X3),e(X3,PCe),e(PCe,AVr),e(X3,LVr),e(X3,hee),e(hee,yVr),e(X3,xVr),e($e,$Vr),e($e,z3),e(z3,BCe),e(BCe,kVr),e(z3,SVr),e(z3,pee),e(pee,RVr),e(z3,PVr),e($e,BVr),e($e,Q3),e(Q3,NCe),e(NCe,NVr),e(Q3,IVr),e(Q3,_ee),e(_ee,qVr),e(Q3,jVr),e($e,DVr),e($e,W3),e(W3,ICe),e(ICe,GVr),e(W3,OVr),e(W3,uee),e(uee,VVr),e(W3,XVr),e(zr,zVr),M(H3,zr,null),b(f,fXe,u),b(f,rf,u),e(rf,U3),e(U3,qCe),M(l$,qCe,null),e(rf,QVr),e(rf,jCe),e(jCe,WVr),b(f,mXe,u),b(f,br,u),M(i$,br,null),e(br,HVr),e(br,tf),e(tf,UVr),e(tf,bee),e(bee,JVr),e(tf,YVr),e(tf,vee),e(vee,KVr),e(tf,ZVr),e(br,eXr),e(br,d$),e(d$,oXr),e(d$,DCe),e(DCe,rXr),e(d$,tXr),e(br,aXr),e(br,Ut),M(c$,Ut,null),e(Ut,nXr),e(Ut,GCe),e(GCe,sXr),e(Ut,lXr),e(Ut,af),e(af,iXr),e(af,OCe),e(OCe,dXr),e(af,cXr),e(af,Fee),e(Fee,fXr),e(af,mXr),e(Ut,gXr),M(J3,Ut,null),e(br,hXr),e(br,Qr),M(f$,Qr,null),e(Qr,pXr),e(Qr,VCe),e(VCe,_Xr),e(Qr,uXr),e(Qr,Cn),e(Cn,bXr),e(Cn,XCe),e(XCe,vXr),e(Cn,FXr),e(Cn,zCe),e(zCe,TXr),e(Cn,MXr),e(Cn,QCe),e(QCe,EXr),e(Cn,CXr),e(Qr,wXr),e(Qr,ke),e(ke,Y3),e(Y3,WCe),e(WCe,AXr),e(Y3,LXr),e(Y3,Tee),e(Tee,yXr),e(Y3,xXr),e(ke,$Xr),e(ke,K3),e(K3,HCe),e(HCe,kXr),e(K3,SXr),e(K3,Mee),e(Mee,RXr),e(K3,PXr),e(ke,BXr),e(ke,Z3),e(Z3,UCe),e(UCe,NXr),e(Z3,IXr),e(Z3,Eee),e(Eee,qXr),e(Z3,jXr),e(ke,DXr),e(ke,e0),e(e0,JCe),e(JCe,GXr),e(e0,OXr),e(e0,Cee),e(Cee,VXr),e(e0,XXr),e(ke,zXr),e(ke,o0),e(o0,YCe),e(YCe,QXr),e(o0,WXr),e(o0,wee),e(wee,HXr),e(o0,UXr),e(ke,JXr),e(ke,r0),e(r0,KCe),e(KCe,YXr),e(r0,KXr),e(r0,Aee),e(Aee,ZXr),e(r0,ezr),e(ke,ozr),e(ke,t0),e(t0,ZCe),e(ZCe,rzr),e(t0,tzr),e(t0,Lee),e(Lee,azr),e(t0,nzr),e(ke,szr),e(ke,a0),e(a0,e3e),e(e3e,lzr),e(a0,izr),e(a0,yee),e(yee,dzr),e(a0,czr),e(ke,fzr),e(ke,n0),e(n0,o3e),e(o3e,mzr),e(n0,gzr),e(n0,xee),e(xee,hzr),e(n0,pzr),e(ke,_zr),e(ke,s0),e(s0,r3e),e(r3e,uzr),e(s0,bzr),e(s0,$ee),e($ee,vzr),e(s0,Fzr),e(Qr,Tzr),M(l0,Qr,null),b(f,gXe,u),b(f,nf,u),e(nf,i0),e(i0,t3e),M(m$,t3e,null),e(nf,Mzr),e(nf,a3e),e(a3e,Ezr),b(f,hXe,u),b(f,vr,u),M(g$,vr,null),e(vr,Czr),e(vr,sf),e(sf,wzr),e(sf,kee),e(kee,Azr),e(sf,Lzr),e(sf,See),e(See,yzr),e(sf,xzr),e(vr,$zr),e(vr,h$),e(h$,kzr),e(h$,n3e),e(n3e,Szr),e(h$,Rzr),e(vr,Pzr),e(vr,Jt),M(p$,Jt,null),e(Jt,Bzr),e(Jt,s3e),e(s3e,Nzr),e(Jt,Izr),e(Jt,lf),e(lf,qzr),e(lf,l3e),e(l3e,jzr),e(lf,Dzr),e(lf,Ree),e(Ree,Gzr),e(lf,Ozr),e(Jt,Vzr),M(d0,Jt,null),e(vr,Xzr),e(vr,Wr),M(_$,Wr,null),e(Wr,zzr),e(Wr,i3e),e(i3e,Qzr),e(Wr,Wzr),e(Wr,wn),e(wn,Hzr),e(wn,d3e),e(d3e,Uzr),e(wn,Jzr),e(wn,c3e),e(c3e,Yzr),e(wn,Kzr),e(wn,f3e),e(f3e,Zzr),e(wn,eQr),e(Wr,oQr),e(Wr,Se),e(Se,c0),e(c0,m3e),e(m3e,rQr),e(c0,tQr),e(c0,Pee),e(Pee,aQr),e(c0,nQr),e(Se,sQr),e(Se,f0),e(f0,g3e),e(g3e,lQr),e(f0,iQr),e(f0,Bee),e(Bee,dQr),e(f0,cQr),e(Se,fQr),e(Se,m0),e(m0,h3e),e(h3e,mQr),e(m0,gQr),e(m0,Nee),e(Nee,hQr),e(m0,pQr),e(Se,_Qr),e(Se,g0),e(g0,p3e),e(p3e,uQr),e(g0,bQr),e(g0,Iee),e(Iee,vQr),e(g0,FQr),e(Se,TQr),e(Se,h0),e(h0,_3e),e(_3e,MQr),e(h0,EQr),e(h0,qee),e(qee,CQr),e(h0,wQr),e(Se,AQr),e(Se,p0),e(p0,u3e),e(u3e,LQr),e(p0,yQr),e(p0,jee),e(jee,xQr),e(p0,$Qr),e(Se,kQr),e(Se,_0),e(_0,b3e),e(b3e,SQr),e(_0,RQr),e(_0,Dee),e(Dee,PQr),e(_0,BQr),e(Se,NQr),e(Se,u0),e(u0,v3e),e(v3e,IQr),e(u0,qQr),e(u0,Gee),e(Gee,jQr),e(u0,DQr),e(Se,GQr),e(Se,b0),e(b0,F3e),e(F3e,OQr),e(b0,VQr),e(b0,Oee),e(Oee,XQr),e(b0,zQr),e(Se,QQr),e(Se,v0),e(v0,T3e),e(T3e,WQr),e(v0,HQr),e(v0,Vee),e(Vee,UQr),e(v0,JQr),e(Wr,YQr),M(F0,Wr,null),b(f,pXe,u),b(f,df,u),e(df,T0),e(T0,M3e),M(u$,M3e,null),e(df,KQr),e(df,E3e),e(E3e,ZQr),b(f,_Xe,u),b(f,Fr,u),M(b$,Fr,null),e(Fr,eWr),e(Fr,cf),e(cf,oWr),e(cf,Xee),e(Xee,rWr),e(cf,tWr),e(cf,zee),e(zee,aWr),e(cf,nWr),e(Fr,sWr),e(Fr,v$),e(v$,lWr),e(v$,C3e),e(C3e,iWr),e(v$,dWr),e(Fr,cWr),e(Fr,Yt),M(F$,Yt,null),e(Yt,fWr),e(Yt,w3e),e(w3e,mWr),e(Yt,gWr),e(Yt,ff),e(ff,hWr),e(ff,A3e),e(A3e,pWr),e(ff,_Wr),e(ff,Qee),e(Qee,uWr),e(ff,bWr),e(Yt,vWr),M(M0,Yt,null),e(Fr,FWr),e(Fr,Hr),M(T$,Hr,null),e(Hr,TWr),e(Hr,L3e),e(L3e,MWr),e(Hr,EWr),e(Hr,An),e(An,CWr),e(An,y3e),e(y3e,wWr),e(An,AWr),e(An,x3e),e(x3e,LWr),e(An,yWr),e(An,$3e),e($3e,xWr),e(An,$Wr),e(Hr,kWr),e(Hr,Re),e(Re,E0),e(E0,k3e),e(k3e,SWr),e(E0,RWr),e(E0,Wee),e(Wee,PWr),e(E0,BWr),e(Re,NWr),e(Re,C0),e(C0,S3e),e(S3e,IWr),e(C0,qWr),e(C0,Hee),e(Hee,jWr),e(C0,DWr),e(Re,GWr),e(Re,w0),e(w0,R3e),e(R3e,OWr),e(w0,VWr),e(w0,Uee),e(Uee,XWr),e(w0,zWr),e(Re,QWr),e(Re,A0),e(A0,P3e),e(P3e,WWr),e(A0,HWr),e(A0,Jee),e(Jee,UWr),e(A0,JWr),e(Re,YWr),e(Re,L0),e(L0,B3e),e(B3e,KWr),e(L0,ZWr),e(L0,Yee),e(Yee,eHr),e(L0,oHr),e(Re,rHr),e(Re,y0),e(y0,N3e),e(N3e,tHr),e(y0,aHr),e(y0,Kee),e(Kee,nHr),e(y0,sHr),e(Re,lHr),e(Re,x0),e(x0,I3e),e(I3e,iHr),e(x0,dHr),e(x0,Zee),e(Zee,cHr),e(x0,fHr),e(Re,mHr),e(Re,$0),e($0,q3e),e(q3e,gHr),e($0,hHr),e($0,eoe),e(eoe,pHr),e($0,_Hr),e(Re,uHr),e(Re,k0),e(k0,j3e),e(j3e,bHr),e(k0,vHr),e(k0,ooe),e(ooe,FHr),e(k0,THr),e(Re,MHr),e(Re,S0),e(S0,D3e),e(D3e,EHr),e(S0,CHr),e(S0,roe),e(roe,wHr),e(S0,AHr),e(Hr,LHr),M(R0,Hr,null),b(f,uXe,u),b(f,mf,u),e(mf,P0),e(P0,G3e),M(M$,G3e,null),e(mf,yHr),e(mf,O3e),e(O3e,xHr),b(f,bXe,u),b(f,Tr,u),M(E$,Tr,null),e(Tr,$Hr),e(Tr,gf),e(gf,kHr),e(gf,toe),e(toe,SHr),e(gf,RHr),e(gf,aoe),e(aoe,PHr),e(gf,BHr),e(Tr,NHr),e(Tr,C$),e(C$,IHr),e(C$,V3e),e(V3e,qHr),e(C$,jHr),e(Tr,DHr),e(Tr,Kt),M(w$,Kt,null),e(Kt,GHr),e(Kt,X3e),e(X3e,OHr),e(Kt,VHr),e(Kt,hf),e(hf,XHr),e(hf,z3e),e(z3e,zHr),e(hf,QHr),e(hf,noe),e(noe,WHr),e(hf,HHr),e(Kt,UHr),M(B0,Kt,null),e(Tr,JHr),e(Tr,Ur),M(A$,Ur,null),e(Ur,YHr),e(Ur,Q3e),e(Q3e,KHr),e(Ur,ZHr),e(Ur,Ln),e(Ln,eUr),e(Ln,W3e),e(W3e,oUr),e(Ln,rUr),e(Ln,H3e),e(H3e,tUr),e(Ln,aUr),e(Ln,U3e),e(U3e,nUr),e(Ln,sUr),e(Ur,lUr),e(Ur,Ve),e(Ve,N0),e(N0,J3e),e(J3e,iUr),e(N0,dUr),e(N0,soe),e(soe,cUr),e(N0,fUr),e(Ve,mUr),e(Ve,I0),e(I0,Y3e),e(Y3e,gUr),e(I0,hUr),e(I0,loe),e(loe,pUr),e(I0,_Ur),e(Ve,uUr),e(Ve,q0),e(q0,K3e),e(K3e,bUr),e(q0,vUr),e(q0,ioe),e(ioe,FUr),e(q0,TUr),e(Ve,MUr),e(Ve,j0),e(j0,Z3e),e(Z3e,EUr),e(j0,CUr),e(j0,doe),e(doe,wUr),e(j0,AUr),e(Ve,LUr),e(Ve,D0),e(D0,e0e),e(e0e,yUr),e(D0,xUr),e(D0,coe),e(coe,$Ur),e(D0,kUr),e(Ve,SUr),e(Ve,G0),e(G0,o0e),e(o0e,RUr),e(G0,PUr),e(G0,foe),e(foe,BUr),e(G0,NUr),e(Ve,IUr),e(Ve,O0),e(O0,r0e),e(r0e,qUr),e(O0,jUr),e(O0,moe),e(moe,DUr),e(O0,GUr),e(Ve,OUr),e(Ve,V0),e(V0,t0e),e(t0e,VUr),e(V0,XUr),e(V0,goe),e(goe,zUr),e(V0,QUr),e(Ur,WUr),M(X0,Ur,null),b(f,vXe,u),b(f,pf,u),e(pf,z0),e(z0,a0e),M(L$,a0e,null),e(pf,HUr),e(pf,n0e),e(n0e,UUr),b(f,FXe,u),b(f,Mr,u),M(y$,Mr,null),e(Mr,JUr),e(Mr,_f),e(_f,YUr),e(_f,hoe),e(hoe,KUr),e(_f,ZUr),e(_f,poe),e(poe,eJr),e(_f,oJr),e(Mr,rJr),e(Mr,x$),e(x$,tJr),e(x$,s0e),e(s0e,aJr),e(x$,nJr),e(Mr,sJr),e(Mr,Zt),M($$,Zt,null),e(Zt,lJr),e(Zt,l0e),e(l0e,iJr),e(Zt,dJr),e(Zt,uf),e(uf,cJr),e(uf,i0e),e(i0e,fJr),e(uf,mJr),e(uf,_oe),e(_oe,gJr),e(uf,hJr),e(Zt,pJr),M(Q0,Zt,null),e(Mr,_Jr),e(Mr,Jr),M(k$,Jr,null),e(Jr,uJr),e(Jr,d0e),e(d0e,bJr),e(Jr,vJr),e(Jr,yn),e(yn,FJr),e(yn,c0e),e(c0e,TJr),e(yn,MJr),e(yn,f0e),e(f0e,EJr),e(yn,CJr),e(yn,m0e),e(m0e,wJr),e(yn,AJr),e(Jr,LJr),e(Jr,Xe),e(Xe,W0),e(W0,g0e),e(g0e,yJr),e(W0,xJr),e(W0,uoe),e(uoe,$Jr),e(W0,kJr),e(Xe,SJr),e(Xe,H0),e(H0,h0e),e(h0e,RJr),e(H0,PJr),e(H0,boe),e(boe,BJr),e(H0,NJr),e(Xe,IJr),e(Xe,U0),e(U0,p0e),e(p0e,qJr),e(U0,jJr),e(U0,voe),e(voe,DJr),e(U0,GJr),e(Xe,OJr),e(Xe,J0),e(J0,_0e),e(_0e,VJr),e(J0,XJr),e(J0,Foe),e(Foe,zJr),e(J0,QJr),e(Xe,WJr),e(Xe,Y0),e(Y0,u0e),e(u0e,HJr),e(Y0,UJr),e(Y0,Toe),e(Toe,JJr),e(Y0,YJr),e(Xe,KJr),e(Xe,K0),e(K0,b0e),e(b0e,ZJr),e(K0,eYr),e(K0,Moe),e(Moe,oYr),e(K0,rYr),e(Xe,tYr),e(Xe,Z0),e(Z0,v0e),e(v0e,aYr),e(Z0,nYr),e(Z0,Eoe),e(Eoe,sYr),e(Z0,lYr),e(Xe,iYr),e(Xe,ew),e(ew,F0e),e(F0e,dYr),e(ew,cYr),e(ew,Coe),e(Coe,fYr),e(ew,mYr),e(Jr,gYr),M(ow,Jr,null),b(f,TXe,u),b(f,bf,u),e(bf,rw),e(rw,T0e),M(S$,T0e,null),e(bf,hYr),e(bf,M0e),e(M0e,pYr),b(f,MXe,u),b(f,Er,u),M(R$,Er,null),e(Er,_Yr),e(Er,vf),e(vf,uYr),e(vf,woe),e(woe,bYr),e(vf,vYr),e(vf,Aoe),e(Aoe,FYr),e(vf,TYr),e(Er,MYr),e(Er,P$),e(P$,EYr),e(P$,E0e),e(E0e,CYr),e(P$,wYr),e(Er,AYr),e(Er,ea),M(B$,ea,null),e(ea,LYr),e(ea,C0e),e(C0e,yYr),e(ea,xYr),e(ea,Ff),e(Ff,$Yr),e(Ff,w0e),e(w0e,kYr),e(Ff,SYr),e(Ff,Loe),e(Loe,RYr),e(Ff,PYr),e(ea,BYr),M(tw,ea,null),e(Er,NYr),e(Er,Yr),M(N$,Yr,null),e(Yr,IYr),e(Yr,A0e),e(A0e,qYr),e(Yr,jYr),e(Yr,xn),e(xn,DYr),e(xn,L0e),e(L0e,GYr),e(xn,OYr),e(xn,y0e),e(y0e,VYr),e(xn,XYr),e(xn,x0e),e(x0e,zYr),e(xn,QYr),e(Yr,WYr),e(Yr,$0e),e($0e,aw),e(aw,k0e),e(k0e,HYr),e(aw,UYr),e(aw,yoe),e(yoe,JYr),e(aw,YYr),e(Yr,KYr),M(nw,Yr,null),b(f,EXe,u),b(f,Tf,u),e(Tf,sw),e(sw,S0e),M(I$,S0e,null),e(Tf,ZYr),e(Tf,R0e),e(R0e,eKr),b(f,CXe,u),b(f,Cr,u),M(q$,Cr,null),e(Cr,oKr),e(Cr,Mf),e(Mf,rKr),e(Mf,xoe),e(xoe,tKr),e(Mf,aKr),e(Mf,$oe),e($oe,nKr),e(Mf,sKr),e(Cr,lKr),e(Cr,j$),e(j$,iKr),e(j$,P0e),e(P0e,dKr),e(j$,cKr),e(Cr,fKr),e(Cr,oa),M(D$,oa,null),e(oa,mKr),e(oa,B0e),e(B0e,gKr),e(oa,hKr),e(oa,Ef),e(Ef,pKr),e(Ef,N0e),e(N0e,_Kr),e(Ef,uKr),e(Ef,koe),e(koe,bKr),e(Ef,vKr),e(oa,FKr),M(lw,oa,null),e(Cr,TKr),e(Cr,Kr),M(G$,Kr,null),e(Kr,MKr),e(Kr,I0e),e(I0e,EKr),e(Kr,CKr),e(Kr,$n),e($n,wKr),e($n,q0e),e(q0e,AKr),e($n,LKr),e($n,j0e),e(j0e,yKr),e($n,xKr),e($n,D0e),e(D0e,$Kr),e($n,kKr),e(Kr,SKr),e(Kr,O$),e(O$,iw),e(iw,G0e),e(G0e,RKr),e(iw,PKr),e(iw,Soe),e(Soe,BKr),e(iw,NKr),e(O$,IKr),e(O$,dw),e(dw,O0e),e(O0e,qKr),e(dw,jKr),e(dw,Roe),e(Roe,DKr),e(dw,GKr),e(Kr,OKr),M(cw,Kr,null),b(f,wXe,u),b(f,Cf,u),e(Cf,fw),e(fw,V0e),M(V$,V0e,null),e(Cf,VKr),e(Cf,X0e),e(X0e,XKr),b(f,AXe,u),b(f,wr,u),M(X$,wr,null),e(wr,zKr),e(wr,wf),e(wf,QKr),e(wf,Poe),e(Poe,WKr),e(wf,HKr),e(wf,Boe),e(Boe,UKr),e(wf,JKr),e(wr,YKr),e(wr,z$),e(z$,KKr),e(z$,z0e),e(z0e,ZKr),e(z$,eZr),e(wr,oZr),e(wr,ra),M(Q$,ra,null),e(ra,rZr),e(ra,Q0e),e(Q0e,tZr),e(ra,aZr),e(ra,Af),e(Af,nZr),e(Af,W0e),e(W0e,sZr),e(Af,lZr),e(Af,Noe),e(Noe,iZr),e(Af,dZr),e(ra,cZr),M(mw,ra,null),e(wr,fZr),e(wr,Zr),M(W$,Zr,null),e(Zr,mZr),e(Zr,H0e),e(H0e,gZr),e(Zr,hZr),e(Zr,kn),e(kn,pZr),e(kn,U0e),e(U0e,_Zr),e(kn,uZr),e(kn,J0e),e(J0e,bZr),e(kn,vZr),e(kn,Y0e),e(Y0e,FZr),e(kn,TZr),e(Zr,MZr),e(Zr,K0e),e(K0e,gw),e(gw,Z0e),e(Z0e,EZr),e(gw,CZr),e(gw,Ioe),e(Ioe,wZr),e(gw,AZr),e(Zr,LZr),M(hw,Zr,null),LXe=!0},p(f,[u]){const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),Bf.$set(H$);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),zg.$set(ewe);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),Lh.$set(owe);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),dp.$set(rwe);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),cp.$set(U$);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),$p.$set(twe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),kp.$set(Sn);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),Pp.$set(awe);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),Nu.$set(nwe);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),qu.$set(swe);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),$1.$set(J$);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),S1.$set(lwe);const Y$={};u&2&&(Y$.$$scope={dirty:u,ctx:f}),v2.$set(Y$);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),T2.$set(iwe);const K$={};u&2&&(K$.$$scope={dirty:u,ctx:f}),sb.$set(K$);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),ib.$set(dwe);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),Lb.$set(cwe);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),xb.$set(fwe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),A4.$set(Lf);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),y4.$set(mwe);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),s5.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),i5.$set(hwe);const Z$={};u&2&&(Z$.$$scope={dirty:u,ctx:f}),_5.$set(Z$);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),b5.$set(pwe);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),rv.$set(_we);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),av.$set(uwe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),Wv.$set(tt);const ek={};u&2&&(ek.$$scope={dirty:u,ctx:f}),Uv.$set(ek);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),Kv.$set(bwe);const ok={};u&2&&(ok.$$scope={dirty:u,ctx:f}),eF.$set(ok);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),pF.$set(vwe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),uF.$set(at);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),FF.$set(Fwe);const yf={};u&2&&(yf.$$scope={dirty:u,ctx:f}),MF.$set(yf);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),wF.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),LF.$set(Mwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),qF.$set(L);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),DF.$set(pw);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),WF.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),UF.$set(Cwe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),lT.$set(_w);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),dT.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),gT.$set(Awe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),pT.$set(uw);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),MT.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),CT.$set(ywe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),xT.$set(bw);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),kT.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),BT.$set($we);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),IT.$set(vw);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),DT.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),OT.$set(Swe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),UT.$set(Fw);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),YT.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),e7.$set(Pwe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),r7.$set(Tw);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),U7.$set(Bwe);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),Y7.$set(Nwe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),T8.$set(Mw);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),E8.$set(Iwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),I8.$set(qwe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),j8.$set(Ew);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),X8.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),Q8.$set(Dwe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),gM.$set(Cw);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),pM.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),AM.$set(Owe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),yM.$set(ww);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),oE.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),tE.$set(Xwe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),TE.$set(Aw);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),EE.$set(zwe);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),AE.$set(Qwe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),yE.$set(Lw);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),$E.$set(Wwe);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),SE.$set(Hwe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),ZE.$set(yw);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),oC.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),MC.$set(Jwe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),CC.$set(xw);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),AC.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),yC.$set(Kwe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),$C.$set($w);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),SC.$set(Zwe);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),s3.$set(eAe);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),i3.$set(kw);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),v3.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),T3.$set(rAe);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),B3.$set(Sw);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),I3.$set(tAe);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),H3.$set(aAe);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),J3.$set(Rw);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),l0.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),d0.$set(sAe);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),F0.$set(Pw);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),M0.$set(lAe);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),R0.$set(iAe);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),B0.$set(Bw);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),X0.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),Q0.$set(cAe);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),ow.$set(Nw);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),tw.$set(fAe);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),nw.$set(mAe);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),lw.$set(Iw);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),cw.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),mw.$set(hAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),hw.$set(qw)},i(f){LXe||(E(d.$$.fragment,f),E($a.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(Bf.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(X6.$$.fragment,f),E(zg.$$.fragment,f),E(z6.$$.fragment,f),E(Q6.$$.fragment,f),E(W6.$$.fragment,f),E(J6.$$.fragment,f),E(Lh.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(rL.$$.fragment,f),E(dp.$$.fragment,f),E(cp.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(iL.$$.fragment,f),E($p.$$.fragment,f),E(kp.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(Pp.$$.fragment,f),E(hL.$$.fragment,f),E(Nu.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(qu.$$.fragment,f),E(vL.$$.fragment,f),E($1.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(S1.$$.fragment,f),E(CL.$$.fragment,f),E(v2.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(T2.$$.fragment,f),E(xL.$$.fragment,f),E(sb.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(ib.$$.fragment,f),E(PL.$$.fragment,f),E(Lb.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(qL.$$.fragment,f),E(xb.$$.fragment,f),E(jL.$$.fragment,f),E(A4.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(y4.$$.fragment,f),E(XL.$$.fragment,f),E(s5.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(i5.$$.fragment,f),E(UL.$$.fragment,f),E(_5.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(b5.$$.fragment,f),E(ey.$$.fragment,f),E(rv.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(av.$$.fragment,f),E(ny.$$.fragment,f),E(Wv.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(Uv.$$.fragment,f),E(cy.$$.fragment,f),E(Kv.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(eF.$$.fragment,f),E(py.$$.fragment,f),E(pF.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(uF.$$.fragment,f),E(Fy.$$.fragment,f),E(FF.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(MF.$$.fragment,f),E(wy.$$.fragment,f),E(wF.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(LF.$$.fragment,f),E($y.$$.fragment,f),E(qF.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(DF.$$.fragment,f),E(By.$$.fragment,f),E(WF.$$.fragment,f),E(Ny.$$.fragment,f),E(Iy.$$.fragment,f),E(jy.$$.fragment,f),E(UF.$$.fragment,f),E(Dy.$$.fragment,f),E(lT.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(dT.$$.fragment,f),E(zy.$$.fragment,f),E(gT.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(pT.$$.fragment,f),E(Yy.$$.fragment,f),E(MT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(CT.$$.fragment,f),E(r9.$$.fragment,f),E(xT.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(kT.$$.fragment,f),E(l9.$$.fragment,f),E(BT.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(IT.$$.fragment,f),E(g9.$$.fragment,f),E(DT.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(OT.$$.fragment,f),E(b9.$$.fragment,f),E(UT.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(YT.$$.fragment,f),E(E9.$$.fragment,f),E(e7.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(r7.$$.fragment,f),E(y9.$$.fragment,f),E(U7.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(Y7.$$.fragment,f),E(R9.$$.fragment,f),E(T8.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(E8.$$.fragment,f),E(q9.$$.fragment,f),E(I8.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(j8.$$.fragment,f),E(V9.$$.fragment,f),E(X8.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(Q8.$$.fragment,f),E(H9.$$.fragment,f),E(gM.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(pM.$$.fragment,f),E(Z9.$$.fragment,f),E(AM.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(yM.$$.fragment,f),E(ax.$$.fragment,f),E(oE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(tE.$$.fragment,f),E(dx.$$.fragment,f),E(TE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(EE.$$.fragment,f),E(hx.$$.fragment,f),E(AE.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(yE.$$.fragment,f),E(Fx.$$.fragment,f),E($E.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(SE.$$.fragment,f),E(wx.$$.fragment,f),E(ZE.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(oC.$$.fragment,f),E($x.$$.fragment,f),E(MC.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(CC.$$.fragment,f),E(Bx.$$.fragment,f),E(AC.$$.fragment,f),E(Nx.$$.fragment,f),E(Ix.$$.fragment,f),E(jx.$$.fragment,f),E(yC.$$.fragment,f),E(Dx.$$.fragment,f),E($C.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(SC.$$.fragment,f),E(zx.$$.fragment,f),E(s3.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(i3.$$.fragment,f),E(Jx.$$.fragment,f),E(v3.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(T3.$$.fragment,f),E(o$.$$.fragment,f),E(B3.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(I3.$$.fragment,f),E(s$.$$.fragment,f),E(H3.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(J3.$$.fragment,f),E(f$.$$.fragment,f),E(l0.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(d0.$$.fragment,f),E(_$.$$.fragment,f),E(F0.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(M0.$$.fragment,f),E(T$.$$.fragment,f),E(R0.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(B0.$$.fragment,f),E(A$.$$.fragment,f),E(X0.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(Q0.$$.fragment,f),E(k$.$$.fragment,f),E(ow.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(tw.$$.fragment,f),E(N$.$$.fragment,f),E(nw.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(D$.$$.fragment,f),E(lw.$$.fragment,f),E(G$.$$.fragment,f),E(cw.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(mw.$$.fragment,f),E(W$.$$.fragment,f),E(hw.$$.fragment,f),LXe=!0)},o(f){C(d.$$.fragment,f),C($a.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(Bf.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(X6.$$.fragment,f),C(zg.$$.fragment,f),C(z6.$$.fragment,f),C(Q6.$$.fragment,f),C(W6.$$.fragment,f),C(J6.$$.fragment,f),C(Lh.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(rL.$$.fragment,f),C(dp.$$.fragment,f),C(cp.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(iL.$$.fragment,f),C($p.$$.fragment,f),C(kp.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(Pp.$$.fragment,f),C(hL.$$.fragment,f),C(Nu.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(qu.$$.fragment,f),C(vL.$$.fragment,f),C($1.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(S1.$$.fragment,f),C(CL.$$.fragment,f),C(v2.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(T2.$$.fragment,f),C(xL.$$.fragment,f),C(sb.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(ib.$$.fragment,f),C(PL.$$.fragment,f),C(Lb.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(qL.$$.fragment,f),C(xb.$$.fragment,f),C(jL.$$.fragment,f),C(A4.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(y4.$$.fragment,f),C(XL.$$.fragment,f),C(s5.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(i5.$$.fragment,f),C(UL.$$.fragment,f),C(_5.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(b5.$$.fragment,f),C(ey.$$.fragment,f),C(rv.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(av.$$.fragment,f),C(ny.$$.fragment,f),C(Wv.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(Uv.$$.fragment,f),C(cy.$$.fragment,f),C(Kv.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(eF.$$.fragment,f),C(py.$$.fragment,f),C(pF.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(uF.$$.fragment,f),C(Fy.$$.fragment,f),C(FF.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(MF.$$.fragment,f),C(wy.$$.fragment,f),C(wF.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(LF.$$.fragment,f),C($y.$$.fragment,f),C(qF.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(DF.$$.fragment,f),C(By.$$.fragment,f),C(WF.$$.fragment,f),C(Ny.$$.fragment,f),C(Iy.$$.fragment,f),C(jy.$$.fragment,f),C(UF.$$.fragment,f),C(Dy.$$.fragment,f),C(lT.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(dT.$$.fragment,f),C(zy.$$.fragment,f),C(gT.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(pT.$$.fragment,f),C(Yy.$$.fragment,f),C(MT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(CT.$$.fragment,f),C(r9.$$.fragment,f),C(xT.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(kT.$$.fragment,f),C(l9.$$.fragment,f),C(BT.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(IT.$$.fragment,f),C(g9.$$.fragment,f),C(DT.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(OT.$$.fragment,f),C(b9.$$.fragment,f),C(UT.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(YT.$$.fragment,f),C(E9.$$.fragment,f),C(e7.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(r7.$$.fragment,f),C(y9.$$.fragment,f),C(U7.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(Y7.$$.fragment,f),C(R9.$$.fragment,f),C(T8.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(E8.$$.fragment,f),C(q9.$$.fragment,f),C(I8.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(j8.$$.fragment,f),C(V9.$$.fragment,f),C(X8.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(Q8.$$.fragment,f),C(H9.$$.fragment,f),C(gM.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(pM.$$.fragment,f),C(Z9.$$.fragment,f),C(AM.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(yM.$$.fragment,f),C(ax.$$.fragment,f),C(oE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(tE.$$.fragment,f),C(dx.$$.fragment,f),C(TE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(EE.$$.fragment,f),C(hx.$$.fragment,f),C(AE.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(yE.$$.fragment,f),C(Fx.$$.fragment,f),C($E.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(SE.$$.fragment,f),C(wx.$$.fragment,f),C(ZE.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(oC.$$.fragment,f),C($x.$$.fragment,f),C(MC.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(CC.$$.fragment,f),C(Bx.$$.fragment,f),C(AC.$$.fragment,f),C(Nx.$$.fragment,f),C(Ix.$$.fragment,f),C(jx.$$.fragment,f),C(yC.$$.fragment,f),C(Dx.$$.fragment,f),C($C.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(SC.$$.fragment,f),C(zx.$$.fragment,f),C(s3.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(i3.$$.fragment,f),C(Jx.$$.fragment,f),C(v3.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(T3.$$.fragment,f),C(o$.$$.fragment,f),C(B3.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(I3.$$.fragment,f),C(s$.$$.fragment,f),C(H3.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(J3.$$.fragment,f),C(f$.$$.fragment,f),C(l0.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(d0.$$.fragment,f),C(_$.$$.fragment,f),C(F0.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(M0.$$.fragment,f),C(T$.$$.fragment,f),C(R0.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(B0.$$.fragment,f),C(A$.$$.fragment,f),C(X0.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(Q0.$$.fragment,f),C(k$.$$.fragment,f),C(ow.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(tw.$$.fragment,f),C(N$.$$.fragment,f),C(nw.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(D$.$$.fragment,f),C(lw.$$.fragment,f),C(G$.$$.fragment,f),C(cw.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(mw.$$.fragment,f),C(W$.$$.fragment,f),C(hw.$$.fragment,f),LXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t($f),f&&t(nt),f&&t(Oe),f&&t(Qe),f&&t(Sf),w($a,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(ka),f&&t(MOe),f&&t($i),w(q6),f&&t(EOe),f&&t(In),f&&t(COe),w(j6,f),f&&t(wOe),f&&t(uS),f&&t(AOe),w(Bf,f),f&&t(LOe),f&&t(ki),w(D6),f&&t(yOe),f&&t(wo),w(G6),w(X6),w(zg),w(z6),f&&t(xOe),f&&t(Ri),w(Q6),f&&t($Oe),f&&t(Ao),w(W6),w(J6),w(Lh),w(Y6),f&&t(kOe),f&&t(Pi),w(K6),f&&t(SOe),f&&t(Lo),w(Z6),w(rL),w(dp),w(cp),w(tL),f&&t(ROe),f&&t(Bi),w(aL),f&&t(POe),f&&t(yo),w(nL),w(iL),w($p),w(kp),w(dL),f&&t(BOe),f&&t(Ii),w(cL),f&&t(NOe),f&&t(xo),w(fL),w(gL),w(Pp),w(hL),w(Nu),f&&t(IOe),f&&t(Di),w(pL),f&&t(qOe),f&&t($o),w(_L),w(bL),w(qu),w(vL),w($1),f&&t(jOe),f&&t(Vi),w(FL),f&&t(DOe),f&&t(ko),w(TL),w(EL),w(S1),w(CL),w(v2),f&&t(GOe),f&&t(Qi),w(wL),f&&t(OOe),f&&t(So),w(AL),w(yL),w(T2),w(xL),w(sb),f&&t(VOe),f&&t(Ui),w($L),f&&t(XOe),f&&t(Ro),w(kL),w(RL),w(ib),w(PL),w(Lb),f&&t(zOe),f&&t(Ki),w(BL),f&&t(QOe),f&&t(Po),w(NL),w(qL),w(xb),w(jL),w(A4),f&&t(WOe),f&&t(od),w(DL),f&&t(HOe),f&&t(Bo),w(GL),w(VL),w(y4),w(XL),w(s5),f&&t(UOe),f&&t(ad),w(zL),f&&t(JOe),f&&t(No),w(QL),w(HL),w(i5),w(UL),w(_5),f&&t(YOe),f&&t(ld),w(JL),f&&t(KOe),f&&t(qo),w(YL),w(ZL),w(b5),w(ey),w(rv),f&&t(ZOe),f&&t(cd),w(oy),f&&t(eVe),f&&t(jo),w(ry),w(ay),w(av),w(ny),w(Wv),f&&t(oVe),f&&t(gd),w(sy),f&&t(rVe),f&&t(Do),w(ly),w(dy),w(Uv),w(cy),w(Kv),f&&t(tVe),f&&t(_d),w(fy),f&&t(aVe),f&&t(Go),w(my),w(hy),w(eF),w(py),w(pF),f&&t(nVe),f&&t(vd),w(_y),f&&t(sVe),f&&t(Oo),w(uy),w(vy),w(uF),w(Fy),w(FF),f&&t(lVe),f&&t(Md),w(Ty),f&&t(iVe),f&&t(Vo),w(My),w(Cy),w(MF),w(wy),w(wF),f&&t(dVe),f&&t(wd),w(Ay),f&&t(cVe),f&&t(Xo),w(Ly),w(xy),w(LF),w($y),w(qF),f&&t(fVe),f&&t(yd),w(ky),f&&t(mVe),f&&t(zo),w(Sy),w(Py),w(DF),w(By),w(WF),f&&t(gVe),f&&t(kd),w(Ny),f&&t(hVe),f&&t(Qo),w(Iy),w(jy),w(UF),w(Dy),w(lT),f&&t(pVe),f&&t(Pd),w(Gy),f&&t(_Ve),f&&t(Wo),w(Oy),w(Xy),w(dT),w(zy),w(gT),f&&t(uVe),f&&t(Id),w(Wy),f&&t(bVe),f&&t(Ho),w(Hy),w(Jy),w(pT),w(Yy),w(MT),f&&t(vVe),f&&t(Dd),w(Ky),f&&t(FVe),f&&t(Uo),w(Zy),w(o9),w(CT),w(r9),w(xT),f&&t(TVe),f&&t(Xd),w(t9),f&&t(MVe),f&&t(Jo),w(a9),w(s9),w(kT),w(l9),w(BT),f&&t(EVe),f&&t(Wd),w(d9),f&&t(CVe),f&&t(Yo),w(c9),w(m9),w(IT),w(g9),w(DT),f&&t(wVe),f&&t(Jd),w(h9),f&&t(AVe),f&&t(Ko),w(p9),w(u9),w(OT),w(b9),w(UT),f&&t(LVe),f&&t(Zd),w(v9),f&&t(yVe),f&&t(Zo),w(F9),w(M9),w(YT),w(E9),w(e7),f&&t(xVe),f&&t(rc),w(C9),f&&t($Ve),f&&t(er),w(w9),w(L9),w(r7),w(y9),w(U7),f&&t(kVe),f&&t(nc),w(x9),f&&t(SVe),f&&t(or),w($9),w(S9),w(Y7),w(R9),w(T8),f&&t(RVe),f&&t(ic),w(P9),f&&t(PVe),f&&t(rr),w(B9),w(I9),w(E8),w(q9),w(I8),f&&t(BVe),f&&t(fc),w(j9),f&&t(NVe),f&&t(tr),w(D9),w(O9),w(j8),w(V9),w(X8),f&&t(IVe),f&&t(hc),w(X9),f&&t(qVe),f&&t(ar),w(z9),w(W9),w(Q8),w(H9),w(gM),f&&t(jVe),f&&t(uc),w(U9),f&&t(DVe),f&&t(nr),w(J9),w(K9),w(pM),w(Z9),w(AM),f&&t(GVe),f&&t(Fc),w(ex),f&&t(OVe),f&&t(sr),w(ox),w(tx),w(yM),w(ax),w(oE),f&&t(VVe),f&&t(Ec),w(nx),f&&t(XVe),f&&t(lr),w(sx),w(ix),w(tE),w(dx),w(TE),f&&t(zVe),f&&t(Ac),w(cx),f&&t(QVe),f&&t(ir),w(fx),w(gx),w(EE),w(hx),w(AE),f&&t(WVe),f&&t(xc),w(_x),f&&t(HVe),f&&t(dr),w(ux),w(vx),w(yE),w(Fx),w($E),f&&t(UVe),f&&t(Sc),w(Tx),f&&t(JVe),f&&t(cr),w(Mx),w(Cx),w(SE),w(wx),w(ZE),f&&t(YVe),f&&t(Bc),w(Ax),f&&t(KVe),f&&t(fr),w(Lx),w(xx),w(oC),w($x),w(MC),f&&t(ZVe),f&&t(qc),w(kx),f&&t(eXe),f&&t(mr),w(Sx),w(Px),w(CC),w(Bx),w(AC),f&&t(oXe),f&&t(Gc),w(Nx),f&&t(rXe),f&&t(gr),w(Ix),w(jx),w(yC),w(Dx),w($C),f&&t(tXe),f&&t(Xc),w(Gx),f&&t(aXe),f&&t(hr),w(Ox),w(Xx),w(SC),w(zx),w(s3),f&&t(nXe),f&&t(Wc),w(Qx),f&&t(sXe),f&&t(pr),w(Wx),w(Ux),w(i3),w(Jx),w(v3),f&&t(lXe),f&&t(Jc),w(Yx),f&&t(iXe),f&&t(_r),w(Kx),w(e$),w(T3),w(o$),w(B3),f&&t(dXe),f&&t(Zc),w(r$),f&&t(cXe),f&&t(ur),w(t$),w(n$),w(I3),w(s$),w(H3),f&&t(fXe),f&&t(rf),w(l$),f&&t(mXe),f&&t(br),w(i$),w(c$),w(J3),w(f$),w(l0),f&&t(gXe),f&&t(nf),w(m$),f&&t(hXe),f&&t(vr),w(g$),w(p$),w(d0),w(_$),w(F0),f&&t(pXe),f&&t(df),w(u$),f&&t(_Xe),f&&t(Fr),w(b$),w(F$),w(M0),w(T$),w(R0),f&&t(uXe),f&&t(mf),w(M$),f&&t(bXe),f&&t(Tr),w(E$),w(w$),w(B0),w(A$),w(X0),f&&t(vXe),f&&t(pf),w(L$),f&&t(FXe),f&&t(Mr),w(y$),w($$),w(Q0),w(k$),w(ow),f&&t(TXe),f&&t(bf),w(S$),f&&t(MXe),f&&t(Er),w(R$),w(B$),w(tw),w(N$),w(nw),f&&t(EXe),f&&t(Tf),w(I$),f&&t(CXe),f&&t(Cr),w(q$),w(D$),w(lw),w(G$),w(cw),f&&t(wXe),f&&t(Cf),w(V$),f&&t(AXe),f&&t(wr),w(X$),w(Q$),w(mw),w(W$),w(hw)}}}const vXt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function FXt($){return bOt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class LXt extends hOt{constructor(g){super();pOt(this,g,FXt,bXt,_Ot,{})}}export{LXt as default,vXt as metadata};
