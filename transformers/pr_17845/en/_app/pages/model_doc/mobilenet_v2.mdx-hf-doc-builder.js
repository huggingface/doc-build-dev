import{S as Ks,i as Ys,s as en,e as r,k as p,w,t as n,M as tn,c as a,d as o,m as h,a as s,x as M,h as i,b as d,G as e,g as u,y as $,q as y,o as N,B as x,v as on,L as Ba}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ra}from"../../chunks/Tip-hf-doc-builder.js";import{D as Ue}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Ua}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as mt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ha}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function rn(E){let c,b,g,f,v;return f=new Ua({props:{code:`from transformers import MobileNetV2Config, MobileNetV2Model

# Initializing a "mobilenet_v2_1.0_224" style configuration
configuration = MobileNetV2Config()

# Initializing a model from the "mobilenet_v2_1.0_224" style configuration
model = MobileNetV2Model(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileNetV2Config, MobileNetV2Model

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a &quot;mobilenet_v2_1.0_224&quot; style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MobileNetV2Config()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the &quot;mobilenet_v2_1.0_224&quot; style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileNetV2Model(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=r("p"),b=n("Example:"),g=p(),w(f.$$.fragment)},l(l){c=a(l,"P",{});var _=s(c);b=i(_,"Example:"),_.forEach(o),g=h(l),M(f.$$.fragment,l)},m(l,_){u(l,c,_),e(c,b),u(l,g,_),$(f,l,_),v=!0},p:Ba,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){N(f.$$.fragment,l),v=!1},d(l){l&&o(c),l&&o(g),x(f,l)}}}function an(E){let c,b;return{c(){c=r("p"),b=n(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(g){c=a(g,"P",{});var f=s(c);b=i(f,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),f.forEach(o)},m(g,f){u(g,c,f),e(c,b)},d(g){g&&o(c)}}}function sn(E){let c,b,g,f,v;return{c(){c=r("p"),b=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),f=n("Module"),v=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=a(l,"P",{});var _=s(c);b=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a(_,"CODE",{});var z=s(g);f=i(z,"Module"),z.forEach(o),v=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(l,_){u(l,c,_),e(c,b),e(c,g),e(g,f),e(c,v)},d(l){l&&o(c)}}}function nn(E){let c,b,g,f,v;return f=new Ua({props:{code:`from transformers import MobileNetV2FeatureExtractor, MobileNetV2Model
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileNetV2FeatureExtractor.from_pretrained("Matthijs/mobilenet_v2_1.0_224")
model = MobileNetV2Model.from_pretrained("Matthijs/mobilenet_v2_1.0_224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileNetV2FeatureExtractor, MobileNetV2Model
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileNetV2FeatureExtractor.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v2_1.0_224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileNetV2Model.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v2_1.0_224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),{c(){c=r("p"),b=n("Example:"),g=p(),w(f.$$.fragment)},l(l){c=a(l,"P",{});var _=s(c);b=i(_,"Example:"),_.forEach(o),g=h(l),M(f.$$.fragment,l)},m(l,_){u(l,c,_),e(c,b),u(l,g,_),$(f,l,_),v=!0},p:Ba,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){N(f.$$.fragment,l),v=!1},d(l){l&&o(c),l&&o(g),x(f,l)}}}function ln(E){let c,b,g,f,v;return{c(){c=r("p"),b=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r("code"),f=n("Module"),v=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=a(l,"P",{});var _=s(c);b=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a(_,"CODE",{});var z=s(g);f=i(z,"Module"),z.forEach(o),v=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(l,_){u(l,c,_),e(c,b),e(c,g),e(g,f),e(c,v)},d(l){l&&o(c)}}}function dn(E){let c,b,g,f,v;return f=new Ua({props:{code:`from transformers import MobileNetV2FeatureExtractor, MobileNetV2ForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MobileNetV2FeatureExtractor.from_pretrained("Matthijs/mobilenet_v2_1.0_224")
model = MobileNetV2ForImageClassification.from_pretrained("Matthijs/mobilenet_v2_1.0_224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MobileNetV2FeatureExtractor, MobileNetV2ForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MobileNetV2FeatureExtractor.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v2_1.0_224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MobileNetV2ForImageClassification.from_pretrained(<span class="hljs-string">&quot;Matthijs/mobilenet_v2_1.0_224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),{c(){c=r("p"),b=n("Example:"),g=p(),w(f.$$.fragment)},l(l){c=a(l,"P",{});var _=s(c);b=i(_,"Example:"),_.forEach(o),g=h(l),M(f.$$.fragment,l)},m(l,_){u(l,c,_),e(c,b),u(l,g,_),$(f,l,_),v=!0},p:Ba,i(l){v||(y(f.$$.fragment,l),v=!0)},o(l){N(f.$$.fragment,l),v=!1},d(l){l&&o(c),l&&o(g),x(f,l)}}}function cn(E){let c,b,g,f,v,l,_,z,ko,to,D,X,ft,_e,zo,ut,Ao,oo,K,Lo,be,Oo,qo,ro,Ge,So,ao,Y,gt,Do,Wo,_t,Ro,so,Ze,Ho,no,V,bt,T,Bo,ee,Uo,vt,Go,Zo,wt,Jo,Qo,Mt,Xo,Ko,$t,Yo,er,yt,tr,or,rr,Nt,xt,ar,sr,Et,ve,nr,Je,ir,lr,dr,Vt,we,cr,Me,pr,hr,mr,Tt,W,fr,Qe,ur,gr,It,_r,br,io,Xe,vr,lo,P,Ct,$e,wr,Ke,Mr,$r,yr,Ft,ye,Nr,Pt,xr,Er,Vr,jt,kt,Tr,Ir,zt,Ne,Cr,At,Fr,Pr,co,L,jr,xe,kr,zr,Ee,Ar,Lr,po,R,te,Lt,Ve,Or,Ot,qr,ho,I,Te,Sr,H,Dr,Ye,Wr,Rr,Ie,Hr,Br,Ur,B,Gr,et,Zr,Jr,tt,Qr,Xr,Kr,oe,mo,U,re,qt,Ce,Yr,St,ea,fo,C,Fe,ta,Dt,oa,ra,Pe,aa,ot,sa,na,ia,O,je,la,Wt,da,ca,ae,uo,G,se,Rt,ke,pa,Ht,ha,go,A,ze,ma,Ae,fa,Le,ua,ga,_a,j,Oe,ba,Z,va,rt,wa,Ma,Bt,$a,ya,Na,ne,xa,ie,_o,J,le,Ut,qe,Ea,Gt,Va,bo,F,Se,Ta,Zt,Ia,Ca,De,Fa,We,Pa,ja,ka,k,Re,za,Q,Aa,at,La,Oa,Jt,qa,Sa,Da,de,Wa,ce,vo;return l=new mt({}),_e=new mt({}),Ve=new mt({}),Te=new Ue({props:{name:"class transformers.MobileNetV2Config",anchor:"transformers.MobileNetV2Config",parameters:[{name:"num_channels",val:" = 3"},{name:"image_size",val:" = 224"},{name:"depth_multiplier",val:" = 1.0"},{name:"depth_divisible_by",val:" = 8"},{name:"min_depth",val:" = 8"},{name:"expand_ratio",val:" = 8"},{name:"first_layer_is_expansion",val:" = True"},{name:"hidden_act",val:" = 'relu6'"},{name:"tf_padding",val:" = True"},{name:"classifier_dropout_prob",val:" = 0.8"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 0.001"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileNetV2Config.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.MobileNetV2Config.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.MobileNetV2Config.depth_multiplier",description:`<strong>depth_multiplier</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Shrinks or expands the number of channels in each layer. Default is 1.0, which starts the network with 32
channels. This is sometimes also called &#x201C;alpha&#x201D; or &#x201C;width multiplier&#x201D;.`,name:"depth_multiplier"},{anchor:"transformers.MobileNetV2Config.depth_divisible_by",description:`<strong>depth_divisible_by</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The number of channels in each layer will always be a multiple of this number.`,name:"depth_divisible_by"},{anchor:"transformers.MobileNetV2Config.min_depth",description:`<strong>min_depth</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
All layers will have at least this many channels.`,name:"min_depth"},{anchor:"transformers.MobileNetV2Config.expand_ratio",description:`<strong>expand_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 6.0) &#x2014;
The number of output channels of the first layer in each block is input channels times expansion ratio.`,name:"expand_ratio"},{anchor:"transformers.MobileNetV2Config.first_layer_is_expansion",description:`<strong>first_layer_is_expansion</strong> (<code>bool</code>, <code>optional</code>, defaults to <code>True</code>) &#x2014;
True if the very first convolution layer is also the expansion layer for the first expansion block.`,name:"first_layer_is_expansion"},{anchor:"transformers.MobileNetV2Config.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;relu6&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the Transformer encoder and convolution layers.`,name:"hidden_act"},{anchor:"transformers.MobileNetV2Config.tf_padding",description:`<strong>tf_padding</strong> (<code>bool</code>, <code>optional</code>, defaults to <code>True</code>) &#x2014;
Whether to use TensorFlow padding rules on the convolution layers.`,name:"tf_padding"},{anchor:"transformers.MobileNetV2Config.classifier_dropout_prob",description:`<strong>classifier_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The dropout ratio for attached classifiers.`,name:"classifier_dropout_prob"},{anchor:"transformers.MobileNetV2Config.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MobileNetV2Config.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 0.001) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/mobilenet_v2/configuration_mobilenet_v2.py#L37"}}),oe=new Ha({props:{anchor:"transformers.MobileNetV2Config.example",$$slots:{default:[rn]},$$scope:{ctx:E}}}),Ce=new mt({}),Fe=new Ue({props:{name:"class transformers.MobileNetV2FeatureExtractor",anchor:"transformers.MobileNetV2FeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 256"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"do_center_crop",val:" = True"},{name:"crop_size",val:" = 224"},{name:"do_normalize",val:" = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileNetV2FeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MobileNetV2FeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 256) &#x2014;
Resize the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be resized to match the shorter side. Only has an effect if
<code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.MobileNetV2FeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MobileNetV2FeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.MobileNetV2FeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.MobileNetV2FeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input to the range between -1 and +1.`,name:"do_normalize"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/mobilenet_v2/feature_extraction_mobilenet_v2.py#L30"}}),je=new Ue({props:{name:"__call__",anchor:"transformers.MobileNetV2FeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MobileNetV2FeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MobileNetV2FeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_17845/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/mobilenet_v2/feature_extraction_mobilenet_v2.py#L77",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17845/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17845/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),ae=new Ra({props:{warning:!0,$$slots:{default:[an]},$$scope:{ctx:E}}}),ke=new mt({}),ze=new Ue({props:{name:"class transformers.MobileNetV2Model",anchor:"transformers.MobileNetV2Model",parameters:[{name:"config",val:": MobileNetV2Config"},{name:"add_pooling_layer",val:": bool = True"}],parametersDescription:[{anchor:"transformers.MobileNetV2Model.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L413"}}),Oe=new Ue({props:{name:"forward",anchor:"transformers.MobileNetV2Model.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileNetV2Model.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2FeatureExtractor">MobileNetV2FeatureExtractor</a>. See
<a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2FeatureExtractor.__call__">MobileNetV2FeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileNetV2Model.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileNetV2Model.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17845/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L476",returnDescription:`
<p>A <code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config"
>MobileNetV2Config</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state after a pooling operation on the spatial dimensions.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ne=new Ra({props:{$$slots:{default:[sn]},$$scope:{ctx:E}}}),ie=new Ha({props:{anchor:"transformers.MobileNetV2Model.forward.example",$$slots:{default:[nn]},$$scope:{ctx:E}}}),qe=new mt({}),Se=new Ue({props:{name:"class transformers.MobileNetV2ForImageClassification",anchor:"transformers.MobileNetV2ForImageClassification",parameters:[{name:"config",val:": MobileNetV2Config"}],parametersDescription:[{anchor:"transformers.MobileNetV2ForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config">MobileNetV2Config</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_17845/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L533"}}),Re=new Ue({props:{name:"forward",anchor:"transformers.MobileNetV2ForImageClassification.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MobileNetV2ForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2FeatureExtractor">MobileNetV2FeatureExtractor</a>. See
<a href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2FeatureExtractor.__call__">MobileNetV2FeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.MobileNetV2ForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MobileNetV2ForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_17845/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MobileNetV2ForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss). If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_17845/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L550",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_17845/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config"
>MobileNetV2Config</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each stage) of shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also
called feature maps) of the model at the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17845/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention"
>transformers.modeling_outputs.ImageClassifierOutputWithNoAttention</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),de=new Ra({props:{$$slots:{default:[ln]},$$scope:{ctx:E}}}),ce=new Ha({props:{anchor:"transformers.MobileNetV2ForImageClassification.forward.example",$$slots:{default:[dn]},$$scope:{ctx:E}}}),{c(){c=r("meta"),b=p(),g=r("h1"),f=r("a"),v=r("span"),w(l.$$.fragment),_=p(),z=r("span"),ko=n("MobileNet V2"),to=p(),D=r("h2"),X=r("a"),ft=r("span"),w(_e.$$.fragment),zo=p(),ut=r("span"),Ao=n("Overview"),oo=p(),K=r("p"),Lo=n("The MobileNet model was proposed in "),be=r("a"),Oo=n("MobileNetV2: Inverted Residuals and Linear Bottlenecks"),qo=n(" by Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zhmoginov, Liang-Chieh Chen."),ro=p(),Ge=r("p"),So=n("The abstract from the paper is the following:"),ao=p(),Y=r("p"),gt=r("em"),Do=n("In this paper we describe a new mobile architecture, MobileNetV2, that improves the state of the art performance of mobile models on multiple tasks and benchmarks as well as across a spectrum of different model sizes. We also describe efficient ways of applying these mobile models to object detection in a novel framework we call SSDLite. Additionally, we demonstrate how to build mobile semantic segmentation models through a reduced form of DeepLabv3 which we call Mobile DeepLabv3."),Wo=p(),_t=r("em"),Ro=n("The MobileNetV2 architecture is based on an inverted residual structure where the input and output of the residual block are thin bottleneck layers opposite to traditional residual models which use expanded representations in the input an MobileNetV2 uses lightweight depthwise convolutions to filter features in the intermediate expansion layer. Additionally, we find that it is important to remove non-linearities in the narrow layers in order to maintain representational power. We demonstrate that this improves performance and provide an intuition that led to this design. Finally, our approach allows decoupling of the input/output domains from the expressiveness of the transformation, which provides a convenient framework for further analysis. We measure our performance on Imagenet classification, COCO object detection, VOC image segmentation. We evaluate the trade-offs between accuracy, and number of operations measured by multiply-adds (MAdd), as well as the number of parameters."),so=p(),Ze=r("p"),Ho=n("Tips:"),no=p(),V=r("ul"),bt=r("li"),T=r("p"),Bo=n("The checkpoints are named "),ee=r("strong"),Uo=n("mobilenet_v2_"),vt=r("em"),Go=n("depth"),Zo=n("_"),wt=r("em"),Jo=n("size"),Qo=n(", for example "),Mt=r("strong"),Xo=n("mobilenet_v2_1.0_224"),Ko=n(", where "),$t=r("strong"),Yo=n("1.0"),er=n(" is the depth multiplier (sometimes also referred to as \u201Calpha\u201D or the width multiplier) and "),yt=r("strong"),tr=n("224"),or=n(" is the resolution of the input images the model was trained on."),rr=p(),Nt=r("li"),xt=r("p"),ar=n("Even though the checkpoint is trained on images of specific size, the model will work on images of any size. The smallest supported image size is 32x32."),sr=p(),Et=r("li"),ve=r("p"),nr=n("One can use "),Je=r("a"),ir=n("MobileNetV2FeatureExtractor"),lr=n(" to prepare images for the model."),dr=p(),Vt=r("li"),we=r("p"),cr=n("The available image classification checkpoints are pre-trained on "),Me=r("a"),pr=n("ImageNet-1k"),hr=n(" (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes). However, the model predicts 1001 classes: the 1000 classes from ImageNet plus an extra \u201Cbackground\u201D class (index 0)."),mr=p(),Tt=r("li"),W=r("p"),fr=n("The original TensorFlow checkpoints use different padding rules than PyTorch, requiring the model to determine the padding amount at inference time, since this depends on the input image size. To use native PyTorch padding behavior, create a "),Qe=r("a"),ur=n("MobileNetV2Config"),gr=n(" with "),It=r("code"),_r=n("tf_padding = False"),br=n("."),io=p(),Xe=r("p"),vr=n("Unsupported features:"),lo=p(),P=r("ul"),Ct=r("li"),$e=r("p"),wr=n("The "),Ke=r("a"),Mr=n("MobileNetV2Model"),$r=n(" outputs a globally pooled version of the last hidden state. In the original model it is possible to use a 7x7 average pooling layer with stride 2 instead of global pooling. For larger inputs, this gives a pooled output that is larger than 1x1 pixel. The HuggingFace implementation does not support this."),yr=p(),Ft=r("li"),ye=r("p"),Nr=n("It is currently not possible to specify an "),Pt=r("code"),xr=n("output_stride"),Er=n(". For smaller output strides, the original model invokes dilated convolution to prevent the spatial resolution from being reduced further. The output stride of the HuggingFace model is always 32."),Vr=p(),jt=r("li"),kt=r("p"),Tr=n("The original TensorFlow checkpoints include quantized models. We do not support these models as they include additional \u201CFakeQuantization\u201D operations to unquantize the weights."),Ir=p(),zt=r("li"),Ne=r("p"),Cr=n("It\u2019s common to extract the output from the pointwise layers at indices 5, 11, 12, 13 for downstream purposes. Using "),At=r("code"),Fr=n("output_hidden_states=True"),Pr=n(" returns the output from all intermediate layers. There is currently no way to limit this to specific layers."),co=p(),L=r("p"),jr=n("This model was contributed by "),xe=r("a"),kr=n("matthijs"),zr=n(". The original code and weights can be found "),Ee=r("a"),Ar=n("here"),Lr=n("."),po=p(),R=r("h2"),te=r("a"),Lt=r("span"),w(Ve.$$.fragment),Or=p(),Ot=r("span"),qr=n("MobileNetV2Config"),ho=p(),I=r("div"),w(Te.$$.fragment),Sr=p(),H=r("p"),Dr=n("This is the configuration class to store the configuration of a "),Ye=r("a"),Wr=n("MobileNetV2Model"),Rr=n(`. It is used to instantiate a
MobileNetV2 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileNetV2
`),Ie=r("a"),Hr=n("Matthijs/mobilenet_v2_1.0_224"),Br=n(" architecture."),Ur=p(),B=r("p"),Gr=n("Configuration objects inherit from "),et=r("a"),Zr=n("PretrainedConfig"),Jr=n(` and can be used to control the model outputs. Read the
documentation from `),tt=r("a"),Qr=n("PretrainedConfig"),Xr=n(" for more information."),Kr=p(),w(oe.$$.fragment),mo=p(),U=r("h2"),re=r("a"),qt=r("span"),w(Ce.$$.fragment),Yr=p(),St=r("span"),ea=n("MobileNetV2FeatureExtractor"),fo=p(),C=r("div"),w(Fe.$$.fragment),ta=p(),Dt=r("p"),oa=n("Constructs a MobileNetV2 feature extractor."),ra=p(),Pe=r("p"),aa=n("This feature extractor inherits from "),ot=r("a"),sa=n("FeatureExtractionMixin"),na=n(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ia=p(),O=r("div"),w(je.$$.fragment),la=p(),Wt=r("p"),da=n("Main method to prepare for the model one or several image(s)."),ca=p(),w(ae.$$.fragment),uo=p(),G=r("h2"),se=r("a"),Rt=r("span"),w(ke.$$.fragment),pa=p(),Ht=r("span"),ha=n("MobileNetV2Model"),go=p(),A=r("div"),w(ze.$$.fragment),ma=p(),Ae=r("p"),fa=n(`The bare MobileNetV2 model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Le=r("a"),ua=n("torch.nn.Module"),ga=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),_a=p(),j=r("div"),w(Oe.$$.fragment),ba=p(),Z=r("p"),va=n("The "),rt=r("a"),wa=n("MobileNetV2Model"),Ma=n(" forward method, overrides the "),Bt=r("code"),$a=n("__call__"),ya=n(" special method."),Na=p(),w(ne.$$.fragment),xa=p(),w(ie.$$.fragment),_o=p(),J=r("h2"),le=r("a"),Ut=r("span"),w(qe.$$.fragment),Ea=p(),Gt=r("span"),Va=n("MobileNetV2ForImageClassification"),bo=p(),F=r("div"),w(Se.$$.fragment),Ta=p(),Zt=r("p"),Ia=n(`MobileNetV2 model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ca=p(),De=r("p"),Fa=n("This model is a PyTorch "),We=r("a"),Pa=n("torch.nn.Module"),ja=n(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ka=p(),k=r("div"),w(Re.$$.fragment),za=p(),Q=r("p"),Aa=n("The "),at=r("a"),La=n("MobileNetV2ForImageClassification"),Oa=n(" forward method, overrides the "),Jt=r("code"),qa=n("__call__"),Sa=n(" special method."),Da=p(),w(de.$$.fragment),Wa=p(),w(ce.$$.fragment),this.h()},l(t){const m=tn('[data-svelte="svelte-1phssyn"]',document.head);c=a(m,"META",{name:!0,content:!0}),m.forEach(o),b=h(t),g=a(t,"H1",{class:!0});var He=s(g);f=a(He,"A",{id:!0,class:!0,href:!0});var Qt=s(f);v=a(Qt,"SPAN",{});var Xt=s(v);M(l.$$.fragment,Xt),Xt.forEach(o),Qt.forEach(o),_=h(He),z=a(He,"SPAN",{});var Kt=s(z);ko=i(Kt,"MobileNet V2"),Kt.forEach(o),He.forEach(o),to=h(t),D=a(t,"H2",{class:!0});var Be=s(D);X=a(Be,"A",{id:!0,class:!0,href:!0});var Yt=s(X);ft=a(Yt,"SPAN",{});var Ga=s(ft);M(_e.$$.fragment,Ga),Ga.forEach(o),Yt.forEach(o),zo=h(Be),ut=a(Be,"SPAN",{});var Za=s(ut);Ao=i(Za,"Overview"),Za.forEach(o),Be.forEach(o),oo=h(t),K=a(t,"P",{});var wo=s(K);Lo=i(wo,"The MobileNet model was proposed in "),be=a(wo,"A",{href:!0,rel:!0});var Ja=s(be);Oo=i(Ja,"MobileNetV2: Inverted Residuals and Linear Bottlenecks"),Ja.forEach(o),qo=i(wo," by Mark Sandler, Andrew Howard, Menglong Zhu, Andrey Zhmoginov, Liang-Chieh Chen."),wo.forEach(o),ro=h(t),Ge=a(t,"P",{});var Qa=s(Ge);So=i(Qa,"The abstract from the paper is the following:"),Qa.forEach(o),ao=h(t),Y=a(t,"P",{});var Mo=s(Y);gt=a(Mo,"EM",{});var Xa=s(gt);Do=i(Xa,"In this paper we describe a new mobile architecture, MobileNetV2, that improves the state of the art performance of mobile models on multiple tasks and benchmarks as well as across a spectrum of different model sizes. We also describe efficient ways of applying these mobile models to object detection in a novel framework we call SSDLite. Additionally, we demonstrate how to build mobile semantic segmentation models through a reduced form of DeepLabv3 which we call Mobile DeepLabv3."),Xa.forEach(o),Wo=h(Mo),_t=a(Mo,"EM",{});var Ka=s(_t);Ro=i(Ka,"The MobileNetV2 architecture is based on an inverted residual structure where the input and output of the residual block are thin bottleneck layers opposite to traditional residual models which use expanded representations in the input an MobileNetV2 uses lightweight depthwise convolutions to filter features in the intermediate expansion layer. Additionally, we find that it is important to remove non-linearities in the narrow layers in order to maintain representational power. We demonstrate that this improves performance and provide an intuition that led to this design. Finally, our approach allows decoupling of the input/output domains from the expressiveness of the transformation, which provides a convenient framework for further analysis. We measure our performance on Imagenet classification, COCO object detection, VOC image segmentation. We evaluate the trade-offs between accuracy, and number of operations measured by multiply-adds (MAdd), as well as the number of parameters."),Ka.forEach(o),Mo.forEach(o),so=h(t),Ze=a(t,"P",{});var Ya=s(Ze);Ho=i(Ya,"Tips:"),Ya.forEach(o),no=h(t),V=a(t,"UL",{});var q=s(V);bt=a(q,"LI",{});var es=s(bt);T=a(es,"P",{});var S=s(T);Bo=i(S,"The checkpoints are named "),ee=a(S,"STRONG",{});var eo=s(ee);Uo=i(eo,"mobilenet_v2_"),vt=a(eo,"EM",{});var ts=s(vt);Go=i(ts,"depth"),ts.forEach(o),Zo=i(eo,"_"),wt=a(eo,"EM",{});var os=s(wt);Jo=i(os,"size"),os.forEach(o),eo.forEach(o),Qo=i(S,", for example "),Mt=a(S,"STRONG",{});var rs=s(Mt);Xo=i(rs,"mobilenet_v2_1.0_224"),rs.forEach(o),Ko=i(S,", where "),$t=a(S,"STRONG",{});var as=s($t);Yo=i(as,"1.0"),as.forEach(o),er=i(S," is the depth multiplier (sometimes also referred to as \u201Calpha\u201D or the width multiplier) and "),yt=a(S,"STRONG",{});var ss=s(yt);tr=i(ss,"224"),ss.forEach(o),or=i(S," is the resolution of the input images the model was trained on."),S.forEach(o),es.forEach(o),rr=h(q),Nt=a(q,"LI",{});var ns=s(Nt);xt=a(ns,"P",{});var is=s(xt);ar=i(is,"Even though the checkpoint is trained on images of specific size, the model will work on images of any size. The smallest supported image size is 32x32."),is.forEach(o),ns.forEach(o),sr=h(q),Et=a(q,"LI",{});var ls=s(Et);ve=a(ls,"P",{});var $o=s(ve);nr=i($o,"One can use "),Je=a($o,"A",{href:!0});var ds=s(Je);ir=i(ds,"MobileNetV2FeatureExtractor"),ds.forEach(o),lr=i($o," to prepare images for the model."),$o.forEach(o),ls.forEach(o),dr=h(q),Vt=a(q,"LI",{});var cs=s(Vt);we=a(cs,"P",{});var yo=s(we);cr=i(yo,"The available image classification checkpoints are pre-trained on "),Me=a(yo,"A",{href:!0,rel:!0});var ps=s(Me);pr=i(ps,"ImageNet-1k"),ps.forEach(o),hr=i(yo," (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000 classes). However, the model predicts 1001 classes: the 1000 classes from ImageNet plus an extra \u201Cbackground\u201D class (index 0)."),yo.forEach(o),cs.forEach(o),mr=h(q),Tt=a(q,"LI",{});var hs=s(Tt);W=a(hs,"P",{});var st=s(W);fr=i(st,"The original TensorFlow checkpoints use different padding rules than PyTorch, requiring the model to determine the padding amount at inference time, since this depends on the input image size. To use native PyTorch padding behavior, create a "),Qe=a(st,"A",{href:!0});var ms=s(Qe);ur=i(ms,"MobileNetV2Config"),ms.forEach(o),gr=i(st," with "),It=a(st,"CODE",{});var fs=s(It);_r=i(fs,"tf_padding = False"),fs.forEach(o),br=i(st,"."),st.forEach(o),hs.forEach(o),q.forEach(o),io=h(t),Xe=a(t,"P",{});var us=s(Xe);vr=i(us,"Unsupported features:"),us.forEach(o),lo=h(t),P=a(t,"UL",{});var pe=s(P);Ct=a(pe,"LI",{});var gs=s(Ct);$e=a(gs,"P",{});var No=s($e);wr=i(No,"The "),Ke=a(No,"A",{href:!0});var _s=s(Ke);Mr=i(_s,"MobileNetV2Model"),_s.forEach(o),$r=i(No," outputs a globally pooled version of the last hidden state. In the original model it is possible to use a 7x7 average pooling layer with stride 2 instead of global pooling. For larger inputs, this gives a pooled output that is larger than 1x1 pixel. The HuggingFace implementation does not support this."),No.forEach(o),gs.forEach(o),yr=h(pe),Ft=a(pe,"LI",{});var bs=s(Ft);ye=a(bs,"P",{});var xo=s(ye);Nr=i(xo,"It is currently not possible to specify an "),Pt=a(xo,"CODE",{});var vs=s(Pt);xr=i(vs,"output_stride"),vs.forEach(o),Er=i(xo,". For smaller output strides, the original model invokes dilated convolution to prevent the spatial resolution from being reduced further. The output stride of the HuggingFace model is always 32."),xo.forEach(o),bs.forEach(o),Vr=h(pe),jt=a(pe,"LI",{});var ws=s(jt);kt=a(ws,"P",{});var Ms=s(kt);Tr=i(Ms,"The original TensorFlow checkpoints include quantized models. We do not support these models as they include additional \u201CFakeQuantization\u201D operations to unquantize the weights."),Ms.forEach(o),ws.forEach(o),Ir=h(pe),zt=a(pe,"LI",{});var $s=s(zt);Ne=a($s,"P",{});var Eo=s(Ne);Cr=i(Eo,"It\u2019s common to extract the output from the pointwise layers at indices 5, 11, 12, 13 for downstream purposes. Using "),At=a(Eo,"CODE",{});var ys=s(At);Fr=i(ys,"output_hidden_states=True"),ys.forEach(o),Pr=i(Eo," returns the output from all intermediate layers. There is currently no way to limit this to specific layers."),Eo.forEach(o),$s.forEach(o),pe.forEach(o),co=h(t),L=a(t,"P",{});var nt=s(L);jr=i(nt,"This model was contributed by "),xe=a(nt,"A",{href:!0,rel:!0});var Ns=s(xe);kr=i(Ns,"matthijs"),Ns.forEach(o),zr=i(nt,". The original code and weights can be found "),Ee=a(nt,"A",{href:!0,rel:!0});var xs=s(Ee);Ar=i(xs,"here"),xs.forEach(o),Lr=i(nt,"."),nt.forEach(o),po=h(t),R=a(t,"H2",{class:!0});var Vo=s(R);te=a(Vo,"A",{id:!0,class:!0,href:!0});var Es=s(te);Lt=a(Es,"SPAN",{});var Vs=s(Lt);M(Ve.$$.fragment,Vs),Vs.forEach(o),Es.forEach(o),Or=h(Vo),Ot=a(Vo,"SPAN",{});var Ts=s(Ot);qr=i(Ts,"MobileNetV2Config"),Ts.forEach(o),Vo.forEach(o),ho=h(t),I=a(t,"DIV",{class:!0});var he=s(I);M(Te.$$.fragment,he),Sr=h(he),H=a(he,"P",{});var it=s(H);Dr=i(it,"This is the configuration class to store the configuration of a "),Ye=a(it,"A",{href:!0});var Is=s(Ye);Wr=i(Is,"MobileNetV2Model"),Is.forEach(o),Rr=i(it,`. It is used to instantiate a
MobileNetV2 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the MobileNetV2
`),Ie=a(it,"A",{href:!0,rel:!0});var Cs=s(Ie);Hr=i(Cs,"Matthijs/mobilenet_v2_1.0_224"),Cs.forEach(o),Br=i(it," architecture."),it.forEach(o),Ur=h(he),B=a(he,"P",{});var lt=s(B);Gr=i(lt,"Configuration objects inherit from "),et=a(lt,"A",{href:!0});var Fs=s(et);Zr=i(Fs,"PretrainedConfig"),Fs.forEach(o),Jr=i(lt,` and can be used to control the model outputs. Read the
documentation from `),tt=a(lt,"A",{href:!0});var Ps=s(tt);Qr=i(Ps,"PretrainedConfig"),Ps.forEach(o),Xr=i(lt," for more information."),lt.forEach(o),Kr=h(he),M(oe.$$.fragment,he),he.forEach(o),mo=h(t),U=a(t,"H2",{class:!0});var To=s(U);re=a(To,"A",{id:!0,class:!0,href:!0});var js=s(re);qt=a(js,"SPAN",{});var ks=s(qt);M(Ce.$$.fragment,ks),ks.forEach(o),js.forEach(o),Yr=h(To),St=a(To,"SPAN",{});var zs=s(St);ea=i(zs,"MobileNetV2FeatureExtractor"),zs.forEach(o),To.forEach(o),fo=h(t),C=a(t,"DIV",{class:!0});var me=s(C);M(Fe.$$.fragment,me),ta=h(me),Dt=a(me,"P",{});var As=s(Dt);oa=i(As,"Constructs a MobileNetV2 feature extractor."),As.forEach(o),ra=h(me),Pe=a(me,"P",{});var Io=s(Pe);aa=i(Io,"This feature extractor inherits from "),ot=a(Io,"A",{href:!0});var Ls=s(ot);sa=i(Ls,"FeatureExtractionMixin"),Ls.forEach(o),na=i(Io,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Io.forEach(o),ia=h(me),O=a(me,"DIV",{class:!0});var dt=s(O);M(je.$$.fragment,dt),la=h(dt),Wt=a(dt,"P",{});var Os=s(Wt);da=i(Os,"Main method to prepare for the model one or several image(s)."),Os.forEach(o),ca=h(dt),M(ae.$$.fragment,dt),dt.forEach(o),me.forEach(o),uo=h(t),G=a(t,"H2",{class:!0});var Co=s(G);se=a(Co,"A",{id:!0,class:!0,href:!0});var qs=s(se);Rt=a(qs,"SPAN",{});var Ss=s(Rt);M(ke.$$.fragment,Ss),Ss.forEach(o),qs.forEach(o),pa=h(Co),Ht=a(Co,"SPAN",{});var Ds=s(Ht);ha=i(Ds,"MobileNetV2Model"),Ds.forEach(o),Co.forEach(o),go=h(t),A=a(t,"DIV",{class:!0});var ct=s(A);M(ze.$$.fragment,ct),ma=h(ct),Ae=a(ct,"P",{});var Fo=s(Ae);fa=i(Fo,`The bare MobileNetV2 model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Le=a(Fo,"A",{href:!0,rel:!0});var Ws=s(Le);ua=i(Ws,"torch.nn.Module"),Ws.forEach(o),ga=i(Fo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Fo.forEach(o),_a=h(ct),j=a(ct,"DIV",{class:!0});var fe=s(j);M(Oe.$$.fragment,fe),ba=h(fe),Z=a(fe,"P",{});var pt=s(Z);va=i(pt,"The "),rt=a(pt,"A",{href:!0});var Rs=s(rt);wa=i(Rs,"MobileNetV2Model"),Rs.forEach(o),Ma=i(pt," forward method, overrides the "),Bt=a(pt,"CODE",{});var Hs=s(Bt);$a=i(Hs,"__call__"),Hs.forEach(o),ya=i(pt," special method."),pt.forEach(o),Na=h(fe),M(ne.$$.fragment,fe),xa=h(fe),M(ie.$$.fragment,fe),fe.forEach(o),ct.forEach(o),_o=h(t),J=a(t,"H2",{class:!0});var Po=s(J);le=a(Po,"A",{id:!0,class:!0,href:!0});var Bs=s(le);Ut=a(Bs,"SPAN",{});var Us=s(Ut);M(qe.$$.fragment,Us),Us.forEach(o),Bs.forEach(o),Ea=h(Po),Gt=a(Po,"SPAN",{});var Gs=s(Gt);Va=i(Gs,"MobileNetV2ForImageClassification"),Gs.forEach(o),Po.forEach(o),bo=h(t),F=a(t,"DIV",{class:!0});var ue=s(F);M(Se.$$.fragment,ue),Ta=h(ue),Zt=a(ue,"P",{});var Zs=s(Zt);Ia=i(Zs,`MobileNetV2 model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Zs.forEach(o),Ca=h(ue),De=a(ue,"P",{});var jo=s(De);Fa=i(jo,"This model is a PyTorch "),We=a(jo,"A",{href:!0,rel:!0});var Js=s(We);Pa=i(Js,"torch.nn.Module"),Js.forEach(o),ja=i(jo,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),jo.forEach(o),ka=h(ue),k=a(ue,"DIV",{class:!0});var ge=s(k);M(Re.$$.fragment,ge),za=h(ge),Q=a(ge,"P",{});var ht=s(Q);Aa=i(ht,"The "),at=a(ht,"A",{href:!0});var Qs=s(at);La=i(Qs,"MobileNetV2ForImageClassification"),Qs.forEach(o),Oa=i(ht," forward method, overrides the "),Jt=a(ht,"CODE",{});var Xs=s(Jt);qa=i(Xs,"__call__"),Xs.forEach(o),Sa=i(ht," special method."),ht.forEach(o),Da=h(ge),M(de.$$.fragment,ge),Wa=h(ge),M(ce.$$.fragment,ge),ge.forEach(o),ue.forEach(o),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(pn)),d(f,"id","mobilenet-v2"),d(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f,"href","#mobilenet-v2"),d(g,"class","relative group"),d(X,"id","overview"),d(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X,"href","#overview"),d(D,"class","relative group"),d(be,"href","https://arxiv.org/abs/1801.04381"),d(be,"rel","nofollow"),d(Je,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2FeatureExtractor"),d(Me,"href","https://huggingface.co/datasets/imagenet-1k"),d(Me,"rel","nofollow"),d(Qe,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config"),d(Ke,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model"),d(xe,"href","https://huggingface.co/Matthijs"),d(xe,"rel","nofollow"),d(Ee,"href","https://github.com/tensorflow/models/tree/master/research/slim/nets/mobilenet"),d(Ee,"rel","nofollow"),d(te,"id","transformers.MobileNetV2Config"),d(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(te,"href","#transformers.MobileNetV2Config"),d(R,"class","relative group"),d(Ye,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model"),d(Ie,"href","https://huggingface.co/Matthijs/mobilenet_v2_1.0_224"),d(Ie,"rel","nofollow"),d(et,"href","/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig"),d(tt,"href","/docs/transformers/pr_17845/en/main_classes/configuration#transformers.PretrainedConfig"),d(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(re,"id","transformers.MobileNetV2FeatureExtractor"),d(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(re,"href","#transformers.MobileNetV2FeatureExtractor"),d(U,"class","relative group"),d(ot,"href","/docs/transformers/pr_17845/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"id","transformers.MobileNetV2Model"),d(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(se,"href","#transformers.MobileNetV2Model"),d(G,"class","relative group"),d(Le,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Le,"rel","nofollow"),d(rt,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(le,"id","transformers.MobileNetV2ForImageClassification"),d(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(le,"href","#transformers.MobileNetV2ForImageClassification"),d(J,"class","relative group"),d(We,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(We,"rel","nofollow"),d(at,"href","/docs/transformers/pr_17845/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification"),d(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,m){e(document.head,c),u(t,b,m),u(t,g,m),e(g,f),e(f,v),$(l,v,null),e(g,_),e(g,z),e(z,ko),u(t,to,m),u(t,D,m),e(D,X),e(X,ft),$(_e,ft,null),e(D,zo),e(D,ut),e(ut,Ao),u(t,oo,m),u(t,K,m),e(K,Lo),e(K,be),e(be,Oo),e(K,qo),u(t,ro,m),u(t,Ge,m),e(Ge,So),u(t,ao,m),u(t,Y,m),e(Y,gt),e(gt,Do),e(Y,Wo),e(Y,_t),e(_t,Ro),u(t,so,m),u(t,Ze,m),e(Ze,Ho),u(t,no,m),u(t,V,m),e(V,bt),e(bt,T),e(T,Bo),e(T,ee),e(ee,Uo),e(ee,vt),e(vt,Go),e(ee,Zo),e(ee,wt),e(wt,Jo),e(T,Qo),e(T,Mt),e(Mt,Xo),e(T,Ko),e(T,$t),e($t,Yo),e(T,er),e(T,yt),e(yt,tr),e(T,or),e(V,rr),e(V,Nt),e(Nt,xt),e(xt,ar),e(V,sr),e(V,Et),e(Et,ve),e(ve,nr),e(ve,Je),e(Je,ir),e(ve,lr),e(V,dr),e(V,Vt),e(Vt,we),e(we,cr),e(we,Me),e(Me,pr),e(we,hr),e(V,mr),e(V,Tt),e(Tt,W),e(W,fr),e(W,Qe),e(Qe,ur),e(W,gr),e(W,It),e(It,_r),e(W,br),u(t,io,m),u(t,Xe,m),e(Xe,vr),u(t,lo,m),u(t,P,m),e(P,Ct),e(Ct,$e),e($e,wr),e($e,Ke),e(Ke,Mr),e($e,$r),e(P,yr),e(P,Ft),e(Ft,ye),e(ye,Nr),e(ye,Pt),e(Pt,xr),e(ye,Er),e(P,Vr),e(P,jt),e(jt,kt),e(kt,Tr),e(P,Ir),e(P,zt),e(zt,Ne),e(Ne,Cr),e(Ne,At),e(At,Fr),e(Ne,Pr),u(t,co,m),u(t,L,m),e(L,jr),e(L,xe),e(xe,kr),e(L,zr),e(L,Ee),e(Ee,Ar),e(L,Lr),u(t,po,m),u(t,R,m),e(R,te),e(te,Lt),$(Ve,Lt,null),e(R,Or),e(R,Ot),e(Ot,qr),u(t,ho,m),u(t,I,m),$(Te,I,null),e(I,Sr),e(I,H),e(H,Dr),e(H,Ye),e(Ye,Wr),e(H,Rr),e(H,Ie),e(Ie,Hr),e(H,Br),e(I,Ur),e(I,B),e(B,Gr),e(B,et),e(et,Zr),e(B,Jr),e(B,tt),e(tt,Qr),e(B,Xr),e(I,Kr),$(oe,I,null),u(t,mo,m),u(t,U,m),e(U,re),e(re,qt),$(Ce,qt,null),e(U,Yr),e(U,St),e(St,ea),u(t,fo,m),u(t,C,m),$(Fe,C,null),e(C,ta),e(C,Dt),e(Dt,oa),e(C,ra),e(C,Pe),e(Pe,aa),e(Pe,ot),e(ot,sa),e(Pe,na),e(C,ia),e(C,O),$(je,O,null),e(O,la),e(O,Wt),e(Wt,da),e(O,ca),$(ae,O,null),u(t,uo,m),u(t,G,m),e(G,se),e(se,Rt),$(ke,Rt,null),e(G,pa),e(G,Ht),e(Ht,ha),u(t,go,m),u(t,A,m),$(ze,A,null),e(A,ma),e(A,Ae),e(Ae,fa),e(Ae,Le),e(Le,ua),e(Ae,ga),e(A,_a),e(A,j),$(Oe,j,null),e(j,ba),e(j,Z),e(Z,va),e(Z,rt),e(rt,wa),e(Z,Ma),e(Z,Bt),e(Bt,$a),e(Z,ya),e(j,Na),$(ne,j,null),e(j,xa),$(ie,j,null),u(t,_o,m),u(t,J,m),e(J,le),e(le,Ut),$(qe,Ut,null),e(J,Ea),e(J,Gt),e(Gt,Va),u(t,bo,m),u(t,F,m),$(Se,F,null),e(F,Ta),e(F,Zt),e(Zt,Ia),e(F,Ca),e(F,De),e(De,Fa),e(De,We),e(We,Pa),e(De,ja),e(F,ka),e(F,k),$(Re,k,null),e(k,za),e(k,Q),e(Q,Aa),e(Q,at),e(at,La),e(Q,Oa),e(Q,Jt),e(Jt,qa),e(Q,Sa),e(k,Da),$(de,k,null),e(k,Wa),$(ce,k,null),vo=!0},p(t,[m]){const He={};m&2&&(He.$$scope={dirty:m,ctx:t}),oe.$set(He);const Qt={};m&2&&(Qt.$$scope={dirty:m,ctx:t}),ae.$set(Qt);const Xt={};m&2&&(Xt.$$scope={dirty:m,ctx:t}),ne.$set(Xt);const Kt={};m&2&&(Kt.$$scope={dirty:m,ctx:t}),ie.$set(Kt);const Be={};m&2&&(Be.$$scope={dirty:m,ctx:t}),de.$set(Be);const Yt={};m&2&&(Yt.$$scope={dirty:m,ctx:t}),ce.$set(Yt)},i(t){vo||(y(l.$$.fragment,t),y(_e.$$.fragment,t),y(Ve.$$.fragment,t),y(Te.$$.fragment,t),y(oe.$$.fragment,t),y(Ce.$$.fragment,t),y(Fe.$$.fragment,t),y(je.$$.fragment,t),y(ae.$$.fragment,t),y(ke.$$.fragment,t),y(ze.$$.fragment,t),y(Oe.$$.fragment,t),y(ne.$$.fragment,t),y(ie.$$.fragment,t),y(qe.$$.fragment,t),y(Se.$$.fragment,t),y(Re.$$.fragment,t),y(de.$$.fragment,t),y(ce.$$.fragment,t),vo=!0)},o(t){N(l.$$.fragment,t),N(_e.$$.fragment,t),N(Ve.$$.fragment,t),N(Te.$$.fragment,t),N(oe.$$.fragment,t),N(Ce.$$.fragment,t),N(Fe.$$.fragment,t),N(je.$$.fragment,t),N(ae.$$.fragment,t),N(ke.$$.fragment,t),N(ze.$$.fragment,t),N(Oe.$$.fragment,t),N(ne.$$.fragment,t),N(ie.$$.fragment,t),N(qe.$$.fragment,t),N(Se.$$.fragment,t),N(Re.$$.fragment,t),N(de.$$.fragment,t),N(ce.$$.fragment,t),vo=!1},d(t){o(c),t&&o(b),t&&o(g),x(l),t&&o(to),t&&o(D),x(_e),t&&o(oo),t&&o(K),t&&o(ro),t&&o(Ge),t&&o(ao),t&&o(Y),t&&o(so),t&&o(Ze),t&&o(no),t&&o(V),t&&o(io),t&&o(Xe),t&&o(lo),t&&o(P),t&&o(co),t&&o(L),t&&o(po),t&&o(R),x(Ve),t&&o(ho),t&&o(I),x(Te),x(oe),t&&o(mo),t&&o(U),x(Ce),t&&o(fo),t&&o(C),x(Fe),x(je),x(ae),t&&o(uo),t&&o(G),x(ke),t&&o(go),t&&o(A),x(ze),x(Oe),x(ne),x(ie),t&&o(_o),t&&o(J),x(qe),t&&o(bo),t&&o(F),x(Se),x(Re),x(de),x(ce)}}}const pn={local:"mobilenet-v2",sections:[{local:"overview",title:"Overview"},{local:"transformers.MobileNetV2Config",title:"MobileNetV2Config"},{local:"transformers.MobileNetV2FeatureExtractor",title:"MobileNetV2FeatureExtractor"},{local:"transformers.MobileNetV2Model",title:"MobileNetV2Model"},{local:"transformers.MobileNetV2ForImageClassification",title:"MobileNetV2ForImageClassification"}],title:"MobileNet V2"};function hn(E){return on(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vn extends Ks{constructor(c){super();Ys(this,c,hn,cn,en,{})}}export{vn as default,pn as metadata};
