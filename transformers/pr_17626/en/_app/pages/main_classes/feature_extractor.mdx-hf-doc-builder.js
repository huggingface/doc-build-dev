import{S as Bo,i as jo,s as Co,e as a,k as c,w as g,t as s,M as Vo,c as o,d as r,m as d,a as n,x as _,h as i,b as l,G as e,g as E,y as v,q as x,o as y,B as b,v as Oo,L as Wo}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ao}from"../../chunks/Tip-hf-doc-builder.js";import{D as P}from"../../chunks/Docstring-hf-doc-builder.js";import{C as Uo}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as qt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as Ho}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Ro(Y){let m,T,f,h,F;return{c(){m=a("p"),T=s("Passing "),f=a("code"),h=s("use_auth_token=True"),F=s(" is required when you want to use a private model.")},l(p){m=o(p,"P",{});var $=n(m);T=i($,"Passing "),f=o($,"CODE",{});var L=n(f);h=i(L,"use_auth_token=True"),L.forEach(r),F=i($," is required when you want to use a private model."),$.forEach(r)},m(p,$){E(p,m,$),e(m,T),e(m,f),e(f,h),e(m,F)},d(p){p&&r(m)}}}function Jo(Y){let m,T,f,h,F;return h=new Uo({props:{code:`# We can't instantiate directly the base class *FeatureExtractionMixin* nor *SequenceFeatureExtractor* so let's show the examples on a
# derived class: *Wav2Vec2FeatureExtractor*
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    "facebook/wav2vec2-base-960h"
)  # Download feature_extraction_config from huggingface.co and cache.
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    "./test/saved_model/"
)  # E.g. feature_extractor (or model) was saved using *save_pretrained('./test/saved_model/')*
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained("./test/saved_model/preprocessor_config.json")
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    "facebook/wav2vec2-base-960h", return_attention_mask=False, foo=False
)
assert feature_extractor.return_attention_mask is False
feature_extractor, unused_kwargs = Wav2Vec2FeatureExtractor.from_pretrained(
    "facebook/wav2vec2-base-960h", return_attention_mask=False, foo=False, return_unused_kwargs=True
)
assert feature_extractor.return_attention_mask is False
assert unused_kwargs == {"foo": False}`,highlighted:`<span class="hljs-comment"># We can&#x27;t instantiate directly the base class *FeatureExtractionMixin* nor *SequenceFeatureExtractor* so let&#x27;s show the examples on a</span>
<span class="hljs-comment"># derived class: *Wav2Vec2FeatureExtractor*</span>
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>
)  <span class="hljs-comment"># Download feature_extraction_config from huggingface.co and cache.</span>
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;./test/saved_model/&quot;</span>
)  <span class="hljs-comment"># E.g. feature_extractor (or model) was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*</span>
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/preprocessor_config.json&quot;</span>)
feature_extractor = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, return_attention_mask=<span class="hljs-literal">False</span>, foo=<span class="hljs-literal">False</span>
)
<span class="hljs-keyword">assert</span> feature_extractor.return_attention_mask <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>
feature_extractor, unused_kwargs = Wav2Vec2FeatureExtractor.from_pretrained(
    <span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, return_attention_mask=<span class="hljs-literal">False</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
)
<span class="hljs-keyword">assert</span> feature_extractor.return_attention_mask <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>
<span class="hljs-keyword">assert</span> unused_kwargs == {<span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-literal">False</span>}`}}),{c(){m=a("p"),T=s("Examples:"),f=c(),g(h.$$.fragment)},l(p){m=o(p,"P",{});var $=n(m);T=i($,"Examples:"),$.forEach(r),f=d(p),_(h.$$.fragment,p)},m(p,$){E(p,m,$),e(m,T),E(p,f,$),v(h,p,$),F=!0},p:Wo,i(p){F||(x(h.$$.fragment,p),F=!0)},o(p){y(h.$$.fragment,p),F=!1},d(p){p&&r(m),p&&r(f),b(h,p)}}}function Go(Y){let m,T,f,h,F,p,$,L;return{c(){m=a("p"),T=s("If the "),f=a("code"),h=s("processed_features"),F=s(` passed are dictionary of numpy arrays, PyTorch tensors or TensorFlow tensors, the
result will use the same type unless you provide a different tensor type with `),p=a("code"),$=s("return_tensors"),L=s(`. In the case of
PyTorch tensors, you will lose the specific device of your tensors however.`)},l(V){m=o(V,"P",{});var z=n(m);T=i(z,"If the "),f=o(z,"CODE",{});var q=n(f);h=i(q,"processed_features"),q.forEach(r),F=i(z,` passed are dictionary of numpy arrays, PyTorch tensors or TensorFlow tensors, the
result will use the same type unless you provide a different tensor type with `),p=o(z,"CODE",{});var Oe=n(p);$=i(Oe,"return_tensors"),Oe.forEach(r),L=i(z,`. In the case of
PyTorch tensors, you will lose the specific device of your tensors however.`),z.forEach(r)},m(V,z){E(V,m,z),e(m,T),e(m,f),e(f,h),e(m,F),e(m,p),e(p,$),e(m,L)},d(V){V&&r(m)}}}function Yo(Y){let m,T,f,h,F,p,$,L,V,z,q,Oe,Xe,sr,ir,Ze,cr,dr,Mt,O,K,et,ge,lr,tt,mr,Dt,M,_e,pr,rt,ur,fr,S,ve,hr,A,gr,We,_r,vr,at,xr,yr,Ue,br,Er,$r,Q,wr,X,Fr,Z,xe,Tr,W,Ir,ot,kr,Pr,He,zr,qr,Lt,U,ee,nt,ye,Mr,st,Dr,St,B,be,Lr,it,Sr,Nr,N,Ee,Ar,ct,Br,jr,H,Cr,dt,Vr,Or,lt,Wr,Ur,Hr,te,Nt,R,re,mt,$e,Rr,pt,Jr,At,k,we,Gr,J,Yr,Re,Kr,Qr,ut,Xr,Zr,ea,ft,ta,ra,ae,Fe,aa,ht,oa,na,oe,Te,sa,Ie,ia,gt,ca,da,Bt,G,ne,_t,ke,la,vt,ma,jt,w,Pe,pa,xt,ua,fa,se,ze,ha,qe,ga,yt,_a,va,xa,ie,Me,ya,De,ba,bt,Ea,$a,wa,ce,Le,Fa,D,Ta,Et,Ia,ka,$t,Pa,za,wt,qa,Ma,Ft,Da,La,Sa,de,Se,Na,Ne,Aa,Tt,Ba,ja,Ca,le,Ae,Va,Be,Oa,It,Wa,Ua,Ha,me,je,Ra,Ce,Ja,kt,Ga,Ya,Ct;return p=new qt({}),ge=new qt({}),_e=new P({props:{name:"class transformers.FeatureExtractionMixin",anchor:"transformers.FeatureExtractionMixin",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_utils.py#L204"}}),ve=new P({props:{name:"from_pretrained",anchor:"transformers.FeatureExtractionMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.FeatureExtractionMixin.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_utils.py#L228",returnDescription:`
<p>A feature extractor of type <a
  href="/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"
>FeatureExtractionMixin</a>.</p>
`}}),Q=new Ao({props:{$$slots:{default:[Ro]},$$scope:{ctx:Y}}}),X=new Ho({props:{anchor:"transformers.FeatureExtractionMixin.from_pretrained.example",$$slots:{default:[Jo]},$$scope:{ctx:Y}}}),xe=new P({props:{name:"save_pretrained",anchor:"transformers.FeatureExtractionMixin.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FeatureExtractionMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file will be saved (will be created if it does not exist).`,name:"save_directory"},{anchor:"transformers.FeatureExtractionMixin.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your feature extractor to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_17626/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_utils.py#L312"}}),ye=new qt({}),be=new P({props:{name:"class transformers.SequenceFeatureExtractor",anchor:"transformers.SequenceFeatureExtractor",parameters:[{name:"feature_size",val:": int"},{name:"sampling_rate",val:": int"},{name:"padding_value",val:": float"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.SequenceFeatureExtractor.feature_size",description:`<strong>feature_size</strong> (<code>int</code>) &#x2014;
The feature dimension of the extracted features.`,name:"feature_size"},{anchor:"transformers.SequenceFeatureExtractor.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>) &#x2014;
The sampling rate at which the audio files should be digitalized expressed in Hertz per second (Hz).`,name:"sampling_rate"},{anchor:"transformers.SequenceFeatureExtractor.padding_value",description:`<strong>padding_value</strong> (<code>float</code>) &#x2014;
The value that is used to fill the padding values / vectors.`,name:"padding_value"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_sequence_utils.py#L30"}}),Ee=new P({props:{name:"pad",anchor:"transformers.SequenceFeatureExtractor.pad",parameters:[{name:"processed_features",val:": typing.Union[transformers.feature_extraction_utils.BatchFeature, typing.List[transformers.feature_extraction_utils.BatchFeature], typing.Dict[str, transformers.feature_extraction_utils.BatchFeature], typing.Dict[str, typing.List[transformers.feature_extraction_utils.BatchFeature]], typing.List[typing.Dict[str, transformers.feature_extraction_utils.BatchFeature]]]"},{name:"padding",val:": typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = True"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"truncation",val:": bool = False"},{name:"pad_to_multiple_of",val:": typing.Optional[int] = None"},{name:"return_attention_mask",val:": typing.Optional[bool] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.SequenceFeatureExtractor.pad.processed_features",description:`<strong>processed_features</strong> (<a href="/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a>, list of <a href="/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a>, <code>Dict[str, List[float]]</code>, <code>Dict[str, List[List[float]]</code> or <code>List[Dict[str, List[float]]]</code>) &#x2014;
Processed inputs. Can represent one input (<a href="/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a> or <code>Dict[str, List[float]]</code>) or a batch of
input values / vectors (list of <a href="/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.BatchFeature">BatchFeature</a>, <em>Dict[str, List[List[float]]]</em> or <em>List[Dict[str,
List[float]]]</em>) so you can use this method during preprocessing as well as in a PyTorch Dataloader
collate function.</p>
<p>Instead of <code>List[float]</code> you can have tensors (numpy arrays, PyTorch tensors or TensorFlow tensors),
see the note above for the return type.`,name:"processed_features"},{anchor:"transformers.SequenceFeatureExtractor.pad.padding",description:`<strong>padding</strong> (<code>bool</code>, <code>str</code> or <a href="/docs/transformers/pr_17626/en/internal/file_utils#transformers.utils.PaddingStrategy">PaddingStrategy</a>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Select a strategy to pad the returned sequences (according to the model&#x2019;s padding side and padding
index) among:</p>
<ul>
<li><code>True</code> or <code>&apos;longest&apos;</code>: Pad to the longest sequence in the batch (or no padding if only a single
sequence if provided).</li>
<li><code>&apos;max_length&apos;</code>: Pad to a maximum length specified with the argument <code>max_length</code> or to the maximum
acceptable input length for the model if that argument is not provided.</li>
<li><code>False</code> or <code>&apos;do_not_pad&apos;</code> (default): No padding (i.e., can output a batch with sequences of different
lengths).</li>
</ul>`,name:"padding"},{anchor:"transformers.SequenceFeatureExtractor.pad.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Maximum length of the returned list and optionally padding length (see above).`,name:"max_length"},{anchor:"transformers.SequenceFeatureExtractor.pad.truncation",description:`<strong>truncation</strong> (<code>bool</code>) &#x2014;
Activates truncation to cut input sequences longer than <code>max_length</code> to <code>max_length</code>.`,name:"truncation"},{anchor:"transformers.SequenceFeatureExtractor.pad.pad_to_multiple_of",description:`<strong>pad_to_multiple_of</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If set will pad the sequence to a multiple of the provided value.</p>
<p>This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability</p>
<blockquote>
<p>= 7.5 (Volta), or on TPUs which benefit from having sequence lengths be a multiple of 128.</p>
</blockquote>`,name:"pad_to_multiple_of"},{anchor:"transformers.SequenceFeatureExtractor.pad.return_attention_mask",description:`<strong>return_attention_mask</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to return the attention mask. If left to the default, will return the attention mask according
to the specific feature_extractor&#x2019;s default.</p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"return_attention_mask"},{anchor:"transformers.SequenceFeatureExtractor.pad.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_17626/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of list of python integers. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return Numpy <code>np.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_sequence_utils.py#L53"}}),te=new Ao({props:{$$slots:{default:[Go]},$$scope:{ctx:Y}}}),$e=new qt({}),we=new P({props:{name:"class transformers.BatchFeature",anchor:"transformers.BatchFeature",parameters:[{name:"data",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"tensor_type",val:": typing.Union[NoneType, str, transformers.utils.generic.TensorType] = None"}],parametersDescription:[{anchor:"transformers.BatchFeature.data",description:`<strong>data</strong> (<code>dict</code>) &#x2014;
Dictionary of lists/arrays/tensors returned by the <strong>call</strong>/pad methods (&#x2018;input_values&#x2019;, &#x2018;attention_mask&#x2019;,
etc.).`,name:"data"},{anchor:"transformers.BatchFeature.tensor_type",description:`<strong>tensor_type</strong> (<code>Union[None, str, TensorType]</code>, <em>optional</em>) &#x2014;
You can give a tensor_type here to convert the lists of integers in PyTorch/TensorFlow/Numpy Tensors at
initialization.`,name:"tensor_type"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_utils.py#L62"}}),Fe=new P({props:{name:"convert_to_tensors",anchor:"transformers.BatchFeature.convert_to_tensors",parameters:[{name:"tensor_type",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.BatchFeature.convert_to_tensors.tensor_type",description:`<strong>tensor_type</strong> (<code>str</code> or <a href="/docs/transformers/pr_17626/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
The type of tensors to use. If <code>str</code>, should be one of the values of the enum <a href="/docs/transformers/pr_17626/en/internal/file_utils#transformers.TensorType">TensorType</a>. If
<code>None</code>, no modification is done.`,name:"tensor_type"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_utils.py#L116"}}),Te=new P({props:{name:"to",anchor:"transformers.BatchFeature.to",parameters:[{name:"device",val:": typing.Union[str, ForwardRef('torch.device')]"}],parametersDescription:[{anchor:"transformers.BatchFeature.to.device",description:"<strong>device</strong> (<code>str</code> or <code>torch.device</code>) &#x2014; The device to put the tensors on.",name:"device"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/feature_extraction_utils.py#L181",returnDescription:`
<p>The same instance after modification.</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),ke=new qt({}),Pe=new P({props:{name:"class transformers.ImageFeatureExtractionMixin",anchor:"transformers.ImageFeatureExtractionMixin",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/image_utils.py#L77"}}),ze=new P({props:{name:"center_crop",anchor:"transformers.ImageFeatureExtractionMixin.center_crop",parameters:[{name:"image",val:""},{name:"size",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.center_crop.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code> of shape (n_channels, height, width) or (height, width, n_channels)) &#x2014;
The image to resize.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.center_crop.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple[int, int]</code>) &#x2014;
The size to which crop the image.`,name:"size"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/image_utils.py#L273",returnDescription:`
<p>A center cropped <code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code> of shape: (n_channels,
height, width).</p>
`,returnType:`
<p>new_image</p>
`}}),Me=new P({props:{name:"expand_dims",anchor:"transformers.ImageFeatureExtractionMixin.expand_dims",parameters:[{name:"image",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.expand_dims.image",description:`<strong>image</strong> (<code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to expand.`,name:"image"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/image_utils.py#L152"}}),Le=new P({props:{name:"normalize",anchor:"transformers.ImageFeatureExtractionMixin.normalize",parameters:[{name:"image",val:""},{name:"mean",val:""},{name:"std",val:""}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.normalize.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to normalize.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.normalize.mean",description:`<strong>mean</strong> (<code>List[float]</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The mean (per channel) to use for normalization.`,name:"mean"},{anchor:"transformers.ImageFeatureExtractionMixin.normalize.std",description:`<strong>std</strong> (<code>List[float]</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The standard deviation (per channel) to use for normalization.`,name:"std"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/image_utils.py#L172"}}),Se=new P({props:{name:"resize",anchor:"transformers.ImageFeatureExtractionMixin.resize",parameters:[{name:"image",val:""},{name:"size",val:""},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"default_to_square",val:" = True"},{name:"max_size",val:" = None"}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.resize.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to resize.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple[int, int]</code>) &#x2014;
The size to use for resizing the image. If <code>size</code> is a sequence like (h, w), output size will be
matched to this.</p>
<p>If <code>size</code> is an int and <code>default_to_square</code> is <code>True</code>, then image will be resized to (size, size). If
<code>size</code> is an int and <code>default_to_square</code> is <code>False</code>, then smaller edge of the image will be matched to
this number. i.e, if height &gt; width, then image will be rescaled to (size * height / width, size).`,name:"size"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
The filter to user for resampling.`,name:"resample"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.default_to_square",description:`<strong>default_to_square</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
How to convert <code>size</code> when it is a single int. If set to <code>True</code>, the <code>size</code> will be converted to a
square (<code>size</code>,<code>size</code>). If set to <code>False</code>, will replicate
<a href="https://pytorch.org/vision/stable/transforms.html#torchvision.transforms.Resize" rel="nofollow"><code>torchvision.transforms.Resize</code></a>
with support for resizing only the smallest edge and providing an optional <code>max_size</code>.`,name:"default_to_square"},{anchor:"transformers.ImageFeatureExtractionMixin.resize.max_size",description:`<strong>max_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The maximum allowed for the longer edge of the resized image: if the longer edge of the image is
greater than <code>max_size</code> after being resized according to <code>size</code>, then the image is resized again so
that the longer edge is equal to <code>max_size</code>. As a result, <code>size</code> might be overruled, i.e the smaller
edge may be shorter than <code>size</code>. Only used if <code>default_to_square</code> is <code>False</code>.`,name:"max_size"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/image_utils.py#L208",returnDescription:`
<p>A resized <code>PIL.Image.Image</code>.</p>
`,returnType:`
<p>image</p>
`}}),Ae=new P({props:{name:"to_numpy_array",anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array",parameters:[{name:"image",val:""},{name:"rescale",val:" = None"},{name:"channel_first",val:" = True"}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>np.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to convert to a NumPy array.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array.rescale",description:`<strong>rescale</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to apply the scaling factor (to make pixel values floats between 0. and 1.). Will
default to <code>True</code> if the image is a PIL Image or an array/tensor of integers, <code>False</code> otherwise.`,name:"rescale"},{anchor:"transformers.ImageFeatureExtractionMixin.to_numpy_array.channel_first",description:`<strong>channel_first</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to permute the dimensions of the image to put the channel dimension first.`,name:"channel_first"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/image_utils.py#L119"}}),je=new P({props:{name:"to_pil_image",anchor:"transformers.ImageFeatureExtractionMixin.to_pil_image",parameters:[{name:"image",val:""},{name:"rescale",val:" = None"}],parametersDescription:[{anchor:"transformers.ImageFeatureExtractionMixin.to_pil_image.image",description:`<strong>image</strong> (<code>PIL.Image.Image</code> or <code>numpy.ndarray</code> or <code>torch.Tensor</code>) &#x2014;
The image to convert to the PIL Image format.`,name:"image"},{anchor:"transformers.ImageFeatureExtractionMixin.to_pil_image.rescale",description:`<strong>rescale</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to apply the scaling factor (to make pixel values integers between 0 and 255). Will
default to <code>True</code> if the image type is a floating type, <code>False</code> otherwise.`,name:"rescale"}],source:"https://github.com/huggingface/transformers/blob/vr_17626/src/transformers/image_utils.py#L89"}}),{c(){m=a("meta"),T=c(),f=a("h1"),h=a("a"),F=a("span"),g(p.$$.fragment),$=c(),L=a("span"),V=s("Feature Extractor"),z=c(),q=a("p"),Oe=s(`A feature extractor is in charge of preparing input features for a multi-modal model. This includes feature extraction
from sequences, `),Xe=a("em"),sr=s("e.g."),ir=s(`, pre-processing audio files to Log-Mel Spectrogram features, feature extraction from images
`),Ze=a("em"),cr=s("e.g."),dr=s(` cropping image image files, but also padding, normalization, and conversion to Numpy, PyTorch, and TensorFlow
tensors.`),Mt=c(),O=a("h2"),K=a("a"),et=a("span"),g(ge.$$.fragment),lr=c(),tt=a("span"),mr=s("FeatureExtractionMixin"),Dt=c(),M=a("div"),g(_e.$$.fragment),pr=c(),rt=a("p"),ur=s(`This is a feature extraction mixin used to provide saving/loading functionality for sequential and image feature
extractors.`),fr=c(),S=a("div"),g(ve.$$.fragment),hr=c(),A=a("p"),gr=s("Instantiate a type of "),We=a("a"),_r=s("FeatureExtractionMixin"),vr=s(" from a feature extractor, "),at=a("em"),xr=s("e.g."),yr=s(` a
derived class of `),Ue=a("a"),br=s("SequenceFeatureExtractor"),Er=s("."),$r=c(),g(Q.$$.fragment),wr=c(),g(X.$$.fragment),Fr=c(),Z=a("div"),g(xe.$$.fragment),Tr=c(),W=a("p"),Ir=s("Save a feature_extractor object to the directory "),ot=a("code"),kr=s("save_directory"),Pr=s(`, so that it can be re-loaded using the
`),He=a("a"),zr=s("from_pretrained()"),qr=s(" class method."),Lt=c(),U=a("h2"),ee=a("a"),nt=a("span"),g(ye.$$.fragment),Mr=c(),st=a("span"),Dr=s("SequenceFeatureExtractor"),St=c(),B=a("div"),g(be.$$.fragment),Lr=c(),it=a("p"),Sr=s("This is a general feature extraction class for speech recognition."),Nr=c(),N=a("div"),g(Ee.$$.fragment),Ar=c(),ct=a("p"),Br=s(`Pad input values / input vectors or a batch of input values / input vectors up to predefined length or to the
max sequence length in the batch.`),jr=c(),H=a("p"),Cr=s("Padding side (left/right) padding values are defined at the feature extractor level (with "),dt=a("code"),Vr=s("self.padding_side"),Or=s(`,
`),lt=a("code"),Wr=s("self.padding_value"),Ur=s(")"),Hr=c(),g(te.$$.fragment),Nt=c(),R=a("h2"),re=a("a"),mt=a("span"),g($e.$$.fragment),Rr=c(),pt=a("span"),Jr=s("BatchFeature"),At=c(),k=a("div"),g(we.$$.fragment),Gr=c(),J=a("p"),Yr=s("Holds the output of the "),Re=a("a"),Kr=s("pad()"),Qr=s(" and feature extractor specific "),ut=a("code"),Xr=s("__call__"),Zr=s(" methods."),ea=c(),ft=a("p"),ta=s("This class is derived from a python dictionary and can be used as a dictionary."),ra=c(),ae=a("div"),g(Fe.$$.fragment),aa=c(),ht=a("p"),oa=s("Convert the inner content to tensors."),na=c(),oe=a("div"),g(Te.$$.fragment),sa=c(),Ie=a("p"),ia=s("Send all values to device by calling "),gt=a("code"),ca=s("v.to(device)"),da=s(" (PyTorch only)."),Bt=c(),G=a("h2"),ne=a("a"),_t=a("span"),g(ke.$$.fragment),la=c(),vt=a("span"),ma=s("ImageFeatureExtractionMixin"),jt=c(),w=a("div"),g(Pe.$$.fragment),pa=c(),xt=a("p"),ua=s("Mixin that contain utilities for preparing image features."),fa=c(),se=a("div"),g(ze.$$.fragment),ha=c(),qe=a("p"),ga=s("Crops "),yt=a("code"),_a=s("image"),va=s(` to the given size using a center crop. Note that if the image is too small to be cropped to the
size given, it will be padded (so the returned result has the size asked).`),xa=c(),ie=a("div"),g(Me.$$.fragment),ya=c(),De=a("p"),ba=s("Expands 2-dimensional "),bt=a("code"),Ea=s("image"),$a=s(" to 3 dimensions."),wa=c(),ce=a("div"),g(Le.$$.fragment),Fa=c(),D=a("p"),Ta=s("Normalizes "),Et=a("code"),Ia=s("image"),ka=s(" with "),$t=a("code"),Pa=s("mean"),za=s(" and "),wt=a("code"),qa=s("std"),Ma=s(". Note that this will trigger a conversion of "),Ft=a("code"),Da=s("image"),La=s(` to a NumPy array
if it\u2019s a PIL Image.`),Sa=c(),de=a("div"),g(Se.$$.fragment),Na=c(),Ne=a("p"),Aa=s("Resizes "),Tt=a("code"),Ba=s("image"),ja=s(". Enforces conversion of input to PIL.Image."),Ca=c(),le=a("div"),g(Ae.$$.fragment),Va=c(),Be=a("p"),Oa=s("Converts "),It=a("code"),Wa=s("image"),Ua=s(` to a numpy array. Optionally rescales it and puts the channel dimension as the first
dimension.`),Ha=c(),me=a("div"),g(je.$$.fragment),Ra=c(),Ce=a("p"),Ja=s("Converts "),kt=a("code"),Ga=s("image"),Ya=s(` to a PIL Image. Optionally rescales it and puts the channel dimension back as the last axis if
needed.`),this.h()},l(t){const u=Vo('[data-svelte="svelte-1phssyn"]',document.head);m=o(u,"META",{name:!0,content:!0}),u.forEach(r),T=d(t),f=o(t,"H1",{class:!0});var Ve=n(f);h=o(Ve,"A",{id:!0,class:!0,href:!0});var Pt=n(h);F=o(Pt,"SPAN",{});var zt=n(F);_(p.$$.fragment,zt),zt.forEach(r),Pt.forEach(r),$=d(Ve),L=o(Ve,"SPAN",{});var Ka=n(L);V=i(Ka,"Feature Extractor"),Ka.forEach(r),Ve.forEach(r),z=d(t),q=o(t,"P",{});var Je=n(q);Oe=i(Je,`A feature extractor is in charge of preparing input features for a multi-modal model. This includes feature extraction
from sequences, `),Xe=o(Je,"EM",{});var Qa=n(Xe);sr=i(Qa,"e.g."),Qa.forEach(r),ir=i(Je,`, pre-processing audio files to Log-Mel Spectrogram features, feature extraction from images
`),Ze=o(Je,"EM",{});var Xa=n(Ze);cr=i(Xa,"e.g."),Xa.forEach(r),dr=i(Je,` cropping image image files, but also padding, normalization, and conversion to Numpy, PyTorch, and TensorFlow
tensors.`),Je.forEach(r),Mt=d(t),O=o(t,"H2",{class:!0});var Vt=n(O);K=o(Vt,"A",{id:!0,class:!0,href:!0});var Za=n(K);et=o(Za,"SPAN",{});var eo=n(et);_(ge.$$.fragment,eo),eo.forEach(r),Za.forEach(r),lr=d(Vt),tt=o(Vt,"SPAN",{});var to=n(tt);mr=i(to,"FeatureExtractionMixin"),to.forEach(r),Vt.forEach(r),Dt=d(t),M=o(t,"DIV",{class:!0});var pe=n(M);_(_e.$$.fragment,pe),pr=d(pe),rt=o(pe,"P",{});var ro=n(rt);ur=i(ro,`This is a feature extraction mixin used to provide saving/loading functionality for sequential and image feature
extractors.`),ro.forEach(r),fr=d(pe),S=o(pe,"DIV",{class:!0});var ue=n(S);_(ve.$$.fragment,ue),hr=d(ue),A=o(ue,"P",{});var fe=n(A);gr=i(fe,"Instantiate a type of "),We=o(fe,"A",{href:!0});var ao=n(We);_r=i(ao,"FeatureExtractionMixin"),ao.forEach(r),vr=i(fe," from a feature extractor, "),at=o(fe,"EM",{});var oo=n(at);xr=i(oo,"e.g."),oo.forEach(r),yr=i(fe,` a
derived class of `),Ue=o(fe,"A",{href:!0});var no=n(Ue);br=i(no,"SequenceFeatureExtractor"),no.forEach(r),Er=i(fe,"."),fe.forEach(r),$r=d(ue),_(Q.$$.fragment,ue),wr=d(ue),_(X.$$.fragment,ue),ue.forEach(r),Fr=d(pe),Z=o(pe,"DIV",{class:!0});var Ot=n(Z);_(xe.$$.fragment,Ot),Tr=d(Ot),W=o(Ot,"P",{});var Ge=n(W);Ir=i(Ge,"Save a feature_extractor object to the directory "),ot=o(Ge,"CODE",{});var so=n(ot);kr=i(so,"save_directory"),so.forEach(r),Pr=i(Ge,`, so that it can be re-loaded using the
`),He=o(Ge,"A",{href:!0});var io=n(He);zr=i(io,"from_pretrained()"),io.forEach(r),qr=i(Ge," class method."),Ge.forEach(r),Ot.forEach(r),pe.forEach(r),Lt=d(t),U=o(t,"H2",{class:!0});var Wt=n(U);ee=o(Wt,"A",{id:!0,class:!0,href:!0});var co=n(ee);nt=o(co,"SPAN",{});var lo=n(nt);_(ye.$$.fragment,lo),lo.forEach(r),co.forEach(r),Mr=d(Wt),st=o(Wt,"SPAN",{});var mo=n(st);Dr=i(mo,"SequenceFeatureExtractor"),mo.forEach(r),Wt.forEach(r),St=d(t),B=o(t,"DIV",{class:!0});var Ye=n(B);_(be.$$.fragment,Ye),Lr=d(Ye),it=o(Ye,"P",{});var po=n(it);Sr=i(po,"This is a general feature extraction class for speech recognition."),po.forEach(r),Nr=d(Ye),N=o(Ye,"DIV",{class:!0});var he=n(N);_(Ee.$$.fragment,he),Ar=d(he),ct=o(he,"P",{});var uo=n(ct);Br=i(uo,`Pad input values / input vectors or a batch of input values / input vectors up to predefined length or to the
max sequence length in the batch.`),uo.forEach(r),jr=d(he),H=o(he,"P",{});var Ke=n(H);Cr=i(Ke,"Padding side (left/right) padding values are defined at the feature extractor level (with "),dt=o(Ke,"CODE",{});var fo=n(dt);Vr=i(fo,"self.padding_side"),fo.forEach(r),Or=i(Ke,`,
`),lt=o(Ke,"CODE",{});var ho=n(lt);Wr=i(ho,"self.padding_value"),ho.forEach(r),Ur=i(Ke,")"),Ke.forEach(r),Hr=d(he),_(te.$$.fragment,he),he.forEach(r),Ye.forEach(r),Nt=d(t),R=o(t,"H2",{class:!0});var Ut=n(R);re=o(Ut,"A",{id:!0,class:!0,href:!0});var go=n(re);mt=o(go,"SPAN",{});var _o=n(mt);_($e.$$.fragment,_o),_o.forEach(r),go.forEach(r),Rr=d(Ut),pt=o(Ut,"SPAN",{});var vo=n(pt);Jr=i(vo,"BatchFeature"),vo.forEach(r),Ut.forEach(r),At=d(t),k=o(t,"DIV",{class:!0});var j=n(k);_(we.$$.fragment,j),Gr=d(j),J=o(j,"P",{});var Qe=n(J);Yr=i(Qe,"Holds the output of the "),Re=o(Qe,"A",{href:!0});var xo=n(Re);Kr=i(xo,"pad()"),xo.forEach(r),Qr=i(Qe," and feature extractor specific "),ut=o(Qe,"CODE",{});var yo=n(ut);Xr=i(yo,"__call__"),yo.forEach(r),Zr=i(Qe," methods."),Qe.forEach(r),ea=d(j),ft=o(j,"P",{});var bo=n(ft);ta=i(bo,"This class is derived from a python dictionary and can be used as a dictionary."),bo.forEach(r),ra=d(j),ae=o(j,"DIV",{class:!0});var Ht=n(ae);_(Fe.$$.fragment,Ht),aa=d(Ht),ht=o(Ht,"P",{});var Eo=n(ht);oa=i(Eo,"Convert the inner content to tensors."),Eo.forEach(r),Ht.forEach(r),na=d(j),oe=o(j,"DIV",{class:!0});var Rt=n(oe);_(Te.$$.fragment,Rt),sa=d(Rt),Ie=o(Rt,"P",{});var Jt=n(Ie);ia=i(Jt,"Send all values to device by calling "),gt=o(Jt,"CODE",{});var $o=n(gt);ca=i($o,"v.to(device)"),$o.forEach(r),da=i(Jt," (PyTorch only)."),Jt.forEach(r),Rt.forEach(r),j.forEach(r),Bt=d(t),G=o(t,"H2",{class:!0});var Gt=n(G);ne=o(Gt,"A",{id:!0,class:!0,href:!0});var wo=n(ne);_t=o(wo,"SPAN",{});var Fo=n(_t);_(ke.$$.fragment,Fo),Fo.forEach(r),wo.forEach(r),la=d(Gt),vt=o(Gt,"SPAN",{});var To=n(vt);ma=i(To,"ImageFeatureExtractionMixin"),To.forEach(r),Gt.forEach(r),jt=d(t),w=o(t,"DIV",{class:!0});var I=n(w);_(Pe.$$.fragment,I),pa=d(I),xt=o(I,"P",{});var Io=n(xt);ua=i(Io,"Mixin that contain utilities for preparing image features."),Io.forEach(r),fa=d(I),se=o(I,"DIV",{class:!0});var Yt=n(se);_(ze.$$.fragment,Yt),ha=d(Yt),qe=o(Yt,"P",{});var Kt=n(qe);ga=i(Kt,"Crops "),yt=o(Kt,"CODE",{});var ko=n(yt);_a=i(ko,"image"),ko.forEach(r),va=i(Kt,` to the given size using a center crop. Note that if the image is too small to be cropped to the
size given, it will be padded (so the returned result has the size asked).`),Kt.forEach(r),Yt.forEach(r),xa=d(I),ie=o(I,"DIV",{class:!0});var Qt=n(ie);_(Me.$$.fragment,Qt),ya=d(Qt),De=o(Qt,"P",{});var Xt=n(De);ba=i(Xt,"Expands 2-dimensional "),bt=o(Xt,"CODE",{});var Po=n(bt);Ea=i(Po,"image"),Po.forEach(r),$a=i(Xt," to 3 dimensions."),Xt.forEach(r),Qt.forEach(r),wa=d(I),ce=o(I,"DIV",{class:!0});var Zt=n(ce);_(Le.$$.fragment,Zt),Fa=d(Zt),D=o(Zt,"P",{});var C=n(D);Ta=i(C,"Normalizes "),Et=o(C,"CODE",{});var zo=n(Et);Ia=i(zo,"image"),zo.forEach(r),ka=i(C," with "),$t=o(C,"CODE",{});var qo=n($t);Pa=i(qo,"mean"),qo.forEach(r),za=i(C," and "),wt=o(C,"CODE",{});var Mo=n(wt);qa=i(Mo,"std"),Mo.forEach(r),Ma=i(C,". Note that this will trigger a conversion of "),Ft=o(C,"CODE",{});var Do=n(Ft);Da=i(Do,"image"),Do.forEach(r),La=i(C,` to a NumPy array
if it\u2019s a PIL Image.`),C.forEach(r),Zt.forEach(r),Sa=d(I),de=o(I,"DIV",{class:!0});var er=n(de);_(Se.$$.fragment,er),Na=d(er),Ne=o(er,"P",{});var tr=n(Ne);Aa=i(tr,"Resizes "),Tt=o(tr,"CODE",{});var Lo=n(Tt);Ba=i(Lo,"image"),Lo.forEach(r),ja=i(tr,". Enforces conversion of input to PIL.Image."),tr.forEach(r),er.forEach(r),Ca=d(I),le=o(I,"DIV",{class:!0});var rr=n(le);_(Ae.$$.fragment,rr),Va=d(rr),Be=o(rr,"P",{});var ar=n(Be);Oa=i(ar,"Converts "),It=o(ar,"CODE",{});var So=n(It);Wa=i(So,"image"),So.forEach(r),Ua=i(ar,` to a numpy array. Optionally rescales it and puts the channel dimension as the first
dimension.`),ar.forEach(r),rr.forEach(r),Ha=d(I),me=o(I,"DIV",{class:!0});var or=n(me);_(je.$$.fragment,or),Ra=d(or),Ce=o(or,"P",{});var nr=n(Ce);Ja=i(nr,"Converts "),kt=o(nr,"CODE",{});var No=n(kt);Ga=i(No,"image"),No.forEach(r),Ya=i(nr,` to a PIL Image. Optionally rescales it and puts the channel dimension back as the last axis if
needed.`),nr.forEach(r),or.forEach(r),I.forEach(r),this.h()},h(){l(m,"name","hf:doc:metadata"),l(m,"content",JSON.stringify(Ko)),l(h,"id","feature-extractor"),l(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(h,"href","#feature-extractor"),l(f,"class","relative group"),l(K,"id","transformers.FeatureExtractionMixin"),l(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(K,"href","#transformers.FeatureExtractionMixin"),l(O,"class","relative group"),l(We,"href","/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(Ue,"href","/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor"),l(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(He,"href","/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained"),l(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ee,"id","transformers.SequenceFeatureExtractor"),l(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ee,"href","#transformers.SequenceFeatureExtractor"),l(U,"class","relative group"),l(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(re,"id","transformers.BatchFeature"),l(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(re,"href","#transformers.BatchFeature"),l(R,"class","relative group"),l(Re,"href","/docs/transformers/pr_17626/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor.pad"),l(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(k,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ne,"id","transformers.ImageFeatureExtractionMixin"),l(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ne,"href","#transformers.ImageFeatureExtractionMixin"),l(G,"class","relative group"),l(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(w,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,u){e(document.head,m),E(t,T,u),E(t,f,u),e(f,h),e(h,F),v(p,F,null),e(f,$),e(f,L),e(L,V),E(t,z,u),E(t,q,u),e(q,Oe),e(q,Xe),e(Xe,sr),e(q,ir),e(q,Ze),e(Ze,cr),e(q,dr),E(t,Mt,u),E(t,O,u),e(O,K),e(K,et),v(ge,et,null),e(O,lr),e(O,tt),e(tt,mr),E(t,Dt,u),E(t,M,u),v(_e,M,null),e(M,pr),e(M,rt),e(rt,ur),e(M,fr),e(M,S),v(ve,S,null),e(S,hr),e(S,A),e(A,gr),e(A,We),e(We,_r),e(A,vr),e(A,at),e(at,xr),e(A,yr),e(A,Ue),e(Ue,br),e(A,Er),e(S,$r),v(Q,S,null),e(S,wr),v(X,S,null),e(M,Fr),e(M,Z),v(xe,Z,null),e(Z,Tr),e(Z,W),e(W,Ir),e(W,ot),e(ot,kr),e(W,Pr),e(W,He),e(He,zr),e(W,qr),E(t,Lt,u),E(t,U,u),e(U,ee),e(ee,nt),v(ye,nt,null),e(U,Mr),e(U,st),e(st,Dr),E(t,St,u),E(t,B,u),v(be,B,null),e(B,Lr),e(B,it),e(it,Sr),e(B,Nr),e(B,N),v(Ee,N,null),e(N,Ar),e(N,ct),e(ct,Br),e(N,jr),e(N,H),e(H,Cr),e(H,dt),e(dt,Vr),e(H,Or),e(H,lt),e(lt,Wr),e(H,Ur),e(N,Hr),v(te,N,null),E(t,Nt,u),E(t,R,u),e(R,re),e(re,mt),v($e,mt,null),e(R,Rr),e(R,pt),e(pt,Jr),E(t,At,u),E(t,k,u),v(we,k,null),e(k,Gr),e(k,J),e(J,Yr),e(J,Re),e(Re,Kr),e(J,Qr),e(J,ut),e(ut,Xr),e(J,Zr),e(k,ea),e(k,ft),e(ft,ta),e(k,ra),e(k,ae),v(Fe,ae,null),e(ae,aa),e(ae,ht),e(ht,oa),e(k,na),e(k,oe),v(Te,oe,null),e(oe,sa),e(oe,Ie),e(Ie,ia),e(Ie,gt),e(gt,ca),e(Ie,da),E(t,Bt,u),E(t,G,u),e(G,ne),e(ne,_t),v(ke,_t,null),e(G,la),e(G,vt),e(vt,ma),E(t,jt,u),E(t,w,u),v(Pe,w,null),e(w,pa),e(w,xt),e(xt,ua),e(w,fa),e(w,se),v(ze,se,null),e(se,ha),e(se,qe),e(qe,ga),e(qe,yt),e(yt,_a),e(qe,va),e(w,xa),e(w,ie),v(Me,ie,null),e(ie,ya),e(ie,De),e(De,ba),e(De,bt),e(bt,Ea),e(De,$a),e(w,wa),e(w,ce),v(Le,ce,null),e(ce,Fa),e(ce,D),e(D,Ta),e(D,Et),e(Et,Ia),e(D,ka),e(D,$t),e($t,Pa),e(D,za),e(D,wt),e(wt,qa),e(D,Ma),e(D,Ft),e(Ft,Da),e(D,La),e(w,Sa),e(w,de),v(Se,de,null),e(de,Na),e(de,Ne),e(Ne,Aa),e(Ne,Tt),e(Tt,Ba),e(Ne,ja),e(w,Ca),e(w,le),v(Ae,le,null),e(le,Va),e(le,Be),e(Be,Oa),e(Be,It),e(It,Wa),e(Be,Ua),e(w,Ha),e(w,me),v(je,me,null),e(me,Ra),e(me,Ce),e(Ce,Ja),e(Ce,kt),e(kt,Ga),e(Ce,Ya),Ct=!0},p(t,[u]){const Ve={};u&2&&(Ve.$$scope={dirty:u,ctx:t}),Q.$set(Ve);const Pt={};u&2&&(Pt.$$scope={dirty:u,ctx:t}),X.$set(Pt);const zt={};u&2&&(zt.$$scope={dirty:u,ctx:t}),te.$set(zt)},i(t){Ct||(x(p.$$.fragment,t),x(ge.$$.fragment,t),x(_e.$$.fragment,t),x(ve.$$.fragment,t),x(Q.$$.fragment,t),x(X.$$.fragment,t),x(xe.$$.fragment,t),x(ye.$$.fragment,t),x(be.$$.fragment,t),x(Ee.$$.fragment,t),x(te.$$.fragment,t),x($e.$$.fragment,t),x(we.$$.fragment,t),x(Fe.$$.fragment,t),x(Te.$$.fragment,t),x(ke.$$.fragment,t),x(Pe.$$.fragment,t),x(ze.$$.fragment,t),x(Me.$$.fragment,t),x(Le.$$.fragment,t),x(Se.$$.fragment,t),x(Ae.$$.fragment,t),x(je.$$.fragment,t),Ct=!0)},o(t){y(p.$$.fragment,t),y(ge.$$.fragment,t),y(_e.$$.fragment,t),y(ve.$$.fragment,t),y(Q.$$.fragment,t),y(X.$$.fragment,t),y(xe.$$.fragment,t),y(ye.$$.fragment,t),y(be.$$.fragment,t),y(Ee.$$.fragment,t),y(te.$$.fragment,t),y($e.$$.fragment,t),y(we.$$.fragment,t),y(Fe.$$.fragment,t),y(Te.$$.fragment,t),y(ke.$$.fragment,t),y(Pe.$$.fragment,t),y(ze.$$.fragment,t),y(Me.$$.fragment,t),y(Le.$$.fragment,t),y(Se.$$.fragment,t),y(Ae.$$.fragment,t),y(je.$$.fragment,t),Ct=!1},d(t){r(m),t&&r(T),t&&r(f),b(p),t&&r(z),t&&r(q),t&&r(Mt),t&&r(O),b(ge),t&&r(Dt),t&&r(M),b(_e),b(ve),b(Q),b(X),b(xe),t&&r(Lt),t&&r(U),b(ye),t&&r(St),t&&r(B),b(be),b(Ee),b(te),t&&r(Nt),t&&r(R),b($e),t&&r(At),t&&r(k),b(we),b(Fe),b(Te),t&&r(Bt),t&&r(G),b(ke),t&&r(jt),t&&r(w),b(Pe),b(ze),b(Me),b(Le),b(Se),b(Ae),b(je)}}}const Ko={local:"feature-extractor",sections:[{local:"transformers.FeatureExtractionMixin",title:"FeatureExtractionMixin"},{local:"transformers.SequenceFeatureExtractor",title:"SequenceFeatureExtractor"},{local:"transformers.BatchFeature",title:"BatchFeature"},{local:"transformers.ImageFeatureExtractionMixin",title:"ImageFeatureExtractionMixin"}],title:"Feature Extractor"};function Qo(Y){return Oo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class on extends Bo{constructor(m){super();jo(this,m,Qo,Yo,Co,{})}}export{on as default,Ko as metadata};
