import{S as Ijt,i as Njt,s as qjt,e as a,k as l,w as F,t as o,M as jjt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Djt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as MYr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Gjt(x){let g,v,p,m,_,d,h,Eo,Mi,yf,nt,Ei,Ci,EA,xf,Oe,We,wi,Rn,CA,Pn,Bn,wA,Ai,In,AA,Li,$f,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),yf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),EA=o(")."),xf=l(),Oe=a("p"),We=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),CA=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),wA=o(`, make sure its
`),Ai=a("code"),In=o("config_class"),AA=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),$f=o("NewModelConfig"),xa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Zk=s(p);m=r(Zk,"NewModelConfig"),Zk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var eS=s(Mi);yf=r(eS,"model_type"),eS.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var oS=s(Ei);Ci=r(oS,'"new-model"'),oS.forEach(t),EA=r(Ae,")."),Ae.forEach(t),xf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),CA=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var rS=s(Pn);Bn=r(rS,"PreTrainedModel"),rS.forEach(t),wA=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var kf=s(Ai);In=r(kf,"config_class"),kf.forEach(t),AA=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var tS=s(Li);$f=r(tS,"NewModelConfig"),tS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,yf),e(g,nt),e(g,Ei),e(Ei,Ci),e(g,EA),b(Qe,xf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,wi),e(wi,Rn),e(Oe,CA),e(Oe,Pn),e(Pn,Bn),e(Oe,wA),e(Oe,Ai),e(Ai,In),e(Oe,AA),e(Oe,Li),e(Li,$f),e(Oe,xa)},d(Qe){Qe&&t(g),Qe&&t(xf),Qe&&t(Oe)}}}function Ojt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function zjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Qjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DGt(x){let g,v,p,m,_,d,h,Eo,Mi,yf,nt,Ei,Ci,EA,xf,Oe,We,wi,Rn,CA,Pn,Bn,wA,Ai,In,AA,Li,$f,xa,Qe,Ae,Zk,yi,eS,oS,Co,$a,rS,kf,tS,Gze,AGe,xi,Sf,ate,LA,Oze,nte,Vze,LGe,Nn,Xze,ste,zze,Wze,lte,Qze,Hze,yGe,yA,xGe,aS,Uze,$Ge,Rf,kGe,$i,Pf,ite,xA,Jze,dte,Yze,SGe,wo,$A,Kze,kA,Zze,nS,eWe,oWe,rWe,SA,tWe,cte,aWe,nWe,sWe,wr,RA,lWe,fte,iWe,dWe,ki,cWe,mte,fWe,mWe,gte,gWe,hWe,pWe,A,Bf,hte,_We,uWe,sS,bWe,vWe,FWe,If,pte,TWe,MWe,lS,EWe,CWe,wWe,Nf,_te,AWe,LWe,iS,yWe,xWe,$We,qf,ute,kWe,SWe,dS,RWe,PWe,BWe,jf,bte,IWe,NWe,cS,qWe,jWe,DWe,Df,vte,GWe,OWe,fS,VWe,XWe,zWe,Gf,Fte,WWe,QWe,mS,HWe,UWe,JWe,Of,Tte,YWe,KWe,gS,ZWe,eQe,oQe,Vf,Mte,rQe,tQe,hS,aQe,nQe,sQe,Xf,Ete,lQe,iQe,pS,dQe,cQe,fQe,zf,Cte,mQe,gQe,_S,hQe,pQe,_Qe,Wf,wte,uQe,bQe,uS,vQe,FQe,TQe,Qf,Ate,MQe,EQe,bS,CQe,wQe,AQe,Hf,Lte,LQe,yQe,vS,xQe,$Qe,kQe,Uf,yte,SQe,RQe,FS,PQe,BQe,IQe,Jf,xte,NQe,qQe,TS,jQe,DQe,GQe,Yf,$te,OQe,VQe,MS,XQe,zQe,WQe,Kf,kte,QQe,HQe,ES,UQe,JQe,YQe,Zf,Ste,KQe,ZQe,CS,eHe,oHe,rHe,em,Rte,tHe,aHe,wS,nHe,sHe,lHe,om,Pte,iHe,dHe,AS,cHe,fHe,mHe,rm,Bte,gHe,hHe,LS,pHe,_He,uHe,tm,Ite,bHe,vHe,yS,FHe,THe,MHe,am,Nte,EHe,CHe,xS,wHe,AHe,LHe,nm,qte,yHe,xHe,$S,$He,kHe,SHe,sm,jte,RHe,PHe,kS,BHe,IHe,NHe,lm,Dte,qHe,jHe,SS,DHe,GHe,OHe,im,Gte,VHe,XHe,RS,zHe,WHe,QHe,dm,Ote,HHe,UHe,PS,JHe,YHe,KHe,cm,Vte,ZHe,eUe,BS,oUe,rUe,tUe,fm,Xte,aUe,nUe,IS,sUe,lUe,iUe,mm,zte,dUe,cUe,NS,fUe,mUe,gUe,gm,Wte,hUe,pUe,qS,_Ue,uUe,bUe,hm,Qte,vUe,FUe,jS,TUe,MUe,EUe,pm,Hte,CUe,wUe,DS,AUe,LUe,yUe,_m,Ute,xUe,$Ue,GS,kUe,SUe,RUe,um,Jte,PUe,BUe,OS,IUe,NUe,qUe,bm,Yte,jUe,DUe,VS,GUe,OUe,VUe,vm,Kte,XUe,zUe,XS,WUe,QUe,HUe,Fm,Zte,UUe,JUe,zS,YUe,KUe,ZUe,Tm,eae,eJe,oJe,WS,rJe,tJe,aJe,Mm,oae,nJe,sJe,QS,lJe,iJe,dJe,Em,rae,cJe,fJe,HS,mJe,gJe,hJe,Cm,tae,pJe,_Je,US,uJe,bJe,vJe,wm,aae,FJe,TJe,JS,MJe,EJe,CJe,Am,nae,wJe,AJe,YS,LJe,yJe,xJe,Lm,sae,$Je,kJe,KS,SJe,RJe,PJe,ym,lae,BJe,IJe,ZS,NJe,qJe,jJe,xm,iae,DJe,GJe,eR,OJe,VJe,XJe,$m,dae,zJe,WJe,oR,QJe,HJe,UJe,km,cae,JJe,YJe,rR,KJe,ZJe,eYe,Sm,fae,oYe,rYe,tR,tYe,aYe,nYe,Rm,mae,sYe,lYe,aR,iYe,dYe,cYe,Pm,gae,fYe,mYe,nR,gYe,hYe,pYe,Bm,hae,_Ye,uYe,sR,bYe,vYe,FYe,Im,pae,TYe,MYe,lR,EYe,CYe,wYe,Nm,_ae,AYe,LYe,iR,yYe,xYe,$Ye,qm,uae,kYe,SYe,dR,RYe,PYe,BYe,jm,bae,IYe,NYe,cR,qYe,jYe,DYe,Dm,vae,GYe,OYe,fR,VYe,XYe,zYe,Gm,Fae,WYe,QYe,mR,HYe,UYe,JYe,Om,Tae,YYe,KYe,gR,ZYe,eKe,oKe,Vm,Mae,rKe,tKe,hR,aKe,nKe,sKe,Xm,Eae,lKe,iKe,pR,dKe,cKe,fKe,zm,Cae,mKe,gKe,_R,hKe,pKe,_Ke,Wm,wae,uKe,bKe,uR,vKe,FKe,TKe,Qm,Aae,MKe,EKe,bR,CKe,wKe,AKe,Hm,Lae,LKe,yKe,vR,xKe,$Ke,kKe,Um,yae,SKe,RKe,FR,PKe,BKe,IKe,Jm,xae,NKe,qKe,TR,jKe,DKe,GKe,Ym,$ae,OKe,VKe,MR,XKe,zKe,WKe,Km,kae,QKe,HKe,ER,UKe,JKe,YKe,Zm,Sae,KKe,ZKe,CR,eZe,oZe,rZe,eg,Rae,tZe,aZe,wR,nZe,sZe,lZe,og,Pae,iZe,dZe,AR,cZe,fZe,mZe,rg,Bae,gZe,hZe,LR,pZe,_Ze,uZe,tg,Iae,bZe,vZe,yR,FZe,TZe,MZe,ag,Nae,EZe,CZe,xR,wZe,AZe,LZe,ng,qae,yZe,xZe,$R,$Ze,kZe,SZe,sg,jae,RZe,PZe,kR,BZe,IZe,NZe,lg,Dae,qZe,jZe,SR,DZe,GZe,OZe,ig,Gae,VZe,XZe,RR,zZe,WZe,QZe,dg,Oae,HZe,UZe,PR,JZe,YZe,KZe,cg,Vae,ZZe,eeo,BR,oeo,reo,teo,fg,Xae,aeo,neo,IR,seo,leo,ieo,mg,zae,deo,ceo,NR,feo,meo,geo,gg,Wae,heo,peo,qR,_eo,ueo,beo,hg,Qae,veo,Feo,jR,Teo,Meo,Eeo,pg,Hae,Ceo,weo,DR,Aeo,Leo,yeo,_g,Uae,xeo,$eo,GR,keo,Seo,Reo,ug,Jae,Peo,Beo,OR,Ieo,Neo,qeo,bg,Yae,jeo,Deo,VR,Geo,Oeo,Veo,vg,Kae,Xeo,zeo,XR,Weo,Qeo,Heo,Fg,Zae,Ueo,Jeo,zR,Yeo,Keo,Zeo,Tg,ene,eoo,ooo,WR,roo,too,aoo,Mg,one,noo,soo,QR,loo,ioo,doo,Eg,rne,coo,foo,HR,moo,goo,hoo,Cg,tne,poo,_oo,UR,uoo,boo,voo,wg,ane,Foo,Too,JR,Moo,Eoo,Coo,Ag,nne,woo,Aoo,YR,Loo,yoo,xoo,Lg,sne,$oo,koo,KR,Soo,Roo,Poo,yg,lne,Boo,Ioo,ZR,Noo,qoo,joo,xg,ine,Doo,Goo,eP,Ooo,Voo,Xoo,$g,dne,zoo,Woo,oP,Qoo,Hoo,Uoo,kg,cne,Joo,Yoo,rP,Koo,Zoo,ero,Sg,fne,oro,rro,tP,tro,aro,nro,Rg,mne,sro,lro,aP,iro,dro,cro,Pg,gne,fro,mro,nP,gro,hro,pro,Bg,hne,_ro,uro,sP,bro,vro,Fro,Ig,pne,Tro,Mro,lP,Ero,Cro,wro,Ng,_ne,Aro,Lro,iP,yro,xro,$ro,qg,une,kro,Sro,dP,Rro,Pro,Bro,jg,bne,Iro,Nro,cP,qro,jro,Dro,Dg,vne,Gro,Oro,fP,Vro,Xro,zro,Gg,Wro,Og,PA,Qro,Fne,Hro,RGe,Si,Vg,Tne,BA,Uro,Mne,Jro,PGe,Ao,IA,Yro,NA,Kro,mP,Zro,eto,oto,qA,rto,Ene,tto,ato,nto,Ar,jA,sto,Cne,lto,ito,ka,dto,wne,cto,fto,Ane,mto,gto,Lne,hto,pto,_to,k,qn,yne,uto,bto,gP,vto,Fto,hP,Tto,Mto,Eto,jn,xne,Cto,wto,pP,Ato,Lto,_P,yto,xto,$to,Dn,$ne,kto,Sto,uP,Rto,Pto,bP,Bto,Ito,Nto,Xg,kne,qto,jto,vP,Dto,Gto,Oto,Gn,Sne,Vto,Xto,FP,zto,Wto,TP,Qto,Hto,Uto,zg,Rne,Jto,Yto,MP,Kto,Zto,eao,Wg,Pne,oao,rao,EP,tao,aao,nao,Qg,Bne,sao,lao,CP,iao,dao,cao,On,Ine,fao,mao,wP,gao,hao,AP,pao,_ao,uao,Vn,Nne,bao,vao,LP,Fao,Tao,yP,Mao,Eao,Cao,Xn,qne,wao,Aao,xP,Lao,yao,$P,xao,$ao,kao,Hg,jne,Sao,Rao,kP,Pao,Bao,Iao,Ug,Dne,Nao,qao,SP,jao,Dao,Gao,Jg,Gne,Oao,Vao,RP,Xao,zao,Wao,zn,One,Qao,Hao,PP,Uao,Jao,BP,Yao,Kao,Zao,Yg,Vne,eno,ono,IP,rno,tno,ano,Wn,Xne,nno,sno,NP,lno,ino,qP,dno,cno,fno,Qn,zne,mno,gno,jP,hno,pno,DP,_no,uno,bno,Hn,Wne,vno,Fno,GP,Tno,Mno,OP,Eno,Cno,wno,Kg,Qne,Ano,Lno,VP,yno,xno,$no,Un,Hne,kno,Sno,XP,Rno,Pno,zP,Bno,Ino,Nno,Jn,Une,qno,jno,WP,Dno,Gno,QP,Ono,Vno,Xno,Yn,Jne,zno,Wno,HP,Qno,Hno,UP,Uno,Jno,Yno,Kn,Yne,Kno,Zno,JP,eso,oso,YP,rso,tso,aso,Zn,Kne,nso,sso,KP,lso,iso,ZP,dso,cso,fso,es,Zne,mso,gso,eB,hso,pso,oB,_so,uso,bso,Zg,ese,vso,Fso,rB,Tso,Mso,Eso,os,ose,Cso,wso,tB,Aso,Lso,aB,yso,xso,$so,eh,rse,kso,Sso,nB,Rso,Pso,Bso,rs,tse,Iso,Nso,sB,qso,jso,lB,Dso,Gso,Oso,ts,ase,Vso,Xso,iB,zso,Wso,dB,Qso,Hso,Uso,as,nse,Jso,Yso,cB,Kso,Zso,fB,elo,olo,rlo,oh,sse,tlo,alo,mB,nlo,slo,llo,ns,lse,ilo,dlo,gB,clo,flo,hB,mlo,glo,hlo,ss,ise,plo,_lo,pB,ulo,blo,_B,vlo,Flo,Tlo,rh,dse,Mlo,Elo,uB,Clo,wlo,Alo,ls,cse,Llo,ylo,bB,xlo,$lo,vB,klo,Slo,Rlo,is,fse,Plo,Blo,FB,Ilo,Nlo,TB,qlo,jlo,Dlo,ds,mse,Glo,Olo,MB,Vlo,Xlo,EB,zlo,Wlo,Qlo,cs,gse,Hlo,Ulo,CB,Jlo,Ylo,wB,Klo,Zlo,eio,fs,hse,oio,rio,AB,tio,aio,LB,nio,sio,lio,ms,pse,iio,dio,yB,cio,fio,xB,mio,gio,hio,gs,_se,pio,_io,$B,uio,bio,kB,vio,Fio,Tio,hs,use,Mio,Eio,SB,Cio,wio,RB,Aio,Lio,yio,th,bse,xio,$io,PB,kio,Sio,Rio,ps,vse,Pio,Bio,BB,Iio,Nio,IB,qio,jio,Dio,ah,Fse,Gio,Oio,NB,Vio,Xio,zio,nh,Tse,Wio,Qio,qB,Hio,Uio,Jio,_s,Mse,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,us,Ese,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,bs,Cse,fdo,mdo,VB,gdo,hdo,XB,pdo,_do,udo,sh,wse,bdo,vdo,zB,Fdo,Tdo,Mdo,vs,Ase,Edo,Cdo,WB,wdo,Ado,QB,Ldo,ydo,xdo,Fs,Lse,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,Ts,yse,Ndo,qdo,JB,jdo,Ddo,YB,Gdo,Odo,Vdo,Ms,xse,Xdo,zdo,KB,Wdo,Qdo,ZB,Hdo,Udo,Jdo,Es,$se,Ydo,Kdo,eI,Zdo,eco,oI,oco,rco,tco,lh,kse,aco,nco,rI,sco,lco,ico,Cs,Sse,dco,cco,tI,fco,mco,aI,gco,hco,pco,ih,Rse,_co,uco,nI,bco,vco,Fco,dh,Pse,Tco,Mco,sI,Eco,Cco,wco,ch,Bse,Aco,Lco,lI,yco,xco,$co,fh,Ise,kco,Sco,iI,Rco,Pco,Bco,ws,Nse,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,mh,qse,Vco,Xco,fI,zco,Wco,Qco,As,jse,Hco,Uco,mI,Jco,Yco,gI,Kco,Zco,efo,Ls,Dse,ofo,rfo,hI,tfo,afo,pI,nfo,sfo,lfo,ys,Gse,ifo,dfo,_I,cfo,ffo,uI,mfo,gfo,hfo,xs,Ose,pfo,_fo,bI,ufo,bfo,vI,vfo,Ffo,Tfo,$s,Vse,Mfo,Efo,FI,Cfo,wfo,TI,Afo,Lfo,yfo,ks,Xse,xfo,$fo,MI,kfo,Sfo,EI,Rfo,Pfo,Bfo,gh,zse,Ifo,Nfo,CI,qfo,jfo,Dfo,hh,Wse,Gfo,Ofo,wI,Vfo,Xfo,zfo,Ss,Qse,Wfo,Qfo,AI,Hfo,Ufo,LI,Jfo,Yfo,Kfo,Rs,Hse,Zfo,emo,yI,omo,rmo,xI,tmo,amo,nmo,Ps,Use,smo,lmo,$I,imo,dmo,kI,cmo,fmo,mmo,ph,Jse,gmo,hmo,SI,pmo,_mo,umo,_h,Yse,bmo,vmo,RI,Fmo,Tmo,Mmo,uh,Kse,Emo,Cmo,PI,wmo,Amo,Lmo,Bs,Zse,ymo,xmo,BI,$mo,kmo,II,Smo,Rmo,Pmo,Is,ele,Bmo,Imo,NI,Nmo,qmo,qI,jmo,Dmo,Gmo,bh,ole,Omo,Vmo,jI,Xmo,zmo,Wmo,vh,rle,Qmo,Hmo,DI,Umo,Jmo,Ymo,Fh,tle,Kmo,Zmo,GI,ego,ogo,rgo,Ns,ale,tgo,ago,OI,ngo,sgo,VI,lgo,igo,dgo,Th,nle,cgo,fgo,XI,mgo,ggo,hgo,Mh,sle,pgo,_go,zI,ugo,bgo,vgo,qs,lle,Fgo,Tgo,WI,Mgo,Ego,QI,Cgo,wgo,Ago,js,ile,Lgo,ygo,HI,xgo,$go,UI,kgo,Sgo,Rgo,Ds,dle,Pgo,Bgo,JI,Igo,Ngo,YI,qgo,jgo,Dgo,Gs,cle,Ggo,Ogo,KI,Vgo,Xgo,ZI,zgo,Wgo,Qgo,Eh,Hgo,Ch,DA,Ugo,fle,Jgo,BGe,Ri,wh,mle,GA,Ygo,gle,Kgo,IGe,Lo,OA,Zgo,VA,eho,eN,oho,rho,tho,XA,aho,hle,nho,sho,lho,He,zA,iho,ple,dho,cho,Sa,fho,_le,mho,gho,ule,hho,pho,ble,_ho,uho,bho,Y,Ah,vle,vho,Fho,oN,Tho,Mho,Eho,Lh,Fle,Cho,who,rN,Aho,Lho,yho,yh,Tle,xho,$ho,tN,kho,Sho,Rho,xh,Mle,Pho,Bho,aN,Iho,Nho,qho,$h,Ele,jho,Dho,nN,Gho,Oho,Vho,kh,Cle,Xho,zho,sN,Who,Qho,Hho,Sh,wle,Uho,Jho,lN,Yho,Kho,Zho,Rh,Ale,epo,opo,iN,rpo,tpo,apo,Ph,Lle,npo,spo,dN,lpo,ipo,dpo,Bh,yle,cpo,fpo,cN,mpo,gpo,hpo,Ih,xle,ppo,_po,fN,upo,bpo,vpo,Nh,$le,Fpo,Tpo,mN,Mpo,Epo,Cpo,qh,kle,wpo,Apo,gN,Lpo,ypo,xpo,jh,Sle,$po,kpo,hN,Spo,Rpo,Ppo,Dh,Rle,Bpo,Ipo,pN,Npo,qpo,jpo,Gh,Ple,Dpo,Gpo,_N,Opo,Vpo,Xpo,Oh,Ble,zpo,Wpo,uN,Qpo,Hpo,Upo,Vh,Ile,Jpo,Ypo,bN,Kpo,Zpo,e_o,Xh,Nle,o_o,r_o,vN,t_o,a_o,n_o,zh,qle,s_o,l_o,FN,i_o,d_o,c_o,Wh,jle,f_o,m_o,TN,g_o,h_o,p_o,Qh,Dle,__o,u_o,MN,b_o,v_o,F_o,Hh,Gle,T_o,M_o,EN,E_o,C_o,w_o,Uh,Ole,A_o,L_o,CN,y_o,x_o,$_o,Jh,Vle,k_o,S_o,wN,R_o,P_o,B_o,Yh,Xle,I_o,N_o,AN,q_o,j_o,D_o,Kh,zle,G_o,O_o,LN,V_o,X_o,z_o,Zh,Wle,W_o,Q_o,yN,H_o,U_o,J_o,ep,Qle,Y_o,K_o,xN,Z_o,euo,ouo,op,Hle,ruo,tuo,$N,auo,nuo,suo,rp,Ule,luo,iuo,kN,duo,cuo,fuo,tp,Jle,muo,guo,SN,huo,puo,_uo,ap,Yle,uuo,buo,RN,vuo,Fuo,Tuo,np,Muo,sp,Euo,lp,WA,Cuo,Kle,wuo,NGe,Pi,ip,Zle,QA,Auo,eie,Luo,qGe,yo,HA,yuo,UA,xuo,PN,$uo,kuo,Suo,JA,Ruo,oie,Puo,Buo,Iuo,Ue,YA,Nuo,rie,quo,juo,Bi,Duo,tie,Guo,Ouo,aie,Vuo,Xuo,zuo,he,dp,nie,Wuo,Quo,BN,Huo,Uuo,Juo,cp,sie,Yuo,Kuo,lie,Zuo,e1o,o1o,fp,iie,r1o,t1o,IN,a1o,n1o,s1o,mp,die,l1o,i1o,NN,d1o,c1o,f1o,gp,cie,m1o,g1o,qN,h1o,p1o,_1o,hp,fie,u1o,b1o,jN,v1o,F1o,T1o,pp,mie,M1o,E1o,DN,C1o,w1o,A1o,_p,gie,L1o,y1o,GN,x1o,$1o,k1o,up,hie,S1o,R1o,ON,P1o,B1o,I1o,bp,pie,N1o,q1o,VN,j1o,D1o,G1o,vp,_ie,O1o,V1o,XN,X1o,z1o,W1o,Fp,uie,Q1o,H1o,zN,U1o,J1o,Y1o,Tp,bie,K1o,Z1o,WN,e2o,o2o,r2o,Mp,vie,t2o,a2o,QN,n2o,s2o,l2o,Ep,Fie,i2o,d2o,HN,c2o,f2o,m2o,Cp,Tie,g2o,h2o,UN,p2o,_2o,u2o,wp,Mie,b2o,v2o,JN,F2o,T2o,M2o,Ap,E2o,Lp,C2o,yp,KA,w2o,Eie,A2o,jGe,Ii,xp,Cie,ZA,L2o,wie,y2o,DGe,xo,eL,x2o,Ni,$2o,YN,k2o,S2o,KN,R2o,P2o,B2o,oL,I2o,Aie,N2o,q2o,j2o,st,rL,D2o,Lie,G2o,O2o,qi,V2o,yie,X2o,z2o,ZN,W2o,Q2o,H2o,$p,U2o,Je,tL,J2o,xie,Y2o,K2o,Ra,Z2o,$ie,ebo,obo,kie,rbo,tbo,Sie,abo,nbo,sbo,y,kp,Rie,lbo,ibo,eq,dbo,cbo,fbo,Sp,Pie,mbo,gbo,oq,hbo,pbo,_bo,Rp,Bie,ubo,bbo,rq,vbo,Fbo,Tbo,Pp,Iie,Mbo,Ebo,tq,Cbo,wbo,Abo,Bp,Nie,Lbo,ybo,aq,xbo,$bo,kbo,Ip,qie,Sbo,Rbo,nq,Pbo,Bbo,Ibo,Np,jie,Nbo,qbo,sq,jbo,Dbo,Gbo,qp,Die,Obo,Vbo,lq,Xbo,zbo,Wbo,jp,Gie,Qbo,Hbo,iq,Ubo,Jbo,Ybo,Dp,Oie,Kbo,Zbo,dq,e4o,o4o,r4o,Gp,Vie,t4o,a4o,cq,n4o,s4o,l4o,Op,Xie,i4o,d4o,fq,c4o,f4o,m4o,Vp,zie,g4o,h4o,mq,p4o,_4o,u4o,Xp,Wie,b4o,v4o,gq,F4o,T4o,M4o,zp,Qie,E4o,C4o,hq,w4o,A4o,L4o,Wp,Hie,y4o,x4o,pq,$4o,k4o,S4o,Qp,Uie,R4o,P4o,_q,B4o,I4o,N4o,Hp,Jie,q4o,j4o,uq,D4o,G4o,O4o,Up,Yie,V4o,X4o,bq,z4o,W4o,Q4o,Jp,Kie,H4o,U4o,vq,J4o,Y4o,K4o,Yp,Zie,Z4o,evo,Fq,ovo,rvo,tvo,Kp,ede,avo,nvo,Tq,svo,lvo,ivo,Zp,ode,dvo,cvo,Mq,fvo,mvo,gvo,e_,rde,hvo,pvo,Eq,_vo,uvo,bvo,o_,tde,vvo,Fvo,Cq,Tvo,Mvo,Evo,r_,ade,Cvo,wvo,wq,Avo,Lvo,yvo,t_,nde,xvo,$vo,Aq,kvo,Svo,Rvo,a_,sde,Pvo,Bvo,Lq,Ivo,Nvo,qvo,n_,lde,jvo,Dvo,yq,Gvo,Ovo,Vvo,s_,ide,Xvo,zvo,xq,Wvo,Qvo,Hvo,l_,dde,Uvo,Jvo,$q,Yvo,Kvo,Zvo,i_,cde,eFo,oFo,kq,rFo,tFo,aFo,d_,fde,nFo,sFo,Sq,lFo,iFo,dFo,Os,mde,cFo,fFo,Rq,mFo,gFo,Pq,hFo,pFo,_Fo,c_,gde,uFo,bFo,Bq,vFo,FFo,TFo,f_,hde,MFo,EFo,Iq,CFo,wFo,AFo,m_,pde,LFo,yFo,Nq,xFo,$Fo,kFo,g_,_de,SFo,RFo,qq,PFo,BFo,IFo,h_,ude,NFo,qFo,jq,jFo,DFo,GFo,p_,bde,OFo,VFo,Dq,XFo,zFo,WFo,__,vde,QFo,HFo,Gq,UFo,JFo,YFo,u_,Fde,KFo,ZFo,Oq,e6o,o6o,r6o,b_,Tde,t6o,a6o,Vq,n6o,s6o,l6o,v_,Mde,i6o,d6o,Xq,c6o,f6o,m6o,F_,Ede,g6o,h6o,zq,p6o,_6o,u6o,T_,Cde,b6o,v6o,Wq,F6o,T6o,M6o,M_,wde,E6o,C6o,Qq,w6o,A6o,L6o,E_,Ade,y6o,x6o,Hq,$6o,k6o,S6o,C_,Lde,R6o,P6o,Uq,B6o,I6o,N6o,w_,yde,q6o,j6o,Jq,D6o,G6o,O6o,A_,xde,V6o,X6o,Yq,z6o,W6o,Q6o,L_,$de,H6o,U6o,Kq,J6o,Y6o,K6o,y_,kde,Z6o,eTo,Zq,oTo,rTo,tTo,x_,Sde,aTo,nTo,ej,sTo,lTo,iTo,$_,Rde,dTo,cTo,oj,fTo,mTo,gTo,k_,Pde,hTo,pTo,rj,_To,uTo,bTo,S_,Bde,vTo,FTo,tj,TTo,MTo,ETo,R_,Ide,CTo,wTo,aj,ATo,LTo,yTo,P_,Nde,xTo,$To,nj,kTo,STo,RTo,B_,qde,PTo,BTo,sj,ITo,NTo,qTo,I_,jde,jTo,DTo,lj,GTo,OTo,VTo,N_,Dde,XTo,zTo,ij,WTo,QTo,HTo,q_,Gde,UTo,JTo,dj,YTo,KTo,ZTo,j_,Ode,e7o,o7o,cj,r7o,t7o,a7o,D_,Vde,n7o,s7o,fj,l7o,i7o,d7o,G_,Xde,c7o,f7o,mj,m7o,g7o,h7o,O_,zde,p7o,_7o,gj,u7o,b7o,v7o,V_,Wde,F7o,T7o,hj,M7o,E7o,C7o,X_,Qde,w7o,A7o,pj,L7o,y7o,x7o,z_,Hde,$7o,k7o,_j,S7o,R7o,P7o,W_,Ude,B7o,I7o,uj,N7o,q7o,j7o,Q_,Jde,D7o,G7o,bj,O7o,V7o,X7o,H_,Yde,z7o,W7o,vj,Q7o,H7o,U7o,U_,Kde,J7o,Y7o,Fj,K7o,Z7o,e9o,J_,Zde,o9o,r9o,Tj,t9o,a9o,n9o,Y_,ece,s9o,l9o,Mj,i9o,d9o,c9o,K_,oce,f9o,m9o,Ej,g9o,h9o,p9o,Z_,rce,_9o,u9o,Cj,b9o,v9o,F9o,eu,tce,T9o,M9o,wj,E9o,C9o,w9o,ou,ace,A9o,L9o,Aj,y9o,x9o,$9o,ru,nce,k9o,S9o,Lj,R9o,P9o,B9o,tu,sce,I9o,N9o,yj,q9o,j9o,D9o,au,lce,G9o,O9o,xj,V9o,X9o,z9o,nu,ice,W9o,Q9o,$j,H9o,U9o,J9o,su,dce,Y9o,K9o,kj,Z9o,eMo,oMo,lu,cce,rMo,tMo,Sj,aMo,nMo,sMo,iu,fce,lMo,iMo,Rj,dMo,cMo,fMo,du,mce,mMo,gMo,Pj,hMo,pMo,_Mo,cu,gce,uMo,bMo,Bj,vMo,FMo,TMo,fu,hce,MMo,EMo,Ij,CMo,wMo,AMo,mu,pce,LMo,yMo,Nj,xMo,$Mo,kMo,gu,_ce,SMo,RMo,qj,PMo,BMo,IMo,hu,uce,NMo,qMo,jj,jMo,DMo,GMo,pu,bce,OMo,VMo,Dj,XMo,zMo,WMo,_u,vce,QMo,HMo,Gj,UMo,JMo,YMo,uu,Fce,KMo,ZMo,Oj,eEo,oEo,rEo,bu,Tce,tEo,aEo,Vj,nEo,sEo,lEo,vu,Mce,iEo,dEo,Xj,cEo,fEo,mEo,Fu,Ece,gEo,hEo,zj,pEo,_Eo,uEo,Tu,Cce,bEo,vEo,Wj,FEo,TEo,MEo,Mu,wce,EEo,CEo,Qj,wEo,AEo,LEo,Eu,Ace,yEo,xEo,Hj,$Eo,kEo,SEo,Cu,Lce,REo,PEo,Uj,BEo,IEo,NEo,wu,yce,qEo,jEo,Jj,DEo,GEo,OEo,Au,xce,VEo,XEo,Yj,zEo,WEo,QEo,Lu,$ce,HEo,UEo,Kj,JEo,YEo,KEo,yu,kce,ZEo,eCo,Zj,oCo,rCo,tCo,xu,aCo,Sce,nCo,sCo,Rce,lCo,iCo,$u,GGe,ji,ku,Pce,aL,dCo,Bce,cCo,OGe,$o,nL,fCo,Di,mCo,eD,gCo,hCo,oD,pCo,_Co,uCo,sL,bCo,Ice,vCo,FCo,TCo,lt,lL,MCo,Nce,ECo,CCo,Gi,wCo,qce,ACo,LCo,rD,yCo,xCo,$Co,Su,kCo,Ye,iL,SCo,jce,RCo,PCo,Pa,BCo,Dce,ICo,NCo,Gce,qCo,jCo,Oce,DCo,GCo,OCo,G,Ru,Vce,VCo,XCo,tD,zCo,WCo,QCo,Pu,Xce,HCo,UCo,aD,JCo,YCo,KCo,Bu,zce,ZCo,e5o,nD,o5o,r5o,t5o,Iu,Wce,a5o,n5o,sD,s5o,l5o,i5o,Nu,Qce,d5o,c5o,lD,f5o,m5o,g5o,qu,Hce,h5o,p5o,iD,_5o,u5o,b5o,ju,Uce,v5o,F5o,dD,T5o,M5o,E5o,Du,Jce,C5o,w5o,cD,A5o,L5o,y5o,Gu,Yce,x5o,$5o,fD,k5o,S5o,R5o,Ou,Kce,P5o,B5o,mD,I5o,N5o,q5o,Vu,Zce,j5o,D5o,gD,G5o,O5o,V5o,Xu,efe,X5o,z5o,hD,W5o,Q5o,H5o,zu,ofe,U5o,J5o,pD,Y5o,K5o,Z5o,Wu,rfe,e3o,o3o,_D,r3o,t3o,a3o,Qu,tfe,n3o,s3o,uD,l3o,i3o,d3o,Hu,afe,c3o,f3o,bD,m3o,g3o,h3o,Uu,nfe,p3o,_3o,vD,u3o,b3o,v3o,Ju,sfe,F3o,T3o,FD,M3o,E3o,C3o,Yu,lfe,w3o,A3o,TD,L3o,y3o,x3o,Ku,ife,$3o,k3o,MD,S3o,R3o,P3o,Zu,dfe,B3o,I3o,ED,N3o,q3o,j3o,e1,cfe,D3o,G3o,CD,O3o,V3o,X3o,o1,ffe,z3o,W3o,wD,Q3o,H3o,U3o,r1,mfe,J3o,Y3o,AD,K3o,Z3o,e0o,t1,gfe,o0o,r0o,LD,t0o,a0o,n0o,a1,hfe,s0o,l0o,yD,i0o,d0o,c0o,n1,pfe,f0o,m0o,xD,g0o,h0o,p0o,s1,_fe,_0o,u0o,$D,b0o,v0o,F0o,l1,ufe,T0o,M0o,kD,E0o,C0o,w0o,i1,bfe,A0o,L0o,SD,y0o,x0o,$0o,d1,vfe,k0o,S0o,RD,R0o,P0o,B0o,c1,Ffe,I0o,N0o,PD,q0o,j0o,D0o,f1,Tfe,G0o,O0o,BD,V0o,X0o,z0o,m1,Mfe,W0o,Q0o,ID,H0o,U0o,J0o,g1,Efe,Y0o,K0o,ND,Z0o,ewo,owo,h1,Cfe,rwo,two,qD,awo,nwo,swo,p1,wfe,lwo,iwo,jD,dwo,cwo,fwo,_1,Afe,mwo,gwo,DD,hwo,pwo,_wo,u1,Lfe,uwo,bwo,GD,vwo,Fwo,Two,b1,yfe,Mwo,Ewo,OD,Cwo,wwo,Awo,v1,xfe,Lwo,ywo,VD,xwo,$wo,kwo,F1,$fe,Swo,Rwo,XD,Pwo,Bwo,Iwo,T1,kfe,Nwo,qwo,zD,jwo,Dwo,Gwo,M1,Owo,Sfe,Vwo,Xwo,Rfe,zwo,Wwo,E1,VGe,Oi,C1,Pfe,dL,Qwo,Bfe,Hwo,XGe,ko,cL,Uwo,Vi,Jwo,WD,Ywo,Kwo,QD,Zwo,eAo,oAo,fL,rAo,Ife,tAo,aAo,nAo,it,mL,sAo,Nfe,lAo,iAo,Xi,dAo,qfe,cAo,fAo,HD,mAo,gAo,hAo,w1,pAo,Ke,gL,_Ao,jfe,uAo,bAo,Ba,vAo,Dfe,FAo,TAo,Gfe,MAo,EAo,Ofe,CAo,wAo,AAo,z,A1,Vfe,LAo,yAo,UD,xAo,$Ao,kAo,L1,Xfe,SAo,RAo,JD,PAo,BAo,IAo,y1,zfe,NAo,qAo,YD,jAo,DAo,GAo,x1,Wfe,OAo,VAo,KD,XAo,zAo,WAo,$1,Qfe,QAo,HAo,ZD,UAo,JAo,YAo,k1,Hfe,KAo,ZAo,eG,eLo,oLo,rLo,S1,Ufe,tLo,aLo,oG,nLo,sLo,lLo,R1,Jfe,iLo,dLo,rG,cLo,fLo,mLo,P1,Yfe,gLo,hLo,tG,pLo,_Lo,uLo,B1,Kfe,bLo,vLo,aG,FLo,TLo,MLo,I1,Zfe,ELo,CLo,nG,wLo,ALo,LLo,N1,eme,yLo,xLo,sG,$Lo,kLo,SLo,q1,ome,RLo,PLo,lG,BLo,ILo,NLo,j1,rme,qLo,jLo,iG,DLo,GLo,OLo,D1,tme,VLo,XLo,dG,zLo,WLo,QLo,G1,ame,HLo,ULo,cG,JLo,YLo,KLo,O1,nme,ZLo,eyo,fG,oyo,ryo,tyo,V1,sme,ayo,nyo,mG,syo,lyo,iyo,X1,lme,dyo,cyo,gG,fyo,myo,gyo,z1,ime,hyo,pyo,hG,_yo,uyo,byo,W1,dme,vyo,Fyo,pG,Tyo,Myo,Eyo,Q1,cme,Cyo,wyo,_G,Ayo,Lyo,yyo,H1,fme,xyo,$yo,uG,kyo,Syo,Ryo,U1,mme,Pyo,Byo,bG,Iyo,Nyo,qyo,J1,gme,jyo,Dyo,vG,Gyo,Oyo,Vyo,Y1,hme,Xyo,zyo,FG,Wyo,Qyo,Hyo,K1,pme,Uyo,Jyo,TG,Yyo,Kyo,Zyo,Z1,_me,e8o,o8o,MG,r8o,t8o,a8o,e2,ume,n8o,s8o,EG,l8o,i8o,d8o,o2,bme,c8o,f8o,CG,m8o,g8o,h8o,r2,vme,p8o,_8o,wG,u8o,b8o,v8o,t2,Fme,F8o,T8o,AG,M8o,E8o,C8o,a2,Tme,w8o,A8o,LG,L8o,y8o,x8o,n2,Mme,$8o,k8o,yG,S8o,R8o,P8o,s2,Eme,B8o,I8o,xG,N8o,q8o,j8o,l2,Cme,D8o,G8o,$G,O8o,V8o,X8o,i2,wme,z8o,W8o,kG,Q8o,H8o,U8o,d2,Ame,J8o,Y8o,SG,K8o,Z8o,exo,c2,oxo,Lme,rxo,txo,yme,axo,nxo,f2,zGe,zi,m2,xme,hL,sxo,$me,lxo,WGe,So,pL,ixo,Wi,dxo,RG,cxo,fxo,PG,mxo,gxo,hxo,_L,pxo,kme,_xo,uxo,bxo,dt,uL,vxo,Sme,Fxo,Txo,Qi,Mxo,Rme,Exo,Cxo,BG,wxo,Axo,Lxo,g2,yxo,Ze,bL,xxo,Pme,$xo,kxo,Ia,Sxo,Bme,Rxo,Pxo,Ime,Bxo,Ixo,Nme,Nxo,qxo,jxo,Q,h2,qme,Dxo,Gxo,IG,Oxo,Vxo,Xxo,p2,jme,zxo,Wxo,NG,Qxo,Hxo,Uxo,_2,Dme,Jxo,Yxo,qG,Kxo,Zxo,e$o,u2,Gme,o$o,r$o,jG,t$o,a$o,n$o,b2,Ome,s$o,l$o,DG,i$o,d$o,c$o,v2,Vme,f$o,m$o,GG,g$o,h$o,p$o,F2,Xme,_$o,u$o,OG,b$o,v$o,F$o,T2,zme,T$o,M$o,VG,E$o,C$o,w$o,M2,Wme,A$o,L$o,XG,y$o,x$o,$$o,E2,Qme,k$o,S$o,zG,R$o,P$o,B$o,C2,Hme,I$o,N$o,WG,q$o,j$o,D$o,w2,Ume,G$o,O$o,QG,V$o,X$o,z$o,A2,Jme,W$o,Q$o,HG,H$o,U$o,J$o,L2,Yme,Y$o,K$o,UG,Z$o,eko,oko,y2,Kme,rko,tko,JG,ako,nko,sko,x2,Zme,lko,iko,YG,dko,cko,fko,$2,ege,mko,gko,KG,hko,pko,_ko,k2,oge,uko,bko,ZG,vko,Fko,Tko,S2,rge,Mko,Eko,eO,Cko,wko,Ako,R2,tge,Lko,yko,oO,xko,$ko,kko,P2,age,Sko,Rko,rO,Pko,Bko,Iko,B2,nge,Nko,qko,tO,jko,Dko,Gko,I2,sge,Oko,Vko,aO,Xko,zko,Wko,N2,lge,Qko,Hko,nO,Uko,Jko,Yko,q2,ige,Kko,Zko,sO,eSo,oSo,rSo,j2,dge,tSo,aSo,lO,nSo,sSo,lSo,D2,cge,iSo,dSo,iO,cSo,fSo,mSo,G2,fge,gSo,hSo,dO,pSo,_So,uSo,O2,mge,bSo,vSo,cO,FSo,TSo,MSo,V2,gge,ESo,CSo,fO,wSo,ASo,LSo,X2,hge,ySo,xSo,mO,$So,kSo,SSo,z2,pge,RSo,PSo,_ge,BSo,ISo,NSo,W2,uge,qSo,jSo,gO,DSo,GSo,OSo,Q2,bge,VSo,XSo,hO,zSo,WSo,QSo,H2,vge,HSo,USo,pO,JSo,YSo,KSo,U2,Fge,ZSo,eRo,_O,oRo,rRo,tRo,J2,aRo,Tge,nRo,sRo,Mge,lRo,iRo,Y2,QGe,Hi,K2,Ege,vL,dRo,Cge,cRo,HGe,Ro,FL,fRo,Ui,mRo,uO,gRo,hRo,bO,pRo,_Ro,uRo,TL,bRo,wge,vRo,FRo,TRo,ct,ML,MRo,Age,ERo,CRo,Ji,wRo,Lge,ARo,LRo,vO,yRo,xRo,$Ro,Z2,kRo,eo,EL,SRo,yge,RRo,PRo,Na,BRo,xge,IRo,NRo,$ge,qRo,jRo,kge,DRo,GRo,ORo,pe,eb,Sge,VRo,XRo,FO,zRo,WRo,QRo,ob,Rge,HRo,URo,TO,JRo,YRo,KRo,rb,Pge,ZRo,ePo,MO,oPo,rPo,tPo,tb,Bge,aPo,nPo,EO,sPo,lPo,iPo,ab,Ige,dPo,cPo,CO,fPo,mPo,gPo,nb,Nge,hPo,pPo,wO,_Po,uPo,bPo,sb,qge,vPo,FPo,AO,TPo,MPo,EPo,lb,jge,CPo,wPo,LO,APo,LPo,yPo,ib,Dge,xPo,$Po,yO,kPo,SPo,RPo,db,Gge,PPo,BPo,xO,IPo,NPo,qPo,cb,Oge,jPo,DPo,$O,GPo,OPo,VPo,fb,Vge,XPo,zPo,kO,WPo,QPo,HPo,mb,Xge,UPo,JPo,SO,YPo,KPo,ZPo,gb,zge,eBo,oBo,RO,rBo,tBo,aBo,hb,Wge,nBo,sBo,PO,lBo,iBo,dBo,pb,Qge,cBo,fBo,BO,mBo,gBo,hBo,_b,Hge,pBo,_Bo,IO,uBo,bBo,vBo,ub,FBo,Uge,TBo,MBo,Jge,EBo,CBo,bb,UGe,Yi,vb,Yge,CL,wBo,Kge,ABo,JGe,Po,wL,LBo,Ki,yBo,NO,xBo,$Bo,qO,kBo,SBo,RBo,AL,PBo,Zge,BBo,IBo,NBo,ft,LL,qBo,ehe,jBo,DBo,Zi,GBo,ohe,OBo,VBo,jO,XBo,zBo,WBo,Fb,QBo,oo,yL,HBo,rhe,UBo,JBo,qa,YBo,the,KBo,ZBo,ahe,eIo,oIo,nhe,rIo,tIo,aIo,N,Tb,she,nIo,sIo,DO,lIo,iIo,dIo,Mb,lhe,cIo,fIo,GO,mIo,gIo,hIo,Eb,ihe,pIo,_Io,OO,uIo,bIo,vIo,Cb,dhe,FIo,TIo,VO,MIo,EIo,CIo,wb,che,wIo,AIo,XO,LIo,yIo,xIo,Ab,fhe,$Io,kIo,zO,SIo,RIo,PIo,Lb,mhe,BIo,IIo,WO,NIo,qIo,jIo,yb,ghe,DIo,GIo,QO,OIo,VIo,XIo,xb,hhe,zIo,WIo,HO,QIo,HIo,UIo,$b,phe,JIo,YIo,UO,KIo,ZIo,eNo,kb,_he,oNo,rNo,JO,tNo,aNo,nNo,Sb,uhe,sNo,lNo,YO,iNo,dNo,cNo,Rb,bhe,fNo,mNo,KO,gNo,hNo,pNo,Pb,vhe,_No,uNo,ZO,bNo,vNo,FNo,Bb,Fhe,TNo,MNo,eV,ENo,CNo,wNo,Ib,The,ANo,LNo,oV,yNo,xNo,$No,Nb,Mhe,kNo,SNo,rV,RNo,PNo,BNo,qb,Ehe,INo,NNo,tV,qNo,jNo,DNo,jb,Che,GNo,ONo,aV,VNo,XNo,zNo,Db,whe,WNo,QNo,nV,HNo,UNo,JNo,Gb,Ahe,YNo,KNo,sV,ZNo,eqo,oqo,Ob,Lhe,rqo,tqo,lV,aqo,nqo,sqo,Vb,yhe,lqo,iqo,iV,dqo,cqo,fqo,Xb,xhe,mqo,gqo,dV,hqo,pqo,_qo,zb,$he,uqo,bqo,cV,vqo,Fqo,Tqo,Wb,khe,Mqo,Eqo,fV,Cqo,wqo,Aqo,Qb,She,Lqo,yqo,mV,xqo,$qo,kqo,Hb,Rhe,Sqo,Rqo,gV,Pqo,Bqo,Iqo,Ub,Phe,Nqo,qqo,hV,jqo,Dqo,Gqo,Jb,Bhe,Oqo,Vqo,pV,Xqo,zqo,Wqo,Yb,Ihe,Qqo,Hqo,_V,Uqo,Jqo,Yqo,Kb,Nhe,Kqo,Zqo,uV,ejo,ojo,rjo,Zb,qhe,tjo,ajo,bV,njo,sjo,ljo,e4,jhe,ijo,djo,vV,cjo,fjo,mjo,o4,Dhe,gjo,hjo,FV,pjo,_jo,ujo,r4,Ghe,bjo,vjo,TV,Fjo,Tjo,Mjo,t4,Ohe,Ejo,Cjo,MV,wjo,Ajo,Ljo,a4,Vhe,yjo,xjo,EV,$jo,kjo,Sjo,n4,Xhe,Rjo,Pjo,CV,Bjo,Ijo,Njo,s4,zhe,qjo,jjo,wV,Djo,Gjo,Ojo,l4,Whe,Vjo,Xjo,AV,zjo,Wjo,Qjo,i4,Qhe,Hjo,Ujo,LV,Jjo,Yjo,Kjo,d4,Hhe,Zjo,eDo,yV,oDo,rDo,tDo,c4,Uhe,aDo,nDo,xV,sDo,lDo,iDo,f4,Jhe,dDo,cDo,$V,fDo,mDo,gDo,m4,Yhe,hDo,pDo,kV,_Do,uDo,bDo,g4,Khe,vDo,FDo,SV,TDo,MDo,EDo,h4,Zhe,CDo,wDo,RV,ADo,LDo,yDo,p4,xDo,epe,$Do,kDo,ope,SDo,RDo,_4,YGe,ed,u4,rpe,xL,PDo,tpe,BDo,KGe,Bo,$L,IDo,od,NDo,PV,qDo,jDo,BV,DDo,GDo,ODo,kL,VDo,ape,XDo,zDo,WDo,mt,SL,QDo,npe,HDo,UDo,rd,JDo,spe,YDo,KDo,IV,ZDo,eGo,oGo,b4,rGo,ro,RL,tGo,lpe,aGo,nGo,ja,sGo,ipe,lGo,iGo,dpe,dGo,cGo,cpe,fGo,mGo,gGo,Z,v4,fpe,hGo,pGo,NV,_Go,uGo,bGo,F4,mpe,vGo,FGo,qV,TGo,MGo,EGo,T4,gpe,CGo,wGo,jV,AGo,LGo,yGo,M4,hpe,xGo,$Go,DV,kGo,SGo,RGo,E4,ppe,PGo,BGo,GV,IGo,NGo,qGo,C4,_pe,jGo,DGo,OV,GGo,OGo,VGo,w4,upe,XGo,zGo,VV,WGo,QGo,HGo,A4,bpe,UGo,JGo,XV,YGo,KGo,ZGo,L4,vpe,eOo,oOo,zV,rOo,tOo,aOo,y4,Fpe,nOo,sOo,WV,lOo,iOo,dOo,x4,Tpe,cOo,fOo,QV,mOo,gOo,hOo,$4,Mpe,pOo,_Oo,HV,uOo,bOo,vOo,k4,Epe,FOo,TOo,UV,MOo,EOo,COo,S4,Cpe,wOo,AOo,JV,LOo,yOo,xOo,R4,wpe,$Oo,kOo,YV,SOo,ROo,POo,P4,Ape,BOo,IOo,KV,NOo,qOo,jOo,B4,Lpe,DOo,GOo,ZV,OOo,VOo,XOo,I4,ype,zOo,WOo,eX,QOo,HOo,UOo,N4,xpe,JOo,YOo,oX,KOo,ZOo,eVo,q4,$pe,oVo,rVo,rX,tVo,aVo,nVo,j4,kpe,sVo,lVo,tX,iVo,dVo,cVo,D4,Spe,fVo,mVo,aX,gVo,hVo,pVo,G4,Rpe,_Vo,uVo,nX,bVo,vVo,FVo,O4,Ppe,TVo,MVo,sX,EVo,CVo,wVo,V4,Bpe,AVo,LVo,lX,yVo,xVo,$Vo,X4,Ipe,kVo,SVo,iX,RVo,PVo,BVo,z4,Npe,IVo,NVo,dX,qVo,jVo,DVo,W4,qpe,GVo,OVo,cX,VVo,XVo,zVo,Q4,jpe,WVo,QVo,fX,HVo,UVo,JVo,H4,YVo,Dpe,KVo,ZVo,Gpe,eXo,oXo,U4,ZGe,td,J4,Ope,PL,rXo,Vpe,tXo,eOe,Io,BL,aXo,ad,nXo,mX,sXo,lXo,gX,iXo,dXo,cXo,IL,fXo,Xpe,mXo,gXo,hXo,gt,NL,pXo,zpe,_Xo,uXo,nd,bXo,Wpe,vXo,FXo,hX,TXo,MXo,EXo,Y4,CXo,to,qL,wXo,Qpe,AXo,LXo,Da,yXo,Hpe,xXo,$Xo,Upe,kXo,SXo,Jpe,RXo,PXo,BXo,Zr,K4,Ype,IXo,NXo,pX,qXo,jXo,DXo,Z4,Kpe,GXo,OXo,_X,VXo,XXo,zXo,ev,Zpe,WXo,QXo,uX,HXo,UXo,JXo,ov,e_e,YXo,KXo,bX,ZXo,ezo,ozo,rv,o_e,rzo,tzo,vX,azo,nzo,szo,tv,lzo,r_e,izo,dzo,t_e,czo,fzo,av,oOe,sd,nv,a_e,jL,mzo,n_e,gzo,rOe,No,DL,hzo,ld,pzo,FX,_zo,uzo,TX,bzo,vzo,Fzo,GL,Tzo,s_e,Mzo,Ezo,Czo,ht,OL,wzo,l_e,Azo,Lzo,id,yzo,i_e,xzo,$zo,MX,kzo,Szo,Rzo,sv,Pzo,ao,VL,Bzo,d_e,Izo,Nzo,Ga,qzo,c_e,jzo,Dzo,f_e,Gzo,Ozo,m_e,Vzo,Xzo,zzo,H,lv,g_e,Wzo,Qzo,EX,Hzo,Uzo,Jzo,iv,h_e,Yzo,Kzo,CX,Zzo,eWo,oWo,dv,p_e,rWo,tWo,wX,aWo,nWo,sWo,cv,__e,lWo,iWo,AX,dWo,cWo,fWo,fv,u_e,mWo,gWo,LX,hWo,pWo,_Wo,mv,b_e,uWo,bWo,yX,vWo,FWo,TWo,gv,v_e,MWo,EWo,xX,CWo,wWo,AWo,hv,F_e,LWo,yWo,$X,xWo,$Wo,kWo,pv,T_e,SWo,RWo,kX,PWo,BWo,IWo,_v,M_e,NWo,qWo,SX,jWo,DWo,GWo,uv,E_e,OWo,VWo,RX,XWo,zWo,WWo,bv,C_e,QWo,HWo,PX,UWo,JWo,YWo,vv,w_e,KWo,ZWo,BX,eQo,oQo,rQo,Fv,A_e,tQo,aQo,IX,nQo,sQo,lQo,Tv,L_e,iQo,dQo,NX,cQo,fQo,mQo,Mv,y_e,gQo,hQo,qX,pQo,_Qo,uQo,Ev,x_e,bQo,vQo,jX,FQo,TQo,MQo,Cv,$_e,EQo,CQo,DX,wQo,AQo,LQo,wv,k_e,yQo,xQo,GX,$Qo,kQo,SQo,Av,S_e,RQo,PQo,OX,BQo,IQo,NQo,Lv,R_e,qQo,jQo,VX,DQo,GQo,OQo,yv,P_e,VQo,XQo,XX,zQo,WQo,QQo,xv,B_e,HQo,UQo,zX,JQo,YQo,KQo,$v,I_e,ZQo,eHo,WX,oHo,rHo,tHo,kv,N_e,aHo,nHo,QX,sHo,lHo,iHo,Sv,q_e,dHo,cHo,HX,fHo,mHo,gHo,Rv,j_e,hHo,pHo,UX,_Ho,uHo,bHo,Pv,D_e,vHo,FHo,JX,THo,MHo,EHo,Bv,G_e,CHo,wHo,YX,AHo,LHo,yHo,Iv,O_e,xHo,$Ho,KX,kHo,SHo,RHo,Nv,V_e,PHo,BHo,ZX,IHo,NHo,qHo,qv,X_e,jHo,DHo,ez,GHo,OHo,VHo,jv,z_e,XHo,zHo,oz,WHo,QHo,HHo,Dv,W_e,UHo,JHo,rz,YHo,KHo,ZHo,Gv,Q_e,eUo,oUo,tz,rUo,tUo,aUo,Ov,nUo,H_e,sUo,lUo,U_e,iUo,dUo,Vv,tOe,dd,Xv,J_e,XL,cUo,Y_e,fUo,aOe,qo,zL,mUo,cd,gUo,az,hUo,pUo,nz,_Uo,uUo,bUo,WL,vUo,K_e,FUo,TUo,MUo,pt,QL,EUo,Z_e,CUo,wUo,fd,AUo,eue,LUo,yUo,sz,xUo,$Uo,kUo,zv,SUo,no,HL,RUo,oue,PUo,BUo,Oa,IUo,rue,NUo,qUo,tue,jUo,DUo,aue,GUo,OUo,VUo,V,Wv,nue,XUo,zUo,lz,WUo,QUo,HUo,Qv,sue,UUo,JUo,iz,YUo,KUo,ZUo,Hv,lue,eJo,oJo,dz,rJo,tJo,aJo,Uv,iue,nJo,sJo,cz,lJo,iJo,dJo,Jv,due,cJo,fJo,fz,mJo,gJo,hJo,Yv,cue,pJo,_Jo,mz,uJo,bJo,vJo,Kv,fue,FJo,TJo,gz,MJo,EJo,CJo,Zv,mue,wJo,AJo,hz,LJo,yJo,xJo,eF,gue,$Jo,kJo,pz,SJo,RJo,PJo,oF,hue,BJo,IJo,_z,NJo,qJo,jJo,rF,pue,DJo,GJo,uz,OJo,VJo,XJo,tF,_ue,zJo,WJo,bz,QJo,HJo,UJo,aF,uue,JJo,YJo,vz,KJo,ZJo,eYo,nF,bue,oYo,rYo,Fz,tYo,aYo,nYo,sF,vue,sYo,lYo,Tz,iYo,dYo,cYo,lF,Fue,fYo,mYo,Mz,gYo,hYo,pYo,iF,Tue,_Yo,uYo,Ez,bYo,vYo,FYo,dF,Mue,TYo,MYo,Cz,EYo,CYo,wYo,cF,Eue,AYo,LYo,wz,yYo,xYo,$Yo,fF,Cue,kYo,SYo,Az,RYo,PYo,BYo,mF,wue,IYo,NYo,Lz,qYo,jYo,DYo,gF,Aue,GYo,OYo,yz,VYo,XYo,zYo,hF,Lue,WYo,QYo,xz,HYo,UYo,JYo,pF,yue,YYo,KYo,$z,ZYo,eKo,oKo,_F,xue,rKo,tKo,kz,aKo,nKo,sKo,uF,$ue,lKo,iKo,Sz,dKo,cKo,fKo,bF,kue,mKo,gKo,Rz,hKo,pKo,_Ko,vF,Sue,uKo,bKo,Pz,vKo,FKo,TKo,FF,Rue,MKo,EKo,Bz,CKo,wKo,AKo,TF,Pue,LKo,yKo,Iz,xKo,$Ko,kKo,MF,Bue,SKo,RKo,Nz,PKo,BKo,IKo,EF,Iue,NKo,qKo,qz,jKo,DKo,GKo,CF,Nue,OKo,VKo,jz,XKo,zKo,WKo,wF,que,QKo,HKo,Dz,UKo,JKo,YKo,AF,jue,KKo,ZKo,Gz,eZo,oZo,rZo,LF,Due,tZo,aZo,Oz,nZo,sZo,lZo,yF,Gue,iZo,dZo,Vz,cZo,fZo,mZo,xF,Oue,gZo,hZo,Xz,pZo,_Zo,uZo,$F,Vue,bZo,vZo,zz,FZo,TZo,MZo,kF,Xue,EZo,CZo,Wz,wZo,AZo,LZo,SF,yZo,zue,xZo,$Zo,Wue,kZo,SZo,RF,nOe,md,PF,Que,UL,RZo,Hue,PZo,sOe,jo,JL,BZo,gd,IZo,Qz,NZo,qZo,Hz,jZo,DZo,GZo,YL,OZo,Uue,VZo,XZo,zZo,_t,KL,WZo,Jue,QZo,HZo,hd,UZo,Yue,JZo,YZo,Uz,KZo,ZZo,eer,BF,oer,so,ZL,rer,Kue,ter,aer,Va,ner,Zue,ser,ler,e1e,ier,der,o1e,cer,fer,mer,r1e,IF,t1e,ger,her,Jz,per,_er,uer,NF,ber,a1e,ver,Fer,n1e,Ter,Mer,qF,lOe,pd,jF,s1e,ey,Eer,l1e,Cer,iOe,Do,oy,wer,_d,Aer,Yz,Ler,yer,Kz,xer,$er,ker,ry,Ser,i1e,Rer,Per,Ber,ut,ty,Ier,d1e,Ner,qer,ud,jer,c1e,Der,Ger,Zz,Oer,Ver,Xer,DF,zer,lo,ay,Wer,f1e,Qer,Her,Xa,Uer,m1e,Jer,Yer,g1e,Ker,Zer,h1e,eor,oor,ror,ue,GF,p1e,tor,aor,eW,nor,sor,lor,OF,_1e,ior,dor,oW,cor,mor,gor,VF,u1e,hor,por,rW,_or,uor,bor,XF,b1e,vor,For,tW,Tor,Mor,Eor,Vs,v1e,Cor,wor,aW,Aor,Lor,nW,yor,xor,$or,zF,F1e,kor,Sor,sW,Ror,Por,Bor,Xs,T1e,Ior,Nor,lW,qor,jor,iW,Dor,Gor,Oor,bt,M1e,Vor,Xor,dW,zor,Wor,cW,Qor,Hor,fW,Uor,Jor,Yor,WF,E1e,Kor,Zor,mW,err,orr,rrr,QF,C1e,trr,arr,gW,nrr,srr,lrr,HF,w1e,irr,drr,hW,crr,frr,mrr,UF,A1e,grr,hrr,pW,prr,_rr,urr,JF,L1e,brr,vrr,_W,Frr,Trr,Mrr,YF,y1e,Err,Crr,uW,wrr,Arr,Lrr,KF,x1e,yrr,xrr,bW,$rr,krr,Srr,ZF,$1e,Rrr,Prr,vW,Brr,Irr,Nrr,e6,qrr,k1e,jrr,Drr,S1e,Grr,Orr,o6,dOe,bd,r6,R1e,ny,Vrr,P1e,Xrr,cOe,Go,sy,zrr,vd,Wrr,FW,Qrr,Hrr,TW,Urr,Jrr,Yrr,ly,Krr,B1e,Zrr,etr,otr,vt,iy,rtr,I1e,ttr,atr,Fd,ntr,N1e,str,ltr,MW,itr,dtr,ctr,t6,ftr,io,dy,mtr,q1e,gtr,htr,za,ptr,j1e,_tr,utr,D1e,btr,vtr,G1e,Ftr,Ttr,Mtr,O1e,a6,V1e,Etr,Ctr,EW,wtr,Atr,Ltr,n6,ytr,X1e,xtr,$tr,z1e,ktr,Str,s6,fOe,Td,l6,W1e,cy,Rtr,Q1e,Ptr,mOe,Oo,fy,Btr,Md,Itr,CW,Ntr,qtr,wW,jtr,Dtr,Gtr,my,Otr,H1e,Vtr,Xtr,ztr,Ft,gy,Wtr,U1e,Qtr,Htr,Ed,Utr,J1e,Jtr,Ytr,AW,Ktr,Ztr,ear,i6,oar,co,hy,rar,Y1e,tar,aar,Wa,nar,K1e,sar,lar,Z1e,iar,dar,e2e,car,far,mar,o2e,d6,r2e,gar,har,LW,par,_ar,uar,c6,bar,t2e,Far,Tar,a2e,Mar,Ear,f6,gOe,Cd,m6,n2e,py,Car,s2e,war,hOe,Vo,_y,Aar,wd,Lar,yW,yar,xar,xW,$ar,kar,Sar,uy,Rar,l2e,Par,Bar,Iar,Tt,by,Nar,i2e,qar,jar,Ad,Dar,d2e,Gar,Oar,$W,Var,Xar,zar,g6,War,fo,vy,Qar,c2e,Har,Uar,Qa,Jar,f2e,Yar,Kar,m2e,Zar,enr,g2e,onr,rnr,tnr,Pe,h6,h2e,anr,nnr,kW,snr,lnr,inr,p6,p2e,dnr,cnr,SW,fnr,mnr,gnr,_6,_2e,hnr,pnr,RW,_nr,unr,bnr,u6,u2e,vnr,Fnr,PW,Tnr,Mnr,Enr,b6,b2e,Cnr,wnr,BW,Anr,Lnr,ynr,v6,v2e,xnr,$nr,IW,knr,Snr,Rnr,F6,F2e,Pnr,Bnr,NW,Inr,Nnr,qnr,T6,T2e,jnr,Dnr,qW,Gnr,Onr,Vnr,M6,M2e,Xnr,znr,jW,Wnr,Qnr,Hnr,E6,Unr,E2e,Jnr,Ynr,C2e,Knr,Znr,C6,pOe,Ld,w6,w2e,Fy,esr,A2e,osr,_Oe,Xo,Ty,rsr,yd,tsr,DW,asr,nsr,GW,ssr,lsr,isr,My,dsr,L2e,csr,fsr,msr,Mt,Ey,gsr,y2e,hsr,psr,xd,_sr,x2e,usr,bsr,OW,vsr,Fsr,Tsr,A6,Msr,mo,Cy,Esr,$2e,Csr,wsr,Ha,Asr,k2e,Lsr,ysr,S2e,xsr,$sr,R2e,ksr,Ssr,Rsr,et,L6,P2e,Psr,Bsr,VW,Isr,Nsr,qsr,y6,B2e,jsr,Dsr,XW,Gsr,Osr,Vsr,x6,I2e,Xsr,zsr,zW,Wsr,Qsr,Hsr,$6,N2e,Usr,Jsr,WW,Ysr,Ksr,Zsr,k6,q2e,elr,olr,QW,rlr,tlr,alr,S6,nlr,j2e,slr,llr,D2e,ilr,dlr,R6,uOe,$d,P6,G2e,wy,clr,O2e,flr,bOe,zo,Ay,mlr,kd,glr,HW,hlr,plr,UW,_lr,ulr,blr,Ly,vlr,V2e,Flr,Tlr,Mlr,Et,yy,Elr,X2e,Clr,wlr,Sd,Alr,z2e,Llr,ylr,JW,xlr,$lr,klr,B6,Slr,go,xy,Rlr,W2e,Plr,Blr,Ua,Ilr,Q2e,Nlr,qlr,H2e,jlr,Dlr,U2e,Glr,Olr,Vlr,Le,I6,J2e,Xlr,zlr,YW,Wlr,Qlr,Hlr,N6,Y2e,Ulr,Jlr,KW,Ylr,Klr,Zlr,q6,K2e,eir,oir,ZW,rir,tir,air,j6,Z2e,nir,sir,eQ,lir,iir,dir,D6,ebe,cir,fir,oQ,mir,gir,hir,G6,obe,pir,_ir,rQ,uir,bir,vir,O6,rbe,Fir,Tir,tQ,Mir,Eir,Cir,V6,tbe,wir,Air,aQ,Lir,yir,xir,X6,abe,$ir,kir,nQ,Sir,Rir,Pir,z6,nbe,Bir,Iir,sQ,Nir,qir,jir,W6,Dir,sbe,Gir,Oir,lbe,Vir,Xir,Q6,vOe,Rd,H6,ibe,$y,zir,dbe,Wir,FOe,Wo,ky,Qir,Pd,Hir,lQ,Uir,Jir,iQ,Yir,Kir,Zir,Sy,edr,cbe,odr,rdr,tdr,Ct,Ry,adr,fbe,ndr,sdr,Bd,ldr,mbe,idr,ddr,dQ,cdr,fdr,mdr,U6,gdr,ho,Py,hdr,gbe,pdr,_dr,Ja,udr,hbe,bdr,vdr,pbe,Fdr,Tdr,_be,Mdr,Edr,Cdr,By,J6,ube,wdr,Adr,cQ,Ldr,ydr,xdr,Y6,bbe,$dr,kdr,fQ,Sdr,Rdr,Pdr,K6,Bdr,vbe,Idr,Ndr,Fbe,qdr,jdr,Z6,TOe,Id,eT,Tbe,Iy,Ddr,Mbe,Gdr,MOe,Qo,Ny,Odr,Nd,Vdr,mQ,Xdr,zdr,gQ,Wdr,Qdr,Hdr,qy,Udr,Ebe,Jdr,Ydr,Kdr,wt,jy,Zdr,Cbe,ecr,ocr,qd,rcr,wbe,tcr,acr,hQ,ncr,scr,lcr,oT,icr,po,Dy,dcr,Abe,ccr,fcr,Ya,mcr,Lbe,gcr,hcr,ybe,pcr,_cr,xbe,ucr,bcr,vcr,ot,rT,$be,Fcr,Tcr,pQ,Mcr,Ecr,Ccr,tT,kbe,wcr,Acr,_Q,Lcr,ycr,xcr,aT,Sbe,$cr,kcr,uQ,Scr,Rcr,Pcr,nT,Rbe,Bcr,Icr,bQ,Ncr,qcr,jcr,sT,Pbe,Dcr,Gcr,vQ,Ocr,Vcr,Xcr,lT,zcr,Bbe,Wcr,Qcr,Ibe,Hcr,Ucr,iT,EOe,jd,dT,Nbe,Gy,Jcr,qbe,Ycr,COe,Ho,Oy,Kcr,Dd,Zcr,FQ,efr,ofr,TQ,rfr,tfr,afr,Vy,nfr,jbe,sfr,lfr,ifr,At,Xy,dfr,Dbe,cfr,ffr,Gd,mfr,Gbe,gfr,hfr,MQ,pfr,_fr,ufr,cT,bfr,_o,zy,vfr,Obe,Ffr,Tfr,Ka,Mfr,Vbe,Efr,Cfr,Xbe,wfr,Afr,zbe,Lfr,yfr,xfr,Za,fT,Wbe,$fr,kfr,EQ,Sfr,Rfr,Pfr,mT,Qbe,Bfr,Ifr,CQ,Nfr,qfr,jfr,gT,Hbe,Dfr,Gfr,wQ,Ofr,Vfr,Xfr,hT,Ube,zfr,Wfr,AQ,Qfr,Hfr,Ufr,pT,Jfr,Jbe,Yfr,Kfr,Ybe,Zfr,emr,_T,wOe,Od,uT,Kbe,Wy,omr,Zbe,rmr,AOe,Uo,Qy,tmr,Vd,amr,LQ,nmr,smr,yQ,lmr,imr,dmr,Hy,cmr,e4e,fmr,mmr,gmr,Lt,Uy,hmr,o4e,pmr,_mr,Xd,umr,r4e,bmr,vmr,xQ,Fmr,Tmr,Mmr,bT,Emr,uo,Jy,Cmr,t4e,wmr,Amr,en,Lmr,a4e,ymr,xmr,n4e,$mr,kmr,s4e,Smr,Rmr,Pmr,Yy,vT,l4e,Bmr,Imr,$Q,Nmr,qmr,jmr,FT,i4e,Dmr,Gmr,kQ,Omr,Vmr,Xmr,TT,zmr,d4e,Wmr,Qmr,c4e,Hmr,Umr,MT,LOe,zd,ET,f4e,Ky,Jmr,m4e,Ymr,yOe,Jo,Zy,Kmr,Wd,Zmr,SQ,egr,ogr,RQ,rgr,tgr,agr,e8,ngr,g4e,sgr,lgr,igr,yt,o8,dgr,h4e,cgr,fgr,Qd,mgr,p4e,ggr,hgr,PQ,pgr,_gr,ugr,CT,bgr,bo,r8,vgr,_4e,Fgr,Tgr,on,Mgr,u4e,Egr,Cgr,b4e,wgr,Agr,v4e,Lgr,ygr,xgr,F4e,wT,T4e,$gr,kgr,BQ,Sgr,Rgr,Pgr,AT,Bgr,M4e,Igr,Ngr,E4e,qgr,jgr,LT,xOe,Hd,yT,C4e,t8,Dgr,w4e,Ggr,$Oe,Yo,a8,Ogr,Ud,Vgr,IQ,Xgr,zgr,NQ,Wgr,Qgr,Hgr,n8,Ugr,A4e,Jgr,Ygr,Kgr,xt,s8,Zgr,L4e,ehr,ohr,Jd,rhr,y4e,thr,ahr,qQ,nhr,shr,lhr,xT,ihr,vo,l8,dhr,x4e,chr,fhr,rn,mhr,$4e,ghr,hhr,k4e,phr,_hr,S4e,uhr,bhr,vhr,tn,$T,R4e,Fhr,Thr,jQ,Mhr,Ehr,Chr,kT,P4e,whr,Ahr,DQ,Lhr,yhr,xhr,ST,B4e,$hr,khr,GQ,Shr,Rhr,Phr,RT,I4e,Bhr,Ihr,OQ,Nhr,qhr,jhr,PT,Dhr,N4e,Ghr,Ohr,q4e,Vhr,Xhr,BT,kOe,Yd,IT,j4e,i8,zhr,D4e,Whr,SOe,Ko,d8,Qhr,Kd,Hhr,VQ,Uhr,Jhr,XQ,Yhr,Khr,Zhr,c8,epr,G4e,opr,rpr,tpr,$t,f8,apr,O4e,npr,spr,Zd,lpr,V4e,ipr,dpr,zQ,cpr,fpr,mpr,NT,gpr,Fo,m8,hpr,X4e,ppr,_pr,an,upr,z4e,bpr,vpr,W4e,Fpr,Tpr,Q4e,Mpr,Epr,Cpr,H4e,qT,U4e,wpr,Apr,WQ,Lpr,ypr,xpr,jT,$pr,J4e,kpr,Spr,Y4e,Rpr,Ppr,DT,ROe,ec,GT,K4e,g8,Bpr,Z4e,Ipr,POe,Zo,h8,Npr,oc,qpr,QQ,jpr,Dpr,HQ,Gpr,Opr,Vpr,p8,Xpr,eve,zpr,Wpr,Qpr,kt,_8,Hpr,ove,Upr,Jpr,rc,Ypr,rve,Kpr,Zpr,UQ,e_r,o_r,r_r,OT,t_r,Lr,u8,a_r,tve,n_r,s_r,nn,l_r,ave,i_r,d_r,nve,c_r,f_r,sve,m_r,g_r,h_r,q,VT,lve,p_r,__r,JQ,u_r,b_r,v_r,XT,ive,F_r,T_r,YQ,M_r,E_r,C_r,zT,dve,w_r,A_r,KQ,L_r,y_r,x_r,WT,cve,$_r,k_r,ZQ,S_r,R_r,P_r,QT,fve,B_r,I_r,eH,N_r,q_r,j_r,HT,mve,D_r,G_r,oH,O_r,V_r,X_r,UT,gve,z_r,W_r,rH,Q_r,H_r,U_r,JT,hve,J_r,Y_r,tH,K_r,Z_r,eur,YT,pve,our,rur,aH,tur,aur,nur,KT,_ve,sur,lur,nH,iur,dur,cur,ZT,uve,fur,mur,sH,gur,hur,pur,e7,bve,_ur,uur,lH,bur,vur,Fur,o7,vve,Tur,Mur,iH,Eur,Cur,wur,r7,Fve,Aur,Lur,dH,yur,xur,$ur,t7,Tve,kur,Sur,cH,Rur,Pur,Bur,a7,Mve,Iur,Nur,fH,qur,jur,Dur,n7,Eve,Gur,Our,mH,Vur,Xur,zur,zs,Cve,Wur,Qur,gH,Hur,Uur,hH,Jur,Yur,Kur,s7,wve,Zur,e1r,pH,o1r,r1r,t1r,l7,Ave,a1r,n1r,_H,s1r,l1r,i1r,i7,Lve,d1r,c1r,uH,f1r,m1r,g1r,d7,yve,h1r,p1r,bH,_1r,u1r,b1r,c7,xve,v1r,F1r,vH,T1r,M1r,E1r,f7,$ve,C1r,w1r,FH,A1r,L1r,y1r,m7,kve,x1r,$1r,TH,k1r,S1r,R1r,g7,Sve,P1r,B1r,MH,I1r,N1r,q1r,h7,Rve,j1r,D1r,EH,G1r,O1r,V1r,p7,Pve,X1r,z1r,CH,W1r,Q1r,H1r,_7,Bve,U1r,J1r,wH,Y1r,K1r,Z1r,u7,Ive,e2r,o2r,AH,r2r,t2r,a2r,b7,Nve,n2r,s2r,LH,l2r,i2r,d2r,v7,qve,c2r,f2r,yH,m2r,g2r,h2r,F7,jve,p2r,_2r,xH,u2r,b2r,v2r,T7,Dve,F2r,T2r,$H,M2r,E2r,C2r,M7,Gve,w2r,A2r,kH,L2r,y2r,x2r,E7,Ove,$2r,k2r,SH,S2r,R2r,P2r,C7,Vve,B2r,I2r,RH,N2r,q2r,j2r,w7,Xve,D2r,G2r,PH,O2r,V2r,X2r,A7,zve,z2r,W2r,BH,Q2r,H2r,U2r,L7,Wve,J2r,Y2r,IH,K2r,Z2r,ebr,y7,Qve,obr,rbr,NH,tbr,abr,nbr,x7,Hve,sbr,lbr,qH,ibr,dbr,cbr,$7,Uve,fbr,mbr,jH,gbr,hbr,pbr,k7,Jve,_br,ubr,DH,bbr,vbr,Fbr,S7,Yve,Tbr,Mbr,GH,Ebr,Cbr,wbr,R7,Kve,Abr,Lbr,OH,ybr,xbr,$br,P7,Zve,kbr,Sbr,VH,Rbr,Pbr,Bbr,B7,eFe,Ibr,Nbr,XH,qbr,jbr,Dbr,I7,BOe,tc,N7,oFe,b8,Gbr,rFe,Obr,IOe,er,v8,Vbr,ac,Xbr,zH,zbr,Wbr,WH,Qbr,Hbr,Ubr,F8,Jbr,tFe,Ybr,Kbr,Zbr,St,T8,e4r,aFe,o4r,r4r,nc,t4r,nFe,a4r,n4r,QH,s4r,l4r,i4r,q7,d4r,yr,M8,c4r,sFe,f4r,m4r,sn,g4r,lFe,h4r,p4r,iFe,_4r,u4r,dFe,b4r,v4r,F4r,se,j7,cFe,T4r,M4r,HH,E4r,C4r,w4r,D7,fFe,A4r,L4r,UH,y4r,x4r,$4r,G7,mFe,k4r,S4r,JH,R4r,P4r,B4r,O7,gFe,I4r,N4r,YH,q4r,j4r,D4r,V7,hFe,G4r,O4r,KH,V4r,X4r,z4r,X7,pFe,W4r,Q4r,ZH,H4r,U4r,J4r,z7,_Fe,Y4r,K4r,eU,Z4r,evr,ovr,W7,uFe,rvr,tvr,oU,avr,nvr,svr,Q7,bFe,lvr,ivr,rU,dvr,cvr,fvr,H7,vFe,mvr,gvr,tU,hvr,pvr,_vr,U7,FFe,uvr,bvr,aU,vvr,Fvr,Tvr,J7,TFe,Mvr,Evr,nU,Cvr,wvr,Avr,Y7,MFe,Lvr,yvr,sU,xvr,$vr,kvr,K7,EFe,Svr,Rvr,lU,Pvr,Bvr,Ivr,Z7,CFe,Nvr,qvr,iU,jvr,Dvr,Gvr,e9,wFe,Ovr,Vvr,dU,Xvr,zvr,Wvr,o9,AFe,Qvr,Hvr,cU,Uvr,Jvr,Yvr,r9,LFe,Kvr,Zvr,fU,eFr,oFr,rFr,t9,yFe,tFr,aFr,mU,nFr,sFr,lFr,a9,xFe,iFr,dFr,gU,cFr,fFr,mFr,n9,$Fe,gFr,hFr,hU,pFr,_Fr,uFr,s9,kFe,bFr,vFr,pU,FFr,TFr,MFr,l9,SFe,EFr,CFr,_U,wFr,AFr,LFr,i9,NOe,sc,d9,RFe,E8,yFr,PFe,xFr,qOe,or,C8,$Fr,lc,kFr,uU,SFr,RFr,bU,PFr,BFr,IFr,w8,NFr,BFe,qFr,jFr,DFr,Rt,A8,GFr,IFe,OFr,VFr,ic,XFr,NFe,zFr,WFr,vU,QFr,HFr,UFr,c9,JFr,xr,L8,YFr,qFe,KFr,ZFr,ln,e6r,jFe,o6r,r6r,DFe,t6r,a6r,GFe,n6r,s6r,l6r,Me,f9,OFe,i6r,d6r,FU,c6r,f6r,m6r,m9,VFe,g6r,h6r,TU,p6r,_6r,u6r,g9,XFe,b6r,v6r,MU,F6r,T6r,M6r,h9,zFe,E6r,C6r,EU,w6r,A6r,L6r,p9,WFe,y6r,x6r,CU,$6r,k6r,S6r,_9,QFe,R6r,P6r,wU,B6r,I6r,N6r,u9,HFe,q6r,j6r,AU,D6r,G6r,O6r,b9,UFe,V6r,X6r,LU,z6r,W6r,Q6r,v9,JFe,H6r,U6r,yU,J6r,Y6r,K6r,F9,YFe,Z6r,eTr,xU,oTr,rTr,tTr,T9,KFe,aTr,nTr,$U,sTr,lTr,iTr,M9,ZFe,dTr,cTr,kU,fTr,mTr,gTr,E9,e6e,hTr,pTr,SU,_Tr,uTr,bTr,C9,jOe,dc,w9,o6e,y8,vTr,r6e,FTr,DOe,rr,x8,TTr,cc,MTr,RU,ETr,CTr,PU,wTr,ATr,LTr,$8,yTr,t6e,xTr,$Tr,kTr,Pt,k8,STr,a6e,RTr,PTr,fc,BTr,n6e,ITr,NTr,BU,qTr,jTr,DTr,A9,GTr,$r,S8,OTr,s6e,VTr,XTr,dn,zTr,l6e,WTr,QTr,i6e,HTr,UTr,d6e,JTr,YTr,KTr,rt,L9,c6e,ZTr,e7r,IU,o7r,r7r,t7r,y9,f6e,a7r,n7r,NU,s7r,l7r,i7r,x9,m6e,d7r,c7r,qU,f7r,m7r,g7r,$9,g6e,h7r,p7r,jU,_7r,u7r,b7r,k9,h6e,v7r,F7r,DU,T7r,M7r,E7r,S9,GOe,mc,R9,p6e,R8,C7r,_6e,w7r,OOe,tr,P8,A7r,gc,L7r,GU,y7r,x7r,OU,$7r,k7r,S7r,B8,R7r,u6e,P7r,B7r,I7r,Bt,I8,N7r,b6e,q7r,j7r,hc,D7r,v6e,G7r,O7r,VU,V7r,X7r,z7r,P9,W7r,kr,N8,Q7r,F6e,H7r,U7r,cn,J7r,T6e,Y7r,K7r,M6e,Z7r,e9r,E6e,o9r,r9r,t9r,ie,B9,C6e,a9r,n9r,XU,s9r,l9r,i9r,I9,w6e,d9r,c9r,zU,f9r,m9r,g9r,N9,A6e,h9r,p9r,WU,_9r,u9r,b9r,q9,L6e,v9r,F9r,QU,T9r,M9r,E9r,j9,y6e,C9r,w9r,HU,A9r,L9r,y9r,D9,x6e,x9r,$9r,UU,k9r,S9r,R9r,G9,$6e,P9r,B9r,JU,I9r,N9r,q9r,O9,k6e,j9r,D9r,YU,G9r,O9r,V9r,V9,S6e,X9r,z9r,KU,W9r,Q9r,H9r,X9,R6e,U9r,J9r,ZU,Y9r,K9r,Z9r,z9,P6e,eMr,oMr,eJ,rMr,tMr,aMr,W9,B6e,nMr,sMr,oJ,lMr,iMr,dMr,Q9,I6e,cMr,fMr,rJ,mMr,gMr,hMr,H9,N6e,pMr,_Mr,tJ,uMr,bMr,vMr,U9,q6e,FMr,TMr,aJ,MMr,EMr,CMr,J9,j6e,wMr,AMr,nJ,LMr,yMr,xMr,Y9,D6e,$Mr,kMr,sJ,SMr,RMr,PMr,K9,G6e,BMr,IMr,lJ,NMr,qMr,jMr,Z9,O6e,DMr,GMr,iJ,OMr,VMr,XMr,eM,V6e,zMr,WMr,dJ,QMr,HMr,UMr,oM,VOe,pc,rM,X6e,q8,JMr,z6e,YMr,XOe,ar,j8,KMr,_c,ZMr,cJ,eEr,oEr,fJ,rEr,tEr,aEr,D8,nEr,W6e,sEr,lEr,iEr,It,G8,dEr,Q6e,cEr,fEr,uc,mEr,H6e,gEr,hEr,mJ,pEr,_Er,uEr,tM,bEr,Sr,O8,vEr,U6e,FEr,TEr,fn,MEr,J6e,EEr,CEr,Y6e,wEr,AEr,K6e,LEr,yEr,xEr,ye,aM,Z6e,$Er,kEr,gJ,SEr,REr,PEr,nM,eTe,BEr,IEr,hJ,NEr,qEr,jEr,sM,oTe,DEr,GEr,pJ,OEr,VEr,XEr,lM,rTe,zEr,WEr,_J,QEr,HEr,UEr,iM,tTe,JEr,YEr,uJ,KEr,ZEr,eCr,dM,aTe,oCr,rCr,bJ,tCr,aCr,nCr,cM,nTe,sCr,lCr,vJ,iCr,dCr,cCr,fM,sTe,fCr,mCr,FJ,gCr,hCr,pCr,mM,lTe,_Cr,uCr,TJ,bCr,vCr,FCr,gM,iTe,TCr,MCr,MJ,ECr,CCr,wCr,hM,zOe,bc,pM,dTe,V8,ACr,cTe,LCr,WOe,nr,X8,yCr,vc,xCr,EJ,$Cr,kCr,CJ,SCr,RCr,PCr,z8,BCr,fTe,ICr,NCr,qCr,Nt,W8,jCr,mTe,DCr,GCr,Fc,OCr,gTe,VCr,XCr,wJ,zCr,WCr,QCr,_M,HCr,Rr,Q8,UCr,hTe,JCr,YCr,mn,KCr,pTe,ZCr,e5r,_Te,o5r,r5r,uTe,t5r,a5r,n5r,te,uM,bTe,s5r,l5r,AJ,i5r,d5r,c5r,bM,vTe,f5r,m5r,LJ,g5r,h5r,p5r,vM,FTe,_5r,u5r,yJ,b5r,v5r,F5r,FM,TTe,T5r,M5r,xJ,E5r,C5r,w5r,TM,MTe,A5r,L5r,$J,y5r,x5r,$5r,MM,ETe,k5r,S5r,kJ,R5r,P5r,B5r,EM,CTe,I5r,N5r,SJ,q5r,j5r,D5r,CM,wTe,G5r,O5r,RJ,V5r,X5r,z5r,wM,ATe,W5r,Q5r,PJ,H5r,U5r,J5r,AM,LTe,Y5r,K5r,BJ,Z5r,e3r,o3r,LM,yTe,r3r,t3r,IJ,a3r,n3r,s3r,yM,xTe,l3r,i3r,NJ,d3r,c3r,f3r,xM,$Te,m3r,g3r,qJ,h3r,p3r,_3r,$M,kTe,u3r,b3r,jJ,v3r,F3r,T3r,kM,STe,M3r,E3r,DJ,C3r,w3r,A3r,SM,RTe,L3r,y3r,GJ,x3r,$3r,k3r,RM,PTe,S3r,R3r,OJ,P3r,B3r,I3r,PM,BTe,N3r,q3r,VJ,j3r,D3r,G3r,BM,ITe,O3r,V3r,XJ,X3r,z3r,W3r,IM,NTe,Q3r,H3r,zJ,U3r,J3r,Y3r,NM,qTe,K3r,Z3r,WJ,e0r,o0r,r0r,qM,jTe,t0r,a0r,QJ,n0r,s0r,l0r,jM,DTe,i0r,d0r,HJ,c0r,f0r,m0r,DM,GTe,g0r,h0r,UJ,p0r,_0r,u0r,GM,OTe,b0r,v0r,JJ,F0r,T0r,M0r,OM,VTe,E0r,C0r,YJ,w0r,A0r,L0r,VM,QOe,Tc,XM,XTe,H8,y0r,zTe,x0r,HOe,sr,U8,$0r,Mc,k0r,KJ,S0r,R0r,ZJ,P0r,B0r,I0r,J8,N0r,WTe,q0r,j0r,D0r,qt,Y8,G0r,QTe,O0r,V0r,Ec,X0r,HTe,z0r,W0r,eY,Q0r,H0r,U0r,zM,J0r,Pr,K8,Y0r,UTe,K0r,Z0r,gn,ewr,JTe,owr,rwr,YTe,twr,awr,KTe,nwr,swr,lwr,_e,WM,ZTe,iwr,dwr,oY,cwr,fwr,mwr,QM,e7e,gwr,hwr,rY,pwr,_wr,uwr,HM,o7e,bwr,vwr,tY,Fwr,Twr,Mwr,UM,r7e,Ewr,Cwr,aY,wwr,Awr,Lwr,JM,t7e,ywr,xwr,nY,$wr,kwr,Swr,YM,a7e,Rwr,Pwr,sY,Bwr,Iwr,Nwr,KM,n7e,qwr,jwr,lY,Dwr,Gwr,Owr,ZM,s7e,Vwr,Xwr,iY,zwr,Wwr,Qwr,eE,l7e,Hwr,Uwr,dY,Jwr,Ywr,Kwr,oE,i7e,Zwr,eAr,cY,oAr,rAr,tAr,rE,d7e,aAr,nAr,fY,sAr,lAr,iAr,tE,c7e,dAr,cAr,mY,fAr,mAr,gAr,aE,f7e,hAr,pAr,gY,_Ar,uAr,bAr,nE,m7e,vAr,FAr,hY,TAr,MAr,EAr,sE,g7e,CAr,wAr,pY,AAr,LAr,yAr,lE,h7e,xAr,$Ar,_Y,kAr,SAr,RAr,iE,p7e,PAr,BAr,uY,IAr,NAr,qAr,dE,UOe,Cc,cE,_7e,Z8,jAr,u7e,DAr,JOe,lr,ex,GAr,wc,OAr,bY,VAr,XAr,vY,zAr,WAr,QAr,ox,HAr,b7e,UAr,JAr,YAr,jt,rx,KAr,v7e,ZAr,eLr,Ac,oLr,F7e,rLr,tLr,FY,aLr,nLr,sLr,fE,lLr,Br,tx,iLr,T7e,dLr,cLr,hn,fLr,M7e,mLr,gLr,E7e,hLr,pLr,C7e,_Lr,uLr,bLr,ax,mE,w7e,vLr,FLr,TY,TLr,MLr,ELr,gE,A7e,CLr,wLr,MY,ALr,LLr,yLr,hE,YOe,Lc,pE,L7e,nx,xLr,y7e,$Lr,KOe,ir,sx,kLr,yc,SLr,EY,RLr,PLr,CY,BLr,ILr,NLr,lx,qLr,x7e,jLr,DLr,GLr,Dt,ix,OLr,$7e,VLr,XLr,xc,zLr,k7e,WLr,QLr,wY,HLr,ULr,JLr,_E,YLr,Ir,dx,KLr,S7e,ZLr,eyr,pn,oyr,R7e,ryr,tyr,P7e,ayr,nyr,B7e,syr,lyr,iyr,I7e,uE,N7e,dyr,cyr,AY,fyr,myr,gyr,bE,ZOe,$c,vE,q7e,cx,hyr,j7e,pyr,eVe,dr,fx,_yr,kc,uyr,LY,byr,vyr,yY,Fyr,Tyr,Myr,mx,Eyr,D7e,Cyr,wyr,Ayr,Gt,gx,Lyr,G7e,yyr,xyr,Sc,$yr,O7e,kyr,Syr,xY,Ryr,Pyr,Byr,FE,Iyr,Nr,hx,Nyr,V7e,qyr,jyr,_n,Dyr,X7e,Gyr,Oyr,z7e,Vyr,Xyr,W7e,zyr,Wyr,Qyr,de,TE,Q7e,Hyr,Uyr,$Y,Jyr,Yyr,Kyr,ME,H7e,Zyr,e8r,kY,o8r,r8r,t8r,EE,U7e,a8r,n8r,SY,s8r,l8r,i8r,CE,J7e,d8r,c8r,RY,f8r,m8r,g8r,wE,Y7e,h8r,p8r,PY,_8r,u8r,b8r,AE,K7e,v8r,F8r,BY,T8r,M8r,E8r,LE,Z7e,C8r,w8r,IY,A8r,L8r,y8r,yE,e9e,x8r,$8r,NY,k8r,S8r,R8r,xE,o9e,P8r,B8r,qY,I8r,N8r,q8r,$E,r9e,j8r,D8r,jY,G8r,O8r,V8r,kE,t9e,X8r,z8r,DY,W8r,Q8r,H8r,SE,a9e,U8r,J8r,GY,Y8r,K8r,Z8r,RE,n9e,exr,oxr,OY,rxr,txr,axr,PE,s9e,nxr,sxr,VY,lxr,ixr,dxr,BE,l9e,cxr,fxr,XY,mxr,gxr,hxr,IE,i9e,pxr,_xr,zY,uxr,bxr,vxr,NE,d9e,Fxr,Txr,WY,Mxr,Exr,Cxr,qE,c9e,wxr,Axr,QY,Lxr,yxr,xxr,jE,f9e,$xr,kxr,HY,Sxr,Rxr,Pxr,DE,m9e,Bxr,Ixr,UY,Nxr,qxr,jxr,GE,oVe,Rc,OE,g9e,px,Dxr,h9e,Gxr,rVe,cr,_x,Oxr,Pc,Vxr,JY,Xxr,zxr,YY,Wxr,Qxr,Hxr,ux,Uxr,p9e,Jxr,Yxr,Kxr,Ot,bx,Zxr,_9e,e$r,o$r,Bc,r$r,u9e,t$r,a$r,KY,n$r,s$r,l$r,VE,i$r,qr,vx,d$r,b9e,c$r,f$r,un,m$r,v9e,g$r,h$r,F9e,p$r,_$r,T9e,u$r,b$r,v$r,ce,XE,M9e,F$r,T$r,ZY,M$r,E$r,C$r,zE,E9e,w$r,A$r,eK,L$r,y$r,x$r,WE,C9e,$$r,k$r,oK,S$r,R$r,P$r,QE,w9e,B$r,I$r,rK,N$r,q$r,j$r,HE,A9e,D$r,G$r,tK,O$r,V$r,X$r,UE,L9e,z$r,W$r,aK,Q$r,H$r,U$r,JE,y9e,J$r,Y$r,nK,K$r,Z$r,ekr,YE,x9e,okr,rkr,sK,tkr,akr,nkr,KE,$9e,skr,lkr,lK,ikr,dkr,ckr,ZE,k9e,fkr,mkr,iK,gkr,hkr,pkr,eC,S9e,_kr,ukr,dK,bkr,vkr,Fkr,oC,R9e,Tkr,Mkr,cK,Ekr,Ckr,wkr,rC,P9e,Akr,Lkr,fK,ykr,xkr,$kr,tC,B9e,kkr,Skr,mK,Rkr,Pkr,Bkr,aC,I9e,Ikr,Nkr,gK,qkr,jkr,Dkr,nC,N9e,Gkr,Okr,hK,Vkr,Xkr,zkr,sC,q9e,Wkr,Qkr,pK,Hkr,Ukr,Jkr,lC,j9e,Ykr,Kkr,_K,Zkr,eSr,oSr,iC,D9e,rSr,tSr,uK,aSr,nSr,sSr,dC,G9e,lSr,iSr,bK,dSr,cSr,fSr,cC,tVe,Ic,fC,O9e,Fx,mSr,V9e,gSr,aVe,fr,Tx,hSr,Nc,pSr,vK,_Sr,uSr,FK,bSr,vSr,FSr,Mx,TSr,X9e,MSr,ESr,CSr,Vt,Ex,wSr,z9e,ASr,LSr,qc,ySr,W9e,xSr,$Sr,TK,kSr,SSr,RSr,mC,PSr,jr,Cx,BSr,Q9e,ISr,NSr,bn,qSr,H9e,jSr,DSr,U9e,GSr,OSr,J9e,VSr,XSr,zSr,Y9e,gC,K9e,WSr,QSr,MK,HSr,USr,JSr,hC,nVe,jc,pC,Z9e,wx,YSr,eMe,KSr,sVe,mr,Ax,ZSr,Dc,eRr,EK,oRr,rRr,CK,tRr,aRr,nRr,Lx,sRr,oMe,lRr,iRr,dRr,Xt,yx,cRr,rMe,fRr,mRr,Gc,gRr,tMe,hRr,pRr,wK,_Rr,uRr,bRr,_C,vRr,Dr,xx,FRr,aMe,TRr,MRr,vn,ERr,nMe,CRr,wRr,sMe,ARr,LRr,lMe,yRr,xRr,$Rr,iMe,uC,dMe,kRr,SRr,AK,RRr,PRr,BRr,bC,lVe,Oc,vC,cMe,$x,IRr,fMe,NRr,iVe,gr,kx,qRr,Vc,jRr,LK,DRr,GRr,yK,ORr,VRr,XRr,Sx,zRr,mMe,WRr,QRr,HRr,zt,Rx,URr,gMe,JRr,YRr,Xc,KRr,hMe,ZRr,ePr,xK,oPr,rPr,tPr,FC,aPr,Gr,Px,nPr,pMe,sPr,lPr,Fn,iPr,_Me,dPr,cPr,uMe,fPr,mPr,bMe,gPr,hPr,pPr,oe,TC,vMe,_Pr,uPr,$K,bPr,vPr,FPr,MC,FMe,TPr,MPr,kK,EPr,CPr,wPr,EC,TMe,APr,LPr,SK,yPr,xPr,$Pr,CC,MMe,kPr,SPr,RK,RPr,PPr,BPr,wC,EMe,IPr,NPr,PK,qPr,jPr,DPr,AC,CMe,GPr,OPr,BK,VPr,XPr,zPr,LC,wMe,WPr,QPr,IK,HPr,UPr,JPr,yC,AMe,YPr,KPr,NK,ZPr,eBr,oBr,xC,LMe,rBr,tBr,qK,aBr,nBr,sBr,$C,yMe,lBr,iBr,jK,dBr,cBr,fBr,kC,xMe,mBr,gBr,DK,hBr,pBr,_Br,SC,$Me,uBr,bBr,GK,vBr,FBr,TBr,RC,kMe,MBr,EBr,OK,CBr,wBr,ABr,PC,SMe,LBr,yBr,VK,xBr,$Br,kBr,BC,RMe,SBr,RBr,XK,PBr,BBr,IBr,IC,PMe,NBr,qBr,zK,jBr,DBr,GBr,NC,BMe,OBr,VBr,WK,XBr,zBr,WBr,qC,IMe,QBr,HBr,QK,UBr,JBr,YBr,jC,NMe,KBr,ZBr,HK,eIr,oIr,rIr,DC,qMe,tIr,aIr,UK,nIr,sIr,lIr,GC,jMe,iIr,dIr,JK,cIr,fIr,mIr,OC,DMe,gIr,hIr,YK,pIr,_Ir,uIr,VC,GMe,bIr,vIr,KK,FIr,TIr,MIr,XC,OMe,EIr,CIr,ZK,wIr,AIr,LIr,zC,VMe,yIr,xIr,eZ,$Ir,kIr,SIr,WC,XMe,RIr,PIr,oZ,BIr,IIr,NIr,QC,zMe,qIr,jIr,rZ,DIr,GIr,OIr,HC,dVe,zc,UC,WMe,Bx,VIr,QMe,XIr,cVe,hr,Ix,zIr,Wc,WIr,tZ,QIr,HIr,aZ,UIr,JIr,YIr,Nx,KIr,HMe,ZIr,eNr,oNr,Wt,qx,rNr,UMe,tNr,aNr,Qc,nNr,JMe,sNr,lNr,nZ,iNr,dNr,cNr,JC,fNr,Or,jx,mNr,YMe,gNr,hNr,Tn,pNr,KMe,_Nr,uNr,ZMe,bNr,vNr,eEe,FNr,TNr,MNr,xe,YC,oEe,ENr,CNr,sZ,wNr,ANr,LNr,KC,rEe,yNr,xNr,lZ,$Nr,kNr,SNr,ZC,tEe,RNr,PNr,iZ,BNr,INr,NNr,e5,aEe,qNr,jNr,dZ,DNr,GNr,ONr,o5,nEe,VNr,XNr,cZ,zNr,WNr,QNr,r5,sEe,HNr,UNr,fZ,JNr,YNr,KNr,t5,lEe,ZNr,eqr,mZ,oqr,rqr,tqr,a5,iEe,aqr,nqr,gZ,sqr,lqr,iqr,n5,dEe,dqr,cqr,hZ,fqr,mqr,gqr,s5,cEe,hqr,pqr,pZ,_qr,uqr,bqr,l5,fVe,Hc,i5,fEe,Dx,vqr,mEe,Fqr,mVe,pr,Gx,Tqr,Uc,Mqr,_Z,Eqr,Cqr,uZ,wqr,Aqr,Lqr,Ox,yqr,gEe,xqr,$qr,kqr,Qt,Vx,Sqr,hEe,Rqr,Pqr,Jc,Bqr,pEe,Iqr,Nqr,bZ,qqr,jqr,Dqr,d5,Gqr,Vr,Xx,Oqr,_Ee,Vqr,Xqr,Mn,zqr,uEe,Wqr,Qqr,bEe,Hqr,Uqr,vEe,Jqr,Yqr,Kqr,Ee,c5,FEe,Zqr,ejr,vZ,ojr,rjr,tjr,f5,TEe,ajr,njr,FZ,sjr,ljr,ijr,m5,MEe,djr,cjr,TZ,fjr,mjr,gjr,g5,EEe,hjr,pjr,MZ,_jr,ujr,bjr,h5,CEe,vjr,Fjr,EZ,Tjr,Mjr,Ejr,p5,wEe,Cjr,wjr,CZ,Ajr,Ljr,yjr,_5,AEe,xjr,$jr,wZ,kjr,Sjr,Rjr,u5,LEe,Pjr,Bjr,AZ,Ijr,Njr,qjr,b5,yEe,jjr,Djr,LZ,Gjr,Ojr,Vjr,v5,xEe,Xjr,zjr,yZ,Wjr,Qjr,Hjr,F5,$Ee,Ujr,Jjr,xZ,Yjr,Kjr,Zjr,T5,kEe,eDr,oDr,$Z,rDr,tDr,aDr,M5,SEe,nDr,sDr,kZ,lDr,iDr,dDr,E5,gVe,Yc,C5,REe,zx,cDr,PEe,fDr,hVe,_r,Wx,mDr,Kc,gDr,SZ,hDr,pDr,RZ,_Dr,uDr,bDr,Qx,vDr,BEe,FDr,TDr,MDr,Ht,Hx,EDr,IEe,CDr,wDr,Zc,ADr,NEe,LDr,yDr,PZ,xDr,$Dr,kDr,w5,SDr,Xr,Ux,RDr,qEe,PDr,BDr,En,IDr,jEe,NDr,qDr,DEe,jDr,DDr,GEe,GDr,ODr,VDr,$e,A5,OEe,XDr,zDr,BZ,WDr,QDr,HDr,L5,VEe,UDr,JDr,IZ,YDr,KDr,ZDr,y5,XEe,eGr,oGr,NZ,rGr,tGr,aGr,x5,zEe,nGr,sGr,qZ,lGr,iGr,dGr,$5,WEe,cGr,fGr,jZ,mGr,gGr,hGr,k5,QEe,pGr,_Gr,DZ,uGr,bGr,vGr,S5,HEe,FGr,TGr,GZ,MGr,EGr,CGr,R5,UEe,wGr,AGr,OZ,LGr,yGr,xGr,P5,JEe,$Gr,kGr,VZ,SGr,RGr,PGr,B5,YEe,BGr,IGr,XZ,NGr,qGr,jGr,I5,pVe,ef,N5,KEe,Jx,DGr,ZEe,GGr,_Ve,ur,Yx,OGr,of,VGr,zZ,XGr,zGr,WZ,WGr,QGr,HGr,Kx,UGr,eCe,JGr,YGr,KGr,Ut,Zx,ZGr,oCe,eOr,oOr,rf,rOr,rCe,tOr,aOr,QZ,nOr,sOr,lOr,q5,iOr,zr,e$,dOr,tCe,cOr,fOr,Cn,mOr,aCe,gOr,hOr,nCe,pOr,_Or,sCe,uOr,bOr,vOr,ke,j5,lCe,FOr,TOr,HZ,MOr,EOr,COr,D5,iCe,wOr,AOr,UZ,LOr,yOr,xOr,G5,dCe,$Or,kOr,JZ,SOr,ROr,POr,O5,cCe,BOr,IOr,YZ,NOr,qOr,jOr,V5,fCe,DOr,GOr,KZ,OOr,VOr,XOr,X5,mCe,zOr,WOr,ZZ,QOr,HOr,UOr,z5,gCe,JOr,YOr,eee,KOr,ZOr,eVr,W5,hCe,oVr,rVr,oee,tVr,aVr,nVr,Q5,pCe,sVr,lVr,ree,iVr,dVr,cVr,H5,_Ce,fVr,mVr,tee,gVr,hVr,pVr,U5,uVe,tf,J5,uCe,o$,_Vr,bCe,uVr,bVe,br,r$,bVr,af,vVr,aee,FVr,TVr,nee,MVr,EVr,CVr,t$,wVr,vCe,AVr,LVr,yVr,Jt,a$,xVr,FCe,$Vr,kVr,nf,SVr,TCe,RVr,PVr,see,BVr,IVr,NVr,Y5,qVr,Wr,n$,jVr,MCe,DVr,GVr,wn,OVr,ECe,VVr,XVr,CCe,zVr,WVr,wCe,QVr,HVr,UVr,Se,K5,ACe,JVr,YVr,lee,KVr,ZVr,eXr,Z5,LCe,oXr,rXr,iee,tXr,aXr,nXr,e3,yCe,sXr,lXr,dee,iXr,dXr,cXr,o3,xCe,fXr,mXr,cee,gXr,hXr,pXr,r3,$Ce,_Xr,uXr,fee,bXr,vXr,FXr,t3,kCe,TXr,MXr,mee,EXr,CXr,wXr,a3,SCe,AXr,LXr,gee,yXr,xXr,$Xr,n3,RCe,kXr,SXr,hee,RXr,PXr,BXr,s3,PCe,IXr,NXr,pee,qXr,jXr,DXr,l3,BCe,GXr,OXr,_ee,VXr,XXr,zXr,i3,vVe,sf,d3,ICe,s$,WXr,NCe,QXr,FVe,vr,l$,HXr,lf,UXr,uee,JXr,YXr,bee,KXr,ZXr,ezr,i$,ozr,qCe,rzr,tzr,azr,Yt,d$,nzr,jCe,szr,lzr,df,izr,DCe,dzr,czr,vee,fzr,mzr,gzr,c3,hzr,Qr,c$,pzr,GCe,_zr,uzr,An,bzr,OCe,vzr,Fzr,VCe,Tzr,Mzr,XCe,Ezr,Czr,wzr,Re,f3,zCe,Azr,Lzr,Fee,yzr,xzr,$zr,m3,WCe,kzr,Szr,Tee,Rzr,Pzr,Bzr,g3,QCe,Izr,Nzr,Mee,qzr,jzr,Dzr,h3,HCe,Gzr,Ozr,Eee,Vzr,Xzr,zzr,p3,UCe,Wzr,Qzr,Cee,Hzr,Uzr,Jzr,_3,JCe,Yzr,Kzr,wee,Zzr,eWr,oWr,u3,YCe,rWr,tWr,Aee,aWr,nWr,sWr,b3,KCe,lWr,iWr,Lee,dWr,cWr,fWr,v3,ZCe,mWr,gWr,yee,hWr,pWr,_Wr,F3,e5e,uWr,bWr,xee,vWr,FWr,TWr,T3,TVe,cf,M3,o5e,f$,MWr,r5e,EWr,MVe,Fr,m$,CWr,ff,wWr,$ee,AWr,LWr,kee,yWr,xWr,$Wr,g$,kWr,t5e,SWr,RWr,PWr,Kt,h$,BWr,a5e,IWr,NWr,mf,qWr,n5e,jWr,DWr,See,GWr,OWr,VWr,E3,XWr,Hr,p$,zWr,s5e,WWr,QWr,Ln,HWr,l5e,UWr,JWr,i5e,YWr,KWr,d5e,ZWr,eQr,oQr,Ve,C3,c5e,rQr,tQr,Ree,aQr,nQr,sQr,w3,f5e,lQr,iQr,Pee,dQr,cQr,fQr,A3,m5e,mQr,gQr,Bee,hQr,pQr,_Qr,L3,g5e,uQr,bQr,Iee,vQr,FQr,TQr,y3,h5e,MQr,EQr,Nee,CQr,wQr,AQr,x3,p5e,LQr,yQr,qee,xQr,$Qr,kQr,$3,_5e,SQr,RQr,jee,PQr,BQr,IQr,k3,u5e,NQr,qQr,Dee,jQr,DQr,GQr,S3,EVe,gf,R3,b5e,_$,OQr,v5e,VQr,CVe,Tr,u$,XQr,hf,zQr,Gee,WQr,QQr,Oee,HQr,UQr,JQr,b$,YQr,F5e,KQr,ZQr,eHr,Zt,v$,oHr,T5e,rHr,tHr,pf,aHr,M5e,nHr,sHr,Vee,lHr,iHr,dHr,P3,cHr,Ur,F$,fHr,E5e,mHr,gHr,yn,hHr,C5e,pHr,_Hr,w5e,uHr,bHr,A5e,vHr,FHr,THr,Xe,B3,L5e,MHr,EHr,Xee,CHr,wHr,AHr,I3,y5e,LHr,yHr,zee,xHr,$Hr,kHr,N3,x5e,SHr,RHr,Wee,PHr,BHr,IHr,q3,$5e,NHr,qHr,Qee,jHr,DHr,GHr,j3,k5e,OHr,VHr,Hee,XHr,zHr,WHr,D3,S5e,QHr,HHr,Uee,UHr,JHr,YHr,G3,R5e,KHr,ZHr,Jee,eUr,oUr,rUr,O3,P5e,tUr,aUr,Yee,nUr,sUr,lUr,V3,wVe,_f,X3,B5e,T$,iUr,I5e,dUr,AVe,Mr,M$,cUr,uf,fUr,Kee,mUr,gUr,Zee,hUr,pUr,_Ur,E$,uUr,N5e,bUr,vUr,FUr,ea,C$,TUr,q5e,MUr,EUr,bf,CUr,j5e,wUr,AUr,eoe,LUr,yUr,xUr,z3,$Ur,Jr,w$,kUr,D5e,SUr,RUr,xn,PUr,G5e,BUr,IUr,O5e,NUr,qUr,V5e,jUr,DUr,GUr,X5e,W3,z5e,OUr,VUr,ooe,XUr,zUr,WUr,Q3,LVe,vf,H3,W5e,A$,QUr,Q5e,HUr,yVe,Er,L$,UUr,Ff,JUr,roe,YUr,KUr,toe,ZUr,eJr,oJr,y$,rJr,H5e,tJr,aJr,nJr,oa,x$,sJr,U5e,lJr,iJr,Tf,dJr,J5e,cJr,fJr,aoe,mJr,gJr,hJr,U3,pJr,Yr,$$,_Jr,Y5e,uJr,bJr,$n,vJr,K5e,FJr,TJr,Z5e,MJr,EJr,e3e,CJr,wJr,AJr,k$,J3,o3e,LJr,yJr,noe,xJr,$Jr,kJr,Y3,r3e,SJr,RJr,soe,PJr,BJr,IJr,K3,xVe,Mf,Z3,t3e,S$,NJr,a3e,qJr,$Ve,Cr,R$,jJr,Ef,DJr,loe,GJr,OJr,ioe,VJr,XJr,zJr,P$,WJr,n3e,QJr,HJr,UJr,ra,B$,JJr,s3e,YJr,KJr,Cf,ZJr,l3e,eYr,oYr,doe,rYr,tYr,aYr,e0,nYr,Kr,I$,sYr,i3e,lYr,iYr,kn,dYr,d3e,cYr,fYr,c3e,mYr,gYr,f3e,hYr,pYr,_Yr,m3e,o0,g3e,uYr,bYr,coe,vYr,FYr,TYr,r0,kVe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),LA=new re({}),yA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rf=new MYr({props:{warning:!0,$$slots:{default:[Gjt]},$$scope:{ctx:x}}}),xA=new re({}),$A=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L597"}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L620"}}),Gg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:x}}}),PA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L743"}}),BA=new re({}),IA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L399"}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17469/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L413"}}),Eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Vjt]},$$scope:{ctx:x}}}),DA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L612"}}),GA=new re({}),OA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),np=new MYr({props:{$$slots:{default:[Xjt]},$$scope:{ctx:x}}}),sp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[zjt]},$$scope:{ctx:x}}}),WA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),QA=new re({}),HA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L88"}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L102"}}),Ap=new MYr({props:{$$slots:{default:[Wjt]},$$scope:{ctx:x}}}),Lp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Qjt]},$$scope:{ctx:x}}}),KA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L255"}}),ZA=new re({}),eL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L761"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),$p=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Hjt]},$$scope:{ctx:x}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),$u=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Ujt]},$$scope:{ctx:x}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L768"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Su=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Jjt]},$$scope:{ctx:x}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),E1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Yjt]},$$scope:{ctx:x}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L783"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),w1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Kjt]},$$scope:{ctx:x}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),f2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Zjt]},$$scope:{ctx:x}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L790"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),g2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[eDt]},$$scope:{ctx:x}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oDt]},$$scope:{ctx:x}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L797"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rDt]},$$scope:{ctx:x}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),bb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tDt]},$$scope:{ctx:x}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L806"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Fb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[aDt]},$$scope:{ctx:x}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nDt]},$$scope:{ctx:x}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L851"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[sDt]},$$scope:{ctx:x}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lDt]},$$scope:{ctx:x}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L858"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iDt]},$$scope:{ctx:x}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dDt]},$$scope:{ctx:x}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L844"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L815"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[mDt]},$$scope:{ctx:x}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L822"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[hDt]},$$scope:{ctx:x}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L867"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L906"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L833"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L913"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L936"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L920"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L927"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L945"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L952"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L899"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L874"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L881"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L890"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2Model">TFSwinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),i9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),c9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),C9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),y8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2ForImageClassification">TFSwinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),A9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),S9=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),P9=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[JDt]},$$scope:{ctx:x}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L488"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[eGt]},$$scope:{ctx:x}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[oGt]},$$scope:{ctx:x}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L524"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[rGt]},$$scope:{ctx:x}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[tGt]},$$scope:{ctx:x}}}),Z8=new re({}),ex=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[aGt]},$$scope:{ctx:x}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[nGt]},$$scope:{ctx:x}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[sGt]},$$scope:{ctx:x}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lGt]},$$scope:{ctx:x}}}),cx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L515"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[iGt]},$$scope:{ctx:x}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dGt]},$$scope:{ctx:x}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cGt]},$$scope:{ctx:x}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[fGt]},$$scope:{ctx:x}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[mGt]},$$scope:{ctx:x}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[gGt]},$$scope:{ctx:x}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[hGt]},$$scope:{ctx:x}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[pGt]},$$scope:{ctx:x}}}),$x=new re({}),kx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[_Gt]},$$scope:{ctx:x}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[uGt]},$$scope:{ctx:x}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[bGt]},$$scope:{ctx:x}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[vGt]},$$scope:{ctx:x}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[FGt]},$$scope:{ctx:x}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[TGt]},$$scope:{ctx:x}}}),zx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[MGt]},$$scope:{ctx:x}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EGt]},$$scope:{ctx:x}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CGt]},$$scope:{ctx:x}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wGt]},$$scope:{ctx:x}}}),o$=new re({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[AGt]},$$scope:{ctx:x}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LGt]},$$scope:{ctx:x}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yGt]},$$scope:{ctx:x}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xGt]},$$scope:{ctx:x}}}),f$=new re({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),_$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[SGt]},$$scope:{ctx:x}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),T$=new re({}),M$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),C$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[PGt]},$$scope:{ctx:x}}}),w$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),A$=new re({}),L$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),x$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),yf=l(),nt=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),EA=o("from_pretrained()"),xf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),wi=o("Instantiating one of "),Rn=a("a"),CA=o("AutoConfig"),Pn=o(", "),Bn=a("a"),wA=o("AutoModel"),Ai=o(`, and
`),In=a("a"),AA=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),$f=l(),F(xa.$$.fragment),Qe=l(),Ae=a("p"),Zk=o("will create a model that is an instance of "),yi=a("a"),eS=o("BertModel"),oS=o("."),Co=l(),$a=a("p"),rS=o("There is one class of "),kf=a("code"),tS=o("AutoModel"),Gze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),AGe=l(),xi=a("h2"),Sf=a("a"),ate=a("span"),F(LA.$$.fragment),Oze=l(),nte=a("span"),Vze=o("Extending the Auto Classes"),LGe=l(),Nn=a("p"),Xze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ste=a("code"),zze=o("NewModel"),Wze=o(", make sure you have a "),lte=a("code"),Qze=o("NewModelConfig"),Hze=o(` then you can add those to the auto
classes like this:`),yGe=l(),F(yA.$$.fragment),xGe=l(),aS=a("p"),Uze=o("You will then be able to use the auto classes like you would usually do!"),$Ge=l(),F(Rf.$$.fragment),kGe=l(),$i=a("h2"),Pf=a("a"),ite=a("span"),F(xA.$$.fragment),Jze=l(),dte=a("span"),Yze=o("AutoConfig"),SGe=l(),wo=a("div"),F($A.$$.fragment),Kze=l(),kA=a("p"),Zze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nS=a("a"),eWe=o("from_pretrained()"),oWe=o(" class method."),rWe=l(),SA=a("p"),tWe=o("This class cannot be instantiated directly using "),cte=a("code"),aWe=o("__init__()"),nWe=o(" (throws an error)."),sWe=l(),wr=a("div"),F(RA.$$.fragment),lWe=l(),fte=a("p"),iWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),dWe=l(),ki=a("p"),cWe=o("The configuration class to instantiate is selected based on the "),mte=a("code"),fWe=o("model_type"),mWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gte=a("code"),gWe=o("pretrained_model_name_or_path"),hWe=o(":"),pWe=l(),A=a("ul"),Bf=a("li"),hte=a("strong"),_We=o("albert"),uWe=o(" \u2014 "),sS=a("a"),bWe=o("AlbertConfig"),vWe=o(" (ALBERT model)"),FWe=l(),If=a("li"),pte=a("strong"),TWe=o("bart"),MWe=o(" \u2014 "),lS=a("a"),EWe=o("BartConfig"),CWe=o(" (BART model)"),wWe=l(),Nf=a("li"),_te=a("strong"),AWe=o("beit"),LWe=o(" \u2014 "),iS=a("a"),yWe=o("BeitConfig"),xWe=o(" (BEiT model)"),$We=l(),qf=a("li"),ute=a("strong"),kWe=o("bert"),SWe=o(" \u2014 "),dS=a("a"),RWe=o("BertConfig"),PWe=o(" (BERT model)"),BWe=l(),jf=a("li"),bte=a("strong"),IWe=o("bert-generation"),NWe=o(" \u2014 "),cS=a("a"),qWe=o("BertGenerationConfig"),jWe=o(" (Bert Generation model)"),DWe=l(),Df=a("li"),vte=a("strong"),GWe=o("big_bird"),OWe=o(" \u2014 "),fS=a("a"),VWe=o("BigBirdConfig"),XWe=o(" (BigBird model)"),zWe=l(),Gf=a("li"),Fte=a("strong"),WWe=o("bigbird_pegasus"),QWe=o(" \u2014 "),mS=a("a"),HWe=o("BigBirdPegasusConfig"),UWe=o(" (BigBird-Pegasus model)"),JWe=l(),Of=a("li"),Tte=a("strong"),YWe=o("blenderbot"),KWe=o(" \u2014 "),gS=a("a"),ZWe=o("BlenderbotConfig"),eQe=o(" (Blenderbot model)"),oQe=l(),Vf=a("li"),Mte=a("strong"),rQe=o("blenderbot-small"),tQe=o(" \u2014 "),hS=a("a"),aQe=o("BlenderbotSmallConfig"),nQe=o(" (BlenderbotSmall model)"),sQe=l(),Xf=a("li"),Ete=a("strong"),lQe=o("bloom"),iQe=o(" \u2014 "),pS=a("a"),dQe=o("BloomConfig"),cQe=o(" (BLOOM model)"),fQe=l(),zf=a("li"),Cte=a("strong"),mQe=o("camembert"),gQe=o(" \u2014 "),_S=a("a"),hQe=o("CamembertConfig"),pQe=o(" (CamemBERT model)"),_Qe=l(),Wf=a("li"),wte=a("strong"),uQe=o("canine"),bQe=o(" \u2014 "),uS=a("a"),vQe=o("CanineConfig"),FQe=o(" (CANINE model)"),TQe=l(),Qf=a("li"),Ate=a("strong"),MQe=o("clip"),EQe=o(" \u2014 "),bS=a("a"),CQe=o("CLIPConfig"),wQe=o(" (CLIP model)"),AQe=l(),Hf=a("li"),Lte=a("strong"),LQe=o("convbert"),yQe=o(" \u2014 "),vS=a("a"),xQe=o("ConvBertConfig"),$Qe=o(" (ConvBERT model)"),kQe=l(),Uf=a("li"),yte=a("strong"),SQe=o("convnext"),RQe=o(" \u2014 "),FS=a("a"),PQe=o("ConvNextConfig"),BQe=o(" (ConvNeXT model)"),IQe=l(),Jf=a("li"),xte=a("strong"),NQe=o("ctrl"),qQe=o(" \u2014 "),TS=a("a"),jQe=o("CTRLConfig"),DQe=o(" (CTRL model)"),GQe=l(),Yf=a("li"),$te=a("strong"),OQe=o("cvt"),VQe=o(" \u2014 "),MS=a("a"),XQe=o("CvtConfig"),zQe=o(" (CvT model)"),WQe=l(),Kf=a("li"),kte=a("strong"),QQe=o("data2vec-audio"),HQe=o(" \u2014 "),ES=a("a"),UQe=o("Data2VecAudioConfig"),JQe=o(" (Data2VecAudio model)"),YQe=l(),Zf=a("li"),Ste=a("strong"),KQe=o("data2vec-text"),ZQe=o(" \u2014 "),CS=a("a"),eHe=o("Data2VecTextConfig"),oHe=o(" (Data2VecText model)"),rHe=l(),em=a("li"),Rte=a("strong"),tHe=o("data2vec-vision"),aHe=o(" \u2014 "),wS=a("a"),nHe=o("Data2VecVisionConfig"),sHe=o(" (Data2VecVision model)"),lHe=l(),om=a("li"),Pte=a("strong"),iHe=o("deberta"),dHe=o(" \u2014 "),AS=a("a"),cHe=o("DebertaConfig"),fHe=o(" (DeBERTa model)"),mHe=l(),rm=a("li"),Bte=a("strong"),gHe=o("deberta-v2"),hHe=o(" \u2014 "),LS=a("a"),pHe=o("DebertaV2Config"),_He=o(" (DeBERTa-v2 model)"),uHe=l(),tm=a("li"),Ite=a("strong"),bHe=o("decision_transformer"),vHe=o(" \u2014 "),yS=a("a"),FHe=o("DecisionTransformerConfig"),THe=o(" (Decision Transformer model)"),MHe=l(),am=a("li"),Nte=a("strong"),EHe=o("deit"),CHe=o(" \u2014 "),xS=a("a"),wHe=o("DeiTConfig"),AHe=o(" (DeiT model)"),LHe=l(),nm=a("li"),qte=a("strong"),yHe=o("detr"),xHe=o(" \u2014 "),$S=a("a"),$He=o("DetrConfig"),kHe=o(" (DETR model)"),SHe=l(),sm=a("li"),jte=a("strong"),RHe=o("distilbert"),PHe=o(" \u2014 "),kS=a("a"),BHe=o("DistilBertConfig"),IHe=o(" (DistilBERT model)"),NHe=l(),lm=a("li"),Dte=a("strong"),qHe=o("dpr"),jHe=o(" \u2014 "),SS=a("a"),DHe=o("DPRConfig"),GHe=o(" (DPR model)"),OHe=l(),im=a("li"),Gte=a("strong"),VHe=o("dpt"),XHe=o(" \u2014 "),RS=a("a"),zHe=o("DPTConfig"),WHe=o(" (DPT model)"),QHe=l(),dm=a("li"),Ote=a("strong"),HHe=o("electra"),UHe=o(" \u2014 "),PS=a("a"),JHe=o("ElectraConfig"),YHe=o(" (ELECTRA model)"),KHe=l(),cm=a("li"),Vte=a("strong"),ZHe=o("encoder-decoder"),eUe=o(" \u2014 "),BS=a("a"),oUe=o("EncoderDecoderConfig"),rUe=o(" (Encoder decoder model)"),tUe=l(),fm=a("li"),Xte=a("strong"),aUe=o("flaubert"),nUe=o(" \u2014 "),IS=a("a"),sUe=o("FlaubertConfig"),lUe=o(" (FlauBERT model)"),iUe=l(),mm=a("li"),zte=a("strong"),dUe=o("flava"),cUe=o(" \u2014 "),NS=a("a"),fUe=o("FlavaConfig"),mUe=o(" (FLAVA model)"),gUe=l(),gm=a("li"),Wte=a("strong"),hUe=o("fnet"),pUe=o(" \u2014 "),qS=a("a"),_Ue=o("FNetConfig"),uUe=o(" (FNet model)"),bUe=l(),hm=a("li"),Qte=a("strong"),vUe=o("fsmt"),FUe=o(" \u2014 "),jS=a("a"),TUe=o("FSMTConfig"),MUe=o(" (FairSeq Machine-Translation model)"),EUe=l(),pm=a("li"),Hte=a("strong"),CUe=o("funnel"),wUe=o(" \u2014 "),DS=a("a"),AUe=o("FunnelConfig"),LUe=o(" (Funnel Transformer model)"),yUe=l(),_m=a("li"),Ute=a("strong"),xUe=o("glpn"),$Ue=o(" \u2014 "),GS=a("a"),kUe=o("GLPNConfig"),SUe=o(" (GLPN model)"),RUe=l(),um=a("li"),Jte=a("strong"),PUe=o("gpt2"),BUe=o(" \u2014 "),OS=a("a"),IUe=o("GPT2Config"),NUe=o(" (OpenAI GPT-2 model)"),qUe=l(),bm=a("li"),Yte=a("strong"),jUe=o("gpt_neo"),DUe=o(" \u2014 "),VS=a("a"),GUe=o("GPTNeoConfig"),OUe=o(" (GPT Neo model)"),VUe=l(),vm=a("li"),Kte=a("strong"),XUe=o("gpt_neox"),zUe=o(" \u2014 "),XS=a("a"),WUe=o("GPTNeoXConfig"),QUe=o(" (GPT NeoX model)"),HUe=l(),Fm=a("li"),Zte=a("strong"),UUe=o("gptj"),JUe=o(" \u2014 "),zS=a("a"),YUe=o("GPTJConfig"),KUe=o(" (GPT-J model)"),ZUe=l(),Tm=a("li"),eae=a("strong"),eJe=o("hubert"),oJe=o(" \u2014 "),WS=a("a"),rJe=o("HubertConfig"),tJe=o(" (Hubert model)"),aJe=l(),Mm=a("li"),oae=a("strong"),nJe=o("ibert"),sJe=o(" \u2014 "),QS=a("a"),lJe=o("IBertConfig"),iJe=o(" (I-BERT model)"),dJe=l(),Em=a("li"),rae=a("strong"),cJe=o("imagegpt"),fJe=o(" \u2014 "),HS=a("a"),mJe=o("ImageGPTConfig"),gJe=o(" (ImageGPT model)"),hJe=l(),Cm=a("li"),tae=a("strong"),pJe=o("layoutlm"),_Je=o(" \u2014 "),US=a("a"),uJe=o("LayoutLMConfig"),bJe=o(" (LayoutLM model)"),vJe=l(),wm=a("li"),aae=a("strong"),FJe=o("layoutlmv2"),TJe=o(" \u2014 "),JS=a("a"),MJe=o("LayoutLMv2Config"),EJe=o(" (LayoutLMv2 model)"),CJe=l(),Am=a("li"),nae=a("strong"),wJe=o("layoutlmv3"),AJe=o(" \u2014 "),YS=a("a"),LJe=o("LayoutLMv3Config"),yJe=o(" (LayoutLMv3 model)"),xJe=l(),Lm=a("li"),sae=a("strong"),$Je=o("led"),kJe=o(" \u2014 "),KS=a("a"),SJe=o("LEDConfig"),RJe=o(" (LED model)"),PJe=l(),ym=a("li"),lae=a("strong"),BJe=o("levit"),IJe=o(" \u2014 "),ZS=a("a"),NJe=o("LevitConfig"),qJe=o(" (LeViT model)"),jJe=l(),xm=a("li"),iae=a("strong"),DJe=o("longformer"),GJe=o(" \u2014 "),eR=a("a"),OJe=o("LongformerConfig"),VJe=o(" (Longformer model)"),XJe=l(),$m=a("li"),dae=a("strong"),zJe=o("longt5"),WJe=o(" \u2014 "),oR=a("a"),QJe=o("LongT5Config"),HJe=o(" (LongT5 model)"),UJe=l(),km=a("li"),cae=a("strong"),JJe=o("luke"),YJe=o(" \u2014 "),rR=a("a"),KJe=o("LukeConfig"),ZJe=o(" (LUKE model)"),eYe=l(),Sm=a("li"),fae=a("strong"),oYe=o("lxmert"),rYe=o(" \u2014 "),tR=a("a"),tYe=o("LxmertConfig"),aYe=o(" (LXMERT model)"),nYe=l(),Rm=a("li"),mae=a("strong"),sYe=o("m2m_100"),lYe=o(" \u2014 "),aR=a("a"),iYe=o("M2M100Config"),dYe=o(" (M2M100 model)"),cYe=l(),Pm=a("li"),gae=a("strong"),fYe=o("marian"),mYe=o(" \u2014 "),nR=a("a"),gYe=o("MarianConfig"),hYe=o(" (Marian model)"),pYe=l(),Bm=a("li"),hae=a("strong"),_Ye=o("maskformer"),uYe=o(" \u2014 "),sR=a("a"),bYe=o("MaskFormerConfig"),vYe=o(" (MaskFormer model)"),FYe=l(),Im=a("li"),pae=a("strong"),TYe=o("mbart"),MYe=o(" \u2014 "),lR=a("a"),EYe=o("MBartConfig"),CYe=o(" (mBART model)"),wYe=l(),Nm=a("li"),_ae=a("strong"),AYe=o("mctct"),LYe=o(" \u2014 "),iR=a("a"),yYe=o("MCTCTConfig"),xYe=o(" (M-CTC-T model)"),$Ye=l(),qm=a("li"),uae=a("strong"),kYe=o("megatron-bert"),SYe=o(" \u2014 "),dR=a("a"),RYe=o("MegatronBertConfig"),PYe=o(" (Megatron-BERT model)"),BYe=l(),jm=a("li"),bae=a("strong"),IYe=o("mobilebert"),NYe=o(" \u2014 "),cR=a("a"),qYe=o("MobileBertConfig"),jYe=o(" (MobileBERT model)"),DYe=l(),Dm=a("li"),vae=a("strong"),GYe=o("mpnet"),OYe=o(" \u2014 "),fR=a("a"),VYe=o("MPNetConfig"),XYe=o(" (MPNet model)"),zYe=l(),Gm=a("li"),Fae=a("strong"),WYe=o("mt5"),QYe=o(" \u2014 "),mR=a("a"),HYe=o("MT5Config"),UYe=o(" (MT5 model)"),JYe=l(),Om=a("li"),Tae=a("strong"),YYe=o("nystromformer"),KYe=o(" \u2014 "),gR=a("a"),ZYe=o("NystromformerConfig"),eKe=o(" (Nystr\xF6mformer model)"),oKe=l(),Vm=a("li"),Mae=a("strong"),rKe=o("openai-gpt"),tKe=o(" \u2014 "),hR=a("a"),aKe=o("OpenAIGPTConfig"),nKe=o(" (OpenAI GPT model)"),sKe=l(),Xm=a("li"),Eae=a("strong"),lKe=o("opt"),iKe=o(" \u2014 "),pR=a("a"),dKe=o("OPTConfig"),cKe=o(" (OPT model)"),fKe=l(),zm=a("li"),Cae=a("strong"),mKe=o("pegasus"),gKe=o(" \u2014 "),_R=a("a"),hKe=o("PegasusConfig"),pKe=o(" (Pegasus model)"),_Ke=l(),Wm=a("li"),wae=a("strong"),uKe=o("perceiver"),bKe=o(" \u2014 "),uR=a("a"),vKe=o("PerceiverConfig"),FKe=o(" (Perceiver model)"),TKe=l(),Qm=a("li"),Aae=a("strong"),MKe=o("plbart"),EKe=o(" \u2014 "),bR=a("a"),CKe=o("PLBartConfig"),wKe=o(" (PLBart model)"),AKe=l(),Hm=a("li"),Lae=a("strong"),LKe=o("poolformer"),yKe=o(" \u2014 "),vR=a("a"),xKe=o("PoolFormerConfig"),$Ke=o(" (PoolFormer model)"),kKe=l(),Um=a("li"),yae=a("strong"),SKe=o("prophetnet"),RKe=o(" \u2014 "),FR=a("a"),PKe=o("ProphetNetConfig"),BKe=o(" (ProphetNet model)"),IKe=l(),Jm=a("li"),xae=a("strong"),NKe=o("qdqbert"),qKe=o(" \u2014 "),TR=a("a"),jKe=o("QDQBertConfig"),DKe=o(" (QDQBert model)"),GKe=l(),Ym=a("li"),$ae=a("strong"),OKe=o("rag"),VKe=o(" \u2014 "),MR=a("a"),XKe=o("RagConfig"),zKe=o(" (RAG model)"),WKe=l(),Km=a("li"),kae=a("strong"),QKe=o("realm"),HKe=o(" \u2014 "),ER=a("a"),UKe=o("RealmConfig"),JKe=o(" (REALM model)"),YKe=l(),Zm=a("li"),Sae=a("strong"),KKe=o("reformer"),ZKe=o(" \u2014 "),CR=a("a"),eZe=o("ReformerConfig"),oZe=o(" (Reformer model)"),rZe=l(),eg=a("li"),Rae=a("strong"),tZe=o("regnet"),aZe=o(" \u2014 "),wR=a("a"),nZe=o("RegNetConfig"),sZe=o(" (RegNet model)"),lZe=l(),og=a("li"),Pae=a("strong"),iZe=o("rembert"),dZe=o(" \u2014 "),AR=a("a"),cZe=o("RemBertConfig"),fZe=o(" (RemBERT model)"),mZe=l(),rg=a("li"),Bae=a("strong"),gZe=o("resnet"),hZe=o(" \u2014 "),LR=a("a"),pZe=o("ResNetConfig"),_Ze=o(" (ResNet model)"),uZe=l(),tg=a("li"),Iae=a("strong"),bZe=o("retribert"),vZe=o(" \u2014 "),yR=a("a"),FZe=o("RetriBertConfig"),TZe=o(" (RetriBERT model)"),MZe=l(),ag=a("li"),Nae=a("strong"),EZe=o("roberta"),CZe=o(" \u2014 "),xR=a("a"),wZe=o("RobertaConfig"),AZe=o(" (RoBERTa model)"),LZe=l(),ng=a("li"),qae=a("strong"),yZe=o("roformer"),xZe=o(" \u2014 "),$R=a("a"),$Ze=o("RoFormerConfig"),kZe=o(" (RoFormer model)"),SZe=l(),sg=a("li"),jae=a("strong"),RZe=o("segformer"),PZe=o(" \u2014 "),kR=a("a"),BZe=o("SegformerConfig"),IZe=o(" (SegFormer model)"),NZe=l(),lg=a("li"),Dae=a("strong"),qZe=o("sew"),jZe=o(" \u2014 "),SR=a("a"),DZe=o("SEWConfig"),GZe=o(" (SEW model)"),OZe=l(),ig=a("li"),Gae=a("strong"),VZe=o("sew-d"),XZe=o(" \u2014 "),RR=a("a"),zZe=o("SEWDConfig"),WZe=o(" (SEW-D model)"),QZe=l(),dg=a("li"),Oae=a("strong"),HZe=o("speech-encoder-decoder"),UZe=o(" \u2014 "),PR=a("a"),JZe=o("SpeechEncoderDecoderConfig"),YZe=o(" (Speech Encoder decoder model)"),KZe=l(),cg=a("li"),Vae=a("strong"),ZZe=o("speech_to_text"),eeo=o(" \u2014 "),BR=a("a"),oeo=o("Speech2TextConfig"),reo=o(" (Speech2Text model)"),teo=l(),fg=a("li"),Xae=a("strong"),aeo=o("speech_to_text_2"),neo=o(" \u2014 "),IR=a("a"),seo=o("Speech2Text2Config"),leo=o(" (Speech2Text2 model)"),ieo=l(),mg=a("li"),zae=a("strong"),deo=o("splinter"),ceo=o(" \u2014 "),NR=a("a"),feo=o("SplinterConfig"),meo=o(" (Splinter model)"),geo=l(),gg=a("li"),Wae=a("strong"),heo=o("squeezebert"),peo=o(" \u2014 "),qR=a("a"),_eo=o("SqueezeBertConfig"),ueo=o(" (SqueezeBERT model)"),beo=l(),hg=a("li"),Qae=a("strong"),veo=o("swin"),Feo=o(" \u2014 "),jR=a("a"),Teo=o("SwinConfig"),Meo=o(" (Swin Transformer model)"),Eeo=l(),pg=a("li"),Hae=a("strong"),Ceo=o("swinv2"),weo=o(" \u2014 "),DR=a("a"),Aeo=o("Swinv2Config"),Leo=o(" (Swin Transformer V2 model)"),yeo=l(),_g=a("li"),Uae=a("strong"),xeo=o("t5"),$eo=o(" \u2014 "),GR=a("a"),keo=o("T5Config"),Seo=o(" (T5 model)"),Reo=l(),ug=a("li"),Jae=a("strong"),Peo=o("tapas"),Beo=o(" \u2014 "),OR=a("a"),Ieo=o("TapasConfig"),Neo=o(" (TAPAS model)"),qeo=l(),bg=a("li"),Yae=a("strong"),jeo=o("trajectory_transformer"),Deo=o(" \u2014 "),VR=a("a"),Geo=o("TrajectoryTransformerConfig"),Oeo=o(" (Trajectory Transformer model)"),Veo=l(),vg=a("li"),Kae=a("strong"),Xeo=o("transfo-xl"),zeo=o(" \u2014 "),XR=a("a"),Weo=o("TransfoXLConfig"),Qeo=o(" (Transformer-XL model)"),Heo=l(),Fg=a("li"),Zae=a("strong"),Ueo=o("trocr"),Jeo=o(" \u2014 "),zR=a("a"),Yeo=o("TrOCRConfig"),Keo=o(" (TrOCR model)"),Zeo=l(),Tg=a("li"),ene=a("strong"),eoo=o("unispeech"),ooo=o(" \u2014 "),WR=a("a"),roo=o("UniSpeechConfig"),too=o(" (UniSpeech model)"),aoo=l(),Mg=a("li"),one=a("strong"),noo=o("unispeech-sat"),soo=o(" \u2014 "),QR=a("a"),loo=o("UniSpeechSatConfig"),ioo=o(" (UniSpeechSat model)"),doo=l(),Eg=a("li"),rne=a("strong"),coo=o("van"),foo=o(" \u2014 "),HR=a("a"),moo=o("VanConfig"),goo=o(" (VAN model)"),hoo=l(),Cg=a("li"),tne=a("strong"),poo=o("vilt"),_oo=o(" \u2014 "),UR=a("a"),uoo=o("ViltConfig"),boo=o(" (ViLT model)"),voo=l(),wg=a("li"),ane=a("strong"),Foo=o("vision-encoder-decoder"),Too=o(" \u2014 "),JR=a("a"),Moo=o("VisionEncoderDecoderConfig"),Eoo=o(" (Vision Encoder decoder model)"),Coo=l(),Ag=a("li"),nne=a("strong"),woo=o("vision-text-dual-encoder"),Aoo=o(" \u2014 "),YR=a("a"),Loo=o("VisionTextDualEncoderConfig"),yoo=o(" (VisionTextDualEncoder model)"),xoo=l(),Lg=a("li"),sne=a("strong"),$oo=o("visual_bert"),koo=o(" \u2014 "),KR=a("a"),Soo=o("VisualBertConfig"),Roo=o(" (VisualBERT model)"),Poo=l(),yg=a("li"),lne=a("strong"),Boo=o("vit"),Ioo=o(" \u2014 "),ZR=a("a"),Noo=o("ViTConfig"),qoo=o(" (ViT model)"),joo=l(),xg=a("li"),ine=a("strong"),Doo=o("vit_mae"),Goo=o(" \u2014 "),eP=a("a"),Ooo=o("ViTMAEConfig"),Voo=o(" (ViTMAE model)"),Xoo=l(),$g=a("li"),dne=a("strong"),zoo=o("wav2vec2"),Woo=o(" \u2014 "),oP=a("a"),Qoo=o("Wav2Vec2Config"),Hoo=o(" (Wav2Vec2 model)"),Uoo=l(),kg=a("li"),cne=a("strong"),Joo=o("wav2vec2-conformer"),Yoo=o(" \u2014 "),rP=a("a"),Koo=o("Wav2Vec2ConformerConfig"),Zoo=o(" (Wav2Vec2-Conformer model)"),ero=l(),Sg=a("li"),fne=a("strong"),oro=o("wavlm"),rro=o(" \u2014 "),tP=a("a"),tro=o("WavLMConfig"),aro=o(" (WavLM model)"),nro=l(),Rg=a("li"),mne=a("strong"),sro=o("xglm"),lro=o(" \u2014 "),aP=a("a"),iro=o("XGLMConfig"),dro=o(" (XGLM model)"),cro=l(),Pg=a("li"),gne=a("strong"),fro=o("xlm"),mro=o(" \u2014 "),nP=a("a"),gro=o("XLMConfig"),hro=o(" (XLM model)"),pro=l(),Bg=a("li"),hne=a("strong"),_ro=o("xlm-prophetnet"),uro=o(" \u2014 "),sP=a("a"),bro=o("XLMProphetNetConfig"),vro=o(" (XLM-ProphetNet model)"),Fro=l(),Ig=a("li"),pne=a("strong"),Tro=o("xlm-roberta"),Mro=o(" \u2014 "),lP=a("a"),Ero=o("XLMRobertaConfig"),Cro=o(" (XLM-RoBERTa model)"),wro=l(),Ng=a("li"),_ne=a("strong"),Aro=o("xlm-roberta-xl"),Lro=o(" \u2014 "),iP=a("a"),yro=o("XLMRobertaXLConfig"),xro=o(" (XLM-RoBERTa-XL model)"),$ro=l(),qg=a("li"),une=a("strong"),kro=o("xlnet"),Sro=o(" \u2014 "),dP=a("a"),Rro=o("XLNetConfig"),Pro=o(" (XLNet model)"),Bro=l(),jg=a("li"),bne=a("strong"),Iro=o("yolos"),Nro=o(" \u2014 "),cP=a("a"),qro=o("YolosConfig"),jro=o(" (YOLOS model)"),Dro=l(),Dg=a("li"),vne=a("strong"),Gro=o("yoso"),Oro=o(" \u2014 "),fP=a("a"),Vro=o("YosoConfig"),Xro=o(" (YOSO model)"),zro=l(),F(Gg.$$.fragment),Wro=l(),Og=a("div"),F(PA.$$.fragment),Qro=l(),Fne=a("p"),Hro=o("Register a new configuration for this class."),RGe=l(),Si=a("h2"),Vg=a("a"),Tne=a("span"),F(BA.$$.fragment),Uro=l(),Mne=a("span"),Jro=o("AutoTokenizer"),PGe=l(),Ao=a("div"),F(IA.$$.fragment),Yro=l(),NA=a("p"),Kro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mP=a("a"),Zro=o("AutoTokenizer.from_pretrained()"),eto=o(" class method."),oto=l(),qA=a("p"),rto=o("This class cannot be instantiated directly using "),Ene=a("code"),tto=o("__init__()"),ato=o(" (throws an error)."),nto=l(),Ar=a("div"),F(jA.$$.fragment),sto=l(),Cne=a("p"),lto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ito=l(),ka=a("p"),dto=o("The tokenizer class to instantiate is selected based on the "),wne=a("code"),cto=o("model_type"),fto=o(` property of the config object (either
passed as an argument or loaded from `),Ane=a("code"),mto=o("pretrained_model_name_or_path"),gto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=a("code"),hto=o("pretrained_model_name_or_path"),pto=o(":"),_to=l(),k=a("ul"),qn=a("li"),yne=a("strong"),uto=o("albert"),bto=o(" \u2014 "),gP=a("a"),vto=o("AlbertTokenizer"),Fto=o(" or "),hP=a("a"),Tto=o("AlbertTokenizerFast"),Mto=o(" (ALBERT model)"),Eto=l(),jn=a("li"),xne=a("strong"),Cto=o("bart"),wto=o(" \u2014 "),pP=a("a"),Ato=o("BartTokenizer"),Lto=o(" or "),_P=a("a"),yto=o("BartTokenizerFast"),xto=o(" (BART model)"),$to=l(),Dn=a("li"),$ne=a("strong"),kto=o("barthez"),Sto=o(" \u2014 "),uP=a("a"),Rto=o("BarthezTokenizer"),Pto=o(" or "),bP=a("a"),Bto=o("BarthezTokenizerFast"),Ito=o(" (BARThez model)"),Nto=l(),Xg=a("li"),kne=a("strong"),qto=o("bartpho"),jto=o(" \u2014 "),vP=a("a"),Dto=o("BartphoTokenizer"),Gto=o(" (BARTpho model)"),Oto=l(),Gn=a("li"),Sne=a("strong"),Vto=o("bert"),Xto=o(" \u2014 "),FP=a("a"),zto=o("BertTokenizer"),Wto=o(" or "),TP=a("a"),Qto=o("BertTokenizerFast"),Hto=o(" (BERT model)"),Uto=l(),zg=a("li"),Rne=a("strong"),Jto=o("bert-generation"),Yto=o(" \u2014 "),MP=a("a"),Kto=o("BertGenerationTokenizer"),Zto=o(" (Bert Generation model)"),eao=l(),Wg=a("li"),Pne=a("strong"),oao=o("bert-japanese"),rao=o(" \u2014 "),EP=a("a"),tao=o("BertJapaneseTokenizer"),aao=o(" (BertJapanese model)"),nao=l(),Qg=a("li"),Bne=a("strong"),sao=o("bertweet"),lao=o(" \u2014 "),CP=a("a"),iao=o("BertweetTokenizer"),dao=o(" (BERTweet model)"),cao=l(),On=a("li"),Ine=a("strong"),fao=o("big_bird"),mao=o(" \u2014 "),wP=a("a"),gao=o("BigBirdTokenizer"),hao=o(" or "),AP=a("a"),pao=o("BigBirdTokenizerFast"),_ao=o(" (BigBird model)"),uao=l(),Vn=a("li"),Nne=a("strong"),bao=o("bigbird_pegasus"),vao=o(" \u2014 "),LP=a("a"),Fao=o("PegasusTokenizer"),Tao=o(" or "),yP=a("a"),Mao=o("PegasusTokenizerFast"),Eao=o(" (BigBird-Pegasus model)"),Cao=l(),Xn=a("li"),qne=a("strong"),wao=o("blenderbot"),Aao=o(" \u2014 "),xP=a("a"),Lao=o("BlenderbotTokenizer"),yao=o(" or "),$P=a("a"),xao=o("BlenderbotTokenizerFast"),$ao=o(" (Blenderbot model)"),kao=l(),Hg=a("li"),jne=a("strong"),Sao=o("blenderbot-small"),Rao=o(" \u2014 "),kP=a("a"),Pao=o("BlenderbotSmallTokenizer"),Bao=o(" (BlenderbotSmall model)"),Iao=l(),Ug=a("li"),Dne=a("strong"),Nao=o("bloom"),qao=o(" \u2014 "),SP=a("a"),jao=o("BloomTokenizerFast"),Dao=o(" (BLOOM model)"),Gao=l(),Jg=a("li"),Gne=a("strong"),Oao=o("byt5"),Vao=o(" \u2014 "),RP=a("a"),Xao=o("ByT5Tokenizer"),zao=o(" (ByT5 model)"),Wao=l(),zn=a("li"),One=a("strong"),Qao=o("camembert"),Hao=o(" \u2014 "),PP=a("a"),Uao=o("CamembertTokenizer"),Jao=o(" or "),BP=a("a"),Yao=o("CamembertTokenizerFast"),Kao=o(" (CamemBERT model)"),Zao=l(),Yg=a("li"),Vne=a("strong"),eno=o("canine"),ono=o(" \u2014 "),IP=a("a"),rno=o("CanineTokenizer"),tno=o(" (CANINE model)"),ano=l(),Wn=a("li"),Xne=a("strong"),nno=o("clip"),sno=o(" \u2014 "),NP=a("a"),lno=o("CLIPTokenizer"),ino=o(" or "),qP=a("a"),dno=o("CLIPTokenizerFast"),cno=o(" (CLIP model)"),fno=l(),Qn=a("li"),zne=a("strong"),mno=o("convbert"),gno=o(" \u2014 "),jP=a("a"),hno=o("ConvBertTokenizer"),pno=o(" or "),DP=a("a"),_no=o("ConvBertTokenizerFast"),uno=o(" (ConvBERT model)"),bno=l(),Hn=a("li"),Wne=a("strong"),vno=o("cpm"),Fno=o(" \u2014 "),GP=a("a"),Tno=o("CpmTokenizer"),Mno=o(" or "),OP=a("a"),Eno=o("CpmTokenizerFast"),Cno=o(" (CPM model)"),wno=l(),Kg=a("li"),Qne=a("strong"),Ano=o("ctrl"),Lno=o(" \u2014 "),VP=a("a"),yno=o("CTRLTokenizer"),xno=o(" (CTRL model)"),$no=l(),Un=a("li"),Hne=a("strong"),kno=o("data2vec-text"),Sno=o(" \u2014 "),XP=a("a"),Rno=o("RobertaTokenizer"),Pno=o(" or "),zP=a("a"),Bno=o("RobertaTokenizerFast"),Ino=o(" (Data2VecText model)"),Nno=l(),Jn=a("li"),Une=a("strong"),qno=o("deberta"),jno=o(" \u2014 "),WP=a("a"),Dno=o("DebertaTokenizer"),Gno=o(" or "),QP=a("a"),Ono=o("DebertaTokenizerFast"),Vno=o(" (DeBERTa model)"),Xno=l(),Yn=a("li"),Jne=a("strong"),zno=o("deberta-v2"),Wno=o(" \u2014 "),HP=a("a"),Qno=o("DebertaV2Tokenizer"),Hno=o(" or "),UP=a("a"),Uno=o("DebertaV2TokenizerFast"),Jno=o(" (DeBERTa-v2 model)"),Yno=l(),Kn=a("li"),Yne=a("strong"),Kno=o("distilbert"),Zno=o(" \u2014 "),JP=a("a"),eso=o("DistilBertTokenizer"),oso=o(" or "),YP=a("a"),rso=o("DistilBertTokenizerFast"),tso=o(" (DistilBERT model)"),aso=l(),Zn=a("li"),Kne=a("strong"),nso=o("dpr"),sso=o(" \u2014 "),KP=a("a"),lso=o("DPRQuestionEncoderTokenizer"),iso=o(" or "),ZP=a("a"),dso=o("DPRQuestionEncoderTokenizerFast"),cso=o(" (DPR model)"),fso=l(),es=a("li"),Zne=a("strong"),mso=o("electra"),gso=o(" \u2014 "),eB=a("a"),hso=o("ElectraTokenizer"),pso=o(" or "),oB=a("a"),_so=o("ElectraTokenizerFast"),uso=o(" (ELECTRA model)"),bso=l(),Zg=a("li"),ese=a("strong"),vso=o("flaubert"),Fso=o(" \u2014 "),rB=a("a"),Tso=o("FlaubertTokenizer"),Mso=o(" (FlauBERT model)"),Eso=l(),os=a("li"),ose=a("strong"),Cso=o("fnet"),wso=o(" \u2014 "),tB=a("a"),Aso=o("FNetTokenizer"),Lso=o(" or "),aB=a("a"),yso=o("FNetTokenizerFast"),xso=o(" (FNet model)"),$so=l(),eh=a("li"),rse=a("strong"),kso=o("fsmt"),Sso=o(" \u2014 "),nB=a("a"),Rso=o("FSMTTokenizer"),Pso=o(" (FairSeq Machine-Translation model)"),Bso=l(),rs=a("li"),tse=a("strong"),Iso=o("funnel"),Nso=o(" \u2014 "),sB=a("a"),qso=o("FunnelTokenizer"),jso=o(" or "),lB=a("a"),Dso=o("FunnelTokenizerFast"),Gso=o(" (Funnel Transformer model)"),Oso=l(),ts=a("li"),ase=a("strong"),Vso=o("gpt2"),Xso=o(" \u2014 "),iB=a("a"),zso=o("GPT2Tokenizer"),Wso=o(" or "),dB=a("a"),Qso=o("GPT2TokenizerFast"),Hso=o(" (OpenAI GPT-2 model)"),Uso=l(),as=a("li"),nse=a("strong"),Jso=o("gpt_neo"),Yso=o(" \u2014 "),cB=a("a"),Kso=o("GPT2Tokenizer"),Zso=o(" or "),fB=a("a"),elo=o("GPT2TokenizerFast"),olo=o(" (GPT Neo model)"),rlo=l(),oh=a("li"),sse=a("strong"),tlo=o("gpt_neox"),alo=o(" \u2014 "),mB=a("a"),nlo=o("GPTNeoXTokenizerFast"),slo=o(" (GPT NeoX model)"),llo=l(),ns=a("li"),lse=a("strong"),ilo=o("gptj"),dlo=o(" \u2014 "),gB=a("a"),clo=o("GPT2Tokenizer"),flo=o(" or "),hB=a("a"),mlo=o("GPT2TokenizerFast"),glo=o(" (GPT-J model)"),hlo=l(),ss=a("li"),ise=a("strong"),plo=o("herbert"),_lo=o(" \u2014 "),pB=a("a"),ulo=o("HerbertTokenizer"),blo=o(" or "),_B=a("a"),vlo=o("HerbertTokenizerFast"),Flo=o(" (HerBERT model)"),Tlo=l(),rh=a("li"),dse=a("strong"),Mlo=o("hubert"),Elo=o(" \u2014 "),uB=a("a"),Clo=o("Wav2Vec2CTCTokenizer"),wlo=o(" (Hubert model)"),Alo=l(),ls=a("li"),cse=a("strong"),Llo=o("ibert"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("RobertaTokenizer"),$lo=o(" or "),vB=a("a"),klo=o("RobertaTokenizerFast"),Slo=o(" (I-BERT model)"),Rlo=l(),is=a("li"),fse=a("strong"),Plo=o("layoutlm"),Blo=o(" \u2014 "),FB=a("a"),Ilo=o("LayoutLMTokenizer"),Nlo=o(" or "),TB=a("a"),qlo=o("LayoutLMTokenizerFast"),jlo=o(" (LayoutLM model)"),Dlo=l(),ds=a("li"),mse=a("strong"),Glo=o("layoutlmv2"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("LayoutLMv2Tokenizer"),Xlo=o(" or "),EB=a("a"),zlo=o("LayoutLMv2TokenizerFast"),Wlo=o(" (LayoutLMv2 model)"),Qlo=l(),cs=a("li"),gse=a("strong"),Hlo=o("layoutlmv3"),Ulo=o(" \u2014 "),CB=a("a"),Jlo=o("LayoutLMv3Tokenizer"),Ylo=o(" or "),wB=a("a"),Klo=o("LayoutLMv3TokenizerFast"),Zlo=o(" (LayoutLMv3 model)"),eio=l(),fs=a("li"),hse=a("strong"),oio=o("layoutxlm"),rio=o(" \u2014 "),AB=a("a"),tio=o("LayoutXLMTokenizer"),aio=o(" or "),LB=a("a"),nio=o("LayoutXLMTokenizerFast"),sio=o(" (LayoutXLM model)"),lio=l(),ms=a("li"),pse=a("strong"),iio=o("led"),dio=o(" \u2014 "),yB=a("a"),cio=o("LEDTokenizer"),fio=o(" or "),xB=a("a"),mio=o("LEDTokenizerFast"),gio=o(" (LED model)"),hio=l(),gs=a("li"),_se=a("strong"),pio=o("longformer"),_io=o(" \u2014 "),$B=a("a"),uio=o("LongformerTokenizer"),bio=o(" or "),kB=a("a"),vio=o("LongformerTokenizerFast"),Fio=o(" (Longformer model)"),Tio=l(),hs=a("li"),use=a("strong"),Mio=o("longt5"),Eio=o(" \u2014 "),SB=a("a"),Cio=o("T5Tokenizer"),wio=o(" or "),RB=a("a"),Aio=o("T5TokenizerFast"),Lio=o(" (LongT5 model)"),yio=l(),th=a("li"),bse=a("strong"),xio=o("luke"),$io=o(" \u2014 "),PB=a("a"),kio=o("LukeTokenizer"),Sio=o(" (LUKE model)"),Rio=l(),ps=a("li"),vse=a("strong"),Pio=o("lxmert"),Bio=o(" \u2014 "),BB=a("a"),Iio=o("LxmertTokenizer"),Nio=o(" or "),IB=a("a"),qio=o("LxmertTokenizerFast"),jio=o(" (LXMERT model)"),Dio=l(),ah=a("li"),Fse=a("strong"),Gio=o("m2m_100"),Oio=o(" \u2014 "),NB=a("a"),Vio=o("M2M100Tokenizer"),Xio=o(" (M2M100 model)"),zio=l(),nh=a("li"),Tse=a("strong"),Wio=o("marian"),Qio=o(" \u2014 "),qB=a("a"),Hio=o("MarianTokenizer"),Uio=o(" (Marian model)"),Jio=l(),_s=a("li"),Mse=a("strong"),Yio=o("mbart"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("MBartTokenizer"),edo=o(" or "),DB=a("a"),odo=o("MBartTokenizerFast"),rdo=o(" (mBART model)"),tdo=l(),us=a("li"),Ese=a("strong"),ado=o("mbart50"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("MBart50Tokenizer"),ldo=o(" or "),OB=a("a"),ido=o("MBart50TokenizerFast"),ddo=o(" (mBART-50 model)"),cdo=l(),bs=a("li"),Cse=a("strong"),fdo=o("megatron-bert"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("BertTokenizer"),hdo=o(" or "),XB=a("a"),pdo=o("BertTokenizerFast"),_do=o(" (Megatron-BERT model)"),udo=l(),sh=a("li"),wse=a("strong"),bdo=o("mluke"),vdo=o(" \u2014 "),zB=a("a"),Fdo=o("MLukeTokenizer"),Tdo=o(" (mLUKE model)"),Mdo=l(),vs=a("li"),Ase=a("strong"),Edo=o("mobilebert"),Cdo=o(" \u2014 "),WB=a("a"),wdo=o("MobileBertTokenizer"),Ado=o(" or "),QB=a("a"),Ldo=o("MobileBertTokenizerFast"),ydo=o(" (MobileBERT model)"),xdo=l(),Fs=a("li"),Lse=a("strong"),$do=o("mpnet"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("MPNetTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("MPNetTokenizerFast"),Bdo=o(" (MPNet model)"),Ido=l(),Ts=a("li"),yse=a("strong"),Ndo=o("mt5"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("MT5Tokenizer"),Ddo=o(" or "),YB=a("a"),Gdo=o("MT5TokenizerFast"),Odo=o(" (MT5 model)"),Vdo=l(),Ms=a("li"),xse=a("strong"),Xdo=o("nystromformer"),zdo=o(" \u2014 "),KB=a("a"),Wdo=o("AlbertTokenizer"),Qdo=o(" or "),ZB=a("a"),Hdo=o("AlbertTokenizerFast"),Udo=o(" (Nystr\xF6mformer model)"),Jdo=l(),Es=a("li"),$se=a("strong"),Ydo=o("openai-gpt"),Kdo=o(" \u2014 "),eI=a("a"),Zdo=o("OpenAIGPTTokenizer"),eco=o(" or "),oI=a("a"),oco=o("OpenAIGPTTokenizerFast"),rco=o(" (OpenAI GPT model)"),tco=l(),lh=a("li"),kse=a("strong"),aco=o("opt"),nco=o(" \u2014 "),rI=a("a"),sco=o("GPT2Tokenizer"),lco=o(" (OPT model)"),ico=l(),Cs=a("li"),Sse=a("strong"),dco=o("pegasus"),cco=o(" \u2014 "),tI=a("a"),fco=o("PegasusTokenizer"),mco=o(" or "),aI=a("a"),gco=o("PegasusTokenizerFast"),hco=o(" (Pegasus model)"),pco=l(),ih=a("li"),Rse=a("strong"),_co=o("perceiver"),uco=o(" \u2014 "),nI=a("a"),bco=o("PerceiverTokenizer"),vco=o(" (Perceiver model)"),Fco=l(),dh=a("li"),Pse=a("strong"),Tco=o("phobert"),Mco=o(" \u2014 "),sI=a("a"),Eco=o("PhobertTokenizer"),Cco=o(" (PhoBERT model)"),wco=l(),ch=a("li"),Bse=a("strong"),Aco=o("plbart"),Lco=o(" \u2014 "),lI=a("a"),yco=o("PLBartTokenizer"),xco=o(" (PLBart model)"),$co=l(),fh=a("li"),Ise=a("strong"),kco=o("prophetnet"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("ProphetNetTokenizer"),Pco=o(" (ProphetNet model)"),Bco=l(),ws=a("li"),Nse=a("strong"),Ico=o("qdqbert"),Nco=o(" \u2014 "),dI=a("a"),qco=o("BertTokenizer"),jco=o(" or "),cI=a("a"),Dco=o("BertTokenizerFast"),Gco=o(" (QDQBert model)"),Oco=l(),mh=a("li"),qse=a("strong"),Vco=o("rag"),Xco=o(" \u2014 "),fI=a("a"),zco=o("RagTokenizer"),Wco=o(" (RAG model)"),Qco=l(),As=a("li"),jse=a("strong"),Hco=o("realm"),Uco=o(" \u2014 "),mI=a("a"),Jco=o("RealmTokenizer"),Yco=o(" or "),gI=a("a"),Kco=o("RealmTokenizerFast"),Zco=o(" (REALM model)"),efo=l(),Ls=a("li"),Dse=a("strong"),ofo=o("reformer"),rfo=o(" \u2014 "),hI=a("a"),tfo=o("ReformerTokenizer"),afo=o(" or "),pI=a("a"),nfo=o("ReformerTokenizerFast"),sfo=o(" (Reformer model)"),lfo=l(),ys=a("li"),Gse=a("strong"),ifo=o("rembert"),dfo=o(" \u2014 "),_I=a("a"),cfo=o("RemBertTokenizer"),ffo=o(" or "),uI=a("a"),mfo=o("RemBertTokenizerFast"),gfo=o(" (RemBERT model)"),hfo=l(),xs=a("li"),Ose=a("strong"),pfo=o("retribert"),_fo=o(" \u2014 "),bI=a("a"),ufo=o("RetriBertTokenizer"),bfo=o(" or "),vI=a("a"),vfo=o("RetriBertTokenizerFast"),Ffo=o(" (RetriBERT model)"),Tfo=l(),$s=a("li"),Vse=a("strong"),Mfo=o("roberta"),Efo=o(" \u2014 "),FI=a("a"),Cfo=o("RobertaTokenizer"),wfo=o(" or "),TI=a("a"),Afo=o("RobertaTokenizerFast"),Lfo=o(" (RoBERTa model)"),yfo=l(),ks=a("li"),Xse=a("strong"),xfo=o("roformer"),$fo=o(" \u2014 "),MI=a("a"),kfo=o("RoFormerTokenizer"),Sfo=o(" or "),EI=a("a"),Rfo=o("RoFormerTokenizerFast"),Pfo=o(" (RoFormer model)"),Bfo=l(),gh=a("li"),zse=a("strong"),Ifo=o("speech_to_text"),Nfo=o(" \u2014 "),CI=a("a"),qfo=o("Speech2TextTokenizer"),jfo=o(" (Speech2Text model)"),Dfo=l(),hh=a("li"),Wse=a("strong"),Gfo=o("speech_to_text_2"),Ofo=o(" \u2014 "),wI=a("a"),Vfo=o("Speech2Text2Tokenizer"),Xfo=o(" (Speech2Text2 model)"),zfo=l(),Ss=a("li"),Qse=a("strong"),Wfo=o("splinter"),Qfo=o(" \u2014 "),AI=a("a"),Hfo=o("SplinterTokenizer"),Ufo=o(" or "),LI=a("a"),Jfo=o("SplinterTokenizerFast"),Yfo=o(" (Splinter model)"),Kfo=l(),Rs=a("li"),Hse=a("strong"),Zfo=o("squeezebert"),emo=o(" \u2014 "),yI=a("a"),omo=o("SqueezeBertTokenizer"),rmo=o(" or "),xI=a("a"),tmo=o("SqueezeBertTokenizerFast"),amo=o(" (SqueezeBERT model)"),nmo=l(),Ps=a("li"),Use=a("strong"),smo=o("t5"),lmo=o(" \u2014 "),$I=a("a"),imo=o("T5Tokenizer"),dmo=o(" or "),kI=a("a"),cmo=o("T5TokenizerFast"),fmo=o(" (T5 model)"),mmo=l(),ph=a("li"),Jse=a("strong"),gmo=o("tapas"),hmo=o(" \u2014 "),SI=a("a"),pmo=o("TapasTokenizer"),_mo=o(" (TAPAS model)"),umo=l(),_h=a("li"),Yse=a("strong"),bmo=o("tapex"),vmo=o(" \u2014 "),RI=a("a"),Fmo=o("TapexTokenizer"),Tmo=o(" (TAPEX model)"),Mmo=l(),uh=a("li"),Kse=a("strong"),Emo=o("transfo-xl"),Cmo=o(" \u2014 "),PI=a("a"),wmo=o("TransfoXLTokenizer"),Amo=o(" (Transformer-XL model)"),Lmo=l(),Bs=a("li"),Zse=a("strong"),ymo=o("vilt"),xmo=o(" \u2014 "),BI=a("a"),$mo=o("BertTokenizer"),kmo=o(" or "),II=a("a"),Smo=o("BertTokenizerFast"),Rmo=o(" (ViLT model)"),Pmo=l(),Is=a("li"),ele=a("strong"),Bmo=o("visual_bert"),Imo=o(" \u2014 "),NI=a("a"),Nmo=o("BertTokenizer"),qmo=o(" or "),qI=a("a"),jmo=o("BertTokenizerFast"),Dmo=o(" (VisualBERT model)"),Gmo=l(),bh=a("li"),ole=a("strong"),Omo=o("wav2vec2"),Vmo=o(" \u2014 "),jI=a("a"),Xmo=o("Wav2Vec2CTCTokenizer"),zmo=o(" (Wav2Vec2 model)"),Wmo=l(),vh=a("li"),rle=a("strong"),Qmo=o("wav2vec2-conformer"),Hmo=o(" \u2014 "),DI=a("a"),Umo=o("Wav2Vec2CTCTokenizer"),Jmo=o(" (Wav2Vec2-Conformer model)"),Ymo=l(),Fh=a("li"),tle=a("strong"),Kmo=o("wav2vec2_phoneme"),Zmo=o(" \u2014 "),GI=a("a"),ego=o("Wav2Vec2PhonemeCTCTokenizer"),ogo=o(" (Wav2Vec2Phoneme model)"),rgo=l(),Ns=a("li"),ale=a("strong"),tgo=o("xglm"),ago=o(" \u2014 "),OI=a("a"),ngo=o("XGLMTokenizer"),sgo=o(" or "),VI=a("a"),lgo=o("XGLMTokenizerFast"),igo=o(" (XGLM model)"),dgo=l(),Th=a("li"),nle=a("strong"),cgo=o("xlm"),fgo=o(" \u2014 "),XI=a("a"),mgo=o("XLMTokenizer"),ggo=o(" (XLM model)"),hgo=l(),Mh=a("li"),sle=a("strong"),pgo=o("xlm-prophetnet"),_go=o(" \u2014 "),zI=a("a"),ugo=o("XLMProphetNetTokenizer"),bgo=o(" (XLM-ProphetNet model)"),vgo=l(),qs=a("li"),lle=a("strong"),Fgo=o("xlm-roberta"),Tgo=o(" \u2014 "),WI=a("a"),Mgo=o("XLMRobertaTokenizer"),Ego=o(" or "),QI=a("a"),Cgo=o("XLMRobertaTokenizerFast"),wgo=o(" (XLM-RoBERTa model)"),Ago=l(),js=a("li"),ile=a("strong"),Lgo=o("xlm-roberta-xl"),ygo=o(" \u2014 "),HI=a("a"),xgo=o("RobertaTokenizer"),$go=o(" or "),UI=a("a"),kgo=o("RobertaTokenizerFast"),Sgo=o(" (XLM-RoBERTa-XL model)"),Rgo=l(),Ds=a("li"),dle=a("strong"),Pgo=o("xlnet"),Bgo=o(" \u2014 "),JI=a("a"),Igo=o("XLNetTokenizer"),Ngo=o(" or "),YI=a("a"),qgo=o("XLNetTokenizerFast"),jgo=o(" (XLNet model)"),Dgo=l(),Gs=a("li"),cle=a("strong"),Ggo=o("yoso"),Ogo=o(" \u2014 "),KI=a("a"),Vgo=o("AlbertTokenizer"),Xgo=o(" or "),ZI=a("a"),zgo=o("AlbertTokenizerFast"),Wgo=o(" (YOSO model)"),Qgo=l(),F(Eh.$$.fragment),Hgo=l(),Ch=a("div"),F(DA.$$.fragment),Ugo=l(),fle=a("p"),Jgo=o("Register a new tokenizer in this mapping."),BGe=l(),Ri=a("h2"),wh=a("a"),mle=a("span"),F(GA.$$.fragment),Ygo=l(),gle=a("span"),Kgo=o("AutoFeatureExtractor"),IGe=l(),Lo=a("div"),F(OA.$$.fragment),Zgo=l(),VA=a("p"),eho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eN=a("a"),oho=o("AutoFeatureExtractor.from_pretrained()"),rho=o(" class method."),tho=l(),XA=a("p"),aho=o("This class cannot be instantiated directly using "),hle=a("code"),nho=o("__init__()"),sho=o(" (throws an error)."),lho=l(),He=a("div"),F(zA.$$.fragment),iho=l(),ple=a("p"),dho=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),cho=l(),Sa=a("p"),fho=o("The feature extractor class to instantiate is selected based on the "),_le=a("code"),mho=o("model_type"),gho=o(` property of the config object
(either passed as an argument or loaded from `),ule=a("code"),hho=o("pretrained_model_name_or_path"),pho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ble=a("code"),_ho=o("pretrained_model_name_or_path"),uho=o(":"),bho=l(),Y=a("ul"),Ah=a("li"),vle=a("strong"),vho=o("beit"),Fho=o(" \u2014 "),oN=a("a"),Tho=o("BeitFeatureExtractor"),Mho=o(" (BEiT model)"),Eho=l(),Lh=a("li"),Fle=a("strong"),Cho=o("clip"),who=o(" \u2014 "),rN=a("a"),Aho=o("CLIPFeatureExtractor"),Lho=o(" (CLIP model)"),yho=l(),yh=a("li"),Tle=a("strong"),xho=o("convnext"),$ho=o(" \u2014 "),tN=a("a"),kho=o("ConvNextFeatureExtractor"),Sho=o(" (ConvNeXT model)"),Rho=l(),xh=a("li"),Mle=a("strong"),Pho=o("cvt"),Bho=o(" \u2014 "),aN=a("a"),Iho=o("ConvNextFeatureExtractor"),Nho=o(" (CvT model)"),qho=l(),$h=a("li"),Ele=a("strong"),jho=o("data2vec-audio"),Dho=o(" \u2014 "),nN=a("a"),Gho=o("Wav2Vec2FeatureExtractor"),Oho=o(" (Data2VecAudio model)"),Vho=l(),kh=a("li"),Cle=a("strong"),Xho=o("data2vec-vision"),zho=o(" \u2014 "),sN=a("a"),Who=o("BeitFeatureExtractor"),Qho=o(" (Data2VecVision model)"),Hho=l(),Sh=a("li"),wle=a("strong"),Uho=o("deit"),Jho=o(" \u2014 "),lN=a("a"),Yho=o("DeiTFeatureExtractor"),Kho=o(" (DeiT model)"),Zho=l(),Rh=a("li"),Ale=a("strong"),epo=o("detr"),opo=o(" \u2014 "),iN=a("a"),rpo=o("DetrFeatureExtractor"),tpo=o(" (DETR model)"),apo=l(),Ph=a("li"),Lle=a("strong"),npo=o("dpt"),spo=o(" \u2014 "),dN=a("a"),lpo=o("DPTFeatureExtractor"),ipo=o(" (DPT model)"),dpo=l(),Bh=a("li"),yle=a("strong"),cpo=o("flava"),fpo=o(" \u2014 "),cN=a("a"),mpo=o("FlavaFeatureExtractor"),gpo=o(" (FLAVA model)"),hpo=l(),Ih=a("li"),xle=a("strong"),ppo=o("glpn"),_po=o(" \u2014 "),fN=a("a"),upo=o("GLPNFeatureExtractor"),bpo=o(" (GLPN model)"),vpo=l(),Nh=a("li"),$le=a("strong"),Fpo=o("hubert"),Tpo=o(" \u2014 "),mN=a("a"),Mpo=o("Wav2Vec2FeatureExtractor"),Epo=o(" (Hubert model)"),Cpo=l(),qh=a("li"),kle=a("strong"),wpo=o("imagegpt"),Apo=o(" \u2014 "),gN=a("a"),Lpo=o("ImageGPTFeatureExtractor"),ypo=o(" (ImageGPT model)"),xpo=l(),jh=a("li"),Sle=a("strong"),$po=o("layoutlmv2"),kpo=o(" \u2014 "),hN=a("a"),Spo=o("LayoutLMv2FeatureExtractor"),Rpo=o(" (LayoutLMv2 model)"),Ppo=l(),Dh=a("li"),Rle=a("strong"),Bpo=o("layoutlmv3"),Ipo=o(" \u2014 "),pN=a("a"),Npo=o("LayoutLMv3FeatureExtractor"),qpo=o(" (LayoutLMv3 model)"),jpo=l(),Gh=a("li"),Ple=a("strong"),Dpo=o("levit"),Gpo=o(" \u2014 "),_N=a("a"),Opo=o("LevitFeatureExtractor"),Vpo=o(" (LeViT model)"),Xpo=l(),Oh=a("li"),Ble=a("strong"),zpo=o("maskformer"),Wpo=o(" \u2014 "),uN=a("a"),Qpo=o("MaskFormerFeatureExtractor"),Hpo=o(" (MaskFormer model)"),Upo=l(),Vh=a("li"),Ile=a("strong"),Jpo=o("mctct"),Ypo=o(" \u2014 "),bN=a("a"),Kpo=o("MCTCTFeatureExtractor"),Zpo=o(" (M-CTC-T model)"),e_o=l(),Xh=a("li"),Nle=a("strong"),o_o=o("perceiver"),r_o=o(" \u2014 "),vN=a("a"),t_o=o("PerceiverFeatureExtractor"),a_o=o(" (Perceiver model)"),n_o=l(),zh=a("li"),qle=a("strong"),s_o=o("poolformer"),l_o=o(" \u2014 "),FN=a("a"),i_o=o("PoolFormerFeatureExtractor"),d_o=o(" (PoolFormer model)"),c_o=l(),Wh=a("li"),jle=a("strong"),f_o=o("regnet"),m_o=o(" \u2014 "),TN=a("a"),g_o=o("ConvNextFeatureExtractor"),h_o=o(" (RegNet model)"),p_o=l(),Qh=a("li"),Dle=a("strong"),__o=o("resnet"),u_o=o(" \u2014 "),MN=a("a"),b_o=o("ConvNextFeatureExtractor"),v_o=o(" (ResNet model)"),F_o=l(),Hh=a("li"),Gle=a("strong"),T_o=o("segformer"),M_o=o(" \u2014 "),EN=a("a"),E_o=o("SegformerFeatureExtractor"),C_o=o(" (SegFormer model)"),w_o=l(),Uh=a("li"),Ole=a("strong"),A_o=o("speech_to_text"),L_o=o(" \u2014 "),CN=a("a"),y_o=o("Speech2TextFeatureExtractor"),x_o=o(" (Speech2Text model)"),$_o=l(),Jh=a("li"),Vle=a("strong"),k_o=o("swin"),S_o=o(" \u2014 "),wN=a("a"),R_o=o("ViTFeatureExtractor"),P_o=o(" (Swin Transformer model)"),B_o=l(),Yh=a("li"),Xle=a("strong"),I_o=o("swinv2"),N_o=o(" \u2014 "),AN=a("a"),q_o=o("ViTFeatureExtractor"),j_o=o(" (Swin Transformer V2 model)"),D_o=l(),Kh=a("li"),zle=a("strong"),G_o=o("van"),O_o=o(" \u2014 "),LN=a("a"),V_o=o("ConvNextFeatureExtractor"),X_o=o(" (VAN model)"),z_o=l(),Zh=a("li"),Wle=a("strong"),W_o=o("vilt"),Q_o=o(" \u2014 "),yN=a("a"),H_o=o("ViltFeatureExtractor"),U_o=o(" (ViLT model)"),J_o=l(),ep=a("li"),Qle=a("strong"),Y_o=o("vit"),K_o=o(" \u2014 "),xN=a("a"),Z_o=o("ViTFeatureExtractor"),euo=o(" (ViT model)"),ouo=l(),op=a("li"),Hle=a("strong"),ruo=o("vit_mae"),tuo=o(" \u2014 "),$N=a("a"),auo=o("ViTFeatureExtractor"),nuo=o(" (ViTMAE model)"),suo=l(),rp=a("li"),Ule=a("strong"),luo=o("wav2vec2"),iuo=o(" \u2014 "),kN=a("a"),duo=o("Wav2Vec2FeatureExtractor"),cuo=o(" (Wav2Vec2 model)"),fuo=l(),tp=a("li"),Jle=a("strong"),muo=o("wav2vec2-conformer"),guo=o(" \u2014 "),SN=a("a"),huo=o("Wav2Vec2FeatureExtractor"),puo=o(" (Wav2Vec2-Conformer model)"),_uo=l(),ap=a("li"),Yle=a("strong"),uuo=o("yolos"),buo=o(" \u2014 "),RN=a("a"),vuo=o("YolosFeatureExtractor"),Fuo=o(" (YOLOS model)"),Tuo=l(),F(np.$$.fragment),Muo=l(),F(sp.$$.fragment),Euo=l(),lp=a("div"),F(WA.$$.fragment),Cuo=l(),Kle=a("p"),wuo=o("Register a new feature extractor for this class."),NGe=l(),Pi=a("h2"),ip=a("a"),Zle=a("span"),F(QA.$$.fragment),Auo=l(),eie=a("span"),Luo=o("AutoProcessor"),qGe=l(),yo=a("div"),F(HA.$$.fragment),yuo=l(),UA=a("p"),xuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PN=a("a"),$uo=o("AutoProcessor.from_pretrained()"),kuo=o(" class method."),Suo=l(),JA=a("p"),Ruo=o("This class cannot be instantiated directly using "),oie=a("code"),Puo=o("__init__()"),Buo=o(" (throws an error)."),Iuo=l(),Ue=a("div"),F(YA.$$.fragment),Nuo=l(),rie=a("p"),quo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),juo=l(),Bi=a("p"),Duo=o("The processor class to instantiate is selected based on the "),tie=a("code"),Guo=o("model_type"),Ouo=o(` property of the config object (either
passed as an argument or loaded from `),aie=a("code"),Vuo=o("pretrained_model_name_or_path"),Xuo=o(" if possible):"),zuo=l(),he=a("ul"),dp=a("li"),nie=a("strong"),Wuo=o("clip"),Quo=o(" \u2014 "),BN=a("a"),Huo=o("CLIPProcessor"),Uuo=o(" (CLIP model)"),Juo=l(),cp=a("li"),sie=a("strong"),Yuo=o("flava"),Kuo=o(" \u2014 "),lie=a("code"),Zuo=o("FLAVAProcessor"),e1o=o(" (FLAVA model)"),o1o=l(),fp=a("li"),iie=a("strong"),r1o=o("layoutlmv2"),t1o=o(" \u2014 "),IN=a("a"),a1o=o("LayoutLMv2Processor"),n1o=o(" (LayoutLMv2 model)"),s1o=l(),mp=a("li"),die=a("strong"),l1o=o("layoutlmv3"),i1o=o(" \u2014 "),NN=a("a"),d1o=o("LayoutLMv3Processor"),c1o=o(" (LayoutLMv3 model)"),f1o=l(),gp=a("li"),cie=a("strong"),m1o=o("layoutxlm"),g1o=o(" \u2014 "),qN=a("a"),h1o=o("LayoutXLMProcessor"),p1o=o(" (LayoutXLM model)"),_1o=l(),hp=a("li"),fie=a("strong"),u1o=o("sew"),b1o=o(" \u2014 "),jN=a("a"),v1o=o("Wav2Vec2Processor"),F1o=o(" (SEW model)"),T1o=l(),pp=a("li"),mie=a("strong"),M1o=o("sew-d"),E1o=o(" \u2014 "),DN=a("a"),C1o=o("Wav2Vec2Processor"),w1o=o(" (SEW-D model)"),A1o=l(),_p=a("li"),gie=a("strong"),L1o=o("speech_to_text"),y1o=o(" \u2014 "),GN=a("a"),x1o=o("Speech2TextProcessor"),$1o=o(" (Speech2Text model)"),k1o=l(),up=a("li"),hie=a("strong"),S1o=o("speech_to_text_2"),R1o=o(" \u2014 "),ON=a("a"),P1o=o("Speech2Text2Processor"),B1o=o(" (Speech2Text2 model)"),I1o=l(),bp=a("li"),pie=a("strong"),N1o=o("trocr"),q1o=o(" \u2014 "),VN=a("a"),j1o=o("TrOCRProcessor"),D1o=o(" (TrOCR model)"),G1o=l(),vp=a("li"),_ie=a("strong"),O1o=o("unispeech"),V1o=o(" \u2014 "),XN=a("a"),X1o=o("Wav2Vec2Processor"),z1o=o(" (UniSpeech model)"),W1o=l(),Fp=a("li"),uie=a("strong"),Q1o=o("unispeech-sat"),H1o=o(" \u2014 "),zN=a("a"),U1o=o("Wav2Vec2Processor"),J1o=o(" (UniSpeechSat model)"),Y1o=l(),Tp=a("li"),bie=a("strong"),K1o=o("vilt"),Z1o=o(" \u2014 "),WN=a("a"),e2o=o("ViltProcessor"),o2o=o(" (ViLT model)"),r2o=l(),Mp=a("li"),vie=a("strong"),t2o=o("vision-text-dual-encoder"),a2o=o(" \u2014 "),QN=a("a"),n2o=o("VisionTextDualEncoderProcessor"),s2o=o(" (VisionTextDualEncoder model)"),l2o=l(),Ep=a("li"),Fie=a("strong"),i2o=o("wav2vec2"),d2o=o(" \u2014 "),HN=a("a"),c2o=o("Wav2Vec2Processor"),f2o=o(" (Wav2Vec2 model)"),m2o=l(),Cp=a("li"),Tie=a("strong"),g2o=o("wav2vec2-conformer"),h2o=o(" \u2014 "),UN=a("a"),p2o=o("Wav2Vec2Processor"),_2o=o(" (Wav2Vec2-Conformer model)"),u2o=l(),wp=a("li"),Mie=a("strong"),b2o=o("wavlm"),v2o=o(" \u2014 "),JN=a("a"),F2o=o("Wav2Vec2Processor"),T2o=o(" (WavLM model)"),M2o=l(),F(Ap.$$.fragment),E2o=l(),F(Lp.$$.fragment),C2o=l(),yp=a("div"),F(KA.$$.fragment),w2o=l(),Eie=a("p"),A2o=o("Register a new processor for this class."),jGe=l(),Ii=a("h2"),xp=a("a"),Cie=a("span"),F(ZA.$$.fragment),L2o=l(),wie=a("span"),y2o=o("AutoModel"),DGe=l(),xo=a("div"),F(eL.$$.fragment),x2o=l(),Ni=a("p"),$2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YN=a("a"),k2o=o("from_pretrained()"),S2o=o(" class method or the "),KN=a("a"),R2o=o("from_config()"),P2o=o(` class
method.`),B2o=l(),oL=a("p"),I2o=o("This class cannot be instantiated directly using "),Aie=a("code"),N2o=o("__init__()"),q2o=o(" (throws an error)."),j2o=l(),st=a("div"),F(rL.$$.fragment),D2o=l(),Lie=a("p"),G2o=o("Instantiates one of the base model classes of the library from a configuration."),O2o=l(),qi=a("p"),V2o=o(`Note:
Loading a model from its configuration file does `),yie=a("strong"),X2o=o("not"),z2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=a("a"),W2o=o("from_pretrained()"),Q2o=o(" to load the model weights."),H2o=l(),F($p.$$.fragment),U2o=l(),Je=a("div"),F(tL.$$.fragment),J2o=l(),xie=a("p"),Y2o=o("Instantiate one of the base model classes of the library from a pretrained model."),K2o=l(),Ra=a("p"),Z2o=o("The model class to instantiate is selected based on the "),$ie=a("code"),ebo=o("model_type"),obo=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),rbo=o("pretrained_model_name_or_path"),tbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=a("code"),abo=o("pretrained_model_name_or_path"),nbo=o(":"),sbo=l(),y=a("ul"),kp=a("li"),Rie=a("strong"),lbo=o("albert"),ibo=o(" \u2014 "),eq=a("a"),dbo=o("AlbertModel"),cbo=o(" (ALBERT model)"),fbo=l(),Sp=a("li"),Pie=a("strong"),mbo=o("bart"),gbo=o(" \u2014 "),oq=a("a"),hbo=o("BartModel"),pbo=o(" (BART model)"),_bo=l(),Rp=a("li"),Bie=a("strong"),ubo=o("beit"),bbo=o(" \u2014 "),rq=a("a"),vbo=o("BeitModel"),Fbo=o(" (BEiT model)"),Tbo=l(),Pp=a("li"),Iie=a("strong"),Mbo=o("bert"),Ebo=o(" \u2014 "),tq=a("a"),Cbo=o("BertModel"),wbo=o(" (BERT model)"),Abo=l(),Bp=a("li"),Nie=a("strong"),Lbo=o("bert-generation"),ybo=o(" \u2014 "),aq=a("a"),xbo=o("BertGenerationEncoder"),$bo=o(" (Bert Generation model)"),kbo=l(),Ip=a("li"),qie=a("strong"),Sbo=o("big_bird"),Rbo=o(" \u2014 "),nq=a("a"),Pbo=o("BigBirdModel"),Bbo=o(" (BigBird model)"),Ibo=l(),Np=a("li"),jie=a("strong"),Nbo=o("bigbird_pegasus"),qbo=o(" \u2014 "),sq=a("a"),jbo=o("BigBirdPegasusModel"),Dbo=o(" (BigBird-Pegasus model)"),Gbo=l(),qp=a("li"),Die=a("strong"),Obo=o("blenderbot"),Vbo=o(" \u2014 "),lq=a("a"),Xbo=o("BlenderbotModel"),zbo=o(" (Blenderbot model)"),Wbo=l(),jp=a("li"),Gie=a("strong"),Qbo=o("blenderbot-small"),Hbo=o(" \u2014 "),iq=a("a"),Ubo=o("BlenderbotSmallModel"),Jbo=o(" (BlenderbotSmall model)"),Ybo=l(),Dp=a("li"),Oie=a("strong"),Kbo=o("bloom"),Zbo=o(" \u2014 "),dq=a("a"),e4o=o("BloomModel"),o4o=o(" (BLOOM model)"),r4o=l(),Gp=a("li"),Vie=a("strong"),t4o=o("camembert"),a4o=o(" \u2014 "),cq=a("a"),n4o=o("CamembertModel"),s4o=o(" (CamemBERT model)"),l4o=l(),Op=a("li"),Xie=a("strong"),i4o=o("canine"),d4o=o(" \u2014 "),fq=a("a"),c4o=o("CanineModel"),f4o=o(" (CANINE model)"),m4o=l(),Vp=a("li"),zie=a("strong"),g4o=o("clip"),h4o=o(" \u2014 "),mq=a("a"),p4o=o("CLIPModel"),_4o=o(" (CLIP model)"),u4o=l(),Xp=a("li"),Wie=a("strong"),b4o=o("convbert"),v4o=o(" \u2014 "),gq=a("a"),F4o=o("ConvBertModel"),T4o=o(" (ConvBERT model)"),M4o=l(),zp=a("li"),Qie=a("strong"),E4o=o("convnext"),C4o=o(" \u2014 "),hq=a("a"),w4o=o("ConvNextModel"),A4o=o(" (ConvNeXT model)"),L4o=l(),Wp=a("li"),Hie=a("strong"),y4o=o("ctrl"),x4o=o(" \u2014 "),pq=a("a"),$4o=o("CTRLModel"),k4o=o(" (CTRL model)"),S4o=l(),Qp=a("li"),Uie=a("strong"),R4o=o("cvt"),P4o=o(" \u2014 "),_q=a("a"),B4o=o("CvtModel"),I4o=o(" (CvT model)"),N4o=l(),Hp=a("li"),Jie=a("strong"),q4o=o("data2vec-audio"),j4o=o(" \u2014 "),uq=a("a"),D4o=o("Data2VecAudioModel"),G4o=o(" (Data2VecAudio model)"),O4o=l(),Up=a("li"),Yie=a("strong"),V4o=o("data2vec-text"),X4o=o(" \u2014 "),bq=a("a"),z4o=o("Data2VecTextModel"),W4o=o(" (Data2VecText model)"),Q4o=l(),Jp=a("li"),Kie=a("strong"),H4o=o("data2vec-vision"),U4o=o(" \u2014 "),vq=a("a"),J4o=o("Data2VecVisionModel"),Y4o=o(" (Data2VecVision model)"),K4o=l(),Yp=a("li"),Zie=a("strong"),Z4o=o("deberta"),evo=o(" \u2014 "),Fq=a("a"),ovo=o("DebertaModel"),rvo=o(" (DeBERTa model)"),tvo=l(),Kp=a("li"),ede=a("strong"),avo=o("deberta-v2"),nvo=o(" \u2014 "),Tq=a("a"),svo=o("DebertaV2Model"),lvo=o(" (DeBERTa-v2 model)"),ivo=l(),Zp=a("li"),ode=a("strong"),dvo=o("decision_transformer"),cvo=o(" \u2014 "),Mq=a("a"),fvo=o("DecisionTransformerModel"),mvo=o(" (Decision Transformer model)"),gvo=l(),e_=a("li"),rde=a("strong"),hvo=o("deit"),pvo=o(" \u2014 "),Eq=a("a"),_vo=o("DeiTModel"),uvo=o(" (DeiT model)"),bvo=l(),o_=a("li"),tde=a("strong"),vvo=o("detr"),Fvo=o(" \u2014 "),Cq=a("a"),Tvo=o("DetrModel"),Mvo=o(" (DETR model)"),Evo=l(),r_=a("li"),ade=a("strong"),Cvo=o("distilbert"),wvo=o(" \u2014 "),wq=a("a"),Avo=o("DistilBertModel"),Lvo=o(" (DistilBERT model)"),yvo=l(),t_=a("li"),nde=a("strong"),xvo=o("dpr"),$vo=o(" \u2014 "),Aq=a("a"),kvo=o("DPRQuestionEncoder"),Svo=o(" (DPR model)"),Rvo=l(),a_=a("li"),sde=a("strong"),Pvo=o("dpt"),Bvo=o(" \u2014 "),Lq=a("a"),Ivo=o("DPTModel"),Nvo=o(" (DPT model)"),qvo=l(),n_=a("li"),lde=a("strong"),jvo=o("electra"),Dvo=o(" \u2014 "),yq=a("a"),Gvo=o("ElectraModel"),Ovo=o(" (ELECTRA model)"),Vvo=l(),s_=a("li"),ide=a("strong"),Xvo=o("flaubert"),zvo=o(" \u2014 "),xq=a("a"),Wvo=o("FlaubertModel"),Qvo=o(" (FlauBERT model)"),Hvo=l(),l_=a("li"),dde=a("strong"),Uvo=o("flava"),Jvo=o(" \u2014 "),$q=a("a"),Yvo=o("FlavaModel"),Kvo=o(" (FLAVA model)"),Zvo=l(),i_=a("li"),cde=a("strong"),eFo=o("fnet"),oFo=o(" \u2014 "),kq=a("a"),rFo=o("FNetModel"),tFo=o(" (FNet model)"),aFo=l(),d_=a("li"),fde=a("strong"),nFo=o("fsmt"),sFo=o(" \u2014 "),Sq=a("a"),lFo=o("FSMTModel"),iFo=o(" (FairSeq Machine-Translation model)"),dFo=l(),Os=a("li"),mde=a("strong"),cFo=o("funnel"),fFo=o(" \u2014 "),Rq=a("a"),mFo=o("FunnelModel"),gFo=o(" or "),Pq=a("a"),hFo=o("FunnelBaseModel"),pFo=o(" (Funnel Transformer model)"),_Fo=l(),c_=a("li"),gde=a("strong"),uFo=o("glpn"),bFo=o(" \u2014 "),Bq=a("a"),vFo=o("GLPNModel"),FFo=o(" (GLPN model)"),TFo=l(),f_=a("li"),hde=a("strong"),MFo=o("gpt2"),EFo=o(" \u2014 "),Iq=a("a"),CFo=o("GPT2Model"),wFo=o(" (OpenAI GPT-2 model)"),AFo=l(),m_=a("li"),pde=a("strong"),LFo=o("gpt_neo"),yFo=o(" \u2014 "),Nq=a("a"),xFo=o("GPTNeoModel"),$Fo=o(" (GPT Neo model)"),kFo=l(),g_=a("li"),_de=a("strong"),SFo=o("gpt_neox"),RFo=o(" \u2014 "),qq=a("a"),PFo=o("GPTNeoXModel"),BFo=o(" (GPT NeoX model)"),IFo=l(),h_=a("li"),ude=a("strong"),NFo=o("gptj"),qFo=o(" \u2014 "),jq=a("a"),jFo=o("GPTJModel"),DFo=o(" (GPT-J model)"),GFo=l(),p_=a("li"),bde=a("strong"),OFo=o("hubert"),VFo=o(" \u2014 "),Dq=a("a"),XFo=o("HubertModel"),zFo=o(" (Hubert model)"),WFo=l(),__=a("li"),vde=a("strong"),QFo=o("ibert"),HFo=o(" \u2014 "),Gq=a("a"),UFo=o("IBertModel"),JFo=o(" (I-BERT model)"),YFo=l(),u_=a("li"),Fde=a("strong"),KFo=o("imagegpt"),ZFo=o(" \u2014 "),Oq=a("a"),e6o=o("ImageGPTModel"),o6o=o(" (ImageGPT model)"),r6o=l(),b_=a("li"),Tde=a("strong"),t6o=o("layoutlm"),a6o=o(" \u2014 "),Vq=a("a"),n6o=o("LayoutLMModel"),s6o=o(" (LayoutLM model)"),l6o=l(),v_=a("li"),Mde=a("strong"),i6o=o("layoutlmv2"),d6o=o(" \u2014 "),Xq=a("a"),c6o=o("LayoutLMv2Model"),f6o=o(" (LayoutLMv2 model)"),m6o=l(),F_=a("li"),Ede=a("strong"),g6o=o("layoutlmv3"),h6o=o(" \u2014 "),zq=a("a"),p6o=o("LayoutLMv3Model"),_6o=o(" (LayoutLMv3 model)"),u6o=l(),T_=a("li"),Cde=a("strong"),b6o=o("led"),v6o=o(" \u2014 "),Wq=a("a"),F6o=o("LEDModel"),T6o=o(" (LED model)"),M6o=l(),M_=a("li"),wde=a("strong"),E6o=o("levit"),C6o=o(" \u2014 "),Qq=a("a"),w6o=o("LevitModel"),A6o=o(" (LeViT model)"),L6o=l(),E_=a("li"),Ade=a("strong"),y6o=o("longformer"),x6o=o(" \u2014 "),Hq=a("a"),$6o=o("LongformerModel"),k6o=o(" (Longformer model)"),S6o=l(),C_=a("li"),Lde=a("strong"),R6o=o("longt5"),P6o=o(" \u2014 "),Uq=a("a"),B6o=o("LongT5Model"),I6o=o(" (LongT5 model)"),N6o=l(),w_=a("li"),yde=a("strong"),q6o=o("luke"),j6o=o(" \u2014 "),Jq=a("a"),D6o=o("LukeModel"),G6o=o(" (LUKE model)"),O6o=l(),A_=a("li"),xde=a("strong"),V6o=o("lxmert"),X6o=o(" \u2014 "),Yq=a("a"),z6o=o("LxmertModel"),W6o=o(" (LXMERT model)"),Q6o=l(),L_=a("li"),$de=a("strong"),H6o=o("m2m_100"),U6o=o(" \u2014 "),Kq=a("a"),J6o=o("M2M100Model"),Y6o=o(" (M2M100 model)"),K6o=l(),y_=a("li"),kde=a("strong"),Z6o=o("marian"),eTo=o(" \u2014 "),Zq=a("a"),oTo=o("MarianModel"),rTo=o(" (Marian model)"),tTo=l(),x_=a("li"),Sde=a("strong"),aTo=o("maskformer"),nTo=o(" \u2014 "),ej=a("a"),sTo=o("MaskFormerModel"),lTo=o(" (MaskFormer model)"),iTo=l(),$_=a("li"),Rde=a("strong"),dTo=o("mbart"),cTo=o(" \u2014 "),oj=a("a"),fTo=o("MBartModel"),mTo=o(" (mBART model)"),gTo=l(),k_=a("li"),Pde=a("strong"),hTo=o("mctct"),pTo=o(" \u2014 "),rj=a("a"),_To=o("MCTCTModel"),uTo=o(" (M-CTC-T model)"),bTo=l(),S_=a("li"),Bde=a("strong"),vTo=o("megatron-bert"),FTo=o(" \u2014 "),tj=a("a"),TTo=o("MegatronBertModel"),MTo=o(" (Megatron-BERT model)"),ETo=l(),R_=a("li"),Ide=a("strong"),CTo=o("mobilebert"),wTo=o(" \u2014 "),aj=a("a"),ATo=o("MobileBertModel"),LTo=o(" (MobileBERT model)"),yTo=l(),P_=a("li"),Nde=a("strong"),xTo=o("mpnet"),$To=o(" \u2014 "),nj=a("a"),kTo=o("MPNetModel"),STo=o(" (MPNet model)"),RTo=l(),B_=a("li"),qde=a("strong"),PTo=o("mt5"),BTo=o(" \u2014 "),sj=a("a"),ITo=o("MT5Model"),NTo=o(" (MT5 model)"),qTo=l(),I_=a("li"),jde=a("strong"),jTo=o("nystromformer"),DTo=o(" \u2014 "),lj=a("a"),GTo=o("NystromformerModel"),OTo=o(" (Nystr\xF6mformer model)"),VTo=l(),N_=a("li"),Dde=a("strong"),XTo=o("openai-gpt"),zTo=o(" \u2014 "),ij=a("a"),WTo=o("OpenAIGPTModel"),QTo=o(" (OpenAI GPT model)"),HTo=l(),q_=a("li"),Gde=a("strong"),UTo=o("opt"),JTo=o(" \u2014 "),dj=a("a"),YTo=o("OPTModel"),KTo=o(" (OPT model)"),ZTo=l(),j_=a("li"),Ode=a("strong"),e7o=o("pegasus"),o7o=o(" \u2014 "),cj=a("a"),r7o=o("PegasusModel"),t7o=o(" (Pegasus model)"),a7o=l(),D_=a("li"),Vde=a("strong"),n7o=o("perceiver"),s7o=o(" \u2014 "),fj=a("a"),l7o=o("PerceiverModel"),i7o=o(" (Perceiver model)"),d7o=l(),G_=a("li"),Xde=a("strong"),c7o=o("plbart"),f7o=o(" \u2014 "),mj=a("a"),m7o=o("PLBartModel"),g7o=o(" (PLBart model)"),h7o=l(),O_=a("li"),zde=a("strong"),p7o=o("poolformer"),_7o=o(" \u2014 "),gj=a("a"),u7o=o("PoolFormerModel"),b7o=o(" (PoolFormer model)"),v7o=l(),V_=a("li"),Wde=a("strong"),F7o=o("prophetnet"),T7o=o(" \u2014 "),hj=a("a"),M7o=o("ProphetNetModel"),E7o=o(" (ProphetNet model)"),C7o=l(),X_=a("li"),Qde=a("strong"),w7o=o("qdqbert"),A7o=o(" \u2014 "),pj=a("a"),L7o=o("QDQBertModel"),y7o=o(" (QDQBert model)"),x7o=l(),z_=a("li"),Hde=a("strong"),$7o=o("reformer"),k7o=o(" \u2014 "),_j=a("a"),S7o=o("ReformerModel"),R7o=o(" (Reformer model)"),P7o=l(),W_=a("li"),Ude=a("strong"),B7o=o("regnet"),I7o=o(" \u2014 "),uj=a("a"),N7o=o("RegNetModel"),q7o=o(" (RegNet model)"),j7o=l(),Q_=a("li"),Jde=a("strong"),D7o=o("rembert"),G7o=o(" \u2014 "),bj=a("a"),O7o=o("RemBertModel"),V7o=o(" (RemBERT model)"),X7o=l(),H_=a("li"),Yde=a("strong"),z7o=o("resnet"),W7o=o(" \u2014 "),vj=a("a"),Q7o=o("ResNetModel"),H7o=o(" (ResNet model)"),U7o=l(),U_=a("li"),Kde=a("strong"),J7o=o("retribert"),Y7o=o(" \u2014 "),Fj=a("a"),K7o=o("RetriBertModel"),Z7o=o(" (RetriBERT model)"),e9o=l(),J_=a("li"),Zde=a("strong"),o9o=o("roberta"),r9o=o(" \u2014 "),Tj=a("a"),t9o=o("RobertaModel"),a9o=o(" (RoBERTa model)"),n9o=l(),Y_=a("li"),ece=a("strong"),s9o=o("roformer"),l9o=o(" \u2014 "),Mj=a("a"),i9o=o("RoFormerModel"),d9o=o(" (RoFormer model)"),c9o=l(),K_=a("li"),oce=a("strong"),f9o=o("segformer"),m9o=o(" \u2014 "),Ej=a("a"),g9o=o("SegformerModel"),h9o=o(" (SegFormer model)"),p9o=l(),Z_=a("li"),rce=a("strong"),_9o=o("sew"),u9o=o(" \u2014 "),Cj=a("a"),b9o=o("SEWModel"),v9o=o(" (SEW model)"),F9o=l(),eu=a("li"),tce=a("strong"),T9o=o("sew-d"),M9o=o(" \u2014 "),wj=a("a"),E9o=o("SEWDModel"),C9o=o(" (SEW-D model)"),w9o=l(),ou=a("li"),ace=a("strong"),A9o=o("speech_to_text"),L9o=o(" \u2014 "),Aj=a("a"),y9o=o("Speech2TextModel"),x9o=o(" (Speech2Text model)"),$9o=l(),ru=a("li"),nce=a("strong"),k9o=o("splinter"),S9o=o(" \u2014 "),Lj=a("a"),R9o=o("SplinterModel"),P9o=o(" (Splinter model)"),B9o=l(),tu=a("li"),sce=a("strong"),I9o=o("squeezebert"),N9o=o(" \u2014 "),yj=a("a"),q9o=o("SqueezeBertModel"),j9o=o(" (SqueezeBERT model)"),D9o=l(),au=a("li"),lce=a("strong"),G9o=o("swin"),O9o=o(" \u2014 "),xj=a("a"),V9o=o("SwinModel"),X9o=o(" (Swin Transformer model)"),z9o=l(),nu=a("li"),ice=a("strong"),W9o=o("swinv2"),Q9o=o(" \u2014 "),$j=a("a"),H9o=o("Swinv2Model"),U9o=o(" (Swin Transformer V2 model)"),J9o=l(),su=a("li"),dce=a("strong"),Y9o=o("t5"),K9o=o(" \u2014 "),kj=a("a"),Z9o=o("T5Model"),eMo=o(" (T5 model)"),oMo=l(),lu=a("li"),cce=a("strong"),rMo=o("tapas"),tMo=o(" \u2014 "),Sj=a("a"),aMo=o("TapasModel"),nMo=o(" (TAPAS model)"),sMo=l(),iu=a("li"),fce=a("strong"),lMo=o("trajectory_transformer"),iMo=o(" \u2014 "),Rj=a("a"),dMo=o("TrajectoryTransformerModel"),cMo=o(" (Trajectory Transformer model)"),fMo=l(),du=a("li"),mce=a("strong"),mMo=o("transfo-xl"),gMo=o(" \u2014 "),Pj=a("a"),hMo=o("TransfoXLModel"),pMo=o(" (Transformer-XL model)"),_Mo=l(),cu=a("li"),gce=a("strong"),uMo=o("unispeech"),bMo=o(" \u2014 "),Bj=a("a"),vMo=o("UniSpeechModel"),FMo=o(" (UniSpeech model)"),TMo=l(),fu=a("li"),hce=a("strong"),MMo=o("unispeech-sat"),EMo=o(" \u2014 "),Ij=a("a"),CMo=o("UniSpeechSatModel"),wMo=o(" (UniSpeechSat model)"),AMo=l(),mu=a("li"),pce=a("strong"),LMo=o("van"),yMo=o(" \u2014 "),Nj=a("a"),xMo=o("VanModel"),$Mo=o(" (VAN model)"),kMo=l(),gu=a("li"),_ce=a("strong"),SMo=o("vilt"),RMo=o(" \u2014 "),qj=a("a"),PMo=o("ViltModel"),BMo=o(" (ViLT model)"),IMo=l(),hu=a("li"),uce=a("strong"),NMo=o("vision-text-dual-encoder"),qMo=o(" \u2014 "),jj=a("a"),jMo=o("VisionTextDualEncoderModel"),DMo=o(" (VisionTextDualEncoder model)"),GMo=l(),pu=a("li"),bce=a("strong"),OMo=o("visual_bert"),VMo=o(" \u2014 "),Dj=a("a"),XMo=o("VisualBertModel"),zMo=o(" (VisualBERT model)"),WMo=l(),_u=a("li"),vce=a("strong"),QMo=o("vit"),HMo=o(" \u2014 "),Gj=a("a"),UMo=o("ViTModel"),JMo=o(" (ViT model)"),YMo=l(),uu=a("li"),Fce=a("strong"),KMo=o("vit_mae"),ZMo=o(" \u2014 "),Oj=a("a"),eEo=o("ViTMAEModel"),oEo=o(" (ViTMAE model)"),rEo=l(),bu=a("li"),Tce=a("strong"),tEo=o("wav2vec2"),aEo=o(" \u2014 "),Vj=a("a"),nEo=o("Wav2Vec2Model"),sEo=o(" (Wav2Vec2 model)"),lEo=l(),vu=a("li"),Mce=a("strong"),iEo=o("wav2vec2-conformer"),dEo=o(" \u2014 "),Xj=a("a"),cEo=o("Wav2Vec2ConformerModel"),fEo=o(" (Wav2Vec2-Conformer model)"),mEo=l(),Fu=a("li"),Ece=a("strong"),gEo=o("wavlm"),hEo=o(" \u2014 "),zj=a("a"),pEo=o("WavLMModel"),_Eo=o(" (WavLM model)"),uEo=l(),Tu=a("li"),Cce=a("strong"),bEo=o("xglm"),vEo=o(" \u2014 "),Wj=a("a"),FEo=o("XGLMModel"),TEo=o(" (XGLM model)"),MEo=l(),Mu=a("li"),wce=a("strong"),EEo=o("xlm"),CEo=o(" \u2014 "),Qj=a("a"),wEo=o("XLMModel"),AEo=o(" (XLM model)"),LEo=l(),Eu=a("li"),Ace=a("strong"),yEo=o("xlm-prophetnet"),xEo=o(" \u2014 "),Hj=a("a"),$Eo=o("XLMProphetNetModel"),kEo=o(" (XLM-ProphetNet model)"),SEo=l(),Cu=a("li"),Lce=a("strong"),REo=o("xlm-roberta"),PEo=o(" \u2014 "),Uj=a("a"),BEo=o("XLMRobertaModel"),IEo=o(" (XLM-RoBERTa model)"),NEo=l(),wu=a("li"),yce=a("strong"),qEo=o("xlm-roberta-xl"),jEo=o(" \u2014 "),Jj=a("a"),DEo=o("XLMRobertaXLModel"),GEo=o(" (XLM-RoBERTa-XL model)"),OEo=l(),Au=a("li"),xce=a("strong"),VEo=o("xlnet"),XEo=o(" \u2014 "),Yj=a("a"),zEo=o("XLNetModel"),WEo=o(" (XLNet model)"),QEo=l(),Lu=a("li"),$ce=a("strong"),HEo=o("yolos"),UEo=o(" \u2014 "),Kj=a("a"),JEo=o("YolosModel"),YEo=o(" (YOLOS model)"),KEo=l(),yu=a("li"),kce=a("strong"),ZEo=o("yoso"),eCo=o(" \u2014 "),Zj=a("a"),oCo=o("YosoModel"),rCo=o(" (YOSO model)"),tCo=l(),xu=a("p"),aCo=o("The model is set in evaluation mode by default using "),Sce=a("code"),nCo=o("model.eval()"),sCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=a("code"),lCo=o("model.train()"),iCo=l(),F($u.$$.fragment),GGe=l(),ji=a("h2"),ku=a("a"),Pce=a("span"),F(aL.$$.fragment),dCo=l(),Bce=a("span"),cCo=o("AutoModelForPreTraining"),OGe=l(),$o=a("div"),F(nL.$$.fragment),fCo=l(),Di=a("p"),mCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eD=a("a"),gCo=o("from_pretrained()"),hCo=o(" class method or the "),oD=a("a"),pCo=o("from_config()"),_Co=o(` class
method.`),uCo=l(),sL=a("p"),bCo=o("This class cannot be instantiated directly using "),Ice=a("code"),vCo=o("__init__()"),FCo=o(" (throws an error)."),TCo=l(),lt=a("div"),F(lL.$$.fragment),MCo=l(),Nce=a("p"),ECo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),CCo=l(),Gi=a("p"),wCo=o(`Note:
Loading a model from its configuration file does `),qce=a("strong"),ACo=o("not"),LCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),yCo=o("from_pretrained()"),xCo=o(" to load the model weights."),$Co=l(),F(Su.$$.fragment),kCo=l(),Ye=a("div"),F(iL.$$.fragment),SCo=l(),jce=a("p"),RCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PCo=l(),Pa=a("p"),BCo=o("The model class to instantiate is selected based on the "),Dce=a("code"),ICo=o("model_type"),NCo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),qCo=o("pretrained_model_name_or_path"),jCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),DCo=o("pretrained_model_name_or_path"),GCo=o(":"),OCo=l(),G=a("ul"),Ru=a("li"),Vce=a("strong"),VCo=o("albert"),XCo=o(" \u2014 "),tD=a("a"),zCo=o("AlbertForPreTraining"),WCo=o(" (ALBERT model)"),QCo=l(),Pu=a("li"),Xce=a("strong"),HCo=o("bart"),UCo=o(" \u2014 "),aD=a("a"),JCo=o("BartForConditionalGeneration"),YCo=o(" (BART model)"),KCo=l(),Bu=a("li"),zce=a("strong"),ZCo=o("bert"),e5o=o(" \u2014 "),nD=a("a"),o5o=o("BertForPreTraining"),r5o=o(" (BERT model)"),t5o=l(),Iu=a("li"),Wce=a("strong"),a5o=o("big_bird"),n5o=o(" \u2014 "),sD=a("a"),s5o=o("BigBirdForPreTraining"),l5o=o(" (BigBird model)"),i5o=l(),Nu=a("li"),Qce=a("strong"),d5o=o("bloom"),c5o=o(" \u2014 "),lD=a("a"),f5o=o("BloomForCausalLM"),m5o=o(" (BLOOM model)"),g5o=l(),qu=a("li"),Hce=a("strong"),h5o=o("camembert"),p5o=o(" \u2014 "),iD=a("a"),_5o=o("CamembertForMaskedLM"),u5o=o(" (CamemBERT model)"),b5o=l(),ju=a("li"),Uce=a("strong"),v5o=o("ctrl"),F5o=o(" \u2014 "),dD=a("a"),T5o=o("CTRLLMHeadModel"),M5o=o(" (CTRL model)"),E5o=l(),Du=a("li"),Jce=a("strong"),C5o=o("data2vec-text"),w5o=o(" \u2014 "),cD=a("a"),A5o=o("Data2VecTextForMaskedLM"),L5o=o(" (Data2VecText model)"),y5o=l(),Gu=a("li"),Yce=a("strong"),x5o=o("deberta"),$5o=o(" \u2014 "),fD=a("a"),k5o=o("DebertaForMaskedLM"),S5o=o(" (DeBERTa model)"),R5o=l(),Ou=a("li"),Kce=a("strong"),P5o=o("deberta-v2"),B5o=o(" \u2014 "),mD=a("a"),I5o=o("DebertaV2ForMaskedLM"),N5o=o(" (DeBERTa-v2 model)"),q5o=l(),Vu=a("li"),Zce=a("strong"),j5o=o("distilbert"),D5o=o(" \u2014 "),gD=a("a"),G5o=o("DistilBertForMaskedLM"),O5o=o(" (DistilBERT model)"),V5o=l(),Xu=a("li"),efe=a("strong"),X5o=o("electra"),z5o=o(" \u2014 "),hD=a("a"),W5o=o("ElectraForPreTraining"),Q5o=o(" (ELECTRA model)"),H5o=l(),zu=a("li"),ofe=a("strong"),U5o=o("flaubert"),J5o=o(" \u2014 "),pD=a("a"),Y5o=o("FlaubertWithLMHeadModel"),K5o=o(" (FlauBERT model)"),Z5o=l(),Wu=a("li"),rfe=a("strong"),e3o=o("flava"),o3o=o(" \u2014 "),_D=a("a"),r3o=o("FlavaForPreTraining"),t3o=o(" (FLAVA model)"),a3o=l(),Qu=a("li"),tfe=a("strong"),n3o=o("fnet"),s3o=o(" \u2014 "),uD=a("a"),l3o=o("FNetForPreTraining"),i3o=o(" (FNet model)"),d3o=l(),Hu=a("li"),afe=a("strong"),c3o=o("fsmt"),f3o=o(" \u2014 "),bD=a("a"),m3o=o("FSMTForConditionalGeneration"),g3o=o(" (FairSeq Machine-Translation model)"),h3o=l(),Uu=a("li"),nfe=a("strong"),p3o=o("funnel"),_3o=o(" \u2014 "),vD=a("a"),u3o=o("FunnelForPreTraining"),b3o=o(" (Funnel Transformer model)"),v3o=l(),Ju=a("li"),sfe=a("strong"),F3o=o("gpt2"),T3o=o(" \u2014 "),FD=a("a"),M3o=o("GPT2LMHeadModel"),E3o=o(" (OpenAI GPT-2 model)"),C3o=l(),Yu=a("li"),lfe=a("strong"),w3o=o("ibert"),A3o=o(" \u2014 "),TD=a("a"),L3o=o("IBertForMaskedLM"),y3o=o(" (I-BERT model)"),x3o=l(),Ku=a("li"),ife=a("strong"),$3o=o("layoutlm"),k3o=o(" \u2014 "),MD=a("a"),S3o=o("LayoutLMForMaskedLM"),R3o=o(" (LayoutLM model)"),P3o=l(),Zu=a("li"),dfe=a("strong"),B3o=o("longformer"),I3o=o(" \u2014 "),ED=a("a"),N3o=o("LongformerForMaskedLM"),q3o=o(" (Longformer model)"),j3o=l(),e1=a("li"),cfe=a("strong"),D3o=o("lxmert"),G3o=o(" \u2014 "),CD=a("a"),O3o=o("LxmertForPreTraining"),V3o=o(" (LXMERT model)"),X3o=l(),o1=a("li"),ffe=a("strong"),z3o=o("megatron-bert"),W3o=o(" \u2014 "),wD=a("a"),Q3o=o("MegatronBertForPreTraining"),H3o=o(" (Megatron-BERT model)"),U3o=l(),r1=a("li"),mfe=a("strong"),J3o=o("mobilebert"),Y3o=o(" \u2014 "),AD=a("a"),K3o=o("MobileBertForPreTraining"),Z3o=o(" (MobileBERT model)"),e0o=l(),t1=a("li"),gfe=a("strong"),o0o=o("mpnet"),r0o=o(" \u2014 "),LD=a("a"),t0o=o("MPNetForMaskedLM"),a0o=o(" (MPNet model)"),n0o=l(),a1=a("li"),hfe=a("strong"),s0o=o("openai-gpt"),l0o=o(" \u2014 "),yD=a("a"),i0o=o("OpenAIGPTLMHeadModel"),d0o=o(" (OpenAI GPT model)"),c0o=l(),n1=a("li"),pfe=a("strong"),f0o=o("retribert"),m0o=o(" \u2014 "),xD=a("a"),g0o=o("RetriBertModel"),h0o=o(" (RetriBERT model)"),p0o=l(),s1=a("li"),_fe=a("strong"),_0o=o("roberta"),u0o=o(" \u2014 "),$D=a("a"),b0o=o("RobertaForMaskedLM"),v0o=o(" (RoBERTa model)"),F0o=l(),l1=a("li"),ufe=a("strong"),T0o=o("splinter"),M0o=o(" \u2014 "),kD=a("a"),E0o=o("SplinterForPreTraining"),C0o=o(" (Splinter model)"),w0o=l(),i1=a("li"),bfe=a("strong"),A0o=o("squeezebert"),L0o=o(" \u2014 "),SD=a("a"),y0o=o("SqueezeBertForMaskedLM"),x0o=o(" (SqueezeBERT model)"),$0o=l(),d1=a("li"),vfe=a("strong"),k0o=o("t5"),S0o=o(" \u2014 "),RD=a("a"),R0o=o("T5ForConditionalGeneration"),P0o=o(" (T5 model)"),B0o=l(),c1=a("li"),Ffe=a("strong"),I0o=o("tapas"),N0o=o(" \u2014 "),PD=a("a"),q0o=o("TapasForMaskedLM"),j0o=o(" (TAPAS model)"),D0o=l(),f1=a("li"),Tfe=a("strong"),G0o=o("transfo-xl"),O0o=o(" \u2014 "),BD=a("a"),V0o=o("TransfoXLLMHeadModel"),X0o=o(" (Transformer-XL model)"),z0o=l(),m1=a("li"),Mfe=a("strong"),W0o=o("unispeech"),Q0o=o(" \u2014 "),ID=a("a"),H0o=o("UniSpeechForPreTraining"),U0o=o(" (UniSpeech model)"),J0o=l(),g1=a("li"),Efe=a("strong"),Y0o=o("unispeech-sat"),K0o=o(" \u2014 "),ND=a("a"),Z0o=o("UniSpeechSatForPreTraining"),ewo=o(" (UniSpeechSat model)"),owo=l(),h1=a("li"),Cfe=a("strong"),rwo=o("visual_bert"),two=o(" \u2014 "),qD=a("a"),awo=o("VisualBertForPreTraining"),nwo=o(" (VisualBERT model)"),swo=l(),p1=a("li"),wfe=a("strong"),lwo=o("vit_mae"),iwo=o(" \u2014 "),jD=a("a"),dwo=o("ViTMAEForPreTraining"),cwo=o(" (ViTMAE model)"),fwo=l(),_1=a("li"),Afe=a("strong"),mwo=o("wav2vec2"),gwo=o(" \u2014 "),DD=a("a"),hwo=o("Wav2Vec2ForPreTraining"),pwo=o(" (Wav2Vec2 model)"),_wo=l(),u1=a("li"),Lfe=a("strong"),uwo=o("wav2vec2-conformer"),bwo=o(" \u2014 "),GD=a("a"),vwo=o("Wav2Vec2ConformerForPreTraining"),Fwo=o(" (Wav2Vec2-Conformer model)"),Two=l(),b1=a("li"),yfe=a("strong"),Mwo=o("xlm"),Ewo=o(" \u2014 "),OD=a("a"),Cwo=o("XLMWithLMHeadModel"),wwo=o(" (XLM model)"),Awo=l(),v1=a("li"),xfe=a("strong"),Lwo=o("xlm-roberta"),ywo=o(" \u2014 "),VD=a("a"),xwo=o("XLMRobertaForMaskedLM"),$wo=o(" (XLM-RoBERTa model)"),kwo=l(),F1=a("li"),$fe=a("strong"),Swo=o("xlm-roberta-xl"),Rwo=o(" \u2014 "),XD=a("a"),Pwo=o("XLMRobertaXLForMaskedLM"),Bwo=o(" (XLM-RoBERTa-XL model)"),Iwo=l(),T1=a("li"),kfe=a("strong"),Nwo=o("xlnet"),qwo=o(" \u2014 "),zD=a("a"),jwo=o("XLNetLMHeadModel"),Dwo=o(" (XLNet model)"),Gwo=l(),M1=a("p"),Owo=o("The model is set in evaluation mode by default using "),Sfe=a("code"),Vwo=o("model.eval()"),Xwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=a("code"),zwo=o("model.train()"),Wwo=l(),F(E1.$$.fragment),VGe=l(),Oi=a("h2"),C1=a("a"),Pfe=a("span"),F(dL.$$.fragment),Qwo=l(),Bfe=a("span"),Hwo=o("AutoModelForCausalLM"),XGe=l(),ko=a("div"),F(cL.$$.fragment),Uwo=l(),Vi=a("p"),Jwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WD=a("a"),Ywo=o("from_pretrained()"),Kwo=o(" class method or the "),QD=a("a"),Zwo=o("from_config()"),eAo=o(` class
method.`),oAo=l(),fL=a("p"),rAo=o("This class cannot be instantiated directly using "),Ife=a("code"),tAo=o("__init__()"),aAo=o(" (throws an error)."),nAo=l(),it=a("div"),F(mL.$$.fragment),sAo=l(),Nfe=a("p"),lAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iAo=l(),Xi=a("p"),dAo=o(`Note:
Loading a model from its configuration file does `),qfe=a("strong"),cAo=o("not"),fAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),mAo=o("from_pretrained()"),gAo=o(" to load the model weights."),hAo=l(),F(w1.$$.fragment),pAo=l(),Ke=a("div"),F(gL.$$.fragment),_Ao=l(),jfe=a("p"),uAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bAo=l(),Ba=a("p"),vAo=o("The model class to instantiate is selected based on the "),Dfe=a("code"),FAo=o("model_type"),TAo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),MAo=o("pretrained_model_name_or_path"),EAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),CAo=o("pretrained_model_name_or_path"),wAo=o(":"),AAo=l(),z=a("ul"),A1=a("li"),Vfe=a("strong"),LAo=o("bart"),yAo=o(" \u2014 "),UD=a("a"),xAo=o("BartForCausalLM"),$Ao=o(" (BART model)"),kAo=l(),L1=a("li"),Xfe=a("strong"),SAo=o("bert"),RAo=o(" \u2014 "),JD=a("a"),PAo=o("BertLMHeadModel"),BAo=o(" (BERT model)"),IAo=l(),y1=a("li"),zfe=a("strong"),NAo=o("bert-generation"),qAo=o(" \u2014 "),YD=a("a"),jAo=o("BertGenerationDecoder"),DAo=o(" (Bert Generation model)"),GAo=l(),x1=a("li"),Wfe=a("strong"),OAo=o("big_bird"),VAo=o(" \u2014 "),KD=a("a"),XAo=o("BigBirdForCausalLM"),zAo=o(" (BigBird model)"),WAo=l(),$1=a("li"),Qfe=a("strong"),QAo=o("bigbird_pegasus"),HAo=o(" \u2014 "),ZD=a("a"),UAo=o("BigBirdPegasusForCausalLM"),JAo=o(" (BigBird-Pegasus model)"),YAo=l(),k1=a("li"),Hfe=a("strong"),KAo=o("blenderbot"),ZAo=o(" \u2014 "),eG=a("a"),eLo=o("BlenderbotForCausalLM"),oLo=o(" (Blenderbot model)"),rLo=l(),S1=a("li"),Ufe=a("strong"),tLo=o("blenderbot-small"),aLo=o(" \u2014 "),oG=a("a"),nLo=o("BlenderbotSmallForCausalLM"),sLo=o(" (BlenderbotSmall model)"),lLo=l(),R1=a("li"),Jfe=a("strong"),iLo=o("bloom"),dLo=o(" \u2014 "),rG=a("a"),cLo=o("BloomForCausalLM"),fLo=o(" (BLOOM model)"),mLo=l(),P1=a("li"),Yfe=a("strong"),gLo=o("camembert"),hLo=o(" \u2014 "),tG=a("a"),pLo=o("CamembertForCausalLM"),_Lo=o(" (CamemBERT model)"),uLo=l(),B1=a("li"),Kfe=a("strong"),bLo=o("ctrl"),vLo=o(" \u2014 "),aG=a("a"),FLo=o("CTRLLMHeadModel"),TLo=o(" (CTRL model)"),MLo=l(),I1=a("li"),Zfe=a("strong"),ELo=o("data2vec-text"),CLo=o(" \u2014 "),nG=a("a"),wLo=o("Data2VecTextForCausalLM"),ALo=o(" (Data2VecText model)"),LLo=l(),N1=a("li"),eme=a("strong"),yLo=o("electra"),xLo=o(" \u2014 "),sG=a("a"),$Lo=o("ElectraForCausalLM"),kLo=o(" (ELECTRA model)"),SLo=l(),q1=a("li"),ome=a("strong"),RLo=o("gpt2"),PLo=o(" \u2014 "),lG=a("a"),BLo=o("GPT2LMHeadModel"),ILo=o(" (OpenAI GPT-2 model)"),NLo=l(),j1=a("li"),rme=a("strong"),qLo=o("gpt_neo"),jLo=o(" \u2014 "),iG=a("a"),DLo=o("GPTNeoForCausalLM"),GLo=o(" (GPT Neo model)"),OLo=l(),D1=a("li"),tme=a("strong"),VLo=o("gpt_neox"),XLo=o(" \u2014 "),dG=a("a"),zLo=o("GPTNeoXForCausalLM"),WLo=o(" (GPT NeoX model)"),QLo=l(),G1=a("li"),ame=a("strong"),HLo=o("gptj"),ULo=o(" \u2014 "),cG=a("a"),JLo=o("GPTJForCausalLM"),YLo=o(" (GPT-J model)"),KLo=l(),O1=a("li"),nme=a("strong"),ZLo=o("marian"),eyo=o(" \u2014 "),fG=a("a"),oyo=o("MarianForCausalLM"),ryo=o(" (Marian model)"),tyo=l(),V1=a("li"),sme=a("strong"),ayo=o("mbart"),nyo=o(" \u2014 "),mG=a("a"),syo=o("MBartForCausalLM"),lyo=o(" (mBART model)"),iyo=l(),X1=a("li"),lme=a("strong"),dyo=o("megatron-bert"),cyo=o(" \u2014 "),gG=a("a"),fyo=o("MegatronBertForCausalLM"),myo=o(" (Megatron-BERT model)"),gyo=l(),z1=a("li"),ime=a("strong"),hyo=o("openai-gpt"),pyo=o(" \u2014 "),hG=a("a"),_yo=o("OpenAIGPTLMHeadModel"),uyo=o(" (OpenAI GPT model)"),byo=l(),W1=a("li"),dme=a("strong"),vyo=o("opt"),Fyo=o(" \u2014 "),pG=a("a"),Tyo=o("OPTForCausalLM"),Myo=o(" (OPT model)"),Eyo=l(),Q1=a("li"),cme=a("strong"),Cyo=o("pegasus"),wyo=o(" \u2014 "),_G=a("a"),Ayo=o("PegasusForCausalLM"),Lyo=o(" (Pegasus model)"),yyo=l(),H1=a("li"),fme=a("strong"),xyo=o("plbart"),$yo=o(" \u2014 "),uG=a("a"),kyo=o("PLBartForCausalLM"),Syo=o(" (PLBart model)"),Ryo=l(),U1=a("li"),mme=a("strong"),Pyo=o("prophetnet"),Byo=o(" \u2014 "),bG=a("a"),Iyo=o("ProphetNetForCausalLM"),Nyo=o(" (ProphetNet model)"),qyo=l(),J1=a("li"),gme=a("strong"),jyo=o("qdqbert"),Dyo=o(" \u2014 "),vG=a("a"),Gyo=o("QDQBertLMHeadModel"),Oyo=o(" (QDQBert model)"),Vyo=l(),Y1=a("li"),hme=a("strong"),Xyo=o("reformer"),zyo=o(" \u2014 "),FG=a("a"),Wyo=o("ReformerModelWithLMHead"),Qyo=o(" (Reformer model)"),Hyo=l(),K1=a("li"),pme=a("strong"),Uyo=o("rembert"),Jyo=o(" \u2014 "),TG=a("a"),Yyo=o("RemBertForCausalLM"),Kyo=o(" (RemBERT model)"),Zyo=l(),Z1=a("li"),_me=a("strong"),e8o=o("roberta"),o8o=o(" \u2014 "),MG=a("a"),r8o=o("RobertaForCausalLM"),t8o=o(" (RoBERTa model)"),a8o=l(),e2=a("li"),ume=a("strong"),n8o=o("roformer"),s8o=o(" \u2014 "),EG=a("a"),l8o=o("RoFormerForCausalLM"),i8o=o(" (RoFormer model)"),d8o=l(),o2=a("li"),bme=a("strong"),c8o=o("speech_to_text_2"),f8o=o(" \u2014 "),CG=a("a"),m8o=o("Speech2Text2ForCausalLM"),g8o=o(" (Speech2Text2 model)"),h8o=l(),r2=a("li"),vme=a("strong"),p8o=o("transfo-xl"),_8o=o(" \u2014 "),wG=a("a"),u8o=o("TransfoXLLMHeadModel"),b8o=o(" (Transformer-XL model)"),v8o=l(),t2=a("li"),Fme=a("strong"),F8o=o("trocr"),T8o=o(" \u2014 "),AG=a("a"),M8o=o("TrOCRForCausalLM"),E8o=o(" (TrOCR model)"),C8o=l(),a2=a("li"),Tme=a("strong"),w8o=o("xglm"),A8o=o(" \u2014 "),LG=a("a"),L8o=o("XGLMForCausalLM"),y8o=o(" (XGLM model)"),x8o=l(),n2=a("li"),Mme=a("strong"),$8o=o("xlm"),k8o=o(" \u2014 "),yG=a("a"),S8o=o("XLMWithLMHeadModel"),R8o=o(" (XLM model)"),P8o=l(),s2=a("li"),Eme=a("strong"),B8o=o("xlm-prophetnet"),I8o=o(" \u2014 "),xG=a("a"),N8o=o("XLMProphetNetForCausalLM"),q8o=o(" (XLM-ProphetNet model)"),j8o=l(),l2=a("li"),Cme=a("strong"),D8o=o("xlm-roberta"),G8o=o(" \u2014 "),$G=a("a"),O8o=o("XLMRobertaForCausalLM"),V8o=o(" (XLM-RoBERTa model)"),X8o=l(),i2=a("li"),wme=a("strong"),z8o=o("xlm-roberta-xl"),W8o=o(" \u2014 "),kG=a("a"),Q8o=o("XLMRobertaXLForCausalLM"),H8o=o(" (XLM-RoBERTa-XL model)"),U8o=l(),d2=a("li"),Ame=a("strong"),J8o=o("xlnet"),Y8o=o(" \u2014 "),SG=a("a"),K8o=o("XLNetLMHeadModel"),Z8o=o(" (XLNet model)"),exo=l(),c2=a("p"),oxo=o("The model is set in evaluation mode by default using "),Lme=a("code"),rxo=o("model.eval()"),txo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),axo=o("model.train()"),nxo=l(),F(f2.$$.fragment),zGe=l(),zi=a("h2"),m2=a("a"),xme=a("span"),F(hL.$$.fragment),sxo=l(),$me=a("span"),lxo=o("AutoModelForMaskedLM"),WGe=l(),So=a("div"),F(pL.$$.fragment),ixo=l(),Wi=a("p"),dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RG=a("a"),cxo=o("from_pretrained()"),fxo=o(" class method or the "),PG=a("a"),mxo=o("from_config()"),gxo=o(` class
method.`),hxo=l(),_L=a("p"),pxo=o("This class cannot be instantiated directly using "),kme=a("code"),_xo=o("__init__()"),uxo=o(" (throws an error)."),bxo=l(),dt=a("div"),F(uL.$$.fragment),vxo=l(),Sme=a("p"),Fxo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Txo=l(),Qi=a("p"),Mxo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),Exo=o("not"),Cxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),wxo=o("from_pretrained()"),Axo=o(" to load the model weights."),Lxo=l(),F(g2.$$.fragment),yxo=l(),Ze=a("div"),F(bL.$$.fragment),xxo=l(),Pme=a("p"),$xo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kxo=l(),Ia=a("p"),Sxo=o("The model class to instantiate is selected based on the "),Bme=a("code"),Rxo=o("model_type"),Pxo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),Bxo=o("pretrained_model_name_or_path"),Ixo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),Nxo=o("pretrained_model_name_or_path"),qxo=o(":"),jxo=l(),Q=a("ul"),h2=a("li"),qme=a("strong"),Dxo=o("albert"),Gxo=o(" \u2014 "),IG=a("a"),Oxo=o("AlbertForMaskedLM"),Vxo=o(" (ALBERT model)"),Xxo=l(),p2=a("li"),jme=a("strong"),zxo=o("bart"),Wxo=o(" \u2014 "),NG=a("a"),Qxo=o("BartForConditionalGeneration"),Hxo=o(" (BART model)"),Uxo=l(),_2=a("li"),Dme=a("strong"),Jxo=o("bert"),Yxo=o(" \u2014 "),qG=a("a"),Kxo=o("BertForMaskedLM"),Zxo=o(" (BERT model)"),e$o=l(),u2=a("li"),Gme=a("strong"),o$o=o("big_bird"),r$o=o(" \u2014 "),jG=a("a"),t$o=o("BigBirdForMaskedLM"),a$o=o(" (BigBird model)"),n$o=l(),b2=a("li"),Ome=a("strong"),s$o=o("camembert"),l$o=o(" \u2014 "),DG=a("a"),i$o=o("CamembertForMaskedLM"),d$o=o(" (CamemBERT model)"),c$o=l(),v2=a("li"),Vme=a("strong"),f$o=o("convbert"),m$o=o(" \u2014 "),GG=a("a"),g$o=o("ConvBertForMaskedLM"),h$o=o(" (ConvBERT model)"),p$o=l(),F2=a("li"),Xme=a("strong"),_$o=o("data2vec-text"),u$o=o(" \u2014 "),OG=a("a"),b$o=o("Data2VecTextForMaskedLM"),v$o=o(" (Data2VecText model)"),F$o=l(),T2=a("li"),zme=a("strong"),T$o=o("deberta"),M$o=o(" \u2014 "),VG=a("a"),E$o=o("DebertaForMaskedLM"),C$o=o(" (DeBERTa model)"),w$o=l(),M2=a("li"),Wme=a("strong"),A$o=o("deberta-v2"),L$o=o(" \u2014 "),XG=a("a"),y$o=o("DebertaV2ForMaskedLM"),x$o=o(" (DeBERTa-v2 model)"),$$o=l(),E2=a("li"),Qme=a("strong"),k$o=o("distilbert"),S$o=o(" \u2014 "),zG=a("a"),R$o=o("DistilBertForMaskedLM"),P$o=o(" (DistilBERT model)"),B$o=l(),C2=a("li"),Hme=a("strong"),I$o=o("electra"),N$o=o(" \u2014 "),WG=a("a"),q$o=o("ElectraForMaskedLM"),j$o=o(" (ELECTRA model)"),D$o=l(),w2=a("li"),Ume=a("strong"),G$o=o("flaubert"),O$o=o(" \u2014 "),QG=a("a"),V$o=o("FlaubertWithLMHeadModel"),X$o=o(" (FlauBERT model)"),z$o=l(),A2=a("li"),Jme=a("strong"),W$o=o("fnet"),Q$o=o(" \u2014 "),HG=a("a"),H$o=o("FNetForMaskedLM"),U$o=o(" (FNet model)"),J$o=l(),L2=a("li"),Yme=a("strong"),Y$o=o("funnel"),K$o=o(" \u2014 "),UG=a("a"),Z$o=o("FunnelForMaskedLM"),eko=o(" (Funnel Transformer model)"),oko=l(),y2=a("li"),Kme=a("strong"),rko=o("ibert"),tko=o(" \u2014 "),JG=a("a"),ako=o("IBertForMaskedLM"),nko=o(" (I-BERT model)"),sko=l(),x2=a("li"),Zme=a("strong"),lko=o("layoutlm"),iko=o(" \u2014 "),YG=a("a"),dko=o("LayoutLMForMaskedLM"),cko=o(" (LayoutLM model)"),fko=l(),$2=a("li"),ege=a("strong"),mko=o("longformer"),gko=o(" \u2014 "),KG=a("a"),hko=o("LongformerForMaskedLM"),pko=o(" (Longformer model)"),_ko=l(),k2=a("li"),oge=a("strong"),uko=o("luke"),bko=o(" \u2014 "),ZG=a("a"),vko=o("LukeForMaskedLM"),Fko=o(" (LUKE model)"),Tko=l(),S2=a("li"),rge=a("strong"),Mko=o("mbart"),Eko=o(" \u2014 "),eO=a("a"),Cko=o("MBartForConditionalGeneration"),wko=o(" (mBART model)"),Ako=l(),R2=a("li"),tge=a("strong"),Lko=o("megatron-bert"),yko=o(" \u2014 "),oO=a("a"),xko=o("MegatronBertForMaskedLM"),$ko=o(" (Megatron-BERT model)"),kko=l(),P2=a("li"),age=a("strong"),Sko=o("mobilebert"),Rko=o(" \u2014 "),rO=a("a"),Pko=o("MobileBertForMaskedLM"),Bko=o(" (MobileBERT model)"),Iko=l(),B2=a("li"),nge=a("strong"),Nko=o("mpnet"),qko=o(" \u2014 "),tO=a("a"),jko=o("MPNetForMaskedLM"),Dko=o(" (MPNet model)"),Gko=l(),I2=a("li"),sge=a("strong"),Oko=o("nystromformer"),Vko=o(" \u2014 "),aO=a("a"),Xko=o("NystromformerForMaskedLM"),zko=o(" (Nystr\xF6mformer model)"),Wko=l(),N2=a("li"),lge=a("strong"),Qko=o("perceiver"),Hko=o(" \u2014 "),nO=a("a"),Uko=o("PerceiverForMaskedLM"),Jko=o(" (Perceiver model)"),Yko=l(),q2=a("li"),ige=a("strong"),Kko=o("qdqbert"),Zko=o(" \u2014 "),sO=a("a"),eSo=o("QDQBertForMaskedLM"),oSo=o(" (QDQBert model)"),rSo=l(),j2=a("li"),dge=a("strong"),tSo=o("reformer"),aSo=o(" \u2014 "),lO=a("a"),nSo=o("ReformerForMaskedLM"),sSo=o(" (Reformer model)"),lSo=l(),D2=a("li"),cge=a("strong"),iSo=o("rembert"),dSo=o(" \u2014 "),iO=a("a"),cSo=o("RemBertForMaskedLM"),fSo=o(" (RemBERT model)"),mSo=l(),G2=a("li"),fge=a("strong"),gSo=o("roberta"),hSo=o(" \u2014 "),dO=a("a"),pSo=o("RobertaForMaskedLM"),_So=o(" (RoBERTa model)"),uSo=l(),O2=a("li"),mge=a("strong"),bSo=o("roformer"),vSo=o(" \u2014 "),cO=a("a"),FSo=o("RoFormerForMaskedLM"),TSo=o(" (RoFormer model)"),MSo=l(),V2=a("li"),gge=a("strong"),ESo=o("squeezebert"),CSo=o(" \u2014 "),fO=a("a"),wSo=o("SqueezeBertForMaskedLM"),ASo=o(" (SqueezeBERT model)"),LSo=l(),X2=a("li"),hge=a("strong"),ySo=o("tapas"),xSo=o(" \u2014 "),mO=a("a"),$So=o("TapasForMaskedLM"),kSo=o(" (TAPAS model)"),SSo=l(),z2=a("li"),pge=a("strong"),RSo=o("wav2vec2"),PSo=o(" \u2014 "),_ge=a("code"),BSo=o("Wav2Vec2ForMaskedLM"),ISo=o(" (Wav2Vec2 model)"),NSo=l(),W2=a("li"),uge=a("strong"),qSo=o("xlm"),jSo=o(" \u2014 "),gO=a("a"),DSo=o("XLMWithLMHeadModel"),GSo=o(" (XLM model)"),OSo=l(),Q2=a("li"),bge=a("strong"),VSo=o("xlm-roberta"),XSo=o(" \u2014 "),hO=a("a"),zSo=o("XLMRobertaForMaskedLM"),WSo=o(" (XLM-RoBERTa model)"),QSo=l(),H2=a("li"),vge=a("strong"),HSo=o("xlm-roberta-xl"),USo=o(" \u2014 "),pO=a("a"),JSo=o("XLMRobertaXLForMaskedLM"),YSo=o(" (XLM-RoBERTa-XL model)"),KSo=l(),U2=a("li"),Fge=a("strong"),ZSo=o("yoso"),eRo=o(" \u2014 "),_O=a("a"),oRo=o("YosoForMaskedLM"),rRo=o(" (YOSO model)"),tRo=l(),J2=a("p"),aRo=o("The model is set in evaluation mode by default using "),Tge=a("code"),nRo=o("model.eval()"),sRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),lRo=o("model.train()"),iRo=l(),F(Y2.$$.fragment),QGe=l(),Hi=a("h2"),K2=a("a"),Ege=a("span"),F(vL.$$.fragment),dRo=l(),Cge=a("span"),cRo=o("AutoModelForSeq2SeqLM"),HGe=l(),Ro=a("div"),F(FL.$$.fragment),fRo=l(),Ui=a("p"),mRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uO=a("a"),gRo=o("from_pretrained()"),hRo=o(" class method or the "),bO=a("a"),pRo=o("from_config()"),_Ro=o(` class
method.`),uRo=l(),TL=a("p"),bRo=o("This class cannot be instantiated directly using "),wge=a("code"),vRo=o("__init__()"),FRo=o(" (throws an error)."),TRo=l(),ct=a("div"),F(ML.$$.fragment),MRo=l(),Age=a("p"),ERo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CRo=l(),Ji=a("p"),wRo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),ARo=o("not"),LRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),yRo=o("from_pretrained()"),xRo=o(" to load the model weights."),$Ro=l(),F(Z2.$$.fragment),kRo=l(),eo=a("div"),F(EL.$$.fragment),SRo=l(),yge=a("p"),RRo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PRo=l(),Na=a("p"),BRo=o("The model class to instantiate is selected based on the "),xge=a("code"),IRo=o("model_type"),NRo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),qRo=o("pretrained_model_name_or_path"),jRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),DRo=o("pretrained_model_name_or_path"),GRo=o(":"),ORo=l(),pe=a("ul"),eb=a("li"),Sge=a("strong"),VRo=o("bart"),XRo=o(" \u2014 "),FO=a("a"),zRo=o("BartForConditionalGeneration"),WRo=o(" (BART model)"),QRo=l(),ob=a("li"),Rge=a("strong"),HRo=o("bigbird_pegasus"),URo=o(" \u2014 "),TO=a("a"),JRo=o("BigBirdPegasusForConditionalGeneration"),YRo=o(" (BigBird-Pegasus model)"),KRo=l(),rb=a("li"),Pge=a("strong"),ZRo=o("blenderbot"),ePo=o(" \u2014 "),MO=a("a"),oPo=o("BlenderbotForConditionalGeneration"),rPo=o(" (Blenderbot model)"),tPo=l(),tb=a("li"),Bge=a("strong"),aPo=o("blenderbot-small"),nPo=o(" \u2014 "),EO=a("a"),sPo=o("BlenderbotSmallForConditionalGeneration"),lPo=o(" (BlenderbotSmall model)"),iPo=l(),ab=a("li"),Ige=a("strong"),dPo=o("encoder-decoder"),cPo=o(" \u2014 "),CO=a("a"),fPo=o("EncoderDecoderModel"),mPo=o(" (Encoder decoder model)"),gPo=l(),nb=a("li"),Nge=a("strong"),hPo=o("fsmt"),pPo=o(" \u2014 "),wO=a("a"),_Po=o("FSMTForConditionalGeneration"),uPo=o(" (FairSeq Machine-Translation model)"),bPo=l(),sb=a("li"),qge=a("strong"),vPo=o("led"),FPo=o(" \u2014 "),AO=a("a"),TPo=o("LEDForConditionalGeneration"),MPo=o(" (LED model)"),EPo=l(),lb=a("li"),jge=a("strong"),CPo=o("longt5"),wPo=o(" \u2014 "),LO=a("a"),APo=o("LongT5ForConditionalGeneration"),LPo=o(" (LongT5 model)"),yPo=l(),ib=a("li"),Dge=a("strong"),xPo=o("m2m_100"),$Po=o(" \u2014 "),yO=a("a"),kPo=o("M2M100ForConditionalGeneration"),SPo=o(" (M2M100 model)"),RPo=l(),db=a("li"),Gge=a("strong"),PPo=o("marian"),BPo=o(" \u2014 "),xO=a("a"),IPo=o("MarianMTModel"),NPo=o(" (Marian model)"),qPo=l(),cb=a("li"),Oge=a("strong"),jPo=o("mbart"),DPo=o(" \u2014 "),$O=a("a"),GPo=o("MBartForConditionalGeneration"),OPo=o(" (mBART model)"),VPo=l(),fb=a("li"),Vge=a("strong"),XPo=o("mt5"),zPo=o(" \u2014 "),kO=a("a"),WPo=o("MT5ForConditionalGeneration"),QPo=o(" (MT5 model)"),HPo=l(),mb=a("li"),Xge=a("strong"),UPo=o("pegasus"),JPo=o(" \u2014 "),SO=a("a"),YPo=o("PegasusForConditionalGeneration"),KPo=o(" (Pegasus model)"),ZPo=l(),gb=a("li"),zge=a("strong"),eBo=o("plbart"),oBo=o(" \u2014 "),RO=a("a"),rBo=o("PLBartForConditionalGeneration"),tBo=o(" (PLBart model)"),aBo=l(),hb=a("li"),Wge=a("strong"),nBo=o("prophetnet"),sBo=o(" \u2014 "),PO=a("a"),lBo=o("ProphetNetForConditionalGeneration"),iBo=o(" (ProphetNet model)"),dBo=l(),pb=a("li"),Qge=a("strong"),cBo=o("t5"),fBo=o(" \u2014 "),BO=a("a"),mBo=o("T5ForConditionalGeneration"),gBo=o(" (T5 model)"),hBo=l(),_b=a("li"),Hge=a("strong"),pBo=o("xlm-prophetnet"),_Bo=o(" \u2014 "),IO=a("a"),uBo=o("XLMProphetNetForConditionalGeneration"),bBo=o(" (XLM-ProphetNet model)"),vBo=l(),ub=a("p"),FBo=o("The model is set in evaluation mode by default using "),Uge=a("code"),TBo=o("model.eval()"),MBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),EBo=o("model.train()"),CBo=l(),F(bb.$$.fragment),UGe=l(),Yi=a("h2"),vb=a("a"),Yge=a("span"),F(CL.$$.fragment),wBo=l(),Kge=a("span"),ABo=o("AutoModelForSequenceClassification"),JGe=l(),Po=a("div"),F(wL.$$.fragment),LBo=l(),Ki=a("p"),yBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NO=a("a"),xBo=o("from_pretrained()"),$Bo=o(" class method or the "),qO=a("a"),kBo=o("from_config()"),SBo=o(` class
method.`),RBo=l(),AL=a("p"),PBo=o("This class cannot be instantiated directly using "),Zge=a("code"),BBo=o("__init__()"),IBo=o(" (throws an error)."),NBo=l(),ft=a("div"),F(LL.$$.fragment),qBo=l(),ehe=a("p"),jBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DBo=l(),Zi=a("p"),GBo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),OBo=o("not"),VBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=a("a"),XBo=o("from_pretrained()"),zBo=o(" to load the model weights."),WBo=l(),F(Fb.$$.fragment),QBo=l(),oo=a("div"),F(yL.$$.fragment),HBo=l(),rhe=a("p"),UBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JBo=l(),qa=a("p"),YBo=o("The model class to instantiate is selected based on the "),the=a("code"),KBo=o("model_type"),ZBo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),eIo=o("pretrained_model_name_or_path"),oIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),rIo=o("pretrained_model_name_or_path"),tIo=o(":"),aIo=l(),N=a("ul"),Tb=a("li"),she=a("strong"),nIo=o("albert"),sIo=o(" \u2014 "),DO=a("a"),lIo=o("AlbertForSequenceClassification"),iIo=o(" (ALBERT model)"),dIo=l(),Mb=a("li"),lhe=a("strong"),cIo=o("bart"),fIo=o(" \u2014 "),GO=a("a"),mIo=o("BartForSequenceClassification"),gIo=o(" (BART model)"),hIo=l(),Eb=a("li"),ihe=a("strong"),pIo=o("bert"),_Io=o(" \u2014 "),OO=a("a"),uIo=o("BertForSequenceClassification"),bIo=o(" (BERT model)"),vIo=l(),Cb=a("li"),dhe=a("strong"),FIo=o("big_bird"),TIo=o(" \u2014 "),VO=a("a"),MIo=o("BigBirdForSequenceClassification"),EIo=o(" (BigBird model)"),CIo=l(),wb=a("li"),che=a("strong"),wIo=o("bigbird_pegasus"),AIo=o(" \u2014 "),XO=a("a"),LIo=o("BigBirdPegasusForSequenceClassification"),yIo=o(" (BigBird-Pegasus model)"),xIo=l(),Ab=a("li"),fhe=a("strong"),$Io=o("bloom"),kIo=o(" \u2014 "),zO=a("a"),SIo=o("BloomForSequenceClassification"),RIo=o(" (BLOOM model)"),PIo=l(),Lb=a("li"),mhe=a("strong"),BIo=o("camembert"),IIo=o(" \u2014 "),WO=a("a"),NIo=o("CamembertForSequenceClassification"),qIo=o(" (CamemBERT model)"),jIo=l(),yb=a("li"),ghe=a("strong"),DIo=o("canine"),GIo=o(" \u2014 "),QO=a("a"),OIo=o("CanineForSequenceClassification"),VIo=o(" (CANINE model)"),XIo=l(),xb=a("li"),hhe=a("strong"),zIo=o("convbert"),WIo=o(" \u2014 "),HO=a("a"),QIo=o("ConvBertForSequenceClassification"),HIo=o(" (ConvBERT model)"),UIo=l(),$b=a("li"),phe=a("strong"),JIo=o("ctrl"),YIo=o(" \u2014 "),UO=a("a"),KIo=o("CTRLForSequenceClassification"),ZIo=o(" (CTRL model)"),eNo=l(),kb=a("li"),_he=a("strong"),oNo=o("data2vec-text"),rNo=o(" \u2014 "),JO=a("a"),tNo=o("Data2VecTextForSequenceClassification"),aNo=o(" (Data2VecText model)"),nNo=l(),Sb=a("li"),uhe=a("strong"),sNo=o("deberta"),lNo=o(" \u2014 "),YO=a("a"),iNo=o("DebertaForSequenceClassification"),dNo=o(" (DeBERTa model)"),cNo=l(),Rb=a("li"),bhe=a("strong"),fNo=o("deberta-v2"),mNo=o(" \u2014 "),KO=a("a"),gNo=o("DebertaV2ForSequenceClassification"),hNo=o(" (DeBERTa-v2 model)"),pNo=l(),Pb=a("li"),vhe=a("strong"),_No=o("distilbert"),uNo=o(" \u2014 "),ZO=a("a"),bNo=o("DistilBertForSequenceClassification"),vNo=o(" (DistilBERT model)"),FNo=l(),Bb=a("li"),Fhe=a("strong"),TNo=o("electra"),MNo=o(" \u2014 "),eV=a("a"),ENo=o("ElectraForSequenceClassification"),CNo=o(" (ELECTRA model)"),wNo=l(),Ib=a("li"),The=a("strong"),ANo=o("flaubert"),LNo=o(" \u2014 "),oV=a("a"),yNo=o("FlaubertForSequenceClassification"),xNo=o(" (FlauBERT model)"),$No=l(),Nb=a("li"),Mhe=a("strong"),kNo=o("fnet"),SNo=o(" \u2014 "),rV=a("a"),RNo=o("FNetForSequenceClassification"),PNo=o(" (FNet model)"),BNo=l(),qb=a("li"),Ehe=a("strong"),INo=o("funnel"),NNo=o(" \u2014 "),tV=a("a"),qNo=o("FunnelForSequenceClassification"),jNo=o(" (Funnel Transformer model)"),DNo=l(),jb=a("li"),Che=a("strong"),GNo=o("gpt2"),ONo=o(" \u2014 "),aV=a("a"),VNo=o("GPT2ForSequenceClassification"),XNo=o(" (OpenAI GPT-2 model)"),zNo=l(),Db=a("li"),whe=a("strong"),WNo=o("gpt_neo"),QNo=o(" \u2014 "),nV=a("a"),HNo=o("GPTNeoForSequenceClassification"),UNo=o(" (GPT Neo model)"),JNo=l(),Gb=a("li"),Ahe=a("strong"),YNo=o("gptj"),KNo=o(" \u2014 "),sV=a("a"),ZNo=o("GPTJForSequenceClassification"),eqo=o(" (GPT-J model)"),oqo=l(),Ob=a("li"),Lhe=a("strong"),rqo=o("ibert"),tqo=o(" \u2014 "),lV=a("a"),aqo=o("IBertForSequenceClassification"),nqo=o(" (I-BERT model)"),sqo=l(),Vb=a("li"),yhe=a("strong"),lqo=o("layoutlm"),iqo=o(" \u2014 "),iV=a("a"),dqo=o("LayoutLMForSequenceClassification"),cqo=o(" (LayoutLM model)"),fqo=l(),Xb=a("li"),xhe=a("strong"),mqo=o("layoutlmv2"),gqo=o(" \u2014 "),dV=a("a"),hqo=o("LayoutLMv2ForSequenceClassification"),pqo=o(" (LayoutLMv2 model)"),_qo=l(),zb=a("li"),$he=a("strong"),uqo=o("layoutlmv3"),bqo=o(" \u2014 "),cV=a("a"),vqo=o("LayoutLMv3ForSequenceClassification"),Fqo=o(" (LayoutLMv3 model)"),Tqo=l(),Wb=a("li"),khe=a("strong"),Mqo=o("led"),Eqo=o(" \u2014 "),fV=a("a"),Cqo=o("LEDForSequenceClassification"),wqo=o(" (LED model)"),Aqo=l(),Qb=a("li"),She=a("strong"),Lqo=o("longformer"),yqo=o(" \u2014 "),mV=a("a"),xqo=o("LongformerForSequenceClassification"),$qo=o(" (Longformer model)"),kqo=l(),Hb=a("li"),Rhe=a("strong"),Sqo=o("mbart"),Rqo=o(" \u2014 "),gV=a("a"),Pqo=o("MBartForSequenceClassification"),Bqo=o(" (mBART model)"),Iqo=l(),Ub=a("li"),Phe=a("strong"),Nqo=o("megatron-bert"),qqo=o(" \u2014 "),hV=a("a"),jqo=o("MegatronBertForSequenceClassification"),Dqo=o(" (Megatron-BERT model)"),Gqo=l(),Jb=a("li"),Bhe=a("strong"),Oqo=o("mobilebert"),Vqo=o(" \u2014 "),pV=a("a"),Xqo=o("MobileBertForSequenceClassification"),zqo=o(" (MobileBERT model)"),Wqo=l(),Yb=a("li"),Ihe=a("strong"),Qqo=o("mpnet"),Hqo=o(" \u2014 "),_V=a("a"),Uqo=o("MPNetForSequenceClassification"),Jqo=o(" (MPNet model)"),Yqo=l(),Kb=a("li"),Nhe=a("strong"),Kqo=o("nystromformer"),Zqo=o(" \u2014 "),uV=a("a"),ejo=o("NystromformerForSequenceClassification"),ojo=o(" (Nystr\xF6mformer model)"),rjo=l(),Zb=a("li"),qhe=a("strong"),tjo=o("openai-gpt"),ajo=o(" \u2014 "),bV=a("a"),njo=o("OpenAIGPTForSequenceClassification"),sjo=o(" (OpenAI GPT model)"),ljo=l(),e4=a("li"),jhe=a("strong"),ijo=o("perceiver"),djo=o(" \u2014 "),vV=a("a"),cjo=o("PerceiverForSequenceClassification"),fjo=o(" (Perceiver model)"),mjo=l(),o4=a("li"),Dhe=a("strong"),gjo=o("plbart"),hjo=o(" \u2014 "),FV=a("a"),pjo=o("PLBartForSequenceClassification"),_jo=o(" (PLBart model)"),ujo=l(),r4=a("li"),Ghe=a("strong"),bjo=o("qdqbert"),vjo=o(" \u2014 "),TV=a("a"),Fjo=o("QDQBertForSequenceClassification"),Tjo=o(" (QDQBert model)"),Mjo=l(),t4=a("li"),Ohe=a("strong"),Ejo=o("reformer"),Cjo=o(" \u2014 "),MV=a("a"),wjo=o("ReformerForSequenceClassification"),Ajo=o(" (Reformer model)"),Ljo=l(),a4=a("li"),Vhe=a("strong"),yjo=o("rembert"),xjo=o(" \u2014 "),EV=a("a"),$jo=o("RemBertForSequenceClassification"),kjo=o(" (RemBERT model)"),Sjo=l(),n4=a("li"),Xhe=a("strong"),Rjo=o("roberta"),Pjo=o(" \u2014 "),CV=a("a"),Bjo=o("RobertaForSequenceClassification"),Ijo=o(" (RoBERTa model)"),Njo=l(),s4=a("li"),zhe=a("strong"),qjo=o("roformer"),jjo=o(" \u2014 "),wV=a("a"),Djo=o("RoFormerForSequenceClassification"),Gjo=o(" (RoFormer model)"),Ojo=l(),l4=a("li"),Whe=a("strong"),Vjo=o("squeezebert"),Xjo=o(" \u2014 "),AV=a("a"),zjo=o("SqueezeBertForSequenceClassification"),Wjo=o(" (SqueezeBERT model)"),Qjo=l(),i4=a("li"),Qhe=a("strong"),Hjo=o("tapas"),Ujo=o(" \u2014 "),LV=a("a"),Jjo=o("TapasForSequenceClassification"),Yjo=o(" (TAPAS model)"),Kjo=l(),d4=a("li"),Hhe=a("strong"),Zjo=o("transfo-xl"),eDo=o(" \u2014 "),yV=a("a"),oDo=o("TransfoXLForSequenceClassification"),rDo=o(" (Transformer-XL model)"),tDo=l(),c4=a("li"),Uhe=a("strong"),aDo=o("xlm"),nDo=o(" \u2014 "),xV=a("a"),sDo=o("XLMForSequenceClassification"),lDo=o(" (XLM model)"),iDo=l(),f4=a("li"),Jhe=a("strong"),dDo=o("xlm-roberta"),cDo=o(" \u2014 "),$V=a("a"),fDo=o("XLMRobertaForSequenceClassification"),mDo=o(" (XLM-RoBERTa model)"),gDo=l(),m4=a("li"),Yhe=a("strong"),hDo=o("xlm-roberta-xl"),pDo=o(" \u2014 "),kV=a("a"),_Do=o("XLMRobertaXLForSequenceClassification"),uDo=o(" (XLM-RoBERTa-XL model)"),bDo=l(),g4=a("li"),Khe=a("strong"),vDo=o("xlnet"),FDo=o(" \u2014 "),SV=a("a"),TDo=o("XLNetForSequenceClassification"),MDo=o(" (XLNet model)"),EDo=l(),h4=a("li"),Zhe=a("strong"),CDo=o("yoso"),wDo=o(" \u2014 "),RV=a("a"),ADo=o("YosoForSequenceClassification"),LDo=o(" (YOSO model)"),yDo=l(),p4=a("p"),xDo=o("The model is set in evaluation mode by default using "),epe=a("code"),$Do=o("model.eval()"),kDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),SDo=o("model.train()"),RDo=l(),F(_4.$$.fragment),YGe=l(),ed=a("h2"),u4=a("a"),rpe=a("span"),F(xL.$$.fragment),PDo=l(),tpe=a("span"),BDo=o("AutoModelForMultipleChoice"),KGe=l(),Bo=a("div"),F($L.$$.fragment),IDo=l(),od=a("p"),NDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PV=a("a"),qDo=o("from_pretrained()"),jDo=o(" class method or the "),BV=a("a"),DDo=o("from_config()"),GDo=o(` class
method.`),ODo=l(),kL=a("p"),VDo=o("This class cannot be instantiated directly using "),ape=a("code"),XDo=o("__init__()"),zDo=o(" (throws an error)."),WDo=l(),mt=a("div"),F(SL.$$.fragment),QDo=l(),npe=a("p"),HDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UDo=l(),rd=a("p"),JDo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),YDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),ZDo=o("from_pretrained()"),eGo=o(" to load the model weights."),oGo=l(),F(b4.$$.fragment),rGo=l(),ro=a("div"),F(RL.$$.fragment),tGo=l(),lpe=a("p"),aGo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nGo=l(),ja=a("p"),sGo=o("The model class to instantiate is selected based on the "),ipe=a("code"),lGo=o("model_type"),iGo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),dGo=o("pretrained_model_name_or_path"),cGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),fGo=o("pretrained_model_name_or_path"),mGo=o(":"),gGo=l(),Z=a("ul"),v4=a("li"),fpe=a("strong"),hGo=o("albert"),pGo=o(" \u2014 "),NV=a("a"),_Go=o("AlbertForMultipleChoice"),uGo=o(" (ALBERT model)"),bGo=l(),F4=a("li"),mpe=a("strong"),vGo=o("bert"),FGo=o(" \u2014 "),qV=a("a"),TGo=o("BertForMultipleChoice"),MGo=o(" (BERT model)"),EGo=l(),T4=a("li"),gpe=a("strong"),CGo=o("big_bird"),wGo=o(" \u2014 "),jV=a("a"),AGo=o("BigBirdForMultipleChoice"),LGo=o(" (BigBird model)"),yGo=l(),M4=a("li"),hpe=a("strong"),xGo=o("camembert"),$Go=o(" \u2014 "),DV=a("a"),kGo=o("CamembertForMultipleChoice"),SGo=o(" (CamemBERT model)"),RGo=l(),E4=a("li"),ppe=a("strong"),PGo=o("canine"),BGo=o(" \u2014 "),GV=a("a"),IGo=o("CanineForMultipleChoice"),NGo=o(" (CANINE model)"),qGo=l(),C4=a("li"),_pe=a("strong"),jGo=o("convbert"),DGo=o(" \u2014 "),OV=a("a"),GGo=o("ConvBertForMultipleChoice"),OGo=o(" (ConvBERT model)"),VGo=l(),w4=a("li"),upe=a("strong"),XGo=o("data2vec-text"),zGo=o(" \u2014 "),VV=a("a"),WGo=o("Data2VecTextForMultipleChoice"),QGo=o(" (Data2VecText model)"),HGo=l(),A4=a("li"),bpe=a("strong"),UGo=o("deberta-v2"),JGo=o(" \u2014 "),XV=a("a"),YGo=o("DebertaV2ForMultipleChoice"),KGo=o(" (DeBERTa-v2 model)"),ZGo=l(),L4=a("li"),vpe=a("strong"),eOo=o("distilbert"),oOo=o(" \u2014 "),zV=a("a"),rOo=o("DistilBertForMultipleChoice"),tOo=o(" (DistilBERT model)"),aOo=l(),y4=a("li"),Fpe=a("strong"),nOo=o("electra"),sOo=o(" \u2014 "),WV=a("a"),lOo=o("ElectraForMultipleChoice"),iOo=o(" (ELECTRA model)"),dOo=l(),x4=a("li"),Tpe=a("strong"),cOo=o("flaubert"),fOo=o(" \u2014 "),QV=a("a"),mOo=o("FlaubertForMultipleChoice"),gOo=o(" (FlauBERT model)"),hOo=l(),$4=a("li"),Mpe=a("strong"),pOo=o("fnet"),_Oo=o(" \u2014 "),HV=a("a"),uOo=o("FNetForMultipleChoice"),bOo=o(" (FNet model)"),vOo=l(),k4=a("li"),Epe=a("strong"),FOo=o("funnel"),TOo=o(" \u2014 "),UV=a("a"),MOo=o("FunnelForMultipleChoice"),EOo=o(" (Funnel Transformer model)"),COo=l(),S4=a("li"),Cpe=a("strong"),wOo=o("ibert"),AOo=o(" \u2014 "),JV=a("a"),LOo=o("IBertForMultipleChoice"),yOo=o(" (I-BERT model)"),xOo=l(),R4=a("li"),wpe=a("strong"),$Oo=o("longformer"),kOo=o(" \u2014 "),YV=a("a"),SOo=o("LongformerForMultipleChoice"),ROo=o(" (Longformer model)"),POo=l(),P4=a("li"),Ape=a("strong"),BOo=o("megatron-bert"),IOo=o(" \u2014 "),KV=a("a"),NOo=o("MegatronBertForMultipleChoice"),qOo=o(" (Megatron-BERT model)"),jOo=l(),B4=a("li"),Lpe=a("strong"),DOo=o("mobilebert"),GOo=o(" \u2014 "),ZV=a("a"),OOo=o("MobileBertForMultipleChoice"),VOo=o(" (MobileBERT model)"),XOo=l(),I4=a("li"),ype=a("strong"),zOo=o("mpnet"),WOo=o(" \u2014 "),eX=a("a"),QOo=o("MPNetForMultipleChoice"),HOo=o(" (MPNet model)"),UOo=l(),N4=a("li"),xpe=a("strong"),JOo=o("nystromformer"),YOo=o(" \u2014 "),oX=a("a"),KOo=o("NystromformerForMultipleChoice"),ZOo=o(" (Nystr\xF6mformer model)"),eVo=l(),q4=a("li"),$pe=a("strong"),oVo=o("qdqbert"),rVo=o(" \u2014 "),rX=a("a"),tVo=o("QDQBertForMultipleChoice"),aVo=o(" (QDQBert model)"),nVo=l(),j4=a("li"),kpe=a("strong"),sVo=o("rembert"),lVo=o(" \u2014 "),tX=a("a"),iVo=o("RemBertForMultipleChoice"),dVo=o(" (RemBERT model)"),cVo=l(),D4=a("li"),Spe=a("strong"),fVo=o("roberta"),mVo=o(" \u2014 "),aX=a("a"),gVo=o("RobertaForMultipleChoice"),hVo=o(" (RoBERTa model)"),pVo=l(),G4=a("li"),Rpe=a("strong"),_Vo=o("roformer"),uVo=o(" \u2014 "),nX=a("a"),bVo=o("RoFormerForMultipleChoice"),vVo=o(" (RoFormer model)"),FVo=l(),O4=a("li"),Ppe=a("strong"),TVo=o("squeezebert"),MVo=o(" \u2014 "),sX=a("a"),EVo=o("SqueezeBertForMultipleChoice"),CVo=o(" (SqueezeBERT model)"),wVo=l(),V4=a("li"),Bpe=a("strong"),AVo=o("xlm"),LVo=o(" \u2014 "),lX=a("a"),yVo=o("XLMForMultipleChoice"),xVo=o(" (XLM model)"),$Vo=l(),X4=a("li"),Ipe=a("strong"),kVo=o("xlm-roberta"),SVo=o(" \u2014 "),iX=a("a"),RVo=o("XLMRobertaForMultipleChoice"),PVo=o(" (XLM-RoBERTa model)"),BVo=l(),z4=a("li"),Npe=a("strong"),IVo=o("xlm-roberta-xl"),NVo=o(" \u2014 "),dX=a("a"),qVo=o("XLMRobertaXLForMultipleChoice"),jVo=o(" (XLM-RoBERTa-XL model)"),DVo=l(),W4=a("li"),qpe=a("strong"),GVo=o("xlnet"),OVo=o(" \u2014 "),cX=a("a"),VVo=o("XLNetForMultipleChoice"),XVo=o(" (XLNet model)"),zVo=l(),Q4=a("li"),jpe=a("strong"),WVo=o("yoso"),QVo=o(" \u2014 "),fX=a("a"),HVo=o("YosoForMultipleChoice"),UVo=o(" (YOSO model)"),JVo=l(),H4=a("p"),YVo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),KVo=o("model.eval()"),ZVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),eXo=o("model.train()"),oXo=l(),F(U4.$$.fragment),ZGe=l(),td=a("h2"),J4=a("a"),Ope=a("span"),F(PL.$$.fragment),rXo=l(),Vpe=a("span"),tXo=o("AutoModelForNextSentencePrediction"),eOe=l(),Io=a("div"),F(BL.$$.fragment),aXo=l(),ad=a("p"),nXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mX=a("a"),sXo=o("from_pretrained()"),lXo=o(" class method or the "),gX=a("a"),iXo=o("from_config()"),dXo=o(` class
method.`),cXo=l(),IL=a("p"),fXo=o("This class cannot be instantiated directly using "),Xpe=a("code"),mXo=o("__init__()"),gXo=o(" (throws an error)."),hXo=l(),gt=a("div"),F(NL.$$.fragment),pXo=l(),zpe=a("p"),_Xo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uXo=l(),nd=a("p"),bXo=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),vXo=o("not"),FXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),TXo=o("from_pretrained()"),MXo=o(" to load the model weights."),EXo=l(),F(Y4.$$.fragment),CXo=l(),to=a("div"),F(qL.$$.fragment),wXo=l(),Qpe=a("p"),AXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LXo=l(),Da=a("p"),yXo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),xXo=o("model_type"),$Xo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),kXo=o("pretrained_model_name_or_path"),SXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),RXo=o("pretrained_model_name_or_path"),PXo=o(":"),BXo=l(),Zr=a("ul"),K4=a("li"),Ype=a("strong"),IXo=o("bert"),NXo=o(" \u2014 "),pX=a("a"),qXo=o("BertForNextSentencePrediction"),jXo=o(" (BERT model)"),DXo=l(),Z4=a("li"),Kpe=a("strong"),GXo=o("fnet"),OXo=o(" \u2014 "),_X=a("a"),VXo=o("FNetForNextSentencePrediction"),XXo=o(" (FNet model)"),zXo=l(),ev=a("li"),Zpe=a("strong"),WXo=o("megatron-bert"),QXo=o(" \u2014 "),uX=a("a"),HXo=o("MegatronBertForNextSentencePrediction"),UXo=o(" (Megatron-BERT model)"),JXo=l(),ov=a("li"),e_e=a("strong"),YXo=o("mobilebert"),KXo=o(" \u2014 "),bX=a("a"),ZXo=o("MobileBertForNextSentencePrediction"),ezo=o(" (MobileBERT model)"),ozo=l(),rv=a("li"),o_e=a("strong"),rzo=o("qdqbert"),tzo=o(" \u2014 "),vX=a("a"),azo=o("QDQBertForNextSentencePrediction"),nzo=o(" (QDQBert model)"),szo=l(),tv=a("p"),lzo=o("The model is set in evaluation mode by default using "),r_e=a("code"),izo=o("model.eval()"),dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),czo=o("model.train()"),fzo=l(),F(av.$$.fragment),oOe=l(),sd=a("h2"),nv=a("a"),a_e=a("span"),F(jL.$$.fragment),mzo=l(),n_e=a("span"),gzo=o("AutoModelForTokenClassification"),rOe=l(),No=a("div"),F(DL.$$.fragment),hzo=l(),ld=a("p"),pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FX=a("a"),_zo=o("from_pretrained()"),uzo=o(" class method or the "),TX=a("a"),bzo=o("from_config()"),vzo=o(` class
method.`),Fzo=l(),GL=a("p"),Tzo=o("This class cannot be instantiated directly using "),s_e=a("code"),Mzo=o("__init__()"),Ezo=o(" (throws an error)."),Czo=l(),ht=a("div"),F(OL.$$.fragment),wzo=l(),l_e=a("p"),Azo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lzo=l(),id=a("p"),yzo=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),xzo=o("not"),$zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),kzo=o("from_pretrained()"),Szo=o(" to load the model weights."),Rzo=l(),F(sv.$$.fragment),Pzo=l(),ao=a("div"),F(VL.$$.fragment),Bzo=l(),d_e=a("p"),Izo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nzo=l(),Ga=a("p"),qzo=o("The model class to instantiate is selected based on the "),c_e=a("code"),jzo=o("model_type"),Dzo=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),Gzo=o("pretrained_model_name_or_path"),Ozo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),Vzo=o("pretrained_model_name_or_path"),Xzo=o(":"),zzo=l(),H=a("ul"),lv=a("li"),g_e=a("strong"),Wzo=o("albert"),Qzo=o(" \u2014 "),EX=a("a"),Hzo=o("AlbertForTokenClassification"),Uzo=o(" (ALBERT model)"),Jzo=l(),iv=a("li"),h_e=a("strong"),Yzo=o("bert"),Kzo=o(" \u2014 "),CX=a("a"),Zzo=o("BertForTokenClassification"),eWo=o(" (BERT model)"),oWo=l(),dv=a("li"),p_e=a("strong"),rWo=o("big_bird"),tWo=o(" \u2014 "),wX=a("a"),aWo=o("BigBirdForTokenClassification"),nWo=o(" (BigBird model)"),sWo=l(),cv=a("li"),__e=a("strong"),lWo=o("bloom"),iWo=o(" \u2014 "),AX=a("a"),dWo=o("BloomForTokenClassification"),cWo=o(" (BLOOM model)"),fWo=l(),fv=a("li"),u_e=a("strong"),mWo=o("camembert"),gWo=o(" \u2014 "),LX=a("a"),hWo=o("CamembertForTokenClassification"),pWo=o(" (CamemBERT model)"),_Wo=l(),mv=a("li"),b_e=a("strong"),uWo=o("canine"),bWo=o(" \u2014 "),yX=a("a"),vWo=o("CanineForTokenClassification"),FWo=o(" (CANINE model)"),TWo=l(),gv=a("li"),v_e=a("strong"),MWo=o("convbert"),EWo=o(" \u2014 "),xX=a("a"),CWo=o("ConvBertForTokenClassification"),wWo=o(" (ConvBERT model)"),AWo=l(),hv=a("li"),F_e=a("strong"),LWo=o("data2vec-text"),yWo=o(" \u2014 "),$X=a("a"),xWo=o("Data2VecTextForTokenClassification"),$Wo=o(" (Data2VecText model)"),kWo=l(),pv=a("li"),T_e=a("strong"),SWo=o("deberta"),RWo=o(" \u2014 "),kX=a("a"),PWo=o("DebertaForTokenClassification"),BWo=o(" (DeBERTa model)"),IWo=l(),_v=a("li"),M_e=a("strong"),NWo=o("deberta-v2"),qWo=o(" \u2014 "),SX=a("a"),jWo=o("DebertaV2ForTokenClassification"),DWo=o(" (DeBERTa-v2 model)"),GWo=l(),uv=a("li"),E_e=a("strong"),OWo=o("distilbert"),VWo=o(" \u2014 "),RX=a("a"),XWo=o("DistilBertForTokenClassification"),zWo=o(" (DistilBERT model)"),WWo=l(),bv=a("li"),C_e=a("strong"),QWo=o("electra"),HWo=o(" \u2014 "),PX=a("a"),UWo=o("ElectraForTokenClassification"),JWo=o(" (ELECTRA model)"),YWo=l(),vv=a("li"),w_e=a("strong"),KWo=o("flaubert"),ZWo=o(" \u2014 "),BX=a("a"),eQo=o("FlaubertForTokenClassification"),oQo=o(" (FlauBERT model)"),rQo=l(),Fv=a("li"),A_e=a("strong"),tQo=o("fnet"),aQo=o(" \u2014 "),IX=a("a"),nQo=o("FNetForTokenClassification"),sQo=o(" (FNet model)"),lQo=l(),Tv=a("li"),L_e=a("strong"),iQo=o("funnel"),dQo=o(" \u2014 "),NX=a("a"),cQo=o("FunnelForTokenClassification"),fQo=o(" (Funnel Transformer model)"),mQo=l(),Mv=a("li"),y_e=a("strong"),gQo=o("gpt2"),hQo=o(" \u2014 "),qX=a("a"),pQo=o("GPT2ForTokenClassification"),_Qo=o(" (OpenAI GPT-2 model)"),uQo=l(),Ev=a("li"),x_e=a("strong"),bQo=o("ibert"),vQo=o(" \u2014 "),jX=a("a"),FQo=o("IBertForTokenClassification"),TQo=o(" (I-BERT model)"),MQo=l(),Cv=a("li"),$_e=a("strong"),EQo=o("layoutlm"),CQo=o(" \u2014 "),DX=a("a"),wQo=o("LayoutLMForTokenClassification"),AQo=o(" (LayoutLM model)"),LQo=l(),wv=a("li"),k_e=a("strong"),yQo=o("layoutlmv2"),xQo=o(" \u2014 "),GX=a("a"),$Qo=o("LayoutLMv2ForTokenClassification"),kQo=o(" (LayoutLMv2 model)"),SQo=l(),Av=a("li"),S_e=a("strong"),RQo=o("layoutlmv3"),PQo=o(" \u2014 "),OX=a("a"),BQo=o("LayoutLMv3ForTokenClassification"),IQo=o(" (LayoutLMv3 model)"),NQo=l(),Lv=a("li"),R_e=a("strong"),qQo=o("longformer"),jQo=o(" \u2014 "),VX=a("a"),DQo=o("LongformerForTokenClassification"),GQo=o(" (Longformer model)"),OQo=l(),yv=a("li"),P_e=a("strong"),VQo=o("megatron-bert"),XQo=o(" \u2014 "),XX=a("a"),zQo=o("MegatronBertForTokenClassification"),WQo=o(" (Megatron-BERT model)"),QQo=l(),xv=a("li"),B_e=a("strong"),HQo=o("mobilebert"),UQo=o(" \u2014 "),zX=a("a"),JQo=o("MobileBertForTokenClassification"),YQo=o(" (MobileBERT model)"),KQo=l(),$v=a("li"),I_e=a("strong"),ZQo=o("mpnet"),eHo=o(" \u2014 "),WX=a("a"),oHo=o("MPNetForTokenClassification"),rHo=o(" (MPNet model)"),tHo=l(),kv=a("li"),N_e=a("strong"),aHo=o("nystromformer"),nHo=o(" \u2014 "),QX=a("a"),sHo=o("NystromformerForTokenClassification"),lHo=o(" (Nystr\xF6mformer model)"),iHo=l(),Sv=a("li"),q_e=a("strong"),dHo=o("qdqbert"),cHo=o(" \u2014 "),HX=a("a"),fHo=o("QDQBertForTokenClassification"),mHo=o(" (QDQBert model)"),gHo=l(),Rv=a("li"),j_e=a("strong"),hHo=o("rembert"),pHo=o(" \u2014 "),UX=a("a"),_Ho=o("RemBertForTokenClassification"),uHo=o(" (RemBERT model)"),bHo=l(),Pv=a("li"),D_e=a("strong"),vHo=o("roberta"),FHo=o(" \u2014 "),JX=a("a"),THo=o("RobertaForTokenClassification"),MHo=o(" (RoBERTa model)"),EHo=l(),Bv=a("li"),G_e=a("strong"),CHo=o("roformer"),wHo=o(" \u2014 "),YX=a("a"),AHo=o("RoFormerForTokenClassification"),LHo=o(" (RoFormer model)"),yHo=l(),Iv=a("li"),O_e=a("strong"),xHo=o("squeezebert"),$Ho=o(" \u2014 "),KX=a("a"),kHo=o("SqueezeBertForTokenClassification"),SHo=o(" (SqueezeBERT model)"),RHo=l(),Nv=a("li"),V_e=a("strong"),PHo=o("xlm"),BHo=o(" \u2014 "),ZX=a("a"),IHo=o("XLMForTokenClassification"),NHo=o(" (XLM model)"),qHo=l(),qv=a("li"),X_e=a("strong"),jHo=o("xlm-roberta"),DHo=o(" \u2014 "),ez=a("a"),GHo=o("XLMRobertaForTokenClassification"),OHo=o(" (XLM-RoBERTa model)"),VHo=l(),jv=a("li"),z_e=a("strong"),XHo=o("xlm-roberta-xl"),zHo=o(" \u2014 "),oz=a("a"),WHo=o("XLMRobertaXLForTokenClassification"),QHo=o(" (XLM-RoBERTa-XL model)"),HHo=l(),Dv=a("li"),W_e=a("strong"),UHo=o("xlnet"),JHo=o(" \u2014 "),rz=a("a"),YHo=o("XLNetForTokenClassification"),KHo=o(" (XLNet model)"),ZHo=l(),Gv=a("li"),Q_e=a("strong"),eUo=o("yoso"),oUo=o(" \u2014 "),tz=a("a"),rUo=o("YosoForTokenClassification"),tUo=o(" (YOSO model)"),aUo=l(),Ov=a("p"),nUo=o("The model is set in evaluation mode by default using "),H_e=a("code"),sUo=o("model.eval()"),lUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),iUo=o("model.train()"),dUo=l(),F(Vv.$$.fragment),tOe=l(),dd=a("h2"),Xv=a("a"),J_e=a("span"),F(XL.$$.fragment),cUo=l(),Y_e=a("span"),fUo=o("AutoModelForQuestionAnswering"),aOe=l(),qo=a("div"),F(zL.$$.fragment),mUo=l(),cd=a("p"),gUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),az=a("a"),hUo=o("from_pretrained()"),pUo=o(" class method or the "),nz=a("a"),_Uo=o("from_config()"),uUo=o(` class
method.`),bUo=l(),WL=a("p"),vUo=o("This class cannot be instantiated directly using "),K_e=a("code"),FUo=o("__init__()"),TUo=o(" (throws an error)."),MUo=l(),pt=a("div"),F(QL.$$.fragment),EUo=l(),Z_e=a("p"),CUo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wUo=l(),fd=a("p"),AUo=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),LUo=o("not"),yUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),xUo=o("from_pretrained()"),$Uo=o(" to load the model weights."),kUo=l(),F(zv.$$.fragment),SUo=l(),no=a("div"),F(HL.$$.fragment),RUo=l(),oue=a("p"),PUo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BUo=l(),Oa=a("p"),IUo=o("The model class to instantiate is selected based on the "),rue=a("code"),NUo=o("model_type"),qUo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),jUo=o("pretrained_model_name_or_path"),DUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),GUo=o("pretrained_model_name_or_path"),OUo=o(":"),VUo=l(),V=a("ul"),Wv=a("li"),nue=a("strong"),XUo=o("albert"),zUo=o(" \u2014 "),lz=a("a"),WUo=o("AlbertForQuestionAnswering"),QUo=o(" (ALBERT model)"),HUo=l(),Qv=a("li"),sue=a("strong"),UUo=o("bart"),JUo=o(" \u2014 "),iz=a("a"),YUo=o("BartForQuestionAnswering"),KUo=o(" (BART model)"),ZUo=l(),Hv=a("li"),lue=a("strong"),eJo=o("bert"),oJo=o(" \u2014 "),dz=a("a"),rJo=o("BertForQuestionAnswering"),tJo=o(" (BERT model)"),aJo=l(),Uv=a("li"),iue=a("strong"),nJo=o("big_bird"),sJo=o(" \u2014 "),cz=a("a"),lJo=o("BigBirdForQuestionAnswering"),iJo=o(" (BigBird model)"),dJo=l(),Jv=a("li"),due=a("strong"),cJo=o("bigbird_pegasus"),fJo=o(" \u2014 "),fz=a("a"),mJo=o("BigBirdPegasusForQuestionAnswering"),gJo=o(" (BigBird-Pegasus model)"),hJo=l(),Yv=a("li"),cue=a("strong"),pJo=o("camembert"),_Jo=o(" \u2014 "),mz=a("a"),uJo=o("CamembertForQuestionAnswering"),bJo=o(" (CamemBERT model)"),vJo=l(),Kv=a("li"),fue=a("strong"),FJo=o("canine"),TJo=o(" \u2014 "),gz=a("a"),MJo=o("CanineForQuestionAnswering"),EJo=o(" (CANINE model)"),CJo=l(),Zv=a("li"),mue=a("strong"),wJo=o("convbert"),AJo=o(" \u2014 "),hz=a("a"),LJo=o("ConvBertForQuestionAnswering"),yJo=o(" (ConvBERT model)"),xJo=l(),eF=a("li"),gue=a("strong"),$Jo=o("data2vec-text"),kJo=o(" \u2014 "),pz=a("a"),SJo=o("Data2VecTextForQuestionAnswering"),RJo=o(" (Data2VecText model)"),PJo=l(),oF=a("li"),hue=a("strong"),BJo=o("deberta"),IJo=o(" \u2014 "),_z=a("a"),NJo=o("DebertaForQuestionAnswering"),qJo=o(" (DeBERTa model)"),jJo=l(),rF=a("li"),pue=a("strong"),DJo=o("deberta-v2"),GJo=o(" \u2014 "),uz=a("a"),OJo=o("DebertaV2ForQuestionAnswering"),VJo=o(" (DeBERTa-v2 model)"),XJo=l(),tF=a("li"),_ue=a("strong"),zJo=o("distilbert"),WJo=o(" \u2014 "),bz=a("a"),QJo=o("DistilBertForQuestionAnswering"),HJo=o(" (DistilBERT model)"),UJo=l(),aF=a("li"),uue=a("strong"),JJo=o("electra"),YJo=o(" \u2014 "),vz=a("a"),KJo=o("ElectraForQuestionAnswering"),ZJo=o(" (ELECTRA model)"),eYo=l(),nF=a("li"),bue=a("strong"),oYo=o("flaubert"),rYo=o(" \u2014 "),Fz=a("a"),tYo=o("FlaubertForQuestionAnsweringSimple"),aYo=o(" (FlauBERT model)"),nYo=l(),sF=a("li"),vue=a("strong"),sYo=o("fnet"),lYo=o(" \u2014 "),Tz=a("a"),iYo=o("FNetForQuestionAnswering"),dYo=o(" (FNet model)"),cYo=l(),lF=a("li"),Fue=a("strong"),fYo=o("funnel"),mYo=o(" \u2014 "),Mz=a("a"),gYo=o("FunnelForQuestionAnswering"),hYo=o(" (Funnel Transformer model)"),pYo=l(),iF=a("li"),Tue=a("strong"),_Yo=o("gptj"),uYo=o(" \u2014 "),Ez=a("a"),bYo=o("GPTJForQuestionAnswering"),vYo=o(" (GPT-J model)"),FYo=l(),dF=a("li"),Mue=a("strong"),TYo=o("ibert"),MYo=o(" \u2014 "),Cz=a("a"),EYo=o("IBertForQuestionAnswering"),CYo=o(" (I-BERT model)"),wYo=l(),cF=a("li"),Eue=a("strong"),AYo=o("layoutlmv2"),LYo=o(" \u2014 "),wz=a("a"),yYo=o("LayoutLMv2ForQuestionAnswering"),xYo=o(" (LayoutLMv2 model)"),$Yo=l(),fF=a("li"),Cue=a("strong"),kYo=o("layoutlmv3"),SYo=o(" \u2014 "),Az=a("a"),RYo=o("LayoutLMv3ForQuestionAnswering"),PYo=o(" (LayoutLMv3 model)"),BYo=l(),mF=a("li"),wue=a("strong"),IYo=o("led"),NYo=o(" \u2014 "),Lz=a("a"),qYo=o("LEDForQuestionAnswering"),jYo=o(" (LED model)"),DYo=l(),gF=a("li"),Aue=a("strong"),GYo=o("longformer"),OYo=o(" \u2014 "),yz=a("a"),VYo=o("LongformerForQuestionAnswering"),XYo=o(" (Longformer model)"),zYo=l(),hF=a("li"),Lue=a("strong"),WYo=o("lxmert"),QYo=o(" \u2014 "),xz=a("a"),HYo=o("LxmertForQuestionAnswering"),UYo=o(" (LXMERT model)"),JYo=l(),pF=a("li"),yue=a("strong"),YYo=o("mbart"),KYo=o(" \u2014 "),$z=a("a"),ZYo=o("MBartForQuestionAnswering"),eKo=o(" (mBART model)"),oKo=l(),_F=a("li"),xue=a("strong"),rKo=o("megatron-bert"),tKo=o(" \u2014 "),kz=a("a"),aKo=o("MegatronBertForQuestionAnswering"),nKo=o(" (Megatron-BERT model)"),sKo=l(),uF=a("li"),$ue=a("strong"),lKo=o("mobilebert"),iKo=o(" \u2014 "),Sz=a("a"),dKo=o("MobileBertForQuestionAnswering"),cKo=o(" (MobileBERT model)"),fKo=l(),bF=a("li"),kue=a("strong"),mKo=o("mpnet"),gKo=o(" \u2014 "),Rz=a("a"),hKo=o("MPNetForQuestionAnswering"),pKo=o(" (MPNet model)"),_Ko=l(),vF=a("li"),Sue=a("strong"),uKo=o("nystromformer"),bKo=o(" \u2014 "),Pz=a("a"),vKo=o("NystromformerForQuestionAnswering"),FKo=o(" (Nystr\xF6mformer model)"),TKo=l(),FF=a("li"),Rue=a("strong"),MKo=o("qdqbert"),EKo=o(" \u2014 "),Bz=a("a"),CKo=o("QDQBertForQuestionAnswering"),wKo=o(" (QDQBert model)"),AKo=l(),TF=a("li"),Pue=a("strong"),LKo=o("reformer"),yKo=o(" \u2014 "),Iz=a("a"),xKo=o("ReformerForQuestionAnswering"),$Ko=o(" (Reformer model)"),kKo=l(),MF=a("li"),Bue=a("strong"),SKo=o("rembert"),RKo=o(" \u2014 "),Nz=a("a"),PKo=o("RemBertForQuestionAnswering"),BKo=o(" (RemBERT model)"),IKo=l(),EF=a("li"),Iue=a("strong"),NKo=o("roberta"),qKo=o(" \u2014 "),qz=a("a"),jKo=o("RobertaForQuestionAnswering"),DKo=o(" (RoBERTa model)"),GKo=l(),CF=a("li"),Nue=a("strong"),OKo=o("roformer"),VKo=o(" \u2014 "),jz=a("a"),XKo=o("RoFormerForQuestionAnswering"),zKo=o(" (RoFormer model)"),WKo=l(),wF=a("li"),que=a("strong"),QKo=o("splinter"),HKo=o(" \u2014 "),Dz=a("a"),UKo=o("SplinterForQuestionAnswering"),JKo=o(" (Splinter model)"),YKo=l(),AF=a("li"),jue=a("strong"),KKo=o("squeezebert"),ZKo=o(" \u2014 "),Gz=a("a"),eZo=o("SqueezeBertForQuestionAnswering"),oZo=o(" (SqueezeBERT model)"),rZo=l(),LF=a("li"),Due=a("strong"),tZo=o("xlm"),aZo=o(" \u2014 "),Oz=a("a"),nZo=o("XLMForQuestionAnsweringSimple"),sZo=o(" (XLM model)"),lZo=l(),yF=a("li"),Gue=a("strong"),iZo=o("xlm-roberta"),dZo=o(" \u2014 "),Vz=a("a"),cZo=o("XLMRobertaForQuestionAnswering"),fZo=o(" (XLM-RoBERTa model)"),mZo=l(),xF=a("li"),Oue=a("strong"),gZo=o("xlm-roberta-xl"),hZo=o(" \u2014 "),Xz=a("a"),pZo=o("XLMRobertaXLForQuestionAnswering"),_Zo=o(" (XLM-RoBERTa-XL model)"),uZo=l(),$F=a("li"),Vue=a("strong"),bZo=o("xlnet"),vZo=o(" \u2014 "),zz=a("a"),FZo=o("XLNetForQuestionAnsweringSimple"),TZo=o(" (XLNet model)"),MZo=l(),kF=a("li"),Xue=a("strong"),EZo=o("yoso"),CZo=o(" \u2014 "),Wz=a("a"),wZo=o("YosoForQuestionAnswering"),AZo=o(" (YOSO model)"),LZo=l(),SF=a("p"),yZo=o("The model is set in evaluation mode by default using "),zue=a("code"),xZo=o("model.eval()"),$Zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),kZo=o("model.train()"),SZo=l(),F(RF.$$.fragment),nOe=l(),md=a("h2"),PF=a("a"),Que=a("span"),F(UL.$$.fragment),RZo=l(),Hue=a("span"),PZo=o("AutoModelForTableQuestionAnswering"),sOe=l(),jo=a("div"),F(JL.$$.fragment),BZo=l(),gd=a("p"),IZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qz=a("a"),NZo=o("from_pretrained()"),qZo=o(" class method or the "),Hz=a("a"),jZo=o("from_config()"),DZo=o(` class
method.`),GZo=l(),YL=a("p"),OZo=o("This class cannot be instantiated directly using "),Uue=a("code"),VZo=o("__init__()"),XZo=o(" (throws an error)."),zZo=l(),_t=a("div"),F(KL.$$.fragment),WZo=l(),Jue=a("p"),QZo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),HZo=l(),hd=a("p"),UZo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),JZo=o("not"),YZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),KZo=o("from_pretrained()"),ZZo=o(" to load the model weights."),eer=l(),F(BF.$$.fragment),oer=l(),so=a("div"),F(ZL.$$.fragment),rer=l(),Kue=a("p"),ter=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aer=l(),Va=a("p"),ner=o("The model class to instantiate is selected based on the "),Zue=a("code"),ser=o("model_type"),ler=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),ier=o("pretrained_model_name_or_path"),der=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(":"),mer=l(),r1e=a("ul"),IF=a("li"),t1e=a("strong"),ger=o("tapas"),her=o(" \u2014 "),Jz=a("a"),per=o("TapasForQuestionAnswering"),_er=o(" (TAPAS model)"),uer=l(),NF=a("p"),ber=o("The model is set in evaluation mode by default using "),a1e=a("code"),ver=o("model.eval()"),Fer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),Ter=o("model.train()"),Mer=l(),F(qF.$$.fragment),lOe=l(),pd=a("h2"),jF=a("a"),s1e=a("span"),F(ey.$$.fragment),Eer=l(),l1e=a("span"),Cer=o("AutoModelForImageClassification"),iOe=l(),Do=a("div"),F(oy.$$.fragment),wer=l(),_d=a("p"),Aer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yz=a("a"),Ler=o("from_pretrained()"),yer=o(" class method or the "),Kz=a("a"),xer=o("from_config()"),$er=o(` class
method.`),ker=l(),ry=a("p"),Ser=o("This class cannot be instantiated directly using "),i1e=a("code"),Rer=o("__init__()"),Per=o(" (throws an error)."),Ber=l(),ut=a("div"),F(ty.$$.fragment),Ier=l(),d1e=a("p"),Ner=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qer=l(),ud=a("p"),jer=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),Der=o("not"),Ger=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),Oer=o("from_pretrained()"),Ver=o(" to load the model weights."),Xer=l(),F(DF.$$.fragment),zer=l(),lo=a("div"),F(ay.$$.fragment),Wer=l(),f1e=a("p"),Qer=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Her=l(),Xa=a("p"),Uer=o("The model class to instantiate is selected based on the "),m1e=a("code"),Jer=o("model_type"),Yer=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),Ker=o("pretrained_model_name_or_path"),Zer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(":"),ror=l(),ue=a("ul"),GF=a("li"),p1e=a("strong"),tor=o("beit"),aor=o(" \u2014 "),eW=a("a"),nor=o("BeitForImageClassification"),sor=o(" (BEiT model)"),lor=l(),OF=a("li"),_1e=a("strong"),ior=o("convnext"),dor=o(" \u2014 "),oW=a("a"),cor=o("ConvNextForImageClassification"),mor=o(" (ConvNeXT model)"),gor=l(),VF=a("li"),u1e=a("strong"),hor=o("cvt"),por=o(" \u2014 "),rW=a("a"),_or=o("CvtForImageClassification"),uor=o(" (CvT model)"),bor=l(),XF=a("li"),b1e=a("strong"),vor=o("data2vec-vision"),For=o(" \u2014 "),tW=a("a"),Tor=o("Data2VecVisionForImageClassification"),Mor=o(" (Data2VecVision model)"),Eor=l(),Vs=a("li"),v1e=a("strong"),Cor=o("deit"),wor=o(" \u2014 "),aW=a("a"),Aor=o("DeiTForImageClassification"),Lor=o(" or "),nW=a("a"),yor=o("DeiTForImageClassificationWithTeacher"),xor=o(" (DeiT model)"),$or=l(),zF=a("li"),F1e=a("strong"),kor=o("imagegpt"),Sor=o(" \u2014 "),sW=a("a"),Ror=o("ImageGPTForImageClassification"),Por=o(" (ImageGPT model)"),Bor=l(),Xs=a("li"),T1e=a("strong"),Ior=o("levit"),Nor=o(" \u2014 "),lW=a("a"),qor=o("LevitForImageClassification"),jor=o(" or "),iW=a("a"),Dor=o("LevitForImageClassificationWithTeacher"),Gor=o(" (LeViT model)"),Oor=l(),bt=a("li"),M1e=a("strong"),Vor=o("perceiver"),Xor=o(" \u2014 "),dW=a("a"),zor=o("PerceiverForImageClassificationLearned"),Wor=o(" or "),cW=a("a"),Qor=o("PerceiverForImageClassificationFourier"),Hor=o(" or "),fW=a("a"),Uor=o("PerceiverForImageClassificationConvProcessing"),Jor=o(" (Perceiver model)"),Yor=l(),WF=a("li"),E1e=a("strong"),Kor=o("poolformer"),Zor=o(" \u2014 "),mW=a("a"),err=o("PoolFormerForImageClassification"),orr=o(" (PoolFormer model)"),rrr=l(),QF=a("li"),C1e=a("strong"),trr=o("regnet"),arr=o(" \u2014 "),gW=a("a"),nrr=o("RegNetForImageClassification"),srr=o(" (RegNet model)"),lrr=l(),HF=a("li"),w1e=a("strong"),irr=o("resnet"),drr=o(" \u2014 "),hW=a("a"),crr=o("ResNetForImageClassification"),frr=o(" (ResNet model)"),mrr=l(),UF=a("li"),A1e=a("strong"),grr=o("segformer"),hrr=o(" \u2014 "),pW=a("a"),prr=o("SegformerForImageClassification"),_rr=o(" (SegFormer model)"),urr=l(),JF=a("li"),L1e=a("strong"),brr=o("swin"),vrr=o(" \u2014 "),_W=a("a"),Frr=o("SwinForImageClassification"),Trr=o(" (Swin Transformer model)"),Mrr=l(),YF=a("li"),y1e=a("strong"),Err=o("swinv2"),Crr=o(" \u2014 "),uW=a("a"),wrr=o("Swinv2ForImageClassification"),Arr=o(" (Swin Transformer V2 model)"),Lrr=l(),KF=a("li"),x1e=a("strong"),yrr=o("van"),xrr=o(" \u2014 "),bW=a("a"),$rr=o("VanForImageClassification"),krr=o(" (VAN model)"),Srr=l(),ZF=a("li"),$1e=a("strong"),Rrr=o("vit"),Prr=o(" \u2014 "),vW=a("a"),Brr=o("ViTForImageClassification"),Irr=o(" (ViT model)"),Nrr=l(),e6=a("p"),qrr=o("The model is set in evaluation mode by default using "),k1e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=a("code"),Grr=o("model.train()"),Orr=l(),F(o6.$$.fragment),dOe=l(),bd=a("h2"),r6=a("a"),R1e=a("span"),F(ny.$$.fragment),Vrr=l(),P1e=a("span"),Xrr=o("AutoModelForVision2Seq"),cOe=l(),Go=a("div"),F(sy.$$.fragment),zrr=l(),vd=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FW=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),TW=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),ly=a("p"),Krr=o("This class cannot be instantiated directly using "),B1e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),vt=a("div"),F(iy.$$.fragment),rtr=l(),I1e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),atr=l(),Fd=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(t6.$$.fragment),ftr=l(),io=a("div"),F(dy.$$.fragment),mtr=l(),q1e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),htr=l(),za=a("p"),ptr=o("The model class to instantiate is selected based on the "),j1e=a("code"),_tr=o("model_type"),utr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),O1e=a("ul"),a6=a("li"),V1e=a("strong"),Etr=o("vision-encoder-decoder"),Ctr=o(" \u2014 "),EW=a("a"),wtr=o("VisionEncoderDecoderModel"),Atr=o(" (Vision Encoder decoder model)"),Ltr=l(),n6=a("p"),ytr=o("The model is set in evaluation mode by default using "),X1e=a("code"),xtr=o("model.eval()"),$tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),ktr=o("model.train()"),Str=l(),F(s6.$$.fragment),fOe=l(),Td=a("h2"),l6=a("a"),W1e=a("span"),F(cy.$$.fragment),Rtr=l(),Q1e=a("span"),Ptr=o("AutoModelForVisualQuestionAnswering"),mOe=l(),Oo=a("div"),F(fy.$$.fragment),Btr=l(),Md=a("p"),Itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),CW=a("a"),Ntr=o("from_pretrained()"),qtr=o(" class method or the "),wW=a("a"),jtr=o("from_config()"),Dtr=o(` class
method.`),Gtr=l(),my=a("p"),Otr=o("This class cannot be instantiated directly using "),H1e=a("code"),Vtr=o("__init__()"),Xtr=o(" (throws an error)."),ztr=l(),Ft=a("div"),F(gy.$$.fragment),Wtr=l(),U1e=a("p"),Qtr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Htr=l(),Ed=a("p"),Utr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),Jtr=o("not"),Ytr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),Ktr=o("from_pretrained()"),Ztr=o(" to load the model weights."),ear=l(),F(i6.$$.fragment),oar=l(),co=a("div"),F(hy.$$.fragment),rar=l(),Y1e=a("p"),tar=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),aar=l(),Wa=a("p"),nar=o("The model class to instantiate is selected based on the "),K1e=a("code"),sar=o("model_type"),lar=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),iar=o("pretrained_model_name_or_path"),dar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),car=o("pretrained_model_name_or_path"),far=o(":"),mar=l(),o2e=a("ul"),d6=a("li"),r2e=a("strong"),gar=o("vilt"),har=o(" \u2014 "),LW=a("a"),par=o("ViltForQuestionAnswering"),_ar=o(" (ViLT model)"),uar=l(),c6=a("p"),bar=o("The model is set in evaluation mode by default using "),t2e=a("code"),Far=o("model.eval()"),Tar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=a("code"),Mar=o("model.train()"),Ear=l(),F(f6.$$.fragment),gOe=l(),Cd=a("h2"),m6=a("a"),n2e=a("span"),F(py.$$.fragment),Car=l(),s2e=a("span"),war=o("AutoModelForAudioClassification"),hOe=l(),Vo=a("div"),F(_y.$$.fragment),Aar=l(),wd=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),yW=a("a"),yar=o("from_pretrained()"),xar=o(" class method or the "),xW=a("a"),$ar=o("from_config()"),kar=o(` class
method.`),Sar=l(),uy=a("p"),Rar=o("This class cannot be instantiated directly using "),l2e=a("code"),Par=o("__init__()"),Bar=o(" (throws an error)."),Iar=l(),Tt=a("div"),F(by.$$.fragment),Nar=l(),i2e=a("p"),qar=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),jar=l(),Ad=a("p"),Dar=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),Gar=o("not"),Oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Var=o("from_pretrained()"),Xar=o(" to load the model weights."),zar=l(),F(g6.$$.fragment),War=l(),fo=a("div"),F(vy.$$.fragment),Qar=l(),c2e=a("p"),Har=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Uar=l(),Qa=a("p"),Jar=o("The model class to instantiate is selected based on the "),f2e=a("code"),Yar=o("model_type"),Kar=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),Zar=o("pretrained_model_name_or_path"),enr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),onr=o("pretrained_model_name_or_path"),rnr=o(":"),tnr=l(),Pe=a("ul"),h6=a("li"),h2e=a("strong"),anr=o("data2vec-audio"),nnr=o(" \u2014 "),kW=a("a"),snr=o("Data2VecAudioForSequenceClassification"),lnr=o(" (Data2VecAudio model)"),inr=l(),p6=a("li"),p2e=a("strong"),dnr=o("hubert"),cnr=o(" \u2014 "),SW=a("a"),fnr=o("HubertForSequenceClassification"),mnr=o(" (Hubert model)"),gnr=l(),_6=a("li"),_2e=a("strong"),hnr=o("sew"),pnr=o(" \u2014 "),RW=a("a"),_nr=o("SEWForSequenceClassification"),unr=o(" (SEW model)"),bnr=l(),u6=a("li"),u2e=a("strong"),vnr=o("sew-d"),Fnr=o(" \u2014 "),PW=a("a"),Tnr=o("SEWDForSequenceClassification"),Mnr=o(" (SEW-D model)"),Enr=l(),b6=a("li"),b2e=a("strong"),Cnr=o("unispeech"),wnr=o(" \u2014 "),BW=a("a"),Anr=o("UniSpeechForSequenceClassification"),Lnr=o(" (UniSpeech model)"),ynr=l(),v6=a("li"),v2e=a("strong"),xnr=o("unispeech-sat"),$nr=o(" \u2014 "),IW=a("a"),knr=o("UniSpeechSatForSequenceClassification"),Snr=o(" (UniSpeechSat model)"),Rnr=l(),F6=a("li"),F2e=a("strong"),Pnr=o("wav2vec2"),Bnr=o(" \u2014 "),NW=a("a"),Inr=o("Wav2Vec2ForSequenceClassification"),Nnr=o(" (Wav2Vec2 model)"),qnr=l(),T6=a("li"),T2e=a("strong"),jnr=o("wav2vec2-conformer"),Dnr=o(" \u2014 "),qW=a("a"),Gnr=o("Wav2Vec2ConformerForSequenceClassification"),Onr=o(" (Wav2Vec2-Conformer model)"),Vnr=l(),M6=a("li"),M2e=a("strong"),Xnr=o("wavlm"),znr=o(" \u2014 "),jW=a("a"),Wnr=o("WavLMForSequenceClassification"),Qnr=o(" (WavLM model)"),Hnr=l(),E6=a("p"),Unr=o("The model is set in evaluation mode by default using "),E2e=a("code"),Jnr=o("model.eval()"),Ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=a("code"),Knr=o("model.train()"),Znr=l(),F(C6.$$.fragment),pOe=l(),Ld=a("h2"),w6=a("a"),w2e=a("span"),F(Fy.$$.fragment),esr=l(),A2e=a("span"),osr=o("AutoModelForAudioFrameClassification"),_Oe=l(),Xo=a("div"),F(Ty.$$.fragment),rsr=l(),yd=a("p"),tsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DW=a("a"),asr=o("from_pretrained()"),nsr=o(" class method or the "),GW=a("a"),ssr=o("from_config()"),lsr=o(` class
method.`),isr=l(),My=a("p"),dsr=o("This class cannot be instantiated directly using "),L2e=a("code"),csr=o("__init__()"),fsr=o(" (throws an error)."),msr=l(),Mt=a("div"),F(Ey.$$.fragment),gsr=l(),y2e=a("p"),hsr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),psr=l(),xd=a("p"),_sr=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),usr=o("not"),bsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),vsr=o("from_pretrained()"),Fsr=o(" to load the model weights."),Tsr=l(),F(A6.$$.fragment),Msr=l(),mo=a("div"),F(Cy.$$.fragment),Esr=l(),$2e=a("p"),Csr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wsr=l(),Ha=a("p"),Asr=o("The model class to instantiate is selected based on the "),k2e=a("code"),Lsr=o("model_type"),ysr=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),ksr=o("pretrained_model_name_or_path"),Ssr=o(":"),Rsr=l(),et=a("ul"),L6=a("li"),P2e=a("strong"),Psr=o("data2vec-audio"),Bsr=o(" \u2014 "),VW=a("a"),Isr=o("Data2VecAudioForAudioFrameClassification"),Nsr=o(" (Data2VecAudio model)"),qsr=l(),y6=a("li"),B2e=a("strong"),jsr=o("unispeech-sat"),Dsr=o(" \u2014 "),XW=a("a"),Gsr=o("UniSpeechSatForAudioFrameClassification"),Osr=o(" (UniSpeechSat model)"),Vsr=l(),x6=a("li"),I2e=a("strong"),Xsr=o("wav2vec2"),zsr=o(" \u2014 "),zW=a("a"),Wsr=o("Wav2Vec2ForAudioFrameClassification"),Qsr=o(" (Wav2Vec2 model)"),Hsr=l(),$6=a("li"),N2e=a("strong"),Usr=o("wav2vec2-conformer"),Jsr=o(" \u2014 "),WW=a("a"),Ysr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ksr=o(" (Wav2Vec2-Conformer model)"),Zsr=l(),k6=a("li"),q2e=a("strong"),elr=o("wavlm"),olr=o(" \u2014 "),QW=a("a"),rlr=o("WavLMForAudioFrameClassification"),tlr=o(" (WavLM model)"),alr=l(),S6=a("p"),nlr=o("The model is set in evaluation mode by default using "),j2e=a("code"),slr=o("model.eval()"),llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D2e=a("code"),ilr=o("model.train()"),dlr=l(),F(R6.$$.fragment),uOe=l(),$d=a("h2"),P6=a("a"),G2e=a("span"),F(wy.$$.fragment),clr=l(),O2e=a("span"),flr=o("AutoModelForCTC"),bOe=l(),zo=a("div"),F(Ay.$$.fragment),mlr=l(),kd=a("p"),glr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),HW=a("a"),hlr=o("from_pretrained()"),plr=o(" class method or the "),UW=a("a"),_lr=o("from_config()"),ulr=o(` class
method.`),blr=l(),Ly=a("p"),vlr=o("This class cannot be instantiated directly using "),V2e=a("code"),Flr=o("__init__()"),Tlr=o(" (throws an error)."),Mlr=l(),Et=a("div"),F(yy.$$.fragment),Elr=l(),X2e=a("p"),Clr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),wlr=l(),Sd=a("p"),Alr=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),Llr=o("not"),ylr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),xlr=o("from_pretrained()"),$lr=o(" to load the model weights."),klr=l(),F(B6.$$.fragment),Slr=l(),go=a("div"),F(xy.$$.fragment),Rlr=l(),W2e=a("p"),Plr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Blr=l(),Ua=a("p"),Ilr=o("The model class to instantiate is selected based on the "),Q2e=a("code"),Nlr=o("model_type"),qlr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),jlr=o("pretrained_model_name_or_path"),Dlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),Glr=o("pretrained_model_name_or_path"),Olr=o(":"),Vlr=l(),Le=a("ul"),I6=a("li"),J2e=a("strong"),Xlr=o("data2vec-audio"),zlr=o(" \u2014 "),YW=a("a"),Wlr=o("Data2VecAudioForCTC"),Qlr=o(" (Data2VecAudio model)"),Hlr=l(),N6=a("li"),Y2e=a("strong"),Ulr=o("hubert"),Jlr=o(" \u2014 "),KW=a("a"),Ylr=o("HubertForCTC"),Klr=o(" (Hubert model)"),Zlr=l(),q6=a("li"),K2e=a("strong"),eir=o("mctct"),oir=o(" \u2014 "),ZW=a("a"),rir=o("MCTCTForCTC"),tir=o(" (M-CTC-T model)"),air=l(),j6=a("li"),Z2e=a("strong"),nir=o("sew"),sir=o(" \u2014 "),eQ=a("a"),lir=o("SEWForCTC"),iir=o(" (SEW model)"),dir=l(),D6=a("li"),ebe=a("strong"),cir=o("sew-d"),fir=o(" \u2014 "),oQ=a("a"),mir=o("SEWDForCTC"),gir=o(" (SEW-D model)"),hir=l(),G6=a("li"),obe=a("strong"),pir=o("unispeech"),_ir=o(" \u2014 "),rQ=a("a"),uir=o("UniSpeechForCTC"),bir=o(" (UniSpeech model)"),vir=l(),O6=a("li"),rbe=a("strong"),Fir=o("unispeech-sat"),Tir=o(" \u2014 "),tQ=a("a"),Mir=o("UniSpeechSatForCTC"),Eir=o(" (UniSpeechSat model)"),Cir=l(),V6=a("li"),tbe=a("strong"),wir=o("wav2vec2"),Air=o(" \u2014 "),aQ=a("a"),Lir=o("Wav2Vec2ForCTC"),yir=o(" (Wav2Vec2 model)"),xir=l(),X6=a("li"),abe=a("strong"),$ir=o("wav2vec2-conformer"),kir=o(" \u2014 "),nQ=a("a"),Sir=o("Wav2Vec2ConformerForCTC"),Rir=o(" (Wav2Vec2-Conformer model)"),Pir=l(),z6=a("li"),nbe=a("strong"),Bir=o("wavlm"),Iir=o(" \u2014 "),sQ=a("a"),Nir=o("WavLMForCTC"),qir=o(" (WavLM model)"),jir=l(),W6=a("p"),Dir=o("The model is set in evaluation mode by default using "),sbe=a("code"),Gir=o("model.eval()"),Oir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=a("code"),Vir=o("model.train()"),Xir=l(),F(Q6.$$.fragment),vOe=l(),Rd=a("h2"),H6=a("a"),ibe=a("span"),F($y.$$.fragment),zir=l(),dbe=a("span"),Wir=o("AutoModelForSpeechSeq2Seq"),FOe=l(),Wo=a("div"),F(ky.$$.fragment),Qir=l(),Pd=a("p"),Hir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lQ=a("a"),Uir=o("from_pretrained()"),Jir=o(" class method or the "),iQ=a("a"),Yir=o("from_config()"),Kir=o(` class
method.`),Zir=l(),Sy=a("p"),edr=o("This class cannot be instantiated directly using "),cbe=a("code"),odr=o("__init__()"),rdr=o(" (throws an error)."),tdr=l(),Ct=a("div"),F(Ry.$$.fragment),adr=l(),fbe=a("p"),ndr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sdr=l(),Bd=a("p"),ldr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),idr=o("not"),ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),cdr=o("from_pretrained()"),fdr=o(" to load the model weights."),mdr=l(),F(U6.$$.fragment),gdr=l(),ho=a("div"),F(Py.$$.fragment),hdr=l(),gbe=a("p"),pdr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_dr=l(),Ja=a("p"),udr=o("The model class to instantiate is selected based on the "),hbe=a("code"),bdr=o("model_type"),vdr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),Fdr=o("pretrained_model_name_or_path"),Tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),Mdr=o("pretrained_model_name_or_path"),Edr=o(":"),Cdr=l(),By=a("ul"),J6=a("li"),ube=a("strong"),wdr=o("speech-encoder-decoder"),Adr=o(" \u2014 "),cQ=a("a"),Ldr=o("SpeechEncoderDecoderModel"),ydr=o(" (Speech Encoder decoder model)"),xdr=l(),Y6=a("li"),bbe=a("strong"),$dr=o("speech_to_text"),kdr=o(" \u2014 "),fQ=a("a"),Sdr=o("Speech2TextForConditionalGeneration"),Rdr=o(" (Speech2Text model)"),Pdr=l(),K6=a("p"),Bdr=o("The model is set in evaluation mode by default using "),vbe=a("code"),Idr=o("model.eval()"),Ndr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=a("code"),qdr=o("model.train()"),jdr=l(),F(Z6.$$.fragment),TOe=l(),Id=a("h2"),eT=a("a"),Tbe=a("span"),F(Iy.$$.fragment),Ddr=l(),Mbe=a("span"),Gdr=o("AutoModelForAudioXVector"),MOe=l(),Qo=a("div"),F(Ny.$$.fragment),Odr=l(),Nd=a("p"),Vdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mQ=a("a"),Xdr=o("from_pretrained()"),zdr=o(" class method or the "),gQ=a("a"),Wdr=o("from_config()"),Qdr=o(` class
method.`),Hdr=l(),qy=a("p"),Udr=o("This class cannot be instantiated directly using "),Ebe=a("code"),Jdr=o("__init__()"),Ydr=o(" (throws an error)."),Kdr=l(),wt=a("div"),F(jy.$$.fragment),Zdr=l(),Cbe=a("p"),ecr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ocr=l(),qd=a("p"),rcr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),tcr=o("not"),acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=a("a"),ncr=o("from_pretrained()"),scr=o(" to load the model weights."),lcr=l(),F(oT.$$.fragment),icr=l(),po=a("div"),F(Dy.$$.fragment),dcr=l(),Abe=a("p"),ccr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fcr=l(),Ya=a("p"),mcr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),gcr=o("model_type"),hcr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),pcr=o("pretrained_model_name_or_path"),_cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),ucr=o("pretrained_model_name_or_path"),bcr=o(":"),vcr=l(),ot=a("ul"),rT=a("li"),$be=a("strong"),Fcr=o("data2vec-audio"),Tcr=o(" \u2014 "),pQ=a("a"),Mcr=o("Data2VecAudioForXVector"),Ecr=o(" (Data2VecAudio model)"),Ccr=l(),tT=a("li"),kbe=a("strong"),wcr=o("unispeech-sat"),Acr=o(" \u2014 "),_Q=a("a"),Lcr=o("UniSpeechSatForXVector"),ycr=o(" (UniSpeechSat model)"),xcr=l(),aT=a("li"),Sbe=a("strong"),$cr=o("wav2vec2"),kcr=o(" \u2014 "),uQ=a("a"),Scr=o("Wav2Vec2ForXVector"),Rcr=o(" (Wav2Vec2 model)"),Pcr=l(),nT=a("li"),Rbe=a("strong"),Bcr=o("wav2vec2-conformer"),Icr=o(" \u2014 "),bQ=a("a"),Ncr=o("Wav2Vec2ConformerForXVector"),qcr=o(" (Wav2Vec2-Conformer model)"),jcr=l(),sT=a("li"),Pbe=a("strong"),Dcr=o("wavlm"),Gcr=o(" \u2014 "),vQ=a("a"),Ocr=o("WavLMForXVector"),Vcr=o(" (WavLM model)"),Xcr=l(),lT=a("p"),zcr=o("The model is set in evaluation mode by default using "),Bbe=a("code"),Wcr=o("model.eval()"),Qcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),Hcr=o("model.train()"),Ucr=l(),F(iT.$$.fragment),EOe=l(),jd=a("h2"),dT=a("a"),Nbe=a("span"),F(Gy.$$.fragment),Jcr=l(),qbe=a("span"),Ycr=o("AutoModelForMaskedImageModeling"),COe=l(),Ho=a("div"),F(Oy.$$.fragment),Kcr=l(),Dd=a("p"),Zcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FQ=a("a"),efr=o("from_pretrained()"),ofr=o(" class method or the "),TQ=a("a"),rfr=o("from_config()"),tfr=o(` class
method.`),afr=l(),Vy=a("p"),nfr=o("This class cannot be instantiated directly using "),jbe=a("code"),sfr=o("__init__()"),lfr=o(" (throws an error)."),ifr=l(),At=a("div"),F(Xy.$$.fragment),dfr=l(),Dbe=a("p"),cfr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ffr=l(),Gd=a("p"),mfr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),gfr=o("not"),hfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=a("a"),pfr=o("from_pretrained()"),_fr=o(" to load the model weights."),ufr=l(),F(cT.$$.fragment),bfr=l(),_o=a("div"),F(zy.$$.fragment),vfr=l(),Obe=a("p"),Ffr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Tfr=l(),Ka=a("p"),Mfr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),Efr=o("model_type"),Cfr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Lfr=o("pretrained_model_name_or_path"),yfr=o(":"),xfr=l(),Za=a("ul"),fT=a("li"),Wbe=a("strong"),$fr=o("deit"),kfr=o(" \u2014 "),EQ=a("a"),Sfr=o("DeiTForMaskedImageModeling"),Rfr=o(" (DeiT model)"),Pfr=l(),mT=a("li"),Qbe=a("strong"),Bfr=o("swin"),Ifr=o(" \u2014 "),CQ=a("a"),Nfr=o("SwinForMaskedImageModeling"),qfr=o(" (Swin Transformer model)"),jfr=l(),gT=a("li"),Hbe=a("strong"),Dfr=o("swinv2"),Gfr=o(" \u2014 "),wQ=a("a"),Ofr=o("Swinv2ForMaskedImageModeling"),Vfr=o(" (Swin Transformer V2 model)"),Xfr=l(),hT=a("li"),Ube=a("strong"),zfr=o("vit"),Wfr=o(" \u2014 "),AQ=a("a"),Qfr=o("ViTForMaskedImageModeling"),Hfr=o(" (ViT model)"),Ufr=l(),pT=a("p"),Jfr=o("The model is set in evaluation mode by default using "),Jbe=a("code"),Yfr=o("model.eval()"),Kfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),Zfr=o("model.train()"),emr=l(),F(_T.$$.fragment),wOe=l(),Od=a("h2"),uT=a("a"),Kbe=a("span"),F(Wy.$$.fragment),omr=l(),Zbe=a("span"),rmr=o("AutoModelForObjectDetection"),AOe=l(),Uo=a("div"),F(Qy.$$.fragment),tmr=l(),Vd=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LQ=a("a"),nmr=o("from_pretrained()"),smr=o(" class method or the "),yQ=a("a"),lmr=o("from_config()"),imr=o(` class
method.`),dmr=l(),Hy=a("p"),cmr=o("This class cannot be instantiated directly using "),e4e=a("code"),fmr=o("__init__()"),mmr=o(" (throws an error)."),gmr=l(),Lt=a("div"),F(Uy.$$.fragment),hmr=l(),o4e=a("p"),pmr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_mr=l(),Xd=a("p"),umr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),bmr=o("not"),vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Fmr=o("from_pretrained()"),Tmr=o(" to load the model weights."),Mmr=l(),F(bT.$$.fragment),Emr=l(),uo=a("div"),F(Jy.$$.fragment),Cmr=l(),t4e=a("p"),wmr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Amr=l(),en=a("p"),Lmr=o("The model class to instantiate is selected based on the "),a4e=a("code"),ymr=o("model_type"),xmr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),$mr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Pmr=l(),Yy=a("ul"),vT=a("li"),l4e=a("strong"),Bmr=o("detr"),Imr=o(" \u2014 "),$Q=a("a"),Nmr=o("DetrForObjectDetection"),qmr=o(" (DETR model)"),jmr=l(),FT=a("li"),i4e=a("strong"),Dmr=o("yolos"),Gmr=o(" \u2014 "),kQ=a("a"),Omr=o("YolosForObjectDetection"),Vmr=o(" (YOLOS model)"),Xmr=l(),TT=a("p"),zmr=o("The model is set in evaluation mode by default using "),d4e=a("code"),Wmr=o("model.eval()"),Qmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c4e=a("code"),Hmr=o("model.train()"),Umr=l(),F(MT.$$.fragment),LOe=l(),zd=a("h2"),ET=a("a"),f4e=a("span"),F(Ky.$$.fragment),Jmr=l(),m4e=a("span"),Ymr=o("AutoModelForImageSegmentation"),yOe=l(),Jo=a("div"),F(Zy.$$.fragment),Kmr=l(),Wd=a("p"),Zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),SQ=a("a"),egr=o("from_pretrained()"),ogr=o(" class method or the "),RQ=a("a"),rgr=o("from_config()"),tgr=o(` class
method.`),agr=l(),e8=a("p"),ngr=o("This class cannot be instantiated directly using "),g4e=a("code"),sgr=o("__init__()"),lgr=o(" (throws an error)."),igr=l(),yt=a("div"),F(o8.$$.fragment),dgr=l(),h4e=a("p"),cgr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fgr=l(),Qd=a("p"),mgr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),ggr=o("not"),hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),pgr=o("from_pretrained()"),_gr=o(" to load the model weights."),ugr=l(),F(CT.$$.fragment),bgr=l(),bo=a("div"),F(r8.$$.fragment),vgr=l(),_4e=a("p"),Fgr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tgr=l(),on=a("p"),Mgr=o("The model class to instantiate is selected based on the "),u4e=a("code"),Egr=o("model_type"),Cgr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),Lgr=o("pretrained_model_name_or_path"),ygr=o(":"),xgr=l(),F4e=a("ul"),wT=a("li"),T4e=a("strong"),$gr=o("detr"),kgr=o(" \u2014 "),BQ=a("a"),Sgr=o("DetrForSegmentation"),Rgr=o(" (DETR model)"),Pgr=l(),AT=a("p"),Bgr=o("The model is set in evaluation mode by default using "),M4e=a("code"),Igr=o("model.eval()"),Ngr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E4e=a("code"),qgr=o("model.train()"),jgr=l(),F(LT.$$.fragment),xOe=l(),Hd=a("h2"),yT=a("a"),C4e=a("span"),F(t8.$$.fragment),Dgr=l(),w4e=a("span"),Ggr=o("AutoModelForSemanticSegmentation"),$Oe=l(),Yo=a("div"),F(a8.$$.fragment),Ogr=l(),Ud=a("p"),Vgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),IQ=a("a"),Xgr=o("from_pretrained()"),zgr=o(" class method or the "),NQ=a("a"),Wgr=o("from_config()"),Qgr=o(` class
method.`),Hgr=l(),n8=a("p"),Ugr=o("This class cannot be instantiated directly using "),A4e=a("code"),Jgr=o("__init__()"),Ygr=o(" (throws an error)."),Kgr=l(),xt=a("div"),F(s8.$$.fragment),Zgr=l(),L4e=a("p"),ehr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ohr=l(),Jd=a("p"),rhr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),thr=o("not"),ahr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),nhr=o("from_pretrained()"),shr=o(" to load the model weights."),lhr=l(),F(xT.$$.fragment),ihr=l(),vo=a("div"),F(l8.$$.fragment),dhr=l(),x4e=a("p"),chr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fhr=l(),rn=a("p"),mhr=o("The model class to instantiate is selected based on the "),$4e=a("code"),ghr=o("model_type"),hhr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),uhr=o("pretrained_model_name_or_path"),bhr=o(":"),vhr=l(),tn=a("ul"),$T=a("li"),R4e=a("strong"),Fhr=o("beit"),Thr=o(" \u2014 "),jQ=a("a"),Mhr=o("BeitForSemanticSegmentation"),Ehr=o(" (BEiT model)"),Chr=l(),kT=a("li"),P4e=a("strong"),whr=o("data2vec-vision"),Ahr=o(" \u2014 "),DQ=a("a"),Lhr=o("Data2VecVisionForSemanticSegmentation"),yhr=o(" (Data2VecVision model)"),xhr=l(),ST=a("li"),B4e=a("strong"),$hr=o("dpt"),khr=o(" \u2014 "),GQ=a("a"),Shr=o("DPTForSemanticSegmentation"),Rhr=o(" (DPT model)"),Phr=l(),RT=a("li"),I4e=a("strong"),Bhr=o("segformer"),Ihr=o(" \u2014 "),OQ=a("a"),Nhr=o("SegformerForSemanticSegmentation"),qhr=o(" (SegFormer model)"),jhr=l(),PT=a("p"),Dhr=o("The model is set in evaluation mode by default using "),N4e=a("code"),Ghr=o("model.eval()"),Ohr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=a("code"),Vhr=o("model.train()"),Xhr=l(),F(BT.$$.fragment),kOe=l(),Yd=a("h2"),IT=a("a"),j4e=a("span"),F(i8.$$.fragment),zhr=l(),D4e=a("span"),Whr=o("AutoModelForInstanceSegmentation"),SOe=l(),Ko=a("div"),F(d8.$$.fragment),Qhr=l(),Kd=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),VQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),XQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),c8=a("p"),epr=o("This class cannot be instantiated directly using "),G4e=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),$t=a("div"),F(f8.$$.fragment),apr=l(),O4e=a("p"),npr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),spr=l(),Zd=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=a("a"),cpr=o("from_pretrained()"),fpr=o(" to load the model weights."),mpr=l(),F(NT.$$.fragment),gpr=l(),Fo=a("div"),F(m8.$$.fragment),hpr=l(),X4e=a("p"),ppr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_pr=l(),an=a("p"),upr=o("The model class to instantiate is selected based on the "),z4e=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),H4e=a("ul"),qT=a("li"),U4e=a("strong"),wpr=o("maskformer"),Apr=o(" \u2014 "),WQ=a("a"),Lpr=o("MaskFormerForInstanceSegmentation"),ypr=o(" (MaskFormer model)"),xpr=l(),jT=a("p"),$pr=o("The model is set in evaluation mode by default using "),J4e=a("code"),kpr=o("model.eval()"),Spr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=a("code"),Rpr=o("model.train()"),Ppr=l(),F(DT.$$.fragment),ROe=l(),ec=a("h2"),GT=a("a"),K4e=a("span"),F(g8.$$.fragment),Bpr=l(),Z4e=a("span"),Ipr=o("TFAutoModel"),POe=l(),Zo=a("div"),F(h8.$$.fragment),Npr=l(),oc=a("p"),qpr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QQ=a("a"),jpr=o("from_pretrained()"),Dpr=o(" class method or the "),HQ=a("a"),Gpr=o("from_config()"),Opr=o(` class
method.`),Vpr=l(),p8=a("p"),Xpr=o("This class cannot be instantiated directly using "),eve=a("code"),zpr=o("__init__()"),Wpr=o(" (throws an error)."),Qpr=l(),kt=a("div"),F(_8.$$.fragment),Hpr=l(),ove=a("p"),Upr=o("Instantiates one of the base model classes of the library from a configuration."),Jpr=l(),rc=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),e_r=o("from_pretrained()"),o_r=o(" to load the model weights."),r_r=l(),F(OT.$$.fragment),t_r=l(),Lr=a("div"),F(u8.$$.fragment),a_r=l(),tve=a("p"),n_r=o("Instantiate one of the base model classes of the library from a pretrained model."),s_r=l(),nn=a("p"),l_r=o("The model class to instantiate is selected based on the "),ave=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),q=a("ul"),VT=a("li"),lve=a("strong"),p_r=o("albert"),__r=o(" \u2014 "),JQ=a("a"),u_r=o("TFAlbertModel"),b_r=o(" (ALBERT model)"),v_r=l(),XT=a("li"),ive=a("strong"),F_r=o("bart"),T_r=o(" \u2014 "),YQ=a("a"),M_r=o("TFBartModel"),E_r=o(" (BART model)"),C_r=l(),zT=a("li"),dve=a("strong"),w_r=o("bert"),A_r=o(" \u2014 "),KQ=a("a"),L_r=o("TFBertModel"),y_r=o(" (BERT model)"),x_r=l(),WT=a("li"),cve=a("strong"),$_r=o("blenderbot"),k_r=o(" \u2014 "),ZQ=a("a"),S_r=o("TFBlenderbotModel"),R_r=o(" (Blenderbot model)"),P_r=l(),QT=a("li"),fve=a("strong"),B_r=o("blenderbot-small"),I_r=o(" \u2014 "),eH=a("a"),N_r=o("TFBlenderbotSmallModel"),q_r=o(" (BlenderbotSmall model)"),j_r=l(),HT=a("li"),mve=a("strong"),D_r=o("camembert"),G_r=o(" \u2014 "),oH=a("a"),O_r=o("TFCamembertModel"),V_r=o(" (CamemBERT model)"),X_r=l(),UT=a("li"),gve=a("strong"),z_r=o("clip"),W_r=o(" \u2014 "),rH=a("a"),Q_r=o("TFCLIPModel"),H_r=o(" (CLIP model)"),U_r=l(),JT=a("li"),hve=a("strong"),J_r=o("convbert"),Y_r=o(" \u2014 "),tH=a("a"),K_r=o("TFConvBertModel"),Z_r=o(" (ConvBERT model)"),eur=l(),YT=a("li"),pve=a("strong"),our=o("convnext"),rur=o(" \u2014 "),aH=a("a"),tur=o("TFConvNextModel"),aur=o(" (ConvNeXT model)"),nur=l(),KT=a("li"),_ve=a("strong"),sur=o("ctrl"),lur=o(" \u2014 "),nH=a("a"),iur=o("TFCTRLModel"),dur=o(" (CTRL model)"),cur=l(),ZT=a("li"),uve=a("strong"),fur=o("data2vec-vision"),mur=o(" \u2014 "),sH=a("a"),gur=o("TFData2VecVisionModel"),hur=o(" (Data2VecVision model)"),pur=l(),e7=a("li"),bve=a("strong"),_ur=o("deberta"),uur=o(" \u2014 "),lH=a("a"),bur=o("TFDebertaModel"),vur=o(" (DeBERTa model)"),Fur=l(),o7=a("li"),vve=a("strong"),Tur=o("deberta-v2"),Mur=o(" \u2014 "),iH=a("a"),Eur=o("TFDebertaV2Model"),Cur=o(" (DeBERTa-v2 model)"),wur=l(),r7=a("li"),Fve=a("strong"),Aur=o("distilbert"),Lur=o(" \u2014 "),dH=a("a"),yur=o("TFDistilBertModel"),xur=o(" (DistilBERT model)"),$ur=l(),t7=a("li"),Tve=a("strong"),kur=o("dpr"),Sur=o(" \u2014 "),cH=a("a"),Rur=o("TFDPRQuestionEncoder"),Pur=o(" (DPR model)"),Bur=l(),a7=a("li"),Mve=a("strong"),Iur=o("electra"),Nur=o(" \u2014 "),fH=a("a"),qur=o("TFElectraModel"),jur=o(" (ELECTRA model)"),Dur=l(),n7=a("li"),Eve=a("strong"),Gur=o("flaubert"),Our=o(" \u2014 "),mH=a("a"),Vur=o("TFFlaubertModel"),Xur=o(" (FlauBERT model)"),zur=l(),zs=a("li"),Cve=a("strong"),Wur=o("funnel"),Qur=o(" \u2014 "),gH=a("a"),Hur=o("TFFunnelModel"),Uur=o(" or "),hH=a("a"),Jur=o("TFFunnelBaseModel"),Yur=o(" (Funnel Transformer model)"),Kur=l(),s7=a("li"),wve=a("strong"),Zur=o("gpt2"),e1r=o(" \u2014 "),pH=a("a"),o1r=o("TFGPT2Model"),r1r=o(" (OpenAI GPT-2 model)"),t1r=l(),l7=a("li"),Ave=a("strong"),a1r=o("gptj"),n1r=o(" \u2014 "),_H=a("a"),s1r=o("TFGPTJModel"),l1r=o(" (GPT-J model)"),i1r=l(),i7=a("li"),Lve=a("strong"),d1r=o("hubert"),c1r=o(" \u2014 "),uH=a("a"),f1r=o("TFHubertModel"),m1r=o(" (Hubert model)"),g1r=l(),d7=a("li"),yve=a("strong"),h1r=o("layoutlm"),p1r=o(" \u2014 "),bH=a("a"),_1r=o("TFLayoutLMModel"),u1r=o(" (LayoutLM model)"),b1r=l(),c7=a("li"),xve=a("strong"),v1r=o("led"),F1r=o(" \u2014 "),vH=a("a"),T1r=o("TFLEDModel"),M1r=o(" (LED model)"),E1r=l(),f7=a("li"),$ve=a("strong"),C1r=o("longformer"),w1r=o(" \u2014 "),FH=a("a"),A1r=o("TFLongformerModel"),L1r=o(" (Longformer model)"),y1r=l(),m7=a("li"),kve=a("strong"),x1r=o("lxmert"),$1r=o(" \u2014 "),TH=a("a"),k1r=o("TFLxmertModel"),S1r=o(" (LXMERT model)"),R1r=l(),g7=a("li"),Sve=a("strong"),P1r=o("marian"),B1r=o(" \u2014 "),MH=a("a"),I1r=o("TFMarianModel"),N1r=o(" (Marian model)"),q1r=l(),h7=a("li"),Rve=a("strong"),j1r=o("mbart"),D1r=o(" \u2014 "),EH=a("a"),G1r=o("TFMBartModel"),O1r=o(" (mBART model)"),V1r=l(),p7=a("li"),Pve=a("strong"),X1r=o("mobilebert"),z1r=o(" \u2014 "),CH=a("a"),W1r=o("TFMobileBertModel"),Q1r=o(" (MobileBERT model)"),H1r=l(),_7=a("li"),Bve=a("strong"),U1r=o("mpnet"),J1r=o(" \u2014 "),wH=a("a"),Y1r=o("TFMPNetModel"),K1r=o(" (MPNet model)"),Z1r=l(),u7=a("li"),Ive=a("strong"),e2r=o("mt5"),o2r=o(" \u2014 "),AH=a("a"),r2r=o("TFMT5Model"),t2r=o(" (MT5 model)"),a2r=l(),b7=a("li"),Nve=a("strong"),n2r=o("openai-gpt"),s2r=o(" \u2014 "),LH=a("a"),l2r=o("TFOpenAIGPTModel"),i2r=o(" (OpenAI GPT model)"),d2r=l(),v7=a("li"),qve=a("strong"),c2r=o("opt"),f2r=o(" \u2014 "),yH=a("a"),m2r=o("TFOPTModel"),g2r=o(" (OPT model)"),h2r=l(),F7=a("li"),jve=a("strong"),p2r=o("pegasus"),_2r=o(" \u2014 "),xH=a("a"),u2r=o("TFPegasusModel"),b2r=o(" (Pegasus model)"),v2r=l(),T7=a("li"),Dve=a("strong"),F2r=o("rembert"),T2r=o(" \u2014 "),$H=a("a"),M2r=o("TFRemBertModel"),E2r=o(" (RemBERT model)"),C2r=l(),M7=a("li"),Gve=a("strong"),w2r=o("roberta"),A2r=o(" \u2014 "),kH=a("a"),L2r=o("TFRobertaModel"),y2r=o(" (RoBERTa model)"),x2r=l(),E7=a("li"),Ove=a("strong"),$2r=o("roformer"),k2r=o(" \u2014 "),SH=a("a"),S2r=o("TFRoFormerModel"),R2r=o(" (RoFormer model)"),P2r=l(),C7=a("li"),Vve=a("strong"),B2r=o("speech_to_text"),I2r=o(" \u2014 "),RH=a("a"),N2r=o("TFSpeech2TextModel"),q2r=o(" (Speech2Text model)"),j2r=l(),w7=a("li"),Xve=a("strong"),D2r=o("swin"),G2r=o(" \u2014 "),PH=a("a"),O2r=o("TFSwinModel"),V2r=o(" (Swin Transformer model)"),X2r=l(),A7=a("li"),zve=a("strong"),z2r=o("swinv2"),W2r=o(" \u2014 "),BH=a("a"),Q2r=o("TFSwinv2Model"),H2r=o(" (Swin Transformer V2 model)"),U2r=l(),L7=a("li"),Wve=a("strong"),J2r=o("t5"),Y2r=o(" \u2014 "),IH=a("a"),K2r=o("TFT5Model"),Z2r=o(" (T5 model)"),ebr=l(),y7=a("li"),Qve=a("strong"),obr=o("tapas"),rbr=o(" \u2014 "),NH=a("a"),tbr=o("TFTapasModel"),abr=o(" (TAPAS model)"),nbr=l(),x7=a("li"),Hve=a("strong"),sbr=o("transfo-xl"),lbr=o(" \u2014 "),qH=a("a"),ibr=o("TFTransfoXLModel"),dbr=o(" (Transformer-XL model)"),cbr=l(),$7=a("li"),Uve=a("strong"),fbr=o("vit"),mbr=o(" \u2014 "),jH=a("a"),gbr=o("TFViTModel"),hbr=o(" (ViT model)"),pbr=l(),k7=a("li"),Jve=a("strong"),_br=o("vit_mae"),ubr=o(" \u2014 "),DH=a("a"),bbr=o("TFViTMAEModel"),vbr=o(" (ViTMAE model)"),Fbr=l(),S7=a("li"),Yve=a("strong"),Tbr=o("wav2vec2"),Mbr=o(" \u2014 "),GH=a("a"),Ebr=o("TFWav2Vec2Model"),Cbr=o(" (Wav2Vec2 model)"),wbr=l(),R7=a("li"),Kve=a("strong"),Abr=o("xlm"),Lbr=o(" \u2014 "),OH=a("a"),ybr=o("TFXLMModel"),xbr=o(" (XLM model)"),$br=l(),P7=a("li"),Zve=a("strong"),kbr=o("xlm-roberta"),Sbr=o(" \u2014 "),VH=a("a"),Rbr=o("TFXLMRobertaModel"),Pbr=o(" (XLM-RoBERTa model)"),Bbr=l(),B7=a("li"),eFe=a("strong"),Ibr=o("xlnet"),Nbr=o(" \u2014 "),XH=a("a"),qbr=o("TFXLNetModel"),jbr=o(" (XLNet model)"),Dbr=l(),F(I7.$$.fragment),BOe=l(),tc=a("h2"),N7=a("a"),oFe=a("span"),F(b8.$$.fragment),Gbr=l(),rFe=a("span"),Obr=o("TFAutoModelForPreTraining"),IOe=l(),er=a("div"),F(v8.$$.fragment),Vbr=l(),ac=a("p"),Xbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zH=a("a"),zbr=o("from_pretrained()"),Wbr=o(" class method or the "),WH=a("a"),Qbr=o("from_config()"),Hbr=o(` class
method.`),Ubr=l(),F8=a("p"),Jbr=o("This class cannot be instantiated directly using "),tFe=a("code"),Ybr=o("__init__()"),Kbr=o(" (throws an error)."),Zbr=l(),St=a("div"),F(T8.$$.fragment),e4r=l(),aFe=a("p"),o4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),r4r=l(),nc=a("p"),t4r=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),a4r=o("not"),n4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),s4r=o("from_pretrained()"),l4r=o(" to load the model weights."),i4r=l(),F(q7.$$.fragment),d4r=l(),yr=a("div"),F(M8.$$.fragment),c4r=l(),sFe=a("p"),f4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),m4r=l(),sn=a("p"),g4r=o("The model class to instantiate is selected based on the "),lFe=a("code"),h4r=o("model_type"),p4r=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),_4r=o("pretrained_model_name_or_path"),u4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),b4r=o("pretrained_model_name_or_path"),v4r=o(":"),F4r=l(),se=a("ul"),j7=a("li"),cFe=a("strong"),T4r=o("albert"),M4r=o(" \u2014 "),HH=a("a"),E4r=o("TFAlbertForPreTraining"),C4r=o(" (ALBERT model)"),w4r=l(),D7=a("li"),fFe=a("strong"),A4r=o("bart"),L4r=o(" \u2014 "),UH=a("a"),y4r=o("TFBartForConditionalGeneration"),x4r=o(" (BART model)"),$4r=l(),G7=a("li"),mFe=a("strong"),k4r=o("bert"),S4r=o(" \u2014 "),JH=a("a"),R4r=o("TFBertForPreTraining"),P4r=o(" (BERT model)"),B4r=l(),O7=a("li"),gFe=a("strong"),I4r=o("camembert"),N4r=o(" \u2014 "),YH=a("a"),q4r=o("TFCamembertForMaskedLM"),j4r=o(" (CamemBERT model)"),D4r=l(),V7=a("li"),hFe=a("strong"),G4r=o("ctrl"),O4r=o(" \u2014 "),KH=a("a"),V4r=o("TFCTRLLMHeadModel"),X4r=o(" (CTRL model)"),z4r=l(),X7=a("li"),pFe=a("strong"),W4r=o("distilbert"),Q4r=o(" \u2014 "),ZH=a("a"),H4r=o("TFDistilBertForMaskedLM"),U4r=o(" (DistilBERT model)"),J4r=l(),z7=a("li"),_Fe=a("strong"),Y4r=o("electra"),K4r=o(" \u2014 "),eU=a("a"),Z4r=o("TFElectraForPreTraining"),evr=o(" (ELECTRA model)"),ovr=l(),W7=a("li"),uFe=a("strong"),rvr=o("flaubert"),tvr=o(" \u2014 "),oU=a("a"),avr=o("TFFlaubertWithLMHeadModel"),nvr=o(" (FlauBERT model)"),svr=l(),Q7=a("li"),bFe=a("strong"),lvr=o("funnel"),ivr=o(" \u2014 "),rU=a("a"),dvr=o("TFFunnelForPreTraining"),cvr=o(" (Funnel Transformer model)"),fvr=l(),H7=a("li"),vFe=a("strong"),mvr=o("gpt2"),gvr=o(" \u2014 "),tU=a("a"),hvr=o("TFGPT2LMHeadModel"),pvr=o(" (OpenAI GPT-2 model)"),_vr=l(),U7=a("li"),FFe=a("strong"),uvr=o("layoutlm"),bvr=o(" \u2014 "),aU=a("a"),vvr=o("TFLayoutLMForMaskedLM"),Fvr=o(" (LayoutLM model)"),Tvr=l(),J7=a("li"),TFe=a("strong"),Mvr=o("lxmert"),Evr=o(" \u2014 "),nU=a("a"),Cvr=o("TFLxmertForPreTraining"),wvr=o(" (LXMERT model)"),Avr=l(),Y7=a("li"),MFe=a("strong"),Lvr=o("mobilebert"),yvr=o(" \u2014 "),sU=a("a"),xvr=o("TFMobileBertForPreTraining"),$vr=o(" (MobileBERT model)"),kvr=l(),K7=a("li"),EFe=a("strong"),Svr=o("mpnet"),Rvr=o(" \u2014 "),lU=a("a"),Pvr=o("TFMPNetForMaskedLM"),Bvr=o(" (MPNet model)"),Ivr=l(),Z7=a("li"),CFe=a("strong"),Nvr=o("openai-gpt"),qvr=o(" \u2014 "),iU=a("a"),jvr=o("TFOpenAIGPTLMHeadModel"),Dvr=o(" (OpenAI GPT model)"),Gvr=l(),e9=a("li"),wFe=a("strong"),Ovr=o("roberta"),Vvr=o(" \u2014 "),dU=a("a"),Xvr=o("TFRobertaForMaskedLM"),zvr=o(" (RoBERTa model)"),Wvr=l(),o9=a("li"),AFe=a("strong"),Qvr=o("t5"),Hvr=o(" \u2014 "),cU=a("a"),Uvr=o("TFT5ForConditionalGeneration"),Jvr=o(" (T5 model)"),Yvr=l(),r9=a("li"),LFe=a("strong"),Kvr=o("tapas"),Zvr=o(" \u2014 "),fU=a("a"),eFr=o("TFTapasForMaskedLM"),oFr=o(" (TAPAS model)"),rFr=l(),t9=a("li"),yFe=a("strong"),tFr=o("transfo-xl"),aFr=o(" \u2014 "),mU=a("a"),nFr=o("TFTransfoXLLMHeadModel"),sFr=o(" (Transformer-XL model)"),lFr=l(),a9=a("li"),xFe=a("strong"),iFr=o("vit_mae"),dFr=o(" \u2014 "),gU=a("a"),cFr=o("TFViTMAEForPreTraining"),fFr=o(" (ViTMAE model)"),mFr=l(),n9=a("li"),$Fe=a("strong"),gFr=o("xlm"),hFr=o(" \u2014 "),hU=a("a"),pFr=o("TFXLMWithLMHeadModel"),_Fr=o(" (XLM model)"),uFr=l(),s9=a("li"),kFe=a("strong"),bFr=o("xlm-roberta"),vFr=o(" \u2014 "),pU=a("a"),FFr=o("TFXLMRobertaForMaskedLM"),TFr=o(" (XLM-RoBERTa model)"),MFr=l(),l9=a("li"),SFe=a("strong"),EFr=o("xlnet"),CFr=o(" \u2014 "),_U=a("a"),wFr=o("TFXLNetLMHeadModel"),AFr=o(" (XLNet model)"),LFr=l(),F(i9.$$.fragment),NOe=l(),sc=a("h2"),d9=a("a"),RFe=a("span"),F(E8.$$.fragment),yFr=l(),PFe=a("span"),xFr=o("TFAutoModelForCausalLM"),qOe=l(),or=a("div"),F(C8.$$.fragment),$Fr=l(),lc=a("p"),kFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uU=a("a"),SFr=o("from_pretrained()"),RFr=o(" class method or the "),bU=a("a"),PFr=o("from_config()"),BFr=o(` class
method.`),IFr=l(),w8=a("p"),NFr=o("This class cannot be instantiated directly using "),BFe=a("code"),qFr=o("__init__()"),jFr=o(" (throws an error)."),DFr=l(),Rt=a("div"),F(A8.$$.fragment),GFr=l(),IFe=a("p"),OFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VFr=l(),ic=a("p"),XFr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),zFr=o("not"),WFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),QFr=o("from_pretrained()"),HFr=o(" to load the model weights."),UFr=l(),F(c9.$$.fragment),JFr=l(),xr=a("div"),F(L8.$$.fragment),YFr=l(),qFe=a("p"),KFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ZFr=l(),ln=a("p"),e6r=o("The model class to instantiate is selected based on the "),jFe=a("code"),o6r=o("model_type"),r6r=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),t6r=o("pretrained_model_name_or_path"),a6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),n6r=o("pretrained_model_name_or_path"),s6r=o(":"),l6r=l(),Me=a("ul"),f9=a("li"),OFe=a("strong"),i6r=o("bert"),d6r=o(" \u2014 "),FU=a("a"),c6r=o("TFBertLMHeadModel"),f6r=o(" (BERT model)"),m6r=l(),m9=a("li"),VFe=a("strong"),g6r=o("camembert"),h6r=o(" \u2014 "),TU=a("a"),p6r=o("TFCamembertForCausalLM"),_6r=o(" (CamemBERT model)"),u6r=l(),g9=a("li"),XFe=a("strong"),b6r=o("ctrl"),v6r=o(" \u2014 "),MU=a("a"),F6r=o("TFCTRLLMHeadModel"),T6r=o(" (CTRL model)"),M6r=l(),h9=a("li"),zFe=a("strong"),E6r=o("gpt2"),C6r=o(" \u2014 "),EU=a("a"),w6r=o("TFGPT2LMHeadModel"),A6r=o(" (OpenAI GPT-2 model)"),L6r=l(),p9=a("li"),WFe=a("strong"),y6r=o("gptj"),x6r=o(" \u2014 "),CU=a("a"),$6r=o("TFGPTJForCausalLM"),k6r=o(" (GPT-J model)"),S6r=l(),_9=a("li"),QFe=a("strong"),R6r=o("openai-gpt"),P6r=o(" \u2014 "),wU=a("a"),B6r=o("TFOpenAIGPTLMHeadModel"),I6r=o(" (OpenAI GPT model)"),N6r=l(),u9=a("li"),HFe=a("strong"),q6r=o("opt"),j6r=o(" \u2014 "),AU=a("a"),D6r=o("TFOPTForCausalLM"),G6r=o(" (OPT model)"),O6r=l(),b9=a("li"),UFe=a("strong"),V6r=o("rembert"),X6r=o(" \u2014 "),LU=a("a"),z6r=o("TFRemBertForCausalLM"),W6r=o(" (RemBERT model)"),Q6r=l(),v9=a("li"),JFe=a("strong"),H6r=o("roberta"),U6r=o(" \u2014 "),yU=a("a"),J6r=o("TFRobertaForCausalLM"),Y6r=o(" (RoBERTa model)"),K6r=l(),F9=a("li"),YFe=a("strong"),Z6r=o("roformer"),eTr=o(" \u2014 "),xU=a("a"),oTr=o("TFRoFormerForCausalLM"),rTr=o(" (RoFormer model)"),tTr=l(),T9=a("li"),KFe=a("strong"),aTr=o("transfo-xl"),nTr=o(" \u2014 "),$U=a("a"),sTr=o("TFTransfoXLLMHeadModel"),lTr=o(" (Transformer-XL model)"),iTr=l(),M9=a("li"),ZFe=a("strong"),dTr=o("xlm"),cTr=o(" \u2014 "),kU=a("a"),fTr=o("TFXLMWithLMHeadModel"),mTr=o(" (XLM model)"),gTr=l(),E9=a("li"),e6e=a("strong"),hTr=o("xlnet"),pTr=o(" \u2014 "),SU=a("a"),_Tr=o("TFXLNetLMHeadModel"),uTr=o(" (XLNet model)"),bTr=l(),F(C9.$$.fragment),jOe=l(),dc=a("h2"),w9=a("a"),o6e=a("span"),F(y8.$$.fragment),vTr=l(),r6e=a("span"),FTr=o("TFAutoModelForImageClassification"),DOe=l(),rr=a("div"),F(x8.$$.fragment),TTr=l(),cc=a("p"),MTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RU=a("a"),ETr=o("from_pretrained()"),CTr=o(" class method or the "),PU=a("a"),wTr=o("from_config()"),ATr=o(` class
method.`),LTr=l(),$8=a("p"),yTr=o("This class cannot be instantiated directly using "),t6e=a("code"),xTr=o("__init__()"),$Tr=o(" (throws an error)."),kTr=l(),Pt=a("div"),F(k8.$$.fragment),STr=l(),a6e=a("p"),RTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PTr=l(),fc=a("p"),BTr=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),ITr=o("not"),NTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),qTr=o("from_pretrained()"),jTr=o(" to load the model weights."),DTr=l(),F(A9.$$.fragment),GTr=l(),$r=a("div"),F(S8.$$.fragment),OTr=l(),s6e=a("p"),VTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XTr=l(),dn=a("p"),zTr=o("The model class to instantiate is selected based on the "),l6e=a("code"),WTr=o("model_type"),QTr=o(` property of the config object (either
passed as an argument or loaded from `),i6e=a("code"),HTr=o("pretrained_model_name_or_path"),UTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(":"),KTr=l(),rt=a("ul"),L9=a("li"),c6e=a("strong"),ZTr=o("convnext"),e7r=o(" \u2014 "),IU=a("a"),o7r=o("TFConvNextForImageClassification"),r7r=o(" (ConvNeXT model)"),t7r=l(),y9=a("li"),f6e=a("strong"),a7r=o("data2vec-vision"),n7r=o(" \u2014 "),NU=a("a"),s7r=o("TFData2VecVisionForImageClassification"),l7r=o(" (Data2VecVision model)"),i7r=l(),x9=a("li"),m6e=a("strong"),d7r=o("swin"),c7r=o(" \u2014 "),qU=a("a"),f7r=o("TFSwinForImageClassification"),m7r=o(" (Swin Transformer model)"),g7r=l(),$9=a("li"),g6e=a("strong"),h7r=o("swinv2"),p7r=o(" \u2014 "),jU=a("a"),_7r=o("TFSwinv2ForImageClassification"),u7r=o(" (Swin Transformer V2 model)"),b7r=l(),k9=a("li"),h6e=a("strong"),v7r=o("vit"),F7r=o(" \u2014 "),DU=a("a"),T7r=o("TFViTForImageClassification"),M7r=o(" (ViT model)"),E7r=l(),F(S9.$$.fragment),GOe=l(),mc=a("h2"),R9=a("a"),p6e=a("span"),F(R8.$$.fragment),C7r=l(),_6e=a("span"),w7r=o("TFAutoModelForMaskedLM"),OOe=l(),tr=a("div"),F(P8.$$.fragment),A7r=l(),gc=a("p"),L7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GU=a("a"),y7r=o("from_pretrained()"),x7r=o(" class method or the "),OU=a("a"),$7r=o("from_config()"),k7r=o(` class
method.`),S7r=l(),B8=a("p"),R7r=o("This class cannot be instantiated directly using "),u6e=a("code"),P7r=o("__init__()"),B7r=o(" (throws an error)."),I7r=l(),Bt=a("div"),F(I8.$$.fragment),N7r=l(),b6e=a("p"),q7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),j7r=l(),hc=a("p"),D7r=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),G7r=o("not"),O7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),V7r=o("from_pretrained()"),X7r=o(" to load the model weights."),z7r=l(),F(P9.$$.fragment),W7r=l(),kr=a("div"),F(N8.$$.fragment),Q7r=l(),F6e=a("p"),H7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U7r=l(),cn=a("p"),J7r=o("The model class to instantiate is selected based on the "),T6e=a("code"),Y7r=o("model_type"),K7r=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),Z7r=o("pretrained_model_name_or_path"),e9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),o9r=o("pretrained_model_name_or_path"),r9r=o(":"),t9r=l(),ie=a("ul"),B9=a("li"),C6e=a("strong"),a9r=o("albert"),n9r=o(" \u2014 "),XU=a("a"),s9r=o("TFAlbertForMaskedLM"),l9r=o(" (ALBERT model)"),i9r=l(),I9=a("li"),w6e=a("strong"),d9r=o("bert"),c9r=o(" \u2014 "),zU=a("a"),f9r=o("TFBertForMaskedLM"),m9r=o(" (BERT model)"),g9r=l(),N9=a("li"),A6e=a("strong"),h9r=o("camembert"),p9r=o(" \u2014 "),WU=a("a"),_9r=o("TFCamembertForMaskedLM"),u9r=o(" (CamemBERT model)"),b9r=l(),q9=a("li"),L6e=a("strong"),v9r=o("convbert"),F9r=o(" \u2014 "),QU=a("a"),T9r=o("TFConvBertForMaskedLM"),M9r=o(" (ConvBERT model)"),E9r=l(),j9=a("li"),y6e=a("strong"),C9r=o("deberta"),w9r=o(" \u2014 "),HU=a("a"),A9r=o("TFDebertaForMaskedLM"),L9r=o(" (DeBERTa model)"),y9r=l(),D9=a("li"),x6e=a("strong"),x9r=o("deberta-v2"),$9r=o(" \u2014 "),UU=a("a"),k9r=o("TFDebertaV2ForMaskedLM"),S9r=o(" (DeBERTa-v2 model)"),R9r=l(),G9=a("li"),$6e=a("strong"),P9r=o("distilbert"),B9r=o(" \u2014 "),JU=a("a"),I9r=o("TFDistilBertForMaskedLM"),N9r=o(" (DistilBERT model)"),q9r=l(),O9=a("li"),k6e=a("strong"),j9r=o("electra"),D9r=o(" \u2014 "),YU=a("a"),G9r=o("TFElectraForMaskedLM"),O9r=o(" (ELECTRA model)"),V9r=l(),V9=a("li"),S6e=a("strong"),X9r=o("flaubert"),z9r=o(" \u2014 "),KU=a("a"),W9r=o("TFFlaubertWithLMHeadModel"),Q9r=o(" (FlauBERT model)"),H9r=l(),X9=a("li"),R6e=a("strong"),U9r=o("funnel"),J9r=o(" \u2014 "),ZU=a("a"),Y9r=o("TFFunnelForMaskedLM"),K9r=o(" (Funnel Transformer model)"),Z9r=l(),z9=a("li"),P6e=a("strong"),eMr=o("layoutlm"),oMr=o(" \u2014 "),eJ=a("a"),rMr=o("TFLayoutLMForMaskedLM"),tMr=o(" (LayoutLM model)"),aMr=l(),W9=a("li"),B6e=a("strong"),nMr=o("longformer"),sMr=o(" \u2014 "),oJ=a("a"),lMr=o("TFLongformerForMaskedLM"),iMr=o(" (Longformer model)"),dMr=l(),Q9=a("li"),I6e=a("strong"),cMr=o("mobilebert"),fMr=o(" \u2014 "),rJ=a("a"),mMr=o("TFMobileBertForMaskedLM"),gMr=o(" (MobileBERT model)"),hMr=l(),H9=a("li"),N6e=a("strong"),pMr=o("mpnet"),_Mr=o(" \u2014 "),tJ=a("a"),uMr=o("TFMPNetForMaskedLM"),bMr=o(" (MPNet model)"),vMr=l(),U9=a("li"),q6e=a("strong"),FMr=o("rembert"),TMr=o(" \u2014 "),aJ=a("a"),MMr=o("TFRemBertForMaskedLM"),EMr=o(" (RemBERT model)"),CMr=l(),J9=a("li"),j6e=a("strong"),wMr=o("roberta"),AMr=o(" \u2014 "),nJ=a("a"),LMr=o("TFRobertaForMaskedLM"),yMr=o(" (RoBERTa model)"),xMr=l(),Y9=a("li"),D6e=a("strong"),$Mr=o("roformer"),kMr=o(" \u2014 "),sJ=a("a"),SMr=o("TFRoFormerForMaskedLM"),RMr=o(" (RoFormer model)"),PMr=l(),K9=a("li"),G6e=a("strong"),BMr=o("tapas"),IMr=o(" \u2014 "),lJ=a("a"),NMr=o("TFTapasForMaskedLM"),qMr=o(" (TAPAS model)"),jMr=l(),Z9=a("li"),O6e=a("strong"),DMr=o("xlm"),GMr=o(" \u2014 "),iJ=a("a"),OMr=o("TFXLMWithLMHeadModel"),VMr=o(" (XLM model)"),XMr=l(),eM=a("li"),V6e=a("strong"),zMr=o("xlm-roberta"),WMr=o(" \u2014 "),dJ=a("a"),QMr=o("TFXLMRobertaForMaskedLM"),HMr=o(" (XLM-RoBERTa model)"),UMr=l(),F(oM.$$.fragment),VOe=l(),pc=a("h2"),rM=a("a"),X6e=a("span"),F(q8.$$.fragment),JMr=l(),z6e=a("span"),YMr=o("TFAutoModelForSeq2SeqLM"),XOe=l(),ar=a("div"),F(j8.$$.fragment),KMr=l(),_c=a("p"),ZMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cJ=a("a"),eEr=o("from_pretrained()"),oEr=o(" class method or the "),fJ=a("a"),rEr=o("from_config()"),tEr=o(` class
method.`),aEr=l(),D8=a("p"),nEr=o("This class cannot be instantiated directly using "),W6e=a("code"),sEr=o("__init__()"),lEr=o(" (throws an error)."),iEr=l(),It=a("div"),F(G8.$$.fragment),dEr=l(),Q6e=a("p"),cEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fEr=l(),uc=a("p"),mEr=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),gEr=o("not"),hEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),pEr=o("from_pretrained()"),_Er=o(" to load the model weights."),uEr=l(),F(tM.$$.fragment),bEr=l(),Sr=a("div"),F(O8.$$.fragment),vEr=l(),U6e=a("p"),FEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TEr=l(),fn=a("p"),MEr=o("The model class to instantiate is selected based on the "),J6e=a("code"),EEr=o("model_type"),CEr=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),LEr=o("pretrained_model_name_or_path"),yEr=o(":"),xEr=l(),ye=a("ul"),aM=a("li"),Z6e=a("strong"),$Er=o("bart"),kEr=o(" \u2014 "),gJ=a("a"),SEr=o("TFBartForConditionalGeneration"),REr=o(" (BART model)"),PEr=l(),nM=a("li"),eTe=a("strong"),BEr=o("blenderbot"),IEr=o(" \u2014 "),hJ=a("a"),NEr=o("TFBlenderbotForConditionalGeneration"),qEr=o(" (Blenderbot model)"),jEr=l(),sM=a("li"),oTe=a("strong"),DEr=o("blenderbot-small"),GEr=o(" \u2014 "),pJ=a("a"),OEr=o("TFBlenderbotSmallForConditionalGeneration"),VEr=o(" (BlenderbotSmall model)"),XEr=l(),lM=a("li"),rTe=a("strong"),zEr=o("encoder-decoder"),WEr=o(" \u2014 "),_J=a("a"),QEr=o("TFEncoderDecoderModel"),HEr=o(" (Encoder decoder model)"),UEr=l(),iM=a("li"),tTe=a("strong"),JEr=o("led"),YEr=o(" \u2014 "),uJ=a("a"),KEr=o("TFLEDForConditionalGeneration"),ZEr=o(" (LED model)"),eCr=l(),dM=a("li"),aTe=a("strong"),oCr=o("marian"),rCr=o(" \u2014 "),bJ=a("a"),tCr=o("TFMarianMTModel"),aCr=o(" (Marian model)"),nCr=l(),cM=a("li"),nTe=a("strong"),sCr=o("mbart"),lCr=o(" \u2014 "),vJ=a("a"),iCr=o("TFMBartForConditionalGeneration"),dCr=o(" (mBART model)"),cCr=l(),fM=a("li"),sTe=a("strong"),fCr=o("mt5"),mCr=o(" \u2014 "),FJ=a("a"),gCr=o("TFMT5ForConditionalGeneration"),hCr=o(" (MT5 model)"),pCr=l(),mM=a("li"),lTe=a("strong"),_Cr=o("pegasus"),uCr=o(" \u2014 "),TJ=a("a"),bCr=o("TFPegasusForConditionalGeneration"),vCr=o(" (Pegasus model)"),FCr=l(),gM=a("li"),iTe=a("strong"),TCr=o("t5"),MCr=o(" \u2014 "),MJ=a("a"),ECr=o("TFT5ForConditionalGeneration"),CCr=o(" (T5 model)"),wCr=l(),F(hM.$$.fragment),zOe=l(),bc=a("h2"),pM=a("a"),dTe=a("span"),F(V8.$$.fragment),ACr=l(),cTe=a("span"),LCr=o("TFAutoModelForSequenceClassification"),WOe=l(),nr=a("div"),F(X8.$$.fragment),yCr=l(),vc=a("p"),xCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EJ=a("a"),$Cr=o("from_pretrained()"),kCr=o(" class method or the "),CJ=a("a"),SCr=o("from_config()"),RCr=o(` class
method.`),PCr=l(),z8=a("p"),BCr=o("This class cannot be instantiated directly using "),fTe=a("code"),ICr=o("__init__()"),NCr=o(" (throws an error)."),qCr=l(),Nt=a("div"),F(W8.$$.fragment),jCr=l(),mTe=a("p"),DCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GCr=l(),Fc=a("p"),OCr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),VCr=o("not"),XCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),zCr=o("from_pretrained()"),WCr=o(" to load the model weights."),QCr=l(),F(_M.$$.fragment),HCr=l(),Rr=a("div"),F(Q8.$$.fragment),UCr=l(),hTe=a("p"),JCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YCr=l(),mn=a("p"),KCr=o("The model class to instantiate is selected based on the "),pTe=a("code"),ZCr=o("model_type"),e5r=o(` property of the config object (either
passed as an argument or loaded from `),_Te=a("code"),o5r=o("pretrained_model_name_or_path"),r5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),t5r=o("pretrained_model_name_or_path"),a5r=o(":"),n5r=l(),te=a("ul"),uM=a("li"),bTe=a("strong"),s5r=o("albert"),l5r=o(" \u2014 "),AJ=a("a"),i5r=o("TFAlbertForSequenceClassification"),d5r=o(" (ALBERT model)"),c5r=l(),bM=a("li"),vTe=a("strong"),f5r=o("bert"),m5r=o(" \u2014 "),LJ=a("a"),g5r=o("TFBertForSequenceClassification"),h5r=o(" (BERT model)"),p5r=l(),vM=a("li"),FTe=a("strong"),_5r=o("camembert"),u5r=o(" \u2014 "),yJ=a("a"),b5r=o("TFCamembertForSequenceClassification"),v5r=o(" (CamemBERT model)"),F5r=l(),FM=a("li"),TTe=a("strong"),T5r=o("convbert"),M5r=o(" \u2014 "),xJ=a("a"),E5r=o("TFConvBertForSequenceClassification"),C5r=o(" (ConvBERT model)"),w5r=l(),TM=a("li"),MTe=a("strong"),A5r=o("ctrl"),L5r=o(" \u2014 "),$J=a("a"),y5r=o("TFCTRLForSequenceClassification"),x5r=o(" (CTRL model)"),$5r=l(),MM=a("li"),ETe=a("strong"),k5r=o("deberta"),S5r=o(" \u2014 "),kJ=a("a"),R5r=o("TFDebertaForSequenceClassification"),P5r=o(" (DeBERTa model)"),B5r=l(),EM=a("li"),CTe=a("strong"),I5r=o("deberta-v2"),N5r=o(" \u2014 "),SJ=a("a"),q5r=o("TFDebertaV2ForSequenceClassification"),j5r=o(" (DeBERTa-v2 model)"),D5r=l(),CM=a("li"),wTe=a("strong"),G5r=o("distilbert"),O5r=o(" \u2014 "),RJ=a("a"),V5r=o("TFDistilBertForSequenceClassification"),X5r=o(" (DistilBERT model)"),z5r=l(),wM=a("li"),ATe=a("strong"),W5r=o("electra"),Q5r=o(" \u2014 "),PJ=a("a"),H5r=o("TFElectraForSequenceClassification"),U5r=o(" (ELECTRA model)"),J5r=l(),AM=a("li"),LTe=a("strong"),Y5r=o("flaubert"),K5r=o(" \u2014 "),BJ=a("a"),Z5r=o("TFFlaubertForSequenceClassification"),e3r=o(" (FlauBERT model)"),o3r=l(),LM=a("li"),yTe=a("strong"),r3r=o("funnel"),t3r=o(" \u2014 "),IJ=a("a"),a3r=o("TFFunnelForSequenceClassification"),n3r=o(" (Funnel Transformer model)"),s3r=l(),yM=a("li"),xTe=a("strong"),l3r=o("gpt2"),i3r=o(" \u2014 "),NJ=a("a"),d3r=o("TFGPT2ForSequenceClassification"),c3r=o(" (OpenAI GPT-2 model)"),f3r=l(),xM=a("li"),$Te=a("strong"),m3r=o("gptj"),g3r=o(" \u2014 "),qJ=a("a"),h3r=o("TFGPTJForSequenceClassification"),p3r=o(" (GPT-J model)"),_3r=l(),$M=a("li"),kTe=a("strong"),u3r=o("layoutlm"),b3r=o(" \u2014 "),jJ=a("a"),v3r=o("TFLayoutLMForSequenceClassification"),F3r=o(" (LayoutLM model)"),T3r=l(),kM=a("li"),STe=a("strong"),M3r=o("longformer"),E3r=o(" \u2014 "),DJ=a("a"),C3r=o("TFLongformerForSequenceClassification"),w3r=o(" (Longformer model)"),A3r=l(),SM=a("li"),RTe=a("strong"),L3r=o("mobilebert"),y3r=o(" \u2014 "),GJ=a("a"),x3r=o("TFMobileBertForSequenceClassification"),$3r=o(" (MobileBERT model)"),k3r=l(),RM=a("li"),PTe=a("strong"),S3r=o("mpnet"),R3r=o(" \u2014 "),OJ=a("a"),P3r=o("TFMPNetForSequenceClassification"),B3r=o(" (MPNet model)"),I3r=l(),PM=a("li"),BTe=a("strong"),N3r=o("openai-gpt"),q3r=o(" \u2014 "),VJ=a("a"),j3r=o("TFOpenAIGPTForSequenceClassification"),D3r=o(" (OpenAI GPT model)"),G3r=l(),BM=a("li"),ITe=a("strong"),O3r=o("rembert"),V3r=o(" \u2014 "),XJ=a("a"),X3r=o("TFRemBertForSequenceClassification"),z3r=o(" (RemBERT model)"),W3r=l(),IM=a("li"),NTe=a("strong"),Q3r=o("roberta"),H3r=o(" \u2014 "),zJ=a("a"),U3r=o("TFRobertaForSequenceClassification"),J3r=o(" (RoBERTa model)"),Y3r=l(),NM=a("li"),qTe=a("strong"),K3r=o("roformer"),Z3r=o(" \u2014 "),WJ=a("a"),e0r=o("TFRoFormerForSequenceClassification"),o0r=o(" (RoFormer model)"),r0r=l(),qM=a("li"),jTe=a("strong"),t0r=o("tapas"),a0r=o(" \u2014 "),QJ=a("a"),n0r=o("TFTapasForSequenceClassification"),s0r=o(" (TAPAS model)"),l0r=l(),jM=a("li"),DTe=a("strong"),i0r=o("transfo-xl"),d0r=o(" \u2014 "),HJ=a("a"),c0r=o("TFTransfoXLForSequenceClassification"),f0r=o(" (Transformer-XL model)"),m0r=l(),DM=a("li"),GTe=a("strong"),g0r=o("xlm"),h0r=o(" \u2014 "),UJ=a("a"),p0r=o("TFXLMForSequenceClassification"),_0r=o(" (XLM model)"),u0r=l(),GM=a("li"),OTe=a("strong"),b0r=o("xlm-roberta"),v0r=o(" \u2014 "),JJ=a("a"),F0r=o("TFXLMRobertaForSequenceClassification"),T0r=o(" (XLM-RoBERTa model)"),M0r=l(),OM=a("li"),VTe=a("strong"),E0r=o("xlnet"),C0r=o(" \u2014 "),YJ=a("a"),w0r=o("TFXLNetForSequenceClassification"),A0r=o(" (XLNet model)"),L0r=l(),F(VM.$$.fragment),QOe=l(),Tc=a("h2"),XM=a("a"),XTe=a("span"),F(H8.$$.fragment),y0r=l(),zTe=a("span"),x0r=o("TFAutoModelForMultipleChoice"),HOe=l(),sr=a("div"),F(U8.$$.fragment),$0r=l(),Mc=a("p"),k0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=a("a"),S0r=o("from_pretrained()"),R0r=o(" class method or the "),ZJ=a("a"),P0r=o("from_config()"),B0r=o(` class
method.`),I0r=l(),J8=a("p"),N0r=o("This class cannot be instantiated directly using "),WTe=a("code"),q0r=o("__init__()"),j0r=o(" (throws an error)."),D0r=l(),qt=a("div"),F(Y8.$$.fragment),G0r=l(),QTe=a("p"),O0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V0r=l(),Ec=a("p"),X0r=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),z0r=o("not"),W0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),Q0r=o("from_pretrained()"),H0r=o(" to load the model weights."),U0r=l(),F(zM.$$.fragment),J0r=l(),Pr=a("div"),F(K8.$$.fragment),Y0r=l(),UTe=a("p"),K0r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z0r=l(),gn=a("p"),ewr=o("The model class to instantiate is selected based on the "),JTe=a("code"),owr=o("model_type"),rwr=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),twr=o("pretrained_model_name_or_path"),awr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(":"),lwr=l(),_e=a("ul"),WM=a("li"),ZTe=a("strong"),iwr=o("albert"),dwr=o(" \u2014 "),oY=a("a"),cwr=o("TFAlbertForMultipleChoice"),fwr=o(" (ALBERT model)"),mwr=l(),QM=a("li"),e7e=a("strong"),gwr=o("bert"),hwr=o(" \u2014 "),rY=a("a"),pwr=o("TFBertForMultipleChoice"),_wr=o(" (BERT model)"),uwr=l(),HM=a("li"),o7e=a("strong"),bwr=o("camembert"),vwr=o(" \u2014 "),tY=a("a"),Fwr=o("TFCamembertForMultipleChoice"),Twr=o(" (CamemBERT model)"),Mwr=l(),UM=a("li"),r7e=a("strong"),Ewr=o("convbert"),Cwr=o(" \u2014 "),aY=a("a"),wwr=o("TFConvBertForMultipleChoice"),Awr=o(" (ConvBERT model)"),Lwr=l(),JM=a("li"),t7e=a("strong"),ywr=o("distilbert"),xwr=o(" \u2014 "),nY=a("a"),$wr=o("TFDistilBertForMultipleChoice"),kwr=o(" (DistilBERT model)"),Swr=l(),YM=a("li"),a7e=a("strong"),Rwr=o("electra"),Pwr=o(" \u2014 "),sY=a("a"),Bwr=o("TFElectraForMultipleChoice"),Iwr=o(" (ELECTRA model)"),Nwr=l(),KM=a("li"),n7e=a("strong"),qwr=o("flaubert"),jwr=o(" \u2014 "),lY=a("a"),Dwr=o("TFFlaubertForMultipleChoice"),Gwr=o(" (FlauBERT model)"),Owr=l(),ZM=a("li"),s7e=a("strong"),Vwr=o("funnel"),Xwr=o(" \u2014 "),iY=a("a"),zwr=o("TFFunnelForMultipleChoice"),Wwr=o(" (Funnel Transformer model)"),Qwr=l(),eE=a("li"),l7e=a("strong"),Hwr=o("longformer"),Uwr=o(" \u2014 "),dY=a("a"),Jwr=o("TFLongformerForMultipleChoice"),Ywr=o(" (Longformer model)"),Kwr=l(),oE=a("li"),i7e=a("strong"),Zwr=o("mobilebert"),eAr=o(" \u2014 "),cY=a("a"),oAr=o("TFMobileBertForMultipleChoice"),rAr=o(" (MobileBERT model)"),tAr=l(),rE=a("li"),d7e=a("strong"),aAr=o("mpnet"),nAr=o(" \u2014 "),fY=a("a"),sAr=o("TFMPNetForMultipleChoice"),lAr=o(" (MPNet model)"),iAr=l(),tE=a("li"),c7e=a("strong"),dAr=o("rembert"),cAr=o(" \u2014 "),mY=a("a"),fAr=o("TFRemBertForMultipleChoice"),mAr=o(" (RemBERT model)"),gAr=l(),aE=a("li"),f7e=a("strong"),hAr=o("roberta"),pAr=o(" \u2014 "),gY=a("a"),_Ar=o("TFRobertaForMultipleChoice"),uAr=o(" (RoBERTa model)"),bAr=l(),nE=a("li"),m7e=a("strong"),vAr=o("roformer"),FAr=o(" \u2014 "),hY=a("a"),TAr=o("TFRoFormerForMultipleChoice"),MAr=o(" (RoFormer model)"),EAr=l(),sE=a("li"),g7e=a("strong"),CAr=o("xlm"),wAr=o(" \u2014 "),pY=a("a"),AAr=o("TFXLMForMultipleChoice"),LAr=o(" (XLM model)"),yAr=l(),lE=a("li"),h7e=a("strong"),xAr=o("xlm-roberta"),$Ar=o(" \u2014 "),_Y=a("a"),kAr=o("TFXLMRobertaForMultipleChoice"),SAr=o(" (XLM-RoBERTa model)"),RAr=l(),iE=a("li"),p7e=a("strong"),PAr=o("xlnet"),BAr=o(" \u2014 "),uY=a("a"),IAr=o("TFXLNetForMultipleChoice"),NAr=o(" (XLNet model)"),qAr=l(),F(dE.$$.fragment),UOe=l(),Cc=a("h2"),cE=a("a"),_7e=a("span"),F(Z8.$$.fragment),jAr=l(),u7e=a("span"),DAr=o("TFAutoModelForNextSentencePrediction"),JOe=l(),lr=a("div"),F(ex.$$.fragment),GAr=l(),wc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bY=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),vY=a("a"),zAr=o("from_config()"),WAr=o(` class
method.`),QAr=l(),ox=a("p"),HAr=o("This class cannot be instantiated directly using "),b7e=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),jt=a("div"),F(rx.$$.fragment),KAr=l(),v7e=a("p"),ZAr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eLr=l(),Ac=a("p"),oLr=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),rLr=o("not"),tLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),aLr=o("from_pretrained()"),nLr=o(" to load the model weights."),sLr=l(),F(fE.$$.fragment),lLr=l(),Br=a("div"),F(tx.$$.fragment),iLr=l(),T7e=a("p"),dLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cLr=l(),hn=a("p"),fLr=o("The model class to instantiate is selected based on the "),M7e=a("code"),mLr=o("model_type"),gLr=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),hLr=o("pretrained_model_name_or_path"),pLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),_Lr=o("pretrained_model_name_or_path"),uLr=o(":"),bLr=l(),ax=a("ul"),mE=a("li"),w7e=a("strong"),vLr=o("bert"),FLr=o(" \u2014 "),TY=a("a"),TLr=o("TFBertForNextSentencePrediction"),MLr=o(" (BERT model)"),ELr=l(),gE=a("li"),A7e=a("strong"),CLr=o("mobilebert"),wLr=o(" \u2014 "),MY=a("a"),ALr=o("TFMobileBertForNextSentencePrediction"),LLr=o(" (MobileBERT model)"),yLr=l(),F(hE.$$.fragment),YOe=l(),Lc=a("h2"),pE=a("a"),L7e=a("span"),F(nx.$$.fragment),xLr=l(),y7e=a("span"),$Lr=o("TFAutoModelForTableQuestionAnswering"),KOe=l(),ir=a("div"),F(sx.$$.fragment),kLr=l(),yc=a("p"),SLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EY=a("a"),RLr=o("from_pretrained()"),PLr=o(" class method or the "),CY=a("a"),BLr=o("from_config()"),ILr=o(` class
method.`),NLr=l(),lx=a("p"),qLr=o("This class cannot be instantiated directly using "),x7e=a("code"),jLr=o("__init__()"),DLr=o(" (throws an error)."),GLr=l(),Dt=a("div"),F(ix.$$.fragment),OLr=l(),$7e=a("p"),VLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XLr=l(),xc=a("p"),zLr=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),WLr=o("not"),QLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),HLr=o("from_pretrained()"),ULr=o(" to load the model weights."),JLr=l(),F(_E.$$.fragment),YLr=l(),Ir=a("div"),F(dx.$$.fragment),KLr=l(),S7e=a("p"),ZLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eyr=l(),pn=a("p"),oyr=o("The model class to instantiate is selected based on the "),R7e=a("code"),ryr=o("model_type"),tyr=o(` property of the config object (either
passed as an argument or loaded from `),P7e=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=a("code"),syr=o("pretrained_model_name_or_path"),lyr=o(":"),iyr=l(),I7e=a("ul"),uE=a("li"),N7e=a("strong"),dyr=o("tapas"),cyr=o(" \u2014 "),AY=a("a"),fyr=o("TFTapasForQuestionAnswering"),myr=o(" (TAPAS model)"),gyr=l(),F(bE.$$.fragment),ZOe=l(),$c=a("h2"),vE=a("a"),q7e=a("span"),F(cx.$$.fragment),hyr=l(),j7e=a("span"),pyr=o("TFAutoModelForTokenClassification"),eVe=l(),dr=a("div"),F(fx.$$.fragment),_yr=l(),kc=a("p"),uyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LY=a("a"),byr=o("from_pretrained()"),vyr=o(" class method or the "),yY=a("a"),Fyr=o("from_config()"),Tyr=o(` class
method.`),Myr=l(),mx=a("p"),Eyr=o("This class cannot be instantiated directly using "),D7e=a("code"),Cyr=o("__init__()"),wyr=o(" (throws an error)."),Ayr=l(),Gt=a("div"),F(gx.$$.fragment),Lyr=l(),G7e=a("p"),yyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xyr=l(),Sc=a("p"),$yr=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),kyr=o("not"),Syr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),Ryr=o("from_pretrained()"),Pyr=o(" to load the model weights."),Byr=l(),F(FE.$$.fragment),Iyr=l(),Nr=a("div"),F(hx.$$.fragment),Nyr=l(),V7e=a("p"),qyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jyr=l(),_n=a("p"),Dyr=o("The model class to instantiate is selected based on the "),X7e=a("code"),Gyr=o("model_type"),Oyr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),Vyr=o("pretrained_model_name_or_path"),Xyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=a("code"),zyr=o("pretrained_model_name_or_path"),Wyr=o(":"),Qyr=l(),de=a("ul"),TE=a("li"),Q7e=a("strong"),Hyr=o("albert"),Uyr=o(" \u2014 "),$Y=a("a"),Jyr=o("TFAlbertForTokenClassification"),Yyr=o(" (ALBERT model)"),Kyr=l(),ME=a("li"),H7e=a("strong"),Zyr=o("bert"),e8r=o(" \u2014 "),kY=a("a"),o8r=o("TFBertForTokenClassification"),r8r=o(" (BERT model)"),t8r=l(),EE=a("li"),U7e=a("strong"),a8r=o("camembert"),n8r=o(" \u2014 "),SY=a("a"),s8r=o("TFCamembertForTokenClassification"),l8r=o(" (CamemBERT model)"),i8r=l(),CE=a("li"),J7e=a("strong"),d8r=o("convbert"),c8r=o(" \u2014 "),RY=a("a"),f8r=o("TFConvBertForTokenClassification"),m8r=o(" (ConvBERT model)"),g8r=l(),wE=a("li"),Y7e=a("strong"),h8r=o("deberta"),p8r=o(" \u2014 "),PY=a("a"),_8r=o("TFDebertaForTokenClassification"),u8r=o(" (DeBERTa model)"),b8r=l(),AE=a("li"),K7e=a("strong"),v8r=o("deberta-v2"),F8r=o(" \u2014 "),BY=a("a"),T8r=o("TFDebertaV2ForTokenClassification"),M8r=o(" (DeBERTa-v2 model)"),E8r=l(),LE=a("li"),Z7e=a("strong"),C8r=o("distilbert"),w8r=o(" \u2014 "),IY=a("a"),A8r=o("TFDistilBertForTokenClassification"),L8r=o(" (DistilBERT model)"),y8r=l(),yE=a("li"),e9e=a("strong"),x8r=o("electra"),$8r=o(" \u2014 "),NY=a("a"),k8r=o("TFElectraForTokenClassification"),S8r=o(" (ELECTRA model)"),R8r=l(),xE=a("li"),o9e=a("strong"),P8r=o("flaubert"),B8r=o(" \u2014 "),qY=a("a"),I8r=o("TFFlaubertForTokenClassification"),N8r=o(" (FlauBERT model)"),q8r=l(),$E=a("li"),r9e=a("strong"),j8r=o("funnel"),D8r=o(" \u2014 "),jY=a("a"),G8r=o("TFFunnelForTokenClassification"),O8r=o(" (Funnel Transformer model)"),V8r=l(),kE=a("li"),t9e=a("strong"),X8r=o("layoutlm"),z8r=o(" \u2014 "),DY=a("a"),W8r=o("TFLayoutLMForTokenClassification"),Q8r=o(" (LayoutLM model)"),H8r=l(),SE=a("li"),a9e=a("strong"),U8r=o("longformer"),J8r=o(" \u2014 "),GY=a("a"),Y8r=o("TFLongformerForTokenClassification"),K8r=o(" (Longformer model)"),Z8r=l(),RE=a("li"),n9e=a("strong"),exr=o("mobilebert"),oxr=o(" \u2014 "),OY=a("a"),rxr=o("TFMobileBertForTokenClassification"),txr=o(" (MobileBERT model)"),axr=l(),PE=a("li"),s9e=a("strong"),nxr=o("mpnet"),sxr=o(" \u2014 "),VY=a("a"),lxr=o("TFMPNetForTokenClassification"),ixr=o(" (MPNet model)"),dxr=l(),BE=a("li"),l9e=a("strong"),cxr=o("rembert"),fxr=o(" \u2014 "),XY=a("a"),mxr=o("TFRemBertForTokenClassification"),gxr=o(" (RemBERT model)"),hxr=l(),IE=a("li"),i9e=a("strong"),pxr=o("roberta"),_xr=o(" \u2014 "),zY=a("a"),uxr=o("TFRobertaForTokenClassification"),bxr=o(" (RoBERTa model)"),vxr=l(),NE=a("li"),d9e=a("strong"),Fxr=o("roformer"),Txr=o(" \u2014 "),WY=a("a"),Mxr=o("TFRoFormerForTokenClassification"),Exr=o(" (RoFormer model)"),Cxr=l(),qE=a("li"),c9e=a("strong"),wxr=o("xlm"),Axr=o(" \u2014 "),QY=a("a"),Lxr=o("TFXLMForTokenClassification"),yxr=o(" (XLM model)"),xxr=l(),jE=a("li"),f9e=a("strong"),$xr=o("xlm-roberta"),kxr=o(" \u2014 "),HY=a("a"),Sxr=o("TFXLMRobertaForTokenClassification"),Rxr=o(" (XLM-RoBERTa model)"),Pxr=l(),DE=a("li"),m9e=a("strong"),Bxr=o("xlnet"),Ixr=o(" \u2014 "),UY=a("a"),Nxr=o("TFXLNetForTokenClassification"),qxr=o(" (XLNet model)"),jxr=l(),F(GE.$$.fragment),oVe=l(),Rc=a("h2"),OE=a("a"),g9e=a("span"),F(px.$$.fragment),Dxr=l(),h9e=a("span"),Gxr=o("TFAutoModelForQuestionAnswering"),rVe=l(),cr=a("div"),F(_x.$$.fragment),Oxr=l(),Pc=a("p"),Vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JY=a("a"),Xxr=o("from_pretrained()"),zxr=o(" class method or the "),YY=a("a"),Wxr=o("from_config()"),Qxr=o(` class
method.`),Hxr=l(),ux=a("p"),Uxr=o("This class cannot be instantiated directly using "),p9e=a("code"),Jxr=o("__init__()"),Yxr=o(" (throws an error)."),Kxr=l(),Ot=a("div"),F(bx.$$.fragment),Zxr=l(),_9e=a("p"),e$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o$r=l(),Bc=a("p"),r$r=o(`Note:
Loading a model from its configuration file does `),u9e=a("strong"),t$r=o("not"),a$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=a("a"),n$r=o("from_pretrained()"),s$r=o(" to load the model weights."),l$r=l(),F(VE.$$.fragment),i$r=l(),qr=a("div"),F(vx.$$.fragment),d$r=l(),b9e=a("p"),c$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f$r=l(),un=a("p"),m$r=o("The model class to instantiate is selected based on the "),v9e=a("code"),g$r=o("model_type"),h$r=o(` property of the config object (either
passed as an argument or loaded from `),F9e=a("code"),p$r=o("pretrained_model_name_or_path"),_$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=a("code"),u$r=o("pretrained_model_name_or_path"),b$r=o(":"),v$r=l(),ce=a("ul"),XE=a("li"),M9e=a("strong"),F$r=o("albert"),T$r=o(" \u2014 "),ZY=a("a"),M$r=o("TFAlbertForQuestionAnswering"),E$r=o(" (ALBERT model)"),C$r=l(),zE=a("li"),E9e=a("strong"),w$r=o("bert"),A$r=o(" \u2014 "),eK=a("a"),L$r=o("TFBertForQuestionAnswering"),y$r=o(" (BERT model)"),x$r=l(),WE=a("li"),C9e=a("strong"),$$r=o("camembert"),k$r=o(" \u2014 "),oK=a("a"),S$r=o("TFCamembertForQuestionAnswering"),R$r=o(" (CamemBERT model)"),P$r=l(),QE=a("li"),w9e=a("strong"),B$r=o("convbert"),I$r=o(" \u2014 "),rK=a("a"),N$r=o("TFConvBertForQuestionAnswering"),q$r=o(" (ConvBERT model)"),j$r=l(),HE=a("li"),A9e=a("strong"),D$r=o("deberta"),G$r=o(" \u2014 "),tK=a("a"),O$r=o("TFDebertaForQuestionAnswering"),V$r=o(" (DeBERTa model)"),X$r=l(),UE=a("li"),L9e=a("strong"),z$r=o("deberta-v2"),W$r=o(" \u2014 "),aK=a("a"),Q$r=o("TFDebertaV2ForQuestionAnswering"),H$r=o(" (DeBERTa-v2 model)"),U$r=l(),JE=a("li"),y9e=a("strong"),J$r=o("distilbert"),Y$r=o(" \u2014 "),nK=a("a"),K$r=o("TFDistilBertForQuestionAnswering"),Z$r=o(" (DistilBERT model)"),ekr=l(),YE=a("li"),x9e=a("strong"),okr=o("electra"),rkr=o(" \u2014 "),sK=a("a"),tkr=o("TFElectraForQuestionAnswering"),akr=o(" (ELECTRA model)"),nkr=l(),KE=a("li"),$9e=a("strong"),skr=o("flaubert"),lkr=o(" \u2014 "),lK=a("a"),ikr=o("TFFlaubertForQuestionAnsweringSimple"),dkr=o(" (FlauBERT model)"),ckr=l(),ZE=a("li"),k9e=a("strong"),fkr=o("funnel"),mkr=o(" \u2014 "),iK=a("a"),gkr=o("TFFunnelForQuestionAnswering"),hkr=o(" (Funnel Transformer model)"),pkr=l(),eC=a("li"),S9e=a("strong"),_kr=o("gptj"),ukr=o(" \u2014 "),dK=a("a"),bkr=o("TFGPTJForQuestionAnswering"),vkr=o(" (GPT-J model)"),Fkr=l(),oC=a("li"),R9e=a("strong"),Tkr=o("longformer"),Mkr=o(" \u2014 "),cK=a("a"),Ekr=o("TFLongformerForQuestionAnswering"),Ckr=o(" (Longformer model)"),wkr=l(),rC=a("li"),P9e=a("strong"),Akr=o("mobilebert"),Lkr=o(" \u2014 "),fK=a("a"),ykr=o("TFMobileBertForQuestionAnswering"),xkr=o(" (MobileBERT model)"),$kr=l(),tC=a("li"),B9e=a("strong"),kkr=o("mpnet"),Skr=o(" \u2014 "),mK=a("a"),Rkr=o("TFMPNetForQuestionAnswering"),Pkr=o(" (MPNet model)"),Bkr=l(),aC=a("li"),I9e=a("strong"),Ikr=o("rembert"),Nkr=o(" \u2014 "),gK=a("a"),qkr=o("TFRemBertForQuestionAnswering"),jkr=o(" (RemBERT model)"),Dkr=l(),nC=a("li"),N9e=a("strong"),Gkr=o("roberta"),Okr=o(" \u2014 "),hK=a("a"),Vkr=o("TFRobertaForQuestionAnswering"),Xkr=o(" (RoBERTa model)"),zkr=l(),sC=a("li"),q9e=a("strong"),Wkr=o("roformer"),Qkr=o(" \u2014 "),pK=a("a"),Hkr=o("TFRoFormerForQuestionAnswering"),Ukr=o(" (RoFormer model)"),Jkr=l(),lC=a("li"),j9e=a("strong"),Ykr=o("xlm"),Kkr=o(" \u2014 "),_K=a("a"),Zkr=o("TFXLMForQuestionAnsweringSimple"),eSr=o(" (XLM model)"),oSr=l(),iC=a("li"),D9e=a("strong"),rSr=o("xlm-roberta"),tSr=o(" \u2014 "),uK=a("a"),aSr=o("TFXLMRobertaForQuestionAnswering"),nSr=o(" (XLM-RoBERTa model)"),sSr=l(),dC=a("li"),G9e=a("strong"),lSr=o("xlnet"),iSr=o(" \u2014 "),bK=a("a"),dSr=o("TFXLNetForQuestionAnsweringSimple"),cSr=o(" (XLNet model)"),fSr=l(),F(cC.$$.fragment),tVe=l(),Ic=a("h2"),fC=a("a"),O9e=a("span"),F(Fx.$$.fragment),mSr=l(),V9e=a("span"),gSr=o("TFAutoModelForVision2Seq"),aVe=l(),fr=a("div"),F(Tx.$$.fragment),hSr=l(),Nc=a("p"),pSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vK=a("a"),_Sr=o("from_pretrained()"),uSr=o(" class method or the "),FK=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),Mx=a("p"),TSr=o("This class cannot be instantiated directly using "),X9e=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Vt=a("div"),F(Ex.$$.fragment),wSr=l(),z9e=a("p"),ASr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LSr=l(),qc=a("p"),ySr=o(`Note:
Loading a model from its configuration file does `),W9e=a("strong"),xSr=o("not"),$Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),kSr=o("from_pretrained()"),SSr=o(" to load the model weights."),RSr=l(),F(mC.$$.fragment),PSr=l(),jr=a("div"),F(Cx.$$.fragment),BSr=l(),Q9e=a("p"),ISr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NSr=l(),bn=a("p"),qSr=o("The model class to instantiate is selected based on the "),H9e=a("code"),jSr=o("model_type"),DSr=o(` property of the config object (either
passed as an argument or loaded from `),U9e=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(":"),zSr=l(),Y9e=a("ul"),gC=a("li"),K9e=a("strong"),WSr=o("vision-encoder-decoder"),QSr=o(" \u2014 "),MK=a("a"),HSr=o("TFVisionEncoderDecoderModel"),USr=o(" (Vision Encoder decoder model)"),JSr=l(),F(hC.$$.fragment),nVe=l(),jc=a("h2"),pC=a("a"),Z9e=a("span"),F(wx.$$.fragment),YSr=l(),eMe=a("span"),KSr=o("TFAutoModelForSpeechSeq2Seq"),sVe=l(),mr=a("div"),F(Ax.$$.fragment),ZSr=l(),Dc=a("p"),eRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EK=a("a"),oRr=o("from_pretrained()"),rRr=o(" class method or the "),CK=a("a"),tRr=o("from_config()"),aRr=o(` class
method.`),nRr=l(),Lx=a("p"),sRr=o("This class cannot be instantiated directly using "),oMe=a("code"),lRr=o("__init__()"),iRr=o(" (throws an error)."),dRr=l(),Xt=a("div"),F(yx.$$.fragment),cRr=l(),rMe=a("p"),fRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mRr=l(),Gc=a("p"),gRr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),hRr=o("not"),pRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),_Rr=o("from_pretrained()"),uRr=o(" to load the model weights."),bRr=l(),F(_C.$$.fragment),vRr=l(),Dr=a("div"),F(xx.$$.fragment),FRr=l(),aMe=a("p"),TRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MRr=l(),vn=a("p"),ERr=o("The model class to instantiate is selected based on the "),nMe=a("code"),CRr=o("model_type"),wRr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),ARr=o("pretrained_model_name_or_path"),LRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),yRr=o("pretrained_model_name_or_path"),xRr=o(":"),$Rr=l(),iMe=a("ul"),uC=a("li"),dMe=a("strong"),kRr=o("speech_to_text"),SRr=o(" \u2014 "),AK=a("a"),RRr=o("TFSpeech2TextForConditionalGeneration"),PRr=o(" (Speech2Text model)"),BRr=l(),F(bC.$$.fragment),lVe=l(),Oc=a("h2"),vC=a("a"),cMe=a("span"),F($x.$$.fragment),IRr=l(),fMe=a("span"),NRr=o("FlaxAutoModel"),iVe=l(),gr=a("div"),F(kx.$$.fragment),qRr=l(),Vc=a("p"),jRr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LK=a("a"),DRr=o("from_pretrained()"),GRr=o(" class method or the "),yK=a("a"),ORr=o("from_config()"),VRr=o(` class
method.`),XRr=l(),Sx=a("p"),zRr=o("This class cannot be instantiated directly using "),mMe=a("code"),WRr=o("__init__()"),QRr=o(" (throws an error)."),HRr=l(),zt=a("div"),F(Rx.$$.fragment),URr=l(),gMe=a("p"),JRr=o("Instantiates one of the base model classes of the library from a configuration."),YRr=l(),Xc=a("p"),KRr=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),ZRr=o("not"),ePr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),oPr=o("from_pretrained()"),rPr=o(" to load the model weights."),tPr=l(),F(FC.$$.fragment),aPr=l(),Gr=a("div"),F(Px.$$.fragment),nPr=l(),pMe=a("p"),sPr=o("Instantiate one of the base model classes of the library from a pretrained model."),lPr=l(),Fn=a("p"),iPr=o("The model class to instantiate is selected based on the "),_Me=a("code"),dPr=o("model_type"),cPr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),fPr=o("pretrained_model_name_or_path"),mPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),gPr=o("pretrained_model_name_or_path"),hPr=o(":"),pPr=l(),oe=a("ul"),TC=a("li"),vMe=a("strong"),_Pr=o("albert"),uPr=o(" \u2014 "),$K=a("a"),bPr=o("FlaxAlbertModel"),vPr=o(" (ALBERT model)"),FPr=l(),MC=a("li"),FMe=a("strong"),TPr=o("bart"),MPr=o(" \u2014 "),kK=a("a"),EPr=o("FlaxBartModel"),CPr=o(" (BART model)"),wPr=l(),EC=a("li"),TMe=a("strong"),APr=o("beit"),LPr=o(" \u2014 "),SK=a("a"),yPr=o("FlaxBeitModel"),xPr=o(" (BEiT model)"),$Pr=l(),CC=a("li"),MMe=a("strong"),kPr=o("bert"),SPr=o(" \u2014 "),RK=a("a"),RPr=o("FlaxBertModel"),PPr=o(" (BERT model)"),BPr=l(),wC=a("li"),EMe=a("strong"),IPr=o("big_bird"),NPr=o(" \u2014 "),PK=a("a"),qPr=o("FlaxBigBirdModel"),jPr=o(" (BigBird model)"),DPr=l(),AC=a("li"),CMe=a("strong"),GPr=o("blenderbot"),OPr=o(" \u2014 "),BK=a("a"),VPr=o("FlaxBlenderbotModel"),XPr=o(" (Blenderbot model)"),zPr=l(),LC=a("li"),wMe=a("strong"),WPr=o("blenderbot-small"),QPr=o(" \u2014 "),IK=a("a"),HPr=o("FlaxBlenderbotSmallModel"),UPr=o(" (BlenderbotSmall model)"),JPr=l(),yC=a("li"),AMe=a("strong"),YPr=o("clip"),KPr=o(" \u2014 "),NK=a("a"),ZPr=o("FlaxCLIPModel"),eBr=o(" (CLIP model)"),oBr=l(),xC=a("li"),LMe=a("strong"),rBr=o("distilbert"),tBr=o(" \u2014 "),qK=a("a"),aBr=o("FlaxDistilBertModel"),nBr=o(" (DistilBERT model)"),sBr=l(),$C=a("li"),yMe=a("strong"),lBr=o("electra"),iBr=o(" \u2014 "),jK=a("a"),dBr=o("FlaxElectraModel"),cBr=o(" (ELECTRA model)"),fBr=l(),kC=a("li"),xMe=a("strong"),mBr=o("gpt2"),gBr=o(" \u2014 "),DK=a("a"),hBr=o("FlaxGPT2Model"),pBr=o(" (OpenAI GPT-2 model)"),_Br=l(),SC=a("li"),$Me=a("strong"),uBr=o("gpt_neo"),bBr=o(" \u2014 "),GK=a("a"),vBr=o("FlaxGPTNeoModel"),FBr=o(" (GPT Neo model)"),TBr=l(),RC=a("li"),kMe=a("strong"),MBr=o("gptj"),EBr=o(" \u2014 "),OK=a("a"),CBr=o("FlaxGPTJModel"),wBr=o(" (GPT-J model)"),ABr=l(),PC=a("li"),SMe=a("strong"),LBr=o("longt5"),yBr=o(" \u2014 "),VK=a("a"),xBr=o("FlaxLongT5Model"),$Br=o(" (LongT5 model)"),kBr=l(),BC=a("li"),RMe=a("strong"),SBr=o("marian"),RBr=o(" \u2014 "),XK=a("a"),PBr=o("FlaxMarianModel"),BBr=o(" (Marian model)"),IBr=l(),IC=a("li"),PMe=a("strong"),NBr=o("mbart"),qBr=o(" \u2014 "),zK=a("a"),jBr=o("FlaxMBartModel"),DBr=o(" (mBART model)"),GBr=l(),NC=a("li"),BMe=a("strong"),OBr=o("mt5"),VBr=o(" \u2014 "),WK=a("a"),XBr=o("FlaxMT5Model"),zBr=o(" (MT5 model)"),WBr=l(),qC=a("li"),IMe=a("strong"),QBr=o("opt"),HBr=o(" \u2014 "),QK=a("a"),UBr=o("FlaxOPTModel"),JBr=o(" (OPT model)"),YBr=l(),jC=a("li"),NMe=a("strong"),KBr=o("pegasus"),ZBr=o(" \u2014 "),HK=a("a"),eIr=o("FlaxPegasusModel"),oIr=o(" (Pegasus model)"),rIr=l(),DC=a("li"),qMe=a("strong"),tIr=o("roberta"),aIr=o(" \u2014 "),UK=a("a"),nIr=o("FlaxRobertaModel"),sIr=o(" (RoBERTa model)"),lIr=l(),GC=a("li"),jMe=a("strong"),iIr=o("roformer"),dIr=o(" \u2014 "),JK=a("a"),cIr=o("FlaxRoFormerModel"),fIr=o(" (RoFormer model)"),mIr=l(),OC=a("li"),DMe=a("strong"),gIr=o("t5"),hIr=o(" \u2014 "),YK=a("a"),pIr=o("FlaxT5Model"),_Ir=o(" (T5 model)"),uIr=l(),VC=a("li"),GMe=a("strong"),bIr=o("vision-text-dual-encoder"),vIr=o(" \u2014 "),KK=a("a"),FIr=o("FlaxVisionTextDualEncoderModel"),TIr=o(" (VisionTextDualEncoder model)"),MIr=l(),XC=a("li"),OMe=a("strong"),EIr=o("vit"),CIr=o(" \u2014 "),ZK=a("a"),wIr=o("FlaxViTModel"),AIr=o(" (ViT model)"),LIr=l(),zC=a("li"),VMe=a("strong"),yIr=o("wav2vec2"),xIr=o(" \u2014 "),eZ=a("a"),$Ir=o("FlaxWav2Vec2Model"),kIr=o(" (Wav2Vec2 model)"),SIr=l(),WC=a("li"),XMe=a("strong"),RIr=o("xglm"),PIr=o(" \u2014 "),oZ=a("a"),BIr=o("FlaxXGLMModel"),IIr=o(" (XGLM model)"),NIr=l(),QC=a("li"),zMe=a("strong"),qIr=o("xlm-roberta"),jIr=o(" \u2014 "),rZ=a("a"),DIr=o("FlaxXLMRobertaModel"),GIr=o(" (XLM-RoBERTa model)"),OIr=l(),F(HC.$$.fragment),dVe=l(),zc=a("h2"),UC=a("a"),WMe=a("span"),F(Bx.$$.fragment),VIr=l(),QMe=a("span"),XIr=o("FlaxAutoModelForCausalLM"),cVe=l(),hr=a("div"),F(Ix.$$.fragment),zIr=l(),Wc=a("p"),WIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tZ=a("a"),QIr=o("from_pretrained()"),HIr=o(" class method or the "),aZ=a("a"),UIr=o("from_config()"),JIr=o(` class
method.`),YIr=l(),Nx=a("p"),KIr=o("This class cannot be instantiated directly using "),HMe=a("code"),ZIr=o("__init__()"),eNr=o(" (throws an error)."),oNr=l(),Wt=a("div"),F(qx.$$.fragment),rNr=l(),UMe=a("p"),tNr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aNr=l(),Qc=a("p"),nNr=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),sNr=o("not"),lNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),iNr=o("from_pretrained()"),dNr=o(" to load the model weights."),cNr=l(),F(JC.$$.fragment),fNr=l(),Or=a("div"),F(jx.$$.fragment),mNr=l(),YMe=a("p"),gNr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hNr=l(),Tn=a("p"),pNr=o("The model class to instantiate is selected based on the "),KMe=a("code"),_Nr=o("model_type"),uNr=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),bNr=o("pretrained_model_name_or_path"),vNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),FNr=o("pretrained_model_name_or_path"),TNr=o(":"),MNr=l(),xe=a("ul"),YC=a("li"),oEe=a("strong"),ENr=o("bart"),CNr=o(" \u2014 "),sZ=a("a"),wNr=o("FlaxBartForCausalLM"),ANr=o(" (BART model)"),LNr=l(),KC=a("li"),rEe=a("strong"),yNr=o("bert"),xNr=o(" \u2014 "),lZ=a("a"),$Nr=o("FlaxBertForCausalLM"),kNr=o(" (BERT model)"),SNr=l(),ZC=a("li"),tEe=a("strong"),RNr=o("big_bird"),PNr=o(" \u2014 "),iZ=a("a"),BNr=o("FlaxBigBirdForCausalLM"),INr=o(" (BigBird model)"),NNr=l(),e5=a("li"),aEe=a("strong"),qNr=o("electra"),jNr=o(" \u2014 "),dZ=a("a"),DNr=o("FlaxElectraForCausalLM"),GNr=o(" (ELECTRA model)"),ONr=l(),o5=a("li"),nEe=a("strong"),VNr=o("gpt2"),XNr=o(" \u2014 "),cZ=a("a"),zNr=o("FlaxGPT2LMHeadModel"),WNr=o(" (OpenAI GPT-2 model)"),QNr=l(),r5=a("li"),sEe=a("strong"),HNr=o("gpt_neo"),UNr=o(" \u2014 "),fZ=a("a"),JNr=o("FlaxGPTNeoForCausalLM"),YNr=o(" (GPT Neo model)"),KNr=l(),t5=a("li"),lEe=a("strong"),ZNr=o("gptj"),eqr=o(" \u2014 "),mZ=a("a"),oqr=o("FlaxGPTJForCausalLM"),rqr=o(" (GPT-J model)"),tqr=l(),a5=a("li"),iEe=a("strong"),aqr=o("opt"),nqr=o(" \u2014 "),gZ=a("a"),sqr=o("FlaxOPTForCausalLM"),lqr=o(" (OPT model)"),iqr=l(),n5=a("li"),dEe=a("strong"),dqr=o("roberta"),cqr=o(" \u2014 "),hZ=a("a"),fqr=o("FlaxRobertaForCausalLM"),mqr=o(" (RoBERTa model)"),gqr=l(),s5=a("li"),cEe=a("strong"),hqr=o("xglm"),pqr=o(" \u2014 "),pZ=a("a"),_qr=o("FlaxXGLMForCausalLM"),uqr=o(" (XGLM model)"),bqr=l(),F(l5.$$.fragment),fVe=l(),Hc=a("h2"),i5=a("a"),fEe=a("span"),F(Dx.$$.fragment),vqr=l(),mEe=a("span"),Fqr=o("FlaxAutoModelForPreTraining"),mVe=l(),pr=a("div"),F(Gx.$$.fragment),Tqr=l(),Uc=a("p"),Mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Z=a("a"),Eqr=o("from_pretrained()"),Cqr=o(" class method or the "),uZ=a("a"),wqr=o("from_config()"),Aqr=o(` class
method.`),Lqr=l(),Ox=a("p"),yqr=o("This class cannot be instantiated directly using "),gEe=a("code"),xqr=o("__init__()"),$qr=o(" (throws an error)."),kqr=l(),Qt=a("div"),F(Vx.$$.fragment),Sqr=l(),hEe=a("p"),Rqr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pqr=l(),Jc=a("p"),Bqr=o(`Note:
Loading a model from its configuration file does `),pEe=a("strong"),Iqr=o("not"),Nqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=a("a"),qqr=o("from_pretrained()"),jqr=o(" to load the model weights."),Dqr=l(),F(d5.$$.fragment),Gqr=l(),Vr=a("div"),F(Xx.$$.fragment),Oqr=l(),_Ee=a("p"),Vqr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xqr=l(),Mn=a("p"),zqr=o("The model class to instantiate is selected based on the "),uEe=a("code"),Wqr=o("model_type"),Qqr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),Hqr=o("pretrained_model_name_or_path"),Uqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),Jqr=o("pretrained_model_name_or_path"),Yqr=o(":"),Kqr=l(),Ee=a("ul"),c5=a("li"),FEe=a("strong"),Zqr=o("albert"),ejr=o(" \u2014 "),vZ=a("a"),ojr=o("FlaxAlbertForPreTraining"),rjr=o(" (ALBERT model)"),tjr=l(),f5=a("li"),TEe=a("strong"),ajr=o("bart"),njr=o(" \u2014 "),FZ=a("a"),sjr=o("FlaxBartForConditionalGeneration"),ljr=o(" (BART model)"),ijr=l(),m5=a("li"),MEe=a("strong"),djr=o("bert"),cjr=o(" \u2014 "),TZ=a("a"),fjr=o("FlaxBertForPreTraining"),mjr=o(" (BERT model)"),gjr=l(),g5=a("li"),EEe=a("strong"),hjr=o("big_bird"),pjr=o(" \u2014 "),MZ=a("a"),_jr=o("FlaxBigBirdForPreTraining"),ujr=o(" (BigBird model)"),bjr=l(),h5=a("li"),CEe=a("strong"),vjr=o("electra"),Fjr=o(" \u2014 "),EZ=a("a"),Tjr=o("FlaxElectraForPreTraining"),Mjr=o(" (ELECTRA model)"),Ejr=l(),p5=a("li"),wEe=a("strong"),Cjr=o("longt5"),wjr=o(" \u2014 "),CZ=a("a"),Ajr=o("FlaxLongT5ForConditionalGeneration"),Ljr=o(" (LongT5 model)"),yjr=l(),_5=a("li"),AEe=a("strong"),xjr=o("mbart"),$jr=o(" \u2014 "),wZ=a("a"),kjr=o("FlaxMBartForConditionalGeneration"),Sjr=o(" (mBART model)"),Rjr=l(),u5=a("li"),LEe=a("strong"),Pjr=o("mt5"),Bjr=o(" \u2014 "),AZ=a("a"),Ijr=o("FlaxMT5ForConditionalGeneration"),Njr=o(" (MT5 model)"),qjr=l(),b5=a("li"),yEe=a("strong"),jjr=o("roberta"),Djr=o(" \u2014 "),LZ=a("a"),Gjr=o("FlaxRobertaForMaskedLM"),Ojr=o(" (RoBERTa model)"),Vjr=l(),v5=a("li"),xEe=a("strong"),Xjr=o("roformer"),zjr=o(" \u2014 "),yZ=a("a"),Wjr=o("FlaxRoFormerForMaskedLM"),Qjr=o(" (RoFormer model)"),Hjr=l(),F5=a("li"),$Ee=a("strong"),Ujr=o("t5"),Jjr=o(" \u2014 "),xZ=a("a"),Yjr=o("FlaxT5ForConditionalGeneration"),Kjr=o(" (T5 model)"),Zjr=l(),T5=a("li"),kEe=a("strong"),eDr=o("wav2vec2"),oDr=o(" \u2014 "),$Z=a("a"),rDr=o("FlaxWav2Vec2ForPreTraining"),tDr=o(" (Wav2Vec2 model)"),aDr=l(),M5=a("li"),SEe=a("strong"),nDr=o("xlm-roberta"),sDr=o(" \u2014 "),kZ=a("a"),lDr=o("FlaxXLMRobertaForMaskedLM"),iDr=o(" (XLM-RoBERTa model)"),dDr=l(),F(E5.$$.fragment),gVe=l(),Yc=a("h2"),C5=a("a"),REe=a("span"),F(zx.$$.fragment),cDr=l(),PEe=a("span"),fDr=o("FlaxAutoModelForMaskedLM"),hVe=l(),_r=a("div"),F(Wx.$$.fragment),mDr=l(),Kc=a("p"),gDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SZ=a("a"),hDr=o("from_pretrained()"),pDr=o(" class method or the "),RZ=a("a"),_Dr=o("from_config()"),uDr=o(` class
method.`),bDr=l(),Qx=a("p"),vDr=o("This class cannot be instantiated directly using "),BEe=a("code"),FDr=o("__init__()"),TDr=o(" (throws an error)."),MDr=l(),Ht=a("div"),F(Hx.$$.fragment),EDr=l(),IEe=a("p"),CDr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wDr=l(),Zc=a("p"),ADr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),LDr=o("not"),yDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),xDr=o("from_pretrained()"),$Dr=o(" to load the model weights."),kDr=l(),F(w5.$$.fragment),SDr=l(),Xr=a("div"),F(Ux.$$.fragment),RDr=l(),qEe=a("p"),PDr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BDr=l(),En=a("p"),IDr=o("The model class to instantiate is selected based on the "),jEe=a("code"),NDr=o("model_type"),qDr=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),jDr=o("pretrained_model_name_or_path"),DDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),GDr=o("pretrained_model_name_or_path"),ODr=o(":"),VDr=l(),$e=a("ul"),A5=a("li"),OEe=a("strong"),XDr=o("albert"),zDr=o(" \u2014 "),BZ=a("a"),WDr=o("FlaxAlbertForMaskedLM"),QDr=o(" (ALBERT model)"),HDr=l(),L5=a("li"),VEe=a("strong"),UDr=o("bart"),JDr=o(" \u2014 "),IZ=a("a"),YDr=o("FlaxBartForConditionalGeneration"),KDr=o(" (BART model)"),ZDr=l(),y5=a("li"),XEe=a("strong"),eGr=o("bert"),oGr=o(" \u2014 "),NZ=a("a"),rGr=o("FlaxBertForMaskedLM"),tGr=o(" (BERT model)"),aGr=l(),x5=a("li"),zEe=a("strong"),nGr=o("big_bird"),sGr=o(" \u2014 "),qZ=a("a"),lGr=o("FlaxBigBirdForMaskedLM"),iGr=o(" (BigBird model)"),dGr=l(),$5=a("li"),WEe=a("strong"),cGr=o("distilbert"),fGr=o(" \u2014 "),jZ=a("a"),mGr=o("FlaxDistilBertForMaskedLM"),gGr=o(" (DistilBERT model)"),hGr=l(),k5=a("li"),QEe=a("strong"),pGr=o("electra"),_Gr=o(" \u2014 "),DZ=a("a"),uGr=o("FlaxElectraForMaskedLM"),bGr=o(" (ELECTRA model)"),vGr=l(),S5=a("li"),HEe=a("strong"),FGr=o("mbart"),TGr=o(" \u2014 "),GZ=a("a"),MGr=o("FlaxMBartForConditionalGeneration"),EGr=o(" (mBART model)"),CGr=l(),R5=a("li"),UEe=a("strong"),wGr=o("roberta"),AGr=o(" \u2014 "),OZ=a("a"),LGr=o("FlaxRobertaForMaskedLM"),yGr=o(" (RoBERTa model)"),xGr=l(),P5=a("li"),JEe=a("strong"),$Gr=o("roformer"),kGr=o(" \u2014 "),VZ=a("a"),SGr=o("FlaxRoFormerForMaskedLM"),RGr=o(" (RoFormer model)"),PGr=l(),B5=a("li"),YEe=a("strong"),BGr=o("xlm-roberta"),IGr=o(" \u2014 "),XZ=a("a"),NGr=o("FlaxXLMRobertaForMaskedLM"),qGr=o(" (XLM-RoBERTa model)"),jGr=l(),F(I5.$$.fragment),pVe=l(),ef=a("h2"),N5=a("a"),KEe=a("span"),F(Jx.$$.fragment),DGr=l(),ZEe=a("span"),GGr=o("FlaxAutoModelForSeq2SeqLM"),_Ve=l(),ur=a("div"),F(Yx.$$.fragment),OGr=l(),of=a("p"),VGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zZ=a("a"),XGr=o("from_pretrained()"),zGr=o(" class method or the "),WZ=a("a"),WGr=o("from_config()"),QGr=o(` class
method.`),HGr=l(),Kx=a("p"),UGr=o("This class cannot be instantiated directly using "),eCe=a("code"),JGr=o("__init__()"),YGr=o(" (throws an error)."),KGr=l(),Ut=a("div"),F(Zx.$$.fragment),ZGr=l(),oCe=a("p"),eOr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oOr=l(),rf=a("p"),rOr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),tOr=o("not"),aOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=a("a"),nOr=o("from_pretrained()"),sOr=o(" to load the model weights."),lOr=l(),F(q5.$$.fragment),iOr=l(),zr=a("div"),F(e$.$$.fragment),dOr=l(),tCe=a("p"),cOr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fOr=l(),Cn=a("p"),mOr=o("The model class to instantiate is selected based on the "),aCe=a("code"),gOr=o("model_type"),hOr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),pOr=o("pretrained_model_name_or_path"),_Or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),uOr=o("pretrained_model_name_or_path"),bOr=o(":"),vOr=l(),ke=a("ul"),j5=a("li"),lCe=a("strong"),FOr=o("bart"),TOr=o(" \u2014 "),HZ=a("a"),MOr=o("FlaxBartForConditionalGeneration"),EOr=o(" (BART model)"),COr=l(),D5=a("li"),iCe=a("strong"),wOr=o("blenderbot"),AOr=o(" \u2014 "),UZ=a("a"),LOr=o("FlaxBlenderbotForConditionalGeneration"),yOr=o(" (Blenderbot model)"),xOr=l(),G5=a("li"),dCe=a("strong"),$Or=o("blenderbot-small"),kOr=o(" \u2014 "),JZ=a("a"),SOr=o("FlaxBlenderbotSmallForConditionalGeneration"),ROr=o(" (BlenderbotSmall model)"),POr=l(),O5=a("li"),cCe=a("strong"),BOr=o("encoder-decoder"),IOr=o(" \u2014 "),YZ=a("a"),NOr=o("FlaxEncoderDecoderModel"),qOr=o(" (Encoder decoder model)"),jOr=l(),V5=a("li"),fCe=a("strong"),DOr=o("longt5"),GOr=o(" \u2014 "),KZ=a("a"),OOr=o("FlaxLongT5ForConditionalGeneration"),VOr=o(" (LongT5 model)"),XOr=l(),X5=a("li"),mCe=a("strong"),zOr=o("marian"),WOr=o(" \u2014 "),ZZ=a("a"),QOr=o("FlaxMarianMTModel"),HOr=o(" (Marian model)"),UOr=l(),z5=a("li"),gCe=a("strong"),JOr=o("mbart"),YOr=o(" \u2014 "),eee=a("a"),KOr=o("FlaxMBartForConditionalGeneration"),ZOr=o(" (mBART model)"),eVr=l(),W5=a("li"),hCe=a("strong"),oVr=o("mt5"),rVr=o(" \u2014 "),oee=a("a"),tVr=o("FlaxMT5ForConditionalGeneration"),aVr=o(" (MT5 model)"),nVr=l(),Q5=a("li"),pCe=a("strong"),sVr=o("pegasus"),lVr=o(" \u2014 "),ree=a("a"),iVr=o("FlaxPegasusForConditionalGeneration"),dVr=o(" (Pegasus model)"),cVr=l(),H5=a("li"),_Ce=a("strong"),fVr=o("t5"),mVr=o(" \u2014 "),tee=a("a"),gVr=o("FlaxT5ForConditionalGeneration"),hVr=o(" (T5 model)"),pVr=l(),F(U5.$$.fragment),uVe=l(),tf=a("h2"),J5=a("a"),uCe=a("span"),F(o$.$$.fragment),_Vr=l(),bCe=a("span"),uVr=o("FlaxAutoModelForSequenceClassification"),bVe=l(),br=a("div"),F(r$.$$.fragment),bVr=l(),af=a("p"),vVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aee=a("a"),FVr=o("from_pretrained()"),TVr=o(" class method or the "),nee=a("a"),MVr=o("from_config()"),EVr=o(` class
method.`),CVr=l(),t$=a("p"),wVr=o("This class cannot be instantiated directly using "),vCe=a("code"),AVr=o("__init__()"),LVr=o(" (throws an error)."),yVr=l(),Jt=a("div"),F(a$.$$.fragment),xVr=l(),FCe=a("p"),$Vr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kVr=l(),nf=a("p"),SVr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),RVr=o("not"),PVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),see=a("a"),BVr=o("from_pretrained()"),IVr=o(" to load the model weights."),NVr=l(),F(Y5.$$.fragment),qVr=l(),Wr=a("div"),F(n$.$$.fragment),jVr=l(),MCe=a("p"),DVr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GVr=l(),wn=a("p"),OVr=o("The model class to instantiate is selected based on the "),ECe=a("code"),VVr=o("model_type"),XVr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),zVr=o("pretrained_model_name_or_path"),WVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),QVr=o("pretrained_model_name_or_path"),HVr=o(":"),UVr=l(),Se=a("ul"),K5=a("li"),ACe=a("strong"),JVr=o("albert"),YVr=o(" \u2014 "),lee=a("a"),KVr=o("FlaxAlbertForSequenceClassification"),ZVr=o(" (ALBERT model)"),eXr=l(),Z5=a("li"),LCe=a("strong"),oXr=o("bart"),rXr=o(" \u2014 "),iee=a("a"),tXr=o("FlaxBartForSequenceClassification"),aXr=o(" (BART model)"),nXr=l(),e3=a("li"),yCe=a("strong"),sXr=o("bert"),lXr=o(" \u2014 "),dee=a("a"),iXr=o("FlaxBertForSequenceClassification"),dXr=o(" (BERT model)"),cXr=l(),o3=a("li"),xCe=a("strong"),fXr=o("big_bird"),mXr=o(" \u2014 "),cee=a("a"),gXr=o("FlaxBigBirdForSequenceClassification"),hXr=o(" (BigBird model)"),pXr=l(),r3=a("li"),$Ce=a("strong"),_Xr=o("distilbert"),uXr=o(" \u2014 "),fee=a("a"),bXr=o("FlaxDistilBertForSequenceClassification"),vXr=o(" (DistilBERT model)"),FXr=l(),t3=a("li"),kCe=a("strong"),TXr=o("electra"),MXr=o(" \u2014 "),mee=a("a"),EXr=o("FlaxElectraForSequenceClassification"),CXr=o(" (ELECTRA model)"),wXr=l(),a3=a("li"),SCe=a("strong"),AXr=o("mbart"),LXr=o(" \u2014 "),gee=a("a"),yXr=o("FlaxMBartForSequenceClassification"),xXr=o(" (mBART model)"),$Xr=l(),n3=a("li"),RCe=a("strong"),kXr=o("roberta"),SXr=o(" \u2014 "),hee=a("a"),RXr=o("FlaxRobertaForSequenceClassification"),PXr=o(" (RoBERTa model)"),BXr=l(),s3=a("li"),PCe=a("strong"),IXr=o("roformer"),NXr=o(" \u2014 "),pee=a("a"),qXr=o("FlaxRoFormerForSequenceClassification"),jXr=o(" (RoFormer model)"),DXr=l(),l3=a("li"),BCe=a("strong"),GXr=o("xlm-roberta"),OXr=o(" \u2014 "),_ee=a("a"),VXr=o("FlaxXLMRobertaForSequenceClassification"),XXr=o(" (XLM-RoBERTa model)"),zXr=l(),F(i3.$$.fragment),vVe=l(),sf=a("h2"),d3=a("a"),ICe=a("span"),F(s$.$$.fragment),WXr=l(),NCe=a("span"),QXr=o("FlaxAutoModelForQuestionAnswering"),FVe=l(),vr=a("div"),F(l$.$$.fragment),HXr=l(),lf=a("p"),UXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uee=a("a"),JXr=o("from_pretrained()"),YXr=o(" class method or the "),bee=a("a"),KXr=o("from_config()"),ZXr=o(` class
method.`),ezr=l(),i$=a("p"),ozr=o("This class cannot be instantiated directly using "),qCe=a("code"),rzr=o("__init__()"),tzr=o(" (throws an error)."),azr=l(),Yt=a("div"),F(d$.$$.fragment),nzr=l(),jCe=a("p"),szr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lzr=l(),df=a("p"),izr=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),dzr=o("not"),czr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=a("a"),fzr=o("from_pretrained()"),mzr=o(" to load the model weights."),gzr=l(),F(c3.$$.fragment),hzr=l(),Qr=a("div"),F(c$.$$.fragment),pzr=l(),GCe=a("p"),_zr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uzr=l(),An=a("p"),bzr=o("The model class to instantiate is selected based on the "),OCe=a("code"),vzr=o("model_type"),Fzr=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),Tzr=o("pretrained_model_name_or_path"),Mzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),Ezr=o("pretrained_model_name_or_path"),Czr=o(":"),wzr=l(),Re=a("ul"),f3=a("li"),zCe=a("strong"),Azr=o("albert"),Lzr=o(" \u2014 "),Fee=a("a"),yzr=o("FlaxAlbertForQuestionAnswering"),xzr=o(" (ALBERT model)"),$zr=l(),m3=a("li"),WCe=a("strong"),kzr=o("bart"),Szr=o(" \u2014 "),Tee=a("a"),Rzr=o("FlaxBartForQuestionAnswering"),Pzr=o(" (BART model)"),Bzr=l(),g3=a("li"),QCe=a("strong"),Izr=o("bert"),Nzr=o(" \u2014 "),Mee=a("a"),qzr=o("FlaxBertForQuestionAnswering"),jzr=o(" (BERT model)"),Dzr=l(),h3=a("li"),HCe=a("strong"),Gzr=o("big_bird"),Ozr=o(" \u2014 "),Eee=a("a"),Vzr=o("FlaxBigBirdForQuestionAnswering"),Xzr=o(" (BigBird model)"),zzr=l(),p3=a("li"),UCe=a("strong"),Wzr=o("distilbert"),Qzr=o(" \u2014 "),Cee=a("a"),Hzr=o("FlaxDistilBertForQuestionAnswering"),Uzr=o(" (DistilBERT model)"),Jzr=l(),_3=a("li"),JCe=a("strong"),Yzr=o("electra"),Kzr=o(" \u2014 "),wee=a("a"),Zzr=o("FlaxElectraForQuestionAnswering"),eWr=o(" (ELECTRA model)"),oWr=l(),u3=a("li"),YCe=a("strong"),rWr=o("mbart"),tWr=o(" \u2014 "),Aee=a("a"),aWr=o("FlaxMBartForQuestionAnswering"),nWr=o(" (mBART model)"),sWr=l(),b3=a("li"),KCe=a("strong"),lWr=o("roberta"),iWr=o(" \u2014 "),Lee=a("a"),dWr=o("FlaxRobertaForQuestionAnswering"),cWr=o(" (RoBERTa model)"),fWr=l(),v3=a("li"),ZCe=a("strong"),mWr=o("roformer"),gWr=o(" \u2014 "),yee=a("a"),hWr=o("FlaxRoFormerForQuestionAnswering"),pWr=o(" (RoFormer model)"),_Wr=l(),F3=a("li"),e5e=a("strong"),uWr=o("xlm-roberta"),bWr=o(" \u2014 "),xee=a("a"),vWr=o("FlaxXLMRobertaForQuestionAnswering"),FWr=o(" (XLM-RoBERTa model)"),TWr=l(),F(T3.$$.fragment),TVe=l(),cf=a("h2"),M3=a("a"),o5e=a("span"),F(f$.$$.fragment),MWr=l(),r5e=a("span"),EWr=o("FlaxAutoModelForTokenClassification"),MVe=l(),Fr=a("div"),F(m$.$$.fragment),CWr=l(),ff=a("p"),wWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$ee=a("a"),AWr=o("from_pretrained()"),LWr=o(" class method or the "),kee=a("a"),yWr=o("from_config()"),xWr=o(` class
method.`),$Wr=l(),g$=a("p"),kWr=o("This class cannot be instantiated directly using "),t5e=a("code"),SWr=o("__init__()"),RWr=o(" (throws an error)."),PWr=l(),Kt=a("div"),F(h$.$$.fragment),BWr=l(),a5e=a("p"),IWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),NWr=l(),mf=a("p"),qWr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),jWr=o("not"),DWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),GWr=o("from_pretrained()"),OWr=o(" to load the model weights."),VWr=l(),F(E3.$$.fragment),XWr=l(),Hr=a("div"),F(p$.$$.fragment),zWr=l(),s5e=a("p"),WWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QWr=l(),Ln=a("p"),HWr=o("The model class to instantiate is selected based on the "),l5e=a("code"),UWr=o("model_type"),JWr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),YWr=o("pretrained_model_name_or_path"),KWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),ZWr=o("pretrained_model_name_or_path"),eQr=o(":"),oQr=l(),Ve=a("ul"),C3=a("li"),c5e=a("strong"),rQr=o("albert"),tQr=o(" \u2014 "),Ree=a("a"),aQr=o("FlaxAlbertForTokenClassification"),nQr=o(" (ALBERT model)"),sQr=l(),w3=a("li"),f5e=a("strong"),lQr=o("bert"),iQr=o(" \u2014 "),Pee=a("a"),dQr=o("FlaxBertForTokenClassification"),cQr=o(" (BERT model)"),fQr=l(),A3=a("li"),m5e=a("strong"),mQr=o("big_bird"),gQr=o(" \u2014 "),Bee=a("a"),hQr=o("FlaxBigBirdForTokenClassification"),pQr=o(" (BigBird model)"),_Qr=l(),L3=a("li"),g5e=a("strong"),uQr=o("distilbert"),bQr=o(" \u2014 "),Iee=a("a"),vQr=o("FlaxDistilBertForTokenClassification"),FQr=o(" (DistilBERT model)"),TQr=l(),y3=a("li"),h5e=a("strong"),MQr=o("electra"),EQr=o(" \u2014 "),Nee=a("a"),CQr=o("FlaxElectraForTokenClassification"),wQr=o(" (ELECTRA model)"),AQr=l(),x3=a("li"),p5e=a("strong"),LQr=o("roberta"),yQr=o(" \u2014 "),qee=a("a"),xQr=o("FlaxRobertaForTokenClassification"),$Qr=o(" (RoBERTa model)"),kQr=l(),$3=a("li"),_5e=a("strong"),SQr=o("roformer"),RQr=o(" \u2014 "),jee=a("a"),PQr=o("FlaxRoFormerForTokenClassification"),BQr=o(" (RoFormer model)"),IQr=l(),k3=a("li"),u5e=a("strong"),NQr=o("xlm-roberta"),qQr=o(" \u2014 "),Dee=a("a"),jQr=o("FlaxXLMRobertaForTokenClassification"),DQr=o(" (XLM-RoBERTa model)"),GQr=l(),F(S3.$$.fragment),EVe=l(),gf=a("h2"),R3=a("a"),b5e=a("span"),F(_$.$$.fragment),OQr=l(),v5e=a("span"),VQr=o("FlaxAutoModelForMultipleChoice"),CVe=l(),Tr=a("div"),F(u$.$$.fragment),XQr=l(),hf=a("p"),zQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Gee=a("a"),WQr=o("from_pretrained()"),QQr=o(" class method or the "),Oee=a("a"),HQr=o("from_config()"),UQr=o(` class
method.`),JQr=l(),b$=a("p"),YQr=o("This class cannot be instantiated directly using "),F5e=a("code"),KQr=o("__init__()"),ZQr=o(" (throws an error)."),eHr=l(),Zt=a("div"),F(v$.$$.fragment),oHr=l(),T5e=a("p"),rHr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tHr=l(),pf=a("p"),aHr=o(`Note:
Loading a model from its configuration file does `),M5e=a("strong"),nHr=o("not"),sHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),lHr=o("from_pretrained()"),iHr=o(" to load the model weights."),dHr=l(),F(P3.$$.fragment),cHr=l(),Ur=a("div"),F(F$.$$.fragment),fHr=l(),E5e=a("p"),mHr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gHr=l(),yn=a("p"),hHr=o("The model class to instantiate is selected based on the "),C5e=a("code"),pHr=o("model_type"),_Hr=o(` property of the config object (either
passed as an argument or loaded from `),w5e=a("code"),uHr=o("pretrained_model_name_or_path"),bHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=a("code"),vHr=o("pretrained_model_name_or_path"),FHr=o(":"),THr=l(),Xe=a("ul"),B3=a("li"),L5e=a("strong"),MHr=o("albert"),EHr=o(" \u2014 "),Xee=a("a"),CHr=o("FlaxAlbertForMultipleChoice"),wHr=o(" (ALBERT model)"),AHr=l(),I3=a("li"),y5e=a("strong"),LHr=o("bert"),yHr=o(" \u2014 "),zee=a("a"),xHr=o("FlaxBertForMultipleChoice"),$Hr=o(" (BERT model)"),kHr=l(),N3=a("li"),x5e=a("strong"),SHr=o("big_bird"),RHr=o(" \u2014 "),Wee=a("a"),PHr=o("FlaxBigBirdForMultipleChoice"),BHr=o(" (BigBird model)"),IHr=l(),q3=a("li"),$5e=a("strong"),NHr=o("distilbert"),qHr=o(" \u2014 "),Qee=a("a"),jHr=o("FlaxDistilBertForMultipleChoice"),DHr=o(" (DistilBERT model)"),GHr=l(),j3=a("li"),k5e=a("strong"),OHr=o("electra"),VHr=o(" \u2014 "),Hee=a("a"),XHr=o("FlaxElectraForMultipleChoice"),zHr=o(" (ELECTRA model)"),WHr=l(),D3=a("li"),S5e=a("strong"),QHr=o("roberta"),HHr=o(" \u2014 "),Uee=a("a"),UHr=o("FlaxRobertaForMultipleChoice"),JHr=o(" (RoBERTa model)"),YHr=l(),G3=a("li"),R5e=a("strong"),KHr=o("roformer"),ZHr=o(" \u2014 "),Jee=a("a"),eUr=o("FlaxRoFormerForMultipleChoice"),oUr=o(" (RoFormer model)"),rUr=l(),O3=a("li"),P5e=a("strong"),tUr=o("xlm-roberta"),aUr=o(" \u2014 "),Yee=a("a"),nUr=o("FlaxXLMRobertaForMultipleChoice"),sUr=o(" (XLM-RoBERTa model)"),lUr=l(),F(V3.$$.fragment),wVe=l(),_f=a("h2"),X3=a("a"),B5e=a("span"),F(T$.$$.fragment),iUr=l(),I5e=a("span"),dUr=o("FlaxAutoModelForNextSentencePrediction"),AVe=l(),Mr=a("div"),F(M$.$$.fragment),cUr=l(),uf=a("p"),fUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=a("a"),mUr=o("from_pretrained()"),gUr=o(" class method or the "),Zee=a("a"),hUr=o("from_config()"),pUr=o(` class
method.`),_Ur=l(),E$=a("p"),uUr=o("This class cannot be instantiated directly using "),N5e=a("code"),bUr=o("__init__()"),vUr=o(" (throws an error)."),FUr=l(),ea=a("div"),F(C$.$$.fragment),TUr=l(),q5e=a("p"),MUr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EUr=l(),bf=a("p"),CUr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),wUr=o("not"),AUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),LUr=o("from_pretrained()"),yUr=o(" to load the model weights."),xUr=l(),F(z3.$$.fragment),$Ur=l(),Jr=a("div"),F(w$.$$.fragment),kUr=l(),D5e=a("p"),SUr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RUr=l(),xn=a("p"),PUr=o("The model class to instantiate is selected based on the "),G5e=a("code"),BUr=o("model_type"),IUr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),NUr=o("pretrained_model_name_or_path"),qUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),jUr=o("pretrained_model_name_or_path"),DUr=o(":"),GUr=l(),X5e=a("ul"),W3=a("li"),z5e=a("strong"),OUr=o("bert"),VUr=o(" \u2014 "),ooe=a("a"),XUr=o("FlaxBertForNextSentencePrediction"),zUr=o(" (BERT model)"),WUr=l(),F(Q3.$$.fragment),LVe=l(),vf=a("h2"),H3=a("a"),W5e=a("span"),F(A$.$$.fragment),QUr=l(),Q5e=a("span"),HUr=o("FlaxAutoModelForImageClassification"),yVe=l(),Er=a("div"),F(L$.$$.fragment),UUr=l(),Ff=a("p"),JUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),roe=a("a"),YUr=o("from_pretrained()"),KUr=o(" class method or the "),toe=a("a"),ZUr=o("from_config()"),eJr=o(` class
method.`),oJr=l(),y$=a("p"),rJr=o("This class cannot be instantiated directly using "),H5e=a("code"),tJr=o("__init__()"),aJr=o(" (throws an error)."),nJr=l(),oa=a("div"),F(x$.$$.fragment),sJr=l(),U5e=a("p"),lJr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iJr=l(),Tf=a("p"),dJr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),cJr=o("not"),fJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=a("a"),mJr=o("from_pretrained()"),gJr=o(" to load the model weights."),hJr=l(),F(U3.$$.fragment),pJr=l(),Yr=a("div"),F($$.$$.fragment),_Jr=l(),Y5e=a("p"),uJr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bJr=l(),$n=a("p"),vJr=o("The model class to instantiate is selected based on the "),K5e=a("code"),FJr=o("model_type"),TJr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),MJr=o("pretrained_model_name_or_path"),EJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),CJr=o("pretrained_model_name_or_path"),wJr=o(":"),AJr=l(),k$=a("ul"),J3=a("li"),o3e=a("strong"),LJr=o("beit"),yJr=o(" \u2014 "),noe=a("a"),xJr=o("FlaxBeitForImageClassification"),$Jr=o(" (BEiT model)"),kJr=l(),Y3=a("li"),r3e=a("strong"),SJr=o("vit"),RJr=o(" \u2014 "),soe=a("a"),PJr=o("FlaxViTForImageClassification"),BJr=o(" (ViT model)"),IJr=l(),F(K3.$$.fragment),xVe=l(),Mf=a("h2"),Z3=a("a"),t3e=a("span"),F(S$.$$.fragment),NJr=l(),a3e=a("span"),qJr=o("FlaxAutoModelForVision2Seq"),$Ve=l(),Cr=a("div"),F(R$.$$.fragment),jJr=l(),Ef=a("p"),DJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),loe=a("a"),GJr=o("from_pretrained()"),OJr=o(" class method or the "),ioe=a("a"),VJr=o("from_config()"),XJr=o(` class
method.`),zJr=l(),P$=a("p"),WJr=o("This class cannot be instantiated directly using "),n3e=a("code"),QJr=o("__init__()"),HJr=o(" (throws an error)."),UJr=l(),ra=a("div"),F(B$.$$.fragment),JJr=l(),s3e=a("p"),YJr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KJr=l(),Cf=a("p"),ZJr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),eYr=o("not"),oYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),rYr=o("from_pretrained()"),tYr=o(" to load the model weights."),aYr=l(),F(e0.$$.fragment),nYr=l(),Kr=a("div"),F(I$.$$.fragment),sYr=l(),i3e=a("p"),lYr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iYr=l(),kn=a("p"),dYr=o("The model class to instantiate is selected based on the "),d3e=a("code"),cYr=o("model_type"),fYr=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),mYr=o("pretrained_model_name_or_path"),gYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),hYr=o("pretrained_model_name_or_path"),pYr=o(":"),_Yr=l(),m3e=a("ul"),o0=a("li"),g3e=a("strong"),uYr=o("vision-encoder-decoder"),bYr=o(" \u2014 "),coe=a("a"),vYr=o("FlaxVisionEncoderDecoderModel"),FYr=o(" (Vision Encoder decoder model)"),TYr=l(),F(r0.$$.fragment),this.h()},l(f){const u=jjt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var N$=s(p);m=n(N$,"A",{id:!0,class:!0,href:!0});var h3e=s(m);_=n(h3e,"SPAN",{});var p3e=s(_);T(d.$$.fragment,p3e),p3e.forEach(t),h3e.forEach(t),h=i(N$),Eo=n(N$,"SPAN",{});var _3e=s(Eo);Mi=r(_3e,"Auto Classes"),_3e.forEach(t),N$.forEach(t),yf=i(f),nt=n(f,"P",{});var q$=s(nt);Ei=r(q$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(q$,"CODE",{});var u3e=s(Ci);EA=r(u3e,"from_pretrained()"),u3e.forEach(t),xf=r(q$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),q$.forEach(t),Oe=i(f),We=n(f,"P",{});var Sn=s(We);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var b3e=s(Rn);CA=r(b3e,"AutoConfig"),b3e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var v3e=s(Bn);wA=r(v3e,"AutoModel"),v3e.forEach(t),Ai=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var F3e=s(In);AA=r(F3e,"AutoTokenizer"),F3e.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),$f=i(f),T(xa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var j$=s(Ae);Zk=r(j$,"will create a model that is an instance of "),yi=n(j$,"A",{href:!0});var T3e=s(yi);eS=r(T3e,"BertModel"),T3e.forEach(t),oS=r(j$,"."),j$.forEach(t),Co=i(f),$a=n(f,"P",{});var D$=s($a);rS=r(D$,"There is one class of "),kf=n(D$,"CODE",{});var M3e=s(kf);tS=r(M3e,"AutoModel"),M3e.forEach(t),Gze=r(D$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),D$.forEach(t),AGe=i(f),xi=n(f,"H2",{class:!0});var G$=s(xi);Sf=n(G$,"A",{id:!0,class:!0,href:!0});var E3e=s(Sf);ate=n(E3e,"SPAN",{});var C3e=s(ate);T(LA.$$.fragment,C3e),C3e.forEach(t),E3e.forEach(t),Oze=i(G$),nte=n(G$,"SPAN",{});var w3e=s(nte);Vze=r(w3e,"Extending the Auto Classes"),w3e.forEach(t),G$.forEach(t),LGe=i(f),Nn=n(f,"P",{});var wf=s(Nn);Xze=r(wf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ste=n(wf,"CODE",{});var A3e=s(ste);zze=r(A3e,"NewModel"),A3e.forEach(t),Wze=r(wf,", make sure you have a "),lte=n(wf,"CODE",{});var L3e=s(lte);Qze=r(L3e,"NewModelConfig"),L3e.forEach(t),Hze=r(wf,` then you can add those to the auto
classes like this:`),wf.forEach(t),yGe=i(f),T(yA.$$.fragment,f),xGe=i(f),aS=n(f,"P",{});var y3e=s(aS);Uze=r(y3e,"You will then be able to use the auto classes like you would usually do!"),y3e.forEach(t),$Ge=i(f),T(Rf.$$.fragment,f),kGe=i(f),$i=n(f,"H2",{class:!0});var O$=s($i);Pf=n(O$,"A",{id:!0,class:!0,href:!0});var x3e=s(Pf);ite=n(x3e,"SPAN",{});var $3e=s(ite);T(xA.$$.fragment,$3e),$3e.forEach(t),x3e.forEach(t),Jze=i(O$),dte=n(O$,"SPAN",{});var k3e=s(dte);Yze=r(k3e,"AutoConfig"),k3e.forEach(t),O$.forEach(t),SGe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T($A.$$.fragment,tt),Kze=i(tt),kA=n(tt,"P",{});var V$=s(kA);Zze=r(V$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),nS=n(V$,"A",{href:!0});var S3e=s(nS);eWe=r(S3e,"from_pretrained()"),S3e.forEach(t),oWe=r(V$," class method."),V$.forEach(t),rWe=i(tt),SA=n(tt,"P",{});var X$=s(SA);tWe=r(X$,"This class cannot be instantiated directly using "),cte=n(X$,"CODE",{});var R3e=s(cte);aWe=r(R3e,"__init__()"),R3e.forEach(t),nWe=r(X$," (throws an error)."),X$.forEach(t),sWe=i(tt),wr=n(tt,"DIV",{class:!0});var at=s(wr);T(RA.$$.fragment,at),lWe=i(at),fte=n(at,"P",{});var P3e=s(fte);iWe=r(P3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),P3e.forEach(t),dWe=i(at),ki=n(at,"P",{});var Af=s(ki);cWe=r(Af,"The configuration class to instantiate is selected based on the "),mte=n(Af,"CODE",{});var B3e=s(mte);fWe=r(B3e,"model_type"),B3e.forEach(t),mWe=r(Af,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gte=n(Af,"CODE",{});var I3e=s(gte);gWe=r(I3e,"pretrained_model_name_or_path"),I3e.forEach(t),hWe=r(Af,":"),Af.forEach(t),pWe=i(at),A=n(at,"UL",{});var L=s(A);Bf=n(L,"LI",{});var t0=s(Bf);hte=n(t0,"STRONG",{});var N3e=s(hte);_We=r(N3e,"albert"),N3e.forEach(t),uWe=r(t0," \u2014 "),sS=n(t0,"A",{href:!0});var q3e=s(sS);bWe=r(q3e,"AlbertConfig"),q3e.forEach(t),vWe=r(t0," (ALBERT model)"),t0.forEach(t),FWe=i(L),If=n(L,"LI",{});var a0=s(If);pte=n(a0,"STRONG",{});var j3e=s(pte);TWe=r(j3e,"bart"),j3e.forEach(t),MWe=r(a0," \u2014 "),lS=n(a0,"A",{href:!0});var D3e=s(lS);EWe=r(D3e,"BartConfig"),D3e.forEach(t),CWe=r(a0," (BART model)"),a0.forEach(t),wWe=i(L),Nf=n(L,"LI",{});var n0=s(Nf);_te=n(n0,"STRONG",{});var G3e=s(_te);AWe=r(G3e,"beit"),G3e.forEach(t),LWe=r(n0," \u2014 "),iS=n(n0,"A",{href:!0});var O3e=s(iS);yWe=r(O3e,"BeitConfig"),O3e.forEach(t),xWe=r(n0," (BEiT model)"),n0.forEach(t),$We=i(L),qf=n(L,"LI",{});var s0=s(qf);ute=n(s0,"STRONG",{});var V3e=s(ute);kWe=r(V3e,"bert"),V3e.forEach(t),SWe=r(s0," \u2014 "),dS=n(s0,"A",{href:!0});var X3e=s(dS);RWe=r(X3e,"BertConfig"),X3e.forEach(t),PWe=r(s0," (BERT model)"),s0.forEach(t),BWe=i(L),jf=n(L,"LI",{});var l0=s(jf);bte=n(l0,"STRONG",{});var z3e=s(bte);IWe=r(z3e,"bert-generation"),z3e.forEach(t),NWe=r(l0," \u2014 "),cS=n(l0,"A",{href:!0});var W3e=s(cS);qWe=r(W3e,"BertGenerationConfig"),W3e.forEach(t),jWe=r(l0," (Bert Generation model)"),l0.forEach(t),DWe=i(L),Df=n(L,"LI",{});var i0=s(Df);vte=n(i0,"STRONG",{});var Q3e=s(vte);GWe=r(Q3e,"big_bird"),Q3e.forEach(t),OWe=r(i0," \u2014 "),fS=n(i0,"A",{href:!0});var H3e=s(fS);VWe=r(H3e,"BigBirdConfig"),H3e.forEach(t),XWe=r(i0," (BigBird model)"),i0.forEach(t),zWe=i(L),Gf=n(L,"LI",{});var d0=s(Gf);Fte=n(d0,"STRONG",{});var U3e=s(Fte);WWe=r(U3e,"bigbird_pegasus"),U3e.forEach(t),QWe=r(d0," \u2014 "),mS=n(d0,"A",{href:!0});var J3e=s(mS);HWe=r(J3e,"BigBirdPegasusConfig"),J3e.forEach(t),UWe=r(d0," (BigBird-Pegasus model)"),d0.forEach(t),JWe=i(L),Of=n(L,"LI",{});var c0=s(Of);Tte=n(c0,"STRONG",{});var Y3e=s(Tte);YWe=r(Y3e,"blenderbot"),Y3e.forEach(t),KWe=r(c0," \u2014 "),gS=n(c0,"A",{href:!0});var K3e=s(gS);ZWe=r(K3e,"BlenderbotConfig"),K3e.forEach(t),eQe=r(c0," (Blenderbot model)"),c0.forEach(t),oQe=i(L),Vf=n(L,"LI",{});var f0=s(Vf);Mte=n(f0,"STRONG",{});var Z3e=s(Mte);rQe=r(Z3e,"blenderbot-small"),Z3e.forEach(t),tQe=r(f0," \u2014 "),hS=n(f0,"A",{href:!0});var e0e=s(hS);aQe=r(e0e,"BlenderbotSmallConfig"),e0e.forEach(t),nQe=r(f0," (BlenderbotSmall model)"),f0.forEach(t),sQe=i(L),Xf=n(L,"LI",{});var m0=s(Xf);Ete=n(m0,"STRONG",{});var o0e=s(Ete);lQe=r(o0e,"bloom"),o0e.forEach(t),iQe=r(m0," \u2014 "),pS=n(m0,"A",{href:!0});var r0e=s(pS);dQe=r(r0e,"BloomConfig"),r0e.forEach(t),cQe=r(m0," (BLOOM model)"),m0.forEach(t),fQe=i(L),zf=n(L,"LI",{});var g0=s(zf);Cte=n(g0,"STRONG",{});var t0e=s(Cte);mQe=r(t0e,"camembert"),t0e.forEach(t),gQe=r(g0," \u2014 "),_S=n(g0,"A",{href:!0});var a0e=s(_S);hQe=r(a0e,"CamembertConfig"),a0e.forEach(t),pQe=r(g0," (CamemBERT model)"),g0.forEach(t),_Qe=i(L),Wf=n(L,"LI",{});var h0=s(Wf);wte=n(h0,"STRONG",{});var n0e=s(wte);uQe=r(n0e,"canine"),n0e.forEach(t),bQe=r(h0," \u2014 "),uS=n(h0,"A",{href:!0});var s0e=s(uS);vQe=r(s0e,"CanineConfig"),s0e.forEach(t),FQe=r(h0," (CANINE model)"),h0.forEach(t),TQe=i(L),Qf=n(L,"LI",{});var p0=s(Qf);Ate=n(p0,"STRONG",{});var l0e=s(Ate);MQe=r(l0e,"clip"),l0e.forEach(t),EQe=r(p0," \u2014 "),bS=n(p0,"A",{href:!0});var i0e=s(bS);CQe=r(i0e,"CLIPConfig"),i0e.forEach(t),wQe=r(p0," (CLIP model)"),p0.forEach(t),AQe=i(L),Hf=n(L,"LI",{});var _0=s(Hf);Lte=n(_0,"STRONG",{});var d0e=s(Lte);LQe=r(d0e,"convbert"),d0e.forEach(t),yQe=r(_0," \u2014 "),vS=n(_0,"A",{href:!0});var c0e=s(vS);xQe=r(c0e,"ConvBertConfig"),c0e.forEach(t),$Qe=r(_0," (ConvBERT model)"),_0.forEach(t),kQe=i(L),Uf=n(L,"LI",{});var u0=s(Uf);yte=n(u0,"STRONG",{});var f0e=s(yte);SQe=r(f0e,"convnext"),f0e.forEach(t),RQe=r(u0," \u2014 "),FS=n(u0,"A",{href:!0});var m0e=s(FS);PQe=r(m0e,"ConvNextConfig"),m0e.forEach(t),BQe=r(u0," (ConvNeXT model)"),u0.forEach(t),IQe=i(L),Jf=n(L,"LI",{});var b0=s(Jf);xte=n(b0,"STRONG",{});var g0e=s(xte);NQe=r(g0e,"ctrl"),g0e.forEach(t),qQe=r(b0," \u2014 "),TS=n(b0,"A",{href:!0});var h0e=s(TS);jQe=r(h0e,"CTRLConfig"),h0e.forEach(t),DQe=r(b0," (CTRL model)"),b0.forEach(t),GQe=i(L),Yf=n(L,"LI",{});var v0=s(Yf);$te=n(v0,"STRONG",{});var p0e=s($te);OQe=r(p0e,"cvt"),p0e.forEach(t),VQe=r(v0," \u2014 "),MS=n(v0,"A",{href:!0});var _0e=s(MS);XQe=r(_0e,"CvtConfig"),_0e.forEach(t),zQe=r(v0," (CvT model)"),v0.forEach(t),WQe=i(L),Kf=n(L,"LI",{});var F0=s(Kf);kte=n(F0,"STRONG",{});var u0e=s(kte);QQe=r(u0e,"data2vec-audio"),u0e.forEach(t),HQe=r(F0," \u2014 "),ES=n(F0,"A",{href:!0});var b0e=s(ES);UQe=r(b0e,"Data2VecAudioConfig"),b0e.forEach(t),JQe=r(F0," (Data2VecAudio model)"),F0.forEach(t),YQe=i(L),Zf=n(L,"LI",{});var T0=s(Zf);Ste=n(T0,"STRONG",{});var v0e=s(Ste);KQe=r(v0e,"data2vec-text"),v0e.forEach(t),ZQe=r(T0," \u2014 "),CS=n(T0,"A",{href:!0});var F0e=s(CS);eHe=r(F0e,"Data2VecTextConfig"),F0e.forEach(t),oHe=r(T0," (Data2VecText model)"),T0.forEach(t),rHe=i(L),em=n(L,"LI",{});var M0=s(em);Rte=n(M0,"STRONG",{});var T0e=s(Rte);tHe=r(T0e,"data2vec-vision"),T0e.forEach(t),aHe=r(M0," \u2014 "),wS=n(M0,"A",{href:!0});var M0e=s(wS);nHe=r(M0e,"Data2VecVisionConfig"),M0e.forEach(t),sHe=r(M0," (Data2VecVision model)"),M0.forEach(t),lHe=i(L),om=n(L,"LI",{});var E0=s(om);Pte=n(E0,"STRONG",{});var E0e=s(Pte);iHe=r(E0e,"deberta"),E0e.forEach(t),dHe=r(E0," \u2014 "),AS=n(E0,"A",{href:!0});var C0e=s(AS);cHe=r(C0e,"DebertaConfig"),C0e.forEach(t),fHe=r(E0," (DeBERTa model)"),E0.forEach(t),mHe=i(L),rm=n(L,"LI",{});var C0=s(rm);Bte=n(C0,"STRONG",{});var w0e=s(Bte);gHe=r(w0e,"deberta-v2"),w0e.forEach(t),hHe=r(C0," \u2014 "),LS=n(C0,"A",{href:!0});var A0e=s(LS);pHe=r(A0e,"DebertaV2Config"),A0e.forEach(t),_He=r(C0," (DeBERTa-v2 model)"),C0.forEach(t),uHe=i(L),tm=n(L,"LI",{});var w0=s(tm);Ite=n(w0,"STRONG",{});var L0e=s(Ite);bHe=r(L0e,"decision_transformer"),L0e.forEach(t),vHe=r(w0," \u2014 "),yS=n(w0,"A",{href:!0});var y0e=s(yS);FHe=r(y0e,"DecisionTransformerConfig"),y0e.forEach(t),THe=r(w0," (Decision Transformer model)"),w0.forEach(t),MHe=i(L),am=n(L,"LI",{});var A0=s(am);Nte=n(A0,"STRONG",{});var EYr=s(Nte);EHe=r(EYr,"deit"),EYr.forEach(t),CHe=r(A0," \u2014 "),xS=n(A0,"A",{href:!0});var CYr=s(xS);wHe=r(CYr,"DeiTConfig"),CYr.forEach(t),AHe=r(A0," (DeiT model)"),A0.forEach(t),LHe=i(L),nm=n(L,"LI",{});var x0e=s(nm);qte=n(x0e,"STRONG",{});var wYr=s(qte);yHe=r(wYr,"detr"),wYr.forEach(t),xHe=r(x0e," \u2014 "),$S=n(x0e,"A",{href:!0});var AYr=s($S);$He=r(AYr,"DetrConfig"),AYr.forEach(t),kHe=r(x0e," (DETR model)"),x0e.forEach(t),SHe=i(L),sm=n(L,"LI",{});var $0e=s(sm);jte=n($0e,"STRONG",{});var LYr=s(jte);RHe=r(LYr,"distilbert"),LYr.forEach(t),PHe=r($0e," \u2014 "),kS=n($0e,"A",{href:!0});var yYr=s(kS);BHe=r(yYr,"DistilBertConfig"),yYr.forEach(t),IHe=r($0e," (DistilBERT model)"),$0e.forEach(t),NHe=i(L),lm=n(L,"LI",{});var k0e=s(lm);Dte=n(k0e,"STRONG",{});var xYr=s(Dte);qHe=r(xYr,"dpr"),xYr.forEach(t),jHe=r(k0e," \u2014 "),SS=n(k0e,"A",{href:!0});var $Yr=s(SS);DHe=r($Yr,"DPRConfig"),$Yr.forEach(t),GHe=r(k0e," (DPR model)"),k0e.forEach(t),OHe=i(L),im=n(L,"LI",{});var S0e=s(im);Gte=n(S0e,"STRONG",{});var kYr=s(Gte);VHe=r(kYr,"dpt"),kYr.forEach(t),XHe=r(S0e," \u2014 "),RS=n(S0e,"A",{href:!0});var SYr=s(RS);zHe=r(SYr,"DPTConfig"),SYr.forEach(t),WHe=r(S0e," (DPT model)"),S0e.forEach(t),QHe=i(L),dm=n(L,"LI",{});var R0e=s(dm);Ote=n(R0e,"STRONG",{});var RYr=s(Ote);HHe=r(RYr,"electra"),RYr.forEach(t),UHe=r(R0e," \u2014 "),PS=n(R0e,"A",{href:!0});var PYr=s(PS);JHe=r(PYr,"ElectraConfig"),PYr.forEach(t),YHe=r(R0e," (ELECTRA model)"),R0e.forEach(t),KHe=i(L),cm=n(L,"LI",{});var P0e=s(cm);Vte=n(P0e,"STRONG",{});var BYr=s(Vte);ZHe=r(BYr,"encoder-decoder"),BYr.forEach(t),eUe=r(P0e," \u2014 "),BS=n(P0e,"A",{href:!0});var IYr=s(BS);oUe=r(IYr,"EncoderDecoderConfig"),IYr.forEach(t),rUe=r(P0e," (Encoder decoder model)"),P0e.forEach(t),tUe=i(L),fm=n(L,"LI",{});var B0e=s(fm);Xte=n(B0e,"STRONG",{});var NYr=s(Xte);aUe=r(NYr,"flaubert"),NYr.forEach(t),nUe=r(B0e," \u2014 "),IS=n(B0e,"A",{href:!0});var qYr=s(IS);sUe=r(qYr,"FlaubertConfig"),qYr.forEach(t),lUe=r(B0e," (FlauBERT model)"),B0e.forEach(t),iUe=i(L),mm=n(L,"LI",{});var I0e=s(mm);zte=n(I0e,"STRONG",{});var jYr=s(zte);dUe=r(jYr,"flava"),jYr.forEach(t),cUe=r(I0e," \u2014 "),NS=n(I0e,"A",{href:!0});var DYr=s(NS);fUe=r(DYr,"FlavaConfig"),DYr.forEach(t),mUe=r(I0e," (FLAVA model)"),I0e.forEach(t),gUe=i(L),gm=n(L,"LI",{});var N0e=s(gm);Wte=n(N0e,"STRONG",{});var GYr=s(Wte);hUe=r(GYr,"fnet"),GYr.forEach(t),pUe=r(N0e," \u2014 "),qS=n(N0e,"A",{href:!0});var OYr=s(qS);_Ue=r(OYr,"FNetConfig"),OYr.forEach(t),uUe=r(N0e," (FNet model)"),N0e.forEach(t),bUe=i(L),hm=n(L,"LI",{});var q0e=s(hm);Qte=n(q0e,"STRONG",{});var VYr=s(Qte);vUe=r(VYr,"fsmt"),VYr.forEach(t),FUe=r(q0e," \u2014 "),jS=n(q0e,"A",{href:!0});var XYr=s(jS);TUe=r(XYr,"FSMTConfig"),XYr.forEach(t),MUe=r(q0e," (FairSeq Machine-Translation model)"),q0e.forEach(t),EUe=i(L),pm=n(L,"LI",{});var j0e=s(pm);Hte=n(j0e,"STRONG",{});var zYr=s(Hte);CUe=r(zYr,"funnel"),zYr.forEach(t),wUe=r(j0e," \u2014 "),DS=n(j0e,"A",{href:!0});var WYr=s(DS);AUe=r(WYr,"FunnelConfig"),WYr.forEach(t),LUe=r(j0e," (Funnel Transformer model)"),j0e.forEach(t),yUe=i(L),_m=n(L,"LI",{});var D0e=s(_m);Ute=n(D0e,"STRONG",{});var QYr=s(Ute);xUe=r(QYr,"glpn"),QYr.forEach(t),$Ue=r(D0e," \u2014 "),GS=n(D0e,"A",{href:!0});var HYr=s(GS);kUe=r(HYr,"GLPNConfig"),HYr.forEach(t),SUe=r(D0e," (GLPN model)"),D0e.forEach(t),RUe=i(L),um=n(L,"LI",{});var G0e=s(um);Jte=n(G0e,"STRONG",{});var UYr=s(Jte);PUe=r(UYr,"gpt2"),UYr.forEach(t),BUe=r(G0e," \u2014 "),OS=n(G0e,"A",{href:!0});var JYr=s(OS);IUe=r(JYr,"GPT2Config"),JYr.forEach(t),NUe=r(G0e," (OpenAI GPT-2 model)"),G0e.forEach(t),qUe=i(L),bm=n(L,"LI",{});var O0e=s(bm);Yte=n(O0e,"STRONG",{});var YYr=s(Yte);jUe=r(YYr,"gpt_neo"),YYr.forEach(t),DUe=r(O0e," \u2014 "),VS=n(O0e,"A",{href:!0});var KYr=s(VS);GUe=r(KYr,"GPTNeoConfig"),KYr.forEach(t),OUe=r(O0e," (GPT Neo model)"),O0e.forEach(t),VUe=i(L),vm=n(L,"LI",{});var V0e=s(vm);Kte=n(V0e,"STRONG",{});var ZYr=s(Kte);XUe=r(ZYr,"gpt_neox"),ZYr.forEach(t),zUe=r(V0e," \u2014 "),XS=n(V0e,"A",{href:!0});var eKr=s(XS);WUe=r(eKr,"GPTNeoXConfig"),eKr.forEach(t),QUe=r(V0e," (GPT NeoX model)"),V0e.forEach(t),HUe=i(L),Fm=n(L,"LI",{});var X0e=s(Fm);Zte=n(X0e,"STRONG",{});var oKr=s(Zte);UUe=r(oKr,"gptj"),oKr.forEach(t),JUe=r(X0e," \u2014 "),zS=n(X0e,"A",{href:!0});var rKr=s(zS);YUe=r(rKr,"GPTJConfig"),rKr.forEach(t),KUe=r(X0e," (GPT-J model)"),X0e.forEach(t),ZUe=i(L),Tm=n(L,"LI",{});var z0e=s(Tm);eae=n(z0e,"STRONG",{});var tKr=s(eae);eJe=r(tKr,"hubert"),tKr.forEach(t),oJe=r(z0e," \u2014 "),WS=n(z0e,"A",{href:!0});var aKr=s(WS);rJe=r(aKr,"HubertConfig"),aKr.forEach(t),tJe=r(z0e," (Hubert model)"),z0e.forEach(t),aJe=i(L),Mm=n(L,"LI",{});var W0e=s(Mm);oae=n(W0e,"STRONG",{});var nKr=s(oae);nJe=r(nKr,"ibert"),nKr.forEach(t),sJe=r(W0e," \u2014 "),QS=n(W0e,"A",{href:!0});var sKr=s(QS);lJe=r(sKr,"IBertConfig"),sKr.forEach(t),iJe=r(W0e," (I-BERT model)"),W0e.forEach(t),dJe=i(L),Em=n(L,"LI",{});var Q0e=s(Em);rae=n(Q0e,"STRONG",{});var lKr=s(rae);cJe=r(lKr,"imagegpt"),lKr.forEach(t),fJe=r(Q0e," \u2014 "),HS=n(Q0e,"A",{href:!0});var iKr=s(HS);mJe=r(iKr,"ImageGPTConfig"),iKr.forEach(t),gJe=r(Q0e," (ImageGPT model)"),Q0e.forEach(t),hJe=i(L),Cm=n(L,"LI",{});var H0e=s(Cm);tae=n(H0e,"STRONG",{});var dKr=s(tae);pJe=r(dKr,"layoutlm"),dKr.forEach(t),_Je=r(H0e," \u2014 "),US=n(H0e,"A",{href:!0});var cKr=s(US);uJe=r(cKr,"LayoutLMConfig"),cKr.forEach(t),bJe=r(H0e," (LayoutLM model)"),H0e.forEach(t),vJe=i(L),wm=n(L,"LI",{});var U0e=s(wm);aae=n(U0e,"STRONG",{});var fKr=s(aae);FJe=r(fKr,"layoutlmv2"),fKr.forEach(t),TJe=r(U0e," \u2014 "),JS=n(U0e,"A",{href:!0});var mKr=s(JS);MJe=r(mKr,"LayoutLMv2Config"),mKr.forEach(t),EJe=r(U0e," (LayoutLMv2 model)"),U0e.forEach(t),CJe=i(L),Am=n(L,"LI",{});var J0e=s(Am);nae=n(J0e,"STRONG",{});var gKr=s(nae);wJe=r(gKr,"layoutlmv3"),gKr.forEach(t),AJe=r(J0e," \u2014 "),YS=n(J0e,"A",{href:!0});var hKr=s(YS);LJe=r(hKr,"LayoutLMv3Config"),hKr.forEach(t),yJe=r(J0e," (LayoutLMv3 model)"),J0e.forEach(t),xJe=i(L),Lm=n(L,"LI",{});var Y0e=s(Lm);sae=n(Y0e,"STRONG",{});var pKr=s(sae);$Je=r(pKr,"led"),pKr.forEach(t),kJe=r(Y0e," \u2014 "),KS=n(Y0e,"A",{href:!0});var _Kr=s(KS);SJe=r(_Kr,"LEDConfig"),_Kr.forEach(t),RJe=r(Y0e," (LED model)"),Y0e.forEach(t),PJe=i(L),ym=n(L,"LI",{});var K0e=s(ym);lae=n(K0e,"STRONG",{});var uKr=s(lae);BJe=r(uKr,"levit"),uKr.forEach(t),IJe=r(K0e," \u2014 "),ZS=n(K0e,"A",{href:!0});var bKr=s(ZS);NJe=r(bKr,"LevitConfig"),bKr.forEach(t),qJe=r(K0e," (LeViT model)"),K0e.forEach(t),jJe=i(L),xm=n(L,"LI",{});var Z0e=s(xm);iae=n(Z0e,"STRONG",{});var vKr=s(iae);DJe=r(vKr,"longformer"),vKr.forEach(t),GJe=r(Z0e," \u2014 "),eR=n(Z0e,"A",{href:!0});var FKr=s(eR);OJe=r(FKr,"LongformerConfig"),FKr.forEach(t),VJe=r(Z0e," (Longformer model)"),Z0e.forEach(t),XJe=i(L),$m=n(L,"LI",{});var ewe=s($m);dae=n(ewe,"STRONG",{});var TKr=s(dae);zJe=r(TKr,"longt5"),TKr.forEach(t),WJe=r(ewe," \u2014 "),oR=n(ewe,"A",{href:!0});var MKr=s(oR);QJe=r(MKr,"LongT5Config"),MKr.forEach(t),HJe=r(ewe," (LongT5 model)"),ewe.forEach(t),UJe=i(L),km=n(L,"LI",{});var owe=s(km);cae=n(owe,"STRONG",{});var EKr=s(cae);JJe=r(EKr,"luke"),EKr.forEach(t),YJe=r(owe," \u2014 "),rR=n(owe,"A",{href:!0});var CKr=s(rR);KJe=r(CKr,"LukeConfig"),CKr.forEach(t),ZJe=r(owe," (LUKE model)"),owe.forEach(t),eYe=i(L),Sm=n(L,"LI",{});var rwe=s(Sm);fae=n(rwe,"STRONG",{});var wKr=s(fae);oYe=r(wKr,"lxmert"),wKr.forEach(t),rYe=r(rwe," \u2014 "),tR=n(rwe,"A",{href:!0});var AKr=s(tR);tYe=r(AKr,"LxmertConfig"),AKr.forEach(t),aYe=r(rwe," (LXMERT model)"),rwe.forEach(t),nYe=i(L),Rm=n(L,"LI",{});var twe=s(Rm);mae=n(twe,"STRONG",{});var LKr=s(mae);sYe=r(LKr,"m2m_100"),LKr.forEach(t),lYe=r(twe," \u2014 "),aR=n(twe,"A",{href:!0});var yKr=s(aR);iYe=r(yKr,"M2M100Config"),yKr.forEach(t),dYe=r(twe," (M2M100 model)"),twe.forEach(t),cYe=i(L),Pm=n(L,"LI",{});var awe=s(Pm);gae=n(awe,"STRONG",{});var xKr=s(gae);fYe=r(xKr,"marian"),xKr.forEach(t),mYe=r(awe," \u2014 "),nR=n(awe,"A",{href:!0});var $Kr=s(nR);gYe=r($Kr,"MarianConfig"),$Kr.forEach(t),hYe=r(awe," (Marian model)"),awe.forEach(t),pYe=i(L),Bm=n(L,"LI",{});var nwe=s(Bm);hae=n(nwe,"STRONG",{});var kKr=s(hae);_Ye=r(kKr,"maskformer"),kKr.forEach(t),uYe=r(nwe," \u2014 "),sR=n(nwe,"A",{href:!0});var SKr=s(sR);bYe=r(SKr,"MaskFormerConfig"),SKr.forEach(t),vYe=r(nwe," (MaskFormer model)"),nwe.forEach(t),FYe=i(L),Im=n(L,"LI",{});var swe=s(Im);pae=n(swe,"STRONG",{});var RKr=s(pae);TYe=r(RKr,"mbart"),RKr.forEach(t),MYe=r(swe," \u2014 "),lR=n(swe,"A",{href:!0});var PKr=s(lR);EYe=r(PKr,"MBartConfig"),PKr.forEach(t),CYe=r(swe," (mBART model)"),swe.forEach(t),wYe=i(L),Nm=n(L,"LI",{});var lwe=s(Nm);_ae=n(lwe,"STRONG",{});var BKr=s(_ae);AYe=r(BKr,"mctct"),BKr.forEach(t),LYe=r(lwe," \u2014 "),iR=n(lwe,"A",{href:!0});var IKr=s(iR);yYe=r(IKr,"MCTCTConfig"),IKr.forEach(t),xYe=r(lwe," (M-CTC-T model)"),lwe.forEach(t),$Ye=i(L),qm=n(L,"LI",{});var iwe=s(qm);uae=n(iwe,"STRONG",{});var NKr=s(uae);kYe=r(NKr,"megatron-bert"),NKr.forEach(t),SYe=r(iwe," \u2014 "),dR=n(iwe,"A",{href:!0});var qKr=s(dR);RYe=r(qKr,"MegatronBertConfig"),qKr.forEach(t),PYe=r(iwe," (Megatron-BERT model)"),iwe.forEach(t),BYe=i(L),jm=n(L,"LI",{});var dwe=s(jm);bae=n(dwe,"STRONG",{});var jKr=s(bae);IYe=r(jKr,"mobilebert"),jKr.forEach(t),NYe=r(dwe," \u2014 "),cR=n(dwe,"A",{href:!0});var DKr=s(cR);qYe=r(DKr,"MobileBertConfig"),DKr.forEach(t),jYe=r(dwe," (MobileBERT model)"),dwe.forEach(t),DYe=i(L),Dm=n(L,"LI",{});var cwe=s(Dm);vae=n(cwe,"STRONG",{});var GKr=s(vae);GYe=r(GKr,"mpnet"),GKr.forEach(t),OYe=r(cwe," \u2014 "),fR=n(cwe,"A",{href:!0});var OKr=s(fR);VYe=r(OKr,"MPNetConfig"),OKr.forEach(t),XYe=r(cwe," (MPNet model)"),cwe.forEach(t),zYe=i(L),Gm=n(L,"LI",{});var fwe=s(Gm);Fae=n(fwe,"STRONG",{});var VKr=s(Fae);WYe=r(VKr,"mt5"),VKr.forEach(t),QYe=r(fwe," \u2014 "),mR=n(fwe,"A",{href:!0});var XKr=s(mR);HYe=r(XKr,"MT5Config"),XKr.forEach(t),UYe=r(fwe," (MT5 model)"),fwe.forEach(t),JYe=i(L),Om=n(L,"LI",{});var mwe=s(Om);Tae=n(mwe,"STRONG",{});var zKr=s(Tae);YYe=r(zKr,"nystromformer"),zKr.forEach(t),KYe=r(mwe," \u2014 "),gR=n(mwe,"A",{href:!0});var WKr=s(gR);ZYe=r(WKr,"NystromformerConfig"),WKr.forEach(t),eKe=r(mwe," (Nystr\xF6mformer model)"),mwe.forEach(t),oKe=i(L),Vm=n(L,"LI",{});var gwe=s(Vm);Mae=n(gwe,"STRONG",{});var QKr=s(Mae);rKe=r(QKr,"openai-gpt"),QKr.forEach(t),tKe=r(gwe," \u2014 "),hR=n(gwe,"A",{href:!0});var HKr=s(hR);aKe=r(HKr,"OpenAIGPTConfig"),HKr.forEach(t),nKe=r(gwe," (OpenAI GPT model)"),gwe.forEach(t),sKe=i(L),Xm=n(L,"LI",{});var hwe=s(Xm);Eae=n(hwe,"STRONG",{});var UKr=s(Eae);lKe=r(UKr,"opt"),UKr.forEach(t),iKe=r(hwe," \u2014 "),pR=n(hwe,"A",{href:!0});var JKr=s(pR);dKe=r(JKr,"OPTConfig"),JKr.forEach(t),cKe=r(hwe," (OPT model)"),hwe.forEach(t),fKe=i(L),zm=n(L,"LI",{});var pwe=s(zm);Cae=n(pwe,"STRONG",{});var YKr=s(Cae);mKe=r(YKr,"pegasus"),YKr.forEach(t),gKe=r(pwe," \u2014 "),_R=n(pwe,"A",{href:!0});var KKr=s(_R);hKe=r(KKr,"PegasusConfig"),KKr.forEach(t),pKe=r(pwe," (Pegasus model)"),pwe.forEach(t),_Ke=i(L),Wm=n(L,"LI",{});var _we=s(Wm);wae=n(_we,"STRONG",{});var ZKr=s(wae);uKe=r(ZKr,"perceiver"),ZKr.forEach(t),bKe=r(_we," \u2014 "),uR=n(_we,"A",{href:!0});var eZr=s(uR);vKe=r(eZr,"PerceiverConfig"),eZr.forEach(t),FKe=r(_we," (Perceiver model)"),_we.forEach(t),TKe=i(L),Qm=n(L,"LI",{});var uwe=s(Qm);Aae=n(uwe,"STRONG",{});var oZr=s(Aae);MKe=r(oZr,"plbart"),oZr.forEach(t),EKe=r(uwe," \u2014 "),bR=n(uwe,"A",{href:!0});var rZr=s(bR);CKe=r(rZr,"PLBartConfig"),rZr.forEach(t),wKe=r(uwe," (PLBart model)"),uwe.forEach(t),AKe=i(L),Hm=n(L,"LI",{});var bwe=s(Hm);Lae=n(bwe,"STRONG",{});var tZr=s(Lae);LKe=r(tZr,"poolformer"),tZr.forEach(t),yKe=r(bwe," \u2014 "),vR=n(bwe,"A",{href:!0});var aZr=s(vR);xKe=r(aZr,"PoolFormerConfig"),aZr.forEach(t),$Ke=r(bwe," (PoolFormer model)"),bwe.forEach(t),kKe=i(L),Um=n(L,"LI",{});var vwe=s(Um);yae=n(vwe,"STRONG",{});var nZr=s(yae);SKe=r(nZr,"prophetnet"),nZr.forEach(t),RKe=r(vwe," \u2014 "),FR=n(vwe,"A",{href:!0});var sZr=s(FR);PKe=r(sZr,"ProphetNetConfig"),sZr.forEach(t),BKe=r(vwe," (ProphetNet model)"),vwe.forEach(t),IKe=i(L),Jm=n(L,"LI",{});var Fwe=s(Jm);xae=n(Fwe,"STRONG",{});var lZr=s(xae);NKe=r(lZr,"qdqbert"),lZr.forEach(t),qKe=r(Fwe," \u2014 "),TR=n(Fwe,"A",{href:!0});var iZr=s(TR);jKe=r(iZr,"QDQBertConfig"),iZr.forEach(t),DKe=r(Fwe," (QDQBert model)"),Fwe.forEach(t),GKe=i(L),Ym=n(L,"LI",{});var Twe=s(Ym);$ae=n(Twe,"STRONG",{});var dZr=s($ae);OKe=r(dZr,"rag"),dZr.forEach(t),VKe=r(Twe," \u2014 "),MR=n(Twe,"A",{href:!0});var cZr=s(MR);XKe=r(cZr,"RagConfig"),cZr.forEach(t),zKe=r(Twe," (RAG model)"),Twe.forEach(t),WKe=i(L),Km=n(L,"LI",{});var Mwe=s(Km);kae=n(Mwe,"STRONG",{});var fZr=s(kae);QKe=r(fZr,"realm"),fZr.forEach(t),HKe=r(Mwe," \u2014 "),ER=n(Mwe,"A",{href:!0});var mZr=s(ER);UKe=r(mZr,"RealmConfig"),mZr.forEach(t),JKe=r(Mwe," (REALM model)"),Mwe.forEach(t),YKe=i(L),Zm=n(L,"LI",{});var Ewe=s(Zm);Sae=n(Ewe,"STRONG",{});var gZr=s(Sae);KKe=r(gZr,"reformer"),gZr.forEach(t),ZKe=r(Ewe," \u2014 "),CR=n(Ewe,"A",{href:!0});var hZr=s(CR);eZe=r(hZr,"ReformerConfig"),hZr.forEach(t),oZe=r(Ewe," (Reformer model)"),Ewe.forEach(t),rZe=i(L),eg=n(L,"LI",{});var Cwe=s(eg);Rae=n(Cwe,"STRONG",{});var pZr=s(Rae);tZe=r(pZr,"regnet"),pZr.forEach(t),aZe=r(Cwe," \u2014 "),wR=n(Cwe,"A",{href:!0});var _Zr=s(wR);nZe=r(_Zr,"RegNetConfig"),_Zr.forEach(t),sZe=r(Cwe," (RegNet model)"),Cwe.forEach(t),lZe=i(L),og=n(L,"LI",{});var wwe=s(og);Pae=n(wwe,"STRONG",{});var uZr=s(Pae);iZe=r(uZr,"rembert"),uZr.forEach(t),dZe=r(wwe," \u2014 "),AR=n(wwe,"A",{href:!0});var bZr=s(AR);cZe=r(bZr,"RemBertConfig"),bZr.forEach(t),fZe=r(wwe," (RemBERT model)"),wwe.forEach(t),mZe=i(L),rg=n(L,"LI",{});var Awe=s(rg);Bae=n(Awe,"STRONG",{});var vZr=s(Bae);gZe=r(vZr,"resnet"),vZr.forEach(t),hZe=r(Awe," \u2014 "),LR=n(Awe,"A",{href:!0});var FZr=s(LR);pZe=r(FZr,"ResNetConfig"),FZr.forEach(t),_Ze=r(Awe," (ResNet model)"),Awe.forEach(t),uZe=i(L),tg=n(L,"LI",{});var Lwe=s(tg);Iae=n(Lwe,"STRONG",{});var TZr=s(Iae);bZe=r(TZr,"retribert"),TZr.forEach(t),vZe=r(Lwe," \u2014 "),yR=n(Lwe,"A",{href:!0});var MZr=s(yR);FZe=r(MZr,"RetriBertConfig"),MZr.forEach(t),TZe=r(Lwe," (RetriBERT model)"),Lwe.forEach(t),MZe=i(L),ag=n(L,"LI",{});var ywe=s(ag);Nae=n(ywe,"STRONG",{});var EZr=s(Nae);EZe=r(EZr,"roberta"),EZr.forEach(t),CZe=r(ywe," \u2014 "),xR=n(ywe,"A",{href:!0});var CZr=s(xR);wZe=r(CZr,"RobertaConfig"),CZr.forEach(t),AZe=r(ywe," (RoBERTa model)"),ywe.forEach(t),LZe=i(L),ng=n(L,"LI",{});var xwe=s(ng);qae=n(xwe,"STRONG",{});var wZr=s(qae);yZe=r(wZr,"roformer"),wZr.forEach(t),xZe=r(xwe," \u2014 "),$R=n(xwe,"A",{href:!0});var AZr=s($R);$Ze=r(AZr,"RoFormerConfig"),AZr.forEach(t),kZe=r(xwe," (RoFormer model)"),xwe.forEach(t),SZe=i(L),sg=n(L,"LI",{});var $we=s(sg);jae=n($we,"STRONG",{});var LZr=s(jae);RZe=r(LZr,"segformer"),LZr.forEach(t),PZe=r($we," \u2014 "),kR=n($we,"A",{href:!0});var yZr=s(kR);BZe=r(yZr,"SegformerConfig"),yZr.forEach(t),IZe=r($we," (SegFormer model)"),$we.forEach(t),NZe=i(L),lg=n(L,"LI",{});var kwe=s(lg);Dae=n(kwe,"STRONG",{});var xZr=s(Dae);qZe=r(xZr,"sew"),xZr.forEach(t),jZe=r(kwe," \u2014 "),SR=n(kwe,"A",{href:!0});var $Zr=s(SR);DZe=r($Zr,"SEWConfig"),$Zr.forEach(t),GZe=r(kwe," (SEW model)"),kwe.forEach(t),OZe=i(L),ig=n(L,"LI",{});var Swe=s(ig);Gae=n(Swe,"STRONG",{});var kZr=s(Gae);VZe=r(kZr,"sew-d"),kZr.forEach(t),XZe=r(Swe," \u2014 "),RR=n(Swe,"A",{href:!0});var SZr=s(RR);zZe=r(SZr,"SEWDConfig"),SZr.forEach(t),WZe=r(Swe," (SEW-D model)"),Swe.forEach(t),QZe=i(L),dg=n(L,"LI",{});var Rwe=s(dg);Oae=n(Rwe,"STRONG",{});var RZr=s(Oae);HZe=r(RZr,"speech-encoder-decoder"),RZr.forEach(t),UZe=r(Rwe," \u2014 "),PR=n(Rwe,"A",{href:!0});var PZr=s(PR);JZe=r(PZr,"SpeechEncoderDecoderConfig"),PZr.forEach(t),YZe=r(Rwe," (Speech Encoder decoder model)"),Rwe.forEach(t),KZe=i(L),cg=n(L,"LI",{});var Pwe=s(cg);Vae=n(Pwe,"STRONG",{});var BZr=s(Vae);ZZe=r(BZr,"speech_to_text"),BZr.forEach(t),eeo=r(Pwe," \u2014 "),BR=n(Pwe,"A",{href:!0});var IZr=s(BR);oeo=r(IZr,"Speech2TextConfig"),IZr.forEach(t),reo=r(Pwe," (Speech2Text model)"),Pwe.forEach(t),teo=i(L),fg=n(L,"LI",{});var Bwe=s(fg);Xae=n(Bwe,"STRONG",{});var NZr=s(Xae);aeo=r(NZr,"speech_to_text_2"),NZr.forEach(t),neo=r(Bwe," \u2014 "),IR=n(Bwe,"A",{href:!0});var qZr=s(IR);seo=r(qZr,"Speech2Text2Config"),qZr.forEach(t),leo=r(Bwe," (Speech2Text2 model)"),Bwe.forEach(t),ieo=i(L),mg=n(L,"LI",{});var Iwe=s(mg);zae=n(Iwe,"STRONG",{});var jZr=s(zae);deo=r(jZr,"splinter"),jZr.forEach(t),ceo=r(Iwe," \u2014 "),NR=n(Iwe,"A",{href:!0});var DZr=s(NR);feo=r(DZr,"SplinterConfig"),DZr.forEach(t),meo=r(Iwe," (Splinter model)"),Iwe.forEach(t),geo=i(L),gg=n(L,"LI",{});var Nwe=s(gg);Wae=n(Nwe,"STRONG",{});var GZr=s(Wae);heo=r(GZr,"squeezebert"),GZr.forEach(t),peo=r(Nwe," \u2014 "),qR=n(Nwe,"A",{href:!0});var OZr=s(qR);_eo=r(OZr,"SqueezeBertConfig"),OZr.forEach(t),ueo=r(Nwe," (SqueezeBERT model)"),Nwe.forEach(t),beo=i(L),hg=n(L,"LI",{});var qwe=s(hg);Qae=n(qwe,"STRONG",{});var VZr=s(Qae);veo=r(VZr,"swin"),VZr.forEach(t),Feo=r(qwe," \u2014 "),jR=n(qwe,"A",{href:!0});var XZr=s(jR);Teo=r(XZr,"SwinConfig"),XZr.forEach(t),Meo=r(qwe," (Swin Transformer model)"),qwe.forEach(t),Eeo=i(L),pg=n(L,"LI",{});var jwe=s(pg);Hae=n(jwe,"STRONG",{});var zZr=s(Hae);Ceo=r(zZr,"swinv2"),zZr.forEach(t),weo=r(jwe," \u2014 "),DR=n(jwe,"A",{href:!0});var WZr=s(DR);Aeo=r(WZr,"Swinv2Config"),WZr.forEach(t),Leo=r(jwe," (Swin Transformer V2 model)"),jwe.forEach(t),yeo=i(L),_g=n(L,"LI",{});var Dwe=s(_g);Uae=n(Dwe,"STRONG",{});var QZr=s(Uae);xeo=r(QZr,"t5"),QZr.forEach(t),$eo=r(Dwe," \u2014 "),GR=n(Dwe,"A",{href:!0});var HZr=s(GR);keo=r(HZr,"T5Config"),HZr.forEach(t),Seo=r(Dwe," (T5 model)"),Dwe.forEach(t),Reo=i(L),ug=n(L,"LI",{});var Gwe=s(ug);Jae=n(Gwe,"STRONG",{});var UZr=s(Jae);Peo=r(UZr,"tapas"),UZr.forEach(t),Beo=r(Gwe," \u2014 "),OR=n(Gwe,"A",{href:!0});var JZr=s(OR);Ieo=r(JZr,"TapasConfig"),JZr.forEach(t),Neo=r(Gwe," (TAPAS model)"),Gwe.forEach(t),qeo=i(L),bg=n(L,"LI",{});var Owe=s(bg);Yae=n(Owe,"STRONG",{});var YZr=s(Yae);jeo=r(YZr,"trajectory_transformer"),YZr.forEach(t),Deo=r(Owe," \u2014 "),VR=n(Owe,"A",{href:!0});var KZr=s(VR);Geo=r(KZr,"TrajectoryTransformerConfig"),KZr.forEach(t),Oeo=r(Owe," (Trajectory Transformer model)"),Owe.forEach(t),Veo=i(L),vg=n(L,"LI",{});var Vwe=s(vg);Kae=n(Vwe,"STRONG",{});var ZZr=s(Kae);Xeo=r(ZZr,"transfo-xl"),ZZr.forEach(t),zeo=r(Vwe," \u2014 "),XR=n(Vwe,"A",{href:!0});var eet=s(XR);Weo=r(eet,"TransfoXLConfig"),eet.forEach(t),Qeo=r(Vwe," (Transformer-XL model)"),Vwe.forEach(t),Heo=i(L),Fg=n(L,"LI",{});var Xwe=s(Fg);Zae=n(Xwe,"STRONG",{});var oet=s(Zae);Ueo=r(oet,"trocr"),oet.forEach(t),Jeo=r(Xwe," \u2014 "),zR=n(Xwe,"A",{href:!0});var ret=s(zR);Yeo=r(ret,"TrOCRConfig"),ret.forEach(t),Keo=r(Xwe," (TrOCR model)"),Xwe.forEach(t),Zeo=i(L),Tg=n(L,"LI",{});var zwe=s(Tg);ene=n(zwe,"STRONG",{});var tet=s(ene);eoo=r(tet,"unispeech"),tet.forEach(t),ooo=r(zwe," \u2014 "),WR=n(zwe,"A",{href:!0});var aet=s(WR);roo=r(aet,"UniSpeechConfig"),aet.forEach(t),too=r(zwe," (UniSpeech model)"),zwe.forEach(t),aoo=i(L),Mg=n(L,"LI",{});var Wwe=s(Mg);one=n(Wwe,"STRONG",{});var net=s(one);noo=r(net,"unispeech-sat"),net.forEach(t),soo=r(Wwe," \u2014 "),QR=n(Wwe,"A",{href:!0});var set=s(QR);loo=r(set,"UniSpeechSatConfig"),set.forEach(t),ioo=r(Wwe," (UniSpeechSat model)"),Wwe.forEach(t),doo=i(L),Eg=n(L,"LI",{});var Qwe=s(Eg);rne=n(Qwe,"STRONG",{});var iet=s(rne);coo=r(iet,"van"),iet.forEach(t),foo=r(Qwe," \u2014 "),HR=n(Qwe,"A",{href:!0});var det=s(HR);moo=r(det,"VanConfig"),det.forEach(t),goo=r(Qwe," (VAN model)"),Qwe.forEach(t),hoo=i(L),Cg=n(L,"LI",{});var Hwe=s(Cg);tne=n(Hwe,"STRONG",{});var cet=s(tne);poo=r(cet,"vilt"),cet.forEach(t),_oo=r(Hwe," \u2014 "),UR=n(Hwe,"A",{href:!0});var fet=s(UR);uoo=r(fet,"ViltConfig"),fet.forEach(t),boo=r(Hwe," (ViLT model)"),Hwe.forEach(t),voo=i(L),wg=n(L,"LI",{});var Uwe=s(wg);ane=n(Uwe,"STRONG",{});var met=s(ane);Foo=r(met,"vision-encoder-decoder"),met.forEach(t),Too=r(Uwe," \u2014 "),JR=n(Uwe,"A",{href:!0});var get=s(JR);Moo=r(get,"VisionEncoderDecoderConfig"),get.forEach(t),Eoo=r(Uwe," (Vision Encoder decoder model)"),Uwe.forEach(t),Coo=i(L),Ag=n(L,"LI",{});var Jwe=s(Ag);nne=n(Jwe,"STRONG",{});var het=s(nne);woo=r(het,"vision-text-dual-encoder"),het.forEach(t),Aoo=r(Jwe," \u2014 "),YR=n(Jwe,"A",{href:!0});var pet=s(YR);Loo=r(pet,"VisionTextDualEncoderConfig"),pet.forEach(t),yoo=r(Jwe," (VisionTextDualEncoder model)"),Jwe.forEach(t),xoo=i(L),Lg=n(L,"LI",{});var Ywe=s(Lg);sne=n(Ywe,"STRONG",{});var _et=s(sne);$oo=r(_et,"visual_bert"),_et.forEach(t),koo=r(Ywe," \u2014 "),KR=n(Ywe,"A",{href:!0});var uet=s(KR);Soo=r(uet,"VisualBertConfig"),uet.forEach(t),Roo=r(Ywe," (VisualBERT model)"),Ywe.forEach(t),Poo=i(L),yg=n(L,"LI",{});var Kwe=s(yg);lne=n(Kwe,"STRONG",{});var bet=s(lne);Boo=r(bet,"vit"),bet.forEach(t),Ioo=r(Kwe," \u2014 "),ZR=n(Kwe,"A",{href:!0});var vet=s(ZR);Noo=r(vet,"ViTConfig"),vet.forEach(t),qoo=r(Kwe," (ViT model)"),Kwe.forEach(t),joo=i(L),xg=n(L,"LI",{});var Zwe=s(xg);ine=n(Zwe,"STRONG",{});var Fet=s(ine);Doo=r(Fet,"vit_mae"),Fet.forEach(t),Goo=r(Zwe," \u2014 "),eP=n(Zwe,"A",{href:!0});var Tet=s(eP);Ooo=r(Tet,"ViTMAEConfig"),Tet.forEach(t),Voo=r(Zwe," (ViTMAE model)"),Zwe.forEach(t),Xoo=i(L),$g=n(L,"LI",{});var eAe=s($g);dne=n(eAe,"STRONG",{});var Met=s(dne);zoo=r(Met,"wav2vec2"),Met.forEach(t),Woo=r(eAe," \u2014 "),oP=n(eAe,"A",{href:!0});var Eet=s(oP);Qoo=r(Eet,"Wav2Vec2Config"),Eet.forEach(t),Hoo=r(eAe," (Wav2Vec2 model)"),eAe.forEach(t),Uoo=i(L),kg=n(L,"LI",{});var oAe=s(kg);cne=n(oAe,"STRONG",{});var Cet=s(cne);Joo=r(Cet,"wav2vec2-conformer"),Cet.forEach(t),Yoo=r(oAe," \u2014 "),rP=n(oAe,"A",{href:!0});var wet=s(rP);Koo=r(wet,"Wav2Vec2ConformerConfig"),wet.forEach(t),Zoo=r(oAe," (Wav2Vec2-Conformer model)"),oAe.forEach(t),ero=i(L),Sg=n(L,"LI",{});var rAe=s(Sg);fne=n(rAe,"STRONG",{});var Aet=s(fne);oro=r(Aet,"wavlm"),Aet.forEach(t),rro=r(rAe," \u2014 "),tP=n(rAe,"A",{href:!0});var Let=s(tP);tro=r(Let,"WavLMConfig"),Let.forEach(t),aro=r(rAe," (WavLM model)"),rAe.forEach(t),nro=i(L),Rg=n(L,"LI",{});var tAe=s(Rg);mne=n(tAe,"STRONG",{});var yet=s(mne);sro=r(yet,"xglm"),yet.forEach(t),lro=r(tAe," \u2014 "),aP=n(tAe,"A",{href:!0});var xet=s(aP);iro=r(xet,"XGLMConfig"),xet.forEach(t),dro=r(tAe," (XGLM model)"),tAe.forEach(t),cro=i(L),Pg=n(L,"LI",{});var aAe=s(Pg);gne=n(aAe,"STRONG",{});var $et=s(gne);fro=r($et,"xlm"),$et.forEach(t),mro=r(aAe," \u2014 "),nP=n(aAe,"A",{href:!0});var ket=s(nP);gro=r(ket,"XLMConfig"),ket.forEach(t),hro=r(aAe," (XLM model)"),aAe.forEach(t),pro=i(L),Bg=n(L,"LI",{});var nAe=s(Bg);hne=n(nAe,"STRONG",{});var Set=s(hne);_ro=r(Set,"xlm-prophetnet"),Set.forEach(t),uro=r(nAe," \u2014 "),sP=n(nAe,"A",{href:!0});var Ret=s(sP);bro=r(Ret,"XLMProphetNetConfig"),Ret.forEach(t),vro=r(nAe," (XLM-ProphetNet model)"),nAe.forEach(t),Fro=i(L),Ig=n(L,"LI",{});var sAe=s(Ig);pne=n(sAe,"STRONG",{});var Pet=s(pne);Tro=r(Pet,"xlm-roberta"),Pet.forEach(t),Mro=r(sAe," \u2014 "),lP=n(sAe,"A",{href:!0});var Bet=s(lP);Ero=r(Bet,"XLMRobertaConfig"),Bet.forEach(t),Cro=r(sAe," (XLM-RoBERTa model)"),sAe.forEach(t),wro=i(L),Ng=n(L,"LI",{});var lAe=s(Ng);_ne=n(lAe,"STRONG",{});var Iet=s(_ne);Aro=r(Iet,"xlm-roberta-xl"),Iet.forEach(t),Lro=r(lAe," \u2014 "),iP=n(lAe,"A",{href:!0});var Net=s(iP);yro=r(Net,"XLMRobertaXLConfig"),Net.forEach(t),xro=r(lAe," (XLM-RoBERTa-XL model)"),lAe.forEach(t),$ro=i(L),qg=n(L,"LI",{});var iAe=s(qg);une=n(iAe,"STRONG",{});var qet=s(une);kro=r(qet,"xlnet"),qet.forEach(t),Sro=r(iAe," \u2014 "),dP=n(iAe,"A",{href:!0});var jet=s(dP);Rro=r(jet,"XLNetConfig"),jet.forEach(t),Pro=r(iAe," (XLNet model)"),iAe.forEach(t),Bro=i(L),jg=n(L,"LI",{});var dAe=s(jg);bne=n(dAe,"STRONG",{});var Det=s(bne);Iro=r(Det,"yolos"),Det.forEach(t),Nro=r(dAe," \u2014 "),cP=n(dAe,"A",{href:!0});var Get=s(cP);qro=r(Get,"YolosConfig"),Get.forEach(t),jro=r(dAe," (YOLOS model)"),dAe.forEach(t),Dro=i(L),Dg=n(L,"LI",{});var cAe=s(Dg);vne=n(cAe,"STRONG",{});var Oet=s(vne);Gro=r(Oet,"yoso"),Oet.forEach(t),Oro=r(cAe," \u2014 "),fP=n(cAe,"A",{href:!0});var Vet=s(fP);Vro=r(Vet,"YosoConfig"),Vet.forEach(t),Xro=r(cAe," (YOSO model)"),cAe.forEach(t),L.forEach(t),zro=i(at),T(Gg.$$.fragment,at),at.forEach(t),Wro=i(tt),Og=n(tt,"DIV",{class:!0});var SVe=s(Og);T(PA.$$.fragment,SVe),Qro=i(SVe),Fne=n(SVe,"P",{});var Xet=s(Fne);Hro=r(Xet,"Register a new configuration for this class."),Xet.forEach(t),SVe.forEach(t),tt.forEach(t),RGe=i(f),Si=n(f,"H2",{class:!0});var RVe=s(Si);Vg=n(RVe,"A",{id:!0,class:!0,href:!0});var zet=s(Vg);Tne=n(zet,"SPAN",{});var Wet=s(Tne);T(BA.$$.fragment,Wet),Wet.forEach(t),zet.forEach(t),Uro=i(RVe),Mne=n(RVe,"SPAN",{});var Qet=s(Mne);Jro=r(Qet,"AutoTokenizer"),Qet.forEach(t),RVe.forEach(t),PGe=i(f),Ao=n(f,"DIV",{class:!0});var Ws=s(Ao);T(IA.$$.fragment,Ws),Yro=i(Ws),NA=n(Ws,"P",{});var PVe=s(NA);Kro=r(PVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mP=n(PVe,"A",{href:!0});var Het=s(mP);Zro=r(Het,"AutoTokenizer.from_pretrained()"),Het.forEach(t),eto=r(PVe," class method."),PVe.forEach(t),oto=i(Ws),qA=n(Ws,"P",{});var BVe=s(qA);rto=r(BVe,"This class cannot be instantiated directly using "),Ene=n(BVe,"CODE",{});var Uet=s(Ene);tto=r(Uet,"__init__()"),Uet.forEach(t),ato=r(BVe," (throws an error)."),BVe.forEach(t),nto=i(Ws),Ar=n(Ws,"DIV",{class:!0});var Qs=s(Ar);T(jA.$$.fragment,Qs),sto=i(Qs),Cne=n(Qs,"P",{});var Jet=s(Cne);lto=r(Jet,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Jet.forEach(t),ito=i(Qs),ka=n(Qs,"P",{});var L0=s(ka);dto=r(L0,"The tokenizer class to instantiate is selected based on the "),wne=n(L0,"CODE",{});var Yet=s(wne);cto=r(Yet,"model_type"),Yet.forEach(t),fto=r(L0,` property of the config object (either
passed as an argument or loaded from `),Ane=n(L0,"CODE",{});var Ket=s(Ane);mto=r(Ket,"pretrained_model_name_or_path"),Ket.forEach(t),gto=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lne=n(L0,"CODE",{});var Zet=s(Lne);hto=r(Zet,"pretrained_model_name_or_path"),Zet.forEach(t),pto=r(L0,":"),L0.forEach(t),_to=i(Qs),k=n(Qs,"UL",{});var S=s(k);qn=n(S,"LI",{});var z$=s(qn);yne=n(z$,"STRONG",{});var eot=s(yne);uto=r(eot,"albert"),eot.forEach(t),bto=r(z$," \u2014 "),gP=n(z$,"A",{href:!0});var oot=s(gP);vto=r(oot,"AlbertTokenizer"),oot.forEach(t),Fto=r(z$," or "),hP=n(z$,"A",{href:!0});var rot=s(hP);Tto=r(rot,"AlbertTokenizerFast"),rot.forEach(t),Mto=r(z$," (ALBERT model)"),z$.forEach(t),Eto=i(S),jn=n(S,"LI",{});var W$=s(jn);xne=n(W$,"STRONG",{});var tot=s(xne);Cto=r(tot,"bart"),tot.forEach(t),wto=r(W$," \u2014 "),pP=n(W$,"A",{href:!0});var aot=s(pP);Ato=r(aot,"BartTokenizer"),aot.forEach(t),Lto=r(W$," or "),_P=n(W$,"A",{href:!0});var not=s(_P);yto=r(not,"BartTokenizerFast"),not.forEach(t),xto=r(W$," (BART model)"),W$.forEach(t),$to=i(S),Dn=n(S,"LI",{});var Q$=s(Dn);$ne=n(Q$,"STRONG",{});var sot=s($ne);kto=r(sot,"barthez"),sot.forEach(t),Sto=r(Q$," \u2014 "),uP=n(Q$,"A",{href:!0});var lot=s(uP);Rto=r(lot,"BarthezTokenizer"),lot.forEach(t),Pto=r(Q$," or "),bP=n(Q$,"A",{href:!0});var iot=s(bP);Bto=r(iot,"BarthezTokenizerFast"),iot.forEach(t),Ito=r(Q$," (BARThez model)"),Q$.forEach(t),Nto=i(S),Xg=n(S,"LI",{});var fAe=s(Xg);kne=n(fAe,"STRONG",{});var dot=s(kne);qto=r(dot,"bartpho"),dot.forEach(t),jto=r(fAe," \u2014 "),vP=n(fAe,"A",{href:!0});var cot=s(vP);Dto=r(cot,"BartphoTokenizer"),cot.forEach(t),Gto=r(fAe," (BARTpho model)"),fAe.forEach(t),Oto=i(S),Gn=n(S,"LI",{});var H$=s(Gn);Sne=n(H$,"STRONG",{});var fot=s(Sne);Vto=r(fot,"bert"),fot.forEach(t),Xto=r(H$," \u2014 "),FP=n(H$,"A",{href:!0});var mot=s(FP);zto=r(mot,"BertTokenizer"),mot.forEach(t),Wto=r(H$," or "),TP=n(H$,"A",{href:!0});var got=s(TP);Qto=r(got,"BertTokenizerFast"),got.forEach(t),Hto=r(H$," (BERT model)"),H$.forEach(t),Uto=i(S),zg=n(S,"LI",{});var mAe=s(zg);Rne=n(mAe,"STRONG",{});var hot=s(Rne);Jto=r(hot,"bert-generation"),hot.forEach(t),Yto=r(mAe," \u2014 "),MP=n(mAe,"A",{href:!0});var pot=s(MP);Kto=r(pot,"BertGenerationTokenizer"),pot.forEach(t),Zto=r(mAe," (Bert Generation model)"),mAe.forEach(t),eao=i(S),Wg=n(S,"LI",{});var gAe=s(Wg);Pne=n(gAe,"STRONG",{});var _ot=s(Pne);oao=r(_ot,"bert-japanese"),_ot.forEach(t),rao=r(gAe," \u2014 "),EP=n(gAe,"A",{href:!0});var uot=s(EP);tao=r(uot,"BertJapaneseTokenizer"),uot.forEach(t),aao=r(gAe," (BertJapanese model)"),gAe.forEach(t),nao=i(S),Qg=n(S,"LI",{});var hAe=s(Qg);Bne=n(hAe,"STRONG",{});var bot=s(Bne);sao=r(bot,"bertweet"),bot.forEach(t),lao=r(hAe," \u2014 "),CP=n(hAe,"A",{href:!0});var vot=s(CP);iao=r(vot,"BertweetTokenizer"),vot.forEach(t),dao=r(hAe," (BERTweet model)"),hAe.forEach(t),cao=i(S),On=n(S,"LI",{});var U$=s(On);Ine=n(U$,"STRONG",{});var Fot=s(Ine);fao=r(Fot,"big_bird"),Fot.forEach(t),mao=r(U$," \u2014 "),wP=n(U$,"A",{href:!0});var Tot=s(wP);gao=r(Tot,"BigBirdTokenizer"),Tot.forEach(t),hao=r(U$," or "),AP=n(U$,"A",{href:!0});var Mot=s(AP);pao=r(Mot,"BigBirdTokenizerFast"),Mot.forEach(t),_ao=r(U$," (BigBird model)"),U$.forEach(t),uao=i(S),Vn=n(S,"LI",{});var J$=s(Vn);Nne=n(J$,"STRONG",{});var Eot=s(Nne);bao=r(Eot,"bigbird_pegasus"),Eot.forEach(t),vao=r(J$," \u2014 "),LP=n(J$,"A",{href:!0});var Cot=s(LP);Fao=r(Cot,"PegasusTokenizer"),Cot.forEach(t),Tao=r(J$," or "),yP=n(J$,"A",{href:!0});var wot=s(yP);Mao=r(wot,"PegasusTokenizerFast"),wot.forEach(t),Eao=r(J$," (BigBird-Pegasus model)"),J$.forEach(t),Cao=i(S),Xn=n(S,"LI",{});var Y$=s(Xn);qne=n(Y$,"STRONG",{});var Aot=s(qne);wao=r(Aot,"blenderbot"),Aot.forEach(t),Aao=r(Y$," \u2014 "),xP=n(Y$,"A",{href:!0});var Lot=s(xP);Lao=r(Lot,"BlenderbotTokenizer"),Lot.forEach(t),yao=r(Y$," or "),$P=n(Y$,"A",{href:!0});var yot=s($P);xao=r(yot,"BlenderbotTokenizerFast"),yot.forEach(t),$ao=r(Y$," (Blenderbot model)"),Y$.forEach(t),kao=i(S),Hg=n(S,"LI",{});var pAe=s(Hg);jne=n(pAe,"STRONG",{});var xot=s(jne);Sao=r(xot,"blenderbot-small"),xot.forEach(t),Rao=r(pAe," \u2014 "),kP=n(pAe,"A",{href:!0});var $ot=s(kP);Pao=r($ot,"BlenderbotSmallTokenizer"),$ot.forEach(t),Bao=r(pAe," (BlenderbotSmall model)"),pAe.forEach(t),Iao=i(S),Ug=n(S,"LI",{});var _Ae=s(Ug);Dne=n(_Ae,"STRONG",{});var kot=s(Dne);Nao=r(kot,"bloom"),kot.forEach(t),qao=r(_Ae," \u2014 "),SP=n(_Ae,"A",{href:!0});var Sot=s(SP);jao=r(Sot,"BloomTokenizerFast"),Sot.forEach(t),Dao=r(_Ae," (BLOOM model)"),_Ae.forEach(t),Gao=i(S),Jg=n(S,"LI",{});var uAe=s(Jg);Gne=n(uAe,"STRONG",{});var Rot=s(Gne);Oao=r(Rot,"byt5"),Rot.forEach(t),Vao=r(uAe," \u2014 "),RP=n(uAe,"A",{href:!0});var Pot=s(RP);Xao=r(Pot,"ByT5Tokenizer"),Pot.forEach(t),zao=r(uAe," (ByT5 model)"),uAe.forEach(t),Wao=i(S),zn=n(S,"LI",{});var K$=s(zn);One=n(K$,"STRONG",{});var Bot=s(One);Qao=r(Bot,"camembert"),Bot.forEach(t),Hao=r(K$," \u2014 "),PP=n(K$,"A",{href:!0});var Iot=s(PP);Uao=r(Iot,"CamembertTokenizer"),Iot.forEach(t),Jao=r(K$," or "),BP=n(K$,"A",{href:!0});var Not=s(BP);Yao=r(Not,"CamembertTokenizerFast"),Not.forEach(t),Kao=r(K$," (CamemBERT model)"),K$.forEach(t),Zao=i(S),Yg=n(S,"LI",{});var bAe=s(Yg);Vne=n(bAe,"STRONG",{});var qot=s(Vne);eno=r(qot,"canine"),qot.forEach(t),ono=r(bAe," \u2014 "),IP=n(bAe,"A",{href:!0});var jot=s(IP);rno=r(jot,"CanineTokenizer"),jot.forEach(t),tno=r(bAe," (CANINE model)"),bAe.forEach(t),ano=i(S),Wn=n(S,"LI",{});var Z$=s(Wn);Xne=n(Z$,"STRONG",{});var Dot=s(Xne);nno=r(Dot,"clip"),Dot.forEach(t),sno=r(Z$," \u2014 "),NP=n(Z$,"A",{href:!0});var Got=s(NP);lno=r(Got,"CLIPTokenizer"),Got.forEach(t),ino=r(Z$," or "),qP=n(Z$,"A",{href:!0});var Oot=s(qP);dno=r(Oot,"CLIPTokenizerFast"),Oot.forEach(t),cno=r(Z$," (CLIP model)"),Z$.forEach(t),fno=i(S),Qn=n(S,"LI",{});var ek=s(Qn);zne=n(ek,"STRONG",{});var Vot=s(zne);mno=r(Vot,"convbert"),Vot.forEach(t),gno=r(ek," \u2014 "),jP=n(ek,"A",{href:!0});var Xot=s(jP);hno=r(Xot,"ConvBertTokenizer"),Xot.forEach(t),pno=r(ek," or "),DP=n(ek,"A",{href:!0});var zot=s(DP);_no=r(zot,"ConvBertTokenizerFast"),zot.forEach(t),uno=r(ek," (ConvBERT model)"),ek.forEach(t),bno=i(S),Hn=n(S,"LI",{});var ok=s(Hn);Wne=n(ok,"STRONG",{});var Wot=s(Wne);vno=r(Wot,"cpm"),Wot.forEach(t),Fno=r(ok," \u2014 "),GP=n(ok,"A",{href:!0});var Qot=s(GP);Tno=r(Qot,"CpmTokenizer"),Qot.forEach(t),Mno=r(ok," or "),OP=n(ok,"A",{href:!0});var Hot=s(OP);Eno=r(Hot,"CpmTokenizerFast"),Hot.forEach(t),Cno=r(ok," (CPM model)"),ok.forEach(t),wno=i(S),Kg=n(S,"LI",{});var vAe=s(Kg);Qne=n(vAe,"STRONG",{});var Uot=s(Qne);Ano=r(Uot,"ctrl"),Uot.forEach(t),Lno=r(vAe," \u2014 "),VP=n(vAe,"A",{href:!0});var Jot=s(VP);yno=r(Jot,"CTRLTokenizer"),Jot.forEach(t),xno=r(vAe," (CTRL model)"),vAe.forEach(t),$no=i(S),Un=n(S,"LI",{});var rk=s(Un);Hne=n(rk,"STRONG",{});var Yot=s(Hne);kno=r(Yot,"data2vec-text"),Yot.forEach(t),Sno=r(rk," \u2014 "),XP=n(rk,"A",{href:!0});var Kot=s(XP);Rno=r(Kot,"RobertaTokenizer"),Kot.forEach(t),Pno=r(rk," or "),zP=n(rk,"A",{href:!0});var Zot=s(zP);Bno=r(Zot,"RobertaTokenizerFast"),Zot.forEach(t),Ino=r(rk," (Data2VecText model)"),rk.forEach(t),Nno=i(S),Jn=n(S,"LI",{});var tk=s(Jn);Une=n(tk,"STRONG",{});var ert=s(Une);qno=r(ert,"deberta"),ert.forEach(t),jno=r(tk," \u2014 "),WP=n(tk,"A",{href:!0});var ort=s(WP);Dno=r(ort,"DebertaTokenizer"),ort.forEach(t),Gno=r(tk," or "),QP=n(tk,"A",{href:!0});var rrt=s(QP);Ono=r(rrt,"DebertaTokenizerFast"),rrt.forEach(t),Vno=r(tk," (DeBERTa model)"),tk.forEach(t),Xno=i(S),Yn=n(S,"LI",{});var ak=s(Yn);Jne=n(ak,"STRONG",{});var trt=s(Jne);zno=r(trt,"deberta-v2"),trt.forEach(t),Wno=r(ak," \u2014 "),HP=n(ak,"A",{href:!0});var art=s(HP);Qno=r(art,"DebertaV2Tokenizer"),art.forEach(t),Hno=r(ak," or "),UP=n(ak,"A",{href:!0});var nrt=s(UP);Uno=r(nrt,"DebertaV2TokenizerFast"),nrt.forEach(t),Jno=r(ak," (DeBERTa-v2 model)"),ak.forEach(t),Yno=i(S),Kn=n(S,"LI",{});var nk=s(Kn);Yne=n(nk,"STRONG",{});var srt=s(Yne);Kno=r(srt,"distilbert"),srt.forEach(t),Zno=r(nk," \u2014 "),JP=n(nk,"A",{href:!0});var lrt=s(JP);eso=r(lrt,"DistilBertTokenizer"),lrt.forEach(t),oso=r(nk," or "),YP=n(nk,"A",{href:!0});var irt=s(YP);rso=r(irt,"DistilBertTokenizerFast"),irt.forEach(t),tso=r(nk," (DistilBERT model)"),nk.forEach(t),aso=i(S),Zn=n(S,"LI",{});var sk=s(Zn);Kne=n(sk,"STRONG",{});var drt=s(Kne);nso=r(drt,"dpr"),drt.forEach(t),sso=r(sk," \u2014 "),KP=n(sk,"A",{href:!0});var crt=s(KP);lso=r(crt,"DPRQuestionEncoderTokenizer"),crt.forEach(t),iso=r(sk," or "),ZP=n(sk,"A",{href:!0});var frt=s(ZP);dso=r(frt,"DPRQuestionEncoderTokenizerFast"),frt.forEach(t),cso=r(sk," (DPR model)"),sk.forEach(t),fso=i(S),es=n(S,"LI",{});var lk=s(es);Zne=n(lk,"STRONG",{});var mrt=s(Zne);mso=r(mrt,"electra"),mrt.forEach(t),gso=r(lk," \u2014 "),eB=n(lk,"A",{href:!0});var grt=s(eB);hso=r(grt,"ElectraTokenizer"),grt.forEach(t),pso=r(lk," or "),oB=n(lk,"A",{href:!0});var hrt=s(oB);_so=r(hrt,"ElectraTokenizerFast"),hrt.forEach(t),uso=r(lk," (ELECTRA model)"),lk.forEach(t),bso=i(S),Zg=n(S,"LI",{});var FAe=s(Zg);ese=n(FAe,"STRONG",{});var prt=s(ese);vso=r(prt,"flaubert"),prt.forEach(t),Fso=r(FAe," \u2014 "),rB=n(FAe,"A",{href:!0});var _rt=s(rB);Tso=r(_rt,"FlaubertTokenizer"),_rt.forEach(t),Mso=r(FAe," (FlauBERT model)"),FAe.forEach(t),Eso=i(S),os=n(S,"LI",{});var ik=s(os);ose=n(ik,"STRONG",{});var urt=s(ose);Cso=r(urt,"fnet"),urt.forEach(t),wso=r(ik," \u2014 "),tB=n(ik,"A",{href:!0});var brt=s(tB);Aso=r(brt,"FNetTokenizer"),brt.forEach(t),Lso=r(ik," or "),aB=n(ik,"A",{href:!0});var vrt=s(aB);yso=r(vrt,"FNetTokenizerFast"),vrt.forEach(t),xso=r(ik," (FNet model)"),ik.forEach(t),$so=i(S),eh=n(S,"LI",{});var TAe=s(eh);rse=n(TAe,"STRONG",{});var Frt=s(rse);kso=r(Frt,"fsmt"),Frt.forEach(t),Sso=r(TAe," \u2014 "),nB=n(TAe,"A",{href:!0});var Trt=s(nB);Rso=r(Trt,"FSMTTokenizer"),Trt.forEach(t),Pso=r(TAe," (FairSeq Machine-Translation model)"),TAe.forEach(t),Bso=i(S),rs=n(S,"LI",{});var dk=s(rs);tse=n(dk,"STRONG",{});var Mrt=s(tse);Iso=r(Mrt,"funnel"),Mrt.forEach(t),Nso=r(dk," \u2014 "),sB=n(dk,"A",{href:!0});var Ert=s(sB);qso=r(Ert,"FunnelTokenizer"),Ert.forEach(t),jso=r(dk," or "),lB=n(dk,"A",{href:!0});var Crt=s(lB);Dso=r(Crt,"FunnelTokenizerFast"),Crt.forEach(t),Gso=r(dk," (Funnel Transformer model)"),dk.forEach(t),Oso=i(S),ts=n(S,"LI",{});var ck=s(ts);ase=n(ck,"STRONG",{});var wrt=s(ase);Vso=r(wrt,"gpt2"),wrt.forEach(t),Xso=r(ck," \u2014 "),iB=n(ck,"A",{href:!0});var Art=s(iB);zso=r(Art,"GPT2Tokenizer"),Art.forEach(t),Wso=r(ck," or "),dB=n(ck,"A",{href:!0});var Lrt=s(dB);Qso=r(Lrt,"GPT2TokenizerFast"),Lrt.forEach(t),Hso=r(ck," (OpenAI GPT-2 model)"),ck.forEach(t),Uso=i(S),as=n(S,"LI",{});var fk=s(as);nse=n(fk,"STRONG",{});var yrt=s(nse);Jso=r(yrt,"gpt_neo"),yrt.forEach(t),Yso=r(fk," \u2014 "),cB=n(fk,"A",{href:!0});var xrt=s(cB);Kso=r(xrt,"GPT2Tokenizer"),xrt.forEach(t),Zso=r(fk," or "),fB=n(fk,"A",{href:!0});var $rt=s(fB);elo=r($rt,"GPT2TokenizerFast"),$rt.forEach(t),olo=r(fk," (GPT Neo model)"),fk.forEach(t),rlo=i(S),oh=n(S,"LI",{});var MAe=s(oh);sse=n(MAe,"STRONG",{});var krt=s(sse);tlo=r(krt,"gpt_neox"),krt.forEach(t),alo=r(MAe," \u2014 "),mB=n(MAe,"A",{href:!0});var Srt=s(mB);nlo=r(Srt,"GPTNeoXTokenizerFast"),Srt.forEach(t),slo=r(MAe," (GPT NeoX model)"),MAe.forEach(t),llo=i(S),ns=n(S,"LI",{});var mk=s(ns);lse=n(mk,"STRONG",{});var Rrt=s(lse);ilo=r(Rrt,"gptj"),Rrt.forEach(t),dlo=r(mk," \u2014 "),gB=n(mk,"A",{href:!0});var Prt=s(gB);clo=r(Prt,"GPT2Tokenizer"),Prt.forEach(t),flo=r(mk," or "),hB=n(mk,"A",{href:!0});var Brt=s(hB);mlo=r(Brt,"GPT2TokenizerFast"),Brt.forEach(t),glo=r(mk," (GPT-J model)"),mk.forEach(t),hlo=i(S),ss=n(S,"LI",{});var gk=s(ss);ise=n(gk,"STRONG",{});var Irt=s(ise);plo=r(Irt,"herbert"),Irt.forEach(t),_lo=r(gk," \u2014 "),pB=n(gk,"A",{href:!0});var Nrt=s(pB);ulo=r(Nrt,"HerbertTokenizer"),Nrt.forEach(t),blo=r(gk," or "),_B=n(gk,"A",{href:!0});var qrt=s(_B);vlo=r(qrt,"HerbertTokenizerFast"),qrt.forEach(t),Flo=r(gk," (HerBERT model)"),gk.forEach(t),Tlo=i(S),rh=n(S,"LI",{});var EAe=s(rh);dse=n(EAe,"STRONG",{});var jrt=s(dse);Mlo=r(jrt,"hubert"),jrt.forEach(t),Elo=r(EAe," \u2014 "),uB=n(EAe,"A",{href:!0});var Drt=s(uB);Clo=r(Drt,"Wav2Vec2CTCTokenizer"),Drt.forEach(t),wlo=r(EAe," (Hubert model)"),EAe.forEach(t),Alo=i(S),ls=n(S,"LI",{});var hk=s(ls);cse=n(hk,"STRONG",{});var Grt=s(cse);Llo=r(Grt,"ibert"),Grt.forEach(t),ylo=r(hk," \u2014 "),bB=n(hk,"A",{href:!0});var Ort=s(bB);xlo=r(Ort,"RobertaTokenizer"),Ort.forEach(t),$lo=r(hk," or "),vB=n(hk,"A",{href:!0});var Vrt=s(vB);klo=r(Vrt,"RobertaTokenizerFast"),Vrt.forEach(t),Slo=r(hk," (I-BERT model)"),hk.forEach(t),Rlo=i(S),is=n(S,"LI",{});var pk=s(is);fse=n(pk,"STRONG",{});var Xrt=s(fse);Plo=r(Xrt,"layoutlm"),Xrt.forEach(t),Blo=r(pk," \u2014 "),FB=n(pk,"A",{href:!0});var zrt=s(FB);Ilo=r(zrt,"LayoutLMTokenizer"),zrt.forEach(t),Nlo=r(pk," or "),TB=n(pk,"A",{href:!0});var Wrt=s(TB);qlo=r(Wrt,"LayoutLMTokenizerFast"),Wrt.forEach(t),jlo=r(pk," (LayoutLM model)"),pk.forEach(t),Dlo=i(S),ds=n(S,"LI",{});var _k=s(ds);mse=n(_k,"STRONG",{});var Qrt=s(mse);Glo=r(Qrt,"layoutlmv2"),Qrt.forEach(t),Olo=r(_k," \u2014 "),MB=n(_k,"A",{href:!0});var Hrt=s(MB);Vlo=r(Hrt,"LayoutLMv2Tokenizer"),Hrt.forEach(t),Xlo=r(_k," or "),EB=n(_k,"A",{href:!0});var Urt=s(EB);zlo=r(Urt,"LayoutLMv2TokenizerFast"),Urt.forEach(t),Wlo=r(_k," (LayoutLMv2 model)"),_k.forEach(t),Qlo=i(S),cs=n(S,"LI",{});var uk=s(cs);gse=n(uk,"STRONG",{});var Jrt=s(gse);Hlo=r(Jrt,"layoutlmv3"),Jrt.forEach(t),Ulo=r(uk," \u2014 "),CB=n(uk,"A",{href:!0});var Yrt=s(CB);Jlo=r(Yrt,"LayoutLMv3Tokenizer"),Yrt.forEach(t),Ylo=r(uk," or "),wB=n(uk,"A",{href:!0});var Krt=s(wB);Klo=r(Krt,"LayoutLMv3TokenizerFast"),Krt.forEach(t),Zlo=r(uk," (LayoutLMv3 model)"),uk.forEach(t),eio=i(S),fs=n(S,"LI",{});var bk=s(fs);hse=n(bk,"STRONG",{});var Zrt=s(hse);oio=r(Zrt,"layoutxlm"),Zrt.forEach(t),rio=r(bk," \u2014 "),AB=n(bk,"A",{href:!0});var ett=s(AB);tio=r(ett,"LayoutXLMTokenizer"),ett.forEach(t),aio=r(bk," or "),LB=n(bk,"A",{href:!0});var ott=s(LB);nio=r(ott,"LayoutXLMTokenizerFast"),ott.forEach(t),sio=r(bk," (LayoutXLM model)"),bk.forEach(t),lio=i(S),ms=n(S,"LI",{});var vk=s(ms);pse=n(vk,"STRONG",{});var rtt=s(pse);iio=r(rtt,"led"),rtt.forEach(t),dio=r(vk," \u2014 "),yB=n(vk,"A",{href:!0});var ttt=s(yB);cio=r(ttt,"LEDTokenizer"),ttt.forEach(t),fio=r(vk," or "),xB=n(vk,"A",{href:!0});var att=s(xB);mio=r(att,"LEDTokenizerFast"),att.forEach(t),gio=r(vk," (LED model)"),vk.forEach(t),hio=i(S),gs=n(S,"LI",{});var Fk=s(gs);_se=n(Fk,"STRONG",{});var ntt=s(_se);pio=r(ntt,"longformer"),ntt.forEach(t),_io=r(Fk," \u2014 "),$B=n(Fk,"A",{href:!0});var stt=s($B);uio=r(stt,"LongformerTokenizer"),stt.forEach(t),bio=r(Fk," or "),kB=n(Fk,"A",{href:!0});var ltt=s(kB);vio=r(ltt,"LongformerTokenizerFast"),ltt.forEach(t),Fio=r(Fk," (Longformer model)"),Fk.forEach(t),Tio=i(S),hs=n(S,"LI",{});var Tk=s(hs);use=n(Tk,"STRONG",{});var itt=s(use);Mio=r(itt,"longt5"),itt.forEach(t),Eio=r(Tk," \u2014 "),SB=n(Tk,"A",{href:!0});var dtt=s(SB);Cio=r(dtt,"T5Tokenizer"),dtt.forEach(t),wio=r(Tk," or "),RB=n(Tk,"A",{href:!0});var ctt=s(RB);Aio=r(ctt,"T5TokenizerFast"),ctt.forEach(t),Lio=r(Tk," (LongT5 model)"),Tk.forEach(t),yio=i(S),th=n(S,"LI",{});var CAe=s(th);bse=n(CAe,"STRONG",{});var ftt=s(bse);xio=r(ftt,"luke"),ftt.forEach(t),$io=r(CAe," \u2014 "),PB=n(CAe,"A",{href:!0});var mtt=s(PB);kio=r(mtt,"LukeTokenizer"),mtt.forEach(t),Sio=r(CAe," (LUKE model)"),CAe.forEach(t),Rio=i(S),ps=n(S,"LI",{});var Mk=s(ps);vse=n(Mk,"STRONG",{});var gtt=s(vse);Pio=r(gtt,"lxmert"),gtt.forEach(t),Bio=r(Mk," \u2014 "),BB=n(Mk,"A",{href:!0});var htt=s(BB);Iio=r(htt,"LxmertTokenizer"),htt.forEach(t),Nio=r(Mk," or "),IB=n(Mk,"A",{href:!0});var ptt=s(IB);qio=r(ptt,"LxmertTokenizerFast"),ptt.forEach(t),jio=r(Mk," (LXMERT model)"),Mk.forEach(t),Dio=i(S),ah=n(S,"LI",{});var wAe=s(ah);Fse=n(wAe,"STRONG",{});var _tt=s(Fse);Gio=r(_tt,"m2m_100"),_tt.forEach(t),Oio=r(wAe," \u2014 "),NB=n(wAe,"A",{href:!0});var utt=s(NB);Vio=r(utt,"M2M100Tokenizer"),utt.forEach(t),Xio=r(wAe," (M2M100 model)"),wAe.forEach(t),zio=i(S),nh=n(S,"LI",{});var AAe=s(nh);Tse=n(AAe,"STRONG",{});var btt=s(Tse);Wio=r(btt,"marian"),btt.forEach(t),Qio=r(AAe," \u2014 "),qB=n(AAe,"A",{href:!0});var vtt=s(qB);Hio=r(vtt,"MarianTokenizer"),vtt.forEach(t),Uio=r(AAe," (Marian model)"),AAe.forEach(t),Jio=i(S),_s=n(S,"LI",{});var Ek=s(_s);Mse=n(Ek,"STRONG",{});var Ftt=s(Mse);Yio=r(Ftt,"mbart"),Ftt.forEach(t),Kio=r(Ek," \u2014 "),jB=n(Ek,"A",{href:!0});var Ttt=s(jB);Zio=r(Ttt,"MBartTokenizer"),Ttt.forEach(t),edo=r(Ek," or "),DB=n(Ek,"A",{href:!0});var Mtt=s(DB);odo=r(Mtt,"MBartTokenizerFast"),Mtt.forEach(t),rdo=r(Ek," (mBART model)"),Ek.forEach(t),tdo=i(S),us=n(S,"LI",{});var Ck=s(us);Ese=n(Ck,"STRONG",{});var Ett=s(Ese);ado=r(Ett,"mbart50"),Ett.forEach(t),ndo=r(Ck," \u2014 "),GB=n(Ck,"A",{href:!0});var Ctt=s(GB);sdo=r(Ctt,"MBart50Tokenizer"),Ctt.forEach(t),ldo=r(Ck," or "),OB=n(Ck,"A",{href:!0});var wtt=s(OB);ido=r(wtt,"MBart50TokenizerFast"),wtt.forEach(t),ddo=r(Ck," (mBART-50 model)"),Ck.forEach(t),cdo=i(S),bs=n(S,"LI",{});var wk=s(bs);Cse=n(wk,"STRONG",{});var Att=s(Cse);fdo=r(Att,"megatron-bert"),Att.forEach(t),mdo=r(wk," \u2014 "),VB=n(wk,"A",{href:!0});var Ltt=s(VB);gdo=r(Ltt,"BertTokenizer"),Ltt.forEach(t),hdo=r(wk," or "),XB=n(wk,"A",{href:!0});var ytt=s(XB);pdo=r(ytt,"BertTokenizerFast"),ytt.forEach(t),_do=r(wk," (Megatron-BERT model)"),wk.forEach(t),udo=i(S),sh=n(S,"LI",{});var LAe=s(sh);wse=n(LAe,"STRONG",{});var xtt=s(wse);bdo=r(xtt,"mluke"),xtt.forEach(t),vdo=r(LAe," \u2014 "),zB=n(LAe,"A",{href:!0});var $tt=s(zB);Fdo=r($tt,"MLukeTokenizer"),$tt.forEach(t),Tdo=r(LAe," (mLUKE model)"),LAe.forEach(t),Mdo=i(S),vs=n(S,"LI",{});var Ak=s(vs);Ase=n(Ak,"STRONG",{});var ktt=s(Ase);Edo=r(ktt,"mobilebert"),ktt.forEach(t),Cdo=r(Ak," \u2014 "),WB=n(Ak,"A",{href:!0});var Stt=s(WB);wdo=r(Stt,"MobileBertTokenizer"),Stt.forEach(t),Ado=r(Ak," or "),QB=n(Ak,"A",{href:!0});var Rtt=s(QB);Ldo=r(Rtt,"MobileBertTokenizerFast"),Rtt.forEach(t),ydo=r(Ak," (MobileBERT model)"),Ak.forEach(t),xdo=i(S),Fs=n(S,"LI",{});var Lk=s(Fs);Lse=n(Lk,"STRONG",{});var Ptt=s(Lse);$do=r(Ptt,"mpnet"),Ptt.forEach(t),kdo=r(Lk," \u2014 "),HB=n(Lk,"A",{href:!0});var Btt=s(HB);Sdo=r(Btt,"MPNetTokenizer"),Btt.forEach(t),Rdo=r(Lk," or "),UB=n(Lk,"A",{href:!0});var Itt=s(UB);Pdo=r(Itt,"MPNetTokenizerFast"),Itt.forEach(t),Bdo=r(Lk," (MPNet model)"),Lk.forEach(t),Ido=i(S),Ts=n(S,"LI",{});var yk=s(Ts);yse=n(yk,"STRONG",{});var Ntt=s(yse);Ndo=r(Ntt,"mt5"),Ntt.forEach(t),qdo=r(yk," \u2014 "),JB=n(yk,"A",{href:!0});var qtt=s(JB);jdo=r(qtt,"MT5Tokenizer"),qtt.forEach(t),Ddo=r(yk," or "),YB=n(yk,"A",{href:!0});var jtt=s(YB);Gdo=r(jtt,"MT5TokenizerFast"),jtt.forEach(t),Odo=r(yk," (MT5 model)"),yk.forEach(t),Vdo=i(S),Ms=n(S,"LI",{});var xk=s(Ms);xse=n(xk,"STRONG",{});var Dtt=s(xse);Xdo=r(Dtt,"nystromformer"),Dtt.forEach(t),zdo=r(xk," \u2014 "),KB=n(xk,"A",{href:!0});var Gtt=s(KB);Wdo=r(Gtt,"AlbertTokenizer"),Gtt.forEach(t),Qdo=r(xk," or "),ZB=n(xk,"A",{href:!0});var Ott=s(ZB);Hdo=r(Ott,"AlbertTokenizerFast"),Ott.forEach(t),Udo=r(xk," (Nystr\xF6mformer model)"),xk.forEach(t),Jdo=i(S),Es=n(S,"LI",{});var $k=s(Es);$se=n($k,"STRONG",{});var Vtt=s($se);Ydo=r(Vtt,"openai-gpt"),Vtt.forEach(t),Kdo=r($k," \u2014 "),eI=n($k,"A",{href:!0});var Xtt=s(eI);Zdo=r(Xtt,"OpenAIGPTTokenizer"),Xtt.forEach(t),eco=r($k," or "),oI=n($k,"A",{href:!0});var ztt=s(oI);oco=r(ztt,"OpenAIGPTTokenizerFast"),ztt.forEach(t),rco=r($k," (OpenAI GPT model)"),$k.forEach(t),tco=i(S),lh=n(S,"LI",{});var yAe=s(lh);kse=n(yAe,"STRONG",{});var Wtt=s(kse);aco=r(Wtt,"opt"),Wtt.forEach(t),nco=r(yAe," \u2014 "),rI=n(yAe,"A",{href:!0});var Qtt=s(rI);sco=r(Qtt,"GPT2Tokenizer"),Qtt.forEach(t),lco=r(yAe," (OPT model)"),yAe.forEach(t),ico=i(S),Cs=n(S,"LI",{});var kk=s(Cs);Sse=n(kk,"STRONG",{});var Htt=s(Sse);dco=r(Htt,"pegasus"),Htt.forEach(t),cco=r(kk," \u2014 "),tI=n(kk,"A",{href:!0});var Utt=s(tI);fco=r(Utt,"PegasusTokenizer"),Utt.forEach(t),mco=r(kk," or "),aI=n(kk,"A",{href:!0});var Jtt=s(aI);gco=r(Jtt,"PegasusTokenizerFast"),Jtt.forEach(t),hco=r(kk," (Pegasus model)"),kk.forEach(t),pco=i(S),ih=n(S,"LI",{});var xAe=s(ih);Rse=n(xAe,"STRONG",{});var Ytt=s(Rse);_co=r(Ytt,"perceiver"),Ytt.forEach(t),uco=r(xAe," \u2014 "),nI=n(xAe,"A",{href:!0});var Ktt=s(nI);bco=r(Ktt,"PerceiverTokenizer"),Ktt.forEach(t),vco=r(xAe," (Perceiver model)"),xAe.forEach(t),Fco=i(S),dh=n(S,"LI",{});var $Ae=s(dh);Pse=n($Ae,"STRONG",{});var Ztt=s(Pse);Tco=r(Ztt,"phobert"),Ztt.forEach(t),Mco=r($Ae," \u2014 "),sI=n($Ae,"A",{href:!0});var eat=s(sI);Eco=r(eat,"PhobertTokenizer"),eat.forEach(t),Cco=r($Ae," (PhoBERT model)"),$Ae.forEach(t),wco=i(S),ch=n(S,"LI",{});var kAe=s(ch);Bse=n(kAe,"STRONG",{});var oat=s(Bse);Aco=r(oat,"plbart"),oat.forEach(t),Lco=r(kAe," \u2014 "),lI=n(kAe,"A",{href:!0});var rat=s(lI);yco=r(rat,"PLBartTokenizer"),rat.forEach(t),xco=r(kAe," (PLBart model)"),kAe.forEach(t),$co=i(S),fh=n(S,"LI",{});var SAe=s(fh);Ise=n(SAe,"STRONG",{});var tat=s(Ise);kco=r(tat,"prophetnet"),tat.forEach(t),Sco=r(SAe," \u2014 "),iI=n(SAe,"A",{href:!0});var aat=s(iI);Rco=r(aat,"ProphetNetTokenizer"),aat.forEach(t),Pco=r(SAe," (ProphetNet model)"),SAe.forEach(t),Bco=i(S),ws=n(S,"LI",{});var Sk=s(ws);Nse=n(Sk,"STRONG",{});var nat=s(Nse);Ico=r(nat,"qdqbert"),nat.forEach(t),Nco=r(Sk," \u2014 "),dI=n(Sk,"A",{href:!0});var sat=s(dI);qco=r(sat,"BertTokenizer"),sat.forEach(t),jco=r(Sk," or "),cI=n(Sk,"A",{href:!0});var lat=s(cI);Dco=r(lat,"BertTokenizerFast"),lat.forEach(t),Gco=r(Sk," (QDQBert model)"),Sk.forEach(t),Oco=i(S),mh=n(S,"LI",{});var RAe=s(mh);qse=n(RAe,"STRONG",{});var iat=s(qse);Vco=r(iat,"rag"),iat.forEach(t),Xco=r(RAe," \u2014 "),fI=n(RAe,"A",{href:!0});var dat=s(fI);zco=r(dat,"RagTokenizer"),dat.forEach(t),Wco=r(RAe," (RAG model)"),RAe.forEach(t),Qco=i(S),As=n(S,"LI",{});var Rk=s(As);jse=n(Rk,"STRONG",{});var cat=s(jse);Hco=r(cat,"realm"),cat.forEach(t),Uco=r(Rk," \u2014 "),mI=n(Rk,"A",{href:!0});var fat=s(mI);Jco=r(fat,"RealmTokenizer"),fat.forEach(t),Yco=r(Rk," or "),gI=n(Rk,"A",{href:!0});var mat=s(gI);Kco=r(mat,"RealmTokenizerFast"),mat.forEach(t),Zco=r(Rk," (REALM model)"),Rk.forEach(t),efo=i(S),Ls=n(S,"LI",{});var Pk=s(Ls);Dse=n(Pk,"STRONG",{});var gat=s(Dse);ofo=r(gat,"reformer"),gat.forEach(t),rfo=r(Pk," \u2014 "),hI=n(Pk,"A",{href:!0});var hat=s(hI);tfo=r(hat,"ReformerTokenizer"),hat.forEach(t),afo=r(Pk," or "),pI=n(Pk,"A",{href:!0});var pat=s(pI);nfo=r(pat,"ReformerTokenizerFast"),pat.forEach(t),sfo=r(Pk," (Reformer model)"),Pk.forEach(t),lfo=i(S),ys=n(S,"LI",{});var Bk=s(ys);Gse=n(Bk,"STRONG",{});var _at=s(Gse);ifo=r(_at,"rembert"),_at.forEach(t),dfo=r(Bk," \u2014 "),_I=n(Bk,"A",{href:!0});var uat=s(_I);cfo=r(uat,"RemBertTokenizer"),uat.forEach(t),ffo=r(Bk," or "),uI=n(Bk,"A",{href:!0});var bat=s(uI);mfo=r(bat,"RemBertTokenizerFast"),bat.forEach(t),gfo=r(Bk," (RemBERT model)"),Bk.forEach(t),hfo=i(S),xs=n(S,"LI",{});var Ik=s(xs);Ose=n(Ik,"STRONG",{});var vat=s(Ose);pfo=r(vat,"retribert"),vat.forEach(t),_fo=r(Ik," \u2014 "),bI=n(Ik,"A",{href:!0});var Fat=s(bI);ufo=r(Fat,"RetriBertTokenizer"),Fat.forEach(t),bfo=r(Ik," or "),vI=n(Ik,"A",{href:!0});var Tat=s(vI);vfo=r(Tat,"RetriBertTokenizerFast"),Tat.forEach(t),Ffo=r(Ik," (RetriBERT model)"),Ik.forEach(t),Tfo=i(S),$s=n(S,"LI",{});var Nk=s($s);Vse=n(Nk,"STRONG",{});var Mat=s(Vse);Mfo=r(Mat,"roberta"),Mat.forEach(t),Efo=r(Nk," \u2014 "),FI=n(Nk,"A",{href:!0});var Eat=s(FI);Cfo=r(Eat,"RobertaTokenizer"),Eat.forEach(t),wfo=r(Nk," or "),TI=n(Nk,"A",{href:!0});var Cat=s(TI);Afo=r(Cat,"RobertaTokenizerFast"),Cat.forEach(t),Lfo=r(Nk," (RoBERTa model)"),Nk.forEach(t),yfo=i(S),ks=n(S,"LI",{});var qk=s(ks);Xse=n(qk,"STRONG",{});var wat=s(Xse);xfo=r(wat,"roformer"),wat.forEach(t),$fo=r(qk," \u2014 "),MI=n(qk,"A",{href:!0});var Aat=s(MI);kfo=r(Aat,"RoFormerTokenizer"),Aat.forEach(t),Sfo=r(qk," or "),EI=n(qk,"A",{href:!0});var Lat=s(EI);Rfo=r(Lat,"RoFormerTokenizerFast"),Lat.forEach(t),Pfo=r(qk," (RoFormer model)"),qk.forEach(t),Bfo=i(S),gh=n(S,"LI",{});var PAe=s(gh);zse=n(PAe,"STRONG",{});var yat=s(zse);Ifo=r(yat,"speech_to_text"),yat.forEach(t),Nfo=r(PAe," \u2014 "),CI=n(PAe,"A",{href:!0});var xat=s(CI);qfo=r(xat,"Speech2TextTokenizer"),xat.forEach(t),jfo=r(PAe," (Speech2Text model)"),PAe.forEach(t),Dfo=i(S),hh=n(S,"LI",{});var BAe=s(hh);Wse=n(BAe,"STRONG",{});var $at=s(Wse);Gfo=r($at,"speech_to_text_2"),$at.forEach(t),Ofo=r(BAe," \u2014 "),wI=n(BAe,"A",{href:!0});var kat=s(wI);Vfo=r(kat,"Speech2Text2Tokenizer"),kat.forEach(t),Xfo=r(BAe," (Speech2Text2 model)"),BAe.forEach(t),zfo=i(S),Ss=n(S,"LI",{});var jk=s(Ss);Qse=n(jk,"STRONG",{});var Sat=s(Qse);Wfo=r(Sat,"splinter"),Sat.forEach(t),Qfo=r(jk," \u2014 "),AI=n(jk,"A",{href:!0});var Rat=s(AI);Hfo=r(Rat,"SplinterTokenizer"),Rat.forEach(t),Ufo=r(jk," or "),LI=n(jk,"A",{href:!0});var Pat=s(LI);Jfo=r(Pat,"SplinterTokenizerFast"),Pat.forEach(t),Yfo=r(jk," (Splinter model)"),jk.forEach(t),Kfo=i(S),Rs=n(S,"LI",{});var Dk=s(Rs);Hse=n(Dk,"STRONG",{});var Bat=s(Hse);Zfo=r(Bat,"squeezebert"),Bat.forEach(t),emo=r(Dk," \u2014 "),yI=n(Dk,"A",{href:!0});var Iat=s(yI);omo=r(Iat,"SqueezeBertTokenizer"),Iat.forEach(t),rmo=r(Dk," or "),xI=n(Dk,"A",{href:!0});var Nat=s(xI);tmo=r(Nat,"SqueezeBertTokenizerFast"),Nat.forEach(t),amo=r(Dk," (SqueezeBERT model)"),Dk.forEach(t),nmo=i(S),Ps=n(S,"LI",{});var Gk=s(Ps);Use=n(Gk,"STRONG",{});var qat=s(Use);smo=r(qat,"t5"),qat.forEach(t),lmo=r(Gk," \u2014 "),$I=n(Gk,"A",{href:!0});var jat=s($I);imo=r(jat,"T5Tokenizer"),jat.forEach(t),dmo=r(Gk," or "),kI=n(Gk,"A",{href:!0});var Dat=s(kI);cmo=r(Dat,"T5TokenizerFast"),Dat.forEach(t),fmo=r(Gk," (T5 model)"),Gk.forEach(t),mmo=i(S),ph=n(S,"LI",{});var IAe=s(ph);Jse=n(IAe,"STRONG",{});var Gat=s(Jse);gmo=r(Gat,"tapas"),Gat.forEach(t),hmo=r(IAe," \u2014 "),SI=n(IAe,"A",{href:!0});var Oat=s(SI);pmo=r(Oat,"TapasTokenizer"),Oat.forEach(t),_mo=r(IAe," (TAPAS model)"),IAe.forEach(t),umo=i(S),_h=n(S,"LI",{});var NAe=s(_h);Yse=n(NAe,"STRONG",{});var Vat=s(Yse);bmo=r(Vat,"tapex"),Vat.forEach(t),vmo=r(NAe," \u2014 "),RI=n(NAe,"A",{href:!0});var Xat=s(RI);Fmo=r(Xat,"TapexTokenizer"),Xat.forEach(t),Tmo=r(NAe," (TAPEX model)"),NAe.forEach(t),Mmo=i(S),uh=n(S,"LI",{});var qAe=s(uh);Kse=n(qAe,"STRONG",{});var zat=s(Kse);Emo=r(zat,"transfo-xl"),zat.forEach(t),Cmo=r(qAe," \u2014 "),PI=n(qAe,"A",{href:!0});var Wat=s(PI);wmo=r(Wat,"TransfoXLTokenizer"),Wat.forEach(t),Amo=r(qAe," (Transformer-XL model)"),qAe.forEach(t),Lmo=i(S),Bs=n(S,"LI",{});var Ok=s(Bs);Zse=n(Ok,"STRONG",{});var Qat=s(Zse);ymo=r(Qat,"vilt"),Qat.forEach(t),xmo=r(Ok," \u2014 "),BI=n(Ok,"A",{href:!0});var Hat=s(BI);$mo=r(Hat,"BertTokenizer"),Hat.forEach(t),kmo=r(Ok," or "),II=n(Ok,"A",{href:!0});var Uat=s(II);Smo=r(Uat,"BertTokenizerFast"),Uat.forEach(t),Rmo=r(Ok," (ViLT model)"),Ok.forEach(t),Pmo=i(S),Is=n(S,"LI",{});var Vk=s(Is);ele=n(Vk,"STRONG",{});var Jat=s(ele);Bmo=r(Jat,"visual_bert"),Jat.forEach(t),Imo=r(Vk," \u2014 "),NI=n(Vk,"A",{href:!0});var Yat=s(NI);Nmo=r(Yat,"BertTokenizer"),Yat.forEach(t),qmo=r(Vk," or "),qI=n(Vk,"A",{href:!0});var Kat=s(qI);jmo=r(Kat,"BertTokenizerFast"),Kat.forEach(t),Dmo=r(Vk," (VisualBERT model)"),Vk.forEach(t),Gmo=i(S),bh=n(S,"LI",{});var jAe=s(bh);ole=n(jAe,"STRONG",{});var Zat=s(ole);Omo=r(Zat,"wav2vec2"),Zat.forEach(t),Vmo=r(jAe," \u2014 "),jI=n(jAe,"A",{href:!0});var ent=s(jI);Xmo=r(ent,"Wav2Vec2CTCTokenizer"),ent.forEach(t),zmo=r(jAe," (Wav2Vec2 model)"),jAe.forEach(t),Wmo=i(S),vh=n(S,"LI",{});var DAe=s(vh);rle=n(DAe,"STRONG",{});var ont=s(rle);Qmo=r(ont,"wav2vec2-conformer"),ont.forEach(t),Hmo=r(DAe," \u2014 "),DI=n(DAe,"A",{href:!0});var rnt=s(DI);Umo=r(rnt,"Wav2Vec2CTCTokenizer"),rnt.forEach(t),Jmo=r(DAe," (Wav2Vec2-Conformer model)"),DAe.forEach(t),Ymo=i(S),Fh=n(S,"LI",{});var GAe=s(Fh);tle=n(GAe,"STRONG",{});var tnt=s(tle);Kmo=r(tnt,"wav2vec2_phoneme"),tnt.forEach(t),Zmo=r(GAe," \u2014 "),GI=n(GAe,"A",{href:!0});var ant=s(GI);ego=r(ant,"Wav2Vec2PhonemeCTCTokenizer"),ant.forEach(t),ogo=r(GAe," (Wav2Vec2Phoneme model)"),GAe.forEach(t),rgo=i(S),Ns=n(S,"LI",{});var Xk=s(Ns);ale=n(Xk,"STRONG",{});var nnt=s(ale);tgo=r(nnt,"xglm"),nnt.forEach(t),ago=r(Xk," \u2014 "),OI=n(Xk,"A",{href:!0});var snt=s(OI);ngo=r(snt,"XGLMTokenizer"),snt.forEach(t),sgo=r(Xk," or "),VI=n(Xk,"A",{href:!0});var lnt=s(VI);lgo=r(lnt,"XGLMTokenizerFast"),lnt.forEach(t),igo=r(Xk," (XGLM model)"),Xk.forEach(t),dgo=i(S),Th=n(S,"LI",{});var OAe=s(Th);nle=n(OAe,"STRONG",{});var int=s(nle);cgo=r(int,"xlm"),int.forEach(t),fgo=r(OAe," \u2014 "),XI=n(OAe,"A",{href:!0});var dnt=s(XI);mgo=r(dnt,"XLMTokenizer"),dnt.forEach(t),ggo=r(OAe," (XLM model)"),OAe.forEach(t),hgo=i(S),Mh=n(S,"LI",{});var VAe=s(Mh);sle=n(VAe,"STRONG",{});var cnt=s(sle);pgo=r(cnt,"xlm-prophetnet"),cnt.forEach(t),_go=r(VAe," \u2014 "),zI=n(VAe,"A",{href:!0});var fnt=s(zI);ugo=r(fnt,"XLMProphetNetTokenizer"),fnt.forEach(t),bgo=r(VAe," (XLM-ProphetNet model)"),VAe.forEach(t),vgo=i(S),qs=n(S,"LI",{});var zk=s(qs);lle=n(zk,"STRONG",{});var mnt=s(lle);Fgo=r(mnt,"xlm-roberta"),mnt.forEach(t),Tgo=r(zk," \u2014 "),WI=n(zk,"A",{href:!0});var gnt=s(WI);Mgo=r(gnt,"XLMRobertaTokenizer"),gnt.forEach(t),Ego=r(zk," or "),QI=n(zk,"A",{href:!0});var hnt=s(QI);Cgo=r(hnt,"XLMRobertaTokenizerFast"),hnt.forEach(t),wgo=r(zk," (XLM-RoBERTa model)"),zk.forEach(t),Ago=i(S),js=n(S,"LI",{});var Wk=s(js);ile=n(Wk,"STRONG",{});var pnt=s(ile);Lgo=r(pnt,"xlm-roberta-xl"),pnt.forEach(t),ygo=r(Wk," \u2014 "),HI=n(Wk,"A",{href:!0});var _nt=s(HI);xgo=r(_nt,"RobertaTokenizer"),_nt.forEach(t),$go=r(Wk," or "),UI=n(Wk,"A",{href:!0});var unt=s(UI);kgo=r(unt,"RobertaTokenizerFast"),unt.forEach(t),Sgo=r(Wk," (XLM-RoBERTa-XL model)"),Wk.forEach(t),Rgo=i(S),Ds=n(S,"LI",{});var Qk=s(Ds);dle=n(Qk,"STRONG",{});var bnt=s(dle);Pgo=r(bnt,"xlnet"),bnt.forEach(t),Bgo=r(Qk," \u2014 "),JI=n(Qk,"A",{href:!0});var vnt=s(JI);Igo=r(vnt,"XLNetTokenizer"),vnt.forEach(t),Ngo=r(Qk," or "),YI=n(Qk,"A",{href:!0});var Fnt=s(YI);qgo=r(Fnt,"XLNetTokenizerFast"),Fnt.forEach(t),jgo=r(Qk," (XLNet model)"),Qk.forEach(t),Dgo=i(S),Gs=n(S,"LI",{});var Hk=s(Gs);cle=n(Hk,"STRONG",{});var Tnt=s(cle);Ggo=r(Tnt,"yoso"),Tnt.forEach(t),Ogo=r(Hk," \u2014 "),KI=n(Hk,"A",{href:!0});var Mnt=s(KI);Vgo=r(Mnt,"AlbertTokenizer"),Mnt.forEach(t),Xgo=r(Hk," or "),ZI=n(Hk,"A",{href:!0});var Ent=s(ZI);zgo=r(Ent,"AlbertTokenizerFast"),Ent.forEach(t),Wgo=r(Hk," (YOSO model)"),Hk.forEach(t),S.forEach(t),Qgo=i(Qs),T(Eh.$$.fragment,Qs),Qs.forEach(t),Hgo=i(Ws),Ch=n(Ws,"DIV",{class:!0});var IVe=s(Ch);T(DA.$$.fragment,IVe),Ugo=i(IVe),fle=n(IVe,"P",{});var Cnt=s(fle);Jgo=r(Cnt,"Register a new tokenizer in this mapping."),Cnt.forEach(t),IVe.forEach(t),Ws.forEach(t),BGe=i(f),Ri=n(f,"H2",{class:!0});var NVe=s(Ri);wh=n(NVe,"A",{id:!0,class:!0,href:!0});var wnt=s(wh);mle=n(wnt,"SPAN",{});var Ant=s(mle);T(GA.$$.fragment,Ant),Ant.forEach(t),wnt.forEach(t),Ygo=i(NVe),gle=n(NVe,"SPAN",{});var Lnt=s(gle);Kgo=r(Lnt,"AutoFeatureExtractor"),Lnt.forEach(t),NVe.forEach(t),IGe=i(f),Lo=n(f,"DIV",{class:!0});var Hs=s(Lo);T(OA.$$.fragment,Hs),Zgo=i(Hs),VA=n(Hs,"P",{});var qVe=s(VA);eho=r(qVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eN=n(qVe,"A",{href:!0});var ynt=s(eN);oho=r(ynt,"AutoFeatureExtractor.from_pretrained()"),ynt.forEach(t),rho=r(qVe," class method."),qVe.forEach(t),tho=i(Hs),XA=n(Hs,"P",{});var jVe=s(XA);aho=r(jVe,"This class cannot be instantiated directly using "),hle=n(jVe,"CODE",{});var xnt=s(hle);nho=r(xnt,"__init__()"),xnt.forEach(t),sho=r(jVe," (throws an error)."),jVe.forEach(t),lho=i(Hs),He=n(Hs,"DIV",{class:!0});var ta=s(He);T(zA.$$.fragment,ta),iho=i(ta),ple=n(ta,"P",{});var $nt=s(ple);dho=r($nt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$nt.forEach(t),cho=i(ta),Sa=n(ta,"P",{});var y0=s(Sa);fho=r(y0,"The feature extractor class to instantiate is selected based on the "),_le=n(y0,"CODE",{});var knt=s(_le);mho=r(knt,"model_type"),knt.forEach(t),gho=r(y0,` property of the config object
(either passed as an argument or loaded from `),ule=n(y0,"CODE",{});var Snt=s(ule);hho=r(Snt,"pretrained_model_name_or_path"),Snt.forEach(t),pho=r(y0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ble=n(y0,"CODE",{});var Rnt=s(ble);_ho=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),uho=r(y0,":"),y0.forEach(t),bho=i(ta),Y=n(ta,"UL",{});var K=s(Y);Ah=n(K,"LI",{});var XAe=s(Ah);vle=n(XAe,"STRONG",{});var Pnt=s(vle);vho=r(Pnt,"beit"),Pnt.forEach(t),Fho=r(XAe," \u2014 "),oN=n(XAe,"A",{href:!0});var Bnt=s(oN);Tho=r(Bnt,"BeitFeatureExtractor"),Bnt.forEach(t),Mho=r(XAe," (BEiT model)"),XAe.forEach(t),Eho=i(K),Lh=n(K,"LI",{});var zAe=s(Lh);Fle=n(zAe,"STRONG",{});var Int=s(Fle);Cho=r(Int,"clip"),Int.forEach(t),who=r(zAe," \u2014 "),rN=n(zAe,"A",{href:!0});var Nnt=s(rN);Aho=r(Nnt,"CLIPFeatureExtractor"),Nnt.forEach(t),Lho=r(zAe," (CLIP model)"),zAe.forEach(t),yho=i(K),yh=n(K,"LI",{});var WAe=s(yh);Tle=n(WAe,"STRONG",{});var qnt=s(Tle);xho=r(qnt,"convnext"),qnt.forEach(t),$ho=r(WAe," \u2014 "),tN=n(WAe,"A",{href:!0});var jnt=s(tN);kho=r(jnt,"ConvNextFeatureExtractor"),jnt.forEach(t),Sho=r(WAe," (ConvNeXT model)"),WAe.forEach(t),Rho=i(K),xh=n(K,"LI",{});var QAe=s(xh);Mle=n(QAe,"STRONG",{});var Dnt=s(Mle);Pho=r(Dnt,"cvt"),Dnt.forEach(t),Bho=r(QAe," \u2014 "),aN=n(QAe,"A",{href:!0});var Gnt=s(aN);Iho=r(Gnt,"ConvNextFeatureExtractor"),Gnt.forEach(t),Nho=r(QAe," (CvT model)"),QAe.forEach(t),qho=i(K),$h=n(K,"LI",{});var HAe=s($h);Ele=n(HAe,"STRONG",{});var Ont=s(Ele);jho=r(Ont,"data2vec-audio"),Ont.forEach(t),Dho=r(HAe," \u2014 "),nN=n(HAe,"A",{href:!0});var Vnt=s(nN);Gho=r(Vnt,"Wav2Vec2FeatureExtractor"),Vnt.forEach(t),Oho=r(HAe," (Data2VecAudio model)"),HAe.forEach(t),Vho=i(K),kh=n(K,"LI",{});var UAe=s(kh);Cle=n(UAe,"STRONG",{});var Xnt=s(Cle);Xho=r(Xnt,"data2vec-vision"),Xnt.forEach(t),zho=r(UAe," \u2014 "),sN=n(UAe,"A",{href:!0});var znt=s(sN);Who=r(znt,"BeitFeatureExtractor"),znt.forEach(t),Qho=r(UAe," (Data2VecVision model)"),UAe.forEach(t),Hho=i(K),Sh=n(K,"LI",{});var JAe=s(Sh);wle=n(JAe,"STRONG",{});var Wnt=s(wle);Uho=r(Wnt,"deit"),Wnt.forEach(t),Jho=r(JAe," \u2014 "),lN=n(JAe,"A",{href:!0});var Qnt=s(lN);Yho=r(Qnt,"DeiTFeatureExtractor"),Qnt.forEach(t),Kho=r(JAe," (DeiT model)"),JAe.forEach(t),Zho=i(K),Rh=n(K,"LI",{});var YAe=s(Rh);Ale=n(YAe,"STRONG",{});var Hnt=s(Ale);epo=r(Hnt,"detr"),Hnt.forEach(t),opo=r(YAe," \u2014 "),iN=n(YAe,"A",{href:!0});var Unt=s(iN);rpo=r(Unt,"DetrFeatureExtractor"),Unt.forEach(t),tpo=r(YAe," (DETR model)"),YAe.forEach(t),apo=i(K),Ph=n(K,"LI",{});var KAe=s(Ph);Lle=n(KAe,"STRONG",{});var Jnt=s(Lle);npo=r(Jnt,"dpt"),Jnt.forEach(t),spo=r(KAe," \u2014 "),dN=n(KAe,"A",{href:!0});var Ynt=s(dN);lpo=r(Ynt,"DPTFeatureExtractor"),Ynt.forEach(t),ipo=r(KAe," (DPT model)"),KAe.forEach(t),dpo=i(K),Bh=n(K,"LI",{});var ZAe=s(Bh);yle=n(ZAe,"STRONG",{});var Knt=s(yle);cpo=r(Knt,"flava"),Knt.forEach(t),fpo=r(ZAe," \u2014 "),cN=n(ZAe,"A",{href:!0});var Znt=s(cN);mpo=r(Znt,"FlavaFeatureExtractor"),Znt.forEach(t),gpo=r(ZAe," (FLAVA model)"),ZAe.forEach(t),hpo=i(K),Ih=n(K,"LI",{});var eLe=s(Ih);xle=n(eLe,"STRONG",{});var est=s(xle);ppo=r(est,"glpn"),est.forEach(t),_po=r(eLe," \u2014 "),fN=n(eLe,"A",{href:!0});var ost=s(fN);upo=r(ost,"GLPNFeatureExtractor"),ost.forEach(t),bpo=r(eLe," (GLPN model)"),eLe.forEach(t),vpo=i(K),Nh=n(K,"LI",{});var oLe=s(Nh);$le=n(oLe,"STRONG",{});var rst=s($le);Fpo=r(rst,"hubert"),rst.forEach(t),Tpo=r(oLe," \u2014 "),mN=n(oLe,"A",{href:!0});var tst=s(mN);Mpo=r(tst,"Wav2Vec2FeatureExtractor"),tst.forEach(t),Epo=r(oLe," (Hubert model)"),oLe.forEach(t),Cpo=i(K),qh=n(K,"LI",{});var rLe=s(qh);kle=n(rLe,"STRONG",{});var ast=s(kle);wpo=r(ast,"imagegpt"),ast.forEach(t),Apo=r(rLe," \u2014 "),gN=n(rLe,"A",{href:!0});var nst=s(gN);Lpo=r(nst,"ImageGPTFeatureExtractor"),nst.forEach(t),ypo=r(rLe," (ImageGPT model)"),rLe.forEach(t),xpo=i(K),jh=n(K,"LI",{});var tLe=s(jh);Sle=n(tLe,"STRONG",{});var sst=s(Sle);$po=r(sst,"layoutlmv2"),sst.forEach(t),kpo=r(tLe," \u2014 "),hN=n(tLe,"A",{href:!0});var lst=s(hN);Spo=r(lst,"LayoutLMv2FeatureExtractor"),lst.forEach(t),Rpo=r(tLe," (LayoutLMv2 model)"),tLe.forEach(t),Ppo=i(K),Dh=n(K,"LI",{});var aLe=s(Dh);Rle=n(aLe,"STRONG",{});var ist=s(Rle);Bpo=r(ist,"layoutlmv3"),ist.forEach(t),Ipo=r(aLe," \u2014 "),pN=n(aLe,"A",{href:!0});var dst=s(pN);Npo=r(dst,"LayoutLMv3FeatureExtractor"),dst.forEach(t),qpo=r(aLe," (LayoutLMv3 model)"),aLe.forEach(t),jpo=i(K),Gh=n(K,"LI",{});var nLe=s(Gh);Ple=n(nLe,"STRONG",{});var cst=s(Ple);Dpo=r(cst,"levit"),cst.forEach(t),Gpo=r(nLe," \u2014 "),_N=n(nLe,"A",{href:!0});var fst=s(_N);Opo=r(fst,"LevitFeatureExtractor"),fst.forEach(t),Vpo=r(nLe," (LeViT model)"),nLe.forEach(t),Xpo=i(K),Oh=n(K,"LI",{});var sLe=s(Oh);Ble=n(sLe,"STRONG",{});var mst=s(Ble);zpo=r(mst,"maskformer"),mst.forEach(t),Wpo=r(sLe," \u2014 "),uN=n(sLe,"A",{href:!0});var gst=s(uN);Qpo=r(gst,"MaskFormerFeatureExtractor"),gst.forEach(t),Hpo=r(sLe," (MaskFormer model)"),sLe.forEach(t),Upo=i(K),Vh=n(K,"LI",{});var lLe=s(Vh);Ile=n(lLe,"STRONG",{});var hst=s(Ile);Jpo=r(hst,"mctct"),hst.forEach(t),Ypo=r(lLe," \u2014 "),bN=n(lLe,"A",{href:!0});var pst=s(bN);Kpo=r(pst,"MCTCTFeatureExtractor"),pst.forEach(t),Zpo=r(lLe," (M-CTC-T model)"),lLe.forEach(t),e_o=i(K),Xh=n(K,"LI",{});var iLe=s(Xh);Nle=n(iLe,"STRONG",{});var _st=s(Nle);o_o=r(_st,"perceiver"),_st.forEach(t),r_o=r(iLe," \u2014 "),vN=n(iLe,"A",{href:!0});var ust=s(vN);t_o=r(ust,"PerceiverFeatureExtractor"),ust.forEach(t),a_o=r(iLe," (Perceiver model)"),iLe.forEach(t),n_o=i(K),zh=n(K,"LI",{});var dLe=s(zh);qle=n(dLe,"STRONG",{});var bst=s(qle);s_o=r(bst,"poolformer"),bst.forEach(t),l_o=r(dLe," \u2014 "),FN=n(dLe,"A",{href:!0});var vst=s(FN);i_o=r(vst,"PoolFormerFeatureExtractor"),vst.forEach(t),d_o=r(dLe," (PoolFormer model)"),dLe.forEach(t),c_o=i(K),Wh=n(K,"LI",{});var cLe=s(Wh);jle=n(cLe,"STRONG",{});var Fst=s(jle);f_o=r(Fst,"regnet"),Fst.forEach(t),m_o=r(cLe," \u2014 "),TN=n(cLe,"A",{href:!0});var Tst=s(TN);g_o=r(Tst,"ConvNextFeatureExtractor"),Tst.forEach(t),h_o=r(cLe," (RegNet model)"),cLe.forEach(t),p_o=i(K),Qh=n(K,"LI",{});var fLe=s(Qh);Dle=n(fLe,"STRONG",{});var Mst=s(Dle);__o=r(Mst,"resnet"),Mst.forEach(t),u_o=r(fLe," \u2014 "),MN=n(fLe,"A",{href:!0});var Est=s(MN);b_o=r(Est,"ConvNextFeatureExtractor"),Est.forEach(t),v_o=r(fLe," (ResNet model)"),fLe.forEach(t),F_o=i(K),Hh=n(K,"LI",{});var mLe=s(Hh);Gle=n(mLe,"STRONG",{});var Cst=s(Gle);T_o=r(Cst,"segformer"),Cst.forEach(t),M_o=r(mLe," \u2014 "),EN=n(mLe,"A",{href:!0});var wst=s(EN);E_o=r(wst,"SegformerFeatureExtractor"),wst.forEach(t),C_o=r(mLe," (SegFormer model)"),mLe.forEach(t),w_o=i(K),Uh=n(K,"LI",{});var gLe=s(Uh);Ole=n(gLe,"STRONG",{});var Ast=s(Ole);A_o=r(Ast,"speech_to_text"),Ast.forEach(t),L_o=r(gLe," \u2014 "),CN=n(gLe,"A",{href:!0});var Lst=s(CN);y_o=r(Lst,"Speech2TextFeatureExtractor"),Lst.forEach(t),x_o=r(gLe," (Speech2Text model)"),gLe.forEach(t),$_o=i(K),Jh=n(K,"LI",{});var hLe=s(Jh);Vle=n(hLe,"STRONG",{});var yst=s(Vle);k_o=r(yst,"swin"),yst.forEach(t),S_o=r(hLe," \u2014 "),wN=n(hLe,"A",{href:!0});var xst=s(wN);R_o=r(xst,"ViTFeatureExtractor"),xst.forEach(t),P_o=r(hLe," (Swin Transformer model)"),hLe.forEach(t),B_o=i(K),Yh=n(K,"LI",{});var pLe=s(Yh);Xle=n(pLe,"STRONG",{});var $st=s(Xle);I_o=r($st,"swinv2"),$st.forEach(t),N_o=r(pLe," \u2014 "),AN=n(pLe,"A",{href:!0});var kst=s(AN);q_o=r(kst,"ViTFeatureExtractor"),kst.forEach(t),j_o=r(pLe," (Swin Transformer V2 model)"),pLe.forEach(t),D_o=i(K),Kh=n(K,"LI",{});var _Le=s(Kh);zle=n(_Le,"STRONG",{});var Sst=s(zle);G_o=r(Sst,"van"),Sst.forEach(t),O_o=r(_Le," \u2014 "),LN=n(_Le,"A",{href:!0});var Rst=s(LN);V_o=r(Rst,"ConvNextFeatureExtractor"),Rst.forEach(t),X_o=r(_Le," (VAN model)"),_Le.forEach(t),z_o=i(K),Zh=n(K,"LI",{});var uLe=s(Zh);Wle=n(uLe,"STRONG",{});var Pst=s(Wle);W_o=r(Pst,"vilt"),Pst.forEach(t),Q_o=r(uLe," \u2014 "),yN=n(uLe,"A",{href:!0});var Bst=s(yN);H_o=r(Bst,"ViltFeatureExtractor"),Bst.forEach(t),U_o=r(uLe," (ViLT model)"),uLe.forEach(t),J_o=i(K),ep=n(K,"LI",{});var bLe=s(ep);Qle=n(bLe,"STRONG",{});var Ist=s(Qle);Y_o=r(Ist,"vit"),Ist.forEach(t),K_o=r(bLe," \u2014 "),xN=n(bLe,"A",{href:!0});var Nst=s(xN);Z_o=r(Nst,"ViTFeatureExtractor"),Nst.forEach(t),euo=r(bLe," (ViT model)"),bLe.forEach(t),ouo=i(K),op=n(K,"LI",{});var vLe=s(op);Hle=n(vLe,"STRONG",{});var qst=s(Hle);ruo=r(qst,"vit_mae"),qst.forEach(t),tuo=r(vLe," \u2014 "),$N=n(vLe,"A",{href:!0});var jst=s($N);auo=r(jst,"ViTFeatureExtractor"),jst.forEach(t),nuo=r(vLe," (ViTMAE model)"),vLe.forEach(t),suo=i(K),rp=n(K,"LI",{});var FLe=s(rp);Ule=n(FLe,"STRONG",{});var Dst=s(Ule);luo=r(Dst,"wav2vec2"),Dst.forEach(t),iuo=r(FLe," \u2014 "),kN=n(FLe,"A",{href:!0});var Gst=s(kN);duo=r(Gst,"Wav2Vec2FeatureExtractor"),Gst.forEach(t),cuo=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),fuo=i(K),tp=n(K,"LI",{});var TLe=s(tp);Jle=n(TLe,"STRONG",{});var Ost=s(Jle);muo=r(Ost,"wav2vec2-conformer"),Ost.forEach(t),guo=r(TLe," \u2014 "),SN=n(TLe,"A",{href:!0});var Vst=s(SN);huo=r(Vst,"Wav2Vec2FeatureExtractor"),Vst.forEach(t),puo=r(TLe," (Wav2Vec2-Conformer model)"),TLe.forEach(t),_uo=i(K),ap=n(K,"LI",{});var MLe=s(ap);Yle=n(MLe,"STRONG",{});var Xst=s(Yle);uuo=r(Xst,"yolos"),Xst.forEach(t),buo=r(MLe," \u2014 "),RN=n(MLe,"A",{href:!0});var zst=s(RN);vuo=r(zst,"YolosFeatureExtractor"),zst.forEach(t),Fuo=r(MLe," (YOLOS model)"),MLe.forEach(t),K.forEach(t),Tuo=i(ta),T(np.$$.fragment,ta),Muo=i(ta),T(sp.$$.fragment,ta),ta.forEach(t),Euo=i(Hs),lp=n(Hs,"DIV",{class:!0});var DVe=s(lp);T(WA.$$.fragment,DVe),Cuo=i(DVe),Kle=n(DVe,"P",{});var Wst=s(Kle);wuo=r(Wst,"Register a new feature extractor for this class."),Wst.forEach(t),DVe.forEach(t),Hs.forEach(t),NGe=i(f),Pi=n(f,"H2",{class:!0});var GVe=s(Pi);ip=n(GVe,"A",{id:!0,class:!0,href:!0});var Qst=s(ip);Zle=n(Qst,"SPAN",{});var Hst=s(Zle);T(QA.$$.fragment,Hst),Hst.forEach(t),Qst.forEach(t),Auo=i(GVe),eie=n(GVe,"SPAN",{});var Ust=s(eie);Luo=r(Ust,"AutoProcessor"),Ust.forEach(t),GVe.forEach(t),qGe=i(f),yo=n(f,"DIV",{class:!0});var Us=s(yo);T(HA.$$.fragment,Us),yuo=i(Us),UA=n(Us,"P",{});var OVe=s(UA);xuo=r(OVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PN=n(OVe,"A",{href:!0});var Jst=s(PN);$uo=r(Jst,"AutoProcessor.from_pretrained()"),Jst.forEach(t),kuo=r(OVe," class method."),OVe.forEach(t),Suo=i(Us),JA=n(Us,"P",{});var VVe=s(JA);Ruo=r(VVe,"This class cannot be instantiated directly using "),oie=n(VVe,"CODE",{});var Yst=s(oie);Puo=r(Yst,"__init__()"),Yst.forEach(t),Buo=r(VVe," (throws an error)."),VVe.forEach(t),Iuo=i(Us),Ue=n(Us,"DIV",{class:!0});var aa=s(Ue);T(YA.$$.fragment,aa),Nuo=i(aa),rie=n(aa,"P",{});var Kst=s(rie);quo=r(Kst,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Kst.forEach(t),juo=i(aa),Bi=n(aa,"P",{});var foe=s(Bi);Duo=r(foe,"The processor class to instantiate is selected based on the "),tie=n(foe,"CODE",{});var Zst=s(tie);Guo=r(Zst,"model_type"),Zst.forEach(t),Ouo=r(foe,` property of the config object (either
passed as an argument or loaded from `),aie=n(foe,"CODE",{});var elt=s(aie);Vuo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),Xuo=r(foe," if possible):"),foe.forEach(t),zuo=i(aa),he=n(aa,"UL",{});var be=s(he);dp=n(be,"LI",{});var ELe=s(dp);nie=n(ELe,"STRONG",{});var olt=s(nie);Wuo=r(olt,"clip"),olt.forEach(t),Quo=r(ELe," \u2014 "),BN=n(ELe,"A",{href:!0});var rlt=s(BN);Huo=r(rlt,"CLIPProcessor"),rlt.forEach(t),Uuo=r(ELe," (CLIP model)"),ELe.forEach(t),Juo=i(be),cp=n(be,"LI",{});var CLe=s(cp);sie=n(CLe,"STRONG",{});var tlt=s(sie);Yuo=r(tlt,"flava"),tlt.forEach(t),Kuo=r(CLe," \u2014 "),lie=n(CLe,"CODE",{});var alt=s(lie);Zuo=r(alt,"FLAVAProcessor"),alt.forEach(t),e1o=r(CLe," (FLAVA model)"),CLe.forEach(t),o1o=i(be),fp=n(be,"LI",{});var wLe=s(fp);iie=n(wLe,"STRONG",{});var nlt=s(iie);r1o=r(nlt,"layoutlmv2"),nlt.forEach(t),t1o=r(wLe," \u2014 "),IN=n(wLe,"A",{href:!0});var slt=s(IN);a1o=r(slt,"LayoutLMv2Processor"),slt.forEach(t),n1o=r(wLe," (LayoutLMv2 model)"),wLe.forEach(t),s1o=i(be),mp=n(be,"LI",{});var ALe=s(mp);die=n(ALe,"STRONG",{});var llt=s(die);l1o=r(llt,"layoutlmv3"),llt.forEach(t),i1o=r(ALe," \u2014 "),NN=n(ALe,"A",{href:!0});var ilt=s(NN);d1o=r(ilt,"LayoutLMv3Processor"),ilt.forEach(t),c1o=r(ALe," (LayoutLMv3 model)"),ALe.forEach(t),f1o=i(be),gp=n(be,"LI",{});var LLe=s(gp);cie=n(LLe,"STRONG",{});var dlt=s(cie);m1o=r(dlt,"layoutxlm"),dlt.forEach(t),g1o=r(LLe," \u2014 "),qN=n(LLe,"A",{href:!0});var clt=s(qN);h1o=r(clt,"LayoutXLMProcessor"),clt.forEach(t),p1o=r(LLe," (LayoutXLM model)"),LLe.forEach(t),_1o=i(be),hp=n(be,"LI",{});var yLe=s(hp);fie=n(yLe,"STRONG",{});var flt=s(fie);u1o=r(flt,"sew"),flt.forEach(t),b1o=r(yLe," \u2014 "),jN=n(yLe,"A",{href:!0});var mlt=s(jN);v1o=r(mlt,"Wav2Vec2Processor"),mlt.forEach(t),F1o=r(yLe," (SEW model)"),yLe.forEach(t),T1o=i(be),pp=n(be,"LI",{});var xLe=s(pp);mie=n(xLe,"STRONG",{});var glt=s(mie);M1o=r(glt,"sew-d"),glt.forEach(t),E1o=r(xLe," \u2014 "),DN=n(xLe,"A",{href:!0});var hlt=s(DN);C1o=r(hlt,"Wav2Vec2Processor"),hlt.forEach(t),w1o=r(xLe," (SEW-D model)"),xLe.forEach(t),A1o=i(be),_p=n(be,"LI",{});var $Le=s(_p);gie=n($Le,"STRONG",{});var plt=s(gie);L1o=r(plt,"speech_to_text"),plt.forEach(t),y1o=r($Le," \u2014 "),GN=n($Le,"A",{href:!0});var _lt=s(GN);x1o=r(_lt,"Speech2TextProcessor"),_lt.forEach(t),$1o=r($Le," (Speech2Text model)"),$Le.forEach(t),k1o=i(be),up=n(be,"LI",{});var kLe=s(up);hie=n(kLe,"STRONG",{});var ult=s(hie);S1o=r(ult,"speech_to_text_2"),ult.forEach(t),R1o=r(kLe," \u2014 "),ON=n(kLe,"A",{href:!0});var blt=s(ON);P1o=r(blt,"Speech2Text2Processor"),blt.forEach(t),B1o=r(kLe," (Speech2Text2 model)"),kLe.forEach(t),I1o=i(be),bp=n(be,"LI",{});var SLe=s(bp);pie=n(SLe,"STRONG",{});var vlt=s(pie);N1o=r(vlt,"trocr"),vlt.forEach(t),q1o=r(SLe," \u2014 "),VN=n(SLe,"A",{href:!0});var Flt=s(VN);j1o=r(Flt,"TrOCRProcessor"),Flt.forEach(t),D1o=r(SLe," (TrOCR model)"),SLe.forEach(t),G1o=i(be),vp=n(be,"LI",{});var RLe=s(vp);_ie=n(RLe,"STRONG",{});var Tlt=s(_ie);O1o=r(Tlt,"unispeech"),Tlt.forEach(t),V1o=r(RLe," \u2014 "),XN=n(RLe,"A",{href:!0});var Mlt=s(XN);X1o=r(Mlt,"Wav2Vec2Processor"),Mlt.forEach(t),z1o=r(RLe," (UniSpeech model)"),RLe.forEach(t),W1o=i(be),Fp=n(be,"LI",{});var PLe=s(Fp);uie=n(PLe,"STRONG",{});var Elt=s(uie);Q1o=r(Elt,"unispeech-sat"),Elt.forEach(t),H1o=r(PLe," \u2014 "),zN=n(PLe,"A",{href:!0});var Clt=s(zN);U1o=r(Clt,"Wav2Vec2Processor"),Clt.forEach(t),J1o=r(PLe," (UniSpeechSat model)"),PLe.forEach(t),Y1o=i(be),Tp=n(be,"LI",{});var BLe=s(Tp);bie=n(BLe,"STRONG",{});var wlt=s(bie);K1o=r(wlt,"vilt"),wlt.forEach(t),Z1o=r(BLe," \u2014 "),WN=n(BLe,"A",{href:!0});var Alt=s(WN);e2o=r(Alt,"ViltProcessor"),Alt.forEach(t),o2o=r(BLe," (ViLT model)"),BLe.forEach(t),r2o=i(be),Mp=n(be,"LI",{});var ILe=s(Mp);vie=n(ILe,"STRONG",{});var Llt=s(vie);t2o=r(Llt,"vision-text-dual-encoder"),Llt.forEach(t),a2o=r(ILe," \u2014 "),QN=n(ILe,"A",{href:!0});var ylt=s(QN);n2o=r(ylt,"VisionTextDualEncoderProcessor"),ylt.forEach(t),s2o=r(ILe," (VisionTextDualEncoder model)"),ILe.forEach(t),l2o=i(be),Ep=n(be,"LI",{});var NLe=s(Ep);Fie=n(NLe,"STRONG",{});var xlt=s(Fie);i2o=r(xlt,"wav2vec2"),xlt.forEach(t),d2o=r(NLe," \u2014 "),HN=n(NLe,"A",{href:!0});var $lt=s(HN);c2o=r($lt,"Wav2Vec2Processor"),$lt.forEach(t),f2o=r(NLe," (Wav2Vec2 model)"),NLe.forEach(t),m2o=i(be),Cp=n(be,"LI",{});var qLe=s(Cp);Tie=n(qLe,"STRONG",{});var klt=s(Tie);g2o=r(klt,"wav2vec2-conformer"),klt.forEach(t),h2o=r(qLe," \u2014 "),UN=n(qLe,"A",{href:!0});var Slt=s(UN);p2o=r(Slt,"Wav2Vec2Processor"),Slt.forEach(t),_2o=r(qLe," (Wav2Vec2-Conformer model)"),qLe.forEach(t),u2o=i(be),wp=n(be,"LI",{});var jLe=s(wp);Mie=n(jLe,"STRONG",{});var Rlt=s(Mie);b2o=r(Rlt,"wavlm"),Rlt.forEach(t),v2o=r(jLe," \u2014 "),JN=n(jLe,"A",{href:!0});var Plt=s(JN);F2o=r(Plt,"Wav2Vec2Processor"),Plt.forEach(t),T2o=r(jLe," (WavLM model)"),jLe.forEach(t),be.forEach(t),M2o=i(aa),T(Ap.$$.fragment,aa),E2o=i(aa),T(Lp.$$.fragment,aa),aa.forEach(t),C2o=i(Us),yp=n(Us,"DIV",{class:!0});var XVe=s(yp);T(KA.$$.fragment,XVe),w2o=i(XVe),Eie=n(XVe,"P",{});var Blt=s(Eie);A2o=r(Blt,"Register a new processor for this class."),Blt.forEach(t),XVe.forEach(t),Us.forEach(t),jGe=i(f),Ii=n(f,"H2",{class:!0});var zVe=s(Ii);xp=n(zVe,"A",{id:!0,class:!0,href:!0});var Ilt=s(xp);Cie=n(Ilt,"SPAN",{});var Nlt=s(Cie);T(ZA.$$.fragment,Nlt),Nlt.forEach(t),Ilt.forEach(t),L2o=i(zVe),wie=n(zVe,"SPAN",{});var qlt=s(wie);y2o=r(qlt,"AutoModel"),qlt.forEach(t),zVe.forEach(t),DGe=i(f),xo=n(f,"DIV",{class:!0});var Js=s(xo);T(eL.$$.fragment,Js),x2o=i(Js),Ni=n(Js,"P",{});var moe=s(Ni);$2o=r(moe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YN=n(moe,"A",{href:!0});var jlt=s(YN);k2o=r(jlt,"from_pretrained()"),jlt.forEach(t),S2o=r(moe," class method or the "),KN=n(moe,"A",{href:!0});var Dlt=s(KN);R2o=r(Dlt,"from_config()"),Dlt.forEach(t),P2o=r(moe,` class
method.`),moe.forEach(t),B2o=i(Js),oL=n(Js,"P",{});var WVe=s(oL);I2o=r(WVe,"This class cannot be instantiated directly using "),Aie=n(WVe,"CODE",{});var Glt=s(Aie);N2o=r(Glt,"__init__()"),Glt.forEach(t),q2o=r(WVe," (throws an error)."),WVe.forEach(t),j2o=i(Js),st=n(Js,"DIV",{class:!0});var x0=s(st);T(rL.$$.fragment,x0),D2o=i(x0),Lie=n(x0,"P",{});var Olt=s(Lie);G2o=r(Olt,"Instantiates one of the base model classes of the library from a configuration."),Olt.forEach(t),O2o=i(x0),qi=n(x0,"P",{});var goe=s(qi);V2o=r(goe,`Note:
Loading a model from its configuration file does `),yie=n(goe,"STRONG",{});var Vlt=s(yie);X2o=r(Vlt,"not"),Vlt.forEach(t),z2o=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZN=n(goe,"A",{href:!0});var Xlt=s(ZN);W2o=r(Xlt,"from_pretrained()"),Xlt.forEach(t),Q2o=r(goe," to load the model weights."),goe.forEach(t),H2o=i(x0),T($p.$$.fragment,x0),x0.forEach(t),U2o=i(Js),Je=n(Js,"DIV",{class:!0});var na=s(Je);T(tL.$$.fragment,na),J2o=i(na),xie=n(na,"P",{});var zlt=s(xie);Y2o=r(zlt,"Instantiate one of the base model classes of the library from a pretrained model."),zlt.forEach(t),K2o=i(na),Ra=n(na,"P",{});var $0=s(Ra);Z2o=r($0,"The model class to instantiate is selected based on the "),$ie=n($0,"CODE",{});var Wlt=s($ie);ebo=r(Wlt,"model_type"),Wlt.forEach(t),obo=r($0,` property of the config object (either
passed as an argument or loaded from `),kie=n($0,"CODE",{});var Qlt=s(kie);rbo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),tbo=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=n($0,"CODE",{});var Hlt=s(Sie);abo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),nbo=r($0,":"),$0.forEach(t),sbo=i(na),y=n(na,"UL",{});var $=s(y);kp=n($,"LI",{});var DLe=s(kp);Rie=n(DLe,"STRONG",{});var Ult=s(Rie);lbo=r(Ult,"albert"),Ult.forEach(t),ibo=r(DLe," \u2014 "),eq=n(DLe,"A",{href:!0});var Jlt=s(eq);dbo=r(Jlt,"AlbertModel"),Jlt.forEach(t),cbo=r(DLe," (ALBERT model)"),DLe.forEach(t),fbo=i($),Sp=n($,"LI",{});var GLe=s(Sp);Pie=n(GLe,"STRONG",{});var Ylt=s(Pie);mbo=r(Ylt,"bart"),Ylt.forEach(t),gbo=r(GLe," \u2014 "),oq=n(GLe,"A",{href:!0});var Klt=s(oq);hbo=r(Klt,"BartModel"),Klt.forEach(t),pbo=r(GLe," (BART model)"),GLe.forEach(t),_bo=i($),Rp=n($,"LI",{});var OLe=s(Rp);Bie=n(OLe,"STRONG",{});var Zlt=s(Bie);ubo=r(Zlt,"beit"),Zlt.forEach(t),bbo=r(OLe," \u2014 "),rq=n(OLe,"A",{href:!0});var eit=s(rq);vbo=r(eit,"BeitModel"),eit.forEach(t),Fbo=r(OLe," (BEiT model)"),OLe.forEach(t),Tbo=i($),Pp=n($,"LI",{});var VLe=s(Pp);Iie=n(VLe,"STRONG",{});var oit=s(Iie);Mbo=r(oit,"bert"),oit.forEach(t),Ebo=r(VLe," \u2014 "),tq=n(VLe,"A",{href:!0});var rit=s(tq);Cbo=r(rit,"BertModel"),rit.forEach(t),wbo=r(VLe," (BERT model)"),VLe.forEach(t),Abo=i($),Bp=n($,"LI",{});var XLe=s(Bp);Nie=n(XLe,"STRONG",{});var tit=s(Nie);Lbo=r(tit,"bert-generation"),tit.forEach(t),ybo=r(XLe," \u2014 "),aq=n(XLe,"A",{href:!0});var ait=s(aq);xbo=r(ait,"BertGenerationEncoder"),ait.forEach(t),$bo=r(XLe," (Bert Generation model)"),XLe.forEach(t),kbo=i($),Ip=n($,"LI",{});var zLe=s(Ip);qie=n(zLe,"STRONG",{});var nit=s(qie);Sbo=r(nit,"big_bird"),nit.forEach(t),Rbo=r(zLe," \u2014 "),nq=n(zLe,"A",{href:!0});var sit=s(nq);Pbo=r(sit,"BigBirdModel"),sit.forEach(t),Bbo=r(zLe," (BigBird model)"),zLe.forEach(t),Ibo=i($),Np=n($,"LI",{});var WLe=s(Np);jie=n(WLe,"STRONG",{});var lit=s(jie);Nbo=r(lit,"bigbird_pegasus"),lit.forEach(t),qbo=r(WLe," \u2014 "),sq=n(WLe,"A",{href:!0});var iit=s(sq);jbo=r(iit,"BigBirdPegasusModel"),iit.forEach(t),Dbo=r(WLe," (BigBird-Pegasus model)"),WLe.forEach(t),Gbo=i($),qp=n($,"LI",{});var QLe=s(qp);Die=n(QLe,"STRONG",{});var dit=s(Die);Obo=r(dit,"blenderbot"),dit.forEach(t),Vbo=r(QLe," \u2014 "),lq=n(QLe,"A",{href:!0});var cit=s(lq);Xbo=r(cit,"BlenderbotModel"),cit.forEach(t),zbo=r(QLe," (Blenderbot model)"),QLe.forEach(t),Wbo=i($),jp=n($,"LI",{});var HLe=s(jp);Gie=n(HLe,"STRONG",{});var fit=s(Gie);Qbo=r(fit,"blenderbot-small"),fit.forEach(t),Hbo=r(HLe," \u2014 "),iq=n(HLe,"A",{href:!0});var mit=s(iq);Ubo=r(mit,"BlenderbotSmallModel"),mit.forEach(t),Jbo=r(HLe," (BlenderbotSmall model)"),HLe.forEach(t),Ybo=i($),Dp=n($,"LI",{});var ULe=s(Dp);Oie=n(ULe,"STRONG",{});var git=s(Oie);Kbo=r(git,"bloom"),git.forEach(t),Zbo=r(ULe," \u2014 "),dq=n(ULe,"A",{href:!0});var hit=s(dq);e4o=r(hit,"BloomModel"),hit.forEach(t),o4o=r(ULe," (BLOOM model)"),ULe.forEach(t),r4o=i($),Gp=n($,"LI",{});var JLe=s(Gp);Vie=n(JLe,"STRONG",{});var pit=s(Vie);t4o=r(pit,"camembert"),pit.forEach(t),a4o=r(JLe," \u2014 "),cq=n(JLe,"A",{href:!0});var _it=s(cq);n4o=r(_it,"CamembertModel"),_it.forEach(t),s4o=r(JLe," (CamemBERT model)"),JLe.forEach(t),l4o=i($),Op=n($,"LI",{});var YLe=s(Op);Xie=n(YLe,"STRONG",{});var uit=s(Xie);i4o=r(uit,"canine"),uit.forEach(t),d4o=r(YLe," \u2014 "),fq=n(YLe,"A",{href:!0});var bit=s(fq);c4o=r(bit,"CanineModel"),bit.forEach(t),f4o=r(YLe," (CANINE model)"),YLe.forEach(t),m4o=i($),Vp=n($,"LI",{});var KLe=s(Vp);zie=n(KLe,"STRONG",{});var vit=s(zie);g4o=r(vit,"clip"),vit.forEach(t),h4o=r(KLe," \u2014 "),mq=n(KLe,"A",{href:!0});var Fit=s(mq);p4o=r(Fit,"CLIPModel"),Fit.forEach(t),_4o=r(KLe," (CLIP model)"),KLe.forEach(t),u4o=i($),Xp=n($,"LI",{});var ZLe=s(Xp);Wie=n(ZLe,"STRONG",{});var Tit=s(Wie);b4o=r(Tit,"convbert"),Tit.forEach(t),v4o=r(ZLe," \u2014 "),gq=n(ZLe,"A",{href:!0});var Mit=s(gq);F4o=r(Mit,"ConvBertModel"),Mit.forEach(t),T4o=r(ZLe," (ConvBERT model)"),ZLe.forEach(t),M4o=i($),zp=n($,"LI",{});var eye=s(zp);Qie=n(eye,"STRONG",{});var Eit=s(Qie);E4o=r(Eit,"convnext"),Eit.forEach(t),C4o=r(eye," \u2014 "),hq=n(eye,"A",{href:!0});var Cit=s(hq);w4o=r(Cit,"ConvNextModel"),Cit.forEach(t),A4o=r(eye," (ConvNeXT model)"),eye.forEach(t),L4o=i($),Wp=n($,"LI",{});var oye=s(Wp);Hie=n(oye,"STRONG",{});var wit=s(Hie);y4o=r(wit,"ctrl"),wit.forEach(t),x4o=r(oye," \u2014 "),pq=n(oye,"A",{href:!0});var Ait=s(pq);$4o=r(Ait,"CTRLModel"),Ait.forEach(t),k4o=r(oye," (CTRL model)"),oye.forEach(t),S4o=i($),Qp=n($,"LI",{});var rye=s(Qp);Uie=n(rye,"STRONG",{});var Lit=s(Uie);R4o=r(Lit,"cvt"),Lit.forEach(t),P4o=r(rye," \u2014 "),_q=n(rye,"A",{href:!0});var yit=s(_q);B4o=r(yit,"CvtModel"),yit.forEach(t),I4o=r(rye," (CvT model)"),rye.forEach(t),N4o=i($),Hp=n($,"LI",{});var tye=s(Hp);Jie=n(tye,"STRONG",{});var xit=s(Jie);q4o=r(xit,"data2vec-audio"),xit.forEach(t),j4o=r(tye," \u2014 "),uq=n(tye,"A",{href:!0});var $it=s(uq);D4o=r($it,"Data2VecAudioModel"),$it.forEach(t),G4o=r(tye," (Data2VecAudio model)"),tye.forEach(t),O4o=i($),Up=n($,"LI",{});var aye=s(Up);Yie=n(aye,"STRONG",{});var kit=s(Yie);V4o=r(kit,"data2vec-text"),kit.forEach(t),X4o=r(aye," \u2014 "),bq=n(aye,"A",{href:!0});var Sit=s(bq);z4o=r(Sit,"Data2VecTextModel"),Sit.forEach(t),W4o=r(aye," (Data2VecText model)"),aye.forEach(t),Q4o=i($),Jp=n($,"LI",{});var nye=s(Jp);Kie=n(nye,"STRONG",{});var Rit=s(Kie);H4o=r(Rit,"data2vec-vision"),Rit.forEach(t),U4o=r(nye," \u2014 "),vq=n(nye,"A",{href:!0});var Pit=s(vq);J4o=r(Pit,"Data2VecVisionModel"),Pit.forEach(t),Y4o=r(nye," (Data2VecVision model)"),nye.forEach(t),K4o=i($),Yp=n($,"LI",{});var sye=s(Yp);Zie=n(sye,"STRONG",{});var Bit=s(Zie);Z4o=r(Bit,"deberta"),Bit.forEach(t),evo=r(sye," \u2014 "),Fq=n(sye,"A",{href:!0});var Iit=s(Fq);ovo=r(Iit,"DebertaModel"),Iit.forEach(t),rvo=r(sye," (DeBERTa model)"),sye.forEach(t),tvo=i($),Kp=n($,"LI",{});var lye=s(Kp);ede=n(lye,"STRONG",{});var Nit=s(ede);avo=r(Nit,"deberta-v2"),Nit.forEach(t),nvo=r(lye," \u2014 "),Tq=n(lye,"A",{href:!0});var qit=s(Tq);svo=r(qit,"DebertaV2Model"),qit.forEach(t),lvo=r(lye," (DeBERTa-v2 model)"),lye.forEach(t),ivo=i($),Zp=n($,"LI",{});var iye=s(Zp);ode=n(iye,"STRONG",{});var jit=s(ode);dvo=r(jit,"decision_transformer"),jit.forEach(t),cvo=r(iye," \u2014 "),Mq=n(iye,"A",{href:!0});var Dit=s(Mq);fvo=r(Dit,"DecisionTransformerModel"),Dit.forEach(t),mvo=r(iye," (Decision Transformer model)"),iye.forEach(t),gvo=i($),e_=n($,"LI",{});var dye=s(e_);rde=n(dye,"STRONG",{});var Git=s(rde);hvo=r(Git,"deit"),Git.forEach(t),pvo=r(dye," \u2014 "),Eq=n(dye,"A",{href:!0});var Oit=s(Eq);_vo=r(Oit,"DeiTModel"),Oit.forEach(t),uvo=r(dye," (DeiT model)"),dye.forEach(t),bvo=i($),o_=n($,"LI",{});var cye=s(o_);tde=n(cye,"STRONG",{});var Vit=s(tde);vvo=r(Vit,"detr"),Vit.forEach(t),Fvo=r(cye," \u2014 "),Cq=n(cye,"A",{href:!0});var Xit=s(Cq);Tvo=r(Xit,"DetrModel"),Xit.forEach(t),Mvo=r(cye," (DETR model)"),cye.forEach(t),Evo=i($),r_=n($,"LI",{});var fye=s(r_);ade=n(fye,"STRONG",{});var zit=s(ade);Cvo=r(zit,"distilbert"),zit.forEach(t),wvo=r(fye," \u2014 "),wq=n(fye,"A",{href:!0});var Wit=s(wq);Avo=r(Wit,"DistilBertModel"),Wit.forEach(t),Lvo=r(fye," (DistilBERT model)"),fye.forEach(t),yvo=i($),t_=n($,"LI",{});var mye=s(t_);nde=n(mye,"STRONG",{});var Qit=s(nde);xvo=r(Qit,"dpr"),Qit.forEach(t),$vo=r(mye," \u2014 "),Aq=n(mye,"A",{href:!0});var Hit=s(Aq);kvo=r(Hit,"DPRQuestionEncoder"),Hit.forEach(t),Svo=r(mye," (DPR model)"),mye.forEach(t),Rvo=i($),a_=n($,"LI",{});var gye=s(a_);sde=n(gye,"STRONG",{});var Uit=s(sde);Pvo=r(Uit,"dpt"),Uit.forEach(t),Bvo=r(gye," \u2014 "),Lq=n(gye,"A",{href:!0});var Jit=s(Lq);Ivo=r(Jit,"DPTModel"),Jit.forEach(t),Nvo=r(gye," (DPT model)"),gye.forEach(t),qvo=i($),n_=n($,"LI",{});var hye=s(n_);lde=n(hye,"STRONG",{});var Yit=s(lde);jvo=r(Yit,"electra"),Yit.forEach(t),Dvo=r(hye," \u2014 "),yq=n(hye,"A",{href:!0});var Kit=s(yq);Gvo=r(Kit,"ElectraModel"),Kit.forEach(t),Ovo=r(hye," (ELECTRA model)"),hye.forEach(t),Vvo=i($),s_=n($,"LI",{});var pye=s(s_);ide=n(pye,"STRONG",{});var Zit=s(ide);Xvo=r(Zit,"flaubert"),Zit.forEach(t),zvo=r(pye," \u2014 "),xq=n(pye,"A",{href:!0});var edt=s(xq);Wvo=r(edt,"FlaubertModel"),edt.forEach(t),Qvo=r(pye," (FlauBERT model)"),pye.forEach(t),Hvo=i($),l_=n($,"LI",{});var _ye=s(l_);dde=n(_ye,"STRONG",{});var odt=s(dde);Uvo=r(odt,"flava"),odt.forEach(t),Jvo=r(_ye," \u2014 "),$q=n(_ye,"A",{href:!0});var rdt=s($q);Yvo=r(rdt,"FlavaModel"),rdt.forEach(t),Kvo=r(_ye," (FLAVA model)"),_ye.forEach(t),Zvo=i($),i_=n($,"LI",{});var uye=s(i_);cde=n(uye,"STRONG",{});var tdt=s(cde);eFo=r(tdt,"fnet"),tdt.forEach(t),oFo=r(uye," \u2014 "),kq=n(uye,"A",{href:!0});var adt=s(kq);rFo=r(adt,"FNetModel"),adt.forEach(t),tFo=r(uye," (FNet model)"),uye.forEach(t),aFo=i($),d_=n($,"LI",{});var bye=s(d_);fde=n(bye,"STRONG",{});var ndt=s(fde);nFo=r(ndt,"fsmt"),ndt.forEach(t),sFo=r(bye," \u2014 "),Sq=n(bye,"A",{href:!0});var sdt=s(Sq);lFo=r(sdt,"FSMTModel"),sdt.forEach(t),iFo=r(bye," (FairSeq Machine-Translation model)"),bye.forEach(t),dFo=i($),Os=n($,"LI",{});var Uk=s(Os);mde=n(Uk,"STRONG",{});var ldt=s(mde);cFo=r(ldt,"funnel"),ldt.forEach(t),fFo=r(Uk," \u2014 "),Rq=n(Uk,"A",{href:!0});var idt=s(Rq);mFo=r(idt,"FunnelModel"),idt.forEach(t),gFo=r(Uk," or "),Pq=n(Uk,"A",{href:!0});var ddt=s(Pq);hFo=r(ddt,"FunnelBaseModel"),ddt.forEach(t),pFo=r(Uk," (Funnel Transformer model)"),Uk.forEach(t),_Fo=i($),c_=n($,"LI",{});var vye=s(c_);gde=n(vye,"STRONG",{});var cdt=s(gde);uFo=r(cdt,"glpn"),cdt.forEach(t),bFo=r(vye," \u2014 "),Bq=n(vye,"A",{href:!0});var fdt=s(Bq);vFo=r(fdt,"GLPNModel"),fdt.forEach(t),FFo=r(vye," (GLPN model)"),vye.forEach(t),TFo=i($),f_=n($,"LI",{});var Fye=s(f_);hde=n(Fye,"STRONG",{});var mdt=s(hde);MFo=r(mdt,"gpt2"),mdt.forEach(t),EFo=r(Fye," \u2014 "),Iq=n(Fye,"A",{href:!0});var gdt=s(Iq);CFo=r(gdt,"GPT2Model"),gdt.forEach(t),wFo=r(Fye," (OpenAI GPT-2 model)"),Fye.forEach(t),AFo=i($),m_=n($,"LI",{});var Tye=s(m_);pde=n(Tye,"STRONG",{});var hdt=s(pde);LFo=r(hdt,"gpt_neo"),hdt.forEach(t),yFo=r(Tye," \u2014 "),Nq=n(Tye,"A",{href:!0});var pdt=s(Nq);xFo=r(pdt,"GPTNeoModel"),pdt.forEach(t),$Fo=r(Tye," (GPT Neo model)"),Tye.forEach(t),kFo=i($),g_=n($,"LI",{});var Mye=s(g_);_de=n(Mye,"STRONG",{});var _dt=s(_de);SFo=r(_dt,"gpt_neox"),_dt.forEach(t),RFo=r(Mye," \u2014 "),qq=n(Mye,"A",{href:!0});var udt=s(qq);PFo=r(udt,"GPTNeoXModel"),udt.forEach(t),BFo=r(Mye," (GPT NeoX model)"),Mye.forEach(t),IFo=i($),h_=n($,"LI",{});var Eye=s(h_);ude=n(Eye,"STRONG",{});var bdt=s(ude);NFo=r(bdt,"gptj"),bdt.forEach(t),qFo=r(Eye," \u2014 "),jq=n(Eye,"A",{href:!0});var vdt=s(jq);jFo=r(vdt,"GPTJModel"),vdt.forEach(t),DFo=r(Eye," (GPT-J model)"),Eye.forEach(t),GFo=i($),p_=n($,"LI",{});var Cye=s(p_);bde=n(Cye,"STRONG",{});var Fdt=s(bde);OFo=r(Fdt,"hubert"),Fdt.forEach(t),VFo=r(Cye," \u2014 "),Dq=n(Cye,"A",{href:!0});var Tdt=s(Dq);XFo=r(Tdt,"HubertModel"),Tdt.forEach(t),zFo=r(Cye," (Hubert model)"),Cye.forEach(t),WFo=i($),__=n($,"LI",{});var wye=s(__);vde=n(wye,"STRONG",{});var Mdt=s(vde);QFo=r(Mdt,"ibert"),Mdt.forEach(t),HFo=r(wye," \u2014 "),Gq=n(wye,"A",{href:!0});var Edt=s(Gq);UFo=r(Edt,"IBertModel"),Edt.forEach(t),JFo=r(wye," (I-BERT model)"),wye.forEach(t),YFo=i($),u_=n($,"LI",{});var Aye=s(u_);Fde=n(Aye,"STRONG",{});var Cdt=s(Fde);KFo=r(Cdt,"imagegpt"),Cdt.forEach(t),ZFo=r(Aye," \u2014 "),Oq=n(Aye,"A",{href:!0});var wdt=s(Oq);e6o=r(wdt,"ImageGPTModel"),wdt.forEach(t),o6o=r(Aye," (ImageGPT model)"),Aye.forEach(t),r6o=i($),b_=n($,"LI",{});var Lye=s(b_);Tde=n(Lye,"STRONG",{});var Adt=s(Tde);t6o=r(Adt,"layoutlm"),Adt.forEach(t),a6o=r(Lye," \u2014 "),Vq=n(Lye,"A",{href:!0});var Ldt=s(Vq);n6o=r(Ldt,"LayoutLMModel"),Ldt.forEach(t),s6o=r(Lye," (LayoutLM model)"),Lye.forEach(t),l6o=i($),v_=n($,"LI",{});var yye=s(v_);Mde=n(yye,"STRONG",{});var ydt=s(Mde);i6o=r(ydt,"layoutlmv2"),ydt.forEach(t),d6o=r(yye," \u2014 "),Xq=n(yye,"A",{href:!0});var xdt=s(Xq);c6o=r(xdt,"LayoutLMv2Model"),xdt.forEach(t),f6o=r(yye," (LayoutLMv2 model)"),yye.forEach(t),m6o=i($),F_=n($,"LI",{});var xye=s(F_);Ede=n(xye,"STRONG",{});var $dt=s(Ede);g6o=r($dt,"layoutlmv3"),$dt.forEach(t),h6o=r(xye," \u2014 "),zq=n(xye,"A",{href:!0});var kdt=s(zq);p6o=r(kdt,"LayoutLMv3Model"),kdt.forEach(t),_6o=r(xye," (LayoutLMv3 model)"),xye.forEach(t),u6o=i($),T_=n($,"LI",{});var $ye=s(T_);Cde=n($ye,"STRONG",{});var Sdt=s(Cde);b6o=r(Sdt,"led"),Sdt.forEach(t),v6o=r($ye," \u2014 "),Wq=n($ye,"A",{href:!0});var Rdt=s(Wq);F6o=r(Rdt,"LEDModel"),Rdt.forEach(t),T6o=r($ye," (LED model)"),$ye.forEach(t),M6o=i($),M_=n($,"LI",{});var kye=s(M_);wde=n(kye,"STRONG",{});var Pdt=s(wde);E6o=r(Pdt,"levit"),Pdt.forEach(t),C6o=r(kye," \u2014 "),Qq=n(kye,"A",{href:!0});var Bdt=s(Qq);w6o=r(Bdt,"LevitModel"),Bdt.forEach(t),A6o=r(kye," (LeViT model)"),kye.forEach(t),L6o=i($),E_=n($,"LI",{});var Sye=s(E_);Ade=n(Sye,"STRONG",{});var Idt=s(Ade);y6o=r(Idt,"longformer"),Idt.forEach(t),x6o=r(Sye," \u2014 "),Hq=n(Sye,"A",{href:!0});var Ndt=s(Hq);$6o=r(Ndt,"LongformerModel"),Ndt.forEach(t),k6o=r(Sye," (Longformer model)"),Sye.forEach(t),S6o=i($),C_=n($,"LI",{});var Rye=s(C_);Lde=n(Rye,"STRONG",{});var qdt=s(Lde);R6o=r(qdt,"longt5"),qdt.forEach(t),P6o=r(Rye," \u2014 "),Uq=n(Rye,"A",{href:!0});var jdt=s(Uq);B6o=r(jdt,"LongT5Model"),jdt.forEach(t),I6o=r(Rye," (LongT5 model)"),Rye.forEach(t),N6o=i($),w_=n($,"LI",{});var Pye=s(w_);yde=n(Pye,"STRONG",{});var Ddt=s(yde);q6o=r(Ddt,"luke"),Ddt.forEach(t),j6o=r(Pye," \u2014 "),Jq=n(Pye,"A",{href:!0});var Gdt=s(Jq);D6o=r(Gdt,"LukeModel"),Gdt.forEach(t),G6o=r(Pye," (LUKE model)"),Pye.forEach(t),O6o=i($),A_=n($,"LI",{});var Bye=s(A_);xde=n(Bye,"STRONG",{});var Odt=s(xde);V6o=r(Odt,"lxmert"),Odt.forEach(t),X6o=r(Bye," \u2014 "),Yq=n(Bye,"A",{href:!0});var Vdt=s(Yq);z6o=r(Vdt,"LxmertModel"),Vdt.forEach(t),W6o=r(Bye," (LXMERT model)"),Bye.forEach(t),Q6o=i($),L_=n($,"LI",{});var Iye=s(L_);$de=n(Iye,"STRONG",{});var Xdt=s($de);H6o=r(Xdt,"m2m_100"),Xdt.forEach(t),U6o=r(Iye," \u2014 "),Kq=n(Iye,"A",{href:!0});var zdt=s(Kq);J6o=r(zdt,"M2M100Model"),zdt.forEach(t),Y6o=r(Iye," (M2M100 model)"),Iye.forEach(t),K6o=i($),y_=n($,"LI",{});var Nye=s(y_);kde=n(Nye,"STRONG",{});var Wdt=s(kde);Z6o=r(Wdt,"marian"),Wdt.forEach(t),eTo=r(Nye," \u2014 "),Zq=n(Nye,"A",{href:!0});var Qdt=s(Zq);oTo=r(Qdt,"MarianModel"),Qdt.forEach(t),rTo=r(Nye," (Marian model)"),Nye.forEach(t),tTo=i($),x_=n($,"LI",{});var qye=s(x_);Sde=n(qye,"STRONG",{});var Hdt=s(Sde);aTo=r(Hdt,"maskformer"),Hdt.forEach(t),nTo=r(qye," \u2014 "),ej=n(qye,"A",{href:!0});var Udt=s(ej);sTo=r(Udt,"MaskFormerModel"),Udt.forEach(t),lTo=r(qye," (MaskFormer model)"),qye.forEach(t),iTo=i($),$_=n($,"LI",{});var jye=s($_);Rde=n(jye,"STRONG",{});var Jdt=s(Rde);dTo=r(Jdt,"mbart"),Jdt.forEach(t),cTo=r(jye," \u2014 "),oj=n(jye,"A",{href:!0});var Ydt=s(oj);fTo=r(Ydt,"MBartModel"),Ydt.forEach(t),mTo=r(jye," (mBART model)"),jye.forEach(t),gTo=i($),k_=n($,"LI",{});var Dye=s(k_);Pde=n(Dye,"STRONG",{});var Kdt=s(Pde);hTo=r(Kdt,"mctct"),Kdt.forEach(t),pTo=r(Dye," \u2014 "),rj=n(Dye,"A",{href:!0});var Zdt=s(rj);_To=r(Zdt,"MCTCTModel"),Zdt.forEach(t),uTo=r(Dye," (M-CTC-T model)"),Dye.forEach(t),bTo=i($),S_=n($,"LI",{});var Gye=s(S_);Bde=n(Gye,"STRONG",{});var ect=s(Bde);vTo=r(ect,"megatron-bert"),ect.forEach(t),FTo=r(Gye," \u2014 "),tj=n(Gye,"A",{href:!0});var oct=s(tj);TTo=r(oct,"MegatronBertModel"),oct.forEach(t),MTo=r(Gye," (Megatron-BERT model)"),Gye.forEach(t),ETo=i($),R_=n($,"LI",{});var Oye=s(R_);Ide=n(Oye,"STRONG",{});var rct=s(Ide);CTo=r(rct,"mobilebert"),rct.forEach(t),wTo=r(Oye," \u2014 "),aj=n(Oye,"A",{href:!0});var tct=s(aj);ATo=r(tct,"MobileBertModel"),tct.forEach(t),LTo=r(Oye," (MobileBERT model)"),Oye.forEach(t),yTo=i($),P_=n($,"LI",{});var Vye=s(P_);Nde=n(Vye,"STRONG",{});var act=s(Nde);xTo=r(act,"mpnet"),act.forEach(t),$To=r(Vye," \u2014 "),nj=n(Vye,"A",{href:!0});var nct=s(nj);kTo=r(nct,"MPNetModel"),nct.forEach(t),STo=r(Vye," (MPNet model)"),Vye.forEach(t),RTo=i($),B_=n($,"LI",{});var Xye=s(B_);qde=n(Xye,"STRONG",{});var sct=s(qde);PTo=r(sct,"mt5"),sct.forEach(t),BTo=r(Xye," \u2014 "),sj=n(Xye,"A",{href:!0});var lct=s(sj);ITo=r(lct,"MT5Model"),lct.forEach(t),NTo=r(Xye," (MT5 model)"),Xye.forEach(t),qTo=i($),I_=n($,"LI",{});var zye=s(I_);jde=n(zye,"STRONG",{});var ict=s(jde);jTo=r(ict,"nystromformer"),ict.forEach(t),DTo=r(zye," \u2014 "),lj=n(zye,"A",{href:!0});var dct=s(lj);GTo=r(dct,"NystromformerModel"),dct.forEach(t),OTo=r(zye," (Nystr\xF6mformer model)"),zye.forEach(t),VTo=i($),N_=n($,"LI",{});var Wye=s(N_);Dde=n(Wye,"STRONG",{});var cct=s(Dde);XTo=r(cct,"openai-gpt"),cct.forEach(t),zTo=r(Wye," \u2014 "),ij=n(Wye,"A",{href:!0});var fct=s(ij);WTo=r(fct,"OpenAIGPTModel"),fct.forEach(t),QTo=r(Wye," (OpenAI GPT model)"),Wye.forEach(t),HTo=i($),q_=n($,"LI",{});var Qye=s(q_);Gde=n(Qye,"STRONG",{});var mct=s(Gde);UTo=r(mct,"opt"),mct.forEach(t),JTo=r(Qye," \u2014 "),dj=n(Qye,"A",{href:!0});var gct=s(dj);YTo=r(gct,"OPTModel"),gct.forEach(t),KTo=r(Qye," (OPT model)"),Qye.forEach(t),ZTo=i($),j_=n($,"LI",{});var Hye=s(j_);Ode=n(Hye,"STRONG",{});var hct=s(Ode);e7o=r(hct,"pegasus"),hct.forEach(t),o7o=r(Hye," \u2014 "),cj=n(Hye,"A",{href:!0});var pct=s(cj);r7o=r(pct,"PegasusModel"),pct.forEach(t),t7o=r(Hye," (Pegasus model)"),Hye.forEach(t),a7o=i($),D_=n($,"LI",{});var Uye=s(D_);Vde=n(Uye,"STRONG",{});var _ct=s(Vde);n7o=r(_ct,"perceiver"),_ct.forEach(t),s7o=r(Uye," \u2014 "),fj=n(Uye,"A",{href:!0});var uct=s(fj);l7o=r(uct,"PerceiverModel"),uct.forEach(t),i7o=r(Uye," (Perceiver model)"),Uye.forEach(t),d7o=i($),G_=n($,"LI",{});var Jye=s(G_);Xde=n(Jye,"STRONG",{});var bct=s(Xde);c7o=r(bct,"plbart"),bct.forEach(t),f7o=r(Jye," \u2014 "),mj=n(Jye,"A",{href:!0});var vct=s(mj);m7o=r(vct,"PLBartModel"),vct.forEach(t),g7o=r(Jye," (PLBart model)"),Jye.forEach(t),h7o=i($),O_=n($,"LI",{});var Yye=s(O_);zde=n(Yye,"STRONG",{});var Fct=s(zde);p7o=r(Fct,"poolformer"),Fct.forEach(t),_7o=r(Yye," \u2014 "),gj=n(Yye,"A",{href:!0});var Tct=s(gj);u7o=r(Tct,"PoolFormerModel"),Tct.forEach(t),b7o=r(Yye," (PoolFormer model)"),Yye.forEach(t),v7o=i($),V_=n($,"LI",{});var Kye=s(V_);Wde=n(Kye,"STRONG",{});var Mct=s(Wde);F7o=r(Mct,"prophetnet"),Mct.forEach(t),T7o=r(Kye," \u2014 "),hj=n(Kye,"A",{href:!0});var Ect=s(hj);M7o=r(Ect,"ProphetNetModel"),Ect.forEach(t),E7o=r(Kye," (ProphetNet model)"),Kye.forEach(t),C7o=i($),X_=n($,"LI",{});var Zye=s(X_);Qde=n(Zye,"STRONG",{});var Cct=s(Qde);w7o=r(Cct,"qdqbert"),Cct.forEach(t),A7o=r(Zye," \u2014 "),pj=n(Zye,"A",{href:!0});var wct=s(pj);L7o=r(wct,"QDQBertModel"),wct.forEach(t),y7o=r(Zye," (QDQBert model)"),Zye.forEach(t),x7o=i($),z_=n($,"LI",{});var e8e=s(z_);Hde=n(e8e,"STRONG",{});var Act=s(Hde);$7o=r(Act,"reformer"),Act.forEach(t),k7o=r(e8e," \u2014 "),_j=n(e8e,"A",{href:!0});var Lct=s(_j);S7o=r(Lct,"ReformerModel"),Lct.forEach(t),R7o=r(e8e," (Reformer model)"),e8e.forEach(t),P7o=i($),W_=n($,"LI",{});var o8e=s(W_);Ude=n(o8e,"STRONG",{});var yct=s(Ude);B7o=r(yct,"regnet"),yct.forEach(t),I7o=r(o8e," \u2014 "),uj=n(o8e,"A",{href:!0});var xct=s(uj);N7o=r(xct,"RegNetModel"),xct.forEach(t),q7o=r(o8e," (RegNet model)"),o8e.forEach(t),j7o=i($),Q_=n($,"LI",{});var r8e=s(Q_);Jde=n(r8e,"STRONG",{});var $ct=s(Jde);D7o=r($ct,"rembert"),$ct.forEach(t),G7o=r(r8e," \u2014 "),bj=n(r8e,"A",{href:!0});var kct=s(bj);O7o=r(kct,"RemBertModel"),kct.forEach(t),V7o=r(r8e," (RemBERT model)"),r8e.forEach(t),X7o=i($),H_=n($,"LI",{});var t8e=s(H_);Yde=n(t8e,"STRONG",{});var Sct=s(Yde);z7o=r(Sct,"resnet"),Sct.forEach(t),W7o=r(t8e," \u2014 "),vj=n(t8e,"A",{href:!0});var Rct=s(vj);Q7o=r(Rct,"ResNetModel"),Rct.forEach(t),H7o=r(t8e," (ResNet model)"),t8e.forEach(t),U7o=i($),U_=n($,"LI",{});var a8e=s(U_);Kde=n(a8e,"STRONG",{});var Pct=s(Kde);J7o=r(Pct,"retribert"),Pct.forEach(t),Y7o=r(a8e," \u2014 "),Fj=n(a8e,"A",{href:!0});var Bct=s(Fj);K7o=r(Bct,"RetriBertModel"),Bct.forEach(t),Z7o=r(a8e," (RetriBERT model)"),a8e.forEach(t),e9o=i($),J_=n($,"LI",{});var n8e=s(J_);Zde=n(n8e,"STRONG",{});var Ict=s(Zde);o9o=r(Ict,"roberta"),Ict.forEach(t),r9o=r(n8e," \u2014 "),Tj=n(n8e,"A",{href:!0});var Nct=s(Tj);t9o=r(Nct,"RobertaModel"),Nct.forEach(t),a9o=r(n8e," (RoBERTa model)"),n8e.forEach(t),n9o=i($),Y_=n($,"LI",{});var s8e=s(Y_);ece=n(s8e,"STRONG",{});var qct=s(ece);s9o=r(qct,"roformer"),qct.forEach(t),l9o=r(s8e," \u2014 "),Mj=n(s8e,"A",{href:!0});var jct=s(Mj);i9o=r(jct,"RoFormerModel"),jct.forEach(t),d9o=r(s8e," (RoFormer model)"),s8e.forEach(t),c9o=i($),K_=n($,"LI",{});var l8e=s(K_);oce=n(l8e,"STRONG",{});var Dct=s(oce);f9o=r(Dct,"segformer"),Dct.forEach(t),m9o=r(l8e," \u2014 "),Ej=n(l8e,"A",{href:!0});var Gct=s(Ej);g9o=r(Gct,"SegformerModel"),Gct.forEach(t),h9o=r(l8e," (SegFormer model)"),l8e.forEach(t),p9o=i($),Z_=n($,"LI",{});var i8e=s(Z_);rce=n(i8e,"STRONG",{});var Oct=s(rce);_9o=r(Oct,"sew"),Oct.forEach(t),u9o=r(i8e," \u2014 "),Cj=n(i8e,"A",{href:!0});var Vct=s(Cj);b9o=r(Vct,"SEWModel"),Vct.forEach(t),v9o=r(i8e," (SEW model)"),i8e.forEach(t),F9o=i($),eu=n($,"LI",{});var d8e=s(eu);tce=n(d8e,"STRONG",{});var Xct=s(tce);T9o=r(Xct,"sew-d"),Xct.forEach(t),M9o=r(d8e," \u2014 "),wj=n(d8e,"A",{href:!0});var zct=s(wj);E9o=r(zct,"SEWDModel"),zct.forEach(t),C9o=r(d8e," (SEW-D model)"),d8e.forEach(t),w9o=i($),ou=n($,"LI",{});var c8e=s(ou);ace=n(c8e,"STRONG",{});var Wct=s(ace);A9o=r(Wct,"speech_to_text"),Wct.forEach(t),L9o=r(c8e," \u2014 "),Aj=n(c8e,"A",{href:!0});var Qct=s(Aj);y9o=r(Qct,"Speech2TextModel"),Qct.forEach(t),x9o=r(c8e," (Speech2Text model)"),c8e.forEach(t),$9o=i($),ru=n($,"LI",{});var f8e=s(ru);nce=n(f8e,"STRONG",{});var Hct=s(nce);k9o=r(Hct,"splinter"),Hct.forEach(t),S9o=r(f8e," \u2014 "),Lj=n(f8e,"A",{href:!0});var Uct=s(Lj);R9o=r(Uct,"SplinterModel"),Uct.forEach(t),P9o=r(f8e," (Splinter model)"),f8e.forEach(t),B9o=i($),tu=n($,"LI",{});var m8e=s(tu);sce=n(m8e,"STRONG",{});var Jct=s(sce);I9o=r(Jct,"squeezebert"),Jct.forEach(t),N9o=r(m8e," \u2014 "),yj=n(m8e,"A",{href:!0});var Yct=s(yj);q9o=r(Yct,"SqueezeBertModel"),Yct.forEach(t),j9o=r(m8e," (SqueezeBERT model)"),m8e.forEach(t),D9o=i($),au=n($,"LI",{});var g8e=s(au);lce=n(g8e,"STRONG",{});var Kct=s(lce);G9o=r(Kct,"swin"),Kct.forEach(t),O9o=r(g8e," \u2014 "),xj=n(g8e,"A",{href:!0});var Zct=s(xj);V9o=r(Zct,"SwinModel"),Zct.forEach(t),X9o=r(g8e," (Swin Transformer model)"),g8e.forEach(t),z9o=i($),nu=n($,"LI",{});var h8e=s(nu);ice=n(h8e,"STRONG",{});var eft=s(ice);W9o=r(eft,"swinv2"),eft.forEach(t),Q9o=r(h8e," \u2014 "),$j=n(h8e,"A",{href:!0});var oft=s($j);H9o=r(oft,"Swinv2Model"),oft.forEach(t),U9o=r(h8e," (Swin Transformer V2 model)"),h8e.forEach(t),J9o=i($),su=n($,"LI",{});var p8e=s(su);dce=n(p8e,"STRONG",{});var rft=s(dce);Y9o=r(rft,"t5"),rft.forEach(t),K9o=r(p8e," \u2014 "),kj=n(p8e,"A",{href:!0});var tft=s(kj);Z9o=r(tft,"T5Model"),tft.forEach(t),eMo=r(p8e," (T5 model)"),p8e.forEach(t),oMo=i($),lu=n($,"LI",{});var _8e=s(lu);cce=n(_8e,"STRONG",{});var aft=s(cce);rMo=r(aft,"tapas"),aft.forEach(t),tMo=r(_8e," \u2014 "),Sj=n(_8e,"A",{href:!0});var nft=s(Sj);aMo=r(nft,"TapasModel"),nft.forEach(t),nMo=r(_8e," (TAPAS model)"),_8e.forEach(t),sMo=i($),iu=n($,"LI",{});var u8e=s(iu);fce=n(u8e,"STRONG",{});var sft=s(fce);lMo=r(sft,"trajectory_transformer"),sft.forEach(t),iMo=r(u8e," \u2014 "),Rj=n(u8e,"A",{href:!0});var lft=s(Rj);dMo=r(lft,"TrajectoryTransformerModel"),lft.forEach(t),cMo=r(u8e," (Trajectory Transformer model)"),u8e.forEach(t),fMo=i($),du=n($,"LI",{});var b8e=s(du);mce=n(b8e,"STRONG",{});var ift=s(mce);mMo=r(ift,"transfo-xl"),ift.forEach(t),gMo=r(b8e," \u2014 "),Pj=n(b8e,"A",{href:!0});var dft=s(Pj);hMo=r(dft,"TransfoXLModel"),dft.forEach(t),pMo=r(b8e," (Transformer-XL model)"),b8e.forEach(t),_Mo=i($),cu=n($,"LI",{});var v8e=s(cu);gce=n(v8e,"STRONG",{});var cft=s(gce);uMo=r(cft,"unispeech"),cft.forEach(t),bMo=r(v8e," \u2014 "),Bj=n(v8e,"A",{href:!0});var fft=s(Bj);vMo=r(fft,"UniSpeechModel"),fft.forEach(t),FMo=r(v8e," (UniSpeech model)"),v8e.forEach(t),TMo=i($),fu=n($,"LI",{});var F8e=s(fu);hce=n(F8e,"STRONG",{});var mft=s(hce);MMo=r(mft,"unispeech-sat"),mft.forEach(t),EMo=r(F8e," \u2014 "),Ij=n(F8e,"A",{href:!0});var gft=s(Ij);CMo=r(gft,"UniSpeechSatModel"),gft.forEach(t),wMo=r(F8e," (UniSpeechSat model)"),F8e.forEach(t),AMo=i($),mu=n($,"LI",{});var T8e=s(mu);pce=n(T8e,"STRONG",{});var hft=s(pce);LMo=r(hft,"van"),hft.forEach(t),yMo=r(T8e," \u2014 "),Nj=n(T8e,"A",{href:!0});var pft=s(Nj);xMo=r(pft,"VanModel"),pft.forEach(t),$Mo=r(T8e," (VAN model)"),T8e.forEach(t),kMo=i($),gu=n($,"LI",{});var M8e=s(gu);_ce=n(M8e,"STRONG",{});var _ft=s(_ce);SMo=r(_ft,"vilt"),_ft.forEach(t),RMo=r(M8e," \u2014 "),qj=n(M8e,"A",{href:!0});var uft=s(qj);PMo=r(uft,"ViltModel"),uft.forEach(t),BMo=r(M8e," (ViLT model)"),M8e.forEach(t),IMo=i($),hu=n($,"LI",{});var E8e=s(hu);uce=n(E8e,"STRONG",{});var bft=s(uce);NMo=r(bft,"vision-text-dual-encoder"),bft.forEach(t),qMo=r(E8e," \u2014 "),jj=n(E8e,"A",{href:!0});var vft=s(jj);jMo=r(vft,"VisionTextDualEncoderModel"),vft.forEach(t),DMo=r(E8e," (VisionTextDualEncoder model)"),E8e.forEach(t),GMo=i($),pu=n($,"LI",{});var C8e=s(pu);bce=n(C8e,"STRONG",{});var Fft=s(bce);OMo=r(Fft,"visual_bert"),Fft.forEach(t),VMo=r(C8e," \u2014 "),Dj=n(C8e,"A",{href:!0});var Tft=s(Dj);XMo=r(Tft,"VisualBertModel"),Tft.forEach(t),zMo=r(C8e," (VisualBERT model)"),C8e.forEach(t),WMo=i($),_u=n($,"LI",{});var w8e=s(_u);vce=n(w8e,"STRONG",{});var Mft=s(vce);QMo=r(Mft,"vit"),Mft.forEach(t),HMo=r(w8e," \u2014 "),Gj=n(w8e,"A",{href:!0});var Eft=s(Gj);UMo=r(Eft,"ViTModel"),Eft.forEach(t),JMo=r(w8e," (ViT model)"),w8e.forEach(t),YMo=i($),uu=n($,"LI",{});var A8e=s(uu);Fce=n(A8e,"STRONG",{});var Cft=s(Fce);KMo=r(Cft,"vit_mae"),Cft.forEach(t),ZMo=r(A8e," \u2014 "),Oj=n(A8e,"A",{href:!0});var wft=s(Oj);eEo=r(wft,"ViTMAEModel"),wft.forEach(t),oEo=r(A8e," (ViTMAE model)"),A8e.forEach(t),rEo=i($),bu=n($,"LI",{});var L8e=s(bu);Tce=n(L8e,"STRONG",{});var Aft=s(Tce);tEo=r(Aft,"wav2vec2"),Aft.forEach(t),aEo=r(L8e," \u2014 "),Vj=n(L8e,"A",{href:!0});var Lft=s(Vj);nEo=r(Lft,"Wav2Vec2Model"),Lft.forEach(t),sEo=r(L8e," (Wav2Vec2 model)"),L8e.forEach(t),lEo=i($),vu=n($,"LI",{});var y8e=s(vu);Mce=n(y8e,"STRONG",{});var yft=s(Mce);iEo=r(yft,"wav2vec2-conformer"),yft.forEach(t),dEo=r(y8e," \u2014 "),Xj=n(y8e,"A",{href:!0});var xft=s(Xj);cEo=r(xft,"Wav2Vec2ConformerModel"),xft.forEach(t),fEo=r(y8e," (Wav2Vec2-Conformer model)"),y8e.forEach(t),mEo=i($),Fu=n($,"LI",{});var x8e=s(Fu);Ece=n(x8e,"STRONG",{});var $ft=s(Ece);gEo=r($ft,"wavlm"),$ft.forEach(t),hEo=r(x8e," \u2014 "),zj=n(x8e,"A",{href:!0});var kft=s(zj);pEo=r(kft,"WavLMModel"),kft.forEach(t),_Eo=r(x8e," (WavLM model)"),x8e.forEach(t),uEo=i($),Tu=n($,"LI",{});var $8e=s(Tu);Cce=n($8e,"STRONG",{});var Sft=s(Cce);bEo=r(Sft,"xglm"),Sft.forEach(t),vEo=r($8e," \u2014 "),Wj=n($8e,"A",{href:!0});var Rft=s(Wj);FEo=r(Rft,"XGLMModel"),Rft.forEach(t),TEo=r($8e," (XGLM model)"),$8e.forEach(t),MEo=i($),Mu=n($,"LI",{});var k8e=s(Mu);wce=n(k8e,"STRONG",{});var Pft=s(wce);EEo=r(Pft,"xlm"),Pft.forEach(t),CEo=r(k8e," \u2014 "),Qj=n(k8e,"A",{href:!0});var Bft=s(Qj);wEo=r(Bft,"XLMModel"),Bft.forEach(t),AEo=r(k8e," (XLM model)"),k8e.forEach(t),LEo=i($),Eu=n($,"LI",{});var S8e=s(Eu);Ace=n(S8e,"STRONG",{});var Ift=s(Ace);yEo=r(Ift,"xlm-prophetnet"),Ift.forEach(t),xEo=r(S8e," \u2014 "),Hj=n(S8e,"A",{href:!0});var Nft=s(Hj);$Eo=r(Nft,"XLMProphetNetModel"),Nft.forEach(t),kEo=r(S8e," (XLM-ProphetNet model)"),S8e.forEach(t),SEo=i($),Cu=n($,"LI",{});var R8e=s(Cu);Lce=n(R8e,"STRONG",{});var qft=s(Lce);REo=r(qft,"xlm-roberta"),qft.forEach(t),PEo=r(R8e," \u2014 "),Uj=n(R8e,"A",{href:!0});var jft=s(Uj);BEo=r(jft,"XLMRobertaModel"),jft.forEach(t),IEo=r(R8e," (XLM-RoBERTa model)"),R8e.forEach(t),NEo=i($),wu=n($,"LI",{});var P8e=s(wu);yce=n(P8e,"STRONG",{});var Dft=s(yce);qEo=r(Dft,"xlm-roberta-xl"),Dft.forEach(t),jEo=r(P8e," \u2014 "),Jj=n(P8e,"A",{href:!0});var Gft=s(Jj);DEo=r(Gft,"XLMRobertaXLModel"),Gft.forEach(t),GEo=r(P8e," (XLM-RoBERTa-XL model)"),P8e.forEach(t),OEo=i($),Au=n($,"LI",{});var B8e=s(Au);xce=n(B8e,"STRONG",{});var Oft=s(xce);VEo=r(Oft,"xlnet"),Oft.forEach(t),XEo=r(B8e," \u2014 "),Yj=n(B8e,"A",{href:!0});var Vft=s(Yj);zEo=r(Vft,"XLNetModel"),Vft.forEach(t),WEo=r(B8e," (XLNet model)"),B8e.forEach(t),QEo=i($),Lu=n($,"LI",{});var I8e=s(Lu);$ce=n(I8e,"STRONG",{});var Xft=s($ce);HEo=r(Xft,"yolos"),Xft.forEach(t),UEo=r(I8e," \u2014 "),Kj=n(I8e,"A",{href:!0});var zft=s(Kj);JEo=r(zft,"YolosModel"),zft.forEach(t),YEo=r(I8e," (YOLOS model)"),I8e.forEach(t),KEo=i($),yu=n($,"LI",{});var N8e=s(yu);kce=n(N8e,"STRONG",{});var Wft=s(kce);ZEo=r(Wft,"yoso"),Wft.forEach(t),eCo=r(N8e," \u2014 "),Zj=n(N8e,"A",{href:!0});var Qft=s(Zj);oCo=r(Qft,"YosoModel"),Qft.forEach(t),rCo=r(N8e," (YOSO model)"),N8e.forEach(t),$.forEach(t),tCo=i(na),xu=n(na,"P",{});var q8e=s(xu);aCo=r(q8e,"The model is set in evaluation mode by default using "),Sce=n(q8e,"CODE",{});var Hft=s(Sce);nCo=r(Hft,"model.eval()"),Hft.forEach(t),sCo=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rce=n(q8e,"CODE",{});var Uft=s(Rce);lCo=r(Uft,"model.train()"),Uft.forEach(t),q8e.forEach(t),iCo=i(na),T($u.$$.fragment,na),na.forEach(t),Js.forEach(t),GGe=i(f),ji=n(f,"H2",{class:!0});var QVe=s(ji);ku=n(QVe,"A",{id:!0,class:!0,href:!0});var Jft=s(ku);Pce=n(Jft,"SPAN",{});var Yft=s(Pce);T(aL.$$.fragment,Yft),Yft.forEach(t),Jft.forEach(t),dCo=i(QVe),Bce=n(QVe,"SPAN",{});var Kft=s(Bce);cCo=r(Kft,"AutoModelForPreTraining"),Kft.forEach(t),QVe.forEach(t),OGe=i(f),$o=n(f,"DIV",{class:!0});var Ys=s($o);T(nL.$$.fragment,Ys),fCo=i(Ys),Di=n(Ys,"P",{});var hoe=s(Di);mCo=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eD=n(hoe,"A",{href:!0});var Zft=s(eD);gCo=r(Zft,"from_pretrained()"),Zft.forEach(t),hCo=r(hoe," class method or the "),oD=n(hoe,"A",{href:!0});var emt=s(oD);pCo=r(emt,"from_config()"),emt.forEach(t),_Co=r(hoe,` class
method.`),hoe.forEach(t),uCo=i(Ys),sL=n(Ys,"P",{});var HVe=s(sL);bCo=r(HVe,"This class cannot be instantiated directly using "),Ice=n(HVe,"CODE",{});var omt=s(Ice);vCo=r(omt,"__init__()"),omt.forEach(t),FCo=r(HVe," (throws an error)."),HVe.forEach(t),TCo=i(Ys),lt=n(Ys,"DIV",{class:!0});var k0=s(lt);T(lL.$$.fragment,k0),MCo=i(k0),Nce=n(k0,"P",{});var rmt=s(Nce);ECo=r(rmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rmt.forEach(t),CCo=i(k0),Gi=n(k0,"P",{});var poe=s(Gi);wCo=r(poe,`Note:
Loading a model from its configuration file does `),qce=n(poe,"STRONG",{});var tmt=s(qce);ACo=r(tmt,"not"),tmt.forEach(t),LCo=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(poe,"A",{href:!0});var amt=s(rD);yCo=r(amt,"from_pretrained()"),amt.forEach(t),xCo=r(poe," to load the model weights."),poe.forEach(t),$Co=i(k0),T(Su.$$.fragment,k0),k0.forEach(t),kCo=i(Ys),Ye=n(Ys,"DIV",{class:!0});var sa=s(Ye);T(iL.$$.fragment,sa),SCo=i(sa),jce=n(sa,"P",{});var nmt=s(jce);RCo=r(nmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nmt.forEach(t),PCo=i(sa),Pa=n(sa,"P",{});var S0=s(Pa);BCo=r(S0,"The model class to instantiate is selected based on the "),Dce=n(S0,"CODE",{});var smt=s(Dce);ICo=r(smt,"model_type"),smt.forEach(t),NCo=r(S0,` property of the config object (either
passed as an argument or loaded from `),Gce=n(S0,"CODE",{});var lmt=s(Gce);qCo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),jCo=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(S0,"CODE",{});var imt=s(Oce);DCo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),GCo=r(S0,":"),S0.forEach(t),OCo=i(sa),G=n(sa,"UL",{});var O=s(G);Ru=n(O,"LI",{});var j8e=s(Ru);Vce=n(j8e,"STRONG",{});var dmt=s(Vce);VCo=r(dmt,"albert"),dmt.forEach(t),XCo=r(j8e," \u2014 "),tD=n(j8e,"A",{href:!0});var cmt=s(tD);zCo=r(cmt,"AlbertForPreTraining"),cmt.forEach(t),WCo=r(j8e," (ALBERT model)"),j8e.forEach(t),QCo=i(O),Pu=n(O,"LI",{});var D8e=s(Pu);Xce=n(D8e,"STRONG",{});var fmt=s(Xce);HCo=r(fmt,"bart"),fmt.forEach(t),UCo=r(D8e," \u2014 "),aD=n(D8e,"A",{href:!0});var mmt=s(aD);JCo=r(mmt,"BartForConditionalGeneration"),mmt.forEach(t),YCo=r(D8e," (BART model)"),D8e.forEach(t),KCo=i(O),Bu=n(O,"LI",{});var G8e=s(Bu);zce=n(G8e,"STRONG",{});var gmt=s(zce);ZCo=r(gmt,"bert"),gmt.forEach(t),e5o=r(G8e," \u2014 "),nD=n(G8e,"A",{href:!0});var hmt=s(nD);o5o=r(hmt,"BertForPreTraining"),hmt.forEach(t),r5o=r(G8e," (BERT model)"),G8e.forEach(t),t5o=i(O),Iu=n(O,"LI",{});var O8e=s(Iu);Wce=n(O8e,"STRONG",{});var pmt=s(Wce);a5o=r(pmt,"big_bird"),pmt.forEach(t),n5o=r(O8e," \u2014 "),sD=n(O8e,"A",{href:!0});var _mt=s(sD);s5o=r(_mt,"BigBirdForPreTraining"),_mt.forEach(t),l5o=r(O8e," (BigBird model)"),O8e.forEach(t),i5o=i(O),Nu=n(O,"LI",{});var V8e=s(Nu);Qce=n(V8e,"STRONG",{});var umt=s(Qce);d5o=r(umt,"bloom"),umt.forEach(t),c5o=r(V8e," \u2014 "),lD=n(V8e,"A",{href:!0});var bmt=s(lD);f5o=r(bmt,"BloomForCausalLM"),bmt.forEach(t),m5o=r(V8e," (BLOOM model)"),V8e.forEach(t),g5o=i(O),qu=n(O,"LI",{});var X8e=s(qu);Hce=n(X8e,"STRONG",{});var vmt=s(Hce);h5o=r(vmt,"camembert"),vmt.forEach(t),p5o=r(X8e," \u2014 "),iD=n(X8e,"A",{href:!0});var Fmt=s(iD);_5o=r(Fmt,"CamembertForMaskedLM"),Fmt.forEach(t),u5o=r(X8e," (CamemBERT model)"),X8e.forEach(t),b5o=i(O),ju=n(O,"LI",{});var z8e=s(ju);Uce=n(z8e,"STRONG",{});var Tmt=s(Uce);v5o=r(Tmt,"ctrl"),Tmt.forEach(t),F5o=r(z8e," \u2014 "),dD=n(z8e,"A",{href:!0});var Mmt=s(dD);T5o=r(Mmt,"CTRLLMHeadModel"),Mmt.forEach(t),M5o=r(z8e," (CTRL model)"),z8e.forEach(t),E5o=i(O),Du=n(O,"LI",{});var W8e=s(Du);Jce=n(W8e,"STRONG",{});var Emt=s(Jce);C5o=r(Emt,"data2vec-text"),Emt.forEach(t),w5o=r(W8e," \u2014 "),cD=n(W8e,"A",{href:!0});var Cmt=s(cD);A5o=r(Cmt,"Data2VecTextForMaskedLM"),Cmt.forEach(t),L5o=r(W8e," (Data2VecText model)"),W8e.forEach(t),y5o=i(O),Gu=n(O,"LI",{});var Q8e=s(Gu);Yce=n(Q8e,"STRONG",{});var wmt=s(Yce);x5o=r(wmt,"deberta"),wmt.forEach(t),$5o=r(Q8e," \u2014 "),fD=n(Q8e,"A",{href:!0});var Amt=s(fD);k5o=r(Amt,"DebertaForMaskedLM"),Amt.forEach(t),S5o=r(Q8e," (DeBERTa model)"),Q8e.forEach(t),R5o=i(O),Ou=n(O,"LI",{});var H8e=s(Ou);Kce=n(H8e,"STRONG",{});var Lmt=s(Kce);P5o=r(Lmt,"deberta-v2"),Lmt.forEach(t),B5o=r(H8e," \u2014 "),mD=n(H8e,"A",{href:!0});var ymt=s(mD);I5o=r(ymt,"DebertaV2ForMaskedLM"),ymt.forEach(t),N5o=r(H8e," (DeBERTa-v2 model)"),H8e.forEach(t),q5o=i(O),Vu=n(O,"LI",{});var U8e=s(Vu);Zce=n(U8e,"STRONG",{});var xmt=s(Zce);j5o=r(xmt,"distilbert"),xmt.forEach(t),D5o=r(U8e," \u2014 "),gD=n(U8e,"A",{href:!0});var $mt=s(gD);G5o=r($mt,"DistilBertForMaskedLM"),$mt.forEach(t),O5o=r(U8e," (DistilBERT model)"),U8e.forEach(t),V5o=i(O),Xu=n(O,"LI",{});var J8e=s(Xu);efe=n(J8e,"STRONG",{});var kmt=s(efe);X5o=r(kmt,"electra"),kmt.forEach(t),z5o=r(J8e," \u2014 "),hD=n(J8e,"A",{href:!0});var Smt=s(hD);W5o=r(Smt,"ElectraForPreTraining"),Smt.forEach(t),Q5o=r(J8e," (ELECTRA model)"),J8e.forEach(t),H5o=i(O),zu=n(O,"LI",{});var Y8e=s(zu);ofe=n(Y8e,"STRONG",{});var Rmt=s(ofe);U5o=r(Rmt,"flaubert"),Rmt.forEach(t),J5o=r(Y8e," \u2014 "),pD=n(Y8e,"A",{href:!0});var Pmt=s(pD);Y5o=r(Pmt,"FlaubertWithLMHeadModel"),Pmt.forEach(t),K5o=r(Y8e," (FlauBERT model)"),Y8e.forEach(t),Z5o=i(O),Wu=n(O,"LI",{});var K8e=s(Wu);rfe=n(K8e,"STRONG",{});var Bmt=s(rfe);e3o=r(Bmt,"flava"),Bmt.forEach(t),o3o=r(K8e," \u2014 "),_D=n(K8e,"A",{href:!0});var Imt=s(_D);r3o=r(Imt,"FlavaForPreTraining"),Imt.forEach(t),t3o=r(K8e," (FLAVA model)"),K8e.forEach(t),a3o=i(O),Qu=n(O,"LI",{});var Z8e=s(Qu);tfe=n(Z8e,"STRONG",{});var Nmt=s(tfe);n3o=r(Nmt,"fnet"),Nmt.forEach(t),s3o=r(Z8e," \u2014 "),uD=n(Z8e,"A",{href:!0});var qmt=s(uD);l3o=r(qmt,"FNetForPreTraining"),qmt.forEach(t),i3o=r(Z8e," (FNet model)"),Z8e.forEach(t),d3o=i(O),Hu=n(O,"LI",{});var exe=s(Hu);afe=n(exe,"STRONG",{});var jmt=s(afe);c3o=r(jmt,"fsmt"),jmt.forEach(t),f3o=r(exe," \u2014 "),bD=n(exe,"A",{href:!0});var Dmt=s(bD);m3o=r(Dmt,"FSMTForConditionalGeneration"),Dmt.forEach(t),g3o=r(exe," (FairSeq Machine-Translation model)"),exe.forEach(t),h3o=i(O),Uu=n(O,"LI",{});var oxe=s(Uu);nfe=n(oxe,"STRONG",{});var Gmt=s(nfe);p3o=r(Gmt,"funnel"),Gmt.forEach(t),_3o=r(oxe," \u2014 "),vD=n(oxe,"A",{href:!0});var Omt=s(vD);u3o=r(Omt,"FunnelForPreTraining"),Omt.forEach(t),b3o=r(oxe," (Funnel Transformer model)"),oxe.forEach(t),v3o=i(O),Ju=n(O,"LI",{});var rxe=s(Ju);sfe=n(rxe,"STRONG",{});var Vmt=s(sfe);F3o=r(Vmt,"gpt2"),Vmt.forEach(t),T3o=r(rxe," \u2014 "),FD=n(rxe,"A",{href:!0});var Xmt=s(FD);M3o=r(Xmt,"GPT2LMHeadModel"),Xmt.forEach(t),E3o=r(rxe," (OpenAI GPT-2 model)"),rxe.forEach(t),C3o=i(O),Yu=n(O,"LI",{});var txe=s(Yu);lfe=n(txe,"STRONG",{});var zmt=s(lfe);w3o=r(zmt,"ibert"),zmt.forEach(t),A3o=r(txe," \u2014 "),TD=n(txe,"A",{href:!0});var Wmt=s(TD);L3o=r(Wmt,"IBertForMaskedLM"),Wmt.forEach(t),y3o=r(txe," (I-BERT model)"),txe.forEach(t),x3o=i(O),Ku=n(O,"LI",{});var axe=s(Ku);ife=n(axe,"STRONG",{});var Qmt=s(ife);$3o=r(Qmt,"layoutlm"),Qmt.forEach(t),k3o=r(axe," \u2014 "),MD=n(axe,"A",{href:!0});var Hmt=s(MD);S3o=r(Hmt,"LayoutLMForMaskedLM"),Hmt.forEach(t),R3o=r(axe," (LayoutLM model)"),axe.forEach(t),P3o=i(O),Zu=n(O,"LI",{});var nxe=s(Zu);dfe=n(nxe,"STRONG",{});var Umt=s(dfe);B3o=r(Umt,"longformer"),Umt.forEach(t),I3o=r(nxe," \u2014 "),ED=n(nxe,"A",{href:!0});var Jmt=s(ED);N3o=r(Jmt,"LongformerForMaskedLM"),Jmt.forEach(t),q3o=r(nxe," (Longformer model)"),nxe.forEach(t),j3o=i(O),e1=n(O,"LI",{});var sxe=s(e1);cfe=n(sxe,"STRONG",{});var Ymt=s(cfe);D3o=r(Ymt,"lxmert"),Ymt.forEach(t),G3o=r(sxe," \u2014 "),CD=n(sxe,"A",{href:!0});var Kmt=s(CD);O3o=r(Kmt,"LxmertForPreTraining"),Kmt.forEach(t),V3o=r(sxe," (LXMERT model)"),sxe.forEach(t),X3o=i(O),o1=n(O,"LI",{});var lxe=s(o1);ffe=n(lxe,"STRONG",{});var Zmt=s(ffe);z3o=r(Zmt,"megatron-bert"),Zmt.forEach(t),W3o=r(lxe," \u2014 "),wD=n(lxe,"A",{href:!0});var egt=s(wD);Q3o=r(egt,"MegatronBertForPreTraining"),egt.forEach(t),H3o=r(lxe," (Megatron-BERT model)"),lxe.forEach(t),U3o=i(O),r1=n(O,"LI",{});var ixe=s(r1);mfe=n(ixe,"STRONG",{});var ogt=s(mfe);J3o=r(ogt,"mobilebert"),ogt.forEach(t),Y3o=r(ixe," \u2014 "),AD=n(ixe,"A",{href:!0});var rgt=s(AD);K3o=r(rgt,"MobileBertForPreTraining"),rgt.forEach(t),Z3o=r(ixe," (MobileBERT model)"),ixe.forEach(t),e0o=i(O),t1=n(O,"LI",{});var dxe=s(t1);gfe=n(dxe,"STRONG",{});var tgt=s(gfe);o0o=r(tgt,"mpnet"),tgt.forEach(t),r0o=r(dxe," \u2014 "),LD=n(dxe,"A",{href:!0});var agt=s(LD);t0o=r(agt,"MPNetForMaskedLM"),agt.forEach(t),a0o=r(dxe," (MPNet model)"),dxe.forEach(t),n0o=i(O),a1=n(O,"LI",{});var cxe=s(a1);hfe=n(cxe,"STRONG",{});var ngt=s(hfe);s0o=r(ngt,"openai-gpt"),ngt.forEach(t),l0o=r(cxe," \u2014 "),yD=n(cxe,"A",{href:!0});var sgt=s(yD);i0o=r(sgt,"OpenAIGPTLMHeadModel"),sgt.forEach(t),d0o=r(cxe," (OpenAI GPT model)"),cxe.forEach(t),c0o=i(O),n1=n(O,"LI",{});var fxe=s(n1);pfe=n(fxe,"STRONG",{});var lgt=s(pfe);f0o=r(lgt,"retribert"),lgt.forEach(t),m0o=r(fxe," \u2014 "),xD=n(fxe,"A",{href:!0});var igt=s(xD);g0o=r(igt,"RetriBertModel"),igt.forEach(t),h0o=r(fxe," (RetriBERT model)"),fxe.forEach(t),p0o=i(O),s1=n(O,"LI",{});var mxe=s(s1);_fe=n(mxe,"STRONG",{});var dgt=s(_fe);_0o=r(dgt,"roberta"),dgt.forEach(t),u0o=r(mxe," \u2014 "),$D=n(mxe,"A",{href:!0});var cgt=s($D);b0o=r(cgt,"RobertaForMaskedLM"),cgt.forEach(t),v0o=r(mxe," (RoBERTa model)"),mxe.forEach(t),F0o=i(O),l1=n(O,"LI",{});var gxe=s(l1);ufe=n(gxe,"STRONG",{});var fgt=s(ufe);T0o=r(fgt,"splinter"),fgt.forEach(t),M0o=r(gxe," \u2014 "),kD=n(gxe,"A",{href:!0});var mgt=s(kD);E0o=r(mgt,"SplinterForPreTraining"),mgt.forEach(t),C0o=r(gxe," (Splinter model)"),gxe.forEach(t),w0o=i(O),i1=n(O,"LI",{});var hxe=s(i1);bfe=n(hxe,"STRONG",{});var ggt=s(bfe);A0o=r(ggt,"squeezebert"),ggt.forEach(t),L0o=r(hxe," \u2014 "),SD=n(hxe,"A",{href:!0});var hgt=s(SD);y0o=r(hgt,"SqueezeBertForMaskedLM"),hgt.forEach(t),x0o=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),$0o=i(O),d1=n(O,"LI",{});var pxe=s(d1);vfe=n(pxe,"STRONG",{});var pgt=s(vfe);k0o=r(pgt,"t5"),pgt.forEach(t),S0o=r(pxe," \u2014 "),RD=n(pxe,"A",{href:!0});var _gt=s(RD);R0o=r(_gt,"T5ForConditionalGeneration"),_gt.forEach(t),P0o=r(pxe," (T5 model)"),pxe.forEach(t),B0o=i(O),c1=n(O,"LI",{});var _xe=s(c1);Ffe=n(_xe,"STRONG",{});var ugt=s(Ffe);I0o=r(ugt,"tapas"),ugt.forEach(t),N0o=r(_xe," \u2014 "),PD=n(_xe,"A",{href:!0});var bgt=s(PD);q0o=r(bgt,"TapasForMaskedLM"),bgt.forEach(t),j0o=r(_xe," (TAPAS model)"),_xe.forEach(t),D0o=i(O),f1=n(O,"LI",{});var uxe=s(f1);Tfe=n(uxe,"STRONG",{});var vgt=s(Tfe);G0o=r(vgt,"transfo-xl"),vgt.forEach(t),O0o=r(uxe," \u2014 "),BD=n(uxe,"A",{href:!0});var Fgt=s(BD);V0o=r(Fgt,"TransfoXLLMHeadModel"),Fgt.forEach(t),X0o=r(uxe," (Transformer-XL model)"),uxe.forEach(t),z0o=i(O),m1=n(O,"LI",{});var bxe=s(m1);Mfe=n(bxe,"STRONG",{});var Tgt=s(Mfe);W0o=r(Tgt,"unispeech"),Tgt.forEach(t),Q0o=r(bxe," \u2014 "),ID=n(bxe,"A",{href:!0});var Mgt=s(ID);H0o=r(Mgt,"UniSpeechForPreTraining"),Mgt.forEach(t),U0o=r(bxe," (UniSpeech model)"),bxe.forEach(t),J0o=i(O),g1=n(O,"LI",{});var vxe=s(g1);Efe=n(vxe,"STRONG",{});var Egt=s(Efe);Y0o=r(Egt,"unispeech-sat"),Egt.forEach(t),K0o=r(vxe," \u2014 "),ND=n(vxe,"A",{href:!0});var Cgt=s(ND);Z0o=r(Cgt,"UniSpeechSatForPreTraining"),Cgt.forEach(t),ewo=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),owo=i(O),h1=n(O,"LI",{});var Fxe=s(h1);Cfe=n(Fxe,"STRONG",{});var wgt=s(Cfe);rwo=r(wgt,"visual_bert"),wgt.forEach(t),two=r(Fxe," \u2014 "),qD=n(Fxe,"A",{href:!0});var Agt=s(qD);awo=r(Agt,"VisualBertForPreTraining"),Agt.forEach(t),nwo=r(Fxe," (VisualBERT model)"),Fxe.forEach(t),swo=i(O),p1=n(O,"LI",{});var Txe=s(p1);wfe=n(Txe,"STRONG",{});var Lgt=s(wfe);lwo=r(Lgt,"vit_mae"),Lgt.forEach(t),iwo=r(Txe," \u2014 "),jD=n(Txe,"A",{href:!0});var ygt=s(jD);dwo=r(ygt,"ViTMAEForPreTraining"),ygt.forEach(t),cwo=r(Txe," (ViTMAE model)"),Txe.forEach(t),fwo=i(O),_1=n(O,"LI",{});var Mxe=s(_1);Afe=n(Mxe,"STRONG",{});var xgt=s(Afe);mwo=r(xgt,"wav2vec2"),xgt.forEach(t),gwo=r(Mxe," \u2014 "),DD=n(Mxe,"A",{href:!0});var $gt=s(DD);hwo=r($gt,"Wav2Vec2ForPreTraining"),$gt.forEach(t),pwo=r(Mxe," (Wav2Vec2 model)"),Mxe.forEach(t),_wo=i(O),u1=n(O,"LI",{});var Exe=s(u1);Lfe=n(Exe,"STRONG",{});var kgt=s(Lfe);uwo=r(kgt,"wav2vec2-conformer"),kgt.forEach(t),bwo=r(Exe," \u2014 "),GD=n(Exe,"A",{href:!0});var Sgt=s(GD);vwo=r(Sgt,"Wav2Vec2ConformerForPreTraining"),Sgt.forEach(t),Fwo=r(Exe," (Wav2Vec2-Conformer model)"),Exe.forEach(t),Two=i(O),b1=n(O,"LI",{});var Cxe=s(b1);yfe=n(Cxe,"STRONG",{});var Rgt=s(yfe);Mwo=r(Rgt,"xlm"),Rgt.forEach(t),Ewo=r(Cxe," \u2014 "),OD=n(Cxe,"A",{href:!0});var Pgt=s(OD);Cwo=r(Pgt,"XLMWithLMHeadModel"),Pgt.forEach(t),wwo=r(Cxe," (XLM model)"),Cxe.forEach(t),Awo=i(O),v1=n(O,"LI",{});var wxe=s(v1);xfe=n(wxe,"STRONG",{});var Bgt=s(xfe);Lwo=r(Bgt,"xlm-roberta"),Bgt.forEach(t),ywo=r(wxe," \u2014 "),VD=n(wxe,"A",{href:!0});var Igt=s(VD);xwo=r(Igt,"XLMRobertaForMaskedLM"),Igt.forEach(t),$wo=r(wxe," (XLM-RoBERTa model)"),wxe.forEach(t),kwo=i(O),F1=n(O,"LI",{});var Axe=s(F1);$fe=n(Axe,"STRONG",{});var Ngt=s($fe);Swo=r(Ngt,"xlm-roberta-xl"),Ngt.forEach(t),Rwo=r(Axe," \u2014 "),XD=n(Axe,"A",{href:!0});var qgt=s(XD);Pwo=r(qgt,"XLMRobertaXLForMaskedLM"),qgt.forEach(t),Bwo=r(Axe," (XLM-RoBERTa-XL model)"),Axe.forEach(t),Iwo=i(O),T1=n(O,"LI",{});var Lxe=s(T1);kfe=n(Lxe,"STRONG",{});var jgt=s(kfe);Nwo=r(jgt,"xlnet"),jgt.forEach(t),qwo=r(Lxe," \u2014 "),zD=n(Lxe,"A",{href:!0});var Dgt=s(zD);jwo=r(Dgt,"XLNetLMHeadModel"),Dgt.forEach(t),Dwo=r(Lxe," (XLNet model)"),Lxe.forEach(t),O.forEach(t),Gwo=i(sa),M1=n(sa,"P",{});var yxe=s(M1);Owo=r(yxe,"The model is set in evaluation mode by default using "),Sfe=n(yxe,"CODE",{});var Ggt=s(Sfe);Vwo=r(Ggt,"model.eval()"),Ggt.forEach(t),Xwo=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rfe=n(yxe,"CODE",{});var Ogt=s(Rfe);zwo=r(Ogt,"model.train()"),Ogt.forEach(t),yxe.forEach(t),Wwo=i(sa),T(E1.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),VGe=i(f),Oi=n(f,"H2",{class:!0});var UVe=s(Oi);C1=n(UVe,"A",{id:!0,class:!0,href:!0});var Vgt=s(C1);Pfe=n(Vgt,"SPAN",{});var Xgt=s(Pfe);T(dL.$$.fragment,Xgt),Xgt.forEach(t),Vgt.forEach(t),Qwo=i(UVe),Bfe=n(UVe,"SPAN",{});var zgt=s(Bfe);Hwo=r(zgt,"AutoModelForCausalLM"),zgt.forEach(t),UVe.forEach(t),XGe=i(f),ko=n(f,"DIV",{class:!0});var Ks=s(ko);T(cL.$$.fragment,Ks),Uwo=i(Ks),Vi=n(Ks,"P",{});var _oe=s(Vi);Jwo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WD=n(_oe,"A",{href:!0});var Wgt=s(WD);Ywo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),Kwo=r(_oe," class method or the "),QD=n(_oe,"A",{href:!0});var Qgt=s(QD);Zwo=r(Qgt,"from_config()"),Qgt.forEach(t),eAo=r(_oe,` class
method.`),_oe.forEach(t),oAo=i(Ks),fL=n(Ks,"P",{});var JVe=s(fL);rAo=r(JVe,"This class cannot be instantiated directly using "),Ife=n(JVe,"CODE",{});var Hgt=s(Ife);tAo=r(Hgt,"__init__()"),Hgt.forEach(t),aAo=r(JVe," (throws an error)."),JVe.forEach(t),nAo=i(Ks),it=n(Ks,"DIV",{class:!0});var R0=s(it);T(mL.$$.fragment,R0),sAo=i(R0),Nfe=n(R0,"P",{});var Ugt=s(Nfe);lAo=r(Ugt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ugt.forEach(t),iAo=i(R0),Xi=n(R0,"P",{});var uoe=s(Xi);dAo=r(uoe,`Note:
Loading a model from its configuration file does `),qfe=n(uoe,"STRONG",{});var Jgt=s(qfe);cAo=r(Jgt,"not"),Jgt.forEach(t),fAo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(uoe,"A",{href:!0});var Ygt=s(HD);mAo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),gAo=r(uoe," to load the model weights."),uoe.forEach(t),hAo=i(R0),T(w1.$$.fragment,R0),R0.forEach(t),pAo=i(Ks),Ke=n(Ks,"DIV",{class:!0});var la=s(Ke);T(gL.$$.fragment,la),_Ao=i(la),jfe=n(la,"P",{});var Kgt=s(jfe);uAo=r(Kgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kgt.forEach(t),bAo=i(la),Ba=n(la,"P",{});var P0=s(Ba);vAo=r(P0,"The model class to instantiate is selected based on the "),Dfe=n(P0,"CODE",{});var Zgt=s(Dfe);FAo=r(Zgt,"model_type"),Zgt.forEach(t),TAo=r(P0,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(P0,"CODE",{});var eht=s(Gfe);MAo=r(eht,"pretrained_model_name_or_path"),eht.forEach(t),EAo=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(P0,"CODE",{});var oht=s(Ofe);CAo=r(oht,"pretrained_model_name_or_path"),oht.forEach(t),wAo=r(P0,":"),P0.forEach(t),AAo=i(la),z=n(la,"UL",{});var W=s(z);A1=n(W,"LI",{});var xxe=s(A1);Vfe=n(xxe,"STRONG",{});var rht=s(Vfe);LAo=r(rht,"bart"),rht.forEach(t),yAo=r(xxe," \u2014 "),UD=n(xxe,"A",{href:!0});var tht=s(UD);xAo=r(tht,"BartForCausalLM"),tht.forEach(t),$Ao=r(xxe," (BART model)"),xxe.forEach(t),kAo=i(W),L1=n(W,"LI",{});var $xe=s(L1);Xfe=n($xe,"STRONG",{});var aht=s(Xfe);SAo=r(aht,"bert"),aht.forEach(t),RAo=r($xe," \u2014 "),JD=n($xe,"A",{href:!0});var nht=s(JD);PAo=r(nht,"BertLMHeadModel"),nht.forEach(t),BAo=r($xe," (BERT model)"),$xe.forEach(t),IAo=i(W),y1=n(W,"LI",{});var kxe=s(y1);zfe=n(kxe,"STRONG",{});var sht=s(zfe);NAo=r(sht,"bert-generation"),sht.forEach(t),qAo=r(kxe," \u2014 "),YD=n(kxe,"A",{href:!0});var lht=s(YD);jAo=r(lht,"BertGenerationDecoder"),lht.forEach(t),DAo=r(kxe," (Bert Generation model)"),kxe.forEach(t),GAo=i(W),x1=n(W,"LI",{});var Sxe=s(x1);Wfe=n(Sxe,"STRONG",{});var iht=s(Wfe);OAo=r(iht,"big_bird"),iht.forEach(t),VAo=r(Sxe," \u2014 "),KD=n(Sxe,"A",{href:!0});var dht=s(KD);XAo=r(dht,"BigBirdForCausalLM"),dht.forEach(t),zAo=r(Sxe," (BigBird model)"),Sxe.forEach(t),WAo=i(W),$1=n(W,"LI",{});var Rxe=s($1);Qfe=n(Rxe,"STRONG",{});var cht=s(Qfe);QAo=r(cht,"bigbird_pegasus"),cht.forEach(t),HAo=r(Rxe," \u2014 "),ZD=n(Rxe,"A",{href:!0});var fht=s(ZD);UAo=r(fht,"BigBirdPegasusForCausalLM"),fht.forEach(t),JAo=r(Rxe," (BigBird-Pegasus model)"),Rxe.forEach(t),YAo=i(W),k1=n(W,"LI",{});var Pxe=s(k1);Hfe=n(Pxe,"STRONG",{});var mht=s(Hfe);KAo=r(mht,"blenderbot"),mht.forEach(t),ZAo=r(Pxe," \u2014 "),eG=n(Pxe,"A",{href:!0});var ght=s(eG);eLo=r(ght,"BlenderbotForCausalLM"),ght.forEach(t),oLo=r(Pxe," (Blenderbot model)"),Pxe.forEach(t),rLo=i(W),S1=n(W,"LI",{});var Bxe=s(S1);Ufe=n(Bxe,"STRONG",{});var hht=s(Ufe);tLo=r(hht,"blenderbot-small"),hht.forEach(t),aLo=r(Bxe," \u2014 "),oG=n(Bxe,"A",{href:!0});var pht=s(oG);nLo=r(pht,"BlenderbotSmallForCausalLM"),pht.forEach(t),sLo=r(Bxe," (BlenderbotSmall model)"),Bxe.forEach(t),lLo=i(W),R1=n(W,"LI",{});var Ixe=s(R1);Jfe=n(Ixe,"STRONG",{});var _ht=s(Jfe);iLo=r(_ht,"bloom"),_ht.forEach(t),dLo=r(Ixe," \u2014 "),rG=n(Ixe,"A",{href:!0});var uht=s(rG);cLo=r(uht,"BloomForCausalLM"),uht.forEach(t),fLo=r(Ixe," (BLOOM model)"),Ixe.forEach(t),mLo=i(W),P1=n(W,"LI",{});var Nxe=s(P1);Yfe=n(Nxe,"STRONG",{});var bht=s(Yfe);gLo=r(bht,"camembert"),bht.forEach(t),hLo=r(Nxe," \u2014 "),tG=n(Nxe,"A",{href:!0});var vht=s(tG);pLo=r(vht,"CamembertForCausalLM"),vht.forEach(t),_Lo=r(Nxe," (CamemBERT model)"),Nxe.forEach(t),uLo=i(W),B1=n(W,"LI",{});var qxe=s(B1);Kfe=n(qxe,"STRONG",{});var Fht=s(Kfe);bLo=r(Fht,"ctrl"),Fht.forEach(t),vLo=r(qxe," \u2014 "),aG=n(qxe,"A",{href:!0});var Tht=s(aG);FLo=r(Tht,"CTRLLMHeadModel"),Tht.forEach(t),TLo=r(qxe," (CTRL model)"),qxe.forEach(t),MLo=i(W),I1=n(W,"LI",{});var jxe=s(I1);Zfe=n(jxe,"STRONG",{});var Mht=s(Zfe);ELo=r(Mht,"data2vec-text"),Mht.forEach(t),CLo=r(jxe," \u2014 "),nG=n(jxe,"A",{href:!0});var Eht=s(nG);wLo=r(Eht,"Data2VecTextForCausalLM"),Eht.forEach(t),ALo=r(jxe," (Data2VecText model)"),jxe.forEach(t),LLo=i(W),N1=n(W,"LI",{});var Dxe=s(N1);eme=n(Dxe,"STRONG",{});var Cht=s(eme);yLo=r(Cht,"electra"),Cht.forEach(t),xLo=r(Dxe," \u2014 "),sG=n(Dxe,"A",{href:!0});var wht=s(sG);$Lo=r(wht,"ElectraForCausalLM"),wht.forEach(t),kLo=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),SLo=i(W),q1=n(W,"LI",{});var Gxe=s(q1);ome=n(Gxe,"STRONG",{});var Aht=s(ome);RLo=r(Aht,"gpt2"),Aht.forEach(t),PLo=r(Gxe," \u2014 "),lG=n(Gxe,"A",{href:!0});var Lht=s(lG);BLo=r(Lht,"GPT2LMHeadModel"),Lht.forEach(t),ILo=r(Gxe," (OpenAI GPT-2 model)"),Gxe.forEach(t),NLo=i(W),j1=n(W,"LI",{});var Oxe=s(j1);rme=n(Oxe,"STRONG",{});var yht=s(rme);qLo=r(yht,"gpt_neo"),yht.forEach(t),jLo=r(Oxe," \u2014 "),iG=n(Oxe,"A",{href:!0});var xht=s(iG);DLo=r(xht,"GPTNeoForCausalLM"),xht.forEach(t),GLo=r(Oxe," (GPT Neo model)"),Oxe.forEach(t),OLo=i(W),D1=n(W,"LI",{});var Vxe=s(D1);tme=n(Vxe,"STRONG",{});var $ht=s(tme);VLo=r($ht,"gpt_neox"),$ht.forEach(t),XLo=r(Vxe," \u2014 "),dG=n(Vxe,"A",{href:!0});var kht=s(dG);zLo=r(kht,"GPTNeoXForCausalLM"),kht.forEach(t),WLo=r(Vxe," (GPT NeoX model)"),Vxe.forEach(t),QLo=i(W),G1=n(W,"LI",{});var Xxe=s(G1);ame=n(Xxe,"STRONG",{});var Sht=s(ame);HLo=r(Sht,"gptj"),Sht.forEach(t),ULo=r(Xxe," \u2014 "),cG=n(Xxe,"A",{href:!0});var Rht=s(cG);JLo=r(Rht,"GPTJForCausalLM"),Rht.forEach(t),YLo=r(Xxe," (GPT-J model)"),Xxe.forEach(t),KLo=i(W),O1=n(W,"LI",{});var zxe=s(O1);nme=n(zxe,"STRONG",{});var Pht=s(nme);ZLo=r(Pht,"marian"),Pht.forEach(t),eyo=r(zxe," \u2014 "),fG=n(zxe,"A",{href:!0});var Bht=s(fG);oyo=r(Bht,"MarianForCausalLM"),Bht.forEach(t),ryo=r(zxe," (Marian model)"),zxe.forEach(t),tyo=i(W),V1=n(W,"LI",{});var Wxe=s(V1);sme=n(Wxe,"STRONG",{});var Iht=s(sme);ayo=r(Iht,"mbart"),Iht.forEach(t),nyo=r(Wxe," \u2014 "),mG=n(Wxe,"A",{href:!0});var Nht=s(mG);syo=r(Nht,"MBartForCausalLM"),Nht.forEach(t),lyo=r(Wxe," (mBART model)"),Wxe.forEach(t),iyo=i(W),X1=n(W,"LI",{});var Qxe=s(X1);lme=n(Qxe,"STRONG",{});var qht=s(lme);dyo=r(qht,"megatron-bert"),qht.forEach(t),cyo=r(Qxe," \u2014 "),gG=n(Qxe,"A",{href:!0});var jht=s(gG);fyo=r(jht,"MegatronBertForCausalLM"),jht.forEach(t),myo=r(Qxe," (Megatron-BERT model)"),Qxe.forEach(t),gyo=i(W),z1=n(W,"LI",{});var Hxe=s(z1);ime=n(Hxe,"STRONG",{});var Dht=s(ime);hyo=r(Dht,"openai-gpt"),Dht.forEach(t),pyo=r(Hxe," \u2014 "),hG=n(Hxe,"A",{href:!0});var Ght=s(hG);_yo=r(Ght,"OpenAIGPTLMHeadModel"),Ght.forEach(t),uyo=r(Hxe," (OpenAI GPT model)"),Hxe.forEach(t),byo=i(W),W1=n(W,"LI",{});var Uxe=s(W1);dme=n(Uxe,"STRONG",{});var Oht=s(dme);vyo=r(Oht,"opt"),Oht.forEach(t),Fyo=r(Uxe," \u2014 "),pG=n(Uxe,"A",{href:!0});var Vht=s(pG);Tyo=r(Vht,"OPTForCausalLM"),Vht.forEach(t),Myo=r(Uxe," (OPT model)"),Uxe.forEach(t),Eyo=i(W),Q1=n(W,"LI",{});var Jxe=s(Q1);cme=n(Jxe,"STRONG",{});var Xht=s(cme);Cyo=r(Xht,"pegasus"),Xht.forEach(t),wyo=r(Jxe," \u2014 "),_G=n(Jxe,"A",{href:!0});var zht=s(_G);Ayo=r(zht,"PegasusForCausalLM"),zht.forEach(t),Lyo=r(Jxe," (Pegasus model)"),Jxe.forEach(t),yyo=i(W),H1=n(W,"LI",{});var Yxe=s(H1);fme=n(Yxe,"STRONG",{});var Wht=s(fme);xyo=r(Wht,"plbart"),Wht.forEach(t),$yo=r(Yxe," \u2014 "),uG=n(Yxe,"A",{href:!0});var Qht=s(uG);kyo=r(Qht,"PLBartForCausalLM"),Qht.forEach(t),Syo=r(Yxe," (PLBart model)"),Yxe.forEach(t),Ryo=i(W),U1=n(W,"LI",{});var Kxe=s(U1);mme=n(Kxe,"STRONG",{});var Hht=s(mme);Pyo=r(Hht,"prophetnet"),Hht.forEach(t),Byo=r(Kxe," \u2014 "),bG=n(Kxe,"A",{href:!0});var Uht=s(bG);Iyo=r(Uht,"ProphetNetForCausalLM"),Uht.forEach(t),Nyo=r(Kxe," (ProphetNet model)"),Kxe.forEach(t),qyo=i(W),J1=n(W,"LI",{});var Zxe=s(J1);gme=n(Zxe,"STRONG",{});var Jht=s(gme);jyo=r(Jht,"qdqbert"),Jht.forEach(t),Dyo=r(Zxe," \u2014 "),vG=n(Zxe,"A",{href:!0});var Yht=s(vG);Gyo=r(Yht,"QDQBertLMHeadModel"),Yht.forEach(t),Oyo=r(Zxe," (QDQBert model)"),Zxe.forEach(t),Vyo=i(W),Y1=n(W,"LI",{});var e$e=s(Y1);hme=n(e$e,"STRONG",{});var Kht=s(hme);Xyo=r(Kht,"reformer"),Kht.forEach(t),zyo=r(e$e," \u2014 "),FG=n(e$e,"A",{href:!0});var Zht=s(FG);Wyo=r(Zht,"ReformerModelWithLMHead"),Zht.forEach(t),Qyo=r(e$e," (Reformer model)"),e$e.forEach(t),Hyo=i(W),K1=n(W,"LI",{});var o$e=s(K1);pme=n(o$e,"STRONG",{});var ept=s(pme);Uyo=r(ept,"rembert"),ept.forEach(t),Jyo=r(o$e," \u2014 "),TG=n(o$e,"A",{href:!0});var opt=s(TG);Yyo=r(opt,"RemBertForCausalLM"),opt.forEach(t),Kyo=r(o$e," (RemBERT model)"),o$e.forEach(t),Zyo=i(W),Z1=n(W,"LI",{});var r$e=s(Z1);_me=n(r$e,"STRONG",{});var rpt=s(_me);e8o=r(rpt,"roberta"),rpt.forEach(t),o8o=r(r$e," \u2014 "),MG=n(r$e,"A",{href:!0});var tpt=s(MG);r8o=r(tpt,"RobertaForCausalLM"),tpt.forEach(t),t8o=r(r$e," (RoBERTa model)"),r$e.forEach(t),a8o=i(W),e2=n(W,"LI",{});var t$e=s(e2);ume=n(t$e,"STRONG",{});var apt=s(ume);n8o=r(apt,"roformer"),apt.forEach(t),s8o=r(t$e," \u2014 "),EG=n(t$e,"A",{href:!0});var npt=s(EG);l8o=r(npt,"RoFormerForCausalLM"),npt.forEach(t),i8o=r(t$e," (RoFormer model)"),t$e.forEach(t),d8o=i(W),o2=n(W,"LI",{});var a$e=s(o2);bme=n(a$e,"STRONG",{});var spt=s(bme);c8o=r(spt,"speech_to_text_2"),spt.forEach(t),f8o=r(a$e," \u2014 "),CG=n(a$e,"A",{href:!0});var lpt=s(CG);m8o=r(lpt,"Speech2Text2ForCausalLM"),lpt.forEach(t),g8o=r(a$e," (Speech2Text2 model)"),a$e.forEach(t),h8o=i(W),r2=n(W,"LI",{});var n$e=s(r2);vme=n(n$e,"STRONG",{});var ipt=s(vme);p8o=r(ipt,"transfo-xl"),ipt.forEach(t),_8o=r(n$e," \u2014 "),wG=n(n$e,"A",{href:!0});var dpt=s(wG);u8o=r(dpt,"TransfoXLLMHeadModel"),dpt.forEach(t),b8o=r(n$e," (Transformer-XL model)"),n$e.forEach(t),v8o=i(W),t2=n(W,"LI",{});var s$e=s(t2);Fme=n(s$e,"STRONG",{});var cpt=s(Fme);F8o=r(cpt,"trocr"),cpt.forEach(t),T8o=r(s$e," \u2014 "),AG=n(s$e,"A",{href:!0});var fpt=s(AG);M8o=r(fpt,"TrOCRForCausalLM"),fpt.forEach(t),E8o=r(s$e," (TrOCR model)"),s$e.forEach(t),C8o=i(W),a2=n(W,"LI",{});var l$e=s(a2);Tme=n(l$e,"STRONG",{});var mpt=s(Tme);w8o=r(mpt,"xglm"),mpt.forEach(t),A8o=r(l$e," \u2014 "),LG=n(l$e,"A",{href:!0});var gpt=s(LG);L8o=r(gpt,"XGLMForCausalLM"),gpt.forEach(t),y8o=r(l$e," (XGLM model)"),l$e.forEach(t),x8o=i(W),n2=n(W,"LI",{});var i$e=s(n2);Mme=n(i$e,"STRONG",{});var hpt=s(Mme);$8o=r(hpt,"xlm"),hpt.forEach(t),k8o=r(i$e," \u2014 "),yG=n(i$e,"A",{href:!0});var ppt=s(yG);S8o=r(ppt,"XLMWithLMHeadModel"),ppt.forEach(t),R8o=r(i$e," (XLM model)"),i$e.forEach(t),P8o=i(W),s2=n(W,"LI",{});var d$e=s(s2);Eme=n(d$e,"STRONG",{});var _pt=s(Eme);B8o=r(_pt,"xlm-prophetnet"),_pt.forEach(t),I8o=r(d$e," \u2014 "),xG=n(d$e,"A",{href:!0});var upt=s(xG);N8o=r(upt,"XLMProphetNetForCausalLM"),upt.forEach(t),q8o=r(d$e," (XLM-ProphetNet model)"),d$e.forEach(t),j8o=i(W),l2=n(W,"LI",{});var c$e=s(l2);Cme=n(c$e,"STRONG",{});var bpt=s(Cme);D8o=r(bpt,"xlm-roberta"),bpt.forEach(t),G8o=r(c$e," \u2014 "),$G=n(c$e,"A",{href:!0});var vpt=s($G);O8o=r(vpt,"XLMRobertaForCausalLM"),vpt.forEach(t),V8o=r(c$e," (XLM-RoBERTa model)"),c$e.forEach(t),X8o=i(W),i2=n(W,"LI",{});var f$e=s(i2);wme=n(f$e,"STRONG",{});var Fpt=s(wme);z8o=r(Fpt,"xlm-roberta-xl"),Fpt.forEach(t),W8o=r(f$e," \u2014 "),kG=n(f$e,"A",{href:!0});var Tpt=s(kG);Q8o=r(Tpt,"XLMRobertaXLForCausalLM"),Tpt.forEach(t),H8o=r(f$e," (XLM-RoBERTa-XL model)"),f$e.forEach(t),U8o=i(W),d2=n(W,"LI",{});var m$e=s(d2);Ame=n(m$e,"STRONG",{});var Mpt=s(Ame);J8o=r(Mpt,"xlnet"),Mpt.forEach(t),Y8o=r(m$e," \u2014 "),SG=n(m$e,"A",{href:!0});var Ept=s(SG);K8o=r(Ept,"XLNetLMHeadModel"),Ept.forEach(t),Z8o=r(m$e," (XLNet model)"),m$e.forEach(t),W.forEach(t),exo=i(la),c2=n(la,"P",{});var g$e=s(c2);oxo=r(g$e,"The model is set in evaluation mode by default using "),Lme=n(g$e,"CODE",{});var Cpt=s(Lme);rxo=r(Cpt,"model.eval()"),Cpt.forEach(t),txo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(g$e,"CODE",{});var wpt=s(yme);axo=r(wpt,"model.train()"),wpt.forEach(t),g$e.forEach(t),nxo=i(la),T(f2.$$.fragment,la),la.forEach(t),Ks.forEach(t),zGe=i(f),zi=n(f,"H2",{class:!0});var YVe=s(zi);m2=n(YVe,"A",{id:!0,class:!0,href:!0});var Apt=s(m2);xme=n(Apt,"SPAN",{});var Lpt=s(xme);T(hL.$$.fragment,Lpt),Lpt.forEach(t),Apt.forEach(t),sxo=i(YVe),$me=n(YVe,"SPAN",{});var ypt=s($me);lxo=r(ypt,"AutoModelForMaskedLM"),ypt.forEach(t),YVe.forEach(t),WGe=i(f),So=n(f,"DIV",{class:!0});var Zs=s(So);T(pL.$$.fragment,Zs),ixo=i(Zs),Wi=n(Zs,"P",{});var boe=s(Wi);dxo=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RG=n(boe,"A",{href:!0});var xpt=s(RG);cxo=r(xpt,"from_pretrained()"),xpt.forEach(t),fxo=r(boe," class method or the "),PG=n(boe,"A",{href:!0});var $pt=s(PG);mxo=r($pt,"from_config()"),$pt.forEach(t),gxo=r(boe,` class
method.`),boe.forEach(t),hxo=i(Zs),_L=n(Zs,"P",{});var KVe=s(_L);pxo=r(KVe,"This class cannot be instantiated directly using "),kme=n(KVe,"CODE",{});var kpt=s(kme);_xo=r(kpt,"__init__()"),kpt.forEach(t),uxo=r(KVe," (throws an error)."),KVe.forEach(t),bxo=i(Zs),dt=n(Zs,"DIV",{class:!0});var B0=s(dt);T(uL.$$.fragment,B0),vxo=i(B0),Sme=n(B0,"P",{});var Spt=s(Sme);Fxo=r(Spt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Spt.forEach(t),Txo=i(B0),Qi=n(B0,"P",{});var voe=s(Qi);Mxo=r(voe,`Note:
Loading a model from its configuration file does `),Rme=n(voe,"STRONG",{});var Rpt=s(Rme);Exo=r(Rpt,"not"),Rpt.forEach(t),Cxo=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(voe,"A",{href:!0});var Ppt=s(BG);wxo=r(Ppt,"from_pretrained()"),Ppt.forEach(t),Axo=r(voe," to load the model weights."),voe.forEach(t),Lxo=i(B0),T(g2.$$.fragment,B0),B0.forEach(t),yxo=i(Zs),Ze=n(Zs,"DIV",{class:!0});var ia=s(Ze);T(bL.$$.fragment,ia),xxo=i(ia),Pme=n(ia,"P",{});var Bpt=s(Pme);$xo=r(Bpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Bpt.forEach(t),kxo=i(ia),Ia=n(ia,"P",{});var I0=s(Ia);Sxo=r(I0,"The model class to instantiate is selected based on the "),Bme=n(I0,"CODE",{});var Ipt=s(Bme);Rxo=r(Ipt,"model_type"),Ipt.forEach(t),Pxo=r(I0,` property of the config object (either
passed as an argument or loaded from `),Ime=n(I0,"CODE",{});var Npt=s(Ime);Bxo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),Ixo=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(I0,"CODE",{});var qpt=s(Nme);Nxo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),qxo=r(I0,":"),I0.forEach(t),jxo=i(ia),Q=n(ia,"UL",{});var U=s(Q);h2=n(U,"LI",{});var h$e=s(h2);qme=n(h$e,"STRONG",{});var jpt=s(qme);Dxo=r(jpt,"albert"),jpt.forEach(t),Gxo=r(h$e," \u2014 "),IG=n(h$e,"A",{href:!0});var Dpt=s(IG);Oxo=r(Dpt,"AlbertForMaskedLM"),Dpt.forEach(t),Vxo=r(h$e," (ALBERT model)"),h$e.forEach(t),Xxo=i(U),p2=n(U,"LI",{});var p$e=s(p2);jme=n(p$e,"STRONG",{});var Gpt=s(jme);zxo=r(Gpt,"bart"),Gpt.forEach(t),Wxo=r(p$e," \u2014 "),NG=n(p$e,"A",{href:!0});var Opt=s(NG);Qxo=r(Opt,"BartForConditionalGeneration"),Opt.forEach(t),Hxo=r(p$e," (BART model)"),p$e.forEach(t),Uxo=i(U),_2=n(U,"LI",{});var _$e=s(_2);Dme=n(_$e,"STRONG",{});var Vpt=s(Dme);Jxo=r(Vpt,"bert"),Vpt.forEach(t),Yxo=r(_$e," \u2014 "),qG=n(_$e,"A",{href:!0});var Xpt=s(qG);Kxo=r(Xpt,"BertForMaskedLM"),Xpt.forEach(t),Zxo=r(_$e," (BERT model)"),_$e.forEach(t),e$o=i(U),u2=n(U,"LI",{});var u$e=s(u2);Gme=n(u$e,"STRONG",{});var zpt=s(Gme);o$o=r(zpt,"big_bird"),zpt.forEach(t),r$o=r(u$e," \u2014 "),jG=n(u$e,"A",{href:!0});var Wpt=s(jG);t$o=r(Wpt,"BigBirdForMaskedLM"),Wpt.forEach(t),a$o=r(u$e," (BigBird model)"),u$e.forEach(t),n$o=i(U),b2=n(U,"LI",{});var b$e=s(b2);Ome=n(b$e,"STRONG",{});var Qpt=s(Ome);s$o=r(Qpt,"camembert"),Qpt.forEach(t),l$o=r(b$e," \u2014 "),DG=n(b$e,"A",{href:!0});var Hpt=s(DG);i$o=r(Hpt,"CamembertForMaskedLM"),Hpt.forEach(t),d$o=r(b$e," (CamemBERT model)"),b$e.forEach(t),c$o=i(U),v2=n(U,"LI",{});var v$e=s(v2);Vme=n(v$e,"STRONG",{});var Upt=s(Vme);f$o=r(Upt,"convbert"),Upt.forEach(t),m$o=r(v$e," \u2014 "),GG=n(v$e,"A",{href:!0});var Jpt=s(GG);g$o=r(Jpt,"ConvBertForMaskedLM"),Jpt.forEach(t),h$o=r(v$e," (ConvBERT model)"),v$e.forEach(t),p$o=i(U),F2=n(U,"LI",{});var F$e=s(F2);Xme=n(F$e,"STRONG",{});var Ypt=s(Xme);_$o=r(Ypt,"data2vec-text"),Ypt.forEach(t),u$o=r(F$e," \u2014 "),OG=n(F$e,"A",{href:!0});var Kpt=s(OG);b$o=r(Kpt,"Data2VecTextForMaskedLM"),Kpt.forEach(t),v$o=r(F$e," (Data2VecText model)"),F$e.forEach(t),F$o=i(U),T2=n(U,"LI",{});var T$e=s(T2);zme=n(T$e,"STRONG",{});var Zpt=s(zme);T$o=r(Zpt,"deberta"),Zpt.forEach(t),M$o=r(T$e," \u2014 "),VG=n(T$e,"A",{href:!0});var e_t=s(VG);E$o=r(e_t,"DebertaForMaskedLM"),e_t.forEach(t),C$o=r(T$e," (DeBERTa model)"),T$e.forEach(t),w$o=i(U),M2=n(U,"LI",{});var M$e=s(M2);Wme=n(M$e,"STRONG",{});var o_t=s(Wme);A$o=r(o_t,"deberta-v2"),o_t.forEach(t),L$o=r(M$e," \u2014 "),XG=n(M$e,"A",{href:!0});var r_t=s(XG);y$o=r(r_t,"DebertaV2ForMaskedLM"),r_t.forEach(t),x$o=r(M$e," (DeBERTa-v2 model)"),M$e.forEach(t),$$o=i(U),E2=n(U,"LI",{});var E$e=s(E2);Qme=n(E$e,"STRONG",{});var t_t=s(Qme);k$o=r(t_t,"distilbert"),t_t.forEach(t),S$o=r(E$e," \u2014 "),zG=n(E$e,"A",{href:!0});var a_t=s(zG);R$o=r(a_t,"DistilBertForMaskedLM"),a_t.forEach(t),P$o=r(E$e," (DistilBERT model)"),E$e.forEach(t),B$o=i(U),C2=n(U,"LI",{});var C$e=s(C2);Hme=n(C$e,"STRONG",{});var n_t=s(Hme);I$o=r(n_t,"electra"),n_t.forEach(t),N$o=r(C$e," \u2014 "),WG=n(C$e,"A",{href:!0});var s_t=s(WG);q$o=r(s_t,"ElectraForMaskedLM"),s_t.forEach(t),j$o=r(C$e," (ELECTRA model)"),C$e.forEach(t),D$o=i(U),w2=n(U,"LI",{});var w$e=s(w2);Ume=n(w$e,"STRONG",{});var l_t=s(Ume);G$o=r(l_t,"flaubert"),l_t.forEach(t),O$o=r(w$e," \u2014 "),QG=n(w$e,"A",{href:!0});var i_t=s(QG);V$o=r(i_t,"FlaubertWithLMHeadModel"),i_t.forEach(t),X$o=r(w$e," (FlauBERT model)"),w$e.forEach(t),z$o=i(U),A2=n(U,"LI",{});var A$e=s(A2);Jme=n(A$e,"STRONG",{});var d_t=s(Jme);W$o=r(d_t,"fnet"),d_t.forEach(t),Q$o=r(A$e," \u2014 "),HG=n(A$e,"A",{href:!0});var c_t=s(HG);H$o=r(c_t,"FNetForMaskedLM"),c_t.forEach(t),U$o=r(A$e," (FNet model)"),A$e.forEach(t),J$o=i(U),L2=n(U,"LI",{});var L$e=s(L2);Yme=n(L$e,"STRONG",{});var f_t=s(Yme);Y$o=r(f_t,"funnel"),f_t.forEach(t),K$o=r(L$e," \u2014 "),UG=n(L$e,"A",{href:!0});var m_t=s(UG);Z$o=r(m_t,"FunnelForMaskedLM"),m_t.forEach(t),eko=r(L$e," (Funnel Transformer model)"),L$e.forEach(t),oko=i(U),y2=n(U,"LI",{});var y$e=s(y2);Kme=n(y$e,"STRONG",{});var g_t=s(Kme);rko=r(g_t,"ibert"),g_t.forEach(t),tko=r(y$e," \u2014 "),JG=n(y$e,"A",{href:!0});var h_t=s(JG);ako=r(h_t,"IBertForMaskedLM"),h_t.forEach(t),nko=r(y$e," (I-BERT model)"),y$e.forEach(t),sko=i(U),x2=n(U,"LI",{});var x$e=s(x2);Zme=n(x$e,"STRONG",{});var p_t=s(Zme);lko=r(p_t,"layoutlm"),p_t.forEach(t),iko=r(x$e," \u2014 "),YG=n(x$e,"A",{href:!0});var __t=s(YG);dko=r(__t,"LayoutLMForMaskedLM"),__t.forEach(t),cko=r(x$e," (LayoutLM model)"),x$e.forEach(t),fko=i(U),$2=n(U,"LI",{});var $$e=s($2);ege=n($$e,"STRONG",{});var u_t=s(ege);mko=r(u_t,"longformer"),u_t.forEach(t),gko=r($$e," \u2014 "),KG=n($$e,"A",{href:!0});var b_t=s(KG);hko=r(b_t,"LongformerForMaskedLM"),b_t.forEach(t),pko=r($$e," (Longformer model)"),$$e.forEach(t),_ko=i(U),k2=n(U,"LI",{});var k$e=s(k2);oge=n(k$e,"STRONG",{});var v_t=s(oge);uko=r(v_t,"luke"),v_t.forEach(t),bko=r(k$e," \u2014 "),ZG=n(k$e,"A",{href:!0});var F_t=s(ZG);vko=r(F_t,"LukeForMaskedLM"),F_t.forEach(t),Fko=r(k$e," (LUKE model)"),k$e.forEach(t),Tko=i(U),S2=n(U,"LI",{});var S$e=s(S2);rge=n(S$e,"STRONG",{});var T_t=s(rge);Mko=r(T_t,"mbart"),T_t.forEach(t),Eko=r(S$e," \u2014 "),eO=n(S$e,"A",{href:!0});var M_t=s(eO);Cko=r(M_t,"MBartForConditionalGeneration"),M_t.forEach(t),wko=r(S$e," (mBART model)"),S$e.forEach(t),Ako=i(U),R2=n(U,"LI",{});var R$e=s(R2);tge=n(R$e,"STRONG",{});var E_t=s(tge);Lko=r(E_t,"megatron-bert"),E_t.forEach(t),yko=r(R$e," \u2014 "),oO=n(R$e,"A",{href:!0});var C_t=s(oO);xko=r(C_t,"MegatronBertForMaskedLM"),C_t.forEach(t),$ko=r(R$e," (Megatron-BERT model)"),R$e.forEach(t),kko=i(U),P2=n(U,"LI",{});var P$e=s(P2);age=n(P$e,"STRONG",{});var w_t=s(age);Sko=r(w_t,"mobilebert"),w_t.forEach(t),Rko=r(P$e," \u2014 "),rO=n(P$e,"A",{href:!0});var A_t=s(rO);Pko=r(A_t,"MobileBertForMaskedLM"),A_t.forEach(t),Bko=r(P$e," (MobileBERT model)"),P$e.forEach(t),Iko=i(U),B2=n(U,"LI",{});var B$e=s(B2);nge=n(B$e,"STRONG",{});var L_t=s(nge);Nko=r(L_t,"mpnet"),L_t.forEach(t),qko=r(B$e," \u2014 "),tO=n(B$e,"A",{href:!0});var y_t=s(tO);jko=r(y_t,"MPNetForMaskedLM"),y_t.forEach(t),Dko=r(B$e," (MPNet model)"),B$e.forEach(t),Gko=i(U),I2=n(U,"LI",{});var I$e=s(I2);sge=n(I$e,"STRONG",{});var x_t=s(sge);Oko=r(x_t,"nystromformer"),x_t.forEach(t),Vko=r(I$e," \u2014 "),aO=n(I$e,"A",{href:!0});var $_t=s(aO);Xko=r($_t,"NystromformerForMaskedLM"),$_t.forEach(t),zko=r(I$e," (Nystr\xF6mformer model)"),I$e.forEach(t),Wko=i(U),N2=n(U,"LI",{});var N$e=s(N2);lge=n(N$e,"STRONG",{});var k_t=s(lge);Qko=r(k_t,"perceiver"),k_t.forEach(t),Hko=r(N$e," \u2014 "),nO=n(N$e,"A",{href:!0});var S_t=s(nO);Uko=r(S_t,"PerceiverForMaskedLM"),S_t.forEach(t),Jko=r(N$e," (Perceiver model)"),N$e.forEach(t),Yko=i(U),q2=n(U,"LI",{});var q$e=s(q2);ige=n(q$e,"STRONG",{});var R_t=s(ige);Kko=r(R_t,"qdqbert"),R_t.forEach(t),Zko=r(q$e," \u2014 "),sO=n(q$e,"A",{href:!0});var P_t=s(sO);eSo=r(P_t,"QDQBertForMaskedLM"),P_t.forEach(t),oSo=r(q$e," (QDQBert model)"),q$e.forEach(t),rSo=i(U),j2=n(U,"LI",{});var j$e=s(j2);dge=n(j$e,"STRONG",{});var B_t=s(dge);tSo=r(B_t,"reformer"),B_t.forEach(t),aSo=r(j$e," \u2014 "),lO=n(j$e,"A",{href:!0});var I_t=s(lO);nSo=r(I_t,"ReformerForMaskedLM"),I_t.forEach(t),sSo=r(j$e," (Reformer model)"),j$e.forEach(t),lSo=i(U),D2=n(U,"LI",{});var D$e=s(D2);cge=n(D$e,"STRONG",{});var N_t=s(cge);iSo=r(N_t,"rembert"),N_t.forEach(t),dSo=r(D$e," \u2014 "),iO=n(D$e,"A",{href:!0});var q_t=s(iO);cSo=r(q_t,"RemBertForMaskedLM"),q_t.forEach(t),fSo=r(D$e," (RemBERT model)"),D$e.forEach(t),mSo=i(U),G2=n(U,"LI",{});var G$e=s(G2);fge=n(G$e,"STRONG",{});var j_t=s(fge);gSo=r(j_t,"roberta"),j_t.forEach(t),hSo=r(G$e," \u2014 "),dO=n(G$e,"A",{href:!0});var D_t=s(dO);pSo=r(D_t,"RobertaForMaskedLM"),D_t.forEach(t),_So=r(G$e," (RoBERTa model)"),G$e.forEach(t),uSo=i(U),O2=n(U,"LI",{});var O$e=s(O2);mge=n(O$e,"STRONG",{});var G_t=s(mge);bSo=r(G_t,"roformer"),G_t.forEach(t),vSo=r(O$e," \u2014 "),cO=n(O$e,"A",{href:!0});var O_t=s(cO);FSo=r(O_t,"RoFormerForMaskedLM"),O_t.forEach(t),TSo=r(O$e," (RoFormer model)"),O$e.forEach(t),MSo=i(U),V2=n(U,"LI",{});var V$e=s(V2);gge=n(V$e,"STRONG",{});var V_t=s(gge);ESo=r(V_t,"squeezebert"),V_t.forEach(t),CSo=r(V$e," \u2014 "),fO=n(V$e,"A",{href:!0});var X_t=s(fO);wSo=r(X_t,"SqueezeBertForMaskedLM"),X_t.forEach(t),ASo=r(V$e," (SqueezeBERT model)"),V$e.forEach(t),LSo=i(U),X2=n(U,"LI",{});var X$e=s(X2);hge=n(X$e,"STRONG",{});var z_t=s(hge);ySo=r(z_t,"tapas"),z_t.forEach(t),xSo=r(X$e," \u2014 "),mO=n(X$e,"A",{href:!0});var W_t=s(mO);$So=r(W_t,"TapasForMaskedLM"),W_t.forEach(t),kSo=r(X$e," (TAPAS model)"),X$e.forEach(t),SSo=i(U),z2=n(U,"LI",{});var z$e=s(z2);pge=n(z$e,"STRONG",{});var Q_t=s(pge);RSo=r(Q_t,"wav2vec2"),Q_t.forEach(t),PSo=r(z$e," \u2014 "),_ge=n(z$e,"CODE",{});var H_t=s(_ge);BSo=r(H_t,"Wav2Vec2ForMaskedLM"),H_t.forEach(t),ISo=r(z$e," (Wav2Vec2 model)"),z$e.forEach(t),NSo=i(U),W2=n(U,"LI",{});var W$e=s(W2);uge=n(W$e,"STRONG",{});var U_t=s(uge);qSo=r(U_t,"xlm"),U_t.forEach(t),jSo=r(W$e," \u2014 "),gO=n(W$e,"A",{href:!0});var J_t=s(gO);DSo=r(J_t,"XLMWithLMHeadModel"),J_t.forEach(t),GSo=r(W$e," (XLM model)"),W$e.forEach(t),OSo=i(U),Q2=n(U,"LI",{});var Q$e=s(Q2);bge=n(Q$e,"STRONG",{});var Y_t=s(bge);VSo=r(Y_t,"xlm-roberta"),Y_t.forEach(t),XSo=r(Q$e," \u2014 "),hO=n(Q$e,"A",{href:!0});var K_t=s(hO);zSo=r(K_t,"XLMRobertaForMaskedLM"),K_t.forEach(t),WSo=r(Q$e," (XLM-RoBERTa model)"),Q$e.forEach(t),QSo=i(U),H2=n(U,"LI",{});var H$e=s(H2);vge=n(H$e,"STRONG",{});var Z_t=s(vge);HSo=r(Z_t,"xlm-roberta-xl"),Z_t.forEach(t),USo=r(H$e," \u2014 "),pO=n(H$e,"A",{href:!0});var eut=s(pO);JSo=r(eut,"XLMRobertaXLForMaskedLM"),eut.forEach(t),YSo=r(H$e," (XLM-RoBERTa-XL model)"),H$e.forEach(t),KSo=i(U),U2=n(U,"LI",{});var U$e=s(U2);Fge=n(U$e,"STRONG",{});var out=s(Fge);ZSo=r(out,"yoso"),out.forEach(t),eRo=r(U$e," \u2014 "),_O=n(U$e,"A",{href:!0});var rut=s(_O);oRo=r(rut,"YosoForMaskedLM"),rut.forEach(t),rRo=r(U$e," (YOSO model)"),U$e.forEach(t),U.forEach(t),tRo=i(ia),J2=n(ia,"P",{});var J$e=s(J2);aRo=r(J$e,"The model is set in evaluation mode by default using "),Tge=n(J$e,"CODE",{});var tut=s(Tge);nRo=r(tut,"model.eval()"),tut.forEach(t),sRo=r(J$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(J$e,"CODE",{});var aut=s(Mge);lRo=r(aut,"model.train()"),aut.forEach(t),J$e.forEach(t),iRo=i(ia),T(Y2.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),QGe=i(f),Hi=n(f,"H2",{class:!0});var ZVe=s(Hi);K2=n(ZVe,"A",{id:!0,class:!0,href:!0});var nut=s(K2);Ege=n(nut,"SPAN",{});var sut=s(Ege);T(vL.$$.fragment,sut),sut.forEach(t),nut.forEach(t),dRo=i(ZVe),Cge=n(ZVe,"SPAN",{});var lut=s(Cge);cRo=r(lut,"AutoModelForSeq2SeqLM"),lut.forEach(t),ZVe.forEach(t),HGe=i(f),Ro=n(f,"DIV",{class:!0});var el=s(Ro);T(FL.$$.fragment,el),fRo=i(el),Ui=n(el,"P",{});var Foe=s(Ui);mRo=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uO=n(Foe,"A",{href:!0});var iut=s(uO);gRo=r(iut,"from_pretrained()"),iut.forEach(t),hRo=r(Foe," class method or the "),bO=n(Foe,"A",{href:!0});var dut=s(bO);pRo=r(dut,"from_config()"),dut.forEach(t),_Ro=r(Foe,` class
method.`),Foe.forEach(t),uRo=i(el),TL=n(el,"P",{});var eXe=s(TL);bRo=r(eXe,"This class cannot be instantiated directly using "),wge=n(eXe,"CODE",{});var cut=s(wge);vRo=r(cut,"__init__()"),cut.forEach(t),FRo=r(eXe," (throws an error)."),eXe.forEach(t),TRo=i(el),ct=n(el,"DIV",{class:!0});var N0=s(ct);T(ML.$$.fragment,N0),MRo=i(N0),Age=n(N0,"P",{});var fut=s(Age);ERo=r(fut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fut.forEach(t),CRo=i(N0),Ji=n(N0,"P",{});var Toe=s(Ji);wRo=r(Toe,`Note:
Loading a model from its configuration file does `),Lge=n(Toe,"STRONG",{});var mut=s(Lge);ARo=r(mut,"not"),mut.forEach(t),LRo=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(Toe,"A",{href:!0});var gut=s(vO);yRo=r(gut,"from_pretrained()"),gut.forEach(t),xRo=r(Toe," to load the model weights."),Toe.forEach(t),$Ro=i(N0),T(Z2.$$.fragment,N0),N0.forEach(t),kRo=i(el),eo=n(el,"DIV",{class:!0});var da=s(eo);T(EL.$$.fragment,da),SRo=i(da),yge=n(da,"P",{});var hut=s(yge);RRo=r(hut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hut.forEach(t),PRo=i(da),Na=n(da,"P",{});var q0=s(Na);BRo=r(q0,"The model class to instantiate is selected based on the "),xge=n(q0,"CODE",{});var put=s(xge);IRo=r(put,"model_type"),put.forEach(t),NRo=r(q0,` property of the config object (either
passed as an argument or loaded from `),$ge=n(q0,"CODE",{});var _ut=s($ge);qRo=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),jRo=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(q0,"CODE",{});var uut=s(kge);DRo=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),GRo=r(q0,":"),q0.forEach(t),ORo=i(da),pe=n(da,"UL",{});var ve=s(pe);eb=n(ve,"LI",{});var Y$e=s(eb);Sge=n(Y$e,"STRONG",{});var but=s(Sge);VRo=r(but,"bart"),but.forEach(t),XRo=r(Y$e," \u2014 "),FO=n(Y$e,"A",{href:!0});var vut=s(FO);zRo=r(vut,"BartForConditionalGeneration"),vut.forEach(t),WRo=r(Y$e," (BART model)"),Y$e.forEach(t),QRo=i(ve),ob=n(ve,"LI",{});var K$e=s(ob);Rge=n(K$e,"STRONG",{});var Fut=s(Rge);HRo=r(Fut,"bigbird_pegasus"),Fut.forEach(t),URo=r(K$e," \u2014 "),TO=n(K$e,"A",{href:!0});var Tut=s(TO);JRo=r(Tut,"BigBirdPegasusForConditionalGeneration"),Tut.forEach(t),YRo=r(K$e," (BigBird-Pegasus model)"),K$e.forEach(t),KRo=i(ve),rb=n(ve,"LI",{});var Z$e=s(rb);Pge=n(Z$e,"STRONG",{});var Mut=s(Pge);ZRo=r(Mut,"blenderbot"),Mut.forEach(t),ePo=r(Z$e," \u2014 "),MO=n(Z$e,"A",{href:!0});var Eut=s(MO);oPo=r(Eut,"BlenderbotForConditionalGeneration"),Eut.forEach(t),rPo=r(Z$e," (Blenderbot model)"),Z$e.forEach(t),tPo=i(ve),tb=n(ve,"LI",{});var eke=s(tb);Bge=n(eke,"STRONG",{});var Cut=s(Bge);aPo=r(Cut,"blenderbot-small"),Cut.forEach(t),nPo=r(eke," \u2014 "),EO=n(eke,"A",{href:!0});var wut=s(EO);sPo=r(wut,"BlenderbotSmallForConditionalGeneration"),wut.forEach(t),lPo=r(eke," (BlenderbotSmall model)"),eke.forEach(t),iPo=i(ve),ab=n(ve,"LI",{});var oke=s(ab);Ige=n(oke,"STRONG",{});var Aut=s(Ige);dPo=r(Aut,"encoder-decoder"),Aut.forEach(t),cPo=r(oke," \u2014 "),CO=n(oke,"A",{href:!0});var Lut=s(CO);fPo=r(Lut,"EncoderDecoderModel"),Lut.forEach(t),mPo=r(oke," (Encoder decoder model)"),oke.forEach(t),gPo=i(ve),nb=n(ve,"LI",{});var rke=s(nb);Nge=n(rke,"STRONG",{});var yut=s(Nge);hPo=r(yut,"fsmt"),yut.forEach(t),pPo=r(rke," \u2014 "),wO=n(rke,"A",{href:!0});var xut=s(wO);_Po=r(xut,"FSMTForConditionalGeneration"),xut.forEach(t),uPo=r(rke," (FairSeq Machine-Translation model)"),rke.forEach(t),bPo=i(ve),sb=n(ve,"LI",{});var tke=s(sb);qge=n(tke,"STRONG",{});var $ut=s(qge);vPo=r($ut,"led"),$ut.forEach(t),FPo=r(tke," \u2014 "),AO=n(tke,"A",{href:!0});var kut=s(AO);TPo=r(kut,"LEDForConditionalGeneration"),kut.forEach(t),MPo=r(tke," (LED model)"),tke.forEach(t),EPo=i(ve),lb=n(ve,"LI",{});var ake=s(lb);jge=n(ake,"STRONG",{});var Sut=s(jge);CPo=r(Sut,"longt5"),Sut.forEach(t),wPo=r(ake," \u2014 "),LO=n(ake,"A",{href:!0});var Rut=s(LO);APo=r(Rut,"LongT5ForConditionalGeneration"),Rut.forEach(t),LPo=r(ake," (LongT5 model)"),ake.forEach(t),yPo=i(ve),ib=n(ve,"LI",{});var nke=s(ib);Dge=n(nke,"STRONG",{});var Put=s(Dge);xPo=r(Put,"m2m_100"),Put.forEach(t),$Po=r(nke," \u2014 "),yO=n(nke,"A",{href:!0});var But=s(yO);kPo=r(But,"M2M100ForConditionalGeneration"),But.forEach(t),SPo=r(nke," (M2M100 model)"),nke.forEach(t),RPo=i(ve),db=n(ve,"LI",{});var ske=s(db);Gge=n(ske,"STRONG",{});var Iut=s(Gge);PPo=r(Iut,"marian"),Iut.forEach(t),BPo=r(ske," \u2014 "),xO=n(ske,"A",{href:!0});var Nut=s(xO);IPo=r(Nut,"MarianMTModel"),Nut.forEach(t),NPo=r(ske," (Marian model)"),ske.forEach(t),qPo=i(ve),cb=n(ve,"LI",{});var lke=s(cb);Oge=n(lke,"STRONG",{});var qut=s(Oge);jPo=r(qut,"mbart"),qut.forEach(t),DPo=r(lke," \u2014 "),$O=n(lke,"A",{href:!0});var jut=s($O);GPo=r(jut,"MBartForConditionalGeneration"),jut.forEach(t),OPo=r(lke," (mBART model)"),lke.forEach(t),VPo=i(ve),fb=n(ve,"LI",{});var ike=s(fb);Vge=n(ike,"STRONG",{});var Dut=s(Vge);XPo=r(Dut,"mt5"),Dut.forEach(t),zPo=r(ike," \u2014 "),kO=n(ike,"A",{href:!0});var Gut=s(kO);WPo=r(Gut,"MT5ForConditionalGeneration"),Gut.forEach(t),QPo=r(ike," (MT5 model)"),ike.forEach(t),HPo=i(ve),mb=n(ve,"LI",{});var dke=s(mb);Xge=n(dke,"STRONG",{});var Out=s(Xge);UPo=r(Out,"pegasus"),Out.forEach(t),JPo=r(dke," \u2014 "),SO=n(dke,"A",{href:!0});var Vut=s(SO);YPo=r(Vut,"PegasusForConditionalGeneration"),Vut.forEach(t),KPo=r(dke," (Pegasus model)"),dke.forEach(t),ZPo=i(ve),gb=n(ve,"LI",{});var cke=s(gb);zge=n(cke,"STRONG",{});var Xut=s(zge);eBo=r(Xut,"plbart"),Xut.forEach(t),oBo=r(cke," \u2014 "),RO=n(cke,"A",{href:!0});var zut=s(RO);rBo=r(zut,"PLBartForConditionalGeneration"),zut.forEach(t),tBo=r(cke," (PLBart model)"),cke.forEach(t),aBo=i(ve),hb=n(ve,"LI",{});var fke=s(hb);Wge=n(fke,"STRONG",{});var Wut=s(Wge);nBo=r(Wut,"prophetnet"),Wut.forEach(t),sBo=r(fke," \u2014 "),PO=n(fke,"A",{href:!0});var Qut=s(PO);lBo=r(Qut,"ProphetNetForConditionalGeneration"),Qut.forEach(t),iBo=r(fke," (ProphetNet model)"),fke.forEach(t),dBo=i(ve),pb=n(ve,"LI",{});var mke=s(pb);Qge=n(mke,"STRONG",{});var Hut=s(Qge);cBo=r(Hut,"t5"),Hut.forEach(t),fBo=r(mke," \u2014 "),BO=n(mke,"A",{href:!0});var Uut=s(BO);mBo=r(Uut,"T5ForConditionalGeneration"),Uut.forEach(t),gBo=r(mke," (T5 model)"),mke.forEach(t),hBo=i(ve),_b=n(ve,"LI",{});var gke=s(_b);Hge=n(gke,"STRONG",{});var Jut=s(Hge);pBo=r(Jut,"xlm-prophetnet"),Jut.forEach(t),_Bo=r(gke," \u2014 "),IO=n(gke,"A",{href:!0});var Yut=s(IO);uBo=r(Yut,"XLMProphetNetForConditionalGeneration"),Yut.forEach(t),bBo=r(gke," (XLM-ProphetNet model)"),gke.forEach(t),ve.forEach(t),vBo=i(da),ub=n(da,"P",{});var hke=s(ub);FBo=r(hke,"The model is set in evaluation mode by default using "),Uge=n(hke,"CODE",{});var Kut=s(Uge);TBo=r(Kut,"model.eval()"),Kut.forEach(t),MBo=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(hke,"CODE",{});var Zut=s(Jge);EBo=r(Zut,"model.train()"),Zut.forEach(t),hke.forEach(t),CBo=i(da),T(bb.$$.fragment,da),da.forEach(t),el.forEach(t),UGe=i(f),Yi=n(f,"H2",{class:!0});var oXe=s(Yi);vb=n(oXe,"A",{id:!0,class:!0,href:!0});var e1t=s(vb);Yge=n(e1t,"SPAN",{});var o1t=s(Yge);T(CL.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),wBo=i(oXe),Kge=n(oXe,"SPAN",{});var r1t=s(Kge);ABo=r(r1t,"AutoModelForSequenceClassification"),r1t.forEach(t),oXe.forEach(t),JGe=i(f),Po=n(f,"DIV",{class:!0});var ol=s(Po);T(wL.$$.fragment,ol),LBo=i(ol),Ki=n(ol,"P",{});var Moe=s(Ki);yBo=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NO=n(Moe,"A",{href:!0});var t1t=s(NO);xBo=r(t1t,"from_pretrained()"),t1t.forEach(t),$Bo=r(Moe," class method or the "),qO=n(Moe,"A",{href:!0});var a1t=s(qO);kBo=r(a1t,"from_config()"),a1t.forEach(t),SBo=r(Moe,` class
method.`),Moe.forEach(t),RBo=i(ol),AL=n(ol,"P",{});var rXe=s(AL);PBo=r(rXe,"This class cannot be instantiated directly using "),Zge=n(rXe,"CODE",{});var n1t=s(Zge);BBo=r(n1t,"__init__()"),n1t.forEach(t),IBo=r(rXe," (throws an error)."),rXe.forEach(t),NBo=i(ol),ft=n(ol,"DIV",{class:!0});var j0=s(ft);T(LL.$$.fragment,j0),qBo=i(j0),ehe=n(j0,"P",{});var s1t=s(ehe);jBo=r(s1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),s1t.forEach(t),DBo=i(j0),Zi=n(j0,"P",{});var Eoe=s(Zi);GBo=r(Eoe,`Note:
Loading a model from its configuration file does `),ohe=n(Eoe,"STRONG",{});var l1t=s(ohe);OBo=r(l1t,"not"),l1t.forEach(t),VBo=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=n(Eoe,"A",{href:!0});var i1t=s(jO);XBo=r(i1t,"from_pretrained()"),i1t.forEach(t),zBo=r(Eoe," to load the model weights."),Eoe.forEach(t),WBo=i(j0),T(Fb.$$.fragment,j0),j0.forEach(t),QBo=i(ol),oo=n(ol,"DIV",{class:!0});var ca=s(oo);T(yL.$$.fragment,ca),HBo=i(ca),rhe=n(ca,"P",{});var d1t=s(rhe);UBo=r(d1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d1t.forEach(t),JBo=i(ca),qa=n(ca,"P",{});var D0=s(qa);YBo=r(D0,"The model class to instantiate is selected based on the "),the=n(D0,"CODE",{});var c1t=s(the);KBo=r(c1t,"model_type"),c1t.forEach(t),ZBo=r(D0,` property of the config object (either
passed as an argument or loaded from `),ahe=n(D0,"CODE",{});var f1t=s(ahe);eIo=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),oIo=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(D0,"CODE",{});var m1t=s(nhe);rIo=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),tIo=r(D0,":"),D0.forEach(t),aIo=i(ca),N=n(ca,"UL",{});var j=s(N);Tb=n(j,"LI",{});var pke=s(Tb);she=n(pke,"STRONG",{});var g1t=s(she);nIo=r(g1t,"albert"),g1t.forEach(t),sIo=r(pke," \u2014 "),DO=n(pke,"A",{href:!0});var h1t=s(DO);lIo=r(h1t,"AlbertForSequenceClassification"),h1t.forEach(t),iIo=r(pke," (ALBERT model)"),pke.forEach(t),dIo=i(j),Mb=n(j,"LI",{});var _ke=s(Mb);lhe=n(_ke,"STRONG",{});var p1t=s(lhe);cIo=r(p1t,"bart"),p1t.forEach(t),fIo=r(_ke," \u2014 "),GO=n(_ke,"A",{href:!0});var _1t=s(GO);mIo=r(_1t,"BartForSequenceClassification"),_1t.forEach(t),gIo=r(_ke," (BART model)"),_ke.forEach(t),hIo=i(j),Eb=n(j,"LI",{});var uke=s(Eb);ihe=n(uke,"STRONG",{});var u1t=s(ihe);pIo=r(u1t,"bert"),u1t.forEach(t),_Io=r(uke," \u2014 "),OO=n(uke,"A",{href:!0});var b1t=s(OO);uIo=r(b1t,"BertForSequenceClassification"),b1t.forEach(t),bIo=r(uke," (BERT model)"),uke.forEach(t),vIo=i(j),Cb=n(j,"LI",{});var bke=s(Cb);dhe=n(bke,"STRONG",{});var v1t=s(dhe);FIo=r(v1t,"big_bird"),v1t.forEach(t),TIo=r(bke," \u2014 "),VO=n(bke,"A",{href:!0});var F1t=s(VO);MIo=r(F1t,"BigBirdForSequenceClassification"),F1t.forEach(t),EIo=r(bke," (BigBird model)"),bke.forEach(t),CIo=i(j),wb=n(j,"LI",{});var vke=s(wb);che=n(vke,"STRONG",{});var T1t=s(che);wIo=r(T1t,"bigbird_pegasus"),T1t.forEach(t),AIo=r(vke," \u2014 "),XO=n(vke,"A",{href:!0});var M1t=s(XO);LIo=r(M1t,"BigBirdPegasusForSequenceClassification"),M1t.forEach(t),yIo=r(vke," (BigBird-Pegasus model)"),vke.forEach(t),xIo=i(j),Ab=n(j,"LI",{});var Fke=s(Ab);fhe=n(Fke,"STRONG",{});var E1t=s(fhe);$Io=r(E1t,"bloom"),E1t.forEach(t),kIo=r(Fke," \u2014 "),zO=n(Fke,"A",{href:!0});var C1t=s(zO);SIo=r(C1t,"BloomForSequenceClassification"),C1t.forEach(t),RIo=r(Fke," (BLOOM model)"),Fke.forEach(t),PIo=i(j),Lb=n(j,"LI",{});var Tke=s(Lb);mhe=n(Tke,"STRONG",{});var w1t=s(mhe);BIo=r(w1t,"camembert"),w1t.forEach(t),IIo=r(Tke," \u2014 "),WO=n(Tke,"A",{href:!0});var A1t=s(WO);NIo=r(A1t,"CamembertForSequenceClassification"),A1t.forEach(t),qIo=r(Tke," (CamemBERT model)"),Tke.forEach(t),jIo=i(j),yb=n(j,"LI",{});var Mke=s(yb);ghe=n(Mke,"STRONG",{});var L1t=s(ghe);DIo=r(L1t,"canine"),L1t.forEach(t),GIo=r(Mke," \u2014 "),QO=n(Mke,"A",{href:!0});var y1t=s(QO);OIo=r(y1t,"CanineForSequenceClassification"),y1t.forEach(t),VIo=r(Mke," (CANINE model)"),Mke.forEach(t),XIo=i(j),xb=n(j,"LI",{});var Eke=s(xb);hhe=n(Eke,"STRONG",{});var x1t=s(hhe);zIo=r(x1t,"convbert"),x1t.forEach(t),WIo=r(Eke," \u2014 "),HO=n(Eke,"A",{href:!0});var $1t=s(HO);QIo=r($1t,"ConvBertForSequenceClassification"),$1t.forEach(t),HIo=r(Eke," (ConvBERT model)"),Eke.forEach(t),UIo=i(j),$b=n(j,"LI",{});var Cke=s($b);phe=n(Cke,"STRONG",{});var k1t=s(phe);JIo=r(k1t,"ctrl"),k1t.forEach(t),YIo=r(Cke," \u2014 "),UO=n(Cke,"A",{href:!0});var S1t=s(UO);KIo=r(S1t,"CTRLForSequenceClassification"),S1t.forEach(t),ZIo=r(Cke," (CTRL model)"),Cke.forEach(t),eNo=i(j),kb=n(j,"LI",{});var wke=s(kb);_he=n(wke,"STRONG",{});var R1t=s(_he);oNo=r(R1t,"data2vec-text"),R1t.forEach(t),rNo=r(wke," \u2014 "),JO=n(wke,"A",{href:!0});var P1t=s(JO);tNo=r(P1t,"Data2VecTextForSequenceClassification"),P1t.forEach(t),aNo=r(wke," (Data2VecText model)"),wke.forEach(t),nNo=i(j),Sb=n(j,"LI",{});var Ake=s(Sb);uhe=n(Ake,"STRONG",{});var B1t=s(uhe);sNo=r(B1t,"deberta"),B1t.forEach(t),lNo=r(Ake," \u2014 "),YO=n(Ake,"A",{href:!0});var I1t=s(YO);iNo=r(I1t,"DebertaForSequenceClassification"),I1t.forEach(t),dNo=r(Ake," (DeBERTa model)"),Ake.forEach(t),cNo=i(j),Rb=n(j,"LI",{});var Lke=s(Rb);bhe=n(Lke,"STRONG",{});var N1t=s(bhe);fNo=r(N1t,"deberta-v2"),N1t.forEach(t),mNo=r(Lke," \u2014 "),KO=n(Lke,"A",{href:!0});var q1t=s(KO);gNo=r(q1t,"DebertaV2ForSequenceClassification"),q1t.forEach(t),hNo=r(Lke," (DeBERTa-v2 model)"),Lke.forEach(t),pNo=i(j),Pb=n(j,"LI",{});var yke=s(Pb);vhe=n(yke,"STRONG",{});var j1t=s(vhe);_No=r(j1t,"distilbert"),j1t.forEach(t),uNo=r(yke," \u2014 "),ZO=n(yke,"A",{href:!0});var D1t=s(ZO);bNo=r(D1t,"DistilBertForSequenceClassification"),D1t.forEach(t),vNo=r(yke," (DistilBERT model)"),yke.forEach(t),FNo=i(j),Bb=n(j,"LI",{});var xke=s(Bb);Fhe=n(xke,"STRONG",{});var G1t=s(Fhe);TNo=r(G1t,"electra"),G1t.forEach(t),MNo=r(xke," \u2014 "),eV=n(xke,"A",{href:!0});var O1t=s(eV);ENo=r(O1t,"ElectraForSequenceClassification"),O1t.forEach(t),CNo=r(xke," (ELECTRA model)"),xke.forEach(t),wNo=i(j),Ib=n(j,"LI",{});var $ke=s(Ib);The=n($ke,"STRONG",{});var V1t=s(The);ANo=r(V1t,"flaubert"),V1t.forEach(t),LNo=r($ke," \u2014 "),oV=n($ke,"A",{href:!0});var X1t=s(oV);yNo=r(X1t,"FlaubertForSequenceClassification"),X1t.forEach(t),xNo=r($ke," (FlauBERT model)"),$ke.forEach(t),$No=i(j),Nb=n(j,"LI",{});var kke=s(Nb);Mhe=n(kke,"STRONG",{});var z1t=s(Mhe);kNo=r(z1t,"fnet"),z1t.forEach(t),SNo=r(kke," \u2014 "),rV=n(kke,"A",{href:!0});var W1t=s(rV);RNo=r(W1t,"FNetForSequenceClassification"),W1t.forEach(t),PNo=r(kke," (FNet model)"),kke.forEach(t),BNo=i(j),qb=n(j,"LI",{});var Ske=s(qb);Ehe=n(Ske,"STRONG",{});var Q1t=s(Ehe);INo=r(Q1t,"funnel"),Q1t.forEach(t),NNo=r(Ske," \u2014 "),tV=n(Ske,"A",{href:!0});var H1t=s(tV);qNo=r(H1t,"FunnelForSequenceClassification"),H1t.forEach(t),jNo=r(Ske," (Funnel Transformer model)"),Ske.forEach(t),DNo=i(j),jb=n(j,"LI",{});var Rke=s(jb);Che=n(Rke,"STRONG",{});var U1t=s(Che);GNo=r(U1t,"gpt2"),U1t.forEach(t),ONo=r(Rke," \u2014 "),aV=n(Rke,"A",{href:!0});var J1t=s(aV);VNo=r(J1t,"GPT2ForSequenceClassification"),J1t.forEach(t),XNo=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),zNo=i(j),Db=n(j,"LI",{});var Pke=s(Db);whe=n(Pke,"STRONG",{});var Y1t=s(whe);WNo=r(Y1t,"gpt_neo"),Y1t.forEach(t),QNo=r(Pke," \u2014 "),nV=n(Pke,"A",{href:!0});var K1t=s(nV);HNo=r(K1t,"GPTNeoForSequenceClassification"),K1t.forEach(t),UNo=r(Pke," (GPT Neo model)"),Pke.forEach(t),JNo=i(j),Gb=n(j,"LI",{});var Bke=s(Gb);Ahe=n(Bke,"STRONG",{});var Z1t=s(Ahe);YNo=r(Z1t,"gptj"),Z1t.forEach(t),KNo=r(Bke," \u2014 "),sV=n(Bke,"A",{href:!0});var e2t=s(sV);ZNo=r(e2t,"GPTJForSequenceClassification"),e2t.forEach(t),eqo=r(Bke," (GPT-J model)"),Bke.forEach(t),oqo=i(j),Ob=n(j,"LI",{});var Ike=s(Ob);Lhe=n(Ike,"STRONG",{});var o2t=s(Lhe);rqo=r(o2t,"ibert"),o2t.forEach(t),tqo=r(Ike," \u2014 "),lV=n(Ike,"A",{href:!0});var r2t=s(lV);aqo=r(r2t,"IBertForSequenceClassification"),r2t.forEach(t),nqo=r(Ike," (I-BERT model)"),Ike.forEach(t),sqo=i(j),Vb=n(j,"LI",{});var Nke=s(Vb);yhe=n(Nke,"STRONG",{});var t2t=s(yhe);lqo=r(t2t,"layoutlm"),t2t.forEach(t),iqo=r(Nke," \u2014 "),iV=n(Nke,"A",{href:!0});var a2t=s(iV);dqo=r(a2t,"LayoutLMForSequenceClassification"),a2t.forEach(t),cqo=r(Nke," (LayoutLM model)"),Nke.forEach(t),fqo=i(j),Xb=n(j,"LI",{});var qke=s(Xb);xhe=n(qke,"STRONG",{});var n2t=s(xhe);mqo=r(n2t,"layoutlmv2"),n2t.forEach(t),gqo=r(qke," \u2014 "),dV=n(qke,"A",{href:!0});var s2t=s(dV);hqo=r(s2t,"LayoutLMv2ForSequenceClassification"),s2t.forEach(t),pqo=r(qke," (LayoutLMv2 model)"),qke.forEach(t),_qo=i(j),zb=n(j,"LI",{});var jke=s(zb);$he=n(jke,"STRONG",{});var l2t=s($he);uqo=r(l2t,"layoutlmv3"),l2t.forEach(t),bqo=r(jke," \u2014 "),cV=n(jke,"A",{href:!0});var i2t=s(cV);vqo=r(i2t,"LayoutLMv3ForSequenceClassification"),i2t.forEach(t),Fqo=r(jke," (LayoutLMv3 model)"),jke.forEach(t),Tqo=i(j),Wb=n(j,"LI",{});var Dke=s(Wb);khe=n(Dke,"STRONG",{});var d2t=s(khe);Mqo=r(d2t,"led"),d2t.forEach(t),Eqo=r(Dke," \u2014 "),fV=n(Dke,"A",{href:!0});var c2t=s(fV);Cqo=r(c2t,"LEDForSequenceClassification"),c2t.forEach(t),wqo=r(Dke," (LED model)"),Dke.forEach(t),Aqo=i(j),Qb=n(j,"LI",{});var Gke=s(Qb);She=n(Gke,"STRONG",{});var f2t=s(She);Lqo=r(f2t,"longformer"),f2t.forEach(t),yqo=r(Gke," \u2014 "),mV=n(Gke,"A",{href:!0});var m2t=s(mV);xqo=r(m2t,"LongformerForSequenceClassification"),m2t.forEach(t),$qo=r(Gke," (Longformer model)"),Gke.forEach(t),kqo=i(j),Hb=n(j,"LI",{});var Oke=s(Hb);Rhe=n(Oke,"STRONG",{});var g2t=s(Rhe);Sqo=r(g2t,"mbart"),g2t.forEach(t),Rqo=r(Oke," \u2014 "),gV=n(Oke,"A",{href:!0});var h2t=s(gV);Pqo=r(h2t,"MBartForSequenceClassification"),h2t.forEach(t),Bqo=r(Oke," (mBART model)"),Oke.forEach(t),Iqo=i(j),Ub=n(j,"LI",{});var Vke=s(Ub);Phe=n(Vke,"STRONG",{});var p2t=s(Phe);Nqo=r(p2t,"megatron-bert"),p2t.forEach(t),qqo=r(Vke," \u2014 "),hV=n(Vke,"A",{href:!0});var _2t=s(hV);jqo=r(_2t,"MegatronBertForSequenceClassification"),_2t.forEach(t),Dqo=r(Vke," (Megatron-BERT model)"),Vke.forEach(t),Gqo=i(j),Jb=n(j,"LI",{});var Xke=s(Jb);Bhe=n(Xke,"STRONG",{});var u2t=s(Bhe);Oqo=r(u2t,"mobilebert"),u2t.forEach(t),Vqo=r(Xke," \u2014 "),pV=n(Xke,"A",{href:!0});var b2t=s(pV);Xqo=r(b2t,"MobileBertForSequenceClassification"),b2t.forEach(t),zqo=r(Xke," (MobileBERT model)"),Xke.forEach(t),Wqo=i(j),Yb=n(j,"LI",{});var zke=s(Yb);Ihe=n(zke,"STRONG",{});var v2t=s(Ihe);Qqo=r(v2t,"mpnet"),v2t.forEach(t),Hqo=r(zke," \u2014 "),_V=n(zke,"A",{href:!0});var F2t=s(_V);Uqo=r(F2t,"MPNetForSequenceClassification"),F2t.forEach(t),Jqo=r(zke," (MPNet model)"),zke.forEach(t),Yqo=i(j),Kb=n(j,"LI",{});var Wke=s(Kb);Nhe=n(Wke,"STRONG",{});var T2t=s(Nhe);Kqo=r(T2t,"nystromformer"),T2t.forEach(t),Zqo=r(Wke," \u2014 "),uV=n(Wke,"A",{href:!0});var M2t=s(uV);ejo=r(M2t,"NystromformerForSequenceClassification"),M2t.forEach(t),ojo=r(Wke," (Nystr\xF6mformer model)"),Wke.forEach(t),rjo=i(j),Zb=n(j,"LI",{});var Qke=s(Zb);qhe=n(Qke,"STRONG",{});var E2t=s(qhe);tjo=r(E2t,"openai-gpt"),E2t.forEach(t),ajo=r(Qke," \u2014 "),bV=n(Qke,"A",{href:!0});var C2t=s(bV);njo=r(C2t,"OpenAIGPTForSequenceClassification"),C2t.forEach(t),sjo=r(Qke," (OpenAI GPT model)"),Qke.forEach(t),ljo=i(j),e4=n(j,"LI",{});var Hke=s(e4);jhe=n(Hke,"STRONG",{});var w2t=s(jhe);ijo=r(w2t,"perceiver"),w2t.forEach(t),djo=r(Hke," \u2014 "),vV=n(Hke,"A",{href:!0});var A2t=s(vV);cjo=r(A2t,"PerceiverForSequenceClassification"),A2t.forEach(t),fjo=r(Hke," (Perceiver model)"),Hke.forEach(t),mjo=i(j),o4=n(j,"LI",{});var Uke=s(o4);Dhe=n(Uke,"STRONG",{});var L2t=s(Dhe);gjo=r(L2t,"plbart"),L2t.forEach(t),hjo=r(Uke," \u2014 "),FV=n(Uke,"A",{href:!0});var y2t=s(FV);pjo=r(y2t,"PLBartForSequenceClassification"),y2t.forEach(t),_jo=r(Uke," (PLBart model)"),Uke.forEach(t),ujo=i(j),r4=n(j,"LI",{});var Jke=s(r4);Ghe=n(Jke,"STRONG",{});var x2t=s(Ghe);bjo=r(x2t,"qdqbert"),x2t.forEach(t),vjo=r(Jke," \u2014 "),TV=n(Jke,"A",{href:!0});var $2t=s(TV);Fjo=r($2t,"QDQBertForSequenceClassification"),$2t.forEach(t),Tjo=r(Jke," (QDQBert model)"),Jke.forEach(t),Mjo=i(j),t4=n(j,"LI",{});var Yke=s(t4);Ohe=n(Yke,"STRONG",{});var k2t=s(Ohe);Ejo=r(k2t,"reformer"),k2t.forEach(t),Cjo=r(Yke," \u2014 "),MV=n(Yke,"A",{href:!0});var S2t=s(MV);wjo=r(S2t,"ReformerForSequenceClassification"),S2t.forEach(t),Ajo=r(Yke," (Reformer model)"),Yke.forEach(t),Ljo=i(j),a4=n(j,"LI",{});var Kke=s(a4);Vhe=n(Kke,"STRONG",{});var R2t=s(Vhe);yjo=r(R2t,"rembert"),R2t.forEach(t),xjo=r(Kke," \u2014 "),EV=n(Kke,"A",{href:!0});var P2t=s(EV);$jo=r(P2t,"RemBertForSequenceClassification"),P2t.forEach(t),kjo=r(Kke," (RemBERT model)"),Kke.forEach(t),Sjo=i(j),n4=n(j,"LI",{});var Zke=s(n4);Xhe=n(Zke,"STRONG",{});var B2t=s(Xhe);Rjo=r(B2t,"roberta"),B2t.forEach(t),Pjo=r(Zke," \u2014 "),CV=n(Zke,"A",{href:!0});var I2t=s(CV);Bjo=r(I2t,"RobertaForSequenceClassification"),I2t.forEach(t),Ijo=r(Zke," (RoBERTa model)"),Zke.forEach(t),Njo=i(j),s4=n(j,"LI",{});var eSe=s(s4);zhe=n(eSe,"STRONG",{});var N2t=s(zhe);qjo=r(N2t,"roformer"),N2t.forEach(t),jjo=r(eSe," \u2014 "),wV=n(eSe,"A",{href:!0});var q2t=s(wV);Djo=r(q2t,"RoFormerForSequenceClassification"),q2t.forEach(t),Gjo=r(eSe," (RoFormer model)"),eSe.forEach(t),Ojo=i(j),l4=n(j,"LI",{});var oSe=s(l4);Whe=n(oSe,"STRONG",{});var j2t=s(Whe);Vjo=r(j2t,"squeezebert"),j2t.forEach(t),Xjo=r(oSe," \u2014 "),AV=n(oSe,"A",{href:!0});var D2t=s(AV);zjo=r(D2t,"SqueezeBertForSequenceClassification"),D2t.forEach(t),Wjo=r(oSe," (SqueezeBERT model)"),oSe.forEach(t),Qjo=i(j),i4=n(j,"LI",{});var rSe=s(i4);Qhe=n(rSe,"STRONG",{});var G2t=s(Qhe);Hjo=r(G2t,"tapas"),G2t.forEach(t),Ujo=r(rSe," \u2014 "),LV=n(rSe,"A",{href:!0});var O2t=s(LV);Jjo=r(O2t,"TapasForSequenceClassification"),O2t.forEach(t),Yjo=r(rSe," (TAPAS model)"),rSe.forEach(t),Kjo=i(j),d4=n(j,"LI",{});var tSe=s(d4);Hhe=n(tSe,"STRONG",{});var V2t=s(Hhe);Zjo=r(V2t,"transfo-xl"),V2t.forEach(t),eDo=r(tSe," \u2014 "),yV=n(tSe,"A",{href:!0});var X2t=s(yV);oDo=r(X2t,"TransfoXLForSequenceClassification"),X2t.forEach(t),rDo=r(tSe," (Transformer-XL model)"),tSe.forEach(t),tDo=i(j),c4=n(j,"LI",{});var aSe=s(c4);Uhe=n(aSe,"STRONG",{});var z2t=s(Uhe);aDo=r(z2t,"xlm"),z2t.forEach(t),nDo=r(aSe," \u2014 "),xV=n(aSe,"A",{href:!0});var W2t=s(xV);sDo=r(W2t,"XLMForSequenceClassification"),W2t.forEach(t),lDo=r(aSe," (XLM model)"),aSe.forEach(t),iDo=i(j),f4=n(j,"LI",{});var nSe=s(f4);Jhe=n(nSe,"STRONG",{});var Q2t=s(Jhe);dDo=r(Q2t,"xlm-roberta"),Q2t.forEach(t),cDo=r(nSe," \u2014 "),$V=n(nSe,"A",{href:!0});var H2t=s($V);fDo=r(H2t,"XLMRobertaForSequenceClassification"),H2t.forEach(t),mDo=r(nSe," (XLM-RoBERTa model)"),nSe.forEach(t),gDo=i(j),m4=n(j,"LI",{});var sSe=s(m4);Yhe=n(sSe,"STRONG",{});var U2t=s(Yhe);hDo=r(U2t,"xlm-roberta-xl"),U2t.forEach(t),pDo=r(sSe," \u2014 "),kV=n(sSe,"A",{href:!0});var J2t=s(kV);_Do=r(J2t,"XLMRobertaXLForSequenceClassification"),J2t.forEach(t),uDo=r(sSe," (XLM-RoBERTa-XL model)"),sSe.forEach(t),bDo=i(j),g4=n(j,"LI",{});var lSe=s(g4);Khe=n(lSe,"STRONG",{});var Y2t=s(Khe);vDo=r(Y2t,"xlnet"),Y2t.forEach(t),FDo=r(lSe," \u2014 "),SV=n(lSe,"A",{href:!0});var K2t=s(SV);TDo=r(K2t,"XLNetForSequenceClassification"),K2t.forEach(t),MDo=r(lSe," (XLNet model)"),lSe.forEach(t),EDo=i(j),h4=n(j,"LI",{});var iSe=s(h4);Zhe=n(iSe,"STRONG",{});var Z2t=s(Zhe);CDo=r(Z2t,"yoso"),Z2t.forEach(t),wDo=r(iSe," \u2014 "),RV=n(iSe,"A",{href:!0});var ebt=s(RV);ADo=r(ebt,"YosoForSequenceClassification"),ebt.forEach(t),LDo=r(iSe," (YOSO model)"),iSe.forEach(t),j.forEach(t),yDo=i(ca),p4=n(ca,"P",{});var dSe=s(p4);xDo=r(dSe,"The model is set in evaluation mode by default using "),epe=n(dSe,"CODE",{});var obt=s(epe);$Do=r(obt,"model.eval()"),obt.forEach(t),kDo=r(dSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(dSe,"CODE",{});var rbt=s(ope);SDo=r(rbt,"model.train()"),rbt.forEach(t),dSe.forEach(t),RDo=i(ca),T(_4.$$.fragment,ca),ca.forEach(t),ol.forEach(t),YGe=i(f),ed=n(f,"H2",{class:!0});var tXe=s(ed);u4=n(tXe,"A",{id:!0,class:!0,href:!0});var tbt=s(u4);rpe=n(tbt,"SPAN",{});var abt=s(rpe);T(xL.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),PDo=i(tXe),tpe=n(tXe,"SPAN",{});var nbt=s(tpe);BDo=r(nbt,"AutoModelForMultipleChoice"),nbt.forEach(t),tXe.forEach(t),KGe=i(f),Bo=n(f,"DIV",{class:!0});var rl=s(Bo);T($L.$$.fragment,rl),IDo=i(rl),od=n(rl,"P",{});var Coe=s(od);NDo=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PV=n(Coe,"A",{href:!0});var sbt=s(PV);qDo=r(sbt,"from_pretrained()"),sbt.forEach(t),jDo=r(Coe," class method or the "),BV=n(Coe,"A",{href:!0});var lbt=s(BV);DDo=r(lbt,"from_config()"),lbt.forEach(t),GDo=r(Coe,` class
method.`),Coe.forEach(t),ODo=i(rl),kL=n(rl,"P",{});var aXe=s(kL);VDo=r(aXe,"This class cannot be instantiated directly using "),ape=n(aXe,"CODE",{});var ibt=s(ape);XDo=r(ibt,"__init__()"),ibt.forEach(t),zDo=r(aXe," (throws an error)."),aXe.forEach(t),WDo=i(rl),mt=n(rl,"DIV",{class:!0});var G0=s(mt);T(SL.$$.fragment,G0),QDo=i(G0),npe=n(G0,"P",{});var dbt=s(npe);HDo=r(dbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dbt.forEach(t),UDo=i(G0),rd=n(G0,"P",{});var woe=s(rd);JDo=r(woe,`Note:
Loading a model from its configuration file does `),spe=n(woe,"STRONG",{});var cbt=s(spe);YDo=r(cbt,"not"),cbt.forEach(t),KDo=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(woe,"A",{href:!0});var fbt=s(IV);ZDo=r(fbt,"from_pretrained()"),fbt.forEach(t),eGo=r(woe," to load the model weights."),woe.forEach(t),oGo=i(G0),T(b4.$$.fragment,G0),G0.forEach(t),rGo=i(rl),ro=n(rl,"DIV",{class:!0});var fa=s(ro);T(RL.$$.fragment,fa),tGo=i(fa),lpe=n(fa,"P",{});var mbt=s(lpe);aGo=r(mbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mbt.forEach(t),nGo=i(fa),ja=n(fa,"P",{});var O0=s(ja);sGo=r(O0,"The model class to instantiate is selected based on the "),ipe=n(O0,"CODE",{});var gbt=s(ipe);lGo=r(gbt,"model_type"),gbt.forEach(t),iGo=r(O0,` property of the config object (either
passed as an argument or loaded from `),dpe=n(O0,"CODE",{});var hbt=s(dpe);dGo=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),cGo=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(O0,"CODE",{});var pbt=s(cpe);fGo=r(pbt,"pretrained_model_name_or_path"),pbt.forEach(t),mGo=r(O0,":"),O0.forEach(t),gGo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);v4=n(ee,"LI",{});var cSe=s(v4);fpe=n(cSe,"STRONG",{});var _bt=s(fpe);hGo=r(_bt,"albert"),_bt.forEach(t),pGo=r(cSe," \u2014 "),NV=n(cSe,"A",{href:!0});var ubt=s(NV);_Go=r(ubt,"AlbertForMultipleChoice"),ubt.forEach(t),uGo=r(cSe," (ALBERT model)"),cSe.forEach(t),bGo=i(ee),F4=n(ee,"LI",{});var fSe=s(F4);mpe=n(fSe,"STRONG",{});var bbt=s(mpe);vGo=r(bbt,"bert"),bbt.forEach(t),FGo=r(fSe," \u2014 "),qV=n(fSe,"A",{href:!0});var vbt=s(qV);TGo=r(vbt,"BertForMultipleChoice"),vbt.forEach(t),MGo=r(fSe," (BERT model)"),fSe.forEach(t),EGo=i(ee),T4=n(ee,"LI",{});var mSe=s(T4);gpe=n(mSe,"STRONG",{});var Fbt=s(gpe);CGo=r(Fbt,"big_bird"),Fbt.forEach(t),wGo=r(mSe," \u2014 "),jV=n(mSe,"A",{href:!0});var Tbt=s(jV);AGo=r(Tbt,"BigBirdForMultipleChoice"),Tbt.forEach(t),LGo=r(mSe," (BigBird model)"),mSe.forEach(t),yGo=i(ee),M4=n(ee,"LI",{});var gSe=s(M4);hpe=n(gSe,"STRONG",{});var Mbt=s(hpe);xGo=r(Mbt,"camembert"),Mbt.forEach(t),$Go=r(gSe," \u2014 "),DV=n(gSe,"A",{href:!0});var Ebt=s(DV);kGo=r(Ebt,"CamembertForMultipleChoice"),Ebt.forEach(t),SGo=r(gSe," (CamemBERT model)"),gSe.forEach(t),RGo=i(ee),E4=n(ee,"LI",{});var hSe=s(E4);ppe=n(hSe,"STRONG",{});var Cbt=s(ppe);PGo=r(Cbt,"canine"),Cbt.forEach(t),BGo=r(hSe," \u2014 "),GV=n(hSe,"A",{href:!0});var wbt=s(GV);IGo=r(wbt,"CanineForMultipleChoice"),wbt.forEach(t),NGo=r(hSe," (CANINE model)"),hSe.forEach(t),qGo=i(ee),C4=n(ee,"LI",{});var pSe=s(C4);_pe=n(pSe,"STRONG",{});var Abt=s(_pe);jGo=r(Abt,"convbert"),Abt.forEach(t),DGo=r(pSe," \u2014 "),OV=n(pSe,"A",{href:!0});var Lbt=s(OV);GGo=r(Lbt,"ConvBertForMultipleChoice"),Lbt.forEach(t),OGo=r(pSe," (ConvBERT model)"),pSe.forEach(t),VGo=i(ee),w4=n(ee,"LI",{});var _Se=s(w4);upe=n(_Se,"STRONG",{});var ybt=s(upe);XGo=r(ybt,"data2vec-text"),ybt.forEach(t),zGo=r(_Se," \u2014 "),VV=n(_Se,"A",{href:!0});var xbt=s(VV);WGo=r(xbt,"Data2VecTextForMultipleChoice"),xbt.forEach(t),QGo=r(_Se," (Data2VecText model)"),_Se.forEach(t),HGo=i(ee),A4=n(ee,"LI",{});var uSe=s(A4);bpe=n(uSe,"STRONG",{});var $bt=s(bpe);UGo=r($bt,"deberta-v2"),$bt.forEach(t),JGo=r(uSe," \u2014 "),XV=n(uSe,"A",{href:!0});var kbt=s(XV);YGo=r(kbt,"DebertaV2ForMultipleChoice"),kbt.forEach(t),KGo=r(uSe," (DeBERTa-v2 model)"),uSe.forEach(t),ZGo=i(ee),L4=n(ee,"LI",{});var bSe=s(L4);vpe=n(bSe,"STRONG",{});var Sbt=s(vpe);eOo=r(Sbt,"distilbert"),Sbt.forEach(t),oOo=r(bSe," \u2014 "),zV=n(bSe,"A",{href:!0});var Rbt=s(zV);rOo=r(Rbt,"DistilBertForMultipleChoice"),Rbt.forEach(t),tOo=r(bSe," (DistilBERT model)"),bSe.forEach(t),aOo=i(ee),y4=n(ee,"LI",{});var vSe=s(y4);Fpe=n(vSe,"STRONG",{});var Pbt=s(Fpe);nOo=r(Pbt,"electra"),Pbt.forEach(t),sOo=r(vSe," \u2014 "),WV=n(vSe,"A",{href:!0});var Bbt=s(WV);lOo=r(Bbt,"ElectraForMultipleChoice"),Bbt.forEach(t),iOo=r(vSe," (ELECTRA model)"),vSe.forEach(t),dOo=i(ee),x4=n(ee,"LI",{});var FSe=s(x4);Tpe=n(FSe,"STRONG",{});var Ibt=s(Tpe);cOo=r(Ibt,"flaubert"),Ibt.forEach(t),fOo=r(FSe," \u2014 "),QV=n(FSe,"A",{href:!0});var Nbt=s(QV);mOo=r(Nbt,"FlaubertForMultipleChoice"),Nbt.forEach(t),gOo=r(FSe," (FlauBERT model)"),FSe.forEach(t),hOo=i(ee),$4=n(ee,"LI",{});var TSe=s($4);Mpe=n(TSe,"STRONG",{});var qbt=s(Mpe);pOo=r(qbt,"fnet"),qbt.forEach(t),_Oo=r(TSe," \u2014 "),HV=n(TSe,"A",{href:!0});var jbt=s(HV);uOo=r(jbt,"FNetForMultipleChoice"),jbt.forEach(t),bOo=r(TSe," (FNet model)"),TSe.forEach(t),vOo=i(ee),k4=n(ee,"LI",{});var MSe=s(k4);Epe=n(MSe,"STRONG",{});var Dbt=s(Epe);FOo=r(Dbt,"funnel"),Dbt.forEach(t),TOo=r(MSe," \u2014 "),UV=n(MSe,"A",{href:!0});var Gbt=s(UV);MOo=r(Gbt,"FunnelForMultipleChoice"),Gbt.forEach(t),EOo=r(MSe," (Funnel Transformer model)"),MSe.forEach(t),COo=i(ee),S4=n(ee,"LI",{});var ESe=s(S4);Cpe=n(ESe,"STRONG",{});var Obt=s(Cpe);wOo=r(Obt,"ibert"),Obt.forEach(t),AOo=r(ESe," \u2014 "),JV=n(ESe,"A",{href:!0});var Vbt=s(JV);LOo=r(Vbt,"IBertForMultipleChoice"),Vbt.forEach(t),yOo=r(ESe," (I-BERT model)"),ESe.forEach(t),xOo=i(ee),R4=n(ee,"LI",{});var CSe=s(R4);wpe=n(CSe,"STRONG",{});var Xbt=s(wpe);$Oo=r(Xbt,"longformer"),Xbt.forEach(t),kOo=r(CSe," \u2014 "),YV=n(CSe,"A",{href:!0});var zbt=s(YV);SOo=r(zbt,"LongformerForMultipleChoice"),zbt.forEach(t),ROo=r(CSe," (Longformer model)"),CSe.forEach(t),POo=i(ee),P4=n(ee,"LI",{});var wSe=s(P4);Ape=n(wSe,"STRONG",{});var Wbt=s(Ape);BOo=r(Wbt,"megatron-bert"),Wbt.forEach(t),IOo=r(wSe," \u2014 "),KV=n(wSe,"A",{href:!0});var Qbt=s(KV);NOo=r(Qbt,"MegatronBertForMultipleChoice"),Qbt.forEach(t),qOo=r(wSe," (Megatron-BERT model)"),wSe.forEach(t),jOo=i(ee),B4=n(ee,"LI",{});var ASe=s(B4);Lpe=n(ASe,"STRONG",{});var Hbt=s(Lpe);DOo=r(Hbt,"mobilebert"),Hbt.forEach(t),GOo=r(ASe," \u2014 "),ZV=n(ASe,"A",{href:!0});var Ubt=s(ZV);OOo=r(Ubt,"MobileBertForMultipleChoice"),Ubt.forEach(t),VOo=r(ASe," (MobileBERT model)"),ASe.forEach(t),XOo=i(ee),I4=n(ee,"LI",{});var LSe=s(I4);ype=n(LSe,"STRONG",{});var Jbt=s(ype);zOo=r(Jbt,"mpnet"),Jbt.forEach(t),WOo=r(LSe," \u2014 "),eX=n(LSe,"A",{href:!0});var Ybt=s(eX);QOo=r(Ybt,"MPNetForMultipleChoice"),Ybt.forEach(t),HOo=r(LSe," (MPNet model)"),LSe.forEach(t),UOo=i(ee),N4=n(ee,"LI",{});var ySe=s(N4);xpe=n(ySe,"STRONG",{});var Kbt=s(xpe);JOo=r(Kbt,"nystromformer"),Kbt.forEach(t),YOo=r(ySe," \u2014 "),oX=n(ySe,"A",{href:!0});var Zbt=s(oX);KOo=r(Zbt,"NystromformerForMultipleChoice"),Zbt.forEach(t),ZOo=r(ySe," (Nystr\xF6mformer model)"),ySe.forEach(t),eVo=i(ee),q4=n(ee,"LI",{});var xSe=s(q4);$pe=n(xSe,"STRONG",{});var e4t=s($pe);oVo=r(e4t,"qdqbert"),e4t.forEach(t),rVo=r(xSe," \u2014 "),rX=n(xSe,"A",{href:!0});var o4t=s(rX);tVo=r(o4t,"QDQBertForMultipleChoice"),o4t.forEach(t),aVo=r(xSe," (QDQBert model)"),xSe.forEach(t),nVo=i(ee),j4=n(ee,"LI",{});var $Se=s(j4);kpe=n($Se,"STRONG",{});var r4t=s(kpe);sVo=r(r4t,"rembert"),r4t.forEach(t),lVo=r($Se," \u2014 "),tX=n($Se,"A",{href:!0});var t4t=s(tX);iVo=r(t4t,"RemBertForMultipleChoice"),t4t.forEach(t),dVo=r($Se," (RemBERT model)"),$Se.forEach(t),cVo=i(ee),D4=n(ee,"LI",{});var kSe=s(D4);Spe=n(kSe,"STRONG",{});var a4t=s(Spe);fVo=r(a4t,"roberta"),a4t.forEach(t),mVo=r(kSe," \u2014 "),aX=n(kSe,"A",{href:!0});var n4t=s(aX);gVo=r(n4t,"RobertaForMultipleChoice"),n4t.forEach(t),hVo=r(kSe," (RoBERTa model)"),kSe.forEach(t),pVo=i(ee),G4=n(ee,"LI",{});var SSe=s(G4);Rpe=n(SSe,"STRONG",{});var s4t=s(Rpe);_Vo=r(s4t,"roformer"),s4t.forEach(t),uVo=r(SSe," \u2014 "),nX=n(SSe,"A",{href:!0});var l4t=s(nX);bVo=r(l4t,"RoFormerForMultipleChoice"),l4t.forEach(t),vVo=r(SSe," (RoFormer model)"),SSe.forEach(t),FVo=i(ee),O4=n(ee,"LI",{});var RSe=s(O4);Ppe=n(RSe,"STRONG",{});var i4t=s(Ppe);TVo=r(i4t,"squeezebert"),i4t.forEach(t),MVo=r(RSe," \u2014 "),sX=n(RSe,"A",{href:!0});var d4t=s(sX);EVo=r(d4t,"SqueezeBertForMultipleChoice"),d4t.forEach(t),CVo=r(RSe," (SqueezeBERT model)"),RSe.forEach(t),wVo=i(ee),V4=n(ee,"LI",{});var PSe=s(V4);Bpe=n(PSe,"STRONG",{});var c4t=s(Bpe);AVo=r(c4t,"xlm"),c4t.forEach(t),LVo=r(PSe," \u2014 "),lX=n(PSe,"A",{href:!0});var f4t=s(lX);yVo=r(f4t,"XLMForMultipleChoice"),f4t.forEach(t),xVo=r(PSe," (XLM model)"),PSe.forEach(t),$Vo=i(ee),X4=n(ee,"LI",{});var BSe=s(X4);Ipe=n(BSe,"STRONG",{});var m4t=s(Ipe);kVo=r(m4t,"xlm-roberta"),m4t.forEach(t),SVo=r(BSe," \u2014 "),iX=n(BSe,"A",{href:!0});var g4t=s(iX);RVo=r(g4t,"XLMRobertaForMultipleChoice"),g4t.forEach(t),PVo=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),BVo=i(ee),z4=n(ee,"LI",{});var ISe=s(z4);Npe=n(ISe,"STRONG",{});var h4t=s(Npe);IVo=r(h4t,"xlm-roberta-xl"),h4t.forEach(t),NVo=r(ISe," \u2014 "),dX=n(ISe,"A",{href:!0});var p4t=s(dX);qVo=r(p4t,"XLMRobertaXLForMultipleChoice"),p4t.forEach(t),jVo=r(ISe," (XLM-RoBERTa-XL model)"),ISe.forEach(t),DVo=i(ee),W4=n(ee,"LI",{});var NSe=s(W4);qpe=n(NSe,"STRONG",{});var _4t=s(qpe);GVo=r(_4t,"xlnet"),_4t.forEach(t),OVo=r(NSe," \u2014 "),cX=n(NSe,"A",{href:!0});var u4t=s(cX);VVo=r(u4t,"XLNetForMultipleChoice"),u4t.forEach(t),XVo=r(NSe," (XLNet model)"),NSe.forEach(t),zVo=i(ee),Q4=n(ee,"LI",{});var qSe=s(Q4);jpe=n(qSe,"STRONG",{});var b4t=s(jpe);WVo=r(b4t,"yoso"),b4t.forEach(t),QVo=r(qSe," \u2014 "),fX=n(qSe,"A",{href:!0});var v4t=s(fX);HVo=r(v4t,"YosoForMultipleChoice"),v4t.forEach(t),UVo=r(qSe," (YOSO model)"),qSe.forEach(t),ee.forEach(t),JVo=i(fa),H4=n(fa,"P",{});var jSe=s(H4);YVo=r(jSe,"The model is set in evaluation mode by default using "),Dpe=n(jSe,"CODE",{});var F4t=s(Dpe);KVo=r(F4t,"model.eval()"),F4t.forEach(t),ZVo=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(jSe,"CODE",{});var T4t=s(Gpe);eXo=r(T4t,"model.train()"),T4t.forEach(t),jSe.forEach(t),oXo=i(fa),T(U4.$$.fragment,fa),fa.forEach(t),rl.forEach(t),ZGe=i(f),td=n(f,"H2",{class:!0});var nXe=s(td);J4=n(nXe,"A",{id:!0,class:!0,href:!0});var M4t=s(J4);Ope=n(M4t,"SPAN",{});var E4t=s(Ope);T(PL.$$.fragment,E4t),E4t.forEach(t),M4t.forEach(t),rXo=i(nXe),Vpe=n(nXe,"SPAN",{});var C4t=s(Vpe);tXo=r(C4t,"AutoModelForNextSentencePrediction"),C4t.forEach(t),nXe.forEach(t),eOe=i(f),Io=n(f,"DIV",{class:!0});var tl=s(Io);T(BL.$$.fragment,tl),aXo=i(tl),ad=n(tl,"P",{});var Aoe=s(ad);nXo=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mX=n(Aoe,"A",{href:!0});var w4t=s(mX);sXo=r(w4t,"from_pretrained()"),w4t.forEach(t),lXo=r(Aoe," class method or the "),gX=n(Aoe,"A",{href:!0});var A4t=s(gX);iXo=r(A4t,"from_config()"),A4t.forEach(t),dXo=r(Aoe,` class
method.`),Aoe.forEach(t),cXo=i(tl),IL=n(tl,"P",{});var sXe=s(IL);fXo=r(sXe,"This class cannot be instantiated directly using "),Xpe=n(sXe,"CODE",{});var L4t=s(Xpe);mXo=r(L4t,"__init__()"),L4t.forEach(t),gXo=r(sXe," (throws an error)."),sXe.forEach(t),hXo=i(tl),gt=n(tl,"DIV",{class:!0});var V0=s(gt);T(NL.$$.fragment,V0),pXo=i(V0),zpe=n(V0,"P",{});var y4t=s(zpe);_Xo=r(y4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y4t.forEach(t),uXo=i(V0),nd=n(V0,"P",{});var Loe=s(nd);bXo=r(Loe,`Note:
Loading a model from its configuration file does `),Wpe=n(Loe,"STRONG",{});var x4t=s(Wpe);vXo=r(x4t,"not"),x4t.forEach(t),FXo=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(Loe,"A",{href:!0});var $4t=s(hX);TXo=r($4t,"from_pretrained()"),$4t.forEach(t),MXo=r(Loe," to load the model weights."),Loe.forEach(t),EXo=i(V0),T(Y4.$$.fragment,V0),V0.forEach(t),CXo=i(tl),to=n(tl,"DIV",{class:!0});var ma=s(to);T(qL.$$.fragment,ma),wXo=i(ma),Qpe=n(ma,"P",{});var k4t=s(Qpe);AXo=r(k4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),k4t.forEach(t),LXo=i(ma),Da=n(ma,"P",{});var X0=s(Da);yXo=r(X0,"The model class to instantiate is selected based on the "),Hpe=n(X0,"CODE",{});var S4t=s(Hpe);xXo=r(S4t,"model_type"),S4t.forEach(t),$Xo=r(X0,` property of the config object (either
passed as an argument or loaded from `),Upe=n(X0,"CODE",{});var R4t=s(Upe);kXo=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),SXo=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(X0,"CODE",{});var P4t=s(Jpe);RXo=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),PXo=r(X0,":"),X0.forEach(t),BXo=i(ma),Zr=n(ma,"UL",{});var al=s(Zr);K4=n(al,"LI",{});var DSe=s(K4);Ype=n(DSe,"STRONG",{});var B4t=s(Ype);IXo=r(B4t,"bert"),B4t.forEach(t),NXo=r(DSe," \u2014 "),pX=n(DSe,"A",{href:!0});var I4t=s(pX);qXo=r(I4t,"BertForNextSentencePrediction"),I4t.forEach(t),jXo=r(DSe," (BERT model)"),DSe.forEach(t),DXo=i(al),Z4=n(al,"LI",{});var GSe=s(Z4);Kpe=n(GSe,"STRONG",{});var N4t=s(Kpe);GXo=r(N4t,"fnet"),N4t.forEach(t),OXo=r(GSe," \u2014 "),_X=n(GSe,"A",{href:!0});var q4t=s(_X);VXo=r(q4t,"FNetForNextSentencePrediction"),q4t.forEach(t),XXo=r(GSe," (FNet model)"),GSe.forEach(t),zXo=i(al),ev=n(al,"LI",{});var OSe=s(ev);Zpe=n(OSe,"STRONG",{});var j4t=s(Zpe);WXo=r(j4t,"megatron-bert"),j4t.forEach(t),QXo=r(OSe," \u2014 "),uX=n(OSe,"A",{href:!0});var D4t=s(uX);HXo=r(D4t,"MegatronBertForNextSentencePrediction"),D4t.forEach(t),UXo=r(OSe," (Megatron-BERT model)"),OSe.forEach(t),JXo=i(al),ov=n(al,"LI",{});var VSe=s(ov);e_e=n(VSe,"STRONG",{});var G4t=s(e_e);YXo=r(G4t,"mobilebert"),G4t.forEach(t),KXo=r(VSe," \u2014 "),bX=n(VSe,"A",{href:!0});var O4t=s(bX);ZXo=r(O4t,"MobileBertForNextSentencePrediction"),O4t.forEach(t),ezo=r(VSe," (MobileBERT model)"),VSe.forEach(t),ozo=i(al),rv=n(al,"LI",{});var XSe=s(rv);o_e=n(XSe,"STRONG",{});var V4t=s(o_e);rzo=r(V4t,"qdqbert"),V4t.forEach(t),tzo=r(XSe," \u2014 "),vX=n(XSe,"A",{href:!0});var X4t=s(vX);azo=r(X4t,"QDQBertForNextSentencePrediction"),X4t.forEach(t),nzo=r(XSe," (QDQBert model)"),XSe.forEach(t),al.forEach(t),szo=i(ma),tv=n(ma,"P",{});var zSe=s(tv);lzo=r(zSe,"The model is set in evaluation mode by default using "),r_e=n(zSe,"CODE",{});var z4t=s(r_e);izo=r(z4t,"model.eval()"),z4t.forEach(t),dzo=r(zSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(zSe,"CODE",{});var W4t=s(t_e);czo=r(W4t,"model.train()"),W4t.forEach(t),zSe.forEach(t),fzo=i(ma),T(av.$$.fragment,ma),ma.forEach(t),tl.forEach(t),oOe=i(f),sd=n(f,"H2",{class:!0});var lXe=s(sd);nv=n(lXe,"A",{id:!0,class:!0,href:!0});var Q4t=s(nv);a_e=n(Q4t,"SPAN",{});var H4t=s(a_e);T(jL.$$.fragment,H4t),H4t.forEach(t),Q4t.forEach(t),mzo=i(lXe),n_e=n(lXe,"SPAN",{});var U4t=s(n_e);gzo=r(U4t,"AutoModelForTokenClassification"),U4t.forEach(t),lXe.forEach(t),rOe=i(f),No=n(f,"DIV",{class:!0});var nl=s(No);T(DL.$$.fragment,nl),hzo=i(nl),ld=n(nl,"P",{});var yoe=s(ld);pzo=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FX=n(yoe,"A",{href:!0});var J4t=s(FX);_zo=r(J4t,"from_pretrained()"),J4t.forEach(t),uzo=r(yoe," class method or the "),TX=n(yoe,"A",{href:!0});var Y4t=s(TX);bzo=r(Y4t,"from_config()"),Y4t.forEach(t),vzo=r(yoe,` class
method.`),yoe.forEach(t),Fzo=i(nl),GL=n(nl,"P",{});var iXe=s(GL);Tzo=r(iXe,"This class cannot be instantiated directly using "),s_e=n(iXe,"CODE",{});var K4t=s(s_e);Mzo=r(K4t,"__init__()"),K4t.forEach(t),Ezo=r(iXe," (throws an error)."),iXe.forEach(t),Czo=i(nl),ht=n(nl,"DIV",{class:!0});var z0=s(ht);T(OL.$$.fragment,z0),wzo=i(z0),l_e=n(z0,"P",{});var Z4t=s(l_e);Azo=r(Z4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Z4t.forEach(t),Lzo=i(z0),id=n(z0,"P",{});var xoe=s(id);yzo=r(xoe,`Note:
Loading a model from its configuration file does `),i_e=n(xoe,"STRONG",{});var evt=s(i_e);xzo=r(evt,"not"),evt.forEach(t),$zo=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(xoe,"A",{href:!0});var ovt=s(MX);kzo=r(ovt,"from_pretrained()"),ovt.forEach(t),Szo=r(xoe," to load the model weights."),xoe.forEach(t),Rzo=i(z0),T(sv.$$.fragment,z0),z0.forEach(t),Pzo=i(nl),ao=n(nl,"DIV",{class:!0});var ga=s(ao);T(VL.$$.fragment,ga),Bzo=i(ga),d_e=n(ga,"P",{});var rvt=s(d_e);Izo=r(rvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rvt.forEach(t),Nzo=i(ga),Ga=n(ga,"P",{});var W0=s(Ga);qzo=r(W0,"The model class to instantiate is selected based on the "),c_e=n(W0,"CODE",{});var tvt=s(c_e);jzo=r(tvt,"model_type"),tvt.forEach(t),Dzo=r(W0,` property of the config object (either
passed as an argument or loaded from `),f_e=n(W0,"CODE",{});var avt=s(f_e);Gzo=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),Ozo=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(W0,"CODE",{});var nvt=s(m_e);Vzo=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),Xzo=r(W0,":"),W0.forEach(t),zzo=i(ga),H=n(ga,"UL",{});var J=s(H);lv=n(J,"LI",{});var WSe=s(lv);g_e=n(WSe,"STRONG",{});var svt=s(g_e);Wzo=r(svt,"albert"),svt.forEach(t),Qzo=r(WSe," \u2014 "),EX=n(WSe,"A",{href:!0});var lvt=s(EX);Hzo=r(lvt,"AlbertForTokenClassification"),lvt.forEach(t),Uzo=r(WSe," (ALBERT model)"),WSe.forEach(t),Jzo=i(J),iv=n(J,"LI",{});var QSe=s(iv);h_e=n(QSe,"STRONG",{});var ivt=s(h_e);Yzo=r(ivt,"bert"),ivt.forEach(t),Kzo=r(QSe," \u2014 "),CX=n(QSe,"A",{href:!0});var dvt=s(CX);Zzo=r(dvt,"BertForTokenClassification"),dvt.forEach(t),eWo=r(QSe," (BERT model)"),QSe.forEach(t),oWo=i(J),dv=n(J,"LI",{});var HSe=s(dv);p_e=n(HSe,"STRONG",{});var cvt=s(p_e);rWo=r(cvt,"big_bird"),cvt.forEach(t),tWo=r(HSe," \u2014 "),wX=n(HSe,"A",{href:!0});var fvt=s(wX);aWo=r(fvt,"BigBirdForTokenClassification"),fvt.forEach(t),nWo=r(HSe," (BigBird model)"),HSe.forEach(t),sWo=i(J),cv=n(J,"LI",{});var USe=s(cv);__e=n(USe,"STRONG",{});var mvt=s(__e);lWo=r(mvt,"bloom"),mvt.forEach(t),iWo=r(USe," \u2014 "),AX=n(USe,"A",{href:!0});var gvt=s(AX);dWo=r(gvt,"BloomForTokenClassification"),gvt.forEach(t),cWo=r(USe," (BLOOM model)"),USe.forEach(t),fWo=i(J),fv=n(J,"LI",{});var JSe=s(fv);u_e=n(JSe,"STRONG",{});var hvt=s(u_e);mWo=r(hvt,"camembert"),hvt.forEach(t),gWo=r(JSe," \u2014 "),LX=n(JSe,"A",{href:!0});var pvt=s(LX);hWo=r(pvt,"CamembertForTokenClassification"),pvt.forEach(t),pWo=r(JSe," (CamemBERT model)"),JSe.forEach(t),_Wo=i(J),mv=n(J,"LI",{});var YSe=s(mv);b_e=n(YSe,"STRONG",{});var _vt=s(b_e);uWo=r(_vt,"canine"),_vt.forEach(t),bWo=r(YSe," \u2014 "),yX=n(YSe,"A",{href:!0});var uvt=s(yX);vWo=r(uvt,"CanineForTokenClassification"),uvt.forEach(t),FWo=r(YSe," (CANINE model)"),YSe.forEach(t),TWo=i(J),gv=n(J,"LI",{});var KSe=s(gv);v_e=n(KSe,"STRONG",{});var bvt=s(v_e);MWo=r(bvt,"convbert"),bvt.forEach(t),EWo=r(KSe," \u2014 "),xX=n(KSe,"A",{href:!0});var vvt=s(xX);CWo=r(vvt,"ConvBertForTokenClassification"),vvt.forEach(t),wWo=r(KSe," (ConvBERT model)"),KSe.forEach(t),AWo=i(J),hv=n(J,"LI",{});var ZSe=s(hv);F_e=n(ZSe,"STRONG",{});var Fvt=s(F_e);LWo=r(Fvt,"data2vec-text"),Fvt.forEach(t),yWo=r(ZSe," \u2014 "),$X=n(ZSe,"A",{href:!0});var Tvt=s($X);xWo=r(Tvt,"Data2VecTextForTokenClassification"),Tvt.forEach(t),$Wo=r(ZSe," (Data2VecText model)"),ZSe.forEach(t),kWo=i(J),pv=n(J,"LI",{});var eRe=s(pv);T_e=n(eRe,"STRONG",{});var Mvt=s(T_e);SWo=r(Mvt,"deberta"),Mvt.forEach(t),RWo=r(eRe," \u2014 "),kX=n(eRe,"A",{href:!0});var Evt=s(kX);PWo=r(Evt,"DebertaForTokenClassification"),Evt.forEach(t),BWo=r(eRe," (DeBERTa model)"),eRe.forEach(t),IWo=i(J),_v=n(J,"LI",{});var oRe=s(_v);M_e=n(oRe,"STRONG",{});var Cvt=s(M_e);NWo=r(Cvt,"deberta-v2"),Cvt.forEach(t),qWo=r(oRe," \u2014 "),SX=n(oRe,"A",{href:!0});var wvt=s(SX);jWo=r(wvt,"DebertaV2ForTokenClassification"),wvt.forEach(t),DWo=r(oRe," (DeBERTa-v2 model)"),oRe.forEach(t),GWo=i(J),uv=n(J,"LI",{});var rRe=s(uv);E_e=n(rRe,"STRONG",{});var Avt=s(E_e);OWo=r(Avt,"distilbert"),Avt.forEach(t),VWo=r(rRe," \u2014 "),RX=n(rRe,"A",{href:!0});var Lvt=s(RX);XWo=r(Lvt,"DistilBertForTokenClassification"),Lvt.forEach(t),zWo=r(rRe," (DistilBERT model)"),rRe.forEach(t),WWo=i(J),bv=n(J,"LI",{});var tRe=s(bv);C_e=n(tRe,"STRONG",{});var yvt=s(C_e);QWo=r(yvt,"electra"),yvt.forEach(t),HWo=r(tRe," \u2014 "),PX=n(tRe,"A",{href:!0});var xvt=s(PX);UWo=r(xvt,"ElectraForTokenClassification"),xvt.forEach(t),JWo=r(tRe," (ELECTRA model)"),tRe.forEach(t),YWo=i(J),vv=n(J,"LI",{});var aRe=s(vv);w_e=n(aRe,"STRONG",{});var $vt=s(w_e);KWo=r($vt,"flaubert"),$vt.forEach(t),ZWo=r(aRe," \u2014 "),BX=n(aRe,"A",{href:!0});var kvt=s(BX);eQo=r(kvt,"FlaubertForTokenClassification"),kvt.forEach(t),oQo=r(aRe," (FlauBERT model)"),aRe.forEach(t),rQo=i(J),Fv=n(J,"LI",{});var nRe=s(Fv);A_e=n(nRe,"STRONG",{});var Svt=s(A_e);tQo=r(Svt,"fnet"),Svt.forEach(t),aQo=r(nRe," \u2014 "),IX=n(nRe,"A",{href:!0});var Rvt=s(IX);nQo=r(Rvt,"FNetForTokenClassification"),Rvt.forEach(t),sQo=r(nRe," (FNet model)"),nRe.forEach(t),lQo=i(J),Tv=n(J,"LI",{});var sRe=s(Tv);L_e=n(sRe,"STRONG",{});var Pvt=s(L_e);iQo=r(Pvt,"funnel"),Pvt.forEach(t),dQo=r(sRe," \u2014 "),NX=n(sRe,"A",{href:!0});var Bvt=s(NX);cQo=r(Bvt,"FunnelForTokenClassification"),Bvt.forEach(t),fQo=r(sRe," (Funnel Transformer model)"),sRe.forEach(t),mQo=i(J),Mv=n(J,"LI",{});var lRe=s(Mv);y_e=n(lRe,"STRONG",{});var Ivt=s(y_e);gQo=r(Ivt,"gpt2"),Ivt.forEach(t),hQo=r(lRe," \u2014 "),qX=n(lRe,"A",{href:!0});var Nvt=s(qX);pQo=r(Nvt,"GPT2ForTokenClassification"),Nvt.forEach(t),_Qo=r(lRe," (OpenAI GPT-2 model)"),lRe.forEach(t),uQo=i(J),Ev=n(J,"LI",{});var iRe=s(Ev);x_e=n(iRe,"STRONG",{});var qvt=s(x_e);bQo=r(qvt,"ibert"),qvt.forEach(t),vQo=r(iRe," \u2014 "),jX=n(iRe,"A",{href:!0});var jvt=s(jX);FQo=r(jvt,"IBertForTokenClassification"),jvt.forEach(t),TQo=r(iRe," (I-BERT model)"),iRe.forEach(t),MQo=i(J),Cv=n(J,"LI",{});var dRe=s(Cv);$_e=n(dRe,"STRONG",{});var Dvt=s($_e);EQo=r(Dvt,"layoutlm"),Dvt.forEach(t),CQo=r(dRe," \u2014 "),DX=n(dRe,"A",{href:!0});var Gvt=s(DX);wQo=r(Gvt,"LayoutLMForTokenClassification"),Gvt.forEach(t),AQo=r(dRe," (LayoutLM model)"),dRe.forEach(t),LQo=i(J),wv=n(J,"LI",{});var cRe=s(wv);k_e=n(cRe,"STRONG",{});var Ovt=s(k_e);yQo=r(Ovt,"layoutlmv2"),Ovt.forEach(t),xQo=r(cRe," \u2014 "),GX=n(cRe,"A",{href:!0});var Vvt=s(GX);$Qo=r(Vvt,"LayoutLMv2ForTokenClassification"),Vvt.forEach(t),kQo=r(cRe," (LayoutLMv2 model)"),cRe.forEach(t),SQo=i(J),Av=n(J,"LI",{});var fRe=s(Av);S_e=n(fRe,"STRONG",{});var Xvt=s(S_e);RQo=r(Xvt,"layoutlmv3"),Xvt.forEach(t),PQo=r(fRe," \u2014 "),OX=n(fRe,"A",{href:!0});var zvt=s(OX);BQo=r(zvt,"LayoutLMv3ForTokenClassification"),zvt.forEach(t),IQo=r(fRe," (LayoutLMv3 model)"),fRe.forEach(t),NQo=i(J),Lv=n(J,"LI",{});var mRe=s(Lv);R_e=n(mRe,"STRONG",{});var Wvt=s(R_e);qQo=r(Wvt,"longformer"),Wvt.forEach(t),jQo=r(mRe," \u2014 "),VX=n(mRe,"A",{href:!0});var Qvt=s(VX);DQo=r(Qvt,"LongformerForTokenClassification"),Qvt.forEach(t),GQo=r(mRe," (Longformer model)"),mRe.forEach(t),OQo=i(J),yv=n(J,"LI",{});var gRe=s(yv);P_e=n(gRe,"STRONG",{});var Hvt=s(P_e);VQo=r(Hvt,"megatron-bert"),Hvt.forEach(t),XQo=r(gRe," \u2014 "),XX=n(gRe,"A",{href:!0});var Uvt=s(XX);zQo=r(Uvt,"MegatronBertForTokenClassification"),Uvt.forEach(t),WQo=r(gRe," (Megatron-BERT model)"),gRe.forEach(t),QQo=i(J),xv=n(J,"LI",{});var hRe=s(xv);B_e=n(hRe,"STRONG",{});var Jvt=s(B_e);HQo=r(Jvt,"mobilebert"),Jvt.forEach(t),UQo=r(hRe," \u2014 "),zX=n(hRe,"A",{href:!0});var Yvt=s(zX);JQo=r(Yvt,"MobileBertForTokenClassification"),Yvt.forEach(t),YQo=r(hRe," (MobileBERT model)"),hRe.forEach(t),KQo=i(J),$v=n(J,"LI",{});var pRe=s($v);I_e=n(pRe,"STRONG",{});var Kvt=s(I_e);ZQo=r(Kvt,"mpnet"),Kvt.forEach(t),eHo=r(pRe," \u2014 "),WX=n(pRe,"A",{href:!0});var Zvt=s(WX);oHo=r(Zvt,"MPNetForTokenClassification"),Zvt.forEach(t),rHo=r(pRe," (MPNet model)"),pRe.forEach(t),tHo=i(J),kv=n(J,"LI",{});var _Re=s(kv);N_e=n(_Re,"STRONG",{});var eFt=s(N_e);aHo=r(eFt,"nystromformer"),eFt.forEach(t),nHo=r(_Re," \u2014 "),QX=n(_Re,"A",{href:!0});var oFt=s(QX);sHo=r(oFt,"NystromformerForTokenClassification"),oFt.forEach(t),lHo=r(_Re," (Nystr\xF6mformer model)"),_Re.forEach(t),iHo=i(J),Sv=n(J,"LI",{});var uRe=s(Sv);q_e=n(uRe,"STRONG",{});var rFt=s(q_e);dHo=r(rFt,"qdqbert"),rFt.forEach(t),cHo=r(uRe," \u2014 "),HX=n(uRe,"A",{href:!0});var tFt=s(HX);fHo=r(tFt,"QDQBertForTokenClassification"),tFt.forEach(t),mHo=r(uRe," (QDQBert model)"),uRe.forEach(t),gHo=i(J),Rv=n(J,"LI",{});var bRe=s(Rv);j_e=n(bRe,"STRONG",{});var aFt=s(j_e);hHo=r(aFt,"rembert"),aFt.forEach(t),pHo=r(bRe," \u2014 "),UX=n(bRe,"A",{href:!0});var nFt=s(UX);_Ho=r(nFt,"RemBertForTokenClassification"),nFt.forEach(t),uHo=r(bRe," (RemBERT model)"),bRe.forEach(t),bHo=i(J),Pv=n(J,"LI",{});var vRe=s(Pv);D_e=n(vRe,"STRONG",{});var sFt=s(D_e);vHo=r(sFt,"roberta"),sFt.forEach(t),FHo=r(vRe," \u2014 "),JX=n(vRe,"A",{href:!0});var lFt=s(JX);THo=r(lFt,"RobertaForTokenClassification"),lFt.forEach(t),MHo=r(vRe," (RoBERTa model)"),vRe.forEach(t),EHo=i(J),Bv=n(J,"LI",{});var FRe=s(Bv);G_e=n(FRe,"STRONG",{});var iFt=s(G_e);CHo=r(iFt,"roformer"),iFt.forEach(t),wHo=r(FRe," \u2014 "),YX=n(FRe,"A",{href:!0});var dFt=s(YX);AHo=r(dFt,"RoFormerForTokenClassification"),dFt.forEach(t),LHo=r(FRe," (RoFormer model)"),FRe.forEach(t),yHo=i(J),Iv=n(J,"LI",{});var TRe=s(Iv);O_e=n(TRe,"STRONG",{});var cFt=s(O_e);xHo=r(cFt,"squeezebert"),cFt.forEach(t),$Ho=r(TRe," \u2014 "),KX=n(TRe,"A",{href:!0});var fFt=s(KX);kHo=r(fFt,"SqueezeBertForTokenClassification"),fFt.forEach(t),SHo=r(TRe," (SqueezeBERT model)"),TRe.forEach(t),RHo=i(J),Nv=n(J,"LI",{});var MRe=s(Nv);V_e=n(MRe,"STRONG",{});var mFt=s(V_e);PHo=r(mFt,"xlm"),mFt.forEach(t),BHo=r(MRe," \u2014 "),ZX=n(MRe,"A",{href:!0});var gFt=s(ZX);IHo=r(gFt,"XLMForTokenClassification"),gFt.forEach(t),NHo=r(MRe," (XLM model)"),MRe.forEach(t),qHo=i(J),qv=n(J,"LI",{});var ERe=s(qv);X_e=n(ERe,"STRONG",{});var hFt=s(X_e);jHo=r(hFt,"xlm-roberta"),hFt.forEach(t),DHo=r(ERe," \u2014 "),ez=n(ERe,"A",{href:!0});var pFt=s(ez);GHo=r(pFt,"XLMRobertaForTokenClassification"),pFt.forEach(t),OHo=r(ERe," (XLM-RoBERTa model)"),ERe.forEach(t),VHo=i(J),jv=n(J,"LI",{});var CRe=s(jv);z_e=n(CRe,"STRONG",{});var _Ft=s(z_e);XHo=r(_Ft,"xlm-roberta-xl"),_Ft.forEach(t),zHo=r(CRe," \u2014 "),oz=n(CRe,"A",{href:!0});var uFt=s(oz);WHo=r(uFt,"XLMRobertaXLForTokenClassification"),uFt.forEach(t),QHo=r(CRe," (XLM-RoBERTa-XL model)"),CRe.forEach(t),HHo=i(J),Dv=n(J,"LI",{});var wRe=s(Dv);W_e=n(wRe,"STRONG",{});var bFt=s(W_e);UHo=r(bFt,"xlnet"),bFt.forEach(t),JHo=r(wRe," \u2014 "),rz=n(wRe,"A",{href:!0});var vFt=s(rz);YHo=r(vFt,"XLNetForTokenClassification"),vFt.forEach(t),KHo=r(wRe," (XLNet model)"),wRe.forEach(t),ZHo=i(J),Gv=n(J,"LI",{});var ARe=s(Gv);Q_e=n(ARe,"STRONG",{});var FFt=s(Q_e);eUo=r(FFt,"yoso"),FFt.forEach(t),oUo=r(ARe," \u2014 "),tz=n(ARe,"A",{href:!0});var TFt=s(tz);rUo=r(TFt,"YosoForTokenClassification"),TFt.forEach(t),tUo=r(ARe," (YOSO model)"),ARe.forEach(t),J.forEach(t),aUo=i(ga),Ov=n(ga,"P",{});var LRe=s(Ov);nUo=r(LRe,"The model is set in evaluation mode by default using "),H_e=n(LRe,"CODE",{});var MFt=s(H_e);sUo=r(MFt,"model.eval()"),MFt.forEach(t),lUo=r(LRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(LRe,"CODE",{});var EFt=s(U_e);iUo=r(EFt,"model.train()"),EFt.forEach(t),LRe.forEach(t),dUo=i(ga),T(Vv.$$.fragment,ga),ga.forEach(t),nl.forEach(t),tOe=i(f),dd=n(f,"H2",{class:!0});var dXe=s(dd);Xv=n(dXe,"A",{id:!0,class:!0,href:!0});var CFt=s(Xv);J_e=n(CFt,"SPAN",{});var wFt=s(J_e);T(XL.$$.fragment,wFt),wFt.forEach(t),CFt.forEach(t),cUo=i(dXe),Y_e=n(dXe,"SPAN",{});var AFt=s(Y_e);fUo=r(AFt,"AutoModelForQuestionAnswering"),AFt.forEach(t),dXe.forEach(t),aOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(zL.$$.fragment,sl),mUo=i(sl),cd=n(sl,"P",{});var $oe=s(cd);gUo=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),az=n($oe,"A",{href:!0});var LFt=s(az);hUo=r(LFt,"from_pretrained()"),LFt.forEach(t),pUo=r($oe," class method or the "),nz=n($oe,"A",{href:!0});var yFt=s(nz);_Uo=r(yFt,"from_config()"),yFt.forEach(t),uUo=r($oe,` class
method.`),$oe.forEach(t),bUo=i(sl),WL=n(sl,"P",{});var cXe=s(WL);vUo=r(cXe,"This class cannot be instantiated directly using "),K_e=n(cXe,"CODE",{});var xFt=s(K_e);FUo=r(xFt,"__init__()"),xFt.forEach(t),TUo=r(cXe," (throws an error)."),cXe.forEach(t),MUo=i(sl),pt=n(sl,"DIV",{class:!0});var Q0=s(pt);T(QL.$$.fragment,Q0),EUo=i(Q0),Z_e=n(Q0,"P",{});var $Ft=s(Z_e);CUo=r($Ft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Ft.forEach(t),wUo=i(Q0),fd=n(Q0,"P",{});var koe=s(fd);AUo=r(koe,`Note:
Loading a model from its configuration file does `),eue=n(koe,"STRONG",{});var kFt=s(eue);LUo=r(kFt,"not"),kFt.forEach(t),yUo=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(koe,"A",{href:!0});var SFt=s(sz);xUo=r(SFt,"from_pretrained()"),SFt.forEach(t),$Uo=r(koe," to load the model weights."),koe.forEach(t),kUo=i(Q0),T(zv.$$.fragment,Q0),Q0.forEach(t),SUo=i(sl),no=n(sl,"DIV",{class:!0});var ha=s(no);T(HL.$$.fragment,ha),RUo=i(ha),oue=n(ha,"P",{});var RFt=s(oue);PUo=r(RFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RFt.forEach(t),BUo=i(ha),Oa=n(ha,"P",{});var H0=s(Oa);IUo=r(H0,"The model class to instantiate is selected based on the "),rue=n(H0,"CODE",{});var PFt=s(rue);NUo=r(PFt,"model_type"),PFt.forEach(t),qUo=r(H0,` property of the config object (either
passed as an argument or loaded from `),tue=n(H0,"CODE",{});var BFt=s(tue);jUo=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),DUo=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(H0,"CODE",{});var IFt=s(aue);GUo=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),OUo=r(H0,":"),H0.forEach(t),VUo=i(ha),V=n(ha,"UL",{});var X=s(V);Wv=n(X,"LI",{});var yRe=s(Wv);nue=n(yRe,"STRONG",{});var NFt=s(nue);XUo=r(NFt,"albert"),NFt.forEach(t),zUo=r(yRe," \u2014 "),lz=n(yRe,"A",{href:!0});var qFt=s(lz);WUo=r(qFt,"AlbertForQuestionAnswering"),qFt.forEach(t),QUo=r(yRe," (ALBERT model)"),yRe.forEach(t),HUo=i(X),Qv=n(X,"LI",{});var xRe=s(Qv);sue=n(xRe,"STRONG",{});var jFt=s(sue);UUo=r(jFt,"bart"),jFt.forEach(t),JUo=r(xRe," \u2014 "),iz=n(xRe,"A",{href:!0});var DFt=s(iz);YUo=r(DFt,"BartForQuestionAnswering"),DFt.forEach(t),KUo=r(xRe," (BART model)"),xRe.forEach(t),ZUo=i(X),Hv=n(X,"LI",{});var $Re=s(Hv);lue=n($Re,"STRONG",{});var GFt=s(lue);eJo=r(GFt,"bert"),GFt.forEach(t),oJo=r($Re," \u2014 "),dz=n($Re,"A",{href:!0});var OFt=s(dz);rJo=r(OFt,"BertForQuestionAnswering"),OFt.forEach(t),tJo=r($Re," (BERT model)"),$Re.forEach(t),aJo=i(X),Uv=n(X,"LI",{});var kRe=s(Uv);iue=n(kRe,"STRONG",{});var VFt=s(iue);nJo=r(VFt,"big_bird"),VFt.forEach(t),sJo=r(kRe," \u2014 "),cz=n(kRe,"A",{href:!0});var XFt=s(cz);lJo=r(XFt,"BigBirdForQuestionAnswering"),XFt.forEach(t),iJo=r(kRe," (BigBird model)"),kRe.forEach(t),dJo=i(X),Jv=n(X,"LI",{});var SRe=s(Jv);due=n(SRe,"STRONG",{});var zFt=s(due);cJo=r(zFt,"bigbird_pegasus"),zFt.forEach(t),fJo=r(SRe," \u2014 "),fz=n(SRe,"A",{href:!0});var WFt=s(fz);mJo=r(WFt,"BigBirdPegasusForQuestionAnswering"),WFt.forEach(t),gJo=r(SRe," (BigBird-Pegasus model)"),SRe.forEach(t),hJo=i(X),Yv=n(X,"LI",{});var RRe=s(Yv);cue=n(RRe,"STRONG",{});var QFt=s(cue);pJo=r(QFt,"camembert"),QFt.forEach(t),_Jo=r(RRe," \u2014 "),mz=n(RRe,"A",{href:!0});var HFt=s(mz);uJo=r(HFt,"CamembertForQuestionAnswering"),HFt.forEach(t),bJo=r(RRe," (CamemBERT model)"),RRe.forEach(t),vJo=i(X),Kv=n(X,"LI",{});var PRe=s(Kv);fue=n(PRe,"STRONG",{});var UFt=s(fue);FJo=r(UFt,"canine"),UFt.forEach(t),TJo=r(PRe," \u2014 "),gz=n(PRe,"A",{href:!0});var JFt=s(gz);MJo=r(JFt,"CanineForQuestionAnswering"),JFt.forEach(t),EJo=r(PRe," (CANINE model)"),PRe.forEach(t),CJo=i(X),Zv=n(X,"LI",{});var BRe=s(Zv);mue=n(BRe,"STRONG",{});var YFt=s(mue);wJo=r(YFt,"convbert"),YFt.forEach(t),AJo=r(BRe," \u2014 "),hz=n(BRe,"A",{href:!0});var KFt=s(hz);LJo=r(KFt,"ConvBertForQuestionAnswering"),KFt.forEach(t),yJo=r(BRe," (ConvBERT model)"),BRe.forEach(t),xJo=i(X),eF=n(X,"LI",{});var IRe=s(eF);gue=n(IRe,"STRONG",{});var ZFt=s(gue);$Jo=r(ZFt,"data2vec-text"),ZFt.forEach(t),kJo=r(IRe," \u2014 "),pz=n(IRe,"A",{href:!0});var e6t=s(pz);SJo=r(e6t,"Data2VecTextForQuestionAnswering"),e6t.forEach(t),RJo=r(IRe," (Data2VecText model)"),IRe.forEach(t),PJo=i(X),oF=n(X,"LI",{});var NRe=s(oF);hue=n(NRe,"STRONG",{});var o6t=s(hue);BJo=r(o6t,"deberta"),o6t.forEach(t),IJo=r(NRe," \u2014 "),_z=n(NRe,"A",{href:!0});var r6t=s(_z);NJo=r(r6t,"DebertaForQuestionAnswering"),r6t.forEach(t),qJo=r(NRe," (DeBERTa model)"),NRe.forEach(t),jJo=i(X),rF=n(X,"LI",{});var qRe=s(rF);pue=n(qRe,"STRONG",{});var t6t=s(pue);DJo=r(t6t,"deberta-v2"),t6t.forEach(t),GJo=r(qRe," \u2014 "),uz=n(qRe,"A",{href:!0});var a6t=s(uz);OJo=r(a6t,"DebertaV2ForQuestionAnswering"),a6t.forEach(t),VJo=r(qRe," (DeBERTa-v2 model)"),qRe.forEach(t),XJo=i(X),tF=n(X,"LI",{});var jRe=s(tF);_ue=n(jRe,"STRONG",{});var n6t=s(_ue);zJo=r(n6t,"distilbert"),n6t.forEach(t),WJo=r(jRe," \u2014 "),bz=n(jRe,"A",{href:!0});var s6t=s(bz);QJo=r(s6t,"DistilBertForQuestionAnswering"),s6t.forEach(t),HJo=r(jRe," (DistilBERT model)"),jRe.forEach(t),UJo=i(X),aF=n(X,"LI",{});var DRe=s(aF);uue=n(DRe,"STRONG",{});var l6t=s(uue);JJo=r(l6t,"electra"),l6t.forEach(t),YJo=r(DRe," \u2014 "),vz=n(DRe,"A",{href:!0});var i6t=s(vz);KJo=r(i6t,"ElectraForQuestionAnswering"),i6t.forEach(t),ZJo=r(DRe," (ELECTRA model)"),DRe.forEach(t),eYo=i(X),nF=n(X,"LI",{});var GRe=s(nF);bue=n(GRe,"STRONG",{});var d6t=s(bue);oYo=r(d6t,"flaubert"),d6t.forEach(t),rYo=r(GRe," \u2014 "),Fz=n(GRe,"A",{href:!0});var c6t=s(Fz);tYo=r(c6t,"FlaubertForQuestionAnsweringSimple"),c6t.forEach(t),aYo=r(GRe," (FlauBERT model)"),GRe.forEach(t),nYo=i(X),sF=n(X,"LI",{});var ORe=s(sF);vue=n(ORe,"STRONG",{});var f6t=s(vue);sYo=r(f6t,"fnet"),f6t.forEach(t),lYo=r(ORe," \u2014 "),Tz=n(ORe,"A",{href:!0});var m6t=s(Tz);iYo=r(m6t,"FNetForQuestionAnswering"),m6t.forEach(t),dYo=r(ORe," (FNet model)"),ORe.forEach(t),cYo=i(X),lF=n(X,"LI",{});var VRe=s(lF);Fue=n(VRe,"STRONG",{});var g6t=s(Fue);fYo=r(g6t,"funnel"),g6t.forEach(t),mYo=r(VRe," \u2014 "),Mz=n(VRe,"A",{href:!0});var h6t=s(Mz);gYo=r(h6t,"FunnelForQuestionAnswering"),h6t.forEach(t),hYo=r(VRe," (Funnel Transformer model)"),VRe.forEach(t),pYo=i(X),iF=n(X,"LI",{});var XRe=s(iF);Tue=n(XRe,"STRONG",{});var p6t=s(Tue);_Yo=r(p6t,"gptj"),p6t.forEach(t),uYo=r(XRe," \u2014 "),Ez=n(XRe,"A",{href:!0});var _6t=s(Ez);bYo=r(_6t,"GPTJForQuestionAnswering"),_6t.forEach(t),vYo=r(XRe," (GPT-J model)"),XRe.forEach(t),FYo=i(X),dF=n(X,"LI",{});var zRe=s(dF);Mue=n(zRe,"STRONG",{});var u6t=s(Mue);TYo=r(u6t,"ibert"),u6t.forEach(t),MYo=r(zRe," \u2014 "),Cz=n(zRe,"A",{href:!0});var b6t=s(Cz);EYo=r(b6t,"IBertForQuestionAnswering"),b6t.forEach(t),CYo=r(zRe," (I-BERT model)"),zRe.forEach(t),wYo=i(X),cF=n(X,"LI",{});var WRe=s(cF);Eue=n(WRe,"STRONG",{});var v6t=s(Eue);AYo=r(v6t,"layoutlmv2"),v6t.forEach(t),LYo=r(WRe," \u2014 "),wz=n(WRe,"A",{href:!0});var F6t=s(wz);yYo=r(F6t,"LayoutLMv2ForQuestionAnswering"),F6t.forEach(t),xYo=r(WRe," (LayoutLMv2 model)"),WRe.forEach(t),$Yo=i(X),fF=n(X,"LI",{});var QRe=s(fF);Cue=n(QRe,"STRONG",{});var T6t=s(Cue);kYo=r(T6t,"layoutlmv3"),T6t.forEach(t),SYo=r(QRe," \u2014 "),Az=n(QRe,"A",{href:!0});var M6t=s(Az);RYo=r(M6t,"LayoutLMv3ForQuestionAnswering"),M6t.forEach(t),PYo=r(QRe," (LayoutLMv3 model)"),QRe.forEach(t),BYo=i(X),mF=n(X,"LI",{});var HRe=s(mF);wue=n(HRe,"STRONG",{});var E6t=s(wue);IYo=r(E6t,"led"),E6t.forEach(t),NYo=r(HRe," \u2014 "),Lz=n(HRe,"A",{href:!0});var C6t=s(Lz);qYo=r(C6t,"LEDForQuestionAnswering"),C6t.forEach(t),jYo=r(HRe," (LED model)"),HRe.forEach(t),DYo=i(X),gF=n(X,"LI",{});var URe=s(gF);Aue=n(URe,"STRONG",{});var w6t=s(Aue);GYo=r(w6t,"longformer"),w6t.forEach(t),OYo=r(URe," \u2014 "),yz=n(URe,"A",{href:!0});var A6t=s(yz);VYo=r(A6t,"LongformerForQuestionAnswering"),A6t.forEach(t),XYo=r(URe," (Longformer model)"),URe.forEach(t),zYo=i(X),hF=n(X,"LI",{});var JRe=s(hF);Lue=n(JRe,"STRONG",{});var L6t=s(Lue);WYo=r(L6t,"lxmert"),L6t.forEach(t),QYo=r(JRe," \u2014 "),xz=n(JRe,"A",{href:!0});var y6t=s(xz);HYo=r(y6t,"LxmertForQuestionAnswering"),y6t.forEach(t),UYo=r(JRe," (LXMERT model)"),JRe.forEach(t),JYo=i(X),pF=n(X,"LI",{});var YRe=s(pF);yue=n(YRe,"STRONG",{});var x6t=s(yue);YYo=r(x6t,"mbart"),x6t.forEach(t),KYo=r(YRe," \u2014 "),$z=n(YRe,"A",{href:!0});var $6t=s($z);ZYo=r($6t,"MBartForQuestionAnswering"),$6t.forEach(t),eKo=r(YRe," (mBART model)"),YRe.forEach(t),oKo=i(X),_F=n(X,"LI",{});var KRe=s(_F);xue=n(KRe,"STRONG",{});var k6t=s(xue);rKo=r(k6t,"megatron-bert"),k6t.forEach(t),tKo=r(KRe," \u2014 "),kz=n(KRe,"A",{href:!0});var S6t=s(kz);aKo=r(S6t,"MegatronBertForQuestionAnswering"),S6t.forEach(t),nKo=r(KRe," (Megatron-BERT model)"),KRe.forEach(t),sKo=i(X),uF=n(X,"LI",{});var ZRe=s(uF);$ue=n(ZRe,"STRONG",{});var R6t=s($ue);lKo=r(R6t,"mobilebert"),R6t.forEach(t),iKo=r(ZRe," \u2014 "),Sz=n(ZRe,"A",{href:!0});var P6t=s(Sz);dKo=r(P6t,"MobileBertForQuestionAnswering"),P6t.forEach(t),cKo=r(ZRe," (MobileBERT model)"),ZRe.forEach(t),fKo=i(X),bF=n(X,"LI",{});var ePe=s(bF);kue=n(ePe,"STRONG",{});var B6t=s(kue);mKo=r(B6t,"mpnet"),B6t.forEach(t),gKo=r(ePe," \u2014 "),Rz=n(ePe,"A",{href:!0});var I6t=s(Rz);hKo=r(I6t,"MPNetForQuestionAnswering"),I6t.forEach(t),pKo=r(ePe," (MPNet model)"),ePe.forEach(t),_Ko=i(X),vF=n(X,"LI",{});var oPe=s(vF);Sue=n(oPe,"STRONG",{});var N6t=s(Sue);uKo=r(N6t,"nystromformer"),N6t.forEach(t),bKo=r(oPe," \u2014 "),Pz=n(oPe,"A",{href:!0});var q6t=s(Pz);vKo=r(q6t,"NystromformerForQuestionAnswering"),q6t.forEach(t),FKo=r(oPe," (Nystr\xF6mformer model)"),oPe.forEach(t),TKo=i(X),FF=n(X,"LI",{});var rPe=s(FF);Rue=n(rPe,"STRONG",{});var j6t=s(Rue);MKo=r(j6t,"qdqbert"),j6t.forEach(t),EKo=r(rPe," \u2014 "),Bz=n(rPe,"A",{href:!0});var D6t=s(Bz);CKo=r(D6t,"QDQBertForQuestionAnswering"),D6t.forEach(t),wKo=r(rPe," (QDQBert model)"),rPe.forEach(t),AKo=i(X),TF=n(X,"LI",{});var tPe=s(TF);Pue=n(tPe,"STRONG",{});var G6t=s(Pue);LKo=r(G6t,"reformer"),G6t.forEach(t),yKo=r(tPe," \u2014 "),Iz=n(tPe,"A",{href:!0});var O6t=s(Iz);xKo=r(O6t,"ReformerForQuestionAnswering"),O6t.forEach(t),$Ko=r(tPe," (Reformer model)"),tPe.forEach(t),kKo=i(X),MF=n(X,"LI",{});var aPe=s(MF);Bue=n(aPe,"STRONG",{});var V6t=s(Bue);SKo=r(V6t,"rembert"),V6t.forEach(t),RKo=r(aPe," \u2014 "),Nz=n(aPe,"A",{href:!0});var X6t=s(Nz);PKo=r(X6t,"RemBertForQuestionAnswering"),X6t.forEach(t),BKo=r(aPe," (RemBERT model)"),aPe.forEach(t),IKo=i(X),EF=n(X,"LI",{});var nPe=s(EF);Iue=n(nPe,"STRONG",{});var z6t=s(Iue);NKo=r(z6t,"roberta"),z6t.forEach(t),qKo=r(nPe," \u2014 "),qz=n(nPe,"A",{href:!0});var W6t=s(qz);jKo=r(W6t,"RobertaForQuestionAnswering"),W6t.forEach(t),DKo=r(nPe," (RoBERTa model)"),nPe.forEach(t),GKo=i(X),CF=n(X,"LI",{});var sPe=s(CF);Nue=n(sPe,"STRONG",{});var Q6t=s(Nue);OKo=r(Q6t,"roformer"),Q6t.forEach(t),VKo=r(sPe," \u2014 "),jz=n(sPe,"A",{href:!0});var H6t=s(jz);XKo=r(H6t,"RoFormerForQuestionAnswering"),H6t.forEach(t),zKo=r(sPe," (RoFormer model)"),sPe.forEach(t),WKo=i(X),wF=n(X,"LI",{});var lPe=s(wF);que=n(lPe,"STRONG",{});var U6t=s(que);QKo=r(U6t,"splinter"),U6t.forEach(t),HKo=r(lPe," \u2014 "),Dz=n(lPe,"A",{href:!0});var J6t=s(Dz);UKo=r(J6t,"SplinterForQuestionAnswering"),J6t.forEach(t),JKo=r(lPe," (Splinter model)"),lPe.forEach(t),YKo=i(X),AF=n(X,"LI",{});var iPe=s(AF);jue=n(iPe,"STRONG",{});var Y6t=s(jue);KKo=r(Y6t,"squeezebert"),Y6t.forEach(t),ZKo=r(iPe," \u2014 "),Gz=n(iPe,"A",{href:!0});var K6t=s(Gz);eZo=r(K6t,"SqueezeBertForQuestionAnswering"),K6t.forEach(t),oZo=r(iPe," (SqueezeBERT model)"),iPe.forEach(t),rZo=i(X),LF=n(X,"LI",{});var dPe=s(LF);Due=n(dPe,"STRONG",{});var Z6t=s(Due);tZo=r(Z6t,"xlm"),Z6t.forEach(t),aZo=r(dPe," \u2014 "),Oz=n(dPe,"A",{href:!0});var eTt=s(Oz);nZo=r(eTt,"XLMForQuestionAnsweringSimple"),eTt.forEach(t),sZo=r(dPe," (XLM model)"),dPe.forEach(t),lZo=i(X),yF=n(X,"LI",{});var cPe=s(yF);Gue=n(cPe,"STRONG",{});var oTt=s(Gue);iZo=r(oTt,"xlm-roberta"),oTt.forEach(t),dZo=r(cPe," \u2014 "),Vz=n(cPe,"A",{href:!0});var rTt=s(Vz);cZo=r(rTt,"XLMRobertaForQuestionAnswering"),rTt.forEach(t),fZo=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),mZo=i(X),xF=n(X,"LI",{});var fPe=s(xF);Oue=n(fPe,"STRONG",{});var tTt=s(Oue);gZo=r(tTt,"xlm-roberta-xl"),tTt.forEach(t),hZo=r(fPe," \u2014 "),Xz=n(fPe,"A",{href:!0});var aTt=s(Xz);pZo=r(aTt,"XLMRobertaXLForQuestionAnswering"),aTt.forEach(t),_Zo=r(fPe," (XLM-RoBERTa-XL model)"),fPe.forEach(t),uZo=i(X),$F=n(X,"LI",{});var mPe=s($F);Vue=n(mPe,"STRONG",{});var nTt=s(Vue);bZo=r(nTt,"xlnet"),nTt.forEach(t),vZo=r(mPe," \u2014 "),zz=n(mPe,"A",{href:!0});var sTt=s(zz);FZo=r(sTt,"XLNetForQuestionAnsweringSimple"),sTt.forEach(t),TZo=r(mPe," (XLNet model)"),mPe.forEach(t),MZo=i(X),kF=n(X,"LI",{});var gPe=s(kF);Xue=n(gPe,"STRONG",{});var lTt=s(Xue);EZo=r(lTt,"yoso"),lTt.forEach(t),CZo=r(gPe," \u2014 "),Wz=n(gPe,"A",{href:!0});var iTt=s(Wz);wZo=r(iTt,"YosoForQuestionAnswering"),iTt.forEach(t),AZo=r(gPe," (YOSO model)"),gPe.forEach(t),X.forEach(t),LZo=i(ha),SF=n(ha,"P",{});var hPe=s(SF);yZo=r(hPe,"The model is set in evaluation mode by default using "),zue=n(hPe,"CODE",{});var dTt=s(zue);xZo=r(dTt,"model.eval()"),dTt.forEach(t),$Zo=r(hPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(hPe,"CODE",{});var cTt=s(Wue);kZo=r(cTt,"model.train()"),cTt.forEach(t),hPe.forEach(t),SZo=i(ha),T(RF.$$.fragment,ha),ha.forEach(t),sl.forEach(t),nOe=i(f),md=n(f,"H2",{class:!0});var fXe=s(md);PF=n(fXe,"A",{id:!0,class:!0,href:!0});var fTt=s(PF);Que=n(fTt,"SPAN",{});var mTt=s(Que);T(UL.$$.fragment,mTt),mTt.forEach(t),fTt.forEach(t),RZo=i(fXe),Hue=n(fXe,"SPAN",{});var gTt=s(Hue);PZo=r(gTt,"AutoModelForTableQuestionAnswering"),gTt.forEach(t),fXe.forEach(t),sOe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(JL.$$.fragment,ll),BZo=i(ll),gd=n(ll,"P",{});var Soe=s(gd);IZo=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Qz=n(Soe,"A",{href:!0});var hTt=s(Qz);NZo=r(hTt,"from_pretrained()"),hTt.forEach(t),qZo=r(Soe," class method or the "),Hz=n(Soe,"A",{href:!0});var pTt=s(Hz);jZo=r(pTt,"from_config()"),pTt.forEach(t),DZo=r(Soe,` class
method.`),Soe.forEach(t),GZo=i(ll),YL=n(ll,"P",{});var mXe=s(YL);OZo=r(mXe,"This class cannot be instantiated directly using "),Uue=n(mXe,"CODE",{});var _Tt=s(Uue);VZo=r(_Tt,"__init__()"),_Tt.forEach(t),XZo=r(mXe," (throws an error)."),mXe.forEach(t),zZo=i(ll),_t=n(ll,"DIV",{class:!0});var U0=s(_t);T(KL.$$.fragment,U0),WZo=i(U0),Jue=n(U0,"P",{});var uTt=s(Jue);QZo=r(uTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uTt.forEach(t),HZo=i(U0),hd=n(U0,"P",{});var Roe=s(hd);UZo=r(Roe,`Note:
Loading a model from its configuration file does `),Yue=n(Roe,"STRONG",{});var bTt=s(Yue);JZo=r(bTt,"not"),bTt.forEach(t),YZo=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(Roe,"A",{href:!0});var vTt=s(Uz);KZo=r(vTt,"from_pretrained()"),vTt.forEach(t),ZZo=r(Roe," to load the model weights."),Roe.forEach(t),eer=i(U0),T(BF.$$.fragment,U0),U0.forEach(t),oer=i(ll),so=n(ll,"DIV",{class:!0});var pa=s(so);T(ZL.$$.fragment,pa),rer=i(pa),Kue=n(pa,"P",{});var FTt=s(Kue);ter=r(FTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FTt.forEach(t),aer=i(pa),Va=n(pa,"P",{});var J0=s(Va);ner=r(J0,"The model class to instantiate is selected based on the "),Zue=n(J0,"CODE",{});var TTt=s(Zue);ser=r(TTt,"model_type"),TTt.forEach(t),ler=r(J0,` property of the config object (either
passed as an argument or loaded from `),e1e=n(J0,"CODE",{});var MTt=s(e1e);ier=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),der=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(J0,"CODE",{});var ETt=s(o1e);cer=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),fer=r(J0,":"),J0.forEach(t),mer=i(pa),r1e=n(pa,"UL",{});var CTt=s(r1e);IF=n(CTt,"LI",{});var pPe=s(IF);t1e=n(pPe,"STRONG",{});var wTt=s(t1e);ger=r(wTt,"tapas"),wTt.forEach(t),her=r(pPe," \u2014 "),Jz=n(pPe,"A",{href:!0});var ATt=s(Jz);per=r(ATt,"TapasForQuestionAnswering"),ATt.forEach(t),_er=r(pPe," (TAPAS model)"),pPe.forEach(t),CTt.forEach(t),uer=i(pa),NF=n(pa,"P",{});var _Pe=s(NF);ber=r(_Pe,"The model is set in evaluation mode by default using "),a1e=n(_Pe,"CODE",{});var LTt=s(a1e);ver=r(LTt,"model.eval()"),LTt.forEach(t),Fer=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(_Pe,"CODE",{});var yTt=s(n1e);Ter=r(yTt,"model.train()"),yTt.forEach(t),_Pe.forEach(t),Mer=i(pa),T(qF.$$.fragment,pa),pa.forEach(t),ll.forEach(t),lOe=i(f),pd=n(f,"H2",{class:!0});var gXe=s(pd);jF=n(gXe,"A",{id:!0,class:!0,href:!0});var xTt=s(jF);s1e=n(xTt,"SPAN",{});var $Tt=s(s1e);T(ey.$$.fragment,$Tt),$Tt.forEach(t),xTt.forEach(t),Eer=i(gXe),l1e=n(gXe,"SPAN",{});var kTt=s(l1e);Cer=r(kTt,"AutoModelForImageClassification"),kTt.forEach(t),gXe.forEach(t),iOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(oy.$$.fragment,il),wer=i(il),_d=n(il,"P",{});var Poe=s(_d);Aer=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yz=n(Poe,"A",{href:!0});var STt=s(Yz);Ler=r(STt,"from_pretrained()"),STt.forEach(t),yer=r(Poe," class method or the "),Kz=n(Poe,"A",{href:!0});var RTt=s(Kz);xer=r(RTt,"from_config()"),RTt.forEach(t),$er=r(Poe,` class
method.`),Poe.forEach(t),ker=i(il),ry=n(il,"P",{});var hXe=s(ry);Ser=r(hXe,"This class cannot be instantiated directly using "),i1e=n(hXe,"CODE",{});var PTt=s(i1e);Rer=r(PTt,"__init__()"),PTt.forEach(t),Per=r(hXe," (throws an error)."),hXe.forEach(t),Ber=i(il),ut=n(il,"DIV",{class:!0});var Y0=s(ut);T(ty.$$.fragment,Y0),Ier=i(Y0),d1e=n(Y0,"P",{});var BTt=s(d1e);Ner=r(BTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BTt.forEach(t),qer=i(Y0),ud=n(Y0,"P",{});var Boe=s(ud);jer=r(Boe,`Note:
Loading a model from its configuration file does `),c1e=n(Boe,"STRONG",{});var ITt=s(c1e);Der=r(ITt,"not"),ITt.forEach(t),Ger=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(Boe,"A",{href:!0});var NTt=s(Zz);Oer=r(NTt,"from_pretrained()"),NTt.forEach(t),Ver=r(Boe," to load the model weights."),Boe.forEach(t),Xer=i(Y0),T(DF.$$.fragment,Y0),Y0.forEach(t),zer=i(il),lo=n(il,"DIV",{class:!0});var _a=s(lo);T(ay.$$.fragment,_a),Wer=i(_a),f1e=n(_a,"P",{});var qTt=s(f1e);Qer=r(qTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qTt.forEach(t),Her=i(_a),Xa=n(_a,"P",{});var K0=s(Xa);Uer=r(K0,"The model class to instantiate is selected based on the "),m1e=n(K0,"CODE",{});var jTt=s(m1e);Jer=r(jTt,"model_type"),jTt.forEach(t),Yer=r(K0,` property of the config object (either
passed as an argument or loaded from `),g1e=n(K0,"CODE",{});var DTt=s(g1e);Ker=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),Zer=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(K0,"CODE",{});var GTt=s(h1e);eor=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),oor=r(K0,":"),K0.forEach(t),ror=i(_a),ue=n(_a,"UL",{});var Te=s(ue);GF=n(Te,"LI",{});var uPe=s(GF);p1e=n(uPe,"STRONG",{});var OTt=s(p1e);tor=r(OTt,"beit"),OTt.forEach(t),aor=r(uPe," \u2014 "),eW=n(uPe,"A",{href:!0});var VTt=s(eW);nor=r(VTt,"BeitForImageClassification"),VTt.forEach(t),sor=r(uPe," (BEiT model)"),uPe.forEach(t),lor=i(Te),OF=n(Te,"LI",{});var bPe=s(OF);_1e=n(bPe,"STRONG",{});var XTt=s(_1e);ior=r(XTt,"convnext"),XTt.forEach(t),dor=r(bPe," \u2014 "),oW=n(bPe,"A",{href:!0});var zTt=s(oW);cor=r(zTt,"ConvNextForImageClassification"),zTt.forEach(t),mor=r(bPe," (ConvNeXT model)"),bPe.forEach(t),gor=i(Te),VF=n(Te,"LI",{});var vPe=s(VF);u1e=n(vPe,"STRONG",{});var WTt=s(u1e);hor=r(WTt,"cvt"),WTt.forEach(t),por=r(vPe," \u2014 "),rW=n(vPe,"A",{href:!0});var QTt=s(rW);_or=r(QTt,"CvtForImageClassification"),QTt.forEach(t),uor=r(vPe," (CvT model)"),vPe.forEach(t),bor=i(Te),XF=n(Te,"LI",{});var FPe=s(XF);b1e=n(FPe,"STRONG",{});var HTt=s(b1e);vor=r(HTt,"data2vec-vision"),HTt.forEach(t),For=r(FPe," \u2014 "),tW=n(FPe,"A",{href:!0});var UTt=s(tW);Tor=r(UTt,"Data2VecVisionForImageClassification"),UTt.forEach(t),Mor=r(FPe," (Data2VecVision model)"),FPe.forEach(t),Eor=i(Te),Vs=n(Te,"LI",{});var Jk=s(Vs);v1e=n(Jk,"STRONG",{});var JTt=s(v1e);Cor=r(JTt,"deit"),JTt.forEach(t),wor=r(Jk," \u2014 "),aW=n(Jk,"A",{href:!0});var YTt=s(aW);Aor=r(YTt,"DeiTForImageClassification"),YTt.forEach(t),Lor=r(Jk," or "),nW=n(Jk,"A",{href:!0});var KTt=s(nW);yor=r(KTt,"DeiTForImageClassificationWithTeacher"),KTt.forEach(t),xor=r(Jk," (DeiT model)"),Jk.forEach(t),$or=i(Te),zF=n(Te,"LI",{});var TPe=s(zF);F1e=n(TPe,"STRONG",{});var ZTt=s(F1e);kor=r(ZTt,"imagegpt"),ZTt.forEach(t),Sor=r(TPe," \u2014 "),sW=n(TPe,"A",{href:!0});var e7t=s(sW);Ror=r(e7t,"ImageGPTForImageClassification"),e7t.forEach(t),Por=r(TPe," (ImageGPT model)"),TPe.forEach(t),Bor=i(Te),Xs=n(Te,"LI",{});var Yk=s(Xs);T1e=n(Yk,"STRONG",{});var o7t=s(T1e);Ior=r(o7t,"levit"),o7t.forEach(t),Nor=r(Yk," \u2014 "),lW=n(Yk,"A",{href:!0});var r7t=s(lW);qor=r(r7t,"LevitForImageClassification"),r7t.forEach(t),jor=r(Yk," or "),iW=n(Yk,"A",{href:!0});var t7t=s(iW);Dor=r(t7t,"LevitForImageClassificationWithTeacher"),t7t.forEach(t),Gor=r(Yk," (LeViT model)"),Yk.forEach(t),Oor=i(Te),bt=n(Te,"LI",{});var Lf=s(bt);M1e=n(Lf,"STRONG",{});var a7t=s(M1e);Vor=r(a7t,"perceiver"),a7t.forEach(t),Xor=r(Lf," \u2014 "),dW=n(Lf,"A",{href:!0});var n7t=s(dW);zor=r(n7t,"PerceiverForImageClassificationLearned"),n7t.forEach(t),Wor=r(Lf," or "),cW=n(Lf,"A",{href:!0});var s7t=s(cW);Qor=r(s7t,"PerceiverForImageClassificationFourier"),s7t.forEach(t),Hor=r(Lf," or "),fW=n(Lf,"A",{href:!0});var l7t=s(fW);Uor=r(l7t,"PerceiverForImageClassificationConvProcessing"),l7t.forEach(t),Jor=r(Lf," (Perceiver model)"),Lf.forEach(t),Yor=i(Te),WF=n(Te,"LI",{});var MPe=s(WF);E1e=n(MPe,"STRONG",{});var i7t=s(E1e);Kor=r(i7t,"poolformer"),i7t.forEach(t),Zor=r(MPe," \u2014 "),mW=n(MPe,"A",{href:!0});var d7t=s(mW);err=r(d7t,"PoolFormerForImageClassification"),d7t.forEach(t),orr=r(MPe," (PoolFormer model)"),MPe.forEach(t),rrr=i(Te),QF=n(Te,"LI",{});var EPe=s(QF);C1e=n(EPe,"STRONG",{});var c7t=s(C1e);trr=r(c7t,"regnet"),c7t.forEach(t),arr=r(EPe," \u2014 "),gW=n(EPe,"A",{href:!0});var f7t=s(gW);nrr=r(f7t,"RegNetForImageClassification"),f7t.forEach(t),srr=r(EPe," (RegNet model)"),EPe.forEach(t),lrr=i(Te),HF=n(Te,"LI",{});var CPe=s(HF);w1e=n(CPe,"STRONG",{});var m7t=s(w1e);irr=r(m7t,"resnet"),m7t.forEach(t),drr=r(CPe," \u2014 "),hW=n(CPe,"A",{href:!0});var g7t=s(hW);crr=r(g7t,"ResNetForImageClassification"),g7t.forEach(t),frr=r(CPe," (ResNet model)"),CPe.forEach(t),mrr=i(Te),UF=n(Te,"LI",{});var wPe=s(UF);A1e=n(wPe,"STRONG",{});var h7t=s(A1e);grr=r(h7t,"segformer"),h7t.forEach(t),hrr=r(wPe," \u2014 "),pW=n(wPe,"A",{href:!0});var p7t=s(pW);prr=r(p7t,"SegformerForImageClassification"),p7t.forEach(t),_rr=r(wPe," (SegFormer model)"),wPe.forEach(t),urr=i(Te),JF=n(Te,"LI",{});var APe=s(JF);L1e=n(APe,"STRONG",{});var _7t=s(L1e);brr=r(_7t,"swin"),_7t.forEach(t),vrr=r(APe," \u2014 "),_W=n(APe,"A",{href:!0});var u7t=s(_W);Frr=r(u7t,"SwinForImageClassification"),u7t.forEach(t),Trr=r(APe," (Swin Transformer model)"),APe.forEach(t),Mrr=i(Te),YF=n(Te,"LI",{});var LPe=s(YF);y1e=n(LPe,"STRONG",{});var b7t=s(y1e);Err=r(b7t,"swinv2"),b7t.forEach(t),Crr=r(LPe," \u2014 "),uW=n(LPe,"A",{href:!0});var v7t=s(uW);wrr=r(v7t,"Swinv2ForImageClassification"),v7t.forEach(t),Arr=r(LPe," (Swin Transformer V2 model)"),LPe.forEach(t),Lrr=i(Te),KF=n(Te,"LI",{});var yPe=s(KF);x1e=n(yPe,"STRONG",{});var F7t=s(x1e);yrr=r(F7t,"van"),F7t.forEach(t),xrr=r(yPe," \u2014 "),bW=n(yPe,"A",{href:!0});var T7t=s(bW);$rr=r(T7t,"VanForImageClassification"),T7t.forEach(t),krr=r(yPe," (VAN model)"),yPe.forEach(t),Srr=i(Te),ZF=n(Te,"LI",{});var xPe=s(ZF);$1e=n(xPe,"STRONG",{});var M7t=s($1e);Rrr=r(M7t,"vit"),M7t.forEach(t),Prr=r(xPe," \u2014 "),vW=n(xPe,"A",{href:!0});var E7t=s(vW);Brr=r(E7t,"ViTForImageClassification"),E7t.forEach(t),Irr=r(xPe," (ViT model)"),xPe.forEach(t),Te.forEach(t),Nrr=i(_a),e6=n(_a,"P",{});var $Pe=s(e6);qrr=r($Pe,"The model is set in evaluation mode by default using "),k1e=n($Pe,"CODE",{});var C7t=s(k1e);jrr=r(C7t,"model.eval()"),C7t.forEach(t),Drr=r($Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S1e=n($Pe,"CODE",{});var w7t=s(S1e);Grr=r(w7t,"model.train()"),w7t.forEach(t),$Pe.forEach(t),Orr=i(_a),T(o6.$$.fragment,_a),_a.forEach(t),il.forEach(t),dOe=i(f),bd=n(f,"H2",{class:!0});var pXe=s(bd);r6=n(pXe,"A",{id:!0,class:!0,href:!0});var A7t=s(r6);R1e=n(A7t,"SPAN",{});var L7t=s(R1e);T(ny.$$.fragment,L7t),L7t.forEach(t),A7t.forEach(t),Vrr=i(pXe),P1e=n(pXe,"SPAN",{});var y7t=s(P1e);Xrr=r(y7t,"AutoModelForVision2Seq"),y7t.forEach(t),pXe.forEach(t),cOe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(sy.$$.fragment,dl),zrr=i(dl),vd=n(dl,"P",{});var Ioe=s(vd);Wrr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FW=n(Ioe,"A",{href:!0});var x7t=s(FW);Qrr=r(x7t,"from_pretrained()"),x7t.forEach(t),Hrr=r(Ioe," class method or the "),TW=n(Ioe,"A",{href:!0});var $7t=s(TW);Urr=r($7t,"from_config()"),$7t.forEach(t),Jrr=r(Ioe,` class
method.`),Ioe.forEach(t),Yrr=i(dl),ly=n(dl,"P",{});var _Xe=s(ly);Krr=r(_Xe,"This class cannot be instantiated directly using "),B1e=n(_Xe,"CODE",{});var k7t=s(B1e);Zrr=r(k7t,"__init__()"),k7t.forEach(t),etr=r(_Xe," (throws an error)."),_Xe.forEach(t),otr=i(dl),vt=n(dl,"DIV",{class:!0});var Z0=s(vt);T(iy.$$.fragment,Z0),rtr=i(Z0),I1e=n(Z0,"P",{});var S7t=s(I1e);ttr=r(S7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S7t.forEach(t),atr=i(Z0),Fd=n(Z0,"P",{});var Noe=s(Fd);ntr=r(Noe,`Note:
Loading a model from its configuration file does `),N1e=n(Noe,"STRONG",{});var R7t=s(N1e);str=r(R7t,"not"),R7t.forEach(t),ltr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Noe,"A",{href:!0});var P7t=s(MW);itr=r(P7t,"from_pretrained()"),P7t.forEach(t),dtr=r(Noe," to load the model weights."),Noe.forEach(t),ctr=i(Z0),T(t6.$$.fragment,Z0),Z0.forEach(t),ftr=i(dl),io=n(dl,"DIV",{class:!0});var ua=s(io);T(dy.$$.fragment,ua),mtr=i(ua),q1e=n(ua,"P",{});var B7t=s(q1e);gtr=r(B7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),B7t.forEach(t),htr=i(ua),za=n(ua,"P",{});var ew=s(za);ptr=r(ew,"The model class to instantiate is selected based on the "),j1e=n(ew,"CODE",{});var I7t=s(j1e);_tr=r(I7t,"model_type"),I7t.forEach(t),utr=r(ew,` property of the config object (either
passed as an argument or loaded from `),D1e=n(ew,"CODE",{});var N7t=s(D1e);btr=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),vtr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(ew,"CODE",{});var q7t=s(G1e);Ftr=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),Ttr=r(ew,":"),ew.forEach(t),Mtr=i(ua),O1e=n(ua,"UL",{});var j7t=s(O1e);a6=n(j7t,"LI",{});var kPe=s(a6);V1e=n(kPe,"STRONG",{});var D7t=s(V1e);Etr=r(D7t,"vision-encoder-decoder"),D7t.forEach(t),Ctr=r(kPe," \u2014 "),EW=n(kPe,"A",{href:!0});var G7t=s(EW);wtr=r(G7t,"VisionEncoderDecoderModel"),G7t.forEach(t),Atr=r(kPe," (Vision Encoder decoder model)"),kPe.forEach(t),j7t.forEach(t),Ltr=i(ua),n6=n(ua,"P",{});var SPe=s(n6);ytr=r(SPe,"The model is set in evaluation mode by default using "),X1e=n(SPe,"CODE",{});var O7t=s(X1e);xtr=r(O7t,"model.eval()"),O7t.forEach(t),$tr=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(SPe,"CODE",{});var V7t=s(z1e);ktr=r(V7t,"model.train()"),V7t.forEach(t),SPe.forEach(t),Str=i(ua),T(s6.$$.fragment,ua),ua.forEach(t),dl.forEach(t),fOe=i(f),Td=n(f,"H2",{class:!0});var uXe=s(Td);l6=n(uXe,"A",{id:!0,class:!0,href:!0});var X7t=s(l6);W1e=n(X7t,"SPAN",{});var z7t=s(W1e);T(cy.$$.fragment,z7t),z7t.forEach(t),X7t.forEach(t),Rtr=i(uXe),Q1e=n(uXe,"SPAN",{});var W7t=s(Q1e);Ptr=r(W7t,"AutoModelForVisualQuestionAnswering"),W7t.forEach(t),uXe.forEach(t),mOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(fy.$$.fragment,cl),Btr=i(cl),Md=n(cl,"P",{});var qoe=s(Md);Itr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),CW=n(qoe,"A",{href:!0});var Q7t=s(CW);Ntr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),qtr=r(qoe," class method or the "),wW=n(qoe,"A",{href:!0});var H7t=s(wW);jtr=r(H7t,"from_config()"),H7t.forEach(t),Dtr=r(qoe,` class
method.`),qoe.forEach(t),Gtr=i(cl),my=n(cl,"P",{});var bXe=s(my);Otr=r(bXe,"This class cannot be instantiated directly using "),H1e=n(bXe,"CODE",{});var U7t=s(H1e);Vtr=r(U7t,"__init__()"),U7t.forEach(t),Xtr=r(bXe," (throws an error)."),bXe.forEach(t),ztr=i(cl),Ft=n(cl,"DIV",{class:!0});var ow=s(Ft);T(gy.$$.fragment,ow),Wtr=i(ow),U1e=n(ow,"P",{});var J7t=s(U1e);Qtr=r(J7t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),J7t.forEach(t),Htr=i(ow),Ed=n(ow,"P",{});var joe=s(Ed);Utr=r(joe,`Note:
Loading a model from its configuration file does `),J1e=n(joe,"STRONG",{});var Y7t=s(J1e);Jtr=r(Y7t,"not"),Y7t.forEach(t),Ytr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(joe,"A",{href:!0});var K7t=s(AW);Ktr=r(K7t,"from_pretrained()"),K7t.forEach(t),Ztr=r(joe," to load the model weights."),joe.forEach(t),ear=i(ow),T(i6.$$.fragment,ow),ow.forEach(t),oar=i(cl),co=n(cl,"DIV",{class:!0});var ba=s(co);T(hy.$$.fragment,ba),rar=i(ba),Y1e=n(ba,"P",{});var Z7t=s(Y1e);tar=r(Z7t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Z7t.forEach(t),aar=i(ba),Wa=n(ba,"P",{});var rw=s(Wa);nar=r(rw,"The model class to instantiate is selected based on the "),K1e=n(rw,"CODE",{});var e9t=s(K1e);sar=r(e9t,"model_type"),e9t.forEach(t),lar=r(rw,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(rw,"CODE",{});var o9t=s(Z1e);iar=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),dar=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(rw,"CODE",{});var r9t=s(e2e);car=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),far=r(rw,":"),rw.forEach(t),mar=i(ba),o2e=n(ba,"UL",{});var t9t=s(o2e);d6=n(t9t,"LI",{});var RPe=s(d6);r2e=n(RPe,"STRONG",{});var a9t=s(r2e);gar=r(a9t,"vilt"),a9t.forEach(t),har=r(RPe," \u2014 "),LW=n(RPe,"A",{href:!0});var n9t=s(LW);par=r(n9t,"ViltForQuestionAnswering"),n9t.forEach(t),_ar=r(RPe," (ViLT model)"),RPe.forEach(t),t9t.forEach(t),uar=i(ba),c6=n(ba,"P",{});var PPe=s(c6);bar=r(PPe,"The model is set in evaluation mode by default using "),t2e=n(PPe,"CODE",{});var s9t=s(t2e);Far=r(s9t,"model.eval()"),s9t.forEach(t),Tar=r(PPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a2e=n(PPe,"CODE",{});var l9t=s(a2e);Mar=r(l9t,"model.train()"),l9t.forEach(t),PPe.forEach(t),Ear=i(ba),T(f6.$$.fragment,ba),ba.forEach(t),cl.forEach(t),gOe=i(f),Cd=n(f,"H2",{class:!0});var vXe=s(Cd);m6=n(vXe,"A",{id:!0,class:!0,href:!0});var i9t=s(m6);n2e=n(i9t,"SPAN",{});var d9t=s(n2e);T(py.$$.fragment,d9t),d9t.forEach(t),i9t.forEach(t),Car=i(vXe),s2e=n(vXe,"SPAN",{});var c9t=s(s2e);war=r(c9t,"AutoModelForAudioClassification"),c9t.forEach(t),vXe.forEach(t),hOe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(_y.$$.fragment,fl),Aar=i(fl),wd=n(fl,"P",{});var Doe=s(wd);Lar=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),yW=n(Doe,"A",{href:!0});var f9t=s(yW);yar=r(f9t,"from_pretrained()"),f9t.forEach(t),xar=r(Doe," class method or the "),xW=n(Doe,"A",{href:!0});var m9t=s(xW);$ar=r(m9t,"from_config()"),m9t.forEach(t),kar=r(Doe,` class
method.`),Doe.forEach(t),Sar=i(fl),uy=n(fl,"P",{});var FXe=s(uy);Rar=r(FXe,"This class cannot be instantiated directly using "),l2e=n(FXe,"CODE",{});var g9t=s(l2e);Par=r(g9t,"__init__()"),g9t.forEach(t),Bar=r(FXe," (throws an error)."),FXe.forEach(t),Iar=i(fl),Tt=n(fl,"DIV",{class:!0});var tw=s(Tt);T(by.$$.fragment,tw),Nar=i(tw),i2e=n(tw,"P",{});var h9t=s(i2e);qar=r(h9t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),h9t.forEach(t),jar=i(tw),Ad=n(tw,"P",{});var Goe=s(Ad);Dar=r(Goe,`Note:
Loading a model from its configuration file does `),d2e=n(Goe,"STRONG",{});var p9t=s(d2e);Gar=r(p9t,"not"),p9t.forEach(t),Oar=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Goe,"A",{href:!0});var _9t=s($W);Var=r(_9t,"from_pretrained()"),_9t.forEach(t),Xar=r(Goe," to load the model weights."),Goe.forEach(t),zar=i(tw),T(g6.$$.fragment,tw),tw.forEach(t),War=i(fl),fo=n(fl,"DIV",{class:!0});var va=s(fo);T(vy.$$.fragment,va),Qar=i(va),c2e=n(va,"P",{});var u9t=s(c2e);Har=r(u9t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),u9t.forEach(t),Uar=i(va),Qa=n(va,"P",{});var aw=s(Qa);Jar=r(aw,"The model class to instantiate is selected based on the "),f2e=n(aw,"CODE",{});var b9t=s(f2e);Yar=r(b9t,"model_type"),b9t.forEach(t),Kar=r(aw,` property of the config object (either
passed as an argument or loaded from `),m2e=n(aw,"CODE",{});var v9t=s(m2e);Zar=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),enr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(aw,"CODE",{});var F9t=s(g2e);onr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),rnr=r(aw,":"),aw.forEach(t),tnr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);h6=n(ze,"LI",{});var BPe=s(h6);h2e=n(BPe,"STRONG",{});var T9t=s(h2e);anr=r(T9t,"data2vec-audio"),T9t.forEach(t),nnr=r(BPe," \u2014 "),kW=n(BPe,"A",{href:!0});var M9t=s(kW);snr=r(M9t,"Data2VecAudioForSequenceClassification"),M9t.forEach(t),lnr=r(BPe," (Data2VecAudio model)"),BPe.forEach(t),inr=i(ze),p6=n(ze,"LI",{});var IPe=s(p6);p2e=n(IPe,"STRONG",{});var E9t=s(p2e);dnr=r(E9t,"hubert"),E9t.forEach(t),cnr=r(IPe," \u2014 "),SW=n(IPe,"A",{href:!0});var C9t=s(SW);fnr=r(C9t,"HubertForSequenceClassification"),C9t.forEach(t),mnr=r(IPe," (Hubert model)"),IPe.forEach(t),gnr=i(ze),_6=n(ze,"LI",{});var NPe=s(_6);_2e=n(NPe,"STRONG",{});var w9t=s(_2e);hnr=r(w9t,"sew"),w9t.forEach(t),pnr=r(NPe," \u2014 "),RW=n(NPe,"A",{href:!0});var A9t=s(RW);_nr=r(A9t,"SEWForSequenceClassification"),A9t.forEach(t),unr=r(NPe," (SEW model)"),NPe.forEach(t),bnr=i(ze),u6=n(ze,"LI",{});var qPe=s(u6);u2e=n(qPe,"STRONG",{});var L9t=s(u2e);vnr=r(L9t,"sew-d"),L9t.forEach(t),Fnr=r(qPe," \u2014 "),PW=n(qPe,"A",{href:!0});var y9t=s(PW);Tnr=r(y9t,"SEWDForSequenceClassification"),y9t.forEach(t),Mnr=r(qPe," (SEW-D model)"),qPe.forEach(t),Enr=i(ze),b6=n(ze,"LI",{});var jPe=s(b6);b2e=n(jPe,"STRONG",{});var x9t=s(b2e);Cnr=r(x9t,"unispeech"),x9t.forEach(t),wnr=r(jPe," \u2014 "),BW=n(jPe,"A",{href:!0});var $9t=s(BW);Anr=r($9t,"UniSpeechForSequenceClassification"),$9t.forEach(t),Lnr=r(jPe," (UniSpeech model)"),jPe.forEach(t),ynr=i(ze),v6=n(ze,"LI",{});var DPe=s(v6);v2e=n(DPe,"STRONG",{});var k9t=s(v2e);xnr=r(k9t,"unispeech-sat"),k9t.forEach(t),$nr=r(DPe," \u2014 "),IW=n(DPe,"A",{href:!0});var S9t=s(IW);knr=r(S9t,"UniSpeechSatForSequenceClassification"),S9t.forEach(t),Snr=r(DPe," (UniSpeechSat model)"),DPe.forEach(t),Rnr=i(ze),F6=n(ze,"LI",{});var GPe=s(F6);F2e=n(GPe,"STRONG",{});var R9t=s(F2e);Pnr=r(R9t,"wav2vec2"),R9t.forEach(t),Bnr=r(GPe," \u2014 "),NW=n(GPe,"A",{href:!0});var P9t=s(NW);Inr=r(P9t,"Wav2Vec2ForSequenceClassification"),P9t.forEach(t),Nnr=r(GPe," (Wav2Vec2 model)"),GPe.forEach(t),qnr=i(ze),T6=n(ze,"LI",{});var OPe=s(T6);T2e=n(OPe,"STRONG",{});var B9t=s(T2e);jnr=r(B9t,"wav2vec2-conformer"),B9t.forEach(t),Dnr=r(OPe," \u2014 "),qW=n(OPe,"A",{href:!0});var I9t=s(qW);Gnr=r(I9t,"Wav2Vec2ConformerForSequenceClassification"),I9t.forEach(t),Onr=r(OPe," (Wav2Vec2-Conformer model)"),OPe.forEach(t),Vnr=i(ze),M6=n(ze,"LI",{});var VPe=s(M6);M2e=n(VPe,"STRONG",{});var N9t=s(M2e);Xnr=r(N9t,"wavlm"),N9t.forEach(t),znr=r(VPe," \u2014 "),jW=n(VPe,"A",{href:!0});var q9t=s(jW);Wnr=r(q9t,"WavLMForSequenceClassification"),q9t.forEach(t),Qnr=r(VPe," (WavLM model)"),VPe.forEach(t),ze.forEach(t),Hnr=i(va),E6=n(va,"P",{});var XPe=s(E6);Unr=r(XPe,"The model is set in evaluation mode by default using "),E2e=n(XPe,"CODE",{});var j9t=s(E2e);Jnr=r(j9t,"model.eval()"),j9t.forEach(t),Ynr=r(XPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=n(XPe,"CODE",{});var D9t=s(C2e);Knr=r(D9t,"model.train()"),D9t.forEach(t),XPe.forEach(t),Znr=i(va),T(C6.$$.fragment,va),va.forEach(t),fl.forEach(t),pOe=i(f),Ld=n(f,"H2",{class:!0});var TXe=s(Ld);w6=n(TXe,"A",{id:!0,class:!0,href:!0});var G9t=s(w6);w2e=n(G9t,"SPAN",{});var O9t=s(w2e);T(Fy.$$.fragment,O9t),O9t.forEach(t),G9t.forEach(t),esr=i(TXe),A2e=n(TXe,"SPAN",{});var V9t=s(A2e);osr=r(V9t,"AutoModelForAudioFrameClassification"),V9t.forEach(t),TXe.forEach(t),_Oe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(Ty.$$.fragment,ml),rsr=i(ml),yd=n(ml,"P",{});var Ooe=s(yd);tsr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),DW=n(Ooe,"A",{href:!0});var X9t=s(DW);asr=r(X9t,"from_pretrained()"),X9t.forEach(t),nsr=r(Ooe," class method or the "),GW=n(Ooe,"A",{href:!0});var z9t=s(GW);ssr=r(z9t,"from_config()"),z9t.forEach(t),lsr=r(Ooe,` class
method.`),Ooe.forEach(t),isr=i(ml),My=n(ml,"P",{});var MXe=s(My);dsr=r(MXe,"This class cannot be instantiated directly using "),L2e=n(MXe,"CODE",{});var W9t=s(L2e);csr=r(W9t,"__init__()"),W9t.forEach(t),fsr=r(MXe," (throws an error)."),MXe.forEach(t),msr=i(ml),Mt=n(ml,"DIV",{class:!0});var nw=s(Mt);T(Ey.$$.fragment,nw),gsr=i(nw),y2e=n(nw,"P",{});var Q9t=s(y2e);hsr=r(Q9t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Q9t.forEach(t),psr=i(nw),xd=n(nw,"P",{});var Voe=s(xd);_sr=r(Voe,`Note:
Loading a model from its configuration file does `),x2e=n(Voe,"STRONG",{});var H9t=s(x2e);usr=r(H9t,"not"),H9t.forEach(t),bsr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(Voe,"A",{href:!0});var U9t=s(OW);vsr=r(U9t,"from_pretrained()"),U9t.forEach(t),Fsr=r(Voe," to load the model weights."),Voe.forEach(t),Tsr=i(nw),T(A6.$$.fragment,nw),nw.forEach(t),Msr=i(ml),mo=n(ml,"DIV",{class:!0});var Fa=s(mo);T(Cy.$$.fragment,Fa),Esr=i(Fa),$2e=n(Fa,"P",{});var J9t=s($2e);Csr=r(J9t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),J9t.forEach(t),wsr=i(Fa),Ha=n(Fa,"P",{});var sw=s(Ha);Asr=r(sw,"The model class to instantiate is selected based on the "),k2e=n(sw,"CODE",{});var Y9t=s(k2e);Lsr=r(Y9t,"model_type"),Y9t.forEach(t),ysr=r(sw,` property of the config object (either
passed as an argument or loaded from `),S2e=n(sw,"CODE",{});var K9t=s(S2e);xsr=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),$sr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(sw,"CODE",{});var Z9t=s(R2e);ksr=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),Ssr=r(sw,":"),sw.forEach(t),Rsr=i(Fa),et=n(Fa,"UL",{});var gl=s(et);L6=n(gl,"LI",{});var zPe=s(L6);P2e=n(zPe,"STRONG",{});var eMt=s(P2e);Psr=r(eMt,"data2vec-audio"),eMt.forEach(t),Bsr=r(zPe," \u2014 "),VW=n(zPe,"A",{href:!0});var oMt=s(VW);Isr=r(oMt,"Data2VecAudioForAudioFrameClassification"),oMt.forEach(t),Nsr=r(zPe," (Data2VecAudio model)"),zPe.forEach(t),qsr=i(gl),y6=n(gl,"LI",{});var WPe=s(y6);B2e=n(WPe,"STRONG",{});var rMt=s(B2e);jsr=r(rMt,"unispeech-sat"),rMt.forEach(t),Dsr=r(WPe," \u2014 "),XW=n(WPe,"A",{href:!0});var tMt=s(XW);Gsr=r(tMt,"UniSpeechSatForAudioFrameClassification"),tMt.forEach(t),Osr=r(WPe," (UniSpeechSat model)"),WPe.forEach(t),Vsr=i(gl),x6=n(gl,"LI",{});var QPe=s(x6);I2e=n(QPe,"STRONG",{});var aMt=s(I2e);Xsr=r(aMt,"wav2vec2"),aMt.forEach(t),zsr=r(QPe," \u2014 "),zW=n(QPe,"A",{href:!0});var nMt=s(zW);Wsr=r(nMt,"Wav2Vec2ForAudioFrameClassification"),nMt.forEach(t),Qsr=r(QPe," (Wav2Vec2 model)"),QPe.forEach(t),Hsr=i(gl),$6=n(gl,"LI",{});var HPe=s($6);N2e=n(HPe,"STRONG",{});var sMt=s(N2e);Usr=r(sMt,"wav2vec2-conformer"),sMt.forEach(t),Jsr=r(HPe," \u2014 "),WW=n(HPe,"A",{href:!0});var lMt=s(WW);Ysr=r(lMt,"Wav2Vec2ConformerForAudioFrameClassification"),lMt.forEach(t),Ksr=r(HPe," (Wav2Vec2-Conformer model)"),HPe.forEach(t),Zsr=i(gl),k6=n(gl,"LI",{});var UPe=s(k6);q2e=n(UPe,"STRONG",{});var iMt=s(q2e);elr=r(iMt,"wavlm"),iMt.forEach(t),olr=r(UPe," \u2014 "),QW=n(UPe,"A",{href:!0});var dMt=s(QW);rlr=r(dMt,"WavLMForAudioFrameClassification"),dMt.forEach(t),tlr=r(UPe," (WavLM model)"),UPe.forEach(t),gl.forEach(t),alr=i(Fa),S6=n(Fa,"P",{});var JPe=s(S6);nlr=r(JPe,"The model is set in evaluation mode by default using "),j2e=n(JPe,"CODE",{});var cMt=s(j2e);slr=r(cMt,"model.eval()"),cMt.forEach(t),llr=r(JPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D2e=n(JPe,"CODE",{});var fMt=s(D2e);ilr=r(fMt,"model.train()"),fMt.forEach(t),JPe.forEach(t),dlr=i(Fa),T(R6.$$.fragment,Fa),Fa.forEach(t),ml.forEach(t),uOe=i(f),$d=n(f,"H2",{class:!0});var EXe=s($d);P6=n(EXe,"A",{id:!0,class:!0,href:!0});var mMt=s(P6);G2e=n(mMt,"SPAN",{});var gMt=s(G2e);T(wy.$$.fragment,gMt),gMt.forEach(t),mMt.forEach(t),clr=i(EXe),O2e=n(EXe,"SPAN",{});var hMt=s(O2e);flr=r(hMt,"AutoModelForCTC"),hMt.forEach(t),EXe.forEach(t),bOe=i(f),zo=n(f,"DIV",{class:!0});var hl=s(zo);T(Ay.$$.fragment,hl),mlr=i(hl),kd=n(hl,"P",{});var Xoe=s(kd);glr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),HW=n(Xoe,"A",{href:!0});var pMt=s(HW);hlr=r(pMt,"from_pretrained()"),pMt.forEach(t),plr=r(Xoe," class method or the "),UW=n(Xoe,"A",{href:!0});var _Mt=s(UW);_lr=r(_Mt,"from_config()"),_Mt.forEach(t),ulr=r(Xoe,` class
method.`),Xoe.forEach(t),blr=i(hl),Ly=n(hl,"P",{});var CXe=s(Ly);vlr=r(CXe,"This class cannot be instantiated directly using "),V2e=n(CXe,"CODE",{});var uMt=s(V2e);Flr=r(uMt,"__init__()"),uMt.forEach(t),Tlr=r(CXe," (throws an error)."),CXe.forEach(t),Mlr=i(hl),Et=n(hl,"DIV",{class:!0});var lw=s(Et);T(yy.$$.fragment,lw),Elr=i(lw),X2e=n(lw,"P",{});var bMt=s(X2e);Clr=r(bMt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bMt.forEach(t),wlr=i(lw),Sd=n(lw,"P",{});var zoe=s(Sd);Alr=r(zoe,`Note:
Loading a model from its configuration file does `),z2e=n(zoe,"STRONG",{});var vMt=s(z2e);Llr=r(vMt,"not"),vMt.forEach(t),ylr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(zoe,"A",{href:!0});var FMt=s(JW);xlr=r(FMt,"from_pretrained()"),FMt.forEach(t),$lr=r(zoe," to load the model weights."),zoe.forEach(t),klr=i(lw),T(B6.$$.fragment,lw),lw.forEach(t),Slr=i(hl),go=n(hl,"DIV",{class:!0});var Ta=s(go);T(xy.$$.fragment,Ta),Rlr=i(Ta),W2e=n(Ta,"P",{});var TMt=s(W2e);Plr=r(TMt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TMt.forEach(t),Blr=i(Ta),Ua=n(Ta,"P",{});var iw=s(Ua);Ilr=r(iw,"The model class to instantiate is selected based on the "),Q2e=n(iw,"CODE",{});var MMt=s(Q2e);Nlr=r(MMt,"model_type"),MMt.forEach(t),qlr=r(iw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(iw,"CODE",{});var EMt=s(H2e);jlr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),Dlr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(iw,"CODE",{});var CMt=s(U2e);Glr=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),Olr=r(iw,":"),iw.forEach(t),Vlr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);I6=n(Be,"LI",{});var YPe=s(I6);J2e=n(YPe,"STRONG",{});var wMt=s(J2e);Xlr=r(wMt,"data2vec-audio"),wMt.forEach(t),zlr=r(YPe," \u2014 "),YW=n(YPe,"A",{href:!0});var AMt=s(YW);Wlr=r(AMt,"Data2VecAudioForCTC"),AMt.forEach(t),Qlr=r(YPe," (Data2VecAudio model)"),YPe.forEach(t),Hlr=i(Be),N6=n(Be,"LI",{});var KPe=s(N6);Y2e=n(KPe,"STRONG",{});var LMt=s(Y2e);Ulr=r(LMt,"hubert"),LMt.forEach(t),Jlr=r(KPe," \u2014 "),KW=n(KPe,"A",{href:!0});var yMt=s(KW);Ylr=r(yMt,"HubertForCTC"),yMt.forEach(t),Klr=r(KPe," (Hubert model)"),KPe.forEach(t),Zlr=i(Be),q6=n(Be,"LI",{});var ZPe=s(q6);K2e=n(ZPe,"STRONG",{});var xMt=s(K2e);eir=r(xMt,"mctct"),xMt.forEach(t),oir=r(ZPe," \u2014 "),ZW=n(ZPe,"A",{href:!0});var $Mt=s(ZW);rir=r($Mt,"MCTCTForCTC"),$Mt.forEach(t),tir=r(ZPe," (M-CTC-T model)"),ZPe.forEach(t),air=i(Be),j6=n(Be,"LI",{});var eBe=s(j6);Z2e=n(eBe,"STRONG",{});var kMt=s(Z2e);nir=r(kMt,"sew"),kMt.forEach(t),sir=r(eBe," \u2014 "),eQ=n(eBe,"A",{href:!0});var SMt=s(eQ);lir=r(SMt,"SEWForCTC"),SMt.forEach(t),iir=r(eBe," (SEW model)"),eBe.forEach(t),dir=i(Be),D6=n(Be,"LI",{});var oBe=s(D6);ebe=n(oBe,"STRONG",{});var RMt=s(ebe);cir=r(RMt,"sew-d"),RMt.forEach(t),fir=r(oBe," \u2014 "),oQ=n(oBe,"A",{href:!0});var PMt=s(oQ);mir=r(PMt,"SEWDForCTC"),PMt.forEach(t),gir=r(oBe," (SEW-D model)"),oBe.forEach(t),hir=i(Be),G6=n(Be,"LI",{});var rBe=s(G6);obe=n(rBe,"STRONG",{});var BMt=s(obe);pir=r(BMt,"unispeech"),BMt.forEach(t),_ir=r(rBe," \u2014 "),rQ=n(rBe,"A",{href:!0});var IMt=s(rQ);uir=r(IMt,"UniSpeechForCTC"),IMt.forEach(t),bir=r(rBe," (UniSpeech model)"),rBe.forEach(t),vir=i(Be),O6=n(Be,"LI",{});var tBe=s(O6);rbe=n(tBe,"STRONG",{});var NMt=s(rbe);Fir=r(NMt,"unispeech-sat"),NMt.forEach(t),Tir=r(tBe," \u2014 "),tQ=n(tBe,"A",{href:!0});var qMt=s(tQ);Mir=r(qMt,"UniSpeechSatForCTC"),qMt.forEach(t),Eir=r(tBe," (UniSpeechSat model)"),tBe.forEach(t),Cir=i(Be),V6=n(Be,"LI",{});var aBe=s(V6);tbe=n(aBe,"STRONG",{});var jMt=s(tbe);wir=r(jMt,"wav2vec2"),jMt.forEach(t),Air=r(aBe," \u2014 "),aQ=n(aBe,"A",{href:!0});var DMt=s(aQ);Lir=r(DMt,"Wav2Vec2ForCTC"),DMt.forEach(t),yir=r(aBe," (Wav2Vec2 model)"),aBe.forEach(t),xir=i(Be),X6=n(Be,"LI",{});var nBe=s(X6);abe=n(nBe,"STRONG",{});var GMt=s(abe);$ir=r(GMt,"wav2vec2-conformer"),GMt.forEach(t),kir=r(nBe," \u2014 "),nQ=n(nBe,"A",{href:!0});var OMt=s(nQ);Sir=r(OMt,"Wav2Vec2ConformerForCTC"),OMt.forEach(t),Rir=r(nBe," (Wav2Vec2-Conformer model)"),nBe.forEach(t),Pir=i(Be),z6=n(Be,"LI",{});var sBe=s(z6);nbe=n(sBe,"STRONG",{});var VMt=s(nbe);Bir=r(VMt,"wavlm"),VMt.forEach(t),Iir=r(sBe," \u2014 "),sQ=n(sBe,"A",{href:!0});var XMt=s(sQ);Nir=r(XMt,"WavLMForCTC"),XMt.forEach(t),qir=r(sBe," (WavLM model)"),sBe.forEach(t),Be.forEach(t),jir=i(Ta),W6=n(Ta,"P",{});var lBe=s(W6);Dir=r(lBe,"The model is set in evaluation mode by default using "),sbe=n(lBe,"CODE",{});var zMt=s(sbe);Gir=r(zMt,"model.eval()"),zMt.forEach(t),Oir=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=n(lBe,"CODE",{});var WMt=s(lbe);Vir=r(WMt,"model.train()"),WMt.forEach(t),lBe.forEach(t),Xir=i(Ta),T(Q6.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),vOe=i(f),Rd=n(f,"H2",{class:!0});var wXe=s(Rd);H6=n(wXe,"A",{id:!0,class:!0,href:!0});var QMt=s(H6);ibe=n(QMt,"SPAN",{});var HMt=s(ibe);T($y.$$.fragment,HMt),HMt.forEach(t),QMt.forEach(t),zir=i(wXe),dbe=n(wXe,"SPAN",{});var UMt=s(dbe);Wir=r(UMt,"AutoModelForSpeechSeq2Seq"),UMt.forEach(t),wXe.forEach(t),FOe=i(f),Wo=n(f,"DIV",{class:!0});var pl=s(Wo);T(ky.$$.fragment,pl),Qir=i(pl),Pd=n(pl,"P",{});var Woe=s(Pd);Hir=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lQ=n(Woe,"A",{href:!0});var JMt=s(lQ);Uir=r(JMt,"from_pretrained()"),JMt.forEach(t),Jir=r(Woe," class method or the "),iQ=n(Woe,"A",{href:!0});var YMt=s(iQ);Yir=r(YMt,"from_config()"),YMt.forEach(t),Kir=r(Woe,` class
method.`),Woe.forEach(t),Zir=i(pl),Sy=n(pl,"P",{});var AXe=s(Sy);edr=r(AXe,"This class cannot be instantiated directly using "),cbe=n(AXe,"CODE",{});var KMt=s(cbe);odr=r(KMt,"__init__()"),KMt.forEach(t),rdr=r(AXe," (throws an error)."),AXe.forEach(t),tdr=i(pl),Ct=n(pl,"DIV",{class:!0});var dw=s(Ct);T(Ry.$$.fragment,dw),adr=i(dw),fbe=n(dw,"P",{});var ZMt=s(fbe);ndr=r(ZMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZMt.forEach(t),sdr=i(dw),Bd=n(dw,"P",{});var Qoe=s(Bd);ldr=r(Qoe,`Note:
Loading a model from its configuration file does `),mbe=n(Qoe,"STRONG",{});var eEt=s(mbe);idr=r(eEt,"not"),eEt.forEach(t),ddr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(Qoe,"A",{href:!0});var oEt=s(dQ);cdr=r(oEt,"from_pretrained()"),oEt.forEach(t),fdr=r(Qoe," to load the model weights."),Qoe.forEach(t),mdr=i(dw),T(U6.$$.fragment,dw),dw.forEach(t),gdr=i(pl),ho=n(pl,"DIV",{class:!0});var Ma=s(ho);T(Py.$$.fragment,Ma),hdr=i(Ma),gbe=n(Ma,"P",{});var rEt=s(gbe);pdr=r(rEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rEt.forEach(t),_dr=i(Ma),Ja=n(Ma,"P",{});var cw=s(Ja);udr=r(cw,"The model class to instantiate is selected based on the "),hbe=n(cw,"CODE",{});var tEt=s(hbe);bdr=r(tEt,"model_type"),tEt.forEach(t),vdr=r(cw,` property of the config object (either
passed as an argument or loaded from `),pbe=n(cw,"CODE",{});var aEt=s(pbe);Fdr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),Tdr=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(cw,"CODE",{});var nEt=s(_be);Mdr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),Edr=r(cw,":"),cw.forEach(t),Cdr=i(Ma),By=n(Ma,"UL",{});var LXe=s(By);J6=n(LXe,"LI",{});var iBe=s(J6);ube=n(iBe,"STRONG",{});var sEt=s(ube);wdr=r(sEt,"speech-encoder-decoder"),sEt.forEach(t),Adr=r(iBe," \u2014 "),cQ=n(iBe,"A",{href:!0});var lEt=s(cQ);Ldr=r(lEt,"SpeechEncoderDecoderModel"),lEt.forEach(t),ydr=r(iBe," (Speech Encoder decoder model)"),iBe.forEach(t),xdr=i(LXe),Y6=n(LXe,"LI",{});var dBe=s(Y6);bbe=n(dBe,"STRONG",{});var iEt=s(bbe);$dr=r(iEt,"speech_to_text"),iEt.forEach(t),kdr=r(dBe," \u2014 "),fQ=n(dBe,"A",{href:!0});var dEt=s(fQ);Sdr=r(dEt,"Speech2TextForConditionalGeneration"),dEt.forEach(t),Rdr=r(dBe," (Speech2Text model)"),dBe.forEach(t),LXe.forEach(t),Pdr=i(Ma),K6=n(Ma,"P",{});var cBe=s(K6);Bdr=r(cBe,"The model is set in evaluation mode by default using "),vbe=n(cBe,"CODE",{});var cEt=s(vbe);Idr=r(cEt,"model.eval()"),cEt.forEach(t),Ndr=r(cBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fbe=n(cBe,"CODE",{});var fEt=s(Fbe);qdr=r(fEt,"model.train()"),fEt.forEach(t),cBe.forEach(t),jdr=i(Ma),T(Z6.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),TOe=i(f),Id=n(f,"H2",{class:!0});var yXe=s(Id);eT=n(yXe,"A",{id:!0,class:!0,href:!0});var mEt=s(eT);Tbe=n(mEt,"SPAN",{});var gEt=s(Tbe);T(Iy.$$.fragment,gEt),gEt.forEach(t),mEt.forEach(t),Ddr=i(yXe),Mbe=n(yXe,"SPAN",{});var hEt=s(Mbe);Gdr=r(hEt,"AutoModelForAudioXVector"),hEt.forEach(t),yXe.forEach(t),MOe=i(f),Qo=n(f,"DIV",{class:!0});var _l=s(Qo);T(Ny.$$.fragment,_l),Odr=i(_l),Nd=n(_l,"P",{});var Hoe=s(Nd);Vdr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mQ=n(Hoe,"A",{href:!0});var pEt=s(mQ);Xdr=r(pEt,"from_pretrained()"),pEt.forEach(t),zdr=r(Hoe," class method or the "),gQ=n(Hoe,"A",{href:!0});var _Et=s(gQ);Wdr=r(_Et,"from_config()"),_Et.forEach(t),Qdr=r(Hoe,` class
method.`),Hoe.forEach(t),Hdr=i(_l),qy=n(_l,"P",{});var xXe=s(qy);Udr=r(xXe,"This class cannot be instantiated directly using "),Ebe=n(xXe,"CODE",{});var uEt=s(Ebe);Jdr=r(uEt,"__init__()"),uEt.forEach(t),Ydr=r(xXe," (throws an error)."),xXe.forEach(t),Kdr=i(_l),wt=n(_l,"DIV",{class:!0});var fw=s(wt);T(jy.$$.fragment,fw),Zdr=i(fw),Cbe=n(fw,"P",{});var bEt=s(Cbe);ecr=r(bEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),bEt.forEach(t),ocr=i(fw),qd=n(fw,"P",{});var Uoe=s(qd);rcr=r(Uoe,`Note:
Loading a model from its configuration file does `),wbe=n(Uoe,"STRONG",{});var vEt=s(wbe);tcr=r(vEt,"not"),vEt.forEach(t),acr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=n(Uoe,"A",{href:!0});var FEt=s(hQ);ncr=r(FEt,"from_pretrained()"),FEt.forEach(t),scr=r(Uoe," to load the model weights."),Uoe.forEach(t),lcr=i(fw),T(oT.$$.fragment,fw),fw.forEach(t),icr=i(_l),po=n(_l,"DIV",{class:!0});var Ea=s(po);T(Dy.$$.fragment,Ea),dcr=i(Ea),Abe=n(Ea,"P",{});var TEt=s(Abe);ccr=r(TEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),TEt.forEach(t),fcr=i(Ea),Ya=n(Ea,"P",{});var mw=s(Ya);mcr=r(mw,"The model class to instantiate is selected based on the "),Lbe=n(mw,"CODE",{});var MEt=s(Lbe);gcr=r(MEt,"model_type"),MEt.forEach(t),hcr=r(mw,` property of the config object (either
passed as an argument or loaded from `),ybe=n(mw,"CODE",{});var EEt=s(ybe);pcr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),_cr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(mw,"CODE",{});var CEt=s(xbe);ucr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),bcr=r(mw,":"),mw.forEach(t),vcr=i(Ea),ot=n(Ea,"UL",{});var ul=s(ot);rT=n(ul,"LI",{});var fBe=s(rT);$be=n(fBe,"STRONG",{});var wEt=s($be);Fcr=r(wEt,"data2vec-audio"),wEt.forEach(t),Tcr=r(fBe," \u2014 "),pQ=n(fBe,"A",{href:!0});var AEt=s(pQ);Mcr=r(AEt,"Data2VecAudioForXVector"),AEt.forEach(t),Ecr=r(fBe," (Data2VecAudio model)"),fBe.forEach(t),Ccr=i(ul),tT=n(ul,"LI",{});var mBe=s(tT);kbe=n(mBe,"STRONG",{});var LEt=s(kbe);wcr=r(LEt,"unispeech-sat"),LEt.forEach(t),Acr=r(mBe," \u2014 "),_Q=n(mBe,"A",{href:!0});var yEt=s(_Q);Lcr=r(yEt,"UniSpeechSatForXVector"),yEt.forEach(t),ycr=r(mBe," (UniSpeechSat model)"),mBe.forEach(t),xcr=i(ul),aT=n(ul,"LI",{});var gBe=s(aT);Sbe=n(gBe,"STRONG",{});var xEt=s(Sbe);$cr=r(xEt,"wav2vec2"),xEt.forEach(t),kcr=r(gBe," \u2014 "),uQ=n(gBe,"A",{href:!0});var $Et=s(uQ);Scr=r($Et,"Wav2Vec2ForXVector"),$Et.forEach(t),Rcr=r(gBe," (Wav2Vec2 model)"),gBe.forEach(t),Pcr=i(ul),nT=n(ul,"LI",{});var hBe=s(nT);Rbe=n(hBe,"STRONG",{});var kEt=s(Rbe);Bcr=r(kEt,"wav2vec2-conformer"),kEt.forEach(t),Icr=r(hBe," \u2014 "),bQ=n(hBe,"A",{href:!0});var SEt=s(bQ);Ncr=r(SEt,"Wav2Vec2ConformerForXVector"),SEt.forEach(t),qcr=r(hBe," (Wav2Vec2-Conformer model)"),hBe.forEach(t),jcr=i(ul),sT=n(ul,"LI",{});var pBe=s(sT);Pbe=n(pBe,"STRONG",{});var REt=s(Pbe);Dcr=r(REt,"wavlm"),REt.forEach(t),Gcr=r(pBe," \u2014 "),vQ=n(pBe,"A",{href:!0});var PEt=s(vQ);Ocr=r(PEt,"WavLMForXVector"),PEt.forEach(t),Vcr=r(pBe," (WavLM model)"),pBe.forEach(t),ul.forEach(t),Xcr=i(Ea),lT=n(Ea,"P",{});var _Be=s(lT);zcr=r(_Be,"The model is set in evaluation mode by default using "),Bbe=n(_Be,"CODE",{});var BEt=s(Bbe);Wcr=r(BEt,"model.eval()"),BEt.forEach(t),Qcr=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(_Be,"CODE",{});var IEt=s(Ibe);Hcr=r(IEt,"model.train()"),IEt.forEach(t),_Be.forEach(t),Ucr=i(Ea),T(iT.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),EOe=i(f),jd=n(f,"H2",{class:!0});var $Xe=s(jd);dT=n($Xe,"A",{id:!0,class:!0,href:!0});var NEt=s(dT);Nbe=n(NEt,"SPAN",{});var qEt=s(Nbe);T(Gy.$$.fragment,qEt),qEt.forEach(t),NEt.forEach(t),Jcr=i($Xe),qbe=n($Xe,"SPAN",{});var jEt=s(qbe);Ycr=r(jEt,"AutoModelForMaskedImageModeling"),jEt.forEach(t),$Xe.forEach(t),COe=i(f),Ho=n(f,"DIV",{class:!0});var bl=s(Ho);T(Oy.$$.fragment,bl),Kcr=i(bl),Dd=n(bl,"P",{});var Joe=s(Dd);Zcr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),FQ=n(Joe,"A",{href:!0});var DEt=s(FQ);efr=r(DEt,"from_pretrained()"),DEt.forEach(t),ofr=r(Joe," class method or the "),TQ=n(Joe,"A",{href:!0});var GEt=s(TQ);rfr=r(GEt,"from_config()"),GEt.forEach(t),tfr=r(Joe,` class
method.`),Joe.forEach(t),afr=i(bl),Vy=n(bl,"P",{});var kXe=s(Vy);nfr=r(kXe,"This class cannot be instantiated directly using "),jbe=n(kXe,"CODE",{});var OEt=s(jbe);sfr=r(OEt,"__init__()"),OEt.forEach(t),lfr=r(kXe," (throws an error)."),kXe.forEach(t),ifr=i(bl),At=n(bl,"DIV",{class:!0});var gw=s(At);T(Xy.$$.fragment,gw),dfr=i(gw),Dbe=n(gw,"P",{});var VEt=s(Dbe);cfr=r(VEt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),VEt.forEach(t),ffr=i(gw),Gd=n(gw,"P",{});var Yoe=s(Gd);mfr=r(Yoe,`Note:
Loading a model from its configuration file does `),Gbe=n(Yoe,"STRONG",{});var XEt=s(Gbe);gfr=r(XEt,"not"),XEt.forEach(t),hfr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MQ=n(Yoe,"A",{href:!0});var zEt=s(MQ);pfr=r(zEt,"from_pretrained()"),zEt.forEach(t),_fr=r(Yoe," to load the model weights."),Yoe.forEach(t),ufr=i(gw),T(cT.$$.fragment,gw),gw.forEach(t),bfr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(zy.$$.fragment,Ca),vfr=i(Ca),Obe=n(Ca,"P",{});var WEt=s(Obe);Ffr=r(WEt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),WEt.forEach(t),Tfr=i(Ca),Ka=n(Ca,"P",{});var hw=s(Ka);Mfr=r(hw,"The model class to instantiate is selected based on the "),Vbe=n(hw,"CODE",{});var QEt=s(Vbe);Efr=r(QEt,"model_type"),QEt.forEach(t),Cfr=r(hw,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(hw,"CODE",{});var HEt=s(Xbe);wfr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),Afr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(hw,"CODE",{});var UEt=s(zbe);Lfr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),yfr=r(hw,":"),hw.forEach(t),xfr=i(Ca),Za=n(Ca,"UL",{});var pw=s(Za);fT=n(pw,"LI",{});var uBe=s(fT);Wbe=n(uBe,"STRONG",{});var JEt=s(Wbe);$fr=r(JEt,"deit"),JEt.forEach(t),kfr=r(uBe," \u2014 "),EQ=n(uBe,"A",{href:!0});var YEt=s(EQ);Sfr=r(YEt,"DeiTForMaskedImageModeling"),YEt.forEach(t),Rfr=r(uBe," (DeiT model)"),uBe.forEach(t),Pfr=i(pw),mT=n(pw,"LI",{});var bBe=s(mT);Qbe=n(bBe,"STRONG",{});var KEt=s(Qbe);Bfr=r(KEt,"swin"),KEt.forEach(t),Ifr=r(bBe," \u2014 "),CQ=n(bBe,"A",{href:!0});var ZEt=s(CQ);Nfr=r(ZEt,"SwinForMaskedImageModeling"),ZEt.forEach(t),qfr=r(bBe," (Swin Transformer model)"),bBe.forEach(t),jfr=i(pw),gT=n(pw,"LI",{});var vBe=s(gT);Hbe=n(vBe,"STRONG",{});var eCt=s(Hbe);Dfr=r(eCt,"swinv2"),eCt.forEach(t),Gfr=r(vBe," \u2014 "),wQ=n(vBe,"A",{href:!0});var oCt=s(wQ);Ofr=r(oCt,"Swinv2ForMaskedImageModeling"),oCt.forEach(t),Vfr=r(vBe," (Swin Transformer V2 model)"),vBe.forEach(t),Xfr=i(pw),hT=n(pw,"LI",{});var FBe=s(hT);Ube=n(FBe,"STRONG",{});var rCt=s(Ube);zfr=r(rCt,"vit"),rCt.forEach(t),Wfr=r(FBe," \u2014 "),AQ=n(FBe,"A",{href:!0});var tCt=s(AQ);Qfr=r(tCt,"ViTForMaskedImageModeling"),tCt.forEach(t),Hfr=r(FBe," (ViT model)"),FBe.forEach(t),pw.forEach(t),Ufr=i(Ca),pT=n(Ca,"P",{});var TBe=s(pT);Jfr=r(TBe,"The model is set in evaluation mode by default using "),Jbe=n(TBe,"CODE",{});var aCt=s(Jbe);Yfr=r(aCt,"model.eval()"),aCt.forEach(t),Kfr=r(TBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(TBe,"CODE",{});var nCt=s(Ybe);Zfr=r(nCt,"model.train()"),nCt.forEach(t),TBe.forEach(t),emr=i(Ca),T(_T.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),wOe=i(f),Od=n(f,"H2",{class:!0});var SXe=s(Od);uT=n(SXe,"A",{id:!0,class:!0,href:!0});var sCt=s(uT);Kbe=n(sCt,"SPAN",{});var lCt=s(Kbe);T(Wy.$$.fragment,lCt),lCt.forEach(t),sCt.forEach(t),omr=i(SXe),Zbe=n(SXe,"SPAN",{});var iCt=s(Zbe);rmr=r(iCt,"AutoModelForObjectDetection"),iCt.forEach(t),SXe.forEach(t),AOe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(Qy.$$.fragment,vl),tmr=i(vl),Vd=n(vl,"P",{});var Koe=s(Vd);amr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),LQ=n(Koe,"A",{href:!0});var dCt=s(LQ);nmr=r(dCt,"from_pretrained()"),dCt.forEach(t),smr=r(Koe," class method or the "),yQ=n(Koe,"A",{href:!0});var cCt=s(yQ);lmr=r(cCt,"from_config()"),cCt.forEach(t),imr=r(Koe,` class
method.`),Koe.forEach(t),dmr=i(vl),Hy=n(vl,"P",{});var RXe=s(Hy);cmr=r(RXe,"This class cannot be instantiated directly using "),e4e=n(RXe,"CODE",{});var fCt=s(e4e);fmr=r(fCt,"__init__()"),fCt.forEach(t),mmr=r(RXe," (throws an error)."),RXe.forEach(t),gmr=i(vl),Lt=n(vl,"DIV",{class:!0});var _w=s(Lt);T(Uy.$$.fragment,_w),hmr=i(_w),o4e=n(_w,"P",{});var mCt=s(o4e);pmr=r(mCt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mCt.forEach(t),_mr=i(_w),Xd=n(_w,"P",{});var Zoe=s(Xd);umr=r(Zoe,`Note:
Loading a model from its configuration file does `),r4e=n(Zoe,"STRONG",{});var gCt=s(r4e);bmr=r(gCt,"not"),gCt.forEach(t),vmr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(Zoe,"A",{href:!0});var hCt=s(xQ);Fmr=r(hCt,"from_pretrained()"),hCt.forEach(t),Tmr=r(Zoe," to load the model weights."),Zoe.forEach(t),Mmr=i(_w),T(bT.$$.fragment,_w),_w.forEach(t),Emr=i(vl),uo=n(vl,"DIV",{class:!0});var wa=s(uo);T(Jy.$$.fragment,wa),Cmr=i(wa),t4e=n(wa,"P",{});var pCt=s(t4e);wmr=r(pCt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pCt.forEach(t),Amr=i(wa),en=n(wa,"P",{});var uw=s(en);Lmr=r(uw,"The model class to instantiate is selected based on the "),a4e=n(uw,"CODE",{});var _Ct=s(a4e);ymr=r(_Ct,"model_type"),_Ct.forEach(t),xmr=r(uw,` property of the config object (either
passed as an argument or loaded from `),n4e=n(uw,"CODE",{});var uCt=s(n4e);$mr=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),kmr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(uw,"CODE",{});var bCt=s(s4e);Smr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),Rmr=r(uw,":"),uw.forEach(t),Pmr=i(wa),Yy=n(wa,"UL",{});var PXe=s(Yy);vT=n(PXe,"LI",{});var MBe=s(vT);l4e=n(MBe,"STRONG",{});var vCt=s(l4e);Bmr=r(vCt,"detr"),vCt.forEach(t),Imr=r(MBe," \u2014 "),$Q=n(MBe,"A",{href:!0});var FCt=s($Q);Nmr=r(FCt,"DetrForObjectDetection"),FCt.forEach(t),qmr=r(MBe," (DETR model)"),MBe.forEach(t),jmr=i(PXe),FT=n(PXe,"LI",{});var EBe=s(FT);i4e=n(EBe,"STRONG",{});var TCt=s(i4e);Dmr=r(TCt,"yolos"),TCt.forEach(t),Gmr=r(EBe," \u2014 "),kQ=n(EBe,"A",{href:!0});var MCt=s(kQ);Omr=r(MCt,"YolosForObjectDetection"),MCt.forEach(t),Vmr=r(EBe," (YOLOS model)"),EBe.forEach(t),PXe.forEach(t),Xmr=i(wa),TT=n(wa,"P",{});var CBe=s(TT);zmr=r(CBe,"The model is set in evaluation mode by default using "),d4e=n(CBe,"CODE",{});var ECt=s(d4e);Wmr=r(ECt,"model.eval()"),ECt.forEach(t),Qmr=r(CBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c4e=n(CBe,"CODE",{});var CCt=s(c4e);Hmr=r(CCt,"model.train()"),CCt.forEach(t),CBe.forEach(t),Umr=i(wa),T(MT.$$.fragment,wa),wa.forEach(t),vl.forEach(t),LOe=i(f),zd=n(f,"H2",{class:!0});var BXe=s(zd);ET=n(BXe,"A",{id:!0,class:!0,href:!0});var wCt=s(ET);f4e=n(wCt,"SPAN",{});var ACt=s(f4e);T(Ky.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),Jmr=i(BXe),m4e=n(BXe,"SPAN",{});var LCt=s(m4e);Ymr=r(LCt,"AutoModelForImageSegmentation"),LCt.forEach(t),BXe.forEach(t),yOe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(Zy.$$.fragment,Fl),Kmr=i(Fl),Wd=n(Fl,"P",{});var ere=s(Wd);Zmr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),SQ=n(ere,"A",{href:!0});var yCt=s(SQ);egr=r(yCt,"from_pretrained()"),yCt.forEach(t),ogr=r(ere," class method or the "),RQ=n(ere,"A",{href:!0});var xCt=s(RQ);rgr=r(xCt,"from_config()"),xCt.forEach(t),tgr=r(ere,` class
method.`),ere.forEach(t),agr=i(Fl),e8=n(Fl,"P",{});var IXe=s(e8);ngr=r(IXe,"This class cannot be instantiated directly using "),g4e=n(IXe,"CODE",{});var $Ct=s(g4e);sgr=r($Ct,"__init__()"),$Ct.forEach(t),lgr=r(IXe," (throws an error)."),IXe.forEach(t),igr=i(Fl),yt=n(Fl,"DIV",{class:!0});var bw=s(yt);T(o8.$$.fragment,bw),dgr=i(bw),h4e=n(bw,"P",{});var kCt=s(h4e);cgr=r(kCt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kCt.forEach(t),fgr=i(bw),Qd=n(bw,"P",{});var ore=s(Qd);mgr=r(ore,`Note:
Loading a model from its configuration file does `),p4e=n(ore,"STRONG",{});var SCt=s(p4e);ggr=r(SCt,"not"),SCt.forEach(t),hgr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(ore,"A",{href:!0});var RCt=s(PQ);pgr=r(RCt,"from_pretrained()"),RCt.forEach(t),_gr=r(ore," to load the model weights."),ore.forEach(t),ugr=i(bw),T(CT.$$.fragment,bw),bw.forEach(t),bgr=i(Fl),bo=n(Fl,"DIV",{class:!0});var Aa=s(bo);T(r8.$$.fragment,Aa),vgr=i(Aa),_4e=n(Aa,"P",{});var PCt=s(_4e);Fgr=r(PCt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),PCt.forEach(t),Tgr=i(Aa),on=n(Aa,"P",{});var vw=s(on);Mgr=r(vw,"The model class to instantiate is selected based on the "),u4e=n(vw,"CODE",{});var BCt=s(u4e);Egr=r(BCt,"model_type"),BCt.forEach(t),Cgr=r(vw,` property of the config object (either
passed as an argument or loaded from `),b4e=n(vw,"CODE",{});var ICt=s(b4e);wgr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),Agr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(vw,"CODE",{});var NCt=s(v4e);Lgr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),ygr=r(vw,":"),vw.forEach(t),xgr=i(Aa),F4e=n(Aa,"UL",{});var qCt=s(F4e);wT=n(qCt,"LI",{});var wBe=s(wT);T4e=n(wBe,"STRONG",{});var jCt=s(T4e);$gr=r(jCt,"detr"),jCt.forEach(t),kgr=r(wBe," \u2014 "),BQ=n(wBe,"A",{href:!0});var DCt=s(BQ);Sgr=r(DCt,"DetrForSegmentation"),DCt.forEach(t),Rgr=r(wBe," (DETR model)"),wBe.forEach(t),qCt.forEach(t),Pgr=i(Aa),AT=n(Aa,"P",{});var ABe=s(AT);Bgr=r(ABe,"The model is set in evaluation mode by default using "),M4e=n(ABe,"CODE",{});var GCt=s(M4e);Igr=r(GCt,"model.eval()"),GCt.forEach(t),Ngr=r(ABe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E4e=n(ABe,"CODE",{});var OCt=s(E4e);qgr=r(OCt,"model.train()"),OCt.forEach(t),ABe.forEach(t),jgr=i(Aa),T(LT.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),xOe=i(f),Hd=n(f,"H2",{class:!0});var NXe=s(Hd);yT=n(NXe,"A",{id:!0,class:!0,href:!0});var VCt=s(yT);C4e=n(VCt,"SPAN",{});var XCt=s(C4e);T(t8.$$.fragment,XCt),XCt.forEach(t),VCt.forEach(t),Dgr=i(NXe),w4e=n(NXe,"SPAN",{});var zCt=s(w4e);Ggr=r(zCt,"AutoModelForSemanticSegmentation"),zCt.forEach(t),NXe.forEach(t),$Oe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(a8.$$.fragment,Tl),Ogr=i(Tl),Ud=n(Tl,"P",{});var rre=s(Ud);Vgr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),IQ=n(rre,"A",{href:!0});var WCt=s(IQ);Xgr=r(WCt,"from_pretrained()"),WCt.forEach(t),zgr=r(rre," class method or the "),NQ=n(rre,"A",{href:!0});var QCt=s(NQ);Wgr=r(QCt,"from_config()"),QCt.forEach(t),Qgr=r(rre,` class
method.`),rre.forEach(t),Hgr=i(Tl),n8=n(Tl,"P",{});var qXe=s(n8);Ugr=r(qXe,"This class cannot be instantiated directly using "),A4e=n(qXe,"CODE",{});var HCt=s(A4e);Jgr=r(HCt,"__init__()"),HCt.forEach(t),Ygr=r(qXe," (throws an error)."),qXe.forEach(t),Kgr=i(Tl),xt=n(Tl,"DIV",{class:!0});var Fw=s(xt);T(s8.$$.fragment,Fw),Zgr=i(Fw),L4e=n(Fw,"P",{});var UCt=s(L4e);ehr=r(UCt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),UCt.forEach(t),ohr=i(Fw),Jd=n(Fw,"P",{});var tre=s(Jd);rhr=r(tre,`Note:
Loading a model from its configuration file does `),y4e=n(tre,"STRONG",{});var JCt=s(y4e);thr=r(JCt,"not"),JCt.forEach(t),ahr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(tre,"A",{href:!0});var YCt=s(qQ);nhr=r(YCt,"from_pretrained()"),YCt.forEach(t),shr=r(tre," to load the model weights."),tre.forEach(t),lhr=i(Fw),T(xT.$$.fragment,Fw),Fw.forEach(t),ihr=i(Tl),vo=n(Tl,"DIV",{class:!0});var La=s(vo);T(l8.$$.fragment,La),dhr=i(La),x4e=n(La,"P",{});var KCt=s(x4e);chr=r(KCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),KCt.forEach(t),fhr=i(La),rn=n(La,"P",{});var Tw=s(rn);mhr=r(Tw,"The model class to instantiate is selected based on the "),$4e=n(Tw,"CODE",{});var ZCt=s($4e);ghr=r(ZCt,"model_type"),ZCt.forEach(t),hhr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),k4e=n(Tw,"CODE",{});var e5t=s(k4e);phr=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),_hr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(Tw,"CODE",{});var o5t=s(S4e);uhr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),bhr=r(Tw,":"),Tw.forEach(t),vhr=i(La),tn=n(La,"UL",{});var Mw=s(tn);$T=n(Mw,"LI",{});var LBe=s($T);R4e=n(LBe,"STRONG",{});var r5t=s(R4e);Fhr=r(r5t,"beit"),r5t.forEach(t),Thr=r(LBe," \u2014 "),jQ=n(LBe,"A",{href:!0});var t5t=s(jQ);Mhr=r(t5t,"BeitForSemanticSegmentation"),t5t.forEach(t),Ehr=r(LBe," (BEiT model)"),LBe.forEach(t),Chr=i(Mw),kT=n(Mw,"LI",{});var yBe=s(kT);P4e=n(yBe,"STRONG",{});var a5t=s(P4e);whr=r(a5t,"data2vec-vision"),a5t.forEach(t),Ahr=r(yBe," \u2014 "),DQ=n(yBe,"A",{href:!0});var n5t=s(DQ);Lhr=r(n5t,"Data2VecVisionForSemanticSegmentation"),n5t.forEach(t),yhr=r(yBe," (Data2VecVision model)"),yBe.forEach(t),xhr=i(Mw),ST=n(Mw,"LI",{});var xBe=s(ST);B4e=n(xBe,"STRONG",{});var s5t=s(B4e);$hr=r(s5t,"dpt"),s5t.forEach(t),khr=r(xBe," \u2014 "),GQ=n(xBe,"A",{href:!0});var l5t=s(GQ);Shr=r(l5t,"DPTForSemanticSegmentation"),l5t.forEach(t),Rhr=r(xBe," (DPT model)"),xBe.forEach(t),Phr=i(Mw),RT=n(Mw,"LI",{});var $Be=s(RT);I4e=n($Be,"STRONG",{});var i5t=s(I4e);Bhr=r(i5t,"segformer"),i5t.forEach(t),Ihr=r($Be," \u2014 "),OQ=n($Be,"A",{href:!0});var d5t=s(OQ);Nhr=r(d5t,"SegformerForSemanticSegmentation"),d5t.forEach(t),qhr=r($Be," (SegFormer model)"),$Be.forEach(t),Mw.forEach(t),jhr=i(La),PT=n(La,"P",{});var kBe=s(PT);Dhr=r(kBe,"The model is set in evaluation mode by default using "),N4e=n(kBe,"CODE",{});var c5t=s(N4e);Ghr=r(c5t,"model.eval()"),c5t.forEach(t),Ohr=r(kBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=n(kBe,"CODE",{});var f5t=s(q4e);Vhr=r(f5t,"model.train()"),f5t.forEach(t),kBe.forEach(t),Xhr=i(La),T(BT.$$.fragment,La),La.forEach(t),Tl.forEach(t),kOe=i(f),Yd=n(f,"H2",{class:!0});var jXe=s(Yd);IT=n(jXe,"A",{id:!0,class:!0,href:!0});var m5t=s(IT);j4e=n(m5t,"SPAN",{});var g5t=s(j4e);T(i8.$$.fragment,g5t),g5t.forEach(t),m5t.forEach(t),zhr=i(jXe),D4e=n(jXe,"SPAN",{});var h5t=s(D4e);Whr=r(h5t,"AutoModelForInstanceSegmentation"),h5t.forEach(t),jXe.forEach(t),SOe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(d8.$$.fragment,Ml),Qhr=i(Ml),Kd=n(Ml,"P",{});var are=s(Kd);Hhr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),VQ=n(are,"A",{href:!0});var p5t=s(VQ);Uhr=r(p5t,"from_pretrained()"),p5t.forEach(t),Jhr=r(are," class method or the "),XQ=n(are,"A",{href:!0});var _5t=s(XQ);Yhr=r(_5t,"from_config()"),_5t.forEach(t),Khr=r(are,` class
method.`),are.forEach(t),Zhr=i(Ml),c8=n(Ml,"P",{});var DXe=s(c8);epr=r(DXe,"This class cannot be instantiated directly using "),G4e=n(DXe,"CODE",{});var u5t=s(G4e);opr=r(u5t,"__init__()"),u5t.forEach(t),rpr=r(DXe," (throws an error)."),DXe.forEach(t),tpr=i(Ml),$t=n(Ml,"DIV",{class:!0});var Ew=s($t);T(f8.$$.fragment,Ew),apr=i(Ew),O4e=n(Ew,"P",{});var b5t=s(O4e);npr=r(b5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),b5t.forEach(t),spr=i(Ew),Zd=n(Ew,"P",{});var nre=s(Zd);lpr=r(nre,`Note:
Loading a model from its configuration file does `),V4e=n(nre,"STRONG",{});var v5t=s(V4e);ipr=r(v5t,"not"),v5t.forEach(t),dpr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zQ=n(nre,"A",{href:!0});var F5t=s(zQ);cpr=r(F5t,"from_pretrained()"),F5t.forEach(t),fpr=r(nre," to load the model weights."),nre.forEach(t),mpr=i(Ew),T(NT.$$.fragment,Ew),Ew.forEach(t),gpr=i(Ml),Fo=n(Ml,"DIV",{class:!0});var ya=s(Fo);T(m8.$$.fragment,ya),hpr=i(ya),X4e=n(ya,"P",{});var T5t=s(X4e);ppr=r(T5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),T5t.forEach(t),_pr=i(ya),an=n(ya,"P",{});var Cw=s(an);upr=r(Cw,"The model class to instantiate is selected based on the "),z4e=n(Cw,"CODE",{});var M5t=s(z4e);bpr=r(M5t,"model_type"),M5t.forEach(t),vpr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),W4e=n(Cw,"CODE",{});var E5t=s(W4e);Fpr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),Tpr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(Cw,"CODE",{});var C5t=s(Q4e);Mpr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),Epr=r(Cw,":"),Cw.forEach(t),Cpr=i(ya),H4e=n(ya,"UL",{});var w5t=s(H4e);qT=n(w5t,"LI",{});var SBe=s(qT);U4e=n(SBe,"STRONG",{});var A5t=s(U4e);wpr=r(A5t,"maskformer"),A5t.forEach(t),Apr=r(SBe," \u2014 "),WQ=n(SBe,"A",{href:!0});var L5t=s(WQ);Lpr=r(L5t,"MaskFormerForInstanceSegmentation"),L5t.forEach(t),ypr=r(SBe," (MaskFormer model)"),SBe.forEach(t),w5t.forEach(t),xpr=i(ya),jT=n(ya,"P",{});var RBe=s(jT);$pr=r(RBe,"The model is set in evaluation mode by default using "),J4e=n(RBe,"CODE",{});var y5t=s(J4e);kpr=r(y5t,"model.eval()"),y5t.forEach(t),Spr=r(RBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=n(RBe,"CODE",{});var x5t=s(Y4e);Rpr=r(x5t,"model.train()"),x5t.forEach(t),RBe.forEach(t),Ppr=i(ya),T(DT.$$.fragment,ya),ya.forEach(t),Ml.forEach(t),ROe=i(f),ec=n(f,"H2",{class:!0});var GXe=s(ec);GT=n(GXe,"A",{id:!0,class:!0,href:!0});var $5t=s(GT);K4e=n($5t,"SPAN",{});var k5t=s(K4e);T(g8.$$.fragment,k5t),k5t.forEach(t),$5t.forEach(t),Bpr=i(GXe),Z4e=n(GXe,"SPAN",{});var S5t=s(Z4e);Ipr=r(S5t,"TFAutoModel"),S5t.forEach(t),GXe.forEach(t),POe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(h8.$$.fragment,El),Npr=i(El),oc=n(El,"P",{});var sre=s(oc);qpr=r(sre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QQ=n(sre,"A",{href:!0});var R5t=s(QQ);jpr=r(R5t,"from_pretrained()"),R5t.forEach(t),Dpr=r(sre," class method or the "),HQ=n(sre,"A",{href:!0});var P5t=s(HQ);Gpr=r(P5t,"from_config()"),P5t.forEach(t),Opr=r(sre,` class
method.`),sre.forEach(t),Vpr=i(El),p8=n(El,"P",{});var OXe=s(p8);Xpr=r(OXe,"This class cannot be instantiated directly using "),eve=n(OXe,"CODE",{});var B5t=s(eve);zpr=r(B5t,"__init__()"),B5t.forEach(t),Wpr=r(OXe," (throws an error)."),OXe.forEach(t),Qpr=i(El),kt=n(El,"DIV",{class:!0});var ww=s(kt);T(_8.$$.fragment,ww),Hpr=i(ww),ove=n(ww,"P",{});var I5t=s(ove);Upr=r(I5t,"Instantiates one of the base model classes of the library from a configuration."),I5t.forEach(t),Jpr=i(ww),rc=n(ww,"P",{});var lre=s(rc);Ypr=r(lre,`Note:
Loading a model from its configuration file does `),rve=n(lre,"STRONG",{});var N5t=s(rve);Kpr=r(N5t,"not"),N5t.forEach(t),Zpr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(lre,"A",{href:!0});var q5t=s(UQ);e_r=r(q5t,"from_pretrained()"),q5t.forEach(t),o_r=r(lre," to load the model weights."),lre.forEach(t),r_r=i(ww),T(OT.$$.fragment,ww),ww.forEach(t),t_r=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(u8.$$.fragment,Cl),a_r=i(Cl),tve=n(Cl,"P",{});var j5t=s(tve);n_r=r(j5t,"Instantiate one of the base model classes of the library from a pretrained model."),j5t.forEach(t),s_r=i(Cl),nn=n(Cl,"P",{});var Aw=s(nn);l_r=r(Aw,"The model class to instantiate is selected based on the "),ave=n(Aw,"CODE",{});var D5t=s(ave);i_r=r(D5t,"model_type"),D5t.forEach(t),d_r=r(Aw,` property of the config object (either
passed as an argument or loaded from `),nve=n(Aw,"CODE",{});var G5t=s(nve);c_r=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),f_r=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(Aw,"CODE",{});var O5t=s(sve);m_r=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),g_r=r(Aw,":"),Aw.forEach(t),h_r=i(Cl),q=n(Cl,"UL",{});var D=s(q);VT=n(D,"LI",{});var PBe=s(VT);lve=n(PBe,"STRONG",{});var V5t=s(lve);p_r=r(V5t,"albert"),V5t.forEach(t),__r=r(PBe," \u2014 "),JQ=n(PBe,"A",{href:!0});var X5t=s(JQ);u_r=r(X5t,"TFAlbertModel"),X5t.forEach(t),b_r=r(PBe," (ALBERT model)"),PBe.forEach(t),v_r=i(D),XT=n(D,"LI",{});var BBe=s(XT);ive=n(BBe,"STRONG",{});var z5t=s(ive);F_r=r(z5t,"bart"),z5t.forEach(t),T_r=r(BBe," \u2014 "),YQ=n(BBe,"A",{href:!0});var W5t=s(YQ);M_r=r(W5t,"TFBartModel"),W5t.forEach(t),E_r=r(BBe," (BART model)"),BBe.forEach(t),C_r=i(D),zT=n(D,"LI",{});var IBe=s(zT);dve=n(IBe,"STRONG",{});var Q5t=s(dve);w_r=r(Q5t,"bert"),Q5t.forEach(t),A_r=r(IBe," \u2014 "),KQ=n(IBe,"A",{href:!0});var H5t=s(KQ);L_r=r(H5t,"TFBertModel"),H5t.forEach(t),y_r=r(IBe," (BERT model)"),IBe.forEach(t),x_r=i(D),WT=n(D,"LI",{});var NBe=s(WT);cve=n(NBe,"STRONG",{});var U5t=s(cve);$_r=r(U5t,"blenderbot"),U5t.forEach(t),k_r=r(NBe," \u2014 "),ZQ=n(NBe,"A",{href:!0});var J5t=s(ZQ);S_r=r(J5t,"TFBlenderbotModel"),J5t.forEach(t),R_r=r(NBe," (Blenderbot model)"),NBe.forEach(t),P_r=i(D),QT=n(D,"LI",{});var qBe=s(QT);fve=n(qBe,"STRONG",{});var Y5t=s(fve);B_r=r(Y5t,"blenderbot-small"),Y5t.forEach(t),I_r=r(qBe," \u2014 "),eH=n(qBe,"A",{href:!0});var K5t=s(eH);N_r=r(K5t,"TFBlenderbotSmallModel"),K5t.forEach(t),q_r=r(qBe," (BlenderbotSmall model)"),qBe.forEach(t),j_r=i(D),HT=n(D,"LI",{});var jBe=s(HT);mve=n(jBe,"STRONG",{});var Z5t=s(mve);D_r=r(Z5t,"camembert"),Z5t.forEach(t),G_r=r(jBe," \u2014 "),oH=n(jBe,"A",{href:!0});var e3t=s(oH);O_r=r(e3t,"TFCamembertModel"),e3t.forEach(t),V_r=r(jBe," (CamemBERT model)"),jBe.forEach(t),X_r=i(D),UT=n(D,"LI",{});var DBe=s(UT);gve=n(DBe,"STRONG",{});var o3t=s(gve);z_r=r(o3t,"clip"),o3t.forEach(t),W_r=r(DBe," \u2014 "),rH=n(DBe,"A",{href:!0});var r3t=s(rH);Q_r=r(r3t,"TFCLIPModel"),r3t.forEach(t),H_r=r(DBe," (CLIP model)"),DBe.forEach(t),U_r=i(D),JT=n(D,"LI",{});var GBe=s(JT);hve=n(GBe,"STRONG",{});var t3t=s(hve);J_r=r(t3t,"convbert"),t3t.forEach(t),Y_r=r(GBe," \u2014 "),tH=n(GBe,"A",{href:!0});var a3t=s(tH);K_r=r(a3t,"TFConvBertModel"),a3t.forEach(t),Z_r=r(GBe," (ConvBERT model)"),GBe.forEach(t),eur=i(D),YT=n(D,"LI",{});var OBe=s(YT);pve=n(OBe,"STRONG",{});var n3t=s(pve);our=r(n3t,"convnext"),n3t.forEach(t),rur=r(OBe," \u2014 "),aH=n(OBe,"A",{href:!0});var s3t=s(aH);tur=r(s3t,"TFConvNextModel"),s3t.forEach(t),aur=r(OBe," (ConvNeXT model)"),OBe.forEach(t),nur=i(D),KT=n(D,"LI",{});var VBe=s(KT);_ve=n(VBe,"STRONG",{});var l3t=s(_ve);sur=r(l3t,"ctrl"),l3t.forEach(t),lur=r(VBe," \u2014 "),nH=n(VBe,"A",{href:!0});var i3t=s(nH);iur=r(i3t,"TFCTRLModel"),i3t.forEach(t),dur=r(VBe," (CTRL model)"),VBe.forEach(t),cur=i(D),ZT=n(D,"LI",{});var XBe=s(ZT);uve=n(XBe,"STRONG",{});var d3t=s(uve);fur=r(d3t,"data2vec-vision"),d3t.forEach(t),mur=r(XBe," \u2014 "),sH=n(XBe,"A",{href:!0});var c3t=s(sH);gur=r(c3t,"TFData2VecVisionModel"),c3t.forEach(t),hur=r(XBe," (Data2VecVision model)"),XBe.forEach(t),pur=i(D),e7=n(D,"LI",{});var zBe=s(e7);bve=n(zBe,"STRONG",{});var f3t=s(bve);_ur=r(f3t,"deberta"),f3t.forEach(t),uur=r(zBe," \u2014 "),lH=n(zBe,"A",{href:!0});var m3t=s(lH);bur=r(m3t,"TFDebertaModel"),m3t.forEach(t),vur=r(zBe," (DeBERTa model)"),zBe.forEach(t),Fur=i(D),o7=n(D,"LI",{});var WBe=s(o7);vve=n(WBe,"STRONG",{});var g3t=s(vve);Tur=r(g3t,"deberta-v2"),g3t.forEach(t),Mur=r(WBe," \u2014 "),iH=n(WBe,"A",{href:!0});var h3t=s(iH);Eur=r(h3t,"TFDebertaV2Model"),h3t.forEach(t),Cur=r(WBe," (DeBERTa-v2 model)"),WBe.forEach(t),wur=i(D),r7=n(D,"LI",{});var QBe=s(r7);Fve=n(QBe,"STRONG",{});var p3t=s(Fve);Aur=r(p3t,"distilbert"),p3t.forEach(t),Lur=r(QBe," \u2014 "),dH=n(QBe,"A",{href:!0});var _3t=s(dH);yur=r(_3t,"TFDistilBertModel"),_3t.forEach(t),xur=r(QBe," (DistilBERT model)"),QBe.forEach(t),$ur=i(D),t7=n(D,"LI",{});var HBe=s(t7);Tve=n(HBe,"STRONG",{});var u3t=s(Tve);kur=r(u3t,"dpr"),u3t.forEach(t),Sur=r(HBe," \u2014 "),cH=n(HBe,"A",{href:!0});var b3t=s(cH);Rur=r(b3t,"TFDPRQuestionEncoder"),b3t.forEach(t),Pur=r(HBe," (DPR model)"),HBe.forEach(t),Bur=i(D),a7=n(D,"LI",{});var UBe=s(a7);Mve=n(UBe,"STRONG",{});var v3t=s(Mve);Iur=r(v3t,"electra"),v3t.forEach(t),Nur=r(UBe," \u2014 "),fH=n(UBe,"A",{href:!0});var F3t=s(fH);qur=r(F3t,"TFElectraModel"),F3t.forEach(t),jur=r(UBe," (ELECTRA model)"),UBe.forEach(t),Dur=i(D),n7=n(D,"LI",{});var JBe=s(n7);Eve=n(JBe,"STRONG",{});var T3t=s(Eve);Gur=r(T3t,"flaubert"),T3t.forEach(t),Our=r(JBe," \u2014 "),mH=n(JBe,"A",{href:!0});var M3t=s(mH);Vur=r(M3t,"TFFlaubertModel"),M3t.forEach(t),Xur=r(JBe," (FlauBERT model)"),JBe.forEach(t),zur=i(D),zs=n(D,"LI",{});var Kk=s(zs);Cve=n(Kk,"STRONG",{});var E3t=s(Cve);Wur=r(E3t,"funnel"),E3t.forEach(t),Qur=r(Kk," \u2014 "),gH=n(Kk,"A",{href:!0});var C3t=s(gH);Hur=r(C3t,"TFFunnelModel"),C3t.forEach(t),Uur=r(Kk," or "),hH=n(Kk,"A",{href:!0});var w3t=s(hH);Jur=r(w3t,"TFFunnelBaseModel"),w3t.forEach(t),Yur=r(Kk," (Funnel Transformer model)"),Kk.forEach(t),Kur=i(D),s7=n(D,"LI",{});var YBe=s(s7);wve=n(YBe,"STRONG",{});var A3t=s(wve);Zur=r(A3t,"gpt2"),A3t.forEach(t),e1r=r(YBe," \u2014 "),pH=n(YBe,"A",{href:!0});var L3t=s(pH);o1r=r(L3t,"TFGPT2Model"),L3t.forEach(t),r1r=r(YBe," (OpenAI GPT-2 model)"),YBe.forEach(t),t1r=i(D),l7=n(D,"LI",{});var KBe=s(l7);Ave=n(KBe,"STRONG",{});var y3t=s(Ave);a1r=r(y3t,"gptj"),y3t.forEach(t),n1r=r(KBe," \u2014 "),_H=n(KBe,"A",{href:!0});var x3t=s(_H);s1r=r(x3t,"TFGPTJModel"),x3t.forEach(t),l1r=r(KBe," (GPT-J model)"),KBe.forEach(t),i1r=i(D),i7=n(D,"LI",{});var ZBe=s(i7);Lve=n(ZBe,"STRONG",{});var $3t=s(Lve);d1r=r($3t,"hubert"),$3t.forEach(t),c1r=r(ZBe," \u2014 "),uH=n(ZBe,"A",{href:!0});var k3t=s(uH);f1r=r(k3t,"TFHubertModel"),k3t.forEach(t),m1r=r(ZBe," (Hubert model)"),ZBe.forEach(t),g1r=i(D),d7=n(D,"LI",{});var eIe=s(d7);yve=n(eIe,"STRONG",{});var S3t=s(yve);h1r=r(S3t,"layoutlm"),S3t.forEach(t),p1r=r(eIe," \u2014 "),bH=n(eIe,"A",{href:!0});var R3t=s(bH);_1r=r(R3t,"TFLayoutLMModel"),R3t.forEach(t),u1r=r(eIe," (LayoutLM model)"),eIe.forEach(t),b1r=i(D),c7=n(D,"LI",{});var oIe=s(c7);xve=n(oIe,"STRONG",{});var P3t=s(xve);v1r=r(P3t,"led"),P3t.forEach(t),F1r=r(oIe," \u2014 "),vH=n(oIe,"A",{href:!0});var B3t=s(vH);T1r=r(B3t,"TFLEDModel"),B3t.forEach(t),M1r=r(oIe," (LED model)"),oIe.forEach(t),E1r=i(D),f7=n(D,"LI",{});var rIe=s(f7);$ve=n(rIe,"STRONG",{});var I3t=s($ve);C1r=r(I3t,"longformer"),I3t.forEach(t),w1r=r(rIe," \u2014 "),FH=n(rIe,"A",{href:!0});var N3t=s(FH);A1r=r(N3t,"TFLongformerModel"),N3t.forEach(t),L1r=r(rIe," (Longformer model)"),rIe.forEach(t),y1r=i(D),m7=n(D,"LI",{});var tIe=s(m7);kve=n(tIe,"STRONG",{});var q3t=s(kve);x1r=r(q3t,"lxmert"),q3t.forEach(t),$1r=r(tIe," \u2014 "),TH=n(tIe,"A",{href:!0});var j3t=s(TH);k1r=r(j3t,"TFLxmertModel"),j3t.forEach(t),S1r=r(tIe," (LXMERT model)"),tIe.forEach(t),R1r=i(D),g7=n(D,"LI",{});var aIe=s(g7);Sve=n(aIe,"STRONG",{});var D3t=s(Sve);P1r=r(D3t,"marian"),D3t.forEach(t),B1r=r(aIe," \u2014 "),MH=n(aIe,"A",{href:!0});var G3t=s(MH);I1r=r(G3t,"TFMarianModel"),G3t.forEach(t),N1r=r(aIe," (Marian model)"),aIe.forEach(t),q1r=i(D),h7=n(D,"LI",{});var nIe=s(h7);Rve=n(nIe,"STRONG",{});var O3t=s(Rve);j1r=r(O3t,"mbart"),O3t.forEach(t),D1r=r(nIe," \u2014 "),EH=n(nIe,"A",{href:!0});var V3t=s(EH);G1r=r(V3t,"TFMBartModel"),V3t.forEach(t),O1r=r(nIe," (mBART model)"),nIe.forEach(t),V1r=i(D),p7=n(D,"LI",{});var sIe=s(p7);Pve=n(sIe,"STRONG",{});var X3t=s(Pve);X1r=r(X3t,"mobilebert"),X3t.forEach(t),z1r=r(sIe," \u2014 "),CH=n(sIe,"A",{href:!0});var z3t=s(CH);W1r=r(z3t,"TFMobileBertModel"),z3t.forEach(t),Q1r=r(sIe," (MobileBERT model)"),sIe.forEach(t),H1r=i(D),_7=n(D,"LI",{});var lIe=s(_7);Bve=n(lIe,"STRONG",{});var W3t=s(Bve);U1r=r(W3t,"mpnet"),W3t.forEach(t),J1r=r(lIe," \u2014 "),wH=n(lIe,"A",{href:!0});var Q3t=s(wH);Y1r=r(Q3t,"TFMPNetModel"),Q3t.forEach(t),K1r=r(lIe," (MPNet model)"),lIe.forEach(t),Z1r=i(D),u7=n(D,"LI",{});var iIe=s(u7);Ive=n(iIe,"STRONG",{});var H3t=s(Ive);e2r=r(H3t,"mt5"),H3t.forEach(t),o2r=r(iIe," \u2014 "),AH=n(iIe,"A",{href:!0});var U3t=s(AH);r2r=r(U3t,"TFMT5Model"),U3t.forEach(t),t2r=r(iIe," (MT5 model)"),iIe.forEach(t),a2r=i(D),b7=n(D,"LI",{});var dIe=s(b7);Nve=n(dIe,"STRONG",{});var J3t=s(Nve);n2r=r(J3t,"openai-gpt"),J3t.forEach(t),s2r=r(dIe," \u2014 "),LH=n(dIe,"A",{href:!0});var Y3t=s(LH);l2r=r(Y3t,"TFOpenAIGPTModel"),Y3t.forEach(t),i2r=r(dIe," (OpenAI GPT model)"),dIe.forEach(t),d2r=i(D),v7=n(D,"LI",{});var cIe=s(v7);qve=n(cIe,"STRONG",{});var K3t=s(qve);c2r=r(K3t,"opt"),K3t.forEach(t),f2r=r(cIe," \u2014 "),yH=n(cIe,"A",{href:!0});var Z3t=s(yH);m2r=r(Z3t,"TFOPTModel"),Z3t.forEach(t),g2r=r(cIe," (OPT model)"),cIe.forEach(t),h2r=i(D),F7=n(D,"LI",{});var fIe=s(F7);jve=n(fIe,"STRONG",{});var e0t=s(jve);p2r=r(e0t,"pegasus"),e0t.forEach(t),_2r=r(fIe," \u2014 "),xH=n(fIe,"A",{href:!0});var o0t=s(xH);u2r=r(o0t,"TFPegasusModel"),o0t.forEach(t),b2r=r(fIe," (Pegasus model)"),fIe.forEach(t),v2r=i(D),T7=n(D,"LI",{});var mIe=s(T7);Dve=n(mIe,"STRONG",{});var r0t=s(Dve);F2r=r(r0t,"rembert"),r0t.forEach(t),T2r=r(mIe," \u2014 "),$H=n(mIe,"A",{href:!0});var t0t=s($H);M2r=r(t0t,"TFRemBertModel"),t0t.forEach(t),E2r=r(mIe," (RemBERT model)"),mIe.forEach(t),C2r=i(D),M7=n(D,"LI",{});var gIe=s(M7);Gve=n(gIe,"STRONG",{});var a0t=s(Gve);w2r=r(a0t,"roberta"),a0t.forEach(t),A2r=r(gIe," \u2014 "),kH=n(gIe,"A",{href:!0});var n0t=s(kH);L2r=r(n0t,"TFRobertaModel"),n0t.forEach(t),y2r=r(gIe," (RoBERTa model)"),gIe.forEach(t),x2r=i(D),E7=n(D,"LI",{});var hIe=s(E7);Ove=n(hIe,"STRONG",{});var s0t=s(Ove);$2r=r(s0t,"roformer"),s0t.forEach(t),k2r=r(hIe," \u2014 "),SH=n(hIe,"A",{href:!0});var l0t=s(SH);S2r=r(l0t,"TFRoFormerModel"),l0t.forEach(t),R2r=r(hIe," (RoFormer model)"),hIe.forEach(t),P2r=i(D),C7=n(D,"LI",{});var pIe=s(C7);Vve=n(pIe,"STRONG",{});var i0t=s(Vve);B2r=r(i0t,"speech_to_text"),i0t.forEach(t),I2r=r(pIe," \u2014 "),RH=n(pIe,"A",{href:!0});var d0t=s(RH);N2r=r(d0t,"TFSpeech2TextModel"),d0t.forEach(t),q2r=r(pIe," (Speech2Text model)"),pIe.forEach(t),j2r=i(D),w7=n(D,"LI",{});var _Ie=s(w7);Xve=n(_Ie,"STRONG",{});var c0t=s(Xve);D2r=r(c0t,"swin"),c0t.forEach(t),G2r=r(_Ie," \u2014 "),PH=n(_Ie,"A",{href:!0});var f0t=s(PH);O2r=r(f0t,"TFSwinModel"),f0t.forEach(t),V2r=r(_Ie," (Swin Transformer model)"),_Ie.forEach(t),X2r=i(D),A7=n(D,"LI",{});var uIe=s(A7);zve=n(uIe,"STRONG",{});var m0t=s(zve);z2r=r(m0t,"swinv2"),m0t.forEach(t),W2r=r(uIe," \u2014 "),BH=n(uIe,"A",{href:!0});var g0t=s(BH);Q2r=r(g0t,"TFSwinv2Model"),g0t.forEach(t),H2r=r(uIe," (Swin Transformer V2 model)"),uIe.forEach(t),U2r=i(D),L7=n(D,"LI",{});var bIe=s(L7);Wve=n(bIe,"STRONG",{});var h0t=s(Wve);J2r=r(h0t,"t5"),h0t.forEach(t),Y2r=r(bIe," \u2014 "),IH=n(bIe,"A",{href:!0});var p0t=s(IH);K2r=r(p0t,"TFT5Model"),p0t.forEach(t),Z2r=r(bIe," (T5 model)"),bIe.forEach(t),ebr=i(D),y7=n(D,"LI",{});var vIe=s(y7);Qve=n(vIe,"STRONG",{});var _0t=s(Qve);obr=r(_0t,"tapas"),_0t.forEach(t),rbr=r(vIe," \u2014 "),NH=n(vIe,"A",{href:!0});var u0t=s(NH);tbr=r(u0t,"TFTapasModel"),u0t.forEach(t),abr=r(vIe," (TAPAS model)"),vIe.forEach(t),nbr=i(D),x7=n(D,"LI",{});var FIe=s(x7);Hve=n(FIe,"STRONG",{});var b0t=s(Hve);sbr=r(b0t,"transfo-xl"),b0t.forEach(t),lbr=r(FIe," \u2014 "),qH=n(FIe,"A",{href:!0});var v0t=s(qH);ibr=r(v0t,"TFTransfoXLModel"),v0t.forEach(t),dbr=r(FIe," (Transformer-XL model)"),FIe.forEach(t),cbr=i(D),$7=n(D,"LI",{});var TIe=s($7);Uve=n(TIe,"STRONG",{});var F0t=s(Uve);fbr=r(F0t,"vit"),F0t.forEach(t),mbr=r(TIe," \u2014 "),jH=n(TIe,"A",{href:!0});var T0t=s(jH);gbr=r(T0t,"TFViTModel"),T0t.forEach(t),hbr=r(TIe," (ViT model)"),TIe.forEach(t),pbr=i(D),k7=n(D,"LI",{});var MIe=s(k7);Jve=n(MIe,"STRONG",{});var M0t=s(Jve);_br=r(M0t,"vit_mae"),M0t.forEach(t),ubr=r(MIe," \u2014 "),DH=n(MIe,"A",{href:!0});var E0t=s(DH);bbr=r(E0t,"TFViTMAEModel"),E0t.forEach(t),vbr=r(MIe," (ViTMAE model)"),MIe.forEach(t),Fbr=i(D),S7=n(D,"LI",{});var EIe=s(S7);Yve=n(EIe,"STRONG",{});var C0t=s(Yve);Tbr=r(C0t,"wav2vec2"),C0t.forEach(t),Mbr=r(EIe," \u2014 "),GH=n(EIe,"A",{href:!0});var w0t=s(GH);Ebr=r(w0t,"TFWav2Vec2Model"),w0t.forEach(t),Cbr=r(EIe," (Wav2Vec2 model)"),EIe.forEach(t),wbr=i(D),R7=n(D,"LI",{});var CIe=s(R7);Kve=n(CIe,"STRONG",{});var A0t=s(Kve);Abr=r(A0t,"xlm"),A0t.forEach(t),Lbr=r(CIe," \u2014 "),OH=n(CIe,"A",{href:!0});var L0t=s(OH);ybr=r(L0t,"TFXLMModel"),L0t.forEach(t),xbr=r(CIe," (XLM model)"),CIe.forEach(t),$br=i(D),P7=n(D,"LI",{});var wIe=s(P7);Zve=n(wIe,"STRONG",{});var y0t=s(Zve);kbr=r(y0t,"xlm-roberta"),y0t.forEach(t),Sbr=r(wIe," \u2014 "),VH=n(wIe,"A",{href:!0});var x0t=s(VH);Rbr=r(x0t,"TFXLMRobertaModel"),x0t.forEach(t),Pbr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),Bbr=i(D),B7=n(D,"LI",{});var AIe=s(B7);eFe=n(AIe,"STRONG",{});var $0t=s(eFe);Ibr=r($0t,"xlnet"),$0t.forEach(t),Nbr=r(AIe," \u2014 "),XH=n(AIe,"A",{href:!0});var k0t=s(XH);qbr=r(k0t,"TFXLNetModel"),k0t.forEach(t),jbr=r(AIe," (XLNet model)"),AIe.forEach(t),D.forEach(t),Dbr=i(Cl),T(I7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),BOe=i(f),tc=n(f,"H2",{class:!0});var VXe=s(tc);N7=n(VXe,"A",{id:!0,class:!0,href:!0});var S0t=s(N7);oFe=n(S0t,"SPAN",{});var R0t=s(oFe);T(b8.$$.fragment,R0t),R0t.forEach(t),S0t.forEach(t),Gbr=i(VXe),rFe=n(VXe,"SPAN",{});var P0t=s(rFe);Obr=r(P0t,"TFAutoModelForPreTraining"),P0t.forEach(t),VXe.forEach(t),IOe=i(f),er=n(f,"DIV",{class:!0});var wl=s(er);T(v8.$$.fragment,wl),Vbr=i(wl),ac=n(wl,"P",{});var ire=s(ac);Xbr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zH=n(ire,"A",{href:!0});var B0t=s(zH);zbr=r(B0t,"from_pretrained()"),B0t.forEach(t),Wbr=r(ire," class method or the "),WH=n(ire,"A",{href:!0});var I0t=s(WH);Qbr=r(I0t,"from_config()"),I0t.forEach(t),Hbr=r(ire,` class
method.`),ire.forEach(t),Ubr=i(wl),F8=n(wl,"P",{});var XXe=s(F8);Jbr=r(XXe,"This class cannot be instantiated directly using "),tFe=n(XXe,"CODE",{});var N0t=s(tFe);Ybr=r(N0t,"__init__()"),N0t.forEach(t),Kbr=r(XXe," (throws an error)."),XXe.forEach(t),Zbr=i(wl),St=n(wl,"DIV",{class:!0});var Lw=s(St);T(T8.$$.fragment,Lw),e4r=i(Lw),aFe=n(Lw,"P",{});var q0t=s(aFe);o4r=r(q0t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),q0t.forEach(t),r4r=i(Lw),nc=n(Lw,"P",{});var dre=s(nc);t4r=r(dre,`Note:
Loading a model from its configuration file does `),nFe=n(dre,"STRONG",{});var j0t=s(nFe);a4r=r(j0t,"not"),j0t.forEach(t),n4r=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(dre,"A",{href:!0});var D0t=s(QH);s4r=r(D0t,"from_pretrained()"),D0t.forEach(t),l4r=r(dre," to load the model weights."),dre.forEach(t),i4r=i(Lw),T(q7.$$.fragment,Lw),Lw.forEach(t),d4r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(M8.$$.fragment,Al),c4r=i(Al),sFe=n(Al,"P",{});var G0t=s(sFe);f4r=r(G0t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G0t.forEach(t),m4r=i(Al),sn=n(Al,"P",{});var yw=s(sn);g4r=r(yw,"The model class to instantiate is selected based on the "),lFe=n(yw,"CODE",{});var O0t=s(lFe);h4r=r(O0t,"model_type"),O0t.forEach(t),p4r=r(yw,` property of the config object (either
passed as an argument or loaded from `),iFe=n(yw,"CODE",{});var V0t=s(iFe);_4r=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),u4r=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(yw,"CODE",{});var X0t=s(dFe);b4r=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),v4r=r(yw,":"),yw.forEach(t),F4r=i(Al),se=n(Al,"UL",{});var le=s(se);j7=n(le,"LI",{});var LIe=s(j7);cFe=n(LIe,"STRONG",{});var z0t=s(cFe);T4r=r(z0t,"albert"),z0t.forEach(t),M4r=r(LIe," \u2014 "),HH=n(LIe,"A",{href:!0});var W0t=s(HH);E4r=r(W0t,"TFAlbertForPreTraining"),W0t.forEach(t),C4r=r(LIe," (ALBERT model)"),LIe.forEach(t),w4r=i(le),D7=n(le,"LI",{});var yIe=s(D7);fFe=n(yIe,"STRONG",{});var Q0t=s(fFe);A4r=r(Q0t,"bart"),Q0t.forEach(t),L4r=r(yIe," \u2014 "),UH=n(yIe,"A",{href:!0});var H0t=s(UH);y4r=r(H0t,"TFBartForConditionalGeneration"),H0t.forEach(t),x4r=r(yIe," (BART model)"),yIe.forEach(t),$4r=i(le),G7=n(le,"LI",{});var xIe=s(G7);mFe=n(xIe,"STRONG",{});var U0t=s(mFe);k4r=r(U0t,"bert"),U0t.forEach(t),S4r=r(xIe," \u2014 "),JH=n(xIe,"A",{href:!0});var J0t=s(JH);R4r=r(J0t,"TFBertForPreTraining"),J0t.forEach(t),P4r=r(xIe," (BERT model)"),xIe.forEach(t),B4r=i(le),O7=n(le,"LI",{});var $Ie=s(O7);gFe=n($Ie,"STRONG",{});var Y0t=s(gFe);I4r=r(Y0t,"camembert"),Y0t.forEach(t),N4r=r($Ie," \u2014 "),YH=n($Ie,"A",{href:!0});var K0t=s(YH);q4r=r(K0t,"TFCamembertForMaskedLM"),K0t.forEach(t),j4r=r($Ie," (CamemBERT model)"),$Ie.forEach(t),D4r=i(le),V7=n(le,"LI",{});var kIe=s(V7);hFe=n(kIe,"STRONG",{});var Z0t=s(hFe);G4r=r(Z0t,"ctrl"),Z0t.forEach(t),O4r=r(kIe," \u2014 "),KH=n(kIe,"A",{href:!0});var ewt=s(KH);V4r=r(ewt,"TFCTRLLMHeadModel"),ewt.forEach(t),X4r=r(kIe," (CTRL model)"),kIe.forEach(t),z4r=i(le),X7=n(le,"LI",{});var SIe=s(X7);pFe=n(SIe,"STRONG",{});var owt=s(pFe);W4r=r(owt,"distilbert"),owt.forEach(t),Q4r=r(SIe," \u2014 "),ZH=n(SIe,"A",{href:!0});var rwt=s(ZH);H4r=r(rwt,"TFDistilBertForMaskedLM"),rwt.forEach(t),U4r=r(SIe," (DistilBERT model)"),SIe.forEach(t),J4r=i(le),z7=n(le,"LI",{});var RIe=s(z7);_Fe=n(RIe,"STRONG",{});var twt=s(_Fe);Y4r=r(twt,"electra"),twt.forEach(t),K4r=r(RIe," \u2014 "),eU=n(RIe,"A",{href:!0});var awt=s(eU);Z4r=r(awt,"TFElectraForPreTraining"),awt.forEach(t),evr=r(RIe," (ELECTRA model)"),RIe.forEach(t),ovr=i(le),W7=n(le,"LI",{});var PIe=s(W7);uFe=n(PIe,"STRONG",{});var nwt=s(uFe);rvr=r(nwt,"flaubert"),nwt.forEach(t),tvr=r(PIe," \u2014 "),oU=n(PIe,"A",{href:!0});var swt=s(oU);avr=r(swt,"TFFlaubertWithLMHeadModel"),swt.forEach(t),nvr=r(PIe," (FlauBERT model)"),PIe.forEach(t),svr=i(le),Q7=n(le,"LI",{});var BIe=s(Q7);bFe=n(BIe,"STRONG",{});var lwt=s(bFe);lvr=r(lwt,"funnel"),lwt.forEach(t),ivr=r(BIe," \u2014 "),rU=n(BIe,"A",{href:!0});var iwt=s(rU);dvr=r(iwt,"TFFunnelForPreTraining"),iwt.forEach(t),cvr=r(BIe," (Funnel Transformer model)"),BIe.forEach(t),fvr=i(le),H7=n(le,"LI",{});var IIe=s(H7);vFe=n(IIe,"STRONG",{});var dwt=s(vFe);mvr=r(dwt,"gpt2"),dwt.forEach(t),gvr=r(IIe," \u2014 "),tU=n(IIe,"A",{href:!0});var cwt=s(tU);hvr=r(cwt,"TFGPT2LMHeadModel"),cwt.forEach(t),pvr=r(IIe," (OpenAI GPT-2 model)"),IIe.forEach(t),_vr=i(le),U7=n(le,"LI",{});var NIe=s(U7);FFe=n(NIe,"STRONG",{});var fwt=s(FFe);uvr=r(fwt,"layoutlm"),fwt.forEach(t),bvr=r(NIe," \u2014 "),aU=n(NIe,"A",{href:!0});var mwt=s(aU);vvr=r(mwt,"TFLayoutLMForMaskedLM"),mwt.forEach(t),Fvr=r(NIe," (LayoutLM model)"),NIe.forEach(t),Tvr=i(le),J7=n(le,"LI",{});var qIe=s(J7);TFe=n(qIe,"STRONG",{});var gwt=s(TFe);Mvr=r(gwt,"lxmert"),gwt.forEach(t),Evr=r(qIe," \u2014 "),nU=n(qIe,"A",{href:!0});var hwt=s(nU);Cvr=r(hwt,"TFLxmertForPreTraining"),hwt.forEach(t),wvr=r(qIe," (LXMERT model)"),qIe.forEach(t),Avr=i(le),Y7=n(le,"LI",{});var jIe=s(Y7);MFe=n(jIe,"STRONG",{});var pwt=s(MFe);Lvr=r(pwt,"mobilebert"),pwt.forEach(t),yvr=r(jIe," \u2014 "),sU=n(jIe,"A",{href:!0});var _wt=s(sU);xvr=r(_wt,"TFMobileBertForPreTraining"),_wt.forEach(t),$vr=r(jIe," (MobileBERT model)"),jIe.forEach(t),kvr=i(le),K7=n(le,"LI",{});var DIe=s(K7);EFe=n(DIe,"STRONG",{});var uwt=s(EFe);Svr=r(uwt,"mpnet"),uwt.forEach(t),Rvr=r(DIe," \u2014 "),lU=n(DIe,"A",{href:!0});var bwt=s(lU);Pvr=r(bwt,"TFMPNetForMaskedLM"),bwt.forEach(t),Bvr=r(DIe," (MPNet model)"),DIe.forEach(t),Ivr=i(le),Z7=n(le,"LI",{});var GIe=s(Z7);CFe=n(GIe,"STRONG",{});var vwt=s(CFe);Nvr=r(vwt,"openai-gpt"),vwt.forEach(t),qvr=r(GIe," \u2014 "),iU=n(GIe,"A",{href:!0});var Fwt=s(iU);jvr=r(Fwt,"TFOpenAIGPTLMHeadModel"),Fwt.forEach(t),Dvr=r(GIe," (OpenAI GPT model)"),GIe.forEach(t),Gvr=i(le),e9=n(le,"LI",{});var OIe=s(e9);wFe=n(OIe,"STRONG",{});var Twt=s(wFe);Ovr=r(Twt,"roberta"),Twt.forEach(t),Vvr=r(OIe," \u2014 "),dU=n(OIe,"A",{href:!0});var Mwt=s(dU);Xvr=r(Mwt,"TFRobertaForMaskedLM"),Mwt.forEach(t),zvr=r(OIe," (RoBERTa model)"),OIe.forEach(t),Wvr=i(le),o9=n(le,"LI",{});var VIe=s(o9);AFe=n(VIe,"STRONG",{});var Ewt=s(AFe);Qvr=r(Ewt,"t5"),Ewt.forEach(t),Hvr=r(VIe," \u2014 "),cU=n(VIe,"A",{href:!0});var Cwt=s(cU);Uvr=r(Cwt,"TFT5ForConditionalGeneration"),Cwt.forEach(t),Jvr=r(VIe," (T5 model)"),VIe.forEach(t),Yvr=i(le),r9=n(le,"LI",{});var XIe=s(r9);LFe=n(XIe,"STRONG",{});var wwt=s(LFe);Kvr=r(wwt,"tapas"),wwt.forEach(t),Zvr=r(XIe," \u2014 "),fU=n(XIe,"A",{href:!0});var Awt=s(fU);eFr=r(Awt,"TFTapasForMaskedLM"),Awt.forEach(t),oFr=r(XIe," (TAPAS model)"),XIe.forEach(t),rFr=i(le),t9=n(le,"LI",{});var zIe=s(t9);yFe=n(zIe,"STRONG",{});var Lwt=s(yFe);tFr=r(Lwt,"transfo-xl"),Lwt.forEach(t),aFr=r(zIe," \u2014 "),mU=n(zIe,"A",{href:!0});var ywt=s(mU);nFr=r(ywt,"TFTransfoXLLMHeadModel"),ywt.forEach(t),sFr=r(zIe," (Transformer-XL model)"),zIe.forEach(t),lFr=i(le),a9=n(le,"LI",{});var WIe=s(a9);xFe=n(WIe,"STRONG",{});var xwt=s(xFe);iFr=r(xwt,"vit_mae"),xwt.forEach(t),dFr=r(WIe," \u2014 "),gU=n(WIe,"A",{href:!0});var $wt=s(gU);cFr=r($wt,"TFViTMAEForPreTraining"),$wt.forEach(t),fFr=r(WIe," (ViTMAE model)"),WIe.forEach(t),mFr=i(le),n9=n(le,"LI",{});var QIe=s(n9);$Fe=n(QIe,"STRONG",{});var kwt=s($Fe);gFr=r(kwt,"xlm"),kwt.forEach(t),hFr=r(QIe," \u2014 "),hU=n(QIe,"A",{href:!0});var Swt=s(hU);pFr=r(Swt,"TFXLMWithLMHeadModel"),Swt.forEach(t),_Fr=r(QIe," (XLM model)"),QIe.forEach(t),uFr=i(le),s9=n(le,"LI",{});var HIe=s(s9);kFe=n(HIe,"STRONG",{});var Rwt=s(kFe);bFr=r(Rwt,"xlm-roberta"),Rwt.forEach(t),vFr=r(HIe," \u2014 "),pU=n(HIe,"A",{href:!0});var Pwt=s(pU);FFr=r(Pwt,"TFXLMRobertaForMaskedLM"),Pwt.forEach(t),TFr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),MFr=i(le),l9=n(le,"LI",{});var UIe=s(l9);SFe=n(UIe,"STRONG",{});var Bwt=s(SFe);EFr=r(Bwt,"xlnet"),Bwt.forEach(t),CFr=r(UIe," \u2014 "),_U=n(UIe,"A",{href:!0});var Iwt=s(_U);wFr=r(Iwt,"TFXLNetLMHeadModel"),Iwt.forEach(t),AFr=r(UIe," (XLNet model)"),UIe.forEach(t),le.forEach(t),LFr=i(Al),T(i9.$$.fragment,Al),Al.forEach(t),wl.forEach(t),NOe=i(f),sc=n(f,"H2",{class:!0});var zXe=s(sc);d9=n(zXe,"A",{id:!0,class:!0,href:!0});var Nwt=s(d9);RFe=n(Nwt,"SPAN",{});var qwt=s(RFe);T(E8.$$.fragment,qwt),qwt.forEach(t),Nwt.forEach(t),yFr=i(zXe),PFe=n(zXe,"SPAN",{});var jwt=s(PFe);xFr=r(jwt,"TFAutoModelForCausalLM"),jwt.forEach(t),zXe.forEach(t),qOe=i(f),or=n(f,"DIV",{class:!0});var Ll=s(or);T(C8.$$.fragment,Ll),$Fr=i(Ll),lc=n(Ll,"P",{});var cre=s(lc);kFr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uU=n(cre,"A",{href:!0});var Dwt=s(uU);SFr=r(Dwt,"from_pretrained()"),Dwt.forEach(t),RFr=r(cre," class method or the "),bU=n(cre,"A",{href:!0});var Gwt=s(bU);PFr=r(Gwt,"from_config()"),Gwt.forEach(t),BFr=r(cre,` class
method.`),cre.forEach(t),IFr=i(Ll),w8=n(Ll,"P",{});var WXe=s(w8);NFr=r(WXe,"This class cannot be instantiated directly using "),BFe=n(WXe,"CODE",{});var Owt=s(BFe);qFr=r(Owt,"__init__()"),Owt.forEach(t),jFr=r(WXe," (throws an error)."),WXe.forEach(t),DFr=i(Ll),Rt=n(Ll,"DIV",{class:!0});var xw=s(Rt);T(A8.$$.fragment,xw),GFr=i(xw),IFe=n(xw,"P",{});var Vwt=s(IFe);OFr=r(Vwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vwt.forEach(t),VFr=i(xw),ic=n(xw,"P",{});var fre=s(ic);XFr=r(fre,`Note:
Loading a model from its configuration file does `),NFe=n(fre,"STRONG",{});var Xwt=s(NFe);zFr=r(Xwt,"not"),Xwt.forEach(t),WFr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(fre,"A",{href:!0});var zwt=s(vU);QFr=r(zwt,"from_pretrained()"),zwt.forEach(t),HFr=r(fre," to load the model weights."),fre.forEach(t),UFr=i(xw),T(c9.$$.fragment,xw),xw.forEach(t),JFr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(L8.$$.fragment,yl),YFr=i(yl),qFe=n(yl,"P",{});var Wwt=s(qFe);KFr=r(Wwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wwt.forEach(t),ZFr=i(yl),ln=n(yl,"P",{});var $w=s(ln);e6r=r($w,"The model class to instantiate is selected based on the "),jFe=n($w,"CODE",{});var Qwt=s(jFe);o6r=r(Qwt,"model_type"),Qwt.forEach(t),r6r=r($w,` property of the config object (either
passed as an argument or loaded from `),DFe=n($w,"CODE",{});var Hwt=s(DFe);t6r=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),a6r=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n($w,"CODE",{});var Uwt=s(GFe);n6r=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),s6r=r($w,":"),$w.forEach(t),l6r=i(yl),Me=n(yl,"UL",{});var Ce=s(Me);f9=n(Ce,"LI",{});var JIe=s(f9);OFe=n(JIe,"STRONG",{});var Jwt=s(OFe);i6r=r(Jwt,"bert"),Jwt.forEach(t),d6r=r(JIe," \u2014 "),FU=n(JIe,"A",{href:!0});var Ywt=s(FU);c6r=r(Ywt,"TFBertLMHeadModel"),Ywt.forEach(t),f6r=r(JIe," (BERT model)"),JIe.forEach(t),m6r=i(Ce),m9=n(Ce,"LI",{});var YIe=s(m9);VFe=n(YIe,"STRONG",{});var Kwt=s(VFe);g6r=r(Kwt,"camembert"),Kwt.forEach(t),h6r=r(YIe," \u2014 "),TU=n(YIe,"A",{href:!0});var Zwt=s(TU);p6r=r(Zwt,"TFCamembertForCausalLM"),Zwt.forEach(t),_6r=r(YIe," (CamemBERT model)"),YIe.forEach(t),u6r=i(Ce),g9=n(Ce,"LI",{});var KIe=s(g9);XFe=n(KIe,"STRONG",{});var eAt=s(XFe);b6r=r(eAt,"ctrl"),eAt.forEach(t),v6r=r(KIe," \u2014 "),MU=n(KIe,"A",{href:!0});var oAt=s(MU);F6r=r(oAt,"TFCTRLLMHeadModel"),oAt.forEach(t),T6r=r(KIe," (CTRL model)"),KIe.forEach(t),M6r=i(Ce),h9=n(Ce,"LI",{});var ZIe=s(h9);zFe=n(ZIe,"STRONG",{});var rAt=s(zFe);E6r=r(rAt,"gpt2"),rAt.forEach(t),C6r=r(ZIe," \u2014 "),EU=n(ZIe,"A",{href:!0});var tAt=s(EU);w6r=r(tAt,"TFGPT2LMHeadModel"),tAt.forEach(t),A6r=r(ZIe," (OpenAI GPT-2 model)"),ZIe.forEach(t),L6r=i(Ce),p9=n(Ce,"LI",{});var eNe=s(p9);WFe=n(eNe,"STRONG",{});var aAt=s(WFe);y6r=r(aAt,"gptj"),aAt.forEach(t),x6r=r(eNe," \u2014 "),CU=n(eNe,"A",{href:!0});var nAt=s(CU);$6r=r(nAt,"TFGPTJForCausalLM"),nAt.forEach(t),k6r=r(eNe," (GPT-J model)"),eNe.forEach(t),S6r=i(Ce),_9=n(Ce,"LI",{});var oNe=s(_9);QFe=n(oNe,"STRONG",{});var sAt=s(QFe);R6r=r(sAt,"openai-gpt"),sAt.forEach(t),P6r=r(oNe," \u2014 "),wU=n(oNe,"A",{href:!0});var lAt=s(wU);B6r=r(lAt,"TFOpenAIGPTLMHeadModel"),lAt.forEach(t),I6r=r(oNe," (OpenAI GPT model)"),oNe.forEach(t),N6r=i(Ce),u9=n(Ce,"LI",{});var rNe=s(u9);HFe=n(rNe,"STRONG",{});var iAt=s(HFe);q6r=r(iAt,"opt"),iAt.forEach(t),j6r=r(rNe," \u2014 "),AU=n(rNe,"A",{href:!0});var dAt=s(AU);D6r=r(dAt,"TFOPTForCausalLM"),dAt.forEach(t),G6r=r(rNe," (OPT model)"),rNe.forEach(t),O6r=i(Ce),b9=n(Ce,"LI",{});var tNe=s(b9);UFe=n(tNe,"STRONG",{});var cAt=s(UFe);V6r=r(cAt,"rembert"),cAt.forEach(t),X6r=r(tNe," \u2014 "),LU=n(tNe,"A",{href:!0});var fAt=s(LU);z6r=r(fAt,"TFRemBertForCausalLM"),fAt.forEach(t),W6r=r(tNe," (RemBERT model)"),tNe.forEach(t),Q6r=i(Ce),v9=n(Ce,"LI",{});var aNe=s(v9);JFe=n(aNe,"STRONG",{});var mAt=s(JFe);H6r=r(mAt,"roberta"),mAt.forEach(t),U6r=r(aNe," \u2014 "),yU=n(aNe,"A",{href:!0});var gAt=s(yU);J6r=r(gAt,"TFRobertaForCausalLM"),gAt.forEach(t),Y6r=r(aNe," (RoBERTa model)"),aNe.forEach(t),K6r=i(Ce),F9=n(Ce,"LI",{});var nNe=s(F9);YFe=n(nNe,"STRONG",{});var hAt=s(YFe);Z6r=r(hAt,"roformer"),hAt.forEach(t),eTr=r(nNe," \u2014 "),xU=n(nNe,"A",{href:!0});var pAt=s(xU);oTr=r(pAt,"TFRoFormerForCausalLM"),pAt.forEach(t),rTr=r(nNe," (RoFormer model)"),nNe.forEach(t),tTr=i(Ce),T9=n(Ce,"LI",{});var sNe=s(T9);KFe=n(sNe,"STRONG",{});var _At=s(KFe);aTr=r(_At,"transfo-xl"),_At.forEach(t),nTr=r(sNe," \u2014 "),$U=n(sNe,"A",{href:!0});var uAt=s($U);sTr=r(uAt,"TFTransfoXLLMHeadModel"),uAt.forEach(t),lTr=r(sNe," (Transformer-XL model)"),sNe.forEach(t),iTr=i(Ce),M9=n(Ce,"LI",{});var lNe=s(M9);ZFe=n(lNe,"STRONG",{});var bAt=s(ZFe);dTr=r(bAt,"xlm"),bAt.forEach(t),cTr=r(lNe," \u2014 "),kU=n(lNe,"A",{href:!0});var vAt=s(kU);fTr=r(vAt,"TFXLMWithLMHeadModel"),vAt.forEach(t),mTr=r(lNe," (XLM model)"),lNe.forEach(t),gTr=i(Ce),E9=n(Ce,"LI",{});var iNe=s(E9);e6e=n(iNe,"STRONG",{});var FAt=s(e6e);hTr=r(FAt,"xlnet"),FAt.forEach(t),pTr=r(iNe," \u2014 "),SU=n(iNe,"A",{href:!0});var TAt=s(SU);_Tr=r(TAt,"TFXLNetLMHeadModel"),TAt.forEach(t),uTr=r(iNe," (XLNet model)"),iNe.forEach(t),Ce.forEach(t),bTr=i(yl),T(C9.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),jOe=i(f),dc=n(f,"H2",{class:!0});var QXe=s(dc);w9=n(QXe,"A",{id:!0,class:!0,href:!0});var MAt=s(w9);o6e=n(MAt,"SPAN",{});var EAt=s(o6e);T(y8.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),vTr=i(QXe),r6e=n(QXe,"SPAN",{});var CAt=s(r6e);FTr=r(CAt,"TFAutoModelForImageClassification"),CAt.forEach(t),QXe.forEach(t),DOe=i(f),rr=n(f,"DIV",{class:!0});var xl=s(rr);T(x8.$$.fragment,xl),TTr=i(xl),cc=n(xl,"P",{});var mre=s(cc);MTr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RU=n(mre,"A",{href:!0});var wAt=s(RU);ETr=r(wAt,"from_pretrained()"),wAt.forEach(t),CTr=r(mre," class method or the "),PU=n(mre,"A",{href:!0});var AAt=s(PU);wTr=r(AAt,"from_config()"),AAt.forEach(t),ATr=r(mre,` class
method.`),mre.forEach(t),LTr=i(xl),$8=n(xl,"P",{});var HXe=s($8);yTr=r(HXe,"This class cannot be instantiated directly using "),t6e=n(HXe,"CODE",{});var LAt=s(t6e);xTr=r(LAt,"__init__()"),LAt.forEach(t),$Tr=r(HXe," (throws an error)."),HXe.forEach(t),kTr=i(xl),Pt=n(xl,"DIV",{class:!0});var kw=s(Pt);T(k8.$$.fragment,kw),STr=i(kw),a6e=n(kw,"P",{});var yAt=s(a6e);RTr=r(yAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yAt.forEach(t),PTr=i(kw),fc=n(kw,"P",{});var gre=s(fc);BTr=r(gre,`Note:
Loading a model from its configuration file does `),n6e=n(gre,"STRONG",{});var xAt=s(n6e);ITr=r(xAt,"not"),xAt.forEach(t),NTr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(gre,"A",{href:!0});var $At=s(BU);qTr=r($At,"from_pretrained()"),$At.forEach(t),jTr=r(gre," to load the model weights."),gre.forEach(t),DTr=i(kw),T(A9.$$.fragment,kw),kw.forEach(t),GTr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(S8.$$.fragment,$l),OTr=i($l),s6e=n($l,"P",{});var kAt=s(s6e);VTr=r(kAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kAt.forEach(t),XTr=i($l),dn=n($l,"P",{});var Sw=s(dn);zTr=r(Sw,"The model class to instantiate is selected based on the "),l6e=n(Sw,"CODE",{});var SAt=s(l6e);WTr=r(SAt,"model_type"),SAt.forEach(t),QTr=r(Sw,` property of the config object (either
passed as an argument or loaded from `),i6e=n(Sw,"CODE",{});var RAt=s(i6e);HTr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),UTr=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=n(Sw,"CODE",{});var PAt=s(d6e);JTr=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),YTr=r(Sw,":"),Sw.forEach(t),KTr=i($l),rt=n($l,"UL",{});var kl=s(rt);L9=n(kl,"LI",{});var dNe=s(L9);c6e=n(dNe,"STRONG",{});var BAt=s(c6e);ZTr=r(BAt,"convnext"),BAt.forEach(t),e7r=r(dNe," \u2014 "),IU=n(dNe,"A",{href:!0});var IAt=s(IU);o7r=r(IAt,"TFConvNextForImageClassification"),IAt.forEach(t),r7r=r(dNe," (ConvNeXT model)"),dNe.forEach(t),t7r=i(kl),y9=n(kl,"LI",{});var cNe=s(y9);f6e=n(cNe,"STRONG",{});var NAt=s(f6e);a7r=r(NAt,"data2vec-vision"),NAt.forEach(t),n7r=r(cNe," \u2014 "),NU=n(cNe,"A",{href:!0});var qAt=s(NU);s7r=r(qAt,"TFData2VecVisionForImageClassification"),qAt.forEach(t),l7r=r(cNe," (Data2VecVision model)"),cNe.forEach(t),i7r=i(kl),x9=n(kl,"LI",{});var fNe=s(x9);m6e=n(fNe,"STRONG",{});var jAt=s(m6e);d7r=r(jAt,"swin"),jAt.forEach(t),c7r=r(fNe," \u2014 "),qU=n(fNe,"A",{href:!0});var DAt=s(qU);f7r=r(DAt,"TFSwinForImageClassification"),DAt.forEach(t),m7r=r(fNe," (Swin Transformer model)"),fNe.forEach(t),g7r=i(kl),$9=n(kl,"LI",{});var mNe=s($9);g6e=n(mNe,"STRONG",{});var GAt=s(g6e);h7r=r(GAt,"swinv2"),GAt.forEach(t),p7r=r(mNe," \u2014 "),jU=n(mNe,"A",{href:!0});var OAt=s(jU);_7r=r(OAt,"TFSwinv2ForImageClassification"),OAt.forEach(t),u7r=r(mNe," (Swin Transformer V2 model)"),mNe.forEach(t),b7r=i(kl),k9=n(kl,"LI",{});var gNe=s(k9);h6e=n(gNe,"STRONG",{});var VAt=s(h6e);v7r=r(VAt,"vit"),VAt.forEach(t),F7r=r(gNe," \u2014 "),DU=n(gNe,"A",{href:!0});var XAt=s(DU);T7r=r(XAt,"TFViTForImageClassification"),XAt.forEach(t),M7r=r(gNe," (ViT model)"),gNe.forEach(t),kl.forEach(t),E7r=i($l),T(S9.$$.fragment,$l),$l.forEach(t),xl.forEach(t),GOe=i(f),mc=n(f,"H2",{class:!0});var UXe=s(mc);R9=n(UXe,"A",{id:!0,class:!0,href:!0});var zAt=s(R9);p6e=n(zAt,"SPAN",{});var WAt=s(p6e);T(R8.$$.fragment,WAt),WAt.forEach(t),zAt.forEach(t),C7r=i(UXe),_6e=n(UXe,"SPAN",{});var QAt=s(_6e);w7r=r(QAt,"TFAutoModelForMaskedLM"),QAt.forEach(t),UXe.forEach(t),OOe=i(f),tr=n(f,"DIV",{class:!0});var Sl=s(tr);T(P8.$$.fragment,Sl),A7r=i(Sl),gc=n(Sl,"P",{});var hre=s(gc);L7r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GU=n(hre,"A",{href:!0});var HAt=s(GU);y7r=r(HAt,"from_pretrained()"),HAt.forEach(t),x7r=r(hre," class method or the "),OU=n(hre,"A",{href:!0});var UAt=s(OU);$7r=r(UAt,"from_config()"),UAt.forEach(t),k7r=r(hre,` class
method.`),hre.forEach(t),S7r=i(Sl),B8=n(Sl,"P",{});var JXe=s(B8);R7r=r(JXe,"This class cannot be instantiated directly using "),u6e=n(JXe,"CODE",{});var JAt=s(u6e);P7r=r(JAt,"__init__()"),JAt.forEach(t),B7r=r(JXe," (throws an error)."),JXe.forEach(t),I7r=i(Sl),Bt=n(Sl,"DIV",{class:!0});var Rw=s(Bt);T(I8.$$.fragment,Rw),N7r=i(Rw),b6e=n(Rw,"P",{});var YAt=s(b6e);q7r=r(YAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YAt.forEach(t),j7r=i(Rw),hc=n(Rw,"P",{});var pre=s(hc);D7r=r(pre,`Note:
Loading a model from its configuration file does `),v6e=n(pre,"STRONG",{});var KAt=s(v6e);G7r=r(KAt,"not"),KAt.forEach(t),O7r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(pre,"A",{href:!0});var ZAt=s(VU);V7r=r(ZAt,"from_pretrained()"),ZAt.forEach(t),X7r=r(pre," to load the model weights."),pre.forEach(t),z7r=i(Rw),T(P9.$$.fragment,Rw),Rw.forEach(t),W7r=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(N8.$$.fragment,Rl),Q7r=i(Rl),F6e=n(Rl,"P",{});var eLt=s(F6e);H7r=r(eLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eLt.forEach(t),U7r=i(Rl),cn=n(Rl,"P",{});var Pw=s(cn);J7r=r(Pw,"The model class to instantiate is selected based on the "),T6e=n(Pw,"CODE",{});var oLt=s(T6e);Y7r=r(oLt,"model_type"),oLt.forEach(t),K7r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),M6e=n(Pw,"CODE",{});var rLt=s(M6e);Z7r=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),e9r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(Pw,"CODE",{});var tLt=s(E6e);o9r=r(tLt,"pretrained_model_name_or_path"),tLt.forEach(t),r9r=r(Pw,":"),Pw.forEach(t),t9r=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);B9=n(fe,"LI",{});var hNe=s(B9);C6e=n(hNe,"STRONG",{});var aLt=s(C6e);a9r=r(aLt,"albert"),aLt.forEach(t),n9r=r(hNe," \u2014 "),XU=n(hNe,"A",{href:!0});var nLt=s(XU);s9r=r(nLt,"TFAlbertForMaskedLM"),nLt.forEach(t),l9r=r(hNe," (ALBERT model)"),hNe.forEach(t),i9r=i(fe),I9=n(fe,"LI",{});var pNe=s(I9);w6e=n(pNe,"STRONG",{});var sLt=s(w6e);d9r=r(sLt,"bert"),sLt.forEach(t),c9r=r(pNe," \u2014 "),zU=n(pNe,"A",{href:!0});var lLt=s(zU);f9r=r(lLt,"TFBertForMaskedLM"),lLt.forEach(t),m9r=r(pNe," (BERT model)"),pNe.forEach(t),g9r=i(fe),N9=n(fe,"LI",{});var _Ne=s(N9);A6e=n(_Ne,"STRONG",{});var iLt=s(A6e);h9r=r(iLt,"camembert"),iLt.forEach(t),p9r=r(_Ne," \u2014 "),WU=n(_Ne,"A",{href:!0});var dLt=s(WU);_9r=r(dLt,"TFCamembertForMaskedLM"),dLt.forEach(t),u9r=r(_Ne," (CamemBERT model)"),_Ne.forEach(t),b9r=i(fe),q9=n(fe,"LI",{});var uNe=s(q9);L6e=n(uNe,"STRONG",{});var cLt=s(L6e);v9r=r(cLt,"convbert"),cLt.forEach(t),F9r=r(uNe," \u2014 "),QU=n(uNe,"A",{href:!0});var fLt=s(QU);T9r=r(fLt,"TFConvBertForMaskedLM"),fLt.forEach(t),M9r=r(uNe," (ConvBERT model)"),uNe.forEach(t),E9r=i(fe),j9=n(fe,"LI",{});var bNe=s(j9);y6e=n(bNe,"STRONG",{});var mLt=s(y6e);C9r=r(mLt,"deberta"),mLt.forEach(t),w9r=r(bNe," \u2014 "),HU=n(bNe,"A",{href:!0});var gLt=s(HU);A9r=r(gLt,"TFDebertaForMaskedLM"),gLt.forEach(t),L9r=r(bNe," (DeBERTa model)"),bNe.forEach(t),y9r=i(fe),D9=n(fe,"LI",{});var vNe=s(D9);x6e=n(vNe,"STRONG",{});var hLt=s(x6e);x9r=r(hLt,"deberta-v2"),hLt.forEach(t),$9r=r(vNe," \u2014 "),UU=n(vNe,"A",{href:!0});var pLt=s(UU);k9r=r(pLt,"TFDebertaV2ForMaskedLM"),pLt.forEach(t),S9r=r(vNe," (DeBERTa-v2 model)"),vNe.forEach(t),R9r=i(fe),G9=n(fe,"LI",{});var FNe=s(G9);$6e=n(FNe,"STRONG",{});var _Lt=s($6e);P9r=r(_Lt,"distilbert"),_Lt.forEach(t),B9r=r(FNe," \u2014 "),JU=n(FNe,"A",{href:!0});var uLt=s(JU);I9r=r(uLt,"TFDistilBertForMaskedLM"),uLt.forEach(t),N9r=r(FNe," (DistilBERT model)"),FNe.forEach(t),q9r=i(fe),O9=n(fe,"LI",{});var TNe=s(O9);k6e=n(TNe,"STRONG",{});var bLt=s(k6e);j9r=r(bLt,"electra"),bLt.forEach(t),D9r=r(TNe," \u2014 "),YU=n(TNe,"A",{href:!0});var vLt=s(YU);G9r=r(vLt,"TFElectraForMaskedLM"),vLt.forEach(t),O9r=r(TNe," (ELECTRA model)"),TNe.forEach(t),V9r=i(fe),V9=n(fe,"LI",{});var MNe=s(V9);S6e=n(MNe,"STRONG",{});var FLt=s(S6e);X9r=r(FLt,"flaubert"),FLt.forEach(t),z9r=r(MNe," \u2014 "),KU=n(MNe,"A",{href:!0});var TLt=s(KU);W9r=r(TLt,"TFFlaubertWithLMHeadModel"),TLt.forEach(t),Q9r=r(MNe," (FlauBERT model)"),MNe.forEach(t),H9r=i(fe),X9=n(fe,"LI",{});var ENe=s(X9);R6e=n(ENe,"STRONG",{});var MLt=s(R6e);U9r=r(MLt,"funnel"),MLt.forEach(t),J9r=r(ENe," \u2014 "),ZU=n(ENe,"A",{href:!0});var ELt=s(ZU);Y9r=r(ELt,"TFFunnelForMaskedLM"),ELt.forEach(t),K9r=r(ENe," (Funnel Transformer model)"),ENe.forEach(t),Z9r=i(fe),z9=n(fe,"LI",{});var CNe=s(z9);P6e=n(CNe,"STRONG",{});var CLt=s(P6e);eMr=r(CLt,"layoutlm"),CLt.forEach(t),oMr=r(CNe," \u2014 "),eJ=n(CNe,"A",{href:!0});var wLt=s(eJ);rMr=r(wLt,"TFLayoutLMForMaskedLM"),wLt.forEach(t),tMr=r(CNe," (LayoutLM model)"),CNe.forEach(t),aMr=i(fe),W9=n(fe,"LI",{});var wNe=s(W9);B6e=n(wNe,"STRONG",{});var ALt=s(B6e);nMr=r(ALt,"longformer"),ALt.forEach(t),sMr=r(wNe," \u2014 "),oJ=n(wNe,"A",{href:!0});var LLt=s(oJ);lMr=r(LLt,"TFLongformerForMaskedLM"),LLt.forEach(t),iMr=r(wNe," (Longformer model)"),wNe.forEach(t),dMr=i(fe),Q9=n(fe,"LI",{});var ANe=s(Q9);I6e=n(ANe,"STRONG",{});var yLt=s(I6e);cMr=r(yLt,"mobilebert"),yLt.forEach(t),fMr=r(ANe," \u2014 "),rJ=n(ANe,"A",{href:!0});var xLt=s(rJ);mMr=r(xLt,"TFMobileBertForMaskedLM"),xLt.forEach(t),gMr=r(ANe," (MobileBERT model)"),ANe.forEach(t),hMr=i(fe),H9=n(fe,"LI",{});var LNe=s(H9);N6e=n(LNe,"STRONG",{});var $Lt=s(N6e);pMr=r($Lt,"mpnet"),$Lt.forEach(t),_Mr=r(LNe," \u2014 "),tJ=n(LNe,"A",{href:!0});var kLt=s(tJ);uMr=r(kLt,"TFMPNetForMaskedLM"),kLt.forEach(t),bMr=r(LNe," (MPNet model)"),LNe.forEach(t),vMr=i(fe),U9=n(fe,"LI",{});var yNe=s(U9);q6e=n(yNe,"STRONG",{});var SLt=s(q6e);FMr=r(SLt,"rembert"),SLt.forEach(t),TMr=r(yNe," \u2014 "),aJ=n(yNe,"A",{href:!0});var RLt=s(aJ);MMr=r(RLt,"TFRemBertForMaskedLM"),RLt.forEach(t),EMr=r(yNe," (RemBERT model)"),yNe.forEach(t),CMr=i(fe),J9=n(fe,"LI",{});var xNe=s(J9);j6e=n(xNe,"STRONG",{});var PLt=s(j6e);wMr=r(PLt,"roberta"),PLt.forEach(t),AMr=r(xNe," \u2014 "),nJ=n(xNe,"A",{href:!0});var BLt=s(nJ);LMr=r(BLt,"TFRobertaForMaskedLM"),BLt.forEach(t),yMr=r(xNe," (RoBERTa model)"),xNe.forEach(t),xMr=i(fe),Y9=n(fe,"LI",{});var $Ne=s(Y9);D6e=n($Ne,"STRONG",{});var ILt=s(D6e);$Mr=r(ILt,"roformer"),ILt.forEach(t),kMr=r($Ne," \u2014 "),sJ=n($Ne,"A",{href:!0});var NLt=s(sJ);SMr=r(NLt,"TFRoFormerForMaskedLM"),NLt.forEach(t),RMr=r($Ne," (RoFormer model)"),$Ne.forEach(t),PMr=i(fe),K9=n(fe,"LI",{});var kNe=s(K9);G6e=n(kNe,"STRONG",{});var qLt=s(G6e);BMr=r(qLt,"tapas"),qLt.forEach(t),IMr=r(kNe," \u2014 "),lJ=n(kNe,"A",{href:!0});var jLt=s(lJ);NMr=r(jLt,"TFTapasForMaskedLM"),jLt.forEach(t),qMr=r(kNe," (TAPAS model)"),kNe.forEach(t),jMr=i(fe),Z9=n(fe,"LI",{});var SNe=s(Z9);O6e=n(SNe,"STRONG",{});var DLt=s(O6e);DMr=r(DLt,"xlm"),DLt.forEach(t),GMr=r(SNe," \u2014 "),iJ=n(SNe,"A",{href:!0});var GLt=s(iJ);OMr=r(GLt,"TFXLMWithLMHeadModel"),GLt.forEach(t),VMr=r(SNe," (XLM model)"),SNe.forEach(t),XMr=i(fe),eM=n(fe,"LI",{});var RNe=s(eM);V6e=n(RNe,"STRONG",{});var OLt=s(V6e);zMr=r(OLt,"xlm-roberta"),OLt.forEach(t),WMr=r(RNe," \u2014 "),dJ=n(RNe,"A",{href:!0});var VLt=s(dJ);QMr=r(VLt,"TFXLMRobertaForMaskedLM"),VLt.forEach(t),HMr=r(RNe," (XLM-RoBERTa model)"),RNe.forEach(t),fe.forEach(t),UMr=i(Rl),T(oM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),VOe=i(f),pc=n(f,"H2",{class:!0});var YXe=s(pc);rM=n(YXe,"A",{id:!0,class:!0,href:!0});var XLt=s(rM);X6e=n(XLt,"SPAN",{});var zLt=s(X6e);T(q8.$$.fragment,zLt),zLt.forEach(t),XLt.forEach(t),JMr=i(YXe),z6e=n(YXe,"SPAN",{});var WLt=s(z6e);YMr=r(WLt,"TFAutoModelForSeq2SeqLM"),WLt.forEach(t),YXe.forEach(t),XOe=i(f),ar=n(f,"DIV",{class:!0});var Pl=s(ar);T(j8.$$.fragment,Pl),KMr=i(Pl),_c=n(Pl,"P",{});var _re=s(_c);ZMr=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cJ=n(_re,"A",{href:!0});var QLt=s(cJ);eEr=r(QLt,"from_pretrained()"),QLt.forEach(t),oEr=r(_re," class method or the "),fJ=n(_re,"A",{href:!0});var HLt=s(fJ);rEr=r(HLt,"from_config()"),HLt.forEach(t),tEr=r(_re,` class
method.`),_re.forEach(t),aEr=i(Pl),D8=n(Pl,"P",{});var KXe=s(D8);nEr=r(KXe,"This class cannot be instantiated directly using "),W6e=n(KXe,"CODE",{});var ULt=s(W6e);sEr=r(ULt,"__init__()"),ULt.forEach(t),lEr=r(KXe," (throws an error)."),KXe.forEach(t),iEr=i(Pl),It=n(Pl,"DIV",{class:!0});var Bw=s(It);T(G8.$$.fragment,Bw),dEr=i(Bw),Q6e=n(Bw,"P",{});var JLt=s(Q6e);cEr=r(JLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JLt.forEach(t),fEr=i(Bw),uc=n(Bw,"P",{});var ure=s(uc);mEr=r(ure,`Note:
Loading a model from its configuration file does `),H6e=n(ure,"STRONG",{});var YLt=s(H6e);gEr=r(YLt,"not"),YLt.forEach(t),hEr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(ure,"A",{href:!0});var KLt=s(mJ);pEr=r(KLt,"from_pretrained()"),KLt.forEach(t),_Er=r(ure," to load the model weights."),ure.forEach(t),uEr=i(Bw),T(tM.$$.fragment,Bw),Bw.forEach(t),bEr=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(O8.$$.fragment,Bl),vEr=i(Bl),U6e=n(Bl,"P",{});var ZLt=s(U6e);FEr=r(ZLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZLt.forEach(t),TEr=i(Bl),fn=n(Bl,"P",{});var Iw=s(fn);MEr=r(Iw,"The model class to instantiate is selected based on the "),J6e=n(Iw,"CODE",{});var eyt=s(J6e);EEr=r(eyt,"model_type"),eyt.forEach(t),CEr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(Iw,"CODE",{});var oyt=s(Y6e);wEr=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),AEr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(Iw,"CODE",{});var ryt=s(K6e);LEr=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),yEr=r(Iw,":"),Iw.forEach(t),xEr=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);aM=n(Ie,"LI",{});var PNe=s(aM);Z6e=n(PNe,"STRONG",{});var tyt=s(Z6e);$Er=r(tyt,"bart"),tyt.forEach(t),kEr=r(PNe," \u2014 "),gJ=n(PNe,"A",{href:!0});var ayt=s(gJ);SEr=r(ayt,"TFBartForConditionalGeneration"),ayt.forEach(t),REr=r(PNe," (BART model)"),PNe.forEach(t),PEr=i(Ie),nM=n(Ie,"LI",{});var BNe=s(nM);eTe=n(BNe,"STRONG",{});var nyt=s(eTe);BEr=r(nyt,"blenderbot"),nyt.forEach(t),IEr=r(BNe," \u2014 "),hJ=n(BNe,"A",{href:!0});var syt=s(hJ);NEr=r(syt,"TFBlenderbotForConditionalGeneration"),syt.forEach(t),qEr=r(BNe," (Blenderbot model)"),BNe.forEach(t),jEr=i(Ie),sM=n(Ie,"LI",{});var INe=s(sM);oTe=n(INe,"STRONG",{});var lyt=s(oTe);DEr=r(lyt,"blenderbot-small"),lyt.forEach(t),GEr=r(INe," \u2014 "),pJ=n(INe,"A",{href:!0});var iyt=s(pJ);OEr=r(iyt,"TFBlenderbotSmallForConditionalGeneration"),iyt.forEach(t),VEr=r(INe," (BlenderbotSmall model)"),INe.forEach(t),XEr=i(Ie),lM=n(Ie,"LI",{});var NNe=s(lM);rTe=n(NNe,"STRONG",{});var dyt=s(rTe);zEr=r(dyt,"encoder-decoder"),dyt.forEach(t),WEr=r(NNe," \u2014 "),_J=n(NNe,"A",{href:!0});var cyt=s(_J);QEr=r(cyt,"TFEncoderDecoderModel"),cyt.forEach(t),HEr=r(NNe," (Encoder decoder model)"),NNe.forEach(t),UEr=i(Ie),iM=n(Ie,"LI",{});var qNe=s(iM);tTe=n(qNe,"STRONG",{});var fyt=s(tTe);JEr=r(fyt,"led"),fyt.forEach(t),YEr=r(qNe," \u2014 "),uJ=n(qNe,"A",{href:!0});var myt=s(uJ);KEr=r(myt,"TFLEDForConditionalGeneration"),myt.forEach(t),ZEr=r(qNe," (LED model)"),qNe.forEach(t),eCr=i(Ie),dM=n(Ie,"LI",{});var jNe=s(dM);aTe=n(jNe,"STRONG",{});var gyt=s(aTe);oCr=r(gyt,"marian"),gyt.forEach(t),rCr=r(jNe," \u2014 "),bJ=n(jNe,"A",{href:!0});var hyt=s(bJ);tCr=r(hyt,"TFMarianMTModel"),hyt.forEach(t),aCr=r(jNe," (Marian model)"),jNe.forEach(t),nCr=i(Ie),cM=n(Ie,"LI",{});var DNe=s(cM);nTe=n(DNe,"STRONG",{});var pyt=s(nTe);sCr=r(pyt,"mbart"),pyt.forEach(t),lCr=r(DNe," \u2014 "),vJ=n(DNe,"A",{href:!0});var _yt=s(vJ);iCr=r(_yt,"TFMBartForConditionalGeneration"),_yt.forEach(t),dCr=r(DNe," (mBART model)"),DNe.forEach(t),cCr=i(Ie),fM=n(Ie,"LI",{});var GNe=s(fM);sTe=n(GNe,"STRONG",{});var uyt=s(sTe);fCr=r(uyt,"mt5"),uyt.forEach(t),mCr=r(GNe," \u2014 "),FJ=n(GNe,"A",{href:!0});var byt=s(FJ);gCr=r(byt,"TFMT5ForConditionalGeneration"),byt.forEach(t),hCr=r(GNe," (MT5 model)"),GNe.forEach(t),pCr=i(Ie),mM=n(Ie,"LI",{});var ONe=s(mM);lTe=n(ONe,"STRONG",{});var vyt=s(lTe);_Cr=r(vyt,"pegasus"),vyt.forEach(t),uCr=r(ONe," \u2014 "),TJ=n(ONe,"A",{href:!0});var Fyt=s(TJ);bCr=r(Fyt,"TFPegasusForConditionalGeneration"),Fyt.forEach(t),vCr=r(ONe," (Pegasus model)"),ONe.forEach(t),FCr=i(Ie),gM=n(Ie,"LI",{});var VNe=s(gM);iTe=n(VNe,"STRONG",{});var Tyt=s(iTe);TCr=r(Tyt,"t5"),Tyt.forEach(t),MCr=r(VNe," \u2014 "),MJ=n(VNe,"A",{href:!0});var Myt=s(MJ);ECr=r(Myt,"TFT5ForConditionalGeneration"),Myt.forEach(t),CCr=r(VNe," (T5 model)"),VNe.forEach(t),Ie.forEach(t),wCr=i(Bl),T(hM.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),zOe=i(f),bc=n(f,"H2",{class:!0});var ZXe=s(bc);pM=n(ZXe,"A",{id:!0,class:!0,href:!0});var Eyt=s(pM);dTe=n(Eyt,"SPAN",{});var Cyt=s(dTe);T(V8.$$.fragment,Cyt),Cyt.forEach(t),Eyt.forEach(t),ACr=i(ZXe),cTe=n(ZXe,"SPAN",{});var wyt=s(cTe);LCr=r(wyt,"TFAutoModelForSequenceClassification"),wyt.forEach(t),ZXe.forEach(t),WOe=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(X8.$$.fragment,Il),yCr=i(Il),vc=n(Il,"P",{});var bre=s(vc);xCr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EJ=n(bre,"A",{href:!0});var Ayt=s(EJ);$Cr=r(Ayt,"from_pretrained()"),Ayt.forEach(t),kCr=r(bre," class method or the "),CJ=n(bre,"A",{href:!0});var Lyt=s(CJ);SCr=r(Lyt,"from_config()"),Lyt.forEach(t),RCr=r(bre,` class
method.`),bre.forEach(t),PCr=i(Il),z8=n(Il,"P",{});var eze=s(z8);BCr=r(eze,"This class cannot be instantiated directly using "),fTe=n(eze,"CODE",{});var yyt=s(fTe);ICr=r(yyt,"__init__()"),yyt.forEach(t),NCr=r(eze," (throws an error)."),eze.forEach(t),qCr=i(Il),Nt=n(Il,"DIV",{class:!0});var Nw=s(Nt);T(W8.$$.fragment,Nw),jCr=i(Nw),mTe=n(Nw,"P",{});var xyt=s(mTe);DCr=r(xyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xyt.forEach(t),GCr=i(Nw),Fc=n(Nw,"P",{});var vre=s(Fc);OCr=r(vre,`Note:
Loading a model from its configuration file does `),gTe=n(vre,"STRONG",{});var $yt=s(gTe);VCr=r($yt,"not"),$yt.forEach(t),XCr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(vre,"A",{href:!0});var kyt=s(wJ);zCr=r(kyt,"from_pretrained()"),kyt.forEach(t),WCr=r(vre," to load the model weights."),vre.forEach(t),QCr=i(Nw),T(_M.$$.fragment,Nw),Nw.forEach(t),HCr=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(Q8.$$.fragment,Nl),UCr=i(Nl),hTe=n(Nl,"P",{});var Syt=s(hTe);JCr=r(Syt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Syt.forEach(t),YCr=i(Nl),mn=n(Nl,"P",{});var qw=s(mn);KCr=r(qw,"The model class to instantiate is selected based on the "),pTe=n(qw,"CODE",{});var Ryt=s(pTe);ZCr=r(Ryt,"model_type"),Ryt.forEach(t),e5r=r(qw,` property of the config object (either
passed as an argument or loaded from `),_Te=n(qw,"CODE",{});var Pyt=s(_Te);o5r=r(Pyt,"pretrained_model_name_or_path"),Pyt.forEach(t),r5r=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(qw,"CODE",{});var Byt=s(uTe);t5r=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),a5r=r(qw,":"),qw.forEach(t),n5r=i(Nl),te=n(Nl,"UL",{});var ne=s(te);uM=n(ne,"LI",{});var XNe=s(uM);bTe=n(XNe,"STRONG",{});var Iyt=s(bTe);s5r=r(Iyt,"albert"),Iyt.forEach(t),l5r=r(XNe," \u2014 "),AJ=n(XNe,"A",{href:!0});var Nyt=s(AJ);i5r=r(Nyt,"TFAlbertForSequenceClassification"),Nyt.forEach(t),d5r=r(XNe," (ALBERT model)"),XNe.forEach(t),c5r=i(ne),bM=n(ne,"LI",{});var zNe=s(bM);vTe=n(zNe,"STRONG",{});var qyt=s(vTe);f5r=r(qyt,"bert"),qyt.forEach(t),m5r=r(zNe," \u2014 "),LJ=n(zNe,"A",{href:!0});var jyt=s(LJ);g5r=r(jyt,"TFBertForSequenceClassification"),jyt.forEach(t),h5r=r(zNe," (BERT model)"),zNe.forEach(t),p5r=i(ne),vM=n(ne,"LI",{});var WNe=s(vM);FTe=n(WNe,"STRONG",{});var Dyt=s(FTe);_5r=r(Dyt,"camembert"),Dyt.forEach(t),u5r=r(WNe," \u2014 "),yJ=n(WNe,"A",{href:!0});var Gyt=s(yJ);b5r=r(Gyt,"TFCamembertForSequenceClassification"),Gyt.forEach(t),v5r=r(WNe," (CamemBERT model)"),WNe.forEach(t),F5r=i(ne),FM=n(ne,"LI",{});var QNe=s(FM);TTe=n(QNe,"STRONG",{});var Oyt=s(TTe);T5r=r(Oyt,"convbert"),Oyt.forEach(t),M5r=r(QNe," \u2014 "),xJ=n(QNe,"A",{href:!0});var Vyt=s(xJ);E5r=r(Vyt,"TFConvBertForSequenceClassification"),Vyt.forEach(t),C5r=r(QNe," (ConvBERT model)"),QNe.forEach(t),w5r=i(ne),TM=n(ne,"LI",{});var HNe=s(TM);MTe=n(HNe,"STRONG",{});var Xyt=s(MTe);A5r=r(Xyt,"ctrl"),Xyt.forEach(t),L5r=r(HNe," \u2014 "),$J=n(HNe,"A",{href:!0});var zyt=s($J);y5r=r(zyt,"TFCTRLForSequenceClassification"),zyt.forEach(t),x5r=r(HNe," (CTRL model)"),HNe.forEach(t),$5r=i(ne),MM=n(ne,"LI",{});var UNe=s(MM);ETe=n(UNe,"STRONG",{});var Wyt=s(ETe);k5r=r(Wyt,"deberta"),Wyt.forEach(t),S5r=r(UNe," \u2014 "),kJ=n(UNe,"A",{href:!0});var Qyt=s(kJ);R5r=r(Qyt,"TFDebertaForSequenceClassification"),Qyt.forEach(t),P5r=r(UNe," (DeBERTa model)"),UNe.forEach(t),B5r=i(ne),EM=n(ne,"LI",{});var JNe=s(EM);CTe=n(JNe,"STRONG",{});var Hyt=s(CTe);I5r=r(Hyt,"deberta-v2"),Hyt.forEach(t),N5r=r(JNe," \u2014 "),SJ=n(JNe,"A",{href:!0});var Uyt=s(SJ);q5r=r(Uyt,"TFDebertaV2ForSequenceClassification"),Uyt.forEach(t),j5r=r(JNe," (DeBERTa-v2 model)"),JNe.forEach(t),D5r=i(ne),CM=n(ne,"LI",{});var YNe=s(CM);wTe=n(YNe,"STRONG",{});var Jyt=s(wTe);G5r=r(Jyt,"distilbert"),Jyt.forEach(t),O5r=r(YNe," \u2014 "),RJ=n(YNe,"A",{href:!0});var Yyt=s(RJ);V5r=r(Yyt,"TFDistilBertForSequenceClassification"),Yyt.forEach(t),X5r=r(YNe," (DistilBERT model)"),YNe.forEach(t),z5r=i(ne),wM=n(ne,"LI",{});var KNe=s(wM);ATe=n(KNe,"STRONG",{});var Kyt=s(ATe);W5r=r(Kyt,"electra"),Kyt.forEach(t),Q5r=r(KNe," \u2014 "),PJ=n(KNe,"A",{href:!0});var Zyt=s(PJ);H5r=r(Zyt,"TFElectraForSequenceClassification"),Zyt.forEach(t),U5r=r(KNe," (ELECTRA model)"),KNe.forEach(t),J5r=i(ne),AM=n(ne,"LI",{});var ZNe=s(AM);LTe=n(ZNe,"STRONG",{});var e8t=s(LTe);Y5r=r(e8t,"flaubert"),e8t.forEach(t),K5r=r(ZNe," \u2014 "),BJ=n(ZNe,"A",{href:!0});var o8t=s(BJ);Z5r=r(o8t,"TFFlaubertForSequenceClassification"),o8t.forEach(t),e3r=r(ZNe," (FlauBERT model)"),ZNe.forEach(t),o3r=i(ne),LM=n(ne,"LI",{});var eqe=s(LM);yTe=n(eqe,"STRONG",{});var r8t=s(yTe);r3r=r(r8t,"funnel"),r8t.forEach(t),t3r=r(eqe," \u2014 "),IJ=n(eqe,"A",{href:!0});var t8t=s(IJ);a3r=r(t8t,"TFFunnelForSequenceClassification"),t8t.forEach(t),n3r=r(eqe," (Funnel Transformer model)"),eqe.forEach(t),s3r=i(ne),yM=n(ne,"LI",{});var oqe=s(yM);xTe=n(oqe,"STRONG",{});var a8t=s(xTe);l3r=r(a8t,"gpt2"),a8t.forEach(t),i3r=r(oqe," \u2014 "),NJ=n(oqe,"A",{href:!0});var n8t=s(NJ);d3r=r(n8t,"TFGPT2ForSequenceClassification"),n8t.forEach(t),c3r=r(oqe," (OpenAI GPT-2 model)"),oqe.forEach(t),f3r=i(ne),xM=n(ne,"LI",{});var rqe=s(xM);$Te=n(rqe,"STRONG",{});var s8t=s($Te);m3r=r(s8t,"gptj"),s8t.forEach(t),g3r=r(rqe," \u2014 "),qJ=n(rqe,"A",{href:!0});var l8t=s(qJ);h3r=r(l8t,"TFGPTJForSequenceClassification"),l8t.forEach(t),p3r=r(rqe," (GPT-J model)"),rqe.forEach(t),_3r=i(ne),$M=n(ne,"LI",{});var tqe=s($M);kTe=n(tqe,"STRONG",{});var i8t=s(kTe);u3r=r(i8t,"layoutlm"),i8t.forEach(t),b3r=r(tqe," \u2014 "),jJ=n(tqe,"A",{href:!0});var d8t=s(jJ);v3r=r(d8t,"TFLayoutLMForSequenceClassification"),d8t.forEach(t),F3r=r(tqe," (LayoutLM model)"),tqe.forEach(t),T3r=i(ne),kM=n(ne,"LI",{});var aqe=s(kM);STe=n(aqe,"STRONG",{});var c8t=s(STe);M3r=r(c8t,"longformer"),c8t.forEach(t),E3r=r(aqe," \u2014 "),DJ=n(aqe,"A",{href:!0});var f8t=s(DJ);C3r=r(f8t,"TFLongformerForSequenceClassification"),f8t.forEach(t),w3r=r(aqe," (Longformer model)"),aqe.forEach(t),A3r=i(ne),SM=n(ne,"LI",{});var nqe=s(SM);RTe=n(nqe,"STRONG",{});var m8t=s(RTe);L3r=r(m8t,"mobilebert"),m8t.forEach(t),y3r=r(nqe," \u2014 "),GJ=n(nqe,"A",{href:!0});var g8t=s(GJ);x3r=r(g8t,"TFMobileBertForSequenceClassification"),g8t.forEach(t),$3r=r(nqe," (MobileBERT model)"),nqe.forEach(t),k3r=i(ne),RM=n(ne,"LI",{});var sqe=s(RM);PTe=n(sqe,"STRONG",{});var h8t=s(PTe);S3r=r(h8t,"mpnet"),h8t.forEach(t),R3r=r(sqe," \u2014 "),OJ=n(sqe,"A",{href:!0});var p8t=s(OJ);P3r=r(p8t,"TFMPNetForSequenceClassification"),p8t.forEach(t),B3r=r(sqe," (MPNet model)"),sqe.forEach(t),I3r=i(ne),PM=n(ne,"LI",{});var lqe=s(PM);BTe=n(lqe,"STRONG",{});var _8t=s(BTe);N3r=r(_8t,"openai-gpt"),_8t.forEach(t),q3r=r(lqe," \u2014 "),VJ=n(lqe,"A",{href:!0});var u8t=s(VJ);j3r=r(u8t,"TFOpenAIGPTForSequenceClassification"),u8t.forEach(t),D3r=r(lqe," (OpenAI GPT model)"),lqe.forEach(t),G3r=i(ne),BM=n(ne,"LI",{});var iqe=s(BM);ITe=n(iqe,"STRONG",{});var b8t=s(ITe);O3r=r(b8t,"rembert"),b8t.forEach(t),V3r=r(iqe," \u2014 "),XJ=n(iqe,"A",{href:!0});var v8t=s(XJ);X3r=r(v8t,"TFRemBertForSequenceClassification"),v8t.forEach(t),z3r=r(iqe," (RemBERT model)"),iqe.forEach(t),W3r=i(ne),IM=n(ne,"LI",{});var dqe=s(IM);NTe=n(dqe,"STRONG",{});var F8t=s(NTe);Q3r=r(F8t,"roberta"),F8t.forEach(t),H3r=r(dqe," \u2014 "),zJ=n(dqe,"A",{href:!0});var T8t=s(zJ);U3r=r(T8t,"TFRobertaForSequenceClassification"),T8t.forEach(t),J3r=r(dqe," (RoBERTa model)"),dqe.forEach(t),Y3r=i(ne),NM=n(ne,"LI",{});var cqe=s(NM);qTe=n(cqe,"STRONG",{});var M8t=s(qTe);K3r=r(M8t,"roformer"),M8t.forEach(t),Z3r=r(cqe," \u2014 "),WJ=n(cqe,"A",{href:!0});var E8t=s(WJ);e0r=r(E8t,"TFRoFormerForSequenceClassification"),E8t.forEach(t),o0r=r(cqe," (RoFormer model)"),cqe.forEach(t),r0r=i(ne),qM=n(ne,"LI",{});var fqe=s(qM);jTe=n(fqe,"STRONG",{});var C8t=s(jTe);t0r=r(C8t,"tapas"),C8t.forEach(t),a0r=r(fqe," \u2014 "),QJ=n(fqe,"A",{href:!0});var w8t=s(QJ);n0r=r(w8t,"TFTapasForSequenceClassification"),w8t.forEach(t),s0r=r(fqe," (TAPAS model)"),fqe.forEach(t),l0r=i(ne),jM=n(ne,"LI",{});var mqe=s(jM);DTe=n(mqe,"STRONG",{});var A8t=s(DTe);i0r=r(A8t,"transfo-xl"),A8t.forEach(t),d0r=r(mqe," \u2014 "),HJ=n(mqe,"A",{href:!0});var L8t=s(HJ);c0r=r(L8t,"TFTransfoXLForSequenceClassification"),L8t.forEach(t),f0r=r(mqe," (Transformer-XL model)"),mqe.forEach(t),m0r=i(ne),DM=n(ne,"LI",{});var gqe=s(DM);GTe=n(gqe,"STRONG",{});var y8t=s(GTe);g0r=r(y8t,"xlm"),y8t.forEach(t),h0r=r(gqe," \u2014 "),UJ=n(gqe,"A",{href:!0});var x8t=s(UJ);p0r=r(x8t,"TFXLMForSequenceClassification"),x8t.forEach(t),_0r=r(gqe," (XLM model)"),gqe.forEach(t),u0r=i(ne),GM=n(ne,"LI",{});var hqe=s(GM);OTe=n(hqe,"STRONG",{});var $8t=s(OTe);b0r=r($8t,"xlm-roberta"),$8t.forEach(t),v0r=r(hqe," \u2014 "),JJ=n(hqe,"A",{href:!0});var k8t=s(JJ);F0r=r(k8t,"TFXLMRobertaForSequenceClassification"),k8t.forEach(t),T0r=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),M0r=i(ne),OM=n(ne,"LI",{});var pqe=s(OM);VTe=n(pqe,"STRONG",{});var S8t=s(VTe);E0r=r(S8t,"xlnet"),S8t.forEach(t),C0r=r(pqe," \u2014 "),YJ=n(pqe,"A",{href:!0});var R8t=s(YJ);w0r=r(R8t,"TFXLNetForSequenceClassification"),R8t.forEach(t),A0r=r(pqe," (XLNet model)"),pqe.forEach(t),ne.forEach(t),L0r=i(Nl),T(VM.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),QOe=i(f),Tc=n(f,"H2",{class:!0});var oze=s(Tc);XM=n(oze,"A",{id:!0,class:!0,href:!0});var P8t=s(XM);XTe=n(P8t,"SPAN",{});var B8t=s(XTe);T(H8.$$.fragment,B8t),B8t.forEach(t),P8t.forEach(t),y0r=i(oze),zTe=n(oze,"SPAN",{});var I8t=s(zTe);x0r=r(I8t,"TFAutoModelForMultipleChoice"),I8t.forEach(t),oze.forEach(t),HOe=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(U8.$$.fragment,ql),$0r=i(ql),Mc=n(ql,"P",{});var Fre=s(Mc);k0r=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=n(Fre,"A",{href:!0});var N8t=s(KJ);S0r=r(N8t,"from_pretrained()"),N8t.forEach(t),R0r=r(Fre," class method or the "),ZJ=n(Fre,"A",{href:!0});var q8t=s(ZJ);P0r=r(q8t,"from_config()"),q8t.forEach(t),B0r=r(Fre,` class
method.`),Fre.forEach(t),I0r=i(ql),J8=n(ql,"P",{});var rze=s(J8);N0r=r(rze,"This class cannot be instantiated directly using "),WTe=n(rze,"CODE",{});var j8t=s(WTe);q0r=r(j8t,"__init__()"),j8t.forEach(t),j0r=r(rze," (throws an error)."),rze.forEach(t),D0r=i(ql),qt=n(ql,"DIV",{class:!0});var jw=s(qt);T(Y8.$$.fragment,jw),G0r=i(jw),QTe=n(jw,"P",{});var D8t=s(QTe);O0r=r(D8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D8t.forEach(t),V0r=i(jw),Ec=n(jw,"P",{});var Tre=s(Ec);X0r=r(Tre,`Note:
Loading a model from its configuration file does `),HTe=n(Tre,"STRONG",{});var G8t=s(HTe);z0r=r(G8t,"not"),G8t.forEach(t),W0r=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(Tre,"A",{href:!0});var O8t=s(eY);Q0r=r(O8t,"from_pretrained()"),O8t.forEach(t),H0r=r(Tre," to load the model weights."),Tre.forEach(t),U0r=i(jw),T(zM.$$.fragment,jw),jw.forEach(t),J0r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(K8.$$.fragment,jl),Y0r=i(jl),UTe=n(jl,"P",{});var V8t=s(UTe);K0r=r(V8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V8t.forEach(t),Z0r=i(jl),gn=n(jl,"P",{});var Dw=s(gn);ewr=r(Dw,"The model class to instantiate is selected based on the "),JTe=n(Dw,"CODE",{});var X8t=s(JTe);owr=r(X8t,"model_type"),X8t.forEach(t),rwr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),YTe=n(Dw,"CODE",{});var z8t=s(YTe);twr=r(z8t,"pretrained_model_name_or_path"),z8t.forEach(t),awr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(Dw,"CODE",{});var W8t=s(KTe);nwr=r(W8t,"pretrained_model_name_or_path"),W8t.forEach(t),swr=r(Dw,":"),Dw.forEach(t),lwr=i(jl),_e=n(jl,"UL",{});var Fe=s(_e);WM=n(Fe,"LI",{});var _qe=s(WM);ZTe=n(_qe,"STRONG",{});var Q8t=s(ZTe);iwr=r(Q8t,"albert"),Q8t.forEach(t),dwr=r(_qe," \u2014 "),oY=n(_qe,"A",{href:!0});var H8t=s(oY);cwr=r(H8t,"TFAlbertForMultipleChoice"),H8t.forEach(t),fwr=r(_qe," (ALBERT model)"),_qe.forEach(t),mwr=i(Fe),QM=n(Fe,"LI",{});var uqe=s(QM);e7e=n(uqe,"STRONG",{});var U8t=s(e7e);gwr=r(U8t,"bert"),U8t.forEach(t),hwr=r(uqe," \u2014 "),rY=n(uqe,"A",{href:!0});var J8t=s(rY);pwr=r(J8t,"TFBertForMultipleChoice"),J8t.forEach(t),_wr=r(uqe," (BERT model)"),uqe.forEach(t),uwr=i(Fe),HM=n(Fe,"LI",{});var bqe=s(HM);o7e=n(bqe,"STRONG",{});var Y8t=s(o7e);bwr=r(Y8t,"camembert"),Y8t.forEach(t),vwr=r(bqe," \u2014 "),tY=n(bqe,"A",{href:!0});var K8t=s(tY);Fwr=r(K8t,"TFCamembertForMultipleChoice"),K8t.forEach(t),Twr=r(bqe," (CamemBERT model)"),bqe.forEach(t),Mwr=i(Fe),UM=n(Fe,"LI",{});var vqe=s(UM);r7e=n(vqe,"STRONG",{});var Z8t=s(r7e);Ewr=r(Z8t,"convbert"),Z8t.forEach(t),Cwr=r(vqe," \u2014 "),aY=n(vqe,"A",{href:!0});var ext=s(aY);wwr=r(ext,"TFConvBertForMultipleChoice"),ext.forEach(t),Awr=r(vqe," (ConvBERT model)"),vqe.forEach(t),Lwr=i(Fe),JM=n(Fe,"LI",{});var Fqe=s(JM);t7e=n(Fqe,"STRONG",{});var oxt=s(t7e);ywr=r(oxt,"distilbert"),oxt.forEach(t),xwr=r(Fqe," \u2014 "),nY=n(Fqe,"A",{href:!0});var rxt=s(nY);$wr=r(rxt,"TFDistilBertForMultipleChoice"),rxt.forEach(t),kwr=r(Fqe," (DistilBERT model)"),Fqe.forEach(t),Swr=i(Fe),YM=n(Fe,"LI",{});var Tqe=s(YM);a7e=n(Tqe,"STRONG",{});var txt=s(a7e);Rwr=r(txt,"electra"),txt.forEach(t),Pwr=r(Tqe," \u2014 "),sY=n(Tqe,"A",{href:!0});var axt=s(sY);Bwr=r(axt,"TFElectraForMultipleChoice"),axt.forEach(t),Iwr=r(Tqe," (ELECTRA model)"),Tqe.forEach(t),Nwr=i(Fe),KM=n(Fe,"LI",{});var Mqe=s(KM);n7e=n(Mqe,"STRONG",{});var nxt=s(n7e);qwr=r(nxt,"flaubert"),nxt.forEach(t),jwr=r(Mqe," \u2014 "),lY=n(Mqe,"A",{href:!0});var sxt=s(lY);Dwr=r(sxt,"TFFlaubertForMultipleChoice"),sxt.forEach(t),Gwr=r(Mqe," (FlauBERT model)"),Mqe.forEach(t),Owr=i(Fe),ZM=n(Fe,"LI",{});var Eqe=s(ZM);s7e=n(Eqe,"STRONG",{});var lxt=s(s7e);Vwr=r(lxt,"funnel"),lxt.forEach(t),Xwr=r(Eqe," \u2014 "),iY=n(Eqe,"A",{href:!0});var ixt=s(iY);zwr=r(ixt,"TFFunnelForMultipleChoice"),ixt.forEach(t),Wwr=r(Eqe," (Funnel Transformer model)"),Eqe.forEach(t),Qwr=i(Fe),eE=n(Fe,"LI",{});var Cqe=s(eE);l7e=n(Cqe,"STRONG",{});var dxt=s(l7e);Hwr=r(dxt,"longformer"),dxt.forEach(t),Uwr=r(Cqe," \u2014 "),dY=n(Cqe,"A",{href:!0});var cxt=s(dY);Jwr=r(cxt,"TFLongformerForMultipleChoice"),cxt.forEach(t),Ywr=r(Cqe," (Longformer model)"),Cqe.forEach(t),Kwr=i(Fe),oE=n(Fe,"LI",{});var wqe=s(oE);i7e=n(wqe,"STRONG",{});var fxt=s(i7e);Zwr=r(fxt,"mobilebert"),fxt.forEach(t),eAr=r(wqe," \u2014 "),cY=n(wqe,"A",{href:!0});var mxt=s(cY);oAr=r(mxt,"TFMobileBertForMultipleChoice"),mxt.forEach(t),rAr=r(wqe," (MobileBERT model)"),wqe.forEach(t),tAr=i(Fe),rE=n(Fe,"LI",{});var Aqe=s(rE);d7e=n(Aqe,"STRONG",{});var gxt=s(d7e);aAr=r(gxt,"mpnet"),gxt.forEach(t),nAr=r(Aqe," \u2014 "),fY=n(Aqe,"A",{href:!0});var hxt=s(fY);sAr=r(hxt,"TFMPNetForMultipleChoice"),hxt.forEach(t),lAr=r(Aqe," (MPNet model)"),Aqe.forEach(t),iAr=i(Fe),tE=n(Fe,"LI",{});var Lqe=s(tE);c7e=n(Lqe,"STRONG",{});var pxt=s(c7e);dAr=r(pxt,"rembert"),pxt.forEach(t),cAr=r(Lqe," \u2014 "),mY=n(Lqe,"A",{href:!0});var _xt=s(mY);fAr=r(_xt,"TFRemBertForMultipleChoice"),_xt.forEach(t),mAr=r(Lqe," (RemBERT model)"),Lqe.forEach(t),gAr=i(Fe),aE=n(Fe,"LI",{});var yqe=s(aE);f7e=n(yqe,"STRONG",{});var uxt=s(f7e);hAr=r(uxt,"roberta"),uxt.forEach(t),pAr=r(yqe," \u2014 "),gY=n(yqe,"A",{href:!0});var bxt=s(gY);_Ar=r(bxt,"TFRobertaForMultipleChoice"),bxt.forEach(t),uAr=r(yqe," (RoBERTa model)"),yqe.forEach(t),bAr=i(Fe),nE=n(Fe,"LI",{});var xqe=s(nE);m7e=n(xqe,"STRONG",{});var vxt=s(m7e);vAr=r(vxt,"roformer"),vxt.forEach(t),FAr=r(xqe," \u2014 "),hY=n(xqe,"A",{href:!0});var Fxt=s(hY);TAr=r(Fxt,"TFRoFormerForMultipleChoice"),Fxt.forEach(t),MAr=r(xqe," (RoFormer model)"),xqe.forEach(t),EAr=i(Fe),sE=n(Fe,"LI",{});var $qe=s(sE);g7e=n($qe,"STRONG",{});var Txt=s(g7e);CAr=r(Txt,"xlm"),Txt.forEach(t),wAr=r($qe," \u2014 "),pY=n($qe,"A",{href:!0});var Mxt=s(pY);AAr=r(Mxt,"TFXLMForMultipleChoice"),Mxt.forEach(t),LAr=r($qe," (XLM model)"),$qe.forEach(t),yAr=i(Fe),lE=n(Fe,"LI",{});var kqe=s(lE);h7e=n(kqe,"STRONG",{});var Ext=s(h7e);xAr=r(Ext,"xlm-roberta"),Ext.forEach(t),$Ar=r(kqe," \u2014 "),_Y=n(kqe,"A",{href:!0});var Cxt=s(_Y);kAr=r(Cxt,"TFXLMRobertaForMultipleChoice"),Cxt.forEach(t),SAr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),RAr=i(Fe),iE=n(Fe,"LI",{});var Sqe=s(iE);p7e=n(Sqe,"STRONG",{});var wxt=s(p7e);PAr=r(wxt,"xlnet"),wxt.forEach(t),BAr=r(Sqe," \u2014 "),uY=n(Sqe,"A",{href:!0});var Axt=s(uY);IAr=r(Axt,"TFXLNetForMultipleChoice"),Axt.forEach(t),NAr=r(Sqe," (XLNet model)"),Sqe.forEach(t),Fe.forEach(t),qAr=i(jl),T(dE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),UOe=i(f),Cc=n(f,"H2",{class:!0});var tze=s(Cc);cE=n(tze,"A",{id:!0,class:!0,href:!0});var Lxt=s(cE);_7e=n(Lxt,"SPAN",{});var yxt=s(_7e);T(Z8.$$.fragment,yxt),yxt.forEach(t),Lxt.forEach(t),jAr=i(tze),u7e=n(tze,"SPAN",{});var xxt=s(u7e);DAr=r(xxt,"TFAutoModelForNextSentencePrediction"),xxt.forEach(t),tze.forEach(t),JOe=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(ex.$$.fragment,Dl),GAr=i(Dl),wc=n(Dl,"P",{});var Mre=s(wc);OAr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bY=n(Mre,"A",{href:!0});var $xt=s(bY);VAr=r($xt,"from_pretrained()"),$xt.forEach(t),XAr=r(Mre," class method or the "),vY=n(Mre,"A",{href:!0});var kxt=s(vY);zAr=r(kxt,"from_config()"),kxt.forEach(t),WAr=r(Mre,` class
method.`),Mre.forEach(t),QAr=i(Dl),ox=n(Dl,"P",{});var aze=s(ox);HAr=r(aze,"This class cannot be instantiated directly using "),b7e=n(aze,"CODE",{});var Sxt=s(b7e);UAr=r(Sxt,"__init__()"),Sxt.forEach(t),JAr=r(aze," (throws an error)."),aze.forEach(t),YAr=i(Dl),jt=n(Dl,"DIV",{class:!0});var Gw=s(jt);T(rx.$$.fragment,Gw),KAr=i(Gw),v7e=n(Gw,"P",{});var Rxt=s(v7e);ZAr=r(Rxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Rxt.forEach(t),eLr=i(Gw),Ac=n(Gw,"P",{});var Ere=s(Ac);oLr=r(Ere,`Note:
Loading a model from its configuration file does `),F7e=n(Ere,"STRONG",{});var Pxt=s(F7e);rLr=r(Pxt,"not"),Pxt.forEach(t),tLr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Ere,"A",{href:!0});var Bxt=s(FY);aLr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),nLr=r(Ere," to load the model weights."),Ere.forEach(t),sLr=i(Gw),T(fE.$$.fragment,Gw),Gw.forEach(t),lLr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(tx.$$.fragment,Gl),iLr=i(Gl),T7e=n(Gl,"P",{});var Ixt=s(T7e);dLr=r(Ixt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ixt.forEach(t),cLr=i(Gl),hn=n(Gl,"P",{});var Ow=s(hn);fLr=r(Ow,"The model class to instantiate is selected based on the "),M7e=n(Ow,"CODE",{});var Nxt=s(M7e);mLr=r(Nxt,"model_type"),Nxt.forEach(t),gLr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),E7e=n(Ow,"CODE",{});var qxt=s(E7e);hLr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),pLr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(Ow,"CODE",{});var jxt=s(C7e);_Lr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),uLr=r(Ow,":"),Ow.forEach(t),bLr=i(Gl),ax=n(Gl,"UL",{});var nze=s(ax);mE=n(nze,"LI",{});var Rqe=s(mE);w7e=n(Rqe,"STRONG",{});var Dxt=s(w7e);vLr=r(Dxt,"bert"),Dxt.forEach(t),FLr=r(Rqe," \u2014 "),TY=n(Rqe,"A",{href:!0});var Gxt=s(TY);TLr=r(Gxt,"TFBertForNextSentencePrediction"),Gxt.forEach(t),MLr=r(Rqe," (BERT model)"),Rqe.forEach(t),ELr=i(nze),gE=n(nze,"LI",{});var Pqe=s(gE);A7e=n(Pqe,"STRONG",{});var Oxt=s(A7e);CLr=r(Oxt,"mobilebert"),Oxt.forEach(t),wLr=r(Pqe," \u2014 "),MY=n(Pqe,"A",{href:!0});var Vxt=s(MY);ALr=r(Vxt,"TFMobileBertForNextSentencePrediction"),Vxt.forEach(t),LLr=r(Pqe," (MobileBERT model)"),Pqe.forEach(t),nze.forEach(t),yLr=i(Gl),T(hE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),YOe=i(f),Lc=n(f,"H2",{class:!0});var sze=s(Lc);pE=n(sze,"A",{id:!0,class:!0,href:!0});var Xxt=s(pE);L7e=n(Xxt,"SPAN",{});var zxt=s(L7e);T(nx.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),xLr=i(sze),y7e=n(sze,"SPAN",{});var Wxt=s(y7e);$Lr=r(Wxt,"TFAutoModelForTableQuestionAnswering"),Wxt.forEach(t),sze.forEach(t),KOe=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(sx.$$.fragment,Ol),kLr=i(Ol),yc=n(Ol,"P",{});var Cre=s(yc);SLr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EY=n(Cre,"A",{href:!0});var Qxt=s(EY);RLr=r(Qxt,"from_pretrained()"),Qxt.forEach(t),PLr=r(Cre," class method or the "),CY=n(Cre,"A",{href:!0});var Hxt=s(CY);BLr=r(Hxt,"from_config()"),Hxt.forEach(t),ILr=r(Cre,` class
method.`),Cre.forEach(t),NLr=i(Ol),lx=n(Ol,"P",{});var lze=s(lx);qLr=r(lze,"This class cannot be instantiated directly using "),x7e=n(lze,"CODE",{});var Uxt=s(x7e);jLr=r(Uxt,"__init__()"),Uxt.forEach(t),DLr=r(lze," (throws an error)."),lze.forEach(t),GLr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var Vw=s(Dt);T(ix.$$.fragment,Vw),OLr=i(Vw),$7e=n(Vw,"P",{});var Jxt=s($7e);VLr=r(Jxt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jxt.forEach(t),XLr=i(Vw),xc=n(Vw,"P",{});var wre=s(xc);zLr=r(wre,`Note:
Loading a model from its configuration file does `),k7e=n(wre,"STRONG",{});var Yxt=s(k7e);WLr=r(Yxt,"not"),Yxt.forEach(t),QLr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(wre,"A",{href:!0});var Kxt=s(wY);HLr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),ULr=r(wre," to load the model weights."),wre.forEach(t),JLr=i(Vw),T(_E.$$.fragment,Vw),Vw.forEach(t),YLr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(dx.$$.fragment,Vl),KLr=i(Vl),S7e=n(Vl,"P",{});var Zxt=s(S7e);ZLr=r(Zxt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Zxt.forEach(t),eyr=i(Vl),pn=n(Vl,"P",{});var Xw=s(pn);oyr=r(Xw,"The model class to instantiate is selected based on the "),R7e=n(Xw,"CODE",{});var e$t=s(R7e);ryr=r(e$t,"model_type"),e$t.forEach(t),tyr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),P7e=n(Xw,"CODE",{});var o$t=s(P7e);ayr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),nyr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=n(Xw,"CODE",{});var r$t=s(B7e);syr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),lyr=r(Xw,":"),Xw.forEach(t),iyr=i(Vl),I7e=n(Vl,"UL",{});var t$t=s(I7e);uE=n(t$t,"LI",{});var Bqe=s(uE);N7e=n(Bqe,"STRONG",{});var a$t=s(N7e);dyr=r(a$t,"tapas"),a$t.forEach(t),cyr=r(Bqe," \u2014 "),AY=n(Bqe,"A",{href:!0});var n$t=s(AY);fyr=r(n$t,"TFTapasForQuestionAnswering"),n$t.forEach(t),myr=r(Bqe," (TAPAS model)"),Bqe.forEach(t),t$t.forEach(t),gyr=i(Vl),T(bE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),ZOe=i(f),$c=n(f,"H2",{class:!0});var ize=s($c);vE=n(ize,"A",{id:!0,class:!0,href:!0});var s$t=s(vE);q7e=n(s$t,"SPAN",{});var l$t=s(q7e);T(cx.$$.fragment,l$t),l$t.forEach(t),s$t.forEach(t),hyr=i(ize),j7e=n(ize,"SPAN",{});var i$t=s(j7e);pyr=r(i$t,"TFAutoModelForTokenClassification"),i$t.forEach(t),ize.forEach(t),eVe=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(fx.$$.fragment,Xl),_yr=i(Xl),kc=n(Xl,"P",{});var Are=s(kc);uyr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LY=n(Are,"A",{href:!0});var d$t=s(LY);byr=r(d$t,"from_pretrained()"),d$t.forEach(t),vyr=r(Are," class method or the "),yY=n(Are,"A",{href:!0});var c$t=s(yY);Fyr=r(c$t,"from_config()"),c$t.forEach(t),Tyr=r(Are,` class
method.`),Are.forEach(t),Myr=i(Xl),mx=n(Xl,"P",{});var dze=s(mx);Eyr=r(dze,"This class cannot be instantiated directly using "),D7e=n(dze,"CODE",{});var f$t=s(D7e);Cyr=r(f$t,"__init__()"),f$t.forEach(t),wyr=r(dze," (throws an error)."),dze.forEach(t),Ayr=i(Xl),Gt=n(Xl,"DIV",{class:!0});var zw=s(Gt);T(gx.$$.fragment,zw),Lyr=i(zw),G7e=n(zw,"P",{});var m$t=s(G7e);yyr=r(m$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m$t.forEach(t),xyr=i(zw),Sc=n(zw,"P",{});var Lre=s(Sc);$yr=r(Lre,`Note:
Loading a model from its configuration file does `),O7e=n(Lre,"STRONG",{});var g$t=s(O7e);kyr=r(g$t,"not"),g$t.forEach(t),Syr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Lre,"A",{href:!0});var h$t=s(xY);Ryr=r(h$t,"from_pretrained()"),h$t.forEach(t),Pyr=r(Lre," to load the model weights."),Lre.forEach(t),Byr=i(zw),T(FE.$$.fragment,zw),zw.forEach(t),Iyr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(hx.$$.fragment,zl),Nyr=i(zl),V7e=n(zl,"P",{});var p$t=s(V7e);qyr=r(p$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p$t.forEach(t),jyr=i(zl),_n=n(zl,"P",{});var Ww=s(_n);Dyr=r(Ww,"The model class to instantiate is selected based on the "),X7e=n(Ww,"CODE",{});var _$t=s(X7e);Gyr=r(_$t,"model_type"),_$t.forEach(t),Oyr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),z7e=n(Ww,"CODE",{});var u$t=s(z7e);Vyr=r(u$t,"pretrained_model_name_or_path"),u$t.forEach(t),Xyr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=n(Ww,"CODE",{});var b$t=s(W7e);zyr=r(b$t,"pretrained_model_name_or_path"),b$t.forEach(t),Wyr=r(Ww,":"),Ww.forEach(t),Qyr=i(zl),de=n(zl,"UL",{});var me=s(de);TE=n(me,"LI",{});var Iqe=s(TE);Q7e=n(Iqe,"STRONG",{});var v$t=s(Q7e);Hyr=r(v$t,"albert"),v$t.forEach(t),Uyr=r(Iqe," \u2014 "),$Y=n(Iqe,"A",{href:!0});var F$t=s($Y);Jyr=r(F$t,"TFAlbertForTokenClassification"),F$t.forEach(t),Yyr=r(Iqe," (ALBERT model)"),Iqe.forEach(t),Kyr=i(me),ME=n(me,"LI",{});var Nqe=s(ME);H7e=n(Nqe,"STRONG",{});var T$t=s(H7e);Zyr=r(T$t,"bert"),T$t.forEach(t),e8r=r(Nqe," \u2014 "),kY=n(Nqe,"A",{href:!0});var M$t=s(kY);o8r=r(M$t,"TFBertForTokenClassification"),M$t.forEach(t),r8r=r(Nqe," (BERT model)"),Nqe.forEach(t),t8r=i(me),EE=n(me,"LI",{});var qqe=s(EE);U7e=n(qqe,"STRONG",{});var E$t=s(U7e);a8r=r(E$t,"camembert"),E$t.forEach(t),n8r=r(qqe," \u2014 "),SY=n(qqe,"A",{href:!0});var C$t=s(SY);s8r=r(C$t,"TFCamembertForTokenClassification"),C$t.forEach(t),l8r=r(qqe," (CamemBERT model)"),qqe.forEach(t),i8r=i(me),CE=n(me,"LI",{});var jqe=s(CE);J7e=n(jqe,"STRONG",{});var w$t=s(J7e);d8r=r(w$t,"convbert"),w$t.forEach(t),c8r=r(jqe," \u2014 "),RY=n(jqe,"A",{href:!0});var A$t=s(RY);f8r=r(A$t,"TFConvBertForTokenClassification"),A$t.forEach(t),m8r=r(jqe," (ConvBERT model)"),jqe.forEach(t),g8r=i(me),wE=n(me,"LI",{});var Dqe=s(wE);Y7e=n(Dqe,"STRONG",{});var L$t=s(Y7e);h8r=r(L$t,"deberta"),L$t.forEach(t),p8r=r(Dqe," \u2014 "),PY=n(Dqe,"A",{href:!0});var y$t=s(PY);_8r=r(y$t,"TFDebertaForTokenClassification"),y$t.forEach(t),u8r=r(Dqe," (DeBERTa model)"),Dqe.forEach(t),b8r=i(me),AE=n(me,"LI",{});var Gqe=s(AE);K7e=n(Gqe,"STRONG",{});var x$t=s(K7e);v8r=r(x$t,"deberta-v2"),x$t.forEach(t),F8r=r(Gqe," \u2014 "),BY=n(Gqe,"A",{href:!0});var $$t=s(BY);T8r=r($$t,"TFDebertaV2ForTokenClassification"),$$t.forEach(t),M8r=r(Gqe," (DeBERTa-v2 model)"),Gqe.forEach(t),E8r=i(me),LE=n(me,"LI",{});var Oqe=s(LE);Z7e=n(Oqe,"STRONG",{});var k$t=s(Z7e);C8r=r(k$t,"distilbert"),k$t.forEach(t),w8r=r(Oqe," \u2014 "),IY=n(Oqe,"A",{href:!0});var S$t=s(IY);A8r=r(S$t,"TFDistilBertForTokenClassification"),S$t.forEach(t),L8r=r(Oqe," (DistilBERT model)"),Oqe.forEach(t),y8r=i(me),yE=n(me,"LI",{});var Vqe=s(yE);e9e=n(Vqe,"STRONG",{});var R$t=s(e9e);x8r=r(R$t,"electra"),R$t.forEach(t),$8r=r(Vqe," \u2014 "),NY=n(Vqe,"A",{href:!0});var P$t=s(NY);k8r=r(P$t,"TFElectraForTokenClassification"),P$t.forEach(t),S8r=r(Vqe," (ELECTRA model)"),Vqe.forEach(t),R8r=i(me),xE=n(me,"LI",{});var Xqe=s(xE);o9e=n(Xqe,"STRONG",{});var B$t=s(o9e);P8r=r(B$t,"flaubert"),B$t.forEach(t),B8r=r(Xqe," \u2014 "),qY=n(Xqe,"A",{href:!0});var I$t=s(qY);I8r=r(I$t,"TFFlaubertForTokenClassification"),I$t.forEach(t),N8r=r(Xqe," (FlauBERT model)"),Xqe.forEach(t),q8r=i(me),$E=n(me,"LI",{});var zqe=s($E);r9e=n(zqe,"STRONG",{});var N$t=s(r9e);j8r=r(N$t,"funnel"),N$t.forEach(t),D8r=r(zqe," \u2014 "),jY=n(zqe,"A",{href:!0});var q$t=s(jY);G8r=r(q$t,"TFFunnelForTokenClassification"),q$t.forEach(t),O8r=r(zqe," (Funnel Transformer model)"),zqe.forEach(t),V8r=i(me),kE=n(me,"LI",{});var Wqe=s(kE);t9e=n(Wqe,"STRONG",{});var j$t=s(t9e);X8r=r(j$t,"layoutlm"),j$t.forEach(t),z8r=r(Wqe," \u2014 "),DY=n(Wqe,"A",{href:!0});var D$t=s(DY);W8r=r(D$t,"TFLayoutLMForTokenClassification"),D$t.forEach(t),Q8r=r(Wqe," (LayoutLM model)"),Wqe.forEach(t),H8r=i(me),SE=n(me,"LI",{});var Qqe=s(SE);a9e=n(Qqe,"STRONG",{});var G$t=s(a9e);U8r=r(G$t,"longformer"),G$t.forEach(t),J8r=r(Qqe," \u2014 "),GY=n(Qqe,"A",{href:!0});var O$t=s(GY);Y8r=r(O$t,"TFLongformerForTokenClassification"),O$t.forEach(t),K8r=r(Qqe," (Longformer model)"),Qqe.forEach(t),Z8r=i(me),RE=n(me,"LI",{});var Hqe=s(RE);n9e=n(Hqe,"STRONG",{});var V$t=s(n9e);exr=r(V$t,"mobilebert"),V$t.forEach(t),oxr=r(Hqe," \u2014 "),OY=n(Hqe,"A",{href:!0});var X$t=s(OY);rxr=r(X$t,"TFMobileBertForTokenClassification"),X$t.forEach(t),txr=r(Hqe," (MobileBERT model)"),Hqe.forEach(t),axr=i(me),PE=n(me,"LI",{});var Uqe=s(PE);s9e=n(Uqe,"STRONG",{});var z$t=s(s9e);nxr=r(z$t,"mpnet"),z$t.forEach(t),sxr=r(Uqe," \u2014 "),VY=n(Uqe,"A",{href:!0});var W$t=s(VY);lxr=r(W$t,"TFMPNetForTokenClassification"),W$t.forEach(t),ixr=r(Uqe," (MPNet model)"),Uqe.forEach(t),dxr=i(me),BE=n(me,"LI",{});var Jqe=s(BE);l9e=n(Jqe,"STRONG",{});var Q$t=s(l9e);cxr=r(Q$t,"rembert"),Q$t.forEach(t),fxr=r(Jqe," \u2014 "),XY=n(Jqe,"A",{href:!0});var H$t=s(XY);mxr=r(H$t,"TFRemBertForTokenClassification"),H$t.forEach(t),gxr=r(Jqe," (RemBERT model)"),Jqe.forEach(t),hxr=i(me),IE=n(me,"LI",{});var Yqe=s(IE);i9e=n(Yqe,"STRONG",{});var U$t=s(i9e);pxr=r(U$t,"roberta"),U$t.forEach(t),_xr=r(Yqe," \u2014 "),zY=n(Yqe,"A",{href:!0});var J$t=s(zY);uxr=r(J$t,"TFRobertaForTokenClassification"),J$t.forEach(t),bxr=r(Yqe," (RoBERTa model)"),Yqe.forEach(t),vxr=i(me),NE=n(me,"LI",{});var Kqe=s(NE);d9e=n(Kqe,"STRONG",{});var Y$t=s(d9e);Fxr=r(Y$t,"roformer"),Y$t.forEach(t),Txr=r(Kqe," \u2014 "),WY=n(Kqe,"A",{href:!0});var K$t=s(WY);Mxr=r(K$t,"TFRoFormerForTokenClassification"),K$t.forEach(t),Exr=r(Kqe," (RoFormer model)"),Kqe.forEach(t),Cxr=i(me),qE=n(me,"LI",{});var Zqe=s(qE);c9e=n(Zqe,"STRONG",{});var Z$t=s(c9e);wxr=r(Z$t,"xlm"),Z$t.forEach(t),Axr=r(Zqe," \u2014 "),QY=n(Zqe,"A",{href:!0});var ekt=s(QY);Lxr=r(ekt,"TFXLMForTokenClassification"),ekt.forEach(t),yxr=r(Zqe," (XLM model)"),Zqe.forEach(t),xxr=i(me),jE=n(me,"LI",{});var eje=s(jE);f9e=n(eje,"STRONG",{});var okt=s(f9e);$xr=r(okt,"xlm-roberta"),okt.forEach(t),kxr=r(eje," \u2014 "),HY=n(eje,"A",{href:!0});var rkt=s(HY);Sxr=r(rkt,"TFXLMRobertaForTokenClassification"),rkt.forEach(t),Rxr=r(eje," (XLM-RoBERTa model)"),eje.forEach(t),Pxr=i(me),DE=n(me,"LI",{});var oje=s(DE);m9e=n(oje,"STRONG",{});var tkt=s(m9e);Bxr=r(tkt,"xlnet"),tkt.forEach(t),Ixr=r(oje," \u2014 "),UY=n(oje,"A",{href:!0});var akt=s(UY);Nxr=r(akt,"TFXLNetForTokenClassification"),akt.forEach(t),qxr=r(oje," (XLNet model)"),oje.forEach(t),me.forEach(t),jxr=i(zl),T(GE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),oVe=i(f),Rc=n(f,"H2",{class:!0});var cze=s(Rc);OE=n(cze,"A",{id:!0,class:!0,href:!0});var nkt=s(OE);g9e=n(nkt,"SPAN",{});var skt=s(g9e);T(px.$$.fragment,skt),skt.forEach(t),nkt.forEach(t),Dxr=i(cze),h9e=n(cze,"SPAN",{});var lkt=s(h9e);Gxr=r(lkt,"TFAutoModelForQuestionAnswering"),lkt.forEach(t),cze.forEach(t),rVe=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(_x.$$.fragment,Wl),Oxr=i(Wl),Pc=n(Wl,"P",{});var yre=s(Pc);Vxr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JY=n(yre,"A",{href:!0});var ikt=s(JY);Xxr=r(ikt,"from_pretrained()"),ikt.forEach(t),zxr=r(yre," class method or the "),YY=n(yre,"A",{href:!0});var dkt=s(YY);Wxr=r(dkt,"from_config()"),dkt.forEach(t),Qxr=r(yre,` class
method.`),yre.forEach(t),Hxr=i(Wl),ux=n(Wl,"P",{});var fze=s(ux);Uxr=r(fze,"This class cannot be instantiated directly using "),p9e=n(fze,"CODE",{});var ckt=s(p9e);Jxr=r(ckt,"__init__()"),ckt.forEach(t),Yxr=r(fze," (throws an error)."),fze.forEach(t),Kxr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var Qw=s(Ot);T(bx.$$.fragment,Qw),Zxr=i(Qw),_9e=n(Qw,"P",{});var fkt=s(_9e);e$r=r(fkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fkt.forEach(t),o$r=i(Qw),Bc=n(Qw,"P",{});var xre=s(Bc);r$r=r(xre,`Note:
Loading a model from its configuration file does `),u9e=n(xre,"STRONG",{});var mkt=s(u9e);t$r=r(mkt,"not"),mkt.forEach(t),a$r=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KY=n(xre,"A",{href:!0});var gkt=s(KY);n$r=r(gkt,"from_pretrained()"),gkt.forEach(t),s$r=r(xre," to load the model weights."),xre.forEach(t),l$r=i(Qw),T(VE.$$.fragment,Qw),Qw.forEach(t),i$r=i(Wl),qr=n(Wl,"DIV",{class:!0});var Ql=s(qr);T(vx.$$.fragment,Ql),d$r=i(Ql),b9e=n(Ql,"P",{});var hkt=s(b9e);c$r=r(hkt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hkt.forEach(t),f$r=i(Ql),un=n(Ql,"P",{});var Hw=s(un);m$r=r(Hw,"The model class to instantiate is selected based on the "),v9e=n(Hw,"CODE",{});var pkt=s(v9e);g$r=r(pkt,"model_type"),pkt.forEach(t),h$r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),F9e=n(Hw,"CODE",{});var _kt=s(F9e);p$r=r(_kt,"pretrained_model_name_or_path"),_kt.forEach(t),_$r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=n(Hw,"CODE",{});var ukt=s(T9e);u$r=r(ukt,"pretrained_model_name_or_path"),ukt.forEach(t),b$r=r(Hw,":"),Hw.forEach(t),v$r=i(Ql),ce=n(Ql,"UL",{});var ge=s(ce);XE=n(ge,"LI",{});var rje=s(XE);M9e=n(rje,"STRONG",{});var bkt=s(M9e);F$r=r(bkt,"albert"),bkt.forEach(t),T$r=r(rje," \u2014 "),ZY=n(rje,"A",{href:!0});var vkt=s(ZY);M$r=r(vkt,"TFAlbertForQuestionAnswering"),vkt.forEach(t),E$r=r(rje," (ALBERT model)"),rje.forEach(t),C$r=i(ge),zE=n(ge,"LI",{});var tje=s(zE);E9e=n(tje,"STRONG",{});var Fkt=s(E9e);w$r=r(Fkt,"bert"),Fkt.forEach(t),A$r=r(tje," \u2014 "),eK=n(tje,"A",{href:!0});var Tkt=s(eK);L$r=r(Tkt,"TFBertForQuestionAnswering"),Tkt.forEach(t),y$r=r(tje," (BERT model)"),tje.forEach(t),x$r=i(ge),WE=n(ge,"LI",{});var aje=s(WE);C9e=n(aje,"STRONG",{});var Mkt=s(C9e);$$r=r(Mkt,"camembert"),Mkt.forEach(t),k$r=r(aje," \u2014 "),oK=n(aje,"A",{href:!0});var Ekt=s(oK);S$r=r(Ekt,"TFCamembertForQuestionAnswering"),Ekt.forEach(t),R$r=r(aje," (CamemBERT model)"),aje.forEach(t),P$r=i(ge),QE=n(ge,"LI",{});var nje=s(QE);w9e=n(nje,"STRONG",{});var Ckt=s(w9e);B$r=r(Ckt,"convbert"),Ckt.forEach(t),I$r=r(nje," \u2014 "),rK=n(nje,"A",{href:!0});var wkt=s(rK);N$r=r(wkt,"TFConvBertForQuestionAnswering"),wkt.forEach(t),q$r=r(nje," (ConvBERT model)"),nje.forEach(t),j$r=i(ge),HE=n(ge,"LI",{});var sje=s(HE);A9e=n(sje,"STRONG",{});var Akt=s(A9e);D$r=r(Akt,"deberta"),Akt.forEach(t),G$r=r(sje," \u2014 "),tK=n(sje,"A",{href:!0});var Lkt=s(tK);O$r=r(Lkt,"TFDebertaForQuestionAnswering"),Lkt.forEach(t),V$r=r(sje," (DeBERTa model)"),sje.forEach(t),X$r=i(ge),UE=n(ge,"LI",{});var lje=s(UE);L9e=n(lje,"STRONG",{});var ykt=s(L9e);z$r=r(ykt,"deberta-v2"),ykt.forEach(t),W$r=r(lje," \u2014 "),aK=n(lje,"A",{href:!0});var xkt=s(aK);Q$r=r(xkt,"TFDebertaV2ForQuestionAnswering"),xkt.forEach(t),H$r=r(lje," (DeBERTa-v2 model)"),lje.forEach(t),U$r=i(ge),JE=n(ge,"LI",{});var ije=s(JE);y9e=n(ije,"STRONG",{});var $kt=s(y9e);J$r=r($kt,"distilbert"),$kt.forEach(t),Y$r=r(ije," \u2014 "),nK=n(ije,"A",{href:!0});var kkt=s(nK);K$r=r(kkt,"TFDistilBertForQuestionAnswering"),kkt.forEach(t),Z$r=r(ije," (DistilBERT model)"),ije.forEach(t),ekr=i(ge),YE=n(ge,"LI",{});var dje=s(YE);x9e=n(dje,"STRONG",{});var Skt=s(x9e);okr=r(Skt,"electra"),Skt.forEach(t),rkr=r(dje," \u2014 "),sK=n(dje,"A",{href:!0});var Rkt=s(sK);tkr=r(Rkt,"TFElectraForQuestionAnswering"),Rkt.forEach(t),akr=r(dje," (ELECTRA model)"),dje.forEach(t),nkr=i(ge),KE=n(ge,"LI",{});var cje=s(KE);$9e=n(cje,"STRONG",{});var Pkt=s($9e);skr=r(Pkt,"flaubert"),Pkt.forEach(t),lkr=r(cje," \u2014 "),lK=n(cje,"A",{href:!0});var Bkt=s(lK);ikr=r(Bkt,"TFFlaubertForQuestionAnsweringSimple"),Bkt.forEach(t),dkr=r(cje," (FlauBERT model)"),cje.forEach(t),ckr=i(ge),ZE=n(ge,"LI",{});var fje=s(ZE);k9e=n(fje,"STRONG",{});var Ikt=s(k9e);fkr=r(Ikt,"funnel"),Ikt.forEach(t),mkr=r(fje," \u2014 "),iK=n(fje,"A",{href:!0});var Nkt=s(iK);gkr=r(Nkt,"TFFunnelForQuestionAnswering"),Nkt.forEach(t),hkr=r(fje," (Funnel Transformer model)"),fje.forEach(t),pkr=i(ge),eC=n(ge,"LI",{});var mje=s(eC);S9e=n(mje,"STRONG",{});var qkt=s(S9e);_kr=r(qkt,"gptj"),qkt.forEach(t),ukr=r(mje," \u2014 "),dK=n(mje,"A",{href:!0});var jkt=s(dK);bkr=r(jkt,"TFGPTJForQuestionAnswering"),jkt.forEach(t),vkr=r(mje," (GPT-J model)"),mje.forEach(t),Fkr=i(ge),oC=n(ge,"LI",{});var gje=s(oC);R9e=n(gje,"STRONG",{});var Dkt=s(R9e);Tkr=r(Dkt,"longformer"),Dkt.forEach(t),Mkr=r(gje," \u2014 "),cK=n(gje,"A",{href:!0});var Gkt=s(cK);Ekr=r(Gkt,"TFLongformerForQuestionAnswering"),Gkt.forEach(t),Ckr=r(gje," (Longformer model)"),gje.forEach(t),wkr=i(ge),rC=n(ge,"LI",{});var hje=s(rC);P9e=n(hje,"STRONG",{});var Okt=s(P9e);Akr=r(Okt,"mobilebert"),Okt.forEach(t),Lkr=r(hje," \u2014 "),fK=n(hje,"A",{href:!0});var Vkt=s(fK);ykr=r(Vkt,"TFMobileBertForQuestionAnswering"),Vkt.forEach(t),xkr=r(hje," (MobileBERT model)"),hje.forEach(t),$kr=i(ge),tC=n(ge,"LI",{});var pje=s(tC);B9e=n(pje,"STRONG",{});var Xkt=s(B9e);kkr=r(Xkt,"mpnet"),Xkt.forEach(t),Skr=r(pje," \u2014 "),mK=n(pje,"A",{href:!0});var zkt=s(mK);Rkr=r(zkt,"TFMPNetForQuestionAnswering"),zkt.forEach(t),Pkr=r(pje," (MPNet model)"),pje.forEach(t),Bkr=i(ge),aC=n(ge,"LI",{});var _je=s(aC);I9e=n(_je,"STRONG",{});var Wkt=s(I9e);Ikr=r(Wkt,"rembert"),Wkt.forEach(t),Nkr=r(_je," \u2014 "),gK=n(_je,"A",{href:!0});var Qkt=s(gK);qkr=r(Qkt,"TFRemBertForQuestionAnswering"),Qkt.forEach(t),jkr=r(_je," (RemBERT model)"),_je.forEach(t),Dkr=i(ge),nC=n(ge,"LI",{});var uje=s(nC);N9e=n(uje,"STRONG",{});var Hkt=s(N9e);Gkr=r(Hkt,"roberta"),Hkt.forEach(t),Okr=r(uje," \u2014 "),hK=n(uje,"A",{href:!0});var Ukt=s(hK);Vkr=r(Ukt,"TFRobertaForQuestionAnswering"),Ukt.forEach(t),Xkr=r(uje," (RoBERTa model)"),uje.forEach(t),zkr=i(ge),sC=n(ge,"LI",{});var bje=s(sC);q9e=n(bje,"STRONG",{});var Jkt=s(q9e);Wkr=r(Jkt,"roformer"),Jkt.forEach(t),Qkr=r(bje," \u2014 "),pK=n(bje,"A",{href:!0});var Ykt=s(pK);Hkr=r(Ykt,"TFRoFormerForQuestionAnswering"),Ykt.forEach(t),Ukr=r(bje," (RoFormer model)"),bje.forEach(t),Jkr=i(ge),lC=n(ge,"LI",{});var vje=s(lC);j9e=n(vje,"STRONG",{});var Kkt=s(j9e);Ykr=r(Kkt,"xlm"),Kkt.forEach(t),Kkr=r(vje," \u2014 "),_K=n(vje,"A",{href:!0});var Zkt=s(_K);Zkr=r(Zkt,"TFXLMForQuestionAnsweringSimple"),Zkt.forEach(t),eSr=r(vje," (XLM model)"),vje.forEach(t),oSr=i(ge),iC=n(ge,"LI",{});var Fje=s(iC);D9e=n(Fje,"STRONG",{});var eSt=s(D9e);rSr=r(eSt,"xlm-roberta"),eSt.forEach(t),tSr=r(Fje," \u2014 "),uK=n(Fje,"A",{href:!0});var oSt=s(uK);aSr=r(oSt,"TFXLMRobertaForQuestionAnswering"),oSt.forEach(t),nSr=r(Fje," (XLM-RoBERTa model)"),Fje.forEach(t),sSr=i(ge),dC=n(ge,"LI",{});var Tje=s(dC);G9e=n(Tje,"STRONG",{});var rSt=s(G9e);lSr=r(rSt,"xlnet"),rSt.forEach(t),iSr=r(Tje," \u2014 "),bK=n(Tje,"A",{href:!0});var tSt=s(bK);dSr=r(tSt,"TFXLNetForQuestionAnsweringSimple"),tSt.forEach(t),cSr=r(Tje," (XLNet model)"),Tje.forEach(t),ge.forEach(t),fSr=i(Ql),T(cC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),tVe=i(f),Ic=n(f,"H2",{class:!0});var mze=s(Ic);fC=n(mze,"A",{id:!0,class:!0,href:!0});var aSt=s(fC);O9e=n(aSt,"SPAN",{});var nSt=s(O9e);T(Fx.$$.fragment,nSt),nSt.forEach(t),aSt.forEach(t),mSr=i(mze),V9e=n(mze,"SPAN",{});var sSt=s(V9e);gSr=r(sSt,"TFAutoModelForVision2Seq"),sSt.forEach(t),mze.forEach(t),aVe=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Tx.$$.fragment,Hl),hSr=i(Hl),Nc=n(Hl,"P",{});var $re=s(Nc);pSr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vK=n($re,"A",{href:!0});var lSt=s(vK);_Sr=r(lSt,"from_pretrained()"),lSt.forEach(t),uSr=r($re," class method or the "),FK=n($re,"A",{href:!0});var iSt=s(FK);bSr=r(iSt,"from_config()"),iSt.forEach(t),vSr=r($re,` class
method.`),$re.forEach(t),FSr=i(Hl),Mx=n(Hl,"P",{});var gze=s(Mx);TSr=r(gze,"This class cannot be instantiated directly using "),X9e=n(gze,"CODE",{});var dSt=s(X9e);MSr=r(dSt,"__init__()"),dSt.forEach(t),ESr=r(gze," (throws an error)."),gze.forEach(t),CSr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var Uw=s(Vt);T(Ex.$$.fragment,Uw),wSr=i(Uw),z9e=n(Uw,"P",{});var cSt=s(z9e);ASr=r(cSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cSt.forEach(t),LSr=i(Uw),qc=n(Uw,"P",{});var kre=s(qc);ySr=r(kre,`Note:
Loading a model from its configuration file does `),W9e=n(kre,"STRONG",{});var fSt=s(W9e);xSr=r(fSt,"not"),fSt.forEach(t),$Sr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(kre,"A",{href:!0});var mSt=s(TK);kSr=r(mSt,"from_pretrained()"),mSt.forEach(t),SSr=r(kre," to load the model weights."),kre.forEach(t),RSr=i(Uw),T(mC.$$.fragment,Uw),Uw.forEach(t),PSr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Cx.$$.fragment,Ul),BSr=i(Ul),Q9e=n(Ul,"P",{});var gSt=s(Q9e);ISr=r(gSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gSt.forEach(t),NSr=i(Ul),bn=n(Ul,"P",{});var Jw=s(bn);qSr=r(Jw,"The model class to instantiate is selected based on the "),H9e=n(Jw,"CODE",{});var hSt=s(H9e);jSr=r(hSt,"model_type"),hSt.forEach(t),DSr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),U9e=n(Jw,"CODE",{});var pSt=s(U9e);GSr=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),OSr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=n(Jw,"CODE",{});var _St=s(J9e);VSr=r(_St,"pretrained_model_name_or_path"),_St.forEach(t),XSr=r(Jw,":"),Jw.forEach(t),zSr=i(Ul),Y9e=n(Ul,"UL",{});var uSt=s(Y9e);gC=n(uSt,"LI",{});var Mje=s(gC);K9e=n(Mje,"STRONG",{});var bSt=s(K9e);WSr=r(bSt,"vision-encoder-decoder"),bSt.forEach(t),QSr=r(Mje," \u2014 "),MK=n(Mje,"A",{href:!0});var vSt=s(MK);HSr=r(vSt,"TFVisionEncoderDecoderModel"),vSt.forEach(t),USr=r(Mje," (Vision Encoder decoder model)"),Mje.forEach(t),uSt.forEach(t),JSr=i(Ul),T(hC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),nVe=i(f),jc=n(f,"H2",{class:!0});var hze=s(jc);pC=n(hze,"A",{id:!0,class:!0,href:!0});var FSt=s(pC);Z9e=n(FSt,"SPAN",{});var TSt=s(Z9e);T(wx.$$.fragment,TSt),TSt.forEach(t),FSt.forEach(t),YSr=i(hze),eMe=n(hze,"SPAN",{});var MSt=s(eMe);KSr=r(MSt,"TFAutoModelForSpeechSeq2Seq"),MSt.forEach(t),hze.forEach(t),sVe=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(Ax.$$.fragment,Jl),ZSr=i(Jl),Dc=n(Jl,"P",{});var Sre=s(Dc);eRr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EK=n(Sre,"A",{href:!0});var ESt=s(EK);oRr=r(ESt,"from_pretrained()"),ESt.forEach(t),rRr=r(Sre," class method or the "),CK=n(Sre,"A",{href:!0});var CSt=s(CK);tRr=r(CSt,"from_config()"),CSt.forEach(t),aRr=r(Sre,` class
method.`),Sre.forEach(t),nRr=i(Jl),Lx=n(Jl,"P",{});var pze=s(Lx);sRr=r(pze,"This class cannot be instantiated directly using "),oMe=n(pze,"CODE",{});var wSt=s(oMe);lRr=r(wSt,"__init__()"),wSt.forEach(t),iRr=r(pze," (throws an error)."),pze.forEach(t),dRr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var Yw=s(Xt);T(yx.$$.fragment,Yw),cRr=i(Yw),rMe=n(Yw,"P",{});var ASt=s(rMe);fRr=r(ASt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ASt.forEach(t),mRr=i(Yw),Gc=n(Yw,"P",{});var Rre=s(Gc);gRr=r(Rre,`Note:
Loading a model from its configuration file does `),tMe=n(Rre,"STRONG",{});var LSt=s(tMe);hRr=r(LSt,"not"),LSt.forEach(t),pRr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Rre,"A",{href:!0});var ySt=s(wK);_Rr=r(ySt,"from_pretrained()"),ySt.forEach(t),uRr=r(Rre," to load the model weights."),Rre.forEach(t),bRr=i(Yw),T(_C.$$.fragment,Yw),Yw.forEach(t),vRr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(xx.$$.fragment,Yl),FRr=i(Yl),aMe=n(Yl,"P",{});var xSt=s(aMe);TRr=r(xSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xSt.forEach(t),MRr=i(Yl),vn=n(Yl,"P",{});var Kw=s(vn);ERr=r(Kw,"The model class to instantiate is selected based on the "),nMe=n(Kw,"CODE",{});var $St=s(nMe);CRr=r($St,"model_type"),$St.forEach(t),wRr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),sMe=n(Kw,"CODE",{});var kSt=s(sMe);ARr=r(kSt,"pretrained_model_name_or_path"),kSt.forEach(t),LRr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(Kw,"CODE",{});var SSt=s(lMe);yRr=r(SSt,"pretrained_model_name_or_path"),SSt.forEach(t),xRr=r(Kw,":"),Kw.forEach(t),$Rr=i(Yl),iMe=n(Yl,"UL",{});var RSt=s(iMe);uC=n(RSt,"LI",{});var Eje=s(uC);dMe=n(Eje,"STRONG",{});var PSt=s(dMe);kRr=r(PSt,"speech_to_text"),PSt.forEach(t),SRr=r(Eje," \u2014 "),AK=n(Eje,"A",{href:!0});var BSt=s(AK);RRr=r(BSt,"TFSpeech2TextForConditionalGeneration"),BSt.forEach(t),PRr=r(Eje," (Speech2Text model)"),Eje.forEach(t),RSt.forEach(t),BRr=i(Yl),T(bC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),lVe=i(f),Oc=n(f,"H2",{class:!0});var _ze=s(Oc);vC=n(_ze,"A",{id:!0,class:!0,href:!0});var ISt=s(vC);cMe=n(ISt,"SPAN",{});var NSt=s(cMe);T($x.$$.fragment,NSt),NSt.forEach(t),ISt.forEach(t),IRr=i(_ze),fMe=n(_ze,"SPAN",{});var qSt=s(fMe);NRr=r(qSt,"FlaxAutoModel"),qSt.forEach(t),_ze.forEach(t),iVe=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(kx.$$.fragment,Kl),qRr=i(Kl),Vc=n(Kl,"P",{});var Pre=s(Vc);jRr=r(Pre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LK=n(Pre,"A",{href:!0});var jSt=s(LK);DRr=r(jSt,"from_pretrained()"),jSt.forEach(t),GRr=r(Pre," class method or the "),yK=n(Pre,"A",{href:!0});var DSt=s(yK);ORr=r(DSt,"from_config()"),DSt.forEach(t),VRr=r(Pre,` class
method.`),Pre.forEach(t),XRr=i(Kl),Sx=n(Kl,"P",{});var uze=s(Sx);zRr=r(uze,"This class cannot be instantiated directly using "),mMe=n(uze,"CODE",{});var GSt=s(mMe);WRr=r(GSt,"__init__()"),GSt.forEach(t),QRr=r(uze," (throws an error)."),uze.forEach(t),HRr=i(Kl),zt=n(Kl,"DIV",{class:!0});var Zw=s(zt);T(Rx.$$.fragment,Zw),URr=i(Zw),gMe=n(Zw,"P",{});var OSt=s(gMe);JRr=r(OSt,"Instantiates one of the base model classes of the library from a configuration."),OSt.forEach(t),YRr=i(Zw),Xc=n(Zw,"P",{});var Bre=s(Xc);KRr=r(Bre,`Note:
Loading a model from its configuration file does `),hMe=n(Bre,"STRONG",{});var VSt=s(hMe);ZRr=r(VSt,"not"),VSt.forEach(t),ePr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Bre,"A",{href:!0});var XSt=s(xK);oPr=r(XSt,"from_pretrained()"),XSt.forEach(t),rPr=r(Bre," to load the model weights."),Bre.forEach(t),tPr=i(Zw),T(FC.$$.fragment,Zw),Zw.forEach(t),aPr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(Px.$$.fragment,Zl),nPr=i(Zl),pMe=n(Zl,"P",{});var zSt=s(pMe);sPr=r(zSt,"Instantiate one of the base model classes of the library from a pretrained model."),zSt.forEach(t),lPr=i(Zl),Fn=n(Zl,"P",{});var eA=s(Fn);iPr=r(eA,"The model class to instantiate is selected based on the "),_Me=n(eA,"CODE",{});var WSt=s(_Me);dPr=r(WSt,"model_type"),WSt.forEach(t),cPr=r(eA,` property of the config object (either
passed as an argument or loaded from `),uMe=n(eA,"CODE",{});var QSt=s(uMe);fPr=r(QSt,"pretrained_model_name_or_path"),QSt.forEach(t),mPr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(eA,"CODE",{});var HSt=s(bMe);gPr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),hPr=r(eA,":"),eA.forEach(t),pPr=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);TC=n(ae,"LI",{});var Cje=s(TC);vMe=n(Cje,"STRONG",{});var USt=s(vMe);_Pr=r(USt,"albert"),USt.forEach(t),uPr=r(Cje," \u2014 "),$K=n(Cje,"A",{href:!0});var JSt=s($K);bPr=r(JSt,"FlaxAlbertModel"),JSt.forEach(t),vPr=r(Cje," (ALBERT model)"),Cje.forEach(t),FPr=i(ae),MC=n(ae,"LI",{});var wje=s(MC);FMe=n(wje,"STRONG",{});var YSt=s(FMe);TPr=r(YSt,"bart"),YSt.forEach(t),MPr=r(wje," \u2014 "),kK=n(wje,"A",{href:!0});var KSt=s(kK);EPr=r(KSt,"FlaxBartModel"),KSt.forEach(t),CPr=r(wje," (BART model)"),wje.forEach(t),wPr=i(ae),EC=n(ae,"LI",{});var Aje=s(EC);TMe=n(Aje,"STRONG",{});var ZSt=s(TMe);APr=r(ZSt,"beit"),ZSt.forEach(t),LPr=r(Aje," \u2014 "),SK=n(Aje,"A",{href:!0});var eRt=s(SK);yPr=r(eRt,"FlaxBeitModel"),eRt.forEach(t),xPr=r(Aje," (BEiT model)"),Aje.forEach(t),$Pr=i(ae),CC=n(ae,"LI",{});var Lje=s(CC);MMe=n(Lje,"STRONG",{});var oRt=s(MMe);kPr=r(oRt,"bert"),oRt.forEach(t),SPr=r(Lje," \u2014 "),RK=n(Lje,"A",{href:!0});var rRt=s(RK);RPr=r(rRt,"FlaxBertModel"),rRt.forEach(t),PPr=r(Lje," (BERT model)"),Lje.forEach(t),BPr=i(ae),wC=n(ae,"LI",{});var yje=s(wC);EMe=n(yje,"STRONG",{});var tRt=s(EMe);IPr=r(tRt,"big_bird"),tRt.forEach(t),NPr=r(yje," \u2014 "),PK=n(yje,"A",{href:!0});var aRt=s(PK);qPr=r(aRt,"FlaxBigBirdModel"),aRt.forEach(t),jPr=r(yje," (BigBird model)"),yje.forEach(t),DPr=i(ae),AC=n(ae,"LI",{});var xje=s(AC);CMe=n(xje,"STRONG",{});var nRt=s(CMe);GPr=r(nRt,"blenderbot"),nRt.forEach(t),OPr=r(xje," \u2014 "),BK=n(xje,"A",{href:!0});var sRt=s(BK);VPr=r(sRt,"FlaxBlenderbotModel"),sRt.forEach(t),XPr=r(xje," (Blenderbot model)"),xje.forEach(t),zPr=i(ae),LC=n(ae,"LI",{});var $je=s(LC);wMe=n($je,"STRONG",{});var lRt=s(wMe);WPr=r(lRt,"blenderbot-small"),lRt.forEach(t),QPr=r($je," \u2014 "),IK=n($je,"A",{href:!0});var iRt=s(IK);HPr=r(iRt,"FlaxBlenderbotSmallModel"),iRt.forEach(t),UPr=r($je," (BlenderbotSmall model)"),$je.forEach(t),JPr=i(ae),yC=n(ae,"LI",{});var kje=s(yC);AMe=n(kje,"STRONG",{});var dRt=s(AMe);YPr=r(dRt,"clip"),dRt.forEach(t),KPr=r(kje," \u2014 "),NK=n(kje,"A",{href:!0});var cRt=s(NK);ZPr=r(cRt,"FlaxCLIPModel"),cRt.forEach(t),eBr=r(kje," (CLIP model)"),kje.forEach(t),oBr=i(ae),xC=n(ae,"LI",{});var Sje=s(xC);LMe=n(Sje,"STRONG",{});var fRt=s(LMe);rBr=r(fRt,"distilbert"),fRt.forEach(t),tBr=r(Sje," \u2014 "),qK=n(Sje,"A",{href:!0});var mRt=s(qK);aBr=r(mRt,"FlaxDistilBertModel"),mRt.forEach(t),nBr=r(Sje," (DistilBERT model)"),Sje.forEach(t),sBr=i(ae),$C=n(ae,"LI",{});var Rje=s($C);yMe=n(Rje,"STRONG",{});var gRt=s(yMe);lBr=r(gRt,"electra"),gRt.forEach(t),iBr=r(Rje," \u2014 "),jK=n(Rje,"A",{href:!0});var hRt=s(jK);dBr=r(hRt,"FlaxElectraModel"),hRt.forEach(t),cBr=r(Rje," (ELECTRA model)"),Rje.forEach(t),fBr=i(ae),kC=n(ae,"LI",{});var Pje=s(kC);xMe=n(Pje,"STRONG",{});var pRt=s(xMe);mBr=r(pRt,"gpt2"),pRt.forEach(t),gBr=r(Pje," \u2014 "),DK=n(Pje,"A",{href:!0});var _Rt=s(DK);hBr=r(_Rt,"FlaxGPT2Model"),_Rt.forEach(t),pBr=r(Pje," (OpenAI GPT-2 model)"),Pje.forEach(t),_Br=i(ae),SC=n(ae,"LI",{});var Bje=s(SC);$Me=n(Bje,"STRONG",{});var uRt=s($Me);uBr=r(uRt,"gpt_neo"),uRt.forEach(t),bBr=r(Bje," \u2014 "),GK=n(Bje,"A",{href:!0});var bRt=s(GK);vBr=r(bRt,"FlaxGPTNeoModel"),bRt.forEach(t),FBr=r(Bje," (GPT Neo model)"),Bje.forEach(t),TBr=i(ae),RC=n(ae,"LI",{});var Ije=s(RC);kMe=n(Ije,"STRONG",{});var vRt=s(kMe);MBr=r(vRt,"gptj"),vRt.forEach(t),EBr=r(Ije," \u2014 "),OK=n(Ije,"A",{href:!0});var FRt=s(OK);CBr=r(FRt,"FlaxGPTJModel"),FRt.forEach(t),wBr=r(Ije," (GPT-J model)"),Ije.forEach(t),ABr=i(ae),PC=n(ae,"LI",{});var Nje=s(PC);SMe=n(Nje,"STRONG",{});var TRt=s(SMe);LBr=r(TRt,"longt5"),TRt.forEach(t),yBr=r(Nje," \u2014 "),VK=n(Nje,"A",{href:!0});var MRt=s(VK);xBr=r(MRt,"FlaxLongT5Model"),MRt.forEach(t),$Br=r(Nje," (LongT5 model)"),Nje.forEach(t),kBr=i(ae),BC=n(ae,"LI",{});var qje=s(BC);RMe=n(qje,"STRONG",{});var ERt=s(RMe);SBr=r(ERt,"marian"),ERt.forEach(t),RBr=r(qje," \u2014 "),XK=n(qje,"A",{href:!0});var CRt=s(XK);PBr=r(CRt,"FlaxMarianModel"),CRt.forEach(t),BBr=r(qje," (Marian model)"),qje.forEach(t),IBr=i(ae),IC=n(ae,"LI",{});var jje=s(IC);PMe=n(jje,"STRONG",{});var wRt=s(PMe);NBr=r(wRt,"mbart"),wRt.forEach(t),qBr=r(jje," \u2014 "),zK=n(jje,"A",{href:!0});var ARt=s(zK);jBr=r(ARt,"FlaxMBartModel"),ARt.forEach(t),DBr=r(jje," (mBART model)"),jje.forEach(t),GBr=i(ae),NC=n(ae,"LI",{});var Dje=s(NC);BMe=n(Dje,"STRONG",{});var LRt=s(BMe);OBr=r(LRt,"mt5"),LRt.forEach(t),VBr=r(Dje," \u2014 "),WK=n(Dje,"A",{href:!0});var yRt=s(WK);XBr=r(yRt,"FlaxMT5Model"),yRt.forEach(t),zBr=r(Dje," (MT5 model)"),Dje.forEach(t),WBr=i(ae),qC=n(ae,"LI",{});var Gje=s(qC);IMe=n(Gje,"STRONG",{});var xRt=s(IMe);QBr=r(xRt,"opt"),xRt.forEach(t),HBr=r(Gje," \u2014 "),QK=n(Gje,"A",{href:!0});var $Rt=s(QK);UBr=r($Rt,"FlaxOPTModel"),$Rt.forEach(t),JBr=r(Gje," (OPT model)"),Gje.forEach(t),YBr=i(ae),jC=n(ae,"LI",{});var Oje=s(jC);NMe=n(Oje,"STRONG",{});var kRt=s(NMe);KBr=r(kRt,"pegasus"),kRt.forEach(t),ZBr=r(Oje," \u2014 "),HK=n(Oje,"A",{href:!0});var SRt=s(HK);eIr=r(SRt,"FlaxPegasusModel"),SRt.forEach(t),oIr=r(Oje," (Pegasus model)"),Oje.forEach(t),rIr=i(ae),DC=n(ae,"LI",{});var Vje=s(DC);qMe=n(Vje,"STRONG",{});var RRt=s(qMe);tIr=r(RRt,"roberta"),RRt.forEach(t),aIr=r(Vje," \u2014 "),UK=n(Vje,"A",{href:!0});var PRt=s(UK);nIr=r(PRt,"FlaxRobertaModel"),PRt.forEach(t),sIr=r(Vje," (RoBERTa model)"),Vje.forEach(t),lIr=i(ae),GC=n(ae,"LI",{});var Xje=s(GC);jMe=n(Xje,"STRONG",{});var BRt=s(jMe);iIr=r(BRt,"roformer"),BRt.forEach(t),dIr=r(Xje," \u2014 "),JK=n(Xje,"A",{href:!0});var IRt=s(JK);cIr=r(IRt,"FlaxRoFormerModel"),IRt.forEach(t),fIr=r(Xje," (RoFormer model)"),Xje.forEach(t),mIr=i(ae),OC=n(ae,"LI",{});var zje=s(OC);DMe=n(zje,"STRONG",{});var NRt=s(DMe);gIr=r(NRt,"t5"),NRt.forEach(t),hIr=r(zje," \u2014 "),YK=n(zje,"A",{href:!0});var qRt=s(YK);pIr=r(qRt,"FlaxT5Model"),qRt.forEach(t),_Ir=r(zje," (T5 model)"),zje.forEach(t),uIr=i(ae),VC=n(ae,"LI",{});var Wje=s(VC);GMe=n(Wje,"STRONG",{});var jRt=s(GMe);bIr=r(jRt,"vision-text-dual-encoder"),jRt.forEach(t),vIr=r(Wje," \u2014 "),KK=n(Wje,"A",{href:!0});var DRt=s(KK);FIr=r(DRt,"FlaxVisionTextDualEncoderModel"),DRt.forEach(t),TIr=r(Wje," (VisionTextDualEncoder model)"),Wje.forEach(t),MIr=i(ae),XC=n(ae,"LI",{});var Qje=s(XC);OMe=n(Qje,"STRONG",{});var GRt=s(OMe);EIr=r(GRt,"vit"),GRt.forEach(t),CIr=r(Qje," \u2014 "),ZK=n(Qje,"A",{href:!0});var ORt=s(ZK);wIr=r(ORt,"FlaxViTModel"),ORt.forEach(t),AIr=r(Qje," (ViT model)"),Qje.forEach(t),LIr=i(ae),zC=n(ae,"LI",{});var Hje=s(zC);VMe=n(Hje,"STRONG",{});var VRt=s(VMe);yIr=r(VRt,"wav2vec2"),VRt.forEach(t),xIr=r(Hje," \u2014 "),eZ=n(Hje,"A",{href:!0});var XRt=s(eZ);$Ir=r(XRt,"FlaxWav2Vec2Model"),XRt.forEach(t),kIr=r(Hje," (Wav2Vec2 model)"),Hje.forEach(t),SIr=i(ae),WC=n(ae,"LI",{});var Uje=s(WC);XMe=n(Uje,"STRONG",{});var zRt=s(XMe);RIr=r(zRt,"xglm"),zRt.forEach(t),PIr=r(Uje," \u2014 "),oZ=n(Uje,"A",{href:!0});var WRt=s(oZ);BIr=r(WRt,"FlaxXGLMModel"),WRt.forEach(t),IIr=r(Uje," (XGLM model)"),Uje.forEach(t),NIr=i(ae),QC=n(ae,"LI",{});var Jje=s(QC);zMe=n(Jje,"STRONG",{});var QRt=s(zMe);qIr=r(QRt,"xlm-roberta"),QRt.forEach(t),jIr=r(Jje," \u2014 "),rZ=n(Jje,"A",{href:!0});var HRt=s(rZ);DIr=r(HRt,"FlaxXLMRobertaModel"),HRt.forEach(t),GIr=r(Jje," (XLM-RoBERTa model)"),Jje.forEach(t),ae.forEach(t),OIr=i(Zl),T(HC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),dVe=i(f),zc=n(f,"H2",{class:!0});var bze=s(zc);UC=n(bze,"A",{id:!0,class:!0,href:!0});var URt=s(UC);WMe=n(URt,"SPAN",{});var JRt=s(WMe);T(Bx.$$.fragment,JRt),JRt.forEach(t),URt.forEach(t),VIr=i(bze),QMe=n(bze,"SPAN",{});var YRt=s(QMe);XIr=r(YRt,"FlaxAutoModelForCausalLM"),YRt.forEach(t),bze.forEach(t),cVe=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(Ix.$$.fragment,ei),zIr=i(ei),Wc=n(ei,"P",{});var Ire=s(Wc);WIr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tZ=n(Ire,"A",{href:!0});var KRt=s(tZ);QIr=r(KRt,"from_pretrained()"),KRt.forEach(t),HIr=r(Ire," class method or the "),aZ=n(Ire,"A",{href:!0});var ZRt=s(aZ);UIr=r(ZRt,"from_config()"),ZRt.forEach(t),JIr=r(Ire,` class
method.`),Ire.forEach(t),YIr=i(ei),Nx=n(ei,"P",{});var vze=s(Nx);KIr=r(vze,"This class cannot be instantiated directly using "),HMe=n(vze,"CODE",{});var ePt=s(HMe);ZIr=r(ePt,"__init__()"),ePt.forEach(t),eNr=r(vze," (throws an error)."),vze.forEach(t),oNr=i(ei),Wt=n(ei,"DIV",{class:!0});var oA=s(Wt);T(qx.$$.fragment,oA),rNr=i(oA),UMe=n(oA,"P",{});var oPt=s(UMe);tNr=r(oPt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oPt.forEach(t),aNr=i(oA),Qc=n(oA,"P",{});var Nre=s(Qc);nNr=r(Nre,`Note:
Loading a model from its configuration file does `),JMe=n(Nre,"STRONG",{});var rPt=s(JMe);sNr=r(rPt,"not"),rPt.forEach(t),lNr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(Nre,"A",{href:!0});var tPt=s(nZ);iNr=r(tPt,"from_pretrained()"),tPt.forEach(t),dNr=r(Nre," to load the model weights."),Nre.forEach(t),cNr=i(oA),T(JC.$$.fragment,oA),oA.forEach(t),fNr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(jx.$$.fragment,oi),mNr=i(oi),YMe=n(oi,"P",{});var aPt=s(YMe);gNr=r(aPt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aPt.forEach(t),hNr=i(oi),Tn=n(oi,"P",{});var rA=s(Tn);pNr=r(rA,"The model class to instantiate is selected based on the "),KMe=n(rA,"CODE",{});var nPt=s(KMe);_Nr=r(nPt,"model_type"),nPt.forEach(t),uNr=r(rA,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(rA,"CODE",{});var sPt=s(ZMe);bNr=r(sPt,"pretrained_model_name_or_path"),sPt.forEach(t),vNr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(rA,"CODE",{});var lPt=s(eEe);FNr=r(lPt,"pretrained_model_name_or_path"),lPt.forEach(t),TNr=r(rA,":"),rA.forEach(t),MNr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);YC=n(Ne,"LI",{});var Yje=s(YC);oEe=n(Yje,"STRONG",{});var iPt=s(oEe);ENr=r(iPt,"bart"),iPt.forEach(t),CNr=r(Yje," \u2014 "),sZ=n(Yje,"A",{href:!0});var dPt=s(sZ);wNr=r(dPt,"FlaxBartForCausalLM"),dPt.forEach(t),ANr=r(Yje," (BART model)"),Yje.forEach(t),LNr=i(Ne),KC=n(Ne,"LI",{});var Kje=s(KC);rEe=n(Kje,"STRONG",{});var cPt=s(rEe);yNr=r(cPt,"bert"),cPt.forEach(t),xNr=r(Kje," \u2014 "),lZ=n(Kje,"A",{href:!0});var fPt=s(lZ);$Nr=r(fPt,"FlaxBertForCausalLM"),fPt.forEach(t),kNr=r(Kje," (BERT model)"),Kje.forEach(t),SNr=i(Ne),ZC=n(Ne,"LI",{});var Zje=s(ZC);tEe=n(Zje,"STRONG",{});var mPt=s(tEe);RNr=r(mPt,"big_bird"),mPt.forEach(t),PNr=r(Zje," \u2014 "),iZ=n(Zje,"A",{href:!0});var gPt=s(iZ);BNr=r(gPt,"FlaxBigBirdForCausalLM"),gPt.forEach(t),INr=r(Zje," (BigBird model)"),Zje.forEach(t),NNr=i(Ne),e5=n(Ne,"LI",{});var eDe=s(e5);aEe=n(eDe,"STRONG",{});var hPt=s(aEe);qNr=r(hPt,"electra"),hPt.forEach(t),jNr=r(eDe," \u2014 "),dZ=n(eDe,"A",{href:!0});var pPt=s(dZ);DNr=r(pPt,"FlaxElectraForCausalLM"),pPt.forEach(t),GNr=r(eDe," (ELECTRA model)"),eDe.forEach(t),ONr=i(Ne),o5=n(Ne,"LI",{});var oDe=s(o5);nEe=n(oDe,"STRONG",{});var _Pt=s(nEe);VNr=r(_Pt,"gpt2"),_Pt.forEach(t),XNr=r(oDe," \u2014 "),cZ=n(oDe,"A",{href:!0});var uPt=s(cZ);zNr=r(uPt,"FlaxGPT2LMHeadModel"),uPt.forEach(t),WNr=r(oDe," (OpenAI GPT-2 model)"),oDe.forEach(t),QNr=i(Ne),r5=n(Ne,"LI",{});var rDe=s(r5);sEe=n(rDe,"STRONG",{});var bPt=s(sEe);HNr=r(bPt,"gpt_neo"),bPt.forEach(t),UNr=r(rDe," \u2014 "),fZ=n(rDe,"A",{href:!0});var vPt=s(fZ);JNr=r(vPt,"FlaxGPTNeoForCausalLM"),vPt.forEach(t),YNr=r(rDe," (GPT Neo model)"),rDe.forEach(t),KNr=i(Ne),t5=n(Ne,"LI",{});var tDe=s(t5);lEe=n(tDe,"STRONG",{});var FPt=s(lEe);ZNr=r(FPt,"gptj"),FPt.forEach(t),eqr=r(tDe," \u2014 "),mZ=n(tDe,"A",{href:!0});var TPt=s(mZ);oqr=r(TPt,"FlaxGPTJForCausalLM"),TPt.forEach(t),rqr=r(tDe," (GPT-J model)"),tDe.forEach(t),tqr=i(Ne),a5=n(Ne,"LI",{});var aDe=s(a5);iEe=n(aDe,"STRONG",{});var MPt=s(iEe);aqr=r(MPt,"opt"),MPt.forEach(t),nqr=r(aDe," \u2014 "),gZ=n(aDe,"A",{href:!0});var EPt=s(gZ);sqr=r(EPt,"FlaxOPTForCausalLM"),EPt.forEach(t),lqr=r(aDe," (OPT model)"),aDe.forEach(t),iqr=i(Ne),n5=n(Ne,"LI",{});var nDe=s(n5);dEe=n(nDe,"STRONG",{});var CPt=s(dEe);dqr=r(CPt,"roberta"),CPt.forEach(t),cqr=r(nDe," \u2014 "),hZ=n(nDe,"A",{href:!0});var wPt=s(hZ);fqr=r(wPt,"FlaxRobertaForCausalLM"),wPt.forEach(t),mqr=r(nDe," (RoBERTa model)"),nDe.forEach(t),gqr=i(Ne),s5=n(Ne,"LI",{});var sDe=s(s5);cEe=n(sDe,"STRONG",{});var APt=s(cEe);hqr=r(APt,"xglm"),APt.forEach(t),pqr=r(sDe," \u2014 "),pZ=n(sDe,"A",{href:!0});var LPt=s(pZ);_qr=r(LPt,"FlaxXGLMForCausalLM"),LPt.forEach(t),uqr=r(sDe," (XGLM model)"),sDe.forEach(t),Ne.forEach(t),bqr=i(oi),T(l5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),fVe=i(f),Hc=n(f,"H2",{class:!0});var Fze=s(Hc);i5=n(Fze,"A",{id:!0,class:!0,href:!0});var yPt=s(i5);fEe=n(yPt,"SPAN",{});var xPt=s(fEe);T(Dx.$$.fragment,xPt),xPt.forEach(t),yPt.forEach(t),vqr=i(Fze),mEe=n(Fze,"SPAN",{});var $Pt=s(mEe);Fqr=r($Pt,"FlaxAutoModelForPreTraining"),$Pt.forEach(t),Fze.forEach(t),mVe=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(Gx.$$.fragment,ri),Tqr=i(ri),Uc=n(ri,"P",{});var qre=s(Uc);Mqr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_Z=n(qre,"A",{href:!0});var kPt=s(_Z);Eqr=r(kPt,"from_pretrained()"),kPt.forEach(t),Cqr=r(qre," class method or the "),uZ=n(qre,"A",{href:!0});var SPt=s(uZ);wqr=r(SPt,"from_config()"),SPt.forEach(t),Aqr=r(qre,` class
method.`),qre.forEach(t),Lqr=i(ri),Ox=n(ri,"P",{});var Tze=s(Ox);yqr=r(Tze,"This class cannot be instantiated directly using "),gEe=n(Tze,"CODE",{});var RPt=s(gEe);xqr=r(RPt,"__init__()"),RPt.forEach(t),$qr=r(Tze," (throws an error)."),Tze.forEach(t),kqr=i(ri),Qt=n(ri,"DIV",{class:!0});var tA=s(Qt);T(Vx.$$.fragment,tA),Sqr=i(tA),hEe=n(tA,"P",{});var PPt=s(hEe);Rqr=r(PPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PPt.forEach(t),Pqr=i(tA),Jc=n(tA,"P",{});var jre=s(Jc);Bqr=r(jre,`Note:
Loading a model from its configuration file does `),pEe=n(jre,"STRONG",{});var BPt=s(pEe);Iqr=r(BPt,"not"),BPt.forEach(t),Nqr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=n(jre,"A",{href:!0});var IPt=s(bZ);qqr=r(IPt,"from_pretrained()"),IPt.forEach(t),jqr=r(jre," to load the model weights."),jre.forEach(t),Dqr=i(tA),T(d5.$$.fragment,tA),tA.forEach(t),Gqr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(Xx.$$.fragment,ti),Oqr=i(ti),_Ee=n(ti,"P",{});var NPt=s(_Ee);Vqr=r(NPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NPt.forEach(t),Xqr=i(ti),Mn=n(ti,"P",{});var aA=s(Mn);zqr=r(aA,"The model class to instantiate is selected based on the "),uEe=n(aA,"CODE",{});var qPt=s(uEe);Wqr=r(qPt,"model_type"),qPt.forEach(t),Qqr=r(aA,` property of the config object (either
passed as an argument or loaded from `),bEe=n(aA,"CODE",{});var jPt=s(bEe);Hqr=r(jPt,"pretrained_model_name_or_path"),jPt.forEach(t),Uqr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(aA,"CODE",{});var DPt=s(vEe);Jqr=r(DPt,"pretrained_model_name_or_path"),DPt.forEach(t),Yqr=r(aA,":"),aA.forEach(t),Kqr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);c5=n(we,"LI",{});var lDe=s(c5);FEe=n(lDe,"STRONG",{});var GPt=s(FEe);Zqr=r(GPt,"albert"),GPt.forEach(t),ejr=r(lDe," \u2014 "),vZ=n(lDe,"A",{href:!0});var OPt=s(vZ);ojr=r(OPt,"FlaxAlbertForPreTraining"),OPt.forEach(t),rjr=r(lDe," (ALBERT model)"),lDe.forEach(t),tjr=i(we),f5=n(we,"LI",{});var iDe=s(f5);TEe=n(iDe,"STRONG",{});var VPt=s(TEe);ajr=r(VPt,"bart"),VPt.forEach(t),njr=r(iDe," \u2014 "),FZ=n(iDe,"A",{href:!0});var XPt=s(FZ);sjr=r(XPt,"FlaxBartForConditionalGeneration"),XPt.forEach(t),ljr=r(iDe," (BART model)"),iDe.forEach(t),ijr=i(we),m5=n(we,"LI",{});var dDe=s(m5);MEe=n(dDe,"STRONG",{});var zPt=s(MEe);djr=r(zPt,"bert"),zPt.forEach(t),cjr=r(dDe," \u2014 "),TZ=n(dDe,"A",{href:!0});var WPt=s(TZ);fjr=r(WPt,"FlaxBertForPreTraining"),WPt.forEach(t),mjr=r(dDe," (BERT model)"),dDe.forEach(t),gjr=i(we),g5=n(we,"LI",{});var cDe=s(g5);EEe=n(cDe,"STRONG",{});var QPt=s(EEe);hjr=r(QPt,"big_bird"),QPt.forEach(t),pjr=r(cDe," \u2014 "),MZ=n(cDe,"A",{href:!0});var HPt=s(MZ);_jr=r(HPt,"FlaxBigBirdForPreTraining"),HPt.forEach(t),ujr=r(cDe," (BigBird model)"),cDe.forEach(t),bjr=i(we),h5=n(we,"LI",{});var fDe=s(h5);CEe=n(fDe,"STRONG",{});var UPt=s(CEe);vjr=r(UPt,"electra"),UPt.forEach(t),Fjr=r(fDe," \u2014 "),EZ=n(fDe,"A",{href:!0});var JPt=s(EZ);Tjr=r(JPt,"FlaxElectraForPreTraining"),JPt.forEach(t),Mjr=r(fDe," (ELECTRA model)"),fDe.forEach(t),Ejr=i(we),p5=n(we,"LI",{});var mDe=s(p5);wEe=n(mDe,"STRONG",{});var YPt=s(wEe);Cjr=r(YPt,"longt5"),YPt.forEach(t),wjr=r(mDe," \u2014 "),CZ=n(mDe,"A",{href:!0});var KPt=s(CZ);Ajr=r(KPt,"FlaxLongT5ForConditionalGeneration"),KPt.forEach(t),Ljr=r(mDe," (LongT5 model)"),mDe.forEach(t),yjr=i(we),_5=n(we,"LI",{});var gDe=s(_5);AEe=n(gDe,"STRONG",{});var ZPt=s(AEe);xjr=r(ZPt,"mbart"),ZPt.forEach(t),$jr=r(gDe," \u2014 "),wZ=n(gDe,"A",{href:!0});var eBt=s(wZ);kjr=r(eBt,"FlaxMBartForConditionalGeneration"),eBt.forEach(t),Sjr=r(gDe," (mBART model)"),gDe.forEach(t),Rjr=i(we),u5=n(we,"LI",{});var hDe=s(u5);LEe=n(hDe,"STRONG",{});var oBt=s(LEe);Pjr=r(oBt,"mt5"),oBt.forEach(t),Bjr=r(hDe," \u2014 "),AZ=n(hDe,"A",{href:!0});var rBt=s(AZ);Ijr=r(rBt,"FlaxMT5ForConditionalGeneration"),rBt.forEach(t),Njr=r(hDe," (MT5 model)"),hDe.forEach(t),qjr=i(we),b5=n(we,"LI",{});var pDe=s(b5);yEe=n(pDe,"STRONG",{});var tBt=s(yEe);jjr=r(tBt,"roberta"),tBt.forEach(t),Djr=r(pDe," \u2014 "),LZ=n(pDe,"A",{href:!0});var aBt=s(LZ);Gjr=r(aBt,"FlaxRobertaForMaskedLM"),aBt.forEach(t),Ojr=r(pDe," (RoBERTa model)"),pDe.forEach(t),Vjr=i(we),v5=n(we,"LI",{});var _De=s(v5);xEe=n(_De,"STRONG",{});var nBt=s(xEe);Xjr=r(nBt,"roformer"),nBt.forEach(t),zjr=r(_De," \u2014 "),yZ=n(_De,"A",{href:!0});var sBt=s(yZ);Wjr=r(sBt,"FlaxRoFormerForMaskedLM"),sBt.forEach(t),Qjr=r(_De," (RoFormer model)"),_De.forEach(t),Hjr=i(we),F5=n(we,"LI",{});var uDe=s(F5);$Ee=n(uDe,"STRONG",{});var lBt=s($Ee);Ujr=r(lBt,"t5"),lBt.forEach(t),Jjr=r(uDe," \u2014 "),xZ=n(uDe,"A",{href:!0});var iBt=s(xZ);Yjr=r(iBt,"FlaxT5ForConditionalGeneration"),iBt.forEach(t),Kjr=r(uDe," (T5 model)"),uDe.forEach(t),Zjr=i(we),T5=n(we,"LI",{});var bDe=s(T5);kEe=n(bDe,"STRONG",{});var dBt=s(kEe);eDr=r(dBt,"wav2vec2"),dBt.forEach(t),oDr=r(bDe," \u2014 "),$Z=n(bDe,"A",{href:!0});var cBt=s($Z);rDr=r(cBt,"FlaxWav2Vec2ForPreTraining"),cBt.forEach(t),tDr=r(bDe," (Wav2Vec2 model)"),bDe.forEach(t),aDr=i(we),M5=n(we,"LI",{});var vDe=s(M5);SEe=n(vDe,"STRONG",{});var fBt=s(SEe);nDr=r(fBt,"xlm-roberta"),fBt.forEach(t),sDr=r(vDe," \u2014 "),kZ=n(vDe,"A",{href:!0});var mBt=s(kZ);lDr=r(mBt,"FlaxXLMRobertaForMaskedLM"),mBt.forEach(t),iDr=r(vDe," (XLM-RoBERTa model)"),vDe.forEach(t),we.forEach(t),dDr=i(ti),T(E5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),gVe=i(f),Yc=n(f,"H2",{class:!0});var Mze=s(Yc);C5=n(Mze,"A",{id:!0,class:!0,href:!0});var gBt=s(C5);REe=n(gBt,"SPAN",{});var hBt=s(REe);T(zx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),cDr=i(Mze),PEe=n(Mze,"SPAN",{});var pBt=s(PEe);fDr=r(pBt,"FlaxAutoModelForMaskedLM"),pBt.forEach(t),Mze.forEach(t),hVe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Wx.$$.fragment,ai),mDr=i(ai),Kc=n(ai,"P",{});var Dre=s(Kc);gDr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SZ=n(Dre,"A",{href:!0});var _Bt=s(SZ);hDr=r(_Bt,"from_pretrained()"),_Bt.forEach(t),pDr=r(Dre," class method or the "),RZ=n(Dre,"A",{href:!0});var uBt=s(RZ);_Dr=r(uBt,"from_config()"),uBt.forEach(t),uDr=r(Dre,` class
method.`),Dre.forEach(t),bDr=i(ai),Qx=n(ai,"P",{});var Eze=s(Qx);vDr=r(Eze,"This class cannot be instantiated directly using "),BEe=n(Eze,"CODE",{});var bBt=s(BEe);FDr=r(bBt,"__init__()"),bBt.forEach(t),TDr=r(Eze," (throws an error)."),Eze.forEach(t),MDr=i(ai),Ht=n(ai,"DIV",{class:!0});var nA=s(Ht);T(Hx.$$.fragment,nA),EDr=i(nA),IEe=n(nA,"P",{});var vBt=s(IEe);CDr=r(vBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vBt.forEach(t),wDr=i(nA),Zc=n(nA,"P",{});var Gre=s(Zc);ADr=r(Gre,`Note:
Loading a model from its configuration file does `),NEe=n(Gre,"STRONG",{});var FBt=s(NEe);LDr=r(FBt,"not"),FBt.forEach(t),yDr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(Gre,"A",{href:!0});var TBt=s(PZ);xDr=r(TBt,"from_pretrained()"),TBt.forEach(t),$Dr=r(Gre," to load the model weights."),Gre.forEach(t),kDr=i(nA),T(w5.$$.fragment,nA),nA.forEach(t),SDr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(Ux.$$.fragment,ni),RDr=i(ni),qEe=n(ni,"P",{});var MBt=s(qEe);PDr=r(MBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MBt.forEach(t),BDr=i(ni),En=n(ni,"P",{});var sA=s(En);IDr=r(sA,"The model class to instantiate is selected based on the "),jEe=n(sA,"CODE",{});var EBt=s(jEe);NDr=r(EBt,"model_type"),EBt.forEach(t),qDr=r(sA,` property of the config object (either
passed as an argument or loaded from `),DEe=n(sA,"CODE",{});var CBt=s(DEe);jDr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),DDr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(sA,"CODE",{});var wBt=s(GEe);GDr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),ODr=r(sA,":"),sA.forEach(t),VDr=i(ni),$e=n(ni,"UL",{});var qe=s($e);A5=n(qe,"LI",{});var FDe=s(A5);OEe=n(FDe,"STRONG",{});var ABt=s(OEe);XDr=r(ABt,"albert"),ABt.forEach(t),zDr=r(FDe," \u2014 "),BZ=n(FDe,"A",{href:!0});var LBt=s(BZ);WDr=r(LBt,"FlaxAlbertForMaskedLM"),LBt.forEach(t),QDr=r(FDe," (ALBERT model)"),FDe.forEach(t),HDr=i(qe),L5=n(qe,"LI",{});var TDe=s(L5);VEe=n(TDe,"STRONG",{});var yBt=s(VEe);UDr=r(yBt,"bart"),yBt.forEach(t),JDr=r(TDe," \u2014 "),IZ=n(TDe,"A",{href:!0});var xBt=s(IZ);YDr=r(xBt,"FlaxBartForConditionalGeneration"),xBt.forEach(t),KDr=r(TDe," (BART model)"),TDe.forEach(t),ZDr=i(qe),y5=n(qe,"LI",{});var MDe=s(y5);XEe=n(MDe,"STRONG",{});var $Bt=s(XEe);eGr=r($Bt,"bert"),$Bt.forEach(t),oGr=r(MDe," \u2014 "),NZ=n(MDe,"A",{href:!0});var kBt=s(NZ);rGr=r(kBt,"FlaxBertForMaskedLM"),kBt.forEach(t),tGr=r(MDe," (BERT model)"),MDe.forEach(t),aGr=i(qe),x5=n(qe,"LI",{});var EDe=s(x5);zEe=n(EDe,"STRONG",{});var SBt=s(zEe);nGr=r(SBt,"big_bird"),SBt.forEach(t),sGr=r(EDe," \u2014 "),qZ=n(EDe,"A",{href:!0});var RBt=s(qZ);lGr=r(RBt,"FlaxBigBirdForMaskedLM"),RBt.forEach(t),iGr=r(EDe," (BigBird model)"),EDe.forEach(t),dGr=i(qe),$5=n(qe,"LI",{});var CDe=s($5);WEe=n(CDe,"STRONG",{});var PBt=s(WEe);cGr=r(PBt,"distilbert"),PBt.forEach(t),fGr=r(CDe," \u2014 "),jZ=n(CDe,"A",{href:!0});var BBt=s(jZ);mGr=r(BBt,"FlaxDistilBertForMaskedLM"),BBt.forEach(t),gGr=r(CDe," (DistilBERT model)"),CDe.forEach(t),hGr=i(qe),k5=n(qe,"LI",{});var wDe=s(k5);QEe=n(wDe,"STRONG",{});var IBt=s(QEe);pGr=r(IBt,"electra"),IBt.forEach(t),_Gr=r(wDe," \u2014 "),DZ=n(wDe,"A",{href:!0});var NBt=s(DZ);uGr=r(NBt,"FlaxElectraForMaskedLM"),NBt.forEach(t),bGr=r(wDe," (ELECTRA model)"),wDe.forEach(t),vGr=i(qe),S5=n(qe,"LI",{});var ADe=s(S5);HEe=n(ADe,"STRONG",{});var qBt=s(HEe);FGr=r(qBt,"mbart"),qBt.forEach(t),TGr=r(ADe," \u2014 "),GZ=n(ADe,"A",{href:!0});var jBt=s(GZ);MGr=r(jBt,"FlaxMBartForConditionalGeneration"),jBt.forEach(t),EGr=r(ADe," (mBART model)"),ADe.forEach(t),CGr=i(qe),R5=n(qe,"LI",{});var LDe=s(R5);UEe=n(LDe,"STRONG",{});var DBt=s(UEe);wGr=r(DBt,"roberta"),DBt.forEach(t),AGr=r(LDe," \u2014 "),OZ=n(LDe,"A",{href:!0});var GBt=s(OZ);LGr=r(GBt,"FlaxRobertaForMaskedLM"),GBt.forEach(t),yGr=r(LDe," (RoBERTa model)"),LDe.forEach(t),xGr=i(qe),P5=n(qe,"LI",{});var yDe=s(P5);JEe=n(yDe,"STRONG",{});var OBt=s(JEe);$Gr=r(OBt,"roformer"),OBt.forEach(t),kGr=r(yDe," \u2014 "),VZ=n(yDe,"A",{href:!0});var VBt=s(VZ);SGr=r(VBt,"FlaxRoFormerForMaskedLM"),VBt.forEach(t),RGr=r(yDe," (RoFormer model)"),yDe.forEach(t),PGr=i(qe),B5=n(qe,"LI",{});var xDe=s(B5);YEe=n(xDe,"STRONG",{});var XBt=s(YEe);BGr=r(XBt,"xlm-roberta"),XBt.forEach(t),IGr=r(xDe," \u2014 "),XZ=n(xDe,"A",{href:!0});var zBt=s(XZ);NGr=r(zBt,"FlaxXLMRobertaForMaskedLM"),zBt.forEach(t),qGr=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),qe.forEach(t),jGr=i(ni),T(I5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),pVe=i(f),ef=n(f,"H2",{class:!0});var Cze=s(ef);N5=n(Cze,"A",{id:!0,class:!0,href:!0});var WBt=s(N5);KEe=n(WBt,"SPAN",{});var QBt=s(KEe);T(Jx.$$.fragment,QBt),QBt.forEach(t),WBt.forEach(t),DGr=i(Cze),ZEe=n(Cze,"SPAN",{});var HBt=s(ZEe);GGr=r(HBt,"FlaxAutoModelForSeq2SeqLM"),HBt.forEach(t),Cze.forEach(t),_Ve=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(Yx.$$.fragment,si),OGr=i(si),of=n(si,"P",{});var Ore=s(of);VGr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zZ=n(Ore,"A",{href:!0});var UBt=s(zZ);XGr=r(UBt,"from_pretrained()"),UBt.forEach(t),zGr=r(Ore," class method or the "),WZ=n(Ore,"A",{href:!0});var JBt=s(WZ);WGr=r(JBt,"from_config()"),JBt.forEach(t),QGr=r(Ore,` class
method.`),Ore.forEach(t),HGr=i(si),Kx=n(si,"P",{});var wze=s(Kx);UGr=r(wze,"This class cannot be instantiated directly using "),eCe=n(wze,"CODE",{});var YBt=s(eCe);JGr=r(YBt,"__init__()"),YBt.forEach(t),YGr=r(wze," (throws an error)."),wze.forEach(t),KGr=i(si),Ut=n(si,"DIV",{class:!0});var lA=s(Ut);T(Zx.$$.fragment,lA),ZGr=i(lA),oCe=n(lA,"P",{});var KBt=s(oCe);eOr=r(KBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KBt.forEach(t),oOr=i(lA),rf=n(lA,"P",{});var Vre=s(rf);rOr=r(Vre,`Note:
Loading a model from its configuration file does `),rCe=n(Vre,"STRONG",{});var ZBt=s(rCe);tOr=r(ZBt,"not"),ZBt.forEach(t),aOr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QZ=n(Vre,"A",{href:!0});var eIt=s(QZ);nOr=r(eIt,"from_pretrained()"),eIt.forEach(t),sOr=r(Vre," to load the model weights."),Vre.forEach(t),lOr=i(lA),T(q5.$$.fragment,lA),lA.forEach(t),iOr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(e$.$$.fragment,li),dOr=i(li),tCe=n(li,"P",{});var oIt=s(tCe);cOr=r(oIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oIt.forEach(t),fOr=i(li),Cn=n(li,"P",{});var iA=s(Cn);mOr=r(iA,"The model class to instantiate is selected based on the "),aCe=n(iA,"CODE",{});var rIt=s(aCe);gOr=r(rIt,"model_type"),rIt.forEach(t),hOr=r(iA,` property of the config object (either
passed as an argument or loaded from `),nCe=n(iA,"CODE",{});var tIt=s(nCe);pOr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),_Or=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n(iA,"CODE",{});var aIt=s(sCe);uOr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),bOr=r(iA,":"),iA.forEach(t),vOr=i(li),ke=n(li,"UL",{});var je=s(ke);j5=n(je,"LI",{});var $De=s(j5);lCe=n($De,"STRONG",{});var nIt=s(lCe);FOr=r(nIt,"bart"),nIt.forEach(t),TOr=r($De," \u2014 "),HZ=n($De,"A",{href:!0});var sIt=s(HZ);MOr=r(sIt,"FlaxBartForConditionalGeneration"),sIt.forEach(t),EOr=r($De," (BART model)"),$De.forEach(t),COr=i(je),D5=n(je,"LI",{});var kDe=s(D5);iCe=n(kDe,"STRONG",{});var lIt=s(iCe);wOr=r(lIt,"blenderbot"),lIt.forEach(t),AOr=r(kDe," \u2014 "),UZ=n(kDe,"A",{href:!0});var iIt=s(UZ);LOr=r(iIt,"FlaxBlenderbotForConditionalGeneration"),iIt.forEach(t),yOr=r(kDe," (Blenderbot model)"),kDe.forEach(t),xOr=i(je),G5=n(je,"LI",{});var SDe=s(G5);dCe=n(SDe,"STRONG",{});var dIt=s(dCe);$Or=r(dIt,"blenderbot-small"),dIt.forEach(t),kOr=r(SDe," \u2014 "),JZ=n(SDe,"A",{href:!0});var cIt=s(JZ);SOr=r(cIt,"FlaxBlenderbotSmallForConditionalGeneration"),cIt.forEach(t),ROr=r(SDe," (BlenderbotSmall model)"),SDe.forEach(t),POr=i(je),O5=n(je,"LI",{});var RDe=s(O5);cCe=n(RDe,"STRONG",{});var fIt=s(cCe);BOr=r(fIt,"encoder-decoder"),fIt.forEach(t),IOr=r(RDe," \u2014 "),YZ=n(RDe,"A",{href:!0});var mIt=s(YZ);NOr=r(mIt,"FlaxEncoderDecoderModel"),mIt.forEach(t),qOr=r(RDe," (Encoder decoder model)"),RDe.forEach(t),jOr=i(je),V5=n(je,"LI",{});var PDe=s(V5);fCe=n(PDe,"STRONG",{});var gIt=s(fCe);DOr=r(gIt,"longt5"),gIt.forEach(t),GOr=r(PDe," \u2014 "),KZ=n(PDe,"A",{href:!0});var hIt=s(KZ);OOr=r(hIt,"FlaxLongT5ForConditionalGeneration"),hIt.forEach(t),VOr=r(PDe," (LongT5 model)"),PDe.forEach(t),XOr=i(je),X5=n(je,"LI",{});var BDe=s(X5);mCe=n(BDe,"STRONG",{});var pIt=s(mCe);zOr=r(pIt,"marian"),pIt.forEach(t),WOr=r(BDe," \u2014 "),ZZ=n(BDe,"A",{href:!0});var _It=s(ZZ);QOr=r(_It,"FlaxMarianMTModel"),_It.forEach(t),HOr=r(BDe," (Marian model)"),BDe.forEach(t),UOr=i(je),z5=n(je,"LI",{});var IDe=s(z5);gCe=n(IDe,"STRONG",{});var uIt=s(gCe);JOr=r(uIt,"mbart"),uIt.forEach(t),YOr=r(IDe," \u2014 "),eee=n(IDe,"A",{href:!0});var bIt=s(eee);KOr=r(bIt,"FlaxMBartForConditionalGeneration"),bIt.forEach(t),ZOr=r(IDe," (mBART model)"),IDe.forEach(t),eVr=i(je),W5=n(je,"LI",{});var NDe=s(W5);hCe=n(NDe,"STRONG",{});var vIt=s(hCe);oVr=r(vIt,"mt5"),vIt.forEach(t),rVr=r(NDe," \u2014 "),oee=n(NDe,"A",{href:!0});var FIt=s(oee);tVr=r(FIt,"FlaxMT5ForConditionalGeneration"),FIt.forEach(t),aVr=r(NDe," (MT5 model)"),NDe.forEach(t),nVr=i(je),Q5=n(je,"LI",{});var qDe=s(Q5);pCe=n(qDe,"STRONG",{});var TIt=s(pCe);sVr=r(TIt,"pegasus"),TIt.forEach(t),lVr=r(qDe," \u2014 "),ree=n(qDe,"A",{href:!0});var MIt=s(ree);iVr=r(MIt,"FlaxPegasusForConditionalGeneration"),MIt.forEach(t),dVr=r(qDe," (Pegasus model)"),qDe.forEach(t),cVr=i(je),H5=n(je,"LI",{});var jDe=s(H5);_Ce=n(jDe,"STRONG",{});var EIt=s(_Ce);fVr=r(EIt,"t5"),EIt.forEach(t),mVr=r(jDe," \u2014 "),tee=n(jDe,"A",{href:!0});var CIt=s(tee);gVr=r(CIt,"FlaxT5ForConditionalGeneration"),CIt.forEach(t),hVr=r(jDe," (T5 model)"),jDe.forEach(t),je.forEach(t),pVr=i(li),T(U5.$$.fragment,li),li.forEach(t),si.forEach(t),uVe=i(f),tf=n(f,"H2",{class:!0});var Aze=s(tf);J5=n(Aze,"A",{id:!0,class:!0,href:!0});var wIt=s(J5);uCe=n(wIt,"SPAN",{});var AIt=s(uCe);T(o$.$$.fragment,AIt),AIt.forEach(t),wIt.forEach(t),_Vr=i(Aze),bCe=n(Aze,"SPAN",{});var LIt=s(bCe);uVr=r(LIt,"FlaxAutoModelForSequenceClassification"),LIt.forEach(t),Aze.forEach(t),bVe=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(r$.$$.fragment,ii),bVr=i(ii),af=n(ii,"P",{});var Xre=s(af);vVr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aee=n(Xre,"A",{href:!0});var yIt=s(aee);FVr=r(yIt,"from_pretrained()"),yIt.forEach(t),TVr=r(Xre," class method or the "),nee=n(Xre,"A",{href:!0});var xIt=s(nee);MVr=r(xIt,"from_config()"),xIt.forEach(t),EVr=r(Xre,` class
method.`),Xre.forEach(t),CVr=i(ii),t$=n(ii,"P",{});var Lze=s(t$);wVr=r(Lze,"This class cannot be instantiated directly using "),vCe=n(Lze,"CODE",{});var $It=s(vCe);AVr=r($It,"__init__()"),$It.forEach(t),LVr=r(Lze," (throws an error)."),Lze.forEach(t),yVr=i(ii),Jt=n(ii,"DIV",{class:!0});var dA=s(Jt);T(a$.$$.fragment,dA),xVr=i(dA),FCe=n(dA,"P",{});var kIt=s(FCe);$Vr=r(kIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kIt.forEach(t),kVr=i(dA),nf=n(dA,"P",{});var zre=s(nf);SVr=r(zre,`Note:
Loading a model from its configuration file does `),TCe=n(zre,"STRONG",{});var SIt=s(TCe);RVr=r(SIt,"not"),SIt.forEach(t),PVr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),see=n(zre,"A",{href:!0});var RIt=s(see);BVr=r(RIt,"from_pretrained()"),RIt.forEach(t),IVr=r(zre," to load the model weights."),zre.forEach(t),NVr=i(dA),T(Y5.$$.fragment,dA),dA.forEach(t),qVr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(n$.$$.fragment,di),jVr=i(di),MCe=n(di,"P",{});var PIt=s(MCe);DVr=r(PIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PIt.forEach(t),GVr=i(di),wn=n(di,"P",{});var cA=s(wn);OVr=r(cA,"The model class to instantiate is selected based on the "),ECe=n(cA,"CODE",{});var BIt=s(ECe);VVr=r(BIt,"model_type"),BIt.forEach(t),XVr=r(cA,` property of the config object (either
passed as an argument or loaded from `),CCe=n(cA,"CODE",{});var IIt=s(CCe);zVr=r(IIt,"pretrained_model_name_or_path"),IIt.forEach(t),WVr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(cA,"CODE",{});var NIt=s(wCe);QVr=r(NIt,"pretrained_model_name_or_path"),NIt.forEach(t),HVr=r(cA,":"),cA.forEach(t),UVr=i(di),Se=n(di,"UL",{});var De=s(Se);K5=n(De,"LI",{});var DDe=s(K5);ACe=n(DDe,"STRONG",{});var qIt=s(ACe);JVr=r(qIt,"albert"),qIt.forEach(t),YVr=r(DDe," \u2014 "),lee=n(DDe,"A",{href:!0});var jIt=s(lee);KVr=r(jIt,"FlaxAlbertForSequenceClassification"),jIt.forEach(t),ZVr=r(DDe," (ALBERT model)"),DDe.forEach(t),eXr=i(De),Z5=n(De,"LI",{});var GDe=s(Z5);LCe=n(GDe,"STRONG",{});var DIt=s(LCe);oXr=r(DIt,"bart"),DIt.forEach(t),rXr=r(GDe," \u2014 "),iee=n(GDe,"A",{href:!0});var GIt=s(iee);tXr=r(GIt,"FlaxBartForSequenceClassification"),GIt.forEach(t),aXr=r(GDe," (BART model)"),GDe.forEach(t),nXr=i(De),e3=n(De,"LI",{});var ODe=s(e3);yCe=n(ODe,"STRONG",{});var OIt=s(yCe);sXr=r(OIt,"bert"),OIt.forEach(t),lXr=r(ODe," \u2014 "),dee=n(ODe,"A",{href:!0});var VIt=s(dee);iXr=r(VIt,"FlaxBertForSequenceClassification"),VIt.forEach(t),dXr=r(ODe," (BERT model)"),ODe.forEach(t),cXr=i(De),o3=n(De,"LI",{});var VDe=s(o3);xCe=n(VDe,"STRONG",{});var XIt=s(xCe);fXr=r(XIt,"big_bird"),XIt.forEach(t),mXr=r(VDe," \u2014 "),cee=n(VDe,"A",{href:!0});var zIt=s(cee);gXr=r(zIt,"FlaxBigBirdForSequenceClassification"),zIt.forEach(t),hXr=r(VDe," (BigBird model)"),VDe.forEach(t),pXr=i(De),r3=n(De,"LI",{});var XDe=s(r3);$Ce=n(XDe,"STRONG",{});var WIt=s($Ce);_Xr=r(WIt,"distilbert"),WIt.forEach(t),uXr=r(XDe," \u2014 "),fee=n(XDe,"A",{href:!0});var QIt=s(fee);bXr=r(QIt,"FlaxDistilBertForSequenceClassification"),QIt.forEach(t),vXr=r(XDe," (DistilBERT model)"),XDe.forEach(t),FXr=i(De),t3=n(De,"LI",{});var zDe=s(t3);kCe=n(zDe,"STRONG",{});var HIt=s(kCe);TXr=r(HIt,"electra"),HIt.forEach(t),MXr=r(zDe," \u2014 "),mee=n(zDe,"A",{href:!0});var UIt=s(mee);EXr=r(UIt,"FlaxElectraForSequenceClassification"),UIt.forEach(t),CXr=r(zDe," (ELECTRA model)"),zDe.forEach(t),wXr=i(De),a3=n(De,"LI",{});var WDe=s(a3);SCe=n(WDe,"STRONG",{});var JIt=s(SCe);AXr=r(JIt,"mbart"),JIt.forEach(t),LXr=r(WDe," \u2014 "),gee=n(WDe,"A",{href:!0});var YIt=s(gee);yXr=r(YIt,"FlaxMBartForSequenceClassification"),YIt.forEach(t),xXr=r(WDe," (mBART model)"),WDe.forEach(t),$Xr=i(De),n3=n(De,"LI",{});var QDe=s(n3);RCe=n(QDe,"STRONG",{});var KIt=s(RCe);kXr=r(KIt,"roberta"),KIt.forEach(t),SXr=r(QDe," \u2014 "),hee=n(QDe,"A",{href:!0});var ZIt=s(hee);RXr=r(ZIt,"FlaxRobertaForSequenceClassification"),ZIt.forEach(t),PXr=r(QDe," (RoBERTa model)"),QDe.forEach(t),BXr=i(De),s3=n(De,"LI",{});var HDe=s(s3);PCe=n(HDe,"STRONG",{});var eNt=s(PCe);IXr=r(eNt,"roformer"),eNt.forEach(t),NXr=r(HDe," \u2014 "),pee=n(HDe,"A",{href:!0});var oNt=s(pee);qXr=r(oNt,"FlaxRoFormerForSequenceClassification"),oNt.forEach(t),jXr=r(HDe," (RoFormer model)"),HDe.forEach(t),DXr=i(De),l3=n(De,"LI",{});var UDe=s(l3);BCe=n(UDe,"STRONG",{});var rNt=s(BCe);GXr=r(rNt,"xlm-roberta"),rNt.forEach(t),OXr=r(UDe," \u2014 "),_ee=n(UDe,"A",{href:!0});var tNt=s(_ee);VXr=r(tNt,"FlaxXLMRobertaForSequenceClassification"),tNt.forEach(t),XXr=r(UDe," (XLM-RoBERTa model)"),UDe.forEach(t),De.forEach(t),zXr=i(di),T(i3.$$.fragment,di),di.forEach(t),ii.forEach(t),vVe=i(f),sf=n(f,"H2",{class:!0});var yze=s(sf);d3=n(yze,"A",{id:!0,class:!0,href:!0});var aNt=s(d3);ICe=n(aNt,"SPAN",{});var nNt=s(ICe);T(s$.$$.fragment,nNt),nNt.forEach(t),aNt.forEach(t),WXr=i(yze),NCe=n(yze,"SPAN",{});var sNt=s(NCe);QXr=r(sNt,"FlaxAutoModelForQuestionAnswering"),sNt.forEach(t),yze.forEach(t),FVe=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(l$.$$.fragment,ci),HXr=i(ci),lf=n(ci,"P",{});var Wre=s(lf);UXr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uee=n(Wre,"A",{href:!0});var lNt=s(uee);JXr=r(lNt,"from_pretrained()"),lNt.forEach(t),YXr=r(Wre," class method or the "),bee=n(Wre,"A",{href:!0});var iNt=s(bee);KXr=r(iNt,"from_config()"),iNt.forEach(t),ZXr=r(Wre,` class
method.`),Wre.forEach(t),ezr=i(ci),i$=n(ci,"P",{});var xze=s(i$);ozr=r(xze,"This class cannot be instantiated directly using "),qCe=n(xze,"CODE",{});var dNt=s(qCe);rzr=r(dNt,"__init__()"),dNt.forEach(t),tzr=r(xze," (throws an error)."),xze.forEach(t),azr=i(ci),Yt=n(ci,"DIV",{class:!0});var fA=s(Yt);T(d$.$$.fragment,fA),nzr=i(fA),jCe=n(fA,"P",{});var cNt=s(jCe);szr=r(cNt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cNt.forEach(t),lzr=i(fA),df=n(fA,"P",{});var Qre=s(df);izr=r(Qre,`Note:
Loading a model from its configuration file does `),DCe=n(Qre,"STRONG",{});var fNt=s(DCe);dzr=r(fNt,"not"),fNt.forEach(t),czr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=n(Qre,"A",{href:!0});var mNt=s(vee);fzr=r(mNt,"from_pretrained()"),mNt.forEach(t),mzr=r(Qre," to load the model weights."),Qre.forEach(t),gzr=i(fA),T(c3.$$.fragment,fA),fA.forEach(t),hzr=i(ci),Qr=n(ci,"DIV",{class:!0});var fi=s(Qr);T(c$.$$.fragment,fi),pzr=i(fi),GCe=n(fi,"P",{});var gNt=s(GCe);_zr=r(gNt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gNt.forEach(t),uzr=i(fi),An=n(fi,"P",{});var mA=s(An);bzr=r(mA,"The model class to instantiate is selected based on the "),OCe=n(mA,"CODE",{});var hNt=s(OCe);vzr=r(hNt,"model_type"),hNt.forEach(t),Fzr=r(mA,` property of the config object (either
passed as an argument or loaded from `),VCe=n(mA,"CODE",{});var pNt=s(VCe);Tzr=r(pNt,"pretrained_model_name_or_path"),pNt.forEach(t),Mzr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(mA,"CODE",{});var _Nt=s(XCe);Ezr=r(_Nt,"pretrained_model_name_or_path"),_Nt.forEach(t),Czr=r(mA,":"),mA.forEach(t),wzr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);f3=n(Ge,"LI",{});var JDe=s(f3);zCe=n(JDe,"STRONG",{});var uNt=s(zCe);Azr=r(uNt,"albert"),uNt.forEach(t),Lzr=r(JDe," \u2014 "),Fee=n(JDe,"A",{href:!0});var bNt=s(Fee);yzr=r(bNt,"FlaxAlbertForQuestionAnswering"),bNt.forEach(t),xzr=r(JDe," (ALBERT model)"),JDe.forEach(t),$zr=i(Ge),m3=n(Ge,"LI",{});var YDe=s(m3);WCe=n(YDe,"STRONG",{});var vNt=s(WCe);kzr=r(vNt,"bart"),vNt.forEach(t),Szr=r(YDe," \u2014 "),Tee=n(YDe,"A",{href:!0});var FNt=s(Tee);Rzr=r(FNt,"FlaxBartForQuestionAnswering"),FNt.forEach(t),Pzr=r(YDe," (BART model)"),YDe.forEach(t),Bzr=i(Ge),g3=n(Ge,"LI",{});var KDe=s(g3);QCe=n(KDe,"STRONG",{});var TNt=s(QCe);Izr=r(TNt,"bert"),TNt.forEach(t),Nzr=r(KDe," \u2014 "),Mee=n(KDe,"A",{href:!0});var MNt=s(Mee);qzr=r(MNt,"FlaxBertForQuestionAnswering"),MNt.forEach(t),jzr=r(KDe," (BERT model)"),KDe.forEach(t),Dzr=i(Ge),h3=n(Ge,"LI",{});var ZDe=s(h3);HCe=n(ZDe,"STRONG",{});var ENt=s(HCe);Gzr=r(ENt,"big_bird"),ENt.forEach(t),Ozr=r(ZDe," \u2014 "),Eee=n(ZDe,"A",{href:!0});var CNt=s(Eee);Vzr=r(CNt,"FlaxBigBirdForQuestionAnswering"),CNt.forEach(t),Xzr=r(ZDe," (BigBird model)"),ZDe.forEach(t),zzr=i(Ge),p3=n(Ge,"LI",{});var eGe=s(p3);UCe=n(eGe,"STRONG",{});var wNt=s(UCe);Wzr=r(wNt,"distilbert"),wNt.forEach(t),Qzr=r(eGe," \u2014 "),Cee=n(eGe,"A",{href:!0});var ANt=s(Cee);Hzr=r(ANt,"FlaxDistilBertForQuestionAnswering"),ANt.forEach(t),Uzr=r(eGe," (DistilBERT model)"),eGe.forEach(t),Jzr=i(Ge),_3=n(Ge,"LI",{});var oGe=s(_3);JCe=n(oGe,"STRONG",{});var LNt=s(JCe);Yzr=r(LNt,"electra"),LNt.forEach(t),Kzr=r(oGe," \u2014 "),wee=n(oGe,"A",{href:!0});var yNt=s(wee);Zzr=r(yNt,"FlaxElectraForQuestionAnswering"),yNt.forEach(t),eWr=r(oGe," (ELECTRA model)"),oGe.forEach(t),oWr=i(Ge),u3=n(Ge,"LI",{});var rGe=s(u3);YCe=n(rGe,"STRONG",{});var xNt=s(YCe);rWr=r(xNt,"mbart"),xNt.forEach(t),tWr=r(rGe," \u2014 "),Aee=n(rGe,"A",{href:!0});var $Nt=s(Aee);aWr=r($Nt,"FlaxMBartForQuestionAnswering"),$Nt.forEach(t),nWr=r(rGe," (mBART model)"),rGe.forEach(t),sWr=i(Ge),b3=n(Ge,"LI",{});var tGe=s(b3);KCe=n(tGe,"STRONG",{});var kNt=s(KCe);lWr=r(kNt,"roberta"),kNt.forEach(t),iWr=r(tGe," \u2014 "),Lee=n(tGe,"A",{href:!0});var SNt=s(Lee);dWr=r(SNt,"FlaxRobertaForQuestionAnswering"),SNt.forEach(t),cWr=r(tGe," (RoBERTa model)"),tGe.forEach(t),fWr=i(Ge),v3=n(Ge,"LI",{});var aGe=s(v3);ZCe=n(aGe,"STRONG",{});var RNt=s(ZCe);mWr=r(RNt,"roformer"),RNt.forEach(t),gWr=r(aGe," \u2014 "),yee=n(aGe,"A",{href:!0});var PNt=s(yee);hWr=r(PNt,"FlaxRoFormerForQuestionAnswering"),PNt.forEach(t),pWr=r(aGe," (RoFormer model)"),aGe.forEach(t),_Wr=i(Ge),F3=n(Ge,"LI",{});var nGe=s(F3);e5e=n(nGe,"STRONG",{});var BNt=s(e5e);uWr=r(BNt,"xlm-roberta"),BNt.forEach(t),bWr=r(nGe," \u2014 "),xee=n(nGe,"A",{href:!0});var INt=s(xee);vWr=r(INt,"FlaxXLMRobertaForQuestionAnswering"),INt.forEach(t),FWr=r(nGe," (XLM-RoBERTa model)"),nGe.forEach(t),Ge.forEach(t),TWr=i(fi),T(T3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),TVe=i(f),cf=n(f,"H2",{class:!0});var $ze=s(cf);M3=n($ze,"A",{id:!0,class:!0,href:!0});var NNt=s(M3);o5e=n(NNt,"SPAN",{});var qNt=s(o5e);T(f$.$$.fragment,qNt),qNt.forEach(t),NNt.forEach(t),MWr=i($ze),r5e=n($ze,"SPAN",{});var jNt=s(r5e);EWr=r(jNt,"FlaxAutoModelForTokenClassification"),jNt.forEach(t),$ze.forEach(t),MVe=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(m$.$$.fragment,mi),CWr=i(mi),ff=n(mi,"P",{});var Hre=s(ff);wWr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$ee=n(Hre,"A",{href:!0});var DNt=s($ee);AWr=r(DNt,"from_pretrained()"),DNt.forEach(t),LWr=r(Hre," class method or the "),kee=n(Hre,"A",{href:!0});var GNt=s(kee);yWr=r(GNt,"from_config()"),GNt.forEach(t),xWr=r(Hre,` class
method.`),Hre.forEach(t),$Wr=i(mi),g$=n(mi,"P",{});var kze=s(g$);kWr=r(kze,"This class cannot be instantiated directly using "),t5e=n(kze,"CODE",{});var ONt=s(t5e);SWr=r(ONt,"__init__()"),ONt.forEach(t),RWr=r(kze," (throws an error)."),kze.forEach(t),PWr=i(mi),Kt=n(mi,"DIV",{class:!0});var gA=s(Kt);T(h$.$$.fragment,gA),BWr=i(gA),a5e=n(gA,"P",{});var VNt=s(a5e);IWr=r(VNt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VNt.forEach(t),NWr=i(gA),mf=n(gA,"P",{});var Ure=s(mf);qWr=r(Ure,`Note:
Loading a model from its configuration file does `),n5e=n(Ure,"STRONG",{});var XNt=s(n5e);jWr=r(XNt,"not"),XNt.forEach(t),DWr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(Ure,"A",{href:!0});var zNt=s(See);GWr=r(zNt,"from_pretrained()"),zNt.forEach(t),OWr=r(Ure," to load the model weights."),Ure.forEach(t),VWr=i(gA),T(E3.$$.fragment,gA),gA.forEach(t),XWr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(p$.$$.fragment,gi),zWr=i(gi),s5e=n(gi,"P",{});var WNt=s(s5e);WWr=r(WNt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WNt.forEach(t),QWr=i(gi),Ln=n(gi,"P",{});var hA=s(Ln);HWr=r(hA,"The model class to instantiate is selected based on the "),l5e=n(hA,"CODE",{});var QNt=s(l5e);UWr=r(QNt,"model_type"),QNt.forEach(t),JWr=r(hA,` property of the config object (either
passed as an argument or loaded from `),i5e=n(hA,"CODE",{});var HNt=s(i5e);YWr=r(HNt,"pretrained_model_name_or_path"),HNt.forEach(t),KWr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(hA,"CODE",{});var UNt=s(d5e);ZWr=r(UNt,"pretrained_model_name_or_path"),UNt.forEach(t),eQr=r(hA,":"),hA.forEach(t),oQr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);C3=n(To,"LI",{});var sGe=s(C3);c5e=n(sGe,"STRONG",{});var JNt=s(c5e);rQr=r(JNt,"albert"),JNt.forEach(t),tQr=r(sGe," \u2014 "),Ree=n(sGe,"A",{href:!0});var YNt=s(Ree);aQr=r(YNt,"FlaxAlbertForTokenClassification"),YNt.forEach(t),nQr=r(sGe," (ALBERT model)"),sGe.forEach(t),sQr=i(To),w3=n(To,"LI",{});var lGe=s(w3);f5e=n(lGe,"STRONG",{});var KNt=s(f5e);lQr=r(KNt,"bert"),KNt.forEach(t),iQr=r(lGe," \u2014 "),Pee=n(lGe,"A",{href:!0});var ZNt=s(Pee);dQr=r(ZNt,"FlaxBertForTokenClassification"),ZNt.forEach(t),cQr=r(lGe," (BERT model)"),lGe.forEach(t),fQr=i(To),A3=n(To,"LI",{});var iGe=s(A3);m5e=n(iGe,"STRONG",{});var eqt=s(m5e);mQr=r(eqt,"big_bird"),eqt.forEach(t),gQr=r(iGe," \u2014 "),Bee=n(iGe,"A",{href:!0});var oqt=s(Bee);hQr=r(oqt,"FlaxBigBirdForTokenClassification"),oqt.forEach(t),pQr=r(iGe," (BigBird model)"),iGe.forEach(t),_Qr=i(To),L3=n(To,"LI",{});var dGe=s(L3);g5e=n(dGe,"STRONG",{});var rqt=s(g5e);uQr=r(rqt,"distilbert"),rqt.forEach(t),bQr=r(dGe," \u2014 "),Iee=n(dGe,"A",{href:!0});var tqt=s(Iee);vQr=r(tqt,"FlaxDistilBertForTokenClassification"),tqt.forEach(t),FQr=r(dGe," (DistilBERT model)"),dGe.forEach(t),TQr=i(To),y3=n(To,"LI",{});var cGe=s(y3);h5e=n(cGe,"STRONG",{});var aqt=s(h5e);MQr=r(aqt,"electra"),aqt.forEach(t),EQr=r(cGe," \u2014 "),Nee=n(cGe,"A",{href:!0});var nqt=s(Nee);CQr=r(nqt,"FlaxElectraForTokenClassification"),nqt.forEach(t),wQr=r(cGe," (ELECTRA model)"),cGe.forEach(t),AQr=i(To),x3=n(To,"LI",{});var fGe=s(x3);p5e=n(fGe,"STRONG",{});var sqt=s(p5e);LQr=r(sqt,"roberta"),sqt.forEach(t),yQr=r(fGe," \u2014 "),qee=n(fGe,"A",{href:!0});var lqt=s(qee);xQr=r(lqt,"FlaxRobertaForTokenClassification"),lqt.forEach(t),$Qr=r(fGe," (RoBERTa model)"),fGe.forEach(t),kQr=i(To),$3=n(To,"LI",{});var mGe=s($3);_5e=n(mGe,"STRONG",{});var iqt=s(_5e);SQr=r(iqt,"roformer"),iqt.forEach(t),RQr=r(mGe," \u2014 "),jee=n(mGe,"A",{href:!0});var dqt=s(jee);PQr=r(dqt,"FlaxRoFormerForTokenClassification"),dqt.forEach(t),BQr=r(mGe," (RoFormer model)"),mGe.forEach(t),IQr=i(To),k3=n(To,"LI",{});var gGe=s(k3);u5e=n(gGe,"STRONG",{});var cqt=s(u5e);NQr=r(cqt,"xlm-roberta"),cqt.forEach(t),qQr=r(gGe," \u2014 "),Dee=n(gGe,"A",{href:!0});var fqt=s(Dee);jQr=r(fqt,"FlaxXLMRobertaForTokenClassification"),fqt.forEach(t),DQr=r(gGe," (XLM-RoBERTa model)"),gGe.forEach(t),To.forEach(t),GQr=i(gi),T(S3.$$.fragment,gi),gi.forEach(t),mi.forEach(t),EVe=i(f),gf=n(f,"H2",{class:!0});var Sze=s(gf);R3=n(Sze,"A",{id:!0,class:!0,href:!0});var mqt=s(R3);b5e=n(mqt,"SPAN",{});var gqt=s(b5e);T(_$.$$.fragment,gqt),gqt.forEach(t),mqt.forEach(t),OQr=i(Sze),v5e=n(Sze,"SPAN",{});var hqt=s(v5e);VQr=r(hqt,"FlaxAutoModelForMultipleChoice"),hqt.forEach(t),Sze.forEach(t),CVe=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(u$.$$.fragment,hi),XQr=i(hi),hf=n(hi,"P",{});var Jre=s(hf);zQr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Gee=n(Jre,"A",{href:!0});var pqt=s(Gee);WQr=r(pqt,"from_pretrained()"),pqt.forEach(t),QQr=r(Jre," class method or the "),Oee=n(Jre,"A",{href:!0});var _qt=s(Oee);HQr=r(_qt,"from_config()"),_qt.forEach(t),UQr=r(Jre,` class
method.`),Jre.forEach(t),JQr=i(hi),b$=n(hi,"P",{});var Rze=s(b$);YQr=r(Rze,"This class cannot be instantiated directly using "),F5e=n(Rze,"CODE",{});var uqt=s(F5e);KQr=r(uqt,"__init__()"),uqt.forEach(t),ZQr=r(Rze," (throws an error)."),Rze.forEach(t),eHr=i(hi),Zt=n(hi,"DIV",{class:!0});var pA=s(Zt);T(v$.$$.fragment,pA),oHr=i(pA),T5e=n(pA,"P",{});var bqt=s(T5e);rHr=r(bqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bqt.forEach(t),tHr=i(pA),pf=n(pA,"P",{});var Yre=s(pf);aHr=r(Yre,`Note:
Loading a model from its configuration file does `),M5e=n(Yre,"STRONG",{});var vqt=s(M5e);nHr=r(vqt,"not"),vqt.forEach(t),sHr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Yre,"A",{href:!0});var Fqt=s(Vee);lHr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),iHr=r(Yre," to load the model weights."),Yre.forEach(t),dHr=i(pA),T(P3.$$.fragment,pA),pA.forEach(t),cHr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(F$.$$.fragment,pi),fHr=i(pi),E5e=n(pi,"P",{});var Tqt=s(E5e);mHr=r(Tqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tqt.forEach(t),gHr=i(pi),yn=n(pi,"P",{});var _A=s(yn);hHr=r(_A,"The model class to instantiate is selected based on the "),C5e=n(_A,"CODE",{});var Mqt=s(C5e);pHr=r(Mqt,"model_type"),Mqt.forEach(t),_Hr=r(_A,` property of the config object (either
passed as an argument or loaded from `),w5e=n(_A,"CODE",{});var Eqt=s(w5e);uHr=r(Eqt,"pretrained_model_name_or_path"),Eqt.forEach(t),bHr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A5e=n(_A,"CODE",{});var Cqt=s(A5e);vHr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),FHr=r(_A,":"),_A.forEach(t),THr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);B3=n(Mo,"LI",{});var hGe=s(B3);L5e=n(hGe,"STRONG",{});var wqt=s(L5e);MHr=r(wqt,"albert"),wqt.forEach(t),EHr=r(hGe," \u2014 "),Xee=n(hGe,"A",{href:!0});var Aqt=s(Xee);CHr=r(Aqt,"FlaxAlbertForMultipleChoice"),Aqt.forEach(t),wHr=r(hGe," (ALBERT model)"),hGe.forEach(t),AHr=i(Mo),I3=n(Mo,"LI",{});var pGe=s(I3);y5e=n(pGe,"STRONG",{});var Lqt=s(y5e);LHr=r(Lqt,"bert"),Lqt.forEach(t),yHr=r(pGe," \u2014 "),zee=n(pGe,"A",{href:!0});var yqt=s(zee);xHr=r(yqt,"FlaxBertForMultipleChoice"),yqt.forEach(t),$Hr=r(pGe," (BERT model)"),pGe.forEach(t),kHr=i(Mo),N3=n(Mo,"LI",{});var _Ge=s(N3);x5e=n(_Ge,"STRONG",{});var xqt=s(x5e);SHr=r(xqt,"big_bird"),xqt.forEach(t),RHr=r(_Ge," \u2014 "),Wee=n(_Ge,"A",{href:!0});var $qt=s(Wee);PHr=r($qt,"FlaxBigBirdForMultipleChoice"),$qt.forEach(t),BHr=r(_Ge," (BigBird model)"),_Ge.forEach(t),IHr=i(Mo),q3=n(Mo,"LI",{});var uGe=s(q3);$5e=n(uGe,"STRONG",{});var kqt=s($5e);NHr=r(kqt,"distilbert"),kqt.forEach(t),qHr=r(uGe," \u2014 "),Qee=n(uGe,"A",{href:!0});var Sqt=s(Qee);jHr=r(Sqt,"FlaxDistilBertForMultipleChoice"),Sqt.forEach(t),DHr=r(uGe," (DistilBERT model)"),uGe.forEach(t),GHr=i(Mo),j3=n(Mo,"LI",{});var bGe=s(j3);k5e=n(bGe,"STRONG",{});var Rqt=s(k5e);OHr=r(Rqt,"electra"),Rqt.forEach(t),VHr=r(bGe," \u2014 "),Hee=n(bGe,"A",{href:!0});var Pqt=s(Hee);XHr=r(Pqt,"FlaxElectraForMultipleChoice"),Pqt.forEach(t),zHr=r(bGe," (ELECTRA model)"),bGe.forEach(t),WHr=i(Mo),D3=n(Mo,"LI",{});var vGe=s(D3);S5e=n(vGe,"STRONG",{});var Bqt=s(S5e);QHr=r(Bqt,"roberta"),Bqt.forEach(t),HHr=r(vGe," \u2014 "),Uee=n(vGe,"A",{href:!0});var Iqt=s(Uee);UHr=r(Iqt,"FlaxRobertaForMultipleChoice"),Iqt.forEach(t),JHr=r(vGe," (RoBERTa model)"),vGe.forEach(t),YHr=i(Mo),G3=n(Mo,"LI",{});var FGe=s(G3);R5e=n(FGe,"STRONG",{});var Nqt=s(R5e);KHr=r(Nqt,"roformer"),Nqt.forEach(t),ZHr=r(FGe," \u2014 "),Jee=n(FGe,"A",{href:!0});var qqt=s(Jee);eUr=r(qqt,"FlaxRoFormerForMultipleChoice"),qqt.forEach(t),oUr=r(FGe," (RoFormer model)"),FGe.forEach(t),rUr=i(Mo),O3=n(Mo,"LI",{});var TGe=s(O3);P5e=n(TGe,"STRONG",{});var jqt=s(P5e);tUr=r(jqt,"xlm-roberta"),jqt.forEach(t),aUr=r(TGe," \u2014 "),Yee=n(TGe,"A",{href:!0});var Dqt=s(Yee);nUr=r(Dqt,"FlaxXLMRobertaForMultipleChoice"),Dqt.forEach(t),sUr=r(TGe," (XLM-RoBERTa model)"),TGe.forEach(t),Mo.forEach(t),lUr=i(pi),T(V3.$$.fragment,pi),pi.forEach(t),hi.forEach(t),wVe=i(f),_f=n(f,"H2",{class:!0});var Pze=s(_f);X3=n(Pze,"A",{id:!0,class:!0,href:!0});var Gqt=s(X3);B5e=n(Gqt,"SPAN",{});var Oqt=s(B5e);T(T$.$$.fragment,Oqt),Oqt.forEach(t),Gqt.forEach(t),iUr=i(Pze),I5e=n(Pze,"SPAN",{});var Vqt=s(I5e);dUr=r(Vqt,"FlaxAutoModelForNextSentencePrediction"),Vqt.forEach(t),Pze.forEach(t),AVe=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(M$.$$.fragment,_i),cUr=i(_i),uf=n(_i,"P",{});var Kre=s(uf);fUr=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=n(Kre,"A",{href:!0});var Xqt=s(Kee);mUr=r(Xqt,"from_pretrained()"),Xqt.forEach(t),gUr=r(Kre," class method or the "),Zee=n(Kre,"A",{href:!0});var zqt=s(Zee);hUr=r(zqt,"from_config()"),zqt.forEach(t),pUr=r(Kre,` class
method.`),Kre.forEach(t),_Ur=i(_i),E$=n(_i,"P",{});var Bze=s(E$);uUr=r(Bze,"This class cannot be instantiated directly using "),N5e=n(Bze,"CODE",{});var Wqt=s(N5e);bUr=r(Wqt,"__init__()"),Wqt.forEach(t),vUr=r(Bze," (throws an error)."),Bze.forEach(t),FUr=i(_i),ea=n(_i,"DIV",{class:!0});var uA=s(ea);T(C$.$$.fragment,uA),TUr=i(uA),q5e=n(uA,"P",{});var Qqt=s(q5e);MUr=r(Qqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qqt.forEach(t),EUr=i(uA),bf=n(uA,"P",{});var Zre=s(bf);CUr=r(Zre,`Note:
Loading a model from its configuration file does `),j5e=n(Zre,"STRONG",{});var Hqt=s(j5e);wUr=r(Hqt,"not"),Hqt.forEach(t),AUr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(Zre,"A",{href:!0});var Uqt=s(eoe);LUr=r(Uqt,"from_pretrained()"),Uqt.forEach(t),yUr=r(Zre," to load the model weights."),Zre.forEach(t),xUr=i(uA),T(z3.$$.fragment,uA),uA.forEach(t),$Ur=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(w$.$$.fragment,ui),kUr=i(ui),D5e=n(ui,"P",{});var Jqt=s(D5e);SUr=r(Jqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jqt.forEach(t),RUr=i(ui),xn=n(ui,"P",{});var bA=s(xn);PUr=r(bA,"The model class to instantiate is selected based on the "),G5e=n(bA,"CODE",{});var Yqt=s(G5e);BUr=r(Yqt,"model_type"),Yqt.forEach(t),IUr=r(bA,` property of the config object (either
passed as an argument or loaded from `),O5e=n(bA,"CODE",{});var Kqt=s(O5e);NUr=r(Kqt,"pretrained_model_name_or_path"),Kqt.forEach(t),qUr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(bA,"CODE",{});var Zqt=s(V5e);jUr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),DUr=r(bA,":"),bA.forEach(t),GUr=i(ui),X5e=n(ui,"UL",{});var ejt=s(X5e);W3=n(ejt,"LI",{});var MGe=s(W3);z5e=n(MGe,"STRONG",{});var ojt=s(z5e);OUr=r(ojt,"bert"),ojt.forEach(t),VUr=r(MGe," \u2014 "),ooe=n(MGe,"A",{href:!0});var rjt=s(ooe);XUr=r(rjt,"FlaxBertForNextSentencePrediction"),rjt.forEach(t),zUr=r(MGe," (BERT model)"),MGe.forEach(t),ejt.forEach(t),WUr=i(ui),T(Q3.$$.fragment,ui),ui.forEach(t),_i.forEach(t),LVe=i(f),vf=n(f,"H2",{class:!0});var Ize=s(vf);H3=n(Ize,"A",{id:!0,class:!0,href:!0});var tjt=s(H3);W5e=n(tjt,"SPAN",{});var ajt=s(W5e);T(A$.$$.fragment,ajt),ajt.forEach(t),tjt.forEach(t),QUr=i(Ize),Q5e=n(Ize,"SPAN",{});var njt=s(Q5e);HUr=r(njt,"FlaxAutoModelForImageClassification"),njt.forEach(t),Ize.forEach(t),yVe=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(L$.$$.fragment,bi),UUr=i(bi),Ff=n(bi,"P",{});var ete=s(Ff);JUr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),roe=n(ete,"A",{href:!0});var sjt=s(roe);YUr=r(sjt,"from_pretrained()"),sjt.forEach(t),KUr=r(ete," class method or the "),toe=n(ete,"A",{href:!0});var ljt=s(toe);ZUr=r(ljt,"from_config()"),ljt.forEach(t),eJr=r(ete,` class
method.`),ete.forEach(t),oJr=i(bi),y$=n(bi,"P",{});var Nze=s(y$);rJr=r(Nze,"This class cannot be instantiated directly using "),H5e=n(Nze,"CODE",{});var ijt=s(H5e);tJr=r(ijt,"__init__()"),ijt.forEach(t),aJr=r(Nze," (throws an error)."),Nze.forEach(t),nJr=i(bi),oa=n(bi,"DIV",{class:!0});var vA=s(oa);T(x$.$$.fragment,vA),sJr=i(vA),U5e=n(vA,"P",{});var djt=s(U5e);lJr=r(djt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),djt.forEach(t),iJr=i(vA),Tf=n(vA,"P",{});var ote=s(Tf);dJr=r(ote,`Note:
Loading a model from its configuration file does `),J5e=n(ote,"STRONG",{});var cjt=s(J5e);cJr=r(cjt,"not"),cjt.forEach(t),fJr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=n(ote,"A",{href:!0});var fjt=s(aoe);mJr=r(fjt,"from_pretrained()"),fjt.forEach(t),gJr=r(ote," to load the model weights."),ote.forEach(t),hJr=i(vA),T(U3.$$.fragment,vA),vA.forEach(t),pJr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T($$.$$.fragment,vi),_Jr=i(vi),Y5e=n(vi,"P",{});var mjt=s(Y5e);uJr=r(mjt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mjt.forEach(t),bJr=i(vi),$n=n(vi,"P",{});var FA=s($n);vJr=r(FA,"The model class to instantiate is selected based on the "),K5e=n(FA,"CODE",{});var gjt=s(K5e);FJr=r(gjt,"model_type"),gjt.forEach(t),TJr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(FA,"CODE",{});var hjt=s(Z5e);MJr=r(hjt,"pretrained_model_name_or_path"),hjt.forEach(t),EJr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(FA,"CODE",{});var pjt=s(e3e);CJr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),wJr=r(FA,":"),FA.forEach(t),AJr=i(vi),k$=n(vi,"UL",{});var qze=s(k$);J3=n(qze,"LI",{});var EGe=s(J3);o3e=n(EGe,"STRONG",{});var _jt=s(o3e);LJr=r(_jt,"beit"),_jt.forEach(t),yJr=r(EGe," \u2014 "),noe=n(EGe,"A",{href:!0});var ujt=s(noe);xJr=r(ujt,"FlaxBeitForImageClassification"),ujt.forEach(t),$Jr=r(EGe," (BEiT model)"),EGe.forEach(t),kJr=i(qze),Y3=n(qze,"LI",{});var CGe=s(Y3);r3e=n(CGe,"STRONG",{});var bjt=s(r3e);SJr=r(bjt,"vit"),bjt.forEach(t),RJr=r(CGe," \u2014 "),soe=n(CGe,"A",{href:!0});var vjt=s(soe);PJr=r(vjt,"FlaxViTForImageClassification"),vjt.forEach(t),BJr=r(CGe," (ViT model)"),CGe.forEach(t),qze.forEach(t),IJr=i(vi),T(K3.$$.fragment,vi),vi.forEach(t),bi.forEach(t),xVe=i(f),Mf=n(f,"H2",{class:!0});var jze=s(Mf);Z3=n(jze,"A",{id:!0,class:!0,href:!0});var Fjt=s(Z3);t3e=n(Fjt,"SPAN",{});var Tjt=s(t3e);T(S$.$$.fragment,Tjt),Tjt.forEach(t),Fjt.forEach(t),NJr=i(jze),a3e=n(jze,"SPAN",{});var Mjt=s(a3e);qJr=r(Mjt,"FlaxAutoModelForVision2Seq"),Mjt.forEach(t),jze.forEach(t),$Ve=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(R$.$$.fragment,Fi),jJr=i(Fi),Ef=n(Fi,"P",{});var rte=s(Ef);DJr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),loe=n(rte,"A",{href:!0});var Ejt=s(loe);GJr=r(Ejt,"from_pretrained()"),Ejt.forEach(t),OJr=r(rte," class method or the "),ioe=n(rte,"A",{href:!0});var Cjt=s(ioe);VJr=r(Cjt,"from_config()"),Cjt.forEach(t),XJr=r(rte,` class
method.`),rte.forEach(t),zJr=i(Fi),P$=n(Fi,"P",{});var Dze=s(P$);WJr=r(Dze,"This class cannot be instantiated directly using "),n3e=n(Dze,"CODE",{});var wjt=s(n3e);QJr=r(wjt,"__init__()"),wjt.forEach(t),HJr=r(Dze," (throws an error)."),Dze.forEach(t),UJr=i(Fi),ra=n(Fi,"DIV",{class:!0});var TA=s(ra);T(B$.$$.fragment,TA),JJr=i(TA),s3e=n(TA,"P",{});var Ajt=s(s3e);YJr=r(Ajt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ajt.forEach(t),KJr=i(TA),Cf=n(TA,"P",{});var tte=s(Cf);ZJr=r(tte,`Note:
Loading a model from its configuration file does `),l3e=n(tte,"STRONG",{});var Ljt=s(l3e);eYr=r(Ljt,"not"),Ljt.forEach(t),oYr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(tte,"A",{href:!0});var yjt=s(doe);rYr=r(yjt,"from_pretrained()"),yjt.forEach(t),tYr=r(tte," to load the model weights."),tte.forEach(t),aYr=i(TA),T(e0.$$.fragment,TA),TA.forEach(t),nYr=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(I$.$$.fragment,Ti),sYr=i(Ti),i3e=n(Ti,"P",{});var xjt=s(i3e);lYr=r(xjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xjt.forEach(t),iYr=i(Ti),kn=n(Ti,"P",{});var MA=s(kn);dYr=r(MA,"The model class to instantiate is selected based on the "),d3e=n(MA,"CODE",{});var $jt=s(d3e);cYr=r($jt,"model_type"),$jt.forEach(t),fYr=r(MA,` property of the config object (either
passed as an argument or loaded from `),c3e=n(MA,"CODE",{});var kjt=s(c3e);mYr=r(kjt,"pretrained_model_name_or_path"),kjt.forEach(t),gYr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(MA,"CODE",{});var Sjt=s(f3e);hYr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),pYr=r(MA,":"),MA.forEach(t),_Yr=i(Ti),m3e=n(Ti,"UL",{});var Rjt=s(m3e);o0=n(Rjt,"LI",{});var wGe=s(o0);g3e=n(wGe,"STRONG",{});var Pjt=s(g3e);uYr=r(Pjt,"vision-encoder-decoder"),Pjt.forEach(t),bYr=r(wGe," \u2014 "),coe=n(wGe,"A",{href:!0});var Bjt=s(coe);vYr=r(Bjt,"FlaxVisionEncoderDecoderModel"),Bjt.forEach(t),FYr=r(wGe," (Vision Encoder decoder model)"),wGe.forEach(t),Rjt.forEach(t),TYr=i(Ti),T(r0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(GGt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(Sf,"id","extending-the-auto-classes"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Pf,"id","transformers.AutoConfig"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(nS,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(sS,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig"),c(lS,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig"),c(iS,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig"),c(dS,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig"),c(cS,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(fS,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig"),c(mS,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(gS,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(hS,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(pS,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig"),c(_S,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig"),c(uS,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig"),c(bS,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig"),c(vS,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig"),c(FS,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig"),c(TS,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig"),c(MS,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig"),c(ES,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(CS,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(wS,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(AS,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig"),c(LS,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(yS,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(xS,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig"),c($S,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig"),c(kS,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig"),c(SS,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig"),c(RS,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig"),c(PS,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig"),c(BS,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(IS,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig"),c(NS,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig"),c(qS,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig"),c(jS,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig"),c(DS,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig"),c(GS,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig"),c(OS,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config"),c(VS,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(XS,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(zS,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig"),c(WS,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig"),c(QS,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig"),c(HS,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(US,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(JS,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(YS,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(KS,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig"),c(ZS,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig"),c(eR,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig"),c(oR,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config"),c(rR,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig"),c(tR,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig"),c(aR,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config"),c(nR,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig"),c(sR,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(lR,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig"),c(iR,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig"),c(dR,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(cR,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(fR,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig"),c(mR,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config"),c(gR,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(hR,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(pR,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig"),c(_R,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig"),c(uR,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig"),c(bR,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig"),c(vR,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(FR,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(TR,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(MR,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagConfig"),c(ER,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmConfig"),c(CR,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig"),c(wR,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig"),c(AR,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig"),c(LR,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig"),c(yR,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig"),c(xR,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig"),c($R,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig"),c(kR,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig"),c(SR,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig"),c(RR,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig"),c(PR,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(BR,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(IR,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(NR,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig"),c(qR,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(jR,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig"),c(DR,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config"),c(GR,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config"),c(OR,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig"),c(VR,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(XR,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(zR,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig"),c(WR,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(QR,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(HR,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig"),c(UR,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig"),c(JR,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(YR,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(KR,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(ZR,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig"),c(eP,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(oP,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(rP,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(tP,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig"),c(aP,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig"),c(nP,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig"),c(sP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(lP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(iP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(dP,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig"),c(cP,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig"),c(fP,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vg,"id","transformers.AutoTokenizer"),c(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(mP,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(gP,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(hP,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pP,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizer"),c(_P,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizerFast"),c(uP,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizer"),c(bP,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(vP,"href","/docs/transformers/pr_17469/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(FP,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(TP,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(MP,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(EP,"href","/docs/transformers/pr_17469/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(CP,"href","/docs/transformers/pr_17469/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(wP,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(AP,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(LP,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yP,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xP,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c($P,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(kP,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(SP,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(RP,"href","/docs/transformers/pr_17469/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(PP,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizer"),c(BP,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineTokenizer"),c(NP,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizer"),c(qP,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(jP,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(DP,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizer"),c(OP,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(VP,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(XP,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zP,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WP,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizer"),c(QP,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(HP,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(UP,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(JP,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(YP,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ZP,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(eB,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizer"),c(oB,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(rB,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(tB,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizer"),c(aB,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(nB,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(sB,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizer"),c(lB,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(iB,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dB,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cB,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(fB,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(mB,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(gB,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hB,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(pB,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizer"),c(_B,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FB,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(TB,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(MB,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(EB,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(CB,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(wB,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(AB,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(LB,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(yB,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizer"),c(xB,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizerFast"),c($B,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizer"),c(kB,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(SB,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5Tokenizer"),c(RB,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5TokenizerFast"),c(PB,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeTokenizer"),c(BB,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(IB,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(NB,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(qB,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianTokenizer"),c(jB,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizer"),c(DB,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(GB,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(OB,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(VB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(XB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(zB,"href","/docs/transformers/pr_17469/en/model_doc/mluke#transformers.MLukeTokenizer"),c(WB,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(QB,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(HB,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(UB,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(JB,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5Tokenizer"),c(YB,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5TokenizerFast"),c(KB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eI,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(oI,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(rI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aI,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nI,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sI,"href","/docs/transformers/pr_17469/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lI,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iI,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(cI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagTokenizer"),c(mI,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizer"),c(gI,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hI,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pI,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_I,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uI,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bI,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vI,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MI,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EI,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CI,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wI,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AI,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizer"),c(LI,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yI,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xI,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($I,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5Tokenizer"),c(kI,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.T5TokenizerFast"),c(SI,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasTokenizer"),c(RI,"href","/docs/transformers/pr_17469/en/model_doc/tapex#transformers.TapexTokenizer"),c(PI,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(qI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(jI,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DI,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GI,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(OI,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VI,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XI,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMTokenizer"),c(zI,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(WI,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(QI,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JI,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YI,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KI,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZI,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoFeatureExtractor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(eN,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oN,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sN,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gN,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(pN,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(_N,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($N,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RN,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoProcessor"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(PN,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(BN,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPProcessor"),c(IN,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(NN,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(qN,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(jN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ON,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(VN,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRProcessor"),c(XN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WN,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltProcessor"),c(QN,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(HN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xp,"id","transformers.AutoModel"),c(xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xp,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(YN,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KN,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZN,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eq,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel"),c(oq,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel"),c(rq,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel"),c(tq,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(aq,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(nq,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel"),c(sq,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(lq,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(iq,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(dq,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel"),c(cq,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel"),c(fq,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel"),c(mq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel"),c(gq,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel"),c(hq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel"),c(pq,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel"),c(_q,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel"),c(uq,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bq,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vq,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Fq,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel"),c(Tq,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Mq,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Eq,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel"),c(Cq,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel"),c(wq,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel"),c(Aq,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Lq,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel"),c(yq,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel"),c(xq,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel"),c($q,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel"),c(kq,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel"),c(Sq,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel"),c(Rq,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel"),c(Pq,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Bq,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel"),c(Iq,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model"),c(Nq,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qq,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(jq,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel"),c(Dq,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel"),c(Gq,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel"),c(Oq,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Vq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Xq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Wq,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel"),c(Qq,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel"),c(Hq,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel"),c(Uq,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model"),c(Jq,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel"),c(Yq,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel"),c(Kq,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model"),c(Zq,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel"),c(ej,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oj,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel"),c(rj,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel"),c(tj,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aj,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nj,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel"),c(sj,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model"),c(lj,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel"),c(ij,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(dj,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel"),c(cj,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel"),c(fj,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel"),c(mj,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel"),c(gj,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel"),c(hj,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(pj,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel"),c(_j,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel"),c(uj,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel"),c(bj,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel"),c(vj,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel"),c(Fj,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c(Tj,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel"),c(Mj,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel"),c(Ej,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel"),c(Cj,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel"),c(wj,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel"),c(Aj,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Lj,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel"),c(yj,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(xj,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel"),c($j,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model"),c(kj,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model"),c(Sj,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel"),c(Rj,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Pj,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Bj,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Ij,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Nj,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel"),c(qj,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel"),c(jj,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Dj,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Gj,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel"),c(Oj,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Vj,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Xj,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(zj,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel"),c(Wj,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel"),c(Qj,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel"),c(Hj,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Uj,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Jj,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Yj,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel"),c(Kj,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel"),c(Zj,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ku,"id","transformers.AutoModelForPreTraining"),c(ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ku,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(eD,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oD,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rD,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tD,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aD,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining"),c(sD,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lD,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iD,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cD,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fD,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mD,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gD,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining"),c(pD,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_D,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining"),c(uD,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining"),c(bD,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(FD,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(TD,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ED,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CD,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(wD,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(AD,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(LD,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yD,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xD,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c($D,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kD,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(SD,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BD,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ID,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(ND,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(qD,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(jD,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(DD,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(GD,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(OD,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(VD,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(XD,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(zD,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C1,"id","transformers.AutoModelForCausalLM"),c(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C1,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(WD,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QD,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HD,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UD,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM"),c(JD,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel"),c(YD,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(KD,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(ZD,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(eG,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(oG,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(rG,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(tG,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(aG,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nG,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(sG,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM"),c(lG,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iG,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(dG,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(cG,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(fG,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM"),c(mG,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM"),c(gG,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(hG,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pG,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM"),c(_G,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(uG,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(bG,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(vG,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(FG,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(TG,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(MG,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(EG,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(CG,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(wG,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(AG,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(LG,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(yG,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c($G,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(kG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(SG,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m2,"id","transformers.AutoModelForMaskedLM"),c(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m2,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(RG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(NG,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qG,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM"),c(jG,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(DG,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(GG,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(OG,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(VG,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(XG,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zG,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(QG,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(HG,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(UG,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(JG,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(YG,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KG,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM"),c(eO,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oO,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(tO,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aO,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(nO,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(sO,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(lO,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(iO,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(dO,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(cO,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(fO,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(mO,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(gO,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(hO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_O,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K2,"id","transformers.AutoModelForSeq2SeqLM"),c(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(uO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FO,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(wO,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(LO,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel"),c($O,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(SO,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(BO,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(IO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vb,"id","transformers.AutoModelForSequenceClassification"),c(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vb,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(NO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DO,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c($V,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.AutoModelForMultipleChoice"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(PV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.AutoModelForNextSentencePrediction"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c(mX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(_X,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(uX,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(bX,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(vX,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForTokenClassification"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(CX,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification"),c(wX,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(AX,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(LX,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(yX,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification"),c(xX,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c($X,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(kX,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(SX,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(RX,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(BX,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(IX,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(NX,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(qX,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(jX,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(DX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(GX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(OX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(VX,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(XX,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(zX,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(QX,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(HX,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(UX,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(JX,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(YX,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(KX,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(ez,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(oz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(rz,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(tz,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForQuestionAnswering"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(az,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Tz,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Vz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Wz,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForTableQuestionAnswering"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForImageClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification"),c(oW,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(rW,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification"),c(tW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(aW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification"),c(nW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(sW,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(lW,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification"),c(iW,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(dW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(cW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(fW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(mW,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(gW,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(hW,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(pW,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_W,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification"),c(uW,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(bW,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification"),c(vW,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.AutoModelForVision2Seq"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(FW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(CW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.AutoModelForAudioClassification"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w6,"id","transformers.AutoModelForAudioFrameClassification"),c(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w6,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(DW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(XW,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(zW,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(WW,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(QW,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P6,"id","transformers.AutoModelForCTC"),c(P6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P6,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(HW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(KW,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC"),c(ZW,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC"),c(eQ,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC"),c(oQ,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC"),c(rQ,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(tQ,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(aQ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(nQ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(sQ,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(lQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cQ,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(fQ,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForAudioXVector"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(mQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(_Q,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(uQ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(bQ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(vQ,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForMaskedImageModeling"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(FQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EQ,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(CQ,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(wQ,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(AQ,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForObjectDetection"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForObjectDetection"),c(Od,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection"),c(kQ,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.AutoModelForImageSegmentation"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.AutoModelForImageSegmentation"),c(zd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForSemanticSegmentation"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Hd,"class","relative group"),c(IQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(DQ,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(GQ,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(OQ,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForInstanceSegmentation"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Yd,"class","relative group"),c(VQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModel"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModel"),c(ec,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JQ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel"),c(YQ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel"),c(KQ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel"),c(ZQ,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(eH,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(oH,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel"),c(rH,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel"),c(tH,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel"),c(aH,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel"),c(nH,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel"),c(sH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(lH,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel"),c(iH,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(dH,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(cH,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(fH,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel"),c(mH,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(gH,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel"),c(hH,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(pH,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model"),c(_H,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel"),c(uH,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel"),c(bH,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(vH,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel"),c(FH,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel"),c(TH,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel"),c(MH,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel"),c(EH,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel"),c(CH,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(wH,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel"),c(AH,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model"),c(LH,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(yH,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel"),c(xH,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel"),c($H,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel"),c(kH,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel"),c(SH,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel"),c(RH,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(PH,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel"),c(BH,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2Model"),c(IH,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model"),c(NH,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel"),c(qH,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jH,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel"),c(DH,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(GH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(OH,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel"),c(VH,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(XH,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.TFAutoModelForPreTraining"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.TFAutoModelForPreTraining"),c(tc,"class","relative group"),c(zH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(UH,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JH,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining"),c(YH,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KH,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZH,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eU,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(oU,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(tU,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aU,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nU,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(sU,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(lU,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iU,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dU,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cU,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(fU,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(mU,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gU,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(hU,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pU,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(_U,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d9,"id","transformers.TFAutoModelForCausalLM"),c(d9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d9,"href","#transformers.TFAutoModelForCausalLM"),c(sc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(TU,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(MU,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EU,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CU,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(wU,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AU,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(LU,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(yU,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(xU,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c($U,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kU,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(SU,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w9,"id","transformers.TFAutoModelForImageClassification"),c(w9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w9,"href","#transformers.TFAutoModelForImageClassification"),c(dc,"class","relative group"),c(RU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IU,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(NU,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(qU,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(jU,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2ForImageClassification"),c(DU,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R9,"id","transformers.TFAutoModelForMaskedLM"),c(R9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R9,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c(GU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(zU,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(WU,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(QU,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HU,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(UU,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(JU,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YU,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(KU,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(rJ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(tJ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(nJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sJ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(uJ,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel"),c(vJ,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForSequenceClassification"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForSequenceClassification"),c(bc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c($J,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForMultipleChoice"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Tc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tY,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(aY,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(fY,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gY,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hY,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(pY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(_Y,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(uY,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Cc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(MY,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Lc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForTokenClassification"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForTokenClassification"),c($c,"class","relative group"),c(LY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RY,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(BY,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IY,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(NY,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(qY,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jY,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DY,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GY,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OY,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VY,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XY,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zY,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(WY,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(QY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HY,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UY,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.TFAutoModelForQuestionAnswering"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(JY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZY,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iK,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(mK,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(pK,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(_K,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(uK,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForVision2Seq"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(vK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(EK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModel"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModel"),c(Oc,"class","relative group"),c(LK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kK,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel"),c(SK,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel"),c(RK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel"),c(PK,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(BK,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IK,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(NK,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel"),c(qK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jK,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel"),c(DK,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GK,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OK,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VK,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(XK,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel"),c(zK,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel"),c(WK,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QK,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel"),c(HK,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(UK,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(JK,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(YK,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model"),c(KK,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(ZK,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel"),c(eZ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(oZ,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(rZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForCausalLM"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(tZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(lZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(iZ,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(dZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(cZ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(fZ,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(mZ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(gZ,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(hZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(pZ,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForPreTraining"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Hc,"class","relative group"),c(_Z,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(FZ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(TZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(MZ,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(EZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(CZ,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(wZ,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AZ,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(LZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c($Z,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(kZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForMaskedLM"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Yc,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(IZ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(qZ,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(jZ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(DZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(GZ,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VZ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(XZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ef,"class","relative group"),c(zZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HZ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(YZ,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(KZ,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(ZZ,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(eee,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(tee,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(tf,"class","relative group"),c(aee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(see,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(dee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(cee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(fee,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(mee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(gee,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(hee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(pee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c(uee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Tee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Mee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Eee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Cee,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(wee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Aee,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Lee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(yee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(xee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModelForTokenClassification"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cf,"class","relative group"),c($ee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Pee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Bee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Iee,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Nee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(qee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(jee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Dee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(zee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Jee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Yee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(_f,"class","relative group"),c(Kee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForImageClassification"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForImageClassification"),c(vf,"class","relative group"),c(roe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(toe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(noe,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(soe,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForVision2Seq"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mf,"class","relative group"),c(loe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,yf,u),b(f,nt,u),e(nt,Ei),e(nt,Ci),e(Ci,EA),e(nt,xf),b(f,Oe,u),b(f,We,u),e(We,wi),e(We,Rn),e(Rn,CA),e(We,Pn),e(We,Bn),e(Bn,wA),e(We,Ai),e(We,In),e(In,AA),e(We,Li),b(f,$f,u),M(xa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,Zk),e(Ae,yi),e(yi,eS),e(Ae,oS),b(f,Co,u),b(f,$a,u),e($a,rS),e($a,kf),e(kf,tS),e($a,Gze),b(f,AGe,u),b(f,xi,u),e(xi,Sf),e(Sf,ate),M(LA,ate,null),e(xi,Oze),e(xi,nte),e(nte,Vze),b(f,LGe,u),b(f,Nn,u),e(Nn,Xze),e(Nn,ste),e(ste,zze),e(Nn,Wze),e(Nn,lte),e(lte,Qze),e(Nn,Hze),b(f,yGe,u),M(yA,f,u),b(f,xGe,u),b(f,aS,u),e(aS,Uze),b(f,$Ge,u),M(Rf,f,u),b(f,kGe,u),b(f,$i,u),e($i,Pf),e(Pf,ite),M(xA,ite,null),e($i,Jze),e($i,dte),e(dte,Yze),b(f,SGe,u),b(f,wo,u),M($A,wo,null),e(wo,Kze),e(wo,kA),e(kA,Zze),e(kA,nS),e(nS,eWe),e(kA,oWe),e(wo,rWe),e(wo,SA),e(SA,tWe),e(SA,cte),e(cte,aWe),e(SA,nWe),e(wo,sWe),e(wo,wr),M(RA,wr,null),e(wr,lWe),e(wr,fte),e(fte,iWe),e(wr,dWe),e(wr,ki),e(ki,cWe),e(ki,mte),e(mte,fWe),e(ki,mWe),e(ki,gte),e(gte,gWe),e(ki,hWe),e(wr,pWe),e(wr,A),e(A,Bf),e(Bf,hte),e(hte,_We),e(Bf,uWe),e(Bf,sS),e(sS,bWe),e(Bf,vWe),e(A,FWe),e(A,If),e(If,pte),e(pte,TWe),e(If,MWe),e(If,lS),e(lS,EWe),e(If,CWe),e(A,wWe),e(A,Nf),e(Nf,_te),e(_te,AWe),e(Nf,LWe),e(Nf,iS),e(iS,yWe),e(Nf,xWe),e(A,$We),e(A,qf),e(qf,ute),e(ute,kWe),e(qf,SWe),e(qf,dS),e(dS,RWe),e(qf,PWe),e(A,BWe),e(A,jf),e(jf,bte),e(bte,IWe),e(jf,NWe),e(jf,cS),e(cS,qWe),e(jf,jWe),e(A,DWe),e(A,Df),e(Df,vte),e(vte,GWe),e(Df,OWe),e(Df,fS),e(fS,VWe),e(Df,XWe),e(A,zWe),e(A,Gf),e(Gf,Fte),e(Fte,WWe),e(Gf,QWe),e(Gf,mS),e(mS,HWe),e(Gf,UWe),e(A,JWe),e(A,Of),e(Of,Tte),e(Tte,YWe),e(Of,KWe),e(Of,gS),e(gS,ZWe),e(Of,eQe),e(A,oQe),e(A,Vf),e(Vf,Mte),e(Mte,rQe),e(Vf,tQe),e(Vf,hS),e(hS,aQe),e(Vf,nQe),e(A,sQe),e(A,Xf),e(Xf,Ete),e(Ete,lQe),e(Xf,iQe),e(Xf,pS),e(pS,dQe),e(Xf,cQe),e(A,fQe),e(A,zf),e(zf,Cte),e(Cte,mQe),e(zf,gQe),e(zf,_S),e(_S,hQe),e(zf,pQe),e(A,_Qe),e(A,Wf),e(Wf,wte),e(wte,uQe),e(Wf,bQe),e(Wf,uS),e(uS,vQe),e(Wf,FQe),e(A,TQe),e(A,Qf),e(Qf,Ate),e(Ate,MQe),e(Qf,EQe),e(Qf,bS),e(bS,CQe),e(Qf,wQe),e(A,AQe),e(A,Hf),e(Hf,Lte),e(Lte,LQe),e(Hf,yQe),e(Hf,vS),e(vS,xQe),e(Hf,$Qe),e(A,kQe),e(A,Uf),e(Uf,yte),e(yte,SQe),e(Uf,RQe),e(Uf,FS),e(FS,PQe),e(Uf,BQe),e(A,IQe),e(A,Jf),e(Jf,xte),e(xte,NQe),e(Jf,qQe),e(Jf,TS),e(TS,jQe),e(Jf,DQe),e(A,GQe),e(A,Yf),e(Yf,$te),e($te,OQe),e(Yf,VQe),e(Yf,MS),e(MS,XQe),e(Yf,zQe),e(A,WQe),e(A,Kf),e(Kf,kte),e(kte,QQe),e(Kf,HQe),e(Kf,ES),e(ES,UQe),e(Kf,JQe),e(A,YQe),e(A,Zf),e(Zf,Ste),e(Ste,KQe),e(Zf,ZQe),e(Zf,CS),e(CS,eHe),e(Zf,oHe),e(A,rHe),e(A,em),e(em,Rte),e(Rte,tHe),e(em,aHe),e(em,wS),e(wS,nHe),e(em,sHe),e(A,lHe),e(A,om),e(om,Pte),e(Pte,iHe),e(om,dHe),e(om,AS),e(AS,cHe),e(om,fHe),e(A,mHe),e(A,rm),e(rm,Bte),e(Bte,gHe),e(rm,hHe),e(rm,LS),e(LS,pHe),e(rm,_He),e(A,uHe),e(A,tm),e(tm,Ite),e(Ite,bHe),e(tm,vHe),e(tm,yS),e(yS,FHe),e(tm,THe),e(A,MHe),e(A,am),e(am,Nte),e(Nte,EHe),e(am,CHe),e(am,xS),e(xS,wHe),e(am,AHe),e(A,LHe),e(A,nm),e(nm,qte),e(qte,yHe),e(nm,xHe),e(nm,$S),e($S,$He),e(nm,kHe),e(A,SHe),e(A,sm),e(sm,jte),e(jte,RHe),e(sm,PHe),e(sm,kS),e(kS,BHe),e(sm,IHe),e(A,NHe),e(A,lm),e(lm,Dte),e(Dte,qHe),e(lm,jHe),e(lm,SS),e(SS,DHe),e(lm,GHe),e(A,OHe),e(A,im),e(im,Gte),e(Gte,VHe),e(im,XHe),e(im,RS),e(RS,zHe),e(im,WHe),e(A,QHe),e(A,dm),e(dm,Ote),e(Ote,HHe),e(dm,UHe),e(dm,PS),e(PS,JHe),e(dm,YHe),e(A,KHe),e(A,cm),e(cm,Vte),e(Vte,ZHe),e(cm,eUe),e(cm,BS),e(BS,oUe),e(cm,rUe),e(A,tUe),e(A,fm),e(fm,Xte),e(Xte,aUe),e(fm,nUe),e(fm,IS),e(IS,sUe),e(fm,lUe),e(A,iUe),e(A,mm),e(mm,zte),e(zte,dUe),e(mm,cUe),e(mm,NS),e(NS,fUe),e(mm,mUe),e(A,gUe),e(A,gm),e(gm,Wte),e(Wte,hUe),e(gm,pUe),e(gm,qS),e(qS,_Ue),e(gm,uUe),e(A,bUe),e(A,hm),e(hm,Qte),e(Qte,vUe),e(hm,FUe),e(hm,jS),e(jS,TUe),e(hm,MUe),e(A,EUe),e(A,pm),e(pm,Hte),e(Hte,CUe),e(pm,wUe),e(pm,DS),e(DS,AUe),e(pm,LUe),e(A,yUe),e(A,_m),e(_m,Ute),e(Ute,xUe),e(_m,$Ue),e(_m,GS),e(GS,kUe),e(_m,SUe),e(A,RUe),e(A,um),e(um,Jte),e(Jte,PUe),e(um,BUe),e(um,OS),e(OS,IUe),e(um,NUe),e(A,qUe),e(A,bm),e(bm,Yte),e(Yte,jUe),e(bm,DUe),e(bm,VS),e(VS,GUe),e(bm,OUe),e(A,VUe),e(A,vm),e(vm,Kte),e(Kte,XUe),e(vm,zUe),e(vm,XS),e(XS,WUe),e(vm,QUe),e(A,HUe),e(A,Fm),e(Fm,Zte),e(Zte,UUe),e(Fm,JUe),e(Fm,zS),e(zS,YUe),e(Fm,KUe),e(A,ZUe),e(A,Tm),e(Tm,eae),e(eae,eJe),e(Tm,oJe),e(Tm,WS),e(WS,rJe),e(Tm,tJe),e(A,aJe),e(A,Mm),e(Mm,oae),e(oae,nJe),e(Mm,sJe),e(Mm,QS),e(QS,lJe),e(Mm,iJe),e(A,dJe),e(A,Em),e(Em,rae),e(rae,cJe),e(Em,fJe),e(Em,HS),e(HS,mJe),e(Em,gJe),e(A,hJe),e(A,Cm),e(Cm,tae),e(tae,pJe),e(Cm,_Je),e(Cm,US),e(US,uJe),e(Cm,bJe),e(A,vJe),e(A,wm),e(wm,aae),e(aae,FJe),e(wm,TJe),e(wm,JS),e(JS,MJe),e(wm,EJe),e(A,CJe),e(A,Am),e(Am,nae),e(nae,wJe),e(Am,AJe),e(Am,YS),e(YS,LJe),e(Am,yJe),e(A,xJe),e(A,Lm),e(Lm,sae),e(sae,$Je),e(Lm,kJe),e(Lm,KS),e(KS,SJe),e(Lm,RJe),e(A,PJe),e(A,ym),e(ym,lae),e(lae,BJe),e(ym,IJe),e(ym,ZS),e(ZS,NJe),e(ym,qJe),e(A,jJe),e(A,xm),e(xm,iae),e(iae,DJe),e(xm,GJe),e(xm,eR),e(eR,OJe),e(xm,VJe),e(A,XJe),e(A,$m),e($m,dae),e(dae,zJe),e($m,WJe),e($m,oR),e(oR,QJe),e($m,HJe),e(A,UJe),e(A,km),e(km,cae),e(cae,JJe),e(km,YJe),e(km,rR),e(rR,KJe),e(km,ZJe),e(A,eYe),e(A,Sm),e(Sm,fae),e(fae,oYe),e(Sm,rYe),e(Sm,tR),e(tR,tYe),e(Sm,aYe),e(A,nYe),e(A,Rm),e(Rm,mae),e(mae,sYe),e(Rm,lYe),e(Rm,aR),e(aR,iYe),e(Rm,dYe),e(A,cYe),e(A,Pm),e(Pm,gae),e(gae,fYe),e(Pm,mYe),e(Pm,nR),e(nR,gYe),e(Pm,hYe),e(A,pYe),e(A,Bm),e(Bm,hae),e(hae,_Ye),e(Bm,uYe),e(Bm,sR),e(sR,bYe),e(Bm,vYe),e(A,FYe),e(A,Im),e(Im,pae),e(pae,TYe),e(Im,MYe),e(Im,lR),e(lR,EYe),e(Im,CYe),e(A,wYe),e(A,Nm),e(Nm,_ae),e(_ae,AYe),e(Nm,LYe),e(Nm,iR),e(iR,yYe),e(Nm,xYe),e(A,$Ye),e(A,qm),e(qm,uae),e(uae,kYe),e(qm,SYe),e(qm,dR),e(dR,RYe),e(qm,PYe),e(A,BYe),e(A,jm),e(jm,bae),e(bae,IYe),e(jm,NYe),e(jm,cR),e(cR,qYe),e(jm,jYe),e(A,DYe),e(A,Dm),e(Dm,vae),e(vae,GYe),e(Dm,OYe),e(Dm,fR),e(fR,VYe),e(Dm,XYe),e(A,zYe),e(A,Gm),e(Gm,Fae),e(Fae,WYe),e(Gm,QYe),e(Gm,mR),e(mR,HYe),e(Gm,UYe),e(A,JYe),e(A,Om),e(Om,Tae),e(Tae,YYe),e(Om,KYe),e(Om,gR),e(gR,ZYe),e(Om,eKe),e(A,oKe),e(A,Vm),e(Vm,Mae),e(Mae,rKe),e(Vm,tKe),e(Vm,hR),e(hR,aKe),e(Vm,nKe),e(A,sKe),e(A,Xm),e(Xm,Eae),e(Eae,lKe),e(Xm,iKe),e(Xm,pR),e(pR,dKe),e(Xm,cKe),e(A,fKe),e(A,zm),e(zm,Cae),e(Cae,mKe),e(zm,gKe),e(zm,_R),e(_R,hKe),e(zm,pKe),e(A,_Ke),e(A,Wm),e(Wm,wae),e(wae,uKe),e(Wm,bKe),e(Wm,uR),e(uR,vKe),e(Wm,FKe),e(A,TKe),e(A,Qm),e(Qm,Aae),e(Aae,MKe),e(Qm,EKe),e(Qm,bR),e(bR,CKe),e(Qm,wKe),e(A,AKe),e(A,Hm),e(Hm,Lae),e(Lae,LKe),e(Hm,yKe),e(Hm,vR),e(vR,xKe),e(Hm,$Ke),e(A,kKe),e(A,Um),e(Um,yae),e(yae,SKe),e(Um,RKe),e(Um,FR),e(FR,PKe),e(Um,BKe),e(A,IKe),e(A,Jm),e(Jm,xae),e(xae,NKe),e(Jm,qKe),e(Jm,TR),e(TR,jKe),e(Jm,DKe),e(A,GKe),e(A,Ym),e(Ym,$ae),e($ae,OKe),e(Ym,VKe),e(Ym,MR),e(MR,XKe),e(Ym,zKe),e(A,WKe),e(A,Km),e(Km,kae),e(kae,QKe),e(Km,HKe),e(Km,ER),e(ER,UKe),e(Km,JKe),e(A,YKe),e(A,Zm),e(Zm,Sae),e(Sae,KKe),e(Zm,ZKe),e(Zm,CR),e(CR,eZe),e(Zm,oZe),e(A,rZe),e(A,eg),e(eg,Rae),e(Rae,tZe),e(eg,aZe),e(eg,wR),e(wR,nZe),e(eg,sZe),e(A,lZe),e(A,og),e(og,Pae),e(Pae,iZe),e(og,dZe),e(og,AR),e(AR,cZe),e(og,fZe),e(A,mZe),e(A,rg),e(rg,Bae),e(Bae,gZe),e(rg,hZe),e(rg,LR),e(LR,pZe),e(rg,_Ze),e(A,uZe),e(A,tg),e(tg,Iae),e(Iae,bZe),e(tg,vZe),e(tg,yR),e(yR,FZe),e(tg,TZe),e(A,MZe),e(A,ag),e(ag,Nae),e(Nae,EZe),e(ag,CZe),e(ag,xR),e(xR,wZe),e(ag,AZe),e(A,LZe),e(A,ng),e(ng,qae),e(qae,yZe),e(ng,xZe),e(ng,$R),e($R,$Ze),e(ng,kZe),e(A,SZe),e(A,sg),e(sg,jae),e(jae,RZe),e(sg,PZe),e(sg,kR),e(kR,BZe),e(sg,IZe),e(A,NZe),e(A,lg),e(lg,Dae),e(Dae,qZe),e(lg,jZe),e(lg,SR),e(SR,DZe),e(lg,GZe),e(A,OZe),e(A,ig),e(ig,Gae),e(Gae,VZe),e(ig,XZe),e(ig,RR),e(RR,zZe),e(ig,WZe),e(A,QZe),e(A,dg),e(dg,Oae),e(Oae,HZe),e(dg,UZe),e(dg,PR),e(PR,JZe),e(dg,YZe),e(A,KZe),e(A,cg),e(cg,Vae),e(Vae,ZZe),e(cg,eeo),e(cg,BR),e(BR,oeo),e(cg,reo),e(A,teo),e(A,fg),e(fg,Xae),e(Xae,aeo),e(fg,neo),e(fg,IR),e(IR,seo),e(fg,leo),e(A,ieo),e(A,mg),e(mg,zae),e(zae,deo),e(mg,ceo),e(mg,NR),e(NR,feo),e(mg,meo),e(A,geo),e(A,gg),e(gg,Wae),e(Wae,heo),e(gg,peo),e(gg,qR),e(qR,_eo),e(gg,ueo),e(A,beo),e(A,hg),e(hg,Qae),e(Qae,veo),e(hg,Feo),e(hg,jR),e(jR,Teo),e(hg,Meo),e(A,Eeo),e(A,pg),e(pg,Hae),e(Hae,Ceo),e(pg,weo),e(pg,DR),e(DR,Aeo),e(pg,Leo),e(A,yeo),e(A,_g),e(_g,Uae),e(Uae,xeo),e(_g,$eo),e(_g,GR),e(GR,keo),e(_g,Seo),e(A,Reo),e(A,ug),e(ug,Jae),e(Jae,Peo),e(ug,Beo),e(ug,OR),e(OR,Ieo),e(ug,Neo),e(A,qeo),e(A,bg),e(bg,Yae),e(Yae,jeo),e(bg,Deo),e(bg,VR),e(VR,Geo),e(bg,Oeo),e(A,Veo),e(A,vg),e(vg,Kae),e(Kae,Xeo),e(vg,zeo),e(vg,XR),e(XR,Weo),e(vg,Qeo),e(A,Heo),e(A,Fg),e(Fg,Zae),e(Zae,Ueo),e(Fg,Jeo),e(Fg,zR),e(zR,Yeo),e(Fg,Keo),e(A,Zeo),e(A,Tg),e(Tg,ene),e(ene,eoo),e(Tg,ooo),e(Tg,WR),e(WR,roo),e(Tg,too),e(A,aoo),e(A,Mg),e(Mg,one),e(one,noo),e(Mg,soo),e(Mg,QR),e(QR,loo),e(Mg,ioo),e(A,doo),e(A,Eg),e(Eg,rne),e(rne,coo),e(Eg,foo),e(Eg,HR),e(HR,moo),e(Eg,goo),e(A,hoo),e(A,Cg),e(Cg,tne),e(tne,poo),e(Cg,_oo),e(Cg,UR),e(UR,uoo),e(Cg,boo),e(A,voo),e(A,wg),e(wg,ane),e(ane,Foo),e(wg,Too),e(wg,JR),e(JR,Moo),e(wg,Eoo),e(A,Coo),e(A,Ag),e(Ag,nne),e(nne,woo),e(Ag,Aoo),e(Ag,YR),e(YR,Loo),e(Ag,yoo),e(A,xoo),e(A,Lg),e(Lg,sne),e(sne,$oo),e(Lg,koo),e(Lg,KR),e(KR,Soo),e(Lg,Roo),e(A,Poo),e(A,yg),e(yg,lne),e(lne,Boo),e(yg,Ioo),e(yg,ZR),e(ZR,Noo),e(yg,qoo),e(A,joo),e(A,xg),e(xg,ine),e(ine,Doo),e(xg,Goo),e(xg,eP),e(eP,Ooo),e(xg,Voo),e(A,Xoo),e(A,$g),e($g,dne),e(dne,zoo),e($g,Woo),e($g,oP),e(oP,Qoo),e($g,Hoo),e(A,Uoo),e(A,kg),e(kg,cne),e(cne,Joo),e(kg,Yoo),e(kg,rP),e(rP,Koo),e(kg,Zoo),e(A,ero),e(A,Sg),e(Sg,fne),e(fne,oro),e(Sg,rro),e(Sg,tP),e(tP,tro),e(Sg,aro),e(A,nro),e(A,Rg),e(Rg,mne),e(mne,sro),e(Rg,lro),e(Rg,aP),e(aP,iro),e(Rg,dro),e(A,cro),e(A,Pg),e(Pg,gne),e(gne,fro),e(Pg,mro),e(Pg,nP),e(nP,gro),e(Pg,hro),e(A,pro),e(A,Bg),e(Bg,hne),e(hne,_ro),e(Bg,uro),e(Bg,sP),e(sP,bro),e(Bg,vro),e(A,Fro),e(A,Ig),e(Ig,pne),e(pne,Tro),e(Ig,Mro),e(Ig,lP),e(lP,Ero),e(Ig,Cro),e(A,wro),e(A,Ng),e(Ng,_ne),e(_ne,Aro),e(Ng,Lro),e(Ng,iP),e(iP,yro),e(Ng,xro),e(A,$ro),e(A,qg),e(qg,une),e(une,kro),e(qg,Sro),e(qg,dP),e(dP,Rro),e(qg,Pro),e(A,Bro),e(A,jg),e(jg,bne),e(bne,Iro),e(jg,Nro),e(jg,cP),e(cP,qro),e(jg,jro),e(A,Dro),e(A,Dg),e(Dg,vne),e(vne,Gro),e(Dg,Oro),e(Dg,fP),e(fP,Vro),e(Dg,Xro),e(wr,zro),M(Gg,wr,null),e(wo,Wro),e(wo,Og),M(PA,Og,null),e(Og,Qro),e(Og,Fne),e(Fne,Hro),b(f,RGe,u),b(f,Si,u),e(Si,Vg),e(Vg,Tne),M(BA,Tne,null),e(Si,Uro),e(Si,Mne),e(Mne,Jro),b(f,PGe,u),b(f,Ao,u),M(IA,Ao,null),e(Ao,Yro),e(Ao,NA),e(NA,Kro),e(NA,mP),e(mP,Zro),e(NA,eto),e(Ao,oto),e(Ao,qA),e(qA,rto),e(qA,Ene),e(Ene,tto),e(qA,ato),e(Ao,nto),e(Ao,Ar),M(jA,Ar,null),e(Ar,sto),e(Ar,Cne),e(Cne,lto),e(Ar,ito),e(Ar,ka),e(ka,dto),e(ka,wne),e(wne,cto),e(ka,fto),e(ka,Ane),e(Ane,mto),e(ka,gto),e(ka,Lne),e(Lne,hto),e(ka,pto),e(Ar,_to),e(Ar,k),e(k,qn),e(qn,yne),e(yne,uto),e(qn,bto),e(qn,gP),e(gP,vto),e(qn,Fto),e(qn,hP),e(hP,Tto),e(qn,Mto),e(k,Eto),e(k,jn),e(jn,xne),e(xne,Cto),e(jn,wto),e(jn,pP),e(pP,Ato),e(jn,Lto),e(jn,_P),e(_P,yto),e(jn,xto),e(k,$to),e(k,Dn),e(Dn,$ne),e($ne,kto),e(Dn,Sto),e(Dn,uP),e(uP,Rto),e(Dn,Pto),e(Dn,bP),e(bP,Bto),e(Dn,Ito),e(k,Nto),e(k,Xg),e(Xg,kne),e(kne,qto),e(Xg,jto),e(Xg,vP),e(vP,Dto),e(Xg,Gto),e(k,Oto),e(k,Gn),e(Gn,Sne),e(Sne,Vto),e(Gn,Xto),e(Gn,FP),e(FP,zto),e(Gn,Wto),e(Gn,TP),e(TP,Qto),e(Gn,Hto),e(k,Uto),e(k,zg),e(zg,Rne),e(Rne,Jto),e(zg,Yto),e(zg,MP),e(MP,Kto),e(zg,Zto),e(k,eao),e(k,Wg),e(Wg,Pne),e(Pne,oao),e(Wg,rao),e(Wg,EP),e(EP,tao),e(Wg,aao),e(k,nao),e(k,Qg),e(Qg,Bne),e(Bne,sao),e(Qg,lao),e(Qg,CP),e(CP,iao),e(Qg,dao),e(k,cao),e(k,On),e(On,Ine),e(Ine,fao),e(On,mao),e(On,wP),e(wP,gao),e(On,hao),e(On,AP),e(AP,pao),e(On,_ao),e(k,uao),e(k,Vn),e(Vn,Nne),e(Nne,bao),e(Vn,vao),e(Vn,LP),e(LP,Fao),e(Vn,Tao),e(Vn,yP),e(yP,Mao),e(Vn,Eao),e(k,Cao),e(k,Xn),e(Xn,qne),e(qne,wao),e(Xn,Aao),e(Xn,xP),e(xP,Lao),e(Xn,yao),e(Xn,$P),e($P,xao),e(Xn,$ao),e(k,kao),e(k,Hg),e(Hg,jne),e(jne,Sao),e(Hg,Rao),e(Hg,kP),e(kP,Pao),e(Hg,Bao),e(k,Iao),e(k,Ug),e(Ug,Dne),e(Dne,Nao),e(Ug,qao),e(Ug,SP),e(SP,jao),e(Ug,Dao),e(k,Gao),e(k,Jg),e(Jg,Gne),e(Gne,Oao),e(Jg,Vao),e(Jg,RP),e(RP,Xao),e(Jg,zao),e(k,Wao),e(k,zn),e(zn,One),e(One,Qao),e(zn,Hao),e(zn,PP),e(PP,Uao),e(zn,Jao),e(zn,BP),e(BP,Yao),e(zn,Kao),e(k,Zao),e(k,Yg),e(Yg,Vne),e(Vne,eno),e(Yg,ono),e(Yg,IP),e(IP,rno),e(Yg,tno),e(k,ano),e(k,Wn),e(Wn,Xne),e(Xne,nno),e(Wn,sno),e(Wn,NP),e(NP,lno),e(Wn,ino),e(Wn,qP),e(qP,dno),e(Wn,cno),e(k,fno),e(k,Qn),e(Qn,zne),e(zne,mno),e(Qn,gno),e(Qn,jP),e(jP,hno),e(Qn,pno),e(Qn,DP),e(DP,_no),e(Qn,uno),e(k,bno),e(k,Hn),e(Hn,Wne),e(Wne,vno),e(Hn,Fno),e(Hn,GP),e(GP,Tno),e(Hn,Mno),e(Hn,OP),e(OP,Eno),e(Hn,Cno),e(k,wno),e(k,Kg),e(Kg,Qne),e(Qne,Ano),e(Kg,Lno),e(Kg,VP),e(VP,yno),e(Kg,xno),e(k,$no),e(k,Un),e(Un,Hne),e(Hne,kno),e(Un,Sno),e(Un,XP),e(XP,Rno),e(Un,Pno),e(Un,zP),e(zP,Bno),e(Un,Ino),e(k,Nno),e(k,Jn),e(Jn,Une),e(Une,qno),e(Jn,jno),e(Jn,WP),e(WP,Dno),e(Jn,Gno),e(Jn,QP),e(QP,Ono),e(Jn,Vno),e(k,Xno),e(k,Yn),e(Yn,Jne),e(Jne,zno),e(Yn,Wno),e(Yn,HP),e(HP,Qno),e(Yn,Hno),e(Yn,UP),e(UP,Uno),e(Yn,Jno),e(k,Yno),e(k,Kn),e(Kn,Yne),e(Yne,Kno),e(Kn,Zno),e(Kn,JP),e(JP,eso),e(Kn,oso),e(Kn,YP),e(YP,rso),e(Kn,tso),e(k,aso),e(k,Zn),e(Zn,Kne),e(Kne,nso),e(Zn,sso),e(Zn,KP),e(KP,lso),e(Zn,iso),e(Zn,ZP),e(ZP,dso),e(Zn,cso),e(k,fso),e(k,es),e(es,Zne),e(Zne,mso),e(es,gso),e(es,eB),e(eB,hso),e(es,pso),e(es,oB),e(oB,_so),e(es,uso),e(k,bso),e(k,Zg),e(Zg,ese),e(ese,vso),e(Zg,Fso),e(Zg,rB),e(rB,Tso),e(Zg,Mso),e(k,Eso),e(k,os),e(os,ose),e(ose,Cso),e(os,wso),e(os,tB),e(tB,Aso),e(os,Lso),e(os,aB),e(aB,yso),e(os,xso),e(k,$so),e(k,eh),e(eh,rse),e(rse,kso),e(eh,Sso),e(eh,nB),e(nB,Rso),e(eh,Pso),e(k,Bso),e(k,rs),e(rs,tse),e(tse,Iso),e(rs,Nso),e(rs,sB),e(sB,qso),e(rs,jso),e(rs,lB),e(lB,Dso),e(rs,Gso),e(k,Oso),e(k,ts),e(ts,ase),e(ase,Vso),e(ts,Xso),e(ts,iB),e(iB,zso),e(ts,Wso),e(ts,dB),e(dB,Qso),e(ts,Hso),e(k,Uso),e(k,as),e(as,nse),e(nse,Jso),e(as,Yso),e(as,cB),e(cB,Kso),e(as,Zso),e(as,fB),e(fB,elo),e(as,olo),e(k,rlo),e(k,oh),e(oh,sse),e(sse,tlo),e(oh,alo),e(oh,mB),e(mB,nlo),e(oh,slo),e(k,llo),e(k,ns),e(ns,lse),e(lse,ilo),e(ns,dlo),e(ns,gB),e(gB,clo),e(ns,flo),e(ns,hB),e(hB,mlo),e(ns,glo),e(k,hlo),e(k,ss),e(ss,ise),e(ise,plo),e(ss,_lo),e(ss,pB),e(pB,ulo),e(ss,blo),e(ss,_B),e(_B,vlo),e(ss,Flo),e(k,Tlo),e(k,rh),e(rh,dse),e(dse,Mlo),e(rh,Elo),e(rh,uB),e(uB,Clo),e(rh,wlo),e(k,Alo),e(k,ls),e(ls,cse),e(cse,Llo),e(ls,ylo),e(ls,bB),e(bB,xlo),e(ls,$lo),e(ls,vB),e(vB,klo),e(ls,Slo),e(k,Rlo),e(k,is),e(is,fse),e(fse,Plo),e(is,Blo),e(is,FB),e(FB,Ilo),e(is,Nlo),e(is,TB),e(TB,qlo),e(is,jlo),e(k,Dlo),e(k,ds),e(ds,mse),e(mse,Glo),e(ds,Olo),e(ds,MB),e(MB,Vlo),e(ds,Xlo),e(ds,EB),e(EB,zlo),e(ds,Wlo),e(k,Qlo),e(k,cs),e(cs,gse),e(gse,Hlo),e(cs,Ulo),e(cs,CB),e(CB,Jlo),e(cs,Ylo),e(cs,wB),e(wB,Klo),e(cs,Zlo),e(k,eio),e(k,fs),e(fs,hse),e(hse,oio),e(fs,rio),e(fs,AB),e(AB,tio),e(fs,aio),e(fs,LB),e(LB,nio),e(fs,sio),e(k,lio),e(k,ms),e(ms,pse),e(pse,iio),e(ms,dio),e(ms,yB),e(yB,cio),e(ms,fio),e(ms,xB),e(xB,mio),e(ms,gio),e(k,hio),e(k,gs),e(gs,_se),e(_se,pio),e(gs,_io),e(gs,$B),e($B,uio),e(gs,bio),e(gs,kB),e(kB,vio),e(gs,Fio),e(k,Tio),e(k,hs),e(hs,use),e(use,Mio),e(hs,Eio),e(hs,SB),e(SB,Cio),e(hs,wio),e(hs,RB),e(RB,Aio),e(hs,Lio),e(k,yio),e(k,th),e(th,bse),e(bse,xio),e(th,$io),e(th,PB),e(PB,kio),e(th,Sio),e(k,Rio),e(k,ps),e(ps,vse),e(vse,Pio),e(ps,Bio),e(ps,BB),e(BB,Iio),e(ps,Nio),e(ps,IB),e(IB,qio),e(ps,jio),e(k,Dio),e(k,ah),e(ah,Fse),e(Fse,Gio),e(ah,Oio),e(ah,NB),e(NB,Vio),e(ah,Xio),e(k,zio),e(k,nh),e(nh,Tse),e(Tse,Wio),e(nh,Qio),e(nh,qB),e(qB,Hio),e(nh,Uio),e(k,Jio),e(k,_s),e(_s,Mse),e(Mse,Yio),e(_s,Kio),e(_s,jB),e(jB,Zio),e(_s,edo),e(_s,DB),e(DB,odo),e(_s,rdo),e(k,tdo),e(k,us),e(us,Ese),e(Ese,ado),e(us,ndo),e(us,GB),e(GB,sdo),e(us,ldo),e(us,OB),e(OB,ido),e(us,ddo),e(k,cdo),e(k,bs),e(bs,Cse),e(Cse,fdo),e(bs,mdo),e(bs,VB),e(VB,gdo),e(bs,hdo),e(bs,XB),e(XB,pdo),e(bs,_do),e(k,udo),e(k,sh),e(sh,wse),e(wse,bdo),e(sh,vdo),e(sh,zB),e(zB,Fdo),e(sh,Tdo),e(k,Mdo),e(k,vs),e(vs,Ase),e(Ase,Edo),e(vs,Cdo),e(vs,WB),e(WB,wdo),e(vs,Ado),e(vs,QB),e(QB,Ldo),e(vs,ydo),e(k,xdo),e(k,Fs),e(Fs,Lse),e(Lse,$do),e(Fs,kdo),e(Fs,HB),e(HB,Sdo),e(Fs,Rdo),e(Fs,UB),e(UB,Pdo),e(Fs,Bdo),e(k,Ido),e(k,Ts),e(Ts,yse),e(yse,Ndo),e(Ts,qdo),e(Ts,JB),e(JB,jdo),e(Ts,Ddo),e(Ts,YB),e(YB,Gdo),e(Ts,Odo),e(k,Vdo),e(k,Ms),e(Ms,xse),e(xse,Xdo),e(Ms,zdo),e(Ms,KB),e(KB,Wdo),e(Ms,Qdo),e(Ms,ZB),e(ZB,Hdo),e(Ms,Udo),e(k,Jdo),e(k,Es),e(Es,$se),e($se,Ydo),e(Es,Kdo),e(Es,eI),e(eI,Zdo),e(Es,eco),e(Es,oI),e(oI,oco),e(Es,rco),e(k,tco),e(k,lh),e(lh,kse),e(kse,aco),e(lh,nco),e(lh,rI),e(rI,sco),e(lh,lco),e(k,ico),e(k,Cs),e(Cs,Sse),e(Sse,dco),e(Cs,cco),e(Cs,tI),e(tI,fco),e(Cs,mco),e(Cs,aI),e(aI,gco),e(Cs,hco),e(k,pco),e(k,ih),e(ih,Rse),e(Rse,_co),e(ih,uco),e(ih,nI),e(nI,bco),e(ih,vco),e(k,Fco),e(k,dh),e(dh,Pse),e(Pse,Tco),e(dh,Mco),e(dh,sI),e(sI,Eco),e(dh,Cco),e(k,wco),e(k,ch),e(ch,Bse),e(Bse,Aco),e(ch,Lco),e(ch,lI),e(lI,yco),e(ch,xco),e(k,$co),e(k,fh),e(fh,Ise),e(Ise,kco),e(fh,Sco),e(fh,iI),e(iI,Rco),e(fh,Pco),e(k,Bco),e(k,ws),e(ws,Nse),e(Nse,Ico),e(ws,Nco),e(ws,dI),e(dI,qco),e(ws,jco),e(ws,cI),e(cI,Dco),e(ws,Gco),e(k,Oco),e(k,mh),e(mh,qse),e(qse,Vco),e(mh,Xco),e(mh,fI),e(fI,zco),e(mh,Wco),e(k,Qco),e(k,As),e(As,jse),e(jse,Hco),e(As,Uco),e(As,mI),e(mI,Jco),e(As,Yco),e(As,gI),e(gI,Kco),e(As,Zco),e(k,efo),e(k,Ls),e(Ls,Dse),e(Dse,ofo),e(Ls,rfo),e(Ls,hI),e(hI,tfo),e(Ls,afo),e(Ls,pI),e(pI,nfo),e(Ls,sfo),e(k,lfo),e(k,ys),e(ys,Gse),e(Gse,ifo),e(ys,dfo),e(ys,_I),e(_I,cfo),e(ys,ffo),e(ys,uI),e(uI,mfo),e(ys,gfo),e(k,hfo),e(k,xs),e(xs,Ose),e(Ose,pfo),e(xs,_fo),e(xs,bI),e(bI,ufo),e(xs,bfo),e(xs,vI),e(vI,vfo),e(xs,Ffo),e(k,Tfo),e(k,$s),e($s,Vse),e(Vse,Mfo),e($s,Efo),e($s,FI),e(FI,Cfo),e($s,wfo),e($s,TI),e(TI,Afo),e($s,Lfo),e(k,yfo),e(k,ks),e(ks,Xse),e(Xse,xfo),e(ks,$fo),e(ks,MI),e(MI,kfo),e(ks,Sfo),e(ks,EI),e(EI,Rfo),e(ks,Pfo),e(k,Bfo),e(k,gh),e(gh,zse),e(zse,Ifo),e(gh,Nfo),e(gh,CI),e(CI,qfo),e(gh,jfo),e(k,Dfo),e(k,hh),e(hh,Wse),e(Wse,Gfo),e(hh,Ofo),e(hh,wI),e(wI,Vfo),e(hh,Xfo),e(k,zfo),e(k,Ss),e(Ss,Qse),e(Qse,Wfo),e(Ss,Qfo),e(Ss,AI),e(AI,Hfo),e(Ss,Ufo),e(Ss,LI),e(LI,Jfo),e(Ss,Yfo),e(k,Kfo),e(k,Rs),e(Rs,Hse),e(Hse,Zfo),e(Rs,emo),e(Rs,yI),e(yI,omo),e(Rs,rmo),e(Rs,xI),e(xI,tmo),e(Rs,amo),e(k,nmo),e(k,Ps),e(Ps,Use),e(Use,smo),e(Ps,lmo),e(Ps,$I),e($I,imo),e(Ps,dmo),e(Ps,kI),e(kI,cmo),e(Ps,fmo),e(k,mmo),e(k,ph),e(ph,Jse),e(Jse,gmo),e(ph,hmo),e(ph,SI),e(SI,pmo),e(ph,_mo),e(k,umo),e(k,_h),e(_h,Yse),e(Yse,bmo),e(_h,vmo),e(_h,RI),e(RI,Fmo),e(_h,Tmo),e(k,Mmo),e(k,uh),e(uh,Kse),e(Kse,Emo),e(uh,Cmo),e(uh,PI),e(PI,wmo),e(uh,Amo),e(k,Lmo),e(k,Bs),e(Bs,Zse),e(Zse,ymo),e(Bs,xmo),e(Bs,BI),e(BI,$mo),e(Bs,kmo),e(Bs,II),e(II,Smo),e(Bs,Rmo),e(k,Pmo),e(k,Is),e(Is,ele),e(ele,Bmo),e(Is,Imo),e(Is,NI),e(NI,Nmo),e(Is,qmo),e(Is,qI),e(qI,jmo),e(Is,Dmo),e(k,Gmo),e(k,bh),e(bh,ole),e(ole,Omo),e(bh,Vmo),e(bh,jI),e(jI,Xmo),e(bh,zmo),e(k,Wmo),e(k,vh),e(vh,rle),e(rle,Qmo),e(vh,Hmo),e(vh,DI),e(DI,Umo),e(vh,Jmo),e(k,Ymo),e(k,Fh),e(Fh,tle),e(tle,Kmo),e(Fh,Zmo),e(Fh,GI),e(GI,ego),e(Fh,ogo),e(k,rgo),e(k,Ns),e(Ns,ale),e(ale,tgo),e(Ns,ago),e(Ns,OI),e(OI,ngo),e(Ns,sgo),e(Ns,VI),e(VI,lgo),e(Ns,igo),e(k,dgo),e(k,Th),e(Th,nle),e(nle,cgo),e(Th,fgo),e(Th,XI),e(XI,mgo),e(Th,ggo),e(k,hgo),e(k,Mh),e(Mh,sle),e(sle,pgo),e(Mh,_go),e(Mh,zI),e(zI,ugo),e(Mh,bgo),e(k,vgo),e(k,qs),e(qs,lle),e(lle,Fgo),e(qs,Tgo),e(qs,WI),e(WI,Mgo),e(qs,Ego),e(qs,QI),e(QI,Cgo),e(qs,wgo),e(k,Ago),e(k,js),e(js,ile),e(ile,Lgo),e(js,ygo),e(js,HI),e(HI,xgo),e(js,$go),e(js,UI),e(UI,kgo),e(js,Sgo),e(k,Rgo),e(k,Ds),e(Ds,dle),e(dle,Pgo),e(Ds,Bgo),e(Ds,JI),e(JI,Igo),e(Ds,Ngo),e(Ds,YI),e(YI,qgo),e(Ds,jgo),e(k,Dgo),e(k,Gs),e(Gs,cle),e(cle,Ggo),e(Gs,Ogo),e(Gs,KI),e(KI,Vgo),e(Gs,Xgo),e(Gs,ZI),e(ZI,zgo),e(Gs,Wgo),e(Ar,Qgo),M(Eh,Ar,null),e(Ao,Hgo),e(Ao,Ch),M(DA,Ch,null),e(Ch,Ugo),e(Ch,fle),e(fle,Jgo),b(f,BGe,u),b(f,Ri,u),e(Ri,wh),e(wh,mle),M(GA,mle,null),e(Ri,Ygo),e(Ri,gle),e(gle,Kgo),b(f,IGe,u),b(f,Lo,u),M(OA,Lo,null),e(Lo,Zgo),e(Lo,VA),e(VA,eho),e(VA,eN),e(eN,oho),e(VA,rho),e(Lo,tho),e(Lo,XA),e(XA,aho),e(XA,hle),e(hle,nho),e(XA,sho),e(Lo,lho),e(Lo,He),M(zA,He,null),e(He,iho),e(He,ple),e(ple,dho),e(He,cho),e(He,Sa),e(Sa,fho),e(Sa,_le),e(_le,mho),e(Sa,gho),e(Sa,ule),e(ule,hho),e(Sa,pho),e(Sa,ble),e(ble,_ho),e(Sa,uho),e(He,bho),e(He,Y),e(Y,Ah),e(Ah,vle),e(vle,vho),e(Ah,Fho),e(Ah,oN),e(oN,Tho),e(Ah,Mho),e(Y,Eho),e(Y,Lh),e(Lh,Fle),e(Fle,Cho),e(Lh,who),e(Lh,rN),e(rN,Aho),e(Lh,Lho),e(Y,yho),e(Y,yh),e(yh,Tle),e(Tle,xho),e(yh,$ho),e(yh,tN),e(tN,kho),e(yh,Sho),e(Y,Rho),e(Y,xh),e(xh,Mle),e(Mle,Pho),e(xh,Bho),e(xh,aN),e(aN,Iho),e(xh,Nho),e(Y,qho),e(Y,$h),e($h,Ele),e(Ele,jho),e($h,Dho),e($h,nN),e(nN,Gho),e($h,Oho),e(Y,Vho),e(Y,kh),e(kh,Cle),e(Cle,Xho),e(kh,zho),e(kh,sN),e(sN,Who),e(kh,Qho),e(Y,Hho),e(Y,Sh),e(Sh,wle),e(wle,Uho),e(Sh,Jho),e(Sh,lN),e(lN,Yho),e(Sh,Kho),e(Y,Zho),e(Y,Rh),e(Rh,Ale),e(Ale,epo),e(Rh,opo),e(Rh,iN),e(iN,rpo),e(Rh,tpo),e(Y,apo),e(Y,Ph),e(Ph,Lle),e(Lle,npo),e(Ph,spo),e(Ph,dN),e(dN,lpo),e(Ph,ipo),e(Y,dpo),e(Y,Bh),e(Bh,yle),e(yle,cpo),e(Bh,fpo),e(Bh,cN),e(cN,mpo),e(Bh,gpo),e(Y,hpo),e(Y,Ih),e(Ih,xle),e(xle,ppo),e(Ih,_po),e(Ih,fN),e(fN,upo),e(Ih,bpo),e(Y,vpo),e(Y,Nh),e(Nh,$le),e($le,Fpo),e(Nh,Tpo),e(Nh,mN),e(mN,Mpo),e(Nh,Epo),e(Y,Cpo),e(Y,qh),e(qh,kle),e(kle,wpo),e(qh,Apo),e(qh,gN),e(gN,Lpo),e(qh,ypo),e(Y,xpo),e(Y,jh),e(jh,Sle),e(Sle,$po),e(jh,kpo),e(jh,hN),e(hN,Spo),e(jh,Rpo),e(Y,Ppo),e(Y,Dh),e(Dh,Rle),e(Rle,Bpo),e(Dh,Ipo),e(Dh,pN),e(pN,Npo),e(Dh,qpo),e(Y,jpo),e(Y,Gh),e(Gh,Ple),e(Ple,Dpo),e(Gh,Gpo),e(Gh,_N),e(_N,Opo),e(Gh,Vpo),e(Y,Xpo),e(Y,Oh),e(Oh,Ble),e(Ble,zpo),e(Oh,Wpo),e(Oh,uN),e(uN,Qpo),e(Oh,Hpo),e(Y,Upo),e(Y,Vh),e(Vh,Ile),e(Ile,Jpo),e(Vh,Ypo),e(Vh,bN),e(bN,Kpo),e(Vh,Zpo),e(Y,e_o),e(Y,Xh),e(Xh,Nle),e(Nle,o_o),e(Xh,r_o),e(Xh,vN),e(vN,t_o),e(Xh,a_o),e(Y,n_o),e(Y,zh),e(zh,qle),e(qle,s_o),e(zh,l_o),e(zh,FN),e(FN,i_o),e(zh,d_o),e(Y,c_o),e(Y,Wh),e(Wh,jle),e(jle,f_o),e(Wh,m_o),e(Wh,TN),e(TN,g_o),e(Wh,h_o),e(Y,p_o),e(Y,Qh),e(Qh,Dle),e(Dle,__o),e(Qh,u_o),e(Qh,MN),e(MN,b_o),e(Qh,v_o),e(Y,F_o),e(Y,Hh),e(Hh,Gle),e(Gle,T_o),e(Hh,M_o),e(Hh,EN),e(EN,E_o),e(Hh,C_o),e(Y,w_o),e(Y,Uh),e(Uh,Ole),e(Ole,A_o),e(Uh,L_o),e(Uh,CN),e(CN,y_o),e(Uh,x_o),e(Y,$_o),e(Y,Jh),e(Jh,Vle),e(Vle,k_o),e(Jh,S_o),e(Jh,wN),e(wN,R_o),e(Jh,P_o),e(Y,B_o),e(Y,Yh),e(Yh,Xle),e(Xle,I_o),e(Yh,N_o),e(Yh,AN),e(AN,q_o),e(Yh,j_o),e(Y,D_o),e(Y,Kh),e(Kh,zle),e(zle,G_o),e(Kh,O_o),e(Kh,LN),e(LN,V_o),e(Kh,X_o),e(Y,z_o),e(Y,Zh),e(Zh,Wle),e(Wle,W_o),e(Zh,Q_o),e(Zh,yN),e(yN,H_o),e(Zh,U_o),e(Y,J_o),e(Y,ep),e(ep,Qle),e(Qle,Y_o),e(ep,K_o),e(ep,xN),e(xN,Z_o),e(ep,euo),e(Y,ouo),e(Y,op),e(op,Hle),e(Hle,ruo),e(op,tuo),e(op,$N),e($N,auo),e(op,nuo),e(Y,suo),e(Y,rp),e(rp,Ule),e(Ule,luo),e(rp,iuo),e(rp,kN),e(kN,duo),e(rp,cuo),e(Y,fuo),e(Y,tp),e(tp,Jle),e(Jle,muo),e(tp,guo),e(tp,SN),e(SN,huo),e(tp,puo),e(Y,_uo),e(Y,ap),e(ap,Yle),e(Yle,uuo),e(ap,buo),e(ap,RN),e(RN,vuo),e(ap,Fuo),e(He,Tuo),M(np,He,null),e(He,Muo),M(sp,He,null),e(Lo,Euo),e(Lo,lp),M(WA,lp,null),e(lp,Cuo),e(lp,Kle),e(Kle,wuo),b(f,NGe,u),b(f,Pi,u),e(Pi,ip),e(ip,Zle),M(QA,Zle,null),e(Pi,Auo),e(Pi,eie),e(eie,Luo),b(f,qGe,u),b(f,yo,u),M(HA,yo,null),e(yo,yuo),e(yo,UA),e(UA,xuo),e(UA,PN),e(PN,$uo),e(UA,kuo),e(yo,Suo),e(yo,JA),e(JA,Ruo),e(JA,oie),e(oie,Puo),e(JA,Buo),e(yo,Iuo),e(yo,Ue),M(YA,Ue,null),e(Ue,Nuo),e(Ue,rie),e(rie,quo),e(Ue,juo),e(Ue,Bi),e(Bi,Duo),e(Bi,tie),e(tie,Guo),e(Bi,Ouo),e(Bi,aie),e(aie,Vuo),e(Bi,Xuo),e(Ue,zuo),e(Ue,he),e(he,dp),e(dp,nie),e(nie,Wuo),e(dp,Quo),e(dp,BN),e(BN,Huo),e(dp,Uuo),e(he,Juo),e(he,cp),e(cp,sie),e(sie,Yuo),e(cp,Kuo),e(cp,lie),e(lie,Zuo),e(cp,e1o),e(he,o1o),e(he,fp),e(fp,iie),e(iie,r1o),e(fp,t1o),e(fp,IN),e(IN,a1o),e(fp,n1o),e(he,s1o),e(he,mp),e(mp,die),e(die,l1o),e(mp,i1o),e(mp,NN),e(NN,d1o),e(mp,c1o),e(he,f1o),e(he,gp),e(gp,cie),e(cie,m1o),e(gp,g1o),e(gp,qN),e(qN,h1o),e(gp,p1o),e(he,_1o),e(he,hp),e(hp,fie),e(fie,u1o),e(hp,b1o),e(hp,jN),e(jN,v1o),e(hp,F1o),e(he,T1o),e(he,pp),e(pp,mie),e(mie,M1o),e(pp,E1o),e(pp,DN),e(DN,C1o),e(pp,w1o),e(he,A1o),e(he,_p),e(_p,gie),e(gie,L1o),e(_p,y1o),e(_p,GN),e(GN,x1o),e(_p,$1o),e(he,k1o),e(he,up),e(up,hie),e(hie,S1o),e(up,R1o),e(up,ON),e(ON,P1o),e(up,B1o),e(he,I1o),e(he,bp),e(bp,pie),e(pie,N1o),e(bp,q1o),e(bp,VN),e(VN,j1o),e(bp,D1o),e(he,G1o),e(he,vp),e(vp,_ie),e(_ie,O1o),e(vp,V1o),e(vp,XN),e(XN,X1o),e(vp,z1o),e(he,W1o),e(he,Fp),e(Fp,uie),e(uie,Q1o),e(Fp,H1o),e(Fp,zN),e(zN,U1o),e(Fp,J1o),e(he,Y1o),e(he,Tp),e(Tp,bie),e(bie,K1o),e(Tp,Z1o),e(Tp,WN),e(WN,e2o),e(Tp,o2o),e(he,r2o),e(he,Mp),e(Mp,vie),e(vie,t2o),e(Mp,a2o),e(Mp,QN),e(QN,n2o),e(Mp,s2o),e(he,l2o),e(he,Ep),e(Ep,Fie),e(Fie,i2o),e(Ep,d2o),e(Ep,HN),e(HN,c2o),e(Ep,f2o),e(he,m2o),e(he,Cp),e(Cp,Tie),e(Tie,g2o),e(Cp,h2o),e(Cp,UN),e(UN,p2o),e(Cp,_2o),e(he,u2o),e(he,wp),e(wp,Mie),e(Mie,b2o),e(wp,v2o),e(wp,JN),e(JN,F2o),e(wp,T2o),e(Ue,M2o),M(Ap,Ue,null),e(Ue,E2o),M(Lp,Ue,null),e(yo,C2o),e(yo,yp),M(KA,yp,null),e(yp,w2o),e(yp,Eie),e(Eie,A2o),b(f,jGe,u),b(f,Ii,u),e(Ii,xp),e(xp,Cie),M(ZA,Cie,null),e(Ii,L2o),e(Ii,wie),e(wie,y2o),b(f,DGe,u),b(f,xo,u),M(eL,xo,null),e(xo,x2o),e(xo,Ni),e(Ni,$2o),e(Ni,YN),e(YN,k2o),e(Ni,S2o),e(Ni,KN),e(KN,R2o),e(Ni,P2o),e(xo,B2o),e(xo,oL),e(oL,I2o),e(oL,Aie),e(Aie,N2o),e(oL,q2o),e(xo,j2o),e(xo,st),M(rL,st,null),e(st,D2o),e(st,Lie),e(Lie,G2o),e(st,O2o),e(st,qi),e(qi,V2o),e(qi,yie),e(yie,X2o),e(qi,z2o),e(qi,ZN),e(ZN,W2o),e(qi,Q2o),e(st,H2o),M($p,st,null),e(xo,U2o),e(xo,Je),M(tL,Je,null),e(Je,J2o),e(Je,xie),e(xie,Y2o),e(Je,K2o),e(Je,Ra),e(Ra,Z2o),e(Ra,$ie),e($ie,ebo),e(Ra,obo),e(Ra,kie),e(kie,rbo),e(Ra,tbo),e(Ra,Sie),e(Sie,abo),e(Ra,nbo),e(Je,sbo),e(Je,y),e(y,kp),e(kp,Rie),e(Rie,lbo),e(kp,ibo),e(kp,eq),e(eq,dbo),e(kp,cbo),e(y,fbo),e(y,Sp),e(Sp,Pie),e(Pie,mbo),e(Sp,gbo),e(Sp,oq),e(oq,hbo),e(Sp,pbo),e(y,_bo),e(y,Rp),e(Rp,Bie),e(Bie,ubo),e(Rp,bbo),e(Rp,rq),e(rq,vbo),e(Rp,Fbo),e(y,Tbo),e(y,Pp),e(Pp,Iie),e(Iie,Mbo),e(Pp,Ebo),e(Pp,tq),e(tq,Cbo),e(Pp,wbo),e(y,Abo),e(y,Bp),e(Bp,Nie),e(Nie,Lbo),e(Bp,ybo),e(Bp,aq),e(aq,xbo),e(Bp,$bo),e(y,kbo),e(y,Ip),e(Ip,qie),e(qie,Sbo),e(Ip,Rbo),e(Ip,nq),e(nq,Pbo),e(Ip,Bbo),e(y,Ibo),e(y,Np),e(Np,jie),e(jie,Nbo),e(Np,qbo),e(Np,sq),e(sq,jbo),e(Np,Dbo),e(y,Gbo),e(y,qp),e(qp,Die),e(Die,Obo),e(qp,Vbo),e(qp,lq),e(lq,Xbo),e(qp,zbo),e(y,Wbo),e(y,jp),e(jp,Gie),e(Gie,Qbo),e(jp,Hbo),e(jp,iq),e(iq,Ubo),e(jp,Jbo),e(y,Ybo),e(y,Dp),e(Dp,Oie),e(Oie,Kbo),e(Dp,Zbo),e(Dp,dq),e(dq,e4o),e(Dp,o4o),e(y,r4o),e(y,Gp),e(Gp,Vie),e(Vie,t4o),e(Gp,a4o),e(Gp,cq),e(cq,n4o),e(Gp,s4o),e(y,l4o),e(y,Op),e(Op,Xie),e(Xie,i4o),e(Op,d4o),e(Op,fq),e(fq,c4o),e(Op,f4o),e(y,m4o),e(y,Vp),e(Vp,zie),e(zie,g4o),e(Vp,h4o),e(Vp,mq),e(mq,p4o),e(Vp,_4o),e(y,u4o),e(y,Xp),e(Xp,Wie),e(Wie,b4o),e(Xp,v4o),e(Xp,gq),e(gq,F4o),e(Xp,T4o),e(y,M4o),e(y,zp),e(zp,Qie),e(Qie,E4o),e(zp,C4o),e(zp,hq),e(hq,w4o),e(zp,A4o),e(y,L4o),e(y,Wp),e(Wp,Hie),e(Hie,y4o),e(Wp,x4o),e(Wp,pq),e(pq,$4o),e(Wp,k4o),e(y,S4o),e(y,Qp),e(Qp,Uie),e(Uie,R4o),e(Qp,P4o),e(Qp,_q),e(_q,B4o),e(Qp,I4o),e(y,N4o),e(y,Hp),e(Hp,Jie),e(Jie,q4o),e(Hp,j4o),e(Hp,uq),e(uq,D4o),e(Hp,G4o),e(y,O4o),e(y,Up),e(Up,Yie),e(Yie,V4o),e(Up,X4o),e(Up,bq),e(bq,z4o),e(Up,W4o),e(y,Q4o),e(y,Jp),e(Jp,Kie),e(Kie,H4o),e(Jp,U4o),e(Jp,vq),e(vq,J4o),e(Jp,Y4o),e(y,K4o),e(y,Yp),e(Yp,Zie),e(Zie,Z4o),e(Yp,evo),e(Yp,Fq),e(Fq,ovo),e(Yp,rvo),e(y,tvo),e(y,Kp),e(Kp,ede),e(ede,avo),e(Kp,nvo),e(Kp,Tq),e(Tq,svo),e(Kp,lvo),e(y,ivo),e(y,Zp),e(Zp,ode),e(ode,dvo),e(Zp,cvo),e(Zp,Mq),e(Mq,fvo),e(Zp,mvo),e(y,gvo),e(y,e_),e(e_,rde),e(rde,hvo),e(e_,pvo),e(e_,Eq),e(Eq,_vo),e(e_,uvo),e(y,bvo),e(y,o_),e(o_,tde),e(tde,vvo),e(o_,Fvo),e(o_,Cq),e(Cq,Tvo),e(o_,Mvo),e(y,Evo),e(y,r_),e(r_,ade),e(ade,Cvo),e(r_,wvo),e(r_,wq),e(wq,Avo),e(r_,Lvo),e(y,yvo),e(y,t_),e(t_,nde),e(nde,xvo),e(t_,$vo),e(t_,Aq),e(Aq,kvo),e(t_,Svo),e(y,Rvo),e(y,a_),e(a_,sde),e(sde,Pvo),e(a_,Bvo),e(a_,Lq),e(Lq,Ivo),e(a_,Nvo),e(y,qvo),e(y,n_),e(n_,lde),e(lde,jvo),e(n_,Dvo),e(n_,yq),e(yq,Gvo),e(n_,Ovo),e(y,Vvo),e(y,s_),e(s_,ide),e(ide,Xvo),e(s_,zvo),e(s_,xq),e(xq,Wvo),e(s_,Qvo),e(y,Hvo),e(y,l_),e(l_,dde),e(dde,Uvo),e(l_,Jvo),e(l_,$q),e($q,Yvo),e(l_,Kvo),e(y,Zvo),e(y,i_),e(i_,cde),e(cde,eFo),e(i_,oFo),e(i_,kq),e(kq,rFo),e(i_,tFo),e(y,aFo),e(y,d_),e(d_,fde),e(fde,nFo),e(d_,sFo),e(d_,Sq),e(Sq,lFo),e(d_,iFo),e(y,dFo),e(y,Os),e(Os,mde),e(mde,cFo),e(Os,fFo),e(Os,Rq),e(Rq,mFo),e(Os,gFo),e(Os,Pq),e(Pq,hFo),e(Os,pFo),e(y,_Fo),e(y,c_),e(c_,gde),e(gde,uFo),e(c_,bFo),e(c_,Bq),e(Bq,vFo),e(c_,FFo),e(y,TFo),e(y,f_),e(f_,hde),e(hde,MFo),e(f_,EFo),e(f_,Iq),e(Iq,CFo),e(f_,wFo),e(y,AFo),e(y,m_),e(m_,pde),e(pde,LFo),e(m_,yFo),e(m_,Nq),e(Nq,xFo),e(m_,$Fo),e(y,kFo),e(y,g_),e(g_,_de),e(_de,SFo),e(g_,RFo),e(g_,qq),e(qq,PFo),e(g_,BFo),e(y,IFo),e(y,h_),e(h_,ude),e(ude,NFo),e(h_,qFo),e(h_,jq),e(jq,jFo),e(h_,DFo),e(y,GFo),e(y,p_),e(p_,bde),e(bde,OFo),e(p_,VFo),e(p_,Dq),e(Dq,XFo),e(p_,zFo),e(y,WFo),e(y,__),e(__,vde),e(vde,QFo),e(__,HFo),e(__,Gq),e(Gq,UFo),e(__,JFo),e(y,YFo),e(y,u_),e(u_,Fde),e(Fde,KFo),e(u_,ZFo),e(u_,Oq),e(Oq,e6o),e(u_,o6o),e(y,r6o),e(y,b_),e(b_,Tde),e(Tde,t6o),e(b_,a6o),e(b_,Vq),e(Vq,n6o),e(b_,s6o),e(y,l6o),e(y,v_),e(v_,Mde),e(Mde,i6o),e(v_,d6o),e(v_,Xq),e(Xq,c6o),e(v_,f6o),e(y,m6o),e(y,F_),e(F_,Ede),e(Ede,g6o),e(F_,h6o),e(F_,zq),e(zq,p6o),e(F_,_6o),e(y,u6o),e(y,T_),e(T_,Cde),e(Cde,b6o),e(T_,v6o),e(T_,Wq),e(Wq,F6o),e(T_,T6o),e(y,M6o),e(y,M_),e(M_,wde),e(wde,E6o),e(M_,C6o),e(M_,Qq),e(Qq,w6o),e(M_,A6o),e(y,L6o),e(y,E_),e(E_,Ade),e(Ade,y6o),e(E_,x6o),e(E_,Hq),e(Hq,$6o),e(E_,k6o),e(y,S6o),e(y,C_),e(C_,Lde),e(Lde,R6o),e(C_,P6o),e(C_,Uq),e(Uq,B6o),e(C_,I6o),e(y,N6o),e(y,w_),e(w_,yde),e(yde,q6o),e(w_,j6o),e(w_,Jq),e(Jq,D6o),e(w_,G6o),e(y,O6o),e(y,A_),e(A_,xde),e(xde,V6o),e(A_,X6o),e(A_,Yq),e(Yq,z6o),e(A_,W6o),e(y,Q6o),e(y,L_),e(L_,$de),e($de,H6o),e(L_,U6o),e(L_,Kq),e(Kq,J6o),e(L_,Y6o),e(y,K6o),e(y,y_),e(y_,kde),e(kde,Z6o),e(y_,eTo),e(y_,Zq),e(Zq,oTo),e(y_,rTo),e(y,tTo),e(y,x_),e(x_,Sde),e(Sde,aTo),e(x_,nTo),e(x_,ej),e(ej,sTo),e(x_,lTo),e(y,iTo),e(y,$_),e($_,Rde),e(Rde,dTo),e($_,cTo),e($_,oj),e(oj,fTo),e($_,mTo),e(y,gTo),e(y,k_),e(k_,Pde),e(Pde,hTo),e(k_,pTo),e(k_,rj),e(rj,_To),e(k_,uTo),e(y,bTo),e(y,S_),e(S_,Bde),e(Bde,vTo),e(S_,FTo),e(S_,tj),e(tj,TTo),e(S_,MTo),e(y,ETo),e(y,R_),e(R_,Ide),e(Ide,CTo),e(R_,wTo),e(R_,aj),e(aj,ATo),e(R_,LTo),e(y,yTo),e(y,P_),e(P_,Nde),e(Nde,xTo),e(P_,$To),e(P_,nj),e(nj,kTo),e(P_,STo),e(y,RTo),e(y,B_),e(B_,qde),e(qde,PTo),e(B_,BTo),e(B_,sj),e(sj,ITo),e(B_,NTo),e(y,qTo),e(y,I_),e(I_,jde),e(jde,jTo),e(I_,DTo),e(I_,lj),e(lj,GTo),e(I_,OTo),e(y,VTo),e(y,N_),e(N_,Dde),e(Dde,XTo),e(N_,zTo),e(N_,ij),e(ij,WTo),e(N_,QTo),e(y,HTo),e(y,q_),e(q_,Gde),e(Gde,UTo),e(q_,JTo),e(q_,dj),e(dj,YTo),e(q_,KTo),e(y,ZTo),e(y,j_),e(j_,Ode),e(Ode,e7o),e(j_,o7o),e(j_,cj),e(cj,r7o),e(j_,t7o),e(y,a7o),e(y,D_),e(D_,Vde),e(Vde,n7o),e(D_,s7o),e(D_,fj),e(fj,l7o),e(D_,i7o),e(y,d7o),e(y,G_),e(G_,Xde),e(Xde,c7o),e(G_,f7o),e(G_,mj),e(mj,m7o),e(G_,g7o),e(y,h7o),e(y,O_),e(O_,zde),e(zde,p7o),e(O_,_7o),e(O_,gj),e(gj,u7o),e(O_,b7o),e(y,v7o),e(y,V_),e(V_,Wde),e(Wde,F7o),e(V_,T7o),e(V_,hj),e(hj,M7o),e(V_,E7o),e(y,C7o),e(y,X_),e(X_,Qde),e(Qde,w7o),e(X_,A7o),e(X_,pj),e(pj,L7o),e(X_,y7o),e(y,x7o),e(y,z_),e(z_,Hde),e(Hde,$7o),e(z_,k7o),e(z_,_j),e(_j,S7o),e(z_,R7o),e(y,P7o),e(y,W_),e(W_,Ude),e(Ude,B7o),e(W_,I7o),e(W_,uj),e(uj,N7o),e(W_,q7o),e(y,j7o),e(y,Q_),e(Q_,Jde),e(Jde,D7o),e(Q_,G7o),e(Q_,bj),e(bj,O7o),e(Q_,V7o),e(y,X7o),e(y,H_),e(H_,Yde),e(Yde,z7o),e(H_,W7o),e(H_,vj),e(vj,Q7o),e(H_,H7o),e(y,U7o),e(y,U_),e(U_,Kde),e(Kde,J7o),e(U_,Y7o),e(U_,Fj),e(Fj,K7o),e(U_,Z7o),e(y,e9o),e(y,J_),e(J_,Zde),e(Zde,o9o),e(J_,r9o),e(J_,Tj),e(Tj,t9o),e(J_,a9o),e(y,n9o),e(y,Y_),e(Y_,ece),e(ece,s9o),e(Y_,l9o),e(Y_,Mj),e(Mj,i9o),e(Y_,d9o),e(y,c9o),e(y,K_),e(K_,oce),e(oce,f9o),e(K_,m9o),e(K_,Ej),e(Ej,g9o),e(K_,h9o),e(y,p9o),e(y,Z_),e(Z_,rce),e(rce,_9o),e(Z_,u9o),e(Z_,Cj),e(Cj,b9o),e(Z_,v9o),e(y,F9o),e(y,eu),e(eu,tce),e(tce,T9o),e(eu,M9o),e(eu,wj),e(wj,E9o),e(eu,C9o),e(y,w9o),e(y,ou),e(ou,ace),e(ace,A9o),e(ou,L9o),e(ou,Aj),e(Aj,y9o),e(ou,x9o),e(y,$9o),e(y,ru),e(ru,nce),e(nce,k9o),e(ru,S9o),e(ru,Lj),e(Lj,R9o),e(ru,P9o),e(y,B9o),e(y,tu),e(tu,sce),e(sce,I9o),e(tu,N9o),e(tu,yj),e(yj,q9o),e(tu,j9o),e(y,D9o),e(y,au),e(au,lce),e(lce,G9o),e(au,O9o),e(au,xj),e(xj,V9o),e(au,X9o),e(y,z9o),e(y,nu),e(nu,ice),e(ice,W9o),e(nu,Q9o),e(nu,$j),e($j,H9o),e(nu,U9o),e(y,J9o),e(y,su),e(su,dce),e(dce,Y9o),e(su,K9o),e(su,kj),e(kj,Z9o),e(su,eMo),e(y,oMo),e(y,lu),e(lu,cce),e(cce,rMo),e(lu,tMo),e(lu,Sj),e(Sj,aMo),e(lu,nMo),e(y,sMo),e(y,iu),e(iu,fce),e(fce,lMo),e(iu,iMo),e(iu,Rj),e(Rj,dMo),e(iu,cMo),e(y,fMo),e(y,du),e(du,mce),e(mce,mMo),e(du,gMo),e(du,Pj),e(Pj,hMo),e(du,pMo),e(y,_Mo),e(y,cu),e(cu,gce),e(gce,uMo),e(cu,bMo),e(cu,Bj),e(Bj,vMo),e(cu,FMo),e(y,TMo),e(y,fu),e(fu,hce),e(hce,MMo),e(fu,EMo),e(fu,Ij),e(Ij,CMo),e(fu,wMo),e(y,AMo),e(y,mu),e(mu,pce),e(pce,LMo),e(mu,yMo),e(mu,Nj),e(Nj,xMo),e(mu,$Mo),e(y,kMo),e(y,gu),e(gu,_ce),e(_ce,SMo),e(gu,RMo),e(gu,qj),e(qj,PMo),e(gu,BMo),e(y,IMo),e(y,hu),e(hu,uce),e(uce,NMo),e(hu,qMo),e(hu,jj),e(jj,jMo),e(hu,DMo),e(y,GMo),e(y,pu),e(pu,bce),e(bce,OMo),e(pu,VMo),e(pu,Dj),e(Dj,XMo),e(pu,zMo),e(y,WMo),e(y,_u),e(_u,vce),e(vce,QMo),e(_u,HMo),e(_u,Gj),e(Gj,UMo),e(_u,JMo),e(y,YMo),e(y,uu),e(uu,Fce),e(Fce,KMo),e(uu,ZMo),e(uu,Oj),e(Oj,eEo),e(uu,oEo),e(y,rEo),e(y,bu),e(bu,Tce),e(Tce,tEo),e(bu,aEo),e(bu,Vj),e(Vj,nEo),e(bu,sEo),e(y,lEo),e(y,vu),e(vu,Mce),e(Mce,iEo),e(vu,dEo),e(vu,Xj),e(Xj,cEo),e(vu,fEo),e(y,mEo),e(y,Fu),e(Fu,Ece),e(Ece,gEo),e(Fu,hEo),e(Fu,zj),e(zj,pEo),e(Fu,_Eo),e(y,uEo),e(y,Tu),e(Tu,Cce),e(Cce,bEo),e(Tu,vEo),e(Tu,Wj),e(Wj,FEo),e(Tu,TEo),e(y,MEo),e(y,Mu),e(Mu,wce),e(wce,EEo),e(Mu,CEo),e(Mu,Qj),e(Qj,wEo),e(Mu,AEo),e(y,LEo),e(y,Eu),e(Eu,Ace),e(Ace,yEo),e(Eu,xEo),e(Eu,Hj),e(Hj,$Eo),e(Eu,kEo),e(y,SEo),e(y,Cu),e(Cu,Lce),e(Lce,REo),e(Cu,PEo),e(Cu,Uj),e(Uj,BEo),e(Cu,IEo),e(y,NEo),e(y,wu),e(wu,yce),e(yce,qEo),e(wu,jEo),e(wu,Jj),e(Jj,DEo),e(wu,GEo),e(y,OEo),e(y,Au),e(Au,xce),e(xce,VEo),e(Au,XEo),e(Au,Yj),e(Yj,zEo),e(Au,WEo),e(y,QEo),e(y,Lu),e(Lu,$ce),e($ce,HEo),e(Lu,UEo),e(Lu,Kj),e(Kj,JEo),e(Lu,YEo),e(y,KEo),e(y,yu),e(yu,kce),e(kce,ZEo),e(yu,eCo),e(yu,Zj),e(Zj,oCo),e(yu,rCo),e(Je,tCo),e(Je,xu),e(xu,aCo),e(xu,Sce),e(Sce,nCo),e(xu,sCo),e(xu,Rce),e(Rce,lCo),e(Je,iCo),M($u,Je,null),b(f,GGe,u),b(f,ji,u),e(ji,ku),e(ku,Pce),M(aL,Pce,null),e(ji,dCo),e(ji,Bce),e(Bce,cCo),b(f,OGe,u),b(f,$o,u),M(nL,$o,null),e($o,fCo),e($o,Di),e(Di,mCo),e(Di,eD),e(eD,gCo),e(Di,hCo),e(Di,oD),e(oD,pCo),e(Di,_Co),e($o,uCo),e($o,sL),e(sL,bCo),e(sL,Ice),e(Ice,vCo),e(sL,FCo),e($o,TCo),e($o,lt),M(lL,lt,null),e(lt,MCo),e(lt,Nce),e(Nce,ECo),e(lt,CCo),e(lt,Gi),e(Gi,wCo),e(Gi,qce),e(qce,ACo),e(Gi,LCo),e(Gi,rD),e(rD,yCo),e(Gi,xCo),e(lt,$Co),M(Su,lt,null),e($o,kCo),e($o,Ye),M(iL,Ye,null),e(Ye,SCo),e(Ye,jce),e(jce,RCo),e(Ye,PCo),e(Ye,Pa),e(Pa,BCo),e(Pa,Dce),e(Dce,ICo),e(Pa,NCo),e(Pa,Gce),e(Gce,qCo),e(Pa,jCo),e(Pa,Oce),e(Oce,DCo),e(Pa,GCo),e(Ye,OCo),e(Ye,G),e(G,Ru),e(Ru,Vce),e(Vce,VCo),e(Ru,XCo),e(Ru,tD),e(tD,zCo),e(Ru,WCo),e(G,QCo),e(G,Pu),e(Pu,Xce),e(Xce,HCo),e(Pu,UCo),e(Pu,aD),e(aD,JCo),e(Pu,YCo),e(G,KCo),e(G,Bu),e(Bu,zce),e(zce,ZCo),e(Bu,e5o),e(Bu,nD),e(nD,o5o),e(Bu,r5o),e(G,t5o),e(G,Iu),e(Iu,Wce),e(Wce,a5o),e(Iu,n5o),e(Iu,sD),e(sD,s5o),e(Iu,l5o),e(G,i5o),e(G,Nu),e(Nu,Qce),e(Qce,d5o),e(Nu,c5o),e(Nu,lD),e(lD,f5o),e(Nu,m5o),e(G,g5o),e(G,qu),e(qu,Hce),e(Hce,h5o),e(qu,p5o),e(qu,iD),e(iD,_5o),e(qu,u5o),e(G,b5o),e(G,ju),e(ju,Uce),e(Uce,v5o),e(ju,F5o),e(ju,dD),e(dD,T5o),e(ju,M5o),e(G,E5o),e(G,Du),e(Du,Jce),e(Jce,C5o),e(Du,w5o),e(Du,cD),e(cD,A5o),e(Du,L5o),e(G,y5o),e(G,Gu),e(Gu,Yce),e(Yce,x5o),e(Gu,$5o),e(Gu,fD),e(fD,k5o),e(Gu,S5o),e(G,R5o),e(G,Ou),e(Ou,Kce),e(Kce,P5o),e(Ou,B5o),e(Ou,mD),e(mD,I5o),e(Ou,N5o),e(G,q5o),e(G,Vu),e(Vu,Zce),e(Zce,j5o),e(Vu,D5o),e(Vu,gD),e(gD,G5o),e(Vu,O5o),e(G,V5o),e(G,Xu),e(Xu,efe),e(efe,X5o),e(Xu,z5o),e(Xu,hD),e(hD,W5o),e(Xu,Q5o),e(G,H5o),e(G,zu),e(zu,ofe),e(ofe,U5o),e(zu,J5o),e(zu,pD),e(pD,Y5o),e(zu,K5o),e(G,Z5o),e(G,Wu),e(Wu,rfe),e(rfe,e3o),e(Wu,o3o),e(Wu,_D),e(_D,r3o),e(Wu,t3o),e(G,a3o),e(G,Qu),e(Qu,tfe),e(tfe,n3o),e(Qu,s3o),e(Qu,uD),e(uD,l3o),e(Qu,i3o),e(G,d3o),e(G,Hu),e(Hu,afe),e(afe,c3o),e(Hu,f3o),e(Hu,bD),e(bD,m3o),e(Hu,g3o),e(G,h3o),e(G,Uu),e(Uu,nfe),e(nfe,p3o),e(Uu,_3o),e(Uu,vD),e(vD,u3o),e(Uu,b3o),e(G,v3o),e(G,Ju),e(Ju,sfe),e(sfe,F3o),e(Ju,T3o),e(Ju,FD),e(FD,M3o),e(Ju,E3o),e(G,C3o),e(G,Yu),e(Yu,lfe),e(lfe,w3o),e(Yu,A3o),e(Yu,TD),e(TD,L3o),e(Yu,y3o),e(G,x3o),e(G,Ku),e(Ku,ife),e(ife,$3o),e(Ku,k3o),e(Ku,MD),e(MD,S3o),e(Ku,R3o),e(G,P3o),e(G,Zu),e(Zu,dfe),e(dfe,B3o),e(Zu,I3o),e(Zu,ED),e(ED,N3o),e(Zu,q3o),e(G,j3o),e(G,e1),e(e1,cfe),e(cfe,D3o),e(e1,G3o),e(e1,CD),e(CD,O3o),e(e1,V3o),e(G,X3o),e(G,o1),e(o1,ffe),e(ffe,z3o),e(o1,W3o),e(o1,wD),e(wD,Q3o),e(o1,H3o),e(G,U3o),e(G,r1),e(r1,mfe),e(mfe,J3o),e(r1,Y3o),e(r1,AD),e(AD,K3o),e(r1,Z3o),e(G,e0o),e(G,t1),e(t1,gfe),e(gfe,o0o),e(t1,r0o),e(t1,LD),e(LD,t0o),e(t1,a0o),e(G,n0o),e(G,a1),e(a1,hfe),e(hfe,s0o),e(a1,l0o),e(a1,yD),e(yD,i0o),e(a1,d0o),e(G,c0o),e(G,n1),e(n1,pfe),e(pfe,f0o),e(n1,m0o),e(n1,xD),e(xD,g0o),e(n1,h0o),e(G,p0o),e(G,s1),e(s1,_fe),e(_fe,_0o),e(s1,u0o),e(s1,$D),e($D,b0o),e(s1,v0o),e(G,F0o),e(G,l1),e(l1,ufe),e(ufe,T0o),e(l1,M0o),e(l1,kD),e(kD,E0o),e(l1,C0o),e(G,w0o),e(G,i1),e(i1,bfe),e(bfe,A0o),e(i1,L0o),e(i1,SD),e(SD,y0o),e(i1,x0o),e(G,$0o),e(G,d1),e(d1,vfe),e(vfe,k0o),e(d1,S0o),e(d1,RD),e(RD,R0o),e(d1,P0o),e(G,B0o),e(G,c1),e(c1,Ffe),e(Ffe,I0o),e(c1,N0o),e(c1,PD),e(PD,q0o),e(c1,j0o),e(G,D0o),e(G,f1),e(f1,Tfe),e(Tfe,G0o),e(f1,O0o),e(f1,BD),e(BD,V0o),e(f1,X0o),e(G,z0o),e(G,m1),e(m1,Mfe),e(Mfe,W0o),e(m1,Q0o),e(m1,ID),e(ID,H0o),e(m1,U0o),e(G,J0o),e(G,g1),e(g1,Efe),e(Efe,Y0o),e(g1,K0o),e(g1,ND),e(ND,Z0o),e(g1,ewo),e(G,owo),e(G,h1),e(h1,Cfe),e(Cfe,rwo),e(h1,two),e(h1,qD),e(qD,awo),e(h1,nwo),e(G,swo),e(G,p1),e(p1,wfe),e(wfe,lwo),e(p1,iwo),e(p1,jD),e(jD,dwo),e(p1,cwo),e(G,fwo),e(G,_1),e(_1,Afe),e(Afe,mwo),e(_1,gwo),e(_1,DD),e(DD,hwo),e(_1,pwo),e(G,_wo),e(G,u1),e(u1,Lfe),e(Lfe,uwo),e(u1,bwo),e(u1,GD),e(GD,vwo),e(u1,Fwo),e(G,Two),e(G,b1),e(b1,yfe),e(yfe,Mwo),e(b1,Ewo),e(b1,OD),e(OD,Cwo),e(b1,wwo),e(G,Awo),e(G,v1),e(v1,xfe),e(xfe,Lwo),e(v1,ywo),e(v1,VD),e(VD,xwo),e(v1,$wo),e(G,kwo),e(G,F1),e(F1,$fe),e($fe,Swo),e(F1,Rwo),e(F1,XD),e(XD,Pwo),e(F1,Bwo),e(G,Iwo),e(G,T1),e(T1,kfe),e(kfe,Nwo),e(T1,qwo),e(T1,zD),e(zD,jwo),e(T1,Dwo),e(Ye,Gwo),e(Ye,M1),e(M1,Owo),e(M1,Sfe),e(Sfe,Vwo),e(M1,Xwo),e(M1,Rfe),e(Rfe,zwo),e(Ye,Wwo),M(E1,Ye,null),b(f,VGe,u),b(f,Oi,u),e(Oi,C1),e(C1,Pfe),M(dL,Pfe,null),e(Oi,Qwo),e(Oi,Bfe),e(Bfe,Hwo),b(f,XGe,u),b(f,ko,u),M(cL,ko,null),e(ko,Uwo),e(ko,Vi),e(Vi,Jwo),e(Vi,WD),e(WD,Ywo),e(Vi,Kwo),e(Vi,QD),e(QD,Zwo),e(Vi,eAo),e(ko,oAo),e(ko,fL),e(fL,rAo),e(fL,Ife),e(Ife,tAo),e(fL,aAo),e(ko,nAo),e(ko,it),M(mL,it,null),e(it,sAo),e(it,Nfe),e(Nfe,lAo),e(it,iAo),e(it,Xi),e(Xi,dAo),e(Xi,qfe),e(qfe,cAo),e(Xi,fAo),e(Xi,HD),e(HD,mAo),e(Xi,gAo),e(it,hAo),M(w1,it,null),e(ko,pAo),e(ko,Ke),M(gL,Ke,null),e(Ke,_Ao),e(Ke,jfe),e(jfe,uAo),e(Ke,bAo),e(Ke,Ba),e(Ba,vAo),e(Ba,Dfe),e(Dfe,FAo),e(Ba,TAo),e(Ba,Gfe),e(Gfe,MAo),e(Ba,EAo),e(Ba,Ofe),e(Ofe,CAo),e(Ba,wAo),e(Ke,AAo),e(Ke,z),e(z,A1),e(A1,Vfe),e(Vfe,LAo),e(A1,yAo),e(A1,UD),e(UD,xAo),e(A1,$Ao),e(z,kAo),e(z,L1),e(L1,Xfe),e(Xfe,SAo),e(L1,RAo),e(L1,JD),e(JD,PAo),e(L1,BAo),e(z,IAo),e(z,y1),e(y1,zfe),e(zfe,NAo),e(y1,qAo),e(y1,YD),e(YD,jAo),e(y1,DAo),e(z,GAo),e(z,x1),e(x1,Wfe),e(Wfe,OAo),e(x1,VAo),e(x1,KD),e(KD,XAo),e(x1,zAo),e(z,WAo),e(z,$1),e($1,Qfe),e(Qfe,QAo),e($1,HAo),e($1,ZD),e(ZD,UAo),e($1,JAo),e(z,YAo),e(z,k1),e(k1,Hfe),e(Hfe,KAo),e(k1,ZAo),e(k1,eG),e(eG,eLo),e(k1,oLo),e(z,rLo),e(z,S1),e(S1,Ufe),e(Ufe,tLo),e(S1,aLo),e(S1,oG),e(oG,nLo),e(S1,sLo),e(z,lLo),e(z,R1),e(R1,Jfe),e(Jfe,iLo),e(R1,dLo),e(R1,rG),e(rG,cLo),e(R1,fLo),e(z,mLo),e(z,P1),e(P1,Yfe),e(Yfe,gLo),e(P1,hLo),e(P1,tG),e(tG,pLo),e(P1,_Lo),e(z,uLo),e(z,B1),e(B1,Kfe),e(Kfe,bLo),e(B1,vLo),e(B1,aG),e(aG,FLo),e(B1,TLo),e(z,MLo),e(z,I1),e(I1,Zfe),e(Zfe,ELo),e(I1,CLo),e(I1,nG),e(nG,wLo),e(I1,ALo),e(z,LLo),e(z,N1),e(N1,eme),e(eme,yLo),e(N1,xLo),e(N1,sG),e(sG,$Lo),e(N1,kLo),e(z,SLo),e(z,q1),e(q1,ome),e(ome,RLo),e(q1,PLo),e(q1,lG),e(lG,BLo),e(q1,ILo),e(z,NLo),e(z,j1),e(j1,rme),e(rme,qLo),e(j1,jLo),e(j1,iG),e(iG,DLo),e(j1,GLo),e(z,OLo),e(z,D1),e(D1,tme),e(tme,VLo),e(D1,XLo),e(D1,dG),e(dG,zLo),e(D1,WLo),e(z,QLo),e(z,G1),e(G1,ame),e(ame,HLo),e(G1,ULo),e(G1,cG),e(cG,JLo),e(G1,YLo),e(z,KLo),e(z,O1),e(O1,nme),e(nme,ZLo),e(O1,eyo),e(O1,fG),e(fG,oyo),e(O1,ryo),e(z,tyo),e(z,V1),e(V1,sme),e(sme,ayo),e(V1,nyo),e(V1,mG),e(mG,syo),e(V1,lyo),e(z,iyo),e(z,X1),e(X1,lme),e(lme,dyo),e(X1,cyo),e(X1,gG),e(gG,fyo),e(X1,myo),e(z,gyo),e(z,z1),e(z1,ime),e(ime,hyo),e(z1,pyo),e(z1,hG),e(hG,_yo),e(z1,uyo),e(z,byo),e(z,W1),e(W1,dme),e(dme,vyo),e(W1,Fyo),e(W1,pG),e(pG,Tyo),e(W1,Myo),e(z,Eyo),e(z,Q1),e(Q1,cme),e(cme,Cyo),e(Q1,wyo),e(Q1,_G),e(_G,Ayo),e(Q1,Lyo),e(z,yyo),e(z,H1),e(H1,fme),e(fme,xyo),e(H1,$yo),e(H1,uG),e(uG,kyo),e(H1,Syo),e(z,Ryo),e(z,U1),e(U1,mme),e(mme,Pyo),e(U1,Byo),e(U1,bG),e(bG,Iyo),e(U1,Nyo),e(z,qyo),e(z,J1),e(J1,gme),e(gme,jyo),e(J1,Dyo),e(J1,vG),e(vG,Gyo),e(J1,Oyo),e(z,Vyo),e(z,Y1),e(Y1,hme),e(hme,Xyo),e(Y1,zyo),e(Y1,FG),e(FG,Wyo),e(Y1,Qyo),e(z,Hyo),e(z,K1),e(K1,pme),e(pme,Uyo),e(K1,Jyo),e(K1,TG),e(TG,Yyo),e(K1,Kyo),e(z,Zyo),e(z,Z1),e(Z1,_me),e(_me,e8o),e(Z1,o8o),e(Z1,MG),e(MG,r8o),e(Z1,t8o),e(z,a8o),e(z,e2),e(e2,ume),e(ume,n8o),e(e2,s8o),e(e2,EG),e(EG,l8o),e(e2,i8o),e(z,d8o),e(z,o2),e(o2,bme),e(bme,c8o),e(o2,f8o),e(o2,CG),e(CG,m8o),e(o2,g8o),e(z,h8o),e(z,r2),e(r2,vme),e(vme,p8o),e(r2,_8o),e(r2,wG),e(wG,u8o),e(r2,b8o),e(z,v8o),e(z,t2),e(t2,Fme),e(Fme,F8o),e(t2,T8o),e(t2,AG),e(AG,M8o),e(t2,E8o),e(z,C8o),e(z,a2),e(a2,Tme),e(Tme,w8o),e(a2,A8o),e(a2,LG),e(LG,L8o),e(a2,y8o),e(z,x8o),e(z,n2),e(n2,Mme),e(Mme,$8o),e(n2,k8o),e(n2,yG),e(yG,S8o),e(n2,R8o),e(z,P8o),e(z,s2),e(s2,Eme),e(Eme,B8o),e(s2,I8o),e(s2,xG),e(xG,N8o),e(s2,q8o),e(z,j8o),e(z,l2),e(l2,Cme),e(Cme,D8o),e(l2,G8o),e(l2,$G),e($G,O8o),e(l2,V8o),e(z,X8o),e(z,i2),e(i2,wme),e(wme,z8o),e(i2,W8o),e(i2,kG),e(kG,Q8o),e(i2,H8o),e(z,U8o),e(z,d2),e(d2,Ame),e(Ame,J8o),e(d2,Y8o),e(d2,SG),e(SG,K8o),e(d2,Z8o),e(Ke,exo),e(Ke,c2),e(c2,oxo),e(c2,Lme),e(Lme,rxo),e(c2,txo),e(c2,yme),e(yme,axo),e(Ke,nxo),M(f2,Ke,null),b(f,zGe,u),b(f,zi,u),e(zi,m2),e(m2,xme),M(hL,xme,null),e(zi,sxo),e(zi,$me),e($me,lxo),b(f,WGe,u),b(f,So,u),M(pL,So,null),e(So,ixo),e(So,Wi),e(Wi,dxo),e(Wi,RG),e(RG,cxo),e(Wi,fxo),e(Wi,PG),e(PG,mxo),e(Wi,gxo),e(So,hxo),e(So,_L),e(_L,pxo),e(_L,kme),e(kme,_xo),e(_L,uxo),e(So,bxo),e(So,dt),M(uL,dt,null),e(dt,vxo),e(dt,Sme),e(Sme,Fxo),e(dt,Txo),e(dt,Qi),e(Qi,Mxo),e(Qi,Rme),e(Rme,Exo),e(Qi,Cxo),e(Qi,BG),e(BG,wxo),e(Qi,Axo),e(dt,Lxo),M(g2,dt,null),e(So,yxo),e(So,Ze),M(bL,Ze,null),e(Ze,xxo),e(Ze,Pme),e(Pme,$xo),e(Ze,kxo),e(Ze,Ia),e(Ia,Sxo),e(Ia,Bme),e(Bme,Rxo),e(Ia,Pxo),e(Ia,Ime),e(Ime,Bxo),e(Ia,Ixo),e(Ia,Nme),e(Nme,Nxo),e(Ia,qxo),e(Ze,jxo),e(Ze,Q),e(Q,h2),e(h2,qme),e(qme,Dxo),e(h2,Gxo),e(h2,IG),e(IG,Oxo),e(h2,Vxo),e(Q,Xxo),e(Q,p2),e(p2,jme),e(jme,zxo),e(p2,Wxo),e(p2,NG),e(NG,Qxo),e(p2,Hxo),e(Q,Uxo),e(Q,_2),e(_2,Dme),e(Dme,Jxo),e(_2,Yxo),e(_2,qG),e(qG,Kxo),e(_2,Zxo),e(Q,e$o),e(Q,u2),e(u2,Gme),e(Gme,o$o),e(u2,r$o),e(u2,jG),e(jG,t$o),e(u2,a$o),e(Q,n$o),e(Q,b2),e(b2,Ome),e(Ome,s$o),e(b2,l$o),e(b2,DG),e(DG,i$o),e(b2,d$o),e(Q,c$o),e(Q,v2),e(v2,Vme),e(Vme,f$o),e(v2,m$o),e(v2,GG),e(GG,g$o),e(v2,h$o),e(Q,p$o),e(Q,F2),e(F2,Xme),e(Xme,_$o),e(F2,u$o),e(F2,OG),e(OG,b$o),e(F2,v$o),e(Q,F$o),e(Q,T2),e(T2,zme),e(zme,T$o),e(T2,M$o),e(T2,VG),e(VG,E$o),e(T2,C$o),e(Q,w$o),e(Q,M2),e(M2,Wme),e(Wme,A$o),e(M2,L$o),e(M2,XG),e(XG,y$o),e(M2,x$o),e(Q,$$o),e(Q,E2),e(E2,Qme),e(Qme,k$o),e(E2,S$o),e(E2,zG),e(zG,R$o),e(E2,P$o),e(Q,B$o),e(Q,C2),e(C2,Hme),e(Hme,I$o),e(C2,N$o),e(C2,WG),e(WG,q$o),e(C2,j$o),e(Q,D$o),e(Q,w2),e(w2,Ume),e(Ume,G$o),e(w2,O$o),e(w2,QG),e(QG,V$o),e(w2,X$o),e(Q,z$o),e(Q,A2),e(A2,Jme),e(Jme,W$o),e(A2,Q$o),e(A2,HG),e(HG,H$o),e(A2,U$o),e(Q,J$o),e(Q,L2),e(L2,Yme),e(Yme,Y$o),e(L2,K$o),e(L2,UG),e(UG,Z$o),e(L2,eko),e(Q,oko),e(Q,y2),e(y2,Kme),e(Kme,rko),e(y2,tko),e(y2,JG),e(JG,ako),e(y2,nko),e(Q,sko),e(Q,x2),e(x2,Zme),e(Zme,lko),e(x2,iko),e(x2,YG),e(YG,dko),e(x2,cko),e(Q,fko),e(Q,$2),e($2,ege),e(ege,mko),e($2,gko),e($2,KG),e(KG,hko),e($2,pko),e(Q,_ko),e(Q,k2),e(k2,oge),e(oge,uko),e(k2,bko),e(k2,ZG),e(ZG,vko),e(k2,Fko),e(Q,Tko),e(Q,S2),e(S2,rge),e(rge,Mko),e(S2,Eko),e(S2,eO),e(eO,Cko),e(S2,wko),e(Q,Ako),e(Q,R2),e(R2,tge),e(tge,Lko),e(R2,yko),e(R2,oO),e(oO,xko),e(R2,$ko),e(Q,kko),e(Q,P2),e(P2,age),e(age,Sko),e(P2,Rko),e(P2,rO),e(rO,Pko),e(P2,Bko),e(Q,Iko),e(Q,B2),e(B2,nge),e(nge,Nko),e(B2,qko),e(B2,tO),e(tO,jko),e(B2,Dko),e(Q,Gko),e(Q,I2),e(I2,sge),e(sge,Oko),e(I2,Vko),e(I2,aO),e(aO,Xko),e(I2,zko),e(Q,Wko),e(Q,N2),e(N2,lge),e(lge,Qko),e(N2,Hko),e(N2,nO),e(nO,Uko),e(N2,Jko),e(Q,Yko),e(Q,q2),e(q2,ige),e(ige,Kko),e(q2,Zko),e(q2,sO),e(sO,eSo),e(q2,oSo),e(Q,rSo),e(Q,j2),e(j2,dge),e(dge,tSo),e(j2,aSo),e(j2,lO),e(lO,nSo),e(j2,sSo),e(Q,lSo),e(Q,D2),e(D2,cge),e(cge,iSo),e(D2,dSo),e(D2,iO),e(iO,cSo),e(D2,fSo),e(Q,mSo),e(Q,G2),e(G2,fge),e(fge,gSo),e(G2,hSo),e(G2,dO),e(dO,pSo),e(G2,_So),e(Q,uSo),e(Q,O2),e(O2,mge),e(mge,bSo),e(O2,vSo),e(O2,cO),e(cO,FSo),e(O2,TSo),e(Q,MSo),e(Q,V2),e(V2,gge),e(gge,ESo),e(V2,CSo),e(V2,fO),e(fO,wSo),e(V2,ASo),e(Q,LSo),e(Q,X2),e(X2,hge),e(hge,ySo),e(X2,xSo),e(X2,mO),e(mO,$So),e(X2,kSo),e(Q,SSo),e(Q,z2),e(z2,pge),e(pge,RSo),e(z2,PSo),e(z2,_ge),e(_ge,BSo),e(z2,ISo),e(Q,NSo),e(Q,W2),e(W2,uge),e(uge,qSo),e(W2,jSo),e(W2,gO),e(gO,DSo),e(W2,GSo),e(Q,OSo),e(Q,Q2),e(Q2,bge),e(bge,VSo),e(Q2,XSo),e(Q2,hO),e(hO,zSo),e(Q2,WSo),e(Q,QSo),e(Q,H2),e(H2,vge),e(vge,HSo),e(H2,USo),e(H2,pO),e(pO,JSo),e(H2,YSo),e(Q,KSo),e(Q,U2),e(U2,Fge),e(Fge,ZSo),e(U2,eRo),e(U2,_O),e(_O,oRo),e(U2,rRo),e(Ze,tRo),e(Ze,J2),e(J2,aRo),e(J2,Tge),e(Tge,nRo),e(J2,sRo),e(J2,Mge),e(Mge,lRo),e(Ze,iRo),M(Y2,Ze,null),b(f,QGe,u),b(f,Hi,u),e(Hi,K2),e(K2,Ege),M(vL,Ege,null),e(Hi,dRo),e(Hi,Cge),e(Cge,cRo),b(f,HGe,u),b(f,Ro,u),M(FL,Ro,null),e(Ro,fRo),e(Ro,Ui),e(Ui,mRo),e(Ui,uO),e(uO,gRo),e(Ui,hRo),e(Ui,bO),e(bO,pRo),e(Ui,_Ro),e(Ro,uRo),e(Ro,TL),e(TL,bRo),e(TL,wge),e(wge,vRo),e(TL,FRo),e(Ro,TRo),e(Ro,ct),M(ML,ct,null),e(ct,MRo),e(ct,Age),e(Age,ERo),e(ct,CRo),e(ct,Ji),e(Ji,wRo),e(Ji,Lge),e(Lge,ARo),e(Ji,LRo),e(Ji,vO),e(vO,yRo),e(Ji,xRo),e(ct,$Ro),M(Z2,ct,null),e(Ro,kRo),e(Ro,eo),M(EL,eo,null),e(eo,SRo),e(eo,yge),e(yge,RRo),e(eo,PRo),e(eo,Na),e(Na,BRo),e(Na,xge),e(xge,IRo),e(Na,NRo),e(Na,$ge),e($ge,qRo),e(Na,jRo),e(Na,kge),e(kge,DRo),e(Na,GRo),e(eo,ORo),e(eo,pe),e(pe,eb),e(eb,Sge),e(Sge,VRo),e(eb,XRo),e(eb,FO),e(FO,zRo),e(eb,WRo),e(pe,QRo),e(pe,ob),e(ob,Rge),e(Rge,HRo),e(ob,URo),e(ob,TO),e(TO,JRo),e(ob,YRo),e(pe,KRo),e(pe,rb),e(rb,Pge),e(Pge,ZRo),e(rb,ePo),e(rb,MO),e(MO,oPo),e(rb,rPo),e(pe,tPo),e(pe,tb),e(tb,Bge),e(Bge,aPo),e(tb,nPo),e(tb,EO),e(EO,sPo),e(tb,lPo),e(pe,iPo),e(pe,ab),e(ab,Ige),e(Ige,dPo),e(ab,cPo),e(ab,CO),e(CO,fPo),e(ab,mPo),e(pe,gPo),e(pe,nb),e(nb,Nge),e(Nge,hPo),e(nb,pPo),e(nb,wO),e(wO,_Po),e(nb,uPo),e(pe,bPo),e(pe,sb),e(sb,qge),e(qge,vPo),e(sb,FPo),e(sb,AO),e(AO,TPo),e(sb,MPo),e(pe,EPo),e(pe,lb),e(lb,jge),e(jge,CPo),e(lb,wPo),e(lb,LO),e(LO,APo),e(lb,LPo),e(pe,yPo),e(pe,ib),e(ib,Dge),e(Dge,xPo),e(ib,$Po),e(ib,yO),e(yO,kPo),e(ib,SPo),e(pe,RPo),e(pe,db),e(db,Gge),e(Gge,PPo),e(db,BPo),e(db,xO),e(xO,IPo),e(db,NPo),e(pe,qPo),e(pe,cb),e(cb,Oge),e(Oge,jPo),e(cb,DPo),e(cb,$O),e($O,GPo),e(cb,OPo),e(pe,VPo),e(pe,fb),e(fb,Vge),e(Vge,XPo),e(fb,zPo),e(fb,kO),e(kO,WPo),e(fb,QPo),e(pe,HPo),e(pe,mb),e(mb,Xge),e(Xge,UPo),e(mb,JPo),e(mb,SO),e(SO,YPo),e(mb,KPo),e(pe,ZPo),e(pe,gb),e(gb,zge),e(zge,eBo),e(gb,oBo),e(gb,RO),e(RO,rBo),e(gb,tBo),e(pe,aBo),e(pe,hb),e(hb,Wge),e(Wge,nBo),e(hb,sBo),e(hb,PO),e(PO,lBo),e(hb,iBo),e(pe,dBo),e(pe,pb),e(pb,Qge),e(Qge,cBo),e(pb,fBo),e(pb,BO),e(BO,mBo),e(pb,gBo),e(pe,hBo),e(pe,_b),e(_b,Hge),e(Hge,pBo),e(_b,_Bo),e(_b,IO),e(IO,uBo),e(_b,bBo),e(eo,vBo),e(eo,ub),e(ub,FBo),e(ub,Uge),e(Uge,TBo),e(ub,MBo),e(ub,Jge),e(Jge,EBo),e(eo,CBo),M(bb,eo,null),b(f,UGe,u),b(f,Yi,u),e(Yi,vb),e(vb,Yge),M(CL,Yge,null),e(Yi,wBo),e(Yi,Kge),e(Kge,ABo),b(f,JGe,u),b(f,Po,u),M(wL,Po,null),e(Po,LBo),e(Po,Ki),e(Ki,yBo),e(Ki,NO),e(NO,xBo),e(Ki,$Bo),e(Ki,qO),e(qO,kBo),e(Ki,SBo),e(Po,RBo),e(Po,AL),e(AL,PBo),e(AL,Zge),e(Zge,BBo),e(AL,IBo),e(Po,NBo),e(Po,ft),M(LL,ft,null),e(ft,qBo),e(ft,ehe),e(ehe,jBo),e(ft,DBo),e(ft,Zi),e(Zi,GBo),e(Zi,ohe),e(ohe,OBo),e(Zi,VBo),e(Zi,jO),e(jO,XBo),e(Zi,zBo),e(ft,WBo),M(Fb,ft,null),e(Po,QBo),e(Po,oo),M(yL,oo,null),e(oo,HBo),e(oo,rhe),e(rhe,UBo),e(oo,JBo),e(oo,qa),e(qa,YBo),e(qa,the),e(the,KBo),e(qa,ZBo),e(qa,ahe),e(ahe,eIo),e(qa,oIo),e(qa,nhe),e(nhe,rIo),e(qa,tIo),e(oo,aIo),e(oo,N),e(N,Tb),e(Tb,she),e(she,nIo),e(Tb,sIo),e(Tb,DO),e(DO,lIo),e(Tb,iIo),e(N,dIo),e(N,Mb),e(Mb,lhe),e(lhe,cIo),e(Mb,fIo),e(Mb,GO),e(GO,mIo),e(Mb,gIo),e(N,hIo),e(N,Eb),e(Eb,ihe),e(ihe,pIo),e(Eb,_Io),e(Eb,OO),e(OO,uIo),e(Eb,bIo),e(N,vIo),e(N,Cb),e(Cb,dhe),e(dhe,FIo),e(Cb,TIo),e(Cb,VO),e(VO,MIo),e(Cb,EIo),e(N,CIo),e(N,wb),e(wb,che),e(che,wIo),e(wb,AIo),e(wb,XO),e(XO,LIo),e(wb,yIo),e(N,xIo),e(N,Ab),e(Ab,fhe),e(fhe,$Io),e(Ab,kIo),e(Ab,zO),e(zO,SIo),e(Ab,RIo),e(N,PIo),e(N,Lb),e(Lb,mhe),e(mhe,BIo),e(Lb,IIo),e(Lb,WO),e(WO,NIo),e(Lb,qIo),e(N,jIo),e(N,yb),e(yb,ghe),e(ghe,DIo),e(yb,GIo),e(yb,QO),e(QO,OIo),e(yb,VIo),e(N,XIo),e(N,xb),e(xb,hhe),e(hhe,zIo),e(xb,WIo),e(xb,HO),e(HO,QIo),e(xb,HIo),e(N,UIo),e(N,$b),e($b,phe),e(phe,JIo),e($b,YIo),e($b,UO),e(UO,KIo),e($b,ZIo),e(N,eNo),e(N,kb),e(kb,_he),e(_he,oNo),e(kb,rNo),e(kb,JO),e(JO,tNo),e(kb,aNo),e(N,nNo),e(N,Sb),e(Sb,uhe),e(uhe,sNo),e(Sb,lNo),e(Sb,YO),e(YO,iNo),e(Sb,dNo),e(N,cNo),e(N,Rb),e(Rb,bhe),e(bhe,fNo),e(Rb,mNo),e(Rb,KO),e(KO,gNo),e(Rb,hNo),e(N,pNo),e(N,Pb),e(Pb,vhe),e(vhe,_No),e(Pb,uNo),e(Pb,ZO),e(ZO,bNo),e(Pb,vNo),e(N,FNo),e(N,Bb),e(Bb,Fhe),e(Fhe,TNo),e(Bb,MNo),e(Bb,eV),e(eV,ENo),e(Bb,CNo),e(N,wNo),e(N,Ib),e(Ib,The),e(The,ANo),e(Ib,LNo),e(Ib,oV),e(oV,yNo),e(Ib,xNo),e(N,$No),e(N,Nb),e(Nb,Mhe),e(Mhe,kNo),e(Nb,SNo),e(Nb,rV),e(rV,RNo),e(Nb,PNo),e(N,BNo),e(N,qb),e(qb,Ehe),e(Ehe,INo),e(qb,NNo),e(qb,tV),e(tV,qNo),e(qb,jNo),e(N,DNo),e(N,jb),e(jb,Che),e(Che,GNo),e(jb,ONo),e(jb,aV),e(aV,VNo),e(jb,XNo),e(N,zNo),e(N,Db),e(Db,whe),e(whe,WNo),e(Db,QNo),e(Db,nV),e(nV,HNo),e(Db,UNo),e(N,JNo),e(N,Gb),e(Gb,Ahe),e(Ahe,YNo),e(Gb,KNo),e(Gb,sV),e(sV,ZNo),e(Gb,eqo),e(N,oqo),e(N,Ob),e(Ob,Lhe),e(Lhe,rqo),e(Ob,tqo),e(Ob,lV),e(lV,aqo),e(Ob,nqo),e(N,sqo),e(N,Vb),e(Vb,yhe),e(yhe,lqo),e(Vb,iqo),e(Vb,iV),e(iV,dqo),e(Vb,cqo),e(N,fqo),e(N,Xb),e(Xb,xhe),e(xhe,mqo),e(Xb,gqo),e(Xb,dV),e(dV,hqo),e(Xb,pqo),e(N,_qo),e(N,zb),e(zb,$he),e($he,uqo),e(zb,bqo),e(zb,cV),e(cV,vqo),e(zb,Fqo),e(N,Tqo),e(N,Wb),e(Wb,khe),e(khe,Mqo),e(Wb,Eqo),e(Wb,fV),e(fV,Cqo),e(Wb,wqo),e(N,Aqo),e(N,Qb),e(Qb,She),e(She,Lqo),e(Qb,yqo),e(Qb,mV),e(mV,xqo),e(Qb,$qo),e(N,kqo),e(N,Hb),e(Hb,Rhe),e(Rhe,Sqo),e(Hb,Rqo),e(Hb,gV),e(gV,Pqo),e(Hb,Bqo),e(N,Iqo),e(N,Ub),e(Ub,Phe),e(Phe,Nqo),e(Ub,qqo),e(Ub,hV),e(hV,jqo),e(Ub,Dqo),e(N,Gqo),e(N,Jb),e(Jb,Bhe),e(Bhe,Oqo),e(Jb,Vqo),e(Jb,pV),e(pV,Xqo),e(Jb,zqo),e(N,Wqo),e(N,Yb),e(Yb,Ihe),e(Ihe,Qqo),e(Yb,Hqo),e(Yb,_V),e(_V,Uqo),e(Yb,Jqo),e(N,Yqo),e(N,Kb),e(Kb,Nhe),e(Nhe,Kqo),e(Kb,Zqo),e(Kb,uV),e(uV,ejo),e(Kb,ojo),e(N,rjo),e(N,Zb),e(Zb,qhe),e(qhe,tjo),e(Zb,ajo),e(Zb,bV),e(bV,njo),e(Zb,sjo),e(N,ljo),e(N,e4),e(e4,jhe),e(jhe,ijo),e(e4,djo),e(e4,vV),e(vV,cjo),e(e4,fjo),e(N,mjo),e(N,o4),e(o4,Dhe),e(Dhe,gjo),e(o4,hjo),e(o4,FV),e(FV,pjo),e(o4,_jo),e(N,ujo),e(N,r4),e(r4,Ghe),e(Ghe,bjo),e(r4,vjo),e(r4,TV),e(TV,Fjo),e(r4,Tjo),e(N,Mjo),e(N,t4),e(t4,Ohe),e(Ohe,Ejo),e(t4,Cjo),e(t4,MV),e(MV,wjo),e(t4,Ajo),e(N,Ljo),e(N,a4),e(a4,Vhe),e(Vhe,yjo),e(a4,xjo),e(a4,EV),e(EV,$jo),e(a4,kjo),e(N,Sjo),e(N,n4),e(n4,Xhe),e(Xhe,Rjo),e(n4,Pjo),e(n4,CV),e(CV,Bjo),e(n4,Ijo),e(N,Njo),e(N,s4),e(s4,zhe),e(zhe,qjo),e(s4,jjo),e(s4,wV),e(wV,Djo),e(s4,Gjo),e(N,Ojo),e(N,l4),e(l4,Whe),e(Whe,Vjo),e(l4,Xjo),e(l4,AV),e(AV,zjo),e(l4,Wjo),e(N,Qjo),e(N,i4),e(i4,Qhe),e(Qhe,Hjo),e(i4,Ujo),e(i4,LV),e(LV,Jjo),e(i4,Yjo),e(N,Kjo),e(N,d4),e(d4,Hhe),e(Hhe,Zjo),e(d4,eDo),e(d4,yV),e(yV,oDo),e(d4,rDo),e(N,tDo),e(N,c4),e(c4,Uhe),e(Uhe,aDo),e(c4,nDo),e(c4,xV),e(xV,sDo),e(c4,lDo),e(N,iDo),e(N,f4),e(f4,Jhe),e(Jhe,dDo),e(f4,cDo),e(f4,$V),e($V,fDo),e(f4,mDo),e(N,gDo),e(N,m4),e(m4,Yhe),e(Yhe,hDo),e(m4,pDo),e(m4,kV),e(kV,_Do),e(m4,uDo),e(N,bDo),e(N,g4),e(g4,Khe),e(Khe,vDo),e(g4,FDo),e(g4,SV),e(SV,TDo),e(g4,MDo),e(N,EDo),e(N,h4),e(h4,Zhe),e(Zhe,CDo),e(h4,wDo),e(h4,RV),e(RV,ADo),e(h4,LDo),e(oo,yDo),e(oo,p4),e(p4,xDo),e(p4,epe),e(epe,$Do),e(p4,kDo),e(p4,ope),e(ope,SDo),e(oo,RDo),M(_4,oo,null),b(f,YGe,u),b(f,ed,u),e(ed,u4),e(u4,rpe),M(xL,rpe,null),e(ed,PDo),e(ed,tpe),e(tpe,BDo),b(f,KGe,u),b(f,Bo,u),M($L,Bo,null),e(Bo,IDo),e(Bo,od),e(od,NDo),e(od,PV),e(PV,qDo),e(od,jDo),e(od,BV),e(BV,DDo),e(od,GDo),e(Bo,ODo),e(Bo,kL),e(kL,VDo),e(kL,ape),e(ape,XDo),e(kL,zDo),e(Bo,WDo),e(Bo,mt),M(SL,mt,null),e(mt,QDo),e(mt,npe),e(npe,HDo),e(mt,UDo),e(mt,rd),e(rd,JDo),e(rd,spe),e(spe,YDo),e(rd,KDo),e(rd,IV),e(IV,ZDo),e(rd,eGo),e(mt,oGo),M(b4,mt,null),e(Bo,rGo),e(Bo,ro),M(RL,ro,null),e(ro,tGo),e(ro,lpe),e(lpe,aGo),e(ro,nGo),e(ro,ja),e(ja,sGo),e(ja,ipe),e(ipe,lGo),e(ja,iGo),e(ja,dpe),e(dpe,dGo),e(ja,cGo),e(ja,cpe),e(cpe,fGo),e(ja,mGo),e(ro,gGo),e(ro,Z),e(Z,v4),e(v4,fpe),e(fpe,hGo),e(v4,pGo),e(v4,NV),e(NV,_Go),e(v4,uGo),e(Z,bGo),e(Z,F4),e(F4,mpe),e(mpe,vGo),e(F4,FGo),e(F4,qV),e(qV,TGo),e(F4,MGo),e(Z,EGo),e(Z,T4),e(T4,gpe),e(gpe,CGo),e(T4,wGo),e(T4,jV),e(jV,AGo),e(T4,LGo),e(Z,yGo),e(Z,M4),e(M4,hpe),e(hpe,xGo),e(M4,$Go),e(M4,DV),e(DV,kGo),e(M4,SGo),e(Z,RGo),e(Z,E4),e(E4,ppe),e(ppe,PGo),e(E4,BGo),e(E4,GV),e(GV,IGo),e(E4,NGo),e(Z,qGo),e(Z,C4),e(C4,_pe),e(_pe,jGo),e(C4,DGo),e(C4,OV),e(OV,GGo),e(C4,OGo),e(Z,VGo),e(Z,w4),e(w4,upe),e(upe,XGo),e(w4,zGo),e(w4,VV),e(VV,WGo),e(w4,QGo),e(Z,HGo),e(Z,A4),e(A4,bpe),e(bpe,UGo),e(A4,JGo),e(A4,XV),e(XV,YGo),e(A4,KGo),e(Z,ZGo),e(Z,L4),e(L4,vpe),e(vpe,eOo),e(L4,oOo),e(L4,zV),e(zV,rOo),e(L4,tOo),e(Z,aOo),e(Z,y4),e(y4,Fpe),e(Fpe,nOo),e(y4,sOo),e(y4,WV),e(WV,lOo),e(y4,iOo),e(Z,dOo),e(Z,x4),e(x4,Tpe),e(Tpe,cOo),e(x4,fOo),e(x4,QV),e(QV,mOo),e(x4,gOo),e(Z,hOo),e(Z,$4),e($4,Mpe),e(Mpe,pOo),e($4,_Oo),e($4,HV),e(HV,uOo),e($4,bOo),e(Z,vOo),e(Z,k4),e(k4,Epe),e(Epe,FOo),e(k4,TOo),e(k4,UV),e(UV,MOo),e(k4,EOo),e(Z,COo),e(Z,S4),e(S4,Cpe),e(Cpe,wOo),e(S4,AOo),e(S4,JV),e(JV,LOo),e(S4,yOo),e(Z,xOo),e(Z,R4),e(R4,wpe),e(wpe,$Oo),e(R4,kOo),e(R4,YV),e(YV,SOo),e(R4,ROo),e(Z,POo),e(Z,P4),e(P4,Ape),e(Ape,BOo),e(P4,IOo),e(P4,KV),e(KV,NOo),e(P4,qOo),e(Z,jOo),e(Z,B4),e(B4,Lpe),e(Lpe,DOo),e(B4,GOo),e(B4,ZV),e(ZV,OOo),e(B4,VOo),e(Z,XOo),e(Z,I4),e(I4,ype),e(ype,zOo),e(I4,WOo),e(I4,eX),e(eX,QOo),e(I4,HOo),e(Z,UOo),e(Z,N4),e(N4,xpe),e(xpe,JOo),e(N4,YOo),e(N4,oX),e(oX,KOo),e(N4,ZOo),e(Z,eVo),e(Z,q4),e(q4,$pe),e($pe,oVo),e(q4,rVo),e(q4,rX),e(rX,tVo),e(q4,aVo),e(Z,nVo),e(Z,j4),e(j4,kpe),e(kpe,sVo),e(j4,lVo),e(j4,tX),e(tX,iVo),e(j4,dVo),e(Z,cVo),e(Z,D4),e(D4,Spe),e(Spe,fVo),e(D4,mVo),e(D4,aX),e(aX,gVo),e(D4,hVo),e(Z,pVo),e(Z,G4),e(G4,Rpe),e(Rpe,_Vo),e(G4,uVo),e(G4,nX),e(nX,bVo),e(G4,vVo),e(Z,FVo),e(Z,O4),e(O4,Ppe),e(Ppe,TVo),e(O4,MVo),e(O4,sX),e(sX,EVo),e(O4,CVo),e(Z,wVo),e(Z,V4),e(V4,Bpe),e(Bpe,AVo),e(V4,LVo),e(V4,lX),e(lX,yVo),e(V4,xVo),e(Z,$Vo),e(Z,X4),e(X4,Ipe),e(Ipe,kVo),e(X4,SVo),e(X4,iX),e(iX,RVo),e(X4,PVo),e(Z,BVo),e(Z,z4),e(z4,Npe),e(Npe,IVo),e(z4,NVo),e(z4,dX),e(dX,qVo),e(z4,jVo),e(Z,DVo),e(Z,W4),e(W4,qpe),e(qpe,GVo),e(W4,OVo),e(W4,cX),e(cX,VVo),e(W4,XVo),e(Z,zVo),e(Z,Q4),e(Q4,jpe),e(jpe,WVo),e(Q4,QVo),e(Q4,fX),e(fX,HVo),e(Q4,UVo),e(ro,JVo),e(ro,H4),e(H4,YVo),e(H4,Dpe),e(Dpe,KVo),e(H4,ZVo),e(H4,Gpe),e(Gpe,eXo),e(ro,oXo),M(U4,ro,null),b(f,ZGe,u),b(f,td,u),e(td,J4),e(J4,Ope),M(PL,Ope,null),e(td,rXo),e(td,Vpe),e(Vpe,tXo),b(f,eOe,u),b(f,Io,u),M(BL,Io,null),e(Io,aXo),e(Io,ad),e(ad,nXo),e(ad,mX),e(mX,sXo),e(ad,lXo),e(ad,gX),e(gX,iXo),e(ad,dXo),e(Io,cXo),e(Io,IL),e(IL,fXo),e(IL,Xpe),e(Xpe,mXo),e(IL,gXo),e(Io,hXo),e(Io,gt),M(NL,gt,null),e(gt,pXo),e(gt,zpe),e(zpe,_Xo),e(gt,uXo),e(gt,nd),e(nd,bXo),e(nd,Wpe),e(Wpe,vXo),e(nd,FXo),e(nd,hX),e(hX,TXo),e(nd,MXo),e(gt,EXo),M(Y4,gt,null),e(Io,CXo),e(Io,to),M(qL,to,null),e(to,wXo),e(to,Qpe),e(Qpe,AXo),e(to,LXo),e(to,Da),e(Da,yXo),e(Da,Hpe),e(Hpe,xXo),e(Da,$Xo),e(Da,Upe),e(Upe,kXo),e(Da,SXo),e(Da,Jpe),e(Jpe,RXo),e(Da,PXo),e(to,BXo),e(to,Zr),e(Zr,K4),e(K4,Ype),e(Ype,IXo),e(K4,NXo),e(K4,pX),e(pX,qXo),e(K4,jXo),e(Zr,DXo),e(Zr,Z4),e(Z4,Kpe),e(Kpe,GXo),e(Z4,OXo),e(Z4,_X),e(_X,VXo),e(Z4,XXo),e(Zr,zXo),e(Zr,ev),e(ev,Zpe),e(Zpe,WXo),e(ev,QXo),e(ev,uX),e(uX,HXo),e(ev,UXo),e(Zr,JXo),e(Zr,ov),e(ov,e_e),e(e_e,YXo),e(ov,KXo),e(ov,bX),e(bX,ZXo),e(ov,ezo),e(Zr,ozo),e(Zr,rv),e(rv,o_e),e(o_e,rzo),e(rv,tzo),e(rv,vX),e(vX,azo),e(rv,nzo),e(to,szo),e(to,tv),e(tv,lzo),e(tv,r_e),e(r_e,izo),e(tv,dzo),e(tv,t_e),e(t_e,czo),e(to,fzo),M(av,to,null),b(f,oOe,u),b(f,sd,u),e(sd,nv),e(nv,a_e),M(jL,a_e,null),e(sd,mzo),e(sd,n_e),e(n_e,gzo),b(f,rOe,u),b(f,No,u),M(DL,No,null),e(No,hzo),e(No,ld),e(ld,pzo),e(ld,FX),e(FX,_zo),e(ld,uzo),e(ld,TX),e(TX,bzo),e(ld,vzo),e(No,Fzo),e(No,GL),e(GL,Tzo),e(GL,s_e),e(s_e,Mzo),e(GL,Ezo),e(No,Czo),e(No,ht),M(OL,ht,null),e(ht,wzo),e(ht,l_e),e(l_e,Azo),e(ht,Lzo),e(ht,id),e(id,yzo),e(id,i_e),e(i_e,xzo),e(id,$zo),e(id,MX),e(MX,kzo),e(id,Szo),e(ht,Rzo),M(sv,ht,null),e(No,Pzo),e(No,ao),M(VL,ao,null),e(ao,Bzo),e(ao,d_e),e(d_e,Izo),e(ao,Nzo),e(ao,Ga),e(Ga,qzo),e(Ga,c_e),e(c_e,jzo),e(Ga,Dzo),e(Ga,f_e),e(f_e,Gzo),e(Ga,Ozo),e(Ga,m_e),e(m_e,Vzo),e(Ga,Xzo),e(ao,zzo),e(ao,H),e(H,lv),e(lv,g_e),e(g_e,Wzo),e(lv,Qzo),e(lv,EX),e(EX,Hzo),e(lv,Uzo),e(H,Jzo),e(H,iv),e(iv,h_e),e(h_e,Yzo),e(iv,Kzo),e(iv,CX),e(CX,Zzo),e(iv,eWo),e(H,oWo),e(H,dv),e(dv,p_e),e(p_e,rWo),e(dv,tWo),e(dv,wX),e(wX,aWo),e(dv,nWo),e(H,sWo),e(H,cv),e(cv,__e),e(__e,lWo),e(cv,iWo),e(cv,AX),e(AX,dWo),e(cv,cWo),e(H,fWo),e(H,fv),e(fv,u_e),e(u_e,mWo),e(fv,gWo),e(fv,LX),e(LX,hWo),e(fv,pWo),e(H,_Wo),e(H,mv),e(mv,b_e),e(b_e,uWo),e(mv,bWo),e(mv,yX),e(yX,vWo),e(mv,FWo),e(H,TWo),e(H,gv),e(gv,v_e),e(v_e,MWo),e(gv,EWo),e(gv,xX),e(xX,CWo),e(gv,wWo),e(H,AWo),e(H,hv),e(hv,F_e),e(F_e,LWo),e(hv,yWo),e(hv,$X),e($X,xWo),e(hv,$Wo),e(H,kWo),e(H,pv),e(pv,T_e),e(T_e,SWo),e(pv,RWo),e(pv,kX),e(kX,PWo),e(pv,BWo),e(H,IWo),e(H,_v),e(_v,M_e),e(M_e,NWo),e(_v,qWo),e(_v,SX),e(SX,jWo),e(_v,DWo),e(H,GWo),e(H,uv),e(uv,E_e),e(E_e,OWo),e(uv,VWo),e(uv,RX),e(RX,XWo),e(uv,zWo),e(H,WWo),e(H,bv),e(bv,C_e),e(C_e,QWo),e(bv,HWo),e(bv,PX),e(PX,UWo),e(bv,JWo),e(H,YWo),e(H,vv),e(vv,w_e),e(w_e,KWo),e(vv,ZWo),e(vv,BX),e(BX,eQo),e(vv,oQo),e(H,rQo),e(H,Fv),e(Fv,A_e),e(A_e,tQo),e(Fv,aQo),e(Fv,IX),e(IX,nQo),e(Fv,sQo),e(H,lQo),e(H,Tv),e(Tv,L_e),e(L_e,iQo),e(Tv,dQo),e(Tv,NX),e(NX,cQo),e(Tv,fQo),e(H,mQo),e(H,Mv),e(Mv,y_e),e(y_e,gQo),e(Mv,hQo),e(Mv,qX),e(qX,pQo),e(Mv,_Qo),e(H,uQo),e(H,Ev),e(Ev,x_e),e(x_e,bQo),e(Ev,vQo),e(Ev,jX),e(jX,FQo),e(Ev,TQo),e(H,MQo),e(H,Cv),e(Cv,$_e),e($_e,EQo),e(Cv,CQo),e(Cv,DX),e(DX,wQo),e(Cv,AQo),e(H,LQo),e(H,wv),e(wv,k_e),e(k_e,yQo),e(wv,xQo),e(wv,GX),e(GX,$Qo),e(wv,kQo),e(H,SQo),e(H,Av),e(Av,S_e),e(S_e,RQo),e(Av,PQo),e(Av,OX),e(OX,BQo),e(Av,IQo),e(H,NQo),e(H,Lv),e(Lv,R_e),e(R_e,qQo),e(Lv,jQo),e(Lv,VX),e(VX,DQo),e(Lv,GQo),e(H,OQo),e(H,yv),e(yv,P_e),e(P_e,VQo),e(yv,XQo),e(yv,XX),e(XX,zQo),e(yv,WQo),e(H,QQo),e(H,xv),e(xv,B_e),e(B_e,HQo),e(xv,UQo),e(xv,zX),e(zX,JQo),e(xv,YQo),e(H,KQo),e(H,$v),e($v,I_e),e(I_e,ZQo),e($v,eHo),e($v,WX),e(WX,oHo),e($v,rHo),e(H,tHo),e(H,kv),e(kv,N_e),e(N_e,aHo),e(kv,nHo),e(kv,QX),e(QX,sHo),e(kv,lHo),e(H,iHo),e(H,Sv),e(Sv,q_e),e(q_e,dHo),e(Sv,cHo),e(Sv,HX),e(HX,fHo),e(Sv,mHo),e(H,gHo),e(H,Rv),e(Rv,j_e),e(j_e,hHo),e(Rv,pHo),e(Rv,UX),e(UX,_Ho),e(Rv,uHo),e(H,bHo),e(H,Pv),e(Pv,D_e),e(D_e,vHo),e(Pv,FHo),e(Pv,JX),e(JX,THo),e(Pv,MHo),e(H,EHo),e(H,Bv),e(Bv,G_e),e(G_e,CHo),e(Bv,wHo),e(Bv,YX),e(YX,AHo),e(Bv,LHo),e(H,yHo),e(H,Iv),e(Iv,O_e),e(O_e,xHo),e(Iv,$Ho),e(Iv,KX),e(KX,kHo),e(Iv,SHo),e(H,RHo),e(H,Nv),e(Nv,V_e),e(V_e,PHo),e(Nv,BHo),e(Nv,ZX),e(ZX,IHo),e(Nv,NHo),e(H,qHo),e(H,qv),e(qv,X_e),e(X_e,jHo),e(qv,DHo),e(qv,ez),e(ez,GHo),e(qv,OHo),e(H,VHo),e(H,jv),e(jv,z_e),e(z_e,XHo),e(jv,zHo),e(jv,oz),e(oz,WHo),e(jv,QHo),e(H,HHo),e(H,Dv),e(Dv,W_e),e(W_e,UHo),e(Dv,JHo),e(Dv,rz),e(rz,YHo),e(Dv,KHo),e(H,ZHo),e(H,Gv),e(Gv,Q_e),e(Q_e,eUo),e(Gv,oUo),e(Gv,tz),e(tz,rUo),e(Gv,tUo),e(ao,aUo),e(ao,Ov),e(Ov,nUo),e(Ov,H_e),e(H_e,sUo),e(Ov,lUo),e(Ov,U_e),e(U_e,iUo),e(ao,dUo),M(Vv,ao,null),b(f,tOe,u),b(f,dd,u),e(dd,Xv),e(Xv,J_e),M(XL,J_e,null),e(dd,cUo),e(dd,Y_e),e(Y_e,fUo),b(f,aOe,u),b(f,qo,u),M(zL,qo,null),e(qo,mUo),e(qo,cd),e(cd,gUo),e(cd,az),e(az,hUo),e(cd,pUo),e(cd,nz),e(nz,_Uo),e(cd,uUo),e(qo,bUo),e(qo,WL),e(WL,vUo),e(WL,K_e),e(K_e,FUo),e(WL,TUo),e(qo,MUo),e(qo,pt),M(QL,pt,null),e(pt,EUo),e(pt,Z_e),e(Z_e,CUo),e(pt,wUo),e(pt,fd),e(fd,AUo),e(fd,eue),e(eue,LUo),e(fd,yUo),e(fd,sz),e(sz,xUo),e(fd,$Uo),e(pt,kUo),M(zv,pt,null),e(qo,SUo),e(qo,no),M(HL,no,null),e(no,RUo),e(no,oue),e(oue,PUo),e(no,BUo),e(no,Oa),e(Oa,IUo),e(Oa,rue),e(rue,NUo),e(Oa,qUo),e(Oa,tue),e(tue,jUo),e(Oa,DUo),e(Oa,aue),e(aue,GUo),e(Oa,OUo),e(no,VUo),e(no,V),e(V,Wv),e(Wv,nue),e(nue,XUo),e(Wv,zUo),e(Wv,lz),e(lz,WUo),e(Wv,QUo),e(V,HUo),e(V,Qv),e(Qv,sue),e(sue,UUo),e(Qv,JUo),e(Qv,iz),e(iz,YUo),e(Qv,KUo),e(V,ZUo),e(V,Hv),e(Hv,lue),e(lue,eJo),e(Hv,oJo),e(Hv,dz),e(dz,rJo),e(Hv,tJo),e(V,aJo),e(V,Uv),e(Uv,iue),e(iue,nJo),e(Uv,sJo),e(Uv,cz),e(cz,lJo),e(Uv,iJo),e(V,dJo),e(V,Jv),e(Jv,due),e(due,cJo),e(Jv,fJo),e(Jv,fz),e(fz,mJo),e(Jv,gJo),e(V,hJo),e(V,Yv),e(Yv,cue),e(cue,pJo),e(Yv,_Jo),e(Yv,mz),e(mz,uJo),e(Yv,bJo),e(V,vJo),e(V,Kv),e(Kv,fue),e(fue,FJo),e(Kv,TJo),e(Kv,gz),e(gz,MJo),e(Kv,EJo),e(V,CJo),e(V,Zv),e(Zv,mue),e(mue,wJo),e(Zv,AJo),e(Zv,hz),e(hz,LJo),e(Zv,yJo),e(V,xJo),e(V,eF),e(eF,gue),e(gue,$Jo),e(eF,kJo),e(eF,pz),e(pz,SJo),e(eF,RJo),e(V,PJo),e(V,oF),e(oF,hue),e(hue,BJo),e(oF,IJo),e(oF,_z),e(_z,NJo),e(oF,qJo),e(V,jJo),e(V,rF),e(rF,pue),e(pue,DJo),e(rF,GJo),e(rF,uz),e(uz,OJo),e(rF,VJo),e(V,XJo),e(V,tF),e(tF,_ue),e(_ue,zJo),e(tF,WJo),e(tF,bz),e(bz,QJo),e(tF,HJo),e(V,UJo),e(V,aF),e(aF,uue),e(uue,JJo),e(aF,YJo),e(aF,vz),e(vz,KJo),e(aF,ZJo),e(V,eYo),e(V,nF),e(nF,bue),e(bue,oYo),e(nF,rYo),e(nF,Fz),e(Fz,tYo),e(nF,aYo),e(V,nYo),e(V,sF),e(sF,vue),e(vue,sYo),e(sF,lYo),e(sF,Tz),e(Tz,iYo),e(sF,dYo),e(V,cYo),e(V,lF),e(lF,Fue),e(Fue,fYo),e(lF,mYo),e(lF,Mz),e(Mz,gYo),e(lF,hYo),e(V,pYo),e(V,iF),e(iF,Tue),e(Tue,_Yo),e(iF,uYo),e(iF,Ez),e(Ez,bYo),e(iF,vYo),e(V,FYo),e(V,dF),e(dF,Mue),e(Mue,TYo),e(dF,MYo),e(dF,Cz),e(Cz,EYo),e(dF,CYo),e(V,wYo),e(V,cF),e(cF,Eue),e(Eue,AYo),e(cF,LYo),e(cF,wz),e(wz,yYo),e(cF,xYo),e(V,$Yo),e(V,fF),e(fF,Cue),e(Cue,kYo),e(fF,SYo),e(fF,Az),e(Az,RYo),e(fF,PYo),e(V,BYo),e(V,mF),e(mF,wue),e(wue,IYo),e(mF,NYo),e(mF,Lz),e(Lz,qYo),e(mF,jYo),e(V,DYo),e(V,gF),e(gF,Aue),e(Aue,GYo),e(gF,OYo),e(gF,yz),e(yz,VYo),e(gF,XYo),e(V,zYo),e(V,hF),e(hF,Lue),e(Lue,WYo),e(hF,QYo),e(hF,xz),e(xz,HYo),e(hF,UYo),e(V,JYo),e(V,pF),e(pF,yue),e(yue,YYo),e(pF,KYo),e(pF,$z),e($z,ZYo),e(pF,eKo),e(V,oKo),e(V,_F),e(_F,xue),e(xue,rKo),e(_F,tKo),e(_F,kz),e(kz,aKo),e(_F,nKo),e(V,sKo),e(V,uF),e(uF,$ue),e($ue,lKo),e(uF,iKo),e(uF,Sz),e(Sz,dKo),e(uF,cKo),e(V,fKo),e(V,bF),e(bF,kue),e(kue,mKo),e(bF,gKo),e(bF,Rz),e(Rz,hKo),e(bF,pKo),e(V,_Ko),e(V,vF),e(vF,Sue),e(Sue,uKo),e(vF,bKo),e(vF,Pz),e(Pz,vKo),e(vF,FKo),e(V,TKo),e(V,FF),e(FF,Rue),e(Rue,MKo),e(FF,EKo),e(FF,Bz),e(Bz,CKo),e(FF,wKo),e(V,AKo),e(V,TF),e(TF,Pue),e(Pue,LKo),e(TF,yKo),e(TF,Iz),e(Iz,xKo),e(TF,$Ko),e(V,kKo),e(V,MF),e(MF,Bue),e(Bue,SKo),e(MF,RKo),e(MF,Nz),e(Nz,PKo),e(MF,BKo),e(V,IKo),e(V,EF),e(EF,Iue),e(Iue,NKo),e(EF,qKo),e(EF,qz),e(qz,jKo),e(EF,DKo),e(V,GKo),e(V,CF),e(CF,Nue),e(Nue,OKo),e(CF,VKo),e(CF,jz),e(jz,XKo),e(CF,zKo),e(V,WKo),e(V,wF),e(wF,que),e(que,QKo),e(wF,HKo),e(wF,Dz),e(Dz,UKo),e(wF,JKo),e(V,YKo),e(V,AF),e(AF,jue),e(jue,KKo),e(AF,ZKo),e(AF,Gz),e(Gz,eZo),e(AF,oZo),e(V,rZo),e(V,LF),e(LF,Due),e(Due,tZo),e(LF,aZo),e(LF,Oz),e(Oz,nZo),e(LF,sZo),e(V,lZo),e(V,yF),e(yF,Gue),e(Gue,iZo),e(yF,dZo),e(yF,Vz),e(Vz,cZo),e(yF,fZo),e(V,mZo),e(V,xF),e(xF,Oue),e(Oue,gZo),e(xF,hZo),e(xF,Xz),e(Xz,pZo),e(xF,_Zo),e(V,uZo),e(V,$F),e($F,Vue),e(Vue,bZo),e($F,vZo),e($F,zz),e(zz,FZo),e($F,TZo),e(V,MZo),e(V,kF),e(kF,Xue),e(Xue,EZo),e(kF,CZo),e(kF,Wz),e(Wz,wZo),e(kF,AZo),e(no,LZo),e(no,SF),e(SF,yZo),e(SF,zue),e(zue,xZo),e(SF,$Zo),e(SF,Wue),e(Wue,kZo),e(no,SZo),M(RF,no,null),b(f,nOe,u),b(f,md,u),e(md,PF),e(PF,Que),M(UL,Que,null),e(md,RZo),e(md,Hue),e(Hue,PZo),b(f,sOe,u),b(f,jo,u),M(JL,jo,null),e(jo,BZo),e(jo,gd),e(gd,IZo),e(gd,Qz),e(Qz,NZo),e(gd,qZo),e(gd,Hz),e(Hz,jZo),e(gd,DZo),e(jo,GZo),e(jo,YL),e(YL,OZo),e(YL,Uue),e(Uue,VZo),e(YL,XZo),e(jo,zZo),e(jo,_t),M(KL,_t,null),e(_t,WZo),e(_t,Jue),e(Jue,QZo),e(_t,HZo),e(_t,hd),e(hd,UZo),e(hd,Yue),e(Yue,JZo),e(hd,YZo),e(hd,Uz),e(Uz,KZo),e(hd,ZZo),e(_t,eer),M(BF,_t,null),e(jo,oer),e(jo,so),M(ZL,so,null),e(so,rer),e(so,Kue),e(Kue,ter),e(so,aer),e(so,Va),e(Va,ner),e(Va,Zue),e(Zue,ser),e(Va,ler),e(Va,e1e),e(e1e,ier),e(Va,der),e(Va,o1e),e(o1e,cer),e(Va,fer),e(so,mer),e(so,r1e),e(r1e,IF),e(IF,t1e),e(t1e,ger),e(IF,her),e(IF,Jz),e(Jz,per),e(IF,_er),e(so,uer),e(so,NF),e(NF,ber),e(NF,a1e),e(a1e,ver),e(NF,Fer),e(NF,n1e),e(n1e,Ter),e(so,Mer),M(qF,so,null),b(f,lOe,u),b(f,pd,u),e(pd,jF),e(jF,s1e),M(ey,s1e,null),e(pd,Eer),e(pd,l1e),e(l1e,Cer),b(f,iOe,u),b(f,Do,u),M(oy,Do,null),e(Do,wer),e(Do,_d),e(_d,Aer),e(_d,Yz),e(Yz,Ler),e(_d,yer),e(_d,Kz),e(Kz,xer),e(_d,$er),e(Do,ker),e(Do,ry),e(ry,Ser),e(ry,i1e),e(i1e,Rer),e(ry,Per),e(Do,Ber),e(Do,ut),M(ty,ut,null),e(ut,Ier),e(ut,d1e),e(d1e,Ner),e(ut,qer),e(ut,ud),e(ud,jer),e(ud,c1e),e(c1e,Der),e(ud,Ger),e(ud,Zz),e(Zz,Oer),e(ud,Ver),e(ut,Xer),M(DF,ut,null),e(Do,zer),e(Do,lo),M(ay,lo,null),e(lo,Wer),e(lo,f1e),e(f1e,Qer),e(lo,Her),e(lo,Xa),e(Xa,Uer),e(Xa,m1e),e(m1e,Jer),e(Xa,Yer),e(Xa,g1e),e(g1e,Ker),e(Xa,Zer),e(Xa,h1e),e(h1e,eor),e(Xa,oor),e(lo,ror),e(lo,ue),e(ue,GF),e(GF,p1e),e(p1e,tor),e(GF,aor),e(GF,eW),e(eW,nor),e(GF,sor),e(ue,lor),e(ue,OF),e(OF,_1e),e(_1e,ior),e(OF,dor),e(OF,oW),e(oW,cor),e(OF,mor),e(ue,gor),e(ue,VF),e(VF,u1e),e(u1e,hor),e(VF,por),e(VF,rW),e(rW,_or),e(VF,uor),e(ue,bor),e(ue,XF),e(XF,b1e),e(b1e,vor),e(XF,For),e(XF,tW),e(tW,Tor),e(XF,Mor),e(ue,Eor),e(ue,Vs),e(Vs,v1e),e(v1e,Cor),e(Vs,wor),e(Vs,aW),e(aW,Aor),e(Vs,Lor),e(Vs,nW),e(nW,yor),e(Vs,xor),e(ue,$or),e(ue,zF),e(zF,F1e),e(F1e,kor),e(zF,Sor),e(zF,sW),e(sW,Ror),e(zF,Por),e(ue,Bor),e(ue,Xs),e(Xs,T1e),e(T1e,Ior),e(Xs,Nor),e(Xs,lW),e(lW,qor),e(Xs,jor),e(Xs,iW),e(iW,Dor),e(Xs,Gor),e(ue,Oor),e(ue,bt),e(bt,M1e),e(M1e,Vor),e(bt,Xor),e(bt,dW),e(dW,zor),e(bt,Wor),e(bt,cW),e(cW,Qor),e(bt,Hor),e(bt,fW),e(fW,Uor),e(bt,Jor),e(ue,Yor),e(ue,WF),e(WF,E1e),e(E1e,Kor),e(WF,Zor),e(WF,mW),e(mW,err),e(WF,orr),e(ue,rrr),e(ue,QF),e(QF,C1e),e(C1e,trr),e(QF,arr),e(QF,gW),e(gW,nrr),e(QF,srr),e(ue,lrr),e(ue,HF),e(HF,w1e),e(w1e,irr),e(HF,drr),e(HF,hW),e(hW,crr),e(HF,frr),e(ue,mrr),e(ue,UF),e(UF,A1e),e(A1e,grr),e(UF,hrr),e(UF,pW),e(pW,prr),e(UF,_rr),e(ue,urr),e(ue,JF),e(JF,L1e),e(L1e,brr),e(JF,vrr),e(JF,_W),e(_W,Frr),e(JF,Trr),e(ue,Mrr),e(ue,YF),e(YF,y1e),e(y1e,Err),e(YF,Crr),e(YF,uW),e(uW,wrr),e(YF,Arr),e(ue,Lrr),e(ue,KF),e(KF,x1e),e(x1e,yrr),e(KF,xrr),e(KF,bW),e(bW,$rr),e(KF,krr),e(ue,Srr),e(ue,ZF),e(ZF,$1e),e($1e,Rrr),e(ZF,Prr),e(ZF,vW),e(vW,Brr),e(ZF,Irr),e(lo,Nrr),e(lo,e6),e(e6,qrr),e(e6,k1e),e(k1e,jrr),e(e6,Drr),e(e6,S1e),e(S1e,Grr),e(lo,Orr),M(o6,lo,null),b(f,dOe,u),b(f,bd,u),e(bd,r6),e(r6,R1e),M(ny,R1e,null),e(bd,Vrr),e(bd,P1e),e(P1e,Xrr),b(f,cOe,u),b(f,Go,u),M(sy,Go,null),e(Go,zrr),e(Go,vd),e(vd,Wrr),e(vd,FW),e(FW,Qrr),e(vd,Hrr),e(vd,TW),e(TW,Urr),e(vd,Jrr),e(Go,Yrr),e(Go,ly),e(ly,Krr),e(ly,B1e),e(B1e,Zrr),e(ly,etr),e(Go,otr),e(Go,vt),M(iy,vt,null),e(vt,rtr),e(vt,I1e),e(I1e,ttr),e(vt,atr),e(vt,Fd),e(Fd,ntr),e(Fd,N1e),e(N1e,str),e(Fd,ltr),e(Fd,MW),e(MW,itr),e(Fd,dtr),e(vt,ctr),M(t6,vt,null),e(Go,ftr),e(Go,io),M(dy,io,null),e(io,mtr),e(io,q1e),e(q1e,gtr),e(io,htr),e(io,za),e(za,ptr),e(za,j1e),e(j1e,_tr),e(za,utr),e(za,D1e),e(D1e,btr),e(za,vtr),e(za,G1e),e(G1e,Ftr),e(za,Ttr),e(io,Mtr),e(io,O1e),e(O1e,a6),e(a6,V1e),e(V1e,Etr),e(a6,Ctr),e(a6,EW),e(EW,wtr),e(a6,Atr),e(io,Ltr),e(io,n6),e(n6,ytr),e(n6,X1e),e(X1e,xtr),e(n6,$tr),e(n6,z1e),e(z1e,ktr),e(io,Str),M(s6,io,null),b(f,fOe,u),b(f,Td,u),e(Td,l6),e(l6,W1e),M(cy,W1e,null),e(Td,Rtr),e(Td,Q1e),e(Q1e,Ptr),b(f,mOe,u),b(f,Oo,u),M(fy,Oo,null),e(Oo,Btr),e(Oo,Md),e(Md,Itr),e(Md,CW),e(CW,Ntr),e(Md,qtr),e(Md,wW),e(wW,jtr),e(Md,Dtr),e(Oo,Gtr),e(Oo,my),e(my,Otr),e(my,H1e),e(H1e,Vtr),e(my,Xtr),e(Oo,ztr),e(Oo,Ft),M(gy,Ft,null),e(Ft,Wtr),e(Ft,U1e),e(U1e,Qtr),e(Ft,Htr),e(Ft,Ed),e(Ed,Utr),e(Ed,J1e),e(J1e,Jtr),e(Ed,Ytr),e(Ed,AW),e(AW,Ktr),e(Ed,Ztr),e(Ft,ear),M(i6,Ft,null),e(Oo,oar),e(Oo,co),M(hy,co,null),e(co,rar),e(co,Y1e),e(Y1e,tar),e(co,aar),e(co,Wa),e(Wa,nar),e(Wa,K1e),e(K1e,sar),e(Wa,lar),e(Wa,Z1e),e(Z1e,iar),e(Wa,dar),e(Wa,e2e),e(e2e,car),e(Wa,far),e(co,mar),e(co,o2e),e(o2e,d6),e(d6,r2e),e(r2e,gar),e(d6,har),e(d6,LW),e(LW,par),e(d6,_ar),e(co,uar),e(co,c6),e(c6,bar),e(c6,t2e),e(t2e,Far),e(c6,Tar),e(c6,a2e),e(a2e,Mar),e(co,Ear),M(f6,co,null),b(f,gOe,u),b(f,Cd,u),e(Cd,m6),e(m6,n2e),M(py,n2e,null),e(Cd,Car),e(Cd,s2e),e(s2e,war),b(f,hOe,u),b(f,Vo,u),M(_y,Vo,null),e(Vo,Aar),e(Vo,wd),e(wd,Lar),e(wd,yW),e(yW,yar),e(wd,xar),e(wd,xW),e(xW,$ar),e(wd,kar),e(Vo,Sar),e(Vo,uy),e(uy,Rar),e(uy,l2e),e(l2e,Par),e(uy,Bar),e(Vo,Iar),e(Vo,Tt),M(by,Tt,null),e(Tt,Nar),e(Tt,i2e),e(i2e,qar),e(Tt,jar),e(Tt,Ad),e(Ad,Dar),e(Ad,d2e),e(d2e,Gar),e(Ad,Oar),e(Ad,$W),e($W,Var),e(Ad,Xar),e(Tt,zar),M(g6,Tt,null),e(Vo,War),e(Vo,fo),M(vy,fo,null),e(fo,Qar),e(fo,c2e),e(c2e,Har),e(fo,Uar),e(fo,Qa),e(Qa,Jar),e(Qa,f2e),e(f2e,Yar),e(Qa,Kar),e(Qa,m2e),e(m2e,Zar),e(Qa,enr),e(Qa,g2e),e(g2e,onr),e(Qa,rnr),e(fo,tnr),e(fo,Pe),e(Pe,h6),e(h6,h2e),e(h2e,anr),e(h6,nnr),e(h6,kW),e(kW,snr),e(h6,lnr),e(Pe,inr),e(Pe,p6),e(p6,p2e),e(p2e,dnr),e(p6,cnr),e(p6,SW),e(SW,fnr),e(p6,mnr),e(Pe,gnr),e(Pe,_6),e(_6,_2e),e(_2e,hnr),e(_6,pnr),e(_6,RW),e(RW,_nr),e(_6,unr),e(Pe,bnr),e(Pe,u6),e(u6,u2e),e(u2e,vnr),e(u6,Fnr),e(u6,PW),e(PW,Tnr),e(u6,Mnr),e(Pe,Enr),e(Pe,b6),e(b6,b2e),e(b2e,Cnr),e(b6,wnr),e(b6,BW),e(BW,Anr),e(b6,Lnr),e(Pe,ynr),e(Pe,v6),e(v6,v2e),e(v2e,xnr),e(v6,$nr),e(v6,IW),e(IW,knr),e(v6,Snr),e(Pe,Rnr),e(Pe,F6),e(F6,F2e),e(F2e,Pnr),e(F6,Bnr),e(F6,NW),e(NW,Inr),e(F6,Nnr),e(Pe,qnr),e(Pe,T6),e(T6,T2e),e(T2e,jnr),e(T6,Dnr),e(T6,qW),e(qW,Gnr),e(T6,Onr),e(Pe,Vnr),e(Pe,M6),e(M6,M2e),e(M2e,Xnr),e(M6,znr),e(M6,jW),e(jW,Wnr),e(M6,Qnr),e(fo,Hnr),e(fo,E6),e(E6,Unr),e(E6,E2e),e(E2e,Jnr),e(E6,Ynr),e(E6,C2e),e(C2e,Knr),e(fo,Znr),M(C6,fo,null),b(f,pOe,u),b(f,Ld,u),e(Ld,w6),e(w6,w2e),M(Fy,w2e,null),e(Ld,esr),e(Ld,A2e),e(A2e,osr),b(f,_Oe,u),b(f,Xo,u),M(Ty,Xo,null),e(Xo,rsr),e(Xo,yd),e(yd,tsr),e(yd,DW),e(DW,asr),e(yd,nsr),e(yd,GW),e(GW,ssr),e(yd,lsr),e(Xo,isr),e(Xo,My),e(My,dsr),e(My,L2e),e(L2e,csr),e(My,fsr),e(Xo,msr),e(Xo,Mt),M(Ey,Mt,null),e(Mt,gsr),e(Mt,y2e),e(y2e,hsr),e(Mt,psr),e(Mt,xd),e(xd,_sr),e(xd,x2e),e(x2e,usr),e(xd,bsr),e(xd,OW),e(OW,vsr),e(xd,Fsr),e(Mt,Tsr),M(A6,Mt,null),e(Xo,Msr),e(Xo,mo),M(Cy,mo,null),e(mo,Esr),e(mo,$2e),e($2e,Csr),e(mo,wsr),e(mo,Ha),e(Ha,Asr),e(Ha,k2e),e(k2e,Lsr),e(Ha,ysr),e(Ha,S2e),e(S2e,xsr),e(Ha,$sr),e(Ha,R2e),e(R2e,ksr),e(Ha,Ssr),e(mo,Rsr),e(mo,et),e(et,L6),e(L6,P2e),e(P2e,Psr),e(L6,Bsr),e(L6,VW),e(VW,Isr),e(L6,Nsr),e(et,qsr),e(et,y6),e(y6,B2e),e(B2e,jsr),e(y6,Dsr),e(y6,XW),e(XW,Gsr),e(y6,Osr),e(et,Vsr),e(et,x6),e(x6,I2e),e(I2e,Xsr),e(x6,zsr),e(x6,zW),e(zW,Wsr),e(x6,Qsr),e(et,Hsr),e(et,$6),e($6,N2e),e(N2e,Usr),e($6,Jsr),e($6,WW),e(WW,Ysr),e($6,Ksr),e(et,Zsr),e(et,k6),e(k6,q2e),e(q2e,elr),e(k6,olr),e(k6,QW),e(QW,rlr),e(k6,tlr),e(mo,alr),e(mo,S6),e(S6,nlr),e(S6,j2e),e(j2e,slr),e(S6,llr),e(S6,D2e),e(D2e,ilr),e(mo,dlr),M(R6,mo,null),b(f,uOe,u),b(f,$d,u),e($d,P6),e(P6,G2e),M(wy,G2e,null),e($d,clr),e($d,O2e),e(O2e,flr),b(f,bOe,u),b(f,zo,u),M(Ay,zo,null),e(zo,mlr),e(zo,kd),e(kd,glr),e(kd,HW),e(HW,hlr),e(kd,plr),e(kd,UW),e(UW,_lr),e(kd,ulr),e(zo,blr),e(zo,Ly),e(Ly,vlr),e(Ly,V2e),e(V2e,Flr),e(Ly,Tlr),e(zo,Mlr),e(zo,Et),M(yy,Et,null),e(Et,Elr),e(Et,X2e),e(X2e,Clr),e(Et,wlr),e(Et,Sd),e(Sd,Alr),e(Sd,z2e),e(z2e,Llr),e(Sd,ylr),e(Sd,JW),e(JW,xlr),e(Sd,$lr),e(Et,klr),M(B6,Et,null),e(zo,Slr),e(zo,go),M(xy,go,null),e(go,Rlr),e(go,W2e),e(W2e,Plr),e(go,Blr),e(go,Ua),e(Ua,Ilr),e(Ua,Q2e),e(Q2e,Nlr),e(Ua,qlr),e(Ua,H2e),e(H2e,jlr),e(Ua,Dlr),e(Ua,U2e),e(U2e,Glr),e(Ua,Olr),e(go,Vlr),e(go,Le),e(Le,I6),e(I6,J2e),e(J2e,Xlr),e(I6,zlr),e(I6,YW),e(YW,Wlr),e(I6,Qlr),e(Le,Hlr),e(Le,N6),e(N6,Y2e),e(Y2e,Ulr),e(N6,Jlr),e(N6,KW),e(KW,Ylr),e(N6,Klr),e(Le,Zlr),e(Le,q6),e(q6,K2e),e(K2e,eir),e(q6,oir),e(q6,ZW),e(ZW,rir),e(q6,tir),e(Le,air),e(Le,j6),e(j6,Z2e),e(Z2e,nir),e(j6,sir),e(j6,eQ),e(eQ,lir),e(j6,iir),e(Le,dir),e(Le,D6),e(D6,ebe),e(ebe,cir),e(D6,fir),e(D6,oQ),e(oQ,mir),e(D6,gir),e(Le,hir),e(Le,G6),e(G6,obe),e(obe,pir),e(G6,_ir),e(G6,rQ),e(rQ,uir),e(G6,bir),e(Le,vir),e(Le,O6),e(O6,rbe),e(rbe,Fir),e(O6,Tir),e(O6,tQ),e(tQ,Mir),e(O6,Eir),e(Le,Cir),e(Le,V6),e(V6,tbe),e(tbe,wir),e(V6,Air),e(V6,aQ),e(aQ,Lir),e(V6,yir),e(Le,xir),e(Le,X6),e(X6,abe),e(abe,$ir),e(X6,kir),e(X6,nQ),e(nQ,Sir),e(X6,Rir),e(Le,Pir),e(Le,z6),e(z6,nbe),e(nbe,Bir),e(z6,Iir),e(z6,sQ),e(sQ,Nir),e(z6,qir),e(go,jir),e(go,W6),e(W6,Dir),e(W6,sbe),e(sbe,Gir),e(W6,Oir),e(W6,lbe),e(lbe,Vir),e(go,Xir),M(Q6,go,null),b(f,vOe,u),b(f,Rd,u),e(Rd,H6),e(H6,ibe),M($y,ibe,null),e(Rd,zir),e(Rd,dbe),e(dbe,Wir),b(f,FOe,u),b(f,Wo,u),M(ky,Wo,null),e(Wo,Qir),e(Wo,Pd),e(Pd,Hir),e(Pd,lQ),e(lQ,Uir),e(Pd,Jir),e(Pd,iQ),e(iQ,Yir),e(Pd,Kir),e(Wo,Zir),e(Wo,Sy),e(Sy,edr),e(Sy,cbe),e(cbe,odr),e(Sy,rdr),e(Wo,tdr),e(Wo,Ct),M(Ry,Ct,null),e(Ct,adr),e(Ct,fbe),e(fbe,ndr),e(Ct,sdr),e(Ct,Bd),e(Bd,ldr),e(Bd,mbe),e(mbe,idr),e(Bd,ddr),e(Bd,dQ),e(dQ,cdr),e(Bd,fdr),e(Ct,mdr),M(U6,Ct,null),e(Wo,gdr),e(Wo,ho),M(Py,ho,null),e(ho,hdr),e(ho,gbe),e(gbe,pdr),e(ho,_dr),e(ho,Ja),e(Ja,udr),e(Ja,hbe),e(hbe,bdr),e(Ja,vdr),e(Ja,pbe),e(pbe,Fdr),e(Ja,Tdr),e(Ja,_be),e(_be,Mdr),e(Ja,Edr),e(ho,Cdr),e(ho,By),e(By,J6),e(J6,ube),e(ube,wdr),e(J6,Adr),e(J6,cQ),e(cQ,Ldr),e(J6,ydr),e(By,xdr),e(By,Y6),e(Y6,bbe),e(bbe,$dr),e(Y6,kdr),e(Y6,fQ),e(fQ,Sdr),e(Y6,Rdr),e(ho,Pdr),e(ho,K6),e(K6,Bdr),e(K6,vbe),e(vbe,Idr),e(K6,Ndr),e(K6,Fbe),e(Fbe,qdr),e(ho,jdr),M(Z6,ho,null),b(f,TOe,u),b(f,Id,u),e(Id,eT),e(eT,Tbe),M(Iy,Tbe,null),e(Id,Ddr),e(Id,Mbe),e(Mbe,Gdr),b(f,MOe,u),b(f,Qo,u),M(Ny,Qo,null),e(Qo,Odr),e(Qo,Nd),e(Nd,Vdr),e(Nd,mQ),e(mQ,Xdr),e(Nd,zdr),e(Nd,gQ),e(gQ,Wdr),e(Nd,Qdr),e(Qo,Hdr),e(Qo,qy),e(qy,Udr),e(qy,Ebe),e(Ebe,Jdr),e(qy,Ydr),e(Qo,Kdr),e(Qo,wt),M(jy,wt,null),e(wt,Zdr),e(wt,Cbe),e(Cbe,ecr),e(wt,ocr),e(wt,qd),e(qd,rcr),e(qd,wbe),e(wbe,tcr),e(qd,acr),e(qd,hQ),e(hQ,ncr),e(qd,scr),e(wt,lcr),M(oT,wt,null),e(Qo,icr),e(Qo,po),M(Dy,po,null),e(po,dcr),e(po,Abe),e(Abe,ccr),e(po,fcr),e(po,Ya),e(Ya,mcr),e(Ya,Lbe),e(Lbe,gcr),e(Ya,hcr),e(Ya,ybe),e(ybe,pcr),e(Ya,_cr),e(Ya,xbe),e(xbe,ucr),e(Ya,bcr),e(po,vcr),e(po,ot),e(ot,rT),e(rT,$be),e($be,Fcr),e(rT,Tcr),e(rT,pQ),e(pQ,Mcr),e(rT,Ecr),e(ot,Ccr),e(ot,tT),e(tT,kbe),e(kbe,wcr),e(tT,Acr),e(tT,_Q),e(_Q,Lcr),e(tT,ycr),e(ot,xcr),e(ot,aT),e(aT,Sbe),e(Sbe,$cr),e(aT,kcr),e(aT,uQ),e(uQ,Scr),e(aT,Rcr),e(ot,Pcr),e(ot,nT),e(nT,Rbe),e(Rbe,Bcr),e(nT,Icr),e(nT,bQ),e(bQ,Ncr),e(nT,qcr),e(ot,jcr),e(ot,sT),e(sT,Pbe),e(Pbe,Dcr),e(sT,Gcr),e(sT,vQ),e(vQ,Ocr),e(sT,Vcr),e(po,Xcr),e(po,lT),e(lT,zcr),e(lT,Bbe),e(Bbe,Wcr),e(lT,Qcr),e(lT,Ibe),e(Ibe,Hcr),e(po,Ucr),M(iT,po,null),b(f,EOe,u),b(f,jd,u),e(jd,dT),e(dT,Nbe),M(Gy,Nbe,null),e(jd,Jcr),e(jd,qbe),e(qbe,Ycr),b(f,COe,u),b(f,Ho,u),M(Oy,Ho,null),e(Ho,Kcr),e(Ho,Dd),e(Dd,Zcr),e(Dd,FQ),e(FQ,efr),e(Dd,ofr),e(Dd,TQ),e(TQ,rfr),e(Dd,tfr),e(Ho,afr),e(Ho,Vy),e(Vy,nfr),e(Vy,jbe),e(jbe,sfr),e(Vy,lfr),e(Ho,ifr),e(Ho,At),M(Xy,At,null),e(At,dfr),e(At,Dbe),e(Dbe,cfr),e(At,ffr),e(At,Gd),e(Gd,mfr),e(Gd,Gbe),e(Gbe,gfr),e(Gd,hfr),e(Gd,MQ),e(MQ,pfr),e(Gd,_fr),e(At,ufr),M(cT,At,null),e(Ho,bfr),e(Ho,_o),M(zy,_o,null),e(_o,vfr),e(_o,Obe),e(Obe,Ffr),e(_o,Tfr),e(_o,Ka),e(Ka,Mfr),e(Ka,Vbe),e(Vbe,Efr),e(Ka,Cfr),e(Ka,Xbe),e(Xbe,wfr),e(Ka,Afr),e(Ka,zbe),e(zbe,Lfr),e(Ka,yfr),e(_o,xfr),e(_o,Za),e(Za,fT),e(fT,Wbe),e(Wbe,$fr),e(fT,kfr),e(fT,EQ),e(EQ,Sfr),e(fT,Rfr),e(Za,Pfr),e(Za,mT),e(mT,Qbe),e(Qbe,Bfr),e(mT,Ifr),e(mT,CQ),e(CQ,Nfr),e(mT,qfr),e(Za,jfr),e(Za,gT),e(gT,Hbe),e(Hbe,Dfr),e(gT,Gfr),e(gT,wQ),e(wQ,Ofr),e(gT,Vfr),e(Za,Xfr),e(Za,hT),e(hT,Ube),e(Ube,zfr),e(hT,Wfr),e(hT,AQ),e(AQ,Qfr),e(hT,Hfr),e(_o,Ufr),e(_o,pT),e(pT,Jfr),e(pT,Jbe),e(Jbe,Yfr),e(pT,Kfr),e(pT,Ybe),e(Ybe,Zfr),e(_o,emr),M(_T,_o,null),b(f,wOe,u),b(f,Od,u),e(Od,uT),e(uT,Kbe),M(Wy,Kbe,null),e(Od,omr),e(Od,Zbe),e(Zbe,rmr),b(f,AOe,u),b(f,Uo,u),M(Qy,Uo,null),e(Uo,tmr),e(Uo,Vd),e(Vd,amr),e(Vd,LQ),e(LQ,nmr),e(Vd,smr),e(Vd,yQ),e(yQ,lmr),e(Vd,imr),e(Uo,dmr),e(Uo,Hy),e(Hy,cmr),e(Hy,e4e),e(e4e,fmr),e(Hy,mmr),e(Uo,gmr),e(Uo,Lt),M(Uy,Lt,null),e(Lt,hmr),e(Lt,o4e),e(o4e,pmr),e(Lt,_mr),e(Lt,Xd),e(Xd,umr),e(Xd,r4e),e(r4e,bmr),e(Xd,vmr),e(Xd,xQ),e(xQ,Fmr),e(Xd,Tmr),e(Lt,Mmr),M(bT,Lt,null),e(Uo,Emr),e(Uo,uo),M(Jy,uo,null),e(uo,Cmr),e(uo,t4e),e(t4e,wmr),e(uo,Amr),e(uo,en),e(en,Lmr),e(en,a4e),e(a4e,ymr),e(en,xmr),e(en,n4e),e(n4e,$mr),e(en,kmr),e(en,s4e),e(s4e,Smr),e(en,Rmr),e(uo,Pmr),e(uo,Yy),e(Yy,vT),e(vT,l4e),e(l4e,Bmr),e(vT,Imr),e(vT,$Q),e($Q,Nmr),e(vT,qmr),e(Yy,jmr),e(Yy,FT),e(FT,i4e),e(i4e,Dmr),e(FT,Gmr),e(FT,kQ),e(kQ,Omr),e(FT,Vmr),e(uo,Xmr),e(uo,TT),e(TT,zmr),e(TT,d4e),e(d4e,Wmr),e(TT,Qmr),e(TT,c4e),e(c4e,Hmr),e(uo,Umr),M(MT,uo,null),b(f,LOe,u),b(f,zd,u),e(zd,ET),e(ET,f4e),M(Ky,f4e,null),e(zd,Jmr),e(zd,m4e),e(m4e,Ymr),b(f,yOe,u),b(f,Jo,u),M(Zy,Jo,null),e(Jo,Kmr),e(Jo,Wd),e(Wd,Zmr),e(Wd,SQ),e(SQ,egr),e(Wd,ogr),e(Wd,RQ),e(RQ,rgr),e(Wd,tgr),e(Jo,agr),e(Jo,e8),e(e8,ngr),e(e8,g4e),e(g4e,sgr),e(e8,lgr),e(Jo,igr),e(Jo,yt),M(o8,yt,null),e(yt,dgr),e(yt,h4e),e(h4e,cgr),e(yt,fgr),e(yt,Qd),e(Qd,mgr),e(Qd,p4e),e(p4e,ggr),e(Qd,hgr),e(Qd,PQ),e(PQ,pgr),e(Qd,_gr),e(yt,ugr),M(CT,yt,null),e(Jo,bgr),e(Jo,bo),M(r8,bo,null),e(bo,vgr),e(bo,_4e),e(_4e,Fgr),e(bo,Tgr),e(bo,on),e(on,Mgr),e(on,u4e),e(u4e,Egr),e(on,Cgr),e(on,b4e),e(b4e,wgr),e(on,Agr),e(on,v4e),e(v4e,Lgr),e(on,ygr),e(bo,xgr),e(bo,F4e),e(F4e,wT),e(wT,T4e),e(T4e,$gr),e(wT,kgr),e(wT,BQ),e(BQ,Sgr),e(wT,Rgr),e(bo,Pgr),e(bo,AT),e(AT,Bgr),e(AT,M4e),e(M4e,Igr),e(AT,Ngr),e(AT,E4e),e(E4e,qgr),e(bo,jgr),M(LT,bo,null),b(f,xOe,u),b(f,Hd,u),e(Hd,yT),e(yT,C4e),M(t8,C4e,null),e(Hd,Dgr),e(Hd,w4e),e(w4e,Ggr),b(f,$Oe,u),b(f,Yo,u),M(a8,Yo,null),e(Yo,Ogr),e(Yo,Ud),e(Ud,Vgr),e(Ud,IQ),e(IQ,Xgr),e(Ud,zgr),e(Ud,NQ),e(NQ,Wgr),e(Ud,Qgr),e(Yo,Hgr),e(Yo,n8),e(n8,Ugr),e(n8,A4e),e(A4e,Jgr),e(n8,Ygr),e(Yo,Kgr),e(Yo,xt),M(s8,xt,null),e(xt,Zgr),e(xt,L4e),e(L4e,ehr),e(xt,ohr),e(xt,Jd),e(Jd,rhr),e(Jd,y4e),e(y4e,thr),e(Jd,ahr),e(Jd,qQ),e(qQ,nhr),e(Jd,shr),e(xt,lhr),M(xT,xt,null),e(Yo,ihr),e(Yo,vo),M(l8,vo,null),e(vo,dhr),e(vo,x4e),e(x4e,chr),e(vo,fhr),e(vo,rn),e(rn,mhr),e(rn,$4e),e($4e,ghr),e(rn,hhr),e(rn,k4e),e(k4e,phr),e(rn,_hr),e(rn,S4e),e(S4e,uhr),e(rn,bhr),e(vo,vhr),e(vo,tn),e(tn,$T),e($T,R4e),e(R4e,Fhr),e($T,Thr),e($T,jQ),e(jQ,Mhr),e($T,Ehr),e(tn,Chr),e(tn,kT),e(kT,P4e),e(P4e,whr),e(kT,Ahr),e(kT,DQ),e(DQ,Lhr),e(kT,yhr),e(tn,xhr),e(tn,ST),e(ST,B4e),e(B4e,$hr),e(ST,khr),e(ST,GQ),e(GQ,Shr),e(ST,Rhr),e(tn,Phr),e(tn,RT),e(RT,I4e),e(I4e,Bhr),e(RT,Ihr),e(RT,OQ),e(OQ,Nhr),e(RT,qhr),e(vo,jhr),e(vo,PT),e(PT,Dhr),e(PT,N4e),e(N4e,Ghr),e(PT,Ohr),e(PT,q4e),e(q4e,Vhr),e(vo,Xhr),M(BT,vo,null),b(f,kOe,u),b(f,Yd,u),e(Yd,IT),e(IT,j4e),M(i8,j4e,null),e(Yd,zhr),e(Yd,D4e),e(D4e,Whr),b(f,SOe,u),b(f,Ko,u),M(d8,Ko,null),e(Ko,Qhr),e(Ko,Kd),e(Kd,Hhr),e(Kd,VQ),e(VQ,Uhr),e(Kd,Jhr),e(Kd,XQ),e(XQ,Yhr),e(Kd,Khr),e(Ko,Zhr),e(Ko,c8),e(c8,epr),e(c8,G4e),e(G4e,opr),e(c8,rpr),e(Ko,tpr),e(Ko,$t),M(f8,$t,null),e($t,apr),e($t,O4e),e(O4e,npr),e($t,spr),e($t,Zd),e(Zd,lpr),e(Zd,V4e),e(V4e,ipr),e(Zd,dpr),e(Zd,zQ),e(zQ,cpr),e(Zd,fpr),e($t,mpr),M(NT,$t,null),e(Ko,gpr),e(Ko,Fo),M(m8,Fo,null),e(Fo,hpr),e(Fo,X4e),e(X4e,ppr),e(Fo,_pr),e(Fo,an),e(an,upr),e(an,z4e),e(z4e,bpr),e(an,vpr),e(an,W4e),e(W4e,Fpr),e(an,Tpr),e(an,Q4e),e(Q4e,Mpr),e(an,Epr),e(Fo,Cpr),e(Fo,H4e),e(H4e,qT),e(qT,U4e),e(U4e,wpr),e(qT,Apr),e(qT,WQ),e(WQ,Lpr),e(qT,ypr),e(Fo,xpr),e(Fo,jT),e(jT,$pr),e(jT,J4e),e(J4e,kpr),e(jT,Spr),e(jT,Y4e),e(Y4e,Rpr),e(Fo,Ppr),M(DT,Fo,null),b(f,ROe,u),b(f,ec,u),e(ec,GT),e(GT,K4e),M(g8,K4e,null),e(ec,Bpr),e(ec,Z4e),e(Z4e,Ipr),b(f,POe,u),b(f,Zo,u),M(h8,Zo,null),e(Zo,Npr),e(Zo,oc),e(oc,qpr),e(oc,QQ),e(QQ,jpr),e(oc,Dpr),e(oc,HQ),e(HQ,Gpr),e(oc,Opr),e(Zo,Vpr),e(Zo,p8),e(p8,Xpr),e(p8,eve),e(eve,zpr),e(p8,Wpr),e(Zo,Qpr),e(Zo,kt),M(_8,kt,null),e(kt,Hpr),e(kt,ove),e(ove,Upr),e(kt,Jpr),e(kt,rc),e(rc,Ypr),e(rc,rve),e(rve,Kpr),e(rc,Zpr),e(rc,UQ),e(UQ,e_r),e(rc,o_r),e(kt,r_r),M(OT,kt,null),e(Zo,t_r),e(Zo,Lr),M(u8,Lr,null),e(Lr,a_r),e(Lr,tve),e(tve,n_r),e(Lr,s_r),e(Lr,nn),e(nn,l_r),e(nn,ave),e(ave,i_r),e(nn,d_r),e(nn,nve),e(nve,c_r),e(nn,f_r),e(nn,sve),e(sve,m_r),e(nn,g_r),e(Lr,h_r),e(Lr,q),e(q,VT),e(VT,lve),e(lve,p_r),e(VT,__r),e(VT,JQ),e(JQ,u_r),e(VT,b_r),e(q,v_r),e(q,XT),e(XT,ive),e(ive,F_r),e(XT,T_r),e(XT,YQ),e(YQ,M_r),e(XT,E_r),e(q,C_r),e(q,zT),e(zT,dve),e(dve,w_r),e(zT,A_r),e(zT,KQ),e(KQ,L_r),e(zT,y_r),e(q,x_r),e(q,WT),e(WT,cve),e(cve,$_r),e(WT,k_r),e(WT,ZQ),e(ZQ,S_r),e(WT,R_r),e(q,P_r),e(q,QT),e(QT,fve),e(fve,B_r),e(QT,I_r),e(QT,eH),e(eH,N_r),e(QT,q_r),e(q,j_r),e(q,HT),e(HT,mve),e(mve,D_r),e(HT,G_r),e(HT,oH),e(oH,O_r),e(HT,V_r),e(q,X_r),e(q,UT),e(UT,gve),e(gve,z_r),e(UT,W_r),e(UT,rH),e(rH,Q_r),e(UT,H_r),e(q,U_r),e(q,JT),e(JT,hve),e(hve,J_r),e(JT,Y_r),e(JT,tH),e(tH,K_r),e(JT,Z_r),e(q,eur),e(q,YT),e(YT,pve),e(pve,our),e(YT,rur),e(YT,aH),e(aH,tur),e(YT,aur),e(q,nur),e(q,KT),e(KT,_ve),e(_ve,sur),e(KT,lur),e(KT,nH),e(nH,iur),e(KT,dur),e(q,cur),e(q,ZT),e(ZT,uve),e(uve,fur),e(ZT,mur),e(ZT,sH),e(sH,gur),e(ZT,hur),e(q,pur),e(q,e7),e(e7,bve),e(bve,_ur),e(e7,uur),e(e7,lH),e(lH,bur),e(e7,vur),e(q,Fur),e(q,o7),e(o7,vve),e(vve,Tur),e(o7,Mur),e(o7,iH),e(iH,Eur),e(o7,Cur),e(q,wur),e(q,r7),e(r7,Fve),e(Fve,Aur),e(r7,Lur),e(r7,dH),e(dH,yur),e(r7,xur),e(q,$ur),e(q,t7),e(t7,Tve),e(Tve,kur),e(t7,Sur),e(t7,cH),e(cH,Rur),e(t7,Pur),e(q,Bur),e(q,a7),e(a7,Mve),e(Mve,Iur),e(a7,Nur),e(a7,fH),e(fH,qur),e(a7,jur),e(q,Dur),e(q,n7),e(n7,Eve),e(Eve,Gur),e(n7,Our),e(n7,mH),e(mH,Vur),e(n7,Xur),e(q,zur),e(q,zs),e(zs,Cve),e(Cve,Wur),e(zs,Qur),e(zs,gH),e(gH,Hur),e(zs,Uur),e(zs,hH),e(hH,Jur),e(zs,Yur),e(q,Kur),e(q,s7),e(s7,wve),e(wve,Zur),e(s7,e1r),e(s7,pH),e(pH,o1r),e(s7,r1r),e(q,t1r),e(q,l7),e(l7,Ave),e(Ave,a1r),e(l7,n1r),e(l7,_H),e(_H,s1r),e(l7,l1r),e(q,i1r),e(q,i7),e(i7,Lve),e(Lve,d1r),e(i7,c1r),e(i7,uH),e(uH,f1r),e(i7,m1r),e(q,g1r),e(q,d7),e(d7,yve),e(yve,h1r),e(d7,p1r),e(d7,bH),e(bH,_1r),e(d7,u1r),e(q,b1r),e(q,c7),e(c7,xve),e(xve,v1r),e(c7,F1r),e(c7,vH),e(vH,T1r),e(c7,M1r),e(q,E1r),e(q,f7),e(f7,$ve),e($ve,C1r),e(f7,w1r),e(f7,FH),e(FH,A1r),e(f7,L1r),e(q,y1r),e(q,m7),e(m7,kve),e(kve,x1r),e(m7,$1r),e(m7,TH),e(TH,k1r),e(m7,S1r),e(q,R1r),e(q,g7),e(g7,Sve),e(Sve,P1r),e(g7,B1r),e(g7,MH),e(MH,I1r),e(g7,N1r),e(q,q1r),e(q,h7),e(h7,Rve),e(Rve,j1r),e(h7,D1r),e(h7,EH),e(EH,G1r),e(h7,O1r),e(q,V1r),e(q,p7),e(p7,Pve),e(Pve,X1r),e(p7,z1r),e(p7,CH),e(CH,W1r),e(p7,Q1r),e(q,H1r),e(q,_7),e(_7,Bve),e(Bve,U1r),e(_7,J1r),e(_7,wH),e(wH,Y1r),e(_7,K1r),e(q,Z1r),e(q,u7),e(u7,Ive),e(Ive,e2r),e(u7,o2r),e(u7,AH),e(AH,r2r),e(u7,t2r),e(q,a2r),e(q,b7),e(b7,Nve),e(Nve,n2r),e(b7,s2r),e(b7,LH),e(LH,l2r),e(b7,i2r),e(q,d2r),e(q,v7),e(v7,qve),e(qve,c2r),e(v7,f2r),e(v7,yH),e(yH,m2r),e(v7,g2r),e(q,h2r),e(q,F7),e(F7,jve),e(jve,p2r),e(F7,_2r),e(F7,xH),e(xH,u2r),e(F7,b2r),e(q,v2r),e(q,T7),e(T7,Dve),e(Dve,F2r),e(T7,T2r),e(T7,$H),e($H,M2r),e(T7,E2r),e(q,C2r),e(q,M7),e(M7,Gve),e(Gve,w2r),e(M7,A2r),e(M7,kH),e(kH,L2r),e(M7,y2r),e(q,x2r),e(q,E7),e(E7,Ove),e(Ove,$2r),e(E7,k2r),e(E7,SH),e(SH,S2r),e(E7,R2r),e(q,P2r),e(q,C7),e(C7,Vve),e(Vve,B2r),e(C7,I2r),e(C7,RH),e(RH,N2r),e(C7,q2r),e(q,j2r),e(q,w7),e(w7,Xve),e(Xve,D2r),e(w7,G2r),e(w7,PH),e(PH,O2r),e(w7,V2r),e(q,X2r),e(q,A7),e(A7,zve),e(zve,z2r),e(A7,W2r),e(A7,BH),e(BH,Q2r),e(A7,H2r),e(q,U2r),e(q,L7),e(L7,Wve),e(Wve,J2r),e(L7,Y2r),e(L7,IH),e(IH,K2r),e(L7,Z2r),e(q,ebr),e(q,y7),e(y7,Qve),e(Qve,obr),e(y7,rbr),e(y7,NH),e(NH,tbr),e(y7,abr),e(q,nbr),e(q,x7),e(x7,Hve),e(Hve,sbr),e(x7,lbr),e(x7,qH),e(qH,ibr),e(x7,dbr),e(q,cbr),e(q,$7),e($7,Uve),e(Uve,fbr),e($7,mbr),e($7,jH),e(jH,gbr),e($7,hbr),e(q,pbr),e(q,k7),e(k7,Jve),e(Jve,_br),e(k7,ubr),e(k7,DH),e(DH,bbr),e(k7,vbr),e(q,Fbr),e(q,S7),e(S7,Yve),e(Yve,Tbr),e(S7,Mbr),e(S7,GH),e(GH,Ebr),e(S7,Cbr),e(q,wbr),e(q,R7),e(R7,Kve),e(Kve,Abr),e(R7,Lbr),e(R7,OH),e(OH,ybr),e(R7,xbr),e(q,$br),e(q,P7),e(P7,Zve),e(Zve,kbr),e(P7,Sbr),e(P7,VH),e(VH,Rbr),e(P7,Pbr),e(q,Bbr),e(q,B7),e(B7,eFe),e(eFe,Ibr),e(B7,Nbr),e(B7,XH),e(XH,qbr),e(B7,jbr),e(Lr,Dbr),M(I7,Lr,null),b(f,BOe,u),b(f,tc,u),e(tc,N7),e(N7,oFe),M(b8,oFe,null),e(tc,Gbr),e(tc,rFe),e(rFe,Obr),b(f,IOe,u),b(f,er,u),M(v8,er,null),e(er,Vbr),e(er,ac),e(ac,Xbr),e(ac,zH),e(zH,zbr),e(ac,Wbr),e(ac,WH),e(WH,Qbr),e(ac,Hbr),e(er,Ubr),e(er,F8),e(F8,Jbr),e(F8,tFe),e(tFe,Ybr),e(F8,Kbr),e(er,Zbr),e(er,St),M(T8,St,null),e(St,e4r),e(St,aFe),e(aFe,o4r),e(St,r4r),e(St,nc),e(nc,t4r),e(nc,nFe),e(nFe,a4r),e(nc,n4r),e(nc,QH),e(QH,s4r),e(nc,l4r),e(St,i4r),M(q7,St,null),e(er,d4r),e(er,yr),M(M8,yr,null),e(yr,c4r),e(yr,sFe),e(sFe,f4r),e(yr,m4r),e(yr,sn),e(sn,g4r),e(sn,lFe),e(lFe,h4r),e(sn,p4r),e(sn,iFe),e(iFe,_4r),e(sn,u4r),e(sn,dFe),e(dFe,b4r),e(sn,v4r),e(yr,F4r),e(yr,se),e(se,j7),e(j7,cFe),e(cFe,T4r),e(j7,M4r),e(j7,HH),e(HH,E4r),e(j7,C4r),e(se,w4r),e(se,D7),e(D7,fFe),e(fFe,A4r),e(D7,L4r),e(D7,UH),e(UH,y4r),e(D7,x4r),e(se,$4r),e(se,G7),e(G7,mFe),e(mFe,k4r),e(G7,S4r),e(G7,JH),e(JH,R4r),e(G7,P4r),e(se,B4r),e(se,O7),e(O7,gFe),e(gFe,I4r),e(O7,N4r),e(O7,YH),e(YH,q4r),e(O7,j4r),e(se,D4r),e(se,V7),e(V7,hFe),e(hFe,G4r),e(V7,O4r),e(V7,KH),e(KH,V4r),e(V7,X4r),e(se,z4r),e(se,X7),e(X7,pFe),e(pFe,W4r),e(X7,Q4r),e(X7,ZH),e(ZH,H4r),e(X7,U4r),e(se,J4r),e(se,z7),e(z7,_Fe),e(_Fe,Y4r),e(z7,K4r),e(z7,eU),e(eU,Z4r),e(z7,evr),e(se,ovr),e(se,W7),e(W7,uFe),e(uFe,rvr),e(W7,tvr),e(W7,oU),e(oU,avr),e(W7,nvr),e(se,svr),e(se,Q7),e(Q7,bFe),e(bFe,lvr),e(Q7,ivr),e(Q7,rU),e(rU,dvr),e(Q7,cvr),e(se,fvr),e(se,H7),e(H7,vFe),e(vFe,mvr),e(H7,gvr),e(H7,tU),e(tU,hvr),e(H7,pvr),e(se,_vr),e(se,U7),e(U7,FFe),e(FFe,uvr),e(U7,bvr),e(U7,aU),e(aU,vvr),e(U7,Fvr),e(se,Tvr),e(se,J7),e(J7,TFe),e(TFe,Mvr),e(J7,Evr),e(J7,nU),e(nU,Cvr),e(J7,wvr),e(se,Avr),e(se,Y7),e(Y7,MFe),e(MFe,Lvr),e(Y7,yvr),e(Y7,sU),e(sU,xvr),e(Y7,$vr),e(se,kvr),e(se,K7),e(K7,EFe),e(EFe,Svr),e(K7,Rvr),e(K7,lU),e(lU,Pvr),e(K7,Bvr),e(se,Ivr),e(se,Z7),e(Z7,CFe),e(CFe,Nvr),e(Z7,qvr),e(Z7,iU),e(iU,jvr),e(Z7,Dvr),e(se,Gvr),e(se,e9),e(e9,wFe),e(wFe,Ovr),e(e9,Vvr),e(e9,dU),e(dU,Xvr),e(e9,zvr),e(se,Wvr),e(se,o9),e(o9,AFe),e(AFe,Qvr),e(o9,Hvr),e(o9,cU),e(cU,Uvr),e(o9,Jvr),e(se,Yvr),e(se,r9),e(r9,LFe),e(LFe,Kvr),e(r9,Zvr),e(r9,fU),e(fU,eFr),e(r9,oFr),e(se,rFr),e(se,t9),e(t9,yFe),e(yFe,tFr),e(t9,aFr),e(t9,mU),e(mU,nFr),e(t9,sFr),e(se,lFr),e(se,a9),e(a9,xFe),e(xFe,iFr),e(a9,dFr),e(a9,gU),e(gU,cFr),e(a9,fFr),e(se,mFr),e(se,n9),e(n9,$Fe),e($Fe,gFr),e(n9,hFr),e(n9,hU),e(hU,pFr),e(n9,_Fr),e(se,uFr),e(se,s9),e(s9,kFe),e(kFe,bFr),e(s9,vFr),e(s9,pU),e(pU,FFr),e(s9,TFr),e(se,MFr),e(se,l9),e(l9,SFe),e(SFe,EFr),e(l9,CFr),e(l9,_U),e(_U,wFr),e(l9,AFr),e(yr,LFr),M(i9,yr,null),b(f,NOe,u),b(f,sc,u),e(sc,d9),e(d9,RFe),M(E8,RFe,null),e(sc,yFr),e(sc,PFe),e(PFe,xFr),b(f,qOe,u),b(f,or,u),M(C8,or,null),e(or,$Fr),e(or,lc),e(lc,kFr),e(lc,uU),e(uU,SFr),e(lc,RFr),e(lc,bU),e(bU,PFr),e(lc,BFr),e(or,IFr),e(or,w8),e(w8,NFr),e(w8,BFe),e(BFe,qFr),e(w8,jFr),e(or,DFr),e(or,Rt),M(A8,Rt,null),e(Rt,GFr),e(Rt,IFe),e(IFe,OFr),e(Rt,VFr),e(Rt,ic),e(ic,XFr),e(ic,NFe),e(NFe,zFr),e(ic,WFr),e(ic,vU),e(vU,QFr),e(ic,HFr),e(Rt,UFr),M(c9,Rt,null),e(or,JFr),e(or,xr),M(L8,xr,null),e(xr,YFr),e(xr,qFe),e(qFe,KFr),e(xr,ZFr),e(xr,ln),e(ln,e6r),e(ln,jFe),e(jFe,o6r),e(ln,r6r),e(ln,DFe),e(DFe,t6r),e(ln,a6r),e(ln,GFe),e(GFe,n6r),e(ln,s6r),e(xr,l6r),e(xr,Me),e(Me,f9),e(f9,OFe),e(OFe,i6r),e(f9,d6r),e(f9,FU),e(FU,c6r),e(f9,f6r),e(Me,m6r),e(Me,m9),e(m9,VFe),e(VFe,g6r),e(m9,h6r),e(m9,TU),e(TU,p6r),e(m9,_6r),e(Me,u6r),e(Me,g9),e(g9,XFe),e(XFe,b6r),e(g9,v6r),e(g9,MU),e(MU,F6r),e(g9,T6r),e(Me,M6r),e(Me,h9),e(h9,zFe),e(zFe,E6r),e(h9,C6r),e(h9,EU),e(EU,w6r),e(h9,A6r),e(Me,L6r),e(Me,p9),e(p9,WFe),e(WFe,y6r),e(p9,x6r),e(p9,CU),e(CU,$6r),e(p9,k6r),e(Me,S6r),e(Me,_9),e(_9,QFe),e(QFe,R6r),e(_9,P6r),e(_9,wU),e(wU,B6r),e(_9,I6r),e(Me,N6r),e(Me,u9),e(u9,HFe),e(HFe,q6r),e(u9,j6r),e(u9,AU),e(AU,D6r),e(u9,G6r),e(Me,O6r),e(Me,b9),e(b9,UFe),e(UFe,V6r),e(b9,X6r),e(b9,LU),e(LU,z6r),e(b9,W6r),e(Me,Q6r),e(Me,v9),e(v9,JFe),e(JFe,H6r),e(v9,U6r),e(v9,yU),e(yU,J6r),e(v9,Y6r),e(Me,K6r),e(Me,F9),e(F9,YFe),e(YFe,Z6r),e(F9,eTr),e(F9,xU),e(xU,oTr),e(F9,rTr),e(Me,tTr),e(Me,T9),e(T9,KFe),e(KFe,aTr),e(T9,nTr),e(T9,$U),e($U,sTr),e(T9,lTr),e(Me,iTr),e(Me,M9),e(M9,ZFe),e(ZFe,dTr),e(M9,cTr),e(M9,kU),e(kU,fTr),e(M9,mTr),e(Me,gTr),e(Me,E9),e(E9,e6e),e(e6e,hTr),e(E9,pTr),e(E9,SU),e(SU,_Tr),e(E9,uTr),e(xr,bTr),M(C9,xr,null),b(f,jOe,u),b(f,dc,u),e(dc,w9),e(w9,o6e),M(y8,o6e,null),e(dc,vTr),e(dc,r6e),e(r6e,FTr),b(f,DOe,u),b(f,rr,u),M(x8,rr,null),e(rr,TTr),e(rr,cc),e(cc,MTr),e(cc,RU),e(RU,ETr),e(cc,CTr),e(cc,PU),e(PU,wTr),e(cc,ATr),e(rr,LTr),e(rr,$8),e($8,yTr),e($8,t6e),e(t6e,xTr),e($8,$Tr),e(rr,kTr),e(rr,Pt),M(k8,Pt,null),e(Pt,STr),e(Pt,a6e),e(a6e,RTr),e(Pt,PTr),e(Pt,fc),e(fc,BTr),e(fc,n6e),e(n6e,ITr),e(fc,NTr),e(fc,BU),e(BU,qTr),e(fc,jTr),e(Pt,DTr),M(A9,Pt,null),e(rr,GTr),e(rr,$r),M(S8,$r,null),e($r,OTr),e($r,s6e),e(s6e,VTr),e($r,XTr),e($r,dn),e(dn,zTr),e(dn,l6e),e(l6e,WTr),e(dn,QTr),e(dn,i6e),e(i6e,HTr),e(dn,UTr),e(dn,d6e),e(d6e,JTr),e(dn,YTr),e($r,KTr),e($r,rt),e(rt,L9),e(L9,c6e),e(c6e,ZTr),e(L9,e7r),e(L9,IU),e(IU,o7r),e(L9,r7r),e(rt,t7r),e(rt,y9),e(y9,f6e),e(f6e,a7r),e(y9,n7r),e(y9,NU),e(NU,s7r),e(y9,l7r),e(rt,i7r),e(rt,x9),e(x9,m6e),e(m6e,d7r),e(x9,c7r),e(x9,qU),e(qU,f7r),e(x9,m7r),e(rt,g7r),e(rt,$9),e($9,g6e),e(g6e,h7r),e($9,p7r),e($9,jU),e(jU,_7r),e($9,u7r),e(rt,b7r),e(rt,k9),e(k9,h6e),e(h6e,v7r),e(k9,F7r),e(k9,DU),e(DU,T7r),e(k9,M7r),e($r,E7r),M(S9,$r,null),b(f,GOe,u),b(f,mc,u),e(mc,R9),e(R9,p6e),M(R8,p6e,null),e(mc,C7r),e(mc,_6e),e(_6e,w7r),b(f,OOe,u),b(f,tr,u),M(P8,tr,null),e(tr,A7r),e(tr,gc),e(gc,L7r),e(gc,GU),e(GU,y7r),e(gc,x7r),e(gc,OU),e(OU,$7r),e(gc,k7r),e(tr,S7r),e(tr,B8),e(B8,R7r),e(B8,u6e),e(u6e,P7r),e(B8,B7r),e(tr,I7r),e(tr,Bt),M(I8,Bt,null),e(Bt,N7r),e(Bt,b6e),e(b6e,q7r),e(Bt,j7r),e(Bt,hc),e(hc,D7r),e(hc,v6e),e(v6e,G7r),e(hc,O7r),e(hc,VU),e(VU,V7r),e(hc,X7r),e(Bt,z7r),M(P9,Bt,null),e(tr,W7r),e(tr,kr),M(N8,kr,null),e(kr,Q7r),e(kr,F6e),e(F6e,H7r),e(kr,U7r),e(kr,cn),e(cn,J7r),e(cn,T6e),e(T6e,Y7r),e(cn,K7r),e(cn,M6e),e(M6e,Z7r),e(cn,e9r),e(cn,E6e),e(E6e,o9r),e(cn,r9r),e(kr,t9r),e(kr,ie),e(ie,B9),e(B9,C6e),e(C6e,a9r),e(B9,n9r),e(B9,XU),e(XU,s9r),e(B9,l9r),e(ie,i9r),e(ie,I9),e(I9,w6e),e(w6e,d9r),e(I9,c9r),e(I9,zU),e(zU,f9r),e(I9,m9r),e(ie,g9r),e(ie,N9),e(N9,A6e),e(A6e,h9r),e(N9,p9r),e(N9,WU),e(WU,_9r),e(N9,u9r),e(ie,b9r),e(ie,q9),e(q9,L6e),e(L6e,v9r),e(q9,F9r),e(q9,QU),e(QU,T9r),e(q9,M9r),e(ie,E9r),e(ie,j9),e(j9,y6e),e(y6e,C9r),e(j9,w9r),e(j9,HU),e(HU,A9r),e(j9,L9r),e(ie,y9r),e(ie,D9),e(D9,x6e),e(x6e,x9r),e(D9,$9r),e(D9,UU),e(UU,k9r),e(D9,S9r),e(ie,R9r),e(ie,G9),e(G9,$6e),e($6e,P9r),e(G9,B9r),e(G9,JU),e(JU,I9r),e(G9,N9r),e(ie,q9r),e(ie,O9),e(O9,k6e),e(k6e,j9r),e(O9,D9r),e(O9,YU),e(YU,G9r),e(O9,O9r),e(ie,V9r),e(ie,V9),e(V9,S6e),e(S6e,X9r),e(V9,z9r),e(V9,KU),e(KU,W9r),e(V9,Q9r),e(ie,H9r),e(ie,X9),e(X9,R6e),e(R6e,U9r),e(X9,J9r),e(X9,ZU),e(ZU,Y9r),e(X9,K9r),e(ie,Z9r),e(ie,z9),e(z9,P6e),e(P6e,eMr),e(z9,oMr),e(z9,eJ),e(eJ,rMr),e(z9,tMr),e(ie,aMr),e(ie,W9),e(W9,B6e),e(B6e,nMr),e(W9,sMr),e(W9,oJ),e(oJ,lMr),e(W9,iMr),e(ie,dMr),e(ie,Q9),e(Q9,I6e),e(I6e,cMr),e(Q9,fMr),e(Q9,rJ),e(rJ,mMr),e(Q9,gMr),e(ie,hMr),e(ie,H9),e(H9,N6e),e(N6e,pMr),e(H9,_Mr),e(H9,tJ),e(tJ,uMr),e(H9,bMr),e(ie,vMr),e(ie,U9),e(U9,q6e),e(q6e,FMr),e(U9,TMr),e(U9,aJ),e(aJ,MMr),e(U9,EMr),e(ie,CMr),e(ie,J9),e(J9,j6e),e(j6e,wMr),e(J9,AMr),e(J9,nJ),e(nJ,LMr),e(J9,yMr),e(ie,xMr),e(ie,Y9),e(Y9,D6e),e(D6e,$Mr),e(Y9,kMr),e(Y9,sJ),e(sJ,SMr),e(Y9,RMr),e(ie,PMr),e(ie,K9),e(K9,G6e),e(G6e,BMr),e(K9,IMr),e(K9,lJ),e(lJ,NMr),e(K9,qMr),e(ie,jMr),e(ie,Z9),e(Z9,O6e),e(O6e,DMr),e(Z9,GMr),e(Z9,iJ),e(iJ,OMr),e(Z9,VMr),e(ie,XMr),e(ie,eM),e(eM,V6e),e(V6e,zMr),e(eM,WMr),e(eM,dJ),e(dJ,QMr),e(eM,HMr),e(kr,UMr),M(oM,kr,null),b(f,VOe,u),b(f,pc,u),e(pc,rM),e(rM,X6e),M(q8,X6e,null),e(pc,JMr),e(pc,z6e),e(z6e,YMr),b(f,XOe,u),b(f,ar,u),M(j8,ar,null),e(ar,KMr),e(ar,_c),e(_c,ZMr),e(_c,cJ),e(cJ,eEr),e(_c,oEr),e(_c,fJ),e(fJ,rEr),e(_c,tEr),e(ar,aEr),e(ar,D8),e(D8,nEr),e(D8,W6e),e(W6e,sEr),e(D8,lEr),e(ar,iEr),e(ar,It),M(G8,It,null),e(It,dEr),e(It,Q6e),e(Q6e,cEr),e(It,fEr),e(It,uc),e(uc,mEr),e(uc,H6e),e(H6e,gEr),e(uc,hEr),e(uc,mJ),e(mJ,pEr),e(uc,_Er),e(It,uEr),M(tM,It,null),e(ar,bEr),e(ar,Sr),M(O8,Sr,null),e(Sr,vEr),e(Sr,U6e),e(U6e,FEr),e(Sr,TEr),e(Sr,fn),e(fn,MEr),e(fn,J6e),e(J6e,EEr),e(fn,CEr),e(fn,Y6e),e(Y6e,wEr),e(fn,AEr),e(fn,K6e),e(K6e,LEr),e(fn,yEr),e(Sr,xEr),e(Sr,ye),e(ye,aM),e(aM,Z6e),e(Z6e,$Er),e(aM,kEr),e(aM,gJ),e(gJ,SEr),e(aM,REr),e(ye,PEr),e(ye,nM),e(nM,eTe),e(eTe,BEr),e(nM,IEr),e(nM,hJ),e(hJ,NEr),e(nM,qEr),e(ye,jEr),e(ye,sM),e(sM,oTe),e(oTe,DEr),e(sM,GEr),e(sM,pJ),e(pJ,OEr),e(sM,VEr),e(ye,XEr),e(ye,lM),e(lM,rTe),e(rTe,zEr),e(lM,WEr),e(lM,_J),e(_J,QEr),e(lM,HEr),e(ye,UEr),e(ye,iM),e(iM,tTe),e(tTe,JEr),e(iM,YEr),e(iM,uJ),e(uJ,KEr),e(iM,ZEr),e(ye,eCr),e(ye,dM),e(dM,aTe),e(aTe,oCr),e(dM,rCr),e(dM,bJ),e(bJ,tCr),e(dM,aCr),e(ye,nCr),e(ye,cM),e(cM,nTe),e(nTe,sCr),e(cM,lCr),e(cM,vJ),e(vJ,iCr),e(cM,dCr),e(ye,cCr),e(ye,fM),e(fM,sTe),e(sTe,fCr),e(fM,mCr),e(fM,FJ),e(FJ,gCr),e(fM,hCr),e(ye,pCr),e(ye,mM),e(mM,lTe),e(lTe,_Cr),e(mM,uCr),e(mM,TJ),e(TJ,bCr),e(mM,vCr),e(ye,FCr),e(ye,gM),e(gM,iTe),e(iTe,TCr),e(gM,MCr),e(gM,MJ),e(MJ,ECr),e(gM,CCr),e(Sr,wCr),M(hM,Sr,null),b(f,zOe,u),b(f,bc,u),e(bc,pM),e(pM,dTe),M(V8,dTe,null),e(bc,ACr),e(bc,cTe),e(cTe,LCr),b(f,WOe,u),b(f,nr,u),M(X8,nr,null),e(nr,yCr),e(nr,vc),e(vc,xCr),e(vc,EJ),e(EJ,$Cr),e(vc,kCr),e(vc,CJ),e(CJ,SCr),e(vc,RCr),e(nr,PCr),e(nr,z8),e(z8,BCr),e(z8,fTe),e(fTe,ICr),e(z8,NCr),e(nr,qCr),e(nr,Nt),M(W8,Nt,null),e(Nt,jCr),e(Nt,mTe),e(mTe,DCr),e(Nt,GCr),e(Nt,Fc),e(Fc,OCr),e(Fc,gTe),e(gTe,VCr),e(Fc,XCr),e(Fc,wJ),e(wJ,zCr),e(Fc,WCr),e(Nt,QCr),M(_M,Nt,null),e(nr,HCr),e(nr,Rr),M(Q8,Rr,null),e(Rr,UCr),e(Rr,hTe),e(hTe,JCr),e(Rr,YCr),e(Rr,mn),e(mn,KCr),e(mn,pTe),e(pTe,ZCr),e(mn,e5r),e(mn,_Te),e(_Te,o5r),e(mn,r5r),e(mn,uTe),e(uTe,t5r),e(mn,a5r),e(Rr,n5r),e(Rr,te),e(te,uM),e(uM,bTe),e(bTe,s5r),e(uM,l5r),e(uM,AJ),e(AJ,i5r),e(uM,d5r),e(te,c5r),e(te,bM),e(bM,vTe),e(vTe,f5r),e(bM,m5r),e(bM,LJ),e(LJ,g5r),e(bM,h5r),e(te,p5r),e(te,vM),e(vM,FTe),e(FTe,_5r),e(vM,u5r),e(vM,yJ),e(yJ,b5r),e(vM,v5r),e(te,F5r),e(te,FM),e(FM,TTe),e(TTe,T5r),e(FM,M5r),e(FM,xJ),e(xJ,E5r),e(FM,C5r),e(te,w5r),e(te,TM),e(TM,MTe),e(MTe,A5r),e(TM,L5r),e(TM,$J),e($J,y5r),e(TM,x5r),e(te,$5r),e(te,MM),e(MM,ETe),e(ETe,k5r),e(MM,S5r),e(MM,kJ),e(kJ,R5r),e(MM,P5r),e(te,B5r),e(te,EM),e(EM,CTe),e(CTe,I5r),e(EM,N5r),e(EM,SJ),e(SJ,q5r),e(EM,j5r),e(te,D5r),e(te,CM),e(CM,wTe),e(wTe,G5r),e(CM,O5r),e(CM,RJ),e(RJ,V5r),e(CM,X5r),e(te,z5r),e(te,wM),e(wM,ATe),e(ATe,W5r),e(wM,Q5r),e(wM,PJ),e(PJ,H5r),e(wM,U5r),e(te,J5r),e(te,AM),e(AM,LTe),e(LTe,Y5r),e(AM,K5r),e(AM,BJ),e(BJ,Z5r),e(AM,e3r),e(te,o3r),e(te,LM),e(LM,yTe),e(yTe,r3r),e(LM,t3r),e(LM,IJ),e(IJ,a3r),e(LM,n3r),e(te,s3r),e(te,yM),e(yM,xTe),e(xTe,l3r),e(yM,i3r),e(yM,NJ),e(NJ,d3r),e(yM,c3r),e(te,f3r),e(te,xM),e(xM,$Te),e($Te,m3r),e(xM,g3r),e(xM,qJ),e(qJ,h3r),e(xM,p3r),e(te,_3r),e(te,$M),e($M,kTe),e(kTe,u3r),e($M,b3r),e($M,jJ),e(jJ,v3r),e($M,F3r),e(te,T3r),e(te,kM),e(kM,STe),e(STe,M3r),e(kM,E3r),e(kM,DJ),e(DJ,C3r),e(kM,w3r),e(te,A3r),e(te,SM),e(SM,RTe),e(RTe,L3r),e(SM,y3r),e(SM,GJ),e(GJ,x3r),e(SM,$3r),e(te,k3r),e(te,RM),e(RM,PTe),e(PTe,S3r),e(RM,R3r),e(RM,OJ),e(OJ,P3r),e(RM,B3r),e(te,I3r),e(te,PM),e(PM,BTe),e(BTe,N3r),e(PM,q3r),e(PM,VJ),e(VJ,j3r),e(PM,D3r),e(te,G3r),e(te,BM),e(BM,ITe),e(ITe,O3r),e(BM,V3r),e(BM,XJ),e(XJ,X3r),e(BM,z3r),e(te,W3r),e(te,IM),e(IM,NTe),e(NTe,Q3r),e(IM,H3r),e(IM,zJ),e(zJ,U3r),e(IM,J3r),e(te,Y3r),e(te,NM),e(NM,qTe),e(qTe,K3r),e(NM,Z3r),e(NM,WJ),e(WJ,e0r),e(NM,o0r),e(te,r0r),e(te,qM),e(qM,jTe),e(jTe,t0r),e(qM,a0r),e(qM,QJ),e(QJ,n0r),e(qM,s0r),e(te,l0r),e(te,jM),e(jM,DTe),e(DTe,i0r),e(jM,d0r),e(jM,HJ),e(HJ,c0r),e(jM,f0r),e(te,m0r),e(te,DM),e(DM,GTe),e(GTe,g0r),e(DM,h0r),e(DM,UJ),e(UJ,p0r),e(DM,_0r),e(te,u0r),e(te,GM),e(GM,OTe),e(OTe,b0r),e(GM,v0r),e(GM,JJ),e(JJ,F0r),e(GM,T0r),e(te,M0r),e(te,OM),e(OM,VTe),e(VTe,E0r),e(OM,C0r),e(OM,YJ),e(YJ,w0r),e(OM,A0r),e(Rr,L0r),M(VM,Rr,null),b(f,QOe,u),b(f,Tc,u),e(Tc,XM),e(XM,XTe),M(H8,XTe,null),e(Tc,y0r),e(Tc,zTe),e(zTe,x0r),b(f,HOe,u),b(f,sr,u),M(U8,sr,null),e(sr,$0r),e(sr,Mc),e(Mc,k0r),e(Mc,KJ),e(KJ,S0r),e(Mc,R0r),e(Mc,ZJ),e(ZJ,P0r),e(Mc,B0r),e(sr,I0r),e(sr,J8),e(J8,N0r),e(J8,WTe),e(WTe,q0r),e(J8,j0r),e(sr,D0r),e(sr,qt),M(Y8,qt,null),e(qt,G0r),e(qt,QTe),e(QTe,O0r),e(qt,V0r),e(qt,Ec),e(Ec,X0r),e(Ec,HTe),e(HTe,z0r),e(Ec,W0r),e(Ec,eY),e(eY,Q0r),e(Ec,H0r),e(qt,U0r),M(zM,qt,null),e(sr,J0r),e(sr,Pr),M(K8,Pr,null),e(Pr,Y0r),e(Pr,UTe),e(UTe,K0r),e(Pr,Z0r),e(Pr,gn),e(gn,ewr),e(gn,JTe),e(JTe,owr),e(gn,rwr),e(gn,YTe),e(YTe,twr),e(gn,awr),e(gn,KTe),e(KTe,nwr),e(gn,swr),e(Pr,lwr),e(Pr,_e),e(_e,WM),e(WM,ZTe),e(ZTe,iwr),e(WM,dwr),e(WM,oY),e(oY,cwr),e(WM,fwr),e(_e,mwr),e(_e,QM),e(QM,e7e),e(e7e,gwr),e(QM,hwr),e(QM,rY),e(rY,pwr),e(QM,_wr),e(_e,uwr),e(_e,HM),e(HM,o7e),e(o7e,bwr),e(HM,vwr),e(HM,tY),e(tY,Fwr),e(HM,Twr),e(_e,Mwr),e(_e,UM),e(UM,r7e),e(r7e,Ewr),e(UM,Cwr),e(UM,aY),e(aY,wwr),e(UM,Awr),e(_e,Lwr),e(_e,JM),e(JM,t7e),e(t7e,ywr),e(JM,xwr),e(JM,nY),e(nY,$wr),e(JM,kwr),e(_e,Swr),e(_e,YM),e(YM,a7e),e(a7e,Rwr),e(YM,Pwr),e(YM,sY),e(sY,Bwr),e(YM,Iwr),e(_e,Nwr),e(_e,KM),e(KM,n7e),e(n7e,qwr),e(KM,jwr),e(KM,lY),e(lY,Dwr),e(KM,Gwr),e(_e,Owr),e(_e,ZM),e(ZM,s7e),e(s7e,Vwr),e(ZM,Xwr),e(ZM,iY),e(iY,zwr),e(ZM,Wwr),e(_e,Qwr),e(_e,eE),e(eE,l7e),e(l7e,Hwr),e(eE,Uwr),e(eE,dY),e(dY,Jwr),e(eE,Ywr),e(_e,Kwr),e(_e,oE),e(oE,i7e),e(i7e,Zwr),e(oE,eAr),e(oE,cY),e(cY,oAr),e(oE,rAr),e(_e,tAr),e(_e,rE),e(rE,d7e),e(d7e,aAr),e(rE,nAr),e(rE,fY),e(fY,sAr),e(rE,lAr),e(_e,iAr),e(_e,tE),e(tE,c7e),e(c7e,dAr),e(tE,cAr),e(tE,mY),e(mY,fAr),e(tE,mAr),e(_e,gAr),e(_e,aE),e(aE,f7e),e(f7e,hAr),e(aE,pAr),e(aE,gY),e(gY,_Ar),e(aE,uAr),e(_e,bAr),e(_e,nE),e(nE,m7e),e(m7e,vAr),e(nE,FAr),e(nE,hY),e(hY,TAr),e(nE,MAr),e(_e,EAr),e(_e,sE),e(sE,g7e),e(g7e,CAr),e(sE,wAr),e(sE,pY),e(pY,AAr),e(sE,LAr),e(_e,yAr),e(_e,lE),e(lE,h7e),e(h7e,xAr),e(lE,$Ar),e(lE,_Y),e(_Y,kAr),e(lE,SAr),e(_e,RAr),e(_e,iE),e(iE,p7e),e(p7e,PAr),e(iE,BAr),e(iE,uY),e(uY,IAr),e(iE,NAr),e(Pr,qAr),M(dE,Pr,null),b(f,UOe,u),b(f,Cc,u),e(Cc,cE),e(cE,_7e),M(Z8,_7e,null),e(Cc,jAr),e(Cc,u7e),e(u7e,DAr),b(f,JOe,u),b(f,lr,u),M(ex,lr,null),e(lr,GAr),e(lr,wc),e(wc,OAr),e(wc,bY),e(bY,VAr),e(wc,XAr),e(wc,vY),e(vY,zAr),e(wc,WAr),e(lr,QAr),e(lr,ox),e(ox,HAr),e(ox,b7e),e(b7e,UAr),e(ox,JAr),e(lr,YAr),e(lr,jt),M(rx,jt,null),e(jt,KAr),e(jt,v7e),e(v7e,ZAr),e(jt,eLr),e(jt,Ac),e(Ac,oLr),e(Ac,F7e),e(F7e,rLr),e(Ac,tLr),e(Ac,FY),e(FY,aLr),e(Ac,nLr),e(jt,sLr),M(fE,jt,null),e(lr,lLr),e(lr,Br),M(tx,Br,null),e(Br,iLr),e(Br,T7e),e(T7e,dLr),e(Br,cLr),e(Br,hn),e(hn,fLr),e(hn,M7e),e(M7e,mLr),e(hn,gLr),e(hn,E7e),e(E7e,hLr),e(hn,pLr),e(hn,C7e),e(C7e,_Lr),e(hn,uLr),e(Br,bLr),e(Br,ax),e(ax,mE),e(mE,w7e),e(w7e,vLr),e(mE,FLr),e(mE,TY),e(TY,TLr),e(mE,MLr),e(ax,ELr),e(ax,gE),e(gE,A7e),e(A7e,CLr),e(gE,wLr),e(gE,MY),e(MY,ALr),e(gE,LLr),e(Br,yLr),M(hE,Br,null),b(f,YOe,u),b(f,Lc,u),e(Lc,pE),e(pE,L7e),M(nx,L7e,null),e(Lc,xLr),e(Lc,y7e),e(y7e,$Lr),b(f,KOe,u),b(f,ir,u),M(sx,ir,null),e(ir,kLr),e(ir,yc),e(yc,SLr),e(yc,EY),e(EY,RLr),e(yc,PLr),e(yc,CY),e(CY,BLr),e(yc,ILr),e(ir,NLr),e(ir,lx),e(lx,qLr),e(lx,x7e),e(x7e,jLr),e(lx,DLr),e(ir,GLr),e(ir,Dt),M(ix,Dt,null),e(Dt,OLr),e(Dt,$7e),e($7e,VLr),e(Dt,XLr),e(Dt,xc),e(xc,zLr),e(xc,k7e),e(k7e,WLr),e(xc,QLr),e(xc,wY),e(wY,HLr),e(xc,ULr),e(Dt,JLr),M(_E,Dt,null),e(ir,YLr),e(ir,Ir),M(dx,Ir,null),e(Ir,KLr),e(Ir,S7e),e(S7e,ZLr),e(Ir,eyr),e(Ir,pn),e(pn,oyr),e(pn,R7e),e(R7e,ryr),e(pn,tyr),e(pn,P7e),e(P7e,ayr),e(pn,nyr),e(pn,B7e),e(B7e,syr),e(pn,lyr),e(Ir,iyr),e(Ir,I7e),e(I7e,uE),e(uE,N7e),e(N7e,dyr),e(uE,cyr),e(uE,AY),e(AY,fyr),e(uE,myr),e(Ir,gyr),M(bE,Ir,null),b(f,ZOe,u),b(f,$c,u),e($c,vE),e(vE,q7e),M(cx,q7e,null),e($c,hyr),e($c,j7e),e(j7e,pyr),b(f,eVe,u),b(f,dr,u),M(fx,dr,null),e(dr,_yr),e(dr,kc),e(kc,uyr),e(kc,LY),e(LY,byr),e(kc,vyr),e(kc,yY),e(yY,Fyr),e(kc,Tyr),e(dr,Myr),e(dr,mx),e(mx,Eyr),e(mx,D7e),e(D7e,Cyr),e(mx,wyr),e(dr,Ayr),e(dr,Gt),M(gx,Gt,null),e(Gt,Lyr),e(Gt,G7e),e(G7e,yyr),e(Gt,xyr),e(Gt,Sc),e(Sc,$yr),e(Sc,O7e),e(O7e,kyr),e(Sc,Syr),e(Sc,xY),e(xY,Ryr),e(Sc,Pyr),e(Gt,Byr),M(FE,Gt,null),e(dr,Iyr),e(dr,Nr),M(hx,Nr,null),e(Nr,Nyr),e(Nr,V7e),e(V7e,qyr),e(Nr,jyr),e(Nr,_n),e(_n,Dyr),e(_n,X7e),e(X7e,Gyr),e(_n,Oyr),e(_n,z7e),e(z7e,Vyr),e(_n,Xyr),e(_n,W7e),e(W7e,zyr),e(_n,Wyr),e(Nr,Qyr),e(Nr,de),e(de,TE),e(TE,Q7e),e(Q7e,Hyr),e(TE,Uyr),e(TE,$Y),e($Y,Jyr),e(TE,Yyr),e(de,Kyr),e(de,ME),e(ME,H7e),e(H7e,Zyr),e(ME,e8r),e(ME,kY),e(kY,o8r),e(ME,r8r),e(de,t8r),e(de,EE),e(EE,U7e),e(U7e,a8r),e(EE,n8r),e(EE,SY),e(SY,s8r),e(EE,l8r),e(de,i8r),e(de,CE),e(CE,J7e),e(J7e,d8r),e(CE,c8r),e(CE,RY),e(RY,f8r),e(CE,m8r),e(de,g8r),e(de,wE),e(wE,Y7e),e(Y7e,h8r),e(wE,p8r),e(wE,PY),e(PY,_8r),e(wE,u8r),e(de,b8r),e(de,AE),e(AE,K7e),e(K7e,v8r),e(AE,F8r),e(AE,BY),e(BY,T8r),e(AE,M8r),e(de,E8r),e(de,LE),e(LE,Z7e),e(Z7e,C8r),e(LE,w8r),e(LE,IY),e(IY,A8r),e(LE,L8r),e(de,y8r),e(de,yE),e(yE,e9e),e(e9e,x8r),e(yE,$8r),e(yE,NY),e(NY,k8r),e(yE,S8r),e(de,R8r),e(de,xE),e(xE,o9e),e(o9e,P8r),e(xE,B8r),e(xE,qY),e(qY,I8r),e(xE,N8r),e(de,q8r),e(de,$E),e($E,r9e),e(r9e,j8r),e($E,D8r),e($E,jY),e(jY,G8r),e($E,O8r),e(de,V8r),e(de,kE),e(kE,t9e),e(t9e,X8r),e(kE,z8r),e(kE,DY),e(DY,W8r),e(kE,Q8r),e(de,H8r),e(de,SE),e(SE,a9e),e(a9e,U8r),e(SE,J8r),e(SE,GY),e(GY,Y8r),e(SE,K8r),e(de,Z8r),e(de,RE),e(RE,n9e),e(n9e,exr),e(RE,oxr),e(RE,OY),e(OY,rxr),e(RE,txr),e(de,axr),e(de,PE),e(PE,s9e),e(s9e,nxr),e(PE,sxr),e(PE,VY),e(VY,lxr),e(PE,ixr),e(de,dxr),e(de,BE),e(BE,l9e),e(l9e,cxr),e(BE,fxr),e(BE,XY),e(XY,mxr),e(BE,gxr),e(de,hxr),e(de,IE),e(IE,i9e),e(i9e,pxr),e(IE,_xr),e(IE,zY),e(zY,uxr),e(IE,bxr),e(de,vxr),e(de,NE),e(NE,d9e),e(d9e,Fxr),e(NE,Txr),e(NE,WY),e(WY,Mxr),e(NE,Exr),e(de,Cxr),e(de,qE),e(qE,c9e),e(c9e,wxr),e(qE,Axr),e(qE,QY),e(QY,Lxr),e(qE,yxr),e(de,xxr),e(de,jE),e(jE,f9e),e(f9e,$xr),e(jE,kxr),e(jE,HY),e(HY,Sxr),e(jE,Rxr),e(de,Pxr),e(de,DE),e(DE,m9e),e(m9e,Bxr),e(DE,Ixr),e(DE,UY),e(UY,Nxr),e(DE,qxr),e(Nr,jxr),M(GE,Nr,null),b(f,oVe,u),b(f,Rc,u),e(Rc,OE),e(OE,g9e),M(px,g9e,null),e(Rc,Dxr),e(Rc,h9e),e(h9e,Gxr),b(f,rVe,u),b(f,cr,u),M(_x,cr,null),e(cr,Oxr),e(cr,Pc),e(Pc,Vxr),e(Pc,JY),e(JY,Xxr),e(Pc,zxr),e(Pc,YY),e(YY,Wxr),e(Pc,Qxr),e(cr,Hxr),e(cr,ux),e(ux,Uxr),e(ux,p9e),e(p9e,Jxr),e(ux,Yxr),e(cr,Kxr),e(cr,Ot),M(bx,Ot,null),e(Ot,Zxr),e(Ot,_9e),e(_9e,e$r),e(Ot,o$r),e(Ot,Bc),e(Bc,r$r),e(Bc,u9e),e(u9e,t$r),e(Bc,a$r),e(Bc,KY),e(KY,n$r),e(Bc,s$r),e(Ot,l$r),M(VE,Ot,null),e(cr,i$r),e(cr,qr),M(vx,qr,null),e(qr,d$r),e(qr,b9e),e(b9e,c$r),e(qr,f$r),e(qr,un),e(un,m$r),e(un,v9e),e(v9e,g$r),e(un,h$r),e(un,F9e),e(F9e,p$r),e(un,_$r),e(un,T9e),e(T9e,u$r),e(un,b$r),e(qr,v$r),e(qr,ce),e(ce,XE),e(XE,M9e),e(M9e,F$r),e(XE,T$r),e(XE,ZY),e(ZY,M$r),e(XE,E$r),e(ce,C$r),e(ce,zE),e(zE,E9e),e(E9e,w$r),e(zE,A$r),e(zE,eK),e(eK,L$r),e(zE,y$r),e(ce,x$r),e(ce,WE),e(WE,C9e),e(C9e,$$r),e(WE,k$r),e(WE,oK),e(oK,S$r),e(WE,R$r),e(ce,P$r),e(ce,QE),e(QE,w9e),e(w9e,B$r),e(QE,I$r),e(QE,rK),e(rK,N$r),e(QE,q$r),e(ce,j$r),e(ce,HE),e(HE,A9e),e(A9e,D$r),e(HE,G$r),e(HE,tK),e(tK,O$r),e(HE,V$r),e(ce,X$r),e(ce,UE),e(UE,L9e),e(L9e,z$r),e(UE,W$r),e(UE,aK),e(aK,Q$r),e(UE,H$r),e(ce,U$r),e(ce,JE),e(JE,y9e),e(y9e,J$r),e(JE,Y$r),e(JE,nK),e(nK,K$r),e(JE,Z$r),e(ce,ekr),e(ce,YE),e(YE,x9e),e(x9e,okr),e(YE,rkr),e(YE,sK),e(sK,tkr),e(YE,akr),e(ce,nkr),e(ce,KE),e(KE,$9e),e($9e,skr),e(KE,lkr),e(KE,lK),e(lK,ikr),e(KE,dkr),e(ce,ckr),e(ce,ZE),e(ZE,k9e),e(k9e,fkr),e(ZE,mkr),e(ZE,iK),e(iK,gkr),e(ZE,hkr),e(ce,pkr),e(ce,eC),e(eC,S9e),e(S9e,_kr),e(eC,ukr),e(eC,dK),e(dK,bkr),e(eC,vkr),e(ce,Fkr),e(ce,oC),e(oC,R9e),e(R9e,Tkr),e(oC,Mkr),e(oC,cK),e(cK,Ekr),e(oC,Ckr),e(ce,wkr),e(ce,rC),e(rC,P9e),e(P9e,Akr),e(rC,Lkr),e(rC,fK),e(fK,ykr),e(rC,xkr),e(ce,$kr),e(ce,tC),e(tC,B9e),e(B9e,kkr),e(tC,Skr),e(tC,mK),e(mK,Rkr),e(tC,Pkr),e(ce,Bkr),e(ce,aC),e(aC,I9e),e(I9e,Ikr),e(aC,Nkr),e(aC,gK),e(gK,qkr),e(aC,jkr),e(ce,Dkr),e(ce,nC),e(nC,N9e),e(N9e,Gkr),e(nC,Okr),e(nC,hK),e(hK,Vkr),e(nC,Xkr),e(ce,zkr),e(ce,sC),e(sC,q9e),e(q9e,Wkr),e(sC,Qkr),e(sC,pK),e(pK,Hkr),e(sC,Ukr),e(ce,Jkr),e(ce,lC),e(lC,j9e),e(j9e,Ykr),e(lC,Kkr),e(lC,_K),e(_K,Zkr),e(lC,eSr),e(ce,oSr),e(ce,iC),e(iC,D9e),e(D9e,rSr),e(iC,tSr),e(iC,uK),e(uK,aSr),e(iC,nSr),e(ce,sSr),e(ce,dC),e(dC,G9e),e(G9e,lSr),e(dC,iSr),e(dC,bK),e(bK,dSr),e(dC,cSr),e(qr,fSr),M(cC,qr,null),b(f,tVe,u),b(f,Ic,u),e(Ic,fC),e(fC,O9e),M(Fx,O9e,null),e(Ic,mSr),e(Ic,V9e),e(V9e,gSr),b(f,aVe,u),b(f,fr,u),M(Tx,fr,null),e(fr,hSr),e(fr,Nc),e(Nc,pSr),e(Nc,vK),e(vK,_Sr),e(Nc,uSr),e(Nc,FK),e(FK,bSr),e(Nc,vSr),e(fr,FSr),e(fr,Mx),e(Mx,TSr),e(Mx,X9e),e(X9e,MSr),e(Mx,ESr),e(fr,CSr),e(fr,Vt),M(Ex,Vt,null),e(Vt,wSr),e(Vt,z9e),e(z9e,ASr),e(Vt,LSr),e(Vt,qc),e(qc,ySr),e(qc,W9e),e(W9e,xSr),e(qc,$Sr),e(qc,TK),e(TK,kSr),e(qc,SSr),e(Vt,RSr),M(mC,Vt,null),e(fr,PSr),e(fr,jr),M(Cx,jr,null),e(jr,BSr),e(jr,Q9e),e(Q9e,ISr),e(jr,NSr),e(jr,bn),e(bn,qSr),e(bn,H9e),e(H9e,jSr),e(bn,DSr),e(bn,U9e),e(U9e,GSr),e(bn,OSr),e(bn,J9e),e(J9e,VSr),e(bn,XSr),e(jr,zSr),e(jr,Y9e),e(Y9e,gC),e(gC,K9e),e(K9e,WSr),e(gC,QSr),e(gC,MK),e(MK,HSr),e(gC,USr),e(jr,JSr),M(hC,jr,null),b(f,nVe,u),b(f,jc,u),e(jc,pC),e(pC,Z9e),M(wx,Z9e,null),e(jc,YSr),e(jc,eMe),e(eMe,KSr),b(f,sVe,u),b(f,mr,u),M(Ax,mr,null),e(mr,ZSr),e(mr,Dc),e(Dc,eRr),e(Dc,EK),e(EK,oRr),e(Dc,rRr),e(Dc,CK),e(CK,tRr),e(Dc,aRr),e(mr,nRr),e(mr,Lx),e(Lx,sRr),e(Lx,oMe),e(oMe,lRr),e(Lx,iRr),e(mr,dRr),e(mr,Xt),M(yx,Xt,null),e(Xt,cRr),e(Xt,rMe),e(rMe,fRr),e(Xt,mRr),e(Xt,Gc),e(Gc,gRr),e(Gc,tMe),e(tMe,hRr),e(Gc,pRr),e(Gc,wK),e(wK,_Rr),e(Gc,uRr),e(Xt,bRr),M(_C,Xt,null),e(mr,vRr),e(mr,Dr),M(xx,Dr,null),e(Dr,FRr),e(Dr,aMe),e(aMe,TRr),e(Dr,MRr),e(Dr,vn),e(vn,ERr),e(vn,nMe),e(nMe,CRr),e(vn,wRr),e(vn,sMe),e(sMe,ARr),e(vn,LRr),e(vn,lMe),e(lMe,yRr),e(vn,xRr),e(Dr,$Rr),e(Dr,iMe),e(iMe,uC),e(uC,dMe),e(dMe,kRr),e(uC,SRr),e(uC,AK),e(AK,RRr),e(uC,PRr),e(Dr,BRr),M(bC,Dr,null),b(f,lVe,u),b(f,Oc,u),e(Oc,vC),e(vC,cMe),M($x,cMe,null),e(Oc,IRr),e(Oc,fMe),e(fMe,NRr),b(f,iVe,u),b(f,gr,u),M(kx,gr,null),e(gr,qRr),e(gr,Vc),e(Vc,jRr),e(Vc,LK),e(LK,DRr),e(Vc,GRr),e(Vc,yK),e(yK,ORr),e(Vc,VRr),e(gr,XRr),e(gr,Sx),e(Sx,zRr),e(Sx,mMe),e(mMe,WRr),e(Sx,QRr),e(gr,HRr),e(gr,zt),M(Rx,zt,null),e(zt,URr),e(zt,gMe),e(gMe,JRr),e(zt,YRr),e(zt,Xc),e(Xc,KRr),e(Xc,hMe),e(hMe,ZRr),e(Xc,ePr),e(Xc,xK),e(xK,oPr),e(Xc,rPr),e(zt,tPr),M(FC,zt,null),e(gr,aPr),e(gr,Gr),M(Px,Gr,null),e(Gr,nPr),e(Gr,pMe),e(pMe,sPr),e(Gr,lPr),e(Gr,Fn),e(Fn,iPr),e(Fn,_Me),e(_Me,dPr),e(Fn,cPr),e(Fn,uMe),e(uMe,fPr),e(Fn,mPr),e(Fn,bMe),e(bMe,gPr),e(Fn,hPr),e(Gr,pPr),e(Gr,oe),e(oe,TC),e(TC,vMe),e(vMe,_Pr),e(TC,uPr),e(TC,$K),e($K,bPr),e(TC,vPr),e(oe,FPr),e(oe,MC),e(MC,FMe),e(FMe,TPr),e(MC,MPr),e(MC,kK),e(kK,EPr),e(MC,CPr),e(oe,wPr),e(oe,EC),e(EC,TMe),e(TMe,APr),e(EC,LPr),e(EC,SK),e(SK,yPr),e(EC,xPr),e(oe,$Pr),e(oe,CC),e(CC,MMe),e(MMe,kPr),e(CC,SPr),e(CC,RK),e(RK,RPr),e(CC,PPr),e(oe,BPr),e(oe,wC),e(wC,EMe),e(EMe,IPr),e(wC,NPr),e(wC,PK),e(PK,qPr),e(wC,jPr),e(oe,DPr),e(oe,AC),e(AC,CMe),e(CMe,GPr),e(AC,OPr),e(AC,BK),e(BK,VPr),e(AC,XPr),e(oe,zPr),e(oe,LC),e(LC,wMe),e(wMe,WPr),e(LC,QPr),e(LC,IK),e(IK,HPr),e(LC,UPr),e(oe,JPr),e(oe,yC),e(yC,AMe),e(AMe,YPr),e(yC,KPr),e(yC,NK),e(NK,ZPr),e(yC,eBr),e(oe,oBr),e(oe,xC),e(xC,LMe),e(LMe,rBr),e(xC,tBr),e(xC,qK),e(qK,aBr),e(xC,nBr),e(oe,sBr),e(oe,$C),e($C,yMe),e(yMe,lBr),e($C,iBr),e($C,jK),e(jK,dBr),e($C,cBr),e(oe,fBr),e(oe,kC),e(kC,xMe),e(xMe,mBr),e(kC,gBr),e(kC,DK),e(DK,hBr),e(kC,pBr),e(oe,_Br),e(oe,SC),e(SC,$Me),e($Me,uBr),e(SC,bBr),e(SC,GK),e(GK,vBr),e(SC,FBr),e(oe,TBr),e(oe,RC),e(RC,kMe),e(kMe,MBr),e(RC,EBr),e(RC,OK),e(OK,CBr),e(RC,wBr),e(oe,ABr),e(oe,PC),e(PC,SMe),e(SMe,LBr),e(PC,yBr),e(PC,VK),e(VK,xBr),e(PC,$Br),e(oe,kBr),e(oe,BC),e(BC,RMe),e(RMe,SBr),e(BC,RBr),e(BC,XK),e(XK,PBr),e(BC,BBr),e(oe,IBr),e(oe,IC),e(IC,PMe),e(PMe,NBr),e(IC,qBr),e(IC,zK),e(zK,jBr),e(IC,DBr),e(oe,GBr),e(oe,NC),e(NC,BMe),e(BMe,OBr),e(NC,VBr),e(NC,WK),e(WK,XBr),e(NC,zBr),e(oe,WBr),e(oe,qC),e(qC,IMe),e(IMe,QBr),e(qC,HBr),e(qC,QK),e(QK,UBr),e(qC,JBr),e(oe,YBr),e(oe,jC),e(jC,NMe),e(NMe,KBr),e(jC,ZBr),e(jC,HK),e(HK,eIr),e(jC,oIr),e(oe,rIr),e(oe,DC),e(DC,qMe),e(qMe,tIr),e(DC,aIr),e(DC,UK),e(UK,nIr),e(DC,sIr),e(oe,lIr),e(oe,GC),e(GC,jMe),e(jMe,iIr),e(GC,dIr),e(GC,JK),e(JK,cIr),e(GC,fIr),e(oe,mIr),e(oe,OC),e(OC,DMe),e(DMe,gIr),e(OC,hIr),e(OC,YK),e(YK,pIr),e(OC,_Ir),e(oe,uIr),e(oe,VC),e(VC,GMe),e(GMe,bIr),e(VC,vIr),e(VC,KK),e(KK,FIr),e(VC,TIr),e(oe,MIr),e(oe,XC),e(XC,OMe),e(OMe,EIr),e(XC,CIr),e(XC,ZK),e(ZK,wIr),e(XC,AIr),e(oe,LIr),e(oe,zC),e(zC,VMe),e(VMe,yIr),e(zC,xIr),e(zC,eZ),e(eZ,$Ir),e(zC,kIr),e(oe,SIr),e(oe,WC),e(WC,XMe),e(XMe,RIr),e(WC,PIr),e(WC,oZ),e(oZ,BIr),e(WC,IIr),e(oe,NIr),e(oe,QC),e(QC,zMe),e(zMe,qIr),e(QC,jIr),e(QC,rZ),e(rZ,DIr),e(QC,GIr),e(Gr,OIr),M(HC,Gr,null),b(f,dVe,u),b(f,zc,u),e(zc,UC),e(UC,WMe),M(Bx,WMe,null),e(zc,VIr),e(zc,QMe),e(QMe,XIr),b(f,cVe,u),b(f,hr,u),M(Ix,hr,null),e(hr,zIr),e(hr,Wc),e(Wc,WIr),e(Wc,tZ),e(tZ,QIr),e(Wc,HIr),e(Wc,aZ),e(aZ,UIr),e(Wc,JIr),e(hr,YIr),e(hr,Nx),e(Nx,KIr),e(Nx,HMe),e(HMe,ZIr),e(Nx,eNr),e(hr,oNr),e(hr,Wt),M(qx,Wt,null),e(Wt,rNr),e(Wt,UMe),e(UMe,tNr),e(Wt,aNr),e(Wt,Qc),e(Qc,nNr),e(Qc,JMe),e(JMe,sNr),e(Qc,lNr),e(Qc,nZ),e(nZ,iNr),e(Qc,dNr),e(Wt,cNr),M(JC,Wt,null),e(hr,fNr),e(hr,Or),M(jx,Or,null),e(Or,mNr),e(Or,YMe),e(YMe,gNr),e(Or,hNr),e(Or,Tn),e(Tn,pNr),e(Tn,KMe),e(KMe,_Nr),e(Tn,uNr),e(Tn,ZMe),e(ZMe,bNr),e(Tn,vNr),e(Tn,eEe),e(eEe,FNr),e(Tn,TNr),e(Or,MNr),e(Or,xe),e(xe,YC),e(YC,oEe),e(oEe,ENr),e(YC,CNr),e(YC,sZ),e(sZ,wNr),e(YC,ANr),e(xe,LNr),e(xe,KC),e(KC,rEe),e(rEe,yNr),e(KC,xNr),e(KC,lZ),e(lZ,$Nr),e(KC,kNr),e(xe,SNr),e(xe,ZC),e(ZC,tEe),e(tEe,RNr),e(ZC,PNr),e(ZC,iZ),e(iZ,BNr),e(ZC,INr),e(xe,NNr),e(xe,e5),e(e5,aEe),e(aEe,qNr),e(e5,jNr),e(e5,dZ),e(dZ,DNr),e(e5,GNr),e(xe,ONr),e(xe,o5),e(o5,nEe),e(nEe,VNr),e(o5,XNr),e(o5,cZ),e(cZ,zNr),e(o5,WNr),e(xe,QNr),e(xe,r5),e(r5,sEe),e(sEe,HNr),e(r5,UNr),e(r5,fZ),e(fZ,JNr),e(r5,YNr),e(xe,KNr),e(xe,t5),e(t5,lEe),e(lEe,ZNr),e(t5,eqr),e(t5,mZ),e(mZ,oqr),e(t5,rqr),e(xe,tqr),e(xe,a5),e(a5,iEe),e(iEe,aqr),e(a5,nqr),e(a5,gZ),e(gZ,sqr),e(a5,lqr),e(xe,iqr),e(xe,n5),e(n5,dEe),e(dEe,dqr),e(n5,cqr),e(n5,hZ),e(hZ,fqr),e(n5,mqr),e(xe,gqr),e(xe,s5),e(s5,cEe),e(cEe,hqr),e(s5,pqr),e(s5,pZ),e(pZ,_qr),e(s5,uqr),e(Or,bqr),M(l5,Or,null),b(f,fVe,u),b(f,Hc,u),e(Hc,i5),e(i5,fEe),M(Dx,fEe,null),e(Hc,vqr),e(Hc,mEe),e(mEe,Fqr),b(f,mVe,u),b(f,pr,u),M(Gx,pr,null),e(pr,Tqr),e(pr,Uc),e(Uc,Mqr),e(Uc,_Z),e(_Z,Eqr),e(Uc,Cqr),e(Uc,uZ),e(uZ,wqr),e(Uc,Aqr),e(pr,Lqr),e(pr,Ox),e(Ox,yqr),e(Ox,gEe),e(gEe,xqr),e(Ox,$qr),e(pr,kqr),e(pr,Qt),M(Vx,Qt,null),e(Qt,Sqr),e(Qt,hEe),e(hEe,Rqr),e(Qt,Pqr),e(Qt,Jc),e(Jc,Bqr),e(Jc,pEe),e(pEe,Iqr),e(Jc,Nqr),e(Jc,bZ),e(bZ,qqr),e(Jc,jqr),e(Qt,Dqr),M(d5,Qt,null),e(pr,Gqr),e(pr,Vr),M(Xx,Vr,null),e(Vr,Oqr),e(Vr,_Ee),e(_Ee,Vqr),e(Vr,Xqr),e(Vr,Mn),e(Mn,zqr),e(Mn,uEe),e(uEe,Wqr),e(Mn,Qqr),e(Mn,bEe),e(bEe,Hqr),e(Mn,Uqr),e(Mn,vEe),e(vEe,Jqr),e(Mn,Yqr),e(Vr,Kqr),e(Vr,Ee),e(Ee,c5),e(c5,FEe),e(FEe,Zqr),e(c5,ejr),e(c5,vZ),e(vZ,ojr),e(c5,rjr),e(Ee,tjr),e(Ee,f5),e(f5,TEe),e(TEe,ajr),e(f5,njr),e(f5,FZ),e(FZ,sjr),e(f5,ljr),e(Ee,ijr),e(Ee,m5),e(m5,MEe),e(MEe,djr),e(m5,cjr),e(m5,TZ),e(TZ,fjr),e(m5,mjr),e(Ee,gjr),e(Ee,g5),e(g5,EEe),e(EEe,hjr),e(g5,pjr),e(g5,MZ),e(MZ,_jr),e(g5,ujr),e(Ee,bjr),e(Ee,h5),e(h5,CEe),e(CEe,vjr),e(h5,Fjr),e(h5,EZ),e(EZ,Tjr),e(h5,Mjr),e(Ee,Ejr),e(Ee,p5),e(p5,wEe),e(wEe,Cjr),e(p5,wjr),e(p5,CZ),e(CZ,Ajr),e(p5,Ljr),e(Ee,yjr),e(Ee,_5),e(_5,AEe),e(AEe,xjr),e(_5,$jr),e(_5,wZ),e(wZ,kjr),e(_5,Sjr),e(Ee,Rjr),e(Ee,u5),e(u5,LEe),e(LEe,Pjr),e(u5,Bjr),e(u5,AZ),e(AZ,Ijr),e(u5,Njr),e(Ee,qjr),e(Ee,b5),e(b5,yEe),e(yEe,jjr),e(b5,Djr),e(b5,LZ),e(LZ,Gjr),e(b5,Ojr),e(Ee,Vjr),e(Ee,v5),e(v5,xEe),e(xEe,Xjr),e(v5,zjr),e(v5,yZ),e(yZ,Wjr),e(v5,Qjr),e(Ee,Hjr),e(Ee,F5),e(F5,$Ee),e($Ee,Ujr),e(F5,Jjr),e(F5,xZ),e(xZ,Yjr),e(F5,Kjr),e(Ee,Zjr),e(Ee,T5),e(T5,kEe),e(kEe,eDr),e(T5,oDr),e(T5,$Z),e($Z,rDr),e(T5,tDr),e(Ee,aDr),e(Ee,M5),e(M5,SEe),e(SEe,nDr),e(M5,sDr),e(M5,kZ),e(kZ,lDr),e(M5,iDr),e(Vr,dDr),M(E5,Vr,null),b(f,gVe,u),b(f,Yc,u),e(Yc,C5),e(C5,REe),M(zx,REe,null),e(Yc,cDr),e(Yc,PEe),e(PEe,fDr),b(f,hVe,u),b(f,_r,u),M(Wx,_r,null),e(_r,mDr),e(_r,Kc),e(Kc,gDr),e(Kc,SZ),e(SZ,hDr),e(Kc,pDr),e(Kc,RZ),e(RZ,_Dr),e(Kc,uDr),e(_r,bDr),e(_r,Qx),e(Qx,vDr),e(Qx,BEe),e(BEe,FDr),e(Qx,TDr),e(_r,MDr),e(_r,Ht),M(Hx,Ht,null),e(Ht,EDr),e(Ht,IEe),e(IEe,CDr),e(Ht,wDr),e(Ht,Zc),e(Zc,ADr),e(Zc,NEe),e(NEe,LDr),e(Zc,yDr),e(Zc,PZ),e(PZ,xDr),e(Zc,$Dr),e(Ht,kDr),M(w5,Ht,null),e(_r,SDr),e(_r,Xr),M(Ux,Xr,null),e(Xr,RDr),e(Xr,qEe),e(qEe,PDr),e(Xr,BDr),e(Xr,En),e(En,IDr),e(En,jEe),e(jEe,NDr),e(En,qDr),e(En,DEe),e(DEe,jDr),e(En,DDr),e(En,GEe),e(GEe,GDr),e(En,ODr),e(Xr,VDr),e(Xr,$e),e($e,A5),e(A5,OEe),e(OEe,XDr),e(A5,zDr),e(A5,BZ),e(BZ,WDr),e(A5,QDr),e($e,HDr),e($e,L5),e(L5,VEe),e(VEe,UDr),e(L5,JDr),e(L5,IZ),e(IZ,YDr),e(L5,KDr),e($e,ZDr),e($e,y5),e(y5,XEe),e(XEe,eGr),e(y5,oGr),e(y5,NZ),e(NZ,rGr),e(y5,tGr),e($e,aGr),e($e,x5),e(x5,zEe),e(zEe,nGr),e(x5,sGr),e(x5,qZ),e(qZ,lGr),e(x5,iGr),e($e,dGr),e($e,$5),e($5,WEe),e(WEe,cGr),e($5,fGr),e($5,jZ),e(jZ,mGr),e($5,gGr),e($e,hGr),e($e,k5),e(k5,QEe),e(QEe,pGr),e(k5,_Gr),e(k5,DZ),e(DZ,uGr),e(k5,bGr),e($e,vGr),e($e,S5),e(S5,HEe),e(HEe,FGr),e(S5,TGr),e(S5,GZ),e(GZ,MGr),e(S5,EGr),e($e,CGr),e($e,R5),e(R5,UEe),e(UEe,wGr),e(R5,AGr),e(R5,OZ),e(OZ,LGr),e(R5,yGr),e($e,xGr),e($e,P5),e(P5,JEe),e(JEe,$Gr),e(P5,kGr),e(P5,VZ),e(VZ,SGr),e(P5,RGr),e($e,PGr),e($e,B5),e(B5,YEe),e(YEe,BGr),e(B5,IGr),e(B5,XZ),e(XZ,NGr),e(B5,qGr),e(Xr,jGr),M(I5,Xr,null),b(f,pVe,u),b(f,ef,u),e(ef,N5),e(N5,KEe),M(Jx,KEe,null),e(ef,DGr),e(ef,ZEe),e(ZEe,GGr),b(f,_Ve,u),b(f,ur,u),M(Yx,ur,null),e(ur,OGr),e(ur,of),e(of,VGr),e(of,zZ),e(zZ,XGr),e(of,zGr),e(of,WZ),e(WZ,WGr),e(of,QGr),e(ur,HGr),e(ur,Kx),e(Kx,UGr),e(Kx,eCe),e(eCe,JGr),e(Kx,YGr),e(ur,KGr),e(ur,Ut),M(Zx,Ut,null),e(Ut,ZGr),e(Ut,oCe),e(oCe,eOr),e(Ut,oOr),e(Ut,rf),e(rf,rOr),e(rf,rCe),e(rCe,tOr),e(rf,aOr),e(rf,QZ),e(QZ,nOr),e(rf,sOr),e(Ut,lOr),M(q5,Ut,null),e(ur,iOr),e(ur,zr),M(e$,zr,null),e(zr,dOr),e(zr,tCe),e(tCe,cOr),e(zr,fOr),e(zr,Cn),e(Cn,mOr),e(Cn,aCe),e(aCe,gOr),e(Cn,hOr),e(Cn,nCe),e(nCe,pOr),e(Cn,_Or),e(Cn,sCe),e(sCe,uOr),e(Cn,bOr),e(zr,vOr),e(zr,ke),e(ke,j5),e(j5,lCe),e(lCe,FOr),e(j5,TOr),e(j5,HZ),e(HZ,MOr),e(j5,EOr),e(ke,COr),e(ke,D5),e(D5,iCe),e(iCe,wOr),e(D5,AOr),e(D5,UZ),e(UZ,LOr),e(D5,yOr),e(ke,xOr),e(ke,G5),e(G5,dCe),e(dCe,$Or),e(G5,kOr),e(G5,JZ),e(JZ,SOr),e(G5,ROr),e(ke,POr),e(ke,O5),e(O5,cCe),e(cCe,BOr),e(O5,IOr),e(O5,YZ),e(YZ,NOr),e(O5,qOr),e(ke,jOr),e(ke,V5),e(V5,fCe),e(fCe,DOr),e(V5,GOr),e(V5,KZ),e(KZ,OOr),e(V5,VOr),e(ke,XOr),e(ke,X5),e(X5,mCe),e(mCe,zOr),e(X5,WOr),e(X5,ZZ),e(ZZ,QOr),e(X5,HOr),e(ke,UOr),e(ke,z5),e(z5,gCe),e(gCe,JOr),e(z5,YOr),e(z5,eee),e(eee,KOr),e(z5,ZOr),e(ke,eVr),e(ke,W5),e(W5,hCe),e(hCe,oVr),e(W5,rVr),e(W5,oee),e(oee,tVr),e(W5,aVr),e(ke,nVr),e(ke,Q5),e(Q5,pCe),e(pCe,sVr),e(Q5,lVr),e(Q5,ree),e(ree,iVr),e(Q5,dVr),e(ke,cVr),e(ke,H5),e(H5,_Ce),e(_Ce,fVr),e(H5,mVr),e(H5,tee),e(tee,gVr),e(H5,hVr),e(zr,pVr),M(U5,zr,null),b(f,uVe,u),b(f,tf,u),e(tf,J5),e(J5,uCe),M(o$,uCe,null),e(tf,_Vr),e(tf,bCe),e(bCe,uVr),b(f,bVe,u),b(f,br,u),M(r$,br,null),e(br,bVr),e(br,af),e(af,vVr),e(af,aee),e(aee,FVr),e(af,TVr),e(af,nee),e(nee,MVr),e(af,EVr),e(br,CVr),e(br,t$),e(t$,wVr),e(t$,vCe),e(vCe,AVr),e(t$,LVr),e(br,yVr),e(br,Jt),M(a$,Jt,null),e(Jt,xVr),e(Jt,FCe),e(FCe,$Vr),e(Jt,kVr),e(Jt,nf),e(nf,SVr),e(nf,TCe),e(TCe,RVr),e(nf,PVr),e(nf,see),e(see,BVr),e(nf,IVr),e(Jt,NVr),M(Y5,Jt,null),e(br,qVr),e(br,Wr),M(n$,Wr,null),e(Wr,jVr),e(Wr,MCe),e(MCe,DVr),e(Wr,GVr),e(Wr,wn),e(wn,OVr),e(wn,ECe),e(ECe,VVr),e(wn,XVr),e(wn,CCe),e(CCe,zVr),e(wn,WVr),e(wn,wCe),e(wCe,QVr),e(wn,HVr),e(Wr,UVr),e(Wr,Se),e(Se,K5),e(K5,ACe),e(ACe,JVr),e(K5,YVr),e(K5,lee),e(lee,KVr),e(K5,ZVr),e(Se,eXr),e(Se,Z5),e(Z5,LCe),e(LCe,oXr),e(Z5,rXr),e(Z5,iee),e(iee,tXr),e(Z5,aXr),e(Se,nXr),e(Se,e3),e(e3,yCe),e(yCe,sXr),e(e3,lXr),e(e3,dee),e(dee,iXr),e(e3,dXr),e(Se,cXr),e(Se,o3),e(o3,xCe),e(xCe,fXr),e(o3,mXr),e(o3,cee),e(cee,gXr),e(o3,hXr),e(Se,pXr),e(Se,r3),e(r3,$Ce),e($Ce,_Xr),e(r3,uXr),e(r3,fee),e(fee,bXr),e(r3,vXr),e(Se,FXr),e(Se,t3),e(t3,kCe),e(kCe,TXr),e(t3,MXr),e(t3,mee),e(mee,EXr),e(t3,CXr),e(Se,wXr),e(Se,a3),e(a3,SCe),e(SCe,AXr),e(a3,LXr),e(a3,gee),e(gee,yXr),e(a3,xXr),e(Se,$Xr),e(Se,n3),e(n3,RCe),e(RCe,kXr),e(n3,SXr),e(n3,hee),e(hee,RXr),e(n3,PXr),e(Se,BXr),e(Se,s3),e(s3,PCe),e(PCe,IXr),e(s3,NXr),e(s3,pee),e(pee,qXr),e(s3,jXr),e(Se,DXr),e(Se,l3),e(l3,BCe),e(BCe,GXr),e(l3,OXr),e(l3,_ee),e(_ee,VXr),e(l3,XXr),e(Wr,zXr),M(i3,Wr,null),b(f,vVe,u),b(f,sf,u),e(sf,d3),e(d3,ICe),M(s$,ICe,null),e(sf,WXr),e(sf,NCe),e(NCe,QXr),b(f,FVe,u),b(f,vr,u),M(l$,vr,null),e(vr,HXr),e(vr,lf),e(lf,UXr),e(lf,uee),e(uee,JXr),e(lf,YXr),e(lf,bee),e(bee,KXr),e(lf,ZXr),e(vr,ezr),e(vr,i$),e(i$,ozr),e(i$,qCe),e(qCe,rzr),e(i$,tzr),e(vr,azr),e(vr,Yt),M(d$,Yt,null),e(Yt,nzr),e(Yt,jCe),e(jCe,szr),e(Yt,lzr),e(Yt,df),e(df,izr),e(df,DCe),e(DCe,dzr),e(df,czr),e(df,vee),e(vee,fzr),e(df,mzr),e(Yt,gzr),M(c3,Yt,null),e(vr,hzr),e(vr,Qr),M(c$,Qr,null),e(Qr,pzr),e(Qr,GCe),e(GCe,_zr),e(Qr,uzr),e(Qr,An),e(An,bzr),e(An,OCe),e(OCe,vzr),e(An,Fzr),e(An,VCe),e(VCe,Tzr),e(An,Mzr),e(An,XCe),e(XCe,Ezr),e(An,Czr),e(Qr,wzr),e(Qr,Re),e(Re,f3),e(f3,zCe),e(zCe,Azr),e(f3,Lzr),e(f3,Fee),e(Fee,yzr),e(f3,xzr),e(Re,$zr),e(Re,m3),e(m3,WCe),e(WCe,kzr),e(m3,Szr),e(m3,Tee),e(Tee,Rzr),e(m3,Pzr),e(Re,Bzr),e(Re,g3),e(g3,QCe),e(QCe,Izr),e(g3,Nzr),e(g3,Mee),e(Mee,qzr),e(g3,jzr),e(Re,Dzr),e(Re,h3),e(h3,HCe),e(HCe,Gzr),e(h3,Ozr),e(h3,Eee),e(Eee,Vzr),e(h3,Xzr),e(Re,zzr),e(Re,p3),e(p3,UCe),e(UCe,Wzr),e(p3,Qzr),e(p3,Cee),e(Cee,Hzr),e(p3,Uzr),e(Re,Jzr),e(Re,_3),e(_3,JCe),e(JCe,Yzr),e(_3,Kzr),e(_3,wee),e(wee,Zzr),e(_3,eWr),e(Re,oWr),e(Re,u3),e(u3,YCe),e(YCe,rWr),e(u3,tWr),e(u3,Aee),e(Aee,aWr),e(u3,nWr),e(Re,sWr),e(Re,b3),e(b3,KCe),e(KCe,lWr),e(b3,iWr),e(b3,Lee),e(Lee,dWr),e(b3,cWr),e(Re,fWr),e(Re,v3),e(v3,ZCe),e(ZCe,mWr),e(v3,gWr),e(v3,yee),e(yee,hWr),e(v3,pWr),e(Re,_Wr),e(Re,F3),e(F3,e5e),e(e5e,uWr),e(F3,bWr),e(F3,xee),e(xee,vWr),e(F3,FWr),e(Qr,TWr),M(T3,Qr,null),b(f,TVe,u),b(f,cf,u),e(cf,M3),e(M3,o5e),M(f$,o5e,null),e(cf,MWr),e(cf,r5e),e(r5e,EWr),b(f,MVe,u),b(f,Fr,u),M(m$,Fr,null),e(Fr,CWr),e(Fr,ff),e(ff,wWr),e(ff,$ee),e($ee,AWr),e(ff,LWr),e(ff,kee),e(kee,yWr),e(ff,xWr),e(Fr,$Wr),e(Fr,g$),e(g$,kWr),e(g$,t5e),e(t5e,SWr),e(g$,RWr),e(Fr,PWr),e(Fr,Kt),M(h$,Kt,null),e(Kt,BWr),e(Kt,a5e),e(a5e,IWr),e(Kt,NWr),e(Kt,mf),e(mf,qWr),e(mf,n5e),e(n5e,jWr),e(mf,DWr),e(mf,See),e(See,GWr),e(mf,OWr),e(Kt,VWr),M(E3,Kt,null),e(Fr,XWr),e(Fr,Hr),M(p$,Hr,null),e(Hr,zWr),e(Hr,s5e),e(s5e,WWr),e(Hr,QWr),e(Hr,Ln),e(Ln,HWr),e(Ln,l5e),e(l5e,UWr),e(Ln,JWr),e(Ln,i5e),e(i5e,YWr),e(Ln,KWr),e(Ln,d5e),e(d5e,ZWr),e(Ln,eQr),e(Hr,oQr),e(Hr,Ve),e(Ve,C3),e(C3,c5e),e(c5e,rQr),e(C3,tQr),e(C3,Ree),e(Ree,aQr),e(C3,nQr),e(Ve,sQr),e(Ve,w3),e(w3,f5e),e(f5e,lQr),e(w3,iQr),e(w3,Pee),e(Pee,dQr),e(w3,cQr),e(Ve,fQr),e(Ve,A3),e(A3,m5e),e(m5e,mQr),e(A3,gQr),e(A3,Bee),e(Bee,hQr),e(A3,pQr),e(Ve,_Qr),e(Ve,L3),e(L3,g5e),e(g5e,uQr),e(L3,bQr),e(L3,Iee),e(Iee,vQr),e(L3,FQr),e(Ve,TQr),e(Ve,y3),e(y3,h5e),e(h5e,MQr),e(y3,EQr),e(y3,Nee),e(Nee,CQr),e(y3,wQr),e(Ve,AQr),e(Ve,x3),e(x3,p5e),e(p5e,LQr),e(x3,yQr),e(x3,qee),e(qee,xQr),e(x3,$Qr),e(Ve,kQr),e(Ve,$3),e($3,_5e),e(_5e,SQr),e($3,RQr),e($3,jee),e(jee,PQr),e($3,BQr),e(Ve,IQr),e(Ve,k3),e(k3,u5e),e(u5e,NQr),e(k3,qQr),e(k3,Dee),e(Dee,jQr),e(k3,DQr),e(Hr,GQr),M(S3,Hr,null),b(f,EVe,u),b(f,gf,u),e(gf,R3),e(R3,b5e),M(_$,b5e,null),e(gf,OQr),e(gf,v5e),e(v5e,VQr),b(f,CVe,u),b(f,Tr,u),M(u$,Tr,null),e(Tr,XQr),e(Tr,hf),e(hf,zQr),e(hf,Gee),e(Gee,WQr),e(hf,QQr),e(hf,Oee),e(Oee,HQr),e(hf,UQr),e(Tr,JQr),e(Tr,b$),e(b$,YQr),e(b$,F5e),e(F5e,KQr),e(b$,ZQr),e(Tr,eHr),e(Tr,Zt),M(v$,Zt,null),e(Zt,oHr),e(Zt,T5e),e(T5e,rHr),e(Zt,tHr),e(Zt,pf),e(pf,aHr),e(pf,M5e),e(M5e,nHr),e(pf,sHr),e(pf,Vee),e(Vee,lHr),e(pf,iHr),e(Zt,dHr),M(P3,Zt,null),e(Tr,cHr),e(Tr,Ur),M(F$,Ur,null),e(Ur,fHr),e(Ur,E5e),e(E5e,mHr),e(Ur,gHr),e(Ur,yn),e(yn,hHr),e(yn,C5e),e(C5e,pHr),e(yn,_Hr),e(yn,w5e),e(w5e,uHr),e(yn,bHr),e(yn,A5e),e(A5e,vHr),e(yn,FHr),e(Ur,THr),e(Ur,Xe),e(Xe,B3),e(B3,L5e),e(L5e,MHr),e(B3,EHr),e(B3,Xee),e(Xee,CHr),e(B3,wHr),e(Xe,AHr),e(Xe,I3),e(I3,y5e),e(y5e,LHr),e(I3,yHr),e(I3,zee),e(zee,xHr),e(I3,$Hr),e(Xe,kHr),e(Xe,N3),e(N3,x5e),e(x5e,SHr),e(N3,RHr),e(N3,Wee),e(Wee,PHr),e(N3,BHr),e(Xe,IHr),e(Xe,q3),e(q3,$5e),e($5e,NHr),e(q3,qHr),e(q3,Qee),e(Qee,jHr),e(q3,DHr),e(Xe,GHr),e(Xe,j3),e(j3,k5e),e(k5e,OHr),e(j3,VHr),e(j3,Hee),e(Hee,XHr),e(j3,zHr),e(Xe,WHr),e(Xe,D3),e(D3,S5e),e(S5e,QHr),e(D3,HHr),e(D3,Uee),e(Uee,UHr),e(D3,JHr),e(Xe,YHr),e(Xe,G3),e(G3,R5e),e(R5e,KHr),e(G3,ZHr),e(G3,Jee),e(Jee,eUr),e(G3,oUr),e(Xe,rUr),e(Xe,O3),e(O3,P5e),e(P5e,tUr),e(O3,aUr),e(O3,Yee),e(Yee,nUr),e(O3,sUr),e(Ur,lUr),M(V3,Ur,null),b(f,wVe,u),b(f,_f,u),e(_f,X3),e(X3,B5e),M(T$,B5e,null),e(_f,iUr),e(_f,I5e),e(I5e,dUr),b(f,AVe,u),b(f,Mr,u),M(M$,Mr,null),e(Mr,cUr),e(Mr,uf),e(uf,fUr),e(uf,Kee),e(Kee,mUr),e(uf,gUr),e(uf,Zee),e(Zee,hUr),e(uf,pUr),e(Mr,_Ur),e(Mr,E$),e(E$,uUr),e(E$,N5e),e(N5e,bUr),e(E$,vUr),e(Mr,FUr),e(Mr,ea),M(C$,ea,null),e(ea,TUr),e(ea,q5e),e(q5e,MUr),e(ea,EUr),e(ea,bf),e(bf,CUr),e(bf,j5e),e(j5e,wUr),e(bf,AUr),e(bf,eoe),e(eoe,LUr),e(bf,yUr),e(ea,xUr),M(z3,ea,null),e(Mr,$Ur),e(Mr,Jr),M(w$,Jr,null),e(Jr,kUr),e(Jr,D5e),e(D5e,SUr),e(Jr,RUr),e(Jr,xn),e(xn,PUr),e(xn,G5e),e(G5e,BUr),e(xn,IUr),e(xn,O5e),e(O5e,NUr),e(xn,qUr),e(xn,V5e),e(V5e,jUr),e(xn,DUr),e(Jr,GUr),e(Jr,X5e),e(X5e,W3),e(W3,z5e),e(z5e,OUr),e(W3,VUr),e(W3,ooe),e(ooe,XUr),e(W3,zUr),e(Jr,WUr),M(Q3,Jr,null),b(f,LVe,u),b(f,vf,u),e(vf,H3),e(H3,W5e),M(A$,W5e,null),e(vf,QUr),e(vf,Q5e),e(Q5e,HUr),b(f,yVe,u),b(f,Er,u),M(L$,Er,null),e(Er,UUr),e(Er,Ff),e(Ff,JUr),e(Ff,roe),e(roe,YUr),e(Ff,KUr),e(Ff,toe),e(toe,ZUr),e(Ff,eJr),e(Er,oJr),e(Er,y$),e(y$,rJr),e(y$,H5e),e(H5e,tJr),e(y$,aJr),e(Er,nJr),e(Er,oa),M(x$,oa,null),e(oa,sJr),e(oa,U5e),e(U5e,lJr),e(oa,iJr),e(oa,Tf),e(Tf,dJr),e(Tf,J5e),e(J5e,cJr),e(Tf,fJr),e(Tf,aoe),e(aoe,mJr),e(Tf,gJr),e(oa,hJr),M(U3,oa,null),e(Er,pJr),e(Er,Yr),M($$,Yr,null),e(Yr,_Jr),e(Yr,Y5e),e(Y5e,uJr),e(Yr,bJr),e(Yr,$n),e($n,vJr),e($n,K5e),e(K5e,FJr),e($n,TJr),e($n,Z5e),e(Z5e,MJr),e($n,EJr),e($n,e3e),e(e3e,CJr),e($n,wJr),e(Yr,AJr),e(Yr,k$),e(k$,J3),e(J3,o3e),e(o3e,LJr),e(J3,yJr),e(J3,noe),e(noe,xJr),e(J3,$Jr),e(k$,kJr),e(k$,Y3),e(Y3,r3e),e(r3e,SJr),e(Y3,RJr),e(Y3,soe),e(soe,PJr),e(Y3,BJr),e(Yr,IJr),M(K3,Yr,null),b(f,xVe,u),b(f,Mf,u),e(Mf,Z3),e(Z3,t3e),M(S$,t3e,null),e(Mf,NJr),e(Mf,a3e),e(a3e,qJr),b(f,$Ve,u),b(f,Cr,u),M(R$,Cr,null),e(Cr,jJr),e(Cr,Ef),e(Ef,DJr),e(Ef,loe),e(loe,GJr),e(Ef,OJr),e(Ef,ioe),e(ioe,VJr),e(Ef,XJr),e(Cr,zJr),e(Cr,P$),e(P$,WJr),e(P$,n3e),e(n3e,QJr),e(P$,HJr),e(Cr,UJr),e(Cr,ra),M(B$,ra,null),e(ra,JJr),e(ra,s3e),e(s3e,YJr),e(ra,KJr),e(ra,Cf),e(Cf,ZJr),e(Cf,l3e),e(l3e,eYr),e(Cf,oYr),e(Cf,doe),e(doe,rYr),e(Cf,tYr),e(ra,aYr),M(e0,ra,null),e(Cr,nYr),e(Cr,Kr),M(I$,Kr,null),e(Kr,sYr),e(Kr,i3e),e(i3e,lYr),e(Kr,iYr),e(Kr,kn),e(kn,dYr),e(kn,d3e),e(d3e,cYr),e(kn,fYr),e(kn,c3e),e(c3e,mYr),e(kn,gYr),e(kn,f3e),e(f3e,hYr),e(kn,pYr),e(Kr,_Yr),e(Kr,m3e),e(m3e,o0),e(o0,g3e),e(g3e,uYr),e(o0,bYr),e(o0,coe),e(coe,vYr),e(o0,FYr),e(Kr,TYr),M(r0,Kr,null),kVe=!0},p(f,[u]){const N$={};u&2&&(N$.$$scope={dirty:u,ctx:f}),Rf.$set(N$);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),Gg.$set(h3e);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),Eh.$set(p3e);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),np.$set(_3e);const q$={};u&2&&(q$.$$scope={dirty:u,ctx:f}),sp.$set(q$);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),Ap.$set(u3e);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),Lp.$set(Sn);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),$p.$set(b3e);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),$u.$set(v3e);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),Su.$set(F3e);const j$={};u&2&&(j$.$$scope={dirty:u,ctx:f}),E1.$set(j$);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),w1.$set(T3e);const D$={};u&2&&(D$.$$scope={dirty:u,ctx:f}),f2.$set(D$);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),g2.$set(M3e);const G$={};u&2&&(G$.$$scope={dirty:u,ctx:f}),Y2.$set(G$);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),Z2.$set(E3e);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),bb.$set(C3e);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),Fb.$set(w3e);const wf={};u&2&&(wf.$$scope={dirty:u,ctx:f}),_4.$set(wf);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),b4.$set(A3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),U4.$set(L3e);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),Y4.$set(y3e);const O$={};u&2&&(O$.$$scope={dirty:u,ctx:f}),av.$set(O$);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),sv.$set(x3e);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),Vv.$set($3e);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),zv.$set(k3e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),RF.$set(tt);const V$={};u&2&&(V$.$$scope={dirty:u,ctx:f}),BF.$set(V$);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),qF.$set(S3e);const X$={};u&2&&(X$.$$scope={dirty:u,ctx:f}),DF.$set(X$);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),o6.$set(R3e);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),t6.$set(at);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),s6.$set(P3e);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),i6.$set(Af);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),f6.$set(B3e);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),g6.$set(I3e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),C6.$set(L);const t0={};u&2&&(t0.$$scope={dirty:u,ctx:f}),A6.$set(t0);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),R6.$set(N3e);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),B6.$set(q3e);const a0={};u&2&&(a0.$$scope={dirty:u,ctx:f}),Q6.$set(a0);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),U6.$set(j3e);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),Z6.$set(D3e);const n0={};u&2&&(n0.$$scope={dirty:u,ctx:f}),oT.$set(n0);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),iT.$set(G3e);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),cT.$set(O3e);const s0={};u&2&&(s0.$$scope={dirty:u,ctx:f}),_T.$set(s0);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),bT.$set(V3e);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),MT.$set(X3e);const l0={};u&2&&(l0.$$scope={dirty:u,ctx:f}),CT.$set(l0);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),LT.$set(z3e);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),xT.$set(W3e);const i0={};u&2&&(i0.$$scope={dirty:u,ctx:f}),BT.$set(i0);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),NT.$set(Q3e);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),DT.$set(H3e);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),OT.$set(d0);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),I7.$set(U3e);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),q7.$set(J3e);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),i9.$set(c0);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),c9.$set(Y3e);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),C9.$set(K3e);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),A9.$set(f0);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),S9.$set(Z3e);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),P9.$set(e0e);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),oM.$set(m0);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),tM.$set(o0e);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),hM.$set(r0e);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),_M.$set(g0);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),VM.$set(t0e);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),zM.$set(a0e);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),dE.$set(h0);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),fE.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),hE.$set(s0e);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),_E.$set(p0);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),bE.$set(l0e);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),FE.$set(i0e);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),GE.$set(_0);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),VE.$set(d0e);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),cC.$set(c0e);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),mC.$set(u0);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),hC.$set(f0e);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),_C.$set(m0e);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),bC.$set(b0);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),FC.$set(g0e);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),HC.$set(h0e);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),JC.$set(v0);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),l5.$set(p0e);const _0e={};u&2&&(_0e.$$scope={dirty:u,ctx:f}),d5.$set(_0e);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),E5.$set(F0);const u0e={};u&2&&(u0e.$$scope={dirty:u,ctx:f}),w5.$set(u0e);const b0e={};u&2&&(b0e.$$scope={dirty:u,ctx:f}),I5.$set(b0e);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),q5.$set(T0);const v0e={};u&2&&(v0e.$$scope={dirty:u,ctx:f}),U5.$set(v0e);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),Y5.$set(F0e);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),i3.$set(M0);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),c3.$set(T0e);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),T3.$set(M0e);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),E3.$set(E0);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),S3.$set(E0e);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),P3.$set(C0e);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),V3.$set(C0);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),z3.$set(w0e);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),Q3.$set(A0e);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),U3.$set(w0);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),K3.$set(L0e);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),e0.$set(y0e);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),r0.$set(A0)},i(f){kVe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(LA.$$.fragment,f),E(yA.$$.fragment,f),E(Rf.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(RA.$$.fragment,f),E(Gg.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(IA.$$.fragment,f),E(jA.$$.fragment,f),E(Eh.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(zA.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(YA.$$.fragment,f),E(Ap.$$.fragment,f),E(Lp.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E($p.$$.fragment,f),E(tL.$$.fragment,f),E($u.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Su.$$.fragment,f),E(iL.$$.fragment,f),E(E1.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(w1.$$.fragment,f),E(gL.$$.fragment,f),E(f2.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(g2.$$.fragment,f),E(bL.$$.fragment,f),E(Y2.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(Z2.$$.fragment,f),E(EL.$$.fragment,f),E(bb.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(LL.$$.fragment,f),E(Fb.$$.fragment,f),E(yL.$$.fragment,f),E(_4.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(b4.$$.fragment,f),E(RL.$$.fragment,f),E(U4.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(Y4.$$.fragment,f),E(qL.$$.fragment,f),E(av.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(sv.$$.fragment,f),E(VL.$$.fragment,f),E(Vv.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(zv.$$.fragment,f),E(HL.$$.fragment,f),E(RF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(BF.$$.fragment,f),E(ZL.$$.fragment,f),E(qF.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(DF.$$.fragment,f),E(ay.$$.fragment,f),E(o6.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(t6.$$.fragment,f),E(dy.$$.fragment,f),E(s6.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(i6.$$.fragment,f),E(hy.$$.fragment,f),E(f6.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(g6.$$.fragment,f),E(vy.$$.fragment,f),E(C6.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(A6.$$.fragment,f),E(Cy.$$.fragment,f),E(R6.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(B6.$$.fragment,f),E(xy.$$.fragment,f),E(Q6.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(U6.$$.fragment,f),E(Py.$$.fragment,f),E(Z6.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(oT.$$.fragment,f),E(Dy.$$.fragment,f),E(iT.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(cT.$$.fragment,f),E(zy.$$.fragment,f),E(_T.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(bT.$$.fragment,f),E(Jy.$$.fragment,f),E(MT.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(CT.$$.fragment,f),E(r8.$$.fragment,f),E(LT.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(xT.$$.fragment,f),E(l8.$$.fragment,f),E(BT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(NT.$$.fragment,f),E(m8.$$.fragment,f),E(DT.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(OT.$$.fragment,f),E(u8.$$.fragment,f),E(I7.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(q7.$$.fragment,f),E(M8.$$.fragment,f),E(i9.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(c9.$$.fragment,f),E(L8.$$.fragment,f),E(C9.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(A9.$$.fragment,f),E(S8.$$.fragment,f),E(S9.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(P9.$$.fragment,f),E(N8.$$.fragment,f),E(oM.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(tM.$$.fragment,f),E(O8.$$.fragment,f),E(hM.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(_M.$$.fragment,f),E(Q8.$$.fragment,f),E(VM.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(zM.$$.fragment,f),E(K8.$$.fragment,f),E(dE.$$.fragment,f),E(Z8.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(fE.$$.fragment,f),E(tx.$$.fragment,f),E(hE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(_E.$$.fragment,f),E(dx.$$.fragment,f),E(bE.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(FE.$$.fragment,f),E(hx.$$.fragment,f),E(GE.$$.fragment,f),E(px.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(VE.$$.fragment,f),E(vx.$$.fragment,f),E(cC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(mC.$$.fragment,f),E(Cx.$$.fragment,f),E(hC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(_C.$$.fragment,f),E(xx.$$.fragment,f),E(bC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(FC.$$.fragment,f),E(Px.$$.fragment,f),E(HC.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(JC.$$.fragment,f),E(jx.$$.fragment,f),E(l5.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(d5.$$.fragment,f),E(Xx.$$.fragment,f),E(E5.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(w5.$$.fragment,f),E(Ux.$$.fragment,f),E(I5.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(q5.$$.fragment,f),E(e$.$$.fragment,f),E(U5.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(Y5.$$.fragment,f),E(n$.$$.fragment,f),E(i3.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(c3.$$.fragment,f),E(c$.$$.fragment,f),E(T3.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(E3.$$.fragment,f),E(p$.$$.fragment,f),E(S3.$$.fragment,f),E(_$.$$.fragment,f),E(u$.$$.fragment,f),E(v$.$$.fragment,f),E(P3.$$.fragment,f),E(F$.$$.fragment,f),E(V3.$$.fragment,f),E(T$.$$.fragment,f),E(M$.$$.fragment,f),E(C$.$$.fragment,f),E(z3.$$.fragment,f),E(w$.$$.fragment,f),E(Q3.$$.fragment,f),E(A$.$$.fragment,f),E(L$.$$.fragment,f),E(x$.$$.fragment,f),E(U3.$$.fragment,f),E($$.$$.fragment,f),E(K3.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(e0.$$.fragment,f),E(I$.$$.fragment,f),E(r0.$$.fragment,f),kVe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(LA.$$.fragment,f),C(yA.$$.fragment,f),C(Rf.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(RA.$$.fragment,f),C(Gg.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(IA.$$.fragment,f),C(jA.$$.fragment,f),C(Eh.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(zA.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(YA.$$.fragment,f),C(Ap.$$.fragment,f),C(Lp.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C($p.$$.fragment,f),C(tL.$$.fragment,f),C($u.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Su.$$.fragment,f),C(iL.$$.fragment,f),C(E1.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(w1.$$.fragment,f),C(gL.$$.fragment,f),C(f2.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(g2.$$.fragment,f),C(bL.$$.fragment,f),C(Y2.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(Z2.$$.fragment,f),C(EL.$$.fragment,f),C(bb.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(LL.$$.fragment,f),C(Fb.$$.fragment,f),C(yL.$$.fragment,f),C(_4.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(b4.$$.fragment,f),C(RL.$$.fragment,f),C(U4.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(Y4.$$.fragment,f),C(qL.$$.fragment,f),C(av.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(sv.$$.fragment,f),C(VL.$$.fragment,f),C(Vv.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(zv.$$.fragment,f),C(HL.$$.fragment,f),C(RF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(BF.$$.fragment,f),C(ZL.$$.fragment,f),C(qF.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(DF.$$.fragment,f),C(ay.$$.fragment,f),C(o6.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(t6.$$.fragment,f),C(dy.$$.fragment,f),C(s6.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(i6.$$.fragment,f),C(hy.$$.fragment,f),C(f6.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(g6.$$.fragment,f),C(vy.$$.fragment,f),C(C6.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(A6.$$.fragment,f),C(Cy.$$.fragment,f),C(R6.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(B6.$$.fragment,f),C(xy.$$.fragment,f),C(Q6.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(U6.$$.fragment,f),C(Py.$$.fragment,f),C(Z6.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(oT.$$.fragment,f),C(Dy.$$.fragment,f),C(iT.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(cT.$$.fragment,f),C(zy.$$.fragment,f),C(_T.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(bT.$$.fragment,f),C(Jy.$$.fragment,f),C(MT.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(CT.$$.fragment,f),C(r8.$$.fragment,f),C(LT.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(xT.$$.fragment,f),C(l8.$$.fragment,f),C(BT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(NT.$$.fragment,f),C(m8.$$.fragment,f),C(DT.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(OT.$$.fragment,f),C(u8.$$.fragment,f),C(I7.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(q7.$$.fragment,f),C(M8.$$.fragment,f),C(i9.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(c9.$$.fragment,f),C(L8.$$.fragment,f),C(C9.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(A9.$$.fragment,f),C(S8.$$.fragment,f),C(S9.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(P9.$$.fragment,f),C(N8.$$.fragment,f),C(oM.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(tM.$$.fragment,f),C(O8.$$.fragment,f),C(hM.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(_M.$$.fragment,f),C(Q8.$$.fragment,f),C(VM.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(zM.$$.fragment,f),C(K8.$$.fragment,f),C(dE.$$.fragment,f),C(Z8.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(fE.$$.fragment,f),C(tx.$$.fragment,f),C(hE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(_E.$$.fragment,f),C(dx.$$.fragment,f),C(bE.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(FE.$$.fragment,f),C(hx.$$.fragment,f),C(GE.$$.fragment,f),C(px.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(VE.$$.fragment,f),C(vx.$$.fragment,f),C(cC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(mC.$$.fragment,f),C(Cx.$$.fragment,f),C(hC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(_C.$$.fragment,f),C(xx.$$.fragment,f),C(bC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(FC.$$.fragment,f),C(Px.$$.fragment,f),C(HC.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(JC.$$.fragment,f),C(jx.$$.fragment,f),C(l5.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(d5.$$.fragment,f),C(Xx.$$.fragment,f),C(E5.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(w5.$$.fragment,f),C(Ux.$$.fragment,f),C(I5.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(q5.$$.fragment,f),C(e$.$$.fragment,f),C(U5.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(Y5.$$.fragment,f),C(n$.$$.fragment,f),C(i3.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(c3.$$.fragment,f),C(c$.$$.fragment,f),C(T3.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(E3.$$.fragment,f),C(p$.$$.fragment,f),C(S3.$$.fragment,f),C(_$.$$.fragment,f),C(u$.$$.fragment,f),C(v$.$$.fragment,f),C(P3.$$.fragment,f),C(F$.$$.fragment,f),C(V3.$$.fragment,f),C(T$.$$.fragment,f),C(M$.$$.fragment,f),C(C$.$$.fragment,f),C(z3.$$.fragment,f),C(w$.$$.fragment,f),C(Q3.$$.fragment,f),C(A$.$$.fragment,f),C(L$.$$.fragment,f),C(x$.$$.fragment,f),C(U3.$$.fragment,f),C($$.$$.fragment,f),C(K3.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(e0.$$.fragment,f),C(I$.$$.fragment,f),C(r0.$$.fragment,f),kVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(nt),f&&t(Oe),f&&t(We),f&&t($f),w(xa,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(AGe),f&&t(xi),w(LA),f&&t(LGe),f&&t(Nn),f&&t(yGe),w(yA,f),f&&t(xGe),f&&t(aS),f&&t($Ge),w(Rf,f),f&&t(kGe),f&&t($i),w(xA),f&&t(SGe),f&&t(wo),w($A),w(RA),w(Gg),w(PA),f&&t(RGe),f&&t(Si),w(BA),f&&t(PGe),f&&t(Ao),w(IA),w(jA),w(Eh),w(DA),f&&t(BGe),f&&t(Ri),w(GA),f&&t(IGe),f&&t(Lo),w(OA),w(zA),w(np),w(sp),w(WA),f&&t(NGe),f&&t(Pi),w(QA),f&&t(qGe),f&&t(yo),w(HA),w(YA),w(Ap),w(Lp),w(KA),f&&t(jGe),f&&t(Ii),w(ZA),f&&t(DGe),f&&t(xo),w(eL),w(rL),w($p),w(tL),w($u),f&&t(GGe),f&&t(ji),w(aL),f&&t(OGe),f&&t($o),w(nL),w(lL),w(Su),w(iL),w(E1),f&&t(VGe),f&&t(Oi),w(dL),f&&t(XGe),f&&t(ko),w(cL),w(mL),w(w1),w(gL),w(f2),f&&t(zGe),f&&t(zi),w(hL),f&&t(WGe),f&&t(So),w(pL),w(uL),w(g2),w(bL),w(Y2),f&&t(QGe),f&&t(Hi),w(vL),f&&t(HGe),f&&t(Ro),w(FL),w(ML),w(Z2),w(EL),w(bb),f&&t(UGe),f&&t(Yi),w(CL),f&&t(JGe),f&&t(Po),w(wL),w(LL),w(Fb),w(yL),w(_4),f&&t(YGe),f&&t(ed),w(xL),f&&t(KGe),f&&t(Bo),w($L),w(SL),w(b4),w(RL),w(U4),f&&t(ZGe),f&&t(td),w(PL),f&&t(eOe),f&&t(Io),w(BL),w(NL),w(Y4),w(qL),w(av),f&&t(oOe),f&&t(sd),w(jL),f&&t(rOe),f&&t(No),w(DL),w(OL),w(sv),w(VL),w(Vv),f&&t(tOe),f&&t(dd),w(XL),f&&t(aOe),f&&t(qo),w(zL),w(QL),w(zv),w(HL),w(RF),f&&t(nOe),f&&t(md),w(UL),f&&t(sOe),f&&t(jo),w(JL),w(KL),w(BF),w(ZL),w(qF),f&&t(lOe),f&&t(pd),w(ey),f&&t(iOe),f&&t(Do),w(oy),w(ty),w(DF),w(ay),w(o6),f&&t(dOe),f&&t(bd),w(ny),f&&t(cOe),f&&t(Go),w(sy),w(iy),w(t6),w(dy),w(s6),f&&t(fOe),f&&t(Td),w(cy),f&&t(mOe),f&&t(Oo),w(fy),w(gy),w(i6),w(hy),w(f6),f&&t(gOe),f&&t(Cd),w(py),f&&t(hOe),f&&t(Vo),w(_y),w(by),w(g6),w(vy),w(C6),f&&t(pOe),f&&t(Ld),w(Fy),f&&t(_Oe),f&&t(Xo),w(Ty),w(Ey),w(A6),w(Cy),w(R6),f&&t(uOe),f&&t($d),w(wy),f&&t(bOe),f&&t(zo),w(Ay),w(yy),w(B6),w(xy),w(Q6),f&&t(vOe),f&&t(Rd),w($y),f&&t(FOe),f&&t(Wo),w(ky),w(Ry),w(U6),w(Py),w(Z6),f&&t(TOe),f&&t(Id),w(Iy),f&&t(MOe),f&&t(Qo),w(Ny),w(jy),w(oT),w(Dy),w(iT),f&&t(EOe),f&&t(jd),w(Gy),f&&t(COe),f&&t(Ho),w(Oy),w(Xy),w(cT),w(zy),w(_T),f&&t(wOe),f&&t(Od),w(Wy),f&&t(AOe),f&&t(Uo),w(Qy),w(Uy),w(bT),w(Jy),w(MT),f&&t(LOe),f&&t(zd),w(Ky),f&&t(yOe),f&&t(Jo),w(Zy),w(o8),w(CT),w(r8),w(LT),f&&t(xOe),f&&t(Hd),w(t8),f&&t($Oe),f&&t(Yo),w(a8),w(s8),w(xT),w(l8),w(BT),f&&t(kOe),f&&t(Yd),w(i8),f&&t(SOe),f&&t(Ko),w(d8),w(f8),w(NT),w(m8),w(DT),f&&t(ROe),f&&t(ec),w(g8),f&&t(POe),f&&t(Zo),w(h8),w(_8),w(OT),w(u8),w(I7),f&&t(BOe),f&&t(tc),w(b8),f&&t(IOe),f&&t(er),w(v8),w(T8),w(q7),w(M8),w(i9),f&&t(NOe),f&&t(sc),w(E8),f&&t(qOe),f&&t(or),w(C8),w(A8),w(c9),w(L8),w(C9),f&&t(jOe),f&&t(dc),w(y8),f&&t(DOe),f&&t(rr),w(x8),w(k8),w(A9),w(S8),w(S9),f&&t(GOe),f&&t(mc),w(R8),f&&t(OOe),f&&t(tr),w(P8),w(I8),w(P9),w(N8),w(oM),f&&t(VOe),f&&t(pc),w(q8),f&&t(XOe),f&&t(ar),w(j8),w(G8),w(tM),w(O8),w(hM),f&&t(zOe),f&&t(bc),w(V8),f&&t(WOe),f&&t(nr),w(X8),w(W8),w(_M),w(Q8),w(VM),f&&t(QOe),f&&t(Tc),w(H8),f&&t(HOe),f&&t(sr),w(U8),w(Y8),w(zM),w(K8),w(dE),f&&t(UOe),f&&t(Cc),w(Z8),f&&t(JOe),f&&t(lr),w(ex),w(rx),w(fE),w(tx),w(hE),f&&t(YOe),f&&t(Lc),w(nx),f&&t(KOe),f&&t(ir),w(sx),w(ix),w(_E),w(dx),w(bE),f&&t(ZOe),f&&t($c),w(cx),f&&t(eVe),f&&t(dr),w(fx),w(gx),w(FE),w(hx),w(GE),f&&t(oVe),f&&t(Rc),w(px),f&&t(rVe),f&&t(cr),w(_x),w(bx),w(VE),w(vx),w(cC),f&&t(tVe),f&&t(Ic),w(Fx),f&&t(aVe),f&&t(fr),w(Tx),w(Ex),w(mC),w(Cx),w(hC),f&&t(nVe),f&&t(jc),w(wx),f&&t(sVe),f&&t(mr),w(Ax),w(yx),w(_C),w(xx),w(bC),f&&t(lVe),f&&t(Oc),w($x),f&&t(iVe),f&&t(gr),w(kx),w(Rx),w(FC),w(Px),w(HC),f&&t(dVe),f&&t(zc),w(Bx),f&&t(cVe),f&&t(hr),w(Ix),w(qx),w(JC),w(jx),w(l5),f&&t(fVe),f&&t(Hc),w(Dx),f&&t(mVe),f&&t(pr),w(Gx),w(Vx),w(d5),w(Xx),w(E5),f&&t(gVe),f&&t(Yc),w(zx),f&&t(hVe),f&&t(_r),w(Wx),w(Hx),w(w5),w(Ux),w(I5),f&&t(pVe),f&&t(ef),w(Jx),f&&t(_Ve),f&&t(ur),w(Yx),w(Zx),w(q5),w(e$),w(U5),f&&t(uVe),f&&t(tf),w(o$),f&&t(bVe),f&&t(br),w(r$),w(a$),w(Y5),w(n$),w(i3),f&&t(vVe),f&&t(sf),w(s$),f&&t(FVe),f&&t(vr),w(l$),w(d$),w(c3),w(c$),w(T3),f&&t(TVe),f&&t(cf),w(f$),f&&t(MVe),f&&t(Fr),w(m$),w(h$),w(E3),w(p$),w(S3),f&&t(EVe),f&&t(gf),w(_$),f&&t(CVe),f&&t(Tr),w(u$),w(v$),w(P3),w(F$),w(V3),f&&t(wVe),f&&t(_f),w(T$),f&&t(AVe),f&&t(Mr),w(M$),w(C$),w(z3),w(w$),w(Q3),f&&t(LVe),f&&t(vf),w(A$),f&&t(yVe),f&&t(Er),w(L$),w(x$),w(U3),w($$),w(K3),f&&t(xVe),f&&t(Mf),w(S$),f&&t($Ve),f&&t(Cr),w(R$),w(B$),w(e0),w(I$),w(r0)}}}const GGt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function OGt(x){return Djt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class UGt extends Ijt{constructor(g){super();Njt(this,g,OGt,DGt,qjt,{})}}export{UGt as default,GGt as metadata};
