import{S as LWt,i as yWt,s as xWt,e as a,k as l,w as F,t as o,M as $Wt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as kWt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Xtt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function SWt($){let g,v,p,m,_,d,h,Co,Li,Rf,lt,yi,xi,sL,Pf,Oe,We,$i,Bn,lL,In,Nn,iL,ki,qn,dL,Si,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Co=o(`, make sure its
`),Li=a("code"),Rf=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),yi=a("code"),xi=o('"new-model"'),sL=o(")."),Pf=l(),Oe=a("p"),We=o("Likewise, if your "),$i=a("code"),Bn=o("NewModel"),lL=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),iL=o(`, make sure its
`),ki=a("code"),qn=o("config_class"),dL=o(` attribute is set to the same class you use when registering the model (here
`),Si=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var DS=s(p);m=r(DS,"NewModelConfig"),DS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ri=s(d);h=r(Ri,"PretrainedConfig"),Ri.forEach(t),Co=r(Ae,`, make sure its
`),Li=n(Ae,"CODE",{});var GS=s(Li);Rf=r(GS,"model_type"),GS.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),yi=n(Ae,"CODE",{});var OS=s(yi);xi=r(OS,'"new-model"'),OS.forEach(t),sL=r(Ae,")."),Ae.forEach(t),Pf=i(He),Oe=n(He,"P",{});var wo=s(Oe);We=r(wo,"Likewise, if your "),$i=n(wo,"CODE",{});var Ra=s($i);Bn=r(Ra,"NewModel"),Ra.forEach(t),lL=r(wo," is a subclass of "),In=n(wo,"A",{href:!0});var VS=s(In);Nn=r(VS,"PreTrainedModel"),VS.forEach(t),iL=r(wo,`, make sure its
`),ki=n(wo,"CODE",{});var If=s(ki);qn=r(If,"config_class"),If.forEach(t),dL=r(wo,` attribute is set to the same class you use when registering the model (here
`),Si=n(wo,"CODE",{});var XS=s(Si);Bf=r(XS,"NewModelConfig"),XS.forEach(t),Sa=r(wo,")."),wo.forEach(t),this.h()},h(){c(In,"href","/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Co),e(g,Li),e(Li,Rf),e(g,lt),e(g,yi),e(yi,xi),e(g,sL),b(He,Pf,Ae),b(He,Oe,Ae),e(Oe,We),e(Oe,$i),e($i,Bn),e(Oe,lL),e(Oe,In),e(In,Nn),e(Oe,iL),e(Oe,ki),e(ki,qn),e(Oe,dL),e(Oe,Si),e(Si,Bf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Pf),He&&t(Oe)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Co=s(p);m=r(Co,"use_auth_token=True"),Co.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function THt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ht($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xUt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ut($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kUt($){let g,v,p,m,_,d,h,Co,Li,Rf,lt,yi,xi,sL,Pf,Oe,We,$i,Bn,lL,In,Nn,iL,ki,qn,dL,Si,Bf,Sa,He,Ae,DS,Ri,GS,OS,wo,Ra,VS,If,XS,kHe,_Xe,Pi,Nf,Sae,cL,SHe,Rae,RHe,uXe,jn,PHe,Pae,BHe,IHe,Bae,NHe,qHe,bXe,fL,vXe,zS,jHe,FXe,qf,TXe,Bi,jf,Iae,mL,DHe,Nae,GHe,MXe,Ao,gL,OHe,hL,VHe,QS,XHe,zHe,QHe,pL,WHe,qae,HHe,UHe,JHe,Lr,_L,YHe,jae,KHe,ZHe,Ii,eUe,Dae,oUe,rUe,Gae,tUe,aUe,nUe,A,Df,Oae,sUe,lUe,WS,iUe,dUe,cUe,Gf,Vae,fUe,mUe,HS,gUe,hUe,pUe,Of,Xae,_Ue,uUe,US,bUe,vUe,FUe,Vf,zae,TUe,MUe,JS,EUe,CUe,wUe,Xf,Qae,AUe,LUe,YS,yUe,xUe,$Ue,zf,Wae,kUe,SUe,KS,RUe,PUe,BUe,Qf,Hae,IUe,NUe,ZS,qUe,jUe,DUe,Wf,Uae,GUe,OUe,eR,VUe,XUe,zUe,Hf,Jae,QUe,WUe,oR,HUe,UUe,JUe,Uf,Yae,YUe,KUe,rR,ZUe,eJe,oJe,Jf,Kae,rJe,tJe,tR,aJe,nJe,sJe,Yf,Zae,lJe,iJe,aR,dJe,cJe,fJe,Kf,ene,mJe,gJe,nR,hJe,pJe,_Je,Zf,one,uJe,bJe,sR,vJe,FJe,TJe,em,rne,MJe,EJe,lR,CJe,wJe,AJe,om,tne,LJe,yJe,iR,xJe,$Je,kJe,rm,ane,SJe,RJe,dR,PJe,BJe,IJe,tm,nne,NJe,qJe,cR,jJe,DJe,GJe,am,sne,OJe,VJe,fR,XJe,zJe,QJe,nm,lne,WJe,HJe,mR,UJe,JJe,YJe,sm,ine,KJe,ZJe,gR,eYe,oYe,rYe,lm,dne,tYe,aYe,hR,nYe,sYe,lYe,im,cne,iYe,dYe,pR,cYe,fYe,mYe,dm,fne,gYe,hYe,_R,pYe,_Ye,uYe,cm,mne,bYe,vYe,uR,FYe,TYe,MYe,fm,gne,EYe,CYe,bR,wYe,AYe,LYe,mm,hne,yYe,xYe,vR,$Ye,kYe,SYe,gm,pne,RYe,PYe,FR,BYe,IYe,NYe,hm,_ne,qYe,jYe,TR,DYe,GYe,OYe,pm,une,VYe,XYe,MR,zYe,QYe,WYe,_m,bne,HYe,UYe,ER,JYe,YYe,KYe,um,vne,ZYe,eKe,CR,oKe,rKe,tKe,bm,Fne,aKe,nKe,wR,sKe,lKe,iKe,vm,Tne,dKe,cKe,AR,fKe,mKe,gKe,Fm,Mne,hKe,pKe,LR,_Ke,uKe,bKe,Tm,Ene,vKe,FKe,yR,TKe,MKe,EKe,Mm,Cne,CKe,wKe,xR,AKe,LKe,yKe,Em,wne,xKe,$Ke,$R,kKe,SKe,RKe,Cm,Ane,PKe,BKe,kR,IKe,NKe,qKe,wm,Lne,jKe,DKe,SR,GKe,OKe,VKe,Am,yne,XKe,zKe,RR,QKe,WKe,HKe,Lm,xne,UKe,JKe,PR,YKe,KKe,ZKe,ym,$ne,eZe,oZe,BR,rZe,tZe,aZe,xm,kne,nZe,sZe,IR,lZe,iZe,dZe,$m,Sne,cZe,fZe,NR,mZe,gZe,hZe,km,Rne,pZe,_Ze,qR,uZe,bZe,vZe,Sm,Pne,FZe,TZe,jR,MZe,EZe,CZe,Rm,Bne,wZe,AZe,DR,LZe,yZe,xZe,Pm,Ine,$Ze,kZe,GR,SZe,RZe,PZe,Bm,Nne,BZe,IZe,OR,NZe,qZe,jZe,Im,qne,DZe,GZe,VR,OZe,VZe,XZe,Nm,jne,zZe,QZe,XR,WZe,HZe,UZe,qm,Dne,JZe,YZe,zR,KZe,ZZe,eeo,jm,Gne,oeo,reo,QR,teo,aeo,neo,Dm,One,seo,leo,WR,ieo,deo,ceo,Gm,Vne,feo,meo,HR,geo,heo,peo,Om,Xne,_eo,ueo,UR,beo,veo,Feo,Vm,zne,Teo,Meo,JR,Eeo,Ceo,weo,Xm,Qne,Aeo,Leo,YR,yeo,xeo,$eo,zm,Wne,keo,Seo,KR,Reo,Peo,Beo,Qm,Hne,Ieo,Neo,ZR,qeo,jeo,Deo,Wm,Une,Geo,Oeo,eP,Veo,Xeo,zeo,Hm,Jne,Qeo,Weo,oP,Heo,Ueo,Jeo,Um,Yne,Yeo,Keo,rP,Zeo,eoo,ooo,Jm,Kne,roo,too,tP,aoo,noo,soo,Ym,Zne,loo,ioo,aP,doo,coo,foo,Km,ese,moo,goo,nP,hoo,poo,_oo,Zm,ose,uoo,boo,sP,voo,Foo,Too,eg,rse,Moo,Eoo,lP,Coo,woo,Aoo,og,tse,Loo,yoo,iP,xoo,$oo,koo,rg,ase,Soo,Roo,dP,Poo,Boo,Ioo,tg,nse,Noo,qoo,cP,joo,Doo,Goo,ag,sse,Ooo,Voo,fP,Xoo,zoo,Qoo,ng,lse,Woo,Hoo,mP,Uoo,Joo,Yoo,sg,ise,Koo,Zoo,gP,ero,oro,rro,lg,dse,tro,aro,hP,nro,sro,lro,ig,cse,iro,dro,pP,cro,fro,mro,dg,fse,gro,hro,_P,pro,_ro,uro,cg,mse,bro,vro,uP,Fro,Tro,Mro,fg,gse,Ero,Cro,bP,wro,Aro,Lro,mg,hse,yro,xro,vP,$ro,kro,Sro,gg,pse,Rro,Pro,FP,Bro,Iro,Nro,hg,_se,qro,jro,TP,Dro,Gro,Oro,pg,use,Vro,Xro,MP,zro,Qro,Wro,_g,bse,Hro,Uro,EP,Jro,Yro,Kro,ug,vse,Zro,eto,CP,oto,rto,tto,bg,Fse,ato,nto,wP,sto,lto,ito,vg,Tse,dto,cto,AP,fto,mto,gto,Fg,Mse,hto,pto,LP,_to,uto,bto,Tg,Ese,vto,Fto,yP,Tto,Mto,Eto,Mg,Cse,Cto,wto,xP,Ato,Lto,yto,Eg,wse,xto,$to,$P,kto,Sto,Rto,Cg,Ase,Pto,Bto,kP,Ito,Nto,qto,wg,Lse,jto,Dto,SP,Gto,Oto,Vto,Ag,yse,Xto,zto,RP,Qto,Wto,Hto,Lg,xse,Uto,Jto,PP,Yto,Kto,Zto,yg,$se,eao,oao,BP,rao,tao,aao,xg,kse,nao,sao,IP,lao,iao,dao,$g,Sse,cao,fao,NP,mao,gao,hao,kg,Rse,pao,_ao,qP,uao,bao,vao,Sg,Pse,Fao,Tao,jP,Mao,Eao,Cao,Rg,Bse,wao,Aao,DP,Lao,yao,xao,Pg,Ise,$ao,kao,GP,Sao,Rao,Pao,Bg,Nse,Bao,Iao,OP,Nao,qao,jao,Ig,qse,Dao,Gao,VP,Oao,Vao,Xao,Ng,jse,zao,Qao,XP,Wao,Hao,Uao,qg,Dse,Jao,Yao,zP,Kao,Zao,eno,jg,Gse,ono,rno,QP,tno,ano,nno,Dg,Ose,sno,lno,WP,ino,dno,cno,Gg,Vse,fno,mno,HP,gno,hno,pno,Og,Xse,_no,uno,UP,bno,vno,Fno,Vg,zse,Tno,Mno,JP,Eno,Cno,wno,Xg,Qse,Ano,Lno,YP,yno,xno,$no,zg,Wse,kno,Sno,KP,Rno,Pno,Bno,Qg,Hse,Ino,Nno,ZP,qno,jno,Dno,Wg,Use,Gno,Ono,eB,Vno,Xno,zno,Hg,Jse,Qno,Wno,oB,Hno,Uno,Jno,Ug,Yse,Yno,Kno,rB,Zno,eso,oso,Jg,Kse,rso,tso,tB,aso,nso,sso,Yg,lso,Kg,uL,iso,Zse,dso,EXe,Ni,Zg,ele,bL,cso,ole,fso,CXe,Lo,vL,mso,FL,gso,aB,hso,pso,_so,TL,uso,rle,bso,vso,Fso,yr,ML,Tso,tle,Mso,Eso,Pa,Cso,ale,wso,Aso,nle,Lso,yso,sle,xso,$so,kso,k,Dn,lle,Sso,Rso,nB,Pso,Bso,sB,Iso,Nso,qso,Gn,ile,jso,Dso,lB,Gso,Oso,iB,Vso,Xso,zso,On,dle,Qso,Wso,dB,Hso,Uso,cB,Jso,Yso,Kso,eh,cle,Zso,elo,fB,olo,rlo,tlo,Vn,fle,alo,nlo,mB,slo,llo,gB,ilo,dlo,clo,oh,mle,flo,mlo,hB,glo,hlo,plo,rh,gle,_lo,ulo,pB,blo,vlo,Flo,th,hle,Tlo,Mlo,_B,Elo,Clo,wlo,Xn,ple,Alo,Llo,uB,ylo,xlo,bB,$lo,klo,Slo,zn,_le,Rlo,Plo,vB,Blo,Ilo,FB,Nlo,qlo,jlo,Qn,ule,Dlo,Glo,TB,Olo,Vlo,MB,Xlo,zlo,Qlo,ah,ble,Wlo,Hlo,EB,Ulo,Jlo,Ylo,nh,vle,Klo,Zlo,CB,eio,oio,rio,sh,Fle,tio,aio,wB,nio,sio,lio,Wn,Tle,iio,dio,AB,cio,fio,LB,mio,gio,hio,lh,Mle,pio,_io,yB,uio,bio,vio,Hn,Ele,Fio,Tio,xB,Mio,Eio,$B,Cio,wio,Aio,Un,Cle,Lio,yio,kB,xio,$io,SB,kio,Sio,Rio,Jn,wle,Pio,Bio,RB,Iio,Nio,PB,qio,jio,Dio,Yn,Ale,Gio,Oio,BB,Vio,Xio,IB,zio,Qio,Wio,ih,Lle,Hio,Uio,NB,Jio,Yio,Kio,Kn,yle,Zio,edo,qB,odo,rdo,jB,tdo,ado,ndo,Zn,xle,sdo,ldo,DB,ido,ddo,GB,cdo,fdo,mdo,es,$le,gdo,hdo,OB,pdo,_do,VB,udo,bdo,vdo,os,kle,Fdo,Tdo,XB,Mdo,Edo,zB,Cdo,wdo,Ado,rs,Sle,Ldo,ydo,QB,xdo,$do,WB,kdo,Sdo,Rdo,ts,Rle,Pdo,Bdo,HB,Ido,Ndo,UB,qdo,jdo,Ddo,dh,Ple,Gdo,Odo,JB,Vdo,Xdo,zdo,as,Ble,Qdo,Wdo,YB,Hdo,Udo,KB,Jdo,Ydo,Kdo,ch,Ile,Zdo,eco,ZB,oco,rco,tco,ns,Nle,aco,nco,eI,sco,lco,oI,ico,dco,cco,ss,qle,fco,mco,rI,gco,hco,tI,pco,_co,uco,ls,jle,bco,vco,aI,Fco,Tco,nI,Mco,Eco,Cco,fh,Dle,wco,Aco,sI,Lco,yco,xco,is,Gle,$co,kco,lI,Sco,Rco,iI,Pco,Bco,Ico,ds,Ole,Nco,qco,dI,jco,Dco,cI,Gco,Oco,Vco,cs,Vle,Xco,zco,fI,Qco,Wco,mI,Hco,Uco,Jco,mh,Xle,Yco,Kco,gI,Zco,efo,ofo,fs,zle,rfo,tfo,hI,afo,nfo,pI,sfo,lfo,ifo,ms,Qle,dfo,cfo,_I,ffo,mfo,uI,gfo,hfo,pfo,gs,Wle,_fo,ufo,bI,bfo,vfo,vI,Ffo,Tfo,Mfo,hs,Hle,Efo,Cfo,FI,wfo,Afo,TI,Lfo,yfo,xfo,ps,Ule,$fo,kfo,MI,Sfo,Rfo,EI,Pfo,Bfo,Ifo,_s,Jle,Nfo,qfo,CI,jfo,Dfo,wI,Gfo,Ofo,Vfo,us,Yle,Xfo,zfo,AI,Qfo,Wfo,LI,Hfo,Ufo,Jfo,bs,Kle,Yfo,Kfo,yI,Zfo,emo,xI,omo,rmo,tmo,gh,Zle,amo,nmo,$I,smo,lmo,imo,vs,eie,dmo,cmo,kI,fmo,mmo,SI,gmo,hmo,pmo,hh,oie,_mo,umo,RI,bmo,vmo,Fmo,ph,rie,Tmo,Mmo,PI,Emo,Cmo,wmo,Fs,tie,Amo,Lmo,BI,ymo,xmo,II,$mo,kmo,Smo,Ts,aie,Rmo,Pmo,NI,Bmo,Imo,qI,Nmo,qmo,jmo,Ms,nie,Dmo,Gmo,jI,Omo,Vmo,DI,Xmo,zmo,Qmo,_h,sie,Wmo,Hmo,GI,Umo,Jmo,Ymo,Es,lie,Kmo,Zmo,OI,ego,ogo,VI,rgo,tgo,ago,Cs,iie,ngo,sgo,XI,lgo,igo,zI,dgo,cgo,fgo,ws,die,mgo,ggo,QI,hgo,pgo,WI,_go,ugo,bgo,As,cie,vgo,Fgo,HI,Tgo,Mgo,UI,Ego,Cgo,wgo,Ls,fie,Ago,Lgo,JI,ygo,xgo,YI,$go,kgo,Sgo,ys,mie,Rgo,Pgo,KI,Bgo,Igo,ZI,Ngo,qgo,jgo,xs,gie,Dgo,Ggo,eN,Ogo,Vgo,oN,Xgo,zgo,Qgo,uh,hie,Wgo,Hgo,rN,Ugo,Jgo,Ygo,$s,pie,Kgo,Zgo,tN,eho,oho,aN,rho,tho,aho,bh,_ie,nho,sho,nN,lho,iho,dho,vh,uie,cho,fho,sN,mho,gho,hho,Fh,bie,pho,_ho,lN,uho,bho,vho,Th,vie,Fho,Tho,iN,Mho,Eho,Cho,ks,Fie,who,Aho,dN,Lho,yho,cN,xho,$ho,kho,Mh,Tie,Sho,Rho,fN,Pho,Bho,Iho,Ss,Mie,Nho,qho,mN,jho,Dho,gN,Gho,Oho,Vho,Rs,Eie,Xho,zho,hN,Qho,Who,pN,Hho,Uho,Jho,Ps,Cie,Yho,Kho,_N,Zho,epo,uN,opo,rpo,tpo,Bs,wie,apo,npo,bN,spo,lpo,vN,ipo,dpo,cpo,Is,Aie,fpo,mpo,FN,gpo,hpo,TN,ppo,_po,upo,Ns,Lie,bpo,vpo,MN,Fpo,Tpo,EN,Mpo,Epo,Cpo,Eh,yie,wpo,Apo,CN,Lpo,ypo,xpo,Ch,xie,$po,kpo,wN,Spo,Rpo,Ppo,qs,$ie,Bpo,Ipo,AN,Npo,qpo,LN,jpo,Dpo,Gpo,js,kie,Opo,Vpo,yN,Xpo,zpo,xN,Qpo,Wpo,Hpo,Ds,Sie,Upo,Jpo,$N,Ypo,Kpo,kN,Zpo,e_o,o_o,wh,Rie,r_o,t_o,SN,a_o,n_o,s_o,Ah,Pie,l_o,i_o,RN,d_o,c_o,f_o,Lh,Bie,m_o,g_o,PN,h_o,p_o,__o,Gs,Iie,u_o,b_o,BN,v_o,F_o,IN,T_o,M_o,E_o,Os,Nie,C_o,w_o,NN,A_o,L_o,qN,y_o,x_o,$_o,yh,qie,k_o,S_o,jN,R_o,P_o,B_o,xh,jie,I_o,N_o,DN,q_o,j_o,D_o,$h,Die,G_o,O_o,GN,V_o,X_o,z_o,Vs,Gie,Q_o,W_o,ON,H_o,U_o,VN,J_o,Y_o,K_o,kh,Oie,Z_o,euo,XN,ouo,ruo,tuo,Sh,Vie,auo,nuo,zN,suo,luo,iuo,Xs,Xie,duo,cuo,QN,fuo,muo,WN,guo,huo,puo,zs,zie,_uo,uuo,HN,buo,vuo,UN,Fuo,Tuo,Muo,Qs,Qie,Euo,Cuo,JN,wuo,Auo,YN,Luo,yuo,xuo,Ws,Wie,$uo,kuo,KN,Suo,Ruo,ZN,Puo,Buo,Iuo,Rh,Nuo,Ph,EL,quo,Hie,juo,wXe,qi,Bh,Uie,CL,Duo,Jie,Guo,AXe,yo,wL,Ouo,AL,Vuo,eq,Xuo,zuo,Quo,LL,Wuo,Yie,Huo,Uuo,Juo,Ue,yL,Yuo,Kie,Kuo,Zuo,Ba,e1o,Zie,o1o,r1o,ede,t1o,a1o,ode,n1o,s1o,l1o,J,Ih,rde,i1o,d1o,oq,c1o,f1o,m1o,Nh,tde,g1o,h1o,rq,p1o,_1o,u1o,qh,ade,b1o,v1o,tq,F1o,T1o,M1o,jh,nde,E1o,C1o,aq,w1o,A1o,L1o,Dh,sde,y1o,x1o,nq,$1o,k1o,S1o,Gh,lde,R1o,P1o,sq,B1o,I1o,N1o,Oh,ide,q1o,j1o,lq,D1o,G1o,O1o,Vh,dde,V1o,X1o,iq,z1o,Q1o,W1o,Xh,cde,H1o,U1o,dq,J1o,Y1o,K1o,zh,fde,Z1o,e2o,cq,o2o,r2o,t2o,Qh,mde,a2o,n2o,fq,s2o,l2o,i2o,Wh,gde,d2o,c2o,mq,f2o,m2o,g2o,Hh,hde,h2o,p2o,gq,_2o,u2o,b2o,Uh,pde,v2o,F2o,hq,T2o,M2o,E2o,Jh,_de,C2o,w2o,pq,A2o,L2o,y2o,Yh,ude,x2o,$2o,_q,k2o,S2o,R2o,Kh,bde,P2o,B2o,uq,I2o,N2o,q2o,Zh,vde,j2o,D2o,bq,G2o,O2o,V2o,ep,Fde,X2o,z2o,vq,Q2o,W2o,H2o,op,Tde,U2o,J2o,Fq,Y2o,K2o,Z2o,rp,Mde,e4o,o4o,Tq,r4o,t4o,a4o,tp,Ede,n4o,s4o,Mq,l4o,i4o,d4o,ap,Cde,c4o,f4o,Eq,m4o,g4o,h4o,np,wde,p4o,_4o,Cq,u4o,b4o,v4o,sp,Ade,F4o,T4o,wq,M4o,E4o,C4o,lp,Lde,w4o,A4o,Aq,L4o,y4o,x4o,ip,yde,$4o,k4o,Lq,S4o,R4o,P4o,dp,xde,B4o,I4o,yq,N4o,q4o,j4o,cp,$de,D4o,G4o,xq,O4o,V4o,X4o,fp,kde,z4o,Q4o,$q,W4o,H4o,U4o,mp,Sde,J4o,Y4o,kq,K4o,Z4o,ebo,gp,Rde,obo,rbo,Sq,tbo,abo,nbo,hp,Pde,sbo,lbo,Rq,ibo,dbo,cbo,pp,Bde,fbo,mbo,Pq,gbo,hbo,pbo,_p,Ide,_bo,ubo,Bq,bbo,vbo,Fbo,up,Tbo,bp,Mbo,vp,xL,Ebo,Nde,Cbo,LXe,ji,Fp,qde,$L,wbo,jde,Abo,yXe,xo,kL,Lbo,SL,ybo,Iq,xbo,$bo,kbo,RL,Sbo,Dde,Rbo,Pbo,Bbo,Je,PL,Ibo,Gde,Nbo,qbo,Di,jbo,Ode,Dbo,Gbo,Vde,Obo,Vbo,Xbo,he,Tp,Xde,zbo,Qbo,Nq,Wbo,Hbo,Ubo,Mp,zde,Jbo,Ybo,Qde,Kbo,Zbo,evo,Ep,Wde,ovo,rvo,qq,tvo,avo,nvo,Cp,Hde,svo,lvo,jq,ivo,dvo,cvo,wp,Ude,fvo,mvo,Dq,gvo,hvo,pvo,Ap,Jde,_vo,uvo,Gq,bvo,vvo,Fvo,Lp,Yde,Tvo,Mvo,Oq,Evo,Cvo,wvo,yp,Kde,Avo,Lvo,Vq,yvo,xvo,$vo,xp,Zde,kvo,Svo,Xq,Rvo,Pvo,Bvo,$p,ece,Ivo,Nvo,zq,qvo,jvo,Dvo,kp,oce,Gvo,Ovo,Qq,Vvo,Xvo,zvo,Sp,rce,Qvo,Wvo,Wq,Hvo,Uvo,Jvo,Rp,tce,Yvo,Kvo,Hq,Zvo,eFo,oFo,Pp,ace,rFo,tFo,Uq,aFo,nFo,sFo,Bp,nce,lFo,iFo,Jq,dFo,cFo,fFo,Ip,sce,mFo,gFo,Yq,hFo,pFo,_Fo,Np,lce,uFo,bFo,Kq,vFo,FFo,TFo,qp,ice,MFo,EFo,Zq,CFo,wFo,AFo,jp,LFo,Dp,yFo,Gp,BL,xFo,dce,$Fo,xXe,Gi,Op,cce,IL,kFo,fce,SFo,$Xe,$o,NL,RFo,Oi,PFo,ej,BFo,IFo,oj,NFo,qFo,jFo,qL,DFo,mce,GFo,OFo,VFo,it,jL,XFo,gce,zFo,QFo,Vi,WFo,hce,HFo,UFo,rj,JFo,YFo,KFo,Vp,ZFo,Ye,DL,e6o,pce,o6o,r6o,Ia,t6o,_ce,a6o,n6o,uce,s6o,l6o,bce,i6o,d6o,c6o,y,Xp,vce,f6o,m6o,tj,g6o,h6o,p6o,zp,Fce,_6o,u6o,aj,b6o,v6o,F6o,Qp,Tce,T6o,M6o,nj,E6o,C6o,w6o,Wp,Mce,A6o,L6o,sj,y6o,x6o,$6o,Hp,Ece,k6o,S6o,lj,R6o,P6o,B6o,Up,Cce,I6o,N6o,ij,q6o,j6o,D6o,Jp,wce,G6o,O6o,dj,V6o,X6o,z6o,Yp,Ace,Q6o,W6o,cj,H6o,U6o,J6o,Kp,Lce,Y6o,K6o,fj,Z6o,eTo,oTo,Zp,yce,rTo,tTo,mj,aTo,nTo,sTo,e_,xce,lTo,iTo,gj,dTo,cTo,fTo,o_,$ce,mTo,gTo,hj,hTo,pTo,_To,r_,kce,uTo,bTo,pj,vTo,FTo,TTo,t_,Sce,MTo,ETo,_j,CTo,wTo,ATo,a_,Rce,LTo,yTo,uj,xTo,$To,kTo,n_,Pce,STo,RTo,bj,PTo,BTo,ITo,s_,Bce,NTo,qTo,vj,jTo,DTo,GTo,l_,Ice,OTo,VTo,Fj,XTo,zTo,QTo,i_,Nce,WTo,HTo,Tj,UTo,JTo,YTo,d_,qce,KTo,ZTo,Mj,e7o,o7o,r7o,c_,jce,t7o,a7o,Ej,n7o,s7o,l7o,f_,Dce,i7o,d7o,Cj,c7o,f7o,m7o,m_,Gce,g7o,h7o,wj,p7o,_7o,u7o,g_,Oce,b7o,v7o,Aj,F7o,T7o,M7o,h_,Vce,E7o,C7o,Lj,w7o,A7o,L7o,p_,Xce,y7o,x7o,yj,$7o,k7o,S7o,__,zce,R7o,P7o,xj,B7o,I7o,N7o,u_,Qce,q7o,j7o,$j,D7o,G7o,O7o,b_,Wce,V7o,X7o,kj,z7o,Q7o,W7o,v_,Hce,H7o,U7o,Sj,J7o,Y7o,K7o,F_,Uce,Z7o,e9o,Rj,o9o,r9o,t9o,T_,Jce,a9o,n9o,Pj,s9o,l9o,i9o,M_,Yce,d9o,c9o,Bj,f9o,m9o,g9o,E_,Kce,h9o,p9o,Ij,_9o,u9o,b9o,Hs,Zce,v9o,F9o,Nj,T9o,M9o,qj,E9o,C9o,w9o,C_,efe,A9o,L9o,jj,y9o,x9o,$9o,w_,ofe,k9o,S9o,Dj,R9o,P9o,B9o,A_,rfe,I9o,N9o,Gj,q9o,j9o,D9o,L_,tfe,G9o,O9o,Oj,V9o,X9o,z9o,y_,afe,Q9o,W9o,Vj,H9o,U9o,J9o,x_,nfe,Y9o,K9o,Xj,Z9o,eMo,oMo,$_,sfe,rMo,tMo,zj,aMo,nMo,sMo,k_,lfe,lMo,iMo,Qj,dMo,cMo,fMo,S_,ife,mMo,gMo,Wj,hMo,pMo,_Mo,R_,dfe,uMo,bMo,Hj,vMo,FMo,TMo,P_,cfe,MMo,EMo,Uj,CMo,wMo,AMo,B_,ffe,LMo,yMo,Jj,xMo,$Mo,kMo,I_,mfe,SMo,RMo,Yj,PMo,BMo,IMo,N_,gfe,NMo,qMo,Kj,jMo,DMo,GMo,q_,hfe,OMo,VMo,Zj,XMo,zMo,QMo,j_,pfe,WMo,HMo,eD,UMo,JMo,YMo,D_,_fe,KMo,ZMo,oD,eEo,oEo,rEo,G_,ufe,tEo,aEo,rD,nEo,sEo,lEo,O_,bfe,iEo,dEo,tD,cEo,fEo,mEo,V_,vfe,gEo,hEo,aD,pEo,_Eo,uEo,X_,Ffe,bEo,vEo,nD,FEo,TEo,MEo,z_,Tfe,EEo,CEo,sD,wEo,AEo,LEo,Q_,Mfe,yEo,xEo,lD,$Eo,kEo,SEo,W_,Efe,REo,PEo,iD,BEo,IEo,NEo,H_,Cfe,qEo,jEo,dD,DEo,GEo,OEo,U_,wfe,VEo,XEo,cD,zEo,QEo,WEo,J_,Afe,HEo,UEo,fD,JEo,YEo,KEo,Y_,Lfe,ZEo,eCo,mD,oCo,rCo,tCo,K_,yfe,aCo,nCo,gD,sCo,lCo,iCo,Z_,xfe,dCo,cCo,hD,fCo,mCo,gCo,eu,$fe,hCo,pCo,pD,_Co,uCo,bCo,ou,kfe,vCo,FCo,_D,TCo,MCo,ECo,ru,Sfe,CCo,wCo,uD,ACo,LCo,yCo,tu,Rfe,xCo,$Co,bD,kCo,SCo,RCo,au,Pfe,PCo,BCo,vD,ICo,NCo,qCo,nu,Bfe,jCo,DCo,FD,GCo,OCo,VCo,su,Ife,XCo,zCo,TD,QCo,WCo,HCo,lu,Nfe,UCo,JCo,MD,YCo,KCo,ZCo,iu,qfe,e3o,o3o,ED,r3o,t3o,a3o,du,jfe,n3o,s3o,CD,l3o,i3o,d3o,cu,Dfe,c3o,f3o,wD,m3o,g3o,h3o,fu,Gfe,p3o,_3o,AD,u3o,b3o,v3o,mu,Ofe,F3o,T3o,LD,M3o,E3o,C3o,gu,Vfe,w3o,A3o,yD,L3o,y3o,x3o,hu,Xfe,$3o,k3o,xD,S3o,R3o,P3o,pu,zfe,B3o,I3o,$D,N3o,q3o,j3o,_u,Qfe,D3o,G3o,kD,O3o,V3o,X3o,uu,Wfe,z3o,Q3o,SD,W3o,H3o,U3o,bu,Hfe,J3o,Y3o,RD,K3o,Z3o,e5o,vu,Ufe,o5o,r5o,PD,t5o,a5o,n5o,Fu,Jfe,s5o,l5o,BD,i5o,d5o,c5o,Tu,Yfe,f5o,m5o,ID,g5o,h5o,p5o,Mu,Kfe,_5o,u5o,ND,b5o,v5o,F5o,Eu,Zfe,T5o,M5o,qD,E5o,C5o,w5o,Cu,eme,A5o,L5o,jD,y5o,x5o,$5o,wu,ome,k5o,S5o,DD,R5o,P5o,B5o,Au,rme,I5o,N5o,GD,q5o,j5o,D5o,Lu,tme,G5o,O5o,OD,V5o,X5o,z5o,yu,ame,Q5o,W5o,VD,H5o,U5o,J5o,xu,nme,Y5o,K5o,XD,Z5o,e0o,o0o,$u,sme,r0o,t0o,zD,a0o,n0o,s0o,ku,lme,l0o,i0o,QD,d0o,c0o,f0o,Su,ime,m0o,g0o,WD,h0o,p0o,_0o,Ru,dme,u0o,b0o,HD,v0o,F0o,T0o,Pu,cme,M0o,E0o,UD,C0o,w0o,A0o,Bu,fme,L0o,y0o,JD,x0o,$0o,k0o,Iu,mme,S0o,R0o,YD,P0o,B0o,I0o,Nu,gme,N0o,q0o,KD,j0o,D0o,G0o,qu,hme,O0o,V0o,ZD,X0o,z0o,Q0o,ju,pme,W0o,H0o,eG,U0o,J0o,Y0o,Du,_me,K0o,Z0o,oG,ewo,owo,rwo,Gu,ume,two,awo,rG,nwo,swo,lwo,Ou,bme,iwo,dwo,tG,cwo,fwo,mwo,Vu,vme,gwo,hwo,aG,pwo,_wo,uwo,Xu,Fme,bwo,vwo,nG,Fwo,Two,Mwo,zu,Tme,Ewo,Cwo,sG,wwo,Awo,Lwo,Qu,Mme,ywo,xwo,lG,$wo,kwo,Swo,Wu,Rwo,Eme,Pwo,Bwo,Cme,Iwo,Nwo,Hu,kXe,Xi,Uu,wme,GL,qwo,Ame,jwo,SXe,ko,OL,Dwo,zi,Gwo,iG,Owo,Vwo,dG,Xwo,zwo,Qwo,VL,Wwo,Lme,Hwo,Uwo,Jwo,dt,XL,Ywo,yme,Kwo,Zwo,Qi,eAo,xme,oAo,rAo,cG,tAo,aAo,nAo,Ju,sAo,Ke,zL,lAo,$me,iAo,dAo,Na,cAo,kme,fAo,mAo,Sme,gAo,hAo,Rme,pAo,_Ao,uAo,G,Yu,Pme,bAo,vAo,fG,FAo,TAo,MAo,Ku,Bme,EAo,CAo,mG,wAo,AAo,LAo,Zu,Ime,yAo,xAo,gG,$Ao,kAo,SAo,e1,Nme,RAo,PAo,hG,BAo,IAo,NAo,o1,qme,qAo,jAo,pG,DAo,GAo,OAo,r1,jme,VAo,XAo,_G,zAo,QAo,WAo,t1,Dme,HAo,UAo,uG,JAo,YAo,KAo,a1,Gme,ZAo,eLo,bG,oLo,rLo,tLo,n1,Ome,aLo,nLo,vG,sLo,lLo,iLo,s1,Vme,dLo,cLo,FG,fLo,mLo,gLo,l1,Xme,hLo,pLo,TG,_Lo,uLo,bLo,i1,zme,vLo,FLo,MG,TLo,MLo,ELo,d1,Qme,CLo,wLo,EG,ALo,LLo,yLo,c1,Wme,xLo,$Lo,CG,kLo,SLo,RLo,f1,Hme,PLo,BLo,wG,ILo,NLo,qLo,m1,Ume,jLo,DLo,AG,GLo,OLo,VLo,g1,Jme,XLo,zLo,LG,QLo,WLo,HLo,h1,Yme,ULo,JLo,yG,YLo,KLo,ZLo,p1,Kme,eyo,oyo,xG,ryo,tyo,ayo,_1,Zme,nyo,syo,$G,lyo,iyo,dyo,u1,ege,cyo,fyo,kG,myo,gyo,hyo,b1,oge,pyo,_yo,SG,uyo,byo,vyo,v1,rge,Fyo,Tyo,RG,Myo,Eyo,Cyo,F1,tge,wyo,Ayo,PG,Lyo,yyo,xyo,T1,age,$yo,kyo,BG,Syo,Ryo,Pyo,M1,nge,Byo,Iyo,IG,Nyo,qyo,jyo,E1,sge,Dyo,Gyo,NG,Oyo,Vyo,Xyo,C1,lge,zyo,Qyo,qG,Wyo,Hyo,Uyo,w1,ige,Jyo,Yyo,jG,Kyo,Zyo,e8o,A1,dge,o8o,r8o,DG,t8o,a8o,n8o,L1,cge,s8o,l8o,GG,i8o,d8o,c8o,y1,fge,f8o,m8o,OG,g8o,h8o,p8o,x1,mge,_8o,u8o,VG,b8o,v8o,F8o,$1,gge,T8o,M8o,XG,E8o,C8o,w8o,k1,hge,A8o,L8o,zG,y8o,x8o,$8o,S1,pge,k8o,S8o,QG,R8o,P8o,B8o,R1,_ge,I8o,N8o,WG,q8o,j8o,D8o,P1,uge,G8o,O8o,HG,V8o,X8o,z8o,B1,bge,Q8o,W8o,UG,H8o,U8o,J8o,I1,vge,Y8o,K8o,JG,Z8o,exo,oxo,N1,Fge,rxo,txo,YG,axo,nxo,sxo,q1,Tge,lxo,ixo,KG,dxo,cxo,fxo,j1,Mge,mxo,gxo,ZG,hxo,pxo,_xo,D1,Ege,uxo,bxo,eO,vxo,Fxo,Txo,G1,Cge,Mxo,Exo,oO,Cxo,wxo,Axo,O1,Lxo,wge,yxo,xxo,Age,$xo,kxo,V1,RXe,Wi,X1,Lge,QL,Sxo,yge,Rxo,PXe,So,WL,Pxo,Hi,Bxo,rO,Ixo,Nxo,tO,qxo,jxo,Dxo,HL,Gxo,xge,Oxo,Vxo,Xxo,ct,UL,zxo,$ge,Qxo,Wxo,Ui,Hxo,kge,Uxo,Jxo,aO,Yxo,Kxo,Zxo,z1,e$o,Ze,JL,o$o,Sge,r$o,t$o,qa,a$o,Rge,n$o,s$o,Pge,l$o,i$o,Bge,d$o,c$o,f$o,z,Q1,Ige,m$o,g$o,nO,h$o,p$o,_$o,W1,Nge,u$o,b$o,sO,v$o,F$o,T$o,H1,qge,M$o,E$o,lO,C$o,w$o,A$o,U1,jge,L$o,y$o,iO,x$o,$$o,k$o,J1,Dge,S$o,R$o,dO,P$o,B$o,I$o,Y1,Gge,N$o,q$o,cO,j$o,D$o,G$o,K1,Oge,O$o,V$o,fO,X$o,z$o,Q$o,Z1,Vge,W$o,H$o,mO,U$o,J$o,Y$o,e2,Xge,K$o,Z$o,gO,eko,oko,rko,o2,zge,tko,ako,hO,nko,sko,lko,r2,Qge,iko,dko,pO,cko,fko,mko,t2,Wge,gko,hko,_O,pko,_ko,uko,a2,Hge,bko,vko,uO,Fko,Tko,Mko,n2,Uge,Eko,Cko,bO,wko,Ako,Lko,s2,Jge,yko,xko,vO,$ko,kko,Sko,l2,Yge,Rko,Pko,FO,Bko,Iko,Nko,i2,Kge,qko,jko,TO,Dko,Gko,Oko,d2,Zge,Vko,Xko,MO,zko,Qko,Wko,c2,ehe,Hko,Uko,EO,Jko,Yko,Kko,f2,ohe,Zko,eSo,CO,oSo,rSo,tSo,m2,rhe,aSo,nSo,wO,sSo,lSo,iSo,g2,the,dSo,cSo,AO,fSo,mSo,gSo,h2,ahe,hSo,pSo,LO,_So,uSo,bSo,p2,nhe,vSo,FSo,yO,TSo,MSo,ESo,_2,she,CSo,wSo,xO,ASo,LSo,ySo,u2,lhe,xSo,$So,$O,kSo,SSo,RSo,b2,ihe,PSo,BSo,kO,ISo,NSo,qSo,v2,dhe,jSo,DSo,SO,GSo,OSo,VSo,F2,che,XSo,zSo,RO,QSo,WSo,HSo,T2,fhe,USo,JSo,PO,YSo,KSo,ZSo,M2,mhe,eRo,oRo,BO,rRo,tRo,aRo,E2,ghe,nRo,sRo,IO,lRo,iRo,dRo,C2,hhe,cRo,fRo,NO,mRo,gRo,hRo,w2,phe,pRo,_Ro,qO,uRo,bRo,vRo,A2,_he,FRo,TRo,jO,MRo,ERo,CRo,L2,uhe,wRo,ARo,DO,LRo,yRo,xRo,y2,bhe,$Ro,kRo,GO,SRo,RRo,PRo,x2,vhe,BRo,IRo,OO,NRo,qRo,jRo,$2,Fhe,DRo,GRo,VO,ORo,VRo,XRo,k2,The,zRo,QRo,XO,WRo,HRo,URo,S2,JRo,Mhe,YRo,KRo,Ehe,ZRo,ePo,R2,BXe,Ji,P2,Che,YL,oPo,whe,rPo,IXe,Ro,KL,tPo,Yi,aPo,zO,nPo,sPo,QO,lPo,iPo,dPo,ZL,cPo,Ahe,fPo,mPo,gPo,ft,ey,hPo,Lhe,pPo,_Po,Ki,uPo,yhe,bPo,vPo,WO,FPo,TPo,MPo,B2,EPo,eo,oy,CPo,xhe,wPo,APo,ja,LPo,$he,yPo,xPo,khe,$Po,kPo,She,SPo,RPo,PPo,W,I2,Rhe,BPo,IPo,HO,NPo,qPo,jPo,N2,Phe,DPo,GPo,UO,OPo,VPo,XPo,q2,Bhe,zPo,QPo,JO,WPo,HPo,UPo,j2,Ihe,JPo,YPo,YO,KPo,ZPo,eBo,D2,Nhe,oBo,rBo,KO,tBo,aBo,nBo,G2,qhe,sBo,lBo,ZO,iBo,dBo,cBo,O2,jhe,fBo,mBo,eV,gBo,hBo,pBo,V2,Dhe,_Bo,uBo,oV,bBo,vBo,FBo,X2,Ghe,TBo,MBo,rV,EBo,CBo,wBo,z2,Ohe,ABo,LBo,tV,yBo,xBo,$Bo,Q2,Vhe,kBo,SBo,aV,RBo,PBo,BBo,W2,Xhe,IBo,NBo,nV,qBo,jBo,DBo,H2,zhe,GBo,OBo,sV,VBo,XBo,zBo,U2,Qhe,QBo,WBo,lV,HBo,UBo,JBo,J2,Whe,YBo,KBo,iV,ZBo,eIo,oIo,Y2,Hhe,rIo,tIo,dV,aIo,nIo,sIo,K2,Uhe,lIo,iIo,cV,dIo,cIo,fIo,Z2,Jhe,mIo,gIo,fV,hIo,pIo,_Io,e4,Yhe,uIo,bIo,mV,vIo,FIo,TIo,o4,Khe,MIo,EIo,gV,CIo,wIo,AIo,r4,Zhe,LIo,yIo,hV,xIo,$Io,kIo,t4,epe,SIo,RIo,pV,PIo,BIo,IIo,a4,ope,NIo,qIo,_V,jIo,DIo,GIo,n4,rpe,OIo,VIo,uV,XIo,zIo,QIo,s4,tpe,WIo,HIo,bV,UIo,JIo,YIo,l4,ape,KIo,ZIo,vV,eNo,oNo,rNo,i4,npe,tNo,aNo,FV,nNo,sNo,lNo,d4,spe,iNo,dNo,TV,cNo,fNo,mNo,c4,lpe,gNo,hNo,MV,pNo,_No,uNo,f4,ipe,bNo,vNo,EV,FNo,TNo,MNo,m4,dpe,ENo,CNo,CV,wNo,ANo,LNo,g4,cpe,yNo,xNo,wV,$No,kNo,SNo,h4,fpe,RNo,PNo,AV,BNo,INo,NNo,p4,mpe,qNo,jNo,gpe,DNo,GNo,ONo,_4,hpe,VNo,XNo,LV,zNo,QNo,WNo,u4,ppe,HNo,UNo,yV,JNo,YNo,KNo,b4,_pe,ZNo,eqo,xV,oqo,rqo,tqo,v4,upe,aqo,nqo,$V,sqo,lqo,iqo,F4,dqo,bpe,cqo,fqo,vpe,mqo,gqo,T4,NXe,Zi,M4,Fpe,ry,hqo,Tpe,pqo,qXe,Po,ty,_qo,ed,uqo,kV,bqo,vqo,SV,Fqo,Tqo,Mqo,ay,Eqo,Mpe,Cqo,wqo,Aqo,mt,ny,Lqo,Epe,yqo,xqo,od,$qo,Cpe,kqo,Sqo,RV,Rqo,Pqo,Bqo,E4,Iqo,oo,sy,Nqo,wpe,qqo,jqo,Da,Dqo,Ape,Gqo,Oqo,Lpe,Vqo,Xqo,ype,zqo,Qqo,Wqo,pe,C4,xpe,Hqo,Uqo,PV,Jqo,Yqo,Kqo,w4,$pe,Zqo,ejo,BV,ojo,rjo,tjo,A4,kpe,ajo,njo,IV,sjo,ljo,ijo,L4,Spe,djo,cjo,NV,fjo,mjo,gjo,y4,Rpe,hjo,pjo,qV,_jo,ujo,bjo,x4,Ppe,vjo,Fjo,jV,Tjo,Mjo,Ejo,$4,Bpe,Cjo,wjo,DV,Ajo,Ljo,yjo,k4,Ipe,xjo,$jo,GV,kjo,Sjo,Rjo,S4,Npe,Pjo,Bjo,OV,Ijo,Njo,qjo,R4,qpe,jjo,Djo,VV,Gjo,Ojo,Vjo,P4,jpe,Xjo,zjo,XV,Qjo,Wjo,Hjo,B4,Dpe,Ujo,Jjo,zV,Yjo,Kjo,Zjo,I4,Gpe,eDo,oDo,QV,rDo,tDo,aDo,N4,Ope,nDo,sDo,WV,lDo,iDo,dDo,q4,Vpe,cDo,fDo,HV,mDo,gDo,hDo,j4,Xpe,pDo,_Do,UV,uDo,bDo,vDo,D4,zpe,FDo,TDo,JV,MDo,EDo,CDo,G4,Qpe,wDo,ADo,YV,LDo,yDo,xDo,O4,$Do,Wpe,kDo,SDo,Hpe,RDo,PDo,V4,jXe,rd,X4,Upe,ly,BDo,Jpe,IDo,DXe,Bo,iy,NDo,td,qDo,KV,jDo,DDo,ZV,GDo,ODo,VDo,dy,XDo,Ype,zDo,QDo,WDo,gt,cy,HDo,Kpe,UDo,JDo,ad,YDo,Zpe,KDo,ZDo,eX,eGo,oGo,rGo,z4,tGo,ro,fy,aGo,e_e,nGo,sGo,Ga,lGo,o_e,iGo,dGo,r_e,cGo,fGo,t_e,mGo,gGo,hGo,N,Q4,a_e,pGo,_Go,oX,uGo,bGo,vGo,W4,n_e,FGo,TGo,rX,MGo,EGo,CGo,H4,s_e,wGo,AGo,tX,LGo,yGo,xGo,U4,l_e,$Go,kGo,aX,SGo,RGo,PGo,J4,i_e,BGo,IGo,nX,NGo,qGo,jGo,Y4,d_e,DGo,GGo,sX,OGo,VGo,XGo,K4,c_e,zGo,QGo,lX,WGo,HGo,UGo,Z4,f_e,JGo,YGo,iX,KGo,ZGo,eOo,eb,m_e,oOo,rOo,dX,tOo,aOo,nOo,ob,g_e,sOo,lOo,cX,iOo,dOo,cOo,rb,h_e,fOo,mOo,fX,gOo,hOo,pOo,tb,p_e,_Oo,uOo,mX,bOo,vOo,FOo,ab,__e,TOo,MOo,gX,EOo,COo,wOo,nb,u_e,AOo,LOo,hX,yOo,xOo,$Oo,sb,b_e,kOo,SOo,pX,ROo,POo,BOo,lb,v_e,IOo,NOo,_X,qOo,jOo,DOo,ib,F_e,GOo,OOo,uX,VOo,XOo,zOo,db,T_e,QOo,WOo,bX,HOo,UOo,JOo,cb,M_e,YOo,KOo,vX,ZOo,eVo,oVo,fb,E_e,rVo,tVo,FX,aVo,nVo,sVo,mb,C_e,lVo,iVo,TX,dVo,cVo,fVo,gb,w_e,mVo,gVo,MX,hVo,pVo,_Vo,hb,A_e,uVo,bVo,EX,vVo,FVo,TVo,pb,L_e,MVo,EVo,CX,CVo,wVo,AVo,_b,y_e,LVo,yVo,wX,xVo,$Vo,kVo,ub,x_e,SVo,RVo,AX,PVo,BVo,IVo,bb,$_e,NVo,qVo,LX,jVo,DVo,GVo,vb,k_e,OVo,VVo,yX,XVo,zVo,QVo,Fb,S_e,WVo,HVo,xX,UVo,JVo,YVo,Tb,R_e,KVo,ZVo,$X,eXo,oXo,rXo,Mb,P_e,tXo,aXo,kX,nXo,sXo,lXo,Eb,B_e,iXo,dXo,SX,cXo,fXo,mXo,Cb,I_e,gXo,hXo,RX,pXo,_Xo,uXo,wb,N_e,bXo,vXo,PX,FXo,TXo,MXo,Ab,q_e,EXo,CXo,BX,wXo,AXo,LXo,Lb,j_e,yXo,xXo,IX,$Xo,kXo,SXo,yb,D_e,RXo,PXo,NX,BXo,IXo,NXo,xb,G_e,qXo,jXo,qX,DXo,GXo,OXo,$b,O_e,VXo,XXo,jX,zXo,QXo,WXo,kb,V_e,HXo,UXo,DX,JXo,YXo,KXo,Sb,X_e,ZXo,ezo,GX,ozo,rzo,tzo,Rb,z_e,azo,nzo,OX,szo,lzo,izo,Pb,Q_e,dzo,czo,VX,fzo,mzo,gzo,Bb,W_e,hzo,pzo,XX,_zo,uzo,bzo,Ib,H_e,vzo,Fzo,zX,Tzo,Mzo,Ezo,Nb,U_e,Czo,wzo,QX,Azo,Lzo,yzo,qb,J_e,xzo,$zo,WX,kzo,Szo,Rzo,jb,Y_e,Pzo,Bzo,HX,Izo,Nzo,qzo,Db,K_e,jzo,Dzo,UX,Gzo,Ozo,Vzo,Gb,Z_e,Xzo,zzo,JX,Qzo,Wzo,Hzo,Ob,Uzo,eue,Jzo,Yzo,oue,Kzo,Zzo,Vb,GXe,nd,Xb,rue,my,eQo,tue,oQo,OXe,Io,gy,rQo,sd,tQo,YX,aQo,nQo,KX,sQo,lQo,iQo,hy,dQo,aue,cQo,fQo,mQo,ht,py,gQo,nue,hQo,pQo,ld,_Qo,sue,uQo,bQo,ZX,vQo,FQo,TQo,zb,MQo,to,_y,EQo,lue,CQo,wQo,Oa,AQo,iue,LQo,yQo,due,xQo,$Qo,cue,kQo,SQo,RQo,Z,Qb,fue,PQo,BQo,ez,IQo,NQo,qQo,Wb,mue,jQo,DQo,oz,GQo,OQo,VQo,Hb,gue,XQo,zQo,rz,QQo,WQo,HQo,Ub,hue,UQo,JQo,tz,YQo,KQo,ZQo,Jb,pue,eWo,oWo,az,rWo,tWo,aWo,Yb,_ue,nWo,sWo,nz,lWo,iWo,dWo,Kb,uue,cWo,fWo,sz,mWo,gWo,hWo,Zb,bue,pWo,_Wo,lz,uWo,bWo,vWo,ev,vue,FWo,TWo,iz,MWo,EWo,CWo,ov,Fue,wWo,AWo,dz,LWo,yWo,xWo,rv,Tue,$Wo,kWo,cz,SWo,RWo,PWo,tv,Mue,BWo,IWo,fz,NWo,qWo,jWo,av,Eue,DWo,GWo,mz,OWo,VWo,XWo,nv,Cue,zWo,QWo,gz,WWo,HWo,UWo,sv,wue,JWo,YWo,hz,KWo,ZWo,eHo,lv,Aue,oHo,rHo,pz,tHo,aHo,nHo,iv,Lue,sHo,lHo,_z,iHo,dHo,cHo,dv,yue,fHo,mHo,uz,gHo,hHo,pHo,cv,xue,_Ho,uHo,bz,bHo,vHo,FHo,fv,$ue,THo,MHo,vz,EHo,CHo,wHo,mv,kue,AHo,LHo,Fz,yHo,xHo,$Ho,gv,Sue,kHo,SHo,Tz,RHo,PHo,BHo,hv,Rue,IHo,NHo,Mz,qHo,jHo,DHo,pv,Pue,GHo,OHo,Ez,VHo,XHo,zHo,_v,Bue,QHo,WHo,Cz,HHo,UHo,JHo,uv,Iue,YHo,KHo,wz,ZHo,eUo,oUo,bv,Nue,rUo,tUo,Az,aUo,nUo,sUo,vv,que,lUo,iUo,Lz,dUo,cUo,fUo,Fv,jue,mUo,gUo,yz,hUo,pUo,_Uo,Tv,Due,uUo,bUo,xz,vUo,FUo,TUo,Mv,MUo,Gue,EUo,CUo,Oue,wUo,AUo,Ev,VXe,id,Cv,Vue,uy,LUo,Xue,yUo,XXe,No,by,xUo,dd,$Uo,$z,kUo,SUo,kz,RUo,PUo,BUo,vy,IUo,zue,NUo,qUo,jUo,pt,Fy,DUo,Que,GUo,OUo,cd,VUo,Wue,XUo,zUo,Sz,QUo,WUo,HUo,wv,UUo,ao,Ty,JUo,Hue,YUo,KUo,Va,ZUo,Uue,eJo,oJo,Jue,rJo,tJo,Yue,aJo,nJo,sJo,qo,Av,Kue,lJo,iJo,Rz,dJo,cJo,fJo,Lv,Zue,mJo,gJo,Pz,hJo,pJo,_Jo,yv,e1e,uJo,bJo,Bz,vJo,FJo,TJo,xv,o1e,MJo,EJo,Iz,CJo,wJo,AJo,$v,r1e,LJo,yJo,Nz,xJo,$Jo,kJo,kv,t1e,SJo,RJo,qz,PJo,BJo,IJo,Sv,NJo,a1e,qJo,jJo,n1e,DJo,GJo,Rv,zXe,fd,Pv,s1e,My,OJo,l1e,VJo,QXe,jo,Ey,XJo,md,zJo,jz,QJo,WJo,Dz,HJo,UJo,JJo,Cy,YJo,i1e,KJo,ZJo,eYo,_t,wy,oYo,d1e,rYo,tYo,gd,aYo,c1e,nYo,sYo,Gz,lYo,iYo,dYo,Bv,cYo,no,Ay,fYo,f1e,mYo,gYo,Xa,hYo,m1e,pYo,_Yo,g1e,uYo,bYo,h1e,vYo,FYo,TYo,U,Iv,p1e,MYo,EYo,Oz,CYo,wYo,AYo,Nv,_1e,LYo,yYo,Vz,xYo,$Yo,kYo,qv,u1e,SYo,RYo,Xz,PYo,BYo,IYo,jv,b1e,NYo,qYo,zz,jYo,DYo,GYo,Dv,v1e,OYo,VYo,Qz,XYo,zYo,QYo,Gv,F1e,WYo,HYo,Wz,UYo,JYo,YYo,Ov,T1e,KYo,ZYo,Hz,eKo,oKo,rKo,Vv,M1e,tKo,aKo,Uz,nKo,sKo,lKo,Xv,E1e,iKo,dKo,Jz,cKo,fKo,mKo,zv,C1e,gKo,hKo,Yz,pKo,_Ko,uKo,Qv,w1e,bKo,vKo,Kz,FKo,TKo,MKo,Wv,A1e,EKo,CKo,Zz,wKo,AKo,LKo,Hv,L1e,yKo,xKo,eQ,$Ko,kKo,SKo,Uv,y1e,RKo,PKo,oQ,BKo,IKo,NKo,Jv,x1e,qKo,jKo,rQ,DKo,GKo,OKo,Yv,$1e,VKo,XKo,tQ,zKo,QKo,WKo,Kv,k1e,HKo,UKo,aQ,JKo,YKo,KKo,Zv,S1e,ZKo,eZo,nQ,oZo,rZo,tZo,eF,R1e,aZo,nZo,sQ,sZo,lZo,iZo,oF,P1e,dZo,cZo,lQ,fZo,mZo,gZo,rF,B1e,hZo,pZo,iQ,_Zo,uZo,bZo,tF,I1e,vZo,FZo,dQ,TZo,MZo,EZo,aF,N1e,CZo,wZo,cQ,AZo,LZo,yZo,nF,q1e,xZo,$Zo,fQ,kZo,SZo,RZo,sF,j1e,PZo,BZo,mQ,IZo,NZo,qZo,lF,D1e,jZo,DZo,gQ,GZo,OZo,VZo,iF,G1e,XZo,zZo,hQ,QZo,WZo,HZo,dF,O1e,UZo,JZo,pQ,YZo,KZo,ZZo,cF,V1e,eer,oer,_Q,rer,ter,aer,fF,X1e,ner,ser,uQ,ler,ier,der,mF,z1e,cer,fer,bQ,mer,ger,her,gF,Q1e,per,_er,vQ,uer,ber,ver,hF,W1e,Fer,Ter,FQ,Mer,Eer,Cer,pF,H1e,wer,Aer,TQ,Ler,yer,xer,_F,U1e,$er,ker,MQ,Ser,Rer,Per,uF,J1e,Ber,Ier,EQ,Ner,qer,jer,bF,Der,Y1e,Ger,Oer,K1e,Ver,Xer,vF,WXe,hd,FF,Z1e,Ly,zer,e2e,Qer,HXe,Do,yy,Wer,pd,Her,CQ,Uer,Jer,wQ,Yer,Ker,Zer,xy,eor,o2e,oor,ror,tor,ut,$y,aor,r2e,nor,sor,_d,lor,t2e,ior,dor,AQ,cor,mor,gor,TF,hor,so,ky,por,a2e,_or,uor,za,bor,n2e,vor,For,s2e,Tor,Mor,l2e,Eor,Cor,wor,V,MF,i2e,Aor,Lor,LQ,yor,xor,$or,EF,d2e,kor,Sor,yQ,Ror,Por,Bor,CF,c2e,Ior,Nor,xQ,qor,jor,Dor,wF,f2e,Gor,Oor,$Q,Vor,Xor,zor,AF,m2e,Qor,Wor,kQ,Hor,Uor,Jor,LF,g2e,Yor,Kor,SQ,Zor,err,orr,yF,h2e,rrr,trr,RQ,arr,nrr,srr,xF,p2e,lrr,irr,PQ,drr,crr,frr,$F,_2e,mrr,grr,BQ,hrr,prr,_rr,kF,u2e,urr,brr,IQ,vrr,Frr,Trr,SF,b2e,Mrr,Err,NQ,Crr,wrr,Arr,RF,v2e,Lrr,yrr,qQ,xrr,$rr,krr,PF,F2e,Srr,Rrr,jQ,Prr,Brr,Irr,BF,T2e,Nrr,qrr,DQ,jrr,Drr,Grr,IF,M2e,Orr,Vrr,GQ,Xrr,zrr,Qrr,NF,E2e,Wrr,Hrr,OQ,Urr,Jrr,Yrr,qF,C2e,Krr,Zrr,VQ,etr,otr,rtr,jF,w2e,ttr,atr,XQ,ntr,str,ltr,DF,A2e,itr,dtr,zQ,ctr,ftr,mtr,GF,L2e,gtr,htr,QQ,ptr,_tr,utr,OF,y2e,btr,vtr,WQ,Ftr,Ttr,Mtr,VF,x2e,Etr,Ctr,HQ,wtr,Atr,Ltr,XF,$2e,ytr,xtr,UQ,$tr,ktr,Str,zF,k2e,Rtr,Ptr,JQ,Btr,Itr,Ntr,QF,S2e,qtr,jtr,YQ,Dtr,Gtr,Otr,WF,R2e,Vtr,Xtr,KQ,ztr,Qtr,Wtr,HF,P2e,Htr,Utr,ZQ,Jtr,Ytr,Ktr,UF,B2e,Ztr,ear,eW,oar,rar,tar,JF,I2e,aar,nar,oW,sar,lar,iar,YF,N2e,dar,car,rW,far,mar,gar,KF,q2e,har,par,tW,_ar,uar,bar,ZF,j2e,Far,Tar,aW,Mar,Ear,Car,e6,D2e,war,Aar,nW,Lar,yar,xar,o6,G2e,$ar,kar,sW,Sar,Rar,Par,r6,O2e,Bar,Iar,lW,Nar,qar,jar,t6,V2e,Dar,Gar,iW,Oar,Var,Xar,a6,X2e,zar,Qar,dW,War,Har,Uar,n6,z2e,Jar,Yar,cW,Kar,Zar,enr,s6,Q2e,onr,rnr,fW,tnr,anr,nnr,l6,W2e,snr,lnr,mW,inr,dnr,cnr,i6,H2e,fnr,mnr,gW,gnr,hnr,pnr,d6,U2e,_nr,unr,hW,bnr,vnr,Fnr,c6,Tnr,J2e,Mnr,Enr,Y2e,Cnr,wnr,f6,UXe,ud,m6,K2e,Sy,Anr,Z2e,Lnr,JXe,Go,Ry,ynr,bd,xnr,pW,$nr,knr,_W,Snr,Rnr,Pnr,Py,Bnr,e4e,Inr,Nnr,qnr,bt,By,jnr,o4e,Dnr,Gnr,vd,Onr,r4e,Vnr,Xnr,uW,znr,Qnr,Wnr,g6,Hnr,lo,Iy,Unr,t4e,Jnr,Ynr,Qa,Knr,a4e,Znr,esr,n4e,osr,rsr,s4e,tsr,asr,nsr,l4e,h6,i4e,ssr,lsr,bW,isr,dsr,csr,p6,fsr,d4e,msr,gsr,c4e,hsr,psr,_6,YXe,Fd,u6,f4e,Ny,_sr,m4e,usr,KXe,Oo,qy,bsr,Td,vsr,vW,Fsr,Tsr,FW,Msr,Esr,Csr,jy,wsr,g4e,Asr,Lsr,ysr,vt,Dy,xsr,h4e,$sr,ksr,Md,Ssr,p4e,Rsr,Psr,TW,Bsr,Isr,Nsr,b6,qsr,io,Gy,jsr,_4e,Dsr,Gsr,Wa,Osr,u4e,Vsr,Xsr,b4e,zsr,Qsr,v4e,Wsr,Hsr,Usr,_e,v6,F4e,Jsr,Ysr,MW,Ksr,Zsr,elr,F6,T4e,olr,rlr,EW,tlr,alr,nlr,T6,M4e,slr,llr,CW,ilr,dlr,clr,M6,E4e,flr,mlr,wW,glr,hlr,plr,Us,C4e,_lr,ulr,AW,blr,vlr,LW,Flr,Tlr,Mlr,E6,w4e,Elr,Clr,yW,wlr,Alr,Llr,Js,A4e,ylr,xlr,xW,$lr,klr,$W,Slr,Rlr,Plr,C6,L4e,Blr,Ilr,kW,Nlr,qlr,jlr,Ft,y4e,Dlr,Glr,SW,Olr,Vlr,RW,Xlr,zlr,PW,Qlr,Wlr,Hlr,w6,x4e,Ulr,Jlr,BW,Ylr,Klr,Zlr,A6,$4e,eir,oir,IW,rir,tir,air,L6,k4e,nir,sir,NW,lir,iir,dir,y6,S4e,cir,fir,qW,mir,gir,hir,x6,R4e,pir,_ir,jW,uir,bir,vir,$6,P4e,Fir,Tir,DW,Mir,Eir,Cir,k6,B4e,wir,Air,GW,Lir,yir,xir,S6,I4e,$ir,kir,OW,Sir,Rir,Pir,R6,Bir,N4e,Iir,Nir,q4e,qir,jir,P6,ZXe,Ed,B6,j4e,Oy,Dir,D4e,Gir,eze,Vo,Vy,Oir,Cd,Vir,VW,Xir,zir,XW,Qir,Wir,Hir,Xy,Uir,G4e,Jir,Yir,Kir,Tt,zy,Zir,O4e,edr,odr,wd,rdr,V4e,tdr,adr,zW,ndr,sdr,ldr,I6,idr,co,Qy,ddr,X4e,cdr,fdr,Ha,mdr,z4e,gdr,hdr,Q4e,pdr,_dr,W4e,udr,bdr,vdr,H4e,N6,U4e,Fdr,Tdr,QW,Mdr,Edr,Cdr,q6,wdr,J4e,Adr,Ldr,Y4e,ydr,xdr,j6,oze,Ad,D6,K4e,Wy,$dr,Z4e,kdr,rze,Xo,Hy,Sdr,Ld,Rdr,WW,Pdr,Bdr,HW,Idr,Ndr,qdr,Uy,jdr,ebe,Ddr,Gdr,Odr,Mt,Jy,Vdr,obe,Xdr,zdr,yd,Qdr,rbe,Wdr,Hdr,UW,Udr,Jdr,Ydr,G6,Kdr,fo,Yy,Zdr,tbe,ecr,ocr,Ua,rcr,abe,tcr,acr,nbe,ncr,scr,sbe,lcr,icr,dcr,lbe,O6,ibe,ccr,fcr,JW,mcr,gcr,hcr,V6,pcr,dbe,_cr,ucr,cbe,bcr,vcr,X6,tze,xd,z6,fbe,Ky,Fcr,mbe,Tcr,aze,zo,Zy,Mcr,$d,Ecr,YW,Ccr,wcr,KW,Acr,Lcr,ycr,e8,xcr,gbe,$cr,kcr,Scr,Et,o8,Rcr,hbe,Pcr,Bcr,kd,Icr,pbe,Ncr,qcr,ZW,jcr,Dcr,Gcr,Q6,Ocr,mo,r8,Vcr,_be,Xcr,zcr,Ja,Qcr,ube,Wcr,Hcr,bbe,Ucr,Jcr,vbe,Ycr,Kcr,Zcr,Pe,W6,Fbe,efr,ofr,eH,rfr,tfr,afr,H6,Tbe,nfr,sfr,oH,lfr,ifr,dfr,U6,Mbe,cfr,ffr,rH,mfr,gfr,hfr,J6,Ebe,pfr,_fr,tH,ufr,bfr,vfr,Y6,Cbe,Ffr,Tfr,aH,Mfr,Efr,Cfr,K6,wbe,wfr,Afr,nH,Lfr,yfr,xfr,Z6,Abe,$fr,kfr,sH,Sfr,Rfr,Pfr,eT,Lbe,Bfr,Ifr,lH,Nfr,qfr,jfr,oT,ybe,Dfr,Gfr,iH,Ofr,Vfr,Xfr,rT,zfr,xbe,Qfr,Wfr,$be,Hfr,Ufr,tT,nze,Sd,aT,kbe,t8,Jfr,Sbe,Yfr,sze,Qo,a8,Kfr,Rd,Zfr,dH,emr,omr,cH,rmr,tmr,amr,n8,nmr,Rbe,smr,lmr,imr,Ct,s8,dmr,Pbe,cmr,fmr,Pd,mmr,Bbe,gmr,hmr,fH,pmr,_mr,umr,nT,bmr,go,l8,vmr,Ibe,Fmr,Tmr,Ya,Mmr,Nbe,Emr,Cmr,qbe,wmr,Amr,jbe,Lmr,ymr,xmr,rt,sT,Dbe,$mr,kmr,mH,Smr,Rmr,Pmr,lT,Gbe,Bmr,Imr,gH,Nmr,qmr,jmr,iT,Obe,Dmr,Gmr,hH,Omr,Vmr,Xmr,dT,Vbe,zmr,Qmr,pH,Wmr,Hmr,Umr,cT,Xbe,Jmr,Ymr,_H,Kmr,Zmr,egr,fT,ogr,zbe,rgr,tgr,Qbe,agr,ngr,mT,lze,Bd,gT,Wbe,i8,sgr,Hbe,lgr,ize,Wo,d8,igr,Id,dgr,uH,cgr,fgr,bH,mgr,ggr,hgr,c8,pgr,Ube,_gr,ugr,bgr,wt,f8,vgr,Jbe,Fgr,Tgr,Nd,Mgr,Ybe,Egr,Cgr,vH,wgr,Agr,Lgr,hT,ygr,ho,m8,xgr,Kbe,$gr,kgr,Ka,Sgr,Zbe,Rgr,Pgr,eve,Bgr,Igr,ove,Ngr,qgr,jgr,Le,pT,rve,Dgr,Ggr,FH,Ogr,Vgr,Xgr,_T,tve,zgr,Qgr,TH,Wgr,Hgr,Ugr,uT,ave,Jgr,Ygr,MH,Kgr,Zgr,ehr,bT,nve,ohr,rhr,EH,thr,ahr,nhr,vT,sve,shr,lhr,CH,ihr,dhr,chr,FT,lve,fhr,mhr,wH,ghr,hhr,phr,TT,ive,_hr,uhr,AH,bhr,vhr,Fhr,MT,dve,Thr,Mhr,LH,Ehr,Chr,whr,ET,cve,Ahr,Lhr,yH,yhr,xhr,$hr,CT,fve,khr,Shr,xH,Rhr,Phr,Bhr,wT,Ihr,mve,Nhr,qhr,gve,jhr,Dhr,AT,dze,qd,LT,hve,g8,Ghr,pve,Ohr,cze,Ho,h8,Vhr,jd,Xhr,$H,zhr,Qhr,kH,Whr,Hhr,Uhr,p8,Jhr,_ve,Yhr,Khr,Zhr,At,_8,epr,uve,opr,rpr,Dd,tpr,bve,apr,npr,SH,spr,lpr,ipr,yT,dpr,po,u8,cpr,vve,fpr,mpr,Za,gpr,Fve,hpr,ppr,Tve,_pr,upr,Mve,bpr,vpr,Fpr,b8,xT,Eve,Tpr,Mpr,RH,Epr,Cpr,wpr,$T,Cve,Apr,Lpr,PH,ypr,xpr,$pr,kT,kpr,wve,Spr,Rpr,Ave,Ppr,Bpr,ST,fze,Gd,RT,Lve,v8,Ipr,yve,Npr,mze,Uo,F8,qpr,Od,jpr,BH,Dpr,Gpr,IH,Opr,Vpr,Xpr,T8,zpr,xve,Qpr,Wpr,Hpr,Lt,M8,Upr,$ve,Jpr,Ypr,Vd,Kpr,kve,Zpr,e_r,NH,o_r,r_r,t_r,PT,a_r,_o,E8,n_r,Sve,s_r,l_r,en,i_r,Rve,d_r,c_r,Pve,f_r,m_r,Bve,g_r,h_r,p_r,tt,BT,Ive,__r,u_r,qH,b_r,v_r,F_r,IT,Nve,T_r,M_r,jH,E_r,C_r,w_r,NT,qve,A_r,L_r,DH,y_r,x_r,$_r,qT,jve,k_r,S_r,GH,R_r,P_r,B_r,jT,Dve,I_r,N_r,OH,q_r,j_r,D_r,DT,G_r,Gve,O_r,V_r,Ove,X_r,z_r,GT,gze,Xd,OT,Vve,C8,Q_r,Xve,W_r,hze,Jo,w8,H_r,zd,U_r,VH,J_r,Y_r,XH,K_r,Z_r,eur,A8,our,zve,rur,tur,aur,yt,L8,nur,Qve,sur,lur,Qd,iur,Wve,dur,cur,zH,fur,mur,gur,VT,hur,uo,y8,pur,Hve,_ur,uur,on,bur,Uve,vur,Fur,Jve,Tur,Mur,Yve,Eur,Cur,wur,rn,XT,Kve,Aur,Lur,QH,yur,xur,$ur,zT,Zve,kur,Sur,WH,Rur,Pur,Bur,QT,eFe,Iur,Nur,HH,qur,jur,Dur,WT,oFe,Gur,Our,UH,Vur,Xur,zur,HT,Qur,rFe,Wur,Hur,tFe,Uur,Jur,UT,pze,Wd,JT,aFe,x8,Yur,nFe,Kur,_ze,Yo,$8,Zur,Hd,e1r,JH,o1r,r1r,YH,t1r,a1r,n1r,k8,s1r,sFe,l1r,i1r,d1r,xt,S8,c1r,lFe,f1r,m1r,Ud,g1r,iFe,h1r,p1r,KH,_1r,u1r,b1r,YT,v1r,bo,R8,F1r,dFe,T1r,M1r,tn,E1r,cFe,C1r,w1r,fFe,A1r,L1r,mFe,y1r,x1r,$1r,P8,KT,gFe,k1r,S1r,ZH,R1r,P1r,B1r,ZT,hFe,I1r,N1r,eU,q1r,j1r,D1r,e7,G1r,pFe,O1r,V1r,_Fe,X1r,z1r,o7,uze,Jd,r7,uFe,B8,Q1r,bFe,W1r,bze,Ko,I8,H1r,Yd,U1r,oU,J1r,Y1r,rU,K1r,Z1r,e2r,N8,o2r,vFe,r2r,t2r,a2r,$t,q8,n2r,FFe,s2r,l2r,Kd,i2r,TFe,d2r,c2r,tU,f2r,m2r,g2r,t7,h2r,vo,j8,p2r,MFe,_2r,u2r,an,b2r,EFe,v2r,F2r,CFe,T2r,M2r,wFe,E2r,C2r,w2r,AFe,a7,LFe,A2r,L2r,aU,y2r,x2r,$2r,n7,k2r,yFe,S2r,R2r,xFe,P2r,B2r,s7,vze,Zd,l7,$Fe,D8,I2r,kFe,N2r,Fze,Zo,G8,q2r,ec,j2r,nU,D2r,G2r,sU,O2r,V2r,X2r,O8,z2r,SFe,Q2r,W2r,H2r,kt,V8,U2r,RFe,J2r,Y2r,oc,K2r,PFe,Z2r,e4r,lU,o4r,r4r,t4r,i7,a4r,Fo,X8,n4r,BFe,s4r,l4r,nn,i4r,IFe,d4r,c4r,NFe,f4r,m4r,qFe,g4r,h4r,p4r,at,d7,jFe,_4r,u4r,iU,b4r,v4r,F4r,c7,DFe,T4r,M4r,dU,E4r,C4r,w4r,f7,GFe,A4r,L4r,cU,y4r,x4r,$4r,m7,OFe,k4r,S4r,fU,R4r,P4r,B4r,g7,VFe,I4r,N4r,mU,q4r,j4r,D4r,h7,G4r,XFe,O4r,V4r,zFe,X4r,z4r,p7,Tze,rc,_7,QFe,z8,Q4r,WFe,W4r,Mze,er,Q8,H4r,tc,U4r,gU,J4r,Y4r,hU,K4r,Z4r,ebr,W8,obr,HFe,rbr,tbr,abr,St,H8,nbr,UFe,sbr,lbr,ac,ibr,JFe,dbr,cbr,pU,fbr,mbr,gbr,u7,hbr,To,U8,pbr,YFe,_br,ubr,sn,bbr,KFe,vbr,Fbr,ZFe,Tbr,Mbr,e6e,Ebr,Cbr,wbr,o6e,b7,r6e,Abr,Lbr,_U,ybr,xbr,$br,v7,kbr,t6e,Sbr,Rbr,a6e,Pbr,Bbr,F7,Eze,nc,T7,n6e,J8,Ibr,s6e,Nbr,Cze,or,Y8,qbr,sc,jbr,uU,Dbr,Gbr,bU,Obr,Vbr,Xbr,K8,zbr,l6e,Qbr,Wbr,Hbr,Rt,Z8,Ubr,i6e,Jbr,Ybr,lc,Kbr,d6e,Zbr,evr,vU,ovr,rvr,tvr,M7,avr,xr,ex,nvr,c6e,svr,lvr,ln,ivr,f6e,dvr,cvr,m6e,fvr,mvr,g6e,gvr,hvr,pvr,q,E7,h6e,_vr,uvr,FU,bvr,vvr,Fvr,C7,p6e,Tvr,Mvr,TU,Evr,Cvr,wvr,w7,_6e,Avr,Lvr,MU,yvr,xvr,$vr,A7,u6e,kvr,Svr,EU,Rvr,Pvr,Bvr,L7,b6e,Ivr,Nvr,CU,qvr,jvr,Dvr,y7,v6e,Gvr,Ovr,wU,Vvr,Xvr,zvr,x7,F6e,Qvr,Wvr,AU,Hvr,Uvr,Jvr,$7,T6e,Yvr,Kvr,LU,Zvr,eFr,oFr,k7,M6e,rFr,tFr,yU,aFr,nFr,sFr,S7,E6e,lFr,iFr,xU,dFr,cFr,fFr,R7,C6e,mFr,gFr,$U,hFr,pFr,_Fr,P7,w6e,uFr,bFr,kU,vFr,FFr,TFr,B7,A6e,MFr,EFr,SU,CFr,wFr,AFr,I7,L6e,LFr,yFr,RU,xFr,$Fr,kFr,N7,y6e,SFr,RFr,PU,PFr,BFr,IFr,q7,x6e,NFr,qFr,BU,jFr,DFr,GFr,j7,$6e,OFr,VFr,IU,XFr,zFr,QFr,Ys,k6e,WFr,HFr,NU,UFr,JFr,qU,YFr,KFr,ZFr,D7,S6e,e6r,o6r,jU,r6r,t6r,a6r,G7,R6e,n6r,s6r,DU,l6r,i6r,d6r,O7,P6e,c6r,f6r,GU,m6r,g6r,h6r,V7,B6e,p6r,_6r,OU,u6r,b6r,v6r,X7,I6e,F6r,T6r,VU,M6r,E6r,C6r,z7,N6e,w6r,A6r,XU,L6r,y6r,x6r,Q7,q6e,$6r,k6r,zU,S6r,R6r,P6r,W7,j6e,B6r,I6r,QU,N6r,q6r,j6r,H7,D6e,D6r,G6r,WU,O6r,V6r,X6r,U7,G6e,z6r,Q6r,HU,W6r,H6r,U6r,J7,O6e,J6r,Y6r,UU,K6r,Z6r,eTr,Y7,V6e,oTr,rTr,JU,tTr,aTr,nTr,K7,X6e,sTr,lTr,YU,iTr,dTr,cTr,Z7,z6e,fTr,mTr,KU,gTr,hTr,pTr,e9,Q6e,_Tr,uTr,ZU,bTr,vTr,FTr,o9,W6e,TTr,MTr,eJ,ETr,CTr,wTr,r9,H6e,ATr,LTr,oJ,yTr,xTr,$Tr,t9,U6e,kTr,STr,rJ,RTr,PTr,BTr,a9,J6e,ITr,NTr,tJ,qTr,jTr,DTr,n9,Y6e,GTr,OTr,aJ,VTr,XTr,zTr,s9,K6e,QTr,WTr,nJ,HTr,UTr,JTr,l9,Z6e,YTr,KTr,sJ,ZTr,e7r,o7r,i9,eTe,r7r,t7r,lJ,a7r,n7r,s7r,d9,oTe,l7r,i7r,iJ,d7r,c7r,f7r,c9,rTe,m7r,g7r,dJ,h7r,p7r,_7r,f9,tTe,u7r,b7r,cJ,v7r,F7r,T7r,m9,aTe,M7r,E7r,fJ,C7r,w7r,A7r,g9,nTe,L7r,y7r,mJ,x7r,$7r,k7r,h9,sTe,S7r,R7r,gJ,P7r,B7r,I7r,p9,lTe,N7r,q7r,hJ,j7r,D7r,G7r,_9,iTe,O7r,V7r,pJ,X7r,z7r,Q7r,u9,dTe,W7r,H7r,_J,U7r,J7r,Y7r,b9,wze,ic,v9,cTe,ox,K7r,fTe,Z7r,Aze,rr,rx,e9r,dc,o9r,uJ,r9r,t9r,bJ,a9r,n9r,s9r,tx,l9r,mTe,i9r,d9r,c9r,Pt,ax,f9r,gTe,m9r,g9r,cc,h9r,hTe,p9r,_9r,vJ,u9r,b9r,v9r,F9,F9r,$r,nx,T9r,pTe,M9r,E9r,dn,C9r,_Te,w9r,A9r,uTe,L9r,y9r,bTe,x9r,$9r,k9r,se,T9,vTe,S9r,R9r,FJ,P9r,B9r,I9r,M9,FTe,N9r,q9r,TJ,j9r,D9r,G9r,E9,TTe,O9r,V9r,MJ,X9r,z9r,Q9r,C9,MTe,W9r,H9r,EJ,U9r,J9r,Y9r,w9,ETe,K9r,Z9r,CJ,eMr,oMr,rMr,A9,CTe,tMr,aMr,wJ,nMr,sMr,lMr,L9,wTe,iMr,dMr,AJ,cMr,fMr,mMr,y9,ATe,gMr,hMr,LJ,pMr,_Mr,uMr,x9,LTe,bMr,vMr,yJ,FMr,TMr,MMr,$9,yTe,EMr,CMr,xJ,wMr,AMr,LMr,k9,xTe,yMr,xMr,$J,$Mr,kMr,SMr,S9,$Te,RMr,PMr,kJ,BMr,IMr,NMr,R9,kTe,qMr,jMr,SJ,DMr,GMr,OMr,P9,STe,VMr,XMr,RJ,zMr,QMr,WMr,B9,RTe,HMr,UMr,PJ,JMr,YMr,KMr,I9,PTe,ZMr,eEr,BJ,oEr,rEr,tEr,N9,BTe,aEr,nEr,IJ,sEr,lEr,iEr,q9,ITe,dEr,cEr,NJ,fEr,mEr,gEr,j9,NTe,hEr,pEr,qJ,_Er,uEr,bEr,D9,qTe,vEr,FEr,jJ,TEr,MEr,EEr,G9,jTe,CEr,wEr,DJ,AEr,LEr,yEr,O9,DTe,xEr,$Er,GJ,kEr,SEr,REr,V9,GTe,PEr,BEr,OJ,IEr,NEr,qEr,X9,Lze,fc,z9,OTe,sx,jEr,VTe,DEr,yze,tr,lx,GEr,mc,OEr,VJ,VEr,XEr,XJ,zEr,QEr,WEr,ix,HEr,XTe,UEr,JEr,YEr,Bt,dx,KEr,zTe,ZEr,eCr,gc,oCr,QTe,rCr,tCr,zJ,aCr,nCr,sCr,Q9,lCr,kr,cx,iCr,WTe,dCr,cCr,cn,fCr,HTe,mCr,gCr,UTe,hCr,pCr,JTe,_Cr,uCr,bCr,Me,W9,YTe,vCr,FCr,QJ,TCr,MCr,ECr,H9,KTe,CCr,wCr,WJ,ACr,LCr,yCr,U9,ZTe,xCr,$Cr,HJ,kCr,SCr,RCr,J9,e7e,PCr,BCr,UJ,ICr,NCr,qCr,Y9,o7e,jCr,DCr,JJ,GCr,OCr,VCr,K9,r7e,XCr,zCr,YJ,QCr,WCr,HCr,Z9,t7e,UCr,JCr,KJ,YCr,KCr,ZCr,eM,a7e,e3r,o3r,ZJ,r3r,t3r,a3r,oM,n7e,n3r,s3r,eY,l3r,i3r,d3r,rM,s7e,c3r,f3r,oY,m3r,g3r,h3r,tM,l7e,p3r,_3r,rY,u3r,b3r,v3r,aM,i7e,F3r,T3r,tY,M3r,E3r,C3r,nM,d7e,w3r,A3r,aY,L3r,y3r,x3r,sM,xze,hc,lM,c7e,fx,$3r,f7e,k3r,$ze,ar,mx,S3r,pc,R3r,nY,P3r,B3r,sY,I3r,N3r,q3r,gx,j3r,m7e,D3r,G3r,O3r,It,hx,V3r,g7e,X3r,z3r,_c,Q3r,h7e,W3r,H3r,lY,U3r,J3r,Y3r,iM,K3r,Sr,px,Z3r,p7e,e5r,o5r,fn,r5r,_7e,t5r,a5r,u7e,n5r,s5r,b7e,l5r,i5r,d5r,Qe,dM,v7e,c5r,f5r,iY,m5r,g5r,h5r,cM,F7e,p5r,_5r,dY,u5r,b5r,v5r,fM,T7e,F5r,T5r,cY,M5r,E5r,C5r,mM,M7e,w5r,A5r,fY,L5r,y5r,x5r,gM,E7e,$5r,k5r,mY,S5r,R5r,P5r,hM,C7e,B5r,I5r,gY,N5r,q5r,j5r,pM,w7e,D5r,G5r,hY,O5r,V5r,X5r,_M,kze,uc,uM,A7e,_x,z5r,L7e,Q5r,Sze,nr,ux,W5r,bc,H5r,pY,U5r,J5r,_Y,Y5r,K5r,Z5r,bx,e0r,y7e,o0r,r0r,t0r,Nt,vx,a0r,x7e,n0r,s0r,vc,l0r,$7e,i0r,d0r,uY,c0r,f0r,m0r,bM,g0r,Rr,Fx,h0r,k7e,p0r,_0r,mn,u0r,S7e,b0r,v0r,R7e,F0r,T0r,P7e,M0r,E0r,C0r,ie,vM,B7e,w0r,A0r,bY,L0r,y0r,x0r,FM,I7e,$0r,k0r,vY,S0r,R0r,P0r,TM,N7e,B0r,I0r,FY,N0r,q0r,j0r,MM,q7e,D0r,G0r,TY,O0r,V0r,X0r,EM,j7e,z0r,Q0r,MY,W0r,H0r,U0r,CM,D7e,J0r,Y0r,EY,K0r,Z0r,ewr,wM,G7e,owr,rwr,CY,twr,awr,nwr,AM,O7e,swr,lwr,wY,iwr,dwr,cwr,LM,V7e,fwr,mwr,AY,gwr,hwr,pwr,yM,X7e,_wr,uwr,LY,bwr,vwr,Fwr,xM,z7e,Twr,Mwr,yY,Ewr,Cwr,wwr,$M,Q7e,Awr,Lwr,xY,ywr,xwr,$wr,kM,W7e,kwr,Swr,$Y,Rwr,Pwr,Bwr,SM,H7e,Iwr,Nwr,kY,qwr,jwr,Dwr,RM,U7e,Gwr,Owr,SY,Vwr,Xwr,zwr,PM,J7e,Qwr,Wwr,RY,Hwr,Uwr,Jwr,BM,Y7e,Ywr,Kwr,PY,Zwr,eAr,oAr,IM,K7e,rAr,tAr,BY,aAr,nAr,sAr,NM,Z7e,lAr,iAr,IY,dAr,cAr,fAr,qM,e9e,mAr,gAr,NY,hAr,pAr,_Ar,jM,Rze,Fc,DM,o9e,Tx,uAr,r9e,bAr,Pze,sr,Mx,vAr,Tc,FAr,qY,TAr,MAr,jY,EAr,CAr,wAr,Ex,AAr,t9e,LAr,yAr,xAr,qt,Cx,$Ar,a9e,kAr,SAr,Mc,RAr,n9e,PAr,BAr,DY,IAr,NAr,qAr,GM,jAr,Pr,wx,DAr,s9e,GAr,OAr,gn,VAr,l9e,XAr,zAr,i9e,QAr,WAr,d9e,HAr,UAr,JAr,ye,OM,c9e,YAr,KAr,GY,ZAr,eLr,oLr,VM,f9e,rLr,tLr,OY,aLr,nLr,sLr,XM,m9e,lLr,iLr,VY,dLr,cLr,fLr,zM,g9e,mLr,gLr,XY,hLr,pLr,_Lr,QM,h9e,uLr,bLr,zY,vLr,FLr,TLr,WM,p9e,MLr,ELr,QY,CLr,wLr,ALr,HM,_9e,LLr,yLr,WY,xLr,$Lr,kLr,UM,u9e,SLr,RLr,HY,PLr,BLr,ILr,JM,b9e,NLr,qLr,UY,jLr,DLr,GLr,YM,v9e,OLr,VLr,JY,XLr,zLr,QLr,KM,Bze,Ec,ZM,F9e,Ax,WLr,T9e,HLr,Ize,lr,Lx,ULr,Cc,JLr,YY,YLr,KLr,KY,ZLr,eyr,oyr,yx,ryr,M9e,tyr,ayr,nyr,jt,xx,syr,E9e,lyr,iyr,wc,dyr,C9e,cyr,fyr,ZY,myr,gyr,hyr,eE,pyr,Br,$x,_yr,w9e,uyr,byr,hn,vyr,A9e,Fyr,Tyr,L9e,Myr,Eyr,y9e,Cyr,wyr,Ayr,te,oE,x9e,Lyr,yyr,eK,xyr,$yr,kyr,rE,$9e,Syr,Ryr,oK,Pyr,Byr,Iyr,tE,k9e,Nyr,qyr,rK,jyr,Dyr,Gyr,aE,S9e,Oyr,Vyr,tK,Xyr,zyr,Qyr,nE,R9e,Wyr,Hyr,aK,Uyr,Jyr,Yyr,sE,P9e,Kyr,Zyr,nK,e8r,o8r,r8r,lE,B9e,t8r,a8r,sK,n8r,s8r,l8r,iE,I9e,i8r,d8r,lK,c8r,f8r,m8r,dE,N9e,g8r,h8r,iK,p8r,_8r,u8r,cE,q9e,b8r,v8r,dK,F8r,T8r,M8r,fE,j9e,E8r,C8r,cK,w8r,A8r,L8r,mE,D9e,y8r,x8r,fK,$8r,k8r,S8r,gE,G9e,R8r,P8r,mK,B8r,I8r,N8r,hE,O9e,q8r,j8r,gK,D8r,G8r,O8r,pE,V9e,V8r,X8r,hK,z8r,Q8r,W8r,_E,X9e,H8r,U8r,pK,J8r,Y8r,K8r,uE,z9e,Z8r,exr,_K,oxr,rxr,txr,bE,Q9e,axr,nxr,uK,sxr,lxr,ixr,vE,W9e,dxr,cxr,bK,fxr,mxr,gxr,FE,H9e,hxr,pxr,vK,_xr,uxr,bxr,TE,U9e,vxr,Fxr,FK,Txr,Mxr,Exr,ME,J9e,Cxr,wxr,TK,Axr,Lxr,yxr,EE,Y9e,xxr,$xr,MK,kxr,Sxr,Rxr,CE,K9e,Pxr,Bxr,EK,Ixr,Nxr,qxr,wE,Z9e,jxr,Dxr,CK,Gxr,Oxr,Vxr,AE,eMe,Xxr,zxr,wK,Qxr,Wxr,Hxr,LE,Nze,Ac,yE,oMe,kx,Uxr,rMe,Jxr,qze,ir,Sx,Yxr,Lc,Kxr,AK,Zxr,e$r,LK,o$r,r$r,t$r,Rx,a$r,tMe,n$r,s$r,l$r,Dt,Px,i$r,aMe,d$r,c$r,yc,f$r,nMe,m$r,g$r,yK,h$r,p$r,_$r,xE,u$r,Ir,Bx,b$r,sMe,v$r,F$r,pn,T$r,lMe,M$r,E$r,iMe,C$r,w$r,dMe,A$r,L$r,y$r,ue,$E,cMe,x$r,$$r,xK,k$r,S$r,R$r,kE,fMe,P$r,B$r,$K,I$r,N$r,q$r,SE,mMe,j$r,D$r,kK,G$r,O$r,V$r,RE,gMe,X$r,z$r,SK,Q$r,W$r,H$r,PE,hMe,U$r,J$r,RK,Y$r,K$r,Z$r,BE,pMe,ekr,okr,PK,rkr,tkr,akr,IE,_Me,nkr,skr,BK,lkr,ikr,dkr,NE,uMe,ckr,fkr,IK,mkr,gkr,hkr,qE,bMe,pkr,_kr,NK,ukr,bkr,vkr,jE,vMe,Fkr,Tkr,qK,Mkr,Ekr,Ckr,DE,FMe,wkr,Akr,jK,Lkr,ykr,xkr,GE,TMe,$kr,kkr,DK,Skr,Rkr,Pkr,OE,MMe,Bkr,Ikr,GK,Nkr,qkr,jkr,VE,EMe,Dkr,Gkr,OK,Okr,Vkr,Xkr,XE,CMe,zkr,Qkr,VK,Wkr,Hkr,Ukr,zE,wMe,Jkr,Ykr,XK,Kkr,Zkr,eSr,QE,AMe,oSr,rSr,zK,tSr,aSr,nSr,WE,jze,xc,HE,LMe,Ix,sSr,yMe,lSr,Dze,dr,Nx,iSr,$c,dSr,QK,cSr,fSr,WK,mSr,gSr,hSr,qx,pSr,xMe,_Sr,uSr,bSr,Gt,jx,vSr,$Me,FSr,TSr,kc,MSr,kMe,ESr,CSr,HK,wSr,ASr,LSr,UE,ySr,Nr,Dx,xSr,SMe,$Sr,kSr,_n,SSr,RMe,RSr,PSr,PMe,BSr,ISr,BMe,NSr,qSr,jSr,Gx,JE,IMe,DSr,GSr,UK,OSr,VSr,XSr,YE,NMe,zSr,QSr,JK,WSr,HSr,USr,KE,Gze,Sc,ZE,qMe,Ox,JSr,jMe,YSr,Oze,cr,Vx,KSr,Rc,ZSr,YK,eRr,oRr,KK,rRr,tRr,aRr,Xx,nRr,DMe,sRr,lRr,iRr,Ot,zx,dRr,GMe,cRr,fRr,Pc,mRr,OMe,gRr,hRr,ZK,pRr,_Rr,uRr,eC,bRr,qr,Qx,vRr,VMe,FRr,TRr,un,MRr,XMe,ERr,CRr,zMe,wRr,ARr,QMe,LRr,yRr,xRr,WMe,oC,HMe,$Rr,kRr,eZ,SRr,RRr,PRr,rC,Vze,Bc,tC,UMe,Wx,BRr,JMe,IRr,Xze,fr,Hx,NRr,Ic,qRr,oZ,jRr,DRr,rZ,GRr,ORr,VRr,Ux,XRr,YMe,zRr,QRr,WRr,Vt,Jx,HRr,KMe,URr,JRr,Nc,YRr,ZMe,KRr,ZRr,tZ,ePr,oPr,rPr,aC,tPr,jr,Yx,aPr,eEe,nPr,sPr,bn,lPr,oEe,iPr,dPr,rEe,cPr,fPr,tEe,mPr,gPr,hPr,de,nC,aEe,pPr,_Pr,aZ,uPr,bPr,vPr,sC,nEe,FPr,TPr,nZ,MPr,EPr,CPr,lC,sEe,wPr,APr,sZ,LPr,yPr,xPr,iC,lEe,$Pr,kPr,lZ,SPr,RPr,PPr,dC,iEe,BPr,IPr,iZ,NPr,qPr,jPr,cC,dEe,DPr,GPr,dZ,OPr,VPr,XPr,fC,cEe,zPr,QPr,cZ,WPr,HPr,UPr,mC,fEe,JPr,YPr,fZ,KPr,ZPr,eBr,gC,mEe,oBr,rBr,mZ,tBr,aBr,nBr,hC,gEe,sBr,lBr,gZ,iBr,dBr,cBr,pC,hEe,fBr,mBr,hZ,gBr,hBr,pBr,_C,pEe,_Br,uBr,pZ,bBr,vBr,FBr,uC,_Ee,TBr,MBr,_Z,EBr,CBr,wBr,bC,uEe,ABr,LBr,uZ,yBr,xBr,$Br,vC,bEe,kBr,SBr,bZ,RBr,PBr,BBr,FC,vEe,IBr,NBr,vZ,qBr,jBr,DBr,TC,FEe,GBr,OBr,FZ,VBr,XBr,zBr,MC,TEe,QBr,WBr,TZ,HBr,UBr,JBr,EC,MEe,YBr,KBr,MZ,ZBr,eIr,oIr,CC,EEe,rIr,tIr,EZ,aIr,nIr,sIr,wC,zze,qc,AC,CEe,Kx,lIr,wEe,iIr,Qze,mr,Zx,dIr,jc,cIr,CZ,fIr,mIr,wZ,gIr,hIr,pIr,e$,_Ir,AEe,uIr,bIr,vIr,Xt,o$,FIr,LEe,TIr,MIr,Dc,EIr,yEe,CIr,wIr,AZ,AIr,LIr,yIr,LC,xIr,Dr,r$,$Ir,xEe,kIr,SIr,vn,RIr,$Ee,PIr,BIr,kEe,IIr,NIr,SEe,qIr,jIr,DIr,ce,yC,REe,GIr,OIr,LZ,VIr,XIr,zIr,xC,PEe,QIr,WIr,yZ,HIr,UIr,JIr,$C,BEe,YIr,KIr,xZ,ZIr,eNr,oNr,kC,IEe,rNr,tNr,$Z,aNr,nNr,sNr,SC,NEe,lNr,iNr,kZ,dNr,cNr,fNr,RC,qEe,mNr,gNr,SZ,hNr,pNr,_Nr,PC,jEe,uNr,bNr,RZ,vNr,FNr,TNr,BC,DEe,MNr,ENr,PZ,CNr,wNr,ANr,IC,GEe,LNr,yNr,BZ,xNr,$Nr,kNr,NC,OEe,SNr,RNr,IZ,PNr,BNr,INr,qC,VEe,NNr,qNr,NZ,jNr,DNr,GNr,jC,XEe,ONr,VNr,qZ,XNr,zNr,QNr,DC,zEe,WNr,HNr,jZ,UNr,JNr,YNr,GC,QEe,KNr,ZNr,DZ,eqr,oqr,rqr,OC,WEe,tqr,aqr,GZ,nqr,sqr,lqr,VC,HEe,iqr,dqr,OZ,cqr,fqr,mqr,XC,UEe,gqr,hqr,VZ,pqr,_qr,uqr,zC,JEe,bqr,vqr,XZ,Fqr,Tqr,Mqr,QC,YEe,Eqr,Cqr,zZ,wqr,Aqr,Lqr,WC,KEe,yqr,xqr,QZ,$qr,kqr,Sqr,HC,Wze,Gc,UC,ZEe,t$,Rqr,eCe,Pqr,Hze,gr,a$,Bqr,Oc,Iqr,WZ,Nqr,qqr,HZ,jqr,Dqr,Gqr,n$,Oqr,oCe,Vqr,Xqr,zqr,zt,s$,Qqr,rCe,Wqr,Hqr,Vc,Uqr,tCe,Jqr,Yqr,UZ,Kqr,Zqr,ejr,JC,ojr,Gr,l$,rjr,aCe,tjr,ajr,Fn,njr,nCe,sjr,ljr,sCe,ijr,djr,lCe,cjr,fjr,mjr,iCe,YC,dCe,gjr,hjr,JZ,pjr,_jr,ujr,KC,Uze,Xc,ZC,cCe,i$,bjr,fCe,vjr,Jze,hr,d$,Fjr,zc,Tjr,YZ,Mjr,Ejr,KZ,Cjr,wjr,Ajr,c$,Ljr,mCe,yjr,xjr,$jr,Qt,f$,kjr,gCe,Sjr,Rjr,Qc,Pjr,hCe,Bjr,Ijr,ZZ,Njr,qjr,jjr,e3,Djr,Or,m$,Gjr,pCe,Ojr,Vjr,Tn,Xjr,_Ce,zjr,Qjr,uCe,Wjr,Hjr,bCe,Ujr,Jjr,Yjr,vCe,o3,FCe,Kjr,Zjr,eee,eDr,oDr,rDr,r3,Yze,Wc,t3,TCe,g$,tDr,MCe,aDr,Kze,pr,h$,nDr,Hc,sDr,oee,lDr,iDr,ree,dDr,cDr,fDr,p$,mDr,ECe,gDr,hDr,pDr,Wt,_$,_Dr,CCe,uDr,bDr,Uc,vDr,wCe,FDr,TDr,tee,MDr,EDr,CDr,a3,wDr,Vr,u$,ADr,ACe,LDr,yDr,Mn,xDr,LCe,$Dr,kDr,yCe,SDr,RDr,xCe,PDr,BDr,IDr,oe,n3,$Ce,NDr,qDr,aee,jDr,DDr,GDr,s3,kCe,ODr,VDr,nee,XDr,zDr,QDr,l3,SCe,WDr,HDr,see,UDr,JDr,YDr,i3,RCe,KDr,ZDr,lee,eGr,oGr,rGr,d3,PCe,tGr,aGr,iee,nGr,sGr,lGr,c3,BCe,iGr,dGr,dee,cGr,fGr,mGr,f3,ICe,gGr,hGr,cee,pGr,_Gr,uGr,m3,NCe,bGr,vGr,fee,FGr,TGr,MGr,g3,qCe,EGr,CGr,mee,wGr,AGr,LGr,h3,jCe,yGr,xGr,gee,$Gr,kGr,SGr,p3,DCe,RGr,PGr,hee,BGr,IGr,NGr,_3,GCe,qGr,jGr,pee,DGr,GGr,OGr,u3,OCe,VGr,XGr,_ee,zGr,QGr,WGr,b3,VCe,HGr,UGr,uee,JGr,YGr,KGr,v3,XCe,ZGr,eOr,bee,oOr,rOr,tOr,F3,zCe,aOr,nOr,vee,sOr,lOr,iOr,T3,QCe,dOr,cOr,Fee,fOr,mOr,gOr,M3,WCe,hOr,pOr,Tee,_Or,uOr,bOr,E3,HCe,vOr,FOr,Mee,TOr,MOr,EOr,C3,UCe,COr,wOr,Eee,AOr,LOr,yOr,w3,JCe,xOr,$Or,Cee,kOr,SOr,ROr,A3,YCe,POr,BOr,wee,IOr,NOr,qOr,L3,KCe,jOr,DOr,Aee,GOr,OOr,VOr,y3,ZCe,XOr,zOr,Lee,QOr,WOr,HOr,x3,e3e,UOr,JOr,yee,YOr,KOr,ZOr,$3,o3e,eVr,oVr,xee,rVr,tVr,aVr,k3,r3e,nVr,sVr,$ee,lVr,iVr,dVr,S3,Zze,Jc,R3,t3e,b$,cVr,a3e,fVr,eQe,_r,v$,mVr,Yc,gVr,kee,hVr,pVr,See,_Vr,uVr,bVr,F$,vVr,n3e,FVr,TVr,MVr,Ht,T$,EVr,s3e,CVr,wVr,Kc,AVr,l3e,LVr,yVr,Ree,xVr,$Vr,kVr,P3,SVr,Xr,M$,RVr,i3e,PVr,BVr,En,IVr,d3e,NVr,qVr,c3e,jVr,DVr,f3e,GVr,OVr,VVr,xe,B3,m3e,XVr,zVr,Pee,QVr,WVr,HVr,I3,g3e,UVr,JVr,Bee,YVr,KVr,ZVr,N3,h3e,eXr,oXr,Iee,rXr,tXr,aXr,q3,p3e,nXr,sXr,Nee,lXr,iXr,dXr,j3,_3e,cXr,fXr,qee,mXr,gXr,hXr,D3,u3e,pXr,_Xr,jee,uXr,bXr,vXr,G3,b3e,FXr,TXr,Dee,MXr,EXr,CXr,O3,v3e,wXr,AXr,Gee,LXr,yXr,xXr,V3,F3e,$Xr,kXr,Oee,SXr,RXr,PXr,X3,T3e,BXr,IXr,Vee,NXr,qXr,jXr,z3,oQe,Zc,Q3,M3e,E$,DXr,E3e,GXr,rQe,ur,C$,OXr,ef,VXr,Xee,XXr,zXr,zee,QXr,WXr,HXr,w$,UXr,C3e,JXr,YXr,KXr,Ut,A$,ZXr,w3e,ezr,ozr,of,rzr,A3e,tzr,azr,Qee,nzr,szr,lzr,W3,izr,zr,L$,dzr,L3e,czr,fzr,Cn,mzr,y3e,gzr,hzr,x3e,pzr,_zr,$3e,uzr,bzr,vzr,Ee,H3,k3e,Fzr,Tzr,Wee,Mzr,Ezr,Czr,U3,S3e,wzr,Azr,Hee,Lzr,yzr,xzr,J3,R3e,$zr,kzr,Uee,Szr,Rzr,Pzr,Y3,P3e,Bzr,Izr,Jee,Nzr,qzr,jzr,K3,B3e,Dzr,Gzr,Yee,Ozr,Vzr,Xzr,Z3,I3e,zzr,Qzr,Kee,Wzr,Hzr,Uzr,e5,N3e,Jzr,Yzr,Zee,Kzr,Zzr,eQr,o5,q3e,oQr,rQr,eoe,tQr,aQr,nQr,r5,j3e,sQr,lQr,ooe,iQr,dQr,cQr,t5,D3e,fQr,mQr,roe,gQr,hQr,pQr,a5,G3e,_Qr,uQr,toe,bQr,vQr,FQr,n5,O3e,TQr,MQr,aoe,EQr,CQr,wQr,s5,V3e,AQr,LQr,noe,yQr,xQr,$Qr,l5,tQe,rf,i5,X3e,y$,kQr,z3e,SQr,aQe,br,x$,RQr,tf,PQr,soe,BQr,IQr,loe,NQr,qQr,jQr,$$,DQr,Q3e,GQr,OQr,VQr,Jt,k$,XQr,W3e,zQr,QQr,af,WQr,H3e,HQr,UQr,ioe,JQr,YQr,KQr,d5,ZQr,Qr,S$,eWr,U3e,oWr,rWr,wn,tWr,J3e,aWr,nWr,Y3e,sWr,lWr,K3e,iWr,dWr,cWr,$e,c5,Z3e,fWr,mWr,doe,gWr,hWr,pWr,f5,e5e,_Wr,uWr,coe,bWr,vWr,FWr,m5,o5e,TWr,MWr,foe,EWr,CWr,wWr,g5,r5e,AWr,LWr,moe,yWr,xWr,$Wr,h5,t5e,kWr,SWr,goe,RWr,PWr,BWr,p5,a5e,IWr,NWr,hoe,qWr,jWr,DWr,_5,n5e,GWr,OWr,poe,VWr,XWr,zWr,u5,s5e,QWr,WWr,_oe,HWr,UWr,JWr,b5,l5e,YWr,KWr,uoe,ZWr,eHr,oHr,v5,i5e,rHr,tHr,boe,aHr,nHr,sHr,F5,nQe,nf,T5,d5e,R$,lHr,c5e,iHr,sQe,vr,P$,dHr,sf,cHr,voe,fHr,mHr,Foe,gHr,hHr,pHr,B$,_Hr,f5e,uHr,bHr,vHr,Yt,I$,FHr,m5e,THr,MHr,lf,EHr,g5e,CHr,wHr,Toe,AHr,LHr,yHr,M5,xHr,Wr,N$,$Hr,h5e,kHr,SHr,An,RHr,p5e,PHr,BHr,_5e,IHr,NHr,u5e,qHr,jHr,DHr,ke,E5,b5e,GHr,OHr,Moe,VHr,XHr,zHr,C5,v5e,QHr,WHr,Eoe,HHr,UHr,JHr,w5,F5e,YHr,KHr,Coe,ZHr,eUr,oUr,A5,T5e,rUr,tUr,woe,aUr,nUr,sUr,L5,M5e,lUr,iUr,Aoe,dUr,cUr,fUr,y5,E5e,mUr,gUr,Loe,hUr,pUr,_Ur,x5,C5e,uUr,bUr,yoe,vUr,FUr,TUr,$5,w5e,MUr,EUr,xoe,CUr,wUr,AUr,k5,A5e,LUr,yUr,$oe,xUr,$Ur,kUr,S5,L5e,SUr,RUr,koe,PUr,BUr,IUr,R5,lQe,df,P5,y5e,q$,NUr,x5e,qUr,iQe,Fr,j$,jUr,cf,DUr,Soe,GUr,OUr,Roe,VUr,XUr,zUr,D$,QUr,$5e,WUr,HUr,UUr,Kt,G$,JUr,k5e,YUr,KUr,ff,ZUr,S5e,eJr,oJr,Poe,rJr,tJr,aJr,B5,nJr,Hr,O$,sJr,R5e,lJr,iJr,Ln,dJr,P5e,cJr,fJr,B5e,mJr,gJr,I5e,hJr,pJr,_Jr,Se,I5,N5e,uJr,bJr,Boe,vJr,FJr,TJr,N5,q5e,MJr,EJr,Ioe,CJr,wJr,AJr,q5,j5e,LJr,yJr,Noe,xJr,$Jr,kJr,j5,D5e,SJr,RJr,qoe,PJr,BJr,IJr,D5,G5e,NJr,qJr,joe,jJr,DJr,GJr,G5,O5e,OJr,VJr,Doe,XJr,zJr,QJr,O5,V5e,WJr,HJr,Goe,UJr,JJr,YJr,V5,X5e,KJr,ZJr,Ooe,eYr,oYr,rYr,X5,z5e,tYr,aYr,Voe,nYr,sYr,lYr,z5,Q5e,iYr,dYr,Xoe,cYr,fYr,mYr,Q5,dQe,mf,W5,W5e,V$,gYr,H5e,hYr,cQe,Tr,X$,pYr,gf,_Yr,zoe,uYr,bYr,Qoe,vYr,FYr,TYr,z$,MYr,U5e,EYr,CYr,wYr,Zt,Q$,AYr,J5e,LYr,yYr,hf,xYr,Y5e,$Yr,kYr,Woe,SYr,RYr,PYr,H5,BYr,Ur,W$,IYr,K5e,NYr,qYr,yn,jYr,Z5e,DYr,GYr,e0e,OYr,VYr,o0e,XYr,zYr,QYr,Re,U5,r0e,WYr,HYr,Hoe,UYr,JYr,YYr,J5,t0e,KYr,ZYr,Uoe,eKr,oKr,rKr,Y5,a0e,tKr,aKr,Joe,nKr,sKr,lKr,K5,n0e,iKr,dKr,Yoe,cKr,fKr,mKr,Z5,s0e,gKr,hKr,Koe,pKr,_Kr,uKr,e0,l0e,bKr,vKr,Zoe,FKr,TKr,MKr,o0,i0e,EKr,CKr,ere,wKr,AKr,LKr,r0,d0e,yKr,xKr,ore,$Kr,kKr,SKr,t0,c0e,RKr,PKr,rre,BKr,IKr,NKr,a0,f0e,qKr,jKr,tre,DKr,GKr,OKr,n0,fQe,pf,s0,m0e,H$,VKr,g0e,XKr,mQe,Mr,U$,zKr,_f,QKr,are,WKr,HKr,nre,UKr,JKr,YKr,J$,KKr,h0e,ZKr,eZr,oZr,ea,Y$,rZr,p0e,tZr,aZr,uf,nZr,_0e,sZr,lZr,sre,iZr,dZr,cZr,l0,fZr,Jr,K$,mZr,u0e,gZr,hZr,xn,pZr,b0e,_Zr,uZr,v0e,bZr,vZr,F0e,FZr,TZr,MZr,Ve,i0,T0e,EZr,CZr,lre,wZr,AZr,LZr,d0,M0e,yZr,xZr,ire,$Zr,kZr,SZr,c0,E0e,RZr,PZr,dre,BZr,IZr,NZr,f0,C0e,qZr,jZr,cre,DZr,GZr,OZr,m0,w0e,VZr,XZr,fre,zZr,QZr,WZr,g0,A0e,HZr,UZr,mre,JZr,YZr,KZr,h0,L0e,ZZr,eet,gre,oet,ret,tet,p0,y0e,aet,net,hre,set,iet,det,_0,gQe,bf,u0,x0e,Z$,cet,$0e,fet,hQe,Er,ek,met,vf,get,pre,het,pet,_re,_et,uet,bet,ok,vet,k0e,Fet,Tet,Met,oa,rk,Eet,S0e,Cet,wet,Ff,Aet,R0e,Let,yet,ure,xet,$et,ket,b0,Set,Yr,tk,Ret,P0e,Pet,Bet,$n,Iet,B0e,Net,qet,I0e,jet,Det,N0e,Get,Oet,Vet,Xe,v0,q0e,Xet,zet,bre,Qet,Wet,Het,F0,j0e,Uet,Jet,vre,Yet,Ket,Zet,T0,D0e,eot,oot,Fre,rot,tot,aot,M0,G0e,not,sot,Tre,lot,iot,dot,E0,O0e,cot,fot,Mre,mot,got,hot,C0,V0e,pot,_ot,Ere,uot,bot,vot,w0,X0e,Fot,Tot,Cre,Mot,Eot,Cot,A0,z0e,wot,Aot,wre,Lot,yot,xot,L0,pQe,Tf,y0,Q0e,ak,$ot,W0e,kot,_Qe,Cr,nk,Sot,Mf,Rot,Are,Pot,Bot,Lre,Iot,Not,qot,sk,jot,H0e,Dot,Got,Oot,ra,lk,Vot,U0e,Xot,zot,Ef,Qot,J0e,Wot,Hot,yre,Uot,Jot,Yot,x0,Kot,Kr,ik,Zot,Y0e,ert,ort,kn,rrt,K0e,trt,art,Z0e,nrt,srt,ewe,lrt,irt,drt,owe,$0,rwe,crt,frt,xre,mrt,grt,hrt,k0,uQe,Cf,S0,twe,dk,prt,awe,_rt,bQe,wr,ck,urt,wf,brt,$re,vrt,Frt,kre,Trt,Mrt,Ert,fk,Crt,nwe,wrt,Art,Lrt,ta,mk,yrt,swe,xrt,$rt,Af,krt,lwe,Srt,Rrt,Sre,Prt,Brt,Irt,R0,Nrt,Zr,gk,qrt,iwe,jrt,Drt,Sn,Grt,dwe,Ort,Vrt,cwe,Xrt,zrt,fwe,Qrt,Wrt,Hrt,hk,P0,mwe,Urt,Jrt,Rre,Yrt,Krt,Zrt,B0,gwe,ett,ott,Pre,rtt,ttt,att,I0,vQe,Lf,N0,hwe,pk,ntt,pwe,stt,FQe,Ar,_k,ltt,yf,itt,Bre,dtt,ctt,Ire,ftt,mtt,gtt,uk,htt,_we,ptt,_tt,utt,aa,bk,btt,uwe,vtt,Ftt,xf,Ttt,bwe,Mtt,Ett,Nre,Ctt,wtt,Att,q0,Ltt,et,vk,ytt,vwe,xtt,$tt,Rn,ktt,Fwe,Stt,Rtt,Twe,Ptt,Btt,Mwe,Itt,Ntt,qtt,Ewe,j0,Cwe,jtt,Dtt,qre,Gtt,Ott,Vtt,D0,TQe;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),cL=new re({}),fL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new Xtt({props:{warning:!0,$$slots:{default:[SWt]},$$scope:{ctx:$}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L613"}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L636"}}),Yg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),uL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/configuration_auto.py#L759"}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L403"}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17469/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L417"}}),Rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),EL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/tokenization_auto.py#L616"}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17469/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),up=new Xtt({props:{$$slots:{default:[BWt]},$$scope:{ctx:$}}}),bp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),xL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L89"}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L103"}}),jp=new Xtt({props:{$$slots:{default:[NWt]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),BL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/processing_auto.py#L256"}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L785"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Hu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L792"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),V1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),QL=new re({}),WL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L807"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),z1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),R2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),YL=new re({}),KL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L814"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),ry=new re({}),ty=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L821"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),ly=new re({}),iy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L830"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),my=new re({}),gy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L875"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),uy=new re({}),by=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L882"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L868"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L839"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L846"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L891"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[iHt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L930"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[dHt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cHt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L857"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[fHt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[mHt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L937"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Q6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[gHt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[hHt]},$$scope:{ctx:$}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L960"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[pHt]},$$scope:{ctx:$}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[_Ht]},$$scope:{ctx:$}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L944"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[uHt]},$$scope:{ctx:$}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[bHt]},$$scope:{ctx:$}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L951"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[vHt]},$$scope:{ctx:$}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[FHt]},$$scope:{ctx:$}}}),v8=new re({}),F8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L969"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[THt]},$$scope:{ctx:$}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[MHt]},$$scope:{ctx:$}}}),C8=new re({}),w8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L976"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[EHt]},$$scope:{ctx:$}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[CHt]},$$scope:{ctx:$}}}),x8=new re({}),$8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L923"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[wHt]},$$scope:{ctx:$}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[AHt]},$$scope:{ctx:$}}}),B8=new re({}),I8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L898"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[LHt]},$$scope:{ctx:$}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[yHt]},$$scope:{ctx:$}}}),D8=new re({}),G8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L905"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[xHt]},$$scope:{ctx:$}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[$Ht]},$$scope:{ctx:$}}}),z8=new re({}),Q8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_auto.py#L914"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[kHt]},$$scope:{ctx:$}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[SHt]},$$scope:{ctx:$}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2Model">TFSwinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[RHt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),b9=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[PHt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),F9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[BHt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),X9=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[IHt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),Q9=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[NHt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[qHt]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2ForImageClassification">TFSwinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[jHt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[DHt]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[GHt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[OHt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[VHt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[XHt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[zHt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[QHt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[WHt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[HHt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[UHt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[JHt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[YHt]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[KHt]},$$scope:{ctx:$}}}),Wx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L519"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZHt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eUt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oUt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rUt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_tf_auto.py#L544"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nUt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[lUt]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),mk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),pk=new re({}),_k=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17469/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17469/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17469/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Co=a("span"),Li=o("Auto Classes"),Rf=l(),lt=a("p"),yi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=a("code"),sL=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),$i=o("Instantiating one of "),Bn=a("a"),lL=o("AutoConfig"),In=o(", "),Nn=a("a"),iL=o("AutoModel"),ki=o(`, and
`),qn=a("a"),dL=o("AutoTokenizer"),Si=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),DS=o("will create a model that is an instance of "),Ri=a("a"),GS=o("BertModel"),OS=o("."),wo=l(),Ra=a("p"),VS=o("There is one class of "),If=a("code"),XS=o("AutoModel"),kHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_Xe=l(),Pi=a("h2"),Nf=a("a"),Sae=a("span"),F(cL.$$.fragment),SHe=l(),Rae=a("span"),RHe=o("Extending the Auto Classes"),uXe=l(),jn=a("p"),PHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pae=a("code"),BHe=o("NewModel"),IHe=o(", make sure you have a "),Bae=a("code"),NHe=o("NewModelConfig"),qHe=o(` then you can add those to the auto
classes like this:`),bXe=l(),F(fL.$$.fragment),vXe=l(),zS=a("p"),jHe=o("You will then be able to use the auto classes like you would usually do!"),FXe=l(),F(qf.$$.fragment),TXe=l(),Bi=a("h2"),jf=a("a"),Iae=a("span"),F(mL.$$.fragment),DHe=l(),Nae=a("span"),GHe=o("AutoConfig"),MXe=l(),Ao=a("div"),F(gL.$$.fragment),OHe=l(),hL=a("p"),VHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=a("a"),XHe=o("from_pretrained()"),zHe=o(" class method."),QHe=l(),pL=a("p"),WHe=o("This class cannot be instantiated directly using "),qae=a("code"),HHe=o("__init__()"),UHe=o(" (throws an error)."),JHe=l(),Lr=a("div"),F(_L.$$.fragment),YHe=l(),jae=a("p"),KHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ZHe=l(),Ii=a("p"),eUe=o("The configuration class to instantiate is selected based on the "),Dae=a("code"),oUe=o("model_type"),rUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gae=a("code"),tUe=o("pretrained_model_name_or_path"),aUe=o(":"),nUe=l(),A=a("ul"),Df=a("li"),Oae=a("strong"),sUe=o("albert"),lUe=o(" \u2014 "),WS=a("a"),iUe=o("AlbertConfig"),dUe=o(" (ALBERT model)"),cUe=l(),Gf=a("li"),Vae=a("strong"),fUe=o("bart"),mUe=o(" \u2014 "),HS=a("a"),gUe=o("BartConfig"),hUe=o(" (BART model)"),pUe=l(),Of=a("li"),Xae=a("strong"),_Ue=o("beit"),uUe=o(" \u2014 "),US=a("a"),bUe=o("BeitConfig"),vUe=o(" (BEiT model)"),FUe=l(),Vf=a("li"),zae=a("strong"),TUe=o("bert"),MUe=o(" \u2014 "),JS=a("a"),EUe=o("BertConfig"),CUe=o(" (BERT model)"),wUe=l(),Xf=a("li"),Qae=a("strong"),AUe=o("bert-generation"),LUe=o(" \u2014 "),YS=a("a"),yUe=o("BertGenerationConfig"),xUe=o(" (Bert Generation model)"),$Ue=l(),zf=a("li"),Wae=a("strong"),kUe=o("big_bird"),SUe=o(" \u2014 "),KS=a("a"),RUe=o("BigBirdConfig"),PUe=o(" (BigBird model)"),BUe=l(),Qf=a("li"),Hae=a("strong"),IUe=o("bigbird_pegasus"),NUe=o(" \u2014 "),ZS=a("a"),qUe=o("BigBirdPegasusConfig"),jUe=o(" (BigBird-Pegasus model)"),DUe=l(),Wf=a("li"),Uae=a("strong"),GUe=o("blenderbot"),OUe=o(" \u2014 "),eR=a("a"),VUe=o("BlenderbotConfig"),XUe=o(" (Blenderbot model)"),zUe=l(),Hf=a("li"),Jae=a("strong"),QUe=o("blenderbot-small"),WUe=o(" \u2014 "),oR=a("a"),HUe=o("BlenderbotSmallConfig"),UUe=o(" (BlenderbotSmall model)"),JUe=l(),Uf=a("li"),Yae=a("strong"),YUe=o("bloom"),KUe=o(" \u2014 "),rR=a("a"),ZUe=o("BloomConfig"),eJe=o(" (BLOOM model)"),oJe=l(),Jf=a("li"),Kae=a("strong"),rJe=o("camembert"),tJe=o(" \u2014 "),tR=a("a"),aJe=o("CamembertConfig"),nJe=o(" (CamemBERT model)"),sJe=l(),Yf=a("li"),Zae=a("strong"),lJe=o("canine"),iJe=o(" \u2014 "),aR=a("a"),dJe=o("CanineConfig"),cJe=o(" (CANINE model)"),fJe=l(),Kf=a("li"),ene=a("strong"),mJe=o("clip"),gJe=o(" \u2014 "),nR=a("a"),hJe=o("CLIPConfig"),pJe=o(" (CLIP model)"),_Je=l(),Zf=a("li"),one=a("strong"),uJe=o("codegen"),bJe=o(" \u2014 "),sR=a("a"),vJe=o("CodeGenConfig"),FJe=o(" (CodeGen model)"),TJe=l(),em=a("li"),rne=a("strong"),MJe=o("convbert"),EJe=o(" \u2014 "),lR=a("a"),CJe=o("ConvBertConfig"),wJe=o(" (ConvBERT model)"),AJe=l(),om=a("li"),tne=a("strong"),LJe=o("convnext"),yJe=o(" \u2014 "),iR=a("a"),xJe=o("ConvNextConfig"),$Je=o(" (ConvNeXT model)"),kJe=l(),rm=a("li"),ane=a("strong"),SJe=o("ctrl"),RJe=o(" \u2014 "),dR=a("a"),PJe=o("CTRLConfig"),BJe=o(" (CTRL model)"),IJe=l(),tm=a("li"),nne=a("strong"),NJe=o("cvt"),qJe=o(" \u2014 "),cR=a("a"),jJe=o("CvtConfig"),DJe=o(" (CvT model)"),GJe=l(),am=a("li"),sne=a("strong"),OJe=o("data2vec-audio"),VJe=o(" \u2014 "),fR=a("a"),XJe=o("Data2VecAudioConfig"),zJe=o(" (Data2VecAudio model)"),QJe=l(),nm=a("li"),lne=a("strong"),WJe=o("data2vec-text"),HJe=o(" \u2014 "),mR=a("a"),UJe=o("Data2VecTextConfig"),JJe=o(" (Data2VecText model)"),YJe=l(),sm=a("li"),ine=a("strong"),KJe=o("data2vec-vision"),ZJe=o(" \u2014 "),gR=a("a"),eYe=o("Data2VecVisionConfig"),oYe=o(" (Data2VecVision model)"),rYe=l(),lm=a("li"),dne=a("strong"),tYe=o("deberta"),aYe=o(" \u2014 "),hR=a("a"),nYe=o("DebertaConfig"),sYe=o(" (DeBERTa model)"),lYe=l(),im=a("li"),cne=a("strong"),iYe=o("deberta-v2"),dYe=o(" \u2014 "),pR=a("a"),cYe=o("DebertaV2Config"),fYe=o(" (DeBERTa-v2 model)"),mYe=l(),dm=a("li"),fne=a("strong"),gYe=o("decision_transformer"),hYe=o(" \u2014 "),_R=a("a"),pYe=o("DecisionTransformerConfig"),_Ye=o(" (Decision Transformer model)"),uYe=l(),cm=a("li"),mne=a("strong"),bYe=o("deit"),vYe=o(" \u2014 "),uR=a("a"),FYe=o("DeiTConfig"),TYe=o(" (DeiT model)"),MYe=l(),fm=a("li"),gne=a("strong"),EYe=o("detr"),CYe=o(" \u2014 "),bR=a("a"),wYe=o("DetrConfig"),AYe=o(" (DETR model)"),LYe=l(),mm=a("li"),hne=a("strong"),yYe=o("distilbert"),xYe=o(" \u2014 "),vR=a("a"),$Ye=o("DistilBertConfig"),kYe=o(" (DistilBERT model)"),SYe=l(),gm=a("li"),pne=a("strong"),RYe=o("dpr"),PYe=o(" \u2014 "),FR=a("a"),BYe=o("DPRConfig"),IYe=o(" (DPR model)"),NYe=l(),hm=a("li"),_ne=a("strong"),qYe=o("dpt"),jYe=o(" \u2014 "),TR=a("a"),DYe=o("DPTConfig"),GYe=o(" (DPT model)"),OYe=l(),pm=a("li"),une=a("strong"),VYe=o("electra"),XYe=o(" \u2014 "),MR=a("a"),zYe=o("ElectraConfig"),QYe=o(" (ELECTRA model)"),WYe=l(),_m=a("li"),bne=a("strong"),HYe=o("encoder-decoder"),UYe=o(" \u2014 "),ER=a("a"),JYe=o("EncoderDecoderConfig"),YYe=o(" (Encoder decoder model)"),KYe=l(),um=a("li"),vne=a("strong"),ZYe=o("flaubert"),eKe=o(" \u2014 "),CR=a("a"),oKe=o("FlaubertConfig"),rKe=o(" (FlauBERT model)"),tKe=l(),bm=a("li"),Fne=a("strong"),aKe=o("flava"),nKe=o(" \u2014 "),wR=a("a"),sKe=o("FlavaConfig"),lKe=o(" (FLAVA model)"),iKe=l(),vm=a("li"),Tne=a("strong"),dKe=o("fnet"),cKe=o(" \u2014 "),AR=a("a"),fKe=o("FNetConfig"),mKe=o(" (FNet model)"),gKe=l(),Fm=a("li"),Mne=a("strong"),hKe=o("fsmt"),pKe=o(" \u2014 "),LR=a("a"),_Ke=o("FSMTConfig"),uKe=o(" (FairSeq Machine-Translation model)"),bKe=l(),Tm=a("li"),Ene=a("strong"),vKe=o("funnel"),FKe=o(" \u2014 "),yR=a("a"),TKe=o("FunnelConfig"),MKe=o(" (Funnel Transformer model)"),EKe=l(),Mm=a("li"),Cne=a("strong"),CKe=o("glpn"),wKe=o(" \u2014 "),xR=a("a"),AKe=o("GLPNConfig"),LKe=o(" (GLPN model)"),yKe=l(),Em=a("li"),wne=a("strong"),xKe=o("gpt2"),$Ke=o(" \u2014 "),$R=a("a"),kKe=o("GPT2Config"),SKe=o(" (OpenAI GPT-2 model)"),RKe=l(),Cm=a("li"),Ane=a("strong"),PKe=o("gpt_neo"),BKe=o(" \u2014 "),kR=a("a"),IKe=o("GPTNeoConfig"),NKe=o(" (GPT Neo model)"),qKe=l(),wm=a("li"),Lne=a("strong"),jKe=o("gpt_neox"),DKe=o(" \u2014 "),SR=a("a"),GKe=o("GPTNeoXConfig"),OKe=o(" (GPT NeoX model)"),VKe=l(),Am=a("li"),yne=a("strong"),XKe=o("gptj"),zKe=o(" \u2014 "),RR=a("a"),QKe=o("GPTJConfig"),WKe=o(" (GPT-J model)"),HKe=l(),Lm=a("li"),xne=a("strong"),UKe=o("groupvit"),JKe=o(" \u2014 "),PR=a("a"),YKe=o("GroupViTConfig"),KKe=o(" (GroupViT model)"),ZKe=l(),ym=a("li"),$ne=a("strong"),eZe=o("hubert"),oZe=o(" \u2014 "),BR=a("a"),rZe=o("HubertConfig"),tZe=o(" (Hubert model)"),aZe=l(),xm=a("li"),kne=a("strong"),nZe=o("ibert"),sZe=o(" \u2014 "),IR=a("a"),lZe=o("IBertConfig"),iZe=o(" (I-BERT model)"),dZe=l(),$m=a("li"),Sne=a("strong"),cZe=o("imagegpt"),fZe=o(" \u2014 "),NR=a("a"),mZe=o("ImageGPTConfig"),gZe=o(" (ImageGPT model)"),hZe=l(),km=a("li"),Rne=a("strong"),pZe=o("layoutlm"),_Ze=o(" \u2014 "),qR=a("a"),uZe=o("LayoutLMConfig"),bZe=o(" (LayoutLM model)"),vZe=l(),Sm=a("li"),Pne=a("strong"),FZe=o("layoutlmv2"),TZe=o(" \u2014 "),jR=a("a"),MZe=o("LayoutLMv2Config"),EZe=o(" (LayoutLMv2 model)"),CZe=l(),Rm=a("li"),Bne=a("strong"),wZe=o("layoutlmv3"),AZe=o(" \u2014 "),DR=a("a"),LZe=o("LayoutLMv3Config"),yZe=o(" (LayoutLMv3 model)"),xZe=l(),Pm=a("li"),Ine=a("strong"),$Ze=o("led"),kZe=o(" \u2014 "),GR=a("a"),SZe=o("LEDConfig"),RZe=o(" (LED model)"),PZe=l(),Bm=a("li"),Nne=a("strong"),BZe=o("levit"),IZe=o(" \u2014 "),OR=a("a"),NZe=o("LevitConfig"),qZe=o(" (LeViT model)"),jZe=l(),Im=a("li"),qne=a("strong"),DZe=o("longformer"),GZe=o(" \u2014 "),VR=a("a"),OZe=o("LongformerConfig"),VZe=o(" (Longformer model)"),XZe=l(),Nm=a("li"),jne=a("strong"),zZe=o("longt5"),QZe=o(" \u2014 "),XR=a("a"),WZe=o("LongT5Config"),HZe=o(" (LongT5 model)"),UZe=l(),qm=a("li"),Dne=a("strong"),JZe=o("luke"),YZe=o(" \u2014 "),zR=a("a"),KZe=o("LukeConfig"),ZZe=o(" (LUKE model)"),eeo=l(),jm=a("li"),Gne=a("strong"),oeo=o("lxmert"),reo=o(" \u2014 "),QR=a("a"),teo=o("LxmertConfig"),aeo=o(" (LXMERT model)"),neo=l(),Dm=a("li"),One=a("strong"),seo=o("m2m_100"),leo=o(" \u2014 "),WR=a("a"),ieo=o("M2M100Config"),deo=o(" (M2M100 model)"),ceo=l(),Gm=a("li"),Vne=a("strong"),feo=o("marian"),meo=o(" \u2014 "),HR=a("a"),geo=o("MarianConfig"),heo=o(" (Marian model)"),peo=l(),Om=a("li"),Xne=a("strong"),_eo=o("maskformer"),ueo=o(" \u2014 "),UR=a("a"),beo=o("MaskFormerConfig"),veo=o(" (MaskFormer model)"),Feo=l(),Vm=a("li"),zne=a("strong"),Teo=o("mbart"),Meo=o(" \u2014 "),JR=a("a"),Eeo=o("MBartConfig"),Ceo=o(" (mBART model)"),weo=l(),Xm=a("li"),Qne=a("strong"),Aeo=o("mctct"),Leo=o(" \u2014 "),YR=a("a"),yeo=o("MCTCTConfig"),xeo=o(" (M-CTC-T model)"),$eo=l(),zm=a("li"),Wne=a("strong"),keo=o("megatron-bert"),Seo=o(" \u2014 "),KR=a("a"),Reo=o("MegatronBertConfig"),Peo=o(" (Megatron-BERT model)"),Beo=l(),Qm=a("li"),Hne=a("strong"),Ieo=o("mobilebert"),Neo=o(" \u2014 "),ZR=a("a"),qeo=o("MobileBertConfig"),jeo=o(" (MobileBERT model)"),Deo=l(),Wm=a("li"),Une=a("strong"),Geo=o("mobilevit"),Oeo=o(" \u2014 "),eP=a("a"),Veo=o("MobileViTConfig"),Xeo=o(" (MobileViT model)"),zeo=l(),Hm=a("li"),Jne=a("strong"),Qeo=o("mpnet"),Weo=o(" \u2014 "),oP=a("a"),Heo=o("MPNetConfig"),Ueo=o(" (MPNet model)"),Jeo=l(),Um=a("li"),Yne=a("strong"),Yeo=o("mt5"),Keo=o(" \u2014 "),rP=a("a"),Zeo=o("MT5Config"),eoo=o(" (MT5 model)"),ooo=l(),Jm=a("li"),Kne=a("strong"),roo=o("mvp"),too=o(" \u2014 "),tP=a("a"),aoo=o("MvpConfig"),noo=o(" (MVP model)"),soo=l(),Ym=a("li"),Zne=a("strong"),loo=o("nezha"),ioo=o(" \u2014 "),aP=a("a"),doo=o("NezhaConfig"),coo=o(" (Nezha model)"),foo=l(),Km=a("li"),ese=a("strong"),moo=o("nystromformer"),goo=o(" \u2014 "),nP=a("a"),hoo=o("NystromformerConfig"),poo=o(" (Nystr\xF6mformer model)"),_oo=l(),Zm=a("li"),ose=a("strong"),uoo=o("openai-gpt"),boo=o(" \u2014 "),sP=a("a"),voo=o("OpenAIGPTConfig"),Foo=o(" (OpenAI GPT model)"),Too=l(),eg=a("li"),rse=a("strong"),Moo=o("opt"),Eoo=o(" \u2014 "),lP=a("a"),Coo=o("OPTConfig"),woo=o(" (OPT model)"),Aoo=l(),og=a("li"),tse=a("strong"),Loo=o("pegasus"),yoo=o(" \u2014 "),iP=a("a"),xoo=o("PegasusConfig"),$oo=o(" (Pegasus model)"),koo=l(),rg=a("li"),ase=a("strong"),Soo=o("perceiver"),Roo=o(" \u2014 "),dP=a("a"),Poo=o("PerceiverConfig"),Boo=o(" (Perceiver model)"),Ioo=l(),tg=a("li"),nse=a("strong"),Noo=o("plbart"),qoo=o(" \u2014 "),cP=a("a"),joo=o("PLBartConfig"),Doo=o(" (PLBart model)"),Goo=l(),ag=a("li"),sse=a("strong"),Ooo=o("poolformer"),Voo=o(" \u2014 "),fP=a("a"),Xoo=o("PoolFormerConfig"),zoo=o(" (PoolFormer model)"),Qoo=l(),ng=a("li"),lse=a("strong"),Woo=o("prophetnet"),Hoo=o(" \u2014 "),mP=a("a"),Uoo=o("ProphetNetConfig"),Joo=o(" (ProphetNet model)"),Yoo=l(),sg=a("li"),ise=a("strong"),Koo=o("qdqbert"),Zoo=o(" \u2014 "),gP=a("a"),ero=o("QDQBertConfig"),oro=o(" (QDQBert model)"),rro=l(),lg=a("li"),dse=a("strong"),tro=o("rag"),aro=o(" \u2014 "),hP=a("a"),nro=o("RagConfig"),sro=o(" (RAG model)"),lro=l(),ig=a("li"),cse=a("strong"),iro=o("realm"),dro=o(" \u2014 "),pP=a("a"),cro=o("RealmConfig"),fro=o(" (REALM model)"),mro=l(),dg=a("li"),fse=a("strong"),gro=o("reformer"),hro=o(" \u2014 "),_P=a("a"),pro=o("ReformerConfig"),_ro=o(" (Reformer model)"),uro=l(),cg=a("li"),mse=a("strong"),bro=o("regnet"),vro=o(" \u2014 "),uP=a("a"),Fro=o("RegNetConfig"),Tro=o(" (RegNet model)"),Mro=l(),fg=a("li"),gse=a("strong"),Ero=o("rembert"),Cro=o(" \u2014 "),bP=a("a"),wro=o("RemBertConfig"),Aro=o(" (RemBERT model)"),Lro=l(),mg=a("li"),hse=a("strong"),yro=o("resnet"),xro=o(" \u2014 "),vP=a("a"),$ro=o("ResNetConfig"),kro=o(" (ResNet model)"),Sro=l(),gg=a("li"),pse=a("strong"),Rro=o("retribert"),Pro=o(" \u2014 "),FP=a("a"),Bro=o("RetriBertConfig"),Iro=o(" (RetriBERT model)"),Nro=l(),hg=a("li"),_se=a("strong"),qro=o("roberta"),jro=o(" \u2014 "),TP=a("a"),Dro=o("RobertaConfig"),Gro=o(" (RoBERTa model)"),Oro=l(),pg=a("li"),use=a("strong"),Vro=o("roformer"),Xro=o(" \u2014 "),MP=a("a"),zro=o("RoFormerConfig"),Qro=o(" (RoFormer model)"),Wro=l(),_g=a("li"),bse=a("strong"),Hro=o("segformer"),Uro=o(" \u2014 "),EP=a("a"),Jro=o("SegformerConfig"),Yro=o(" (SegFormer model)"),Kro=l(),ug=a("li"),vse=a("strong"),Zro=o("sew"),eto=o(" \u2014 "),CP=a("a"),oto=o("SEWConfig"),rto=o(" (SEW model)"),tto=l(),bg=a("li"),Fse=a("strong"),ato=o("sew-d"),nto=o(" \u2014 "),wP=a("a"),sto=o("SEWDConfig"),lto=o(" (SEW-D model)"),ito=l(),vg=a("li"),Tse=a("strong"),dto=o("speech-encoder-decoder"),cto=o(" \u2014 "),AP=a("a"),fto=o("SpeechEncoderDecoderConfig"),mto=o(" (Speech Encoder decoder model)"),gto=l(),Fg=a("li"),Mse=a("strong"),hto=o("speech_to_text"),pto=o(" \u2014 "),LP=a("a"),_to=o("Speech2TextConfig"),uto=o(" (Speech2Text model)"),bto=l(),Tg=a("li"),Ese=a("strong"),vto=o("speech_to_text_2"),Fto=o(" \u2014 "),yP=a("a"),Tto=o("Speech2Text2Config"),Mto=o(" (Speech2Text2 model)"),Eto=l(),Mg=a("li"),Cse=a("strong"),Cto=o("splinter"),wto=o(" \u2014 "),xP=a("a"),Ato=o("SplinterConfig"),Lto=o(" (Splinter model)"),yto=l(),Eg=a("li"),wse=a("strong"),xto=o("squeezebert"),$to=o(" \u2014 "),$P=a("a"),kto=o("SqueezeBertConfig"),Sto=o(" (SqueezeBERT model)"),Rto=l(),Cg=a("li"),Ase=a("strong"),Pto=o("swin"),Bto=o(" \u2014 "),kP=a("a"),Ito=o("SwinConfig"),Nto=o(" (Swin Transformer model)"),qto=l(),wg=a("li"),Lse=a("strong"),jto=o("swinv2"),Dto=o(" \u2014 "),SP=a("a"),Gto=o("Swinv2Config"),Oto=o(" (Swin Transformer V2 model)"),Vto=l(),Ag=a("li"),yse=a("strong"),Xto=o("t5"),zto=o(" \u2014 "),RP=a("a"),Qto=o("T5Config"),Wto=o(" (T5 model)"),Hto=l(),Lg=a("li"),xse=a("strong"),Uto=o("tapas"),Jto=o(" \u2014 "),PP=a("a"),Yto=o("TapasConfig"),Kto=o(" (TAPAS model)"),Zto=l(),yg=a("li"),$se=a("strong"),eao=o("trajectory_transformer"),oao=o(" \u2014 "),BP=a("a"),rao=o("TrajectoryTransformerConfig"),tao=o(" (Trajectory Transformer model)"),aao=l(),xg=a("li"),kse=a("strong"),nao=o("transfo-xl"),sao=o(" \u2014 "),IP=a("a"),lao=o("TransfoXLConfig"),iao=o(" (Transformer-XL model)"),dao=l(),$g=a("li"),Sse=a("strong"),cao=o("trocr"),fao=o(" \u2014 "),NP=a("a"),mao=o("TrOCRConfig"),gao=o(" (TrOCR model)"),hao=l(),kg=a("li"),Rse=a("strong"),pao=o("unispeech"),_ao=o(" \u2014 "),qP=a("a"),uao=o("UniSpeechConfig"),bao=o(" (UniSpeech model)"),vao=l(),Sg=a("li"),Pse=a("strong"),Fao=o("unispeech-sat"),Tao=o(" \u2014 "),jP=a("a"),Mao=o("UniSpeechSatConfig"),Eao=o(" (UniSpeechSat model)"),Cao=l(),Rg=a("li"),Bse=a("strong"),wao=o("van"),Aao=o(" \u2014 "),DP=a("a"),Lao=o("VanConfig"),yao=o(" (VAN model)"),xao=l(),Pg=a("li"),Ise=a("strong"),$ao=o("vilt"),kao=o(" \u2014 "),GP=a("a"),Sao=o("ViltConfig"),Rao=o(" (ViLT model)"),Pao=l(),Bg=a("li"),Nse=a("strong"),Bao=o("vision-encoder-decoder"),Iao=o(" \u2014 "),OP=a("a"),Nao=o("VisionEncoderDecoderConfig"),qao=o(" (Vision Encoder decoder model)"),jao=l(),Ig=a("li"),qse=a("strong"),Dao=o("vision-text-dual-encoder"),Gao=o(" \u2014 "),VP=a("a"),Oao=o("VisionTextDualEncoderConfig"),Vao=o(" (VisionTextDualEncoder model)"),Xao=l(),Ng=a("li"),jse=a("strong"),zao=o("visual_bert"),Qao=o(" \u2014 "),XP=a("a"),Wao=o("VisualBertConfig"),Hao=o(" (VisualBERT model)"),Uao=l(),qg=a("li"),Dse=a("strong"),Jao=o("vit"),Yao=o(" \u2014 "),zP=a("a"),Kao=o("ViTConfig"),Zao=o(" (ViT model)"),eno=l(),jg=a("li"),Gse=a("strong"),ono=o("vit_mae"),rno=o(" \u2014 "),QP=a("a"),tno=o("ViTMAEConfig"),ano=o(" (ViTMAE model)"),nno=l(),Dg=a("li"),Ose=a("strong"),sno=o("wav2vec2"),lno=o(" \u2014 "),WP=a("a"),ino=o("Wav2Vec2Config"),dno=o(" (Wav2Vec2 model)"),cno=l(),Gg=a("li"),Vse=a("strong"),fno=o("wav2vec2-conformer"),mno=o(" \u2014 "),HP=a("a"),gno=o("Wav2Vec2ConformerConfig"),hno=o(" (Wav2Vec2-Conformer model)"),pno=l(),Og=a("li"),Xse=a("strong"),_no=o("wavlm"),uno=o(" \u2014 "),UP=a("a"),bno=o("WavLMConfig"),vno=o(" (WavLM model)"),Fno=l(),Vg=a("li"),zse=a("strong"),Tno=o("xglm"),Mno=o(" \u2014 "),JP=a("a"),Eno=o("XGLMConfig"),Cno=o(" (XGLM model)"),wno=l(),Xg=a("li"),Qse=a("strong"),Ano=o("xlm"),Lno=o(" \u2014 "),YP=a("a"),yno=o("XLMConfig"),xno=o(" (XLM model)"),$no=l(),zg=a("li"),Wse=a("strong"),kno=o("xlm-prophetnet"),Sno=o(" \u2014 "),KP=a("a"),Rno=o("XLMProphetNetConfig"),Pno=o(" (XLM-ProphetNet model)"),Bno=l(),Qg=a("li"),Hse=a("strong"),Ino=o("xlm-roberta"),Nno=o(" \u2014 "),ZP=a("a"),qno=o("XLMRobertaConfig"),jno=o(" (XLM-RoBERTa model)"),Dno=l(),Wg=a("li"),Use=a("strong"),Gno=o("xlm-roberta-xl"),Ono=o(" \u2014 "),eB=a("a"),Vno=o("XLMRobertaXLConfig"),Xno=o(" (XLM-RoBERTa-XL model)"),zno=l(),Hg=a("li"),Jse=a("strong"),Qno=o("xlnet"),Wno=o(" \u2014 "),oB=a("a"),Hno=o("XLNetConfig"),Uno=o(" (XLNet model)"),Jno=l(),Ug=a("li"),Yse=a("strong"),Yno=o("yolos"),Kno=o(" \u2014 "),rB=a("a"),Zno=o("YolosConfig"),eso=o(" (YOLOS model)"),oso=l(),Jg=a("li"),Kse=a("strong"),rso=o("yoso"),tso=o(" \u2014 "),tB=a("a"),aso=o("YosoConfig"),nso=o(" (YOSO model)"),sso=l(),F(Yg.$$.fragment),lso=l(),Kg=a("div"),F(uL.$$.fragment),iso=l(),Zse=a("p"),dso=o("Register a new configuration for this class."),EXe=l(),Ni=a("h2"),Zg=a("a"),ele=a("span"),F(bL.$$.fragment),cso=l(),ole=a("span"),fso=o("AutoTokenizer"),CXe=l(),Lo=a("div"),F(vL.$$.fragment),mso=l(),FL=a("p"),gso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aB=a("a"),hso=o("AutoTokenizer.from_pretrained()"),pso=o(" class method."),_so=l(),TL=a("p"),uso=o("This class cannot be instantiated directly using "),rle=a("code"),bso=o("__init__()"),vso=o(" (throws an error)."),Fso=l(),yr=a("div"),F(ML.$$.fragment),Tso=l(),tle=a("p"),Mso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eso=l(),Pa=a("p"),Cso=o("The tokenizer class to instantiate is selected based on the "),ale=a("code"),wso=o("model_type"),Aso=o(` property of the config object (either
passed as an argument or loaded from `),nle=a("code"),Lso=o("pretrained_model_name_or_path"),yso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=a("code"),xso=o("pretrained_model_name_or_path"),$so=o(":"),kso=l(),k=a("ul"),Dn=a("li"),lle=a("strong"),Sso=o("albert"),Rso=o(" \u2014 "),nB=a("a"),Pso=o("AlbertTokenizer"),Bso=o(" or "),sB=a("a"),Iso=o("AlbertTokenizerFast"),Nso=o(" (ALBERT model)"),qso=l(),Gn=a("li"),ile=a("strong"),jso=o("bart"),Dso=o(" \u2014 "),lB=a("a"),Gso=o("BartTokenizer"),Oso=o(" or "),iB=a("a"),Vso=o("BartTokenizerFast"),Xso=o(" (BART model)"),zso=l(),On=a("li"),dle=a("strong"),Qso=o("barthez"),Wso=o(" \u2014 "),dB=a("a"),Hso=o("BarthezTokenizer"),Uso=o(" or "),cB=a("a"),Jso=o("BarthezTokenizerFast"),Yso=o(" (BARThez model)"),Kso=l(),eh=a("li"),cle=a("strong"),Zso=o("bartpho"),elo=o(" \u2014 "),fB=a("a"),olo=o("BartphoTokenizer"),rlo=o(" (BARTpho model)"),tlo=l(),Vn=a("li"),fle=a("strong"),alo=o("bert"),nlo=o(" \u2014 "),mB=a("a"),slo=o("BertTokenizer"),llo=o(" or "),gB=a("a"),ilo=o("BertTokenizerFast"),dlo=o(" (BERT model)"),clo=l(),oh=a("li"),mle=a("strong"),flo=o("bert-generation"),mlo=o(" \u2014 "),hB=a("a"),glo=o("BertGenerationTokenizer"),hlo=o(" (Bert Generation model)"),plo=l(),rh=a("li"),gle=a("strong"),_lo=o("bert-japanese"),ulo=o(" \u2014 "),pB=a("a"),blo=o("BertJapaneseTokenizer"),vlo=o(" (BertJapanese model)"),Flo=l(),th=a("li"),hle=a("strong"),Tlo=o("bertweet"),Mlo=o(" \u2014 "),_B=a("a"),Elo=o("BertweetTokenizer"),Clo=o(" (BERTweet model)"),wlo=l(),Xn=a("li"),ple=a("strong"),Alo=o("big_bird"),Llo=o(" \u2014 "),uB=a("a"),ylo=o("BigBirdTokenizer"),xlo=o(" or "),bB=a("a"),$lo=o("BigBirdTokenizerFast"),klo=o(" (BigBird model)"),Slo=l(),zn=a("li"),_le=a("strong"),Rlo=o("bigbird_pegasus"),Plo=o(" \u2014 "),vB=a("a"),Blo=o("PegasusTokenizer"),Ilo=o(" or "),FB=a("a"),Nlo=o("PegasusTokenizerFast"),qlo=o(" (BigBird-Pegasus model)"),jlo=l(),Qn=a("li"),ule=a("strong"),Dlo=o("blenderbot"),Glo=o(" \u2014 "),TB=a("a"),Olo=o("BlenderbotTokenizer"),Vlo=o(" or "),MB=a("a"),Xlo=o("BlenderbotTokenizerFast"),zlo=o(" (Blenderbot model)"),Qlo=l(),ah=a("li"),ble=a("strong"),Wlo=o("blenderbot-small"),Hlo=o(" \u2014 "),EB=a("a"),Ulo=o("BlenderbotSmallTokenizer"),Jlo=o(" (BlenderbotSmall model)"),Ylo=l(),nh=a("li"),vle=a("strong"),Klo=o("bloom"),Zlo=o(" \u2014 "),CB=a("a"),eio=o("BloomTokenizerFast"),oio=o(" (BLOOM model)"),rio=l(),sh=a("li"),Fle=a("strong"),tio=o("byt5"),aio=o(" \u2014 "),wB=a("a"),nio=o("ByT5Tokenizer"),sio=o(" (ByT5 model)"),lio=l(),Wn=a("li"),Tle=a("strong"),iio=o("camembert"),dio=o(" \u2014 "),AB=a("a"),cio=o("CamembertTokenizer"),fio=o(" or "),LB=a("a"),mio=o("CamembertTokenizerFast"),gio=o(" (CamemBERT model)"),hio=l(),lh=a("li"),Mle=a("strong"),pio=o("canine"),_io=o(" \u2014 "),yB=a("a"),uio=o("CanineTokenizer"),bio=o(" (CANINE model)"),vio=l(),Hn=a("li"),Ele=a("strong"),Fio=o("clip"),Tio=o(" \u2014 "),xB=a("a"),Mio=o("CLIPTokenizer"),Eio=o(" or "),$B=a("a"),Cio=o("CLIPTokenizerFast"),wio=o(" (CLIP model)"),Aio=l(),Un=a("li"),Cle=a("strong"),Lio=o("codegen"),yio=o(" \u2014 "),kB=a("a"),xio=o("CodeGenTokenizer"),$io=o(" or "),SB=a("a"),kio=o("CodeGenTokenizerFast"),Sio=o(" (CodeGen model)"),Rio=l(),Jn=a("li"),wle=a("strong"),Pio=o("convbert"),Bio=o(" \u2014 "),RB=a("a"),Iio=o("ConvBertTokenizer"),Nio=o(" or "),PB=a("a"),qio=o("ConvBertTokenizerFast"),jio=o(" (ConvBERT model)"),Dio=l(),Yn=a("li"),Ale=a("strong"),Gio=o("cpm"),Oio=o(" \u2014 "),BB=a("a"),Vio=o("CpmTokenizer"),Xio=o(" or "),IB=a("a"),zio=o("CpmTokenizerFast"),Qio=o(" (CPM model)"),Wio=l(),ih=a("li"),Lle=a("strong"),Hio=o("ctrl"),Uio=o(" \u2014 "),NB=a("a"),Jio=o("CTRLTokenizer"),Yio=o(" (CTRL model)"),Kio=l(),Kn=a("li"),yle=a("strong"),Zio=o("data2vec-text"),edo=o(" \u2014 "),qB=a("a"),odo=o("RobertaTokenizer"),rdo=o(" or "),jB=a("a"),tdo=o("RobertaTokenizerFast"),ado=o(" (Data2VecText model)"),ndo=l(),Zn=a("li"),xle=a("strong"),sdo=o("deberta"),ldo=o(" \u2014 "),DB=a("a"),ido=o("DebertaTokenizer"),ddo=o(" or "),GB=a("a"),cdo=o("DebertaTokenizerFast"),fdo=o(" (DeBERTa model)"),mdo=l(),es=a("li"),$le=a("strong"),gdo=o("deberta-v2"),hdo=o(" \u2014 "),OB=a("a"),pdo=o("DebertaV2Tokenizer"),_do=o(" or "),VB=a("a"),udo=o("DebertaV2TokenizerFast"),bdo=o(" (DeBERTa-v2 model)"),vdo=l(),os=a("li"),kle=a("strong"),Fdo=o("distilbert"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("DistilBertTokenizer"),Edo=o(" or "),zB=a("a"),Cdo=o("DistilBertTokenizerFast"),wdo=o(" (DistilBERT model)"),Ado=l(),rs=a("li"),Sle=a("strong"),Ldo=o("dpr"),ydo=o(" \u2014 "),QB=a("a"),xdo=o("DPRQuestionEncoderTokenizer"),$do=o(" or "),WB=a("a"),kdo=o("DPRQuestionEncoderTokenizerFast"),Sdo=o(" (DPR model)"),Rdo=l(),ts=a("li"),Rle=a("strong"),Pdo=o("electra"),Bdo=o(" \u2014 "),HB=a("a"),Ido=o("ElectraTokenizer"),Ndo=o(" or "),UB=a("a"),qdo=o("ElectraTokenizerFast"),jdo=o(" (ELECTRA model)"),Ddo=l(),dh=a("li"),Ple=a("strong"),Gdo=o("flaubert"),Odo=o(" \u2014 "),JB=a("a"),Vdo=o("FlaubertTokenizer"),Xdo=o(" (FlauBERT model)"),zdo=l(),as=a("li"),Ble=a("strong"),Qdo=o("fnet"),Wdo=o(" \u2014 "),YB=a("a"),Hdo=o("FNetTokenizer"),Udo=o(" or "),KB=a("a"),Jdo=o("FNetTokenizerFast"),Ydo=o(" (FNet model)"),Kdo=l(),ch=a("li"),Ile=a("strong"),Zdo=o("fsmt"),eco=o(" \u2014 "),ZB=a("a"),oco=o("FSMTTokenizer"),rco=o(" (FairSeq Machine-Translation model)"),tco=l(),ns=a("li"),Nle=a("strong"),aco=o("funnel"),nco=o(" \u2014 "),eI=a("a"),sco=o("FunnelTokenizer"),lco=o(" or "),oI=a("a"),ico=o("FunnelTokenizerFast"),dco=o(" (Funnel Transformer model)"),cco=l(),ss=a("li"),qle=a("strong"),fco=o("gpt2"),mco=o(" \u2014 "),rI=a("a"),gco=o("GPT2Tokenizer"),hco=o(" or "),tI=a("a"),pco=o("GPT2TokenizerFast"),_co=o(" (OpenAI GPT-2 model)"),uco=l(),ls=a("li"),jle=a("strong"),bco=o("gpt_neo"),vco=o(" \u2014 "),aI=a("a"),Fco=o("GPT2Tokenizer"),Tco=o(" or "),nI=a("a"),Mco=o("GPT2TokenizerFast"),Eco=o(" (GPT Neo model)"),Cco=l(),fh=a("li"),Dle=a("strong"),wco=o("gpt_neox"),Aco=o(" \u2014 "),sI=a("a"),Lco=o("GPTNeoXTokenizerFast"),yco=o(" (GPT NeoX model)"),xco=l(),is=a("li"),Gle=a("strong"),$co=o("gptj"),kco=o(" \u2014 "),lI=a("a"),Sco=o("GPT2Tokenizer"),Rco=o(" or "),iI=a("a"),Pco=o("GPT2TokenizerFast"),Bco=o(" (GPT-J model)"),Ico=l(),ds=a("li"),Ole=a("strong"),Nco=o("groupvit"),qco=o(" \u2014 "),dI=a("a"),jco=o("CLIPTokenizer"),Dco=o(" or "),cI=a("a"),Gco=o("CLIPTokenizerFast"),Oco=o(" (GroupViT model)"),Vco=l(),cs=a("li"),Vle=a("strong"),Xco=o("herbert"),zco=o(" \u2014 "),fI=a("a"),Qco=o("HerbertTokenizer"),Wco=o(" or "),mI=a("a"),Hco=o("HerbertTokenizerFast"),Uco=o(" (HerBERT model)"),Jco=l(),mh=a("li"),Xle=a("strong"),Yco=o("hubert"),Kco=o(" \u2014 "),gI=a("a"),Zco=o("Wav2Vec2CTCTokenizer"),efo=o(" (Hubert model)"),ofo=l(),fs=a("li"),zle=a("strong"),rfo=o("ibert"),tfo=o(" \u2014 "),hI=a("a"),afo=o("RobertaTokenizer"),nfo=o(" or "),pI=a("a"),sfo=o("RobertaTokenizerFast"),lfo=o(" (I-BERT model)"),ifo=l(),ms=a("li"),Qle=a("strong"),dfo=o("layoutlm"),cfo=o(" \u2014 "),_I=a("a"),ffo=o("LayoutLMTokenizer"),mfo=o(" or "),uI=a("a"),gfo=o("LayoutLMTokenizerFast"),hfo=o(" (LayoutLM model)"),pfo=l(),gs=a("li"),Wle=a("strong"),_fo=o("layoutlmv2"),ufo=o(" \u2014 "),bI=a("a"),bfo=o("LayoutLMv2Tokenizer"),vfo=o(" or "),vI=a("a"),Ffo=o("LayoutLMv2TokenizerFast"),Tfo=o(" (LayoutLMv2 model)"),Mfo=l(),hs=a("li"),Hle=a("strong"),Efo=o("layoutlmv3"),Cfo=o(" \u2014 "),FI=a("a"),wfo=o("LayoutLMv3Tokenizer"),Afo=o(" or "),TI=a("a"),Lfo=o("LayoutLMv3TokenizerFast"),yfo=o(" (LayoutLMv3 model)"),xfo=l(),ps=a("li"),Ule=a("strong"),$fo=o("layoutxlm"),kfo=o(" \u2014 "),MI=a("a"),Sfo=o("LayoutXLMTokenizer"),Rfo=o(" or "),EI=a("a"),Pfo=o("LayoutXLMTokenizerFast"),Bfo=o(" (LayoutXLM model)"),Ifo=l(),_s=a("li"),Jle=a("strong"),Nfo=o("led"),qfo=o(" \u2014 "),CI=a("a"),jfo=o("LEDTokenizer"),Dfo=o(" or "),wI=a("a"),Gfo=o("LEDTokenizerFast"),Ofo=o(" (LED model)"),Vfo=l(),us=a("li"),Yle=a("strong"),Xfo=o("longformer"),zfo=o(" \u2014 "),AI=a("a"),Qfo=o("LongformerTokenizer"),Wfo=o(" or "),LI=a("a"),Hfo=o("LongformerTokenizerFast"),Ufo=o(" (Longformer model)"),Jfo=l(),bs=a("li"),Kle=a("strong"),Yfo=o("longt5"),Kfo=o(" \u2014 "),yI=a("a"),Zfo=o("T5Tokenizer"),emo=o(" or "),xI=a("a"),omo=o("T5TokenizerFast"),rmo=o(" (LongT5 model)"),tmo=l(),gh=a("li"),Zle=a("strong"),amo=o("luke"),nmo=o(" \u2014 "),$I=a("a"),smo=o("LukeTokenizer"),lmo=o(" (LUKE model)"),imo=l(),vs=a("li"),eie=a("strong"),dmo=o("lxmert"),cmo=o(" \u2014 "),kI=a("a"),fmo=o("LxmertTokenizer"),mmo=o(" or "),SI=a("a"),gmo=o("LxmertTokenizerFast"),hmo=o(" (LXMERT model)"),pmo=l(),hh=a("li"),oie=a("strong"),_mo=o("m2m_100"),umo=o(" \u2014 "),RI=a("a"),bmo=o("M2M100Tokenizer"),vmo=o(" (M2M100 model)"),Fmo=l(),ph=a("li"),rie=a("strong"),Tmo=o("marian"),Mmo=o(" \u2014 "),PI=a("a"),Emo=o("MarianTokenizer"),Cmo=o(" (Marian model)"),wmo=l(),Fs=a("li"),tie=a("strong"),Amo=o("mbart"),Lmo=o(" \u2014 "),BI=a("a"),ymo=o("MBartTokenizer"),xmo=o(" or "),II=a("a"),$mo=o("MBartTokenizerFast"),kmo=o(" (mBART model)"),Smo=l(),Ts=a("li"),aie=a("strong"),Rmo=o("mbart50"),Pmo=o(" \u2014 "),NI=a("a"),Bmo=o("MBart50Tokenizer"),Imo=o(" or "),qI=a("a"),Nmo=o("MBart50TokenizerFast"),qmo=o(" (mBART-50 model)"),jmo=l(),Ms=a("li"),nie=a("strong"),Dmo=o("megatron-bert"),Gmo=o(" \u2014 "),jI=a("a"),Omo=o("BertTokenizer"),Vmo=o(" or "),DI=a("a"),Xmo=o("BertTokenizerFast"),zmo=o(" (Megatron-BERT model)"),Qmo=l(),_h=a("li"),sie=a("strong"),Wmo=o("mluke"),Hmo=o(" \u2014 "),GI=a("a"),Umo=o("MLukeTokenizer"),Jmo=o(" (mLUKE model)"),Ymo=l(),Es=a("li"),lie=a("strong"),Kmo=o("mobilebert"),Zmo=o(" \u2014 "),OI=a("a"),ego=o("MobileBertTokenizer"),ogo=o(" or "),VI=a("a"),rgo=o("MobileBertTokenizerFast"),tgo=o(" (MobileBERT model)"),ago=l(),Cs=a("li"),iie=a("strong"),ngo=o("mpnet"),sgo=o(" \u2014 "),XI=a("a"),lgo=o("MPNetTokenizer"),igo=o(" or "),zI=a("a"),dgo=o("MPNetTokenizerFast"),cgo=o(" (MPNet model)"),fgo=l(),ws=a("li"),die=a("strong"),mgo=o("mt5"),ggo=o(" \u2014 "),QI=a("a"),hgo=o("MT5Tokenizer"),pgo=o(" or "),WI=a("a"),_go=o("MT5TokenizerFast"),ugo=o(" (MT5 model)"),bgo=l(),As=a("li"),cie=a("strong"),vgo=o("mvp"),Fgo=o(" \u2014 "),HI=a("a"),Tgo=o("MvpTokenizer"),Mgo=o(" or "),UI=a("a"),Ego=o("MvpTokenizerFast"),Cgo=o(" (MVP model)"),wgo=l(),Ls=a("li"),fie=a("strong"),Ago=o("nezha"),Lgo=o(" \u2014 "),JI=a("a"),ygo=o("BertTokenizer"),xgo=o(" or "),YI=a("a"),$go=o("BertTokenizerFast"),kgo=o(" (Nezha model)"),Sgo=l(),ys=a("li"),mie=a("strong"),Rgo=o("nystromformer"),Pgo=o(" \u2014 "),KI=a("a"),Bgo=o("AlbertTokenizer"),Igo=o(" or "),ZI=a("a"),Ngo=o("AlbertTokenizerFast"),qgo=o(" (Nystr\xF6mformer model)"),jgo=l(),xs=a("li"),gie=a("strong"),Dgo=o("openai-gpt"),Ggo=o(" \u2014 "),eN=a("a"),Ogo=o("OpenAIGPTTokenizer"),Vgo=o(" or "),oN=a("a"),Xgo=o("OpenAIGPTTokenizerFast"),zgo=o(" (OpenAI GPT model)"),Qgo=l(),uh=a("li"),hie=a("strong"),Wgo=o("opt"),Hgo=o(" \u2014 "),rN=a("a"),Ugo=o("GPT2Tokenizer"),Jgo=o(" (OPT model)"),Ygo=l(),$s=a("li"),pie=a("strong"),Kgo=o("pegasus"),Zgo=o(" \u2014 "),tN=a("a"),eho=o("PegasusTokenizer"),oho=o(" or "),aN=a("a"),rho=o("PegasusTokenizerFast"),tho=o(" (Pegasus model)"),aho=l(),bh=a("li"),_ie=a("strong"),nho=o("perceiver"),sho=o(" \u2014 "),nN=a("a"),lho=o("PerceiverTokenizer"),iho=o(" (Perceiver model)"),dho=l(),vh=a("li"),uie=a("strong"),cho=o("phobert"),fho=o(" \u2014 "),sN=a("a"),mho=o("PhobertTokenizer"),gho=o(" (PhoBERT model)"),hho=l(),Fh=a("li"),bie=a("strong"),pho=o("plbart"),_ho=o(" \u2014 "),lN=a("a"),uho=o("PLBartTokenizer"),bho=o(" (PLBart model)"),vho=l(),Th=a("li"),vie=a("strong"),Fho=o("prophetnet"),Tho=o(" \u2014 "),iN=a("a"),Mho=o("ProphetNetTokenizer"),Eho=o(" (ProphetNet model)"),Cho=l(),ks=a("li"),Fie=a("strong"),who=o("qdqbert"),Aho=o(" \u2014 "),dN=a("a"),Lho=o("BertTokenizer"),yho=o(" or "),cN=a("a"),xho=o("BertTokenizerFast"),$ho=o(" (QDQBert model)"),kho=l(),Mh=a("li"),Tie=a("strong"),Sho=o("rag"),Rho=o(" \u2014 "),fN=a("a"),Pho=o("RagTokenizer"),Bho=o(" (RAG model)"),Iho=l(),Ss=a("li"),Mie=a("strong"),Nho=o("realm"),qho=o(" \u2014 "),mN=a("a"),jho=o("RealmTokenizer"),Dho=o(" or "),gN=a("a"),Gho=o("RealmTokenizerFast"),Oho=o(" (REALM model)"),Vho=l(),Rs=a("li"),Eie=a("strong"),Xho=o("reformer"),zho=o(" \u2014 "),hN=a("a"),Qho=o("ReformerTokenizer"),Who=o(" or "),pN=a("a"),Hho=o("ReformerTokenizerFast"),Uho=o(" (Reformer model)"),Jho=l(),Ps=a("li"),Cie=a("strong"),Yho=o("rembert"),Kho=o(" \u2014 "),_N=a("a"),Zho=o("RemBertTokenizer"),epo=o(" or "),uN=a("a"),opo=o("RemBertTokenizerFast"),rpo=o(" (RemBERT model)"),tpo=l(),Bs=a("li"),wie=a("strong"),apo=o("retribert"),npo=o(" \u2014 "),bN=a("a"),spo=o("RetriBertTokenizer"),lpo=o(" or "),vN=a("a"),ipo=o("RetriBertTokenizerFast"),dpo=o(" (RetriBERT model)"),cpo=l(),Is=a("li"),Aie=a("strong"),fpo=o("roberta"),mpo=o(" \u2014 "),FN=a("a"),gpo=o("RobertaTokenizer"),hpo=o(" or "),TN=a("a"),ppo=o("RobertaTokenizerFast"),_po=o(" (RoBERTa model)"),upo=l(),Ns=a("li"),Lie=a("strong"),bpo=o("roformer"),vpo=o(" \u2014 "),MN=a("a"),Fpo=o("RoFormerTokenizer"),Tpo=o(" or "),EN=a("a"),Mpo=o("RoFormerTokenizerFast"),Epo=o(" (RoFormer model)"),Cpo=l(),Eh=a("li"),yie=a("strong"),wpo=o("speech_to_text"),Apo=o(" \u2014 "),CN=a("a"),Lpo=o("Speech2TextTokenizer"),ypo=o(" (Speech2Text model)"),xpo=l(),Ch=a("li"),xie=a("strong"),$po=o("speech_to_text_2"),kpo=o(" \u2014 "),wN=a("a"),Spo=o("Speech2Text2Tokenizer"),Rpo=o(" (Speech2Text2 model)"),Ppo=l(),qs=a("li"),$ie=a("strong"),Bpo=o("splinter"),Ipo=o(" \u2014 "),AN=a("a"),Npo=o("SplinterTokenizer"),qpo=o(" or "),LN=a("a"),jpo=o("SplinterTokenizerFast"),Dpo=o(" (Splinter model)"),Gpo=l(),js=a("li"),kie=a("strong"),Opo=o("squeezebert"),Vpo=o(" \u2014 "),yN=a("a"),Xpo=o("SqueezeBertTokenizer"),zpo=o(" or "),xN=a("a"),Qpo=o("SqueezeBertTokenizerFast"),Wpo=o(" (SqueezeBERT model)"),Hpo=l(),Ds=a("li"),Sie=a("strong"),Upo=o("t5"),Jpo=o(" \u2014 "),$N=a("a"),Ypo=o("T5Tokenizer"),Kpo=o(" or "),kN=a("a"),Zpo=o("T5TokenizerFast"),e_o=o(" (T5 model)"),o_o=l(),wh=a("li"),Rie=a("strong"),r_o=o("tapas"),t_o=o(" \u2014 "),SN=a("a"),a_o=o("TapasTokenizer"),n_o=o(" (TAPAS model)"),s_o=l(),Ah=a("li"),Pie=a("strong"),l_o=o("tapex"),i_o=o(" \u2014 "),RN=a("a"),d_o=o("TapexTokenizer"),c_o=o(" (TAPEX model)"),f_o=l(),Lh=a("li"),Bie=a("strong"),m_o=o("transfo-xl"),g_o=o(" \u2014 "),PN=a("a"),h_o=o("TransfoXLTokenizer"),p_o=o(" (Transformer-XL model)"),__o=l(),Gs=a("li"),Iie=a("strong"),u_o=o("vilt"),b_o=o(" \u2014 "),BN=a("a"),v_o=o("BertTokenizer"),F_o=o(" or "),IN=a("a"),T_o=o("BertTokenizerFast"),M_o=o(" (ViLT model)"),E_o=l(),Os=a("li"),Nie=a("strong"),C_o=o("visual_bert"),w_o=o(" \u2014 "),NN=a("a"),A_o=o("BertTokenizer"),L_o=o(" or "),qN=a("a"),y_o=o("BertTokenizerFast"),x_o=o(" (VisualBERT model)"),$_o=l(),yh=a("li"),qie=a("strong"),k_o=o("wav2vec2"),S_o=o(" \u2014 "),jN=a("a"),R_o=o("Wav2Vec2CTCTokenizer"),P_o=o(" (Wav2Vec2 model)"),B_o=l(),xh=a("li"),jie=a("strong"),I_o=o("wav2vec2-conformer"),N_o=o(" \u2014 "),DN=a("a"),q_o=o("Wav2Vec2CTCTokenizer"),j_o=o(" (Wav2Vec2-Conformer model)"),D_o=l(),$h=a("li"),Die=a("strong"),G_o=o("wav2vec2_phoneme"),O_o=o(" \u2014 "),GN=a("a"),V_o=o("Wav2Vec2PhonemeCTCTokenizer"),X_o=o(" (Wav2Vec2Phoneme model)"),z_o=l(),Vs=a("li"),Gie=a("strong"),Q_o=o("xglm"),W_o=o(" \u2014 "),ON=a("a"),H_o=o("XGLMTokenizer"),U_o=o(" or "),VN=a("a"),J_o=o("XGLMTokenizerFast"),Y_o=o(" (XGLM model)"),K_o=l(),kh=a("li"),Oie=a("strong"),Z_o=o("xlm"),euo=o(" \u2014 "),XN=a("a"),ouo=o("XLMTokenizer"),ruo=o(" (XLM model)"),tuo=l(),Sh=a("li"),Vie=a("strong"),auo=o("xlm-prophetnet"),nuo=o(" \u2014 "),zN=a("a"),suo=o("XLMProphetNetTokenizer"),luo=o(" (XLM-ProphetNet model)"),iuo=l(),Xs=a("li"),Xie=a("strong"),duo=o("xlm-roberta"),cuo=o(" \u2014 "),QN=a("a"),fuo=o("XLMRobertaTokenizer"),muo=o(" or "),WN=a("a"),guo=o("XLMRobertaTokenizerFast"),huo=o(" (XLM-RoBERTa model)"),puo=l(),zs=a("li"),zie=a("strong"),_uo=o("xlm-roberta-xl"),uuo=o(" \u2014 "),HN=a("a"),buo=o("RobertaTokenizer"),vuo=o(" or "),UN=a("a"),Fuo=o("RobertaTokenizerFast"),Tuo=o(" (XLM-RoBERTa-XL model)"),Muo=l(),Qs=a("li"),Qie=a("strong"),Euo=o("xlnet"),Cuo=o(" \u2014 "),JN=a("a"),wuo=o("XLNetTokenizer"),Auo=o(" or "),YN=a("a"),Luo=o("XLNetTokenizerFast"),yuo=o(" (XLNet model)"),xuo=l(),Ws=a("li"),Wie=a("strong"),$uo=o("yoso"),kuo=o(" \u2014 "),KN=a("a"),Suo=o("AlbertTokenizer"),Ruo=o(" or "),ZN=a("a"),Puo=o("AlbertTokenizerFast"),Buo=o(" (YOSO model)"),Iuo=l(),F(Rh.$$.fragment),Nuo=l(),Ph=a("div"),F(EL.$$.fragment),quo=l(),Hie=a("p"),juo=o("Register a new tokenizer in this mapping."),wXe=l(),qi=a("h2"),Bh=a("a"),Uie=a("span"),F(CL.$$.fragment),Duo=l(),Jie=a("span"),Guo=o("AutoFeatureExtractor"),AXe=l(),yo=a("div"),F(wL.$$.fragment),Ouo=l(),AL=a("p"),Vuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=a("a"),Xuo=o("AutoFeatureExtractor.from_pretrained()"),zuo=o(" class method."),Quo=l(),LL=a("p"),Wuo=o("This class cannot be instantiated directly using "),Yie=a("code"),Huo=o("__init__()"),Uuo=o(" (throws an error)."),Juo=l(),Ue=a("div"),F(yL.$$.fragment),Yuo=l(),Kie=a("p"),Kuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zuo=l(),Ba=a("p"),e1o=o("The feature extractor class to instantiate is selected based on the "),Zie=a("code"),o1o=o("model_type"),r1o=o(` property of the config object
(either passed as an argument or loaded from `),ede=a("code"),t1o=o("pretrained_model_name_or_path"),a1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ode=a("code"),n1o=o("pretrained_model_name_or_path"),s1o=o(":"),l1o=l(),J=a("ul"),Ih=a("li"),rde=a("strong"),i1o=o("beit"),d1o=o(" \u2014 "),oq=a("a"),c1o=o("BeitFeatureExtractor"),f1o=o(" (BEiT model)"),m1o=l(),Nh=a("li"),tde=a("strong"),g1o=o("clip"),h1o=o(" \u2014 "),rq=a("a"),p1o=o("CLIPFeatureExtractor"),_1o=o(" (CLIP model)"),u1o=l(),qh=a("li"),ade=a("strong"),b1o=o("convnext"),v1o=o(" \u2014 "),tq=a("a"),F1o=o("ConvNextFeatureExtractor"),T1o=o(" (ConvNeXT model)"),M1o=l(),jh=a("li"),nde=a("strong"),E1o=o("cvt"),C1o=o(" \u2014 "),aq=a("a"),w1o=o("ConvNextFeatureExtractor"),A1o=o(" (CvT model)"),L1o=l(),Dh=a("li"),sde=a("strong"),y1o=o("data2vec-audio"),x1o=o(" \u2014 "),nq=a("a"),$1o=o("Wav2Vec2FeatureExtractor"),k1o=o(" (Data2VecAudio model)"),S1o=l(),Gh=a("li"),lde=a("strong"),R1o=o("data2vec-vision"),P1o=o(" \u2014 "),sq=a("a"),B1o=o("BeitFeatureExtractor"),I1o=o(" (Data2VecVision model)"),N1o=l(),Oh=a("li"),ide=a("strong"),q1o=o("deit"),j1o=o(" \u2014 "),lq=a("a"),D1o=o("DeiTFeatureExtractor"),G1o=o(" (DeiT model)"),O1o=l(),Vh=a("li"),dde=a("strong"),V1o=o("detr"),X1o=o(" \u2014 "),iq=a("a"),z1o=o("DetrFeatureExtractor"),Q1o=o(" (DETR model)"),W1o=l(),Xh=a("li"),cde=a("strong"),H1o=o("dpt"),U1o=o(" \u2014 "),dq=a("a"),J1o=o("DPTFeatureExtractor"),Y1o=o(" (DPT model)"),K1o=l(),zh=a("li"),fde=a("strong"),Z1o=o("flava"),e2o=o(" \u2014 "),cq=a("a"),o2o=o("FlavaFeatureExtractor"),r2o=o(" (FLAVA model)"),t2o=l(),Qh=a("li"),mde=a("strong"),a2o=o("glpn"),n2o=o(" \u2014 "),fq=a("a"),s2o=o("GLPNFeatureExtractor"),l2o=o(" (GLPN model)"),i2o=l(),Wh=a("li"),gde=a("strong"),d2o=o("groupvit"),c2o=o(" \u2014 "),mq=a("a"),f2o=o("CLIPFeatureExtractor"),m2o=o(" (GroupViT model)"),g2o=l(),Hh=a("li"),hde=a("strong"),h2o=o("hubert"),p2o=o(" \u2014 "),gq=a("a"),_2o=o("Wav2Vec2FeatureExtractor"),u2o=o(" (Hubert model)"),b2o=l(),Uh=a("li"),pde=a("strong"),v2o=o("imagegpt"),F2o=o(" \u2014 "),hq=a("a"),T2o=o("ImageGPTFeatureExtractor"),M2o=o(" (ImageGPT model)"),E2o=l(),Jh=a("li"),_de=a("strong"),C2o=o("layoutlmv2"),w2o=o(" \u2014 "),pq=a("a"),A2o=o("LayoutLMv2FeatureExtractor"),L2o=o(" (LayoutLMv2 model)"),y2o=l(),Yh=a("li"),ude=a("strong"),x2o=o("layoutlmv3"),$2o=o(" \u2014 "),_q=a("a"),k2o=o("LayoutLMv3FeatureExtractor"),S2o=o(" (LayoutLMv3 model)"),R2o=l(),Kh=a("li"),bde=a("strong"),P2o=o("levit"),B2o=o(" \u2014 "),uq=a("a"),I2o=o("LevitFeatureExtractor"),N2o=o(" (LeViT model)"),q2o=l(),Zh=a("li"),vde=a("strong"),j2o=o("maskformer"),D2o=o(" \u2014 "),bq=a("a"),G2o=o("MaskFormerFeatureExtractor"),O2o=o(" (MaskFormer model)"),V2o=l(),ep=a("li"),Fde=a("strong"),X2o=o("mctct"),z2o=o(" \u2014 "),vq=a("a"),Q2o=o("MCTCTFeatureExtractor"),W2o=o(" (M-CTC-T model)"),H2o=l(),op=a("li"),Tde=a("strong"),U2o=o("mobilevit"),J2o=o(" \u2014 "),Fq=a("a"),Y2o=o("MobileViTFeatureExtractor"),K2o=o(" (MobileViT model)"),Z2o=l(),rp=a("li"),Mde=a("strong"),e4o=o("perceiver"),o4o=o(" \u2014 "),Tq=a("a"),r4o=o("PerceiverFeatureExtractor"),t4o=o(" (Perceiver model)"),a4o=l(),tp=a("li"),Ede=a("strong"),n4o=o("poolformer"),s4o=o(" \u2014 "),Mq=a("a"),l4o=o("PoolFormerFeatureExtractor"),i4o=o(" (PoolFormer model)"),d4o=l(),ap=a("li"),Cde=a("strong"),c4o=o("regnet"),f4o=o(" \u2014 "),Eq=a("a"),m4o=o("ConvNextFeatureExtractor"),g4o=o(" (RegNet model)"),h4o=l(),np=a("li"),wde=a("strong"),p4o=o("resnet"),_4o=o(" \u2014 "),Cq=a("a"),u4o=o("ConvNextFeatureExtractor"),b4o=o(" (ResNet model)"),v4o=l(),sp=a("li"),Ade=a("strong"),F4o=o("segformer"),T4o=o(" \u2014 "),wq=a("a"),M4o=o("SegformerFeatureExtractor"),E4o=o(" (SegFormer model)"),C4o=l(),lp=a("li"),Lde=a("strong"),w4o=o("speech_to_text"),A4o=o(" \u2014 "),Aq=a("a"),L4o=o("Speech2TextFeatureExtractor"),y4o=o(" (Speech2Text model)"),x4o=l(),ip=a("li"),yde=a("strong"),$4o=o("swin"),k4o=o(" \u2014 "),Lq=a("a"),S4o=o("ViTFeatureExtractor"),R4o=o(" (Swin Transformer model)"),P4o=l(),dp=a("li"),xde=a("strong"),B4o=o("swinv2"),I4o=o(" \u2014 "),yq=a("a"),N4o=o("ViTFeatureExtractor"),q4o=o(" (Swin Transformer V2 model)"),j4o=l(),cp=a("li"),$de=a("strong"),D4o=o("van"),G4o=o(" \u2014 "),xq=a("a"),O4o=o("ConvNextFeatureExtractor"),V4o=o(" (VAN model)"),X4o=l(),fp=a("li"),kde=a("strong"),z4o=o("vilt"),Q4o=o(" \u2014 "),$q=a("a"),W4o=o("ViltFeatureExtractor"),H4o=o(" (ViLT model)"),U4o=l(),mp=a("li"),Sde=a("strong"),J4o=o("vit"),Y4o=o(" \u2014 "),kq=a("a"),K4o=o("ViTFeatureExtractor"),Z4o=o(" (ViT model)"),ebo=l(),gp=a("li"),Rde=a("strong"),obo=o("vit_mae"),rbo=o(" \u2014 "),Sq=a("a"),tbo=o("ViTFeatureExtractor"),abo=o(" (ViTMAE model)"),nbo=l(),hp=a("li"),Pde=a("strong"),sbo=o("wav2vec2"),lbo=o(" \u2014 "),Rq=a("a"),ibo=o("Wav2Vec2FeatureExtractor"),dbo=o(" (Wav2Vec2 model)"),cbo=l(),pp=a("li"),Bde=a("strong"),fbo=o("wav2vec2-conformer"),mbo=o(" \u2014 "),Pq=a("a"),gbo=o("Wav2Vec2FeatureExtractor"),hbo=o(" (Wav2Vec2-Conformer model)"),pbo=l(),_p=a("li"),Ide=a("strong"),_bo=o("yolos"),ubo=o(" \u2014 "),Bq=a("a"),bbo=o("YolosFeatureExtractor"),vbo=o(" (YOLOS model)"),Fbo=l(),F(up.$$.fragment),Tbo=l(),F(bp.$$.fragment),Mbo=l(),vp=a("div"),F(xL.$$.fragment),Ebo=l(),Nde=a("p"),Cbo=o("Register a new feature extractor for this class."),LXe=l(),ji=a("h2"),Fp=a("a"),qde=a("span"),F($L.$$.fragment),wbo=l(),jde=a("span"),Abo=o("AutoProcessor"),yXe=l(),xo=a("div"),F(kL.$$.fragment),Lbo=l(),SL=a("p"),ybo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Iq=a("a"),xbo=o("AutoProcessor.from_pretrained()"),$bo=o(" class method."),kbo=l(),RL=a("p"),Sbo=o("This class cannot be instantiated directly using "),Dde=a("code"),Rbo=o("__init__()"),Pbo=o(" (throws an error)."),Bbo=l(),Je=a("div"),F(PL.$$.fragment),Ibo=l(),Gde=a("p"),Nbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qbo=l(),Di=a("p"),jbo=o("The processor class to instantiate is selected based on the "),Ode=a("code"),Dbo=o("model_type"),Gbo=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),Obo=o("pretrained_model_name_or_path"),Vbo=o(" if possible):"),Xbo=l(),he=a("ul"),Tp=a("li"),Xde=a("strong"),zbo=o("clip"),Qbo=o(" \u2014 "),Nq=a("a"),Wbo=o("CLIPProcessor"),Hbo=o(" (CLIP model)"),Ubo=l(),Mp=a("li"),zde=a("strong"),Jbo=o("flava"),Ybo=o(" \u2014 "),Qde=a("code"),Kbo=o("FLAVAProcessor"),Zbo=o(" (FLAVA model)"),evo=l(),Ep=a("li"),Wde=a("strong"),ovo=o("groupvit"),rvo=o(" \u2014 "),qq=a("a"),tvo=o("CLIPProcessor"),avo=o(" (GroupViT model)"),nvo=l(),Cp=a("li"),Hde=a("strong"),svo=o("layoutlmv2"),lvo=o(" \u2014 "),jq=a("a"),ivo=o("LayoutLMv2Processor"),dvo=o(" (LayoutLMv2 model)"),cvo=l(),wp=a("li"),Ude=a("strong"),fvo=o("layoutlmv3"),mvo=o(" \u2014 "),Dq=a("a"),gvo=o("LayoutLMv3Processor"),hvo=o(" (LayoutLMv3 model)"),pvo=l(),Ap=a("li"),Jde=a("strong"),_vo=o("layoutxlm"),uvo=o(" \u2014 "),Gq=a("a"),bvo=o("LayoutXLMProcessor"),vvo=o(" (LayoutXLM model)"),Fvo=l(),Lp=a("li"),Yde=a("strong"),Tvo=o("sew"),Mvo=o(" \u2014 "),Oq=a("a"),Evo=o("Wav2Vec2Processor"),Cvo=o(" (SEW model)"),wvo=l(),yp=a("li"),Kde=a("strong"),Avo=o("sew-d"),Lvo=o(" \u2014 "),Vq=a("a"),yvo=o("Wav2Vec2Processor"),xvo=o(" (SEW-D model)"),$vo=l(),xp=a("li"),Zde=a("strong"),kvo=o("speech_to_text"),Svo=o(" \u2014 "),Xq=a("a"),Rvo=o("Speech2TextProcessor"),Pvo=o(" (Speech2Text model)"),Bvo=l(),$p=a("li"),ece=a("strong"),Ivo=o("speech_to_text_2"),Nvo=o(" \u2014 "),zq=a("a"),qvo=o("Speech2Text2Processor"),jvo=o(" (Speech2Text2 model)"),Dvo=l(),kp=a("li"),oce=a("strong"),Gvo=o("trocr"),Ovo=o(" \u2014 "),Qq=a("a"),Vvo=o("TrOCRProcessor"),Xvo=o(" (TrOCR model)"),zvo=l(),Sp=a("li"),rce=a("strong"),Qvo=o("unispeech"),Wvo=o(" \u2014 "),Wq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (UniSpeech model)"),Jvo=l(),Rp=a("li"),tce=a("strong"),Yvo=o("unispeech-sat"),Kvo=o(" \u2014 "),Hq=a("a"),Zvo=o("Wav2Vec2Processor"),eFo=o(" (UniSpeechSat model)"),oFo=l(),Pp=a("li"),ace=a("strong"),rFo=o("vilt"),tFo=o(" \u2014 "),Uq=a("a"),aFo=o("ViltProcessor"),nFo=o(" (ViLT model)"),sFo=l(),Bp=a("li"),nce=a("strong"),lFo=o("vision-text-dual-encoder"),iFo=o(" \u2014 "),Jq=a("a"),dFo=o("VisionTextDualEncoderProcessor"),cFo=o(" (VisionTextDualEncoder model)"),fFo=l(),Ip=a("li"),sce=a("strong"),mFo=o("wav2vec2"),gFo=o(" \u2014 "),Yq=a("a"),hFo=o("Wav2Vec2Processor"),pFo=o(" (Wav2Vec2 model)"),_Fo=l(),Np=a("li"),lce=a("strong"),uFo=o("wav2vec2-conformer"),bFo=o(" \u2014 "),Kq=a("a"),vFo=o("Wav2Vec2Processor"),FFo=o(" (Wav2Vec2-Conformer model)"),TFo=l(),qp=a("li"),ice=a("strong"),MFo=o("wavlm"),EFo=o(" \u2014 "),Zq=a("a"),CFo=o("Wav2Vec2Processor"),wFo=o(" (WavLM model)"),AFo=l(),F(jp.$$.fragment),LFo=l(),F(Dp.$$.fragment),yFo=l(),Gp=a("div"),F(BL.$$.fragment),xFo=l(),dce=a("p"),$Fo=o("Register a new processor for this class."),xXe=l(),Gi=a("h2"),Op=a("a"),cce=a("span"),F(IL.$$.fragment),kFo=l(),fce=a("span"),SFo=o("AutoModel"),$Xe=l(),$o=a("div"),F(NL.$$.fragment),RFo=l(),Oi=a("p"),PFo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ej=a("a"),BFo=o("from_pretrained()"),IFo=o(" class method or the "),oj=a("a"),NFo=o("from_config()"),qFo=o(` class
method.`),jFo=l(),qL=a("p"),DFo=o("This class cannot be instantiated directly using "),mce=a("code"),GFo=o("__init__()"),OFo=o(" (throws an error)."),VFo=l(),it=a("div"),F(jL.$$.fragment),XFo=l(),gce=a("p"),zFo=o("Instantiates one of the base model classes of the library from a configuration."),QFo=l(),Vi=a("p"),WFo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),HFo=o("not"),UFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=a("a"),JFo=o("from_pretrained()"),YFo=o(" to load the model weights."),KFo=l(),F(Vp.$$.fragment),ZFo=l(),Ye=a("div"),F(DL.$$.fragment),e6o=l(),pce=a("p"),o6o=o("Instantiate one of the base model classes of the library from a pretrained model."),r6o=l(),Ia=a("p"),t6o=o("The model class to instantiate is selected based on the "),_ce=a("code"),a6o=o("model_type"),n6o=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),s6o=o("pretrained_model_name_or_path"),l6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),i6o=o("pretrained_model_name_or_path"),d6o=o(":"),c6o=l(),y=a("ul"),Xp=a("li"),vce=a("strong"),f6o=o("albert"),m6o=o(" \u2014 "),tj=a("a"),g6o=o("AlbertModel"),h6o=o(" (ALBERT model)"),p6o=l(),zp=a("li"),Fce=a("strong"),_6o=o("bart"),u6o=o(" \u2014 "),aj=a("a"),b6o=o("BartModel"),v6o=o(" (BART model)"),F6o=l(),Qp=a("li"),Tce=a("strong"),T6o=o("beit"),M6o=o(" \u2014 "),nj=a("a"),E6o=o("BeitModel"),C6o=o(" (BEiT model)"),w6o=l(),Wp=a("li"),Mce=a("strong"),A6o=o("bert"),L6o=o(" \u2014 "),sj=a("a"),y6o=o("BertModel"),x6o=o(" (BERT model)"),$6o=l(),Hp=a("li"),Ece=a("strong"),k6o=o("bert-generation"),S6o=o(" \u2014 "),lj=a("a"),R6o=o("BertGenerationEncoder"),P6o=o(" (Bert Generation model)"),B6o=l(),Up=a("li"),Cce=a("strong"),I6o=o("big_bird"),N6o=o(" \u2014 "),ij=a("a"),q6o=o("BigBirdModel"),j6o=o(" (BigBird model)"),D6o=l(),Jp=a("li"),wce=a("strong"),G6o=o("bigbird_pegasus"),O6o=o(" \u2014 "),dj=a("a"),V6o=o("BigBirdPegasusModel"),X6o=o(" (BigBird-Pegasus model)"),z6o=l(),Yp=a("li"),Ace=a("strong"),Q6o=o("blenderbot"),W6o=o(" \u2014 "),cj=a("a"),H6o=o("BlenderbotModel"),U6o=o(" (Blenderbot model)"),J6o=l(),Kp=a("li"),Lce=a("strong"),Y6o=o("blenderbot-small"),K6o=o(" \u2014 "),fj=a("a"),Z6o=o("BlenderbotSmallModel"),eTo=o(" (BlenderbotSmall model)"),oTo=l(),Zp=a("li"),yce=a("strong"),rTo=o("bloom"),tTo=o(" \u2014 "),mj=a("a"),aTo=o("BloomModel"),nTo=o(" (BLOOM model)"),sTo=l(),e_=a("li"),xce=a("strong"),lTo=o("camembert"),iTo=o(" \u2014 "),gj=a("a"),dTo=o("CamembertModel"),cTo=o(" (CamemBERT model)"),fTo=l(),o_=a("li"),$ce=a("strong"),mTo=o("canine"),gTo=o(" \u2014 "),hj=a("a"),hTo=o("CanineModel"),pTo=o(" (CANINE model)"),_To=l(),r_=a("li"),kce=a("strong"),uTo=o("clip"),bTo=o(" \u2014 "),pj=a("a"),vTo=o("CLIPModel"),FTo=o(" (CLIP model)"),TTo=l(),t_=a("li"),Sce=a("strong"),MTo=o("codegen"),ETo=o(" \u2014 "),_j=a("a"),CTo=o("CodeGenModel"),wTo=o(" (CodeGen model)"),ATo=l(),a_=a("li"),Rce=a("strong"),LTo=o("convbert"),yTo=o(" \u2014 "),uj=a("a"),xTo=o("ConvBertModel"),$To=o(" (ConvBERT model)"),kTo=l(),n_=a("li"),Pce=a("strong"),STo=o("convnext"),RTo=o(" \u2014 "),bj=a("a"),PTo=o("ConvNextModel"),BTo=o(" (ConvNeXT model)"),ITo=l(),s_=a("li"),Bce=a("strong"),NTo=o("ctrl"),qTo=o(" \u2014 "),vj=a("a"),jTo=o("CTRLModel"),DTo=o(" (CTRL model)"),GTo=l(),l_=a("li"),Ice=a("strong"),OTo=o("cvt"),VTo=o(" \u2014 "),Fj=a("a"),XTo=o("CvtModel"),zTo=o(" (CvT model)"),QTo=l(),i_=a("li"),Nce=a("strong"),WTo=o("data2vec-audio"),HTo=o(" \u2014 "),Tj=a("a"),UTo=o("Data2VecAudioModel"),JTo=o(" (Data2VecAudio model)"),YTo=l(),d_=a("li"),qce=a("strong"),KTo=o("data2vec-text"),ZTo=o(" \u2014 "),Mj=a("a"),e7o=o("Data2VecTextModel"),o7o=o(" (Data2VecText model)"),r7o=l(),c_=a("li"),jce=a("strong"),t7o=o("data2vec-vision"),a7o=o(" \u2014 "),Ej=a("a"),n7o=o("Data2VecVisionModel"),s7o=o(" (Data2VecVision model)"),l7o=l(),f_=a("li"),Dce=a("strong"),i7o=o("deberta"),d7o=o(" \u2014 "),Cj=a("a"),c7o=o("DebertaModel"),f7o=o(" (DeBERTa model)"),m7o=l(),m_=a("li"),Gce=a("strong"),g7o=o("deberta-v2"),h7o=o(" \u2014 "),wj=a("a"),p7o=o("DebertaV2Model"),_7o=o(" (DeBERTa-v2 model)"),u7o=l(),g_=a("li"),Oce=a("strong"),b7o=o("decision_transformer"),v7o=o(" \u2014 "),Aj=a("a"),F7o=o("DecisionTransformerModel"),T7o=o(" (Decision Transformer model)"),M7o=l(),h_=a("li"),Vce=a("strong"),E7o=o("deit"),C7o=o(" \u2014 "),Lj=a("a"),w7o=o("DeiTModel"),A7o=o(" (DeiT model)"),L7o=l(),p_=a("li"),Xce=a("strong"),y7o=o("detr"),x7o=o(" \u2014 "),yj=a("a"),$7o=o("DetrModel"),k7o=o(" (DETR model)"),S7o=l(),__=a("li"),zce=a("strong"),R7o=o("distilbert"),P7o=o(" \u2014 "),xj=a("a"),B7o=o("DistilBertModel"),I7o=o(" (DistilBERT model)"),N7o=l(),u_=a("li"),Qce=a("strong"),q7o=o("dpr"),j7o=o(" \u2014 "),$j=a("a"),D7o=o("DPRQuestionEncoder"),G7o=o(" (DPR model)"),O7o=l(),b_=a("li"),Wce=a("strong"),V7o=o("dpt"),X7o=o(" \u2014 "),kj=a("a"),z7o=o("DPTModel"),Q7o=o(" (DPT model)"),W7o=l(),v_=a("li"),Hce=a("strong"),H7o=o("electra"),U7o=o(" \u2014 "),Sj=a("a"),J7o=o("ElectraModel"),Y7o=o(" (ELECTRA model)"),K7o=l(),F_=a("li"),Uce=a("strong"),Z7o=o("flaubert"),e9o=o(" \u2014 "),Rj=a("a"),o9o=o("FlaubertModel"),r9o=o(" (FlauBERT model)"),t9o=l(),T_=a("li"),Jce=a("strong"),a9o=o("flava"),n9o=o(" \u2014 "),Pj=a("a"),s9o=o("FlavaModel"),l9o=o(" (FLAVA model)"),i9o=l(),M_=a("li"),Yce=a("strong"),d9o=o("fnet"),c9o=o(" \u2014 "),Bj=a("a"),f9o=o("FNetModel"),m9o=o(" (FNet model)"),g9o=l(),E_=a("li"),Kce=a("strong"),h9o=o("fsmt"),p9o=o(" \u2014 "),Ij=a("a"),_9o=o("FSMTModel"),u9o=o(" (FairSeq Machine-Translation model)"),b9o=l(),Hs=a("li"),Zce=a("strong"),v9o=o("funnel"),F9o=o(" \u2014 "),Nj=a("a"),T9o=o("FunnelModel"),M9o=o(" or "),qj=a("a"),E9o=o("FunnelBaseModel"),C9o=o(" (Funnel Transformer model)"),w9o=l(),C_=a("li"),efe=a("strong"),A9o=o("glpn"),L9o=o(" \u2014 "),jj=a("a"),y9o=o("GLPNModel"),x9o=o(" (GLPN model)"),$9o=l(),w_=a("li"),ofe=a("strong"),k9o=o("gpt2"),S9o=o(" \u2014 "),Dj=a("a"),R9o=o("GPT2Model"),P9o=o(" (OpenAI GPT-2 model)"),B9o=l(),A_=a("li"),rfe=a("strong"),I9o=o("gpt_neo"),N9o=o(" \u2014 "),Gj=a("a"),q9o=o("GPTNeoModel"),j9o=o(" (GPT Neo model)"),D9o=l(),L_=a("li"),tfe=a("strong"),G9o=o("gpt_neox"),O9o=o(" \u2014 "),Oj=a("a"),V9o=o("GPTNeoXModel"),X9o=o(" (GPT NeoX model)"),z9o=l(),y_=a("li"),afe=a("strong"),Q9o=o("gptj"),W9o=o(" \u2014 "),Vj=a("a"),H9o=o("GPTJModel"),U9o=o(" (GPT-J model)"),J9o=l(),x_=a("li"),nfe=a("strong"),Y9o=o("groupvit"),K9o=o(" \u2014 "),Xj=a("a"),Z9o=o("GroupViTModel"),eMo=o(" (GroupViT model)"),oMo=l(),$_=a("li"),sfe=a("strong"),rMo=o("hubert"),tMo=o(" \u2014 "),zj=a("a"),aMo=o("HubertModel"),nMo=o(" (Hubert model)"),sMo=l(),k_=a("li"),lfe=a("strong"),lMo=o("ibert"),iMo=o(" \u2014 "),Qj=a("a"),dMo=o("IBertModel"),cMo=o(" (I-BERT model)"),fMo=l(),S_=a("li"),ife=a("strong"),mMo=o("imagegpt"),gMo=o(" \u2014 "),Wj=a("a"),hMo=o("ImageGPTModel"),pMo=o(" (ImageGPT model)"),_Mo=l(),R_=a("li"),dfe=a("strong"),uMo=o("layoutlm"),bMo=o(" \u2014 "),Hj=a("a"),vMo=o("LayoutLMModel"),FMo=o(" (LayoutLM model)"),TMo=l(),P_=a("li"),cfe=a("strong"),MMo=o("layoutlmv2"),EMo=o(" \u2014 "),Uj=a("a"),CMo=o("LayoutLMv2Model"),wMo=o(" (LayoutLMv2 model)"),AMo=l(),B_=a("li"),ffe=a("strong"),LMo=o("layoutlmv3"),yMo=o(" \u2014 "),Jj=a("a"),xMo=o("LayoutLMv3Model"),$Mo=o(" (LayoutLMv3 model)"),kMo=l(),I_=a("li"),mfe=a("strong"),SMo=o("led"),RMo=o(" \u2014 "),Yj=a("a"),PMo=o("LEDModel"),BMo=o(" (LED model)"),IMo=l(),N_=a("li"),gfe=a("strong"),NMo=o("levit"),qMo=o(" \u2014 "),Kj=a("a"),jMo=o("LevitModel"),DMo=o(" (LeViT model)"),GMo=l(),q_=a("li"),hfe=a("strong"),OMo=o("longformer"),VMo=o(" \u2014 "),Zj=a("a"),XMo=o("LongformerModel"),zMo=o(" (Longformer model)"),QMo=l(),j_=a("li"),pfe=a("strong"),WMo=o("longt5"),HMo=o(" \u2014 "),eD=a("a"),UMo=o("LongT5Model"),JMo=o(" (LongT5 model)"),YMo=l(),D_=a("li"),_fe=a("strong"),KMo=o("luke"),ZMo=o(" \u2014 "),oD=a("a"),eEo=o("LukeModel"),oEo=o(" (LUKE model)"),rEo=l(),G_=a("li"),ufe=a("strong"),tEo=o("lxmert"),aEo=o(" \u2014 "),rD=a("a"),nEo=o("LxmertModel"),sEo=o(" (LXMERT model)"),lEo=l(),O_=a("li"),bfe=a("strong"),iEo=o("m2m_100"),dEo=o(" \u2014 "),tD=a("a"),cEo=o("M2M100Model"),fEo=o(" (M2M100 model)"),mEo=l(),V_=a("li"),vfe=a("strong"),gEo=o("marian"),hEo=o(" \u2014 "),aD=a("a"),pEo=o("MarianModel"),_Eo=o(" (Marian model)"),uEo=l(),X_=a("li"),Ffe=a("strong"),bEo=o("maskformer"),vEo=o(" \u2014 "),nD=a("a"),FEo=o("MaskFormerModel"),TEo=o(" (MaskFormer model)"),MEo=l(),z_=a("li"),Tfe=a("strong"),EEo=o("mbart"),CEo=o(" \u2014 "),sD=a("a"),wEo=o("MBartModel"),AEo=o(" (mBART model)"),LEo=l(),Q_=a("li"),Mfe=a("strong"),yEo=o("mctct"),xEo=o(" \u2014 "),lD=a("a"),$Eo=o("MCTCTModel"),kEo=o(" (M-CTC-T model)"),SEo=l(),W_=a("li"),Efe=a("strong"),REo=o("megatron-bert"),PEo=o(" \u2014 "),iD=a("a"),BEo=o("MegatronBertModel"),IEo=o(" (Megatron-BERT model)"),NEo=l(),H_=a("li"),Cfe=a("strong"),qEo=o("mobilebert"),jEo=o(" \u2014 "),dD=a("a"),DEo=o("MobileBertModel"),GEo=o(" (MobileBERT model)"),OEo=l(),U_=a("li"),wfe=a("strong"),VEo=o("mobilevit"),XEo=o(" \u2014 "),cD=a("a"),zEo=o("MobileViTModel"),QEo=o(" (MobileViT model)"),WEo=l(),J_=a("li"),Afe=a("strong"),HEo=o("mpnet"),UEo=o(" \u2014 "),fD=a("a"),JEo=o("MPNetModel"),YEo=o(" (MPNet model)"),KEo=l(),Y_=a("li"),Lfe=a("strong"),ZEo=o("mt5"),eCo=o(" \u2014 "),mD=a("a"),oCo=o("MT5Model"),rCo=o(" (MT5 model)"),tCo=l(),K_=a("li"),yfe=a("strong"),aCo=o("mvp"),nCo=o(" \u2014 "),gD=a("a"),sCo=o("MvpModel"),lCo=o(" (MVP model)"),iCo=l(),Z_=a("li"),xfe=a("strong"),dCo=o("nezha"),cCo=o(" \u2014 "),hD=a("a"),fCo=o("NezhaModel"),mCo=o(" (Nezha model)"),gCo=l(),eu=a("li"),$fe=a("strong"),hCo=o("nystromformer"),pCo=o(" \u2014 "),pD=a("a"),_Co=o("NystromformerModel"),uCo=o(" (Nystr\xF6mformer model)"),bCo=l(),ou=a("li"),kfe=a("strong"),vCo=o("openai-gpt"),FCo=o(" \u2014 "),_D=a("a"),TCo=o("OpenAIGPTModel"),MCo=o(" (OpenAI GPT model)"),ECo=l(),ru=a("li"),Sfe=a("strong"),CCo=o("opt"),wCo=o(" \u2014 "),uD=a("a"),ACo=o("OPTModel"),LCo=o(" (OPT model)"),yCo=l(),tu=a("li"),Rfe=a("strong"),xCo=o("pegasus"),$Co=o(" \u2014 "),bD=a("a"),kCo=o("PegasusModel"),SCo=o(" (Pegasus model)"),RCo=l(),au=a("li"),Pfe=a("strong"),PCo=o("perceiver"),BCo=o(" \u2014 "),vD=a("a"),ICo=o("PerceiverModel"),NCo=o(" (Perceiver model)"),qCo=l(),nu=a("li"),Bfe=a("strong"),jCo=o("plbart"),DCo=o(" \u2014 "),FD=a("a"),GCo=o("PLBartModel"),OCo=o(" (PLBart model)"),VCo=l(),su=a("li"),Ife=a("strong"),XCo=o("poolformer"),zCo=o(" \u2014 "),TD=a("a"),QCo=o("PoolFormerModel"),WCo=o(" (PoolFormer model)"),HCo=l(),lu=a("li"),Nfe=a("strong"),UCo=o("prophetnet"),JCo=o(" \u2014 "),MD=a("a"),YCo=o("ProphetNetModel"),KCo=o(" (ProphetNet model)"),ZCo=l(),iu=a("li"),qfe=a("strong"),e3o=o("qdqbert"),o3o=o(" \u2014 "),ED=a("a"),r3o=o("QDQBertModel"),t3o=o(" (QDQBert model)"),a3o=l(),du=a("li"),jfe=a("strong"),n3o=o("reformer"),s3o=o(" \u2014 "),CD=a("a"),l3o=o("ReformerModel"),i3o=o(" (Reformer model)"),d3o=l(),cu=a("li"),Dfe=a("strong"),c3o=o("regnet"),f3o=o(" \u2014 "),wD=a("a"),m3o=o("RegNetModel"),g3o=o(" (RegNet model)"),h3o=l(),fu=a("li"),Gfe=a("strong"),p3o=o("rembert"),_3o=o(" \u2014 "),AD=a("a"),u3o=o("RemBertModel"),b3o=o(" (RemBERT model)"),v3o=l(),mu=a("li"),Ofe=a("strong"),F3o=o("resnet"),T3o=o(" \u2014 "),LD=a("a"),M3o=o("ResNetModel"),E3o=o(" (ResNet model)"),C3o=l(),gu=a("li"),Vfe=a("strong"),w3o=o("retribert"),A3o=o(" \u2014 "),yD=a("a"),L3o=o("RetriBertModel"),y3o=o(" (RetriBERT model)"),x3o=l(),hu=a("li"),Xfe=a("strong"),$3o=o("roberta"),k3o=o(" \u2014 "),xD=a("a"),S3o=o("RobertaModel"),R3o=o(" (RoBERTa model)"),P3o=l(),pu=a("li"),zfe=a("strong"),B3o=o("roformer"),I3o=o(" \u2014 "),$D=a("a"),N3o=o("RoFormerModel"),q3o=o(" (RoFormer model)"),j3o=l(),_u=a("li"),Qfe=a("strong"),D3o=o("segformer"),G3o=o(" \u2014 "),kD=a("a"),O3o=o("SegformerModel"),V3o=o(" (SegFormer model)"),X3o=l(),uu=a("li"),Wfe=a("strong"),z3o=o("sew"),Q3o=o(" \u2014 "),SD=a("a"),W3o=o("SEWModel"),H3o=o(" (SEW model)"),U3o=l(),bu=a("li"),Hfe=a("strong"),J3o=o("sew-d"),Y3o=o(" \u2014 "),RD=a("a"),K3o=o("SEWDModel"),Z3o=o(" (SEW-D model)"),e5o=l(),vu=a("li"),Ufe=a("strong"),o5o=o("speech_to_text"),r5o=o(" \u2014 "),PD=a("a"),t5o=o("Speech2TextModel"),a5o=o(" (Speech2Text model)"),n5o=l(),Fu=a("li"),Jfe=a("strong"),s5o=o("splinter"),l5o=o(" \u2014 "),BD=a("a"),i5o=o("SplinterModel"),d5o=o(" (Splinter model)"),c5o=l(),Tu=a("li"),Yfe=a("strong"),f5o=o("squeezebert"),m5o=o(" \u2014 "),ID=a("a"),g5o=o("SqueezeBertModel"),h5o=o(" (SqueezeBERT model)"),p5o=l(),Mu=a("li"),Kfe=a("strong"),_5o=o("swin"),u5o=o(" \u2014 "),ND=a("a"),b5o=o("SwinModel"),v5o=o(" (Swin Transformer model)"),F5o=l(),Eu=a("li"),Zfe=a("strong"),T5o=o("swinv2"),M5o=o(" \u2014 "),qD=a("a"),E5o=o("Swinv2Model"),C5o=o(" (Swin Transformer V2 model)"),w5o=l(),Cu=a("li"),eme=a("strong"),A5o=o("t5"),L5o=o(" \u2014 "),jD=a("a"),y5o=o("T5Model"),x5o=o(" (T5 model)"),$5o=l(),wu=a("li"),ome=a("strong"),k5o=o("tapas"),S5o=o(" \u2014 "),DD=a("a"),R5o=o("TapasModel"),P5o=o(" (TAPAS model)"),B5o=l(),Au=a("li"),rme=a("strong"),I5o=o("trajectory_transformer"),N5o=o(" \u2014 "),GD=a("a"),q5o=o("TrajectoryTransformerModel"),j5o=o(" (Trajectory Transformer model)"),D5o=l(),Lu=a("li"),tme=a("strong"),G5o=o("transfo-xl"),O5o=o(" \u2014 "),OD=a("a"),V5o=o("TransfoXLModel"),X5o=o(" (Transformer-XL model)"),z5o=l(),yu=a("li"),ame=a("strong"),Q5o=o("unispeech"),W5o=o(" \u2014 "),VD=a("a"),H5o=o("UniSpeechModel"),U5o=o(" (UniSpeech model)"),J5o=l(),xu=a("li"),nme=a("strong"),Y5o=o("unispeech-sat"),K5o=o(" \u2014 "),XD=a("a"),Z5o=o("UniSpeechSatModel"),e0o=o(" (UniSpeechSat model)"),o0o=l(),$u=a("li"),sme=a("strong"),r0o=o("van"),t0o=o(" \u2014 "),zD=a("a"),a0o=o("VanModel"),n0o=o(" (VAN model)"),s0o=l(),ku=a("li"),lme=a("strong"),l0o=o("vilt"),i0o=o(" \u2014 "),QD=a("a"),d0o=o("ViltModel"),c0o=o(" (ViLT model)"),f0o=l(),Su=a("li"),ime=a("strong"),m0o=o("vision-text-dual-encoder"),g0o=o(" \u2014 "),WD=a("a"),h0o=o("VisionTextDualEncoderModel"),p0o=o(" (VisionTextDualEncoder model)"),_0o=l(),Ru=a("li"),dme=a("strong"),u0o=o("visual_bert"),b0o=o(" \u2014 "),HD=a("a"),v0o=o("VisualBertModel"),F0o=o(" (VisualBERT model)"),T0o=l(),Pu=a("li"),cme=a("strong"),M0o=o("vit"),E0o=o(" \u2014 "),UD=a("a"),C0o=o("ViTModel"),w0o=o(" (ViT model)"),A0o=l(),Bu=a("li"),fme=a("strong"),L0o=o("vit_mae"),y0o=o(" \u2014 "),JD=a("a"),x0o=o("ViTMAEModel"),$0o=o(" (ViTMAE model)"),k0o=l(),Iu=a("li"),mme=a("strong"),S0o=o("wav2vec2"),R0o=o(" \u2014 "),YD=a("a"),P0o=o("Wav2Vec2Model"),B0o=o(" (Wav2Vec2 model)"),I0o=l(),Nu=a("li"),gme=a("strong"),N0o=o("wav2vec2-conformer"),q0o=o(" \u2014 "),KD=a("a"),j0o=o("Wav2Vec2ConformerModel"),D0o=o(" (Wav2Vec2-Conformer model)"),G0o=l(),qu=a("li"),hme=a("strong"),O0o=o("wavlm"),V0o=o(" \u2014 "),ZD=a("a"),X0o=o("WavLMModel"),z0o=o(" (WavLM model)"),Q0o=l(),ju=a("li"),pme=a("strong"),W0o=o("xglm"),H0o=o(" \u2014 "),eG=a("a"),U0o=o("XGLMModel"),J0o=o(" (XGLM model)"),Y0o=l(),Du=a("li"),_me=a("strong"),K0o=o("xlm"),Z0o=o(" \u2014 "),oG=a("a"),ewo=o("XLMModel"),owo=o(" (XLM model)"),rwo=l(),Gu=a("li"),ume=a("strong"),two=o("xlm-prophetnet"),awo=o(" \u2014 "),rG=a("a"),nwo=o("XLMProphetNetModel"),swo=o(" (XLM-ProphetNet model)"),lwo=l(),Ou=a("li"),bme=a("strong"),iwo=o("xlm-roberta"),dwo=o(" \u2014 "),tG=a("a"),cwo=o("XLMRobertaModel"),fwo=o(" (XLM-RoBERTa model)"),mwo=l(),Vu=a("li"),vme=a("strong"),gwo=o("xlm-roberta-xl"),hwo=o(" \u2014 "),aG=a("a"),pwo=o("XLMRobertaXLModel"),_wo=o(" (XLM-RoBERTa-XL model)"),uwo=l(),Xu=a("li"),Fme=a("strong"),bwo=o("xlnet"),vwo=o(" \u2014 "),nG=a("a"),Fwo=o("XLNetModel"),Two=o(" (XLNet model)"),Mwo=l(),zu=a("li"),Tme=a("strong"),Ewo=o("yolos"),Cwo=o(" \u2014 "),sG=a("a"),wwo=o("YolosModel"),Awo=o(" (YOLOS model)"),Lwo=l(),Qu=a("li"),Mme=a("strong"),ywo=o("yoso"),xwo=o(" \u2014 "),lG=a("a"),$wo=o("YosoModel"),kwo=o(" (YOSO model)"),Swo=l(),Wu=a("p"),Rwo=o("The model is set in evaluation mode by default using "),Eme=a("code"),Pwo=o("model.eval()"),Bwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=a("code"),Iwo=o("model.train()"),Nwo=l(),F(Hu.$$.fragment),kXe=l(),Xi=a("h2"),Uu=a("a"),wme=a("span"),F(GL.$$.fragment),qwo=l(),Ame=a("span"),jwo=o("AutoModelForPreTraining"),SXe=l(),ko=a("div"),F(OL.$$.fragment),Dwo=l(),zi=a("p"),Gwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iG=a("a"),Owo=o("from_pretrained()"),Vwo=o(" class method or the "),dG=a("a"),Xwo=o("from_config()"),zwo=o(` class
method.`),Qwo=l(),VL=a("p"),Wwo=o("This class cannot be instantiated directly using "),Lme=a("code"),Hwo=o("__init__()"),Uwo=o(" (throws an error)."),Jwo=l(),dt=a("div"),F(XL.$$.fragment),Ywo=l(),yme=a("p"),Kwo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Zwo=l(),Qi=a("p"),eAo=o(`Note:
Loading a model from its configuration file does `),xme=a("strong"),oAo=o("not"),rAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),tAo=o("from_pretrained()"),aAo=o(" to load the model weights."),nAo=l(),F(Ju.$$.fragment),sAo=l(),Ke=a("div"),F(zL.$$.fragment),lAo=l(),$me=a("p"),iAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dAo=l(),Na=a("p"),cAo=o("The model class to instantiate is selected based on the "),kme=a("code"),fAo=o("model_type"),mAo=o(` property of the config object (either
passed as an argument or loaded from `),Sme=a("code"),gAo=o("pretrained_model_name_or_path"),hAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),pAo=o("pretrained_model_name_or_path"),_Ao=o(":"),uAo=l(),G=a("ul"),Yu=a("li"),Pme=a("strong"),bAo=o("albert"),vAo=o(" \u2014 "),fG=a("a"),FAo=o("AlbertForPreTraining"),TAo=o(" (ALBERT model)"),MAo=l(),Ku=a("li"),Bme=a("strong"),EAo=o("bart"),CAo=o(" \u2014 "),mG=a("a"),wAo=o("BartForConditionalGeneration"),AAo=o(" (BART model)"),LAo=l(),Zu=a("li"),Ime=a("strong"),yAo=o("bert"),xAo=o(" \u2014 "),gG=a("a"),$Ao=o("BertForPreTraining"),kAo=o(" (BERT model)"),SAo=l(),e1=a("li"),Nme=a("strong"),RAo=o("big_bird"),PAo=o(" \u2014 "),hG=a("a"),BAo=o("BigBirdForPreTraining"),IAo=o(" (BigBird model)"),NAo=l(),o1=a("li"),qme=a("strong"),qAo=o("bloom"),jAo=o(" \u2014 "),pG=a("a"),DAo=o("BloomForCausalLM"),GAo=o(" (BLOOM model)"),OAo=l(),r1=a("li"),jme=a("strong"),VAo=o("camembert"),XAo=o(" \u2014 "),_G=a("a"),zAo=o("CamembertForMaskedLM"),QAo=o(" (CamemBERT model)"),WAo=l(),t1=a("li"),Dme=a("strong"),HAo=o("ctrl"),UAo=o(" \u2014 "),uG=a("a"),JAo=o("CTRLLMHeadModel"),YAo=o(" (CTRL model)"),KAo=l(),a1=a("li"),Gme=a("strong"),ZAo=o("data2vec-text"),eLo=o(" \u2014 "),bG=a("a"),oLo=o("Data2VecTextForMaskedLM"),rLo=o(" (Data2VecText model)"),tLo=l(),n1=a("li"),Ome=a("strong"),aLo=o("deberta"),nLo=o(" \u2014 "),vG=a("a"),sLo=o("DebertaForMaskedLM"),lLo=o(" (DeBERTa model)"),iLo=l(),s1=a("li"),Vme=a("strong"),dLo=o("deberta-v2"),cLo=o(" \u2014 "),FG=a("a"),fLo=o("DebertaV2ForMaskedLM"),mLo=o(" (DeBERTa-v2 model)"),gLo=l(),l1=a("li"),Xme=a("strong"),hLo=o("distilbert"),pLo=o(" \u2014 "),TG=a("a"),_Lo=o("DistilBertForMaskedLM"),uLo=o(" (DistilBERT model)"),bLo=l(),i1=a("li"),zme=a("strong"),vLo=o("electra"),FLo=o(" \u2014 "),MG=a("a"),TLo=o("ElectraForPreTraining"),MLo=o(" (ELECTRA model)"),ELo=l(),d1=a("li"),Qme=a("strong"),CLo=o("flaubert"),wLo=o(" \u2014 "),EG=a("a"),ALo=o("FlaubertWithLMHeadModel"),LLo=o(" (FlauBERT model)"),yLo=l(),c1=a("li"),Wme=a("strong"),xLo=o("flava"),$Lo=o(" \u2014 "),CG=a("a"),kLo=o("FlavaForPreTraining"),SLo=o(" (FLAVA model)"),RLo=l(),f1=a("li"),Hme=a("strong"),PLo=o("fnet"),BLo=o(" \u2014 "),wG=a("a"),ILo=o("FNetForPreTraining"),NLo=o(" (FNet model)"),qLo=l(),m1=a("li"),Ume=a("strong"),jLo=o("fsmt"),DLo=o(" \u2014 "),AG=a("a"),GLo=o("FSMTForConditionalGeneration"),OLo=o(" (FairSeq Machine-Translation model)"),VLo=l(),g1=a("li"),Jme=a("strong"),XLo=o("funnel"),zLo=o(" \u2014 "),LG=a("a"),QLo=o("FunnelForPreTraining"),WLo=o(" (Funnel Transformer model)"),HLo=l(),h1=a("li"),Yme=a("strong"),ULo=o("gpt2"),JLo=o(" \u2014 "),yG=a("a"),YLo=o("GPT2LMHeadModel"),KLo=o(" (OpenAI GPT-2 model)"),ZLo=l(),p1=a("li"),Kme=a("strong"),eyo=o("ibert"),oyo=o(" \u2014 "),xG=a("a"),ryo=o("IBertForMaskedLM"),tyo=o(" (I-BERT model)"),ayo=l(),_1=a("li"),Zme=a("strong"),nyo=o("layoutlm"),syo=o(" \u2014 "),$G=a("a"),lyo=o("LayoutLMForMaskedLM"),iyo=o(" (LayoutLM model)"),dyo=l(),u1=a("li"),ege=a("strong"),cyo=o("longformer"),fyo=o(" \u2014 "),kG=a("a"),myo=o("LongformerForMaskedLM"),gyo=o(" (Longformer model)"),hyo=l(),b1=a("li"),oge=a("strong"),pyo=o("lxmert"),_yo=o(" \u2014 "),SG=a("a"),uyo=o("LxmertForPreTraining"),byo=o(" (LXMERT model)"),vyo=l(),v1=a("li"),rge=a("strong"),Fyo=o("megatron-bert"),Tyo=o(" \u2014 "),RG=a("a"),Myo=o("MegatronBertForPreTraining"),Eyo=o(" (Megatron-BERT model)"),Cyo=l(),F1=a("li"),tge=a("strong"),wyo=o("mobilebert"),Ayo=o(" \u2014 "),PG=a("a"),Lyo=o("MobileBertForPreTraining"),yyo=o(" (MobileBERT model)"),xyo=l(),T1=a("li"),age=a("strong"),$yo=o("mpnet"),kyo=o(" \u2014 "),BG=a("a"),Syo=o("MPNetForMaskedLM"),Ryo=o(" (MPNet model)"),Pyo=l(),M1=a("li"),nge=a("strong"),Byo=o("mvp"),Iyo=o(" \u2014 "),IG=a("a"),Nyo=o("MvpForConditionalGeneration"),qyo=o(" (MVP model)"),jyo=l(),E1=a("li"),sge=a("strong"),Dyo=o("nezha"),Gyo=o(" \u2014 "),NG=a("a"),Oyo=o("NezhaForPreTraining"),Vyo=o(" (Nezha model)"),Xyo=l(),C1=a("li"),lge=a("strong"),zyo=o("openai-gpt"),Qyo=o(" \u2014 "),qG=a("a"),Wyo=o("OpenAIGPTLMHeadModel"),Hyo=o(" (OpenAI GPT model)"),Uyo=l(),w1=a("li"),ige=a("strong"),Jyo=o("retribert"),Yyo=o(" \u2014 "),jG=a("a"),Kyo=o("RetriBertModel"),Zyo=o(" (RetriBERT model)"),e8o=l(),A1=a("li"),dge=a("strong"),o8o=o("roberta"),r8o=o(" \u2014 "),DG=a("a"),t8o=o("RobertaForMaskedLM"),a8o=o(" (RoBERTa model)"),n8o=l(),L1=a("li"),cge=a("strong"),s8o=o("splinter"),l8o=o(" \u2014 "),GG=a("a"),i8o=o("SplinterForPreTraining"),d8o=o(" (Splinter model)"),c8o=l(),y1=a("li"),fge=a("strong"),f8o=o("squeezebert"),m8o=o(" \u2014 "),OG=a("a"),g8o=o("SqueezeBertForMaskedLM"),h8o=o(" (SqueezeBERT model)"),p8o=l(),x1=a("li"),mge=a("strong"),_8o=o("t5"),u8o=o(" \u2014 "),VG=a("a"),b8o=o("T5ForConditionalGeneration"),v8o=o(" (T5 model)"),F8o=l(),$1=a("li"),gge=a("strong"),T8o=o("tapas"),M8o=o(" \u2014 "),XG=a("a"),E8o=o("TapasForMaskedLM"),C8o=o(" (TAPAS model)"),w8o=l(),k1=a("li"),hge=a("strong"),A8o=o("transfo-xl"),L8o=o(" \u2014 "),zG=a("a"),y8o=o("TransfoXLLMHeadModel"),x8o=o(" (Transformer-XL model)"),$8o=l(),S1=a("li"),pge=a("strong"),k8o=o("unispeech"),S8o=o(" \u2014 "),QG=a("a"),R8o=o("UniSpeechForPreTraining"),P8o=o(" (UniSpeech model)"),B8o=l(),R1=a("li"),_ge=a("strong"),I8o=o("unispeech-sat"),N8o=o(" \u2014 "),WG=a("a"),q8o=o("UniSpeechSatForPreTraining"),j8o=o(" (UniSpeechSat model)"),D8o=l(),P1=a("li"),uge=a("strong"),G8o=o("visual_bert"),O8o=o(" \u2014 "),HG=a("a"),V8o=o("VisualBertForPreTraining"),X8o=o(" (VisualBERT model)"),z8o=l(),B1=a("li"),bge=a("strong"),Q8o=o("vit_mae"),W8o=o(" \u2014 "),UG=a("a"),H8o=o("ViTMAEForPreTraining"),U8o=o(" (ViTMAE model)"),J8o=l(),I1=a("li"),vge=a("strong"),Y8o=o("wav2vec2"),K8o=o(" \u2014 "),JG=a("a"),Z8o=o("Wav2Vec2ForPreTraining"),exo=o(" (Wav2Vec2 model)"),oxo=l(),N1=a("li"),Fge=a("strong"),rxo=o("wav2vec2-conformer"),txo=o(" \u2014 "),YG=a("a"),axo=o("Wav2Vec2ConformerForPreTraining"),nxo=o(" (Wav2Vec2-Conformer model)"),sxo=l(),q1=a("li"),Tge=a("strong"),lxo=o("xlm"),ixo=o(" \u2014 "),KG=a("a"),dxo=o("XLMWithLMHeadModel"),cxo=o(" (XLM model)"),fxo=l(),j1=a("li"),Mge=a("strong"),mxo=o("xlm-roberta"),gxo=o(" \u2014 "),ZG=a("a"),hxo=o("XLMRobertaForMaskedLM"),pxo=o(" (XLM-RoBERTa model)"),_xo=l(),D1=a("li"),Ege=a("strong"),uxo=o("xlm-roberta-xl"),bxo=o(" \u2014 "),eO=a("a"),vxo=o("XLMRobertaXLForMaskedLM"),Fxo=o(" (XLM-RoBERTa-XL model)"),Txo=l(),G1=a("li"),Cge=a("strong"),Mxo=o("xlnet"),Exo=o(" \u2014 "),oO=a("a"),Cxo=o("XLNetLMHeadModel"),wxo=o(" (XLNet model)"),Axo=l(),O1=a("p"),Lxo=o("The model is set in evaluation mode by default using "),wge=a("code"),yxo=o("model.eval()"),xxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=a("code"),$xo=o("model.train()"),kxo=l(),F(V1.$$.fragment),RXe=l(),Wi=a("h2"),X1=a("a"),Lge=a("span"),F(QL.$$.fragment),Sxo=l(),yge=a("span"),Rxo=o("AutoModelForCausalLM"),PXe=l(),So=a("div"),F(WL.$$.fragment),Pxo=l(),Hi=a("p"),Bxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rO=a("a"),Ixo=o("from_pretrained()"),Nxo=o(" class method or the "),tO=a("a"),qxo=o("from_config()"),jxo=o(` class
method.`),Dxo=l(),HL=a("p"),Gxo=o("This class cannot be instantiated directly using "),xge=a("code"),Oxo=o("__init__()"),Vxo=o(" (throws an error)."),Xxo=l(),ct=a("div"),F(UL.$$.fragment),zxo=l(),$ge=a("p"),Qxo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wxo=l(),Ui=a("p"),Hxo=o(`Note:
Loading a model from its configuration file does `),kge=a("strong"),Uxo=o("not"),Jxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),Yxo=o("from_pretrained()"),Kxo=o(" to load the model weights."),Zxo=l(),F(z1.$$.fragment),e$o=l(),Ze=a("div"),F(JL.$$.fragment),o$o=l(),Sge=a("p"),r$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t$o=l(),qa=a("p"),a$o=o("The model class to instantiate is selected based on the "),Rge=a("code"),n$o=o("model_type"),s$o=o(` property of the config object (either
passed as an argument or loaded from `),Pge=a("code"),l$o=o("pretrained_model_name_or_path"),i$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),d$o=o("pretrained_model_name_or_path"),c$o=o(":"),f$o=l(),z=a("ul"),Q1=a("li"),Ige=a("strong"),m$o=o("bart"),g$o=o(" \u2014 "),nO=a("a"),h$o=o("BartForCausalLM"),p$o=o(" (BART model)"),_$o=l(),W1=a("li"),Nge=a("strong"),u$o=o("bert"),b$o=o(" \u2014 "),sO=a("a"),v$o=o("BertLMHeadModel"),F$o=o(" (BERT model)"),T$o=l(),H1=a("li"),qge=a("strong"),M$o=o("bert-generation"),E$o=o(" \u2014 "),lO=a("a"),C$o=o("BertGenerationDecoder"),w$o=o(" (Bert Generation model)"),A$o=l(),U1=a("li"),jge=a("strong"),L$o=o("big_bird"),y$o=o(" \u2014 "),iO=a("a"),x$o=o("BigBirdForCausalLM"),$$o=o(" (BigBird model)"),k$o=l(),J1=a("li"),Dge=a("strong"),S$o=o("bigbird_pegasus"),R$o=o(" \u2014 "),dO=a("a"),P$o=o("BigBirdPegasusForCausalLM"),B$o=o(" (BigBird-Pegasus model)"),I$o=l(),Y1=a("li"),Gge=a("strong"),N$o=o("blenderbot"),q$o=o(" \u2014 "),cO=a("a"),j$o=o("BlenderbotForCausalLM"),D$o=o(" (Blenderbot model)"),G$o=l(),K1=a("li"),Oge=a("strong"),O$o=o("blenderbot-small"),V$o=o(" \u2014 "),fO=a("a"),X$o=o("BlenderbotSmallForCausalLM"),z$o=o(" (BlenderbotSmall model)"),Q$o=l(),Z1=a("li"),Vge=a("strong"),W$o=o("bloom"),H$o=o(" \u2014 "),mO=a("a"),U$o=o("BloomForCausalLM"),J$o=o(" (BLOOM model)"),Y$o=l(),e2=a("li"),Xge=a("strong"),K$o=o("camembert"),Z$o=o(" \u2014 "),gO=a("a"),eko=o("CamembertForCausalLM"),oko=o(" (CamemBERT model)"),rko=l(),o2=a("li"),zge=a("strong"),tko=o("codegen"),ako=o(" \u2014 "),hO=a("a"),nko=o("CodeGenForCausalLM"),sko=o(" (CodeGen model)"),lko=l(),r2=a("li"),Qge=a("strong"),iko=o("ctrl"),dko=o(" \u2014 "),pO=a("a"),cko=o("CTRLLMHeadModel"),fko=o(" (CTRL model)"),mko=l(),t2=a("li"),Wge=a("strong"),gko=o("data2vec-text"),hko=o(" \u2014 "),_O=a("a"),pko=o("Data2VecTextForCausalLM"),_ko=o(" (Data2VecText model)"),uko=l(),a2=a("li"),Hge=a("strong"),bko=o("electra"),vko=o(" \u2014 "),uO=a("a"),Fko=o("ElectraForCausalLM"),Tko=o(" (ELECTRA model)"),Mko=l(),n2=a("li"),Uge=a("strong"),Eko=o("gpt2"),Cko=o(" \u2014 "),bO=a("a"),wko=o("GPT2LMHeadModel"),Ako=o(" (OpenAI GPT-2 model)"),Lko=l(),s2=a("li"),Jge=a("strong"),yko=o("gpt_neo"),xko=o(" \u2014 "),vO=a("a"),$ko=o("GPTNeoForCausalLM"),kko=o(" (GPT Neo model)"),Sko=l(),l2=a("li"),Yge=a("strong"),Rko=o("gpt_neox"),Pko=o(" \u2014 "),FO=a("a"),Bko=o("GPTNeoXForCausalLM"),Iko=o(" (GPT NeoX model)"),Nko=l(),i2=a("li"),Kge=a("strong"),qko=o("gptj"),jko=o(" \u2014 "),TO=a("a"),Dko=o("GPTJForCausalLM"),Gko=o(" (GPT-J model)"),Oko=l(),d2=a("li"),Zge=a("strong"),Vko=o("marian"),Xko=o(" \u2014 "),MO=a("a"),zko=o("MarianForCausalLM"),Qko=o(" (Marian model)"),Wko=l(),c2=a("li"),ehe=a("strong"),Hko=o("mbart"),Uko=o(" \u2014 "),EO=a("a"),Jko=o("MBartForCausalLM"),Yko=o(" (mBART model)"),Kko=l(),f2=a("li"),ohe=a("strong"),Zko=o("megatron-bert"),eSo=o(" \u2014 "),CO=a("a"),oSo=o("MegatronBertForCausalLM"),rSo=o(" (Megatron-BERT model)"),tSo=l(),m2=a("li"),rhe=a("strong"),aSo=o("mvp"),nSo=o(" \u2014 "),wO=a("a"),sSo=o("MvpForCausalLM"),lSo=o(" (MVP model)"),iSo=l(),g2=a("li"),the=a("strong"),dSo=o("openai-gpt"),cSo=o(" \u2014 "),AO=a("a"),fSo=o("OpenAIGPTLMHeadModel"),mSo=o(" (OpenAI GPT model)"),gSo=l(),h2=a("li"),ahe=a("strong"),hSo=o("opt"),pSo=o(" \u2014 "),LO=a("a"),_So=o("OPTForCausalLM"),uSo=o(" (OPT model)"),bSo=l(),p2=a("li"),nhe=a("strong"),vSo=o("pegasus"),FSo=o(" \u2014 "),yO=a("a"),TSo=o("PegasusForCausalLM"),MSo=o(" (Pegasus model)"),ESo=l(),_2=a("li"),she=a("strong"),CSo=o("plbart"),wSo=o(" \u2014 "),xO=a("a"),ASo=o("PLBartForCausalLM"),LSo=o(" (PLBart model)"),ySo=l(),u2=a("li"),lhe=a("strong"),xSo=o("prophetnet"),$So=o(" \u2014 "),$O=a("a"),kSo=o("ProphetNetForCausalLM"),SSo=o(" (ProphetNet model)"),RSo=l(),b2=a("li"),ihe=a("strong"),PSo=o("qdqbert"),BSo=o(" \u2014 "),kO=a("a"),ISo=o("QDQBertLMHeadModel"),NSo=o(" (QDQBert model)"),qSo=l(),v2=a("li"),dhe=a("strong"),jSo=o("reformer"),DSo=o(" \u2014 "),SO=a("a"),GSo=o("ReformerModelWithLMHead"),OSo=o(" (Reformer model)"),VSo=l(),F2=a("li"),che=a("strong"),XSo=o("rembert"),zSo=o(" \u2014 "),RO=a("a"),QSo=o("RemBertForCausalLM"),WSo=o(" (RemBERT model)"),HSo=l(),T2=a("li"),fhe=a("strong"),USo=o("roberta"),JSo=o(" \u2014 "),PO=a("a"),YSo=o("RobertaForCausalLM"),KSo=o(" (RoBERTa model)"),ZSo=l(),M2=a("li"),mhe=a("strong"),eRo=o("roformer"),oRo=o(" \u2014 "),BO=a("a"),rRo=o("RoFormerForCausalLM"),tRo=o(" (RoFormer model)"),aRo=l(),E2=a("li"),ghe=a("strong"),nRo=o("speech_to_text_2"),sRo=o(" \u2014 "),IO=a("a"),lRo=o("Speech2Text2ForCausalLM"),iRo=o(" (Speech2Text2 model)"),dRo=l(),C2=a("li"),hhe=a("strong"),cRo=o("transfo-xl"),fRo=o(" \u2014 "),NO=a("a"),mRo=o("TransfoXLLMHeadModel"),gRo=o(" (Transformer-XL model)"),hRo=l(),w2=a("li"),phe=a("strong"),pRo=o("trocr"),_Ro=o(" \u2014 "),qO=a("a"),uRo=o("TrOCRForCausalLM"),bRo=o(" (TrOCR model)"),vRo=l(),A2=a("li"),_he=a("strong"),FRo=o("xglm"),TRo=o(" \u2014 "),jO=a("a"),MRo=o("XGLMForCausalLM"),ERo=o(" (XGLM model)"),CRo=l(),L2=a("li"),uhe=a("strong"),wRo=o("xlm"),ARo=o(" \u2014 "),DO=a("a"),LRo=o("XLMWithLMHeadModel"),yRo=o(" (XLM model)"),xRo=l(),y2=a("li"),bhe=a("strong"),$Ro=o("xlm-prophetnet"),kRo=o(" \u2014 "),GO=a("a"),SRo=o("XLMProphetNetForCausalLM"),RRo=o(" (XLM-ProphetNet model)"),PRo=l(),x2=a("li"),vhe=a("strong"),BRo=o("xlm-roberta"),IRo=o(" \u2014 "),OO=a("a"),NRo=o("XLMRobertaForCausalLM"),qRo=o(" (XLM-RoBERTa model)"),jRo=l(),$2=a("li"),Fhe=a("strong"),DRo=o("xlm-roberta-xl"),GRo=o(" \u2014 "),VO=a("a"),ORo=o("XLMRobertaXLForCausalLM"),VRo=o(" (XLM-RoBERTa-XL model)"),XRo=l(),k2=a("li"),The=a("strong"),zRo=o("xlnet"),QRo=o(" \u2014 "),XO=a("a"),WRo=o("XLNetLMHeadModel"),HRo=o(" (XLNet model)"),URo=l(),S2=a("p"),JRo=o("The model is set in evaluation mode by default using "),Mhe=a("code"),YRo=o("model.eval()"),KRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=a("code"),ZRo=o("model.train()"),ePo=l(),F(R2.$$.fragment),BXe=l(),Ji=a("h2"),P2=a("a"),Che=a("span"),F(YL.$$.fragment),oPo=l(),whe=a("span"),rPo=o("AutoModelForMaskedLM"),IXe=l(),Ro=a("div"),F(KL.$$.fragment),tPo=l(),Yi=a("p"),aPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zO=a("a"),nPo=o("from_pretrained()"),sPo=o(" class method or the "),QO=a("a"),lPo=o("from_config()"),iPo=o(` class
method.`),dPo=l(),ZL=a("p"),cPo=o("This class cannot be instantiated directly using "),Ahe=a("code"),fPo=o("__init__()"),mPo=o(" (throws an error)."),gPo=l(),ft=a("div"),F(ey.$$.fragment),hPo=l(),Lhe=a("p"),pPo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Po=l(),Ki=a("p"),uPo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),bPo=o("not"),vPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),FPo=o("from_pretrained()"),TPo=o(" to load the model weights."),MPo=l(),F(B2.$$.fragment),EPo=l(),eo=a("div"),F(oy.$$.fragment),CPo=l(),xhe=a("p"),wPo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),APo=l(),ja=a("p"),LPo=o("The model class to instantiate is selected based on the "),$he=a("code"),yPo=o("model_type"),xPo=o(` property of the config object (either
passed as an argument or loaded from `),khe=a("code"),$Po=o("pretrained_model_name_or_path"),kPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),SPo=o("pretrained_model_name_or_path"),RPo=o(":"),PPo=l(),W=a("ul"),I2=a("li"),Rhe=a("strong"),BPo=o("albert"),IPo=o(" \u2014 "),HO=a("a"),NPo=o("AlbertForMaskedLM"),qPo=o(" (ALBERT model)"),jPo=l(),N2=a("li"),Phe=a("strong"),DPo=o("bart"),GPo=o(" \u2014 "),UO=a("a"),OPo=o("BartForConditionalGeneration"),VPo=o(" (BART model)"),XPo=l(),q2=a("li"),Bhe=a("strong"),zPo=o("bert"),QPo=o(" \u2014 "),JO=a("a"),WPo=o("BertForMaskedLM"),HPo=o(" (BERT model)"),UPo=l(),j2=a("li"),Ihe=a("strong"),JPo=o("big_bird"),YPo=o(" \u2014 "),YO=a("a"),KPo=o("BigBirdForMaskedLM"),ZPo=o(" (BigBird model)"),eBo=l(),D2=a("li"),Nhe=a("strong"),oBo=o("camembert"),rBo=o(" \u2014 "),KO=a("a"),tBo=o("CamembertForMaskedLM"),aBo=o(" (CamemBERT model)"),nBo=l(),G2=a("li"),qhe=a("strong"),sBo=o("convbert"),lBo=o(" \u2014 "),ZO=a("a"),iBo=o("ConvBertForMaskedLM"),dBo=o(" (ConvBERT model)"),cBo=l(),O2=a("li"),jhe=a("strong"),fBo=o("data2vec-text"),mBo=o(" \u2014 "),eV=a("a"),gBo=o("Data2VecTextForMaskedLM"),hBo=o(" (Data2VecText model)"),pBo=l(),V2=a("li"),Dhe=a("strong"),_Bo=o("deberta"),uBo=o(" \u2014 "),oV=a("a"),bBo=o("DebertaForMaskedLM"),vBo=o(" (DeBERTa model)"),FBo=l(),X2=a("li"),Ghe=a("strong"),TBo=o("deberta-v2"),MBo=o(" \u2014 "),rV=a("a"),EBo=o("DebertaV2ForMaskedLM"),CBo=o(" (DeBERTa-v2 model)"),wBo=l(),z2=a("li"),Ohe=a("strong"),ABo=o("distilbert"),LBo=o(" \u2014 "),tV=a("a"),yBo=o("DistilBertForMaskedLM"),xBo=o(" (DistilBERT model)"),$Bo=l(),Q2=a("li"),Vhe=a("strong"),kBo=o("electra"),SBo=o(" \u2014 "),aV=a("a"),RBo=o("ElectraForMaskedLM"),PBo=o(" (ELECTRA model)"),BBo=l(),W2=a("li"),Xhe=a("strong"),IBo=o("flaubert"),NBo=o(" \u2014 "),nV=a("a"),qBo=o("FlaubertWithLMHeadModel"),jBo=o(" (FlauBERT model)"),DBo=l(),H2=a("li"),zhe=a("strong"),GBo=o("fnet"),OBo=o(" \u2014 "),sV=a("a"),VBo=o("FNetForMaskedLM"),XBo=o(" (FNet model)"),zBo=l(),U2=a("li"),Qhe=a("strong"),QBo=o("funnel"),WBo=o(" \u2014 "),lV=a("a"),HBo=o("FunnelForMaskedLM"),UBo=o(" (Funnel Transformer model)"),JBo=l(),J2=a("li"),Whe=a("strong"),YBo=o("ibert"),KBo=o(" \u2014 "),iV=a("a"),ZBo=o("IBertForMaskedLM"),eIo=o(" (I-BERT model)"),oIo=l(),Y2=a("li"),Hhe=a("strong"),rIo=o("layoutlm"),tIo=o(" \u2014 "),dV=a("a"),aIo=o("LayoutLMForMaskedLM"),nIo=o(" (LayoutLM model)"),sIo=l(),K2=a("li"),Uhe=a("strong"),lIo=o("longformer"),iIo=o(" \u2014 "),cV=a("a"),dIo=o("LongformerForMaskedLM"),cIo=o(" (Longformer model)"),fIo=l(),Z2=a("li"),Jhe=a("strong"),mIo=o("luke"),gIo=o(" \u2014 "),fV=a("a"),hIo=o("LukeForMaskedLM"),pIo=o(" (LUKE model)"),_Io=l(),e4=a("li"),Yhe=a("strong"),uIo=o("mbart"),bIo=o(" \u2014 "),mV=a("a"),vIo=o("MBartForConditionalGeneration"),FIo=o(" (mBART model)"),TIo=l(),o4=a("li"),Khe=a("strong"),MIo=o("megatron-bert"),EIo=o(" \u2014 "),gV=a("a"),CIo=o("MegatronBertForMaskedLM"),wIo=o(" (Megatron-BERT model)"),AIo=l(),r4=a("li"),Zhe=a("strong"),LIo=o("mobilebert"),yIo=o(" \u2014 "),hV=a("a"),xIo=o("MobileBertForMaskedLM"),$Io=o(" (MobileBERT model)"),kIo=l(),t4=a("li"),epe=a("strong"),SIo=o("mpnet"),RIo=o(" \u2014 "),pV=a("a"),PIo=o("MPNetForMaskedLM"),BIo=o(" (MPNet model)"),IIo=l(),a4=a("li"),ope=a("strong"),NIo=o("mvp"),qIo=o(" \u2014 "),_V=a("a"),jIo=o("MvpForConditionalGeneration"),DIo=o(" (MVP model)"),GIo=l(),n4=a("li"),rpe=a("strong"),OIo=o("nezha"),VIo=o(" \u2014 "),uV=a("a"),XIo=o("NezhaForMaskedLM"),zIo=o(" (Nezha model)"),QIo=l(),s4=a("li"),tpe=a("strong"),WIo=o("nystromformer"),HIo=o(" \u2014 "),bV=a("a"),UIo=o("NystromformerForMaskedLM"),JIo=o(" (Nystr\xF6mformer model)"),YIo=l(),l4=a("li"),ape=a("strong"),KIo=o("perceiver"),ZIo=o(" \u2014 "),vV=a("a"),eNo=o("PerceiverForMaskedLM"),oNo=o(" (Perceiver model)"),rNo=l(),i4=a("li"),npe=a("strong"),tNo=o("qdqbert"),aNo=o(" \u2014 "),FV=a("a"),nNo=o("QDQBertForMaskedLM"),sNo=o(" (QDQBert model)"),lNo=l(),d4=a("li"),spe=a("strong"),iNo=o("reformer"),dNo=o(" \u2014 "),TV=a("a"),cNo=o("ReformerForMaskedLM"),fNo=o(" (Reformer model)"),mNo=l(),c4=a("li"),lpe=a("strong"),gNo=o("rembert"),hNo=o(" \u2014 "),MV=a("a"),pNo=o("RemBertForMaskedLM"),_No=o(" (RemBERT model)"),uNo=l(),f4=a("li"),ipe=a("strong"),bNo=o("roberta"),vNo=o(" \u2014 "),EV=a("a"),FNo=o("RobertaForMaskedLM"),TNo=o(" (RoBERTa model)"),MNo=l(),m4=a("li"),dpe=a("strong"),ENo=o("roformer"),CNo=o(" \u2014 "),CV=a("a"),wNo=o("RoFormerForMaskedLM"),ANo=o(" (RoFormer model)"),LNo=l(),g4=a("li"),cpe=a("strong"),yNo=o("squeezebert"),xNo=o(" \u2014 "),wV=a("a"),$No=o("SqueezeBertForMaskedLM"),kNo=o(" (SqueezeBERT model)"),SNo=l(),h4=a("li"),fpe=a("strong"),RNo=o("tapas"),PNo=o(" \u2014 "),AV=a("a"),BNo=o("TapasForMaskedLM"),INo=o(" (TAPAS model)"),NNo=l(),p4=a("li"),mpe=a("strong"),qNo=o("wav2vec2"),jNo=o(" \u2014 "),gpe=a("code"),DNo=o("Wav2Vec2ForMaskedLM"),GNo=o(" (Wav2Vec2 model)"),ONo=l(),_4=a("li"),hpe=a("strong"),VNo=o("xlm"),XNo=o(" \u2014 "),LV=a("a"),zNo=o("XLMWithLMHeadModel"),QNo=o(" (XLM model)"),WNo=l(),u4=a("li"),ppe=a("strong"),HNo=o("xlm-roberta"),UNo=o(" \u2014 "),yV=a("a"),JNo=o("XLMRobertaForMaskedLM"),YNo=o(" (XLM-RoBERTa model)"),KNo=l(),b4=a("li"),_pe=a("strong"),ZNo=o("xlm-roberta-xl"),eqo=o(" \u2014 "),xV=a("a"),oqo=o("XLMRobertaXLForMaskedLM"),rqo=o(" (XLM-RoBERTa-XL model)"),tqo=l(),v4=a("li"),upe=a("strong"),aqo=o("yoso"),nqo=o(" \u2014 "),$V=a("a"),sqo=o("YosoForMaskedLM"),lqo=o(" (YOSO model)"),iqo=l(),F4=a("p"),dqo=o("The model is set in evaluation mode by default using "),bpe=a("code"),cqo=o("model.eval()"),fqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),mqo=o("model.train()"),gqo=l(),F(T4.$$.fragment),NXe=l(),Zi=a("h2"),M4=a("a"),Fpe=a("span"),F(ry.$$.fragment),hqo=l(),Tpe=a("span"),pqo=o("AutoModelForSeq2SeqLM"),qXe=l(),Po=a("div"),F(ty.$$.fragment),_qo=l(),ed=a("p"),uqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kV=a("a"),bqo=o("from_pretrained()"),vqo=o(" class method or the "),SV=a("a"),Fqo=o("from_config()"),Tqo=o(` class
method.`),Mqo=l(),ay=a("p"),Eqo=o("This class cannot be instantiated directly using "),Mpe=a("code"),Cqo=o("__init__()"),wqo=o(" (throws an error)."),Aqo=l(),mt=a("div"),F(ny.$$.fragment),Lqo=l(),Epe=a("p"),yqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xqo=l(),od=a("p"),$qo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),kqo=o("not"),Sqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),Rqo=o("from_pretrained()"),Pqo=o(" to load the model weights."),Bqo=l(),F(E4.$$.fragment),Iqo=l(),oo=a("div"),F(sy.$$.fragment),Nqo=l(),wpe=a("p"),qqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jqo=l(),Da=a("p"),Dqo=o("The model class to instantiate is selected based on the "),Ape=a("code"),Gqo=o("model_type"),Oqo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),Vqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),zqo=o("pretrained_model_name_or_path"),Qqo=o(":"),Wqo=l(),pe=a("ul"),C4=a("li"),xpe=a("strong"),Hqo=o("bart"),Uqo=o(" \u2014 "),PV=a("a"),Jqo=o("BartForConditionalGeneration"),Yqo=o(" (BART model)"),Kqo=l(),w4=a("li"),$pe=a("strong"),Zqo=o("bigbird_pegasus"),ejo=o(" \u2014 "),BV=a("a"),ojo=o("BigBirdPegasusForConditionalGeneration"),rjo=o(" (BigBird-Pegasus model)"),tjo=l(),A4=a("li"),kpe=a("strong"),ajo=o("blenderbot"),njo=o(" \u2014 "),IV=a("a"),sjo=o("BlenderbotForConditionalGeneration"),ljo=o(" (Blenderbot model)"),ijo=l(),L4=a("li"),Spe=a("strong"),djo=o("blenderbot-small"),cjo=o(" \u2014 "),NV=a("a"),fjo=o("BlenderbotSmallForConditionalGeneration"),mjo=o(" (BlenderbotSmall model)"),gjo=l(),y4=a("li"),Rpe=a("strong"),hjo=o("encoder-decoder"),pjo=o(" \u2014 "),qV=a("a"),_jo=o("EncoderDecoderModel"),ujo=o(" (Encoder decoder model)"),bjo=l(),x4=a("li"),Ppe=a("strong"),vjo=o("fsmt"),Fjo=o(" \u2014 "),jV=a("a"),Tjo=o("FSMTForConditionalGeneration"),Mjo=o(" (FairSeq Machine-Translation model)"),Ejo=l(),$4=a("li"),Bpe=a("strong"),Cjo=o("led"),wjo=o(" \u2014 "),DV=a("a"),Ajo=o("LEDForConditionalGeneration"),Ljo=o(" (LED model)"),yjo=l(),k4=a("li"),Ipe=a("strong"),xjo=o("longt5"),$jo=o(" \u2014 "),GV=a("a"),kjo=o("LongT5ForConditionalGeneration"),Sjo=o(" (LongT5 model)"),Rjo=l(),S4=a("li"),Npe=a("strong"),Pjo=o("m2m_100"),Bjo=o(" \u2014 "),OV=a("a"),Ijo=o("M2M100ForConditionalGeneration"),Njo=o(" (M2M100 model)"),qjo=l(),R4=a("li"),qpe=a("strong"),jjo=o("marian"),Djo=o(" \u2014 "),VV=a("a"),Gjo=o("MarianMTModel"),Ojo=o(" (Marian model)"),Vjo=l(),P4=a("li"),jpe=a("strong"),Xjo=o("mbart"),zjo=o(" \u2014 "),XV=a("a"),Qjo=o("MBartForConditionalGeneration"),Wjo=o(" (mBART model)"),Hjo=l(),B4=a("li"),Dpe=a("strong"),Ujo=o("mt5"),Jjo=o(" \u2014 "),zV=a("a"),Yjo=o("MT5ForConditionalGeneration"),Kjo=o(" (MT5 model)"),Zjo=l(),I4=a("li"),Gpe=a("strong"),eDo=o("mvp"),oDo=o(" \u2014 "),QV=a("a"),rDo=o("MvpForConditionalGeneration"),tDo=o(" (MVP model)"),aDo=l(),N4=a("li"),Ope=a("strong"),nDo=o("pegasus"),sDo=o(" \u2014 "),WV=a("a"),lDo=o("PegasusForConditionalGeneration"),iDo=o(" (Pegasus model)"),dDo=l(),q4=a("li"),Vpe=a("strong"),cDo=o("plbart"),fDo=o(" \u2014 "),HV=a("a"),mDo=o("PLBartForConditionalGeneration"),gDo=o(" (PLBart model)"),hDo=l(),j4=a("li"),Xpe=a("strong"),pDo=o("prophetnet"),_Do=o(" \u2014 "),UV=a("a"),uDo=o("ProphetNetForConditionalGeneration"),bDo=o(" (ProphetNet model)"),vDo=l(),D4=a("li"),zpe=a("strong"),FDo=o("t5"),TDo=o(" \u2014 "),JV=a("a"),MDo=o("T5ForConditionalGeneration"),EDo=o(" (T5 model)"),CDo=l(),G4=a("li"),Qpe=a("strong"),wDo=o("xlm-prophetnet"),ADo=o(" \u2014 "),YV=a("a"),LDo=o("XLMProphetNetForConditionalGeneration"),yDo=o(" (XLM-ProphetNet model)"),xDo=l(),O4=a("p"),$Do=o("The model is set in evaluation mode by default using "),Wpe=a("code"),kDo=o("model.eval()"),SDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),RDo=o("model.train()"),PDo=l(),F(V4.$$.fragment),jXe=l(),rd=a("h2"),X4=a("a"),Upe=a("span"),F(ly.$$.fragment),BDo=l(),Jpe=a("span"),IDo=o("AutoModelForSequenceClassification"),DXe=l(),Bo=a("div"),F(iy.$$.fragment),NDo=l(),td=a("p"),qDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KV=a("a"),jDo=o("from_pretrained()"),DDo=o(" class method or the "),ZV=a("a"),GDo=o("from_config()"),ODo=o(` class
method.`),VDo=l(),dy=a("p"),XDo=o("This class cannot be instantiated directly using "),Ype=a("code"),zDo=o("__init__()"),QDo=o(" (throws an error)."),WDo=l(),gt=a("div"),F(cy.$$.fragment),HDo=l(),Kpe=a("p"),UDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JDo=l(),ad=a("p"),YDo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),KDo=o("not"),ZDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),eGo=o("from_pretrained()"),oGo=o(" to load the model weights."),rGo=l(),F(z4.$$.fragment),tGo=l(),ro=a("div"),F(fy.$$.fragment),aGo=l(),e_e=a("p"),nGo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sGo=l(),Ga=a("p"),lGo=o("The model class to instantiate is selected based on the "),o_e=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),N=a("ul"),Q4=a("li"),a_e=a("strong"),pGo=o("albert"),_Go=o(" \u2014 "),oX=a("a"),uGo=o("AlbertForSequenceClassification"),bGo=o(" (ALBERT model)"),vGo=l(),W4=a("li"),n_e=a("strong"),FGo=o("bart"),TGo=o(" \u2014 "),rX=a("a"),MGo=o("BartForSequenceClassification"),EGo=o(" (BART model)"),CGo=l(),H4=a("li"),s_e=a("strong"),wGo=o("bert"),AGo=o(" \u2014 "),tX=a("a"),LGo=o("BertForSequenceClassification"),yGo=o(" (BERT model)"),xGo=l(),U4=a("li"),l_e=a("strong"),$Go=o("big_bird"),kGo=o(" \u2014 "),aX=a("a"),SGo=o("BigBirdForSequenceClassification"),RGo=o(" (BigBird model)"),PGo=l(),J4=a("li"),i_e=a("strong"),BGo=o("bigbird_pegasus"),IGo=o(" \u2014 "),nX=a("a"),NGo=o("BigBirdPegasusForSequenceClassification"),qGo=o(" (BigBird-Pegasus model)"),jGo=l(),Y4=a("li"),d_e=a("strong"),DGo=o("bloom"),GGo=o(" \u2014 "),sX=a("a"),OGo=o("BloomForSequenceClassification"),VGo=o(" (BLOOM model)"),XGo=l(),K4=a("li"),c_e=a("strong"),zGo=o("camembert"),QGo=o(" \u2014 "),lX=a("a"),WGo=o("CamembertForSequenceClassification"),HGo=o(" (CamemBERT model)"),UGo=l(),Z4=a("li"),f_e=a("strong"),JGo=o("canine"),YGo=o(" \u2014 "),iX=a("a"),KGo=o("CanineForSequenceClassification"),ZGo=o(" (CANINE model)"),eOo=l(),eb=a("li"),m_e=a("strong"),oOo=o("convbert"),rOo=o(" \u2014 "),dX=a("a"),tOo=o("ConvBertForSequenceClassification"),aOo=o(" (ConvBERT model)"),nOo=l(),ob=a("li"),g_e=a("strong"),sOo=o("ctrl"),lOo=o(" \u2014 "),cX=a("a"),iOo=o("CTRLForSequenceClassification"),dOo=o(" (CTRL model)"),cOo=l(),rb=a("li"),h_e=a("strong"),fOo=o("data2vec-text"),mOo=o(" \u2014 "),fX=a("a"),gOo=o("Data2VecTextForSequenceClassification"),hOo=o(" (Data2VecText model)"),pOo=l(),tb=a("li"),p_e=a("strong"),_Oo=o("deberta"),uOo=o(" \u2014 "),mX=a("a"),bOo=o("DebertaForSequenceClassification"),vOo=o(" (DeBERTa model)"),FOo=l(),ab=a("li"),__e=a("strong"),TOo=o("deberta-v2"),MOo=o(" \u2014 "),gX=a("a"),EOo=o("DebertaV2ForSequenceClassification"),COo=o(" (DeBERTa-v2 model)"),wOo=l(),nb=a("li"),u_e=a("strong"),AOo=o("distilbert"),LOo=o(" \u2014 "),hX=a("a"),yOo=o("DistilBertForSequenceClassification"),xOo=o(" (DistilBERT model)"),$Oo=l(),sb=a("li"),b_e=a("strong"),kOo=o("electra"),SOo=o(" \u2014 "),pX=a("a"),ROo=o("ElectraForSequenceClassification"),POo=o(" (ELECTRA model)"),BOo=l(),lb=a("li"),v_e=a("strong"),IOo=o("flaubert"),NOo=o(" \u2014 "),_X=a("a"),qOo=o("FlaubertForSequenceClassification"),jOo=o(" (FlauBERT model)"),DOo=l(),ib=a("li"),F_e=a("strong"),GOo=o("fnet"),OOo=o(" \u2014 "),uX=a("a"),VOo=o("FNetForSequenceClassification"),XOo=o(" (FNet model)"),zOo=l(),db=a("li"),T_e=a("strong"),QOo=o("funnel"),WOo=o(" \u2014 "),bX=a("a"),HOo=o("FunnelForSequenceClassification"),UOo=o(" (Funnel Transformer model)"),JOo=l(),cb=a("li"),M_e=a("strong"),YOo=o("gpt2"),KOo=o(" \u2014 "),vX=a("a"),ZOo=o("GPT2ForSequenceClassification"),eVo=o(" (OpenAI GPT-2 model)"),oVo=l(),fb=a("li"),E_e=a("strong"),rVo=o("gpt_neo"),tVo=o(" \u2014 "),FX=a("a"),aVo=o("GPTNeoForSequenceClassification"),nVo=o(" (GPT Neo model)"),sVo=l(),mb=a("li"),C_e=a("strong"),lVo=o("gptj"),iVo=o(" \u2014 "),TX=a("a"),dVo=o("GPTJForSequenceClassification"),cVo=o(" (GPT-J model)"),fVo=l(),gb=a("li"),w_e=a("strong"),mVo=o("ibert"),gVo=o(" \u2014 "),MX=a("a"),hVo=o("IBertForSequenceClassification"),pVo=o(" (I-BERT model)"),_Vo=l(),hb=a("li"),A_e=a("strong"),uVo=o("layoutlm"),bVo=o(" \u2014 "),EX=a("a"),vVo=o("LayoutLMForSequenceClassification"),FVo=o(" (LayoutLM model)"),TVo=l(),pb=a("li"),L_e=a("strong"),MVo=o("layoutlmv2"),EVo=o(" \u2014 "),CX=a("a"),CVo=o("LayoutLMv2ForSequenceClassification"),wVo=o(" (LayoutLMv2 model)"),AVo=l(),_b=a("li"),y_e=a("strong"),LVo=o("layoutlmv3"),yVo=o(" \u2014 "),wX=a("a"),xVo=o("LayoutLMv3ForSequenceClassification"),$Vo=o(" (LayoutLMv3 model)"),kVo=l(),ub=a("li"),x_e=a("strong"),SVo=o("led"),RVo=o(" \u2014 "),AX=a("a"),PVo=o("LEDForSequenceClassification"),BVo=o(" (LED model)"),IVo=l(),bb=a("li"),$_e=a("strong"),NVo=o("longformer"),qVo=o(" \u2014 "),LX=a("a"),jVo=o("LongformerForSequenceClassification"),DVo=o(" (Longformer model)"),GVo=l(),vb=a("li"),k_e=a("strong"),OVo=o("mbart"),VVo=o(" \u2014 "),yX=a("a"),XVo=o("MBartForSequenceClassification"),zVo=o(" (mBART model)"),QVo=l(),Fb=a("li"),S_e=a("strong"),WVo=o("megatron-bert"),HVo=o(" \u2014 "),xX=a("a"),UVo=o("MegatronBertForSequenceClassification"),JVo=o(" (Megatron-BERT model)"),YVo=l(),Tb=a("li"),R_e=a("strong"),KVo=o("mobilebert"),ZVo=o(" \u2014 "),$X=a("a"),eXo=o("MobileBertForSequenceClassification"),oXo=o(" (MobileBERT model)"),rXo=l(),Mb=a("li"),P_e=a("strong"),tXo=o("mpnet"),aXo=o(" \u2014 "),kX=a("a"),nXo=o("MPNetForSequenceClassification"),sXo=o(" (MPNet model)"),lXo=l(),Eb=a("li"),B_e=a("strong"),iXo=o("mvp"),dXo=o(" \u2014 "),SX=a("a"),cXo=o("MvpForSequenceClassification"),fXo=o(" (MVP model)"),mXo=l(),Cb=a("li"),I_e=a("strong"),gXo=o("nezha"),hXo=o(" \u2014 "),RX=a("a"),pXo=o("NezhaForSequenceClassification"),_Xo=o(" (Nezha model)"),uXo=l(),wb=a("li"),N_e=a("strong"),bXo=o("nystromformer"),vXo=o(" \u2014 "),PX=a("a"),FXo=o("NystromformerForSequenceClassification"),TXo=o(" (Nystr\xF6mformer model)"),MXo=l(),Ab=a("li"),q_e=a("strong"),EXo=o("openai-gpt"),CXo=o(" \u2014 "),BX=a("a"),wXo=o("OpenAIGPTForSequenceClassification"),AXo=o(" (OpenAI GPT model)"),LXo=l(),Lb=a("li"),j_e=a("strong"),yXo=o("perceiver"),xXo=o(" \u2014 "),IX=a("a"),$Xo=o("PerceiverForSequenceClassification"),kXo=o(" (Perceiver model)"),SXo=l(),yb=a("li"),D_e=a("strong"),RXo=o("plbart"),PXo=o(" \u2014 "),NX=a("a"),BXo=o("PLBartForSequenceClassification"),IXo=o(" (PLBart model)"),NXo=l(),xb=a("li"),G_e=a("strong"),qXo=o("qdqbert"),jXo=o(" \u2014 "),qX=a("a"),DXo=o("QDQBertForSequenceClassification"),GXo=o(" (QDQBert model)"),OXo=l(),$b=a("li"),O_e=a("strong"),VXo=o("reformer"),XXo=o(" \u2014 "),jX=a("a"),zXo=o("ReformerForSequenceClassification"),QXo=o(" (Reformer model)"),WXo=l(),kb=a("li"),V_e=a("strong"),HXo=o("rembert"),UXo=o(" \u2014 "),DX=a("a"),JXo=o("RemBertForSequenceClassification"),YXo=o(" (RemBERT model)"),KXo=l(),Sb=a("li"),X_e=a("strong"),ZXo=o("roberta"),ezo=o(" \u2014 "),GX=a("a"),ozo=o("RobertaForSequenceClassification"),rzo=o(" (RoBERTa model)"),tzo=l(),Rb=a("li"),z_e=a("strong"),azo=o("roformer"),nzo=o(" \u2014 "),OX=a("a"),szo=o("RoFormerForSequenceClassification"),lzo=o(" (RoFormer model)"),izo=l(),Pb=a("li"),Q_e=a("strong"),dzo=o("squeezebert"),czo=o(" \u2014 "),VX=a("a"),fzo=o("SqueezeBertForSequenceClassification"),mzo=o(" (SqueezeBERT model)"),gzo=l(),Bb=a("li"),W_e=a("strong"),hzo=o("tapas"),pzo=o(" \u2014 "),XX=a("a"),_zo=o("TapasForSequenceClassification"),uzo=o(" (TAPAS model)"),bzo=l(),Ib=a("li"),H_e=a("strong"),vzo=o("transfo-xl"),Fzo=o(" \u2014 "),zX=a("a"),Tzo=o("TransfoXLForSequenceClassification"),Mzo=o(" (Transformer-XL model)"),Ezo=l(),Nb=a("li"),U_e=a("strong"),Czo=o("xlm"),wzo=o(" \u2014 "),QX=a("a"),Azo=o("XLMForSequenceClassification"),Lzo=o(" (XLM model)"),yzo=l(),qb=a("li"),J_e=a("strong"),xzo=o("xlm-roberta"),$zo=o(" \u2014 "),WX=a("a"),kzo=o("XLMRobertaForSequenceClassification"),Szo=o(" (XLM-RoBERTa model)"),Rzo=l(),jb=a("li"),Y_e=a("strong"),Pzo=o("xlm-roberta-xl"),Bzo=o(" \u2014 "),HX=a("a"),Izo=o("XLMRobertaXLForSequenceClassification"),Nzo=o(" (XLM-RoBERTa-XL model)"),qzo=l(),Db=a("li"),K_e=a("strong"),jzo=o("xlnet"),Dzo=o(" \u2014 "),UX=a("a"),Gzo=o("XLNetForSequenceClassification"),Ozo=o(" (XLNet model)"),Vzo=l(),Gb=a("li"),Z_e=a("strong"),Xzo=o("yoso"),zzo=o(" \u2014 "),JX=a("a"),Qzo=o("YosoForSequenceClassification"),Wzo=o(" (YOSO model)"),Hzo=l(),Ob=a("p"),Uzo=o("The model is set in evaluation mode by default using "),eue=a("code"),Jzo=o("model.eval()"),Yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=a("code"),Kzo=o("model.train()"),Zzo=l(),F(Vb.$$.fragment),GXe=l(),nd=a("h2"),Xb=a("a"),rue=a("span"),F(my.$$.fragment),eQo=l(),tue=a("span"),oQo=o("AutoModelForMultipleChoice"),OXe=l(),Io=a("div"),F(gy.$$.fragment),rQo=l(),sd=a("p"),tQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=a("a"),aQo=o("from_pretrained()"),nQo=o(" class method or the "),KX=a("a"),sQo=o("from_config()"),lQo=o(` class
method.`),iQo=l(),hy=a("p"),dQo=o("This class cannot be instantiated directly using "),aue=a("code"),cQo=o("__init__()"),fQo=o(" (throws an error)."),mQo=l(),ht=a("div"),F(py.$$.fragment),gQo=l(),nue=a("p"),hQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pQo=l(),ld=a("p"),_Qo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),uQo=o("not"),bQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),vQo=o("from_pretrained()"),FQo=o(" to load the model weights."),TQo=l(),F(zb.$$.fragment),MQo=l(),to=a("div"),F(_y.$$.fragment),EQo=l(),lue=a("p"),CQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wQo=l(),Oa=a("p"),AQo=o("The model class to instantiate is selected based on the "),iue=a("code"),LQo=o("model_type"),yQo=o(` property of the config object (either
passed as an argument or loaded from `),due=a("code"),xQo=o("pretrained_model_name_or_path"),$Qo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=a("code"),kQo=o("pretrained_model_name_or_path"),SQo=o(":"),RQo=l(),Z=a("ul"),Qb=a("li"),fue=a("strong"),PQo=o("albert"),BQo=o(" \u2014 "),ez=a("a"),IQo=o("AlbertForMultipleChoice"),NQo=o(" (ALBERT model)"),qQo=l(),Wb=a("li"),mue=a("strong"),jQo=o("bert"),DQo=o(" \u2014 "),oz=a("a"),GQo=o("BertForMultipleChoice"),OQo=o(" (BERT model)"),VQo=l(),Hb=a("li"),gue=a("strong"),XQo=o("big_bird"),zQo=o(" \u2014 "),rz=a("a"),QQo=o("BigBirdForMultipleChoice"),WQo=o(" (BigBird model)"),HQo=l(),Ub=a("li"),hue=a("strong"),UQo=o("camembert"),JQo=o(" \u2014 "),tz=a("a"),YQo=o("CamembertForMultipleChoice"),KQo=o(" (CamemBERT model)"),ZQo=l(),Jb=a("li"),pue=a("strong"),eWo=o("canine"),oWo=o(" \u2014 "),az=a("a"),rWo=o("CanineForMultipleChoice"),tWo=o(" (CANINE model)"),aWo=l(),Yb=a("li"),_ue=a("strong"),nWo=o("convbert"),sWo=o(" \u2014 "),nz=a("a"),lWo=o("ConvBertForMultipleChoice"),iWo=o(" (ConvBERT model)"),dWo=l(),Kb=a("li"),uue=a("strong"),cWo=o("data2vec-text"),fWo=o(" \u2014 "),sz=a("a"),mWo=o("Data2VecTextForMultipleChoice"),gWo=o(" (Data2VecText model)"),hWo=l(),Zb=a("li"),bue=a("strong"),pWo=o("deberta-v2"),_Wo=o(" \u2014 "),lz=a("a"),uWo=o("DebertaV2ForMultipleChoice"),bWo=o(" (DeBERTa-v2 model)"),vWo=l(),ev=a("li"),vue=a("strong"),FWo=o("distilbert"),TWo=o(" \u2014 "),iz=a("a"),MWo=o("DistilBertForMultipleChoice"),EWo=o(" (DistilBERT model)"),CWo=l(),ov=a("li"),Fue=a("strong"),wWo=o("electra"),AWo=o(" \u2014 "),dz=a("a"),LWo=o("ElectraForMultipleChoice"),yWo=o(" (ELECTRA model)"),xWo=l(),rv=a("li"),Tue=a("strong"),$Wo=o("flaubert"),kWo=o(" \u2014 "),cz=a("a"),SWo=o("FlaubertForMultipleChoice"),RWo=o(" (FlauBERT model)"),PWo=l(),tv=a("li"),Mue=a("strong"),BWo=o("fnet"),IWo=o(" \u2014 "),fz=a("a"),NWo=o("FNetForMultipleChoice"),qWo=o(" (FNet model)"),jWo=l(),av=a("li"),Eue=a("strong"),DWo=o("funnel"),GWo=o(" \u2014 "),mz=a("a"),OWo=o("FunnelForMultipleChoice"),VWo=o(" (Funnel Transformer model)"),XWo=l(),nv=a("li"),Cue=a("strong"),zWo=o("ibert"),QWo=o(" \u2014 "),gz=a("a"),WWo=o("IBertForMultipleChoice"),HWo=o(" (I-BERT model)"),UWo=l(),sv=a("li"),wue=a("strong"),JWo=o("longformer"),YWo=o(" \u2014 "),hz=a("a"),KWo=o("LongformerForMultipleChoice"),ZWo=o(" (Longformer model)"),eHo=l(),lv=a("li"),Aue=a("strong"),oHo=o("megatron-bert"),rHo=o(" \u2014 "),pz=a("a"),tHo=o("MegatronBertForMultipleChoice"),aHo=o(" (Megatron-BERT model)"),nHo=l(),iv=a("li"),Lue=a("strong"),sHo=o("mobilebert"),lHo=o(" \u2014 "),_z=a("a"),iHo=o("MobileBertForMultipleChoice"),dHo=o(" (MobileBERT model)"),cHo=l(),dv=a("li"),yue=a("strong"),fHo=o("mpnet"),mHo=o(" \u2014 "),uz=a("a"),gHo=o("MPNetForMultipleChoice"),hHo=o(" (MPNet model)"),pHo=l(),cv=a("li"),xue=a("strong"),_Ho=o("nezha"),uHo=o(" \u2014 "),bz=a("a"),bHo=o("NezhaForMultipleChoice"),vHo=o(" (Nezha model)"),FHo=l(),fv=a("li"),$ue=a("strong"),THo=o("nystromformer"),MHo=o(" \u2014 "),vz=a("a"),EHo=o("NystromformerForMultipleChoice"),CHo=o(" (Nystr\xF6mformer model)"),wHo=l(),mv=a("li"),kue=a("strong"),AHo=o("qdqbert"),LHo=o(" \u2014 "),Fz=a("a"),yHo=o("QDQBertForMultipleChoice"),xHo=o(" (QDQBert model)"),$Ho=l(),gv=a("li"),Sue=a("strong"),kHo=o("rembert"),SHo=o(" \u2014 "),Tz=a("a"),RHo=o("RemBertForMultipleChoice"),PHo=o(" (RemBERT model)"),BHo=l(),hv=a("li"),Rue=a("strong"),IHo=o("roberta"),NHo=o(" \u2014 "),Mz=a("a"),qHo=o("RobertaForMultipleChoice"),jHo=o(" (RoBERTa model)"),DHo=l(),pv=a("li"),Pue=a("strong"),GHo=o("roformer"),OHo=o(" \u2014 "),Ez=a("a"),VHo=o("RoFormerForMultipleChoice"),XHo=o(" (RoFormer model)"),zHo=l(),_v=a("li"),Bue=a("strong"),QHo=o("squeezebert"),WHo=o(" \u2014 "),Cz=a("a"),HHo=o("SqueezeBertForMultipleChoice"),UHo=o(" (SqueezeBERT model)"),JHo=l(),uv=a("li"),Iue=a("strong"),YHo=o("xlm"),KHo=o(" \u2014 "),wz=a("a"),ZHo=o("XLMForMultipleChoice"),eUo=o(" (XLM model)"),oUo=l(),bv=a("li"),Nue=a("strong"),rUo=o("xlm-roberta"),tUo=o(" \u2014 "),Az=a("a"),aUo=o("XLMRobertaForMultipleChoice"),nUo=o(" (XLM-RoBERTa model)"),sUo=l(),vv=a("li"),que=a("strong"),lUo=o("xlm-roberta-xl"),iUo=o(" \u2014 "),Lz=a("a"),dUo=o("XLMRobertaXLForMultipleChoice"),cUo=o(" (XLM-RoBERTa-XL model)"),fUo=l(),Fv=a("li"),jue=a("strong"),mUo=o("xlnet"),gUo=o(" \u2014 "),yz=a("a"),hUo=o("XLNetForMultipleChoice"),pUo=o(" (XLNet model)"),_Uo=l(),Tv=a("li"),Due=a("strong"),uUo=o("yoso"),bUo=o(" \u2014 "),xz=a("a"),vUo=o("YosoForMultipleChoice"),FUo=o(" (YOSO model)"),TUo=l(),Mv=a("p"),MUo=o("The model is set in evaluation mode by default using "),Gue=a("code"),EUo=o("model.eval()"),CUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),wUo=o("model.train()"),AUo=l(),F(Ev.$$.fragment),VXe=l(),id=a("h2"),Cv=a("a"),Vue=a("span"),F(uy.$$.fragment),LUo=l(),Xue=a("span"),yUo=o("AutoModelForNextSentencePrediction"),XXe=l(),No=a("div"),F(by.$$.fragment),xUo=l(),dd=a("p"),$Uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$z=a("a"),kUo=o("from_pretrained()"),SUo=o(" class method or the "),kz=a("a"),RUo=o("from_config()"),PUo=o(` class
method.`),BUo=l(),vy=a("p"),IUo=o("This class cannot be instantiated directly using "),zue=a("code"),NUo=o("__init__()"),qUo=o(" (throws an error)."),jUo=l(),pt=a("div"),F(Fy.$$.fragment),DUo=l(),Que=a("p"),GUo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OUo=l(),cd=a("p"),VUo=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),XUo=o("not"),zUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),QUo=o("from_pretrained()"),WUo=o(" to load the model weights."),HUo=l(),F(wv.$$.fragment),UUo=l(),ao=a("div"),F(Ty.$$.fragment),JUo=l(),Hue=a("p"),YUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KUo=l(),Va=a("p"),ZUo=o("The model class to instantiate is selected based on the "),Uue=a("code"),eJo=o("model_type"),oJo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),aJo=o("pretrained_model_name_or_path"),nJo=o(":"),sJo=l(),qo=a("ul"),Av=a("li"),Kue=a("strong"),lJo=o("bert"),iJo=o(" \u2014 "),Rz=a("a"),dJo=o("BertForNextSentencePrediction"),cJo=o(" (BERT model)"),fJo=l(),Lv=a("li"),Zue=a("strong"),mJo=o("fnet"),gJo=o(" \u2014 "),Pz=a("a"),hJo=o("FNetForNextSentencePrediction"),pJo=o(" (FNet model)"),_Jo=l(),yv=a("li"),e1e=a("strong"),uJo=o("megatron-bert"),bJo=o(" \u2014 "),Bz=a("a"),vJo=o("MegatronBertForNextSentencePrediction"),FJo=o(" (Megatron-BERT model)"),TJo=l(),xv=a("li"),o1e=a("strong"),MJo=o("mobilebert"),EJo=o(" \u2014 "),Iz=a("a"),CJo=o("MobileBertForNextSentencePrediction"),wJo=o(" (MobileBERT model)"),AJo=l(),$v=a("li"),r1e=a("strong"),LJo=o("nezha"),yJo=o(" \u2014 "),Nz=a("a"),xJo=o("NezhaForNextSentencePrediction"),$Jo=o(" (Nezha model)"),kJo=l(),kv=a("li"),t1e=a("strong"),SJo=o("qdqbert"),RJo=o(" \u2014 "),qz=a("a"),PJo=o("QDQBertForNextSentencePrediction"),BJo=o(" (QDQBert model)"),IJo=l(),Sv=a("p"),NJo=o("The model is set in evaluation mode by default using "),a1e=a("code"),qJo=o("model.eval()"),jJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=a("code"),DJo=o("model.train()"),GJo=l(),F(Rv.$$.fragment),zXe=l(),fd=a("h2"),Pv=a("a"),s1e=a("span"),F(My.$$.fragment),OJo=l(),l1e=a("span"),VJo=o("AutoModelForTokenClassification"),QXe=l(),jo=a("div"),F(Ey.$$.fragment),XJo=l(),md=a("p"),zJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=a("a"),QJo=o("from_pretrained()"),WJo=o(" class method or the "),Dz=a("a"),HJo=o("from_config()"),UJo=o(` class
method.`),JJo=l(),Cy=a("p"),YJo=o("This class cannot be instantiated directly using "),i1e=a("code"),KJo=o("__init__()"),ZJo=o(" (throws an error)."),eYo=l(),_t=a("div"),F(wy.$$.fragment),oYo=l(),d1e=a("p"),rYo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tYo=l(),gd=a("p"),aYo=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),nYo=o("not"),sYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),lYo=o("from_pretrained()"),iYo=o(" to load the model weights."),dYo=l(),F(Bv.$$.fragment),cYo=l(),no=a("div"),F(Ay.$$.fragment),fYo=l(),f1e=a("p"),mYo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gYo=l(),Xa=a("p"),hYo=o("The model class to instantiate is selected based on the "),m1e=a("code"),pYo=o("model_type"),_Yo=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),uYo=o("pretrained_model_name_or_path"),bYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),vYo=o("pretrained_model_name_or_path"),FYo=o(":"),TYo=l(),U=a("ul"),Iv=a("li"),p1e=a("strong"),MYo=o("albert"),EYo=o(" \u2014 "),Oz=a("a"),CYo=o("AlbertForTokenClassification"),wYo=o(" (ALBERT model)"),AYo=l(),Nv=a("li"),_1e=a("strong"),LYo=o("bert"),yYo=o(" \u2014 "),Vz=a("a"),xYo=o("BertForTokenClassification"),$Yo=o(" (BERT model)"),kYo=l(),qv=a("li"),u1e=a("strong"),SYo=o("big_bird"),RYo=o(" \u2014 "),Xz=a("a"),PYo=o("BigBirdForTokenClassification"),BYo=o(" (BigBird model)"),IYo=l(),jv=a("li"),b1e=a("strong"),NYo=o("bloom"),qYo=o(" \u2014 "),zz=a("a"),jYo=o("BloomForTokenClassification"),DYo=o(" (BLOOM model)"),GYo=l(),Dv=a("li"),v1e=a("strong"),OYo=o("camembert"),VYo=o(" \u2014 "),Qz=a("a"),XYo=o("CamembertForTokenClassification"),zYo=o(" (CamemBERT model)"),QYo=l(),Gv=a("li"),F1e=a("strong"),WYo=o("canine"),HYo=o(" \u2014 "),Wz=a("a"),UYo=o("CanineForTokenClassification"),JYo=o(" (CANINE model)"),YYo=l(),Ov=a("li"),T1e=a("strong"),KYo=o("convbert"),ZYo=o(" \u2014 "),Hz=a("a"),eKo=o("ConvBertForTokenClassification"),oKo=o(" (ConvBERT model)"),rKo=l(),Vv=a("li"),M1e=a("strong"),tKo=o("data2vec-text"),aKo=o(" \u2014 "),Uz=a("a"),nKo=o("Data2VecTextForTokenClassification"),sKo=o(" (Data2VecText model)"),lKo=l(),Xv=a("li"),E1e=a("strong"),iKo=o("deberta"),dKo=o(" \u2014 "),Jz=a("a"),cKo=o("DebertaForTokenClassification"),fKo=o(" (DeBERTa model)"),mKo=l(),zv=a("li"),C1e=a("strong"),gKo=o("deberta-v2"),hKo=o(" \u2014 "),Yz=a("a"),pKo=o("DebertaV2ForTokenClassification"),_Ko=o(" (DeBERTa-v2 model)"),uKo=l(),Qv=a("li"),w1e=a("strong"),bKo=o("distilbert"),vKo=o(" \u2014 "),Kz=a("a"),FKo=o("DistilBertForTokenClassification"),TKo=o(" (DistilBERT model)"),MKo=l(),Wv=a("li"),A1e=a("strong"),EKo=o("electra"),CKo=o(" \u2014 "),Zz=a("a"),wKo=o("ElectraForTokenClassification"),AKo=o(" (ELECTRA model)"),LKo=l(),Hv=a("li"),L1e=a("strong"),yKo=o("flaubert"),xKo=o(" \u2014 "),eQ=a("a"),$Ko=o("FlaubertForTokenClassification"),kKo=o(" (FlauBERT model)"),SKo=l(),Uv=a("li"),y1e=a("strong"),RKo=o("fnet"),PKo=o(" \u2014 "),oQ=a("a"),BKo=o("FNetForTokenClassification"),IKo=o(" (FNet model)"),NKo=l(),Jv=a("li"),x1e=a("strong"),qKo=o("funnel"),jKo=o(" \u2014 "),rQ=a("a"),DKo=o("FunnelForTokenClassification"),GKo=o(" (Funnel Transformer model)"),OKo=l(),Yv=a("li"),$1e=a("strong"),VKo=o("gpt2"),XKo=o(" \u2014 "),tQ=a("a"),zKo=o("GPT2ForTokenClassification"),QKo=o(" (OpenAI GPT-2 model)"),WKo=l(),Kv=a("li"),k1e=a("strong"),HKo=o("ibert"),UKo=o(" \u2014 "),aQ=a("a"),JKo=o("IBertForTokenClassification"),YKo=o(" (I-BERT model)"),KKo=l(),Zv=a("li"),S1e=a("strong"),ZKo=o("layoutlm"),eZo=o(" \u2014 "),nQ=a("a"),oZo=o("LayoutLMForTokenClassification"),rZo=o(" (LayoutLM model)"),tZo=l(),eF=a("li"),R1e=a("strong"),aZo=o("layoutlmv2"),nZo=o(" \u2014 "),sQ=a("a"),sZo=o("LayoutLMv2ForTokenClassification"),lZo=o(" (LayoutLMv2 model)"),iZo=l(),oF=a("li"),P1e=a("strong"),dZo=o("layoutlmv3"),cZo=o(" \u2014 "),lQ=a("a"),fZo=o("LayoutLMv3ForTokenClassification"),mZo=o(" (LayoutLMv3 model)"),gZo=l(),rF=a("li"),B1e=a("strong"),hZo=o("longformer"),pZo=o(" \u2014 "),iQ=a("a"),_Zo=o("LongformerForTokenClassification"),uZo=o(" (Longformer model)"),bZo=l(),tF=a("li"),I1e=a("strong"),vZo=o("megatron-bert"),FZo=o(" \u2014 "),dQ=a("a"),TZo=o("MegatronBertForTokenClassification"),MZo=o(" (Megatron-BERT model)"),EZo=l(),aF=a("li"),N1e=a("strong"),CZo=o("mobilebert"),wZo=o(" \u2014 "),cQ=a("a"),AZo=o("MobileBertForTokenClassification"),LZo=o(" (MobileBERT model)"),yZo=l(),nF=a("li"),q1e=a("strong"),xZo=o("mpnet"),$Zo=o(" \u2014 "),fQ=a("a"),kZo=o("MPNetForTokenClassification"),SZo=o(" (MPNet model)"),RZo=l(),sF=a("li"),j1e=a("strong"),PZo=o("nezha"),BZo=o(" \u2014 "),mQ=a("a"),IZo=o("NezhaForTokenClassification"),NZo=o(" (Nezha model)"),qZo=l(),lF=a("li"),D1e=a("strong"),jZo=o("nystromformer"),DZo=o(" \u2014 "),gQ=a("a"),GZo=o("NystromformerForTokenClassification"),OZo=o(" (Nystr\xF6mformer model)"),VZo=l(),iF=a("li"),G1e=a("strong"),XZo=o("qdqbert"),zZo=o(" \u2014 "),hQ=a("a"),QZo=o("QDQBertForTokenClassification"),WZo=o(" (QDQBert model)"),HZo=l(),dF=a("li"),O1e=a("strong"),UZo=o("rembert"),JZo=o(" \u2014 "),pQ=a("a"),YZo=o("RemBertForTokenClassification"),KZo=o(" (RemBERT model)"),ZZo=l(),cF=a("li"),V1e=a("strong"),eer=o("roberta"),oer=o(" \u2014 "),_Q=a("a"),rer=o("RobertaForTokenClassification"),ter=o(" (RoBERTa model)"),aer=l(),fF=a("li"),X1e=a("strong"),ner=o("roformer"),ser=o(" \u2014 "),uQ=a("a"),ler=o("RoFormerForTokenClassification"),ier=o(" (RoFormer model)"),der=l(),mF=a("li"),z1e=a("strong"),cer=o("squeezebert"),fer=o(" \u2014 "),bQ=a("a"),mer=o("SqueezeBertForTokenClassification"),ger=o(" (SqueezeBERT model)"),her=l(),gF=a("li"),Q1e=a("strong"),per=o("xlm"),_er=o(" \u2014 "),vQ=a("a"),uer=o("XLMForTokenClassification"),ber=o(" (XLM model)"),ver=l(),hF=a("li"),W1e=a("strong"),Fer=o("xlm-roberta"),Ter=o(" \u2014 "),FQ=a("a"),Mer=o("XLMRobertaForTokenClassification"),Eer=o(" (XLM-RoBERTa model)"),Cer=l(),pF=a("li"),H1e=a("strong"),wer=o("xlm-roberta-xl"),Aer=o(" \u2014 "),TQ=a("a"),Ler=o("XLMRobertaXLForTokenClassification"),yer=o(" (XLM-RoBERTa-XL model)"),xer=l(),_F=a("li"),U1e=a("strong"),$er=o("xlnet"),ker=o(" \u2014 "),MQ=a("a"),Ser=o("XLNetForTokenClassification"),Rer=o(" (XLNet model)"),Per=l(),uF=a("li"),J1e=a("strong"),Ber=o("yoso"),Ier=o(" \u2014 "),EQ=a("a"),Ner=o("YosoForTokenClassification"),qer=o(" (YOSO model)"),jer=l(),bF=a("p"),Der=o("The model is set in evaluation mode by default using "),Y1e=a("code"),Ger=o("model.eval()"),Oer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=a("code"),Ver=o("model.train()"),Xer=l(),F(vF.$$.fragment),WXe=l(),hd=a("h2"),FF=a("a"),Z1e=a("span"),F(Ly.$$.fragment),zer=l(),e2e=a("span"),Qer=o("AutoModelForQuestionAnswering"),HXe=l(),Do=a("div"),F(yy.$$.fragment),Wer=l(),pd=a("p"),Her=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CQ=a("a"),Uer=o("from_pretrained()"),Jer=o(" class method or the "),wQ=a("a"),Yer=o("from_config()"),Ker=o(` class
method.`),Zer=l(),xy=a("p"),eor=o("This class cannot be instantiated directly using "),o2e=a("code"),oor=o("__init__()"),ror=o(" (throws an error)."),tor=l(),ut=a("div"),F($y.$$.fragment),aor=l(),r2e=a("p"),nor=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sor=l(),_d=a("p"),lor=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),ior=o("not"),dor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),cor=o("from_pretrained()"),mor=o(" to load the model weights."),gor=l(),F(TF.$$.fragment),hor=l(),so=a("div"),F(ky.$$.fragment),por=l(),a2e=a("p"),_or=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uor=l(),za=a("p"),bor=o("The model class to instantiate is selected based on the "),n2e=a("code"),vor=o("model_type"),For=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),Tor=o("pretrained_model_name_or_path"),Mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),Eor=o("pretrained_model_name_or_path"),Cor=o(":"),wor=l(),V=a("ul"),MF=a("li"),i2e=a("strong"),Aor=o("albert"),Lor=o(" \u2014 "),LQ=a("a"),yor=o("AlbertForQuestionAnswering"),xor=o(" (ALBERT model)"),$or=l(),EF=a("li"),d2e=a("strong"),kor=o("bart"),Sor=o(" \u2014 "),yQ=a("a"),Ror=o("BartForQuestionAnswering"),Por=o(" (BART model)"),Bor=l(),CF=a("li"),c2e=a("strong"),Ior=o("bert"),Nor=o(" \u2014 "),xQ=a("a"),qor=o("BertForQuestionAnswering"),jor=o(" (BERT model)"),Dor=l(),wF=a("li"),f2e=a("strong"),Gor=o("big_bird"),Oor=o(" \u2014 "),$Q=a("a"),Vor=o("BigBirdForQuestionAnswering"),Xor=o(" (BigBird model)"),zor=l(),AF=a("li"),m2e=a("strong"),Qor=o("bigbird_pegasus"),Wor=o(" \u2014 "),kQ=a("a"),Hor=o("BigBirdPegasusForQuestionAnswering"),Uor=o(" (BigBird-Pegasus model)"),Jor=l(),LF=a("li"),g2e=a("strong"),Yor=o("camembert"),Kor=o(" \u2014 "),SQ=a("a"),Zor=o("CamembertForQuestionAnswering"),err=o(" (CamemBERT model)"),orr=l(),yF=a("li"),h2e=a("strong"),rrr=o("canine"),trr=o(" \u2014 "),RQ=a("a"),arr=o("CanineForQuestionAnswering"),nrr=o(" (CANINE model)"),srr=l(),xF=a("li"),p2e=a("strong"),lrr=o("convbert"),irr=o(" \u2014 "),PQ=a("a"),drr=o("ConvBertForQuestionAnswering"),crr=o(" (ConvBERT model)"),frr=l(),$F=a("li"),_2e=a("strong"),mrr=o("data2vec-text"),grr=o(" \u2014 "),BQ=a("a"),hrr=o("Data2VecTextForQuestionAnswering"),prr=o(" (Data2VecText model)"),_rr=l(),kF=a("li"),u2e=a("strong"),urr=o("deberta"),brr=o(" \u2014 "),IQ=a("a"),vrr=o("DebertaForQuestionAnswering"),Frr=o(" (DeBERTa model)"),Trr=l(),SF=a("li"),b2e=a("strong"),Mrr=o("deberta-v2"),Err=o(" \u2014 "),NQ=a("a"),Crr=o("DebertaV2ForQuestionAnswering"),wrr=o(" (DeBERTa-v2 model)"),Arr=l(),RF=a("li"),v2e=a("strong"),Lrr=o("distilbert"),yrr=o(" \u2014 "),qQ=a("a"),xrr=o("DistilBertForQuestionAnswering"),$rr=o(" (DistilBERT model)"),krr=l(),PF=a("li"),F2e=a("strong"),Srr=o("electra"),Rrr=o(" \u2014 "),jQ=a("a"),Prr=o("ElectraForQuestionAnswering"),Brr=o(" (ELECTRA model)"),Irr=l(),BF=a("li"),T2e=a("strong"),Nrr=o("flaubert"),qrr=o(" \u2014 "),DQ=a("a"),jrr=o("FlaubertForQuestionAnsweringSimple"),Drr=o(" (FlauBERT model)"),Grr=l(),IF=a("li"),M2e=a("strong"),Orr=o("fnet"),Vrr=o(" \u2014 "),GQ=a("a"),Xrr=o("FNetForQuestionAnswering"),zrr=o(" (FNet model)"),Qrr=l(),NF=a("li"),E2e=a("strong"),Wrr=o("funnel"),Hrr=o(" \u2014 "),OQ=a("a"),Urr=o("FunnelForQuestionAnswering"),Jrr=o(" (Funnel Transformer model)"),Yrr=l(),qF=a("li"),C2e=a("strong"),Krr=o("gptj"),Zrr=o(" \u2014 "),VQ=a("a"),etr=o("GPTJForQuestionAnswering"),otr=o(" (GPT-J model)"),rtr=l(),jF=a("li"),w2e=a("strong"),ttr=o("ibert"),atr=o(" \u2014 "),XQ=a("a"),ntr=o("IBertForQuestionAnswering"),str=o(" (I-BERT model)"),ltr=l(),DF=a("li"),A2e=a("strong"),itr=o("layoutlmv2"),dtr=o(" \u2014 "),zQ=a("a"),ctr=o("LayoutLMv2ForQuestionAnswering"),ftr=o(" (LayoutLMv2 model)"),mtr=l(),GF=a("li"),L2e=a("strong"),gtr=o("layoutlmv3"),htr=o(" \u2014 "),QQ=a("a"),ptr=o("LayoutLMv3ForQuestionAnswering"),_tr=o(" (LayoutLMv3 model)"),utr=l(),OF=a("li"),y2e=a("strong"),btr=o("led"),vtr=o(" \u2014 "),WQ=a("a"),Ftr=o("LEDForQuestionAnswering"),Ttr=o(" (LED model)"),Mtr=l(),VF=a("li"),x2e=a("strong"),Etr=o("longformer"),Ctr=o(" \u2014 "),HQ=a("a"),wtr=o("LongformerForQuestionAnswering"),Atr=o(" (Longformer model)"),Ltr=l(),XF=a("li"),$2e=a("strong"),ytr=o("lxmert"),xtr=o(" \u2014 "),UQ=a("a"),$tr=o("LxmertForQuestionAnswering"),ktr=o(" (LXMERT model)"),Str=l(),zF=a("li"),k2e=a("strong"),Rtr=o("mbart"),Ptr=o(" \u2014 "),JQ=a("a"),Btr=o("MBartForQuestionAnswering"),Itr=o(" (mBART model)"),Ntr=l(),QF=a("li"),S2e=a("strong"),qtr=o("megatron-bert"),jtr=o(" \u2014 "),YQ=a("a"),Dtr=o("MegatronBertForQuestionAnswering"),Gtr=o(" (Megatron-BERT model)"),Otr=l(),WF=a("li"),R2e=a("strong"),Vtr=o("mobilebert"),Xtr=o(" \u2014 "),KQ=a("a"),ztr=o("MobileBertForQuestionAnswering"),Qtr=o(" (MobileBERT model)"),Wtr=l(),HF=a("li"),P2e=a("strong"),Htr=o("mpnet"),Utr=o(" \u2014 "),ZQ=a("a"),Jtr=o("MPNetForQuestionAnswering"),Ytr=o(" (MPNet model)"),Ktr=l(),UF=a("li"),B2e=a("strong"),Ztr=o("mvp"),ear=o(" \u2014 "),eW=a("a"),oar=o("MvpForQuestionAnswering"),rar=o(" (MVP model)"),tar=l(),JF=a("li"),I2e=a("strong"),aar=o("nezha"),nar=o(" \u2014 "),oW=a("a"),sar=o("NezhaForQuestionAnswering"),lar=o(" (Nezha model)"),iar=l(),YF=a("li"),N2e=a("strong"),dar=o("nystromformer"),car=o(" \u2014 "),rW=a("a"),far=o("NystromformerForQuestionAnswering"),mar=o(" (Nystr\xF6mformer model)"),gar=l(),KF=a("li"),q2e=a("strong"),har=o("qdqbert"),par=o(" \u2014 "),tW=a("a"),_ar=o("QDQBertForQuestionAnswering"),uar=o(" (QDQBert model)"),bar=l(),ZF=a("li"),j2e=a("strong"),Far=o("reformer"),Tar=o(" \u2014 "),aW=a("a"),Mar=o("ReformerForQuestionAnswering"),Ear=o(" (Reformer model)"),Car=l(),e6=a("li"),D2e=a("strong"),war=o("rembert"),Aar=o(" \u2014 "),nW=a("a"),Lar=o("RemBertForQuestionAnswering"),yar=o(" (RemBERT model)"),xar=l(),o6=a("li"),G2e=a("strong"),$ar=o("roberta"),kar=o(" \u2014 "),sW=a("a"),Sar=o("RobertaForQuestionAnswering"),Rar=o(" (RoBERTa model)"),Par=l(),r6=a("li"),O2e=a("strong"),Bar=o("roformer"),Iar=o(" \u2014 "),lW=a("a"),Nar=o("RoFormerForQuestionAnswering"),qar=o(" (RoFormer model)"),jar=l(),t6=a("li"),V2e=a("strong"),Dar=o("splinter"),Gar=o(" \u2014 "),iW=a("a"),Oar=o("SplinterForQuestionAnswering"),Var=o(" (Splinter model)"),Xar=l(),a6=a("li"),X2e=a("strong"),zar=o("squeezebert"),Qar=o(" \u2014 "),dW=a("a"),War=o("SqueezeBertForQuestionAnswering"),Har=o(" (SqueezeBERT model)"),Uar=l(),n6=a("li"),z2e=a("strong"),Jar=o("xlm"),Yar=o(" \u2014 "),cW=a("a"),Kar=o("XLMForQuestionAnsweringSimple"),Zar=o(" (XLM model)"),enr=l(),s6=a("li"),Q2e=a("strong"),onr=o("xlm-roberta"),rnr=o(" \u2014 "),fW=a("a"),tnr=o("XLMRobertaForQuestionAnswering"),anr=o(" (XLM-RoBERTa model)"),nnr=l(),l6=a("li"),W2e=a("strong"),snr=o("xlm-roberta-xl"),lnr=o(" \u2014 "),mW=a("a"),inr=o("XLMRobertaXLForQuestionAnswering"),dnr=o(" (XLM-RoBERTa-XL model)"),cnr=l(),i6=a("li"),H2e=a("strong"),fnr=o("xlnet"),mnr=o(" \u2014 "),gW=a("a"),gnr=o("XLNetForQuestionAnsweringSimple"),hnr=o(" (XLNet model)"),pnr=l(),d6=a("li"),U2e=a("strong"),_nr=o("yoso"),unr=o(" \u2014 "),hW=a("a"),bnr=o("YosoForQuestionAnswering"),vnr=o(" (YOSO model)"),Fnr=l(),c6=a("p"),Tnr=o("The model is set in evaluation mode by default using "),J2e=a("code"),Mnr=o("model.eval()"),Enr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=a("code"),Cnr=o("model.train()"),wnr=l(),F(f6.$$.fragment),UXe=l(),ud=a("h2"),m6=a("a"),K2e=a("span"),F(Sy.$$.fragment),Anr=l(),Z2e=a("span"),Lnr=o("AutoModelForTableQuestionAnswering"),JXe=l(),Go=a("div"),F(Ry.$$.fragment),ynr=l(),bd=a("p"),xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pW=a("a"),$nr=o("from_pretrained()"),knr=o(" class method or the "),_W=a("a"),Snr=o("from_config()"),Rnr=o(` class
method.`),Pnr=l(),Py=a("p"),Bnr=o("This class cannot be instantiated directly using "),e4e=a("code"),Inr=o("__init__()"),Nnr=o(" (throws an error)."),qnr=l(),bt=a("div"),F(By.$$.fragment),jnr=l(),o4e=a("p"),Dnr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Gnr=l(),vd=a("p"),Onr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),Vnr=o("not"),Xnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),znr=o("from_pretrained()"),Qnr=o(" to load the model weights."),Wnr=l(),F(g6.$$.fragment),Hnr=l(),lo=a("div"),F(Iy.$$.fragment),Unr=l(),t4e=a("p"),Jnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ynr=l(),Qa=a("p"),Knr=o("The model class to instantiate is selected based on the "),a4e=a("code"),Znr=o("model_type"),esr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),osr=o("pretrained_model_name_or_path"),rsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),tsr=o("pretrained_model_name_or_path"),asr=o(":"),nsr=l(),l4e=a("ul"),h6=a("li"),i4e=a("strong"),ssr=o("tapas"),lsr=o(" \u2014 "),bW=a("a"),isr=o("TapasForQuestionAnswering"),dsr=o(" (TAPAS model)"),csr=l(),p6=a("p"),fsr=o("The model is set in evaluation mode by default using "),d4e=a("code"),msr=o("model.eval()"),gsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c4e=a("code"),hsr=o("model.train()"),psr=l(),F(_6.$$.fragment),YXe=l(),Fd=a("h2"),u6=a("a"),f4e=a("span"),F(Ny.$$.fragment),_sr=l(),m4e=a("span"),usr=o("AutoModelForImageClassification"),KXe=l(),Oo=a("div"),F(qy.$$.fragment),bsr=l(),Td=a("p"),vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vW=a("a"),Fsr=o("from_pretrained()"),Tsr=o(" class method or the "),FW=a("a"),Msr=o("from_config()"),Esr=o(` class
method.`),Csr=l(),jy=a("p"),wsr=o("This class cannot be instantiated directly using "),g4e=a("code"),Asr=o("__init__()"),Lsr=o(" (throws an error)."),ysr=l(),vt=a("div"),F(Dy.$$.fragment),xsr=l(),h4e=a("p"),$sr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ksr=l(),Md=a("p"),Ssr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),Rsr=o("not"),Psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),Bsr=o("from_pretrained()"),Isr=o(" to load the model weights."),Nsr=l(),F(b6.$$.fragment),qsr=l(),io=a("div"),F(Gy.$$.fragment),jsr=l(),_4e=a("p"),Dsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gsr=l(),Wa=a("p"),Osr=o("The model class to instantiate is selected based on the "),u4e=a("code"),Vsr=o("model_type"),Xsr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),zsr=o("pretrained_model_name_or_path"),Qsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),Wsr=o("pretrained_model_name_or_path"),Hsr=o(":"),Usr=l(),_e=a("ul"),v6=a("li"),F4e=a("strong"),Jsr=o("beit"),Ysr=o(" \u2014 "),MW=a("a"),Ksr=o("BeitForImageClassification"),Zsr=o(" (BEiT model)"),elr=l(),F6=a("li"),T4e=a("strong"),olr=o("convnext"),rlr=o(" \u2014 "),EW=a("a"),tlr=o("ConvNextForImageClassification"),alr=o(" (ConvNeXT model)"),nlr=l(),T6=a("li"),M4e=a("strong"),slr=o("cvt"),llr=o(" \u2014 "),CW=a("a"),ilr=o("CvtForImageClassification"),dlr=o(" (CvT model)"),clr=l(),M6=a("li"),E4e=a("strong"),flr=o("data2vec-vision"),mlr=o(" \u2014 "),wW=a("a"),glr=o("Data2VecVisionForImageClassification"),hlr=o(" (Data2VecVision model)"),plr=l(),Us=a("li"),C4e=a("strong"),_lr=o("deit"),ulr=o(" \u2014 "),AW=a("a"),blr=o("DeiTForImageClassification"),vlr=o(" or "),LW=a("a"),Flr=o("DeiTForImageClassificationWithTeacher"),Tlr=o(" (DeiT model)"),Mlr=l(),E6=a("li"),w4e=a("strong"),Elr=o("imagegpt"),Clr=o(" \u2014 "),yW=a("a"),wlr=o("ImageGPTForImageClassification"),Alr=o(" (ImageGPT model)"),Llr=l(),Js=a("li"),A4e=a("strong"),ylr=o("levit"),xlr=o(" \u2014 "),xW=a("a"),$lr=o("LevitForImageClassification"),klr=o(" or "),$W=a("a"),Slr=o("LevitForImageClassificationWithTeacher"),Rlr=o(" (LeViT model)"),Plr=l(),C6=a("li"),L4e=a("strong"),Blr=o("mobilevit"),Ilr=o(" \u2014 "),kW=a("a"),Nlr=o("MobileViTForImageClassification"),qlr=o(" (MobileViT model)"),jlr=l(),Ft=a("li"),y4e=a("strong"),Dlr=o("perceiver"),Glr=o(" \u2014 "),SW=a("a"),Olr=o("PerceiverForImageClassificationLearned"),Vlr=o(" or "),RW=a("a"),Xlr=o("PerceiverForImageClassificationFourier"),zlr=o(" or "),PW=a("a"),Qlr=o("PerceiverForImageClassificationConvProcessing"),Wlr=o(" (Perceiver model)"),Hlr=l(),w6=a("li"),x4e=a("strong"),Ulr=o("poolformer"),Jlr=o(" \u2014 "),BW=a("a"),Ylr=o("PoolFormerForImageClassification"),Klr=o(" (PoolFormer model)"),Zlr=l(),A6=a("li"),$4e=a("strong"),eir=o("regnet"),oir=o(" \u2014 "),IW=a("a"),rir=o("RegNetForImageClassification"),tir=o(" (RegNet model)"),air=l(),L6=a("li"),k4e=a("strong"),nir=o("resnet"),sir=o(" \u2014 "),NW=a("a"),lir=o("ResNetForImageClassification"),iir=o(" (ResNet model)"),dir=l(),y6=a("li"),S4e=a("strong"),cir=o("segformer"),fir=o(" \u2014 "),qW=a("a"),mir=o("SegformerForImageClassification"),gir=o(" (SegFormer model)"),hir=l(),x6=a("li"),R4e=a("strong"),pir=o("swin"),_ir=o(" \u2014 "),jW=a("a"),uir=o("SwinForImageClassification"),bir=o(" (Swin Transformer model)"),vir=l(),$6=a("li"),P4e=a("strong"),Fir=o("swinv2"),Tir=o(" \u2014 "),DW=a("a"),Mir=o("Swinv2ForImageClassification"),Eir=o(" (Swin Transformer V2 model)"),Cir=l(),k6=a("li"),B4e=a("strong"),wir=o("van"),Air=o(" \u2014 "),GW=a("a"),Lir=o("VanForImageClassification"),yir=o(" (VAN model)"),xir=l(),S6=a("li"),I4e=a("strong"),$ir=o("vit"),kir=o(" \u2014 "),OW=a("a"),Sir=o("ViTForImageClassification"),Rir=o(" (ViT model)"),Pir=l(),R6=a("p"),Bir=o("The model is set in evaluation mode by default using "),N4e=a("code"),Iir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=a("code"),qir=o("model.train()"),jir=l(),F(P6.$$.fragment),ZXe=l(),Ed=a("h2"),B6=a("a"),j4e=a("span"),F(Oy.$$.fragment),Dir=l(),D4e=a("span"),Gir=o("AutoModelForVision2Seq"),eze=l(),Vo=a("div"),F(Vy.$$.fragment),Oir=l(),Cd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),XW=a("a"),Qir=o("from_config()"),Wir=o(` class
method.`),Hir=l(),Xy=a("p"),Uir=o("This class cannot be instantiated directly using "),G4e=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),Tt=a("div"),F(zy.$$.fragment),Zir=l(),O4e=a("p"),edr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),odr=l(),wd=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(I6.$$.fragment),idr=l(),co=a("div"),F(Qy.$$.fragment),ddr=l(),X4e=a("p"),cdr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fdr=l(),Ha=a("p"),mdr=o("The model class to instantiate is selected based on the "),z4e=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),H4e=a("ul"),N6=a("li"),U4e=a("strong"),Fdr=o("vision-encoder-decoder"),Tdr=o(" \u2014 "),QW=a("a"),Mdr=o("VisionEncoderDecoderModel"),Edr=o(" (Vision Encoder decoder model)"),Cdr=l(),q6=a("p"),wdr=o("The model is set in evaluation mode by default using "),J4e=a("code"),Adr=o("model.eval()"),Ldr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=a("code"),ydr=o("model.train()"),xdr=l(),F(j6.$$.fragment),oze=l(),Ad=a("h2"),D6=a("a"),K4e=a("span"),F(Wy.$$.fragment),$dr=l(),Z4e=a("span"),kdr=o("AutoModelForVisualQuestionAnswering"),rze=l(),Xo=a("div"),F(Hy.$$.fragment),Sdr=l(),Ld=a("p"),Rdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),WW=a("a"),Pdr=o("from_pretrained()"),Bdr=o(" class method or the "),HW=a("a"),Idr=o("from_config()"),Ndr=o(` class
method.`),qdr=l(),Uy=a("p"),jdr=o("This class cannot be instantiated directly using "),ebe=a("code"),Ddr=o("__init__()"),Gdr=o(" (throws an error)."),Odr=l(),Mt=a("div"),F(Jy.$$.fragment),Vdr=l(),obe=a("p"),Xdr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),zdr=l(),yd=a("p"),Qdr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Wdr=o("not"),Hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),Udr=o("from_pretrained()"),Jdr=o(" to load the model weights."),Ydr=l(),F(G6.$$.fragment),Kdr=l(),fo=a("div"),F(Yy.$$.fragment),Zdr=l(),tbe=a("p"),ecr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ocr=l(),Ua=a("p"),rcr=o("The model class to instantiate is selected based on the "),abe=a("code"),tcr=o("model_type"),acr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(":"),dcr=l(),lbe=a("ul"),O6=a("li"),ibe=a("strong"),ccr=o("vilt"),fcr=o(" \u2014 "),JW=a("a"),mcr=o("ViltForQuestionAnswering"),gcr=o(" (ViLT model)"),hcr=l(),V6=a("p"),pcr=o("The model is set in evaluation mode by default using "),dbe=a("code"),_cr=o("model.eval()"),ucr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),bcr=o("model.train()"),vcr=l(),F(X6.$$.fragment),tze=l(),xd=a("h2"),z6=a("a"),fbe=a("span"),F(Ky.$$.fragment),Fcr=l(),mbe=a("span"),Tcr=o("AutoModelForAudioClassification"),aze=l(),zo=a("div"),F(Zy.$$.fragment),Mcr=l(),$d=a("p"),Ecr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YW=a("a"),Ccr=o("from_pretrained()"),wcr=o(" class method or the "),KW=a("a"),Acr=o("from_config()"),Lcr=o(` class
method.`),ycr=l(),e8=a("p"),xcr=o("This class cannot be instantiated directly using "),gbe=a("code"),$cr=o("__init__()"),kcr=o(" (throws an error)."),Scr=l(),Et=a("div"),F(o8.$$.fragment),Rcr=l(),hbe=a("p"),Pcr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bcr=l(),kd=a("p"),Icr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),Ncr=o("not"),qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),jcr=o("from_pretrained()"),Dcr=o(" to load the model weights."),Gcr=l(),F(Q6.$$.fragment),Ocr=l(),mo=a("div"),F(r8.$$.fragment),Vcr=l(),_be=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zcr=l(),Ja=a("p"),Qcr=o("The model class to instantiate is selected based on the "),ube=a("code"),Wcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),Pe=a("ul"),W6=a("li"),Fbe=a("strong"),efr=o("data2vec-audio"),ofr=o(" \u2014 "),eH=a("a"),rfr=o("Data2VecAudioForSequenceClassification"),tfr=o(" (Data2VecAudio model)"),afr=l(),H6=a("li"),Tbe=a("strong"),nfr=o("hubert"),sfr=o(" \u2014 "),oH=a("a"),lfr=o("HubertForSequenceClassification"),ifr=o(" (Hubert model)"),dfr=l(),U6=a("li"),Mbe=a("strong"),cfr=o("sew"),ffr=o(" \u2014 "),rH=a("a"),mfr=o("SEWForSequenceClassification"),gfr=o(" (SEW model)"),hfr=l(),J6=a("li"),Ebe=a("strong"),pfr=o("sew-d"),_fr=o(" \u2014 "),tH=a("a"),ufr=o("SEWDForSequenceClassification"),bfr=o(" (SEW-D model)"),vfr=l(),Y6=a("li"),Cbe=a("strong"),Ffr=o("unispeech"),Tfr=o(" \u2014 "),aH=a("a"),Mfr=o("UniSpeechForSequenceClassification"),Efr=o(" (UniSpeech model)"),Cfr=l(),K6=a("li"),wbe=a("strong"),wfr=o("unispeech-sat"),Afr=o(" \u2014 "),nH=a("a"),Lfr=o("UniSpeechSatForSequenceClassification"),yfr=o(" (UniSpeechSat model)"),xfr=l(),Z6=a("li"),Abe=a("strong"),$fr=o("wav2vec2"),kfr=o(" \u2014 "),sH=a("a"),Sfr=o("Wav2Vec2ForSequenceClassification"),Rfr=o(" (Wav2Vec2 model)"),Pfr=l(),eT=a("li"),Lbe=a("strong"),Bfr=o("wav2vec2-conformer"),Ifr=o(" \u2014 "),lH=a("a"),Nfr=o("Wav2Vec2ConformerForSequenceClassification"),qfr=o(" (Wav2Vec2-Conformer model)"),jfr=l(),oT=a("li"),ybe=a("strong"),Dfr=o("wavlm"),Gfr=o(" \u2014 "),iH=a("a"),Ofr=o("WavLMForSequenceClassification"),Vfr=o(" (WavLM model)"),Xfr=l(),rT=a("p"),zfr=o("The model is set in evaluation mode by default using "),xbe=a("code"),Qfr=o("model.eval()"),Wfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),Hfr=o("model.train()"),Ufr=l(),F(tT.$$.fragment),nze=l(),Sd=a("h2"),aT=a("a"),kbe=a("span"),F(t8.$$.fragment),Jfr=l(),Sbe=a("span"),Yfr=o("AutoModelForAudioFrameClassification"),sze=l(),Qo=a("div"),F(a8.$$.fragment),Kfr=l(),Rd=a("p"),Zfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dH=a("a"),emr=o("from_pretrained()"),omr=o(" class method or the "),cH=a("a"),rmr=o("from_config()"),tmr=o(` class
method.`),amr=l(),n8=a("p"),nmr=o("This class cannot be instantiated directly using "),Rbe=a("code"),smr=o("__init__()"),lmr=o(" (throws an error)."),imr=l(),Ct=a("div"),F(s8.$$.fragment),dmr=l(),Pbe=a("p"),cmr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fmr=l(),Pd=a("p"),mmr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),gmr=o("not"),hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),pmr=o("from_pretrained()"),_mr=o(" to load the model weights."),umr=l(),F(nT.$$.fragment),bmr=l(),go=a("div"),F(l8.$$.fragment),vmr=l(),Ibe=a("p"),Fmr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tmr=l(),Ya=a("p"),Mmr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Emr=o("model_type"),Cmr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),wmr=o("pretrained_model_name_or_path"),Amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Lmr=o("pretrained_model_name_or_path"),ymr=o(":"),xmr=l(),rt=a("ul"),sT=a("li"),Dbe=a("strong"),$mr=o("data2vec-audio"),kmr=o(" \u2014 "),mH=a("a"),Smr=o("Data2VecAudioForAudioFrameClassification"),Rmr=o(" (Data2VecAudio model)"),Pmr=l(),lT=a("li"),Gbe=a("strong"),Bmr=o("unispeech-sat"),Imr=o(" \u2014 "),gH=a("a"),Nmr=o("UniSpeechSatForAudioFrameClassification"),qmr=o(" (UniSpeechSat model)"),jmr=l(),iT=a("li"),Obe=a("strong"),Dmr=o("wav2vec2"),Gmr=o(" \u2014 "),hH=a("a"),Omr=o("Wav2Vec2ForAudioFrameClassification"),Vmr=o(" (Wav2Vec2 model)"),Xmr=l(),dT=a("li"),Vbe=a("strong"),zmr=o("wav2vec2-conformer"),Qmr=o(" \u2014 "),pH=a("a"),Wmr=o("Wav2Vec2ConformerForAudioFrameClassification"),Hmr=o(" (Wav2Vec2-Conformer model)"),Umr=l(),cT=a("li"),Xbe=a("strong"),Jmr=o("wavlm"),Ymr=o(" \u2014 "),_H=a("a"),Kmr=o("WavLMForAudioFrameClassification"),Zmr=o(" (WavLM model)"),egr=l(),fT=a("p"),ogr=o("The model is set in evaluation mode by default using "),zbe=a("code"),rgr=o("model.eval()"),tgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),agr=o("model.train()"),ngr=l(),F(mT.$$.fragment),lze=l(),Bd=a("h2"),gT=a("a"),Wbe=a("span"),F(i8.$$.fragment),sgr=l(),Hbe=a("span"),lgr=o("AutoModelForCTC"),ize=l(),Wo=a("div"),F(d8.$$.fragment),igr=l(),Id=a("p"),dgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uH=a("a"),cgr=o("from_pretrained()"),fgr=o(" class method or the "),bH=a("a"),mgr=o("from_config()"),ggr=o(` class
method.`),hgr=l(),c8=a("p"),pgr=o("This class cannot be instantiated directly using "),Ube=a("code"),_gr=o("__init__()"),ugr=o(" (throws an error)."),bgr=l(),wt=a("div"),F(f8.$$.fragment),vgr=l(),Jbe=a("p"),Fgr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tgr=l(),Nd=a("p"),Mgr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Egr=o("not"),Cgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),wgr=o("from_pretrained()"),Agr=o(" to load the model weights."),Lgr=l(),F(hT.$$.fragment),ygr=l(),ho=a("div"),F(m8.$$.fragment),xgr=l(),Kbe=a("p"),$gr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kgr=l(),Ka=a("p"),Sgr=o("The model class to instantiate is selected based on the "),Zbe=a("code"),Rgr=o("model_type"),Pgr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),Bgr=o("pretrained_model_name_or_path"),Igr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),Ngr=o("pretrained_model_name_or_path"),qgr=o(":"),jgr=l(),Le=a("ul"),pT=a("li"),rve=a("strong"),Dgr=o("data2vec-audio"),Ggr=o(" \u2014 "),FH=a("a"),Ogr=o("Data2VecAudioForCTC"),Vgr=o(" (Data2VecAudio model)"),Xgr=l(),_T=a("li"),tve=a("strong"),zgr=o("hubert"),Qgr=o(" \u2014 "),TH=a("a"),Wgr=o("HubertForCTC"),Hgr=o(" (Hubert model)"),Ugr=l(),uT=a("li"),ave=a("strong"),Jgr=o("mctct"),Ygr=o(" \u2014 "),MH=a("a"),Kgr=o("MCTCTForCTC"),Zgr=o(" (M-CTC-T model)"),ehr=l(),bT=a("li"),nve=a("strong"),ohr=o("sew"),rhr=o(" \u2014 "),EH=a("a"),thr=o("SEWForCTC"),ahr=o(" (SEW model)"),nhr=l(),vT=a("li"),sve=a("strong"),shr=o("sew-d"),lhr=o(" \u2014 "),CH=a("a"),ihr=o("SEWDForCTC"),dhr=o(" (SEW-D model)"),chr=l(),FT=a("li"),lve=a("strong"),fhr=o("unispeech"),mhr=o(" \u2014 "),wH=a("a"),ghr=o("UniSpeechForCTC"),hhr=o(" (UniSpeech model)"),phr=l(),TT=a("li"),ive=a("strong"),_hr=o("unispeech-sat"),uhr=o(" \u2014 "),AH=a("a"),bhr=o("UniSpeechSatForCTC"),vhr=o(" (UniSpeechSat model)"),Fhr=l(),MT=a("li"),dve=a("strong"),Thr=o("wav2vec2"),Mhr=o(" \u2014 "),LH=a("a"),Ehr=o("Wav2Vec2ForCTC"),Chr=o(" (Wav2Vec2 model)"),whr=l(),ET=a("li"),cve=a("strong"),Ahr=o("wav2vec2-conformer"),Lhr=o(" \u2014 "),yH=a("a"),yhr=o("Wav2Vec2ConformerForCTC"),xhr=o(" (Wav2Vec2-Conformer model)"),$hr=l(),CT=a("li"),fve=a("strong"),khr=o("wavlm"),Shr=o(" \u2014 "),xH=a("a"),Rhr=o("WavLMForCTC"),Phr=o(" (WavLM model)"),Bhr=l(),wT=a("p"),Ihr=o("The model is set in evaluation mode by default using "),mve=a("code"),Nhr=o("model.eval()"),qhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=a("code"),jhr=o("model.train()"),Dhr=l(),F(AT.$$.fragment),dze=l(),qd=a("h2"),LT=a("a"),hve=a("span"),F(g8.$$.fragment),Ghr=l(),pve=a("span"),Ohr=o("AutoModelForSpeechSeq2Seq"),cze=l(),Ho=a("div"),F(h8.$$.fragment),Vhr=l(),jd=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$H=a("a"),zhr=o("from_pretrained()"),Qhr=o(" class method or the "),kH=a("a"),Whr=o("from_config()"),Hhr=o(` class
method.`),Uhr=l(),p8=a("p"),Jhr=o("This class cannot be instantiated directly using "),_ve=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),At=a("div"),F(_8.$$.fragment),epr=l(),uve=a("p"),opr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rpr=l(),Dd=a("p"),tpr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),apr=o("not"),npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),spr=o("from_pretrained()"),lpr=o(" to load the model weights."),ipr=l(),F(yT.$$.fragment),dpr=l(),po=a("div"),F(u8.$$.fragment),cpr=l(),vve=a("p"),fpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mpr=l(),Za=a("p"),gpr=o("The model class to instantiate is selected based on the "),Fve=a("code"),hpr=o("model_type"),ppr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),_pr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(":"),Fpr=l(),b8=a("ul"),xT=a("li"),Eve=a("strong"),Tpr=o("speech-encoder-decoder"),Mpr=o(" \u2014 "),RH=a("a"),Epr=o("SpeechEncoderDecoderModel"),Cpr=o(" (Speech Encoder decoder model)"),wpr=l(),$T=a("li"),Cve=a("strong"),Apr=o("speech_to_text"),Lpr=o(" \u2014 "),PH=a("a"),ypr=o("Speech2TextForConditionalGeneration"),xpr=o(" (Speech2Text model)"),$pr=l(),kT=a("p"),kpr=o("The model is set in evaluation mode by default using "),wve=a("code"),Spr=o("model.eval()"),Rpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=a("code"),Ppr=o("model.train()"),Bpr=l(),F(ST.$$.fragment),fze=l(),Gd=a("h2"),RT=a("a"),Lve=a("span"),F(v8.$$.fragment),Ipr=l(),yve=a("span"),Npr=o("AutoModelForAudioXVector"),mze=l(),Uo=a("div"),F(F8.$$.fragment),qpr=l(),Od=a("p"),jpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),BH=a("a"),Dpr=o("from_pretrained()"),Gpr=o(" class method or the "),IH=a("a"),Opr=o("from_config()"),Vpr=o(` class
method.`),Xpr=l(),T8=a("p"),zpr=o("This class cannot be instantiated directly using "),xve=a("code"),Qpr=o("__init__()"),Wpr=o(" (throws an error)."),Hpr=l(),Lt=a("div"),F(M8.$$.fragment),Upr=l(),$ve=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ypr=l(),Vd=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),Zpr=o("not"),e_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),o_r=o("from_pretrained()"),r_r=o(" to load the model weights."),t_r=l(),F(PT.$$.fragment),a_r=l(),_o=a("div"),F(E8.$$.fragment),n_r=l(),Sve=a("p"),s_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),l_r=l(),en=a("p"),i_r=o("The model class to instantiate is selected based on the "),Rve=a("code"),d_r=o("model_type"),c_r=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),f_r=o("pretrained_model_name_or_path"),m_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(":"),p_r=l(),tt=a("ul"),BT=a("li"),Ive=a("strong"),__r=o("data2vec-audio"),u_r=o(" \u2014 "),qH=a("a"),b_r=o("Data2VecAudioForXVector"),v_r=o(" (Data2VecAudio model)"),F_r=l(),IT=a("li"),Nve=a("strong"),T_r=o("unispeech-sat"),M_r=o(" \u2014 "),jH=a("a"),E_r=o("UniSpeechSatForXVector"),C_r=o(" (UniSpeechSat model)"),w_r=l(),NT=a("li"),qve=a("strong"),A_r=o("wav2vec2"),L_r=o(" \u2014 "),DH=a("a"),y_r=o("Wav2Vec2ForXVector"),x_r=o(" (Wav2Vec2 model)"),$_r=l(),qT=a("li"),jve=a("strong"),k_r=o("wav2vec2-conformer"),S_r=o(" \u2014 "),GH=a("a"),R_r=o("Wav2Vec2ConformerForXVector"),P_r=o(" (Wav2Vec2-Conformer model)"),B_r=l(),jT=a("li"),Dve=a("strong"),I_r=o("wavlm"),N_r=o(" \u2014 "),OH=a("a"),q_r=o("WavLMForXVector"),j_r=o(" (WavLM model)"),D_r=l(),DT=a("p"),G_r=o("The model is set in evaluation mode by default using "),Gve=a("code"),O_r=o("model.eval()"),V_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=a("code"),X_r=o("model.train()"),z_r=l(),F(GT.$$.fragment),gze=l(),Xd=a("h2"),OT=a("a"),Vve=a("span"),F(C8.$$.fragment),Q_r=l(),Xve=a("span"),W_r=o("AutoModelForMaskedImageModeling"),hze=l(),Jo=a("div"),F(w8.$$.fragment),H_r=l(),zd=a("p"),U_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VH=a("a"),J_r=o("from_pretrained()"),Y_r=o(" class method or the "),XH=a("a"),K_r=o("from_config()"),Z_r=o(` class
method.`),eur=l(),A8=a("p"),our=o("This class cannot be instantiated directly using "),zve=a("code"),rur=o("__init__()"),tur=o(" (throws an error)."),aur=l(),yt=a("div"),F(L8.$$.fragment),nur=l(),Qve=a("p"),sur=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lur=l(),Qd=a("p"),iur=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),dur=o("not"),cur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),fur=o("from_pretrained()"),mur=o(" to load the model weights."),gur=l(),F(VT.$$.fragment),hur=l(),uo=a("div"),F(y8.$$.fragment),pur=l(),Hve=a("p"),_ur=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),uur=l(),on=a("p"),bur=o("The model class to instantiate is selected based on the "),Uve=a("code"),vur=o("model_type"),Fur=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Tur=o("pretrained_model_name_or_path"),Mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Eur=o("pretrained_model_name_or_path"),Cur=o(":"),wur=l(),rn=a("ul"),XT=a("li"),Kve=a("strong"),Aur=o("deit"),Lur=o(" \u2014 "),QH=a("a"),yur=o("DeiTForMaskedImageModeling"),xur=o(" (DeiT model)"),$ur=l(),zT=a("li"),Zve=a("strong"),kur=o("swin"),Sur=o(" \u2014 "),WH=a("a"),Rur=o("SwinForMaskedImageModeling"),Pur=o(" (Swin Transformer model)"),Bur=l(),QT=a("li"),eFe=a("strong"),Iur=o("swinv2"),Nur=o(" \u2014 "),HH=a("a"),qur=o("Swinv2ForMaskedImageModeling"),jur=o(" (Swin Transformer V2 model)"),Dur=l(),WT=a("li"),oFe=a("strong"),Gur=o("vit"),Our=o(" \u2014 "),UH=a("a"),Vur=o("ViTForMaskedImageModeling"),Xur=o(" (ViT model)"),zur=l(),HT=a("p"),Qur=o("The model is set in evaluation mode by default using "),rFe=a("code"),Wur=o("model.eval()"),Hur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tFe=a("code"),Uur=o("model.train()"),Jur=l(),F(UT.$$.fragment),pze=l(),Wd=a("h2"),JT=a("a"),aFe=a("span"),F(x8.$$.fragment),Yur=l(),nFe=a("span"),Kur=o("AutoModelForObjectDetection"),_ze=l(),Yo=a("div"),F($8.$$.fragment),Zur=l(),Hd=a("p"),e1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=a("a"),o1r=o("from_pretrained()"),r1r=o(" class method or the "),YH=a("a"),t1r=o("from_config()"),a1r=o(` class
method.`),n1r=l(),k8=a("p"),s1r=o("This class cannot be instantiated directly using "),sFe=a("code"),l1r=o("__init__()"),i1r=o(" (throws an error)."),d1r=l(),xt=a("div"),F(S8.$$.fragment),c1r=l(),lFe=a("p"),f1r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),m1r=l(),Ud=a("p"),g1r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),h1r=o("not"),p1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),_1r=o("from_pretrained()"),u1r=o(" to load the model weights."),b1r=l(),F(YT.$$.fragment),v1r=l(),bo=a("div"),F(R8.$$.fragment),F1r=l(),dFe=a("p"),T1r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),M1r=l(),tn=a("p"),E1r=o("The model class to instantiate is selected based on the "),cFe=a("code"),C1r=o("model_type"),w1r=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),A1r=o("pretrained_model_name_or_path"),L1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=a("code"),y1r=o("pretrained_model_name_or_path"),x1r=o(":"),$1r=l(),P8=a("ul"),KT=a("li"),gFe=a("strong"),k1r=o("detr"),S1r=o(" \u2014 "),ZH=a("a"),R1r=o("DetrForObjectDetection"),P1r=o(" (DETR model)"),B1r=l(),ZT=a("li"),hFe=a("strong"),I1r=o("yolos"),N1r=o(" \u2014 "),eU=a("a"),q1r=o("YolosForObjectDetection"),j1r=o(" (YOLOS model)"),D1r=l(),e7=a("p"),G1r=o("The model is set in evaluation mode by default using "),pFe=a("code"),O1r=o("model.eval()"),V1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=a("code"),X1r=o("model.train()"),z1r=l(),F(o7.$$.fragment),uze=l(),Jd=a("h2"),r7=a("a"),uFe=a("span"),F(B8.$$.fragment),Q1r=l(),bFe=a("span"),W1r=o("AutoModelForImageSegmentation"),bze=l(),Ko=a("div"),F(I8.$$.fragment),H1r=l(),Yd=a("p"),U1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=a("a"),J1r=o("from_pretrained()"),Y1r=o(" class method or the "),rU=a("a"),K1r=o("from_config()"),Z1r=o(` class
method.`),e2r=l(),N8=a("p"),o2r=o("This class cannot be instantiated directly using "),vFe=a("code"),r2r=o("__init__()"),t2r=o(" (throws an error)."),a2r=l(),$t=a("div"),F(q8.$$.fragment),n2r=l(),FFe=a("p"),s2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),l2r=l(),Kd=a("p"),i2r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),d2r=o("not"),c2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),f2r=o("from_pretrained()"),m2r=o(" to load the model weights."),g2r=l(),F(t7.$$.fragment),h2r=l(),vo=a("div"),F(j8.$$.fragment),p2r=l(),MFe=a("p"),_2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),u2r=l(),an=a("p"),b2r=o("The model class to instantiate is selected based on the "),EFe=a("code"),v2r=o("model_type"),F2r=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),T2r=o("pretrained_model_name_or_path"),M2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(":"),w2r=l(),AFe=a("ul"),a7=a("li"),LFe=a("strong"),A2r=o("detr"),L2r=o(" \u2014 "),aU=a("a"),y2r=o("DetrForSegmentation"),x2r=o(" (DETR model)"),$2r=l(),n7=a("p"),k2r=o("The model is set in evaluation mode by default using "),yFe=a("code"),S2r=o("model.eval()"),R2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=a("code"),P2r=o("model.train()"),B2r=l(),F(s7.$$.fragment),vze=l(),Zd=a("h2"),l7=a("a"),$Fe=a("span"),F(D8.$$.fragment),I2r=l(),kFe=a("span"),N2r=o("AutoModelForSemanticSegmentation"),Fze=l(),Zo=a("div"),F(G8.$$.fragment),q2r=l(),ec=a("p"),j2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=a("a"),D2r=o("from_pretrained()"),G2r=o(" class method or the "),sU=a("a"),O2r=o("from_config()"),V2r=o(` class
method.`),X2r=l(),O8=a("p"),z2r=o("This class cannot be instantiated directly using "),SFe=a("code"),Q2r=o("__init__()"),W2r=o(" (throws an error)."),H2r=l(),kt=a("div"),F(V8.$$.fragment),U2r=l(),RFe=a("p"),J2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Y2r=l(),oc=a("p"),K2r=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),Z2r=o("not"),e4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),o4r=o("from_pretrained()"),r4r=o(" to load the model weights."),t4r=l(),F(i7.$$.fragment),a4r=l(),Fo=a("div"),F(X8.$$.fragment),n4r=l(),BFe=a("p"),s4r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),l4r=l(),nn=a("p"),i4r=o("The model class to instantiate is selected based on the "),IFe=a("code"),d4r=o("model_type"),c4r=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),f4r=o("pretrained_model_name_or_path"),m4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),g4r=o("pretrained_model_name_or_path"),h4r=o(":"),p4r=l(),at=a("ul"),d7=a("li"),jFe=a("strong"),_4r=o("beit"),u4r=o(" \u2014 "),iU=a("a"),b4r=o("BeitForSemanticSegmentation"),v4r=o(" (BEiT model)"),F4r=l(),c7=a("li"),DFe=a("strong"),T4r=o("data2vec-vision"),M4r=o(" \u2014 "),dU=a("a"),E4r=o("Data2VecVisionForSemanticSegmentation"),C4r=o(" (Data2VecVision model)"),w4r=l(),f7=a("li"),GFe=a("strong"),A4r=o("dpt"),L4r=o(" \u2014 "),cU=a("a"),y4r=o("DPTForSemanticSegmentation"),x4r=o(" (DPT model)"),$4r=l(),m7=a("li"),OFe=a("strong"),k4r=o("mobilevit"),S4r=o(" \u2014 "),fU=a("a"),R4r=o("MobileViTForSemanticSegmentation"),P4r=o(" (MobileViT model)"),B4r=l(),g7=a("li"),VFe=a("strong"),I4r=o("segformer"),N4r=o(" \u2014 "),mU=a("a"),q4r=o("SegformerForSemanticSegmentation"),j4r=o(" (SegFormer model)"),D4r=l(),h7=a("p"),G4r=o("The model is set in evaluation mode by default using "),XFe=a("code"),O4r=o("model.eval()"),V4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=a("code"),X4r=o("model.train()"),z4r=l(),F(p7.$$.fragment),Tze=l(),rc=a("h2"),_7=a("a"),QFe=a("span"),F(z8.$$.fragment),Q4r=l(),WFe=a("span"),W4r=o("AutoModelForInstanceSegmentation"),Mze=l(),er=a("div"),F(Q8.$$.fragment),H4r=l(),tc=a("p"),U4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=a("a"),J4r=o("from_pretrained()"),Y4r=o(" class method or the "),hU=a("a"),K4r=o("from_config()"),Z4r=o(` class
method.`),ebr=l(),W8=a("p"),obr=o("This class cannot be instantiated directly using "),HFe=a("code"),rbr=o("__init__()"),tbr=o(" (throws an error)."),abr=l(),St=a("div"),F(H8.$$.fragment),nbr=l(),UFe=a("p"),sbr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lbr=l(),ac=a("p"),ibr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),dbr=o("not"),cbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),fbr=o("from_pretrained()"),mbr=o(" to load the model weights."),gbr=l(),F(u7.$$.fragment),hbr=l(),To=a("div"),F(U8.$$.fragment),pbr=l(),YFe=a("p"),_br=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ubr=l(),sn=a("p"),bbr=o("The model class to instantiate is selected based on the "),KFe=a("code"),vbr=o("model_type"),Fbr=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),Tbr=o("pretrained_model_name_or_path"),Mbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(":"),wbr=l(),o6e=a("ul"),b7=a("li"),r6e=a("strong"),Abr=o("maskformer"),Lbr=o(" \u2014 "),_U=a("a"),ybr=o("MaskFormerForInstanceSegmentation"),xbr=o(" (MaskFormer model)"),$br=l(),v7=a("p"),kbr=o("The model is set in evaluation mode by default using "),t6e=a("code"),Sbr=o("model.eval()"),Rbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a6e=a("code"),Pbr=o("model.train()"),Bbr=l(),F(F7.$$.fragment),Eze=l(),nc=a("h2"),T7=a("a"),n6e=a("span"),F(J8.$$.fragment),Ibr=l(),s6e=a("span"),Nbr=o("TFAutoModel"),Cze=l(),or=a("div"),F(Y8.$$.fragment),qbr=l(),sc=a("p"),jbr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=a("a"),Dbr=o("from_pretrained()"),Gbr=o(" class method or the "),bU=a("a"),Obr=o("from_config()"),Vbr=o(` class
method.`),Xbr=l(),K8=a("p"),zbr=o("This class cannot be instantiated directly using "),l6e=a("code"),Qbr=o("__init__()"),Wbr=o(" (throws an error)."),Hbr=l(),Rt=a("div"),F(Z8.$$.fragment),Ubr=l(),i6e=a("p"),Jbr=o("Instantiates one of the base model classes of the library from a configuration."),Ybr=l(),lc=a("p"),Kbr=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),Zbr=o("not"),evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),ovr=o("from_pretrained()"),rvr=o(" to load the model weights."),tvr=l(),F(M7.$$.fragment),avr=l(),xr=a("div"),F(ex.$$.fragment),nvr=l(),c6e=a("p"),svr=o("Instantiate one of the base model classes of the library from a pretrained model."),lvr=l(),ln=a("p"),ivr=o("The model class to instantiate is selected based on the "),f6e=a("code"),dvr=o("model_type"),cvr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),fvr=o("pretrained_model_name_or_path"),mvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(":"),pvr=l(),q=a("ul"),E7=a("li"),h6e=a("strong"),_vr=o("albert"),uvr=o(" \u2014 "),FU=a("a"),bvr=o("TFAlbertModel"),vvr=o(" (ALBERT model)"),Fvr=l(),C7=a("li"),p6e=a("strong"),Tvr=o("bart"),Mvr=o(" \u2014 "),TU=a("a"),Evr=o("TFBartModel"),Cvr=o(" (BART model)"),wvr=l(),w7=a("li"),_6e=a("strong"),Avr=o("bert"),Lvr=o(" \u2014 "),MU=a("a"),yvr=o("TFBertModel"),xvr=o(" (BERT model)"),$vr=l(),A7=a("li"),u6e=a("strong"),kvr=o("blenderbot"),Svr=o(" \u2014 "),EU=a("a"),Rvr=o("TFBlenderbotModel"),Pvr=o(" (Blenderbot model)"),Bvr=l(),L7=a("li"),b6e=a("strong"),Ivr=o("blenderbot-small"),Nvr=o(" \u2014 "),CU=a("a"),qvr=o("TFBlenderbotSmallModel"),jvr=o(" (BlenderbotSmall model)"),Dvr=l(),y7=a("li"),v6e=a("strong"),Gvr=o("camembert"),Ovr=o(" \u2014 "),wU=a("a"),Vvr=o("TFCamembertModel"),Xvr=o(" (CamemBERT model)"),zvr=l(),x7=a("li"),F6e=a("strong"),Qvr=o("clip"),Wvr=o(" \u2014 "),AU=a("a"),Hvr=o("TFCLIPModel"),Uvr=o(" (CLIP model)"),Jvr=l(),$7=a("li"),T6e=a("strong"),Yvr=o("convbert"),Kvr=o(" \u2014 "),LU=a("a"),Zvr=o("TFConvBertModel"),eFr=o(" (ConvBERT model)"),oFr=l(),k7=a("li"),M6e=a("strong"),rFr=o("convnext"),tFr=o(" \u2014 "),yU=a("a"),aFr=o("TFConvNextModel"),nFr=o(" (ConvNeXT model)"),sFr=l(),S7=a("li"),E6e=a("strong"),lFr=o("ctrl"),iFr=o(" \u2014 "),xU=a("a"),dFr=o("TFCTRLModel"),cFr=o(" (CTRL model)"),fFr=l(),R7=a("li"),C6e=a("strong"),mFr=o("data2vec-vision"),gFr=o(" \u2014 "),$U=a("a"),hFr=o("TFData2VecVisionModel"),pFr=o(" (Data2VecVision model)"),_Fr=l(),P7=a("li"),w6e=a("strong"),uFr=o("deberta"),bFr=o(" \u2014 "),kU=a("a"),vFr=o("TFDebertaModel"),FFr=o(" (DeBERTa model)"),TFr=l(),B7=a("li"),A6e=a("strong"),MFr=o("deberta-v2"),EFr=o(" \u2014 "),SU=a("a"),CFr=o("TFDebertaV2Model"),wFr=o(" (DeBERTa-v2 model)"),AFr=l(),I7=a("li"),L6e=a("strong"),LFr=o("distilbert"),yFr=o(" \u2014 "),RU=a("a"),xFr=o("TFDistilBertModel"),$Fr=o(" (DistilBERT model)"),kFr=l(),N7=a("li"),y6e=a("strong"),SFr=o("dpr"),RFr=o(" \u2014 "),PU=a("a"),PFr=o("TFDPRQuestionEncoder"),BFr=o(" (DPR model)"),IFr=l(),q7=a("li"),x6e=a("strong"),NFr=o("electra"),qFr=o(" \u2014 "),BU=a("a"),jFr=o("TFElectraModel"),DFr=o(" (ELECTRA model)"),GFr=l(),j7=a("li"),$6e=a("strong"),OFr=o("flaubert"),VFr=o(" \u2014 "),IU=a("a"),XFr=o("TFFlaubertModel"),zFr=o(" (FlauBERT model)"),QFr=l(),Ys=a("li"),k6e=a("strong"),WFr=o("funnel"),HFr=o(" \u2014 "),NU=a("a"),UFr=o("TFFunnelModel"),JFr=o(" or "),qU=a("a"),YFr=o("TFFunnelBaseModel"),KFr=o(" (Funnel Transformer model)"),ZFr=l(),D7=a("li"),S6e=a("strong"),e6r=o("gpt2"),o6r=o(" \u2014 "),jU=a("a"),r6r=o("TFGPT2Model"),t6r=o(" (OpenAI GPT-2 model)"),a6r=l(),G7=a("li"),R6e=a("strong"),n6r=o("gptj"),s6r=o(" \u2014 "),DU=a("a"),l6r=o("TFGPTJModel"),i6r=o(" (GPT-J model)"),d6r=l(),O7=a("li"),P6e=a("strong"),c6r=o("hubert"),f6r=o(" \u2014 "),GU=a("a"),m6r=o("TFHubertModel"),g6r=o(" (Hubert model)"),h6r=l(),V7=a("li"),B6e=a("strong"),p6r=o("layoutlm"),_6r=o(" \u2014 "),OU=a("a"),u6r=o("TFLayoutLMModel"),b6r=o(" (LayoutLM model)"),v6r=l(),X7=a("li"),I6e=a("strong"),F6r=o("led"),T6r=o(" \u2014 "),VU=a("a"),M6r=o("TFLEDModel"),E6r=o(" (LED model)"),C6r=l(),z7=a("li"),N6e=a("strong"),w6r=o("longformer"),A6r=o(" \u2014 "),XU=a("a"),L6r=o("TFLongformerModel"),y6r=o(" (Longformer model)"),x6r=l(),Q7=a("li"),q6e=a("strong"),$6r=o("lxmert"),k6r=o(" \u2014 "),zU=a("a"),S6r=o("TFLxmertModel"),R6r=o(" (LXMERT model)"),P6r=l(),W7=a("li"),j6e=a("strong"),B6r=o("marian"),I6r=o(" \u2014 "),QU=a("a"),N6r=o("TFMarianModel"),q6r=o(" (Marian model)"),j6r=l(),H7=a("li"),D6e=a("strong"),D6r=o("mbart"),G6r=o(" \u2014 "),WU=a("a"),O6r=o("TFMBartModel"),V6r=o(" (mBART model)"),X6r=l(),U7=a("li"),G6e=a("strong"),z6r=o("mobilebert"),Q6r=o(" \u2014 "),HU=a("a"),W6r=o("TFMobileBertModel"),H6r=o(" (MobileBERT model)"),U6r=l(),J7=a("li"),O6e=a("strong"),J6r=o("mpnet"),Y6r=o(" \u2014 "),UU=a("a"),K6r=o("TFMPNetModel"),Z6r=o(" (MPNet model)"),eTr=l(),Y7=a("li"),V6e=a("strong"),oTr=o("mt5"),rTr=o(" \u2014 "),JU=a("a"),tTr=o("TFMT5Model"),aTr=o(" (MT5 model)"),nTr=l(),K7=a("li"),X6e=a("strong"),sTr=o("openai-gpt"),lTr=o(" \u2014 "),YU=a("a"),iTr=o("TFOpenAIGPTModel"),dTr=o(" (OpenAI GPT model)"),cTr=l(),Z7=a("li"),z6e=a("strong"),fTr=o("opt"),mTr=o(" \u2014 "),KU=a("a"),gTr=o("TFOPTModel"),hTr=o(" (OPT model)"),pTr=l(),e9=a("li"),Q6e=a("strong"),_Tr=o("pegasus"),uTr=o(" \u2014 "),ZU=a("a"),bTr=o("TFPegasusModel"),vTr=o(" (Pegasus model)"),FTr=l(),o9=a("li"),W6e=a("strong"),TTr=o("regnet"),MTr=o(" \u2014 "),eJ=a("a"),ETr=o("TFRegNetModel"),CTr=o(" (RegNet model)"),wTr=l(),r9=a("li"),H6e=a("strong"),ATr=o("rembert"),LTr=o(" \u2014 "),oJ=a("a"),yTr=o("TFRemBertModel"),xTr=o(" (RemBERT model)"),$Tr=l(),t9=a("li"),U6e=a("strong"),kTr=o("resnet"),STr=o(" \u2014 "),rJ=a("a"),RTr=o("TFResNetModel"),PTr=o(" (ResNet model)"),BTr=l(),a9=a("li"),J6e=a("strong"),ITr=o("roberta"),NTr=o(" \u2014 "),tJ=a("a"),qTr=o("TFRobertaModel"),jTr=o(" (RoBERTa model)"),DTr=l(),n9=a("li"),Y6e=a("strong"),GTr=o("roformer"),OTr=o(" \u2014 "),aJ=a("a"),VTr=o("TFRoFormerModel"),XTr=o(" (RoFormer model)"),zTr=l(),s9=a("li"),K6e=a("strong"),QTr=o("speech_to_text"),WTr=o(" \u2014 "),nJ=a("a"),HTr=o("TFSpeech2TextModel"),UTr=o(" (Speech2Text model)"),JTr=l(),l9=a("li"),Z6e=a("strong"),YTr=o("swin"),KTr=o(" \u2014 "),sJ=a("a"),ZTr=o("TFSwinModel"),e7r=o(" (Swin Transformer model)"),o7r=l(),i9=a("li"),eTe=a("strong"),r7r=o("swinv2"),t7r=o(" \u2014 "),lJ=a("a"),a7r=o("TFSwinv2Model"),n7r=o(" (Swin Transformer V2 model)"),s7r=l(),d9=a("li"),oTe=a("strong"),l7r=o("t5"),i7r=o(" \u2014 "),iJ=a("a"),d7r=o("TFT5Model"),c7r=o(" (T5 model)"),f7r=l(),c9=a("li"),rTe=a("strong"),m7r=o("tapas"),g7r=o(" \u2014 "),dJ=a("a"),h7r=o("TFTapasModel"),p7r=o(" (TAPAS model)"),_7r=l(),f9=a("li"),tTe=a("strong"),u7r=o("transfo-xl"),b7r=o(" \u2014 "),cJ=a("a"),v7r=o("TFTransfoXLModel"),F7r=o(" (Transformer-XL model)"),T7r=l(),m9=a("li"),aTe=a("strong"),M7r=o("vit"),E7r=o(" \u2014 "),fJ=a("a"),C7r=o("TFViTModel"),w7r=o(" (ViT model)"),A7r=l(),g9=a("li"),nTe=a("strong"),L7r=o("vit_mae"),y7r=o(" \u2014 "),mJ=a("a"),x7r=o("TFViTMAEModel"),$7r=o(" (ViTMAE model)"),k7r=l(),h9=a("li"),sTe=a("strong"),S7r=o("wav2vec2"),R7r=o(" \u2014 "),gJ=a("a"),P7r=o("TFWav2Vec2Model"),B7r=o(" (Wav2Vec2 model)"),I7r=l(),p9=a("li"),lTe=a("strong"),N7r=o("xlm"),q7r=o(" \u2014 "),hJ=a("a"),j7r=o("TFXLMModel"),D7r=o(" (XLM model)"),G7r=l(),_9=a("li"),iTe=a("strong"),O7r=o("xlm-roberta"),V7r=o(" \u2014 "),pJ=a("a"),X7r=o("TFXLMRobertaModel"),z7r=o(" (XLM-RoBERTa model)"),Q7r=l(),u9=a("li"),dTe=a("strong"),W7r=o("xlnet"),H7r=o(" \u2014 "),_J=a("a"),U7r=o("TFXLNetModel"),J7r=o(" (XLNet model)"),Y7r=l(),F(b9.$$.fragment),wze=l(),ic=a("h2"),v9=a("a"),cTe=a("span"),F(ox.$$.fragment),K7r=l(),fTe=a("span"),Z7r=o("TFAutoModelForPreTraining"),Aze=l(),rr=a("div"),F(rx.$$.fragment),e9r=l(),dc=a("p"),o9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=a("a"),r9r=o("from_pretrained()"),t9r=o(" class method or the "),bJ=a("a"),a9r=o("from_config()"),n9r=o(` class
method.`),s9r=l(),tx=a("p"),l9r=o("This class cannot be instantiated directly using "),mTe=a("code"),i9r=o("__init__()"),d9r=o(" (throws an error)."),c9r=l(),Pt=a("div"),F(ax.$$.fragment),f9r=l(),gTe=a("p"),m9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g9r=l(),cc=a("p"),h9r=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),p9r=o("not"),_9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),u9r=o("from_pretrained()"),b9r=o(" to load the model weights."),v9r=l(),F(F9.$$.fragment),F9r=l(),$r=a("div"),F(nx.$$.fragment),T9r=l(),pTe=a("p"),M9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E9r=l(),dn=a("p"),C9r=o("The model class to instantiate is selected based on the "),_Te=a("code"),w9r=o("model_type"),A9r=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),L9r=o("pretrained_model_name_or_path"),y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),x9r=o("pretrained_model_name_or_path"),$9r=o(":"),k9r=l(),se=a("ul"),T9=a("li"),vTe=a("strong"),S9r=o("albert"),R9r=o(" \u2014 "),FJ=a("a"),P9r=o("TFAlbertForPreTraining"),B9r=o(" (ALBERT model)"),I9r=l(),M9=a("li"),FTe=a("strong"),N9r=o("bart"),q9r=o(" \u2014 "),TJ=a("a"),j9r=o("TFBartForConditionalGeneration"),D9r=o(" (BART model)"),G9r=l(),E9=a("li"),TTe=a("strong"),O9r=o("bert"),V9r=o(" \u2014 "),MJ=a("a"),X9r=o("TFBertForPreTraining"),z9r=o(" (BERT model)"),Q9r=l(),C9=a("li"),MTe=a("strong"),W9r=o("camembert"),H9r=o(" \u2014 "),EJ=a("a"),U9r=o("TFCamembertForMaskedLM"),J9r=o(" (CamemBERT model)"),Y9r=l(),w9=a("li"),ETe=a("strong"),K9r=o("ctrl"),Z9r=o(" \u2014 "),CJ=a("a"),eMr=o("TFCTRLLMHeadModel"),oMr=o(" (CTRL model)"),rMr=l(),A9=a("li"),CTe=a("strong"),tMr=o("distilbert"),aMr=o(" \u2014 "),wJ=a("a"),nMr=o("TFDistilBertForMaskedLM"),sMr=o(" (DistilBERT model)"),lMr=l(),L9=a("li"),wTe=a("strong"),iMr=o("electra"),dMr=o(" \u2014 "),AJ=a("a"),cMr=o("TFElectraForPreTraining"),fMr=o(" (ELECTRA model)"),mMr=l(),y9=a("li"),ATe=a("strong"),gMr=o("flaubert"),hMr=o(" \u2014 "),LJ=a("a"),pMr=o("TFFlaubertWithLMHeadModel"),_Mr=o(" (FlauBERT model)"),uMr=l(),x9=a("li"),LTe=a("strong"),bMr=o("funnel"),vMr=o(" \u2014 "),yJ=a("a"),FMr=o("TFFunnelForPreTraining"),TMr=o(" (Funnel Transformer model)"),MMr=l(),$9=a("li"),yTe=a("strong"),EMr=o("gpt2"),CMr=o(" \u2014 "),xJ=a("a"),wMr=o("TFGPT2LMHeadModel"),AMr=o(" (OpenAI GPT-2 model)"),LMr=l(),k9=a("li"),xTe=a("strong"),yMr=o("layoutlm"),xMr=o(" \u2014 "),$J=a("a"),$Mr=o("TFLayoutLMForMaskedLM"),kMr=o(" (LayoutLM model)"),SMr=l(),S9=a("li"),$Te=a("strong"),RMr=o("lxmert"),PMr=o(" \u2014 "),kJ=a("a"),BMr=o("TFLxmertForPreTraining"),IMr=o(" (LXMERT model)"),NMr=l(),R9=a("li"),kTe=a("strong"),qMr=o("mobilebert"),jMr=o(" \u2014 "),SJ=a("a"),DMr=o("TFMobileBertForPreTraining"),GMr=o(" (MobileBERT model)"),OMr=l(),P9=a("li"),STe=a("strong"),VMr=o("mpnet"),XMr=o(" \u2014 "),RJ=a("a"),zMr=o("TFMPNetForMaskedLM"),QMr=o(" (MPNet model)"),WMr=l(),B9=a("li"),RTe=a("strong"),HMr=o("openai-gpt"),UMr=o(" \u2014 "),PJ=a("a"),JMr=o("TFOpenAIGPTLMHeadModel"),YMr=o(" (OpenAI GPT model)"),KMr=l(),I9=a("li"),PTe=a("strong"),ZMr=o("roberta"),eEr=o(" \u2014 "),BJ=a("a"),oEr=o("TFRobertaForMaskedLM"),rEr=o(" (RoBERTa model)"),tEr=l(),N9=a("li"),BTe=a("strong"),aEr=o("t5"),nEr=o(" \u2014 "),IJ=a("a"),sEr=o("TFT5ForConditionalGeneration"),lEr=o(" (T5 model)"),iEr=l(),q9=a("li"),ITe=a("strong"),dEr=o("tapas"),cEr=o(" \u2014 "),NJ=a("a"),fEr=o("TFTapasForMaskedLM"),mEr=o(" (TAPAS model)"),gEr=l(),j9=a("li"),NTe=a("strong"),hEr=o("transfo-xl"),pEr=o(" \u2014 "),qJ=a("a"),_Er=o("TFTransfoXLLMHeadModel"),uEr=o(" (Transformer-XL model)"),bEr=l(),D9=a("li"),qTe=a("strong"),vEr=o("vit_mae"),FEr=o(" \u2014 "),jJ=a("a"),TEr=o("TFViTMAEForPreTraining"),MEr=o(" (ViTMAE model)"),EEr=l(),G9=a("li"),jTe=a("strong"),CEr=o("xlm"),wEr=o(" \u2014 "),DJ=a("a"),AEr=o("TFXLMWithLMHeadModel"),LEr=o(" (XLM model)"),yEr=l(),O9=a("li"),DTe=a("strong"),xEr=o("xlm-roberta"),$Er=o(" \u2014 "),GJ=a("a"),kEr=o("TFXLMRobertaForMaskedLM"),SEr=o(" (XLM-RoBERTa model)"),REr=l(),V9=a("li"),GTe=a("strong"),PEr=o("xlnet"),BEr=o(" \u2014 "),OJ=a("a"),IEr=o("TFXLNetLMHeadModel"),NEr=o(" (XLNet model)"),qEr=l(),F(X9.$$.fragment),Lze=l(),fc=a("h2"),z9=a("a"),OTe=a("span"),F(sx.$$.fragment),jEr=l(),VTe=a("span"),DEr=o("TFAutoModelForCausalLM"),yze=l(),tr=a("div"),F(lx.$$.fragment),GEr=l(),mc=a("p"),OEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=a("a"),VEr=o("from_pretrained()"),XEr=o(" class method or the "),XJ=a("a"),zEr=o("from_config()"),QEr=o(` class
method.`),WEr=l(),ix=a("p"),HEr=o("This class cannot be instantiated directly using "),XTe=a("code"),UEr=o("__init__()"),JEr=o(" (throws an error)."),YEr=l(),Bt=a("div"),F(dx.$$.fragment),KEr=l(),zTe=a("p"),ZEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eCr=l(),gc=a("p"),oCr=o(`Note:
Loading a model from its configuration file does `),QTe=a("strong"),rCr=o("not"),tCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),aCr=o("from_pretrained()"),nCr=o(" to load the model weights."),sCr=l(),F(Q9.$$.fragment),lCr=l(),kr=a("div"),F(cx.$$.fragment),iCr=l(),WTe=a("p"),dCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cCr=l(),cn=a("p"),fCr=o("The model class to instantiate is selected based on the "),HTe=a("code"),mCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),hCr=o("pretrained_model_name_or_path"),pCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),_Cr=o("pretrained_model_name_or_path"),uCr=o(":"),bCr=l(),Me=a("ul"),W9=a("li"),YTe=a("strong"),vCr=o("bert"),FCr=o(" \u2014 "),QJ=a("a"),TCr=o("TFBertLMHeadModel"),MCr=o(" (BERT model)"),ECr=l(),H9=a("li"),KTe=a("strong"),CCr=o("camembert"),wCr=o(" \u2014 "),WJ=a("a"),ACr=o("TFCamembertForCausalLM"),LCr=o(" (CamemBERT model)"),yCr=l(),U9=a("li"),ZTe=a("strong"),xCr=o("ctrl"),$Cr=o(" \u2014 "),HJ=a("a"),kCr=o("TFCTRLLMHeadModel"),SCr=o(" (CTRL model)"),RCr=l(),J9=a("li"),e7e=a("strong"),PCr=o("gpt2"),BCr=o(" \u2014 "),UJ=a("a"),ICr=o("TFGPT2LMHeadModel"),NCr=o(" (OpenAI GPT-2 model)"),qCr=l(),Y9=a("li"),o7e=a("strong"),jCr=o("gptj"),DCr=o(" \u2014 "),JJ=a("a"),GCr=o("TFGPTJForCausalLM"),OCr=o(" (GPT-J model)"),VCr=l(),K9=a("li"),r7e=a("strong"),XCr=o("openai-gpt"),zCr=o(" \u2014 "),YJ=a("a"),QCr=o("TFOpenAIGPTLMHeadModel"),WCr=o(" (OpenAI GPT model)"),HCr=l(),Z9=a("li"),t7e=a("strong"),UCr=o("opt"),JCr=o(" \u2014 "),KJ=a("a"),YCr=o("TFOPTForCausalLM"),KCr=o(" (OPT model)"),ZCr=l(),eM=a("li"),a7e=a("strong"),e3r=o("rembert"),o3r=o(" \u2014 "),ZJ=a("a"),r3r=o("TFRemBertForCausalLM"),t3r=o(" (RemBERT model)"),a3r=l(),oM=a("li"),n7e=a("strong"),n3r=o("roberta"),s3r=o(" \u2014 "),eY=a("a"),l3r=o("TFRobertaForCausalLM"),i3r=o(" (RoBERTa model)"),d3r=l(),rM=a("li"),s7e=a("strong"),c3r=o("roformer"),f3r=o(" \u2014 "),oY=a("a"),m3r=o("TFRoFormerForCausalLM"),g3r=o(" (RoFormer model)"),h3r=l(),tM=a("li"),l7e=a("strong"),p3r=o("transfo-xl"),_3r=o(" \u2014 "),rY=a("a"),u3r=o("TFTransfoXLLMHeadModel"),b3r=o(" (Transformer-XL model)"),v3r=l(),aM=a("li"),i7e=a("strong"),F3r=o("xlm"),T3r=o(" \u2014 "),tY=a("a"),M3r=o("TFXLMWithLMHeadModel"),E3r=o(" (XLM model)"),C3r=l(),nM=a("li"),d7e=a("strong"),w3r=o("xlnet"),A3r=o(" \u2014 "),aY=a("a"),L3r=o("TFXLNetLMHeadModel"),y3r=o(" (XLNet model)"),x3r=l(),F(sM.$$.fragment),xze=l(),hc=a("h2"),lM=a("a"),c7e=a("span"),F(fx.$$.fragment),$3r=l(),f7e=a("span"),k3r=o("TFAutoModelForImageClassification"),$ze=l(),ar=a("div"),F(mx.$$.fragment),S3r=l(),pc=a("p"),R3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=a("a"),P3r=o("from_pretrained()"),B3r=o(" class method or the "),sY=a("a"),I3r=o("from_config()"),N3r=o(` class
method.`),q3r=l(),gx=a("p"),j3r=o("This class cannot be instantiated directly using "),m7e=a("code"),D3r=o("__init__()"),G3r=o(" (throws an error)."),O3r=l(),It=a("div"),F(hx.$$.fragment),V3r=l(),g7e=a("p"),X3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z3r=l(),_c=a("p"),Q3r=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),W3r=o("not"),H3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),U3r=o("from_pretrained()"),J3r=o(" to load the model weights."),Y3r=l(),F(iM.$$.fragment),K3r=l(),Sr=a("div"),F(px.$$.fragment),Z3r=l(),p7e=a("p"),e5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o5r=l(),fn=a("p"),r5r=o("The model class to instantiate is selected based on the "),_7e=a("code"),t5r=o("model_type"),a5r=o(` property of the config object (either
passed as an argument or loaded from `),u7e=a("code"),n5r=o("pretrained_model_name_or_path"),s5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),l5r=o("pretrained_model_name_or_path"),i5r=o(":"),d5r=l(),Qe=a("ul"),dM=a("li"),v7e=a("strong"),c5r=o("convnext"),f5r=o(" \u2014 "),iY=a("a"),m5r=o("TFConvNextForImageClassification"),g5r=o(" (ConvNeXT model)"),h5r=l(),cM=a("li"),F7e=a("strong"),p5r=o("data2vec-vision"),_5r=o(" \u2014 "),dY=a("a"),u5r=o("TFData2VecVisionForImageClassification"),b5r=o(" (Data2VecVision model)"),v5r=l(),fM=a("li"),T7e=a("strong"),F5r=o("regnet"),T5r=o(" \u2014 "),cY=a("a"),M5r=o("TFRegNetForImageClassification"),E5r=o(" (RegNet model)"),C5r=l(),mM=a("li"),M7e=a("strong"),w5r=o("resnet"),A5r=o(" \u2014 "),fY=a("a"),L5r=o("TFResNetForImageClassification"),y5r=o(" (ResNet model)"),x5r=l(),gM=a("li"),E7e=a("strong"),$5r=o("swin"),k5r=o(" \u2014 "),mY=a("a"),S5r=o("TFSwinForImageClassification"),R5r=o(" (Swin Transformer model)"),P5r=l(),hM=a("li"),C7e=a("strong"),B5r=o("swinv2"),I5r=o(" \u2014 "),gY=a("a"),N5r=o("TFSwinv2ForImageClassification"),q5r=o(" (Swin Transformer V2 model)"),j5r=l(),pM=a("li"),w7e=a("strong"),D5r=o("vit"),G5r=o(" \u2014 "),hY=a("a"),O5r=o("TFViTForImageClassification"),V5r=o(" (ViT model)"),X5r=l(),F(_M.$$.fragment),kze=l(),uc=a("h2"),uM=a("a"),A7e=a("span"),F(_x.$$.fragment),z5r=l(),L7e=a("span"),Q5r=o("TFAutoModelForMaskedLM"),Sze=l(),nr=a("div"),F(ux.$$.fragment),W5r=l(),bc=a("p"),H5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=a("a"),U5r=o("from_pretrained()"),J5r=o(" class method or the "),_Y=a("a"),Y5r=o("from_config()"),K5r=o(` class
method.`),Z5r=l(),bx=a("p"),e0r=o("This class cannot be instantiated directly using "),y7e=a("code"),o0r=o("__init__()"),r0r=o(" (throws an error)."),t0r=l(),Nt=a("div"),F(vx.$$.fragment),a0r=l(),x7e=a("p"),n0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s0r=l(),vc=a("p"),l0r=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),i0r=o("not"),d0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),c0r=o("from_pretrained()"),f0r=o(" to load the model weights."),m0r=l(),F(bM.$$.fragment),g0r=l(),Rr=a("div"),F(Fx.$$.fragment),h0r=l(),k7e=a("p"),p0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_0r=l(),mn=a("p"),u0r=o("The model class to instantiate is selected based on the "),S7e=a("code"),b0r=o("model_type"),v0r=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),F0r=o("pretrained_model_name_or_path"),T0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(":"),C0r=l(),ie=a("ul"),vM=a("li"),B7e=a("strong"),w0r=o("albert"),A0r=o(" \u2014 "),bY=a("a"),L0r=o("TFAlbertForMaskedLM"),y0r=o(" (ALBERT model)"),x0r=l(),FM=a("li"),I7e=a("strong"),$0r=o("bert"),k0r=o(" \u2014 "),vY=a("a"),S0r=o("TFBertForMaskedLM"),R0r=o(" (BERT model)"),P0r=l(),TM=a("li"),N7e=a("strong"),B0r=o("camembert"),I0r=o(" \u2014 "),FY=a("a"),N0r=o("TFCamembertForMaskedLM"),q0r=o(" (CamemBERT model)"),j0r=l(),MM=a("li"),q7e=a("strong"),D0r=o("convbert"),G0r=o(" \u2014 "),TY=a("a"),O0r=o("TFConvBertForMaskedLM"),V0r=o(" (ConvBERT model)"),X0r=l(),EM=a("li"),j7e=a("strong"),z0r=o("deberta"),Q0r=o(" \u2014 "),MY=a("a"),W0r=o("TFDebertaForMaskedLM"),H0r=o(" (DeBERTa model)"),U0r=l(),CM=a("li"),D7e=a("strong"),J0r=o("deberta-v2"),Y0r=o(" \u2014 "),EY=a("a"),K0r=o("TFDebertaV2ForMaskedLM"),Z0r=o(" (DeBERTa-v2 model)"),ewr=l(),wM=a("li"),G7e=a("strong"),owr=o("distilbert"),rwr=o(" \u2014 "),CY=a("a"),twr=o("TFDistilBertForMaskedLM"),awr=o(" (DistilBERT model)"),nwr=l(),AM=a("li"),O7e=a("strong"),swr=o("electra"),lwr=o(" \u2014 "),wY=a("a"),iwr=o("TFElectraForMaskedLM"),dwr=o(" (ELECTRA model)"),cwr=l(),LM=a("li"),V7e=a("strong"),fwr=o("flaubert"),mwr=o(" \u2014 "),AY=a("a"),gwr=o("TFFlaubertWithLMHeadModel"),hwr=o(" (FlauBERT model)"),pwr=l(),yM=a("li"),X7e=a("strong"),_wr=o("funnel"),uwr=o(" \u2014 "),LY=a("a"),bwr=o("TFFunnelForMaskedLM"),vwr=o(" (Funnel Transformer model)"),Fwr=l(),xM=a("li"),z7e=a("strong"),Twr=o("layoutlm"),Mwr=o(" \u2014 "),yY=a("a"),Ewr=o("TFLayoutLMForMaskedLM"),Cwr=o(" (LayoutLM model)"),wwr=l(),$M=a("li"),Q7e=a("strong"),Awr=o("longformer"),Lwr=o(" \u2014 "),xY=a("a"),ywr=o("TFLongformerForMaskedLM"),xwr=o(" (Longformer model)"),$wr=l(),kM=a("li"),W7e=a("strong"),kwr=o("mobilebert"),Swr=o(" \u2014 "),$Y=a("a"),Rwr=o("TFMobileBertForMaskedLM"),Pwr=o(" (MobileBERT model)"),Bwr=l(),SM=a("li"),H7e=a("strong"),Iwr=o("mpnet"),Nwr=o(" \u2014 "),kY=a("a"),qwr=o("TFMPNetForMaskedLM"),jwr=o(" (MPNet model)"),Dwr=l(),RM=a("li"),U7e=a("strong"),Gwr=o("rembert"),Owr=o(" \u2014 "),SY=a("a"),Vwr=o("TFRemBertForMaskedLM"),Xwr=o(" (RemBERT model)"),zwr=l(),PM=a("li"),J7e=a("strong"),Qwr=o("roberta"),Wwr=o(" \u2014 "),RY=a("a"),Hwr=o("TFRobertaForMaskedLM"),Uwr=o(" (RoBERTa model)"),Jwr=l(),BM=a("li"),Y7e=a("strong"),Ywr=o("roformer"),Kwr=o(" \u2014 "),PY=a("a"),Zwr=o("TFRoFormerForMaskedLM"),eAr=o(" (RoFormer model)"),oAr=l(),IM=a("li"),K7e=a("strong"),rAr=o("tapas"),tAr=o(" \u2014 "),BY=a("a"),aAr=o("TFTapasForMaskedLM"),nAr=o(" (TAPAS model)"),sAr=l(),NM=a("li"),Z7e=a("strong"),lAr=o("xlm"),iAr=o(" \u2014 "),IY=a("a"),dAr=o("TFXLMWithLMHeadModel"),cAr=o(" (XLM model)"),fAr=l(),qM=a("li"),e9e=a("strong"),mAr=o("xlm-roberta"),gAr=o(" \u2014 "),NY=a("a"),hAr=o("TFXLMRobertaForMaskedLM"),pAr=o(" (XLM-RoBERTa model)"),_Ar=l(),F(jM.$$.fragment),Rze=l(),Fc=a("h2"),DM=a("a"),o9e=a("span"),F(Tx.$$.fragment),uAr=l(),r9e=a("span"),bAr=o("TFAutoModelForSeq2SeqLM"),Pze=l(),sr=a("div"),F(Mx.$$.fragment),vAr=l(),Tc=a("p"),FAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qY=a("a"),TAr=o("from_pretrained()"),MAr=o(" class method or the "),jY=a("a"),EAr=o("from_config()"),CAr=o(` class
method.`),wAr=l(),Ex=a("p"),AAr=o("This class cannot be instantiated directly using "),t9e=a("code"),LAr=o("__init__()"),yAr=o(" (throws an error)."),xAr=l(),qt=a("div"),F(Cx.$$.fragment),$Ar=l(),a9e=a("p"),kAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SAr=l(),Mc=a("p"),RAr=o(`Note:
Loading a model from its configuration file does `),n9e=a("strong"),PAr=o("not"),BAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),IAr=o("from_pretrained()"),NAr=o(" to load the model weights."),qAr=l(),F(GM.$$.fragment),jAr=l(),Pr=a("div"),F(wx.$$.fragment),DAr=l(),s9e=a("p"),GAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OAr=l(),gn=a("p"),VAr=o("The model class to instantiate is selected based on the "),l9e=a("code"),XAr=o("model_type"),zAr=o(` property of the config object (either
passed as an argument or loaded from `),i9e=a("code"),QAr=o("pretrained_model_name_or_path"),WAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=a("code"),HAr=o("pretrained_model_name_or_path"),UAr=o(":"),JAr=l(),ye=a("ul"),OM=a("li"),c9e=a("strong"),YAr=o("bart"),KAr=o(" \u2014 "),GY=a("a"),ZAr=o("TFBartForConditionalGeneration"),eLr=o(" (BART model)"),oLr=l(),VM=a("li"),f9e=a("strong"),rLr=o("blenderbot"),tLr=o(" \u2014 "),OY=a("a"),aLr=o("TFBlenderbotForConditionalGeneration"),nLr=o(" (Blenderbot model)"),sLr=l(),XM=a("li"),m9e=a("strong"),lLr=o("blenderbot-small"),iLr=o(" \u2014 "),VY=a("a"),dLr=o("TFBlenderbotSmallForConditionalGeneration"),cLr=o(" (BlenderbotSmall model)"),fLr=l(),zM=a("li"),g9e=a("strong"),mLr=o("encoder-decoder"),gLr=o(" \u2014 "),XY=a("a"),hLr=o("TFEncoderDecoderModel"),pLr=o(" (Encoder decoder model)"),_Lr=l(),QM=a("li"),h9e=a("strong"),uLr=o("led"),bLr=o(" \u2014 "),zY=a("a"),vLr=o("TFLEDForConditionalGeneration"),FLr=o(" (LED model)"),TLr=l(),WM=a("li"),p9e=a("strong"),MLr=o("marian"),ELr=o(" \u2014 "),QY=a("a"),CLr=o("TFMarianMTModel"),wLr=o(" (Marian model)"),ALr=l(),HM=a("li"),_9e=a("strong"),LLr=o("mbart"),yLr=o(" \u2014 "),WY=a("a"),xLr=o("TFMBartForConditionalGeneration"),$Lr=o(" (mBART model)"),kLr=l(),UM=a("li"),u9e=a("strong"),SLr=o("mt5"),RLr=o(" \u2014 "),HY=a("a"),PLr=o("TFMT5ForConditionalGeneration"),BLr=o(" (MT5 model)"),ILr=l(),JM=a("li"),b9e=a("strong"),NLr=o("pegasus"),qLr=o(" \u2014 "),UY=a("a"),jLr=o("TFPegasusForConditionalGeneration"),DLr=o(" (Pegasus model)"),GLr=l(),YM=a("li"),v9e=a("strong"),OLr=o("t5"),VLr=o(" \u2014 "),JY=a("a"),XLr=o("TFT5ForConditionalGeneration"),zLr=o(" (T5 model)"),QLr=l(),F(KM.$$.fragment),Bze=l(),Ec=a("h2"),ZM=a("a"),F9e=a("span"),F(Ax.$$.fragment),WLr=l(),T9e=a("span"),HLr=o("TFAutoModelForSequenceClassification"),Ize=l(),lr=a("div"),F(Lx.$$.fragment),ULr=l(),Cc=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),KY=a("a"),ZLr=o("from_config()"),eyr=o(` class
method.`),oyr=l(),yx=a("p"),ryr=o("This class cannot be instantiated directly using "),M9e=a("code"),tyr=o("__init__()"),ayr=o(" (throws an error)."),nyr=l(),jt=a("div"),F(xx.$$.fragment),syr=l(),E9e=a("p"),lyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iyr=l(),wc=a("p"),dyr=o(`Note:
Loading a model from its configuration file does `),C9e=a("strong"),cyr=o("not"),fyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),myr=o("from_pretrained()"),gyr=o(" to load the model weights."),hyr=l(),F(eE.$$.fragment),pyr=l(),Br=a("div"),F($x.$$.fragment),_yr=l(),w9e=a("p"),uyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),byr=l(),hn=a("p"),vyr=o("The model class to instantiate is selected based on the "),A9e=a("code"),Fyr=o("model_type"),Tyr=o(` property of the config object (either
passed as an argument or loaded from `),L9e=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y9e=a("code"),Cyr=o("pretrained_model_name_or_path"),wyr=o(":"),Ayr=l(),te=a("ul"),oE=a("li"),x9e=a("strong"),Lyr=o("albert"),yyr=o(" \u2014 "),eK=a("a"),xyr=o("TFAlbertForSequenceClassification"),$yr=o(" (ALBERT model)"),kyr=l(),rE=a("li"),$9e=a("strong"),Syr=o("bert"),Ryr=o(" \u2014 "),oK=a("a"),Pyr=o("TFBertForSequenceClassification"),Byr=o(" (BERT model)"),Iyr=l(),tE=a("li"),k9e=a("strong"),Nyr=o("camembert"),qyr=o(" \u2014 "),rK=a("a"),jyr=o("TFCamembertForSequenceClassification"),Dyr=o(" (CamemBERT model)"),Gyr=l(),aE=a("li"),S9e=a("strong"),Oyr=o("convbert"),Vyr=o(" \u2014 "),tK=a("a"),Xyr=o("TFConvBertForSequenceClassification"),zyr=o(" (ConvBERT model)"),Qyr=l(),nE=a("li"),R9e=a("strong"),Wyr=o("ctrl"),Hyr=o(" \u2014 "),aK=a("a"),Uyr=o("TFCTRLForSequenceClassification"),Jyr=o(" (CTRL model)"),Yyr=l(),sE=a("li"),P9e=a("strong"),Kyr=o("deberta"),Zyr=o(" \u2014 "),nK=a("a"),e8r=o("TFDebertaForSequenceClassification"),o8r=o(" (DeBERTa model)"),r8r=l(),lE=a("li"),B9e=a("strong"),t8r=o("deberta-v2"),a8r=o(" \u2014 "),sK=a("a"),n8r=o("TFDebertaV2ForSequenceClassification"),s8r=o(" (DeBERTa-v2 model)"),l8r=l(),iE=a("li"),I9e=a("strong"),i8r=o("distilbert"),d8r=o(" \u2014 "),lK=a("a"),c8r=o("TFDistilBertForSequenceClassification"),f8r=o(" (DistilBERT model)"),m8r=l(),dE=a("li"),N9e=a("strong"),g8r=o("electra"),h8r=o(" \u2014 "),iK=a("a"),p8r=o("TFElectraForSequenceClassification"),_8r=o(" (ELECTRA model)"),u8r=l(),cE=a("li"),q9e=a("strong"),b8r=o("flaubert"),v8r=o(" \u2014 "),dK=a("a"),F8r=o("TFFlaubertForSequenceClassification"),T8r=o(" (FlauBERT model)"),M8r=l(),fE=a("li"),j9e=a("strong"),E8r=o("funnel"),C8r=o(" \u2014 "),cK=a("a"),w8r=o("TFFunnelForSequenceClassification"),A8r=o(" (Funnel Transformer model)"),L8r=l(),mE=a("li"),D9e=a("strong"),y8r=o("gpt2"),x8r=o(" \u2014 "),fK=a("a"),$8r=o("TFGPT2ForSequenceClassification"),k8r=o(" (OpenAI GPT-2 model)"),S8r=l(),gE=a("li"),G9e=a("strong"),R8r=o("gptj"),P8r=o(" \u2014 "),mK=a("a"),B8r=o("TFGPTJForSequenceClassification"),I8r=o(" (GPT-J model)"),N8r=l(),hE=a("li"),O9e=a("strong"),q8r=o("layoutlm"),j8r=o(" \u2014 "),gK=a("a"),D8r=o("TFLayoutLMForSequenceClassification"),G8r=o(" (LayoutLM model)"),O8r=l(),pE=a("li"),V9e=a("strong"),V8r=o("longformer"),X8r=o(" \u2014 "),hK=a("a"),z8r=o("TFLongformerForSequenceClassification"),Q8r=o(" (Longformer model)"),W8r=l(),_E=a("li"),X9e=a("strong"),H8r=o("mobilebert"),U8r=o(" \u2014 "),pK=a("a"),J8r=o("TFMobileBertForSequenceClassification"),Y8r=o(" (MobileBERT model)"),K8r=l(),uE=a("li"),z9e=a("strong"),Z8r=o("mpnet"),exr=o(" \u2014 "),_K=a("a"),oxr=o("TFMPNetForSequenceClassification"),rxr=o(" (MPNet model)"),txr=l(),bE=a("li"),Q9e=a("strong"),axr=o("openai-gpt"),nxr=o(" \u2014 "),uK=a("a"),sxr=o("TFOpenAIGPTForSequenceClassification"),lxr=o(" (OpenAI GPT model)"),ixr=l(),vE=a("li"),W9e=a("strong"),dxr=o("rembert"),cxr=o(" \u2014 "),bK=a("a"),fxr=o("TFRemBertForSequenceClassification"),mxr=o(" (RemBERT model)"),gxr=l(),FE=a("li"),H9e=a("strong"),hxr=o("roberta"),pxr=o(" \u2014 "),vK=a("a"),_xr=o("TFRobertaForSequenceClassification"),uxr=o(" (RoBERTa model)"),bxr=l(),TE=a("li"),U9e=a("strong"),vxr=o("roformer"),Fxr=o(" \u2014 "),FK=a("a"),Txr=o("TFRoFormerForSequenceClassification"),Mxr=o(" (RoFormer model)"),Exr=l(),ME=a("li"),J9e=a("strong"),Cxr=o("tapas"),wxr=o(" \u2014 "),TK=a("a"),Axr=o("TFTapasForSequenceClassification"),Lxr=o(" (TAPAS model)"),yxr=l(),EE=a("li"),Y9e=a("strong"),xxr=o("transfo-xl"),$xr=o(" \u2014 "),MK=a("a"),kxr=o("TFTransfoXLForSequenceClassification"),Sxr=o(" (Transformer-XL model)"),Rxr=l(),CE=a("li"),K9e=a("strong"),Pxr=o("xlm"),Bxr=o(" \u2014 "),EK=a("a"),Ixr=o("TFXLMForSequenceClassification"),Nxr=o(" (XLM model)"),qxr=l(),wE=a("li"),Z9e=a("strong"),jxr=o("xlm-roberta"),Dxr=o(" \u2014 "),CK=a("a"),Gxr=o("TFXLMRobertaForSequenceClassification"),Oxr=o(" (XLM-RoBERTa model)"),Vxr=l(),AE=a("li"),eMe=a("strong"),Xxr=o("xlnet"),zxr=o(" \u2014 "),wK=a("a"),Qxr=o("TFXLNetForSequenceClassification"),Wxr=o(" (XLNet model)"),Hxr=l(),F(LE.$$.fragment),Nze=l(),Ac=a("h2"),yE=a("a"),oMe=a("span"),F(kx.$$.fragment),Uxr=l(),rMe=a("span"),Jxr=o("TFAutoModelForMultipleChoice"),qze=l(),ir=a("div"),F(Sx.$$.fragment),Yxr=l(),Lc=a("p"),Kxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=a("a"),Zxr=o("from_pretrained()"),e$r=o(" class method or the "),LK=a("a"),o$r=o("from_config()"),r$r=o(` class
method.`),t$r=l(),Rx=a("p"),a$r=o("This class cannot be instantiated directly using "),tMe=a("code"),n$r=o("__init__()"),s$r=o(" (throws an error)."),l$r=l(),Dt=a("div"),F(Px.$$.fragment),i$r=l(),aMe=a("p"),d$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),c$r=l(),yc=a("p"),f$r=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),m$r=o("not"),g$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),h$r=o("from_pretrained()"),p$r=o(" to load the model weights."),_$r=l(),F(xE.$$.fragment),u$r=l(),Ir=a("div"),F(Bx.$$.fragment),b$r=l(),sMe=a("p"),v$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F$r=l(),pn=a("p"),T$r=o("The model class to instantiate is selected based on the "),lMe=a("code"),M$r=o("model_type"),E$r=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),C$r=o("pretrained_model_name_or_path"),w$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),A$r=o("pretrained_model_name_or_path"),L$r=o(":"),y$r=l(),ue=a("ul"),$E=a("li"),cMe=a("strong"),x$r=o("albert"),$$r=o(" \u2014 "),xK=a("a"),k$r=o("TFAlbertForMultipleChoice"),S$r=o(" (ALBERT model)"),R$r=l(),kE=a("li"),fMe=a("strong"),P$r=o("bert"),B$r=o(" \u2014 "),$K=a("a"),I$r=o("TFBertForMultipleChoice"),N$r=o(" (BERT model)"),q$r=l(),SE=a("li"),mMe=a("strong"),j$r=o("camembert"),D$r=o(" \u2014 "),kK=a("a"),G$r=o("TFCamembertForMultipleChoice"),O$r=o(" (CamemBERT model)"),V$r=l(),RE=a("li"),gMe=a("strong"),X$r=o("convbert"),z$r=o(" \u2014 "),SK=a("a"),Q$r=o("TFConvBertForMultipleChoice"),W$r=o(" (ConvBERT model)"),H$r=l(),PE=a("li"),hMe=a("strong"),U$r=o("distilbert"),J$r=o(" \u2014 "),RK=a("a"),Y$r=o("TFDistilBertForMultipleChoice"),K$r=o(" (DistilBERT model)"),Z$r=l(),BE=a("li"),pMe=a("strong"),ekr=o("electra"),okr=o(" \u2014 "),PK=a("a"),rkr=o("TFElectraForMultipleChoice"),tkr=o(" (ELECTRA model)"),akr=l(),IE=a("li"),_Me=a("strong"),nkr=o("flaubert"),skr=o(" \u2014 "),BK=a("a"),lkr=o("TFFlaubertForMultipleChoice"),ikr=o(" (FlauBERT model)"),dkr=l(),NE=a("li"),uMe=a("strong"),ckr=o("funnel"),fkr=o(" \u2014 "),IK=a("a"),mkr=o("TFFunnelForMultipleChoice"),gkr=o(" (Funnel Transformer model)"),hkr=l(),qE=a("li"),bMe=a("strong"),pkr=o("longformer"),_kr=o(" \u2014 "),NK=a("a"),ukr=o("TFLongformerForMultipleChoice"),bkr=o(" (Longformer model)"),vkr=l(),jE=a("li"),vMe=a("strong"),Fkr=o("mobilebert"),Tkr=o(" \u2014 "),qK=a("a"),Mkr=o("TFMobileBertForMultipleChoice"),Ekr=o(" (MobileBERT model)"),Ckr=l(),DE=a("li"),FMe=a("strong"),wkr=o("mpnet"),Akr=o(" \u2014 "),jK=a("a"),Lkr=o("TFMPNetForMultipleChoice"),ykr=o(" (MPNet model)"),xkr=l(),GE=a("li"),TMe=a("strong"),$kr=o("rembert"),kkr=o(" \u2014 "),DK=a("a"),Skr=o("TFRemBertForMultipleChoice"),Rkr=o(" (RemBERT model)"),Pkr=l(),OE=a("li"),MMe=a("strong"),Bkr=o("roberta"),Ikr=o(" \u2014 "),GK=a("a"),Nkr=o("TFRobertaForMultipleChoice"),qkr=o(" (RoBERTa model)"),jkr=l(),VE=a("li"),EMe=a("strong"),Dkr=o("roformer"),Gkr=o(" \u2014 "),OK=a("a"),Okr=o("TFRoFormerForMultipleChoice"),Vkr=o(" (RoFormer model)"),Xkr=l(),XE=a("li"),CMe=a("strong"),zkr=o("xlm"),Qkr=o(" \u2014 "),VK=a("a"),Wkr=o("TFXLMForMultipleChoice"),Hkr=o(" (XLM model)"),Ukr=l(),zE=a("li"),wMe=a("strong"),Jkr=o("xlm-roberta"),Ykr=o(" \u2014 "),XK=a("a"),Kkr=o("TFXLMRobertaForMultipleChoice"),Zkr=o(" (XLM-RoBERTa model)"),eSr=l(),QE=a("li"),AMe=a("strong"),oSr=o("xlnet"),rSr=o(" \u2014 "),zK=a("a"),tSr=o("TFXLNetForMultipleChoice"),aSr=o(" (XLNet model)"),nSr=l(),F(WE.$$.fragment),jze=l(),xc=a("h2"),HE=a("a"),LMe=a("span"),F(Ix.$$.fragment),sSr=l(),yMe=a("span"),lSr=o("TFAutoModelForNextSentencePrediction"),Dze=l(),dr=a("div"),F(Nx.$$.fragment),iSr=l(),$c=a("p"),dSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QK=a("a"),cSr=o("from_pretrained()"),fSr=o(" class method or the "),WK=a("a"),mSr=o("from_config()"),gSr=o(` class
method.`),hSr=l(),qx=a("p"),pSr=o("This class cannot be instantiated directly using "),xMe=a("code"),_Sr=o("__init__()"),uSr=o(" (throws an error)."),bSr=l(),Gt=a("div"),F(jx.$$.fragment),vSr=l(),$Me=a("p"),FSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TSr=l(),kc=a("p"),MSr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),ESr=o("not"),CSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),wSr=o("from_pretrained()"),ASr=o(" to load the model weights."),LSr=l(),F(UE.$$.fragment),ySr=l(),Nr=a("div"),F(Dx.$$.fragment),xSr=l(),SMe=a("p"),$Sr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kSr=l(),_n=a("p"),SSr=o("The model class to instantiate is selected based on the "),RMe=a("code"),RSr=o("model_type"),PSr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),NSr=o("pretrained_model_name_or_path"),qSr=o(":"),jSr=l(),Gx=a("ul"),JE=a("li"),IMe=a("strong"),DSr=o("bert"),GSr=o(" \u2014 "),UK=a("a"),OSr=o("TFBertForNextSentencePrediction"),VSr=o(" (BERT model)"),XSr=l(),YE=a("li"),NMe=a("strong"),zSr=o("mobilebert"),QSr=o(" \u2014 "),JK=a("a"),WSr=o("TFMobileBertForNextSentencePrediction"),HSr=o(" (MobileBERT model)"),USr=l(),F(KE.$$.fragment),Gze=l(),Sc=a("h2"),ZE=a("a"),qMe=a("span"),F(Ox.$$.fragment),JSr=l(),jMe=a("span"),YSr=o("TFAutoModelForTableQuestionAnswering"),Oze=l(),cr=a("div"),F(Vx.$$.fragment),KSr=l(),Rc=a("p"),ZSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YK=a("a"),eRr=o("from_pretrained()"),oRr=o(" class method or the "),KK=a("a"),rRr=o("from_config()"),tRr=o(` class
method.`),aRr=l(),Xx=a("p"),nRr=o("This class cannot be instantiated directly using "),DMe=a("code"),sRr=o("__init__()"),lRr=o(" (throws an error)."),iRr=l(),Ot=a("div"),F(zx.$$.fragment),dRr=l(),GMe=a("p"),cRr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fRr=l(),Pc=a("p"),mRr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),gRr=o("not"),hRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),pRr=o("from_pretrained()"),_Rr=o(" to load the model weights."),uRr=l(),F(eC.$$.fragment),bRr=l(),qr=a("div"),F(Qx.$$.fragment),vRr=l(),VMe=a("p"),FRr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TRr=l(),un=a("p"),MRr=o("The model class to instantiate is selected based on the "),XMe=a("code"),ERr=o("model_type"),CRr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),LRr=o("pretrained_model_name_or_path"),yRr=o(":"),xRr=l(),WMe=a("ul"),oC=a("li"),HMe=a("strong"),$Rr=o("tapas"),kRr=o(" \u2014 "),eZ=a("a"),SRr=o("TFTapasForQuestionAnswering"),RRr=o(" (TAPAS model)"),PRr=l(),F(rC.$$.fragment),Vze=l(),Bc=a("h2"),tC=a("a"),UMe=a("span"),F(Wx.$$.fragment),BRr=l(),JMe=a("span"),IRr=o("TFAutoModelForTokenClassification"),Xze=l(),fr=a("div"),F(Hx.$$.fragment),NRr=l(),Ic=a("p"),qRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oZ=a("a"),jRr=o("from_pretrained()"),DRr=o(" class method or the "),rZ=a("a"),GRr=o("from_config()"),ORr=o(` class
method.`),VRr=l(),Ux=a("p"),XRr=o("This class cannot be instantiated directly using "),YMe=a("code"),zRr=o("__init__()"),QRr=o(" (throws an error)."),WRr=l(),Vt=a("div"),F(Jx.$$.fragment),HRr=l(),KMe=a("p"),URr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JRr=l(),Nc=a("p"),YRr=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),KRr=o("not"),ZRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),ePr=o("from_pretrained()"),oPr=o(" to load the model weights."),rPr=l(),F(aC.$$.fragment),tPr=l(),jr=a("div"),F(Yx.$$.fragment),aPr=l(),eEe=a("p"),nPr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sPr=l(),bn=a("p"),lPr=o("The model class to instantiate is selected based on the "),oEe=a("code"),iPr=o("model_type"),dPr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),cPr=o("pretrained_model_name_or_path"),fPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),mPr=o("pretrained_model_name_or_path"),gPr=o(":"),hPr=l(),de=a("ul"),nC=a("li"),aEe=a("strong"),pPr=o("albert"),_Pr=o(" \u2014 "),aZ=a("a"),uPr=o("TFAlbertForTokenClassification"),bPr=o(" (ALBERT model)"),vPr=l(),sC=a("li"),nEe=a("strong"),FPr=o("bert"),TPr=o(" \u2014 "),nZ=a("a"),MPr=o("TFBertForTokenClassification"),EPr=o(" (BERT model)"),CPr=l(),lC=a("li"),sEe=a("strong"),wPr=o("camembert"),APr=o(" \u2014 "),sZ=a("a"),LPr=o("TFCamembertForTokenClassification"),yPr=o(" (CamemBERT model)"),xPr=l(),iC=a("li"),lEe=a("strong"),$Pr=o("convbert"),kPr=o(" \u2014 "),lZ=a("a"),SPr=o("TFConvBertForTokenClassification"),RPr=o(" (ConvBERT model)"),PPr=l(),dC=a("li"),iEe=a("strong"),BPr=o("deberta"),IPr=o(" \u2014 "),iZ=a("a"),NPr=o("TFDebertaForTokenClassification"),qPr=o(" (DeBERTa model)"),jPr=l(),cC=a("li"),dEe=a("strong"),DPr=o("deberta-v2"),GPr=o(" \u2014 "),dZ=a("a"),OPr=o("TFDebertaV2ForTokenClassification"),VPr=o(" (DeBERTa-v2 model)"),XPr=l(),fC=a("li"),cEe=a("strong"),zPr=o("distilbert"),QPr=o(" \u2014 "),cZ=a("a"),WPr=o("TFDistilBertForTokenClassification"),HPr=o(" (DistilBERT model)"),UPr=l(),mC=a("li"),fEe=a("strong"),JPr=o("electra"),YPr=o(" \u2014 "),fZ=a("a"),KPr=o("TFElectraForTokenClassification"),ZPr=o(" (ELECTRA model)"),eBr=l(),gC=a("li"),mEe=a("strong"),oBr=o("flaubert"),rBr=o(" \u2014 "),mZ=a("a"),tBr=o("TFFlaubertForTokenClassification"),aBr=o(" (FlauBERT model)"),nBr=l(),hC=a("li"),gEe=a("strong"),sBr=o("funnel"),lBr=o(" \u2014 "),gZ=a("a"),iBr=o("TFFunnelForTokenClassification"),dBr=o(" (Funnel Transformer model)"),cBr=l(),pC=a("li"),hEe=a("strong"),fBr=o("layoutlm"),mBr=o(" \u2014 "),hZ=a("a"),gBr=o("TFLayoutLMForTokenClassification"),hBr=o(" (LayoutLM model)"),pBr=l(),_C=a("li"),pEe=a("strong"),_Br=o("longformer"),uBr=o(" \u2014 "),pZ=a("a"),bBr=o("TFLongformerForTokenClassification"),vBr=o(" (Longformer model)"),FBr=l(),uC=a("li"),_Ee=a("strong"),TBr=o("mobilebert"),MBr=o(" \u2014 "),_Z=a("a"),EBr=o("TFMobileBertForTokenClassification"),CBr=o(" (MobileBERT model)"),wBr=l(),bC=a("li"),uEe=a("strong"),ABr=o("mpnet"),LBr=o(" \u2014 "),uZ=a("a"),yBr=o("TFMPNetForTokenClassification"),xBr=o(" (MPNet model)"),$Br=l(),vC=a("li"),bEe=a("strong"),kBr=o("rembert"),SBr=o(" \u2014 "),bZ=a("a"),RBr=o("TFRemBertForTokenClassification"),PBr=o(" (RemBERT model)"),BBr=l(),FC=a("li"),vEe=a("strong"),IBr=o("roberta"),NBr=o(" \u2014 "),vZ=a("a"),qBr=o("TFRobertaForTokenClassification"),jBr=o(" (RoBERTa model)"),DBr=l(),TC=a("li"),FEe=a("strong"),GBr=o("roformer"),OBr=o(" \u2014 "),FZ=a("a"),VBr=o("TFRoFormerForTokenClassification"),XBr=o(" (RoFormer model)"),zBr=l(),MC=a("li"),TEe=a("strong"),QBr=o("xlm"),WBr=o(" \u2014 "),TZ=a("a"),HBr=o("TFXLMForTokenClassification"),UBr=o(" (XLM model)"),JBr=l(),EC=a("li"),MEe=a("strong"),YBr=o("xlm-roberta"),KBr=o(" \u2014 "),MZ=a("a"),ZBr=o("TFXLMRobertaForTokenClassification"),eIr=o(" (XLM-RoBERTa model)"),oIr=l(),CC=a("li"),EEe=a("strong"),rIr=o("xlnet"),tIr=o(" \u2014 "),EZ=a("a"),aIr=o("TFXLNetForTokenClassification"),nIr=o(" (XLNet model)"),sIr=l(),F(wC.$$.fragment),zze=l(),qc=a("h2"),AC=a("a"),CEe=a("span"),F(Kx.$$.fragment),lIr=l(),wEe=a("span"),iIr=o("TFAutoModelForQuestionAnswering"),Qze=l(),mr=a("div"),F(Zx.$$.fragment),dIr=l(),jc=a("p"),cIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CZ=a("a"),fIr=o("from_pretrained()"),mIr=o(" class method or the "),wZ=a("a"),gIr=o("from_config()"),hIr=o(` class
method.`),pIr=l(),e$=a("p"),_Ir=o("This class cannot be instantiated directly using "),AEe=a("code"),uIr=o("__init__()"),bIr=o(" (throws an error)."),vIr=l(),Xt=a("div"),F(o$.$$.fragment),FIr=l(),LEe=a("p"),TIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MIr=l(),Dc=a("p"),EIr=o(`Note:
Loading a model from its configuration file does `),yEe=a("strong"),CIr=o("not"),wIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),AIr=o("from_pretrained()"),LIr=o(" to load the model weights."),yIr=l(),F(LC.$$.fragment),xIr=l(),Dr=a("div"),F(r$.$$.fragment),$Ir=l(),xEe=a("p"),kIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SIr=l(),vn=a("p"),RIr=o("The model class to instantiate is selected based on the "),$Ee=a("code"),PIr=o("model_type"),BIr=o(` property of the config object (either
passed as an argument or loaded from `),kEe=a("code"),IIr=o("pretrained_model_name_or_path"),NIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=a("code"),qIr=o("pretrained_model_name_or_path"),jIr=o(":"),DIr=l(),ce=a("ul"),yC=a("li"),REe=a("strong"),GIr=o("albert"),OIr=o(" \u2014 "),LZ=a("a"),VIr=o("TFAlbertForQuestionAnswering"),XIr=o(" (ALBERT model)"),zIr=l(),xC=a("li"),PEe=a("strong"),QIr=o("bert"),WIr=o(" \u2014 "),yZ=a("a"),HIr=o("TFBertForQuestionAnswering"),UIr=o(" (BERT model)"),JIr=l(),$C=a("li"),BEe=a("strong"),YIr=o("camembert"),KIr=o(" \u2014 "),xZ=a("a"),ZIr=o("TFCamembertForQuestionAnswering"),eNr=o(" (CamemBERT model)"),oNr=l(),kC=a("li"),IEe=a("strong"),rNr=o("convbert"),tNr=o(" \u2014 "),$Z=a("a"),aNr=o("TFConvBertForQuestionAnswering"),nNr=o(" (ConvBERT model)"),sNr=l(),SC=a("li"),NEe=a("strong"),lNr=o("deberta"),iNr=o(" \u2014 "),kZ=a("a"),dNr=o("TFDebertaForQuestionAnswering"),cNr=o(" (DeBERTa model)"),fNr=l(),RC=a("li"),qEe=a("strong"),mNr=o("deberta-v2"),gNr=o(" \u2014 "),SZ=a("a"),hNr=o("TFDebertaV2ForQuestionAnswering"),pNr=o(" (DeBERTa-v2 model)"),_Nr=l(),PC=a("li"),jEe=a("strong"),uNr=o("distilbert"),bNr=o(" \u2014 "),RZ=a("a"),vNr=o("TFDistilBertForQuestionAnswering"),FNr=o(" (DistilBERT model)"),TNr=l(),BC=a("li"),DEe=a("strong"),MNr=o("electra"),ENr=o(" \u2014 "),PZ=a("a"),CNr=o("TFElectraForQuestionAnswering"),wNr=o(" (ELECTRA model)"),ANr=l(),IC=a("li"),GEe=a("strong"),LNr=o("flaubert"),yNr=o(" \u2014 "),BZ=a("a"),xNr=o("TFFlaubertForQuestionAnsweringSimple"),$Nr=o(" (FlauBERT model)"),kNr=l(),NC=a("li"),OEe=a("strong"),SNr=o("funnel"),RNr=o(" \u2014 "),IZ=a("a"),PNr=o("TFFunnelForQuestionAnswering"),BNr=o(" (Funnel Transformer model)"),INr=l(),qC=a("li"),VEe=a("strong"),NNr=o("gptj"),qNr=o(" \u2014 "),NZ=a("a"),jNr=o("TFGPTJForQuestionAnswering"),DNr=o(" (GPT-J model)"),GNr=l(),jC=a("li"),XEe=a("strong"),ONr=o("longformer"),VNr=o(" \u2014 "),qZ=a("a"),XNr=o("TFLongformerForQuestionAnswering"),zNr=o(" (Longformer model)"),QNr=l(),DC=a("li"),zEe=a("strong"),WNr=o("mobilebert"),HNr=o(" \u2014 "),jZ=a("a"),UNr=o("TFMobileBertForQuestionAnswering"),JNr=o(" (MobileBERT model)"),YNr=l(),GC=a("li"),QEe=a("strong"),KNr=o("mpnet"),ZNr=o(" \u2014 "),DZ=a("a"),eqr=o("TFMPNetForQuestionAnswering"),oqr=o(" (MPNet model)"),rqr=l(),OC=a("li"),WEe=a("strong"),tqr=o("rembert"),aqr=o(" \u2014 "),GZ=a("a"),nqr=o("TFRemBertForQuestionAnswering"),sqr=o(" (RemBERT model)"),lqr=l(),VC=a("li"),HEe=a("strong"),iqr=o("roberta"),dqr=o(" \u2014 "),OZ=a("a"),cqr=o("TFRobertaForQuestionAnswering"),fqr=o(" (RoBERTa model)"),mqr=l(),XC=a("li"),UEe=a("strong"),gqr=o("roformer"),hqr=o(" \u2014 "),VZ=a("a"),pqr=o("TFRoFormerForQuestionAnswering"),_qr=o(" (RoFormer model)"),uqr=l(),zC=a("li"),JEe=a("strong"),bqr=o("xlm"),vqr=o(" \u2014 "),XZ=a("a"),Fqr=o("TFXLMForQuestionAnsweringSimple"),Tqr=o(" (XLM model)"),Mqr=l(),QC=a("li"),YEe=a("strong"),Eqr=o("xlm-roberta"),Cqr=o(" \u2014 "),zZ=a("a"),wqr=o("TFXLMRobertaForQuestionAnswering"),Aqr=o(" (XLM-RoBERTa model)"),Lqr=l(),WC=a("li"),KEe=a("strong"),yqr=o("xlnet"),xqr=o(" \u2014 "),QZ=a("a"),$qr=o("TFXLNetForQuestionAnsweringSimple"),kqr=o(" (XLNet model)"),Sqr=l(),F(HC.$$.fragment),Wze=l(),Gc=a("h2"),UC=a("a"),ZEe=a("span"),F(t$.$$.fragment),Rqr=l(),eCe=a("span"),Pqr=o("TFAutoModelForVision2Seq"),Hze=l(),gr=a("div"),F(a$.$$.fragment),Bqr=l(),Oc=a("p"),Iqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WZ=a("a"),Nqr=o("from_pretrained()"),qqr=o(" class method or the "),HZ=a("a"),jqr=o("from_config()"),Dqr=o(` class
method.`),Gqr=l(),n$=a("p"),Oqr=o("This class cannot be instantiated directly using "),oCe=a("code"),Vqr=o("__init__()"),Xqr=o(" (throws an error)."),zqr=l(),zt=a("div"),F(s$.$$.fragment),Qqr=l(),rCe=a("p"),Wqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hqr=l(),Vc=a("p"),Uqr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),Jqr=o("not"),Yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" to load the model weights."),ejr=l(),F(JC.$$.fragment),ojr=l(),Gr=a("div"),F(l$.$$.fragment),rjr=l(),aCe=a("p"),tjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ajr=l(),Fn=a("p"),njr=o("The model class to instantiate is selected based on the "),nCe=a("code"),sjr=o("model_type"),ljr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),ijr=o("pretrained_model_name_or_path"),djr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),cjr=o("pretrained_model_name_or_path"),fjr=o(":"),mjr=l(),iCe=a("ul"),YC=a("li"),dCe=a("strong"),gjr=o("vision-encoder-decoder"),hjr=o(" \u2014 "),JZ=a("a"),pjr=o("TFVisionEncoderDecoderModel"),_jr=o(" (Vision Encoder decoder model)"),ujr=l(),F(KC.$$.fragment),Uze=l(),Xc=a("h2"),ZC=a("a"),cCe=a("span"),F(i$.$$.fragment),bjr=l(),fCe=a("span"),vjr=o("TFAutoModelForSpeechSeq2Seq"),Jze=l(),hr=a("div"),F(d$.$$.fragment),Fjr=l(),zc=a("p"),Tjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YZ=a("a"),Mjr=o("from_pretrained()"),Ejr=o(" class method or the "),KZ=a("a"),Cjr=o("from_config()"),wjr=o(` class
method.`),Ajr=l(),c$=a("p"),Ljr=o("This class cannot be instantiated directly using "),mCe=a("code"),yjr=o("__init__()"),xjr=o(" (throws an error)."),$jr=l(),Qt=a("div"),F(f$.$$.fragment),kjr=l(),gCe=a("p"),Sjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Rjr=l(),Qc=a("p"),Pjr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),Bjr=o("not"),Ijr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),Njr=o("from_pretrained()"),qjr=o(" to load the model weights."),jjr=l(),F(e3.$$.fragment),Djr=l(),Or=a("div"),F(m$.$$.fragment),Gjr=l(),pCe=a("p"),Ojr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vjr=l(),Tn=a("p"),Xjr=o("The model class to instantiate is selected based on the "),_Ce=a("code"),zjr=o("model_type"),Qjr=o(` property of the config object (either
passed as an argument or loaded from `),uCe=a("code"),Wjr=o("pretrained_model_name_or_path"),Hjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),Ujr=o("pretrained_model_name_or_path"),Jjr=o(":"),Yjr=l(),vCe=a("ul"),o3=a("li"),FCe=a("strong"),Kjr=o("speech_to_text"),Zjr=o(" \u2014 "),eee=a("a"),eDr=o("TFSpeech2TextForConditionalGeneration"),oDr=o(" (Speech2Text model)"),rDr=l(),F(r3.$$.fragment),Yze=l(),Wc=a("h2"),t3=a("a"),TCe=a("span"),F(g$.$$.fragment),tDr=l(),MCe=a("span"),aDr=o("FlaxAutoModel"),Kze=l(),pr=a("div"),F(h$.$$.fragment),nDr=l(),Hc=a("p"),sDr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oee=a("a"),lDr=o("from_pretrained()"),iDr=o(" class method or the "),ree=a("a"),dDr=o("from_config()"),cDr=o(` class
method.`),fDr=l(),p$=a("p"),mDr=o("This class cannot be instantiated directly using "),ECe=a("code"),gDr=o("__init__()"),hDr=o(" (throws an error)."),pDr=l(),Wt=a("div"),F(_$.$$.fragment),_Dr=l(),CCe=a("p"),uDr=o("Instantiates one of the base model classes of the library from a configuration."),bDr=l(),Uc=a("p"),vDr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),FDr=o("not"),TDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=a("a"),MDr=o("from_pretrained()"),EDr=o(" to load the model weights."),CDr=l(),F(a3.$$.fragment),wDr=l(),Vr=a("div"),F(u$.$$.fragment),ADr=l(),ACe=a("p"),LDr=o("Instantiate one of the base model classes of the library from a pretrained model."),yDr=l(),Mn=a("p"),xDr=o("The model class to instantiate is selected based on the "),LCe=a("code"),$Dr=o("model_type"),kDr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),PDr=o("pretrained_model_name_or_path"),BDr=o(":"),IDr=l(),oe=a("ul"),n3=a("li"),$Ce=a("strong"),NDr=o("albert"),qDr=o(" \u2014 "),aee=a("a"),jDr=o("FlaxAlbertModel"),DDr=o(" (ALBERT model)"),GDr=l(),s3=a("li"),kCe=a("strong"),ODr=o("bart"),VDr=o(" \u2014 "),nee=a("a"),XDr=o("FlaxBartModel"),zDr=o(" (BART model)"),QDr=l(),l3=a("li"),SCe=a("strong"),WDr=o("beit"),HDr=o(" \u2014 "),see=a("a"),UDr=o("FlaxBeitModel"),JDr=o(" (BEiT model)"),YDr=l(),i3=a("li"),RCe=a("strong"),KDr=o("bert"),ZDr=o(" \u2014 "),lee=a("a"),eGr=o("FlaxBertModel"),oGr=o(" (BERT model)"),rGr=l(),d3=a("li"),PCe=a("strong"),tGr=o("big_bird"),aGr=o(" \u2014 "),iee=a("a"),nGr=o("FlaxBigBirdModel"),sGr=o(" (BigBird model)"),lGr=l(),c3=a("li"),BCe=a("strong"),iGr=o("blenderbot"),dGr=o(" \u2014 "),dee=a("a"),cGr=o("FlaxBlenderbotModel"),fGr=o(" (Blenderbot model)"),mGr=l(),f3=a("li"),ICe=a("strong"),gGr=o("blenderbot-small"),hGr=o(" \u2014 "),cee=a("a"),pGr=o("FlaxBlenderbotSmallModel"),_Gr=o(" (BlenderbotSmall model)"),uGr=l(),m3=a("li"),NCe=a("strong"),bGr=o("clip"),vGr=o(" \u2014 "),fee=a("a"),FGr=o("FlaxCLIPModel"),TGr=o(" (CLIP model)"),MGr=l(),g3=a("li"),qCe=a("strong"),EGr=o("distilbert"),CGr=o(" \u2014 "),mee=a("a"),wGr=o("FlaxDistilBertModel"),AGr=o(" (DistilBERT model)"),LGr=l(),h3=a("li"),jCe=a("strong"),yGr=o("electra"),xGr=o(" \u2014 "),gee=a("a"),$Gr=o("FlaxElectraModel"),kGr=o(" (ELECTRA model)"),SGr=l(),p3=a("li"),DCe=a("strong"),RGr=o("gpt2"),PGr=o(" \u2014 "),hee=a("a"),BGr=o("FlaxGPT2Model"),IGr=o(" (OpenAI GPT-2 model)"),NGr=l(),_3=a("li"),GCe=a("strong"),qGr=o("gpt_neo"),jGr=o(" \u2014 "),pee=a("a"),DGr=o("FlaxGPTNeoModel"),GGr=o(" (GPT Neo model)"),OGr=l(),u3=a("li"),OCe=a("strong"),VGr=o("gptj"),XGr=o(" \u2014 "),_ee=a("a"),zGr=o("FlaxGPTJModel"),QGr=o(" (GPT-J model)"),WGr=l(),b3=a("li"),VCe=a("strong"),HGr=o("longt5"),UGr=o(" \u2014 "),uee=a("a"),JGr=o("FlaxLongT5Model"),YGr=o(" (LongT5 model)"),KGr=l(),v3=a("li"),XCe=a("strong"),ZGr=o("marian"),eOr=o(" \u2014 "),bee=a("a"),oOr=o("FlaxMarianModel"),rOr=o(" (Marian model)"),tOr=l(),F3=a("li"),zCe=a("strong"),aOr=o("mbart"),nOr=o(" \u2014 "),vee=a("a"),sOr=o("FlaxMBartModel"),lOr=o(" (mBART model)"),iOr=l(),T3=a("li"),QCe=a("strong"),dOr=o("mt5"),cOr=o(" \u2014 "),Fee=a("a"),fOr=o("FlaxMT5Model"),mOr=o(" (MT5 model)"),gOr=l(),M3=a("li"),WCe=a("strong"),hOr=o("opt"),pOr=o(" \u2014 "),Tee=a("a"),_Or=o("FlaxOPTModel"),uOr=o(" (OPT model)"),bOr=l(),E3=a("li"),HCe=a("strong"),vOr=o("pegasus"),FOr=o(" \u2014 "),Mee=a("a"),TOr=o("FlaxPegasusModel"),MOr=o(" (Pegasus model)"),EOr=l(),C3=a("li"),UCe=a("strong"),COr=o("roberta"),wOr=o(" \u2014 "),Eee=a("a"),AOr=o("FlaxRobertaModel"),LOr=o(" (RoBERTa model)"),yOr=l(),w3=a("li"),JCe=a("strong"),xOr=o("roformer"),$Or=o(" \u2014 "),Cee=a("a"),kOr=o("FlaxRoFormerModel"),SOr=o(" (RoFormer model)"),ROr=l(),A3=a("li"),YCe=a("strong"),POr=o("t5"),BOr=o(" \u2014 "),wee=a("a"),IOr=o("FlaxT5Model"),NOr=o(" (T5 model)"),qOr=l(),L3=a("li"),KCe=a("strong"),jOr=o("vision-text-dual-encoder"),DOr=o(" \u2014 "),Aee=a("a"),GOr=o("FlaxVisionTextDualEncoderModel"),OOr=o(" (VisionTextDualEncoder model)"),VOr=l(),y3=a("li"),ZCe=a("strong"),XOr=o("vit"),zOr=o(" \u2014 "),Lee=a("a"),QOr=o("FlaxViTModel"),WOr=o(" (ViT model)"),HOr=l(),x3=a("li"),e3e=a("strong"),UOr=o("wav2vec2"),JOr=o(" \u2014 "),yee=a("a"),YOr=o("FlaxWav2Vec2Model"),KOr=o(" (Wav2Vec2 model)"),ZOr=l(),$3=a("li"),o3e=a("strong"),eVr=o("xglm"),oVr=o(" \u2014 "),xee=a("a"),rVr=o("FlaxXGLMModel"),tVr=o(" (XGLM model)"),aVr=l(),k3=a("li"),r3e=a("strong"),nVr=o("xlm-roberta"),sVr=o(" \u2014 "),$ee=a("a"),lVr=o("FlaxXLMRobertaModel"),iVr=o(" (XLM-RoBERTa model)"),dVr=l(),F(S3.$$.fragment),Zze=l(),Jc=a("h2"),R3=a("a"),t3e=a("span"),F(b$.$$.fragment),cVr=l(),a3e=a("span"),fVr=o("FlaxAutoModelForCausalLM"),eQe=l(),_r=a("div"),F(v$.$$.fragment),mVr=l(),Yc=a("p"),gVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kee=a("a"),hVr=o("from_pretrained()"),pVr=o(" class method or the "),See=a("a"),_Vr=o("from_config()"),uVr=o(` class
method.`),bVr=l(),F$=a("p"),vVr=o("This class cannot be instantiated directly using "),n3e=a("code"),FVr=o("__init__()"),TVr=o(" (throws an error)."),MVr=l(),Ht=a("div"),F(T$.$$.fragment),EVr=l(),s3e=a("p"),CVr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wVr=l(),Kc=a("p"),AVr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),LVr=o("not"),yVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("a"),xVr=o("from_pretrained()"),$Vr=o(" to load the model weights."),kVr=l(),F(P3.$$.fragment),SVr=l(),Xr=a("div"),F(M$.$$.fragment),RVr=l(),i3e=a("p"),PVr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BVr=l(),En=a("p"),IVr=o("The model class to instantiate is selected based on the "),d3e=a("code"),NVr=o("model_type"),qVr=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),jVr=o("pretrained_model_name_or_path"),DVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),GVr=o("pretrained_model_name_or_path"),OVr=o(":"),VVr=l(),xe=a("ul"),B3=a("li"),m3e=a("strong"),XVr=o("bart"),zVr=o(" \u2014 "),Pee=a("a"),QVr=o("FlaxBartForCausalLM"),WVr=o(" (BART model)"),HVr=l(),I3=a("li"),g3e=a("strong"),UVr=o("bert"),JVr=o(" \u2014 "),Bee=a("a"),YVr=o("FlaxBertForCausalLM"),KVr=o(" (BERT model)"),ZVr=l(),N3=a("li"),h3e=a("strong"),eXr=o("big_bird"),oXr=o(" \u2014 "),Iee=a("a"),rXr=o("FlaxBigBirdForCausalLM"),tXr=o(" (BigBird model)"),aXr=l(),q3=a("li"),p3e=a("strong"),nXr=o("electra"),sXr=o(" \u2014 "),Nee=a("a"),lXr=o("FlaxElectraForCausalLM"),iXr=o(" (ELECTRA model)"),dXr=l(),j3=a("li"),_3e=a("strong"),cXr=o("gpt2"),fXr=o(" \u2014 "),qee=a("a"),mXr=o("FlaxGPT2LMHeadModel"),gXr=o(" (OpenAI GPT-2 model)"),hXr=l(),D3=a("li"),u3e=a("strong"),pXr=o("gpt_neo"),_Xr=o(" \u2014 "),jee=a("a"),uXr=o("FlaxGPTNeoForCausalLM"),bXr=o(" (GPT Neo model)"),vXr=l(),G3=a("li"),b3e=a("strong"),FXr=o("gptj"),TXr=o(" \u2014 "),Dee=a("a"),MXr=o("FlaxGPTJForCausalLM"),EXr=o(" (GPT-J model)"),CXr=l(),O3=a("li"),v3e=a("strong"),wXr=o("opt"),AXr=o(" \u2014 "),Gee=a("a"),LXr=o("FlaxOPTForCausalLM"),yXr=o(" (OPT model)"),xXr=l(),V3=a("li"),F3e=a("strong"),$Xr=o("roberta"),kXr=o(" \u2014 "),Oee=a("a"),SXr=o("FlaxRobertaForCausalLM"),RXr=o(" (RoBERTa model)"),PXr=l(),X3=a("li"),T3e=a("strong"),BXr=o("xglm"),IXr=o(" \u2014 "),Vee=a("a"),NXr=o("FlaxXGLMForCausalLM"),qXr=o(" (XGLM model)"),jXr=l(),F(z3.$$.fragment),oQe=l(),Zc=a("h2"),Q3=a("a"),M3e=a("span"),F(E$.$$.fragment),DXr=l(),E3e=a("span"),GXr=o("FlaxAutoModelForPreTraining"),rQe=l(),ur=a("div"),F(C$.$$.fragment),OXr=l(),ef=a("p"),VXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xee=a("a"),XXr=o("from_pretrained()"),zXr=o(" class method or the "),zee=a("a"),QXr=o("from_config()"),WXr=o(` class
method.`),HXr=l(),w$=a("p"),UXr=o("This class cannot be instantiated directly using "),C3e=a("code"),JXr=o("__init__()"),YXr=o(" (throws an error)."),KXr=l(),Ut=a("div"),F(A$.$$.fragment),ZXr=l(),w3e=a("p"),ezr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ozr=l(),of=a("p"),rzr=o(`Note:
Loading a model from its configuration file does `),A3e=a("strong"),tzr=o("not"),azr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),nzr=o("from_pretrained()"),szr=o(" to load the model weights."),lzr=l(),F(W3.$$.fragment),izr=l(),zr=a("div"),F(L$.$$.fragment),dzr=l(),L3e=a("p"),czr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fzr=l(),Cn=a("p"),mzr=o("The model class to instantiate is selected based on the "),y3e=a("code"),gzr=o("model_type"),hzr=o(` property of the config object (either
passed as an argument or loaded from `),x3e=a("code"),pzr=o("pretrained_model_name_or_path"),_zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),uzr=o("pretrained_model_name_or_path"),bzr=o(":"),vzr=l(),Ee=a("ul"),H3=a("li"),k3e=a("strong"),Fzr=o("albert"),Tzr=o(" \u2014 "),Wee=a("a"),Mzr=o("FlaxAlbertForPreTraining"),Ezr=o(" (ALBERT model)"),Czr=l(),U3=a("li"),S3e=a("strong"),wzr=o("bart"),Azr=o(" \u2014 "),Hee=a("a"),Lzr=o("FlaxBartForConditionalGeneration"),yzr=o(" (BART model)"),xzr=l(),J3=a("li"),R3e=a("strong"),$zr=o("bert"),kzr=o(" \u2014 "),Uee=a("a"),Szr=o("FlaxBertForPreTraining"),Rzr=o(" (BERT model)"),Pzr=l(),Y3=a("li"),P3e=a("strong"),Bzr=o("big_bird"),Izr=o(" \u2014 "),Jee=a("a"),Nzr=o("FlaxBigBirdForPreTraining"),qzr=o(" (BigBird model)"),jzr=l(),K3=a("li"),B3e=a("strong"),Dzr=o("electra"),Gzr=o(" \u2014 "),Yee=a("a"),Ozr=o("FlaxElectraForPreTraining"),Vzr=o(" (ELECTRA model)"),Xzr=l(),Z3=a("li"),I3e=a("strong"),zzr=o("longt5"),Qzr=o(" \u2014 "),Kee=a("a"),Wzr=o("FlaxLongT5ForConditionalGeneration"),Hzr=o(" (LongT5 model)"),Uzr=l(),e5=a("li"),N3e=a("strong"),Jzr=o("mbart"),Yzr=o(" \u2014 "),Zee=a("a"),Kzr=o("FlaxMBartForConditionalGeneration"),Zzr=o(" (mBART model)"),eQr=l(),o5=a("li"),q3e=a("strong"),oQr=o("mt5"),rQr=o(" \u2014 "),eoe=a("a"),tQr=o("FlaxMT5ForConditionalGeneration"),aQr=o(" (MT5 model)"),nQr=l(),r5=a("li"),j3e=a("strong"),sQr=o("roberta"),lQr=o(" \u2014 "),ooe=a("a"),iQr=o("FlaxRobertaForMaskedLM"),dQr=o(" (RoBERTa model)"),cQr=l(),t5=a("li"),D3e=a("strong"),fQr=o("roformer"),mQr=o(" \u2014 "),roe=a("a"),gQr=o("FlaxRoFormerForMaskedLM"),hQr=o(" (RoFormer model)"),pQr=l(),a5=a("li"),G3e=a("strong"),_Qr=o("t5"),uQr=o(" \u2014 "),toe=a("a"),bQr=o("FlaxT5ForConditionalGeneration"),vQr=o(" (T5 model)"),FQr=l(),n5=a("li"),O3e=a("strong"),TQr=o("wav2vec2"),MQr=o(" \u2014 "),aoe=a("a"),EQr=o("FlaxWav2Vec2ForPreTraining"),CQr=o(" (Wav2Vec2 model)"),wQr=l(),s5=a("li"),V3e=a("strong"),AQr=o("xlm-roberta"),LQr=o(" \u2014 "),noe=a("a"),yQr=o("FlaxXLMRobertaForMaskedLM"),xQr=o(" (XLM-RoBERTa model)"),$Qr=l(),F(l5.$$.fragment),tQe=l(),rf=a("h2"),i5=a("a"),X3e=a("span"),F(y$.$$.fragment),kQr=l(),z3e=a("span"),SQr=o("FlaxAutoModelForMaskedLM"),aQe=l(),br=a("div"),F(x$.$$.fragment),RQr=l(),tf=a("p"),PQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),soe=a("a"),BQr=o("from_pretrained()"),IQr=o(" class method or the "),loe=a("a"),NQr=o("from_config()"),qQr=o(` class
method.`),jQr=l(),$$=a("p"),DQr=o("This class cannot be instantiated directly using "),Q3e=a("code"),GQr=o("__init__()"),OQr=o(" (throws an error)."),VQr=l(),Jt=a("div"),F(k$.$$.fragment),XQr=l(),W3e=a("p"),zQr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QQr=l(),af=a("p"),WQr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),HQr=o("not"),UQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("a"),JQr=o("from_pretrained()"),YQr=o(" to load the model weights."),KQr=l(),F(d5.$$.fragment),ZQr=l(),Qr=a("div"),F(S$.$$.fragment),eWr=l(),U3e=a("p"),oWr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rWr=l(),wn=a("p"),tWr=o("The model class to instantiate is selected based on the "),J3e=a("code"),aWr=o("model_type"),nWr=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),sWr=o("pretrained_model_name_or_path"),lWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(":"),cWr=l(),$e=a("ul"),c5=a("li"),Z3e=a("strong"),fWr=o("albert"),mWr=o(" \u2014 "),doe=a("a"),gWr=o("FlaxAlbertForMaskedLM"),hWr=o(" (ALBERT model)"),pWr=l(),f5=a("li"),e5e=a("strong"),_Wr=o("bart"),uWr=o(" \u2014 "),coe=a("a"),bWr=o("FlaxBartForConditionalGeneration"),vWr=o(" (BART model)"),FWr=l(),m5=a("li"),o5e=a("strong"),TWr=o("bert"),MWr=o(" \u2014 "),foe=a("a"),EWr=o("FlaxBertForMaskedLM"),CWr=o(" (BERT model)"),wWr=l(),g5=a("li"),r5e=a("strong"),AWr=o("big_bird"),LWr=o(" \u2014 "),moe=a("a"),yWr=o("FlaxBigBirdForMaskedLM"),xWr=o(" (BigBird model)"),$Wr=l(),h5=a("li"),t5e=a("strong"),kWr=o("distilbert"),SWr=o(" \u2014 "),goe=a("a"),RWr=o("FlaxDistilBertForMaskedLM"),PWr=o(" (DistilBERT model)"),BWr=l(),p5=a("li"),a5e=a("strong"),IWr=o("electra"),NWr=o(" \u2014 "),hoe=a("a"),qWr=o("FlaxElectraForMaskedLM"),jWr=o(" (ELECTRA model)"),DWr=l(),_5=a("li"),n5e=a("strong"),GWr=o("mbart"),OWr=o(" \u2014 "),poe=a("a"),VWr=o("FlaxMBartForConditionalGeneration"),XWr=o(" (mBART model)"),zWr=l(),u5=a("li"),s5e=a("strong"),QWr=o("roberta"),WWr=o(" \u2014 "),_oe=a("a"),HWr=o("FlaxRobertaForMaskedLM"),UWr=o(" (RoBERTa model)"),JWr=l(),b5=a("li"),l5e=a("strong"),YWr=o("roformer"),KWr=o(" \u2014 "),uoe=a("a"),ZWr=o("FlaxRoFormerForMaskedLM"),eHr=o(" (RoFormer model)"),oHr=l(),v5=a("li"),i5e=a("strong"),rHr=o("xlm-roberta"),tHr=o(" \u2014 "),boe=a("a"),aHr=o("FlaxXLMRobertaForMaskedLM"),nHr=o(" (XLM-RoBERTa model)"),sHr=l(),F(F5.$$.fragment),nQe=l(),nf=a("h2"),T5=a("a"),d5e=a("span"),F(R$.$$.fragment),lHr=l(),c5e=a("span"),iHr=o("FlaxAutoModelForSeq2SeqLM"),sQe=l(),vr=a("div"),F(P$.$$.fragment),dHr=l(),sf=a("p"),cHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),voe=a("a"),fHr=o("from_pretrained()"),mHr=o(" class method or the "),Foe=a("a"),gHr=o("from_config()"),hHr=o(` class
method.`),pHr=l(),B$=a("p"),_Hr=o("This class cannot be instantiated directly using "),f5e=a("code"),uHr=o("__init__()"),bHr=o(" (throws an error)."),vHr=l(),Yt=a("div"),F(I$.$$.fragment),FHr=l(),m5e=a("p"),THr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MHr=l(),lf=a("p"),EHr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),CHr=o("not"),wHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),AHr=o("from_pretrained()"),LHr=o(" to load the model weights."),yHr=l(),F(M5.$$.fragment),xHr=l(),Wr=a("div"),F(N$.$$.fragment),$Hr=l(),h5e=a("p"),kHr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SHr=l(),An=a("p"),RHr=o("The model class to instantiate is selected based on the "),p5e=a("code"),PHr=o("model_type"),BHr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),IHr=o("pretrained_model_name_or_path"),NHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),qHr=o("pretrained_model_name_or_path"),jHr=o(":"),DHr=l(),ke=a("ul"),E5=a("li"),b5e=a("strong"),GHr=o("bart"),OHr=o(" \u2014 "),Moe=a("a"),VHr=o("FlaxBartForConditionalGeneration"),XHr=o(" (BART model)"),zHr=l(),C5=a("li"),v5e=a("strong"),QHr=o("blenderbot"),WHr=o(" \u2014 "),Eoe=a("a"),HHr=o("FlaxBlenderbotForConditionalGeneration"),UHr=o(" (Blenderbot model)"),JHr=l(),w5=a("li"),F5e=a("strong"),YHr=o("blenderbot-small"),KHr=o(" \u2014 "),Coe=a("a"),ZHr=o("FlaxBlenderbotSmallForConditionalGeneration"),eUr=o(" (BlenderbotSmall model)"),oUr=l(),A5=a("li"),T5e=a("strong"),rUr=o("encoder-decoder"),tUr=o(" \u2014 "),woe=a("a"),aUr=o("FlaxEncoderDecoderModel"),nUr=o(" (Encoder decoder model)"),sUr=l(),L5=a("li"),M5e=a("strong"),lUr=o("longt5"),iUr=o(" \u2014 "),Aoe=a("a"),dUr=o("FlaxLongT5ForConditionalGeneration"),cUr=o(" (LongT5 model)"),fUr=l(),y5=a("li"),E5e=a("strong"),mUr=o("marian"),gUr=o(" \u2014 "),Loe=a("a"),hUr=o("FlaxMarianMTModel"),pUr=o(" (Marian model)"),_Ur=l(),x5=a("li"),C5e=a("strong"),uUr=o("mbart"),bUr=o(" \u2014 "),yoe=a("a"),vUr=o("FlaxMBartForConditionalGeneration"),FUr=o(" (mBART model)"),TUr=l(),$5=a("li"),w5e=a("strong"),MUr=o("mt5"),EUr=o(" \u2014 "),xoe=a("a"),CUr=o("FlaxMT5ForConditionalGeneration"),wUr=o(" (MT5 model)"),AUr=l(),k5=a("li"),A5e=a("strong"),LUr=o("pegasus"),yUr=o(" \u2014 "),$oe=a("a"),xUr=o("FlaxPegasusForConditionalGeneration"),$Ur=o(" (Pegasus model)"),kUr=l(),S5=a("li"),L5e=a("strong"),SUr=o("t5"),RUr=o(" \u2014 "),koe=a("a"),PUr=o("FlaxT5ForConditionalGeneration"),BUr=o(" (T5 model)"),IUr=l(),F(R5.$$.fragment),lQe=l(),df=a("h2"),P5=a("a"),y5e=a("span"),F(q$.$$.fragment),NUr=l(),x5e=a("span"),qUr=o("FlaxAutoModelForSequenceClassification"),iQe=l(),Fr=a("div"),F(j$.$$.fragment),jUr=l(),cf=a("p"),DUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Soe=a("a"),GUr=o("from_pretrained()"),OUr=o(" class method or the "),Roe=a("a"),VUr=o("from_config()"),XUr=o(` class
method.`),zUr=l(),D$=a("p"),QUr=o("This class cannot be instantiated directly using "),$5e=a("code"),WUr=o("__init__()"),HUr=o(" (throws an error)."),UUr=l(),Kt=a("div"),F(G$.$$.fragment),JUr=l(),k5e=a("p"),YUr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KUr=l(),ff=a("p"),ZUr=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),eJr=o("not"),oJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=a("a"),rJr=o("from_pretrained()"),tJr=o(" to load the model weights."),aJr=l(),F(B5.$$.fragment),nJr=l(),Hr=a("div"),F(O$.$$.fragment),sJr=l(),R5e=a("p"),lJr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iJr=l(),Ln=a("p"),dJr=o("The model class to instantiate is selected based on the "),P5e=a("code"),cJr=o("model_type"),fJr=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),mJr=o("pretrained_model_name_or_path"),gJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),hJr=o("pretrained_model_name_or_path"),pJr=o(":"),_Jr=l(),Se=a("ul"),I5=a("li"),N5e=a("strong"),uJr=o("albert"),bJr=o(" \u2014 "),Boe=a("a"),vJr=o("FlaxAlbertForSequenceClassification"),FJr=o(" (ALBERT model)"),TJr=l(),N5=a("li"),q5e=a("strong"),MJr=o("bart"),EJr=o(" \u2014 "),Ioe=a("a"),CJr=o("FlaxBartForSequenceClassification"),wJr=o(" (BART model)"),AJr=l(),q5=a("li"),j5e=a("strong"),LJr=o("bert"),yJr=o(" \u2014 "),Noe=a("a"),xJr=o("FlaxBertForSequenceClassification"),$Jr=o(" (BERT model)"),kJr=l(),j5=a("li"),D5e=a("strong"),SJr=o("big_bird"),RJr=o(" \u2014 "),qoe=a("a"),PJr=o("FlaxBigBirdForSequenceClassification"),BJr=o(" (BigBird model)"),IJr=l(),D5=a("li"),G5e=a("strong"),NJr=o("distilbert"),qJr=o(" \u2014 "),joe=a("a"),jJr=o("FlaxDistilBertForSequenceClassification"),DJr=o(" (DistilBERT model)"),GJr=l(),G5=a("li"),O5e=a("strong"),OJr=o("electra"),VJr=o(" \u2014 "),Doe=a("a"),XJr=o("FlaxElectraForSequenceClassification"),zJr=o(" (ELECTRA model)"),QJr=l(),O5=a("li"),V5e=a("strong"),WJr=o("mbart"),HJr=o(" \u2014 "),Goe=a("a"),UJr=o("FlaxMBartForSequenceClassification"),JJr=o(" (mBART model)"),YJr=l(),V5=a("li"),X5e=a("strong"),KJr=o("roberta"),ZJr=o(" \u2014 "),Ooe=a("a"),eYr=o("FlaxRobertaForSequenceClassification"),oYr=o(" (RoBERTa model)"),rYr=l(),X5=a("li"),z5e=a("strong"),tYr=o("roformer"),aYr=o(" \u2014 "),Voe=a("a"),nYr=o("FlaxRoFormerForSequenceClassification"),sYr=o(" (RoFormer model)"),lYr=l(),z5=a("li"),Q5e=a("strong"),iYr=o("xlm-roberta"),dYr=o(" \u2014 "),Xoe=a("a"),cYr=o("FlaxXLMRobertaForSequenceClassification"),fYr=o(" (XLM-RoBERTa model)"),mYr=l(),F(Q5.$$.fragment),dQe=l(),mf=a("h2"),W5=a("a"),W5e=a("span"),F(V$.$$.fragment),gYr=l(),H5e=a("span"),hYr=o("FlaxAutoModelForQuestionAnswering"),cQe=l(),Tr=a("div"),F(X$.$$.fragment),pYr=l(),gf=a("p"),_Yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zoe=a("a"),uYr=o("from_pretrained()"),bYr=o(" class method or the "),Qoe=a("a"),vYr=o("from_config()"),FYr=o(` class
method.`),TYr=l(),z$=a("p"),MYr=o("This class cannot be instantiated directly using "),U5e=a("code"),EYr=o("__init__()"),CYr=o(" (throws an error)."),wYr=l(),Zt=a("div"),F(Q$.$$.fragment),AYr=l(),J5e=a("p"),LYr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yYr=l(),hf=a("p"),xYr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),$Yr=o("not"),kYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=a("a"),SYr=o("from_pretrained()"),RYr=o(" to load the model weights."),PYr=l(),F(H5.$$.fragment),BYr=l(),Ur=a("div"),F(W$.$$.fragment),IYr=l(),K5e=a("p"),NYr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qYr=l(),yn=a("p"),jYr=o("The model class to instantiate is selected based on the "),Z5e=a("code"),DYr=o("model_type"),GYr=o(` property of the config object (either
passed as an argument or loaded from `),e0e=a("code"),OYr=o("pretrained_model_name_or_path"),VYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=a("code"),XYr=o("pretrained_model_name_or_path"),zYr=o(":"),QYr=l(),Re=a("ul"),U5=a("li"),r0e=a("strong"),WYr=o("albert"),HYr=o(" \u2014 "),Hoe=a("a"),UYr=o("FlaxAlbertForQuestionAnswering"),JYr=o(" (ALBERT model)"),YYr=l(),J5=a("li"),t0e=a("strong"),KYr=o("bart"),ZYr=o(" \u2014 "),Uoe=a("a"),eKr=o("FlaxBartForQuestionAnswering"),oKr=o(" (BART model)"),rKr=l(),Y5=a("li"),a0e=a("strong"),tKr=o("bert"),aKr=o(" \u2014 "),Joe=a("a"),nKr=o("FlaxBertForQuestionAnswering"),sKr=o(" (BERT model)"),lKr=l(),K5=a("li"),n0e=a("strong"),iKr=o("big_bird"),dKr=o(" \u2014 "),Yoe=a("a"),cKr=o("FlaxBigBirdForQuestionAnswering"),fKr=o(" (BigBird model)"),mKr=l(),Z5=a("li"),s0e=a("strong"),gKr=o("distilbert"),hKr=o(" \u2014 "),Koe=a("a"),pKr=o("FlaxDistilBertForQuestionAnswering"),_Kr=o(" (DistilBERT model)"),uKr=l(),e0=a("li"),l0e=a("strong"),bKr=o("electra"),vKr=o(" \u2014 "),Zoe=a("a"),FKr=o("FlaxElectraForQuestionAnswering"),TKr=o(" (ELECTRA model)"),MKr=l(),o0=a("li"),i0e=a("strong"),EKr=o("mbart"),CKr=o(" \u2014 "),ere=a("a"),wKr=o("FlaxMBartForQuestionAnswering"),AKr=o(" (mBART model)"),LKr=l(),r0=a("li"),d0e=a("strong"),yKr=o("roberta"),xKr=o(" \u2014 "),ore=a("a"),$Kr=o("FlaxRobertaForQuestionAnswering"),kKr=o(" (RoBERTa model)"),SKr=l(),t0=a("li"),c0e=a("strong"),RKr=o("roformer"),PKr=o(" \u2014 "),rre=a("a"),BKr=o("FlaxRoFormerForQuestionAnswering"),IKr=o(" (RoFormer model)"),NKr=l(),a0=a("li"),f0e=a("strong"),qKr=o("xlm-roberta"),jKr=o(" \u2014 "),tre=a("a"),DKr=o("FlaxXLMRobertaForQuestionAnswering"),GKr=o(" (XLM-RoBERTa model)"),OKr=l(),F(n0.$$.fragment),fQe=l(),pf=a("h2"),s0=a("a"),m0e=a("span"),F(H$.$$.fragment),VKr=l(),g0e=a("span"),XKr=o("FlaxAutoModelForTokenClassification"),mQe=l(),Mr=a("div"),F(U$.$$.fragment),zKr=l(),_f=a("p"),QKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),are=a("a"),WKr=o("from_pretrained()"),HKr=o(" class method or the "),nre=a("a"),UKr=o("from_config()"),JKr=o(` class
method.`),YKr=l(),J$=a("p"),KKr=o("This class cannot be instantiated directly using "),h0e=a("code"),ZKr=o("__init__()"),eZr=o(" (throws an error)."),oZr=l(),ea=a("div"),F(Y$.$$.fragment),rZr=l(),p0e=a("p"),tZr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aZr=l(),uf=a("p"),nZr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),sZr=o("not"),lZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),iZr=o("from_pretrained()"),dZr=o(" to load the model weights."),cZr=l(),F(l0.$$.fragment),fZr=l(),Jr=a("div"),F(K$.$$.fragment),mZr=l(),u0e=a("p"),gZr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hZr=l(),xn=a("p"),pZr=o("The model class to instantiate is selected based on the "),b0e=a("code"),_Zr=o("model_type"),uZr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),bZr=o("pretrained_model_name_or_path"),vZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),FZr=o("pretrained_model_name_or_path"),TZr=o(":"),MZr=l(),Ve=a("ul"),i0=a("li"),T0e=a("strong"),EZr=o("albert"),CZr=o(" \u2014 "),lre=a("a"),wZr=o("FlaxAlbertForTokenClassification"),AZr=o(" (ALBERT model)"),LZr=l(),d0=a("li"),M0e=a("strong"),yZr=o("bert"),xZr=o(" \u2014 "),ire=a("a"),$Zr=o("FlaxBertForTokenClassification"),kZr=o(" (BERT model)"),SZr=l(),c0=a("li"),E0e=a("strong"),RZr=o("big_bird"),PZr=o(" \u2014 "),dre=a("a"),BZr=o("FlaxBigBirdForTokenClassification"),IZr=o(" (BigBird model)"),NZr=l(),f0=a("li"),C0e=a("strong"),qZr=o("distilbert"),jZr=o(" \u2014 "),cre=a("a"),DZr=o("FlaxDistilBertForTokenClassification"),GZr=o(" (DistilBERT model)"),OZr=l(),m0=a("li"),w0e=a("strong"),VZr=o("electra"),XZr=o(" \u2014 "),fre=a("a"),zZr=o("FlaxElectraForTokenClassification"),QZr=o(" (ELECTRA model)"),WZr=l(),g0=a("li"),A0e=a("strong"),HZr=o("roberta"),UZr=o(" \u2014 "),mre=a("a"),JZr=o("FlaxRobertaForTokenClassification"),YZr=o(" (RoBERTa model)"),KZr=l(),h0=a("li"),L0e=a("strong"),ZZr=o("roformer"),eet=o(" \u2014 "),gre=a("a"),oet=o("FlaxRoFormerForTokenClassification"),ret=o(" (RoFormer model)"),tet=l(),p0=a("li"),y0e=a("strong"),aet=o("xlm-roberta"),net=o(" \u2014 "),hre=a("a"),set=o("FlaxXLMRobertaForTokenClassification"),iet=o(" (XLM-RoBERTa model)"),det=l(),F(_0.$$.fragment),gQe=l(),bf=a("h2"),u0=a("a"),x0e=a("span"),F(Z$.$$.fragment),cet=l(),$0e=a("span"),fet=o("FlaxAutoModelForMultipleChoice"),hQe=l(),Er=a("div"),F(ek.$$.fragment),met=l(),vf=a("p"),get=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pre=a("a"),het=o("from_pretrained()"),pet=o(" class method or the "),_re=a("a"),_et=o("from_config()"),uet=o(` class
method.`),bet=l(),ok=a("p"),vet=o("This class cannot be instantiated directly using "),k0e=a("code"),Fet=o("__init__()"),Tet=o(" (throws an error)."),Met=l(),oa=a("div"),F(rk.$$.fragment),Eet=l(),S0e=a("p"),Cet=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wet=l(),Ff=a("p"),Aet=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),Let=o("not"),yet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),xet=o("from_pretrained()"),$et=o(" to load the model weights."),ket=l(),F(b0.$$.fragment),Set=l(),Yr=a("div"),F(tk.$$.fragment),Ret=l(),P0e=a("p"),Pet=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bet=l(),$n=a("p"),Iet=o("The model class to instantiate is selected based on the "),B0e=a("code"),Net=o("model_type"),qet=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),jet=o("pretrained_model_name_or_path"),Det=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),Get=o("pretrained_model_name_or_path"),Oet=o(":"),Vet=l(),Xe=a("ul"),v0=a("li"),q0e=a("strong"),Xet=o("albert"),zet=o(" \u2014 "),bre=a("a"),Qet=o("FlaxAlbertForMultipleChoice"),Wet=o(" (ALBERT model)"),Het=l(),F0=a("li"),j0e=a("strong"),Uet=o("bert"),Jet=o(" \u2014 "),vre=a("a"),Yet=o("FlaxBertForMultipleChoice"),Ket=o(" (BERT model)"),Zet=l(),T0=a("li"),D0e=a("strong"),eot=o("big_bird"),oot=o(" \u2014 "),Fre=a("a"),rot=o("FlaxBigBirdForMultipleChoice"),tot=o(" (BigBird model)"),aot=l(),M0=a("li"),G0e=a("strong"),not=o("distilbert"),sot=o(" \u2014 "),Tre=a("a"),lot=o("FlaxDistilBertForMultipleChoice"),iot=o(" (DistilBERT model)"),dot=l(),E0=a("li"),O0e=a("strong"),cot=o("electra"),fot=o(" \u2014 "),Mre=a("a"),mot=o("FlaxElectraForMultipleChoice"),got=o(" (ELECTRA model)"),hot=l(),C0=a("li"),V0e=a("strong"),pot=o("roberta"),_ot=o(" \u2014 "),Ere=a("a"),uot=o("FlaxRobertaForMultipleChoice"),bot=o(" (RoBERTa model)"),vot=l(),w0=a("li"),X0e=a("strong"),Fot=o("roformer"),Tot=o(" \u2014 "),Cre=a("a"),Mot=o("FlaxRoFormerForMultipleChoice"),Eot=o(" (RoFormer model)"),Cot=l(),A0=a("li"),z0e=a("strong"),wot=o("xlm-roberta"),Aot=o(" \u2014 "),wre=a("a"),Lot=o("FlaxXLMRobertaForMultipleChoice"),yot=o(" (XLM-RoBERTa model)"),xot=l(),F(L0.$$.fragment),pQe=l(),Tf=a("h2"),y0=a("a"),Q0e=a("span"),F(ak.$$.fragment),$ot=l(),W0e=a("span"),kot=o("FlaxAutoModelForNextSentencePrediction"),_Qe=l(),Cr=a("div"),F(nk.$$.fragment),Sot=l(),Mf=a("p"),Rot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Are=a("a"),Pot=o("from_pretrained()"),Bot=o(" class method or the "),Lre=a("a"),Iot=o("from_config()"),Not=o(` class
method.`),qot=l(),sk=a("p"),jot=o("This class cannot be instantiated directly using "),H0e=a("code"),Dot=o("__init__()"),Got=o(" (throws an error)."),Oot=l(),ra=a("div"),F(lk.$$.fragment),Vot=l(),U0e=a("p"),Xot=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zot=l(),Ef=a("p"),Qot=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),Wot=o("not"),Hot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=a("a"),Uot=o("from_pretrained()"),Jot=o(" to load the model weights."),Yot=l(),F(x0.$$.fragment),Kot=l(),Kr=a("div"),F(ik.$$.fragment),Zot=l(),Y0e=a("p"),ert=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ort=l(),kn=a("p"),rrt=o("The model class to instantiate is selected based on the "),K0e=a("code"),trt=o("model_type"),art=o(` property of the config object (either
passed as an argument or loaded from `),Z0e=a("code"),nrt=o("pretrained_model_name_or_path"),srt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=a("code"),lrt=o("pretrained_model_name_or_path"),irt=o(":"),drt=l(),owe=a("ul"),$0=a("li"),rwe=a("strong"),crt=o("bert"),frt=o(" \u2014 "),xre=a("a"),mrt=o("FlaxBertForNextSentencePrediction"),grt=o(" (BERT model)"),hrt=l(),F(k0.$$.fragment),uQe=l(),Cf=a("h2"),S0=a("a"),twe=a("span"),F(dk.$$.fragment),prt=l(),awe=a("span"),_rt=o("FlaxAutoModelForImageClassification"),bQe=l(),wr=a("div"),F(ck.$$.fragment),urt=l(),wf=a("p"),brt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$re=a("a"),vrt=o("from_pretrained()"),Frt=o(" class method or the "),kre=a("a"),Trt=o("from_config()"),Mrt=o(` class
method.`),Ert=l(),fk=a("p"),Crt=o("This class cannot be instantiated directly using "),nwe=a("code"),wrt=o("__init__()"),Art=o(" (throws an error)."),Lrt=l(),ta=a("div"),F(mk.$$.fragment),yrt=l(),swe=a("p"),xrt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$rt=l(),Af=a("p"),krt=o(`Note:
Loading a model from its configuration file does `),lwe=a("strong"),Srt=o("not"),Rrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),Prt=o("from_pretrained()"),Brt=o(" to load the model weights."),Irt=l(),F(R0.$$.fragment),Nrt=l(),Zr=a("div"),F(gk.$$.fragment),qrt=l(),iwe=a("p"),jrt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Drt=l(),Sn=a("p"),Grt=o("The model class to instantiate is selected based on the "),dwe=a("code"),Ort=o("model_type"),Vrt=o(` property of the config object (either
passed as an argument or loaded from `),cwe=a("code"),Xrt=o("pretrained_model_name_or_path"),zrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=a("code"),Qrt=o("pretrained_model_name_or_path"),Wrt=o(":"),Hrt=l(),hk=a("ul"),P0=a("li"),mwe=a("strong"),Urt=o("beit"),Jrt=o(" \u2014 "),Rre=a("a"),Yrt=o("FlaxBeitForImageClassification"),Krt=o(" (BEiT model)"),Zrt=l(),B0=a("li"),gwe=a("strong"),ett=o("vit"),ott=o(" \u2014 "),Pre=a("a"),rtt=o("FlaxViTForImageClassification"),ttt=o(" (ViT model)"),att=l(),F(I0.$$.fragment),vQe=l(),Lf=a("h2"),N0=a("a"),hwe=a("span"),F(pk.$$.fragment),ntt=l(),pwe=a("span"),stt=o("FlaxAutoModelForVision2Seq"),FQe=l(),Ar=a("div"),F(_k.$$.fragment),ltt=l(),yf=a("p"),itt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bre=a("a"),dtt=o("from_pretrained()"),ctt=o(" class method or the "),Ire=a("a"),ftt=o("from_config()"),mtt=o(` class
method.`),gtt=l(),uk=a("p"),htt=o("This class cannot be instantiated directly using "),_we=a("code"),ptt=o("__init__()"),_tt=o(" (throws an error)."),utt=l(),aa=a("div"),F(bk.$$.fragment),btt=l(),uwe=a("p"),vtt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ftt=l(),xf=a("p"),Ttt=o(`Note:
Loading a model from its configuration file does `),bwe=a("strong"),Mtt=o("not"),Ett=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=a("a"),Ctt=o("from_pretrained()"),wtt=o(" to load the model weights."),Att=l(),F(q0.$$.fragment),Ltt=l(),et=a("div"),F(vk.$$.fragment),ytt=l(),vwe=a("p"),xtt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$tt=l(),Rn=a("p"),ktt=o("The model class to instantiate is selected based on the "),Fwe=a("code"),Stt=o("model_type"),Rtt=o(` property of the config object (either
passed as an argument or loaded from `),Twe=a("code"),Ptt=o("pretrained_model_name_or_path"),Btt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mwe=a("code"),Itt=o("pretrained_model_name_or_path"),Ntt=o(":"),qtt=l(),Ewe=a("ul"),j0=a("li"),Cwe=a("strong"),jtt=o("vision-encoder-decoder"),Dtt=o(" \u2014 "),qre=a("a"),Gtt=o("FlaxVisionEncoderDecoderModel"),Ott=o(" (Vision Encoder decoder model)"),Vtt=l(),F(D0.$$.fragment),this.h()},l(f){const u=$Wt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Fk=s(p);m=n(Fk,"A",{id:!0,class:!0,href:!0});var wwe=s(m);_=n(wwe,"SPAN",{});var Awe=s(_);T(d.$$.fragment,Awe),Awe.forEach(t),wwe.forEach(t),h=i(Fk),Co=n(Fk,"SPAN",{});var Lwe=s(Co);Li=r(Lwe,"Auto Classes"),Lwe.forEach(t),Fk.forEach(t),Rf=i(f),lt=n(f,"P",{});var Tk=s(lt);yi=r(Tk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),xi=n(Tk,"CODE",{});var ywe=s(xi);sL=r(ywe,"from_pretrained()"),ywe.forEach(t),Pf=r(Tk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Tk.forEach(t),Oe=i(f),We=n(f,"P",{});var Pn=s(We);$i=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var xwe=s(Bn);lL=r(xwe,"AutoConfig"),xwe.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var $we=s(Nn);iL=r($we,"AutoModel"),$we.forEach(t),ki=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var kwe=s(qn);dL=r(kwe,"AutoTokenizer"),kwe.forEach(t),Si=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Mk=s(Ae);DS=r(Mk,"will create a model that is an instance of "),Ri=n(Mk,"A",{href:!0});var Swe=s(Ri);GS=r(Swe,"BertModel"),Swe.forEach(t),OS=r(Mk,"."),Mk.forEach(t),wo=i(f),Ra=n(f,"P",{});var Ek=s(Ra);VS=r(Ek,"There is one class of "),If=n(Ek,"CODE",{});var Rwe=s(If);XS=r(Rwe,"AutoModel"),Rwe.forEach(t),kHe=r(Ek," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ek.forEach(t),_Xe=i(f),Pi=n(f,"H2",{class:!0});var Ck=s(Pi);Nf=n(Ck,"A",{id:!0,class:!0,href:!0});var Pwe=s(Nf);Sae=n(Pwe,"SPAN",{});var Bwe=s(Sae);T(cL.$$.fragment,Bwe),Bwe.forEach(t),Pwe.forEach(t),SHe=i(Ck),Rae=n(Ck,"SPAN",{});var Iwe=s(Rae);RHe=r(Iwe,"Extending the Auto Classes"),Iwe.forEach(t),Ck.forEach(t),uXe=i(f),jn=n(f,"P",{});var $f=s(jn);PHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pae=n($f,"CODE",{});var Nwe=s(Pae);BHe=r(Nwe,"NewModel"),Nwe.forEach(t),IHe=r($f,", make sure you have a "),Bae=n($f,"CODE",{});var qwe=s(Bae);NHe=r(qwe,"NewModelConfig"),qwe.forEach(t),qHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),bXe=i(f),T(fL.$$.fragment,f),vXe=i(f),zS=n(f,"P",{});var jwe=s(zS);jHe=r(jwe,"You will then be able to use the auto classes like you would usually do!"),jwe.forEach(t),FXe=i(f),T(qf.$$.fragment,f),TXe=i(f),Bi=n(f,"H2",{class:!0});var wk=s(Bi);jf=n(wk,"A",{id:!0,class:!0,href:!0});var Dwe=s(jf);Iae=n(Dwe,"SPAN",{});var Gwe=s(Iae);T(mL.$$.fragment,Gwe),Gwe.forEach(t),Dwe.forEach(t),DHe=i(wk),Nae=n(wk,"SPAN",{});var Owe=s(Nae);GHe=r(Owe,"AutoConfig"),Owe.forEach(t),wk.forEach(t),MXe=i(f),Ao=n(f,"DIV",{class:!0});var nt=s(Ao);T(gL.$$.fragment,nt),OHe=i(nt),hL=n(nt,"P",{});var Ak=s(hL);VHe=r(Ak,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),QS=n(Ak,"A",{href:!0});var Vwe=s(QS);XHe=r(Vwe,"from_pretrained()"),Vwe.forEach(t),zHe=r(Ak," class method."),Ak.forEach(t),QHe=i(nt),pL=n(nt,"P",{});var Lk=s(pL);WHe=r(Lk,"This class cannot be instantiated directly using "),qae=n(Lk,"CODE",{});var Xwe=s(qae);HHe=r(Xwe,"__init__()"),Xwe.forEach(t),UHe=r(Lk," (throws an error)."),Lk.forEach(t),JHe=i(nt),Lr=n(nt,"DIV",{class:!0});var st=s(Lr);T(_L.$$.fragment,st),YHe=i(st),jae=n(st,"P",{});var zwe=s(jae);KHe=r(zwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zwe.forEach(t),ZHe=i(st),Ii=n(st,"P",{});var kf=s(Ii);eUe=r(kf,"The configuration class to instantiate is selected based on the "),Dae=n(kf,"CODE",{});var Qwe=s(Dae);oUe=r(Qwe,"model_type"),Qwe.forEach(t),rUe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gae=n(kf,"CODE",{});var Wwe=s(Gae);tUe=r(Wwe,"pretrained_model_name_or_path"),Wwe.forEach(t),aUe=r(kf,":"),kf.forEach(t),nUe=i(st),A=n(st,"UL",{});var L=s(A);Df=n(L,"LI",{});var G0=s(Df);Oae=n(G0,"STRONG",{});var Hwe=s(Oae);sUe=r(Hwe,"albert"),Hwe.forEach(t),lUe=r(G0," \u2014 "),WS=n(G0,"A",{href:!0});var Uwe=s(WS);iUe=r(Uwe,"AlbertConfig"),Uwe.forEach(t),dUe=r(G0," (ALBERT model)"),G0.forEach(t),cUe=i(L),Gf=n(L,"LI",{});var O0=s(Gf);Vae=n(O0,"STRONG",{});var Jwe=s(Vae);fUe=r(Jwe,"bart"),Jwe.forEach(t),mUe=r(O0," \u2014 "),HS=n(O0,"A",{href:!0});var Ywe=s(HS);gUe=r(Ywe,"BartConfig"),Ywe.forEach(t),hUe=r(O0," (BART model)"),O0.forEach(t),pUe=i(L),Of=n(L,"LI",{});var V0=s(Of);Xae=n(V0,"STRONG",{});var Kwe=s(Xae);_Ue=r(Kwe,"beit"),Kwe.forEach(t),uUe=r(V0," \u2014 "),US=n(V0,"A",{href:!0});var Zwe=s(US);bUe=r(Zwe,"BeitConfig"),Zwe.forEach(t),vUe=r(V0," (BEiT model)"),V0.forEach(t),FUe=i(L),Vf=n(L,"LI",{});var X0=s(Vf);zae=n(X0,"STRONG",{});var eAe=s(zae);TUe=r(eAe,"bert"),eAe.forEach(t),MUe=r(X0," \u2014 "),JS=n(X0,"A",{href:!0});var oAe=s(JS);EUe=r(oAe,"BertConfig"),oAe.forEach(t),CUe=r(X0," (BERT model)"),X0.forEach(t),wUe=i(L),Xf=n(L,"LI",{});var z0=s(Xf);Qae=n(z0,"STRONG",{});var rAe=s(Qae);AUe=r(rAe,"bert-generation"),rAe.forEach(t),LUe=r(z0," \u2014 "),YS=n(z0,"A",{href:!0});var tAe=s(YS);yUe=r(tAe,"BertGenerationConfig"),tAe.forEach(t),xUe=r(z0," (Bert Generation model)"),z0.forEach(t),$Ue=i(L),zf=n(L,"LI",{});var Q0=s(zf);Wae=n(Q0,"STRONG",{});var aAe=s(Wae);kUe=r(aAe,"big_bird"),aAe.forEach(t),SUe=r(Q0," \u2014 "),KS=n(Q0,"A",{href:!0});var nAe=s(KS);RUe=r(nAe,"BigBirdConfig"),nAe.forEach(t),PUe=r(Q0," (BigBird model)"),Q0.forEach(t),BUe=i(L),Qf=n(L,"LI",{});var W0=s(Qf);Hae=n(W0,"STRONG",{});var sAe=s(Hae);IUe=r(sAe,"bigbird_pegasus"),sAe.forEach(t),NUe=r(W0," \u2014 "),ZS=n(W0,"A",{href:!0});var lAe=s(ZS);qUe=r(lAe,"BigBirdPegasusConfig"),lAe.forEach(t),jUe=r(W0," (BigBird-Pegasus model)"),W0.forEach(t),DUe=i(L),Wf=n(L,"LI",{});var H0=s(Wf);Uae=n(H0,"STRONG",{});var iAe=s(Uae);GUe=r(iAe,"blenderbot"),iAe.forEach(t),OUe=r(H0," \u2014 "),eR=n(H0,"A",{href:!0});var dAe=s(eR);VUe=r(dAe,"BlenderbotConfig"),dAe.forEach(t),XUe=r(H0," (Blenderbot model)"),H0.forEach(t),zUe=i(L),Hf=n(L,"LI",{});var U0=s(Hf);Jae=n(U0,"STRONG",{});var cAe=s(Jae);QUe=r(cAe,"blenderbot-small"),cAe.forEach(t),WUe=r(U0," \u2014 "),oR=n(U0,"A",{href:!0});var fAe=s(oR);HUe=r(fAe,"BlenderbotSmallConfig"),fAe.forEach(t),UUe=r(U0," (BlenderbotSmall model)"),U0.forEach(t),JUe=i(L),Uf=n(L,"LI",{});var J0=s(Uf);Yae=n(J0,"STRONG",{});var mAe=s(Yae);YUe=r(mAe,"bloom"),mAe.forEach(t),KUe=r(J0," \u2014 "),rR=n(J0,"A",{href:!0});var gAe=s(rR);ZUe=r(gAe,"BloomConfig"),gAe.forEach(t),eJe=r(J0," (BLOOM model)"),J0.forEach(t),oJe=i(L),Jf=n(L,"LI",{});var Y0=s(Jf);Kae=n(Y0,"STRONG",{});var hAe=s(Kae);rJe=r(hAe,"camembert"),hAe.forEach(t),tJe=r(Y0," \u2014 "),tR=n(Y0,"A",{href:!0});var pAe=s(tR);aJe=r(pAe,"CamembertConfig"),pAe.forEach(t),nJe=r(Y0," (CamemBERT model)"),Y0.forEach(t),sJe=i(L),Yf=n(L,"LI",{});var K0=s(Yf);Zae=n(K0,"STRONG",{});var _Ae=s(Zae);lJe=r(_Ae,"canine"),_Ae.forEach(t),iJe=r(K0," \u2014 "),aR=n(K0,"A",{href:!0});var uAe=s(aR);dJe=r(uAe,"CanineConfig"),uAe.forEach(t),cJe=r(K0," (CANINE model)"),K0.forEach(t),fJe=i(L),Kf=n(L,"LI",{});var Z0=s(Kf);ene=n(Z0,"STRONG",{});var bAe=s(ene);mJe=r(bAe,"clip"),bAe.forEach(t),gJe=r(Z0," \u2014 "),nR=n(Z0,"A",{href:!0});var vAe=s(nR);hJe=r(vAe,"CLIPConfig"),vAe.forEach(t),pJe=r(Z0," (CLIP model)"),Z0.forEach(t),_Je=i(L),Zf=n(L,"LI",{});var ew=s(Zf);one=n(ew,"STRONG",{});var FAe=s(one);uJe=r(FAe,"codegen"),FAe.forEach(t),bJe=r(ew," \u2014 "),sR=n(ew,"A",{href:!0});var TAe=s(sR);vJe=r(TAe,"CodeGenConfig"),TAe.forEach(t),FJe=r(ew," (CodeGen model)"),ew.forEach(t),TJe=i(L),em=n(L,"LI",{});var ow=s(em);rne=n(ow,"STRONG",{});var MAe=s(rne);MJe=r(MAe,"convbert"),MAe.forEach(t),EJe=r(ow," \u2014 "),lR=n(ow,"A",{href:!0});var EAe=s(lR);CJe=r(EAe,"ConvBertConfig"),EAe.forEach(t),wJe=r(ow," (ConvBERT model)"),ow.forEach(t),AJe=i(L),om=n(L,"LI",{});var rw=s(om);tne=n(rw,"STRONG",{});var CAe=s(tne);LJe=r(CAe,"convnext"),CAe.forEach(t),yJe=r(rw," \u2014 "),iR=n(rw,"A",{href:!0});var wAe=s(iR);xJe=r(wAe,"ConvNextConfig"),wAe.forEach(t),$Je=r(rw," (ConvNeXT model)"),rw.forEach(t),kJe=i(L),rm=n(L,"LI",{});var tw=s(rm);ane=n(tw,"STRONG",{});var AAe=s(ane);SJe=r(AAe,"ctrl"),AAe.forEach(t),RJe=r(tw," \u2014 "),dR=n(tw,"A",{href:!0});var LAe=s(dR);PJe=r(LAe,"CTRLConfig"),LAe.forEach(t),BJe=r(tw," (CTRL model)"),tw.forEach(t),IJe=i(L),tm=n(L,"LI",{});var aw=s(tm);nne=n(aw,"STRONG",{});var yAe=s(nne);NJe=r(yAe,"cvt"),yAe.forEach(t),qJe=r(aw," \u2014 "),cR=n(aw,"A",{href:!0});var xAe=s(cR);jJe=r(xAe,"CvtConfig"),xAe.forEach(t),DJe=r(aw," (CvT model)"),aw.forEach(t),GJe=i(L),am=n(L,"LI",{});var nw=s(am);sne=n(nw,"STRONG",{});var $Ae=s(sne);OJe=r($Ae,"data2vec-audio"),$Ae.forEach(t),VJe=r(nw," \u2014 "),fR=n(nw,"A",{href:!0});var kAe=s(fR);XJe=r(kAe,"Data2VecAudioConfig"),kAe.forEach(t),zJe=r(nw," (Data2VecAudio model)"),nw.forEach(t),QJe=i(L),nm=n(L,"LI",{});var sw=s(nm);lne=n(sw,"STRONG",{});var SAe=s(lne);WJe=r(SAe,"data2vec-text"),SAe.forEach(t),HJe=r(sw," \u2014 "),mR=n(sw,"A",{href:!0});var RAe=s(mR);UJe=r(RAe,"Data2VecTextConfig"),RAe.forEach(t),JJe=r(sw," (Data2VecText model)"),sw.forEach(t),YJe=i(L),sm=n(L,"LI",{});var lw=s(sm);ine=n(lw,"STRONG",{});var PAe=s(ine);KJe=r(PAe,"data2vec-vision"),PAe.forEach(t),ZJe=r(lw," \u2014 "),gR=n(lw,"A",{href:!0});var BAe=s(gR);eYe=r(BAe,"Data2VecVisionConfig"),BAe.forEach(t),oYe=r(lw," (Data2VecVision model)"),lw.forEach(t),rYe=i(L),lm=n(L,"LI",{});var iw=s(lm);dne=n(iw,"STRONG",{});var IAe=s(dne);tYe=r(IAe,"deberta"),IAe.forEach(t),aYe=r(iw," \u2014 "),hR=n(iw,"A",{href:!0});var NAe=s(hR);nYe=r(NAe,"DebertaConfig"),NAe.forEach(t),sYe=r(iw," (DeBERTa model)"),iw.forEach(t),lYe=i(L),im=n(L,"LI",{});var dw=s(im);cne=n(dw,"STRONG",{});var qAe=s(cne);iYe=r(qAe,"deberta-v2"),qAe.forEach(t),dYe=r(dw," \u2014 "),pR=n(dw,"A",{href:!0});var jAe=s(pR);cYe=r(jAe,"DebertaV2Config"),jAe.forEach(t),fYe=r(dw," (DeBERTa-v2 model)"),dw.forEach(t),mYe=i(L),dm=n(L,"LI",{});var cw=s(dm);fne=n(cw,"STRONG",{});var ztt=s(fne);gYe=r(ztt,"decision_transformer"),ztt.forEach(t),hYe=r(cw," \u2014 "),_R=n(cw,"A",{href:!0});var Qtt=s(_R);pYe=r(Qtt,"DecisionTransformerConfig"),Qtt.forEach(t),_Ye=r(cw," (Decision Transformer model)"),cw.forEach(t),uYe=i(L),cm=n(L,"LI",{});var DAe=s(cm);mne=n(DAe,"STRONG",{});var Wtt=s(mne);bYe=r(Wtt,"deit"),Wtt.forEach(t),vYe=r(DAe," \u2014 "),uR=n(DAe,"A",{href:!0});var Htt=s(uR);FYe=r(Htt,"DeiTConfig"),Htt.forEach(t),TYe=r(DAe," (DeiT model)"),DAe.forEach(t),MYe=i(L),fm=n(L,"LI",{});var GAe=s(fm);gne=n(GAe,"STRONG",{});var Utt=s(gne);EYe=r(Utt,"detr"),Utt.forEach(t),CYe=r(GAe," \u2014 "),bR=n(GAe,"A",{href:!0});var Jtt=s(bR);wYe=r(Jtt,"DetrConfig"),Jtt.forEach(t),AYe=r(GAe," (DETR model)"),GAe.forEach(t),LYe=i(L),mm=n(L,"LI",{});var OAe=s(mm);hne=n(OAe,"STRONG",{});var Ytt=s(hne);yYe=r(Ytt,"distilbert"),Ytt.forEach(t),xYe=r(OAe," \u2014 "),vR=n(OAe,"A",{href:!0});var Ktt=s(vR);$Ye=r(Ktt,"DistilBertConfig"),Ktt.forEach(t),kYe=r(OAe," (DistilBERT model)"),OAe.forEach(t),SYe=i(L),gm=n(L,"LI",{});var VAe=s(gm);pne=n(VAe,"STRONG",{});var Ztt=s(pne);RYe=r(Ztt,"dpr"),Ztt.forEach(t),PYe=r(VAe," \u2014 "),FR=n(VAe,"A",{href:!0});var eat=s(FR);BYe=r(eat,"DPRConfig"),eat.forEach(t),IYe=r(VAe," (DPR model)"),VAe.forEach(t),NYe=i(L),hm=n(L,"LI",{});var XAe=s(hm);_ne=n(XAe,"STRONG",{});var oat=s(_ne);qYe=r(oat,"dpt"),oat.forEach(t),jYe=r(XAe," \u2014 "),TR=n(XAe,"A",{href:!0});var rat=s(TR);DYe=r(rat,"DPTConfig"),rat.forEach(t),GYe=r(XAe," (DPT model)"),XAe.forEach(t),OYe=i(L),pm=n(L,"LI",{});var zAe=s(pm);une=n(zAe,"STRONG",{});var tat=s(une);VYe=r(tat,"electra"),tat.forEach(t),XYe=r(zAe," \u2014 "),MR=n(zAe,"A",{href:!0});var aat=s(MR);zYe=r(aat,"ElectraConfig"),aat.forEach(t),QYe=r(zAe," (ELECTRA model)"),zAe.forEach(t),WYe=i(L),_m=n(L,"LI",{});var QAe=s(_m);bne=n(QAe,"STRONG",{});var nat=s(bne);HYe=r(nat,"encoder-decoder"),nat.forEach(t),UYe=r(QAe," \u2014 "),ER=n(QAe,"A",{href:!0});var sat=s(ER);JYe=r(sat,"EncoderDecoderConfig"),sat.forEach(t),YYe=r(QAe," (Encoder decoder model)"),QAe.forEach(t),KYe=i(L),um=n(L,"LI",{});var WAe=s(um);vne=n(WAe,"STRONG",{});var lat=s(vne);ZYe=r(lat,"flaubert"),lat.forEach(t),eKe=r(WAe," \u2014 "),CR=n(WAe,"A",{href:!0});var iat=s(CR);oKe=r(iat,"FlaubertConfig"),iat.forEach(t),rKe=r(WAe," (FlauBERT model)"),WAe.forEach(t),tKe=i(L),bm=n(L,"LI",{});var HAe=s(bm);Fne=n(HAe,"STRONG",{});var dat=s(Fne);aKe=r(dat,"flava"),dat.forEach(t),nKe=r(HAe," \u2014 "),wR=n(HAe,"A",{href:!0});var cat=s(wR);sKe=r(cat,"FlavaConfig"),cat.forEach(t),lKe=r(HAe," (FLAVA model)"),HAe.forEach(t),iKe=i(L),vm=n(L,"LI",{});var UAe=s(vm);Tne=n(UAe,"STRONG",{});var fat=s(Tne);dKe=r(fat,"fnet"),fat.forEach(t),cKe=r(UAe," \u2014 "),AR=n(UAe,"A",{href:!0});var mat=s(AR);fKe=r(mat,"FNetConfig"),mat.forEach(t),mKe=r(UAe," (FNet model)"),UAe.forEach(t),gKe=i(L),Fm=n(L,"LI",{});var JAe=s(Fm);Mne=n(JAe,"STRONG",{});var gat=s(Mne);hKe=r(gat,"fsmt"),gat.forEach(t),pKe=r(JAe," \u2014 "),LR=n(JAe,"A",{href:!0});var hat=s(LR);_Ke=r(hat,"FSMTConfig"),hat.forEach(t),uKe=r(JAe," (FairSeq Machine-Translation model)"),JAe.forEach(t),bKe=i(L),Tm=n(L,"LI",{});var YAe=s(Tm);Ene=n(YAe,"STRONG",{});var pat=s(Ene);vKe=r(pat,"funnel"),pat.forEach(t),FKe=r(YAe," \u2014 "),yR=n(YAe,"A",{href:!0});var _at=s(yR);TKe=r(_at,"FunnelConfig"),_at.forEach(t),MKe=r(YAe," (Funnel Transformer model)"),YAe.forEach(t),EKe=i(L),Mm=n(L,"LI",{});var KAe=s(Mm);Cne=n(KAe,"STRONG",{});var uat=s(Cne);CKe=r(uat,"glpn"),uat.forEach(t),wKe=r(KAe," \u2014 "),xR=n(KAe,"A",{href:!0});var bat=s(xR);AKe=r(bat,"GLPNConfig"),bat.forEach(t),LKe=r(KAe," (GLPN model)"),KAe.forEach(t),yKe=i(L),Em=n(L,"LI",{});var ZAe=s(Em);wne=n(ZAe,"STRONG",{});var vat=s(wne);xKe=r(vat,"gpt2"),vat.forEach(t),$Ke=r(ZAe," \u2014 "),$R=n(ZAe,"A",{href:!0});var Fat=s($R);kKe=r(Fat,"GPT2Config"),Fat.forEach(t),SKe=r(ZAe," (OpenAI GPT-2 model)"),ZAe.forEach(t),RKe=i(L),Cm=n(L,"LI",{});var eLe=s(Cm);Ane=n(eLe,"STRONG",{});var Tat=s(Ane);PKe=r(Tat,"gpt_neo"),Tat.forEach(t),BKe=r(eLe," \u2014 "),kR=n(eLe,"A",{href:!0});var Mat=s(kR);IKe=r(Mat,"GPTNeoConfig"),Mat.forEach(t),NKe=r(eLe," (GPT Neo model)"),eLe.forEach(t),qKe=i(L),wm=n(L,"LI",{});var oLe=s(wm);Lne=n(oLe,"STRONG",{});var Eat=s(Lne);jKe=r(Eat,"gpt_neox"),Eat.forEach(t),DKe=r(oLe," \u2014 "),SR=n(oLe,"A",{href:!0});var Cat=s(SR);GKe=r(Cat,"GPTNeoXConfig"),Cat.forEach(t),OKe=r(oLe," (GPT NeoX model)"),oLe.forEach(t),VKe=i(L),Am=n(L,"LI",{});var rLe=s(Am);yne=n(rLe,"STRONG",{});var wat=s(yne);XKe=r(wat,"gptj"),wat.forEach(t),zKe=r(rLe," \u2014 "),RR=n(rLe,"A",{href:!0});var Aat=s(RR);QKe=r(Aat,"GPTJConfig"),Aat.forEach(t),WKe=r(rLe," (GPT-J model)"),rLe.forEach(t),HKe=i(L),Lm=n(L,"LI",{});var tLe=s(Lm);xne=n(tLe,"STRONG",{});var Lat=s(xne);UKe=r(Lat,"groupvit"),Lat.forEach(t),JKe=r(tLe," \u2014 "),PR=n(tLe,"A",{href:!0});var yat=s(PR);YKe=r(yat,"GroupViTConfig"),yat.forEach(t),KKe=r(tLe," (GroupViT model)"),tLe.forEach(t),ZKe=i(L),ym=n(L,"LI",{});var aLe=s(ym);$ne=n(aLe,"STRONG",{});var xat=s($ne);eZe=r(xat,"hubert"),xat.forEach(t),oZe=r(aLe," \u2014 "),BR=n(aLe,"A",{href:!0});var $at=s(BR);rZe=r($at,"HubertConfig"),$at.forEach(t),tZe=r(aLe," (Hubert model)"),aLe.forEach(t),aZe=i(L),xm=n(L,"LI",{});var nLe=s(xm);kne=n(nLe,"STRONG",{});var kat=s(kne);nZe=r(kat,"ibert"),kat.forEach(t),sZe=r(nLe," \u2014 "),IR=n(nLe,"A",{href:!0});var Sat=s(IR);lZe=r(Sat,"IBertConfig"),Sat.forEach(t),iZe=r(nLe," (I-BERT model)"),nLe.forEach(t),dZe=i(L),$m=n(L,"LI",{});var sLe=s($m);Sne=n(sLe,"STRONG",{});var Rat=s(Sne);cZe=r(Rat,"imagegpt"),Rat.forEach(t),fZe=r(sLe," \u2014 "),NR=n(sLe,"A",{href:!0});var Pat=s(NR);mZe=r(Pat,"ImageGPTConfig"),Pat.forEach(t),gZe=r(sLe," (ImageGPT model)"),sLe.forEach(t),hZe=i(L),km=n(L,"LI",{});var lLe=s(km);Rne=n(lLe,"STRONG",{});var Bat=s(Rne);pZe=r(Bat,"layoutlm"),Bat.forEach(t),_Ze=r(lLe," \u2014 "),qR=n(lLe,"A",{href:!0});var Iat=s(qR);uZe=r(Iat,"LayoutLMConfig"),Iat.forEach(t),bZe=r(lLe," (LayoutLM model)"),lLe.forEach(t),vZe=i(L),Sm=n(L,"LI",{});var iLe=s(Sm);Pne=n(iLe,"STRONG",{});var Nat=s(Pne);FZe=r(Nat,"layoutlmv2"),Nat.forEach(t),TZe=r(iLe," \u2014 "),jR=n(iLe,"A",{href:!0});var qat=s(jR);MZe=r(qat,"LayoutLMv2Config"),qat.forEach(t),EZe=r(iLe," (LayoutLMv2 model)"),iLe.forEach(t),CZe=i(L),Rm=n(L,"LI",{});var dLe=s(Rm);Bne=n(dLe,"STRONG",{});var jat=s(Bne);wZe=r(jat,"layoutlmv3"),jat.forEach(t),AZe=r(dLe," \u2014 "),DR=n(dLe,"A",{href:!0});var Dat=s(DR);LZe=r(Dat,"LayoutLMv3Config"),Dat.forEach(t),yZe=r(dLe," (LayoutLMv3 model)"),dLe.forEach(t),xZe=i(L),Pm=n(L,"LI",{});var cLe=s(Pm);Ine=n(cLe,"STRONG",{});var Gat=s(Ine);$Ze=r(Gat,"led"),Gat.forEach(t),kZe=r(cLe," \u2014 "),GR=n(cLe,"A",{href:!0});var Oat=s(GR);SZe=r(Oat,"LEDConfig"),Oat.forEach(t),RZe=r(cLe," (LED model)"),cLe.forEach(t),PZe=i(L),Bm=n(L,"LI",{});var fLe=s(Bm);Nne=n(fLe,"STRONG",{});var Vat=s(Nne);BZe=r(Vat,"levit"),Vat.forEach(t),IZe=r(fLe," \u2014 "),OR=n(fLe,"A",{href:!0});var Xat=s(OR);NZe=r(Xat,"LevitConfig"),Xat.forEach(t),qZe=r(fLe," (LeViT model)"),fLe.forEach(t),jZe=i(L),Im=n(L,"LI",{});var mLe=s(Im);qne=n(mLe,"STRONG",{});var zat=s(qne);DZe=r(zat,"longformer"),zat.forEach(t),GZe=r(mLe," \u2014 "),VR=n(mLe,"A",{href:!0});var Qat=s(VR);OZe=r(Qat,"LongformerConfig"),Qat.forEach(t),VZe=r(mLe," (Longformer model)"),mLe.forEach(t),XZe=i(L),Nm=n(L,"LI",{});var gLe=s(Nm);jne=n(gLe,"STRONG",{});var Wat=s(jne);zZe=r(Wat,"longt5"),Wat.forEach(t),QZe=r(gLe," \u2014 "),XR=n(gLe,"A",{href:!0});var Hat=s(XR);WZe=r(Hat,"LongT5Config"),Hat.forEach(t),HZe=r(gLe," (LongT5 model)"),gLe.forEach(t),UZe=i(L),qm=n(L,"LI",{});var hLe=s(qm);Dne=n(hLe,"STRONG",{});var Uat=s(Dne);JZe=r(Uat,"luke"),Uat.forEach(t),YZe=r(hLe," \u2014 "),zR=n(hLe,"A",{href:!0});var Jat=s(zR);KZe=r(Jat,"LukeConfig"),Jat.forEach(t),ZZe=r(hLe," (LUKE model)"),hLe.forEach(t),eeo=i(L),jm=n(L,"LI",{});var pLe=s(jm);Gne=n(pLe,"STRONG",{});var Yat=s(Gne);oeo=r(Yat,"lxmert"),Yat.forEach(t),reo=r(pLe," \u2014 "),QR=n(pLe,"A",{href:!0});var Kat=s(QR);teo=r(Kat,"LxmertConfig"),Kat.forEach(t),aeo=r(pLe," (LXMERT model)"),pLe.forEach(t),neo=i(L),Dm=n(L,"LI",{});var _Le=s(Dm);One=n(_Le,"STRONG",{});var Zat=s(One);seo=r(Zat,"m2m_100"),Zat.forEach(t),leo=r(_Le," \u2014 "),WR=n(_Le,"A",{href:!0});var ent=s(WR);ieo=r(ent,"M2M100Config"),ent.forEach(t),deo=r(_Le," (M2M100 model)"),_Le.forEach(t),ceo=i(L),Gm=n(L,"LI",{});var uLe=s(Gm);Vne=n(uLe,"STRONG",{});var ont=s(Vne);feo=r(ont,"marian"),ont.forEach(t),meo=r(uLe," \u2014 "),HR=n(uLe,"A",{href:!0});var rnt=s(HR);geo=r(rnt,"MarianConfig"),rnt.forEach(t),heo=r(uLe," (Marian model)"),uLe.forEach(t),peo=i(L),Om=n(L,"LI",{});var bLe=s(Om);Xne=n(bLe,"STRONG",{});var tnt=s(Xne);_eo=r(tnt,"maskformer"),tnt.forEach(t),ueo=r(bLe," \u2014 "),UR=n(bLe,"A",{href:!0});var ant=s(UR);beo=r(ant,"MaskFormerConfig"),ant.forEach(t),veo=r(bLe," (MaskFormer model)"),bLe.forEach(t),Feo=i(L),Vm=n(L,"LI",{});var vLe=s(Vm);zne=n(vLe,"STRONG",{});var nnt=s(zne);Teo=r(nnt,"mbart"),nnt.forEach(t),Meo=r(vLe," \u2014 "),JR=n(vLe,"A",{href:!0});var snt=s(JR);Eeo=r(snt,"MBartConfig"),snt.forEach(t),Ceo=r(vLe," (mBART model)"),vLe.forEach(t),weo=i(L),Xm=n(L,"LI",{});var FLe=s(Xm);Qne=n(FLe,"STRONG",{});var lnt=s(Qne);Aeo=r(lnt,"mctct"),lnt.forEach(t),Leo=r(FLe," \u2014 "),YR=n(FLe,"A",{href:!0});var int=s(YR);yeo=r(int,"MCTCTConfig"),int.forEach(t),xeo=r(FLe," (M-CTC-T model)"),FLe.forEach(t),$eo=i(L),zm=n(L,"LI",{});var TLe=s(zm);Wne=n(TLe,"STRONG",{});var dnt=s(Wne);keo=r(dnt,"megatron-bert"),dnt.forEach(t),Seo=r(TLe," \u2014 "),KR=n(TLe,"A",{href:!0});var cnt=s(KR);Reo=r(cnt,"MegatronBertConfig"),cnt.forEach(t),Peo=r(TLe," (Megatron-BERT model)"),TLe.forEach(t),Beo=i(L),Qm=n(L,"LI",{});var MLe=s(Qm);Hne=n(MLe,"STRONG",{});var fnt=s(Hne);Ieo=r(fnt,"mobilebert"),fnt.forEach(t),Neo=r(MLe," \u2014 "),ZR=n(MLe,"A",{href:!0});var mnt=s(ZR);qeo=r(mnt,"MobileBertConfig"),mnt.forEach(t),jeo=r(MLe," (MobileBERT model)"),MLe.forEach(t),Deo=i(L),Wm=n(L,"LI",{});var ELe=s(Wm);Une=n(ELe,"STRONG",{});var gnt=s(Une);Geo=r(gnt,"mobilevit"),gnt.forEach(t),Oeo=r(ELe," \u2014 "),eP=n(ELe,"A",{href:!0});var hnt=s(eP);Veo=r(hnt,"MobileViTConfig"),hnt.forEach(t),Xeo=r(ELe," (MobileViT model)"),ELe.forEach(t),zeo=i(L),Hm=n(L,"LI",{});var CLe=s(Hm);Jne=n(CLe,"STRONG",{});var pnt=s(Jne);Qeo=r(pnt,"mpnet"),pnt.forEach(t),Weo=r(CLe," \u2014 "),oP=n(CLe,"A",{href:!0});var _nt=s(oP);Heo=r(_nt,"MPNetConfig"),_nt.forEach(t),Ueo=r(CLe," (MPNet model)"),CLe.forEach(t),Jeo=i(L),Um=n(L,"LI",{});var wLe=s(Um);Yne=n(wLe,"STRONG",{});var unt=s(Yne);Yeo=r(unt,"mt5"),unt.forEach(t),Keo=r(wLe," \u2014 "),rP=n(wLe,"A",{href:!0});var bnt=s(rP);Zeo=r(bnt,"MT5Config"),bnt.forEach(t),eoo=r(wLe," (MT5 model)"),wLe.forEach(t),ooo=i(L),Jm=n(L,"LI",{});var ALe=s(Jm);Kne=n(ALe,"STRONG",{});var vnt=s(Kne);roo=r(vnt,"mvp"),vnt.forEach(t),too=r(ALe," \u2014 "),tP=n(ALe,"A",{href:!0});var Fnt=s(tP);aoo=r(Fnt,"MvpConfig"),Fnt.forEach(t),noo=r(ALe," (MVP model)"),ALe.forEach(t),soo=i(L),Ym=n(L,"LI",{});var LLe=s(Ym);Zne=n(LLe,"STRONG",{});var Tnt=s(Zne);loo=r(Tnt,"nezha"),Tnt.forEach(t),ioo=r(LLe," \u2014 "),aP=n(LLe,"A",{href:!0});var Mnt=s(aP);doo=r(Mnt,"NezhaConfig"),Mnt.forEach(t),coo=r(LLe," (Nezha model)"),LLe.forEach(t),foo=i(L),Km=n(L,"LI",{});var yLe=s(Km);ese=n(yLe,"STRONG",{});var Ent=s(ese);moo=r(Ent,"nystromformer"),Ent.forEach(t),goo=r(yLe," \u2014 "),nP=n(yLe,"A",{href:!0});var Cnt=s(nP);hoo=r(Cnt,"NystromformerConfig"),Cnt.forEach(t),poo=r(yLe," (Nystr\xF6mformer model)"),yLe.forEach(t),_oo=i(L),Zm=n(L,"LI",{});var xLe=s(Zm);ose=n(xLe,"STRONG",{});var wnt=s(ose);uoo=r(wnt,"openai-gpt"),wnt.forEach(t),boo=r(xLe," \u2014 "),sP=n(xLe,"A",{href:!0});var Ant=s(sP);voo=r(Ant,"OpenAIGPTConfig"),Ant.forEach(t),Foo=r(xLe," (OpenAI GPT model)"),xLe.forEach(t),Too=i(L),eg=n(L,"LI",{});var $Le=s(eg);rse=n($Le,"STRONG",{});var Lnt=s(rse);Moo=r(Lnt,"opt"),Lnt.forEach(t),Eoo=r($Le," \u2014 "),lP=n($Le,"A",{href:!0});var ynt=s(lP);Coo=r(ynt,"OPTConfig"),ynt.forEach(t),woo=r($Le," (OPT model)"),$Le.forEach(t),Aoo=i(L),og=n(L,"LI",{});var kLe=s(og);tse=n(kLe,"STRONG",{});var xnt=s(tse);Loo=r(xnt,"pegasus"),xnt.forEach(t),yoo=r(kLe," \u2014 "),iP=n(kLe,"A",{href:!0});var $nt=s(iP);xoo=r($nt,"PegasusConfig"),$nt.forEach(t),$oo=r(kLe," (Pegasus model)"),kLe.forEach(t),koo=i(L),rg=n(L,"LI",{});var SLe=s(rg);ase=n(SLe,"STRONG",{});var knt=s(ase);Soo=r(knt,"perceiver"),knt.forEach(t),Roo=r(SLe," \u2014 "),dP=n(SLe,"A",{href:!0});var Snt=s(dP);Poo=r(Snt,"PerceiverConfig"),Snt.forEach(t),Boo=r(SLe," (Perceiver model)"),SLe.forEach(t),Ioo=i(L),tg=n(L,"LI",{});var RLe=s(tg);nse=n(RLe,"STRONG",{});var Rnt=s(nse);Noo=r(Rnt,"plbart"),Rnt.forEach(t),qoo=r(RLe," \u2014 "),cP=n(RLe,"A",{href:!0});var Pnt=s(cP);joo=r(Pnt,"PLBartConfig"),Pnt.forEach(t),Doo=r(RLe," (PLBart model)"),RLe.forEach(t),Goo=i(L),ag=n(L,"LI",{});var PLe=s(ag);sse=n(PLe,"STRONG",{});var Bnt=s(sse);Ooo=r(Bnt,"poolformer"),Bnt.forEach(t),Voo=r(PLe," \u2014 "),fP=n(PLe,"A",{href:!0});var Int=s(fP);Xoo=r(Int,"PoolFormerConfig"),Int.forEach(t),zoo=r(PLe," (PoolFormer model)"),PLe.forEach(t),Qoo=i(L),ng=n(L,"LI",{});var BLe=s(ng);lse=n(BLe,"STRONG",{});var Nnt=s(lse);Woo=r(Nnt,"prophetnet"),Nnt.forEach(t),Hoo=r(BLe," \u2014 "),mP=n(BLe,"A",{href:!0});var qnt=s(mP);Uoo=r(qnt,"ProphetNetConfig"),qnt.forEach(t),Joo=r(BLe," (ProphetNet model)"),BLe.forEach(t),Yoo=i(L),sg=n(L,"LI",{});var ILe=s(sg);ise=n(ILe,"STRONG",{});var jnt=s(ise);Koo=r(jnt,"qdqbert"),jnt.forEach(t),Zoo=r(ILe," \u2014 "),gP=n(ILe,"A",{href:!0});var Dnt=s(gP);ero=r(Dnt,"QDQBertConfig"),Dnt.forEach(t),oro=r(ILe," (QDQBert model)"),ILe.forEach(t),rro=i(L),lg=n(L,"LI",{});var NLe=s(lg);dse=n(NLe,"STRONG",{});var Gnt=s(dse);tro=r(Gnt,"rag"),Gnt.forEach(t),aro=r(NLe," \u2014 "),hP=n(NLe,"A",{href:!0});var Ont=s(hP);nro=r(Ont,"RagConfig"),Ont.forEach(t),sro=r(NLe," (RAG model)"),NLe.forEach(t),lro=i(L),ig=n(L,"LI",{});var qLe=s(ig);cse=n(qLe,"STRONG",{});var Vnt=s(cse);iro=r(Vnt,"realm"),Vnt.forEach(t),dro=r(qLe," \u2014 "),pP=n(qLe,"A",{href:!0});var Xnt=s(pP);cro=r(Xnt,"RealmConfig"),Xnt.forEach(t),fro=r(qLe," (REALM model)"),qLe.forEach(t),mro=i(L),dg=n(L,"LI",{});var jLe=s(dg);fse=n(jLe,"STRONG",{});var znt=s(fse);gro=r(znt,"reformer"),znt.forEach(t),hro=r(jLe," \u2014 "),_P=n(jLe,"A",{href:!0});var Qnt=s(_P);pro=r(Qnt,"ReformerConfig"),Qnt.forEach(t),_ro=r(jLe," (Reformer model)"),jLe.forEach(t),uro=i(L),cg=n(L,"LI",{});var DLe=s(cg);mse=n(DLe,"STRONG",{});var Wnt=s(mse);bro=r(Wnt,"regnet"),Wnt.forEach(t),vro=r(DLe," \u2014 "),uP=n(DLe,"A",{href:!0});var Hnt=s(uP);Fro=r(Hnt,"RegNetConfig"),Hnt.forEach(t),Tro=r(DLe," (RegNet model)"),DLe.forEach(t),Mro=i(L),fg=n(L,"LI",{});var GLe=s(fg);gse=n(GLe,"STRONG",{});var Unt=s(gse);Ero=r(Unt,"rembert"),Unt.forEach(t),Cro=r(GLe," \u2014 "),bP=n(GLe,"A",{href:!0});var Jnt=s(bP);wro=r(Jnt,"RemBertConfig"),Jnt.forEach(t),Aro=r(GLe," (RemBERT model)"),GLe.forEach(t),Lro=i(L),mg=n(L,"LI",{});var OLe=s(mg);hse=n(OLe,"STRONG",{});var Ynt=s(hse);yro=r(Ynt,"resnet"),Ynt.forEach(t),xro=r(OLe," \u2014 "),vP=n(OLe,"A",{href:!0});var Knt=s(vP);$ro=r(Knt,"ResNetConfig"),Knt.forEach(t),kro=r(OLe," (ResNet model)"),OLe.forEach(t),Sro=i(L),gg=n(L,"LI",{});var VLe=s(gg);pse=n(VLe,"STRONG",{});var Znt=s(pse);Rro=r(Znt,"retribert"),Znt.forEach(t),Pro=r(VLe," \u2014 "),FP=n(VLe,"A",{href:!0});var est=s(FP);Bro=r(est,"RetriBertConfig"),est.forEach(t),Iro=r(VLe," (RetriBERT model)"),VLe.forEach(t),Nro=i(L),hg=n(L,"LI",{});var XLe=s(hg);_se=n(XLe,"STRONG",{});var ost=s(_se);qro=r(ost,"roberta"),ost.forEach(t),jro=r(XLe," \u2014 "),TP=n(XLe,"A",{href:!0});var rst=s(TP);Dro=r(rst,"RobertaConfig"),rst.forEach(t),Gro=r(XLe," (RoBERTa model)"),XLe.forEach(t),Oro=i(L),pg=n(L,"LI",{});var zLe=s(pg);use=n(zLe,"STRONG",{});var tst=s(use);Vro=r(tst,"roformer"),tst.forEach(t),Xro=r(zLe," \u2014 "),MP=n(zLe,"A",{href:!0});var ast=s(MP);zro=r(ast,"RoFormerConfig"),ast.forEach(t),Qro=r(zLe," (RoFormer model)"),zLe.forEach(t),Wro=i(L),_g=n(L,"LI",{});var QLe=s(_g);bse=n(QLe,"STRONG",{});var nst=s(bse);Hro=r(nst,"segformer"),nst.forEach(t),Uro=r(QLe," \u2014 "),EP=n(QLe,"A",{href:!0});var sst=s(EP);Jro=r(sst,"SegformerConfig"),sst.forEach(t),Yro=r(QLe," (SegFormer model)"),QLe.forEach(t),Kro=i(L),ug=n(L,"LI",{});var WLe=s(ug);vse=n(WLe,"STRONG",{});var lst=s(vse);Zro=r(lst,"sew"),lst.forEach(t),eto=r(WLe," \u2014 "),CP=n(WLe,"A",{href:!0});var ist=s(CP);oto=r(ist,"SEWConfig"),ist.forEach(t),rto=r(WLe," (SEW model)"),WLe.forEach(t),tto=i(L),bg=n(L,"LI",{});var HLe=s(bg);Fse=n(HLe,"STRONG",{});var dst=s(Fse);ato=r(dst,"sew-d"),dst.forEach(t),nto=r(HLe," \u2014 "),wP=n(HLe,"A",{href:!0});var cst=s(wP);sto=r(cst,"SEWDConfig"),cst.forEach(t),lto=r(HLe," (SEW-D model)"),HLe.forEach(t),ito=i(L),vg=n(L,"LI",{});var ULe=s(vg);Tse=n(ULe,"STRONG",{});var fst=s(Tse);dto=r(fst,"speech-encoder-decoder"),fst.forEach(t),cto=r(ULe," \u2014 "),AP=n(ULe,"A",{href:!0});var mst=s(AP);fto=r(mst,"SpeechEncoderDecoderConfig"),mst.forEach(t),mto=r(ULe," (Speech Encoder decoder model)"),ULe.forEach(t),gto=i(L),Fg=n(L,"LI",{});var JLe=s(Fg);Mse=n(JLe,"STRONG",{});var gst=s(Mse);hto=r(gst,"speech_to_text"),gst.forEach(t),pto=r(JLe," \u2014 "),LP=n(JLe,"A",{href:!0});var hst=s(LP);_to=r(hst,"Speech2TextConfig"),hst.forEach(t),uto=r(JLe," (Speech2Text model)"),JLe.forEach(t),bto=i(L),Tg=n(L,"LI",{});var YLe=s(Tg);Ese=n(YLe,"STRONG",{});var pst=s(Ese);vto=r(pst,"speech_to_text_2"),pst.forEach(t),Fto=r(YLe," \u2014 "),yP=n(YLe,"A",{href:!0});var _st=s(yP);Tto=r(_st,"Speech2Text2Config"),_st.forEach(t),Mto=r(YLe," (Speech2Text2 model)"),YLe.forEach(t),Eto=i(L),Mg=n(L,"LI",{});var KLe=s(Mg);Cse=n(KLe,"STRONG",{});var ust=s(Cse);Cto=r(ust,"splinter"),ust.forEach(t),wto=r(KLe," \u2014 "),xP=n(KLe,"A",{href:!0});var bst=s(xP);Ato=r(bst,"SplinterConfig"),bst.forEach(t),Lto=r(KLe," (Splinter model)"),KLe.forEach(t),yto=i(L),Eg=n(L,"LI",{});var ZLe=s(Eg);wse=n(ZLe,"STRONG",{});var vst=s(wse);xto=r(vst,"squeezebert"),vst.forEach(t),$to=r(ZLe," \u2014 "),$P=n(ZLe,"A",{href:!0});var Fst=s($P);kto=r(Fst,"SqueezeBertConfig"),Fst.forEach(t),Sto=r(ZLe," (SqueezeBERT model)"),ZLe.forEach(t),Rto=i(L),Cg=n(L,"LI",{});var eye=s(Cg);Ase=n(eye,"STRONG",{});var Tst=s(Ase);Pto=r(Tst,"swin"),Tst.forEach(t),Bto=r(eye," \u2014 "),kP=n(eye,"A",{href:!0});var Mst=s(kP);Ito=r(Mst,"SwinConfig"),Mst.forEach(t),Nto=r(eye," (Swin Transformer model)"),eye.forEach(t),qto=i(L),wg=n(L,"LI",{});var oye=s(wg);Lse=n(oye,"STRONG",{});var Est=s(Lse);jto=r(Est,"swinv2"),Est.forEach(t),Dto=r(oye," \u2014 "),SP=n(oye,"A",{href:!0});var Cst=s(SP);Gto=r(Cst,"Swinv2Config"),Cst.forEach(t),Oto=r(oye," (Swin Transformer V2 model)"),oye.forEach(t),Vto=i(L),Ag=n(L,"LI",{});var rye=s(Ag);yse=n(rye,"STRONG",{});var wst=s(yse);Xto=r(wst,"t5"),wst.forEach(t),zto=r(rye," \u2014 "),RP=n(rye,"A",{href:!0});var Ast=s(RP);Qto=r(Ast,"T5Config"),Ast.forEach(t),Wto=r(rye," (T5 model)"),rye.forEach(t),Hto=i(L),Lg=n(L,"LI",{});var tye=s(Lg);xse=n(tye,"STRONG",{});var Lst=s(xse);Uto=r(Lst,"tapas"),Lst.forEach(t),Jto=r(tye," \u2014 "),PP=n(tye,"A",{href:!0});var yst=s(PP);Yto=r(yst,"TapasConfig"),yst.forEach(t),Kto=r(tye," (TAPAS model)"),tye.forEach(t),Zto=i(L),yg=n(L,"LI",{});var aye=s(yg);$se=n(aye,"STRONG",{});var xst=s($se);eao=r(xst,"trajectory_transformer"),xst.forEach(t),oao=r(aye," \u2014 "),BP=n(aye,"A",{href:!0});var $st=s(BP);rao=r($st,"TrajectoryTransformerConfig"),$st.forEach(t),tao=r(aye," (Trajectory Transformer model)"),aye.forEach(t),aao=i(L),xg=n(L,"LI",{});var nye=s(xg);kse=n(nye,"STRONG",{});var kst=s(kse);nao=r(kst,"transfo-xl"),kst.forEach(t),sao=r(nye," \u2014 "),IP=n(nye,"A",{href:!0});var Sst=s(IP);lao=r(Sst,"TransfoXLConfig"),Sst.forEach(t),iao=r(nye," (Transformer-XL model)"),nye.forEach(t),dao=i(L),$g=n(L,"LI",{});var sye=s($g);Sse=n(sye,"STRONG",{});var Rst=s(Sse);cao=r(Rst,"trocr"),Rst.forEach(t),fao=r(sye," \u2014 "),NP=n(sye,"A",{href:!0});var Pst=s(NP);mao=r(Pst,"TrOCRConfig"),Pst.forEach(t),gao=r(sye," (TrOCR model)"),sye.forEach(t),hao=i(L),kg=n(L,"LI",{});var lye=s(kg);Rse=n(lye,"STRONG",{});var Bst=s(Rse);pao=r(Bst,"unispeech"),Bst.forEach(t),_ao=r(lye," \u2014 "),qP=n(lye,"A",{href:!0});var Ist=s(qP);uao=r(Ist,"UniSpeechConfig"),Ist.forEach(t),bao=r(lye," (UniSpeech model)"),lye.forEach(t),vao=i(L),Sg=n(L,"LI",{});var iye=s(Sg);Pse=n(iye,"STRONG",{});var Nst=s(Pse);Fao=r(Nst,"unispeech-sat"),Nst.forEach(t),Tao=r(iye," \u2014 "),jP=n(iye,"A",{href:!0});var qst=s(jP);Mao=r(qst,"UniSpeechSatConfig"),qst.forEach(t),Eao=r(iye," (UniSpeechSat model)"),iye.forEach(t),Cao=i(L),Rg=n(L,"LI",{});var dye=s(Rg);Bse=n(dye,"STRONG",{});var jst=s(Bse);wao=r(jst,"van"),jst.forEach(t),Aao=r(dye," \u2014 "),DP=n(dye,"A",{href:!0});var Dst=s(DP);Lao=r(Dst,"VanConfig"),Dst.forEach(t),yao=r(dye," (VAN model)"),dye.forEach(t),xao=i(L),Pg=n(L,"LI",{});var cye=s(Pg);Ise=n(cye,"STRONG",{});var Gst=s(Ise);$ao=r(Gst,"vilt"),Gst.forEach(t),kao=r(cye," \u2014 "),GP=n(cye,"A",{href:!0});var Ost=s(GP);Sao=r(Ost,"ViltConfig"),Ost.forEach(t),Rao=r(cye," (ViLT model)"),cye.forEach(t),Pao=i(L),Bg=n(L,"LI",{});var fye=s(Bg);Nse=n(fye,"STRONG",{});var Vst=s(Nse);Bao=r(Vst,"vision-encoder-decoder"),Vst.forEach(t),Iao=r(fye," \u2014 "),OP=n(fye,"A",{href:!0});var Xst=s(OP);Nao=r(Xst,"VisionEncoderDecoderConfig"),Xst.forEach(t),qao=r(fye," (Vision Encoder decoder model)"),fye.forEach(t),jao=i(L),Ig=n(L,"LI",{});var mye=s(Ig);qse=n(mye,"STRONG",{});var zst=s(qse);Dao=r(zst,"vision-text-dual-encoder"),zst.forEach(t),Gao=r(mye," \u2014 "),VP=n(mye,"A",{href:!0});var Qst=s(VP);Oao=r(Qst,"VisionTextDualEncoderConfig"),Qst.forEach(t),Vao=r(mye," (VisionTextDualEncoder model)"),mye.forEach(t),Xao=i(L),Ng=n(L,"LI",{});var gye=s(Ng);jse=n(gye,"STRONG",{});var Wst=s(jse);zao=r(Wst,"visual_bert"),Wst.forEach(t),Qao=r(gye," \u2014 "),XP=n(gye,"A",{href:!0});var Hst=s(XP);Wao=r(Hst,"VisualBertConfig"),Hst.forEach(t),Hao=r(gye," (VisualBERT model)"),gye.forEach(t),Uao=i(L),qg=n(L,"LI",{});var hye=s(qg);Dse=n(hye,"STRONG",{});var Ust=s(Dse);Jao=r(Ust,"vit"),Ust.forEach(t),Yao=r(hye," \u2014 "),zP=n(hye,"A",{href:!0});var Jst=s(zP);Kao=r(Jst,"ViTConfig"),Jst.forEach(t),Zao=r(hye," (ViT model)"),hye.forEach(t),eno=i(L),jg=n(L,"LI",{});var pye=s(jg);Gse=n(pye,"STRONG",{});var Yst=s(Gse);ono=r(Yst,"vit_mae"),Yst.forEach(t),rno=r(pye," \u2014 "),QP=n(pye,"A",{href:!0});var Kst=s(QP);tno=r(Kst,"ViTMAEConfig"),Kst.forEach(t),ano=r(pye," (ViTMAE model)"),pye.forEach(t),nno=i(L),Dg=n(L,"LI",{});var _ye=s(Dg);Ose=n(_ye,"STRONG",{});var Zst=s(Ose);sno=r(Zst,"wav2vec2"),Zst.forEach(t),lno=r(_ye," \u2014 "),WP=n(_ye,"A",{href:!0});var elt=s(WP);ino=r(elt,"Wav2Vec2Config"),elt.forEach(t),dno=r(_ye," (Wav2Vec2 model)"),_ye.forEach(t),cno=i(L),Gg=n(L,"LI",{});var uye=s(Gg);Vse=n(uye,"STRONG",{});var olt=s(Vse);fno=r(olt,"wav2vec2-conformer"),olt.forEach(t),mno=r(uye," \u2014 "),HP=n(uye,"A",{href:!0});var rlt=s(HP);gno=r(rlt,"Wav2Vec2ConformerConfig"),rlt.forEach(t),hno=r(uye," (Wav2Vec2-Conformer model)"),uye.forEach(t),pno=i(L),Og=n(L,"LI",{});var bye=s(Og);Xse=n(bye,"STRONG",{});var tlt=s(Xse);_no=r(tlt,"wavlm"),tlt.forEach(t),uno=r(bye," \u2014 "),UP=n(bye,"A",{href:!0});var alt=s(UP);bno=r(alt,"WavLMConfig"),alt.forEach(t),vno=r(bye," (WavLM model)"),bye.forEach(t),Fno=i(L),Vg=n(L,"LI",{});var vye=s(Vg);zse=n(vye,"STRONG",{});var nlt=s(zse);Tno=r(nlt,"xglm"),nlt.forEach(t),Mno=r(vye," \u2014 "),JP=n(vye,"A",{href:!0});var slt=s(JP);Eno=r(slt,"XGLMConfig"),slt.forEach(t),Cno=r(vye," (XGLM model)"),vye.forEach(t),wno=i(L),Xg=n(L,"LI",{});var Fye=s(Xg);Qse=n(Fye,"STRONG",{});var llt=s(Qse);Ano=r(llt,"xlm"),llt.forEach(t),Lno=r(Fye," \u2014 "),YP=n(Fye,"A",{href:!0});var ilt=s(YP);yno=r(ilt,"XLMConfig"),ilt.forEach(t),xno=r(Fye," (XLM model)"),Fye.forEach(t),$no=i(L),zg=n(L,"LI",{});var Tye=s(zg);Wse=n(Tye,"STRONG",{});var dlt=s(Wse);kno=r(dlt,"xlm-prophetnet"),dlt.forEach(t),Sno=r(Tye," \u2014 "),KP=n(Tye,"A",{href:!0});var clt=s(KP);Rno=r(clt,"XLMProphetNetConfig"),clt.forEach(t),Pno=r(Tye," (XLM-ProphetNet model)"),Tye.forEach(t),Bno=i(L),Qg=n(L,"LI",{});var Mye=s(Qg);Hse=n(Mye,"STRONG",{});var flt=s(Hse);Ino=r(flt,"xlm-roberta"),flt.forEach(t),Nno=r(Mye," \u2014 "),ZP=n(Mye,"A",{href:!0});var mlt=s(ZP);qno=r(mlt,"XLMRobertaConfig"),mlt.forEach(t),jno=r(Mye," (XLM-RoBERTa model)"),Mye.forEach(t),Dno=i(L),Wg=n(L,"LI",{});var Eye=s(Wg);Use=n(Eye,"STRONG",{});var glt=s(Use);Gno=r(glt,"xlm-roberta-xl"),glt.forEach(t),Ono=r(Eye," \u2014 "),eB=n(Eye,"A",{href:!0});var hlt=s(eB);Vno=r(hlt,"XLMRobertaXLConfig"),hlt.forEach(t),Xno=r(Eye," (XLM-RoBERTa-XL model)"),Eye.forEach(t),zno=i(L),Hg=n(L,"LI",{});var Cye=s(Hg);Jse=n(Cye,"STRONG",{});var plt=s(Jse);Qno=r(plt,"xlnet"),plt.forEach(t),Wno=r(Cye," \u2014 "),oB=n(Cye,"A",{href:!0});var _lt=s(oB);Hno=r(_lt,"XLNetConfig"),_lt.forEach(t),Uno=r(Cye," (XLNet model)"),Cye.forEach(t),Jno=i(L),Ug=n(L,"LI",{});var wye=s(Ug);Yse=n(wye,"STRONG",{});var ult=s(Yse);Yno=r(ult,"yolos"),ult.forEach(t),Kno=r(wye," \u2014 "),rB=n(wye,"A",{href:!0});var blt=s(rB);Zno=r(blt,"YolosConfig"),blt.forEach(t),eso=r(wye," (YOLOS model)"),wye.forEach(t),oso=i(L),Jg=n(L,"LI",{});var Aye=s(Jg);Kse=n(Aye,"STRONG",{});var vlt=s(Kse);rso=r(vlt,"yoso"),vlt.forEach(t),tso=r(Aye," \u2014 "),tB=n(Aye,"A",{href:!0});var Flt=s(tB);aso=r(Flt,"YosoConfig"),Flt.forEach(t),nso=r(Aye," (YOSO model)"),Aye.forEach(t),L.forEach(t),sso=i(st),T(Yg.$$.fragment,st),st.forEach(t),lso=i(nt),Kg=n(nt,"DIV",{class:!0});var MQe=s(Kg);T(uL.$$.fragment,MQe),iso=i(MQe),Zse=n(MQe,"P",{});var Tlt=s(Zse);dso=r(Tlt,"Register a new configuration for this class."),Tlt.forEach(t),MQe.forEach(t),nt.forEach(t),EXe=i(f),Ni=n(f,"H2",{class:!0});var EQe=s(Ni);Zg=n(EQe,"A",{id:!0,class:!0,href:!0});var Mlt=s(Zg);ele=n(Mlt,"SPAN",{});var Elt=s(ele);T(bL.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),cso=i(EQe),ole=n(EQe,"SPAN",{});var Clt=s(ole);fso=r(Clt,"AutoTokenizer"),Clt.forEach(t),EQe.forEach(t),CXe=i(f),Lo=n(f,"DIV",{class:!0});var Ks=s(Lo);T(vL.$$.fragment,Ks),mso=i(Ks),FL=n(Ks,"P",{});var CQe=s(FL);gso=r(CQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),aB=n(CQe,"A",{href:!0});var wlt=s(aB);hso=r(wlt,"AutoTokenizer.from_pretrained()"),wlt.forEach(t),pso=r(CQe," class method."),CQe.forEach(t),_so=i(Ks),TL=n(Ks,"P",{});var wQe=s(TL);uso=r(wQe,"This class cannot be instantiated directly using "),rle=n(wQe,"CODE",{});var Alt=s(rle);bso=r(Alt,"__init__()"),Alt.forEach(t),vso=r(wQe," (throws an error)."),wQe.forEach(t),Fso=i(Ks),yr=n(Ks,"DIV",{class:!0});var Zs=s(yr);T(ML.$$.fragment,Zs),Tso=i(Zs),tle=n(Zs,"P",{});var Llt=s(tle);Mso=r(Llt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Llt.forEach(t),Eso=i(Zs),Pa=n(Zs,"P",{});var fw=s(Pa);Cso=r(fw,"The tokenizer class to instantiate is selected based on the "),ale=n(fw,"CODE",{});var ylt=s(ale);wso=r(ylt,"model_type"),ylt.forEach(t),Aso=r(fw,` property of the config object (either
passed as an argument or loaded from `),nle=n(fw,"CODE",{});var xlt=s(nle);Lso=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),yso=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=n(fw,"CODE",{});var $lt=s(sle);xso=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),$so=r(fw,":"),fw.forEach(t),kso=i(Zs),k=n(Zs,"UL",{});var S=s(k);Dn=n(S,"LI",{});var yk=s(Dn);lle=n(yk,"STRONG",{});var klt=s(lle);Sso=r(klt,"albert"),klt.forEach(t),Rso=r(yk," \u2014 "),nB=n(yk,"A",{href:!0});var Slt=s(nB);Pso=r(Slt,"AlbertTokenizer"),Slt.forEach(t),Bso=r(yk," or "),sB=n(yk,"A",{href:!0});var Rlt=s(sB);Iso=r(Rlt,"AlbertTokenizerFast"),Rlt.forEach(t),Nso=r(yk," (ALBERT model)"),yk.forEach(t),qso=i(S),Gn=n(S,"LI",{});var xk=s(Gn);ile=n(xk,"STRONG",{});var Plt=s(ile);jso=r(Plt,"bart"),Plt.forEach(t),Dso=r(xk," \u2014 "),lB=n(xk,"A",{href:!0});var Blt=s(lB);Gso=r(Blt,"BartTokenizer"),Blt.forEach(t),Oso=r(xk," or "),iB=n(xk,"A",{href:!0});var Ilt=s(iB);Vso=r(Ilt,"BartTokenizerFast"),Ilt.forEach(t),Xso=r(xk," (BART model)"),xk.forEach(t),zso=i(S),On=n(S,"LI",{});var $k=s(On);dle=n($k,"STRONG",{});var Nlt=s(dle);Qso=r(Nlt,"barthez"),Nlt.forEach(t),Wso=r($k," \u2014 "),dB=n($k,"A",{href:!0});var qlt=s(dB);Hso=r(qlt,"BarthezTokenizer"),qlt.forEach(t),Uso=r($k," or "),cB=n($k,"A",{href:!0});var jlt=s(cB);Jso=r(jlt,"BarthezTokenizerFast"),jlt.forEach(t),Yso=r($k," (BARThez model)"),$k.forEach(t),Kso=i(S),eh=n(S,"LI",{});var Lye=s(eh);cle=n(Lye,"STRONG",{});var Dlt=s(cle);Zso=r(Dlt,"bartpho"),Dlt.forEach(t),elo=r(Lye," \u2014 "),fB=n(Lye,"A",{href:!0});var Glt=s(fB);olo=r(Glt,"BartphoTokenizer"),Glt.forEach(t),rlo=r(Lye," (BARTpho model)"),Lye.forEach(t),tlo=i(S),Vn=n(S,"LI",{});var kk=s(Vn);fle=n(kk,"STRONG",{});var Olt=s(fle);alo=r(Olt,"bert"),Olt.forEach(t),nlo=r(kk," \u2014 "),mB=n(kk,"A",{href:!0});var Vlt=s(mB);slo=r(Vlt,"BertTokenizer"),Vlt.forEach(t),llo=r(kk," or "),gB=n(kk,"A",{href:!0});var Xlt=s(gB);ilo=r(Xlt,"BertTokenizerFast"),Xlt.forEach(t),dlo=r(kk," (BERT model)"),kk.forEach(t),clo=i(S),oh=n(S,"LI",{});var yye=s(oh);mle=n(yye,"STRONG",{});var zlt=s(mle);flo=r(zlt,"bert-generation"),zlt.forEach(t),mlo=r(yye," \u2014 "),hB=n(yye,"A",{href:!0});var Qlt=s(hB);glo=r(Qlt,"BertGenerationTokenizer"),Qlt.forEach(t),hlo=r(yye," (Bert Generation model)"),yye.forEach(t),plo=i(S),rh=n(S,"LI",{});var xye=s(rh);gle=n(xye,"STRONG",{});var Wlt=s(gle);_lo=r(Wlt,"bert-japanese"),Wlt.forEach(t),ulo=r(xye," \u2014 "),pB=n(xye,"A",{href:!0});var Hlt=s(pB);blo=r(Hlt,"BertJapaneseTokenizer"),Hlt.forEach(t),vlo=r(xye," (BertJapanese model)"),xye.forEach(t),Flo=i(S),th=n(S,"LI",{});var $ye=s(th);hle=n($ye,"STRONG",{});var Ult=s(hle);Tlo=r(Ult,"bertweet"),Ult.forEach(t),Mlo=r($ye," \u2014 "),_B=n($ye,"A",{href:!0});var Jlt=s(_B);Elo=r(Jlt,"BertweetTokenizer"),Jlt.forEach(t),Clo=r($ye," (BERTweet model)"),$ye.forEach(t),wlo=i(S),Xn=n(S,"LI",{});var Sk=s(Xn);ple=n(Sk,"STRONG",{});var Ylt=s(ple);Alo=r(Ylt,"big_bird"),Ylt.forEach(t),Llo=r(Sk," \u2014 "),uB=n(Sk,"A",{href:!0});var Klt=s(uB);ylo=r(Klt,"BigBirdTokenizer"),Klt.forEach(t),xlo=r(Sk," or "),bB=n(Sk,"A",{href:!0});var Zlt=s(bB);$lo=r(Zlt,"BigBirdTokenizerFast"),Zlt.forEach(t),klo=r(Sk," (BigBird model)"),Sk.forEach(t),Slo=i(S),zn=n(S,"LI",{});var Rk=s(zn);_le=n(Rk,"STRONG",{});var eit=s(_le);Rlo=r(eit,"bigbird_pegasus"),eit.forEach(t),Plo=r(Rk," \u2014 "),vB=n(Rk,"A",{href:!0});var oit=s(vB);Blo=r(oit,"PegasusTokenizer"),oit.forEach(t),Ilo=r(Rk," or "),FB=n(Rk,"A",{href:!0});var rit=s(FB);Nlo=r(rit,"PegasusTokenizerFast"),rit.forEach(t),qlo=r(Rk," (BigBird-Pegasus model)"),Rk.forEach(t),jlo=i(S),Qn=n(S,"LI",{});var Pk=s(Qn);ule=n(Pk,"STRONG",{});var tit=s(ule);Dlo=r(tit,"blenderbot"),tit.forEach(t),Glo=r(Pk," \u2014 "),TB=n(Pk,"A",{href:!0});var ait=s(TB);Olo=r(ait,"BlenderbotTokenizer"),ait.forEach(t),Vlo=r(Pk," or "),MB=n(Pk,"A",{href:!0});var nit=s(MB);Xlo=r(nit,"BlenderbotTokenizerFast"),nit.forEach(t),zlo=r(Pk," (Blenderbot model)"),Pk.forEach(t),Qlo=i(S),ah=n(S,"LI",{});var kye=s(ah);ble=n(kye,"STRONG",{});var sit=s(ble);Wlo=r(sit,"blenderbot-small"),sit.forEach(t),Hlo=r(kye," \u2014 "),EB=n(kye,"A",{href:!0});var lit=s(EB);Ulo=r(lit,"BlenderbotSmallTokenizer"),lit.forEach(t),Jlo=r(kye," (BlenderbotSmall model)"),kye.forEach(t),Ylo=i(S),nh=n(S,"LI",{});var Sye=s(nh);vle=n(Sye,"STRONG",{});var iit=s(vle);Klo=r(iit,"bloom"),iit.forEach(t),Zlo=r(Sye," \u2014 "),CB=n(Sye,"A",{href:!0});var dit=s(CB);eio=r(dit,"BloomTokenizerFast"),dit.forEach(t),oio=r(Sye," (BLOOM model)"),Sye.forEach(t),rio=i(S),sh=n(S,"LI",{});var Rye=s(sh);Fle=n(Rye,"STRONG",{});var cit=s(Fle);tio=r(cit,"byt5"),cit.forEach(t),aio=r(Rye," \u2014 "),wB=n(Rye,"A",{href:!0});var fit=s(wB);nio=r(fit,"ByT5Tokenizer"),fit.forEach(t),sio=r(Rye," (ByT5 model)"),Rye.forEach(t),lio=i(S),Wn=n(S,"LI",{});var Bk=s(Wn);Tle=n(Bk,"STRONG",{});var mit=s(Tle);iio=r(mit,"camembert"),mit.forEach(t),dio=r(Bk," \u2014 "),AB=n(Bk,"A",{href:!0});var git=s(AB);cio=r(git,"CamembertTokenizer"),git.forEach(t),fio=r(Bk," or "),LB=n(Bk,"A",{href:!0});var hit=s(LB);mio=r(hit,"CamembertTokenizerFast"),hit.forEach(t),gio=r(Bk," (CamemBERT model)"),Bk.forEach(t),hio=i(S),lh=n(S,"LI",{});var Pye=s(lh);Mle=n(Pye,"STRONG",{});var pit=s(Mle);pio=r(pit,"canine"),pit.forEach(t),_io=r(Pye," \u2014 "),yB=n(Pye,"A",{href:!0});var _it=s(yB);uio=r(_it,"CanineTokenizer"),_it.forEach(t),bio=r(Pye," (CANINE model)"),Pye.forEach(t),vio=i(S),Hn=n(S,"LI",{});var Ik=s(Hn);Ele=n(Ik,"STRONG",{});var uit=s(Ele);Fio=r(uit,"clip"),uit.forEach(t),Tio=r(Ik," \u2014 "),xB=n(Ik,"A",{href:!0});var bit=s(xB);Mio=r(bit,"CLIPTokenizer"),bit.forEach(t),Eio=r(Ik," or "),$B=n(Ik,"A",{href:!0});var vit=s($B);Cio=r(vit,"CLIPTokenizerFast"),vit.forEach(t),wio=r(Ik," (CLIP model)"),Ik.forEach(t),Aio=i(S),Un=n(S,"LI",{});var Nk=s(Un);Cle=n(Nk,"STRONG",{});var Fit=s(Cle);Lio=r(Fit,"codegen"),Fit.forEach(t),yio=r(Nk," \u2014 "),kB=n(Nk,"A",{href:!0});var Tit=s(kB);xio=r(Tit,"CodeGenTokenizer"),Tit.forEach(t),$io=r(Nk," or "),SB=n(Nk,"A",{href:!0});var Mit=s(SB);kio=r(Mit,"CodeGenTokenizerFast"),Mit.forEach(t),Sio=r(Nk," (CodeGen model)"),Nk.forEach(t),Rio=i(S),Jn=n(S,"LI",{});var qk=s(Jn);wle=n(qk,"STRONG",{});var Eit=s(wle);Pio=r(Eit,"convbert"),Eit.forEach(t),Bio=r(qk," \u2014 "),RB=n(qk,"A",{href:!0});var Cit=s(RB);Iio=r(Cit,"ConvBertTokenizer"),Cit.forEach(t),Nio=r(qk," or "),PB=n(qk,"A",{href:!0});var wit=s(PB);qio=r(wit,"ConvBertTokenizerFast"),wit.forEach(t),jio=r(qk," (ConvBERT model)"),qk.forEach(t),Dio=i(S),Yn=n(S,"LI",{});var jk=s(Yn);Ale=n(jk,"STRONG",{});var Ait=s(Ale);Gio=r(Ait,"cpm"),Ait.forEach(t),Oio=r(jk," \u2014 "),BB=n(jk,"A",{href:!0});var Lit=s(BB);Vio=r(Lit,"CpmTokenizer"),Lit.forEach(t),Xio=r(jk," or "),IB=n(jk,"A",{href:!0});var yit=s(IB);zio=r(yit,"CpmTokenizerFast"),yit.forEach(t),Qio=r(jk," (CPM model)"),jk.forEach(t),Wio=i(S),ih=n(S,"LI",{});var Bye=s(ih);Lle=n(Bye,"STRONG",{});var xit=s(Lle);Hio=r(xit,"ctrl"),xit.forEach(t),Uio=r(Bye," \u2014 "),NB=n(Bye,"A",{href:!0});var $it=s(NB);Jio=r($it,"CTRLTokenizer"),$it.forEach(t),Yio=r(Bye," (CTRL model)"),Bye.forEach(t),Kio=i(S),Kn=n(S,"LI",{});var Dk=s(Kn);yle=n(Dk,"STRONG",{});var kit=s(yle);Zio=r(kit,"data2vec-text"),kit.forEach(t),edo=r(Dk," \u2014 "),qB=n(Dk,"A",{href:!0});var Sit=s(qB);odo=r(Sit,"RobertaTokenizer"),Sit.forEach(t),rdo=r(Dk," or "),jB=n(Dk,"A",{href:!0});var Rit=s(jB);tdo=r(Rit,"RobertaTokenizerFast"),Rit.forEach(t),ado=r(Dk," (Data2VecText model)"),Dk.forEach(t),ndo=i(S),Zn=n(S,"LI",{});var Gk=s(Zn);xle=n(Gk,"STRONG",{});var Pit=s(xle);sdo=r(Pit,"deberta"),Pit.forEach(t),ldo=r(Gk," \u2014 "),DB=n(Gk,"A",{href:!0});var Bit=s(DB);ido=r(Bit,"DebertaTokenizer"),Bit.forEach(t),ddo=r(Gk," or "),GB=n(Gk,"A",{href:!0});var Iit=s(GB);cdo=r(Iit,"DebertaTokenizerFast"),Iit.forEach(t),fdo=r(Gk," (DeBERTa model)"),Gk.forEach(t),mdo=i(S),es=n(S,"LI",{});var Ok=s(es);$le=n(Ok,"STRONG",{});var Nit=s($le);gdo=r(Nit,"deberta-v2"),Nit.forEach(t),hdo=r(Ok," \u2014 "),OB=n(Ok,"A",{href:!0});var qit=s(OB);pdo=r(qit,"DebertaV2Tokenizer"),qit.forEach(t),_do=r(Ok," or "),VB=n(Ok,"A",{href:!0});var jit=s(VB);udo=r(jit,"DebertaV2TokenizerFast"),jit.forEach(t),bdo=r(Ok," (DeBERTa-v2 model)"),Ok.forEach(t),vdo=i(S),os=n(S,"LI",{});var Vk=s(os);kle=n(Vk,"STRONG",{});var Dit=s(kle);Fdo=r(Dit,"distilbert"),Dit.forEach(t),Tdo=r(Vk," \u2014 "),XB=n(Vk,"A",{href:!0});var Git=s(XB);Mdo=r(Git,"DistilBertTokenizer"),Git.forEach(t),Edo=r(Vk," or "),zB=n(Vk,"A",{href:!0});var Oit=s(zB);Cdo=r(Oit,"DistilBertTokenizerFast"),Oit.forEach(t),wdo=r(Vk," (DistilBERT model)"),Vk.forEach(t),Ado=i(S),rs=n(S,"LI",{});var Xk=s(rs);Sle=n(Xk,"STRONG",{});var Vit=s(Sle);Ldo=r(Vit,"dpr"),Vit.forEach(t),ydo=r(Xk," \u2014 "),QB=n(Xk,"A",{href:!0});var Xit=s(QB);xdo=r(Xit,"DPRQuestionEncoderTokenizer"),Xit.forEach(t),$do=r(Xk," or "),WB=n(Xk,"A",{href:!0});var zit=s(WB);kdo=r(zit,"DPRQuestionEncoderTokenizerFast"),zit.forEach(t),Sdo=r(Xk," (DPR model)"),Xk.forEach(t),Rdo=i(S),ts=n(S,"LI",{});var zk=s(ts);Rle=n(zk,"STRONG",{});var Qit=s(Rle);Pdo=r(Qit,"electra"),Qit.forEach(t),Bdo=r(zk," \u2014 "),HB=n(zk,"A",{href:!0});var Wit=s(HB);Ido=r(Wit,"ElectraTokenizer"),Wit.forEach(t),Ndo=r(zk," or "),UB=n(zk,"A",{href:!0});var Hit=s(UB);qdo=r(Hit,"ElectraTokenizerFast"),Hit.forEach(t),jdo=r(zk," (ELECTRA model)"),zk.forEach(t),Ddo=i(S),dh=n(S,"LI",{});var Iye=s(dh);Ple=n(Iye,"STRONG",{});var Uit=s(Ple);Gdo=r(Uit,"flaubert"),Uit.forEach(t),Odo=r(Iye," \u2014 "),JB=n(Iye,"A",{href:!0});var Jit=s(JB);Vdo=r(Jit,"FlaubertTokenizer"),Jit.forEach(t),Xdo=r(Iye," (FlauBERT model)"),Iye.forEach(t),zdo=i(S),as=n(S,"LI",{});var Qk=s(as);Ble=n(Qk,"STRONG",{});var Yit=s(Ble);Qdo=r(Yit,"fnet"),Yit.forEach(t),Wdo=r(Qk," \u2014 "),YB=n(Qk,"A",{href:!0});var Kit=s(YB);Hdo=r(Kit,"FNetTokenizer"),Kit.forEach(t),Udo=r(Qk," or "),KB=n(Qk,"A",{href:!0});var Zit=s(KB);Jdo=r(Zit,"FNetTokenizerFast"),Zit.forEach(t),Ydo=r(Qk," (FNet model)"),Qk.forEach(t),Kdo=i(S),ch=n(S,"LI",{});var Nye=s(ch);Ile=n(Nye,"STRONG",{});var edt=s(Ile);Zdo=r(edt,"fsmt"),edt.forEach(t),eco=r(Nye," \u2014 "),ZB=n(Nye,"A",{href:!0});var odt=s(ZB);oco=r(odt,"FSMTTokenizer"),odt.forEach(t),rco=r(Nye," (FairSeq Machine-Translation model)"),Nye.forEach(t),tco=i(S),ns=n(S,"LI",{});var Wk=s(ns);Nle=n(Wk,"STRONG",{});var rdt=s(Nle);aco=r(rdt,"funnel"),rdt.forEach(t),nco=r(Wk," \u2014 "),eI=n(Wk,"A",{href:!0});var tdt=s(eI);sco=r(tdt,"FunnelTokenizer"),tdt.forEach(t),lco=r(Wk," or "),oI=n(Wk,"A",{href:!0});var adt=s(oI);ico=r(adt,"FunnelTokenizerFast"),adt.forEach(t),dco=r(Wk," (Funnel Transformer model)"),Wk.forEach(t),cco=i(S),ss=n(S,"LI",{});var Hk=s(ss);qle=n(Hk,"STRONG",{});var ndt=s(qle);fco=r(ndt,"gpt2"),ndt.forEach(t),mco=r(Hk," \u2014 "),rI=n(Hk,"A",{href:!0});var sdt=s(rI);gco=r(sdt,"GPT2Tokenizer"),sdt.forEach(t),hco=r(Hk," or "),tI=n(Hk,"A",{href:!0});var ldt=s(tI);pco=r(ldt,"GPT2TokenizerFast"),ldt.forEach(t),_co=r(Hk," (OpenAI GPT-2 model)"),Hk.forEach(t),uco=i(S),ls=n(S,"LI",{});var Uk=s(ls);jle=n(Uk,"STRONG",{});var idt=s(jle);bco=r(idt,"gpt_neo"),idt.forEach(t),vco=r(Uk," \u2014 "),aI=n(Uk,"A",{href:!0});var ddt=s(aI);Fco=r(ddt,"GPT2Tokenizer"),ddt.forEach(t),Tco=r(Uk," or "),nI=n(Uk,"A",{href:!0});var cdt=s(nI);Mco=r(cdt,"GPT2TokenizerFast"),cdt.forEach(t),Eco=r(Uk," (GPT Neo model)"),Uk.forEach(t),Cco=i(S),fh=n(S,"LI",{});var qye=s(fh);Dle=n(qye,"STRONG",{});var fdt=s(Dle);wco=r(fdt,"gpt_neox"),fdt.forEach(t),Aco=r(qye," \u2014 "),sI=n(qye,"A",{href:!0});var mdt=s(sI);Lco=r(mdt,"GPTNeoXTokenizerFast"),mdt.forEach(t),yco=r(qye," (GPT NeoX model)"),qye.forEach(t),xco=i(S),is=n(S,"LI",{});var Jk=s(is);Gle=n(Jk,"STRONG",{});var gdt=s(Gle);$co=r(gdt,"gptj"),gdt.forEach(t),kco=r(Jk," \u2014 "),lI=n(Jk,"A",{href:!0});var hdt=s(lI);Sco=r(hdt,"GPT2Tokenizer"),hdt.forEach(t),Rco=r(Jk," or "),iI=n(Jk,"A",{href:!0});var pdt=s(iI);Pco=r(pdt,"GPT2TokenizerFast"),pdt.forEach(t),Bco=r(Jk," (GPT-J model)"),Jk.forEach(t),Ico=i(S),ds=n(S,"LI",{});var Yk=s(ds);Ole=n(Yk,"STRONG",{});var _dt=s(Ole);Nco=r(_dt,"groupvit"),_dt.forEach(t),qco=r(Yk," \u2014 "),dI=n(Yk,"A",{href:!0});var udt=s(dI);jco=r(udt,"CLIPTokenizer"),udt.forEach(t),Dco=r(Yk," or "),cI=n(Yk,"A",{href:!0});var bdt=s(cI);Gco=r(bdt,"CLIPTokenizerFast"),bdt.forEach(t),Oco=r(Yk," (GroupViT model)"),Yk.forEach(t),Vco=i(S),cs=n(S,"LI",{});var Kk=s(cs);Vle=n(Kk,"STRONG",{});var vdt=s(Vle);Xco=r(vdt,"herbert"),vdt.forEach(t),zco=r(Kk," \u2014 "),fI=n(Kk,"A",{href:!0});var Fdt=s(fI);Qco=r(Fdt,"HerbertTokenizer"),Fdt.forEach(t),Wco=r(Kk," or "),mI=n(Kk,"A",{href:!0});var Tdt=s(mI);Hco=r(Tdt,"HerbertTokenizerFast"),Tdt.forEach(t),Uco=r(Kk," (HerBERT model)"),Kk.forEach(t),Jco=i(S),mh=n(S,"LI",{});var jye=s(mh);Xle=n(jye,"STRONG",{});var Mdt=s(Xle);Yco=r(Mdt,"hubert"),Mdt.forEach(t),Kco=r(jye," \u2014 "),gI=n(jye,"A",{href:!0});var Edt=s(gI);Zco=r(Edt,"Wav2Vec2CTCTokenizer"),Edt.forEach(t),efo=r(jye," (Hubert model)"),jye.forEach(t),ofo=i(S),fs=n(S,"LI",{});var Zk=s(fs);zle=n(Zk,"STRONG",{});var Cdt=s(zle);rfo=r(Cdt,"ibert"),Cdt.forEach(t),tfo=r(Zk," \u2014 "),hI=n(Zk,"A",{href:!0});var wdt=s(hI);afo=r(wdt,"RobertaTokenizer"),wdt.forEach(t),nfo=r(Zk," or "),pI=n(Zk,"A",{href:!0});var Adt=s(pI);sfo=r(Adt,"RobertaTokenizerFast"),Adt.forEach(t),lfo=r(Zk," (I-BERT model)"),Zk.forEach(t),ifo=i(S),ms=n(S,"LI",{});var eS=s(ms);Qle=n(eS,"STRONG",{});var Ldt=s(Qle);dfo=r(Ldt,"layoutlm"),Ldt.forEach(t),cfo=r(eS," \u2014 "),_I=n(eS,"A",{href:!0});var ydt=s(_I);ffo=r(ydt,"LayoutLMTokenizer"),ydt.forEach(t),mfo=r(eS," or "),uI=n(eS,"A",{href:!0});var xdt=s(uI);gfo=r(xdt,"LayoutLMTokenizerFast"),xdt.forEach(t),hfo=r(eS," (LayoutLM model)"),eS.forEach(t),pfo=i(S),gs=n(S,"LI",{});var oS=s(gs);Wle=n(oS,"STRONG",{});var $dt=s(Wle);_fo=r($dt,"layoutlmv2"),$dt.forEach(t),ufo=r(oS," \u2014 "),bI=n(oS,"A",{href:!0});var kdt=s(bI);bfo=r(kdt,"LayoutLMv2Tokenizer"),kdt.forEach(t),vfo=r(oS," or "),vI=n(oS,"A",{href:!0});var Sdt=s(vI);Ffo=r(Sdt,"LayoutLMv2TokenizerFast"),Sdt.forEach(t),Tfo=r(oS," (LayoutLMv2 model)"),oS.forEach(t),Mfo=i(S),hs=n(S,"LI",{});var rS=s(hs);Hle=n(rS,"STRONG",{});var Rdt=s(Hle);Efo=r(Rdt,"layoutlmv3"),Rdt.forEach(t),Cfo=r(rS," \u2014 "),FI=n(rS,"A",{href:!0});var Pdt=s(FI);wfo=r(Pdt,"LayoutLMv3Tokenizer"),Pdt.forEach(t),Afo=r(rS," or "),TI=n(rS,"A",{href:!0});var Bdt=s(TI);Lfo=r(Bdt,"LayoutLMv3TokenizerFast"),Bdt.forEach(t),yfo=r(rS," (LayoutLMv3 model)"),rS.forEach(t),xfo=i(S),ps=n(S,"LI",{});var tS=s(ps);Ule=n(tS,"STRONG",{});var Idt=s(Ule);$fo=r(Idt,"layoutxlm"),Idt.forEach(t),kfo=r(tS," \u2014 "),MI=n(tS,"A",{href:!0});var Ndt=s(MI);Sfo=r(Ndt,"LayoutXLMTokenizer"),Ndt.forEach(t),Rfo=r(tS," or "),EI=n(tS,"A",{href:!0});var qdt=s(EI);Pfo=r(qdt,"LayoutXLMTokenizerFast"),qdt.forEach(t),Bfo=r(tS," (LayoutXLM model)"),tS.forEach(t),Ifo=i(S),_s=n(S,"LI",{});var aS=s(_s);Jle=n(aS,"STRONG",{});var jdt=s(Jle);Nfo=r(jdt,"led"),jdt.forEach(t),qfo=r(aS," \u2014 "),CI=n(aS,"A",{href:!0});var Ddt=s(CI);jfo=r(Ddt,"LEDTokenizer"),Ddt.forEach(t),Dfo=r(aS," or "),wI=n(aS,"A",{href:!0});var Gdt=s(wI);Gfo=r(Gdt,"LEDTokenizerFast"),Gdt.forEach(t),Ofo=r(aS," (LED model)"),aS.forEach(t),Vfo=i(S),us=n(S,"LI",{});var nS=s(us);Yle=n(nS,"STRONG",{});var Odt=s(Yle);Xfo=r(Odt,"longformer"),Odt.forEach(t),zfo=r(nS," \u2014 "),AI=n(nS,"A",{href:!0});var Vdt=s(AI);Qfo=r(Vdt,"LongformerTokenizer"),Vdt.forEach(t),Wfo=r(nS," or "),LI=n(nS,"A",{href:!0});var Xdt=s(LI);Hfo=r(Xdt,"LongformerTokenizerFast"),Xdt.forEach(t),Ufo=r(nS," (Longformer model)"),nS.forEach(t),Jfo=i(S),bs=n(S,"LI",{});var sS=s(bs);Kle=n(sS,"STRONG",{});var zdt=s(Kle);Yfo=r(zdt,"longt5"),zdt.forEach(t),Kfo=r(sS," \u2014 "),yI=n(sS,"A",{href:!0});var Qdt=s(yI);Zfo=r(Qdt,"T5Tokenizer"),Qdt.forEach(t),emo=r(sS," or "),xI=n(sS,"A",{href:!0});var Wdt=s(xI);omo=r(Wdt,"T5TokenizerFast"),Wdt.forEach(t),rmo=r(sS," (LongT5 model)"),sS.forEach(t),tmo=i(S),gh=n(S,"LI",{});var Dye=s(gh);Zle=n(Dye,"STRONG",{});var Hdt=s(Zle);amo=r(Hdt,"luke"),Hdt.forEach(t),nmo=r(Dye," \u2014 "),$I=n(Dye,"A",{href:!0});var Udt=s($I);smo=r(Udt,"LukeTokenizer"),Udt.forEach(t),lmo=r(Dye," (LUKE model)"),Dye.forEach(t),imo=i(S),vs=n(S,"LI",{});var lS=s(vs);eie=n(lS,"STRONG",{});var Jdt=s(eie);dmo=r(Jdt,"lxmert"),Jdt.forEach(t),cmo=r(lS," \u2014 "),kI=n(lS,"A",{href:!0});var Ydt=s(kI);fmo=r(Ydt,"LxmertTokenizer"),Ydt.forEach(t),mmo=r(lS," or "),SI=n(lS,"A",{href:!0});var Kdt=s(SI);gmo=r(Kdt,"LxmertTokenizerFast"),Kdt.forEach(t),hmo=r(lS," (LXMERT model)"),lS.forEach(t),pmo=i(S),hh=n(S,"LI",{});var Gye=s(hh);oie=n(Gye,"STRONG",{});var Zdt=s(oie);_mo=r(Zdt,"m2m_100"),Zdt.forEach(t),umo=r(Gye," \u2014 "),RI=n(Gye,"A",{href:!0});var ect=s(RI);bmo=r(ect,"M2M100Tokenizer"),ect.forEach(t),vmo=r(Gye," (M2M100 model)"),Gye.forEach(t),Fmo=i(S),ph=n(S,"LI",{});var Oye=s(ph);rie=n(Oye,"STRONG",{});var oct=s(rie);Tmo=r(oct,"marian"),oct.forEach(t),Mmo=r(Oye," \u2014 "),PI=n(Oye,"A",{href:!0});var rct=s(PI);Emo=r(rct,"MarianTokenizer"),rct.forEach(t),Cmo=r(Oye," (Marian model)"),Oye.forEach(t),wmo=i(S),Fs=n(S,"LI",{});var iS=s(Fs);tie=n(iS,"STRONG",{});var tct=s(tie);Amo=r(tct,"mbart"),tct.forEach(t),Lmo=r(iS," \u2014 "),BI=n(iS,"A",{href:!0});var act=s(BI);ymo=r(act,"MBartTokenizer"),act.forEach(t),xmo=r(iS," or "),II=n(iS,"A",{href:!0});var nct=s(II);$mo=r(nct,"MBartTokenizerFast"),nct.forEach(t),kmo=r(iS," (mBART model)"),iS.forEach(t),Smo=i(S),Ts=n(S,"LI",{});var dS=s(Ts);aie=n(dS,"STRONG",{});var sct=s(aie);Rmo=r(sct,"mbart50"),sct.forEach(t),Pmo=r(dS," \u2014 "),NI=n(dS,"A",{href:!0});var lct=s(NI);Bmo=r(lct,"MBart50Tokenizer"),lct.forEach(t),Imo=r(dS," or "),qI=n(dS,"A",{href:!0});var ict=s(qI);Nmo=r(ict,"MBart50TokenizerFast"),ict.forEach(t),qmo=r(dS," (mBART-50 model)"),dS.forEach(t),jmo=i(S),Ms=n(S,"LI",{});var cS=s(Ms);nie=n(cS,"STRONG",{});var dct=s(nie);Dmo=r(dct,"megatron-bert"),dct.forEach(t),Gmo=r(cS," \u2014 "),jI=n(cS,"A",{href:!0});var cct=s(jI);Omo=r(cct,"BertTokenizer"),cct.forEach(t),Vmo=r(cS," or "),DI=n(cS,"A",{href:!0});var fct=s(DI);Xmo=r(fct,"BertTokenizerFast"),fct.forEach(t),zmo=r(cS," (Megatron-BERT model)"),cS.forEach(t),Qmo=i(S),_h=n(S,"LI",{});var Vye=s(_h);sie=n(Vye,"STRONG",{});var mct=s(sie);Wmo=r(mct,"mluke"),mct.forEach(t),Hmo=r(Vye," \u2014 "),GI=n(Vye,"A",{href:!0});var gct=s(GI);Umo=r(gct,"MLukeTokenizer"),gct.forEach(t),Jmo=r(Vye," (mLUKE model)"),Vye.forEach(t),Ymo=i(S),Es=n(S,"LI",{});var fS=s(Es);lie=n(fS,"STRONG",{});var hct=s(lie);Kmo=r(hct,"mobilebert"),hct.forEach(t),Zmo=r(fS," \u2014 "),OI=n(fS,"A",{href:!0});var pct=s(OI);ego=r(pct,"MobileBertTokenizer"),pct.forEach(t),ogo=r(fS," or "),VI=n(fS,"A",{href:!0});var _ct=s(VI);rgo=r(_ct,"MobileBertTokenizerFast"),_ct.forEach(t),tgo=r(fS," (MobileBERT model)"),fS.forEach(t),ago=i(S),Cs=n(S,"LI",{});var mS=s(Cs);iie=n(mS,"STRONG",{});var uct=s(iie);ngo=r(uct,"mpnet"),uct.forEach(t),sgo=r(mS," \u2014 "),XI=n(mS,"A",{href:!0});var bct=s(XI);lgo=r(bct,"MPNetTokenizer"),bct.forEach(t),igo=r(mS," or "),zI=n(mS,"A",{href:!0});var vct=s(zI);dgo=r(vct,"MPNetTokenizerFast"),vct.forEach(t),cgo=r(mS," (MPNet model)"),mS.forEach(t),fgo=i(S),ws=n(S,"LI",{});var gS=s(ws);die=n(gS,"STRONG",{});var Fct=s(die);mgo=r(Fct,"mt5"),Fct.forEach(t),ggo=r(gS," \u2014 "),QI=n(gS,"A",{href:!0});var Tct=s(QI);hgo=r(Tct,"MT5Tokenizer"),Tct.forEach(t),pgo=r(gS," or "),WI=n(gS,"A",{href:!0});var Mct=s(WI);_go=r(Mct,"MT5TokenizerFast"),Mct.forEach(t),ugo=r(gS," (MT5 model)"),gS.forEach(t),bgo=i(S),As=n(S,"LI",{});var hS=s(As);cie=n(hS,"STRONG",{});var Ect=s(cie);vgo=r(Ect,"mvp"),Ect.forEach(t),Fgo=r(hS," \u2014 "),HI=n(hS,"A",{href:!0});var Cct=s(HI);Tgo=r(Cct,"MvpTokenizer"),Cct.forEach(t),Mgo=r(hS," or "),UI=n(hS,"A",{href:!0});var wct=s(UI);Ego=r(wct,"MvpTokenizerFast"),wct.forEach(t),Cgo=r(hS," (MVP model)"),hS.forEach(t),wgo=i(S),Ls=n(S,"LI",{});var pS=s(Ls);fie=n(pS,"STRONG",{});var Act=s(fie);Ago=r(Act,"nezha"),Act.forEach(t),Lgo=r(pS," \u2014 "),JI=n(pS,"A",{href:!0});var Lct=s(JI);ygo=r(Lct,"BertTokenizer"),Lct.forEach(t),xgo=r(pS," or "),YI=n(pS,"A",{href:!0});var yct=s(YI);$go=r(yct,"BertTokenizerFast"),yct.forEach(t),kgo=r(pS," (Nezha model)"),pS.forEach(t),Sgo=i(S),ys=n(S,"LI",{});var _S=s(ys);mie=n(_S,"STRONG",{});var xct=s(mie);Rgo=r(xct,"nystromformer"),xct.forEach(t),Pgo=r(_S," \u2014 "),KI=n(_S,"A",{href:!0});var $ct=s(KI);Bgo=r($ct,"AlbertTokenizer"),$ct.forEach(t),Igo=r(_S," or "),ZI=n(_S,"A",{href:!0});var kct=s(ZI);Ngo=r(kct,"AlbertTokenizerFast"),kct.forEach(t),qgo=r(_S," (Nystr\xF6mformer model)"),_S.forEach(t),jgo=i(S),xs=n(S,"LI",{});var uS=s(xs);gie=n(uS,"STRONG",{});var Sct=s(gie);Dgo=r(Sct,"openai-gpt"),Sct.forEach(t),Ggo=r(uS," \u2014 "),eN=n(uS,"A",{href:!0});var Rct=s(eN);Ogo=r(Rct,"OpenAIGPTTokenizer"),Rct.forEach(t),Vgo=r(uS," or "),oN=n(uS,"A",{href:!0});var Pct=s(oN);Xgo=r(Pct,"OpenAIGPTTokenizerFast"),Pct.forEach(t),zgo=r(uS," (OpenAI GPT model)"),uS.forEach(t),Qgo=i(S),uh=n(S,"LI",{});var Xye=s(uh);hie=n(Xye,"STRONG",{});var Bct=s(hie);Wgo=r(Bct,"opt"),Bct.forEach(t),Hgo=r(Xye," \u2014 "),rN=n(Xye,"A",{href:!0});var Ict=s(rN);Ugo=r(Ict,"GPT2Tokenizer"),Ict.forEach(t),Jgo=r(Xye," (OPT model)"),Xye.forEach(t),Ygo=i(S),$s=n(S,"LI",{});var bS=s($s);pie=n(bS,"STRONG",{});var Nct=s(pie);Kgo=r(Nct,"pegasus"),Nct.forEach(t),Zgo=r(bS," \u2014 "),tN=n(bS,"A",{href:!0});var qct=s(tN);eho=r(qct,"PegasusTokenizer"),qct.forEach(t),oho=r(bS," or "),aN=n(bS,"A",{href:!0});var jct=s(aN);rho=r(jct,"PegasusTokenizerFast"),jct.forEach(t),tho=r(bS," (Pegasus model)"),bS.forEach(t),aho=i(S),bh=n(S,"LI",{});var zye=s(bh);_ie=n(zye,"STRONG",{});var Dct=s(_ie);nho=r(Dct,"perceiver"),Dct.forEach(t),sho=r(zye," \u2014 "),nN=n(zye,"A",{href:!0});var Gct=s(nN);lho=r(Gct,"PerceiverTokenizer"),Gct.forEach(t),iho=r(zye," (Perceiver model)"),zye.forEach(t),dho=i(S),vh=n(S,"LI",{});var Qye=s(vh);uie=n(Qye,"STRONG",{});var Oct=s(uie);cho=r(Oct,"phobert"),Oct.forEach(t),fho=r(Qye," \u2014 "),sN=n(Qye,"A",{href:!0});var Vct=s(sN);mho=r(Vct,"PhobertTokenizer"),Vct.forEach(t),gho=r(Qye," (PhoBERT model)"),Qye.forEach(t),hho=i(S),Fh=n(S,"LI",{});var Wye=s(Fh);bie=n(Wye,"STRONG",{});var Xct=s(bie);pho=r(Xct,"plbart"),Xct.forEach(t),_ho=r(Wye," \u2014 "),lN=n(Wye,"A",{href:!0});var zct=s(lN);uho=r(zct,"PLBartTokenizer"),zct.forEach(t),bho=r(Wye," (PLBart model)"),Wye.forEach(t),vho=i(S),Th=n(S,"LI",{});var Hye=s(Th);vie=n(Hye,"STRONG",{});var Qct=s(vie);Fho=r(Qct,"prophetnet"),Qct.forEach(t),Tho=r(Hye," \u2014 "),iN=n(Hye,"A",{href:!0});var Wct=s(iN);Mho=r(Wct,"ProphetNetTokenizer"),Wct.forEach(t),Eho=r(Hye," (ProphetNet model)"),Hye.forEach(t),Cho=i(S),ks=n(S,"LI",{});var vS=s(ks);Fie=n(vS,"STRONG",{});var Hct=s(Fie);who=r(Hct,"qdqbert"),Hct.forEach(t),Aho=r(vS," \u2014 "),dN=n(vS,"A",{href:!0});var Uct=s(dN);Lho=r(Uct,"BertTokenizer"),Uct.forEach(t),yho=r(vS," or "),cN=n(vS,"A",{href:!0});var Jct=s(cN);xho=r(Jct,"BertTokenizerFast"),Jct.forEach(t),$ho=r(vS," (QDQBert model)"),vS.forEach(t),kho=i(S),Mh=n(S,"LI",{});var Uye=s(Mh);Tie=n(Uye,"STRONG",{});var Yct=s(Tie);Sho=r(Yct,"rag"),Yct.forEach(t),Rho=r(Uye," \u2014 "),fN=n(Uye,"A",{href:!0});var Kct=s(fN);Pho=r(Kct,"RagTokenizer"),Kct.forEach(t),Bho=r(Uye," (RAG model)"),Uye.forEach(t),Iho=i(S),Ss=n(S,"LI",{});var FS=s(Ss);Mie=n(FS,"STRONG",{});var Zct=s(Mie);Nho=r(Zct,"realm"),Zct.forEach(t),qho=r(FS," \u2014 "),mN=n(FS,"A",{href:!0});var eft=s(mN);jho=r(eft,"RealmTokenizer"),eft.forEach(t),Dho=r(FS," or "),gN=n(FS,"A",{href:!0});var oft=s(gN);Gho=r(oft,"RealmTokenizerFast"),oft.forEach(t),Oho=r(FS," (REALM model)"),FS.forEach(t),Vho=i(S),Rs=n(S,"LI",{});var TS=s(Rs);Eie=n(TS,"STRONG",{});var rft=s(Eie);Xho=r(rft,"reformer"),rft.forEach(t),zho=r(TS," \u2014 "),hN=n(TS,"A",{href:!0});var tft=s(hN);Qho=r(tft,"ReformerTokenizer"),tft.forEach(t),Who=r(TS," or "),pN=n(TS,"A",{href:!0});var aft=s(pN);Hho=r(aft,"ReformerTokenizerFast"),aft.forEach(t),Uho=r(TS," (Reformer model)"),TS.forEach(t),Jho=i(S),Ps=n(S,"LI",{});var MS=s(Ps);Cie=n(MS,"STRONG",{});var nft=s(Cie);Yho=r(nft,"rembert"),nft.forEach(t),Kho=r(MS," \u2014 "),_N=n(MS,"A",{href:!0});var sft=s(_N);Zho=r(sft,"RemBertTokenizer"),sft.forEach(t),epo=r(MS," or "),uN=n(MS,"A",{href:!0});var lft=s(uN);opo=r(lft,"RemBertTokenizerFast"),lft.forEach(t),rpo=r(MS," (RemBERT model)"),MS.forEach(t),tpo=i(S),Bs=n(S,"LI",{});var ES=s(Bs);wie=n(ES,"STRONG",{});var ift=s(wie);apo=r(ift,"retribert"),ift.forEach(t),npo=r(ES," \u2014 "),bN=n(ES,"A",{href:!0});var dft=s(bN);spo=r(dft,"RetriBertTokenizer"),dft.forEach(t),lpo=r(ES," or "),vN=n(ES,"A",{href:!0});var cft=s(vN);ipo=r(cft,"RetriBertTokenizerFast"),cft.forEach(t),dpo=r(ES," (RetriBERT model)"),ES.forEach(t),cpo=i(S),Is=n(S,"LI",{});var CS=s(Is);Aie=n(CS,"STRONG",{});var fft=s(Aie);fpo=r(fft,"roberta"),fft.forEach(t),mpo=r(CS," \u2014 "),FN=n(CS,"A",{href:!0});var mft=s(FN);gpo=r(mft,"RobertaTokenizer"),mft.forEach(t),hpo=r(CS," or "),TN=n(CS,"A",{href:!0});var gft=s(TN);ppo=r(gft,"RobertaTokenizerFast"),gft.forEach(t),_po=r(CS," (RoBERTa model)"),CS.forEach(t),upo=i(S),Ns=n(S,"LI",{});var wS=s(Ns);Lie=n(wS,"STRONG",{});var hft=s(Lie);bpo=r(hft,"roformer"),hft.forEach(t),vpo=r(wS," \u2014 "),MN=n(wS,"A",{href:!0});var pft=s(MN);Fpo=r(pft,"RoFormerTokenizer"),pft.forEach(t),Tpo=r(wS," or "),EN=n(wS,"A",{href:!0});var _ft=s(EN);Mpo=r(_ft,"RoFormerTokenizerFast"),_ft.forEach(t),Epo=r(wS," (RoFormer model)"),wS.forEach(t),Cpo=i(S),Eh=n(S,"LI",{});var Jye=s(Eh);yie=n(Jye,"STRONG",{});var uft=s(yie);wpo=r(uft,"speech_to_text"),uft.forEach(t),Apo=r(Jye," \u2014 "),CN=n(Jye,"A",{href:!0});var bft=s(CN);Lpo=r(bft,"Speech2TextTokenizer"),bft.forEach(t),ypo=r(Jye," (Speech2Text model)"),Jye.forEach(t),xpo=i(S),Ch=n(S,"LI",{});var Yye=s(Ch);xie=n(Yye,"STRONG",{});var vft=s(xie);$po=r(vft,"speech_to_text_2"),vft.forEach(t),kpo=r(Yye," \u2014 "),wN=n(Yye,"A",{href:!0});var Fft=s(wN);Spo=r(Fft,"Speech2Text2Tokenizer"),Fft.forEach(t),Rpo=r(Yye," (Speech2Text2 model)"),Yye.forEach(t),Ppo=i(S),qs=n(S,"LI",{});var AS=s(qs);$ie=n(AS,"STRONG",{});var Tft=s($ie);Bpo=r(Tft,"splinter"),Tft.forEach(t),Ipo=r(AS," \u2014 "),AN=n(AS,"A",{href:!0});var Mft=s(AN);Npo=r(Mft,"SplinterTokenizer"),Mft.forEach(t),qpo=r(AS," or "),LN=n(AS,"A",{href:!0});var Eft=s(LN);jpo=r(Eft,"SplinterTokenizerFast"),Eft.forEach(t),Dpo=r(AS," (Splinter model)"),AS.forEach(t),Gpo=i(S),js=n(S,"LI",{});var LS=s(js);kie=n(LS,"STRONG",{});var Cft=s(kie);Opo=r(Cft,"squeezebert"),Cft.forEach(t),Vpo=r(LS," \u2014 "),yN=n(LS,"A",{href:!0});var wft=s(yN);Xpo=r(wft,"SqueezeBertTokenizer"),wft.forEach(t),zpo=r(LS," or "),xN=n(LS,"A",{href:!0});var Aft=s(xN);Qpo=r(Aft,"SqueezeBertTokenizerFast"),Aft.forEach(t),Wpo=r(LS," (SqueezeBERT model)"),LS.forEach(t),Hpo=i(S),Ds=n(S,"LI",{});var yS=s(Ds);Sie=n(yS,"STRONG",{});var Lft=s(Sie);Upo=r(Lft,"t5"),Lft.forEach(t),Jpo=r(yS," \u2014 "),$N=n(yS,"A",{href:!0});var yft=s($N);Ypo=r(yft,"T5Tokenizer"),yft.forEach(t),Kpo=r(yS," or "),kN=n(yS,"A",{href:!0});var xft=s(kN);Zpo=r(xft,"T5TokenizerFast"),xft.forEach(t),e_o=r(yS," (T5 model)"),yS.forEach(t),o_o=i(S),wh=n(S,"LI",{});var Kye=s(wh);Rie=n(Kye,"STRONG",{});var $ft=s(Rie);r_o=r($ft,"tapas"),$ft.forEach(t),t_o=r(Kye," \u2014 "),SN=n(Kye,"A",{href:!0});var kft=s(SN);a_o=r(kft,"TapasTokenizer"),kft.forEach(t),n_o=r(Kye," (TAPAS model)"),Kye.forEach(t),s_o=i(S),Ah=n(S,"LI",{});var Zye=s(Ah);Pie=n(Zye,"STRONG",{});var Sft=s(Pie);l_o=r(Sft,"tapex"),Sft.forEach(t),i_o=r(Zye," \u2014 "),RN=n(Zye,"A",{href:!0});var Rft=s(RN);d_o=r(Rft,"TapexTokenizer"),Rft.forEach(t),c_o=r(Zye," (TAPEX model)"),Zye.forEach(t),f_o=i(S),Lh=n(S,"LI",{});var e8e=s(Lh);Bie=n(e8e,"STRONG",{});var Pft=s(Bie);m_o=r(Pft,"transfo-xl"),Pft.forEach(t),g_o=r(e8e," \u2014 "),PN=n(e8e,"A",{href:!0});var Bft=s(PN);h_o=r(Bft,"TransfoXLTokenizer"),Bft.forEach(t),p_o=r(e8e," (Transformer-XL model)"),e8e.forEach(t),__o=i(S),Gs=n(S,"LI",{});var xS=s(Gs);Iie=n(xS,"STRONG",{});var Ift=s(Iie);u_o=r(Ift,"vilt"),Ift.forEach(t),b_o=r(xS," \u2014 "),BN=n(xS,"A",{href:!0});var Nft=s(BN);v_o=r(Nft,"BertTokenizer"),Nft.forEach(t),F_o=r(xS," or "),IN=n(xS,"A",{href:!0});var qft=s(IN);T_o=r(qft,"BertTokenizerFast"),qft.forEach(t),M_o=r(xS," (ViLT model)"),xS.forEach(t),E_o=i(S),Os=n(S,"LI",{});var $S=s(Os);Nie=n($S,"STRONG",{});var jft=s(Nie);C_o=r(jft,"visual_bert"),jft.forEach(t),w_o=r($S," \u2014 "),NN=n($S,"A",{href:!0});var Dft=s(NN);A_o=r(Dft,"BertTokenizer"),Dft.forEach(t),L_o=r($S," or "),qN=n($S,"A",{href:!0});var Gft=s(qN);y_o=r(Gft,"BertTokenizerFast"),Gft.forEach(t),x_o=r($S," (VisualBERT model)"),$S.forEach(t),$_o=i(S),yh=n(S,"LI",{});var o8e=s(yh);qie=n(o8e,"STRONG",{});var Oft=s(qie);k_o=r(Oft,"wav2vec2"),Oft.forEach(t),S_o=r(o8e," \u2014 "),jN=n(o8e,"A",{href:!0});var Vft=s(jN);R_o=r(Vft,"Wav2Vec2CTCTokenizer"),Vft.forEach(t),P_o=r(o8e," (Wav2Vec2 model)"),o8e.forEach(t),B_o=i(S),xh=n(S,"LI",{});var r8e=s(xh);jie=n(r8e,"STRONG",{});var Xft=s(jie);I_o=r(Xft,"wav2vec2-conformer"),Xft.forEach(t),N_o=r(r8e," \u2014 "),DN=n(r8e,"A",{href:!0});var zft=s(DN);q_o=r(zft,"Wav2Vec2CTCTokenizer"),zft.forEach(t),j_o=r(r8e," (Wav2Vec2-Conformer model)"),r8e.forEach(t),D_o=i(S),$h=n(S,"LI",{});var t8e=s($h);Die=n(t8e,"STRONG",{});var Qft=s(Die);G_o=r(Qft,"wav2vec2_phoneme"),Qft.forEach(t),O_o=r(t8e," \u2014 "),GN=n(t8e,"A",{href:!0});var Wft=s(GN);V_o=r(Wft,"Wav2Vec2PhonemeCTCTokenizer"),Wft.forEach(t),X_o=r(t8e," (Wav2Vec2Phoneme model)"),t8e.forEach(t),z_o=i(S),Vs=n(S,"LI",{});var kS=s(Vs);Gie=n(kS,"STRONG",{});var Hft=s(Gie);Q_o=r(Hft,"xglm"),Hft.forEach(t),W_o=r(kS," \u2014 "),ON=n(kS,"A",{href:!0});var Uft=s(ON);H_o=r(Uft,"XGLMTokenizer"),Uft.forEach(t),U_o=r(kS," or "),VN=n(kS,"A",{href:!0});var Jft=s(VN);J_o=r(Jft,"XGLMTokenizerFast"),Jft.forEach(t),Y_o=r(kS," (XGLM model)"),kS.forEach(t),K_o=i(S),kh=n(S,"LI",{});var a8e=s(kh);Oie=n(a8e,"STRONG",{});var Yft=s(Oie);Z_o=r(Yft,"xlm"),Yft.forEach(t),euo=r(a8e," \u2014 "),XN=n(a8e,"A",{href:!0});var Kft=s(XN);ouo=r(Kft,"XLMTokenizer"),Kft.forEach(t),ruo=r(a8e," (XLM model)"),a8e.forEach(t),tuo=i(S),Sh=n(S,"LI",{});var n8e=s(Sh);Vie=n(n8e,"STRONG",{});var Zft=s(Vie);auo=r(Zft,"xlm-prophetnet"),Zft.forEach(t),nuo=r(n8e," \u2014 "),zN=n(n8e,"A",{href:!0});var emt=s(zN);suo=r(emt,"XLMProphetNetTokenizer"),emt.forEach(t),luo=r(n8e," (XLM-ProphetNet model)"),n8e.forEach(t),iuo=i(S),Xs=n(S,"LI",{});var SS=s(Xs);Xie=n(SS,"STRONG",{});var omt=s(Xie);duo=r(omt,"xlm-roberta"),omt.forEach(t),cuo=r(SS," \u2014 "),QN=n(SS,"A",{href:!0});var rmt=s(QN);fuo=r(rmt,"XLMRobertaTokenizer"),rmt.forEach(t),muo=r(SS," or "),WN=n(SS,"A",{href:!0});var tmt=s(WN);guo=r(tmt,"XLMRobertaTokenizerFast"),tmt.forEach(t),huo=r(SS," (XLM-RoBERTa model)"),SS.forEach(t),puo=i(S),zs=n(S,"LI",{});var RS=s(zs);zie=n(RS,"STRONG",{});var amt=s(zie);_uo=r(amt,"xlm-roberta-xl"),amt.forEach(t),uuo=r(RS," \u2014 "),HN=n(RS,"A",{href:!0});var nmt=s(HN);buo=r(nmt,"RobertaTokenizer"),nmt.forEach(t),vuo=r(RS," or "),UN=n(RS,"A",{href:!0});var smt=s(UN);Fuo=r(smt,"RobertaTokenizerFast"),smt.forEach(t),Tuo=r(RS," (XLM-RoBERTa-XL model)"),RS.forEach(t),Muo=i(S),Qs=n(S,"LI",{});var PS=s(Qs);Qie=n(PS,"STRONG",{});var lmt=s(Qie);Euo=r(lmt,"xlnet"),lmt.forEach(t),Cuo=r(PS," \u2014 "),JN=n(PS,"A",{href:!0});var imt=s(JN);wuo=r(imt,"XLNetTokenizer"),imt.forEach(t),Auo=r(PS," or "),YN=n(PS,"A",{href:!0});var dmt=s(YN);Luo=r(dmt,"XLNetTokenizerFast"),dmt.forEach(t),yuo=r(PS," (XLNet model)"),PS.forEach(t),xuo=i(S),Ws=n(S,"LI",{});var BS=s(Ws);Wie=n(BS,"STRONG",{});var cmt=s(Wie);$uo=r(cmt,"yoso"),cmt.forEach(t),kuo=r(BS," \u2014 "),KN=n(BS,"A",{href:!0});var fmt=s(KN);Suo=r(fmt,"AlbertTokenizer"),fmt.forEach(t),Ruo=r(BS," or "),ZN=n(BS,"A",{href:!0});var mmt=s(ZN);Puo=r(mmt,"AlbertTokenizerFast"),mmt.forEach(t),Buo=r(BS," (YOSO model)"),BS.forEach(t),S.forEach(t),Iuo=i(Zs),T(Rh.$$.fragment,Zs),Zs.forEach(t),Nuo=i(Ks),Ph=n(Ks,"DIV",{class:!0});var AQe=s(Ph);T(EL.$$.fragment,AQe),quo=i(AQe),Hie=n(AQe,"P",{});var gmt=s(Hie);juo=r(gmt,"Register a new tokenizer in this mapping."),gmt.forEach(t),AQe.forEach(t),Ks.forEach(t),wXe=i(f),qi=n(f,"H2",{class:!0});var LQe=s(qi);Bh=n(LQe,"A",{id:!0,class:!0,href:!0});var hmt=s(Bh);Uie=n(hmt,"SPAN",{});var pmt=s(Uie);T(CL.$$.fragment,pmt),pmt.forEach(t),hmt.forEach(t),Duo=i(LQe),Jie=n(LQe,"SPAN",{});var _mt=s(Jie);Guo=r(_mt,"AutoFeatureExtractor"),_mt.forEach(t),LQe.forEach(t),AXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(wL.$$.fragment,el),Ouo=i(el),AL=n(el,"P",{});var yQe=s(AL);Vuo=r(yQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eq=n(yQe,"A",{href:!0});var umt=s(eq);Xuo=r(umt,"AutoFeatureExtractor.from_pretrained()"),umt.forEach(t),zuo=r(yQe," class method."),yQe.forEach(t),Quo=i(el),LL=n(el,"P",{});var xQe=s(LL);Wuo=r(xQe,"This class cannot be instantiated directly using "),Yie=n(xQe,"CODE",{});var bmt=s(Yie);Huo=r(bmt,"__init__()"),bmt.forEach(t),Uuo=r(xQe," (throws an error)."),xQe.forEach(t),Juo=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(yL.$$.fragment,na),Yuo=i(na),Kie=n(na,"P",{});var vmt=s(Kie);Kuo=r(vmt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vmt.forEach(t),Zuo=i(na),Ba=n(na,"P",{});var mw=s(Ba);e1o=r(mw,"The feature extractor class to instantiate is selected based on the "),Zie=n(mw,"CODE",{});var Fmt=s(Zie);o1o=r(Fmt,"model_type"),Fmt.forEach(t),r1o=r(mw,` property of the config object
(either passed as an argument or loaded from `),ede=n(mw,"CODE",{});var Tmt=s(ede);t1o=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),a1o=r(mw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ode=n(mw,"CODE",{});var Mmt=s(ode);n1o=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),s1o=r(mw,":"),mw.forEach(t),l1o=i(na),J=n(na,"UL",{});var K=s(J);Ih=n(K,"LI",{});var s8e=s(Ih);rde=n(s8e,"STRONG",{});var Emt=s(rde);i1o=r(Emt,"beit"),Emt.forEach(t),d1o=r(s8e," \u2014 "),oq=n(s8e,"A",{href:!0});var Cmt=s(oq);c1o=r(Cmt,"BeitFeatureExtractor"),Cmt.forEach(t),f1o=r(s8e," (BEiT model)"),s8e.forEach(t),m1o=i(K),Nh=n(K,"LI",{});var l8e=s(Nh);tde=n(l8e,"STRONG",{});var wmt=s(tde);g1o=r(wmt,"clip"),wmt.forEach(t),h1o=r(l8e," \u2014 "),rq=n(l8e,"A",{href:!0});var Amt=s(rq);p1o=r(Amt,"CLIPFeatureExtractor"),Amt.forEach(t),_1o=r(l8e," (CLIP model)"),l8e.forEach(t),u1o=i(K),qh=n(K,"LI",{});var i8e=s(qh);ade=n(i8e,"STRONG",{});var Lmt=s(ade);b1o=r(Lmt,"convnext"),Lmt.forEach(t),v1o=r(i8e," \u2014 "),tq=n(i8e,"A",{href:!0});var ymt=s(tq);F1o=r(ymt,"ConvNextFeatureExtractor"),ymt.forEach(t),T1o=r(i8e," (ConvNeXT model)"),i8e.forEach(t),M1o=i(K),jh=n(K,"LI",{});var d8e=s(jh);nde=n(d8e,"STRONG",{});var xmt=s(nde);E1o=r(xmt,"cvt"),xmt.forEach(t),C1o=r(d8e," \u2014 "),aq=n(d8e,"A",{href:!0});var $mt=s(aq);w1o=r($mt,"ConvNextFeatureExtractor"),$mt.forEach(t),A1o=r(d8e," (CvT model)"),d8e.forEach(t),L1o=i(K),Dh=n(K,"LI",{});var c8e=s(Dh);sde=n(c8e,"STRONG",{});var kmt=s(sde);y1o=r(kmt,"data2vec-audio"),kmt.forEach(t),x1o=r(c8e," \u2014 "),nq=n(c8e,"A",{href:!0});var Smt=s(nq);$1o=r(Smt,"Wav2Vec2FeatureExtractor"),Smt.forEach(t),k1o=r(c8e," (Data2VecAudio model)"),c8e.forEach(t),S1o=i(K),Gh=n(K,"LI",{});var f8e=s(Gh);lde=n(f8e,"STRONG",{});var Rmt=s(lde);R1o=r(Rmt,"data2vec-vision"),Rmt.forEach(t),P1o=r(f8e," \u2014 "),sq=n(f8e,"A",{href:!0});var Pmt=s(sq);B1o=r(Pmt,"BeitFeatureExtractor"),Pmt.forEach(t),I1o=r(f8e," (Data2VecVision model)"),f8e.forEach(t),N1o=i(K),Oh=n(K,"LI",{});var m8e=s(Oh);ide=n(m8e,"STRONG",{});var Bmt=s(ide);q1o=r(Bmt,"deit"),Bmt.forEach(t),j1o=r(m8e," \u2014 "),lq=n(m8e,"A",{href:!0});var Imt=s(lq);D1o=r(Imt,"DeiTFeatureExtractor"),Imt.forEach(t),G1o=r(m8e," (DeiT model)"),m8e.forEach(t),O1o=i(K),Vh=n(K,"LI",{});var g8e=s(Vh);dde=n(g8e,"STRONG",{});var Nmt=s(dde);V1o=r(Nmt,"detr"),Nmt.forEach(t),X1o=r(g8e," \u2014 "),iq=n(g8e,"A",{href:!0});var qmt=s(iq);z1o=r(qmt,"DetrFeatureExtractor"),qmt.forEach(t),Q1o=r(g8e," (DETR model)"),g8e.forEach(t),W1o=i(K),Xh=n(K,"LI",{});var h8e=s(Xh);cde=n(h8e,"STRONG",{});var jmt=s(cde);H1o=r(jmt,"dpt"),jmt.forEach(t),U1o=r(h8e," \u2014 "),dq=n(h8e,"A",{href:!0});var Dmt=s(dq);J1o=r(Dmt,"DPTFeatureExtractor"),Dmt.forEach(t),Y1o=r(h8e," (DPT model)"),h8e.forEach(t),K1o=i(K),zh=n(K,"LI",{});var p8e=s(zh);fde=n(p8e,"STRONG",{});var Gmt=s(fde);Z1o=r(Gmt,"flava"),Gmt.forEach(t),e2o=r(p8e," \u2014 "),cq=n(p8e,"A",{href:!0});var Omt=s(cq);o2o=r(Omt,"FlavaFeatureExtractor"),Omt.forEach(t),r2o=r(p8e," (FLAVA model)"),p8e.forEach(t),t2o=i(K),Qh=n(K,"LI",{});var _8e=s(Qh);mde=n(_8e,"STRONG",{});var Vmt=s(mde);a2o=r(Vmt,"glpn"),Vmt.forEach(t),n2o=r(_8e," \u2014 "),fq=n(_8e,"A",{href:!0});var Xmt=s(fq);s2o=r(Xmt,"GLPNFeatureExtractor"),Xmt.forEach(t),l2o=r(_8e," (GLPN model)"),_8e.forEach(t),i2o=i(K),Wh=n(K,"LI",{});var u8e=s(Wh);gde=n(u8e,"STRONG",{});var zmt=s(gde);d2o=r(zmt,"groupvit"),zmt.forEach(t),c2o=r(u8e," \u2014 "),mq=n(u8e,"A",{href:!0});var Qmt=s(mq);f2o=r(Qmt,"CLIPFeatureExtractor"),Qmt.forEach(t),m2o=r(u8e," (GroupViT model)"),u8e.forEach(t),g2o=i(K),Hh=n(K,"LI",{});var b8e=s(Hh);hde=n(b8e,"STRONG",{});var Wmt=s(hde);h2o=r(Wmt,"hubert"),Wmt.forEach(t),p2o=r(b8e," \u2014 "),gq=n(b8e,"A",{href:!0});var Hmt=s(gq);_2o=r(Hmt,"Wav2Vec2FeatureExtractor"),Hmt.forEach(t),u2o=r(b8e," (Hubert model)"),b8e.forEach(t),b2o=i(K),Uh=n(K,"LI",{});var v8e=s(Uh);pde=n(v8e,"STRONG",{});var Umt=s(pde);v2o=r(Umt,"imagegpt"),Umt.forEach(t),F2o=r(v8e," \u2014 "),hq=n(v8e,"A",{href:!0});var Jmt=s(hq);T2o=r(Jmt,"ImageGPTFeatureExtractor"),Jmt.forEach(t),M2o=r(v8e," (ImageGPT model)"),v8e.forEach(t),E2o=i(K),Jh=n(K,"LI",{});var F8e=s(Jh);_de=n(F8e,"STRONG",{});var Ymt=s(_de);C2o=r(Ymt,"layoutlmv2"),Ymt.forEach(t),w2o=r(F8e," \u2014 "),pq=n(F8e,"A",{href:!0});var Kmt=s(pq);A2o=r(Kmt,"LayoutLMv2FeatureExtractor"),Kmt.forEach(t),L2o=r(F8e," (LayoutLMv2 model)"),F8e.forEach(t),y2o=i(K),Yh=n(K,"LI",{});var T8e=s(Yh);ude=n(T8e,"STRONG",{});var Zmt=s(ude);x2o=r(Zmt,"layoutlmv3"),Zmt.forEach(t),$2o=r(T8e," \u2014 "),_q=n(T8e,"A",{href:!0});var egt=s(_q);k2o=r(egt,"LayoutLMv3FeatureExtractor"),egt.forEach(t),S2o=r(T8e," (LayoutLMv3 model)"),T8e.forEach(t),R2o=i(K),Kh=n(K,"LI",{});var M8e=s(Kh);bde=n(M8e,"STRONG",{});var ogt=s(bde);P2o=r(ogt,"levit"),ogt.forEach(t),B2o=r(M8e," \u2014 "),uq=n(M8e,"A",{href:!0});var rgt=s(uq);I2o=r(rgt,"LevitFeatureExtractor"),rgt.forEach(t),N2o=r(M8e," (LeViT model)"),M8e.forEach(t),q2o=i(K),Zh=n(K,"LI",{});var E8e=s(Zh);vde=n(E8e,"STRONG",{});var tgt=s(vde);j2o=r(tgt,"maskformer"),tgt.forEach(t),D2o=r(E8e," \u2014 "),bq=n(E8e,"A",{href:!0});var agt=s(bq);G2o=r(agt,"MaskFormerFeatureExtractor"),agt.forEach(t),O2o=r(E8e," (MaskFormer model)"),E8e.forEach(t),V2o=i(K),ep=n(K,"LI",{});var C8e=s(ep);Fde=n(C8e,"STRONG",{});var ngt=s(Fde);X2o=r(ngt,"mctct"),ngt.forEach(t),z2o=r(C8e," \u2014 "),vq=n(C8e,"A",{href:!0});var sgt=s(vq);Q2o=r(sgt,"MCTCTFeatureExtractor"),sgt.forEach(t),W2o=r(C8e," (M-CTC-T model)"),C8e.forEach(t),H2o=i(K),op=n(K,"LI",{});var w8e=s(op);Tde=n(w8e,"STRONG",{});var lgt=s(Tde);U2o=r(lgt,"mobilevit"),lgt.forEach(t),J2o=r(w8e," \u2014 "),Fq=n(w8e,"A",{href:!0});var igt=s(Fq);Y2o=r(igt,"MobileViTFeatureExtractor"),igt.forEach(t),K2o=r(w8e," (MobileViT model)"),w8e.forEach(t),Z2o=i(K),rp=n(K,"LI",{});var A8e=s(rp);Mde=n(A8e,"STRONG",{});var dgt=s(Mde);e4o=r(dgt,"perceiver"),dgt.forEach(t),o4o=r(A8e," \u2014 "),Tq=n(A8e,"A",{href:!0});var cgt=s(Tq);r4o=r(cgt,"PerceiverFeatureExtractor"),cgt.forEach(t),t4o=r(A8e," (Perceiver model)"),A8e.forEach(t),a4o=i(K),tp=n(K,"LI",{});var L8e=s(tp);Ede=n(L8e,"STRONG",{});var fgt=s(Ede);n4o=r(fgt,"poolformer"),fgt.forEach(t),s4o=r(L8e," \u2014 "),Mq=n(L8e,"A",{href:!0});var mgt=s(Mq);l4o=r(mgt,"PoolFormerFeatureExtractor"),mgt.forEach(t),i4o=r(L8e," (PoolFormer model)"),L8e.forEach(t),d4o=i(K),ap=n(K,"LI",{});var y8e=s(ap);Cde=n(y8e,"STRONG",{});var ggt=s(Cde);c4o=r(ggt,"regnet"),ggt.forEach(t),f4o=r(y8e," \u2014 "),Eq=n(y8e,"A",{href:!0});var hgt=s(Eq);m4o=r(hgt,"ConvNextFeatureExtractor"),hgt.forEach(t),g4o=r(y8e," (RegNet model)"),y8e.forEach(t),h4o=i(K),np=n(K,"LI",{});var x8e=s(np);wde=n(x8e,"STRONG",{});var pgt=s(wde);p4o=r(pgt,"resnet"),pgt.forEach(t),_4o=r(x8e," \u2014 "),Cq=n(x8e,"A",{href:!0});var _gt=s(Cq);u4o=r(_gt,"ConvNextFeatureExtractor"),_gt.forEach(t),b4o=r(x8e," (ResNet model)"),x8e.forEach(t),v4o=i(K),sp=n(K,"LI",{});var $8e=s(sp);Ade=n($8e,"STRONG",{});var ugt=s(Ade);F4o=r(ugt,"segformer"),ugt.forEach(t),T4o=r($8e," \u2014 "),wq=n($8e,"A",{href:!0});var bgt=s(wq);M4o=r(bgt,"SegformerFeatureExtractor"),bgt.forEach(t),E4o=r($8e," (SegFormer model)"),$8e.forEach(t),C4o=i(K),lp=n(K,"LI",{});var k8e=s(lp);Lde=n(k8e,"STRONG",{});var vgt=s(Lde);w4o=r(vgt,"speech_to_text"),vgt.forEach(t),A4o=r(k8e," \u2014 "),Aq=n(k8e,"A",{href:!0});var Fgt=s(Aq);L4o=r(Fgt,"Speech2TextFeatureExtractor"),Fgt.forEach(t),y4o=r(k8e," (Speech2Text model)"),k8e.forEach(t),x4o=i(K),ip=n(K,"LI",{});var S8e=s(ip);yde=n(S8e,"STRONG",{});var Tgt=s(yde);$4o=r(Tgt,"swin"),Tgt.forEach(t),k4o=r(S8e," \u2014 "),Lq=n(S8e,"A",{href:!0});var Mgt=s(Lq);S4o=r(Mgt,"ViTFeatureExtractor"),Mgt.forEach(t),R4o=r(S8e," (Swin Transformer model)"),S8e.forEach(t),P4o=i(K),dp=n(K,"LI",{});var R8e=s(dp);xde=n(R8e,"STRONG",{});var Egt=s(xde);B4o=r(Egt,"swinv2"),Egt.forEach(t),I4o=r(R8e," \u2014 "),yq=n(R8e,"A",{href:!0});var Cgt=s(yq);N4o=r(Cgt,"ViTFeatureExtractor"),Cgt.forEach(t),q4o=r(R8e," (Swin Transformer V2 model)"),R8e.forEach(t),j4o=i(K),cp=n(K,"LI",{});var P8e=s(cp);$de=n(P8e,"STRONG",{});var wgt=s($de);D4o=r(wgt,"van"),wgt.forEach(t),G4o=r(P8e," \u2014 "),xq=n(P8e,"A",{href:!0});var Agt=s(xq);O4o=r(Agt,"ConvNextFeatureExtractor"),Agt.forEach(t),V4o=r(P8e," (VAN model)"),P8e.forEach(t),X4o=i(K),fp=n(K,"LI",{});var B8e=s(fp);kde=n(B8e,"STRONG",{});var Lgt=s(kde);z4o=r(Lgt,"vilt"),Lgt.forEach(t),Q4o=r(B8e," \u2014 "),$q=n(B8e,"A",{href:!0});var ygt=s($q);W4o=r(ygt,"ViltFeatureExtractor"),ygt.forEach(t),H4o=r(B8e," (ViLT model)"),B8e.forEach(t),U4o=i(K),mp=n(K,"LI",{});var I8e=s(mp);Sde=n(I8e,"STRONG",{});var xgt=s(Sde);J4o=r(xgt,"vit"),xgt.forEach(t),Y4o=r(I8e," \u2014 "),kq=n(I8e,"A",{href:!0});var $gt=s(kq);K4o=r($gt,"ViTFeatureExtractor"),$gt.forEach(t),Z4o=r(I8e," (ViT model)"),I8e.forEach(t),ebo=i(K),gp=n(K,"LI",{});var N8e=s(gp);Rde=n(N8e,"STRONG",{});var kgt=s(Rde);obo=r(kgt,"vit_mae"),kgt.forEach(t),rbo=r(N8e," \u2014 "),Sq=n(N8e,"A",{href:!0});var Sgt=s(Sq);tbo=r(Sgt,"ViTFeatureExtractor"),Sgt.forEach(t),abo=r(N8e," (ViTMAE model)"),N8e.forEach(t),nbo=i(K),hp=n(K,"LI",{});var q8e=s(hp);Pde=n(q8e,"STRONG",{});var Rgt=s(Pde);sbo=r(Rgt,"wav2vec2"),Rgt.forEach(t),lbo=r(q8e," \u2014 "),Rq=n(q8e,"A",{href:!0});var Pgt=s(Rq);ibo=r(Pgt,"Wav2Vec2FeatureExtractor"),Pgt.forEach(t),dbo=r(q8e," (Wav2Vec2 model)"),q8e.forEach(t),cbo=i(K),pp=n(K,"LI",{});var j8e=s(pp);Bde=n(j8e,"STRONG",{});var Bgt=s(Bde);fbo=r(Bgt,"wav2vec2-conformer"),Bgt.forEach(t),mbo=r(j8e," \u2014 "),Pq=n(j8e,"A",{href:!0});var Igt=s(Pq);gbo=r(Igt,"Wav2Vec2FeatureExtractor"),Igt.forEach(t),hbo=r(j8e," (Wav2Vec2-Conformer model)"),j8e.forEach(t),pbo=i(K),_p=n(K,"LI",{});var D8e=s(_p);Ide=n(D8e,"STRONG",{});var Ngt=s(Ide);_bo=r(Ngt,"yolos"),Ngt.forEach(t),ubo=r(D8e," \u2014 "),Bq=n(D8e,"A",{href:!0});var qgt=s(Bq);bbo=r(qgt,"YolosFeatureExtractor"),qgt.forEach(t),vbo=r(D8e," (YOLOS model)"),D8e.forEach(t),K.forEach(t),Fbo=i(na),T(up.$$.fragment,na),Tbo=i(na),T(bp.$$.fragment,na),na.forEach(t),Mbo=i(el),vp=n(el,"DIV",{class:!0});var $Qe=s(vp);T(xL.$$.fragment,$Qe),Ebo=i($Qe),Nde=n($Qe,"P",{});var jgt=s(Nde);Cbo=r(jgt,"Register a new feature extractor for this class."),jgt.forEach(t),$Qe.forEach(t),el.forEach(t),LXe=i(f),ji=n(f,"H2",{class:!0});var kQe=s(ji);Fp=n(kQe,"A",{id:!0,class:!0,href:!0});var Dgt=s(Fp);qde=n(Dgt,"SPAN",{});var Ggt=s(qde);T($L.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),wbo=i(kQe),jde=n(kQe,"SPAN",{});var Ogt=s(jde);Abo=r(Ogt,"AutoProcessor"),Ogt.forEach(t),kQe.forEach(t),yXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(kL.$$.fragment,ol),Lbo=i(ol),SL=n(ol,"P",{});var SQe=s(SL);ybo=r(SQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Iq=n(SQe,"A",{href:!0});var Vgt=s(Iq);xbo=r(Vgt,"AutoProcessor.from_pretrained()"),Vgt.forEach(t),$bo=r(SQe," class method."),SQe.forEach(t),kbo=i(ol),RL=n(ol,"P",{});var RQe=s(RL);Sbo=r(RQe,"This class cannot be instantiated directly using "),Dde=n(RQe,"CODE",{});var Xgt=s(Dde);Rbo=r(Xgt,"__init__()"),Xgt.forEach(t),Pbo=r(RQe," (throws an error)."),RQe.forEach(t),Bbo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(PL.$$.fragment,sa),Ibo=i(sa),Gde=n(sa,"P",{});var zgt=s(Gde);Nbo=r(zgt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zgt.forEach(t),qbo=i(sa),Di=n(sa,"P",{});var jre=s(Di);jbo=r(jre,"The processor class to instantiate is selected based on the "),Ode=n(jre,"CODE",{});var Qgt=s(Ode);Dbo=r(Qgt,"model_type"),Qgt.forEach(t),Gbo=r(jre,` property of the config object (either
passed as an argument or loaded from `),Vde=n(jre,"CODE",{});var Wgt=s(Vde);Obo=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),Vbo=r(jre," if possible):"),jre.forEach(t),Xbo=i(sa),he=n(sa,"UL",{});var be=s(he);Tp=n(be,"LI",{});var G8e=s(Tp);Xde=n(G8e,"STRONG",{});var Hgt=s(Xde);zbo=r(Hgt,"clip"),Hgt.forEach(t),Qbo=r(G8e," \u2014 "),Nq=n(G8e,"A",{href:!0});var Ugt=s(Nq);Wbo=r(Ugt,"CLIPProcessor"),Ugt.forEach(t),Hbo=r(G8e," (CLIP model)"),G8e.forEach(t),Ubo=i(be),Mp=n(be,"LI",{});var O8e=s(Mp);zde=n(O8e,"STRONG",{});var Jgt=s(zde);Jbo=r(Jgt,"flava"),Jgt.forEach(t),Ybo=r(O8e," \u2014 "),Qde=n(O8e,"CODE",{});var Ygt=s(Qde);Kbo=r(Ygt,"FLAVAProcessor"),Ygt.forEach(t),Zbo=r(O8e," (FLAVA model)"),O8e.forEach(t),evo=i(be),Ep=n(be,"LI",{});var V8e=s(Ep);Wde=n(V8e,"STRONG",{});var Kgt=s(Wde);ovo=r(Kgt,"groupvit"),Kgt.forEach(t),rvo=r(V8e," \u2014 "),qq=n(V8e,"A",{href:!0});var Zgt=s(qq);tvo=r(Zgt,"CLIPProcessor"),Zgt.forEach(t),avo=r(V8e," (GroupViT model)"),V8e.forEach(t),nvo=i(be),Cp=n(be,"LI",{});var X8e=s(Cp);Hde=n(X8e,"STRONG",{});var eht=s(Hde);svo=r(eht,"layoutlmv2"),eht.forEach(t),lvo=r(X8e," \u2014 "),jq=n(X8e,"A",{href:!0});var oht=s(jq);ivo=r(oht,"LayoutLMv2Processor"),oht.forEach(t),dvo=r(X8e," (LayoutLMv2 model)"),X8e.forEach(t),cvo=i(be),wp=n(be,"LI",{});var z8e=s(wp);Ude=n(z8e,"STRONG",{});var rht=s(Ude);fvo=r(rht,"layoutlmv3"),rht.forEach(t),mvo=r(z8e," \u2014 "),Dq=n(z8e,"A",{href:!0});var tht=s(Dq);gvo=r(tht,"LayoutLMv3Processor"),tht.forEach(t),hvo=r(z8e," (LayoutLMv3 model)"),z8e.forEach(t),pvo=i(be),Ap=n(be,"LI",{});var Q8e=s(Ap);Jde=n(Q8e,"STRONG",{});var aht=s(Jde);_vo=r(aht,"layoutxlm"),aht.forEach(t),uvo=r(Q8e," \u2014 "),Gq=n(Q8e,"A",{href:!0});var nht=s(Gq);bvo=r(nht,"LayoutXLMProcessor"),nht.forEach(t),vvo=r(Q8e," (LayoutXLM model)"),Q8e.forEach(t),Fvo=i(be),Lp=n(be,"LI",{});var W8e=s(Lp);Yde=n(W8e,"STRONG",{});var sht=s(Yde);Tvo=r(sht,"sew"),sht.forEach(t),Mvo=r(W8e," \u2014 "),Oq=n(W8e,"A",{href:!0});var lht=s(Oq);Evo=r(lht,"Wav2Vec2Processor"),lht.forEach(t),Cvo=r(W8e," (SEW model)"),W8e.forEach(t),wvo=i(be),yp=n(be,"LI",{});var H8e=s(yp);Kde=n(H8e,"STRONG",{});var iht=s(Kde);Avo=r(iht,"sew-d"),iht.forEach(t),Lvo=r(H8e," \u2014 "),Vq=n(H8e,"A",{href:!0});var dht=s(Vq);yvo=r(dht,"Wav2Vec2Processor"),dht.forEach(t),xvo=r(H8e," (SEW-D model)"),H8e.forEach(t),$vo=i(be),xp=n(be,"LI",{});var U8e=s(xp);Zde=n(U8e,"STRONG",{});var cht=s(Zde);kvo=r(cht,"speech_to_text"),cht.forEach(t),Svo=r(U8e," \u2014 "),Xq=n(U8e,"A",{href:!0});var fht=s(Xq);Rvo=r(fht,"Speech2TextProcessor"),fht.forEach(t),Pvo=r(U8e," (Speech2Text model)"),U8e.forEach(t),Bvo=i(be),$p=n(be,"LI",{});var J8e=s($p);ece=n(J8e,"STRONG",{});var mht=s(ece);Ivo=r(mht,"speech_to_text_2"),mht.forEach(t),Nvo=r(J8e," \u2014 "),zq=n(J8e,"A",{href:!0});var ght=s(zq);qvo=r(ght,"Speech2Text2Processor"),ght.forEach(t),jvo=r(J8e," (Speech2Text2 model)"),J8e.forEach(t),Dvo=i(be),kp=n(be,"LI",{});var Y8e=s(kp);oce=n(Y8e,"STRONG",{});var hht=s(oce);Gvo=r(hht,"trocr"),hht.forEach(t),Ovo=r(Y8e," \u2014 "),Qq=n(Y8e,"A",{href:!0});var pht=s(Qq);Vvo=r(pht,"TrOCRProcessor"),pht.forEach(t),Xvo=r(Y8e," (TrOCR model)"),Y8e.forEach(t),zvo=i(be),Sp=n(be,"LI",{});var K8e=s(Sp);rce=n(K8e,"STRONG",{});var _ht=s(rce);Qvo=r(_ht,"unispeech"),_ht.forEach(t),Wvo=r(K8e," \u2014 "),Wq=n(K8e,"A",{href:!0});var uht=s(Wq);Hvo=r(uht,"Wav2Vec2Processor"),uht.forEach(t),Uvo=r(K8e," (UniSpeech model)"),K8e.forEach(t),Jvo=i(be),Rp=n(be,"LI",{});var Z8e=s(Rp);tce=n(Z8e,"STRONG",{});var bht=s(tce);Yvo=r(bht,"unispeech-sat"),bht.forEach(t),Kvo=r(Z8e," \u2014 "),Hq=n(Z8e,"A",{href:!0});var vht=s(Hq);Zvo=r(vht,"Wav2Vec2Processor"),vht.forEach(t),eFo=r(Z8e," (UniSpeechSat model)"),Z8e.forEach(t),oFo=i(be),Pp=n(be,"LI",{});var exe=s(Pp);ace=n(exe,"STRONG",{});var Fht=s(ace);rFo=r(Fht,"vilt"),Fht.forEach(t),tFo=r(exe," \u2014 "),Uq=n(exe,"A",{href:!0});var Tht=s(Uq);aFo=r(Tht,"ViltProcessor"),Tht.forEach(t),nFo=r(exe," (ViLT model)"),exe.forEach(t),sFo=i(be),Bp=n(be,"LI",{});var oxe=s(Bp);nce=n(oxe,"STRONG",{});var Mht=s(nce);lFo=r(Mht,"vision-text-dual-encoder"),Mht.forEach(t),iFo=r(oxe," \u2014 "),Jq=n(oxe,"A",{href:!0});var Eht=s(Jq);dFo=r(Eht,"VisionTextDualEncoderProcessor"),Eht.forEach(t),cFo=r(oxe," (VisionTextDualEncoder model)"),oxe.forEach(t),fFo=i(be),Ip=n(be,"LI",{});var rxe=s(Ip);sce=n(rxe,"STRONG",{});var Cht=s(sce);mFo=r(Cht,"wav2vec2"),Cht.forEach(t),gFo=r(rxe," \u2014 "),Yq=n(rxe,"A",{href:!0});var wht=s(Yq);hFo=r(wht,"Wav2Vec2Processor"),wht.forEach(t),pFo=r(rxe," (Wav2Vec2 model)"),rxe.forEach(t),_Fo=i(be),Np=n(be,"LI",{});var txe=s(Np);lce=n(txe,"STRONG",{});var Aht=s(lce);uFo=r(Aht,"wav2vec2-conformer"),Aht.forEach(t),bFo=r(txe," \u2014 "),Kq=n(txe,"A",{href:!0});var Lht=s(Kq);vFo=r(Lht,"Wav2Vec2Processor"),Lht.forEach(t),FFo=r(txe," (Wav2Vec2-Conformer model)"),txe.forEach(t),TFo=i(be),qp=n(be,"LI",{});var axe=s(qp);ice=n(axe,"STRONG",{});var yht=s(ice);MFo=r(yht,"wavlm"),yht.forEach(t),EFo=r(axe," \u2014 "),Zq=n(axe,"A",{href:!0});var xht=s(Zq);CFo=r(xht,"Wav2Vec2Processor"),xht.forEach(t),wFo=r(axe," (WavLM model)"),axe.forEach(t),be.forEach(t),AFo=i(sa),T(jp.$$.fragment,sa),LFo=i(sa),T(Dp.$$.fragment,sa),sa.forEach(t),yFo=i(ol),Gp=n(ol,"DIV",{class:!0});var PQe=s(Gp);T(BL.$$.fragment,PQe),xFo=i(PQe),dce=n(PQe,"P",{});var $ht=s(dce);$Fo=r($ht,"Register a new processor for this class."),$ht.forEach(t),PQe.forEach(t),ol.forEach(t),xXe=i(f),Gi=n(f,"H2",{class:!0});var BQe=s(Gi);Op=n(BQe,"A",{id:!0,class:!0,href:!0});var kht=s(Op);cce=n(kht,"SPAN",{});var Sht=s(cce);T(IL.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),kFo=i(BQe),fce=n(BQe,"SPAN",{});var Rht=s(fce);SFo=r(Rht,"AutoModel"),Rht.forEach(t),BQe.forEach(t),$Xe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(NL.$$.fragment,rl),RFo=i(rl),Oi=n(rl,"P",{});var Dre=s(Oi);PFo=r(Dre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ej=n(Dre,"A",{href:!0});var Pht=s(ej);BFo=r(Pht,"from_pretrained()"),Pht.forEach(t),IFo=r(Dre," class method or the "),oj=n(Dre,"A",{href:!0});var Bht=s(oj);NFo=r(Bht,"from_config()"),Bht.forEach(t),qFo=r(Dre,` class
method.`),Dre.forEach(t),jFo=i(rl),qL=n(rl,"P",{});var IQe=s(qL);DFo=r(IQe,"This class cannot be instantiated directly using "),mce=n(IQe,"CODE",{});var Iht=s(mce);GFo=r(Iht,"__init__()"),Iht.forEach(t),OFo=r(IQe," (throws an error)."),IQe.forEach(t),VFo=i(rl),it=n(rl,"DIV",{class:!0});var gw=s(it);T(jL.$$.fragment,gw),XFo=i(gw),gce=n(gw,"P",{});var Nht=s(gce);zFo=r(Nht,"Instantiates one of the base model classes of the library from a configuration."),Nht.forEach(t),QFo=i(gw),Vi=n(gw,"P",{});var Gre=s(Vi);WFo=r(Gre,`Note:
Loading a model from its configuration file does `),hce=n(Gre,"STRONG",{});var qht=s(hce);HFo=r(qht,"not"),qht.forEach(t),UFo=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=n(Gre,"A",{href:!0});var jht=s(rj);JFo=r(jht,"from_pretrained()"),jht.forEach(t),YFo=r(Gre," to load the model weights."),Gre.forEach(t),KFo=i(gw),T(Vp.$$.fragment,gw),gw.forEach(t),ZFo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(DL.$$.fragment,la),e6o=i(la),pce=n(la,"P",{});var Dht=s(pce);o6o=r(Dht,"Instantiate one of the base model classes of the library from a pretrained model."),Dht.forEach(t),r6o=i(la),Ia=n(la,"P",{});var hw=s(Ia);t6o=r(hw,"The model class to instantiate is selected based on the "),_ce=n(hw,"CODE",{});var Ght=s(_ce);a6o=r(Ght,"model_type"),Ght.forEach(t),n6o=r(hw,` property of the config object (either
passed as an argument or loaded from `),uce=n(hw,"CODE",{});var Oht=s(uce);s6o=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),l6o=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(hw,"CODE",{});var Vht=s(bce);i6o=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),d6o=r(hw,":"),hw.forEach(t),c6o=i(la),y=n(la,"UL",{});var x=s(y);Xp=n(x,"LI",{});var nxe=s(Xp);vce=n(nxe,"STRONG",{});var Xht=s(vce);f6o=r(Xht,"albert"),Xht.forEach(t),m6o=r(nxe," \u2014 "),tj=n(nxe,"A",{href:!0});var zht=s(tj);g6o=r(zht,"AlbertModel"),zht.forEach(t),h6o=r(nxe," (ALBERT model)"),nxe.forEach(t),p6o=i(x),zp=n(x,"LI",{});var sxe=s(zp);Fce=n(sxe,"STRONG",{});var Qht=s(Fce);_6o=r(Qht,"bart"),Qht.forEach(t),u6o=r(sxe," \u2014 "),aj=n(sxe,"A",{href:!0});var Wht=s(aj);b6o=r(Wht,"BartModel"),Wht.forEach(t),v6o=r(sxe," (BART model)"),sxe.forEach(t),F6o=i(x),Qp=n(x,"LI",{});var lxe=s(Qp);Tce=n(lxe,"STRONG",{});var Hht=s(Tce);T6o=r(Hht,"beit"),Hht.forEach(t),M6o=r(lxe," \u2014 "),nj=n(lxe,"A",{href:!0});var Uht=s(nj);E6o=r(Uht,"BeitModel"),Uht.forEach(t),C6o=r(lxe," (BEiT model)"),lxe.forEach(t),w6o=i(x),Wp=n(x,"LI",{});var ixe=s(Wp);Mce=n(ixe,"STRONG",{});var Jht=s(Mce);A6o=r(Jht,"bert"),Jht.forEach(t),L6o=r(ixe," \u2014 "),sj=n(ixe,"A",{href:!0});var Yht=s(sj);y6o=r(Yht,"BertModel"),Yht.forEach(t),x6o=r(ixe," (BERT model)"),ixe.forEach(t),$6o=i(x),Hp=n(x,"LI",{});var dxe=s(Hp);Ece=n(dxe,"STRONG",{});var Kht=s(Ece);k6o=r(Kht,"bert-generation"),Kht.forEach(t),S6o=r(dxe," \u2014 "),lj=n(dxe,"A",{href:!0});var Zht=s(lj);R6o=r(Zht,"BertGenerationEncoder"),Zht.forEach(t),P6o=r(dxe," (Bert Generation model)"),dxe.forEach(t),B6o=i(x),Up=n(x,"LI",{});var cxe=s(Up);Cce=n(cxe,"STRONG",{});var ept=s(Cce);I6o=r(ept,"big_bird"),ept.forEach(t),N6o=r(cxe," \u2014 "),ij=n(cxe,"A",{href:!0});var opt=s(ij);q6o=r(opt,"BigBirdModel"),opt.forEach(t),j6o=r(cxe," (BigBird model)"),cxe.forEach(t),D6o=i(x),Jp=n(x,"LI",{});var fxe=s(Jp);wce=n(fxe,"STRONG",{});var rpt=s(wce);G6o=r(rpt,"bigbird_pegasus"),rpt.forEach(t),O6o=r(fxe," \u2014 "),dj=n(fxe,"A",{href:!0});var tpt=s(dj);V6o=r(tpt,"BigBirdPegasusModel"),tpt.forEach(t),X6o=r(fxe," (BigBird-Pegasus model)"),fxe.forEach(t),z6o=i(x),Yp=n(x,"LI",{});var mxe=s(Yp);Ace=n(mxe,"STRONG",{});var apt=s(Ace);Q6o=r(apt,"blenderbot"),apt.forEach(t),W6o=r(mxe," \u2014 "),cj=n(mxe,"A",{href:!0});var npt=s(cj);H6o=r(npt,"BlenderbotModel"),npt.forEach(t),U6o=r(mxe," (Blenderbot model)"),mxe.forEach(t),J6o=i(x),Kp=n(x,"LI",{});var gxe=s(Kp);Lce=n(gxe,"STRONG",{});var spt=s(Lce);Y6o=r(spt,"blenderbot-small"),spt.forEach(t),K6o=r(gxe," \u2014 "),fj=n(gxe,"A",{href:!0});var lpt=s(fj);Z6o=r(lpt,"BlenderbotSmallModel"),lpt.forEach(t),eTo=r(gxe," (BlenderbotSmall model)"),gxe.forEach(t),oTo=i(x),Zp=n(x,"LI",{});var hxe=s(Zp);yce=n(hxe,"STRONG",{});var ipt=s(yce);rTo=r(ipt,"bloom"),ipt.forEach(t),tTo=r(hxe," \u2014 "),mj=n(hxe,"A",{href:!0});var dpt=s(mj);aTo=r(dpt,"BloomModel"),dpt.forEach(t),nTo=r(hxe," (BLOOM model)"),hxe.forEach(t),sTo=i(x),e_=n(x,"LI",{});var pxe=s(e_);xce=n(pxe,"STRONG",{});var cpt=s(xce);lTo=r(cpt,"camembert"),cpt.forEach(t),iTo=r(pxe," \u2014 "),gj=n(pxe,"A",{href:!0});var fpt=s(gj);dTo=r(fpt,"CamembertModel"),fpt.forEach(t),cTo=r(pxe," (CamemBERT model)"),pxe.forEach(t),fTo=i(x),o_=n(x,"LI",{});var _xe=s(o_);$ce=n(_xe,"STRONG",{});var mpt=s($ce);mTo=r(mpt,"canine"),mpt.forEach(t),gTo=r(_xe," \u2014 "),hj=n(_xe,"A",{href:!0});var gpt=s(hj);hTo=r(gpt,"CanineModel"),gpt.forEach(t),pTo=r(_xe," (CANINE model)"),_xe.forEach(t),_To=i(x),r_=n(x,"LI",{});var uxe=s(r_);kce=n(uxe,"STRONG",{});var hpt=s(kce);uTo=r(hpt,"clip"),hpt.forEach(t),bTo=r(uxe," \u2014 "),pj=n(uxe,"A",{href:!0});var ppt=s(pj);vTo=r(ppt,"CLIPModel"),ppt.forEach(t),FTo=r(uxe," (CLIP model)"),uxe.forEach(t),TTo=i(x),t_=n(x,"LI",{});var bxe=s(t_);Sce=n(bxe,"STRONG",{});var _pt=s(Sce);MTo=r(_pt,"codegen"),_pt.forEach(t),ETo=r(bxe," \u2014 "),_j=n(bxe,"A",{href:!0});var upt=s(_j);CTo=r(upt,"CodeGenModel"),upt.forEach(t),wTo=r(bxe," (CodeGen model)"),bxe.forEach(t),ATo=i(x),a_=n(x,"LI",{});var vxe=s(a_);Rce=n(vxe,"STRONG",{});var bpt=s(Rce);LTo=r(bpt,"convbert"),bpt.forEach(t),yTo=r(vxe," \u2014 "),uj=n(vxe,"A",{href:!0});var vpt=s(uj);xTo=r(vpt,"ConvBertModel"),vpt.forEach(t),$To=r(vxe," (ConvBERT model)"),vxe.forEach(t),kTo=i(x),n_=n(x,"LI",{});var Fxe=s(n_);Pce=n(Fxe,"STRONG",{});var Fpt=s(Pce);STo=r(Fpt,"convnext"),Fpt.forEach(t),RTo=r(Fxe," \u2014 "),bj=n(Fxe,"A",{href:!0});var Tpt=s(bj);PTo=r(Tpt,"ConvNextModel"),Tpt.forEach(t),BTo=r(Fxe," (ConvNeXT model)"),Fxe.forEach(t),ITo=i(x),s_=n(x,"LI",{});var Txe=s(s_);Bce=n(Txe,"STRONG",{});var Mpt=s(Bce);NTo=r(Mpt,"ctrl"),Mpt.forEach(t),qTo=r(Txe," \u2014 "),vj=n(Txe,"A",{href:!0});var Ept=s(vj);jTo=r(Ept,"CTRLModel"),Ept.forEach(t),DTo=r(Txe," (CTRL model)"),Txe.forEach(t),GTo=i(x),l_=n(x,"LI",{});var Mxe=s(l_);Ice=n(Mxe,"STRONG",{});var Cpt=s(Ice);OTo=r(Cpt,"cvt"),Cpt.forEach(t),VTo=r(Mxe," \u2014 "),Fj=n(Mxe,"A",{href:!0});var wpt=s(Fj);XTo=r(wpt,"CvtModel"),wpt.forEach(t),zTo=r(Mxe," (CvT model)"),Mxe.forEach(t),QTo=i(x),i_=n(x,"LI",{});var Exe=s(i_);Nce=n(Exe,"STRONG",{});var Apt=s(Nce);WTo=r(Apt,"data2vec-audio"),Apt.forEach(t),HTo=r(Exe," \u2014 "),Tj=n(Exe,"A",{href:!0});var Lpt=s(Tj);UTo=r(Lpt,"Data2VecAudioModel"),Lpt.forEach(t),JTo=r(Exe," (Data2VecAudio model)"),Exe.forEach(t),YTo=i(x),d_=n(x,"LI",{});var Cxe=s(d_);qce=n(Cxe,"STRONG",{});var ypt=s(qce);KTo=r(ypt,"data2vec-text"),ypt.forEach(t),ZTo=r(Cxe," \u2014 "),Mj=n(Cxe,"A",{href:!0});var xpt=s(Mj);e7o=r(xpt,"Data2VecTextModel"),xpt.forEach(t),o7o=r(Cxe," (Data2VecText model)"),Cxe.forEach(t),r7o=i(x),c_=n(x,"LI",{});var wxe=s(c_);jce=n(wxe,"STRONG",{});var $pt=s(jce);t7o=r($pt,"data2vec-vision"),$pt.forEach(t),a7o=r(wxe," \u2014 "),Ej=n(wxe,"A",{href:!0});var kpt=s(Ej);n7o=r(kpt,"Data2VecVisionModel"),kpt.forEach(t),s7o=r(wxe," (Data2VecVision model)"),wxe.forEach(t),l7o=i(x),f_=n(x,"LI",{});var Axe=s(f_);Dce=n(Axe,"STRONG",{});var Spt=s(Dce);i7o=r(Spt,"deberta"),Spt.forEach(t),d7o=r(Axe," \u2014 "),Cj=n(Axe,"A",{href:!0});var Rpt=s(Cj);c7o=r(Rpt,"DebertaModel"),Rpt.forEach(t),f7o=r(Axe," (DeBERTa model)"),Axe.forEach(t),m7o=i(x),m_=n(x,"LI",{});var Lxe=s(m_);Gce=n(Lxe,"STRONG",{});var Ppt=s(Gce);g7o=r(Ppt,"deberta-v2"),Ppt.forEach(t),h7o=r(Lxe," \u2014 "),wj=n(Lxe,"A",{href:!0});var Bpt=s(wj);p7o=r(Bpt,"DebertaV2Model"),Bpt.forEach(t),_7o=r(Lxe," (DeBERTa-v2 model)"),Lxe.forEach(t),u7o=i(x),g_=n(x,"LI",{});var yxe=s(g_);Oce=n(yxe,"STRONG",{});var Ipt=s(Oce);b7o=r(Ipt,"decision_transformer"),Ipt.forEach(t),v7o=r(yxe," \u2014 "),Aj=n(yxe,"A",{href:!0});var Npt=s(Aj);F7o=r(Npt,"DecisionTransformerModel"),Npt.forEach(t),T7o=r(yxe," (Decision Transformer model)"),yxe.forEach(t),M7o=i(x),h_=n(x,"LI",{});var xxe=s(h_);Vce=n(xxe,"STRONG",{});var qpt=s(Vce);E7o=r(qpt,"deit"),qpt.forEach(t),C7o=r(xxe," \u2014 "),Lj=n(xxe,"A",{href:!0});var jpt=s(Lj);w7o=r(jpt,"DeiTModel"),jpt.forEach(t),A7o=r(xxe," (DeiT model)"),xxe.forEach(t),L7o=i(x),p_=n(x,"LI",{});var $xe=s(p_);Xce=n($xe,"STRONG",{});var Dpt=s(Xce);y7o=r(Dpt,"detr"),Dpt.forEach(t),x7o=r($xe," \u2014 "),yj=n($xe,"A",{href:!0});var Gpt=s(yj);$7o=r(Gpt,"DetrModel"),Gpt.forEach(t),k7o=r($xe," (DETR model)"),$xe.forEach(t),S7o=i(x),__=n(x,"LI",{});var kxe=s(__);zce=n(kxe,"STRONG",{});var Opt=s(zce);R7o=r(Opt,"distilbert"),Opt.forEach(t),P7o=r(kxe," \u2014 "),xj=n(kxe,"A",{href:!0});var Vpt=s(xj);B7o=r(Vpt,"DistilBertModel"),Vpt.forEach(t),I7o=r(kxe," (DistilBERT model)"),kxe.forEach(t),N7o=i(x),u_=n(x,"LI",{});var Sxe=s(u_);Qce=n(Sxe,"STRONG",{});var Xpt=s(Qce);q7o=r(Xpt,"dpr"),Xpt.forEach(t),j7o=r(Sxe," \u2014 "),$j=n(Sxe,"A",{href:!0});var zpt=s($j);D7o=r(zpt,"DPRQuestionEncoder"),zpt.forEach(t),G7o=r(Sxe," (DPR model)"),Sxe.forEach(t),O7o=i(x),b_=n(x,"LI",{});var Rxe=s(b_);Wce=n(Rxe,"STRONG",{});var Qpt=s(Wce);V7o=r(Qpt,"dpt"),Qpt.forEach(t),X7o=r(Rxe," \u2014 "),kj=n(Rxe,"A",{href:!0});var Wpt=s(kj);z7o=r(Wpt,"DPTModel"),Wpt.forEach(t),Q7o=r(Rxe," (DPT model)"),Rxe.forEach(t),W7o=i(x),v_=n(x,"LI",{});var Pxe=s(v_);Hce=n(Pxe,"STRONG",{});var Hpt=s(Hce);H7o=r(Hpt,"electra"),Hpt.forEach(t),U7o=r(Pxe," \u2014 "),Sj=n(Pxe,"A",{href:!0});var Upt=s(Sj);J7o=r(Upt,"ElectraModel"),Upt.forEach(t),Y7o=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),K7o=i(x),F_=n(x,"LI",{});var Bxe=s(F_);Uce=n(Bxe,"STRONG",{});var Jpt=s(Uce);Z7o=r(Jpt,"flaubert"),Jpt.forEach(t),e9o=r(Bxe," \u2014 "),Rj=n(Bxe,"A",{href:!0});var Ypt=s(Rj);o9o=r(Ypt,"FlaubertModel"),Ypt.forEach(t),r9o=r(Bxe," (FlauBERT model)"),Bxe.forEach(t),t9o=i(x),T_=n(x,"LI",{});var Ixe=s(T_);Jce=n(Ixe,"STRONG",{});var Kpt=s(Jce);a9o=r(Kpt,"flava"),Kpt.forEach(t),n9o=r(Ixe," \u2014 "),Pj=n(Ixe,"A",{href:!0});var Zpt=s(Pj);s9o=r(Zpt,"FlavaModel"),Zpt.forEach(t),l9o=r(Ixe," (FLAVA model)"),Ixe.forEach(t),i9o=i(x),M_=n(x,"LI",{});var Nxe=s(M_);Yce=n(Nxe,"STRONG",{});var e_t=s(Yce);d9o=r(e_t,"fnet"),e_t.forEach(t),c9o=r(Nxe," \u2014 "),Bj=n(Nxe,"A",{href:!0});var o_t=s(Bj);f9o=r(o_t,"FNetModel"),o_t.forEach(t),m9o=r(Nxe," (FNet model)"),Nxe.forEach(t),g9o=i(x),E_=n(x,"LI",{});var qxe=s(E_);Kce=n(qxe,"STRONG",{});var r_t=s(Kce);h9o=r(r_t,"fsmt"),r_t.forEach(t),p9o=r(qxe," \u2014 "),Ij=n(qxe,"A",{href:!0});var t_t=s(Ij);_9o=r(t_t,"FSMTModel"),t_t.forEach(t),u9o=r(qxe," (FairSeq Machine-Translation model)"),qxe.forEach(t),b9o=i(x),Hs=n(x,"LI",{});var IS=s(Hs);Zce=n(IS,"STRONG",{});var a_t=s(Zce);v9o=r(a_t,"funnel"),a_t.forEach(t),F9o=r(IS," \u2014 "),Nj=n(IS,"A",{href:!0});var n_t=s(Nj);T9o=r(n_t,"FunnelModel"),n_t.forEach(t),M9o=r(IS," or "),qj=n(IS,"A",{href:!0});var s_t=s(qj);E9o=r(s_t,"FunnelBaseModel"),s_t.forEach(t),C9o=r(IS," (Funnel Transformer model)"),IS.forEach(t),w9o=i(x),C_=n(x,"LI",{});var jxe=s(C_);efe=n(jxe,"STRONG",{});var l_t=s(efe);A9o=r(l_t,"glpn"),l_t.forEach(t),L9o=r(jxe," \u2014 "),jj=n(jxe,"A",{href:!0});var i_t=s(jj);y9o=r(i_t,"GLPNModel"),i_t.forEach(t),x9o=r(jxe," (GLPN model)"),jxe.forEach(t),$9o=i(x),w_=n(x,"LI",{});var Dxe=s(w_);ofe=n(Dxe,"STRONG",{});var d_t=s(ofe);k9o=r(d_t,"gpt2"),d_t.forEach(t),S9o=r(Dxe," \u2014 "),Dj=n(Dxe,"A",{href:!0});var c_t=s(Dj);R9o=r(c_t,"GPT2Model"),c_t.forEach(t),P9o=r(Dxe," (OpenAI GPT-2 model)"),Dxe.forEach(t),B9o=i(x),A_=n(x,"LI",{});var Gxe=s(A_);rfe=n(Gxe,"STRONG",{});var f_t=s(rfe);I9o=r(f_t,"gpt_neo"),f_t.forEach(t),N9o=r(Gxe," \u2014 "),Gj=n(Gxe,"A",{href:!0});var m_t=s(Gj);q9o=r(m_t,"GPTNeoModel"),m_t.forEach(t),j9o=r(Gxe," (GPT Neo model)"),Gxe.forEach(t),D9o=i(x),L_=n(x,"LI",{});var Oxe=s(L_);tfe=n(Oxe,"STRONG",{});var g_t=s(tfe);G9o=r(g_t,"gpt_neox"),g_t.forEach(t),O9o=r(Oxe," \u2014 "),Oj=n(Oxe,"A",{href:!0});var h_t=s(Oj);V9o=r(h_t,"GPTNeoXModel"),h_t.forEach(t),X9o=r(Oxe," (GPT NeoX model)"),Oxe.forEach(t),z9o=i(x),y_=n(x,"LI",{});var Vxe=s(y_);afe=n(Vxe,"STRONG",{});var p_t=s(afe);Q9o=r(p_t,"gptj"),p_t.forEach(t),W9o=r(Vxe," \u2014 "),Vj=n(Vxe,"A",{href:!0});var __t=s(Vj);H9o=r(__t,"GPTJModel"),__t.forEach(t),U9o=r(Vxe," (GPT-J model)"),Vxe.forEach(t),J9o=i(x),x_=n(x,"LI",{});var Xxe=s(x_);nfe=n(Xxe,"STRONG",{});var u_t=s(nfe);Y9o=r(u_t,"groupvit"),u_t.forEach(t),K9o=r(Xxe," \u2014 "),Xj=n(Xxe,"A",{href:!0});var b_t=s(Xj);Z9o=r(b_t,"GroupViTModel"),b_t.forEach(t),eMo=r(Xxe," (GroupViT model)"),Xxe.forEach(t),oMo=i(x),$_=n(x,"LI",{});var zxe=s($_);sfe=n(zxe,"STRONG",{});var v_t=s(sfe);rMo=r(v_t,"hubert"),v_t.forEach(t),tMo=r(zxe," \u2014 "),zj=n(zxe,"A",{href:!0});var F_t=s(zj);aMo=r(F_t,"HubertModel"),F_t.forEach(t),nMo=r(zxe," (Hubert model)"),zxe.forEach(t),sMo=i(x),k_=n(x,"LI",{});var Qxe=s(k_);lfe=n(Qxe,"STRONG",{});var T_t=s(lfe);lMo=r(T_t,"ibert"),T_t.forEach(t),iMo=r(Qxe," \u2014 "),Qj=n(Qxe,"A",{href:!0});var M_t=s(Qj);dMo=r(M_t,"IBertModel"),M_t.forEach(t),cMo=r(Qxe," (I-BERT model)"),Qxe.forEach(t),fMo=i(x),S_=n(x,"LI",{});var Wxe=s(S_);ife=n(Wxe,"STRONG",{});var E_t=s(ife);mMo=r(E_t,"imagegpt"),E_t.forEach(t),gMo=r(Wxe," \u2014 "),Wj=n(Wxe,"A",{href:!0});var C_t=s(Wj);hMo=r(C_t,"ImageGPTModel"),C_t.forEach(t),pMo=r(Wxe," (ImageGPT model)"),Wxe.forEach(t),_Mo=i(x),R_=n(x,"LI",{});var Hxe=s(R_);dfe=n(Hxe,"STRONG",{});var w_t=s(dfe);uMo=r(w_t,"layoutlm"),w_t.forEach(t),bMo=r(Hxe," \u2014 "),Hj=n(Hxe,"A",{href:!0});var A_t=s(Hj);vMo=r(A_t,"LayoutLMModel"),A_t.forEach(t),FMo=r(Hxe," (LayoutLM model)"),Hxe.forEach(t),TMo=i(x),P_=n(x,"LI",{});var Uxe=s(P_);cfe=n(Uxe,"STRONG",{});var L_t=s(cfe);MMo=r(L_t,"layoutlmv2"),L_t.forEach(t),EMo=r(Uxe," \u2014 "),Uj=n(Uxe,"A",{href:!0});var y_t=s(Uj);CMo=r(y_t,"LayoutLMv2Model"),y_t.forEach(t),wMo=r(Uxe," (LayoutLMv2 model)"),Uxe.forEach(t),AMo=i(x),B_=n(x,"LI",{});var Jxe=s(B_);ffe=n(Jxe,"STRONG",{});var x_t=s(ffe);LMo=r(x_t,"layoutlmv3"),x_t.forEach(t),yMo=r(Jxe," \u2014 "),Jj=n(Jxe,"A",{href:!0});var $_t=s(Jj);xMo=r($_t,"LayoutLMv3Model"),$_t.forEach(t),$Mo=r(Jxe," (LayoutLMv3 model)"),Jxe.forEach(t),kMo=i(x),I_=n(x,"LI",{});var Yxe=s(I_);mfe=n(Yxe,"STRONG",{});var k_t=s(mfe);SMo=r(k_t,"led"),k_t.forEach(t),RMo=r(Yxe," \u2014 "),Yj=n(Yxe,"A",{href:!0});var S_t=s(Yj);PMo=r(S_t,"LEDModel"),S_t.forEach(t),BMo=r(Yxe," (LED model)"),Yxe.forEach(t),IMo=i(x),N_=n(x,"LI",{});var Kxe=s(N_);gfe=n(Kxe,"STRONG",{});var R_t=s(gfe);NMo=r(R_t,"levit"),R_t.forEach(t),qMo=r(Kxe," \u2014 "),Kj=n(Kxe,"A",{href:!0});var P_t=s(Kj);jMo=r(P_t,"LevitModel"),P_t.forEach(t),DMo=r(Kxe," (LeViT model)"),Kxe.forEach(t),GMo=i(x),q_=n(x,"LI",{});var Zxe=s(q_);hfe=n(Zxe,"STRONG",{});var B_t=s(hfe);OMo=r(B_t,"longformer"),B_t.forEach(t),VMo=r(Zxe," \u2014 "),Zj=n(Zxe,"A",{href:!0});var I_t=s(Zj);XMo=r(I_t,"LongformerModel"),I_t.forEach(t),zMo=r(Zxe," (Longformer model)"),Zxe.forEach(t),QMo=i(x),j_=n(x,"LI",{});var e$e=s(j_);pfe=n(e$e,"STRONG",{});var N_t=s(pfe);WMo=r(N_t,"longt5"),N_t.forEach(t),HMo=r(e$e," \u2014 "),eD=n(e$e,"A",{href:!0});var q_t=s(eD);UMo=r(q_t,"LongT5Model"),q_t.forEach(t),JMo=r(e$e," (LongT5 model)"),e$e.forEach(t),YMo=i(x),D_=n(x,"LI",{});var o$e=s(D_);_fe=n(o$e,"STRONG",{});var j_t=s(_fe);KMo=r(j_t,"luke"),j_t.forEach(t),ZMo=r(o$e," \u2014 "),oD=n(o$e,"A",{href:!0});var D_t=s(oD);eEo=r(D_t,"LukeModel"),D_t.forEach(t),oEo=r(o$e," (LUKE model)"),o$e.forEach(t),rEo=i(x),G_=n(x,"LI",{});var r$e=s(G_);ufe=n(r$e,"STRONG",{});var G_t=s(ufe);tEo=r(G_t,"lxmert"),G_t.forEach(t),aEo=r(r$e," \u2014 "),rD=n(r$e,"A",{href:!0});var O_t=s(rD);nEo=r(O_t,"LxmertModel"),O_t.forEach(t),sEo=r(r$e," (LXMERT model)"),r$e.forEach(t),lEo=i(x),O_=n(x,"LI",{});var t$e=s(O_);bfe=n(t$e,"STRONG",{});var V_t=s(bfe);iEo=r(V_t,"m2m_100"),V_t.forEach(t),dEo=r(t$e," \u2014 "),tD=n(t$e,"A",{href:!0});var X_t=s(tD);cEo=r(X_t,"M2M100Model"),X_t.forEach(t),fEo=r(t$e," (M2M100 model)"),t$e.forEach(t),mEo=i(x),V_=n(x,"LI",{});var a$e=s(V_);vfe=n(a$e,"STRONG",{});var z_t=s(vfe);gEo=r(z_t,"marian"),z_t.forEach(t),hEo=r(a$e," \u2014 "),aD=n(a$e,"A",{href:!0});var Q_t=s(aD);pEo=r(Q_t,"MarianModel"),Q_t.forEach(t),_Eo=r(a$e," (Marian model)"),a$e.forEach(t),uEo=i(x),X_=n(x,"LI",{});var n$e=s(X_);Ffe=n(n$e,"STRONG",{});var W_t=s(Ffe);bEo=r(W_t,"maskformer"),W_t.forEach(t),vEo=r(n$e," \u2014 "),nD=n(n$e,"A",{href:!0});var H_t=s(nD);FEo=r(H_t,"MaskFormerModel"),H_t.forEach(t),TEo=r(n$e," (MaskFormer model)"),n$e.forEach(t),MEo=i(x),z_=n(x,"LI",{});var s$e=s(z_);Tfe=n(s$e,"STRONG",{});var U_t=s(Tfe);EEo=r(U_t,"mbart"),U_t.forEach(t),CEo=r(s$e," \u2014 "),sD=n(s$e,"A",{href:!0});var J_t=s(sD);wEo=r(J_t,"MBartModel"),J_t.forEach(t),AEo=r(s$e," (mBART model)"),s$e.forEach(t),LEo=i(x),Q_=n(x,"LI",{});var l$e=s(Q_);Mfe=n(l$e,"STRONG",{});var Y_t=s(Mfe);yEo=r(Y_t,"mctct"),Y_t.forEach(t),xEo=r(l$e," \u2014 "),lD=n(l$e,"A",{href:!0});var K_t=s(lD);$Eo=r(K_t,"MCTCTModel"),K_t.forEach(t),kEo=r(l$e," (M-CTC-T model)"),l$e.forEach(t),SEo=i(x),W_=n(x,"LI",{});var i$e=s(W_);Efe=n(i$e,"STRONG",{});var Z_t=s(Efe);REo=r(Z_t,"megatron-bert"),Z_t.forEach(t),PEo=r(i$e," \u2014 "),iD=n(i$e,"A",{href:!0});var eut=s(iD);BEo=r(eut,"MegatronBertModel"),eut.forEach(t),IEo=r(i$e," (Megatron-BERT model)"),i$e.forEach(t),NEo=i(x),H_=n(x,"LI",{});var d$e=s(H_);Cfe=n(d$e,"STRONG",{});var out=s(Cfe);qEo=r(out,"mobilebert"),out.forEach(t),jEo=r(d$e," \u2014 "),dD=n(d$e,"A",{href:!0});var rut=s(dD);DEo=r(rut,"MobileBertModel"),rut.forEach(t),GEo=r(d$e," (MobileBERT model)"),d$e.forEach(t),OEo=i(x),U_=n(x,"LI",{});var c$e=s(U_);wfe=n(c$e,"STRONG",{});var tut=s(wfe);VEo=r(tut,"mobilevit"),tut.forEach(t),XEo=r(c$e," \u2014 "),cD=n(c$e,"A",{href:!0});var aut=s(cD);zEo=r(aut,"MobileViTModel"),aut.forEach(t),QEo=r(c$e," (MobileViT model)"),c$e.forEach(t),WEo=i(x),J_=n(x,"LI",{});var f$e=s(J_);Afe=n(f$e,"STRONG",{});var nut=s(Afe);HEo=r(nut,"mpnet"),nut.forEach(t),UEo=r(f$e," \u2014 "),fD=n(f$e,"A",{href:!0});var sut=s(fD);JEo=r(sut,"MPNetModel"),sut.forEach(t),YEo=r(f$e," (MPNet model)"),f$e.forEach(t),KEo=i(x),Y_=n(x,"LI",{});var m$e=s(Y_);Lfe=n(m$e,"STRONG",{});var lut=s(Lfe);ZEo=r(lut,"mt5"),lut.forEach(t),eCo=r(m$e," \u2014 "),mD=n(m$e,"A",{href:!0});var iut=s(mD);oCo=r(iut,"MT5Model"),iut.forEach(t),rCo=r(m$e," (MT5 model)"),m$e.forEach(t),tCo=i(x),K_=n(x,"LI",{});var g$e=s(K_);yfe=n(g$e,"STRONG",{});var dut=s(yfe);aCo=r(dut,"mvp"),dut.forEach(t),nCo=r(g$e," \u2014 "),gD=n(g$e,"A",{href:!0});var cut=s(gD);sCo=r(cut,"MvpModel"),cut.forEach(t),lCo=r(g$e," (MVP model)"),g$e.forEach(t),iCo=i(x),Z_=n(x,"LI",{});var h$e=s(Z_);xfe=n(h$e,"STRONG",{});var fut=s(xfe);dCo=r(fut,"nezha"),fut.forEach(t),cCo=r(h$e," \u2014 "),hD=n(h$e,"A",{href:!0});var mut=s(hD);fCo=r(mut,"NezhaModel"),mut.forEach(t),mCo=r(h$e," (Nezha model)"),h$e.forEach(t),gCo=i(x),eu=n(x,"LI",{});var p$e=s(eu);$fe=n(p$e,"STRONG",{});var gut=s($fe);hCo=r(gut,"nystromformer"),gut.forEach(t),pCo=r(p$e," \u2014 "),pD=n(p$e,"A",{href:!0});var hut=s(pD);_Co=r(hut,"NystromformerModel"),hut.forEach(t),uCo=r(p$e," (Nystr\xF6mformer model)"),p$e.forEach(t),bCo=i(x),ou=n(x,"LI",{});var _$e=s(ou);kfe=n(_$e,"STRONG",{});var put=s(kfe);vCo=r(put,"openai-gpt"),put.forEach(t),FCo=r(_$e," \u2014 "),_D=n(_$e,"A",{href:!0});var _ut=s(_D);TCo=r(_ut,"OpenAIGPTModel"),_ut.forEach(t),MCo=r(_$e," (OpenAI GPT model)"),_$e.forEach(t),ECo=i(x),ru=n(x,"LI",{});var u$e=s(ru);Sfe=n(u$e,"STRONG",{});var uut=s(Sfe);CCo=r(uut,"opt"),uut.forEach(t),wCo=r(u$e," \u2014 "),uD=n(u$e,"A",{href:!0});var but=s(uD);ACo=r(but,"OPTModel"),but.forEach(t),LCo=r(u$e," (OPT model)"),u$e.forEach(t),yCo=i(x),tu=n(x,"LI",{});var b$e=s(tu);Rfe=n(b$e,"STRONG",{});var vut=s(Rfe);xCo=r(vut,"pegasus"),vut.forEach(t),$Co=r(b$e," \u2014 "),bD=n(b$e,"A",{href:!0});var Fut=s(bD);kCo=r(Fut,"PegasusModel"),Fut.forEach(t),SCo=r(b$e," (Pegasus model)"),b$e.forEach(t),RCo=i(x),au=n(x,"LI",{});var v$e=s(au);Pfe=n(v$e,"STRONG",{});var Tut=s(Pfe);PCo=r(Tut,"perceiver"),Tut.forEach(t),BCo=r(v$e," \u2014 "),vD=n(v$e,"A",{href:!0});var Mut=s(vD);ICo=r(Mut,"PerceiverModel"),Mut.forEach(t),NCo=r(v$e," (Perceiver model)"),v$e.forEach(t),qCo=i(x),nu=n(x,"LI",{});var F$e=s(nu);Bfe=n(F$e,"STRONG",{});var Eut=s(Bfe);jCo=r(Eut,"plbart"),Eut.forEach(t),DCo=r(F$e," \u2014 "),FD=n(F$e,"A",{href:!0});var Cut=s(FD);GCo=r(Cut,"PLBartModel"),Cut.forEach(t),OCo=r(F$e," (PLBart model)"),F$e.forEach(t),VCo=i(x),su=n(x,"LI",{});var T$e=s(su);Ife=n(T$e,"STRONG",{});var wut=s(Ife);XCo=r(wut,"poolformer"),wut.forEach(t),zCo=r(T$e," \u2014 "),TD=n(T$e,"A",{href:!0});var Aut=s(TD);QCo=r(Aut,"PoolFormerModel"),Aut.forEach(t),WCo=r(T$e," (PoolFormer model)"),T$e.forEach(t),HCo=i(x),lu=n(x,"LI",{});var M$e=s(lu);Nfe=n(M$e,"STRONG",{});var Lut=s(Nfe);UCo=r(Lut,"prophetnet"),Lut.forEach(t),JCo=r(M$e," \u2014 "),MD=n(M$e,"A",{href:!0});var yut=s(MD);YCo=r(yut,"ProphetNetModel"),yut.forEach(t),KCo=r(M$e," (ProphetNet model)"),M$e.forEach(t),ZCo=i(x),iu=n(x,"LI",{});var E$e=s(iu);qfe=n(E$e,"STRONG",{});var xut=s(qfe);e3o=r(xut,"qdqbert"),xut.forEach(t),o3o=r(E$e," \u2014 "),ED=n(E$e,"A",{href:!0});var $ut=s(ED);r3o=r($ut,"QDQBertModel"),$ut.forEach(t),t3o=r(E$e," (QDQBert model)"),E$e.forEach(t),a3o=i(x),du=n(x,"LI",{});var C$e=s(du);jfe=n(C$e,"STRONG",{});var kut=s(jfe);n3o=r(kut,"reformer"),kut.forEach(t),s3o=r(C$e," \u2014 "),CD=n(C$e,"A",{href:!0});var Sut=s(CD);l3o=r(Sut,"ReformerModel"),Sut.forEach(t),i3o=r(C$e," (Reformer model)"),C$e.forEach(t),d3o=i(x),cu=n(x,"LI",{});var w$e=s(cu);Dfe=n(w$e,"STRONG",{});var Rut=s(Dfe);c3o=r(Rut,"regnet"),Rut.forEach(t),f3o=r(w$e," \u2014 "),wD=n(w$e,"A",{href:!0});var Put=s(wD);m3o=r(Put,"RegNetModel"),Put.forEach(t),g3o=r(w$e," (RegNet model)"),w$e.forEach(t),h3o=i(x),fu=n(x,"LI",{});var A$e=s(fu);Gfe=n(A$e,"STRONG",{});var But=s(Gfe);p3o=r(But,"rembert"),But.forEach(t),_3o=r(A$e," \u2014 "),AD=n(A$e,"A",{href:!0});var Iut=s(AD);u3o=r(Iut,"RemBertModel"),Iut.forEach(t),b3o=r(A$e," (RemBERT model)"),A$e.forEach(t),v3o=i(x),mu=n(x,"LI",{});var L$e=s(mu);Ofe=n(L$e,"STRONG",{});var Nut=s(Ofe);F3o=r(Nut,"resnet"),Nut.forEach(t),T3o=r(L$e," \u2014 "),LD=n(L$e,"A",{href:!0});var qut=s(LD);M3o=r(qut,"ResNetModel"),qut.forEach(t),E3o=r(L$e," (ResNet model)"),L$e.forEach(t),C3o=i(x),gu=n(x,"LI",{});var y$e=s(gu);Vfe=n(y$e,"STRONG",{});var jut=s(Vfe);w3o=r(jut,"retribert"),jut.forEach(t),A3o=r(y$e," \u2014 "),yD=n(y$e,"A",{href:!0});var Dut=s(yD);L3o=r(Dut,"RetriBertModel"),Dut.forEach(t),y3o=r(y$e," (RetriBERT model)"),y$e.forEach(t),x3o=i(x),hu=n(x,"LI",{});var x$e=s(hu);Xfe=n(x$e,"STRONG",{});var Gut=s(Xfe);$3o=r(Gut,"roberta"),Gut.forEach(t),k3o=r(x$e," \u2014 "),xD=n(x$e,"A",{href:!0});var Out=s(xD);S3o=r(Out,"RobertaModel"),Out.forEach(t),R3o=r(x$e," (RoBERTa model)"),x$e.forEach(t),P3o=i(x),pu=n(x,"LI",{});var $$e=s(pu);zfe=n($$e,"STRONG",{});var Vut=s(zfe);B3o=r(Vut,"roformer"),Vut.forEach(t),I3o=r($$e," \u2014 "),$D=n($$e,"A",{href:!0});var Xut=s($D);N3o=r(Xut,"RoFormerModel"),Xut.forEach(t),q3o=r($$e," (RoFormer model)"),$$e.forEach(t),j3o=i(x),_u=n(x,"LI",{});var k$e=s(_u);Qfe=n(k$e,"STRONG",{});var zut=s(Qfe);D3o=r(zut,"segformer"),zut.forEach(t),G3o=r(k$e," \u2014 "),kD=n(k$e,"A",{href:!0});var Qut=s(kD);O3o=r(Qut,"SegformerModel"),Qut.forEach(t),V3o=r(k$e," (SegFormer model)"),k$e.forEach(t),X3o=i(x),uu=n(x,"LI",{});var S$e=s(uu);Wfe=n(S$e,"STRONG",{});var Wut=s(Wfe);z3o=r(Wut,"sew"),Wut.forEach(t),Q3o=r(S$e," \u2014 "),SD=n(S$e,"A",{href:!0});var Hut=s(SD);W3o=r(Hut,"SEWModel"),Hut.forEach(t),H3o=r(S$e," (SEW model)"),S$e.forEach(t),U3o=i(x),bu=n(x,"LI",{});var R$e=s(bu);Hfe=n(R$e,"STRONG",{});var Uut=s(Hfe);J3o=r(Uut,"sew-d"),Uut.forEach(t),Y3o=r(R$e," \u2014 "),RD=n(R$e,"A",{href:!0});var Jut=s(RD);K3o=r(Jut,"SEWDModel"),Jut.forEach(t),Z3o=r(R$e," (SEW-D model)"),R$e.forEach(t),e5o=i(x),vu=n(x,"LI",{});var P$e=s(vu);Ufe=n(P$e,"STRONG",{});var Yut=s(Ufe);o5o=r(Yut,"speech_to_text"),Yut.forEach(t),r5o=r(P$e," \u2014 "),PD=n(P$e,"A",{href:!0});var Kut=s(PD);t5o=r(Kut,"Speech2TextModel"),Kut.forEach(t),a5o=r(P$e," (Speech2Text model)"),P$e.forEach(t),n5o=i(x),Fu=n(x,"LI",{});var B$e=s(Fu);Jfe=n(B$e,"STRONG",{});var Zut=s(Jfe);s5o=r(Zut,"splinter"),Zut.forEach(t),l5o=r(B$e," \u2014 "),BD=n(B$e,"A",{href:!0});var e1t=s(BD);i5o=r(e1t,"SplinterModel"),e1t.forEach(t),d5o=r(B$e," (Splinter model)"),B$e.forEach(t),c5o=i(x),Tu=n(x,"LI",{});var I$e=s(Tu);Yfe=n(I$e,"STRONG",{});var o1t=s(Yfe);f5o=r(o1t,"squeezebert"),o1t.forEach(t),m5o=r(I$e," \u2014 "),ID=n(I$e,"A",{href:!0});var r1t=s(ID);g5o=r(r1t,"SqueezeBertModel"),r1t.forEach(t),h5o=r(I$e," (SqueezeBERT model)"),I$e.forEach(t),p5o=i(x),Mu=n(x,"LI",{});var N$e=s(Mu);Kfe=n(N$e,"STRONG",{});var t1t=s(Kfe);_5o=r(t1t,"swin"),t1t.forEach(t),u5o=r(N$e," \u2014 "),ND=n(N$e,"A",{href:!0});var a1t=s(ND);b5o=r(a1t,"SwinModel"),a1t.forEach(t),v5o=r(N$e," (Swin Transformer model)"),N$e.forEach(t),F5o=i(x),Eu=n(x,"LI",{});var q$e=s(Eu);Zfe=n(q$e,"STRONG",{});var n1t=s(Zfe);T5o=r(n1t,"swinv2"),n1t.forEach(t),M5o=r(q$e," \u2014 "),qD=n(q$e,"A",{href:!0});var s1t=s(qD);E5o=r(s1t,"Swinv2Model"),s1t.forEach(t),C5o=r(q$e," (Swin Transformer V2 model)"),q$e.forEach(t),w5o=i(x),Cu=n(x,"LI",{});var j$e=s(Cu);eme=n(j$e,"STRONG",{});var l1t=s(eme);A5o=r(l1t,"t5"),l1t.forEach(t),L5o=r(j$e," \u2014 "),jD=n(j$e,"A",{href:!0});var i1t=s(jD);y5o=r(i1t,"T5Model"),i1t.forEach(t),x5o=r(j$e," (T5 model)"),j$e.forEach(t),$5o=i(x),wu=n(x,"LI",{});var D$e=s(wu);ome=n(D$e,"STRONG",{});var d1t=s(ome);k5o=r(d1t,"tapas"),d1t.forEach(t),S5o=r(D$e," \u2014 "),DD=n(D$e,"A",{href:!0});var c1t=s(DD);R5o=r(c1t,"TapasModel"),c1t.forEach(t),P5o=r(D$e," (TAPAS model)"),D$e.forEach(t),B5o=i(x),Au=n(x,"LI",{});var G$e=s(Au);rme=n(G$e,"STRONG",{});var f1t=s(rme);I5o=r(f1t,"trajectory_transformer"),f1t.forEach(t),N5o=r(G$e," \u2014 "),GD=n(G$e,"A",{href:!0});var m1t=s(GD);q5o=r(m1t,"TrajectoryTransformerModel"),m1t.forEach(t),j5o=r(G$e," (Trajectory Transformer model)"),G$e.forEach(t),D5o=i(x),Lu=n(x,"LI",{});var O$e=s(Lu);tme=n(O$e,"STRONG",{});var g1t=s(tme);G5o=r(g1t,"transfo-xl"),g1t.forEach(t),O5o=r(O$e," \u2014 "),OD=n(O$e,"A",{href:!0});var h1t=s(OD);V5o=r(h1t,"TransfoXLModel"),h1t.forEach(t),X5o=r(O$e," (Transformer-XL model)"),O$e.forEach(t),z5o=i(x),yu=n(x,"LI",{});var V$e=s(yu);ame=n(V$e,"STRONG",{});var p1t=s(ame);Q5o=r(p1t,"unispeech"),p1t.forEach(t),W5o=r(V$e," \u2014 "),VD=n(V$e,"A",{href:!0});var _1t=s(VD);H5o=r(_1t,"UniSpeechModel"),_1t.forEach(t),U5o=r(V$e," (UniSpeech model)"),V$e.forEach(t),J5o=i(x),xu=n(x,"LI",{});var X$e=s(xu);nme=n(X$e,"STRONG",{});var u1t=s(nme);Y5o=r(u1t,"unispeech-sat"),u1t.forEach(t),K5o=r(X$e," \u2014 "),XD=n(X$e,"A",{href:!0});var b1t=s(XD);Z5o=r(b1t,"UniSpeechSatModel"),b1t.forEach(t),e0o=r(X$e," (UniSpeechSat model)"),X$e.forEach(t),o0o=i(x),$u=n(x,"LI",{});var z$e=s($u);sme=n(z$e,"STRONG",{});var v1t=s(sme);r0o=r(v1t,"van"),v1t.forEach(t),t0o=r(z$e," \u2014 "),zD=n(z$e,"A",{href:!0});var F1t=s(zD);a0o=r(F1t,"VanModel"),F1t.forEach(t),n0o=r(z$e," (VAN model)"),z$e.forEach(t),s0o=i(x),ku=n(x,"LI",{});var Q$e=s(ku);lme=n(Q$e,"STRONG",{});var T1t=s(lme);l0o=r(T1t,"vilt"),T1t.forEach(t),i0o=r(Q$e," \u2014 "),QD=n(Q$e,"A",{href:!0});var M1t=s(QD);d0o=r(M1t,"ViltModel"),M1t.forEach(t),c0o=r(Q$e," (ViLT model)"),Q$e.forEach(t),f0o=i(x),Su=n(x,"LI",{});var W$e=s(Su);ime=n(W$e,"STRONG",{});var E1t=s(ime);m0o=r(E1t,"vision-text-dual-encoder"),E1t.forEach(t),g0o=r(W$e," \u2014 "),WD=n(W$e,"A",{href:!0});var C1t=s(WD);h0o=r(C1t,"VisionTextDualEncoderModel"),C1t.forEach(t),p0o=r(W$e," (VisionTextDualEncoder model)"),W$e.forEach(t),_0o=i(x),Ru=n(x,"LI",{});var H$e=s(Ru);dme=n(H$e,"STRONG",{});var w1t=s(dme);u0o=r(w1t,"visual_bert"),w1t.forEach(t),b0o=r(H$e," \u2014 "),HD=n(H$e,"A",{href:!0});var A1t=s(HD);v0o=r(A1t,"VisualBertModel"),A1t.forEach(t),F0o=r(H$e," (VisualBERT model)"),H$e.forEach(t),T0o=i(x),Pu=n(x,"LI",{});var U$e=s(Pu);cme=n(U$e,"STRONG",{});var L1t=s(cme);M0o=r(L1t,"vit"),L1t.forEach(t),E0o=r(U$e," \u2014 "),UD=n(U$e,"A",{href:!0});var y1t=s(UD);C0o=r(y1t,"ViTModel"),y1t.forEach(t),w0o=r(U$e," (ViT model)"),U$e.forEach(t),A0o=i(x),Bu=n(x,"LI",{});var J$e=s(Bu);fme=n(J$e,"STRONG",{});var x1t=s(fme);L0o=r(x1t,"vit_mae"),x1t.forEach(t),y0o=r(J$e," \u2014 "),JD=n(J$e,"A",{href:!0});var $1t=s(JD);x0o=r($1t,"ViTMAEModel"),$1t.forEach(t),$0o=r(J$e," (ViTMAE model)"),J$e.forEach(t),k0o=i(x),Iu=n(x,"LI",{});var Y$e=s(Iu);mme=n(Y$e,"STRONG",{});var k1t=s(mme);S0o=r(k1t,"wav2vec2"),k1t.forEach(t),R0o=r(Y$e," \u2014 "),YD=n(Y$e,"A",{href:!0});var S1t=s(YD);P0o=r(S1t,"Wav2Vec2Model"),S1t.forEach(t),B0o=r(Y$e," (Wav2Vec2 model)"),Y$e.forEach(t),I0o=i(x),Nu=n(x,"LI",{});var K$e=s(Nu);gme=n(K$e,"STRONG",{});var R1t=s(gme);N0o=r(R1t,"wav2vec2-conformer"),R1t.forEach(t),q0o=r(K$e," \u2014 "),KD=n(K$e,"A",{href:!0});var P1t=s(KD);j0o=r(P1t,"Wav2Vec2ConformerModel"),P1t.forEach(t),D0o=r(K$e," (Wav2Vec2-Conformer model)"),K$e.forEach(t),G0o=i(x),qu=n(x,"LI",{});var Z$e=s(qu);hme=n(Z$e,"STRONG",{});var B1t=s(hme);O0o=r(B1t,"wavlm"),B1t.forEach(t),V0o=r(Z$e," \u2014 "),ZD=n(Z$e,"A",{href:!0});var I1t=s(ZD);X0o=r(I1t,"WavLMModel"),I1t.forEach(t),z0o=r(Z$e," (WavLM model)"),Z$e.forEach(t),Q0o=i(x),ju=n(x,"LI",{});var eke=s(ju);pme=n(eke,"STRONG",{});var N1t=s(pme);W0o=r(N1t,"xglm"),N1t.forEach(t),H0o=r(eke," \u2014 "),eG=n(eke,"A",{href:!0});var q1t=s(eG);U0o=r(q1t,"XGLMModel"),q1t.forEach(t),J0o=r(eke," (XGLM model)"),eke.forEach(t),Y0o=i(x),Du=n(x,"LI",{});var oke=s(Du);_me=n(oke,"STRONG",{});var j1t=s(_me);K0o=r(j1t,"xlm"),j1t.forEach(t),Z0o=r(oke," \u2014 "),oG=n(oke,"A",{href:!0});var D1t=s(oG);ewo=r(D1t,"XLMModel"),D1t.forEach(t),owo=r(oke," (XLM model)"),oke.forEach(t),rwo=i(x),Gu=n(x,"LI",{});var rke=s(Gu);ume=n(rke,"STRONG",{});var G1t=s(ume);two=r(G1t,"xlm-prophetnet"),G1t.forEach(t),awo=r(rke," \u2014 "),rG=n(rke,"A",{href:!0});var O1t=s(rG);nwo=r(O1t,"XLMProphetNetModel"),O1t.forEach(t),swo=r(rke," (XLM-ProphetNet model)"),rke.forEach(t),lwo=i(x),Ou=n(x,"LI",{});var tke=s(Ou);bme=n(tke,"STRONG",{});var V1t=s(bme);iwo=r(V1t,"xlm-roberta"),V1t.forEach(t),dwo=r(tke," \u2014 "),tG=n(tke,"A",{href:!0});var X1t=s(tG);cwo=r(X1t,"XLMRobertaModel"),X1t.forEach(t),fwo=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),mwo=i(x),Vu=n(x,"LI",{});var ake=s(Vu);vme=n(ake,"STRONG",{});var z1t=s(vme);gwo=r(z1t,"xlm-roberta-xl"),z1t.forEach(t),hwo=r(ake," \u2014 "),aG=n(ake,"A",{href:!0});var Q1t=s(aG);pwo=r(Q1t,"XLMRobertaXLModel"),Q1t.forEach(t),_wo=r(ake," (XLM-RoBERTa-XL model)"),ake.forEach(t),uwo=i(x),Xu=n(x,"LI",{});var nke=s(Xu);Fme=n(nke,"STRONG",{});var W1t=s(Fme);bwo=r(W1t,"xlnet"),W1t.forEach(t),vwo=r(nke," \u2014 "),nG=n(nke,"A",{href:!0});var H1t=s(nG);Fwo=r(H1t,"XLNetModel"),H1t.forEach(t),Two=r(nke," (XLNet model)"),nke.forEach(t),Mwo=i(x),zu=n(x,"LI",{});var ske=s(zu);Tme=n(ske,"STRONG",{});var U1t=s(Tme);Ewo=r(U1t,"yolos"),U1t.forEach(t),Cwo=r(ske," \u2014 "),sG=n(ske,"A",{href:!0});var J1t=s(sG);wwo=r(J1t,"YolosModel"),J1t.forEach(t),Awo=r(ske," (YOLOS model)"),ske.forEach(t),Lwo=i(x),Qu=n(x,"LI",{});var lke=s(Qu);Mme=n(lke,"STRONG",{});var Y1t=s(Mme);ywo=r(Y1t,"yoso"),Y1t.forEach(t),xwo=r(lke," \u2014 "),lG=n(lke,"A",{href:!0});var K1t=s(lG);$wo=r(K1t,"YosoModel"),K1t.forEach(t),kwo=r(lke," (YOSO model)"),lke.forEach(t),x.forEach(t),Swo=i(la),Wu=n(la,"P",{});var ike=s(Wu);Rwo=r(ike,"The model is set in evaluation mode by default using "),Eme=n(ike,"CODE",{});var Z1t=s(Eme);Pwo=r(Z1t,"model.eval()"),Z1t.forEach(t),Bwo=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=n(ike,"CODE",{});var e2t=s(Cme);Iwo=r(e2t,"model.train()"),e2t.forEach(t),ike.forEach(t),Nwo=i(la),T(Hu.$$.fragment,la),la.forEach(t),rl.forEach(t),kXe=i(f),Xi=n(f,"H2",{class:!0});var NQe=s(Xi);Uu=n(NQe,"A",{id:!0,class:!0,href:!0});var o2t=s(Uu);wme=n(o2t,"SPAN",{});var r2t=s(wme);T(GL.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),qwo=i(NQe),Ame=n(NQe,"SPAN",{});var t2t=s(Ame);jwo=r(t2t,"AutoModelForPreTraining"),t2t.forEach(t),NQe.forEach(t),SXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(OL.$$.fragment,tl),Dwo=i(tl),zi=n(tl,"P",{});var Ore=s(zi);Gwo=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iG=n(Ore,"A",{href:!0});var a2t=s(iG);Owo=r(a2t,"from_pretrained()"),a2t.forEach(t),Vwo=r(Ore," class method or the "),dG=n(Ore,"A",{href:!0});var n2t=s(dG);Xwo=r(n2t,"from_config()"),n2t.forEach(t),zwo=r(Ore,` class
method.`),Ore.forEach(t),Qwo=i(tl),VL=n(tl,"P",{});var qQe=s(VL);Wwo=r(qQe,"This class cannot be instantiated directly using "),Lme=n(qQe,"CODE",{});var s2t=s(Lme);Hwo=r(s2t,"__init__()"),s2t.forEach(t),Uwo=r(qQe," (throws an error)."),qQe.forEach(t),Jwo=i(tl),dt=n(tl,"DIV",{class:!0});var pw=s(dt);T(XL.$$.fragment,pw),Ywo=i(pw),yme=n(pw,"P",{});var l2t=s(yme);Kwo=r(l2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l2t.forEach(t),Zwo=i(pw),Qi=n(pw,"P",{});var Vre=s(Qi);eAo=r(Vre,`Note:
Loading a model from its configuration file does `),xme=n(Vre,"STRONG",{});var i2t=s(xme);oAo=r(i2t,"not"),i2t.forEach(t),rAo=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(Vre,"A",{href:!0});var d2t=s(cG);tAo=r(d2t,"from_pretrained()"),d2t.forEach(t),aAo=r(Vre," to load the model weights."),Vre.forEach(t),nAo=i(pw),T(Ju.$$.fragment,pw),pw.forEach(t),sAo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(zL.$$.fragment,ia),lAo=i(ia),$me=n(ia,"P",{});var c2t=s($me);iAo=r(c2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),c2t.forEach(t),dAo=i(ia),Na=n(ia,"P",{});var _w=s(Na);cAo=r(_w,"The model class to instantiate is selected based on the "),kme=n(_w,"CODE",{});var f2t=s(kme);fAo=r(f2t,"model_type"),f2t.forEach(t),mAo=r(_w,` property of the config object (either
passed as an argument or loaded from `),Sme=n(_w,"CODE",{});var m2t=s(Sme);gAo=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),hAo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(_w,"CODE",{});var g2t=s(Rme);pAo=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),_Ao=r(_w,":"),_w.forEach(t),uAo=i(ia),G=n(ia,"UL",{});var O=s(G);Yu=n(O,"LI",{});var dke=s(Yu);Pme=n(dke,"STRONG",{});var h2t=s(Pme);bAo=r(h2t,"albert"),h2t.forEach(t),vAo=r(dke," \u2014 "),fG=n(dke,"A",{href:!0});var p2t=s(fG);FAo=r(p2t,"AlbertForPreTraining"),p2t.forEach(t),TAo=r(dke," (ALBERT model)"),dke.forEach(t),MAo=i(O),Ku=n(O,"LI",{});var cke=s(Ku);Bme=n(cke,"STRONG",{});var _2t=s(Bme);EAo=r(_2t,"bart"),_2t.forEach(t),CAo=r(cke," \u2014 "),mG=n(cke,"A",{href:!0});var u2t=s(mG);wAo=r(u2t,"BartForConditionalGeneration"),u2t.forEach(t),AAo=r(cke," (BART model)"),cke.forEach(t),LAo=i(O),Zu=n(O,"LI",{});var fke=s(Zu);Ime=n(fke,"STRONG",{});var b2t=s(Ime);yAo=r(b2t,"bert"),b2t.forEach(t),xAo=r(fke," \u2014 "),gG=n(fke,"A",{href:!0});var v2t=s(gG);$Ao=r(v2t,"BertForPreTraining"),v2t.forEach(t),kAo=r(fke," (BERT model)"),fke.forEach(t),SAo=i(O),e1=n(O,"LI",{});var mke=s(e1);Nme=n(mke,"STRONG",{});var F2t=s(Nme);RAo=r(F2t,"big_bird"),F2t.forEach(t),PAo=r(mke," \u2014 "),hG=n(mke,"A",{href:!0});var T2t=s(hG);BAo=r(T2t,"BigBirdForPreTraining"),T2t.forEach(t),IAo=r(mke," (BigBird model)"),mke.forEach(t),NAo=i(O),o1=n(O,"LI",{});var gke=s(o1);qme=n(gke,"STRONG",{});var M2t=s(qme);qAo=r(M2t,"bloom"),M2t.forEach(t),jAo=r(gke," \u2014 "),pG=n(gke,"A",{href:!0});var E2t=s(pG);DAo=r(E2t,"BloomForCausalLM"),E2t.forEach(t),GAo=r(gke," (BLOOM model)"),gke.forEach(t),OAo=i(O),r1=n(O,"LI",{});var hke=s(r1);jme=n(hke,"STRONG",{});var C2t=s(jme);VAo=r(C2t,"camembert"),C2t.forEach(t),XAo=r(hke," \u2014 "),_G=n(hke,"A",{href:!0});var w2t=s(_G);zAo=r(w2t,"CamembertForMaskedLM"),w2t.forEach(t),QAo=r(hke," (CamemBERT model)"),hke.forEach(t),WAo=i(O),t1=n(O,"LI",{});var pke=s(t1);Dme=n(pke,"STRONG",{});var A2t=s(Dme);HAo=r(A2t,"ctrl"),A2t.forEach(t),UAo=r(pke," \u2014 "),uG=n(pke,"A",{href:!0});var L2t=s(uG);JAo=r(L2t,"CTRLLMHeadModel"),L2t.forEach(t),YAo=r(pke," (CTRL model)"),pke.forEach(t),KAo=i(O),a1=n(O,"LI",{});var _ke=s(a1);Gme=n(_ke,"STRONG",{});var y2t=s(Gme);ZAo=r(y2t,"data2vec-text"),y2t.forEach(t),eLo=r(_ke," \u2014 "),bG=n(_ke,"A",{href:!0});var x2t=s(bG);oLo=r(x2t,"Data2VecTextForMaskedLM"),x2t.forEach(t),rLo=r(_ke," (Data2VecText model)"),_ke.forEach(t),tLo=i(O),n1=n(O,"LI",{});var uke=s(n1);Ome=n(uke,"STRONG",{});var $2t=s(Ome);aLo=r($2t,"deberta"),$2t.forEach(t),nLo=r(uke," \u2014 "),vG=n(uke,"A",{href:!0});var k2t=s(vG);sLo=r(k2t,"DebertaForMaskedLM"),k2t.forEach(t),lLo=r(uke," (DeBERTa model)"),uke.forEach(t),iLo=i(O),s1=n(O,"LI",{});var bke=s(s1);Vme=n(bke,"STRONG",{});var S2t=s(Vme);dLo=r(S2t,"deberta-v2"),S2t.forEach(t),cLo=r(bke," \u2014 "),FG=n(bke,"A",{href:!0});var R2t=s(FG);fLo=r(R2t,"DebertaV2ForMaskedLM"),R2t.forEach(t),mLo=r(bke," (DeBERTa-v2 model)"),bke.forEach(t),gLo=i(O),l1=n(O,"LI",{});var vke=s(l1);Xme=n(vke,"STRONG",{});var P2t=s(Xme);hLo=r(P2t,"distilbert"),P2t.forEach(t),pLo=r(vke," \u2014 "),TG=n(vke,"A",{href:!0});var B2t=s(TG);_Lo=r(B2t,"DistilBertForMaskedLM"),B2t.forEach(t),uLo=r(vke," (DistilBERT model)"),vke.forEach(t),bLo=i(O),i1=n(O,"LI",{});var Fke=s(i1);zme=n(Fke,"STRONG",{});var I2t=s(zme);vLo=r(I2t,"electra"),I2t.forEach(t),FLo=r(Fke," \u2014 "),MG=n(Fke,"A",{href:!0});var N2t=s(MG);TLo=r(N2t,"ElectraForPreTraining"),N2t.forEach(t),MLo=r(Fke," (ELECTRA model)"),Fke.forEach(t),ELo=i(O),d1=n(O,"LI",{});var Tke=s(d1);Qme=n(Tke,"STRONG",{});var q2t=s(Qme);CLo=r(q2t,"flaubert"),q2t.forEach(t),wLo=r(Tke," \u2014 "),EG=n(Tke,"A",{href:!0});var j2t=s(EG);ALo=r(j2t,"FlaubertWithLMHeadModel"),j2t.forEach(t),LLo=r(Tke," (FlauBERT model)"),Tke.forEach(t),yLo=i(O),c1=n(O,"LI",{});var Mke=s(c1);Wme=n(Mke,"STRONG",{});var D2t=s(Wme);xLo=r(D2t,"flava"),D2t.forEach(t),$Lo=r(Mke," \u2014 "),CG=n(Mke,"A",{href:!0});var G2t=s(CG);kLo=r(G2t,"FlavaForPreTraining"),G2t.forEach(t),SLo=r(Mke," (FLAVA model)"),Mke.forEach(t),RLo=i(O),f1=n(O,"LI",{});var Eke=s(f1);Hme=n(Eke,"STRONG",{});var O2t=s(Hme);PLo=r(O2t,"fnet"),O2t.forEach(t),BLo=r(Eke," \u2014 "),wG=n(Eke,"A",{href:!0});var V2t=s(wG);ILo=r(V2t,"FNetForPreTraining"),V2t.forEach(t),NLo=r(Eke," (FNet model)"),Eke.forEach(t),qLo=i(O),m1=n(O,"LI",{});var Cke=s(m1);Ume=n(Cke,"STRONG",{});var X2t=s(Ume);jLo=r(X2t,"fsmt"),X2t.forEach(t),DLo=r(Cke," \u2014 "),AG=n(Cke,"A",{href:!0});var z2t=s(AG);GLo=r(z2t,"FSMTForConditionalGeneration"),z2t.forEach(t),OLo=r(Cke," (FairSeq Machine-Translation model)"),Cke.forEach(t),VLo=i(O),g1=n(O,"LI",{});var wke=s(g1);Jme=n(wke,"STRONG",{});var Q2t=s(Jme);XLo=r(Q2t,"funnel"),Q2t.forEach(t),zLo=r(wke," \u2014 "),LG=n(wke,"A",{href:!0});var W2t=s(LG);QLo=r(W2t,"FunnelForPreTraining"),W2t.forEach(t),WLo=r(wke," (Funnel Transformer model)"),wke.forEach(t),HLo=i(O),h1=n(O,"LI",{});var Ake=s(h1);Yme=n(Ake,"STRONG",{});var H2t=s(Yme);ULo=r(H2t,"gpt2"),H2t.forEach(t),JLo=r(Ake," \u2014 "),yG=n(Ake,"A",{href:!0});var U2t=s(yG);YLo=r(U2t,"GPT2LMHeadModel"),U2t.forEach(t),KLo=r(Ake," (OpenAI GPT-2 model)"),Ake.forEach(t),ZLo=i(O),p1=n(O,"LI",{});var Lke=s(p1);Kme=n(Lke,"STRONG",{});var J2t=s(Kme);eyo=r(J2t,"ibert"),J2t.forEach(t),oyo=r(Lke," \u2014 "),xG=n(Lke,"A",{href:!0});var Y2t=s(xG);ryo=r(Y2t,"IBertForMaskedLM"),Y2t.forEach(t),tyo=r(Lke," (I-BERT model)"),Lke.forEach(t),ayo=i(O),_1=n(O,"LI",{});var yke=s(_1);Zme=n(yke,"STRONG",{});var K2t=s(Zme);nyo=r(K2t,"layoutlm"),K2t.forEach(t),syo=r(yke," \u2014 "),$G=n(yke,"A",{href:!0});var Z2t=s($G);lyo=r(Z2t,"LayoutLMForMaskedLM"),Z2t.forEach(t),iyo=r(yke," (LayoutLM model)"),yke.forEach(t),dyo=i(O),u1=n(O,"LI",{});var xke=s(u1);ege=n(xke,"STRONG",{});var e4t=s(ege);cyo=r(e4t,"longformer"),e4t.forEach(t),fyo=r(xke," \u2014 "),kG=n(xke,"A",{href:!0});var o4t=s(kG);myo=r(o4t,"LongformerForMaskedLM"),o4t.forEach(t),gyo=r(xke," (Longformer model)"),xke.forEach(t),hyo=i(O),b1=n(O,"LI",{});var $ke=s(b1);oge=n($ke,"STRONG",{});var r4t=s(oge);pyo=r(r4t,"lxmert"),r4t.forEach(t),_yo=r($ke," \u2014 "),SG=n($ke,"A",{href:!0});var t4t=s(SG);uyo=r(t4t,"LxmertForPreTraining"),t4t.forEach(t),byo=r($ke," (LXMERT model)"),$ke.forEach(t),vyo=i(O),v1=n(O,"LI",{});var kke=s(v1);rge=n(kke,"STRONG",{});var a4t=s(rge);Fyo=r(a4t,"megatron-bert"),a4t.forEach(t),Tyo=r(kke," \u2014 "),RG=n(kke,"A",{href:!0});var n4t=s(RG);Myo=r(n4t,"MegatronBertForPreTraining"),n4t.forEach(t),Eyo=r(kke," (Megatron-BERT model)"),kke.forEach(t),Cyo=i(O),F1=n(O,"LI",{});var Ske=s(F1);tge=n(Ske,"STRONG",{});var s4t=s(tge);wyo=r(s4t,"mobilebert"),s4t.forEach(t),Ayo=r(Ske," \u2014 "),PG=n(Ske,"A",{href:!0});var l4t=s(PG);Lyo=r(l4t,"MobileBertForPreTraining"),l4t.forEach(t),yyo=r(Ske," (MobileBERT model)"),Ske.forEach(t),xyo=i(O),T1=n(O,"LI",{});var Rke=s(T1);age=n(Rke,"STRONG",{});var i4t=s(age);$yo=r(i4t,"mpnet"),i4t.forEach(t),kyo=r(Rke," \u2014 "),BG=n(Rke,"A",{href:!0});var d4t=s(BG);Syo=r(d4t,"MPNetForMaskedLM"),d4t.forEach(t),Ryo=r(Rke," (MPNet model)"),Rke.forEach(t),Pyo=i(O),M1=n(O,"LI",{});var Pke=s(M1);nge=n(Pke,"STRONG",{});var c4t=s(nge);Byo=r(c4t,"mvp"),c4t.forEach(t),Iyo=r(Pke," \u2014 "),IG=n(Pke,"A",{href:!0});var f4t=s(IG);Nyo=r(f4t,"MvpForConditionalGeneration"),f4t.forEach(t),qyo=r(Pke," (MVP model)"),Pke.forEach(t),jyo=i(O),E1=n(O,"LI",{});var Bke=s(E1);sge=n(Bke,"STRONG",{});var m4t=s(sge);Dyo=r(m4t,"nezha"),m4t.forEach(t),Gyo=r(Bke," \u2014 "),NG=n(Bke,"A",{href:!0});var g4t=s(NG);Oyo=r(g4t,"NezhaForPreTraining"),g4t.forEach(t),Vyo=r(Bke," (Nezha model)"),Bke.forEach(t),Xyo=i(O),C1=n(O,"LI",{});var Ike=s(C1);lge=n(Ike,"STRONG",{});var h4t=s(lge);zyo=r(h4t,"openai-gpt"),h4t.forEach(t),Qyo=r(Ike," \u2014 "),qG=n(Ike,"A",{href:!0});var p4t=s(qG);Wyo=r(p4t,"OpenAIGPTLMHeadModel"),p4t.forEach(t),Hyo=r(Ike," (OpenAI GPT model)"),Ike.forEach(t),Uyo=i(O),w1=n(O,"LI",{});var Nke=s(w1);ige=n(Nke,"STRONG",{});var _4t=s(ige);Jyo=r(_4t,"retribert"),_4t.forEach(t),Yyo=r(Nke," \u2014 "),jG=n(Nke,"A",{href:!0});var u4t=s(jG);Kyo=r(u4t,"RetriBertModel"),u4t.forEach(t),Zyo=r(Nke," (RetriBERT model)"),Nke.forEach(t),e8o=i(O),A1=n(O,"LI",{});var qke=s(A1);dge=n(qke,"STRONG",{});var b4t=s(dge);o8o=r(b4t,"roberta"),b4t.forEach(t),r8o=r(qke," \u2014 "),DG=n(qke,"A",{href:!0});var v4t=s(DG);t8o=r(v4t,"RobertaForMaskedLM"),v4t.forEach(t),a8o=r(qke," (RoBERTa model)"),qke.forEach(t),n8o=i(O),L1=n(O,"LI",{});var jke=s(L1);cge=n(jke,"STRONG",{});var F4t=s(cge);s8o=r(F4t,"splinter"),F4t.forEach(t),l8o=r(jke," \u2014 "),GG=n(jke,"A",{href:!0});var T4t=s(GG);i8o=r(T4t,"SplinterForPreTraining"),T4t.forEach(t),d8o=r(jke," (Splinter model)"),jke.forEach(t),c8o=i(O),y1=n(O,"LI",{});var Dke=s(y1);fge=n(Dke,"STRONG",{});var M4t=s(fge);f8o=r(M4t,"squeezebert"),M4t.forEach(t),m8o=r(Dke," \u2014 "),OG=n(Dke,"A",{href:!0});var E4t=s(OG);g8o=r(E4t,"SqueezeBertForMaskedLM"),E4t.forEach(t),h8o=r(Dke," (SqueezeBERT model)"),Dke.forEach(t),p8o=i(O),x1=n(O,"LI",{});var Gke=s(x1);mge=n(Gke,"STRONG",{});var C4t=s(mge);_8o=r(C4t,"t5"),C4t.forEach(t),u8o=r(Gke," \u2014 "),VG=n(Gke,"A",{href:!0});var w4t=s(VG);b8o=r(w4t,"T5ForConditionalGeneration"),w4t.forEach(t),v8o=r(Gke," (T5 model)"),Gke.forEach(t),F8o=i(O),$1=n(O,"LI",{});var Oke=s($1);gge=n(Oke,"STRONG",{});var A4t=s(gge);T8o=r(A4t,"tapas"),A4t.forEach(t),M8o=r(Oke," \u2014 "),XG=n(Oke,"A",{href:!0});var L4t=s(XG);E8o=r(L4t,"TapasForMaskedLM"),L4t.forEach(t),C8o=r(Oke," (TAPAS model)"),Oke.forEach(t),w8o=i(O),k1=n(O,"LI",{});var Vke=s(k1);hge=n(Vke,"STRONG",{});var y4t=s(hge);A8o=r(y4t,"transfo-xl"),y4t.forEach(t),L8o=r(Vke," \u2014 "),zG=n(Vke,"A",{href:!0});var x4t=s(zG);y8o=r(x4t,"TransfoXLLMHeadModel"),x4t.forEach(t),x8o=r(Vke," (Transformer-XL model)"),Vke.forEach(t),$8o=i(O),S1=n(O,"LI",{});var Xke=s(S1);pge=n(Xke,"STRONG",{});var $4t=s(pge);k8o=r($4t,"unispeech"),$4t.forEach(t),S8o=r(Xke," \u2014 "),QG=n(Xke,"A",{href:!0});var k4t=s(QG);R8o=r(k4t,"UniSpeechForPreTraining"),k4t.forEach(t),P8o=r(Xke," (UniSpeech model)"),Xke.forEach(t),B8o=i(O),R1=n(O,"LI",{});var zke=s(R1);_ge=n(zke,"STRONG",{});var S4t=s(_ge);I8o=r(S4t,"unispeech-sat"),S4t.forEach(t),N8o=r(zke," \u2014 "),WG=n(zke,"A",{href:!0});var R4t=s(WG);q8o=r(R4t,"UniSpeechSatForPreTraining"),R4t.forEach(t),j8o=r(zke," (UniSpeechSat model)"),zke.forEach(t),D8o=i(O),P1=n(O,"LI",{});var Qke=s(P1);uge=n(Qke,"STRONG",{});var P4t=s(uge);G8o=r(P4t,"visual_bert"),P4t.forEach(t),O8o=r(Qke," \u2014 "),HG=n(Qke,"A",{href:!0});var B4t=s(HG);V8o=r(B4t,"VisualBertForPreTraining"),B4t.forEach(t),X8o=r(Qke," (VisualBERT model)"),Qke.forEach(t),z8o=i(O),B1=n(O,"LI",{});var Wke=s(B1);bge=n(Wke,"STRONG",{});var I4t=s(bge);Q8o=r(I4t,"vit_mae"),I4t.forEach(t),W8o=r(Wke," \u2014 "),UG=n(Wke,"A",{href:!0});var N4t=s(UG);H8o=r(N4t,"ViTMAEForPreTraining"),N4t.forEach(t),U8o=r(Wke," (ViTMAE model)"),Wke.forEach(t),J8o=i(O),I1=n(O,"LI",{});var Hke=s(I1);vge=n(Hke,"STRONG",{});var q4t=s(vge);Y8o=r(q4t,"wav2vec2"),q4t.forEach(t),K8o=r(Hke," \u2014 "),JG=n(Hke,"A",{href:!0});var j4t=s(JG);Z8o=r(j4t,"Wav2Vec2ForPreTraining"),j4t.forEach(t),exo=r(Hke," (Wav2Vec2 model)"),Hke.forEach(t),oxo=i(O),N1=n(O,"LI",{});var Uke=s(N1);Fge=n(Uke,"STRONG",{});var D4t=s(Fge);rxo=r(D4t,"wav2vec2-conformer"),D4t.forEach(t),txo=r(Uke," \u2014 "),YG=n(Uke,"A",{href:!0});var G4t=s(YG);axo=r(G4t,"Wav2Vec2ConformerForPreTraining"),G4t.forEach(t),nxo=r(Uke," (Wav2Vec2-Conformer model)"),Uke.forEach(t),sxo=i(O),q1=n(O,"LI",{});var Jke=s(q1);Tge=n(Jke,"STRONG",{});var O4t=s(Tge);lxo=r(O4t,"xlm"),O4t.forEach(t),ixo=r(Jke," \u2014 "),KG=n(Jke,"A",{href:!0});var V4t=s(KG);dxo=r(V4t,"XLMWithLMHeadModel"),V4t.forEach(t),cxo=r(Jke," (XLM model)"),Jke.forEach(t),fxo=i(O),j1=n(O,"LI",{});var Yke=s(j1);Mge=n(Yke,"STRONG",{});var X4t=s(Mge);mxo=r(X4t,"xlm-roberta"),X4t.forEach(t),gxo=r(Yke," \u2014 "),ZG=n(Yke,"A",{href:!0});var z4t=s(ZG);hxo=r(z4t,"XLMRobertaForMaskedLM"),z4t.forEach(t),pxo=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),_xo=i(O),D1=n(O,"LI",{});var Kke=s(D1);Ege=n(Kke,"STRONG",{});var Q4t=s(Ege);uxo=r(Q4t,"xlm-roberta-xl"),Q4t.forEach(t),bxo=r(Kke," \u2014 "),eO=n(Kke,"A",{href:!0});var W4t=s(eO);vxo=r(W4t,"XLMRobertaXLForMaskedLM"),W4t.forEach(t),Fxo=r(Kke," (XLM-RoBERTa-XL model)"),Kke.forEach(t),Txo=i(O),G1=n(O,"LI",{});var Zke=s(G1);Cge=n(Zke,"STRONG",{});var H4t=s(Cge);Mxo=r(H4t,"xlnet"),H4t.forEach(t),Exo=r(Zke," \u2014 "),oO=n(Zke,"A",{href:!0});var U4t=s(oO);Cxo=r(U4t,"XLNetLMHeadModel"),U4t.forEach(t),wxo=r(Zke," (XLNet model)"),Zke.forEach(t),O.forEach(t),Axo=i(ia),O1=n(ia,"P",{});var eSe=s(O1);Lxo=r(eSe,"The model is set in evaluation mode by default using "),wge=n(eSe,"CODE",{});var J4t=s(wge);yxo=r(J4t,"model.eval()"),J4t.forEach(t),xxo=r(eSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=n(eSe,"CODE",{});var Y4t=s(Age);$xo=r(Y4t,"model.train()"),Y4t.forEach(t),eSe.forEach(t),kxo=i(ia),T(V1.$$.fragment,ia),ia.forEach(t),tl.forEach(t),RXe=i(f),Wi=n(f,"H2",{class:!0});var jQe=s(Wi);X1=n(jQe,"A",{id:!0,class:!0,href:!0});var K4t=s(X1);Lge=n(K4t,"SPAN",{});var Z4t=s(Lge);T(QL.$$.fragment,Z4t),Z4t.forEach(t),K4t.forEach(t),Sxo=i(jQe),yge=n(jQe,"SPAN",{});var ebt=s(yge);Rxo=r(ebt,"AutoModelForCausalLM"),ebt.forEach(t),jQe.forEach(t),PXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(WL.$$.fragment,al),Pxo=i(al),Hi=n(al,"P",{});var Xre=s(Hi);Bxo=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rO=n(Xre,"A",{href:!0});var obt=s(rO);Ixo=r(obt,"from_pretrained()"),obt.forEach(t),Nxo=r(Xre," class method or the "),tO=n(Xre,"A",{href:!0});var rbt=s(tO);qxo=r(rbt,"from_config()"),rbt.forEach(t),jxo=r(Xre,` class
method.`),Xre.forEach(t),Dxo=i(al),HL=n(al,"P",{});var DQe=s(HL);Gxo=r(DQe,"This class cannot be instantiated directly using "),xge=n(DQe,"CODE",{});var tbt=s(xge);Oxo=r(tbt,"__init__()"),tbt.forEach(t),Vxo=r(DQe," (throws an error)."),DQe.forEach(t),Xxo=i(al),ct=n(al,"DIV",{class:!0});var uw=s(ct);T(UL.$$.fragment,uw),zxo=i(uw),$ge=n(uw,"P",{});var abt=s($ge);Qxo=r(abt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),abt.forEach(t),Wxo=i(uw),Ui=n(uw,"P",{});var zre=s(Ui);Hxo=r(zre,`Note:
Loading a model from its configuration file does `),kge=n(zre,"STRONG",{});var nbt=s(kge);Uxo=r(nbt,"not"),nbt.forEach(t),Jxo=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(zre,"A",{href:!0});var sbt=s(aO);Yxo=r(sbt,"from_pretrained()"),sbt.forEach(t),Kxo=r(zre," to load the model weights."),zre.forEach(t),Zxo=i(uw),T(z1.$$.fragment,uw),uw.forEach(t),e$o=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(JL.$$.fragment,da),o$o=i(da),Sge=n(da,"P",{});var lbt=s(Sge);r$o=r(lbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lbt.forEach(t),t$o=i(da),qa=n(da,"P",{});var bw=s(qa);a$o=r(bw,"The model class to instantiate is selected based on the "),Rge=n(bw,"CODE",{});var ibt=s(Rge);n$o=r(ibt,"model_type"),ibt.forEach(t),s$o=r(bw,` property of the config object (either
passed as an argument or loaded from `),Pge=n(bw,"CODE",{});var dbt=s(Pge);l$o=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),i$o=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(bw,"CODE",{});var cbt=s(Bge);d$o=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),c$o=r(bw,":"),bw.forEach(t),f$o=i(da),z=n(da,"UL",{});var Q=s(z);Q1=n(Q,"LI",{});var oSe=s(Q1);Ige=n(oSe,"STRONG",{});var fbt=s(Ige);m$o=r(fbt,"bart"),fbt.forEach(t),g$o=r(oSe," \u2014 "),nO=n(oSe,"A",{href:!0});var mbt=s(nO);h$o=r(mbt,"BartForCausalLM"),mbt.forEach(t),p$o=r(oSe," (BART model)"),oSe.forEach(t),_$o=i(Q),W1=n(Q,"LI",{});var rSe=s(W1);Nge=n(rSe,"STRONG",{});var gbt=s(Nge);u$o=r(gbt,"bert"),gbt.forEach(t),b$o=r(rSe," \u2014 "),sO=n(rSe,"A",{href:!0});var hbt=s(sO);v$o=r(hbt,"BertLMHeadModel"),hbt.forEach(t),F$o=r(rSe," (BERT model)"),rSe.forEach(t),T$o=i(Q),H1=n(Q,"LI",{});var tSe=s(H1);qge=n(tSe,"STRONG",{});var pbt=s(qge);M$o=r(pbt,"bert-generation"),pbt.forEach(t),E$o=r(tSe," \u2014 "),lO=n(tSe,"A",{href:!0});var _bt=s(lO);C$o=r(_bt,"BertGenerationDecoder"),_bt.forEach(t),w$o=r(tSe," (Bert Generation model)"),tSe.forEach(t),A$o=i(Q),U1=n(Q,"LI",{});var aSe=s(U1);jge=n(aSe,"STRONG",{});var ubt=s(jge);L$o=r(ubt,"big_bird"),ubt.forEach(t),y$o=r(aSe," \u2014 "),iO=n(aSe,"A",{href:!0});var bbt=s(iO);x$o=r(bbt,"BigBirdForCausalLM"),bbt.forEach(t),$$o=r(aSe," (BigBird model)"),aSe.forEach(t),k$o=i(Q),J1=n(Q,"LI",{});var nSe=s(J1);Dge=n(nSe,"STRONG",{});var vbt=s(Dge);S$o=r(vbt,"bigbird_pegasus"),vbt.forEach(t),R$o=r(nSe," \u2014 "),dO=n(nSe,"A",{href:!0});var Fbt=s(dO);P$o=r(Fbt,"BigBirdPegasusForCausalLM"),Fbt.forEach(t),B$o=r(nSe," (BigBird-Pegasus model)"),nSe.forEach(t),I$o=i(Q),Y1=n(Q,"LI",{});var sSe=s(Y1);Gge=n(sSe,"STRONG",{});var Tbt=s(Gge);N$o=r(Tbt,"blenderbot"),Tbt.forEach(t),q$o=r(sSe," \u2014 "),cO=n(sSe,"A",{href:!0});var Mbt=s(cO);j$o=r(Mbt,"BlenderbotForCausalLM"),Mbt.forEach(t),D$o=r(sSe," (Blenderbot model)"),sSe.forEach(t),G$o=i(Q),K1=n(Q,"LI",{});var lSe=s(K1);Oge=n(lSe,"STRONG",{});var Ebt=s(Oge);O$o=r(Ebt,"blenderbot-small"),Ebt.forEach(t),V$o=r(lSe," \u2014 "),fO=n(lSe,"A",{href:!0});var Cbt=s(fO);X$o=r(Cbt,"BlenderbotSmallForCausalLM"),Cbt.forEach(t),z$o=r(lSe," (BlenderbotSmall model)"),lSe.forEach(t),Q$o=i(Q),Z1=n(Q,"LI",{});var iSe=s(Z1);Vge=n(iSe,"STRONG",{});var wbt=s(Vge);W$o=r(wbt,"bloom"),wbt.forEach(t),H$o=r(iSe," \u2014 "),mO=n(iSe,"A",{href:!0});var Abt=s(mO);U$o=r(Abt,"BloomForCausalLM"),Abt.forEach(t),J$o=r(iSe," (BLOOM model)"),iSe.forEach(t),Y$o=i(Q),e2=n(Q,"LI",{});var dSe=s(e2);Xge=n(dSe,"STRONG",{});var Lbt=s(Xge);K$o=r(Lbt,"camembert"),Lbt.forEach(t),Z$o=r(dSe," \u2014 "),gO=n(dSe,"A",{href:!0});var ybt=s(gO);eko=r(ybt,"CamembertForCausalLM"),ybt.forEach(t),oko=r(dSe," (CamemBERT model)"),dSe.forEach(t),rko=i(Q),o2=n(Q,"LI",{});var cSe=s(o2);zge=n(cSe,"STRONG",{});var xbt=s(zge);tko=r(xbt,"codegen"),xbt.forEach(t),ako=r(cSe," \u2014 "),hO=n(cSe,"A",{href:!0});var $bt=s(hO);nko=r($bt,"CodeGenForCausalLM"),$bt.forEach(t),sko=r(cSe," (CodeGen model)"),cSe.forEach(t),lko=i(Q),r2=n(Q,"LI",{});var fSe=s(r2);Qge=n(fSe,"STRONG",{});var kbt=s(Qge);iko=r(kbt,"ctrl"),kbt.forEach(t),dko=r(fSe," \u2014 "),pO=n(fSe,"A",{href:!0});var Sbt=s(pO);cko=r(Sbt,"CTRLLMHeadModel"),Sbt.forEach(t),fko=r(fSe," (CTRL model)"),fSe.forEach(t),mko=i(Q),t2=n(Q,"LI",{});var mSe=s(t2);Wge=n(mSe,"STRONG",{});var Rbt=s(Wge);gko=r(Rbt,"data2vec-text"),Rbt.forEach(t),hko=r(mSe," \u2014 "),_O=n(mSe,"A",{href:!0});var Pbt=s(_O);pko=r(Pbt,"Data2VecTextForCausalLM"),Pbt.forEach(t),_ko=r(mSe," (Data2VecText model)"),mSe.forEach(t),uko=i(Q),a2=n(Q,"LI",{});var gSe=s(a2);Hge=n(gSe,"STRONG",{});var Bbt=s(Hge);bko=r(Bbt,"electra"),Bbt.forEach(t),vko=r(gSe," \u2014 "),uO=n(gSe,"A",{href:!0});var Ibt=s(uO);Fko=r(Ibt,"ElectraForCausalLM"),Ibt.forEach(t),Tko=r(gSe," (ELECTRA model)"),gSe.forEach(t),Mko=i(Q),n2=n(Q,"LI",{});var hSe=s(n2);Uge=n(hSe,"STRONG",{});var Nbt=s(Uge);Eko=r(Nbt,"gpt2"),Nbt.forEach(t),Cko=r(hSe," \u2014 "),bO=n(hSe,"A",{href:!0});var qbt=s(bO);wko=r(qbt,"GPT2LMHeadModel"),qbt.forEach(t),Ako=r(hSe," (OpenAI GPT-2 model)"),hSe.forEach(t),Lko=i(Q),s2=n(Q,"LI",{});var pSe=s(s2);Jge=n(pSe,"STRONG",{});var jbt=s(Jge);yko=r(jbt,"gpt_neo"),jbt.forEach(t),xko=r(pSe," \u2014 "),vO=n(pSe,"A",{href:!0});var Dbt=s(vO);$ko=r(Dbt,"GPTNeoForCausalLM"),Dbt.forEach(t),kko=r(pSe," (GPT Neo model)"),pSe.forEach(t),Sko=i(Q),l2=n(Q,"LI",{});var _Se=s(l2);Yge=n(_Se,"STRONG",{});var Gbt=s(Yge);Rko=r(Gbt,"gpt_neox"),Gbt.forEach(t),Pko=r(_Se," \u2014 "),FO=n(_Se,"A",{href:!0});var Obt=s(FO);Bko=r(Obt,"GPTNeoXForCausalLM"),Obt.forEach(t),Iko=r(_Se," (GPT NeoX model)"),_Se.forEach(t),Nko=i(Q),i2=n(Q,"LI",{});var uSe=s(i2);Kge=n(uSe,"STRONG",{});var Vbt=s(Kge);qko=r(Vbt,"gptj"),Vbt.forEach(t),jko=r(uSe," \u2014 "),TO=n(uSe,"A",{href:!0});var Xbt=s(TO);Dko=r(Xbt,"GPTJForCausalLM"),Xbt.forEach(t),Gko=r(uSe," (GPT-J model)"),uSe.forEach(t),Oko=i(Q),d2=n(Q,"LI",{});var bSe=s(d2);Zge=n(bSe,"STRONG",{});var zbt=s(Zge);Vko=r(zbt,"marian"),zbt.forEach(t),Xko=r(bSe," \u2014 "),MO=n(bSe,"A",{href:!0});var Qbt=s(MO);zko=r(Qbt,"MarianForCausalLM"),Qbt.forEach(t),Qko=r(bSe," (Marian model)"),bSe.forEach(t),Wko=i(Q),c2=n(Q,"LI",{});var vSe=s(c2);ehe=n(vSe,"STRONG",{});var Wbt=s(ehe);Hko=r(Wbt,"mbart"),Wbt.forEach(t),Uko=r(vSe," \u2014 "),EO=n(vSe,"A",{href:!0});var Hbt=s(EO);Jko=r(Hbt,"MBartForCausalLM"),Hbt.forEach(t),Yko=r(vSe," (mBART model)"),vSe.forEach(t),Kko=i(Q),f2=n(Q,"LI",{});var FSe=s(f2);ohe=n(FSe,"STRONG",{});var Ubt=s(ohe);Zko=r(Ubt,"megatron-bert"),Ubt.forEach(t),eSo=r(FSe," \u2014 "),CO=n(FSe,"A",{href:!0});var Jbt=s(CO);oSo=r(Jbt,"MegatronBertForCausalLM"),Jbt.forEach(t),rSo=r(FSe," (Megatron-BERT model)"),FSe.forEach(t),tSo=i(Q),m2=n(Q,"LI",{});var TSe=s(m2);rhe=n(TSe,"STRONG",{});var Ybt=s(rhe);aSo=r(Ybt,"mvp"),Ybt.forEach(t),nSo=r(TSe," \u2014 "),wO=n(TSe,"A",{href:!0});var Kbt=s(wO);sSo=r(Kbt,"MvpForCausalLM"),Kbt.forEach(t),lSo=r(TSe," (MVP model)"),TSe.forEach(t),iSo=i(Q),g2=n(Q,"LI",{});var MSe=s(g2);the=n(MSe,"STRONG",{});var Zbt=s(the);dSo=r(Zbt,"openai-gpt"),Zbt.forEach(t),cSo=r(MSe," \u2014 "),AO=n(MSe,"A",{href:!0});var evt=s(AO);fSo=r(evt,"OpenAIGPTLMHeadModel"),evt.forEach(t),mSo=r(MSe," (OpenAI GPT model)"),MSe.forEach(t),gSo=i(Q),h2=n(Q,"LI",{});var ESe=s(h2);ahe=n(ESe,"STRONG",{});var ovt=s(ahe);hSo=r(ovt,"opt"),ovt.forEach(t),pSo=r(ESe," \u2014 "),LO=n(ESe,"A",{href:!0});var rvt=s(LO);_So=r(rvt,"OPTForCausalLM"),rvt.forEach(t),uSo=r(ESe," (OPT model)"),ESe.forEach(t),bSo=i(Q),p2=n(Q,"LI",{});var CSe=s(p2);nhe=n(CSe,"STRONG",{});var tvt=s(nhe);vSo=r(tvt,"pegasus"),tvt.forEach(t),FSo=r(CSe," \u2014 "),yO=n(CSe,"A",{href:!0});var avt=s(yO);TSo=r(avt,"PegasusForCausalLM"),avt.forEach(t),MSo=r(CSe," (Pegasus model)"),CSe.forEach(t),ESo=i(Q),_2=n(Q,"LI",{});var wSe=s(_2);she=n(wSe,"STRONG",{});var nvt=s(she);CSo=r(nvt,"plbart"),nvt.forEach(t),wSo=r(wSe," \u2014 "),xO=n(wSe,"A",{href:!0});var svt=s(xO);ASo=r(svt,"PLBartForCausalLM"),svt.forEach(t),LSo=r(wSe," (PLBart model)"),wSe.forEach(t),ySo=i(Q),u2=n(Q,"LI",{});var ASe=s(u2);lhe=n(ASe,"STRONG",{});var lvt=s(lhe);xSo=r(lvt,"prophetnet"),lvt.forEach(t),$So=r(ASe," \u2014 "),$O=n(ASe,"A",{href:!0});var ivt=s($O);kSo=r(ivt,"ProphetNetForCausalLM"),ivt.forEach(t),SSo=r(ASe," (ProphetNet model)"),ASe.forEach(t),RSo=i(Q),b2=n(Q,"LI",{});var LSe=s(b2);ihe=n(LSe,"STRONG",{});var dvt=s(ihe);PSo=r(dvt,"qdqbert"),dvt.forEach(t),BSo=r(LSe," \u2014 "),kO=n(LSe,"A",{href:!0});var cvt=s(kO);ISo=r(cvt,"QDQBertLMHeadModel"),cvt.forEach(t),NSo=r(LSe," (QDQBert model)"),LSe.forEach(t),qSo=i(Q),v2=n(Q,"LI",{});var ySe=s(v2);dhe=n(ySe,"STRONG",{});var fvt=s(dhe);jSo=r(fvt,"reformer"),fvt.forEach(t),DSo=r(ySe," \u2014 "),SO=n(ySe,"A",{href:!0});var mvt=s(SO);GSo=r(mvt,"ReformerModelWithLMHead"),mvt.forEach(t),OSo=r(ySe," (Reformer model)"),ySe.forEach(t),VSo=i(Q),F2=n(Q,"LI",{});var xSe=s(F2);che=n(xSe,"STRONG",{});var gvt=s(che);XSo=r(gvt,"rembert"),gvt.forEach(t),zSo=r(xSe," \u2014 "),RO=n(xSe,"A",{href:!0});var hvt=s(RO);QSo=r(hvt,"RemBertForCausalLM"),hvt.forEach(t),WSo=r(xSe," (RemBERT model)"),xSe.forEach(t),HSo=i(Q),T2=n(Q,"LI",{});var $Se=s(T2);fhe=n($Se,"STRONG",{});var pvt=s(fhe);USo=r(pvt,"roberta"),pvt.forEach(t),JSo=r($Se," \u2014 "),PO=n($Se,"A",{href:!0});var _vt=s(PO);YSo=r(_vt,"RobertaForCausalLM"),_vt.forEach(t),KSo=r($Se," (RoBERTa model)"),$Se.forEach(t),ZSo=i(Q),M2=n(Q,"LI",{});var kSe=s(M2);mhe=n(kSe,"STRONG",{});var uvt=s(mhe);eRo=r(uvt,"roformer"),uvt.forEach(t),oRo=r(kSe," \u2014 "),BO=n(kSe,"A",{href:!0});var bvt=s(BO);rRo=r(bvt,"RoFormerForCausalLM"),bvt.forEach(t),tRo=r(kSe," (RoFormer model)"),kSe.forEach(t),aRo=i(Q),E2=n(Q,"LI",{});var SSe=s(E2);ghe=n(SSe,"STRONG",{});var vvt=s(ghe);nRo=r(vvt,"speech_to_text_2"),vvt.forEach(t),sRo=r(SSe," \u2014 "),IO=n(SSe,"A",{href:!0});var Fvt=s(IO);lRo=r(Fvt,"Speech2Text2ForCausalLM"),Fvt.forEach(t),iRo=r(SSe," (Speech2Text2 model)"),SSe.forEach(t),dRo=i(Q),C2=n(Q,"LI",{});var RSe=s(C2);hhe=n(RSe,"STRONG",{});var Tvt=s(hhe);cRo=r(Tvt,"transfo-xl"),Tvt.forEach(t),fRo=r(RSe," \u2014 "),NO=n(RSe,"A",{href:!0});var Mvt=s(NO);mRo=r(Mvt,"TransfoXLLMHeadModel"),Mvt.forEach(t),gRo=r(RSe," (Transformer-XL model)"),RSe.forEach(t),hRo=i(Q),w2=n(Q,"LI",{});var PSe=s(w2);phe=n(PSe,"STRONG",{});var Evt=s(phe);pRo=r(Evt,"trocr"),Evt.forEach(t),_Ro=r(PSe," \u2014 "),qO=n(PSe,"A",{href:!0});var Cvt=s(qO);uRo=r(Cvt,"TrOCRForCausalLM"),Cvt.forEach(t),bRo=r(PSe," (TrOCR model)"),PSe.forEach(t),vRo=i(Q),A2=n(Q,"LI",{});var BSe=s(A2);_he=n(BSe,"STRONG",{});var wvt=s(_he);FRo=r(wvt,"xglm"),wvt.forEach(t),TRo=r(BSe," \u2014 "),jO=n(BSe,"A",{href:!0});var Avt=s(jO);MRo=r(Avt,"XGLMForCausalLM"),Avt.forEach(t),ERo=r(BSe," (XGLM model)"),BSe.forEach(t),CRo=i(Q),L2=n(Q,"LI",{});var ISe=s(L2);uhe=n(ISe,"STRONG",{});var Lvt=s(uhe);wRo=r(Lvt,"xlm"),Lvt.forEach(t),ARo=r(ISe," \u2014 "),DO=n(ISe,"A",{href:!0});var yvt=s(DO);LRo=r(yvt,"XLMWithLMHeadModel"),yvt.forEach(t),yRo=r(ISe," (XLM model)"),ISe.forEach(t),xRo=i(Q),y2=n(Q,"LI",{});var NSe=s(y2);bhe=n(NSe,"STRONG",{});var xvt=s(bhe);$Ro=r(xvt,"xlm-prophetnet"),xvt.forEach(t),kRo=r(NSe," \u2014 "),GO=n(NSe,"A",{href:!0});var $vt=s(GO);SRo=r($vt,"XLMProphetNetForCausalLM"),$vt.forEach(t),RRo=r(NSe," (XLM-ProphetNet model)"),NSe.forEach(t),PRo=i(Q),x2=n(Q,"LI",{});var qSe=s(x2);vhe=n(qSe,"STRONG",{});var kvt=s(vhe);BRo=r(kvt,"xlm-roberta"),kvt.forEach(t),IRo=r(qSe," \u2014 "),OO=n(qSe,"A",{href:!0});var Svt=s(OO);NRo=r(Svt,"XLMRobertaForCausalLM"),Svt.forEach(t),qRo=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),jRo=i(Q),$2=n(Q,"LI",{});var jSe=s($2);Fhe=n(jSe,"STRONG",{});var Rvt=s(Fhe);DRo=r(Rvt,"xlm-roberta-xl"),Rvt.forEach(t),GRo=r(jSe," \u2014 "),VO=n(jSe,"A",{href:!0});var Pvt=s(VO);ORo=r(Pvt,"XLMRobertaXLForCausalLM"),Pvt.forEach(t),VRo=r(jSe," (XLM-RoBERTa-XL model)"),jSe.forEach(t),XRo=i(Q),k2=n(Q,"LI",{});var DSe=s(k2);The=n(DSe,"STRONG",{});var Bvt=s(The);zRo=r(Bvt,"xlnet"),Bvt.forEach(t),QRo=r(DSe," \u2014 "),XO=n(DSe,"A",{href:!0});var Ivt=s(XO);WRo=r(Ivt,"XLNetLMHeadModel"),Ivt.forEach(t),HRo=r(DSe," (XLNet model)"),DSe.forEach(t),Q.forEach(t),URo=i(da),S2=n(da,"P",{});var GSe=s(S2);JRo=r(GSe,"The model is set in evaluation mode by default using "),Mhe=n(GSe,"CODE",{});var Nvt=s(Mhe);YRo=r(Nvt,"model.eval()"),Nvt.forEach(t),KRo=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ehe=n(GSe,"CODE",{});var qvt=s(Ehe);ZRo=r(qvt,"model.train()"),qvt.forEach(t),GSe.forEach(t),ePo=i(da),T(R2.$$.fragment,da),da.forEach(t),al.forEach(t),BXe=i(f),Ji=n(f,"H2",{class:!0});var GQe=s(Ji);P2=n(GQe,"A",{id:!0,class:!0,href:!0});var jvt=s(P2);Che=n(jvt,"SPAN",{});var Dvt=s(Che);T(YL.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),oPo=i(GQe),whe=n(GQe,"SPAN",{});var Gvt=s(whe);rPo=r(Gvt,"AutoModelForMaskedLM"),Gvt.forEach(t),GQe.forEach(t),IXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(KL.$$.fragment,nl),tPo=i(nl),Yi=n(nl,"P",{});var Qre=s(Yi);aPo=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zO=n(Qre,"A",{href:!0});var Ovt=s(zO);nPo=r(Ovt,"from_pretrained()"),Ovt.forEach(t),sPo=r(Qre," class method or the "),QO=n(Qre,"A",{href:!0});var Vvt=s(QO);lPo=r(Vvt,"from_config()"),Vvt.forEach(t),iPo=r(Qre,` class
method.`),Qre.forEach(t),dPo=i(nl),ZL=n(nl,"P",{});var OQe=s(ZL);cPo=r(OQe,"This class cannot be instantiated directly using "),Ahe=n(OQe,"CODE",{});var Xvt=s(Ahe);fPo=r(Xvt,"__init__()"),Xvt.forEach(t),mPo=r(OQe," (throws an error)."),OQe.forEach(t),gPo=i(nl),ft=n(nl,"DIV",{class:!0});var vw=s(ft);T(ey.$$.fragment,vw),hPo=i(vw),Lhe=n(vw,"P",{});var zvt=s(Lhe);pPo=r(zvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zvt.forEach(t),_Po=i(vw),Ki=n(vw,"P",{});var Wre=s(Ki);uPo=r(Wre,`Note:
Loading a model from its configuration file does `),yhe=n(Wre,"STRONG",{});var Qvt=s(yhe);bPo=r(Qvt,"not"),Qvt.forEach(t),vPo=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Wre,"A",{href:!0});var Wvt=s(WO);FPo=r(Wvt,"from_pretrained()"),Wvt.forEach(t),TPo=r(Wre," to load the model weights."),Wre.forEach(t),MPo=i(vw),T(B2.$$.fragment,vw),vw.forEach(t),EPo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(oy.$$.fragment,ca),CPo=i(ca),xhe=n(ca,"P",{});var Hvt=s(xhe);wPo=r(Hvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hvt.forEach(t),APo=i(ca),ja=n(ca,"P",{});var Fw=s(ja);LPo=r(Fw,"The model class to instantiate is selected based on the "),$he=n(Fw,"CODE",{});var Uvt=s($he);yPo=r(Uvt,"model_type"),Uvt.forEach(t),xPo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),khe=n(Fw,"CODE",{});var Jvt=s(khe);$Po=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),kPo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(Fw,"CODE",{});var Yvt=s(She);SPo=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),RPo=r(Fw,":"),Fw.forEach(t),PPo=i(ca),W=n(ca,"UL",{});var H=s(W);I2=n(H,"LI",{});var OSe=s(I2);Rhe=n(OSe,"STRONG",{});var Kvt=s(Rhe);BPo=r(Kvt,"albert"),Kvt.forEach(t),IPo=r(OSe," \u2014 "),HO=n(OSe,"A",{href:!0});var Zvt=s(HO);NPo=r(Zvt,"AlbertForMaskedLM"),Zvt.forEach(t),qPo=r(OSe," (ALBERT model)"),OSe.forEach(t),jPo=i(H),N2=n(H,"LI",{});var VSe=s(N2);Phe=n(VSe,"STRONG",{});var eFt=s(Phe);DPo=r(eFt,"bart"),eFt.forEach(t),GPo=r(VSe," \u2014 "),UO=n(VSe,"A",{href:!0});var oFt=s(UO);OPo=r(oFt,"BartForConditionalGeneration"),oFt.forEach(t),VPo=r(VSe," (BART model)"),VSe.forEach(t),XPo=i(H),q2=n(H,"LI",{});var XSe=s(q2);Bhe=n(XSe,"STRONG",{});var rFt=s(Bhe);zPo=r(rFt,"bert"),rFt.forEach(t),QPo=r(XSe," \u2014 "),JO=n(XSe,"A",{href:!0});var tFt=s(JO);WPo=r(tFt,"BertForMaskedLM"),tFt.forEach(t),HPo=r(XSe," (BERT model)"),XSe.forEach(t),UPo=i(H),j2=n(H,"LI",{});var zSe=s(j2);Ihe=n(zSe,"STRONG",{});var aFt=s(Ihe);JPo=r(aFt,"big_bird"),aFt.forEach(t),YPo=r(zSe," \u2014 "),YO=n(zSe,"A",{href:!0});var nFt=s(YO);KPo=r(nFt,"BigBirdForMaskedLM"),nFt.forEach(t),ZPo=r(zSe," (BigBird model)"),zSe.forEach(t),eBo=i(H),D2=n(H,"LI",{});var QSe=s(D2);Nhe=n(QSe,"STRONG",{});var sFt=s(Nhe);oBo=r(sFt,"camembert"),sFt.forEach(t),rBo=r(QSe," \u2014 "),KO=n(QSe,"A",{href:!0});var lFt=s(KO);tBo=r(lFt,"CamembertForMaskedLM"),lFt.forEach(t),aBo=r(QSe," (CamemBERT model)"),QSe.forEach(t),nBo=i(H),G2=n(H,"LI",{});var WSe=s(G2);qhe=n(WSe,"STRONG",{});var iFt=s(qhe);sBo=r(iFt,"convbert"),iFt.forEach(t),lBo=r(WSe," \u2014 "),ZO=n(WSe,"A",{href:!0});var dFt=s(ZO);iBo=r(dFt,"ConvBertForMaskedLM"),dFt.forEach(t),dBo=r(WSe," (ConvBERT model)"),WSe.forEach(t),cBo=i(H),O2=n(H,"LI",{});var HSe=s(O2);jhe=n(HSe,"STRONG",{});var cFt=s(jhe);fBo=r(cFt,"data2vec-text"),cFt.forEach(t),mBo=r(HSe," \u2014 "),eV=n(HSe,"A",{href:!0});var fFt=s(eV);gBo=r(fFt,"Data2VecTextForMaskedLM"),fFt.forEach(t),hBo=r(HSe," (Data2VecText model)"),HSe.forEach(t),pBo=i(H),V2=n(H,"LI",{});var USe=s(V2);Dhe=n(USe,"STRONG",{});var mFt=s(Dhe);_Bo=r(mFt,"deberta"),mFt.forEach(t),uBo=r(USe," \u2014 "),oV=n(USe,"A",{href:!0});var gFt=s(oV);bBo=r(gFt,"DebertaForMaskedLM"),gFt.forEach(t),vBo=r(USe," (DeBERTa model)"),USe.forEach(t),FBo=i(H),X2=n(H,"LI",{});var JSe=s(X2);Ghe=n(JSe,"STRONG",{});var hFt=s(Ghe);TBo=r(hFt,"deberta-v2"),hFt.forEach(t),MBo=r(JSe," \u2014 "),rV=n(JSe,"A",{href:!0});var pFt=s(rV);EBo=r(pFt,"DebertaV2ForMaskedLM"),pFt.forEach(t),CBo=r(JSe," (DeBERTa-v2 model)"),JSe.forEach(t),wBo=i(H),z2=n(H,"LI",{});var YSe=s(z2);Ohe=n(YSe,"STRONG",{});var _Ft=s(Ohe);ABo=r(_Ft,"distilbert"),_Ft.forEach(t),LBo=r(YSe," \u2014 "),tV=n(YSe,"A",{href:!0});var uFt=s(tV);yBo=r(uFt,"DistilBertForMaskedLM"),uFt.forEach(t),xBo=r(YSe," (DistilBERT model)"),YSe.forEach(t),$Bo=i(H),Q2=n(H,"LI",{});var KSe=s(Q2);Vhe=n(KSe,"STRONG",{});var bFt=s(Vhe);kBo=r(bFt,"electra"),bFt.forEach(t),SBo=r(KSe," \u2014 "),aV=n(KSe,"A",{href:!0});var vFt=s(aV);RBo=r(vFt,"ElectraForMaskedLM"),vFt.forEach(t),PBo=r(KSe," (ELECTRA model)"),KSe.forEach(t),BBo=i(H),W2=n(H,"LI",{});var ZSe=s(W2);Xhe=n(ZSe,"STRONG",{});var FFt=s(Xhe);IBo=r(FFt,"flaubert"),FFt.forEach(t),NBo=r(ZSe," \u2014 "),nV=n(ZSe,"A",{href:!0});var TFt=s(nV);qBo=r(TFt,"FlaubertWithLMHeadModel"),TFt.forEach(t),jBo=r(ZSe," (FlauBERT model)"),ZSe.forEach(t),DBo=i(H),H2=n(H,"LI",{});var eRe=s(H2);zhe=n(eRe,"STRONG",{});var MFt=s(zhe);GBo=r(MFt,"fnet"),MFt.forEach(t),OBo=r(eRe," \u2014 "),sV=n(eRe,"A",{href:!0});var EFt=s(sV);VBo=r(EFt,"FNetForMaskedLM"),EFt.forEach(t),XBo=r(eRe," (FNet model)"),eRe.forEach(t),zBo=i(H),U2=n(H,"LI",{});var oRe=s(U2);Qhe=n(oRe,"STRONG",{});var CFt=s(Qhe);QBo=r(CFt,"funnel"),CFt.forEach(t),WBo=r(oRe," \u2014 "),lV=n(oRe,"A",{href:!0});var wFt=s(lV);HBo=r(wFt,"FunnelForMaskedLM"),wFt.forEach(t),UBo=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),JBo=i(H),J2=n(H,"LI",{});var rRe=s(J2);Whe=n(rRe,"STRONG",{});var AFt=s(Whe);YBo=r(AFt,"ibert"),AFt.forEach(t),KBo=r(rRe," \u2014 "),iV=n(rRe,"A",{href:!0});var LFt=s(iV);ZBo=r(LFt,"IBertForMaskedLM"),LFt.forEach(t),eIo=r(rRe," (I-BERT model)"),rRe.forEach(t),oIo=i(H),Y2=n(H,"LI",{});var tRe=s(Y2);Hhe=n(tRe,"STRONG",{});var yFt=s(Hhe);rIo=r(yFt,"layoutlm"),yFt.forEach(t),tIo=r(tRe," \u2014 "),dV=n(tRe,"A",{href:!0});var xFt=s(dV);aIo=r(xFt,"LayoutLMForMaskedLM"),xFt.forEach(t),nIo=r(tRe," (LayoutLM model)"),tRe.forEach(t),sIo=i(H),K2=n(H,"LI",{});var aRe=s(K2);Uhe=n(aRe,"STRONG",{});var $Ft=s(Uhe);lIo=r($Ft,"longformer"),$Ft.forEach(t),iIo=r(aRe," \u2014 "),cV=n(aRe,"A",{href:!0});var kFt=s(cV);dIo=r(kFt,"LongformerForMaskedLM"),kFt.forEach(t),cIo=r(aRe," (Longformer model)"),aRe.forEach(t),fIo=i(H),Z2=n(H,"LI",{});var nRe=s(Z2);Jhe=n(nRe,"STRONG",{});var SFt=s(Jhe);mIo=r(SFt,"luke"),SFt.forEach(t),gIo=r(nRe," \u2014 "),fV=n(nRe,"A",{href:!0});var RFt=s(fV);hIo=r(RFt,"LukeForMaskedLM"),RFt.forEach(t),pIo=r(nRe," (LUKE model)"),nRe.forEach(t),_Io=i(H),e4=n(H,"LI",{});var sRe=s(e4);Yhe=n(sRe,"STRONG",{});var PFt=s(Yhe);uIo=r(PFt,"mbart"),PFt.forEach(t),bIo=r(sRe," \u2014 "),mV=n(sRe,"A",{href:!0});var BFt=s(mV);vIo=r(BFt,"MBartForConditionalGeneration"),BFt.forEach(t),FIo=r(sRe," (mBART model)"),sRe.forEach(t),TIo=i(H),o4=n(H,"LI",{});var lRe=s(o4);Khe=n(lRe,"STRONG",{});var IFt=s(Khe);MIo=r(IFt,"megatron-bert"),IFt.forEach(t),EIo=r(lRe," \u2014 "),gV=n(lRe,"A",{href:!0});var NFt=s(gV);CIo=r(NFt,"MegatronBertForMaskedLM"),NFt.forEach(t),wIo=r(lRe," (Megatron-BERT model)"),lRe.forEach(t),AIo=i(H),r4=n(H,"LI",{});var iRe=s(r4);Zhe=n(iRe,"STRONG",{});var qFt=s(Zhe);LIo=r(qFt,"mobilebert"),qFt.forEach(t),yIo=r(iRe," \u2014 "),hV=n(iRe,"A",{href:!0});var jFt=s(hV);xIo=r(jFt,"MobileBertForMaskedLM"),jFt.forEach(t),$Io=r(iRe," (MobileBERT model)"),iRe.forEach(t),kIo=i(H),t4=n(H,"LI",{});var dRe=s(t4);epe=n(dRe,"STRONG",{});var DFt=s(epe);SIo=r(DFt,"mpnet"),DFt.forEach(t),RIo=r(dRe," \u2014 "),pV=n(dRe,"A",{href:!0});var GFt=s(pV);PIo=r(GFt,"MPNetForMaskedLM"),GFt.forEach(t),BIo=r(dRe," (MPNet model)"),dRe.forEach(t),IIo=i(H),a4=n(H,"LI",{});var cRe=s(a4);ope=n(cRe,"STRONG",{});var OFt=s(ope);NIo=r(OFt,"mvp"),OFt.forEach(t),qIo=r(cRe," \u2014 "),_V=n(cRe,"A",{href:!0});var VFt=s(_V);jIo=r(VFt,"MvpForConditionalGeneration"),VFt.forEach(t),DIo=r(cRe," (MVP model)"),cRe.forEach(t),GIo=i(H),n4=n(H,"LI",{});var fRe=s(n4);rpe=n(fRe,"STRONG",{});var XFt=s(rpe);OIo=r(XFt,"nezha"),XFt.forEach(t),VIo=r(fRe," \u2014 "),uV=n(fRe,"A",{href:!0});var zFt=s(uV);XIo=r(zFt,"NezhaForMaskedLM"),zFt.forEach(t),zIo=r(fRe," (Nezha model)"),fRe.forEach(t),QIo=i(H),s4=n(H,"LI",{});var mRe=s(s4);tpe=n(mRe,"STRONG",{});var QFt=s(tpe);WIo=r(QFt,"nystromformer"),QFt.forEach(t),HIo=r(mRe," \u2014 "),bV=n(mRe,"A",{href:!0});var WFt=s(bV);UIo=r(WFt,"NystromformerForMaskedLM"),WFt.forEach(t),JIo=r(mRe," (Nystr\xF6mformer model)"),mRe.forEach(t),YIo=i(H),l4=n(H,"LI",{});var gRe=s(l4);ape=n(gRe,"STRONG",{});var HFt=s(ape);KIo=r(HFt,"perceiver"),HFt.forEach(t),ZIo=r(gRe," \u2014 "),vV=n(gRe,"A",{href:!0});var UFt=s(vV);eNo=r(UFt,"PerceiverForMaskedLM"),UFt.forEach(t),oNo=r(gRe," (Perceiver model)"),gRe.forEach(t),rNo=i(H),i4=n(H,"LI",{});var hRe=s(i4);npe=n(hRe,"STRONG",{});var JFt=s(npe);tNo=r(JFt,"qdqbert"),JFt.forEach(t),aNo=r(hRe," \u2014 "),FV=n(hRe,"A",{href:!0});var YFt=s(FV);nNo=r(YFt,"QDQBertForMaskedLM"),YFt.forEach(t),sNo=r(hRe," (QDQBert model)"),hRe.forEach(t),lNo=i(H),d4=n(H,"LI",{});var pRe=s(d4);spe=n(pRe,"STRONG",{});var KFt=s(spe);iNo=r(KFt,"reformer"),KFt.forEach(t),dNo=r(pRe," \u2014 "),TV=n(pRe,"A",{href:!0});var ZFt=s(TV);cNo=r(ZFt,"ReformerForMaskedLM"),ZFt.forEach(t),fNo=r(pRe," (Reformer model)"),pRe.forEach(t),mNo=i(H),c4=n(H,"LI",{});var _Re=s(c4);lpe=n(_Re,"STRONG",{});var e6t=s(lpe);gNo=r(e6t,"rembert"),e6t.forEach(t),hNo=r(_Re," \u2014 "),MV=n(_Re,"A",{href:!0});var o6t=s(MV);pNo=r(o6t,"RemBertForMaskedLM"),o6t.forEach(t),_No=r(_Re," (RemBERT model)"),_Re.forEach(t),uNo=i(H),f4=n(H,"LI",{});var uRe=s(f4);ipe=n(uRe,"STRONG",{});var r6t=s(ipe);bNo=r(r6t,"roberta"),r6t.forEach(t),vNo=r(uRe," \u2014 "),EV=n(uRe,"A",{href:!0});var t6t=s(EV);FNo=r(t6t,"RobertaForMaskedLM"),t6t.forEach(t),TNo=r(uRe," (RoBERTa model)"),uRe.forEach(t),MNo=i(H),m4=n(H,"LI",{});var bRe=s(m4);dpe=n(bRe,"STRONG",{});var a6t=s(dpe);ENo=r(a6t,"roformer"),a6t.forEach(t),CNo=r(bRe," \u2014 "),CV=n(bRe,"A",{href:!0});var n6t=s(CV);wNo=r(n6t,"RoFormerForMaskedLM"),n6t.forEach(t),ANo=r(bRe," (RoFormer model)"),bRe.forEach(t),LNo=i(H),g4=n(H,"LI",{});var vRe=s(g4);cpe=n(vRe,"STRONG",{});var s6t=s(cpe);yNo=r(s6t,"squeezebert"),s6t.forEach(t),xNo=r(vRe," \u2014 "),wV=n(vRe,"A",{href:!0});var l6t=s(wV);$No=r(l6t,"SqueezeBertForMaskedLM"),l6t.forEach(t),kNo=r(vRe," (SqueezeBERT model)"),vRe.forEach(t),SNo=i(H),h4=n(H,"LI",{});var FRe=s(h4);fpe=n(FRe,"STRONG",{});var i6t=s(fpe);RNo=r(i6t,"tapas"),i6t.forEach(t),PNo=r(FRe," \u2014 "),AV=n(FRe,"A",{href:!0});var d6t=s(AV);BNo=r(d6t,"TapasForMaskedLM"),d6t.forEach(t),INo=r(FRe," (TAPAS model)"),FRe.forEach(t),NNo=i(H),p4=n(H,"LI",{});var TRe=s(p4);mpe=n(TRe,"STRONG",{});var c6t=s(mpe);qNo=r(c6t,"wav2vec2"),c6t.forEach(t),jNo=r(TRe," \u2014 "),gpe=n(TRe,"CODE",{});var f6t=s(gpe);DNo=r(f6t,"Wav2Vec2ForMaskedLM"),f6t.forEach(t),GNo=r(TRe," (Wav2Vec2 model)"),TRe.forEach(t),ONo=i(H),_4=n(H,"LI",{});var MRe=s(_4);hpe=n(MRe,"STRONG",{});var m6t=s(hpe);VNo=r(m6t,"xlm"),m6t.forEach(t),XNo=r(MRe," \u2014 "),LV=n(MRe,"A",{href:!0});var g6t=s(LV);zNo=r(g6t,"XLMWithLMHeadModel"),g6t.forEach(t),QNo=r(MRe," (XLM model)"),MRe.forEach(t),WNo=i(H),u4=n(H,"LI",{});var ERe=s(u4);ppe=n(ERe,"STRONG",{});var h6t=s(ppe);HNo=r(h6t,"xlm-roberta"),h6t.forEach(t),UNo=r(ERe," \u2014 "),yV=n(ERe,"A",{href:!0});var p6t=s(yV);JNo=r(p6t,"XLMRobertaForMaskedLM"),p6t.forEach(t),YNo=r(ERe," (XLM-RoBERTa model)"),ERe.forEach(t),KNo=i(H),b4=n(H,"LI",{});var CRe=s(b4);_pe=n(CRe,"STRONG",{});var _6t=s(_pe);ZNo=r(_6t,"xlm-roberta-xl"),_6t.forEach(t),eqo=r(CRe," \u2014 "),xV=n(CRe,"A",{href:!0});var u6t=s(xV);oqo=r(u6t,"XLMRobertaXLForMaskedLM"),u6t.forEach(t),rqo=r(CRe," (XLM-RoBERTa-XL model)"),CRe.forEach(t),tqo=i(H),v4=n(H,"LI",{});var wRe=s(v4);upe=n(wRe,"STRONG",{});var b6t=s(upe);aqo=r(b6t,"yoso"),b6t.forEach(t),nqo=r(wRe," \u2014 "),$V=n(wRe,"A",{href:!0});var v6t=s($V);sqo=r(v6t,"YosoForMaskedLM"),v6t.forEach(t),lqo=r(wRe," (YOSO model)"),wRe.forEach(t),H.forEach(t),iqo=i(ca),F4=n(ca,"P",{});var ARe=s(F4);dqo=r(ARe,"The model is set in evaluation mode by default using "),bpe=n(ARe,"CODE",{});var F6t=s(bpe);cqo=r(F6t,"model.eval()"),F6t.forEach(t),fqo=r(ARe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(ARe,"CODE",{});var T6t=s(vpe);mqo=r(T6t,"model.train()"),T6t.forEach(t),ARe.forEach(t),gqo=i(ca),T(T4.$$.fragment,ca),ca.forEach(t),nl.forEach(t),NXe=i(f),Zi=n(f,"H2",{class:!0});var VQe=s(Zi);M4=n(VQe,"A",{id:!0,class:!0,href:!0});var M6t=s(M4);Fpe=n(M6t,"SPAN",{});var E6t=s(Fpe);T(ry.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),hqo=i(VQe),Tpe=n(VQe,"SPAN",{});var C6t=s(Tpe);pqo=r(C6t,"AutoModelForSeq2SeqLM"),C6t.forEach(t),VQe.forEach(t),qXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(ty.$$.fragment,sl),_qo=i(sl),ed=n(sl,"P",{});var Hre=s(ed);uqo=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kV=n(Hre,"A",{href:!0});var w6t=s(kV);bqo=r(w6t,"from_pretrained()"),w6t.forEach(t),vqo=r(Hre," class method or the "),SV=n(Hre,"A",{href:!0});var A6t=s(SV);Fqo=r(A6t,"from_config()"),A6t.forEach(t),Tqo=r(Hre,` class
method.`),Hre.forEach(t),Mqo=i(sl),ay=n(sl,"P",{});var XQe=s(ay);Eqo=r(XQe,"This class cannot be instantiated directly using "),Mpe=n(XQe,"CODE",{});var L6t=s(Mpe);Cqo=r(L6t,"__init__()"),L6t.forEach(t),wqo=r(XQe," (throws an error)."),XQe.forEach(t),Aqo=i(sl),mt=n(sl,"DIV",{class:!0});var Tw=s(mt);T(ny.$$.fragment,Tw),Lqo=i(Tw),Epe=n(Tw,"P",{});var y6t=s(Epe);yqo=r(y6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y6t.forEach(t),xqo=i(Tw),od=n(Tw,"P",{});var Ure=s(od);$qo=r(Ure,`Note:
Loading a model from its configuration file does `),Cpe=n(Ure,"STRONG",{});var x6t=s(Cpe);kqo=r(x6t,"not"),x6t.forEach(t),Sqo=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(Ure,"A",{href:!0});var $6t=s(RV);Rqo=r($6t,"from_pretrained()"),$6t.forEach(t),Pqo=r(Ure," to load the model weights."),Ure.forEach(t),Bqo=i(Tw),T(E4.$$.fragment,Tw),Tw.forEach(t),Iqo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(sy.$$.fragment,fa),Nqo=i(fa),wpe=n(fa,"P",{});var k6t=s(wpe);qqo=r(k6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k6t.forEach(t),jqo=i(fa),Da=n(fa,"P",{});var Mw=s(Da);Dqo=r(Mw,"The model class to instantiate is selected based on the "),Ape=n(Mw,"CODE",{});var S6t=s(Ape);Gqo=r(S6t,"model_type"),S6t.forEach(t),Oqo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(Mw,"CODE",{});var R6t=s(Lpe);Vqo=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),Xqo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(Mw,"CODE",{});var P6t=s(ype);zqo=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),Qqo=r(Mw,":"),Mw.forEach(t),Wqo=i(fa),pe=n(fa,"UL",{});var ve=s(pe);C4=n(ve,"LI",{});var LRe=s(C4);xpe=n(LRe,"STRONG",{});var B6t=s(xpe);Hqo=r(B6t,"bart"),B6t.forEach(t),Uqo=r(LRe," \u2014 "),PV=n(LRe,"A",{href:!0});var I6t=s(PV);Jqo=r(I6t,"BartForConditionalGeneration"),I6t.forEach(t),Yqo=r(LRe," (BART model)"),LRe.forEach(t),Kqo=i(ve),w4=n(ve,"LI",{});var yRe=s(w4);$pe=n(yRe,"STRONG",{});var N6t=s($pe);Zqo=r(N6t,"bigbird_pegasus"),N6t.forEach(t),ejo=r(yRe," \u2014 "),BV=n(yRe,"A",{href:!0});var q6t=s(BV);ojo=r(q6t,"BigBirdPegasusForConditionalGeneration"),q6t.forEach(t),rjo=r(yRe," (BigBird-Pegasus model)"),yRe.forEach(t),tjo=i(ve),A4=n(ve,"LI",{});var xRe=s(A4);kpe=n(xRe,"STRONG",{});var j6t=s(kpe);ajo=r(j6t,"blenderbot"),j6t.forEach(t),njo=r(xRe," \u2014 "),IV=n(xRe,"A",{href:!0});var D6t=s(IV);sjo=r(D6t,"BlenderbotForConditionalGeneration"),D6t.forEach(t),ljo=r(xRe," (Blenderbot model)"),xRe.forEach(t),ijo=i(ve),L4=n(ve,"LI",{});var $Re=s(L4);Spe=n($Re,"STRONG",{});var G6t=s(Spe);djo=r(G6t,"blenderbot-small"),G6t.forEach(t),cjo=r($Re," \u2014 "),NV=n($Re,"A",{href:!0});var O6t=s(NV);fjo=r(O6t,"BlenderbotSmallForConditionalGeneration"),O6t.forEach(t),mjo=r($Re," (BlenderbotSmall model)"),$Re.forEach(t),gjo=i(ve),y4=n(ve,"LI",{});var kRe=s(y4);Rpe=n(kRe,"STRONG",{});var V6t=s(Rpe);hjo=r(V6t,"encoder-decoder"),V6t.forEach(t),pjo=r(kRe," \u2014 "),qV=n(kRe,"A",{href:!0});var X6t=s(qV);_jo=r(X6t,"EncoderDecoderModel"),X6t.forEach(t),ujo=r(kRe," (Encoder decoder model)"),kRe.forEach(t),bjo=i(ve),x4=n(ve,"LI",{});var SRe=s(x4);Ppe=n(SRe,"STRONG",{});var z6t=s(Ppe);vjo=r(z6t,"fsmt"),z6t.forEach(t),Fjo=r(SRe," \u2014 "),jV=n(SRe,"A",{href:!0});var Q6t=s(jV);Tjo=r(Q6t,"FSMTForConditionalGeneration"),Q6t.forEach(t),Mjo=r(SRe," (FairSeq Machine-Translation model)"),SRe.forEach(t),Ejo=i(ve),$4=n(ve,"LI",{});var RRe=s($4);Bpe=n(RRe,"STRONG",{});var W6t=s(Bpe);Cjo=r(W6t,"led"),W6t.forEach(t),wjo=r(RRe," \u2014 "),DV=n(RRe,"A",{href:!0});var H6t=s(DV);Ajo=r(H6t,"LEDForConditionalGeneration"),H6t.forEach(t),Ljo=r(RRe," (LED model)"),RRe.forEach(t),yjo=i(ve),k4=n(ve,"LI",{});var PRe=s(k4);Ipe=n(PRe,"STRONG",{});var U6t=s(Ipe);xjo=r(U6t,"longt5"),U6t.forEach(t),$jo=r(PRe," \u2014 "),GV=n(PRe,"A",{href:!0});var J6t=s(GV);kjo=r(J6t,"LongT5ForConditionalGeneration"),J6t.forEach(t),Sjo=r(PRe," (LongT5 model)"),PRe.forEach(t),Rjo=i(ve),S4=n(ve,"LI",{});var BRe=s(S4);Npe=n(BRe,"STRONG",{});var Y6t=s(Npe);Pjo=r(Y6t,"m2m_100"),Y6t.forEach(t),Bjo=r(BRe," \u2014 "),OV=n(BRe,"A",{href:!0});var K6t=s(OV);Ijo=r(K6t,"M2M100ForConditionalGeneration"),K6t.forEach(t),Njo=r(BRe," (M2M100 model)"),BRe.forEach(t),qjo=i(ve),R4=n(ve,"LI",{});var IRe=s(R4);qpe=n(IRe,"STRONG",{});var Z6t=s(qpe);jjo=r(Z6t,"marian"),Z6t.forEach(t),Djo=r(IRe," \u2014 "),VV=n(IRe,"A",{href:!0});var eTt=s(VV);Gjo=r(eTt,"MarianMTModel"),eTt.forEach(t),Ojo=r(IRe," (Marian model)"),IRe.forEach(t),Vjo=i(ve),P4=n(ve,"LI",{});var NRe=s(P4);jpe=n(NRe,"STRONG",{});var oTt=s(jpe);Xjo=r(oTt,"mbart"),oTt.forEach(t),zjo=r(NRe," \u2014 "),XV=n(NRe,"A",{href:!0});var rTt=s(XV);Qjo=r(rTt,"MBartForConditionalGeneration"),rTt.forEach(t),Wjo=r(NRe," (mBART model)"),NRe.forEach(t),Hjo=i(ve),B4=n(ve,"LI",{});var qRe=s(B4);Dpe=n(qRe,"STRONG",{});var tTt=s(Dpe);Ujo=r(tTt,"mt5"),tTt.forEach(t),Jjo=r(qRe," \u2014 "),zV=n(qRe,"A",{href:!0});var aTt=s(zV);Yjo=r(aTt,"MT5ForConditionalGeneration"),aTt.forEach(t),Kjo=r(qRe," (MT5 model)"),qRe.forEach(t),Zjo=i(ve),I4=n(ve,"LI",{});var jRe=s(I4);Gpe=n(jRe,"STRONG",{});var nTt=s(Gpe);eDo=r(nTt,"mvp"),nTt.forEach(t),oDo=r(jRe," \u2014 "),QV=n(jRe,"A",{href:!0});var sTt=s(QV);rDo=r(sTt,"MvpForConditionalGeneration"),sTt.forEach(t),tDo=r(jRe," (MVP model)"),jRe.forEach(t),aDo=i(ve),N4=n(ve,"LI",{});var DRe=s(N4);Ope=n(DRe,"STRONG",{});var lTt=s(Ope);nDo=r(lTt,"pegasus"),lTt.forEach(t),sDo=r(DRe," \u2014 "),WV=n(DRe,"A",{href:!0});var iTt=s(WV);lDo=r(iTt,"PegasusForConditionalGeneration"),iTt.forEach(t),iDo=r(DRe," (Pegasus model)"),DRe.forEach(t),dDo=i(ve),q4=n(ve,"LI",{});var GRe=s(q4);Vpe=n(GRe,"STRONG",{});var dTt=s(Vpe);cDo=r(dTt,"plbart"),dTt.forEach(t),fDo=r(GRe," \u2014 "),HV=n(GRe,"A",{href:!0});var cTt=s(HV);mDo=r(cTt,"PLBartForConditionalGeneration"),cTt.forEach(t),gDo=r(GRe," (PLBart model)"),GRe.forEach(t),hDo=i(ve),j4=n(ve,"LI",{});var ORe=s(j4);Xpe=n(ORe,"STRONG",{});var fTt=s(Xpe);pDo=r(fTt,"prophetnet"),fTt.forEach(t),_Do=r(ORe," \u2014 "),UV=n(ORe,"A",{href:!0});var mTt=s(UV);uDo=r(mTt,"ProphetNetForConditionalGeneration"),mTt.forEach(t),bDo=r(ORe," (ProphetNet model)"),ORe.forEach(t),vDo=i(ve),D4=n(ve,"LI",{});var VRe=s(D4);zpe=n(VRe,"STRONG",{});var gTt=s(zpe);FDo=r(gTt,"t5"),gTt.forEach(t),TDo=r(VRe," \u2014 "),JV=n(VRe,"A",{href:!0});var hTt=s(JV);MDo=r(hTt,"T5ForConditionalGeneration"),hTt.forEach(t),EDo=r(VRe," (T5 model)"),VRe.forEach(t),CDo=i(ve),G4=n(ve,"LI",{});var XRe=s(G4);Qpe=n(XRe,"STRONG",{});var pTt=s(Qpe);wDo=r(pTt,"xlm-prophetnet"),pTt.forEach(t),ADo=r(XRe," \u2014 "),YV=n(XRe,"A",{href:!0});var _Tt=s(YV);LDo=r(_Tt,"XLMProphetNetForConditionalGeneration"),_Tt.forEach(t),yDo=r(XRe," (XLM-ProphetNet model)"),XRe.forEach(t),ve.forEach(t),xDo=i(fa),O4=n(fa,"P",{});var zRe=s(O4);$Do=r(zRe,"The model is set in evaluation mode by default using "),Wpe=n(zRe,"CODE",{});var uTt=s(Wpe);kDo=r(uTt,"model.eval()"),uTt.forEach(t),SDo=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(zRe,"CODE",{});var bTt=s(Hpe);RDo=r(bTt,"model.train()"),bTt.forEach(t),zRe.forEach(t),PDo=i(fa),T(V4.$$.fragment,fa),fa.forEach(t),sl.forEach(t),jXe=i(f),rd=n(f,"H2",{class:!0});var zQe=s(rd);X4=n(zQe,"A",{id:!0,class:!0,href:!0});var vTt=s(X4);Upe=n(vTt,"SPAN",{});var FTt=s(Upe);T(ly.$$.fragment,FTt),FTt.forEach(t),vTt.forEach(t),BDo=i(zQe),Jpe=n(zQe,"SPAN",{});var TTt=s(Jpe);IDo=r(TTt,"AutoModelForSequenceClassification"),TTt.forEach(t),zQe.forEach(t),DXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(iy.$$.fragment,ll),NDo=i(ll),td=n(ll,"P",{});var Jre=s(td);qDo=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KV=n(Jre,"A",{href:!0});var MTt=s(KV);jDo=r(MTt,"from_pretrained()"),MTt.forEach(t),DDo=r(Jre," class method or the "),ZV=n(Jre,"A",{href:!0});var ETt=s(ZV);GDo=r(ETt,"from_config()"),ETt.forEach(t),ODo=r(Jre,` class
method.`),Jre.forEach(t),VDo=i(ll),dy=n(ll,"P",{});var QQe=s(dy);XDo=r(QQe,"This class cannot be instantiated directly using "),Ype=n(QQe,"CODE",{});var CTt=s(Ype);zDo=r(CTt,"__init__()"),CTt.forEach(t),QDo=r(QQe," (throws an error)."),QQe.forEach(t),WDo=i(ll),gt=n(ll,"DIV",{class:!0});var Ew=s(gt);T(cy.$$.fragment,Ew),HDo=i(Ew),Kpe=n(Ew,"P",{});var wTt=s(Kpe);UDo=r(wTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wTt.forEach(t),JDo=i(Ew),ad=n(Ew,"P",{});var Yre=s(ad);YDo=r(Yre,`Note:
Loading a model from its configuration file does `),Zpe=n(Yre,"STRONG",{});var ATt=s(Zpe);KDo=r(ATt,"not"),ATt.forEach(t),ZDo=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(Yre,"A",{href:!0});var LTt=s(eX);eGo=r(LTt,"from_pretrained()"),LTt.forEach(t),oGo=r(Yre," to load the model weights."),Yre.forEach(t),rGo=i(Ew),T(z4.$$.fragment,Ew),Ew.forEach(t),tGo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(fy.$$.fragment,ma),aGo=i(ma),e_e=n(ma,"P",{});var yTt=s(e_e);nGo=r(yTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yTt.forEach(t),sGo=i(ma),Ga=n(ma,"P",{});var Cw=s(Ga);lGo=r(Cw,"The model class to instantiate is selected based on the "),o_e=n(Cw,"CODE",{});var xTt=s(o_e);iGo=r(xTt,"model_type"),xTt.forEach(t),dGo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),r_e=n(Cw,"CODE",{});var $Tt=s(r_e);cGo=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),fGo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(Cw,"CODE",{});var kTt=s(t_e);mGo=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),gGo=r(Cw,":"),Cw.forEach(t),hGo=i(ma),N=n(ma,"UL",{});var j=s(N);Q4=n(j,"LI",{});var QRe=s(Q4);a_e=n(QRe,"STRONG",{});var STt=s(a_e);pGo=r(STt,"albert"),STt.forEach(t),_Go=r(QRe," \u2014 "),oX=n(QRe,"A",{href:!0});var RTt=s(oX);uGo=r(RTt,"AlbertForSequenceClassification"),RTt.forEach(t),bGo=r(QRe," (ALBERT model)"),QRe.forEach(t),vGo=i(j),W4=n(j,"LI",{});var WRe=s(W4);n_e=n(WRe,"STRONG",{});var PTt=s(n_e);FGo=r(PTt,"bart"),PTt.forEach(t),TGo=r(WRe," \u2014 "),rX=n(WRe,"A",{href:!0});var BTt=s(rX);MGo=r(BTt,"BartForSequenceClassification"),BTt.forEach(t),EGo=r(WRe," (BART model)"),WRe.forEach(t),CGo=i(j),H4=n(j,"LI",{});var HRe=s(H4);s_e=n(HRe,"STRONG",{});var ITt=s(s_e);wGo=r(ITt,"bert"),ITt.forEach(t),AGo=r(HRe," \u2014 "),tX=n(HRe,"A",{href:!0});var NTt=s(tX);LGo=r(NTt,"BertForSequenceClassification"),NTt.forEach(t),yGo=r(HRe," (BERT model)"),HRe.forEach(t),xGo=i(j),U4=n(j,"LI",{});var URe=s(U4);l_e=n(URe,"STRONG",{});var qTt=s(l_e);$Go=r(qTt,"big_bird"),qTt.forEach(t),kGo=r(URe," \u2014 "),aX=n(URe,"A",{href:!0});var jTt=s(aX);SGo=r(jTt,"BigBirdForSequenceClassification"),jTt.forEach(t),RGo=r(URe," (BigBird model)"),URe.forEach(t),PGo=i(j),J4=n(j,"LI",{});var JRe=s(J4);i_e=n(JRe,"STRONG",{});var DTt=s(i_e);BGo=r(DTt,"bigbird_pegasus"),DTt.forEach(t),IGo=r(JRe," \u2014 "),nX=n(JRe,"A",{href:!0});var GTt=s(nX);NGo=r(GTt,"BigBirdPegasusForSequenceClassification"),GTt.forEach(t),qGo=r(JRe," (BigBird-Pegasus model)"),JRe.forEach(t),jGo=i(j),Y4=n(j,"LI",{});var YRe=s(Y4);d_e=n(YRe,"STRONG",{});var OTt=s(d_e);DGo=r(OTt,"bloom"),OTt.forEach(t),GGo=r(YRe," \u2014 "),sX=n(YRe,"A",{href:!0});var VTt=s(sX);OGo=r(VTt,"BloomForSequenceClassification"),VTt.forEach(t),VGo=r(YRe," (BLOOM model)"),YRe.forEach(t),XGo=i(j),K4=n(j,"LI",{});var KRe=s(K4);c_e=n(KRe,"STRONG",{});var XTt=s(c_e);zGo=r(XTt,"camembert"),XTt.forEach(t),QGo=r(KRe," \u2014 "),lX=n(KRe,"A",{href:!0});var zTt=s(lX);WGo=r(zTt,"CamembertForSequenceClassification"),zTt.forEach(t),HGo=r(KRe," (CamemBERT model)"),KRe.forEach(t),UGo=i(j),Z4=n(j,"LI",{});var ZRe=s(Z4);f_e=n(ZRe,"STRONG",{});var QTt=s(f_e);JGo=r(QTt,"canine"),QTt.forEach(t),YGo=r(ZRe," \u2014 "),iX=n(ZRe,"A",{href:!0});var WTt=s(iX);KGo=r(WTt,"CanineForSequenceClassification"),WTt.forEach(t),ZGo=r(ZRe," (CANINE model)"),ZRe.forEach(t),eOo=i(j),eb=n(j,"LI",{});var ePe=s(eb);m_e=n(ePe,"STRONG",{});var HTt=s(m_e);oOo=r(HTt,"convbert"),HTt.forEach(t),rOo=r(ePe," \u2014 "),dX=n(ePe,"A",{href:!0});var UTt=s(dX);tOo=r(UTt,"ConvBertForSequenceClassification"),UTt.forEach(t),aOo=r(ePe," (ConvBERT model)"),ePe.forEach(t),nOo=i(j),ob=n(j,"LI",{});var oPe=s(ob);g_e=n(oPe,"STRONG",{});var JTt=s(g_e);sOo=r(JTt,"ctrl"),JTt.forEach(t),lOo=r(oPe," \u2014 "),cX=n(oPe,"A",{href:!0});var YTt=s(cX);iOo=r(YTt,"CTRLForSequenceClassification"),YTt.forEach(t),dOo=r(oPe," (CTRL model)"),oPe.forEach(t),cOo=i(j),rb=n(j,"LI",{});var rPe=s(rb);h_e=n(rPe,"STRONG",{});var KTt=s(h_e);fOo=r(KTt,"data2vec-text"),KTt.forEach(t),mOo=r(rPe," \u2014 "),fX=n(rPe,"A",{href:!0});var ZTt=s(fX);gOo=r(ZTt,"Data2VecTextForSequenceClassification"),ZTt.forEach(t),hOo=r(rPe," (Data2VecText model)"),rPe.forEach(t),pOo=i(j),tb=n(j,"LI",{});var tPe=s(tb);p_e=n(tPe,"STRONG",{});var e7t=s(p_e);_Oo=r(e7t,"deberta"),e7t.forEach(t),uOo=r(tPe," \u2014 "),mX=n(tPe,"A",{href:!0});var o7t=s(mX);bOo=r(o7t,"DebertaForSequenceClassification"),o7t.forEach(t),vOo=r(tPe," (DeBERTa model)"),tPe.forEach(t),FOo=i(j),ab=n(j,"LI",{});var aPe=s(ab);__e=n(aPe,"STRONG",{});var r7t=s(__e);TOo=r(r7t,"deberta-v2"),r7t.forEach(t),MOo=r(aPe," \u2014 "),gX=n(aPe,"A",{href:!0});var t7t=s(gX);EOo=r(t7t,"DebertaV2ForSequenceClassification"),t7t.forEach(t),COo=r(aPe," (DeBERTa-v2 model)"),aPe.forEach(t),wOo=i(j),nb=n(j,"LI",{});var nPe=s(nb);u_e=n(nPe,"STRONG",{});var a7t=s(u_e);AOo=r(a7t,"distilbert"),a7t.forEach(t),LOo=r(nPe," \u2014 "),hX=n(nPe,"A",{href:!0});var n7t=s(hX);yOo=r(n7t,"DistilBertForSequenceClassification"),n7t.forEach(t),xOo=r(nPe," (DistilBERT model)"),nPe.forEach(t),$Oo=i(j),sb=n(j,"LI",{});var sPe=s(sb);b_e=n(sPe,"STRONG",{});var s7t=s(b_e);kOo=r(s7t,"electra"),s7t.forEach(t),SOo=r(sPe," \u2014 "),pX=n(sPe,"A",{href:!0});var l7t=s(pX);ROo=r(l7t,"ElectraForSequenceClassification"),l7t.forEach(t),POo=r(sPe," (ELECTRA model)"),sPe.forEach(t),BOo=i(j),lb=n(j,"LI",{});var lPe=s(lb);v_e=n(lPe,"STRONG",{});var i7t=s(v_e);IOo=r(i7t,"flaubert"),i7t.forEach(t),NOo=r(lPe," \u2014 "),_X=n(lPe,"A",{href:!0});var d7t=s(_X);qOo=r(d7t,"FlaubertForSequenceClassification"),d7t.forEach(t),jOo=r(lPe," (FlauBERT model)"),lPe.forEach(t),DOo=i(j),ib=n(j,"LI",{});var iPe=s(ib);F_e=n(iPe,"STRONG",{});var c7t=s(F_e);GOo=r(c7t,"fnet"),c7t.forEach(t),OOo=r(iPe," \u2014 "),uX=n(iPe,"A",{href:!0});var f7t=s(uX);VOo=r(f7t,"FNetForSequenceClassification"),f7t.forEach(t),XOo=r(iPe," (FNet model)"),iPe.forEach(t),zOo=i(j),db=n(j,"LI",{});var dPe=s(db);T_e=n(dPe,"STRONG",{});var m7t=s(T_e);QOo=r(m7t,"funnel"),m7t.forEach(t),WOo=r(dPe," \u2014 "),bX=n(dPe,"A",{href:!0});var g7t=s(bX);HOo=r(g7t,"FunnelForSequenceClassification"),g7t.forEach(t),UOo=r(dPe," (Funnel Transformer model)"),dPe.forEach(t),JOo=i(j),cb=n(j,"LI",{});var cPe=s(cb);M_e=n(cPe,"STRONG",{});var h7t=s(M_e);YOo=r(h7t,"gpt2"),h7t.forEach(t),KOo=r(cPe," \u2014 "),vX=n(cPe,"A",{href:!0});var p7t=s(vX);ZOo=r(p7t,"GPT2ForSequenceClassification"),p7t.forEach(t),eVo=r(cPe," (OpenAI GPT-2 model)"),cPe.forEach(t),oVo=i(j),fb=n(j,"LI",{});var fPe=s(fb);E_e=n(fPe,"STRONG",{});var _7t=s(E_e);rVo=r(_7t,"gpt_neo"),_7t.forEach(t),tVo=r(fPe," \u2014 "),FX=n(fPe,"A",{href:!0});var u7t=s(FX);aVo=r(u7t,"GPTNeoForSequenceClassification"),u7t.forEach(t),nVo=r(fPe," (GPT Neo model)"),fPe.forEach(t),sVo=i(j),mb=n(j,"LI",{});var mPe=s(mb);C_e=n(mPe,"STRONG",{});var b7t=s(C_e);lVo=r(b7t,"gptj"),b7t.forEach(t),iVo=r(mPe," \u2014 "),TX=n(mPe,"A",{href:!0});var v7t=s(TX);dVo=r(v7t,"GPTJForSequenceClassification"),v7t.forEach(t),cVo=r(mPe," (GPT-J model)"),mPe.forEach(t),fVo=i(j),gb=n(j,"LI",{});var gPe=s(gb);w_e=n(gPe,"STRONG",{});var F7t=s(w_e);mVo=r(F7t,"ibert"),F7t.forEach(t),gVo=r(gPe," \u2014 "),MX=n(gPe,"A",{href:!0});var T7t=s(MX);hVo=r(T7t,"IBertForSequenceClassification"),T7t.forEach(t),pVo=r(gPe," (I-BERT model)"),gPe.forEach(t),_Vo=i(j),hb=n(j,"LI",{});var hPe=s(hb);A_e=n(hPe,"STRONG",{});var M7t=s(A_e);uVo=r(M7t,"layoutlm"),M7t.forEach(t),bVo=r(hPe," \u2014 "),EX=n(hPe,"A",{href:!0});var E7t=s(EX);vVo=r(E7t,"LayoutLMForSequenceClassification"),E7t.forEach(t),FVo=r(hPe," (LayoutLM model)"),hPe.forEach(t),TVo=i(j),pb=n(j,"LI",{});var pPe=s(pb);L_e=n(pPe,"STRONG",{});var C7t=s(L_e);MVo=r(C7t,"layoutlmv2"),C7t.forEach(t),EVo=r(pPe," \u2014 "),CX=n(pPe,"A",{href:!0});var w7t=s(CX);CVo=r(w7t,"LayoutLMv2ForSequenceClassification"),w7t.forEach(t),wVo=r(pPe," (LayoutLMv2 model)"),pPe.forEach(t),AVo=i(j),_b=n(j,"LI",{});var _Pe=s(_b);y_e=n(_Pe,"STRONG",{});var A7t=s(y_e);LVo=r(A7t,"layoutlmv3"),A7t.forEach(t),yVo=r(_Pe," \u2014 "),wX=n(_Pe,"A",{href:!0});var L7t=s(wX);xVo=r(L7t,"LayoutLMv3ForSequenceClassification"),L7t.forEach(t),$Vo=r(_Pe," (LayoutLMv3 model)"),_Pe.forEach(t),kVo=i(j),ub=n(j,"LI",{});var uPe=s(ub);x_e=n(uPe,"STRONG",{});var y7t=s(x_e);SVo=r(y7t,"led"),y7t.forEach(t),RVo=r(uPe," \u2014 "),AX=n(uPe,"A",{href:!0});var x7t=s(AX);PVo=r(x7t,"LEDForSequenceClassification"),x7t.forEach(t),BVo=r(uPe," (LED model)"),uPe.forEach(t),IVo=i(j),bb=n(j,"LI",{});var bPe=s(bb);$_e=n(bPe,"STRONG",{});var $7t=s($_e);NVo=r($7t,"longformer"),$7t.forEach(t),qVo=r(bPe," \u2014 "),LX=n(bPe,"A",{href:!0});var k7t=s(LX);jVo=r(k7t,"LongformerForSequenceClassification"),k7t.forEach(t),DVo=r(bPe," (Longformer model)"),bPe.forEach(t),GVo=i(j),vb=n(j,"LI",{});var vPe=s(vb);k_e=n(vPe,"STRONG",{});var S7t=s(k_e);OVo=r(S7t,"mbart"),S7t.forEach(t),VVo=r(vPe," \u2014 "),yX=n(vPe,"A",{href:!0});var R7t=s(yX);XVo=r(R7t,"MBartForSequenceClassification"),R7t.forEach(t),zVo=r(vPe," (mBART model)"),vPe.forEach(t),QVo=i(j),Fb=n(j,"LI",{});var FPe=s(Fb);S_e=n(FPe,"STRONG",{});var P7t=s(S_e);WVo=r(P7t,"megatron-bert"),P7t.forEach(t),HVo=r(FPe," \u2014 "),xX=n(FPe,"A",{href:!0});var B7t=s(xX);UVo=r(B7t,"MegatronBertForSequenceClassification"),B7t.forEach(t),JVo=r(FPe," (Megatron-BERT model)"),FPe.forEach(t),YVo=i(j),Tb=n(j,"LI",{});var TPe=s(Tb);R_e=n(TPe,"STRONG",{});var I7t=s(R_e);KVo=r(I7t,"mobilebert"),I7t.forEach(t),ZVo=r(TPe," \u2014 "),$X=n(TPe,"A",{href:!0});var N7t=s($X);eXo=r(N7t,"MobileBertForSequenceClassification"),N7t.forEach(t),oXo=r(TPe," (MobileBERT model)"),TPe.forEach(t),rXo=i(j),Mb=n(j,"LI",{});var MPe=s(Mb);P_e=n(MPe,"STRONG",{});var q7t=s(P_e);tXo=r(q7t,"mpnet"),q7t.forEach(t),aXo=r(MPe," \u2014 "),kX=n(MPe,"A",{href:!0});var j7t=s(kX);nXo=r(j7t,"MPNetForSequenceClassification"),j7t.forEach(t),sXo=r(MPe," (MPNet model)"),MPe.forEach(t),lXo=i(j),Eb=n(j,"LI",{});var EPe=s(Eb);B_e=n(EPe,"STRONG",{});var D7t=s(B_e);iXo=r(D7t,"mvp"),D7t.forEach(t),dXo=r(EPe," \u2014 "),SX=n(EPe,"A",{href:!0});var G7t=s(SX);cXo=r(G7t,"MvpForSequenceClassification"),G7t.forEach(t),fXo=r(EPe," (MVP model)"),EPe.forEach(t),mXo=i(j),Cb=n(j,"LI",{});var CPe=s(Cb);I_e=n(CPe,"STRONG",{});var O7t=s(I_e);gXo=r(O7t,"nezha"),O7t.forEach(t),hXo=r(CPe," \u2014 "),RX=n(CPe,"A",{href:!0});var V7t=s(RX);pXo=r(V7t,"NezhaForSequenceClassification"),V7t.forEach(t),_Xo=r(CPe," (Nezha model)"),CPe.forEach(t),uXo=i(j),wb=n(j,"LI",{});var wPe=s(wb);N_e=n(wPe,"STRONG",{});var X7t=s(N_e);bXo=r(X7t,"nystromformer"),X7t.forEach(t),vXo=r(wPe," \u2014 "),PX=n(wPe,"A",{href:!0});var z7t=s(PX);FXo=r(z7t,"NystromformerForSequenceClassification"),z7t.forEach(t),TXo=r(wPe," (Nystr\xF6mformer model)"),wPe.forEach(t),MXo=i(j),Ab=n(j,"LI",{});var APe=s(Ab);q_e=n(APe,"STRONG",{});var Q7t=s(q_e);EXo=r(Q7t,"openai-gpt"),Q7t.forEach(t),CXo=r(APe," \u2014 "),BX=n(APe,"A",{href:!0});var W7t=s(BX);wXo=r(W7t,"OpenAIGPTForSequenceClassification"),W7t.forEach(t),AXo=r(APe," (OpenAI GPT model)"),APe.forEach(t),LXo=i(j),Lb=n(j,"LI",{});var LPe=s(Lb);j_e=n(LPe,"STRONG",{});var H7t=s(j_e);yXo=r(H7t,"perceiver"),H7t.forEach(t),xXo=r(LPe," \u2014 "),IX=n(LPe,"A",{href:!0});var U7t=s(IX);$Xo=r(U7t,"PerceiverForSequenceClassification"),U7t.forEach(t),kXo=r(LPe," (Perceiver model)"),LPe.forEach(t),SXo=i(j),yb=n(j,"LI",{});var yPe=s(yb);D_e=n(yPe,"STRONG",{});var J7t=s(D_e);RXo=r(J7t,"plbart"),J7t.forEach(t),PXo=r(yPe," \u2014 "),NX=n(yPe,"A",{href:!0});var Y7t=s(NX);BXo=r(Y7t,"PLBartForSequenceClassification"),Y7t.forEach(t),IXo=r(yPe," (PLBart model)"),yPe.forEach(t),NXo=i(j),xb=n(j,"LI",{});var xPe=s(xb);G_e=n(xPe,"STRONG",{});var K7t=s(G_e);qXo=r(K7t,"qdqbert"),K7t.forEach(t),jXo=r(xPe," \u2014 "),qX=n(xPe,"A",{href:!0});var Z7t=s(qX);DXo=r(Z7t,"QDQBertForSequenceClassification"),Z7t.forEach(t),GXo=r(xPe," (QDQBert model)"),xPe.forEach(t),OXo=i(j),$b=n(j,"LI",{});var $Pe=s($b);O_e=n($Pe,"STRONG",{});var e9t=s(O_e);VXo=r(e9t,"reformer"),e9t.forEach(t),XXo=r($Pe," \u2014 "),jX=n($Pe,"A",{href:!0});var o9t=s(jX);zXo=r(o9t,"ReformerForSequenceClassification"),o9t.forEach(t),QXo=r($Pe," (Reformer model)"),$Pe.forEach(t),WXo=i(j),kb=n(j,"LI",{});var kPe=s(kb);V_e=n(kPe,"STRONG",{});var r9t=s(V_e);HXo=r(r9t,"rembert"),r9t.forEach(t),UXo=r(kPe," \u2014 "),DX=n(kPe,"A",{href:!0});var t9t=s(DX);JXo=r(t9t,"RemBertForSequenceClassification"),t9t.forEach(t),YXo=r(kPe," (RemBERT model)"),kPe.forEach(t),KXo=i(j),Sb=n(j,"LI",{});var SPe=s(Sb);X_e=n(SPe,"STRONG",{});var a9t=s(X_e);ZXo=r(a9t,"roberta"),a9t.forEach(t),ezo=r(SPe," \u2014 "),GX=n(SPe,"A",{href:!0});var n9t=s(GX);ozo=r(n9t,"RobertaForSequenceClassification"),n9t.forEach(t),rzo=r(SPe," (RoBERTa model)"),SPe.forEach(t),tzo=i(j),Rb=n(j,"LI",{});var RPe=s(Rb);z_e=n(RPe,"STRONG",{});var s9t=s(z_e);azo=r(s9t,"roformer"),s9t.forEach(t),nzo=r(RPe," \u2014 "),OX=n(RPe,"A",{href:!0});var l9t=s(OX);szo=r(l9t,"RoFormerForSequenceClassification"),l9t.forEach(t),lzo=r(RPe," (RoFormer model)"),RPe.forEach(t),izo=i(j),Pb=n(j,"LI",{});var PPe=s(Pb);Q_e=n(PPe,"STRONG",{});var i9t=s(Q_e);dzo=r(i9t,"squeezebert"),i9t.forEach(t),czo=r(PPe," \u2014 "),VX=n(PPe,"A",{href:!0});var d9t=s(VX);fzo=r(d9t,"SqueezeBertForSequenceClassification"),d9t.forEach(t),mzo=r(PPe," (SqueezeBERT model)"),PPe.forEach(t),gzo=i(j),Bb=n(j,"LI",{});var BPe=s(Bb);W_e=n(BPe,"STRONG",{});var c9t=s(W_e);hzo=r(c9t,"tapas"),c9t.forEach(t),pzo=r(BPe," \u2014 "),XX=n(BPe,"A",{href:!0});var f9t=s(XX);_zo=r(f9t,"TapasForSequenceClassification"),f9t.forEach(t),uzo=r(BPe," (TAPAS model)"),BPe.forEach(t),bzo=i(j),Ib=n(j,"LI",{});var IPe=s(Ib);H_e=n(IPe,"STRONG",{});var m9t=s(H_e);vzo=r(m9t,"transfo-xl"),m9t.forEach(t),Fzo=r(IPe," \u2014 "),zX=n(IPe,"A",{href:!0});var g9t=s(zX);Tzo=r(g9t,"TransfoXLForSequenceClassification"),g9t.forEach(t),Mzo=r(IPe," (Transformer-XL model)"),IPe.forEach(t),Ezo=i(j),Nb=n(j,"LI",{});var NPe=s(Nb);U_e=n(NPe,"STRONG",{});var h9t=s(U_e);Czo=r(h9t,"xlm"),h9t.forEach(t),wzo=r(NPe," \u2014 "),QX=n(NPe,"A",{href:!0});var p9t=s(QX);Azo=r(p9t,"XLMForSequenceClassification"),p9t.forEach(t),Lzo=r(NPe," (XLM model)"),NPe.forEach(t),yzo=i(j),qb=n(j,"LI",{});var qPe=s(qb);J_e=n(qPe,"STRONG",{});var _9t=s(J_e);xzo=r(_9t,"xlm-roberta"),_9t.forEach(t),$zo=r(qPe," \u2014 "),WX=n(qPe,"A",{href:!0});var u9t=s(WX);kzo=r(u9t,"XLMRobertaForSequenceClassification"),u9t.forEach(t),Szo=r(qPe," (XLM-RoBERTa model)"),qPe.forEach(t),Rzo=i(j),jb=n(j,"LI",{});var jPe=s(jb);Y_e=n(jPe,"STRONG",{});var b9t=s(Y_e);Pzo=r(b9t,"xlm-roberta-xl"),b9t.forEach(t),Bzo=r(jPe," \u2014 "),HX=n(jPe,"A",{href:!0});var v9t=s(HX);Izo=r(v9t,"XLMRobertaXLForSequenceClassification"),v9t.forEach(t),Nzo=r(jPe," (XLM-RoBERTa-XL model)"),jPe.forEach(t),qzo=i(j),Db=n(j,"LI",{});var DPe=s(Db);K_e=n(DPe,"STRONG",{});var F9t=s(K_e);jzo=r(F9t,"xlnet"),F9t.forEach(t),Dzo=r(DPe," \u2014 "),UX=n(DPe,"A",{href:!0});var T9t=s(UX);Gzo=r(T9t,"XLNetForSequenceClassification"),T9t.forEach(t),Ozo=r(DPe," (XLNet model)"),DPe.forEach(t),Vzo=i(j),Gb=n(j,"LI",{});var GPe=s(Gb);Z_e=n(GPe,"STRONG",{});var M9t=s(Z_e);Xzo=r(M9t,"yoso"),M9t.forEach(t),zzo=r(GPe," \u2014 "),JX=n(GPe,"A",{href:!0});var E9t=s(JX);Qzo=r(E9t,"YosoForSequenceClassification"),E9t.forEach(t),Wzo=r(GPe," (YOSO model)"),GPe.forEach(t),j.forEach(t),Hzo=i(ma),Ob=n(ma,"P",{});var OPe=s(Ob);Uzo=r(OPe,"The model is set in evaluation mode by default using "),eue=n(OPe,"CODE",{});var C9t=s(eue);Jzo=r(C9t,"model.eval()"),C9t.forEach(t),Yzo=r(OPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oue=n(OPe,"CODE",{});var w9t=s(oue);Kzo=r(w9t,"model.train()"),w9t.forEach(t),OPe.forEach(t),Zzo=i(ma),T(Vb.$$.fragment,ma),ma.forEach(t),ll.forEach(t),GXe=i(f),nd=n(f,"H2",{class:!0});var WQe=s(nd);Xb=n(WQe,"A",{id:!0,class:!0,href:!0});var A9t=s(Xb);rue=n(A9t,"SPAN",{});var L9t=s(rue);T(my.$$.fragment,L9t),L9t.forEach(t),A9t.forEach(t),eQo=i(WQe),tue=n(WQe,"SPAN",{});var y9t=s(tue);oQo=r(y9t,"AutoModelForMultipleChoice"),y9t.forEach(t),WQe.forEach(t),OXe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(gy.$$.fragment,il),rQo=i(il),sd=n(il,"P",{});var Kre=s(sd);tQo=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YX=n(Kre,"A",{href:!0});var x9t=s(YX);aQo=r(x9t,"from_pretrained()"),x9t.forEach(t),nQo=r(Kre," class method or the "),KX=n(Kre,"A",{href:!0});var $9t=s(KX);sQo=r($9t,"from_config()"),$9t.forEach(t),lQo=r(Kre,` class
method.`),Kre.forEach(t),iQo=i(il),hy=n(il,"P",{});var HQe=s(hy);dQo=r(HQe,"This class cannot be instantiated directly using "),aue=n(HQe,"CODE",{});var k9t=s(aue);cQo=r(k9t,"__init__()"),k9t.forEach(t),fQo=r(HQe," (throws an error)."),HQe.forEach(t),mQo=i(il),ht=n(il,"DIV",{class:!0});var ww=s(ht);T(py.$$.fragment,ww),gQo=i(ww),nue=n(ww,"P",{});var S9t=s(nue);hQo=r(S9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S9t.forEach(t),pQo=i(ww),ld=n(ww,"P",{});var Zre=s(ld);_Qo=r(Zre,`Note:
Loading a model from its configuration file does `),sue=n(Zre,"STRONG",{});var R9t=s(sue);uQo=r(R9t,"not"),R9t.forEach(t),bQo=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(Zre,"A",{href:!0});var P9t=s(ZX);vQo=r(P9t,"from_pretrained()"),P9t.forEach(t),FQo=r(Zre," to load the model weights."),Zre.forEach(t),TQo=i(ww),T(zb.$$.fragment,ww),ww.forEach(t),MQo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(_y.$$.fragment,ga),EQo=i(ga),lue=n(ga,"P",{});var B9t=s(lue);CQo=r(B9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),B9t.forEach(t),wQo=i(ga),Oa=n(ga,"P",{});var Aw=s(Oa);AQo=r(Aw,"The model class to instantiate is selected based on the "),iue=n(Aw,"CODE",{});var I9t=s(iue);LQo=r(I9t,"model_type"),I9t.forEach(t),yQo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),due=n(Aw,"CODE",{});var N9t=s(due);xQo=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),$Qo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cue=n(Aw,"CODE",{});var q9t=s(cue);kQo=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),SQo=r(Aw,":"),Aw.forEach(t),RQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Qb=n(ee,"LI",{});var VPe=s(Qb);fue=n(VPe,"STRONG",{});var j9t=s(fue);PQo=r(j9t,"albert"),j9t.forEach(t),BQo=r(VPe," \u2014 "),ez=n(VPe,"A",{href:!0});var D9t=s(ez);IQo=r(D9t,"AlbertForMultipleChoice"),D9t.forEach(t),NQo=r(VPe," (ALBERT model)"),VPe.forEach(t),qQo=i(ee),Wb=n(ee,"LI",{});var XPe=s(Wb);mue=n(XPe,"STRONG",{});var G9t=s(mue);jQo=r(G9t,"bert"),G9t.forEach(t),DQo=r(XPe," \u2014 "),oz=n(XPe,"A",{href:!0});var O9t=s(oz);GQo=r(O9t,"BertForMultipleChoice"),O9t.forEach(t),OQo=r(XPe," (BERT model)"),XPe.forEach(t),VQo=i(ee),Hb=n(ee,"LI",{});var zPe=s(Hb);gue=n(zPe,"STRONG",{});var V9t=s(gue);XQo=r(V9t,"big_bird"),V9t.forEach(t),zQo=r(zPe," \u2014 "),rz=n(zPe,"A",{href:!0});var X9t=s(rz);QQo=r(X9t,"BigBirdForMultipleChoice"),X9t.forEach(t),WQo=r(zPe," (BigBird model)"),zPe.forEach(t),HQo=i(ee),Ub=n(ee,"LI",{});var QPe=s(Ub);hue=n(QPe,"STRONG",{});var z9t=s(hue);UQo=r(z9t,"camembert"),z9t.forEach(t),JQo=r(QPe," \u2014 "),tz=n(QPe,"A",{href:!0});var Q9t=s(tz);YQo=r(Q9t,"CamembertForMultipleChoice"),Q9t.forEach(t),KQo=r(QPe," (CamemBERT model)"),QPe.forEach(t),ZQo=i(ee),Jb=n(ee,"LI",{});var WPe=s(Jb);pue=n(WPe,"STRONG",{});var W9t=s(pue);eWo=r(W9t,"canine"),W9t.forEach(t),oWo=r(WPe," \u2014 "),az=n(WPe,"A",{href:!0});var H9t=s(az);rWo=r(H9t,"CanineForMultipleChoice"),H9t.forEach(t),tWo=r(WPe," (CANINE model)"),WPe.forEach(t),aWo=i(ee),Yb=n(ee,"LI",{});var HPe=s(Yb);_ue=n(HPe,"STRONG",{});var U9t=s(_ue);nWo=r(U9t,"convbert"),U9t.forEach(t),sWo=r(HPe," \u2014 "),nz=n(HPe,"A",{href:!0});var J9t=s(nz);lWo=r(J9t,"ConvBertForMultipleChoice"),J9t.forEach(t),iWo=r(HPe," (ConvBERT model)"),HPe.forEach(t),dWo=i(ee),Kb=n(ee,"LI",{});var UPe=s(Kb);uue=n(UPe,"STRONG",{});var Y9t=s(uue);cWo=r(Y9t,"data2vec-text"),Y9t.forEach(t),fWo=r(UPe," \u2014 "),sz=n(UPe,"A",{href:!0});var K9t=s(sz);mWo=r(K9t,"Data2VecTextForMultipleChoice"),K9t.forEach(t),gWo=r(UPe," (Data2VecText model)"),UPe.forEach(t),hWo=i(ee),Zb=n(ee,"LI",{});var JPe=s(Zb);bue=n(JPe,"STRONG",{});var Z9t=s(bue);pWo=r(Z9t,"deberta-v2"),Z9t.forEach(t),_Wo=r(JPe," \u2014 "),lz=n(JPe,"A",{href:!0});var eMt=s(lz);uWo=r(eMt,"DebertaV2ForMultipleChoice"),eMt.forEach(t),bWo=r(JPe," (DeBERTa-v2 model)"),JPe.forEach(t),vWo=i(ee),ev=n(ee,"LI",{});var YPe=s(ev);vue=n(YPe,"STRONG",{});var oMt=s(vue);FWo=r(oMt,"distilbert"),oMt.forEach(t),TWo=r(YPe," \u2014 "),iz=n(YPe,"A",{href:!0});var rMt=s(iz);MWo=r(rMt,"DistilBertForMultipleChoice"),rMt.forEach(t),EWo=r(YPe," (DistilBERT model)"),YPe.forEach(t),CWo=i(ee),ov=n(ee,"LI",{});var KPe=s(ov);Fue=n(KPe,"STRONG",{});var tMt=s(Fue);wWo=r(tMt,"electra"),tMt.forEach(t),AWo=r(KPe," \u2014 "),dz=n(KPe,"A",{href:!0});var aMt=s(dz);LWo=r(aMt,"ElectraForMultipleChoice"),aMt.forEach(t),yWo=r(KPe," (ELECTRA model)"),KPe.forEach(t),xWo=i(ee),rv=n(ee,"LI",{});var ZPe=s(rv);Tue=n(ZPe,"STRONG",{});var nMt=s(Tue);$Wo=r(nMt,"flaubert"),nMt.forEach(t),kWo=r(ZPe," \u2014 "),cz=n(ZPe,"A",{href:!0});var sMt=s(cz);SWo=r(sMt,"FlaubertForMultipleChoice"),sMt.forEach(t),RWo=r(ZPe," (FlauBERT model)"),ZPe.forEach(t),PWo=i(ee),tv=n(ee,"LI",{});var eBe=s(tv);Mue=n(eBe,"STRONG",{});var lMt=s(Mue);BWo=r(lMt,"fnet"),lMt.forEach(t),IWo=r(eBe," \u2014 "),fz=n(eBe,"A",{href:!0});var iMt=s(fz);NWo=r(iMt,"FNetForMultipleChoice"),iMt.forEach(t),qWo=r(eBe," (FNet model)"),eBe.forEach(t),jWo=i(ee),av=n(ee,"LI",{});var oBe=s(av);Eue=n(oBe,"STRONG",{});var dMt=s(Eue);DWo=r(dMt,"funnel"),dMt.forEach(t),GWo=r(oBe," \u2014 "),mz=n(oBe,"A",{href:!0});var cMt=s(mz);OWo=r(cMt,"FunnelForMultipleChoice"),cMt.forEach(t),VWo=r(oBe," (Funnel Transformer model)"),oBe.forEach(t),XWo=i(ee),nv=n(ee,"LI",{});var rBe=s(nv);Cue=n(rBe,"STRONG",{});var fMt=s(Cue);zWo=r(fMt,"ibert"),fMt.forEach(t),QWo=r(rBe," \u2014 "),gz=n(rBe,"A",{href:!0});var mMt=s(gz);WWo=r(mMt,"IBertForMultipleChoice"),mMt.forEach(t),HWo=r(rBe," (I-BERT model)"),rBe.forEach(t),UWo=i(ee),sv=n(ee,"LI",{});var tBe=s(sv);wue=n(tBe,"STRONG",{});var gMt=s(wue);JWo=r(gMt,"longformer"),gMt.forEach(t),YWo=r(tBe," \u2014 "),hz=n(tBe,"A",{href:!0});var hMt=s(hz);KWo=r(hMt,"LongformerForMultipleChoice"),hMt.forEach(t),ZWo=r(tBe," (Longformer model)"),tBe.forEach(t),eHo=i(ee),lv=n(ee,"LI",{});var aBe=s(lv);Aue=n(aBe,"STRONG",{});var pMt=s(Aue);oHo=r(pMt,"megatron-bert"),pMt.forEach(t),rHo=r(aBe," \u2014 "),pz=n(aBe,"A",{href:!0});var _Mt=s(pz);tHo=r(_Mt,"MegatronBertForMultipleChoice"),_Mt.forEach(t),aHo=r(aBe," (Megatron-BERT model)"),aBe.forEach(t),nHo=i(ee),iv=n(ee,"LI",{});var nBe=s(iv);Lue=n(nBe,"STRONG",{});var uMt=s(Lue);sHo=r(uMt,"mobilebert"),uMt.forEach(t),lHo=r(nBe," \u2014 "),_z=n(nBe,"A",{href:!0});var bMt=s(_z);iHo=r(bMt,"MobileBertForMultipleChoice"),bMt.forEach(t),dHo=r(nBe," (MobileBERT model)"),nBe.forEach(t),cHo=i(ee),dv=n(ee,"LI",{});var sBe=s(dv);yue=n(sBe,"STRONG",{});var vMt=s(yue);fHo=r(vMt,"mpnet"),vMt.forEach(t),mHo=r(sBe," \u2014 "),uz=n(sBe,"A",{href:!0});var FMt=s(uz);gHo=r(FMt,"MPNetForMultipleChoice"),FMt.forEach(t),hHo=r(sBe," (MPNet model)"),sBe.forEach(t),pHo=i(ee),cv=n(ee,"LI",{});var lBe=s(cv);xue=n(lBe,"STRONG",{});var TMt=s(xue);_Ho=r(TMt,"nezha"),TMt.forEach(t),uHo=r(lBe," \u2014 "),bz=n(lBe,"A",{href:!0});var MMt=s(bz);bHo=r(MMt,"NezhaForMultipleChoice"),MMt.forEach(t),vHo=r(lBe," (Nezha model)"),lBe.forEach(t),FHo=i(ee),fv=n(ee,"LI",{});var iBe=s(fv);$ue=n(iBe,"STRONG",{});var EMt=s($ue);THo=r(EMt,"nystromformer"),EMt.forEach(t),MHo=r(iBe," \u2014 "),vz=n(iBe,"A",{href:!0});var CMt=s(vz);EHo=r(CMt,"NystromformerForMultipleChoice"),CMt.forEach(t),CHo=r(iBe," (Nystr\xF6mformer model)"),iBe.forEach(t),wHo=i(ee),mv=n(ee,"LI",{});var dBe=s(mv);kue=n(dBe,"STRONG",{});var wMt=s(kue);AHo=r(wMt,"qdqbert"),wMt.forEach(t),LHo=r(dBe," \u2014 "),Fz=n(dBe,"A",{href:!0});var AMt=s(Fz);yHo=r(AMt,"QDQBertForMultipleChoice"),AMt.forEach(t),xHo=r(dBe," (QDQBert model)"),dBe.forEach(t),$Ho=i(ee),gv=n(ee,"LI",{});var cBe=s(gv);Sue=n(cBe,"STRONG",{});var LMt=s(Sue);kHo=r(LMt,"rembert"),LMt.forEach(t),SHo=r(cBe," \u2014 "),Tz=n(cBe,"A",{href:!0});var yMt=s(Tz);RHo=r(yMt,"RemBertForMultipleChoice"),yMt.forEach(t),PHo=r(cBe," (RemBERT model)"),cBe.forEach(t),BHo=i(ee),hv=n(ee,"LI",{});var fBe=s(hv);Rue=n(fBe,"STRONG",{});var xMt=s(Rue);IHo=r(xMt,"roberta"),xMt.forEach(t),NHo=r(fBe," \u2014 "),Mz=n(fBe,"A",{href:!0});var $Mt=s(Mz);qHo=r($Mt,"RobertaForMultipleChoice"),$Mt.forEach(t),jHo=r(fBe," (RoBERTa model)"),fBe.forEach(t),DHo=i(ee),pv=n(ee,"LI",{});var mBe=s(pv);Pue=n(mBe,"STRONG",{});var kMt=s(Pue);GHo=r(kMt,"roformer"),kMt.forEach(t),OHo=r(mBe," \u2014 "),Ez=n(mBe,"A",{href:!0});var SMt=s(Ez);VHo=r(SMt,"RoFormerForMultipleChoice"),SMt.forEach(t),XHo=r(mBe," (RoFormer model)"),mBe.forEach(t),zHo=i(ee),_v=n(ee,"LI",{});var gBe=s(_v);Bue=n(gBe,"STRONG",{});var RMt=s(Bue);QHo=r(RMt,"squeezebert"),RMt.forEach(t),WHo=r(gBe," \u2014 "),Cz=n(gBe,"A",{href:!0});var PMt=s(Cz);HHo=r(PMt,"SqueezeBertForMultipleChoice"),PMt.forEach(t),UHo=r(gBe," (SqueezeBERT model)"),gBe.forEach(t),JHo=i(ee),uv=n(ee,"LI",{});var hBe=s(uv);Iue=n(hBe,"STRONG",{});var BMt=s(Iue);YHo=r(BMt,"xlm"),BMt.forEach(t),KHo=r(hBe," \u2014 "),wz=n(hBe,"A",{href:!0});var IMt=s(wz);ZHo=r(IMt,"XLMForMultipleChoice"),IMt.forEach(t),eUo=r(hBe," (XLM model)"),hBe.forEach(t),oUo=i(ee),bv=n(ee,"LI",{});var pBe=s(bv);Nue=n(pBe,"STRONG",{});var NMt=s(Nue);rUo=r(NMt,"xlm-roberta"),NMt.forEach(t),tUo=r(pBe," \u2014 "),Az=n(pBe,"A",{href:!0});var qMt=s(Az);aUo=r(qMt,"XLMRobertaForMultipleChoice"),qMt.forEach(t),nUo=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),sUo=i(ee),vv=n(ee,"LI",{});var _Be=s(vv);que=n(_Be,"STRONG",{});var jMt=s(que);lUo=r(jMt,"xlm-roberta-xl"),jMt.forEach(t),iUo=r(_Be," \u2014 "),Lz=n(_Be,"A",{href:!0});var DMt=s(Lz);dUo=r(DMt,"XLMRobertaXLForMultipleChoice"),DMt.forEach(t),cUo=r(_Be," (XLM-RoBERTa-XL model)"),_Be.forEach(t),fUo=i(ee),Fv=n(ee,"LI",{});var uBe=s(Fv);jue=n(uBe,"STRONG",{});var GMt=s(jue);mUo=r(GMt,"xlnet"),GMt.forEach(t),gUo=r(uBe," \u2014 "),yz=n(uBe,"A",{href:!0});var OMt=s(yz);hUo=r(OMt,"XLNetForMultipleChoice"),OMt.forEach(t),pUo=r(uBe," (XLNet model)"),uBe.forEach(t),_Uo=i(ee),Tv=n(ee,"LI",{});var bBe=s(Tv);Due=n(bBe,"STRONG",{});var VMt=s(Due);uUo=r(VMt,"yoso"),VMt.forEach(t),bUo=r(bBe," \u2014 "),xz=n(bBe,"A",{href:!0});var XMt=s(xz);vUo=r(XMt,"YosoForMultipleChoice"),XMt.forEach(t),FUo=r(bBe," (YOSO model)"),bBe.forEach(t),ee.forEach(t),TUo=i(ga),Mv=n(ga,"P",{});var vBe=s(Mv);MUo=r(vBe,"The model is set in evaluation mode by default using "),Gue=n(vBe,"CODE",{});var zMt=s(Gue);EUo=r(zMt,"model.eval()"),zMt.forEach(t),CUo=r(vBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(vBe,"CODE",{});var QMt=s(Oue);wUo=r(QMt,"model.train()"),QMt.forEach(t),vBe.forEach(t),AUo=i(ga),T(Ev.$$.fragment,ga),ga.forEach(t),il.forEach(t),VXe=i(f),id=n(f,"H2",{class:!0});var UQe=s(id);Cv=n(UQe,"A",{id:!0,class:!0,href:!0});var WMt=s(Cv);Vue=n(WMt,"SPAN",{});var HMt=s(Vue);T(uy.$$.fragment,HMt),HMt.forEach(t),WMt.forEach(t),LUo=i(UQe),Xue=n(UQe,"SPAN",{});var UMt=s(Xue);yUo=r(UMt,"AutoModelForNextSentencePrediction"),UMt.forEach(t),UQe.forEach(t),XXe=i(f),No=n(f,"DIV",{class:!0});var dl=s(No);T(by.$$.fragment,dl),xUo=i(dl),dd=n(dl,"P",{});var ete=s(dd);$Uo=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$z=n(ete,"A",{href:!0});var JMt=s($z);kUo=r(JMt,"from_pretrained()"),JMt.forEach(t),SUo=r(ete," class method or the "),kz=n(ete,"A",{href:!0});var YMt=s(kz);RUo=r(YMt,"from_config()"),YMt.forEach(t),PUo=r(ete,` class
method.`),ete.forEach(t),BUo=i(dl),vy=n(dl,"P",{});var JQe=s(vy);IUo=r(JQe,"This class cannot be instantiated directly using "),zue=n(JQe,"CODE",{});var KMt=s(zue);NUo=r(KMt,"__init__()"),KMt.forEach(t),qUo=r(JQe," (throws an error)."),JQe.forEach(t),jUo=i(dl),pt=n(dl,"DIV",{class:!0});var Lw=s(pt);T(Fy.$$.fragment,Lw),DUo=i(Lw),Que=n(Lw,"P",{});var ZMt=s(Que);GUo=r(ZMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZMt.forEach(t),OUo=i(Lw),cd=n(Lw,"P",{});var ote=s(cd);VUo=r(ote,`Note:
Loading a model from its configuration file does `),Wue=n(ote,"STRONG",{});var eEt=s(Wue);XUo=r(eEt,"not"),eEt.forEach(t),zUo=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(ote,"A",{href:!0});var oEt=s(Sz);QUo=r(oEt,"from_pretrained()"),oEt.forEach(t),WUo=r(ote," to load the model weights."),ote.forEach(t),HUo=i(Lw),T(wv.$$.fragment,Lw),Lw.forEach(t),UUo=i(dl),ao=n(dl,"DIV",{class:!0});var ha=s(ao);T(Ty.$$.fragment,ha),JUo=i(ha),Hue=n(ha,"P",{});var rEt=s(Hue);YUo=r(rEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rEt.forEach(t),KUo=i(ha),Va=n(ha,"P",{});var yw=s(Va);ZUo=r(yw,"The model class to instantiate is selected based on the "),Uue=n(yw,"CODE",{});var tEt=s(Uue);eJo=r(tEt,"model_type"),tEt.forEach(t),oJo=r(yw,` property of the config object (either
passed as an argument or loaded from `),Jue=n(yw,"CODE",{});var aEt=s(Jue);rJo=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),tJo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(yw,"CODE",{});var nEt=s(Yue);aJo=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),nJo=r(yw,":"),yw.forEach(t),sJo=i(ha),qo=n(ha,"UL",{});var pa=s(qo);Av=n(pa,"LI",{});var FBe=s(Av);Kue=n(FBe,"STRONG",{});var sEt=s(Kue);lJo=r(sEt,"bert"),sEt.forEach(t),iJo=r(FBe," \u2014 "),Rz=n(FBe,"A",{href:!0});var lEt=s(Rz);dJo=r(lEt,"BertForNextSentencePrediction"),lEt.forEach(t),cJo=r(FBe," (BERT model)"),FBe.forEach(t),fJo=i(pa),Lv=n(pa,"LI",{});var TBe=s(Lv);Zue=n(TBe,"STRONG",{});var iEt=s(Zue);mJo=r(iEt,"fnet"),iEt.forEach(t),gJo=r(TBe," \u2014 "),Pz=n(TBe,"A",{href:!0});var dEt=s(Pz);hJo=r(dEt,"FNetForNextSentencePrediction"),dEt.forEach(t),pJo=r(TBe," (FNet model)"),TBe.forEach(t),_Jo=i(pa),yv=n(pa,"LI",{});var MBe=s(yv);e1e=n(MBe,"STRONG",{});var cEt=s(e1e);uJo=r(cEt,"megatron-bert"),cEt.forEach(t),bJo=r(MBe," \u2014 "),Bz=n(MBe,"A",{href:!0});var fEt=s(Bz);vJo=r(fEt,"MegatronBertForNextSentencePrediction"),fEt.forEach(t),FJo=r(MBe," (Megatron-BERT model)"),MBe.forEach(t),TJo=i(pa),xv=n(pa,"LI",{});var EBe=s(xv);o1e=n(EBe,"STRONG",{});var mEt=s(o1e);MJo=r(mEt,"mobilebert"),mEt.forEach(t),EJo=r(EBe," \u2014 "),Iz=n(EBe,"A",{href:!0});var gEt=s(Iz);CJo=r(gEt,"MobileBertForNextSentencePrediction"),gEt.forEach(t),wJo=r(EBe," (MobileBERT model)"),EBe.forEach(t),AJo=i(pa),$v=n(pa,"LI",{});var CBe=s($v);r1e=n(CBe,"STRONG",{});var hEt=s(r1e);LJo=r(hEt,"nezha"),hEt.forEach(t),yJo=r(CBe," \u2014 "),Nz=n(CBe,"A",{href:!0});var pEt=s(Nz);xJo=r(pEt,"NezhaForNextSentencePrediction"),pEt.forEach(t),$Jo=r(CBe," (Nezha model)"),CBe.forEach(t),kJo=i(pa),kv=n(pa,"LI",{});var wBe=s(kv);t1e=n(wBe,"STRONG",{});var _Et=s(t1e);SJo=r(_Et,"qdqbert"),_Et.forEach(t),RJo=r(wBe," \u2014 "),qz=n(wBe,"A",{href:!0});var uEt=s(qz);PJo=r(uEt,"QDQBertForNextSentencePrediction"),uEt.forEach(t),BJo=r(wBe," (QDQBert model)"),wBe.forEach(t),pa.forEach(t),IJo=i(ha),Sv=n(ha,"P",{});var ABe=s(Sv);NJo=r(ABe,"The model is set in evaluation mode by default using "),a1e=n(ABe,"CODE",{});var bEt=s(a1e);qJo=r(bEt,"model.eval()"),bEt.forEach(t),jJo=r(ABe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n1e=n(ABe,"CODE",{});var vEt=s(n1e);DJo=r(vEt,"model.train()"),vEt.forEach(t),ABe.forEach(t),GJo=i(ha),T(Rv.$$.fragment,ha),ha.forEach(t),dl.forEach(t),zXe=i(f),fd=n(f,"H2",{class:!0});var YQe=s(fd);Pv=n(YQe,"A",{id:!0,class:!0,href:!0});var FEt=s(Pv);s1e=n(FEt,"SPAN",{});var TEt=s(s1e);T(My.$$.fragment,TEt),TEt.forEach(t),FEt.forEach(t),OJo=i(YQe),l1e=n(YQe,"SPAN",{});var MEt=s(l1e);VJo=r(MEt,"AutoModelForTokenClassification"),MEt.forEach(t),YQe.forEach(t),QXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(Ey.$$.fragment,cl),XJo=i(cl),md=n(cl,"P",{});var rte=s(md);zJo=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jz=n(rte,"A",{href:!0});var EEt=s(jz);QJo=r(EEt,"from_pretrained()"),EEt.forEach(t),WJo=r(rte," class method or the "),Dz=n(rte,"A",{href:!0});var CEt=s(Dz);HJo=r(CEt,"from_config()"),CEt.forEach(t),UJo=r(rte,` class
method.`),rte.forEach(t),JJo=i(cl),Cy=n(cl,"P",{});var KQe=s(Cy);YJo=r(KQe,"This class cannot be instantiated directly using "),i1e=n(KQe,"CODE",{});var wEt=s(i1e);KJo=r(wEt,"__init__()"),wEt.forEach(t),ZJo=r(KQe," (throws an error)."),KQe.forEach(t),eYo=i(cl),_t=n(cl,"DIV",{class:!0});var xw=s(_t);T(wy.$$.fragment,xw),oYo=i(xw),d1e=n(xw,"P",{});var AEt=s(d1e);rYo=r(AEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AEt.forEach(t),tYo=i(xw),gd=n(xw,"P",{});var tte=s(gd);aYo=r(tte,`Note:
Loading a model from its configuration file does `),c1e=n(tte,"STRONG",{});var LEt=s(c1e);nYo=r(LEt,"not"),LEt.forEach(t),sYo=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(tte,"A",{href:!0});var yEt=s(Gz);lYo=r(yEt,"from_pretrained()"),yEt.forEach(t),iYo=r(tte," to load the model weights."),tte.forEach(t),dYo=i(xw),T(Bv.$$.fragment,xw),xw.forEach(t),cYo=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(Ay.$$.fragment,_a),fYo=i(_a),f1e=n(_a,"P",{});var xEt=s(f1e);mYo=r(xEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xEt.forEach(t),gYo=i(_a),Xa=n(_a,"P",{});var $w=s(Xa);hYo=r($w,"The model class to instantiate is selected based on the "),m1e=n($w,"CODE",{});var $Et=s(m1e);pYo=r($Et,"model_type"),$Et.forEach(t),_Yo=r($w,` property of the config object (either
passed as an argument or loaded from `),g1e=n($w,"CODE",{});var kEt=s(g1e);uYo=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),bYo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n($w,"CODE",{});var SEt=s(h1e);vYo=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),FYo=r($w,":"),$w.forEach(t),TYo=i(_a),U=n(_a,"UL",{});var Y=s(U);Iv=n(Y,"LI",{});var LBe=s(Iv);p1e=n(LBe,"STRONG",{});var REt=s(p1e);MYo=r(REt,"albert"),REt.forEach(t),EYo=r(LBe," \u2014 "),Oz=n(LBe,"A",{href:!0});var PEt=s(Oz);CYo=r(PEt,"AlbertForTokenClassification"),PEt.forEach(t),wYo=r(LBe," (ALBERT model)"),LBe.forEach(t),AYo=i(Y),Nv=n(Y,"LI",{});var yBe=s(Nv);_1e=n(yBe,"STRONG",{});var BEt=s(_1e);LYo=r(BEt,"bert"),BEt.forEach(t),yYo=r(yBe," \u2014 "),Vz=n(yBe,"A",{href:!0});var IEt=s(Vz);xYo=r(IEt,"BertForTokenClassification"),IEt.forEach(t),$Yo=r(yBe," (BERT model)"),yBe.forEach(t),kYo=i(Y),qv=n(Y,"LI",{});var xBe=s(qv);u1e=n(xBe,"STRONG",{});var NEt=s(u1e);SYo=r(NEt,"big_bird"),NEt.forEach(t),RYo=r(xBe," \u2014 "),Xz=n(xBe,"A",{href:!0});var qEt=s(Xz);PYo=r(qEt,"BigBirdForTokenClassification"),qEt.forEach(t),BYo=r(xBe," (BigBird model)"),xBe.forEach(t),IYo=i(Y),jv=n(Y,"LI",{});var $Be=s(jv);b1e=n($Be,"STRONG",{});var jEt=s(b1e);NYo=r(jEt,"bloom"),jEt.forEach(t),qYo=r($Be," \u2014 "),zz=n($Be,"A",{href:!0});var DEt=s(zz);jYo=r(DEt,"BloomForTokenClassification"),DEt.forEach(t),DYo=r($Be," (BLOOM model)"),$Be.forEach(t),GYo=i(Y),Dv=n(Y,"LI",{});var kBe=s(Dv);v1e=n(kBe,"STRONG",{});var GEt=s(v1e);OYo=r(GEt,"camembert"),GEt.forEach(t),VYo=r(kBe," \u2014 "),Qz=n(kBe,"A",{href:!0});var OEt=s(Qz);XYo=r(OEt,"CamembertForTokenClassification"),OEt.forEach(t),zYo=r(kBe," (CamemBERT model)"),kBe.forEach(t),QYo=i(Y),Gv=n(Y,"LI",{});var SBe=s(Gv);F1e=n(SBe,"STRONG",{});var VEt=s(F1e);WYo=r(VEt,"canine"),VEt.forEach(t),HYo=r(SBe," \u2014 "),Wz=n(SBe,"A",{href:!0});var XEt=s(Wz);UYo=r(XEt,"CanineForTokenClassification"),XEt.forEach(t),JYo=r(SBe," (CANINE model)"),SBe.forEach(t),YYo=i(Y),Ov=n(Y,"LI",{});var RBe=s(Ov);T1e=n(RBe,"STRONG",{});var zEt=s(T1e);KYo=r(zEt,"convbert"),zEt.forEach(t),ZYo=r(RBe," \u2014 "),Hz=n(RBe,"A",{href:!0});var QEt=s(Hz);eKo=r(QEt,"ConvBertForTokenClassification"),QEt.forEach(t),oKo=r(RBe," (ConvBERT model)"),RBe.forEach(t),rKo=i(Y),Vv=n(Y,"LI",{});var PBe=s(Vv);M1e=n(PBe,"STRONG",{});var WEt=s(M1e);tKo=r(WEt,"data2vec-text"),WEt.forEach(t),aKo=r(PBe," \u2014 "),Uz=n(PBe,"A",{href:!0});var HEt=s(Uz);nKo=r(HEt,"Data2VecTextForTokenClassification"),HEt.forEach(t),sKo=r(PBe," (Data2VecText model)"),PBe.forEach(t),lKo=i(Y),Xv=n(Y,"LI",{});var BBe=s(Xv);E1e=n(BBe,"STRONG",{});var UEt=s(E1e);iKo=r(UEt,"deberta"),UEt.forEach(t),dKo=r(BBe," \u2014 "),Jz=n(BBe,"A",{href:!0});var JEt=s(Jz);cKo=r(JEt,"DebertaForTokenClassification"),JEt.forEach(t),fKo=r(BBe," (DeBERTa model)"),BBe.forEach(t),mKo=i(Y),zv=n(Y,"LI",{});var IBe=s(zv);C1e=n(IBe,"STRONG",{});var YEt=s(C1e);gKo=r(YEt,"deberta-v2"),YEt.forEach(t),hKo=r(IBe," \u2014 "),Yz=n(IBe,"A",{href:!0});var KEt=s(Yz);pKo=r(KEt,"DebertaV2ForTokenClassification"),KEt.forEach(t),_Ko=r(IBe," (DeBERTa-v2 model)"),IBe.forEach(t),uKo=i(Y),Qv=n(Y,"LI",{});var NBe=s(Qv);w1e=n(NBe,"STRONG",{});var ZEt=s(w1e);bKo=r(ZEt,"distilbert"),ZEt.forEach(t),vKo=r(NBe," \u2014 "),Kz=n(NBe,"A",{href:!0});var eCt=s(Kz);FKo=r(eCt,"DistilBertForTokenClassification"),eCt.forEach(t),TKo=r(NBe," (DistilBERT model)"),NBe.forEach(t),MKo=i(Y),Wv=n(Y,"LI",{});var qBe=s(Wv);A1e=n(qBe,"STRONG",{});var oCt=s(A1e);EKo=r(oCt,"electra"),oCt.forEach(t),CKo=r(qBe," \u2014 "),Zz=n(qBe,"A",{href:!0});var rCt=s(Zz);wKo=r(rCt,"ElectraForTokenClassification"),rCt.forEach(t),AKo=r(qBe," (ELECTRA model)"),qBe.forEach(t),LKo=i(Y),Hv=n(Y,"LI",{});var jBe=s(Hv);L1e=n(jBe,"STRONG",{});var tCt=s(L1e);yKo=r(tCt,"flaubert"),tCt.forEach(t),xKo=r(jBe," \u2014 "),eQ=n(jBe,"A",{href:!0});var aCt=s(eQ);$Ko=r(aCt,"FlaubertForTokenClassification"),aCt.forEach(t),kKo=r(jBe," (FlauBERT model)"),jBe.forEach(t),SKo=i(Y),Uv=n(Y,"LI",{});var DBe=s(Uv);y1e=n(DBe,"STRONG",{});var nCt=s(y1e);RKo=r(nCt,"fnet"),nCt.forEach(t),PKo=r(DBe," \u2014 "),oQ=n(DBe,"A",{href:!0});var sCt=s(oQ);BKo=r(sCt,"FNetForTokenClassification"),sCt.forEach(t),IKo=r(DBe," (FNet model)"),DBe.forEach(t),NKo=i(Y),Jv=n(Y,"LI",{});var GBe=s(Jv);x1e=n(GBe,"STRONG",{});var lCt=s(x1e);qKo=r(lCt,"funnel"),lCt.forEach(t),jKo=r(GBe," \u2014 "),rQ=n(GBe,"A",{href:!0});var iCt=s(rQ);DKo=r(iCt,"FunnelForTokenClassification"),iCt.forEach(t),GKo=r(GBe," (Funnel Transformer model)"),GBe.forEach(t),OKo=i(Y),Yv=n(Y,"LI",{});var OBe=s(Yv);$1e=n(OBe,"STRONG",{});var dCt=s($1e);VKo=r(dCt,"gpt2"),dCt.forEach(t),XKo=r(OBe," \u2014 "),tQ=n(OBe,"A",{href:!0});var cCt=s(tQ);zKo=r(cCt,"GPT2ForTokenClassification"),cCt.forEach(t),QKo=r(OBe," (OpenAI GPT-2 model)"),OBe.forEach(t),WKo=i(Y),Kv=n(Y,"LI",{});var VBe=s(Kv);k1e=n(VBe,"STRONG",{});var fCt=s(k1e);HKo=r(fCt,"ibert"),fCt.forEach(t),UKo=r(VBe," \u2014 "),aQ=n(VBe,"A",{href:!0});var mCt=s(aQ);JKo=r(mCt,"IBertForTokenClassification"),mCt.forEach(t),YKo=r(VBe," (I-BERT model)"),VBe.forEach(t),KKo=i(Y),Zv=n(Y,"LI",{});var XBe=s(Zv);S1e=n(XBe,"STRONG",{});var gCt=s(S1e);ZKo=r(gCt,"layoutlm"),gCt.forEach(t),eZo=r(XBe," \u2014 "),nQ=n(XBe,"A",{href:!0});var hCt=s(nQ);oZo=r(hCt,"LayoutLMForTokenClassification"),hCt.forEach(t),rZo=r(XBe," (LayoutLM model)"),XBe.forEach(t),tZo=i(Y),eF=n(Y,"LI",{});var zBe=s(eF);R1e=n(zBe,"STRONG",{});var pCt=s(R1e);aZo=r(pCt,"layoutlmv2"),pCt.forEach(t),nZo=r(zBe," \u2014 "),sQ=n(zBe,"A",{href:!0});var _Ct=s(sQ);sZo=r(_Ct,"LayoutLMv2ForTokenClassification"),_Ct.forEach(t),lZo=r(zBe," (LayoutLMv2 model)"),zBe.forEach(t),iZo=i(Y),oF=n(Y,"LI",{});var QBe=s(oF);P1e=n(QBe,"STRONG",{});var uCt=s(P1e);dZo=r(uCt,"layoutlmv3"),uCt.forEach(t),cZo=r(QBe," \u2014 "),lQ=n(QBe,"A",{href:!0});var bCt=s(lQ);fZo=r(bCt,"LayoutLMv3ForTokenClassification"),bCt.forEach(t),mZo=r(QBe," (LayoutLMv3 model)"),QBe.forEach(t),gZo=i(Y),rF=n(Y,"LI",{});var WBe=s(rF);B1e=n(WBe,"STRONG",{});var vCt=s(B1e);hZo=r(vCt,"longformer"),vCt.forEach(t),pZo=r(WBe," \u2014 "),iQ=n(WBe,"A",{href:!0});var FCt=s(iQ);_Zo=r(FCt,"LongformerForTokenClassification"),FCt.forEach(t),uZo=r(WBe," (Longformer model)"),WBe.forEach(t),bZo=i(Y),tF=n(Y,"LI",{});var HBe=s(tF);I1e=n(HBe,"STRONG",{});var TCt=s(I1e);vZo=r(TCt,"megatron-bert"),TCt.forEach(t),FZo=r(HBe," \u2014 "),dQ=n(HBe,"A",{href:!0});var MCt=s(dQ);TZo=r(MCt,"MegatronBertForTokenClassification"),MCt.forEach(t),MZo=r(HBe," (Megatron-BERT model)"),HBe.forEach(t),EZo=i(Y),aF=n(Y,"LI",{});var UBe=s(aF);N1e=n(UBe,"STRONG",{});var ECt=s(N1e);CZo=r(ECt,"mobilebert"),ECt.forEach(t),wZo=r(UBe," \u2014 "),cQ=n(UBe,"A",{href:!0});var CCt=s(cQ);AZo=r(CCt,"MobileBertForTokenClassification"),CCt.forEach(t),LZo=r(UBe," (MobileBERT model)"),UBe.forEach(t),yZo=i(Y),nF=n(Y,"LI",{});var JBe=s(nF);q1e=n(JBe,"STRONG",{});var wCt=s(q1e);xZo=r(wCt,"mpnet"),wCt.forEach(t),$Zo=r(JBe," \u2014 "),fQ=n(JBe,"A",{href:!0});var ACt=s(fQ);kZo=r(ACt,"MPNetForTokenClassification"),ACt.forEach(t),SZo=r(JBe," (MPNet model)"),JBe.forEach(t),RZo=i(Y),sF=n(Y,"LI",{});var YBe=s(sF);j1e=n(YBe,"STRONG",{});var LCt=s(j1e);PZo=r(LCt,"nezha"),LCt.forEach(t),BZo=r(YBe," \u2014 "),mQ=n(YBe,"A",{href:!0});var yCt=s(mQ);IZo=r(yCt,"NezhaForTokenClassification"),yCt.forEach(t),NZo=r(YBe," (Nezha model)"),YBe.forEach(t),qZo=i(Y),lF=n(Y,"LI",{});var KBe=s(lF);D1e=n(KBe,"STRONG",{});var xCt=s(D1e);jZo=r(xCt,"nystromformer"),xCt.forEach(t),DZo=r(KBe," \u2014 "),gQ=n(KBe,"A",{href:!0});var $Ct=s(gQ);GZo=r($Ct,"NystromformerForTokenClassification"),$Ct.forEach(t),OZo=r(KBe," (Nystr\xF6mformer model)"),KBe.forEach(t),VZo=i(Y),iF=n(Y,"LI",{});var ZBe=s(iF);G1e=n(ZBe,"STRONG",{});var kCt=s(G1e);XZo=r(kCt,"qdqbert"),kCt.forEach(t),zZo=r(ZBe," \u2014 "),hQ=n(ZBe,"A",{href:!0});var SCt=s(hQ);QZo=r(SCt,"QDQBertForTokenClassification"),SCt.forEach(t),WZo=r(ZBe," (QDQBert model)"),ZBe.forEach(t),HZo=i(Y),dF=n(Y,"LI",{});var eIe=s(dF);O1e=n(eIe,"STRONG",{});var RCt=s(O1e);UZo=r(RCt,"rembert"),RCt.forEach(t),JZo=r(eIe," \u2014 "),pQ=n(eIe,"A",{href:!0});var PCt=s(pQ);YZo=r(PCt,"RemBertForTokenClassification"),PCt.forEach(t),KZo=r(eIe," (RemBERT model)"),eIe.forEach(t),ZZo=i(Y),cF=n(Y,"LI",{});var oIe=s(cF);V1e=n(oIe,"STRONG",{});var BCt=s(V1e);eer=r(BCt,"roberta"),BCt.forEach(t),oer=r(oIe," \u2014 "),_Q=n(oIe,"A",{href:!0});var ICt=s(_Q);rer=r(ICt,"RobertaForTokenClassification"),ICt.forEach(t),ter=r(oIe," (RoBERTa model)"),oIe.forEach(t),aer=i(Y),fF=n(Y,"LI",{});var rIe=s(fF);X1e=n(rIe,"STRONG",{});var NCt=s(X1e);ner=r(NCt,"roformer"),NCt.forEach(t),ser=r(rIe," \u2014 "),uQ=n(rIe,"A",{href:!0});var qCt=s(uQ);ler=r(qCt,"RoFormerForTokenClassification"),qCt.forEach(t),ier=r(rIe," (RoFormer model)"),rIe.forEach(t),der=i(Y),mF=n(Y,"LI",{});var tIe=s(mF);z1e=n(tIe,"STRONG",{});var jCt=s(z1e);cer=r(jCt,"squeezebert"),jCt.forEach(t),fer=r(tIe," \u2014 "),bQ=n(tIe,"A",{href:!0});var DCt=s(bQ);mer=r(DCt,"SqueezeBertForTokenClassification"),DCt.forEach(t),ger=r(tIe," (SqueezeBERT model)"),tIe.forEach(t),her=i(Y),gF=n(Y,"LI",{});var aIe=s(gF);Q1e=n(aIe,"STRONG",{});var GCt=s(Q1e);per=r(GCt,"xlm"),GCt.forEach(t),_er=r(aIe," \u2014 "),vQ=n(aIe,"A",{href:!0});var OCt=s(vQ);uer=r(OCt,"XLMForTokenClassification"),OCt.forEach(t),ber=r(aIe," (XLM model)"),aIe.forEach(t),ver=i(Y),hF=n(Y,"LI",{});var nIe=s(hF);W1e=n(nIe,"STRONG",{});var VCt=s(W1e);Fer=r(VCt,"xlm-roberta"),VCt.forEach(t),Ter=r(nIe," \u2014 "),FQ=n(nIe,"A",{href:!0});var XCt=s(FQ);Mer=r(XCt,"XLMRobertaForTokenClassification"),XCt.forEach(t),Eer=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),Cer=i(Y),pF=n(Y,"LI",{});var sIe=s(pF);H1e=n(sIe,"STRONG",{});var zCt=s(H1e);wer=r(zCt,"xlm-roberta-xl"),zCt.forEach(t),Aer=r(sIe," \u2014 "),TQ=n(sIe,"A",{href:!0});var QCt=s(TQ);Ler=r(QCt,"XLMRobertaXLForTokenClassification"),QCt.forEach(t),yer=r(sIe," (XLM-RoBERTa-XL model)"),sIe.forEach(t),xer=i(Y),_F=n(Y,"LI",{});var lIe=s(_F);U1e=n(lIe,"STRONG",{});var WCt=s(U1e);$er=r(WCt,"xlnet"),WCt.forEach(t),ker=r(lIe," \u2014 "),MQ=n(lIe,"A",{href:!0});var HCt=s(MQ);Ser=r(HCt,"XLNetForTokenClassification"),HCt.forEach(t),Rer=r(lIe," (XLNet model)"),lIe.forEach(t),Per=i(Y),uF=n(Y,"LI",{});var iIe=s(uF);J1e=n(iIe,"STRONG",{});var UCt=s(J1e);Ber=r(UCt,"yoso"),UCt.forEach(t),Ier=r(iIe," \u2014 "),EQ=n(iIe,"A",{href:!0});var JCt=s(EQ);Ner=r(JCt,"YosoForTokenClassification"),JCt.forEach(t),qer=r(iIe," (YOSO model)"),iIe.forEach(t),Y.forEach(t),jer=i(_a),bF=n(_a,"P",{});var dIe=s(bF);Der=r(dIe,"The model is set in evaluation mode by default using "),Y1e=n(dIe,"CODE",{});var YCt=s(Y1e);Ger=r(YCt,"model.eval()"),YCt.forEach(t),Oer=r(dIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K1e=n(dIe,"CODE",{});var KCt=s(K1e);Ver=r(KCt,"model.train()"),KCt.forEach(t),dIe.forEach(t),Xer=i(_a),T(vF.$$.fragment,_a),_a.forEach(t),cl.forEach(t),WXe=i(f),hd=n(f,"H2",{class:!0});var ZQe=s(hd);FF=n(ZQe,"A",{id:!0,class:!0,href:!0});var ZCt=s(FF);Z1e=n(ZCt,"SPAN",{});var e3t=s(Z1e);T(Ly.$$.fragment,e3t),e3t.forEach(t),ZCt.forEach(t),zer=i(ZQe),e2e=n(ZQe,"SPAN",{});var o3t=s(e2e);Qer=r(o3t,"AutoModelForQuestionAnswering"),o3t.forEach(t),ZQe.forEach(t),HXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(yy.$$.fragment,fl),Wer=i(fl),pd=n(fl,"P",{});var ate=s(pd);Her=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CQ=n(ate,"A",{href:!0});var r3t=s(CQ);Uer=r(r3t,"from_pretrained()"),r3t.forEach(t),Jer=r(ate," class method or the "),wQ=n(ate,"A",{href:!0});var t3t=s(wQ);Yer=r(t3t,"from_config()"),t3t.forEach(t),Ker=r(ate,` class
method.`),ate.forEach(t),Zer=i(fl),xy=n(fl,"P",{});var eWe=s(xy);eor=r(eWe,"This class cannot be instantiated directly using "),o2e=n(eWe,"CODE",{});var a3t=s(o2e);oor=r(a3t,"__init__()"),a3t.forEach(t),ror=r(eWe," (throws an error)."),eWe.forEach(t),tor=i(fl),ut=n(fl,"DIV",{class:!0});var kw=s(ut);T($y.$$.fragment,kw),aor=i(kw),r2e=n(kw,"P",{});var n3t=s(r2e);nor=r(n3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),n3t.forEach(t),sor=i(kw),_d=n(kw,"P",{});var nte=s(_d);lor=r(nte,`Note:
Loading a model from its configuration file does `),t2e=n(nte,"STRONG",{});var s3t=s(t2e);ior=r(s3t,"not"),s3t.forEach(t),dor=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(nte,"A",{href:!0});var l3t=s(AQ);cor=r(l3t,"from_pretrained()"),l3t.forEach(t),mor=r(nte," to load the model weights."),nte.forEach(t),gor=i(kw),T(TF.$$.fragment,kw),kw.forEach(t),hor=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(ky.$$.fragment,ua),por=i(ua),a2e=n(ua,"P",{});var i3t=s(a2e);_or=r(i3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i3t.forEach(t),uor=i(ua),za=n(ua,"P",{});var Sw=s(za);bor=r(Sw,"The model class to instantiate is selected based on the "),n2e=n(Sw,"CODE",{});var d3t=s(n2e);vor=r(d3t,"model_type"),d3t.forEach(t),For=r(Sw,` property of the config object (either
passed as an argument or loaded from `),s2e=n(Sw,"CODE",{});var c3t=s(s2e);Tor=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),Mor=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(Sw,"CODE",{});var f3t=s(l2e);Eor=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),Cor=r(Sw,":"),Sw.forEach(t),wor=i(ua),V=n(ua,"UL",{});var X=s(V);MF=n(X,"LI",{});var cIe=s(MF);i2e=n(cIe,"STRONG",{});var m3t=s(i2e);Aor=r(m3t,"albert"),m3t.forEach(t),Lor=r(cIe," \u2014 "),LQ=n(cIe,"A",{href:!0});var g3t=s(LQ);yor=r(g3t,"AlbertForQuestionAnswering"),g3t.forEach(t),xor=r(cIe," (ALBERT model)"),cIe.forEach(t),$or=i(X),EF=n(X,"LI",{});var fIe=s(EF);d2e=n(fIe,"STRONG",{});var h3t=s(d2e);kor=r(h3t,"bart"),h3t.forEach(t),Sor=r(fIe," \u2014 "),yQ=n(fIe,"A",{href:!0});var p3t=s(yQ);Ror=r(p3t,"BartForQuestionAnswering"),p3t.forEach(t),Por=r(fIe," (BART model)"),fIe.forEach(t),Bor=i(X),CF=n(X,"LI",{});var mIe=s(CF);c2e=n(mIe,"STRONG",{});var _3t=s(c2e);Ior=r(_3t,"bert"),_3t.forEach(t),Nor=r(mIe," \u2014 "),xQ=n(mIe,"A",{href:!0});var u3t=s(xQ);qor=r(u3t,"BertForQuestionAnswering"),u3t.forEach(t),jor=r(mIe," (BERT model)"),mIe.forEach(t),Dor=i(X),wF=n(X,"LI",{});var gIe=s(wF);f2e=n(gIe,"STRONG",{});var b3t=s(f2e);Gor=r(b3t,"big_bird"),b3t.forEach(t),Oor=r(gIe," \u2014 "),$Q=n(gIe,"A",{href:!0});var v3t=s($Q);Vor=r(v3t,"BigBirdForQuestionAnswering"),v3t.forEach(t),Xor=r(gIe," (BigBird model)"),gIe.forEach(t),zor=i(X),AF=n(X,"LI",{});var hIe=s(AF);m2e=n(hIe,"STRONG",{});var F3t=s(m2e);Qor=r(F3t,"bigbird_pegasus"),F3t.forEach(t),Wor=r(hIe," \u2014 "),kQ=n(hIe,"A",{href:!0});var T3t=s(kQ);Hor=r(T3t,"BigBirdPegasusForQuestionAnswering"),T3t.forEach(t),Uor=r(hIe," (BigBird-Pegasus model)"),hIe.forEach(t),Jor=i(X),LF=n(X,"LI",{});var pIe=s(LF);g2e=n(pIe,"STRONG",{});var M3t=s(g2e);Yor=r(M3t,"camembert"),M3t.forEach(t),Kor=r(pIe," \u2014 "),SQ=n(pIe,"A",{href:!0});var E3t=s(SQ);Zor=r(E3t,"CamembertForQuestionAnswering"),E3t.forEach(t),err=r(pIe," (CamemBERT model)"),pIe.forEach(t),orr=i(X),yF=n(X,"LI",{});var _Ie=s(yF);h2e=n(_Ie,"STRONG",{});var C3t=s(h2e);rrr=r(C3t,"canine"),C3t.forEach(t),trr=r(_Ie," \u2014 "),RQ=n(_Ie,"A",{href:!0});var w3t=s(RQ);arr=r(w3t,"CanineForQuestionAnswering"),w3t.forEach(t),nrr=r(_Ie," (CANINE model)"),_Ie.forEach(t),srr=i(X),xF=n(X,"LI",{});var uIe=s(xF);p2e=n(uIe,"STRONG",{});var A3t=s(p2e);lrr=r(A3t,"convbert"),A3t.forEach(t),irr=r(uIe," \u2014 "),PQ=n(uIe,"A",{href:!0});var L3t=s(PQ);drr=r(L3t,"ConvBertForQuestionAnswering"),L3t.forEach(t),crr=r(uIe," (ConvBERT model)"),uIe.forEach(t),frr=i(X),$F=n(X,"LI",{});var bIe=s($F);_2e=n(bIe,"STRONG",{});var y3t=s(_2e);mrr=r(y3t,"data2vec-text"),y3t.forEach(t),grr=r(bIe," \u2014 "),BQ=n(bIe,"A",{href:!0});var x3t=s(BQ);hrr=r(x3t,"Data2VecTextForQuestionAnswering"),x3t.forEach(t),prr=r(bIe," (Data2VecText model)"),bIe.forEach(t),_rr=i(X),kF=n(X,"LI",{});var vIe=s(kF);u2e=n(vIe,"STRONG",{});var $3t=s(u2e);urr=r($3t,"deberta"),$3t.forEach(t),brr=r(vIe," \u2014 "),IQ=n(vIe,"A",{href:!0});var k3t=s(IQ);vrr=r(k3t,"DebertaForQuestionAnswering"),k3t.forEach(t),Frr=r(vIe," (DeBERTa model)"),vIe.forEach(t),Trr=i(X),SF=n(X,"LI",{});var FIe=s(SF);b2e=n(FIe,"STRONG",{});var S3t=s(b2e);Mrr=r(S3t,"deberta-v2"),S3t.forEach(t),Err=r(FIe," \u2014 "),NQ=n(FIe,"A",{href:!0});var R3t=s(NQ);Crr=r(R3t,"DebertaV2ForQuestionAnswering"),R3t.forEach(t),wrr=r(FIe," (DeBERTa-v2 model)"),FIe.forEach(t),Arr=i(X),RF=n(X,"LI",{});var TIe=s(RF);v2e=n(TIe,"STRONG",{});var P3t=s(v2e);Lrr=r(P3t,"distilbert"),P3t.forEach(t),yrr=r(TIe," \u2014 "),qQ=n(TIe,"A",{href:!0});var B3t=s(qQ);xrr=r(B3t,"DistilBertForQuestionAnswering"),B3t.forEach(t),$rr=r(TIe," (DistilBERT model)"),TIe.forEach(t),krr=i(X),PF=n(X,"LI",{});var MIe=s(PF);F2e=n(MIe,"STRONG",{});var I3t=s(F2e);Srr=r(I3t,"electra"),I3t.forEach(t),Rrr=r(MIe," \u2014 "),jQ=n(MIe,"A",{href:!0});var N3t=s(jQ);Prr=r(N3t,"ElectraForQuestionAnswering"),N3t.forEach(t),Brr=r(MIe," (ELECTRA model)"),MIe.forEach(t),Irr=i(X),BF=n(X,"LI",{});var EIe=s(BF);T2e=n(EIe,"STRONG",{});var q3t=s(T2e);Nrr=r(q3t,"flaubert"),q3t.forEach(t),qrr=r(EIe," \u2014 "),DQ=n(EIe,"A",{href:!0});var j3t=s(DQ);jrr=r(j3t,"FlaubertForQuestionAnsweringSimple"),j3t.forEach(t),Drr=r(EIe," (FlauBERT model)"),EIe.forEach(t),Grr=i(X),IF=n(X,"LI",{});var CIe=s(IF);M2e=n(CIe,"STRONG",{});var D3t=s(M2e);Orr=r(D3t,"fnet"),D3t.forEach(t),Vrr=r(CIe," \u2014 "),GQ=n(CIe,"A",{href:!0});var G3t=s(GQ);Xrr=r(G3t,"FNetForQuestionAnswering"),G3t.forEach(t),zrr=r(CIe," (FNet model)"),CIe.forEach(t),Qrr=i(X),NF=n(X,"LI",{});var wIe=s(NF);E2e=n(wIe,"STRONG",{});var O3t=s(E2e);Wrr=r(O3t,"funnel"),O3t.forEach(t),Hrr=r(wIe," \u2014 "),OQ=n(wIe,"A",{href:!0});var V3t=s(OQ);Urr=r(V3t,"FunnelForQuestionAnswering"),V3t.forEach(t),Jrr=r(wIe," (Funnel Transformer model)"),wIe.forEach(t),Yrr=i(X),qF=n(X,"LI",{});var AIe=s(qF);C2e=n(AIe,"STRONG",{});var X3t=s(C2e);Krr=r(X3t,"gptj"),X3t.forEach(t),Zrr=r(AIe," \u2014 "),VQ=n(AIe,"A",{href:!0});var z3t=s(VQ);etr=r(z3t,"GPTJForQuestionAnswering"),z3t.forEach(t),otr=r(AIe," (GPT-J model)"),AIe.forEach(t),rtr=i(X),jF=n(X,"LI",{});var LIe=s(jF);w2e=n(LIe,"STRONG",{});var Q3t=s(w2e);ttr=r(Q3t,"ibert"),Q3t.forEach(t),atr=r(LIe," \u2014 "),XQ=n(LIe,"A",{href:!0});var W3t=s(XQ);ntr=r(W3t,"IBertForQuestionAnswering"),W3t.forEach(t),str=r(LIe," (I-BERT model)"),LIe.forEach(t),ltr=i(X),DF=n(X,"LI",{});var yIe=s(DF);A2e=n(yIe,"STRONG",{});var H3t=s(A2e);itr=r(H3t,"layoutlmv2"),H3t.forEach(t),dtr=r(yIe," \u2014 "),zQ=n(yIe,"A",{href:!0});var U3t=s(zQ);ctr=r(U3t,"LayoutLMv2ForQuestionAnswering"),U3t.forEach(t),ftr=r(yIe," (LayoutLMv2 model)"),yIe.forEach(t),mtr=i(X),GF=n(X,"LI",{});var xIe=s(GF);L2e=n(xIe,"STRONG",{});var J3t=s(L2e);gtr=r(J3t,"layoutlmv3"),J3t.forEach(t),htr=r(xIe," \u2014 "),QQ=n(xIe,"A",{href:!0});var Y3t=s(QQ);ptr=r(Y3t,"LayoutLMv3ForQuestionAnswering"),Y3t.forEach(t),_tr=r(xIe," (LayoutLMv3 model)"),xIe.forEach(t),utr=i(X),OF=n(X,"LI",{});var $Ie=s(OF);y2e=n($Ie,"STRONG",{});var K3t=s(y2e);btr=r(K3t,"led"),K3t.forEach(t),vtr=r($Ie," \u2014 "),WQ=n($Ie,"A",{href:!0});var Z3t=s(WQ);Ftr=r(Z3t,"LEDForQuestionAnswering"),Z3t.forEach(t),Ttr=r($Ie," (LED model)"),$Ie.forEach(t),Mtr=i(X),VF=n(X,"LI",{});var kIe=s(VF);x2e=n(kIe,"STRONG",{});var e5t=s(x2e);Etr=r(e5t,"longformer"),e5t.forEach(t),Ctr=r(kIe," \u2014 "),HQ=n(kIe,"A",{href:!0});var o5t=s(HQ);wtr=r(o5t,"LongformerForQuestionAnswering"),o5t.forEach(t),Atr=r(kIe," (Longformer model)"),kIe.forEach(t),Ltr=i(X),XF=n(X,"LI",{});var SIe=s(XF);$2e=n(SIe,"STRONG",{});var r5t=s($2e);ytr=r(r5t,"lxmert"),r5t.forEach(t),xtr=r(SIe," \u2014 "),UQ=n(SIe,"A",{href:!0});var t5t=s(UQ);$tr=r(t5t,"LxmertForQuestionAnswering"),t5t.forEach(t),ktr=r(SIe," (LXMERT model)"),SIe.forEach(t),Str=i(X),zF=n(X,"LI",{});var RIe=s(zF);k2e=n(RIe,"STRONG",{});var a5t=s(k2e);Rtr=r(a5t,"mbart"),a5t.forEach(t),Ptr=r(RIe," \u2014 "),JQ=n(RIe,"A",{href:!0});var n5t=s(JQ);Btr=r(n5t,"MBartForQuestionAnswering"),n5t.forEach(t),Itr=r(RIe," (mBART model)"),RIe.forEach(t),Ntr=i(X),QF=n(X,"LI",{});var PIe=s(QF);S2e=n(PIe,"STRONG",{});var s5t=s(S2e);qtr=r(s5t,"megatron-bert"),s5t.forEach(t),jtr=r(PIe," \u2014 "),YQ=n(PIe,"A",{href:!0});var l5t=s(YQ);Dtr=r(l5t,"MegatronBertForQuestionAnswering"),l5t.forEach(t),Gtr=r(PIe," (Megatron-BERT model)"),PIe.forEach(t),Otr=i(X),WF=n(X,"LI",{});var BIe=s(WF);R2e=n(BIe,"STRONG",{});var i5t=s(R2e);Vtr=r(i5t,"mobilebert"),i5t.forEach(t),Xtr=r(BIe," \u2014 "),KQ=n(BIe,"A",{href:!0});var d5t=s(KQ);ztr=r(d5t,"MobileBertForQuestionAnswering"),d5t.forEach(t),Qtr=r(BIe," (MobileBERT model)"),BIe.forEach(t),Wtr=i(X),HF=n(X,"LI",{});var IIe=s(HF);P2e=n(IIe,"STRONG",{});var c5t=s(P2e);Htr=r(c5t,"mpnet"),c5t.forEach(t),Utr=r(IIe," \u2014 "),ZQ=n(IIe,"A",{href:!0});var f5t=s(ZQ);Jtr=r(f5t,"MPNetForQuestionAnswering"),f5t.forEach(t),Ytr=r(IIe," (MPNet model)"),IIe.forEach(t),Ktr=i(X),UF=n(X,"LI",{});var NIe=s(UF);B2e=n(NIe,"STRONG",{});var m5t=s(B2e);Ztr=r(m5t,"mvp"),m5t.forEach(t),ear=r(NIe," \u2014 "),eW=n(NIe,"A",{href:!0});var g5t=s(eW);oar=r(g5t,"MvpForQuestionAnswering"),g5t.forEach(t),rar=r(NIe," (MVP model)"),NIe.forEach(t),tar=i(X),JF=n(X,"LI",{});var qIe=s(JF);I2e=n(qIe,"STRONG",{});var h5t=s(I2e);aar=r(h5t,"nezha"),h5t.forEach(t),nar=r(qIe," \u2014 "),oW=n(qIe,"A",{href:!0});var p5t=s(oW);sar=r(p5t,"NezhaForQuestionAnswering"),p5t.forEach(t),lar=r(qIe," (Nezha model)"),qIe.forEach(t),iar=i(X),YF=n(X,"LI",{});var jIe=s(YF);N2e=n(jIe,"STRONG",{});var _5t=s(N2e);dar=r(_5t,"nystromformer"),_5t.forEach(t),car=r(jIe," \u2014 "),rW=n(jIe,"A",{href:!0});var u5t=s(rW);far=r(u5t,"NystromformerForQuestionAnswering"),u5t.forEach(t),mar=r(jIe," (Nystr\xF6mformer model)"),jIe.forEach(t),gar=i(X),KF=n(X,"LI",{});var DIe=s(KF);q2e=n(DIe,"STRONG",{});var b5t=s(q2e);har=r(b5t,"qdqbert"),b5t.forEach(t),par=r(DIe," \u2014 "),tW=n(DIe,"A",{href:!0});var v5t=s(tW);_ar=r(v5t,"QDQBertForQuestionAnswering"),v5t.forEach(t),uar=r(DIe," (QDQBert model)"),DIe.forEach(t),bar=i(X),ZF=n(X,"LI",{});var GIe=s(ZF);j2e=n(GIe,"STRONG",{});var F5t=s(j2e);Far=r(F5t,"reformer"),F5t.forEach(t),Tar=r(GIe," \u2014 "),aW=n(GIe,"A",{href:!0});var T5t=s(aW);Mar=r(T5t,"ReformerForQuestionAnswering"),T5t.forEach(t),Ear=r(GIe," (Reformer model)"),GIe.forEach(t),Car=i(X),e6=n(X,"LI",{});var OIe=s(e6);D2e=n(OIe,"STRONG",{});var M5t=s(D2e);war=r(M5t,"rembert"),M5t.forEach(t),Aar=r(OIe," \u2014 "),nW=n(OIe,"A",{href:!0});var E5t=s(nW);Lar=r(E5t,"RemBertForQuestionAnswering"),E5t.forEach(t),yar=r(OIe," (RemBERT model)"),OIe.forEach(t),xar=i(X),o6=n(X,"LI",{});var VIe=s(o6);G2e=n(VIe,"STRONG",{});var C5t=s(G2e);$ar=r(C5t,"roberta"),C5t.forEach(t),kar=r(VIe," \u2014 "),sW=n(VIe,"A",{href:!0});var w5t=s(sW);Sar=r(w5t,"RobertaForQuestionAnswering"),w5t.forEach(t),Rar=r(VIe," (RoBERTa model)"),VIe.forEach(t),Par=i(X),r6=n(X,"LI",{});var XIe=s(r6);O2e=n(XIe,"STRONG",{});var A5t=s(O2e);Bar=r(A5t,"roformer"),A5t.forEach(t),Iar=r(XIe," \u2014 "),lW=n(XIe,"A",{href:!0});var L5t=s(lW);Nar=r(L5t,"RoFormerForQuestionAnswering"),L5t.forEach(t),qar=r(XIe," (RoFormer model)"),XIe.forEach(t),jar=i(X),t6=n(X,"LI",{});var zIe=s(t6);V2e=n(zIe,"STRONG",{});var y5t=s(V2e);Dar=r(y5t,"splinter"),y5t.forEach(t),Gar=r(zIe," \u2014 "),iW=n(zIe,"A",{href:!0});var x5t=s(iW);Oar=r(x5t,"SplinterForQuestionAnswering"),x5t.forEach(t),Var=r(zIe," (Splinter model)"),zIe.forEach(t),Xar=i(X),a6=n(X,"LI",{});var QIe=s(a6);X2e=n(QIe,"STRONG",{});var $5t=s(X2e);zar=r($5t,"squeezebert"),$5t.forEach(t),Qar=r(QIe," \u2014 "),dW=n(QIe,"A",{href:!0});var k5t=s(dW);War=r(k5t,"SqueezeBertForQuestionAnswering"),k5t.forEach(t),Har=r(QIe," (SqueezeBERT model)"),QIe.forEach(t),Uar=i(X),n6=n(X,"LI",{});var WIe=s(n6);z2e=n(WIe,"STRONG",{});var S5t=s(z2e);Jar=r(S5t,"xlm"),S5t.forEach(t),Yar=r(WIe," \u2014 "),cW=n(WIe,"A",{href:!0});var R5t=s(cW);Kar=r(R5t,"XLMForQuestionAnsweringSimple"),R5t.forEach(t),Zar=r(WIe," (XLM model)"),WIe.forEach(t),enr=i(X),s6=n(X,"LI",{});var HIe=s(s6);Q2e=n(HIe,"STRONG",{});var P5t=s(Q2e);onr=r(P5t,"xlm-roberta"),P5t.forEach(t),rnr=r(HIe," \u2014 "),fW=n(HIe,"A",{href:!0});var B5t=s(fW);tnr=r(B5t,"XLMRobertaForQuestionAnswering"),B5t.forEach(t),anr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),nnr=i(X),l6=n(X,"LI",{});var UIe=s(l6);W2e=n(UIe,"STRONG",{});var I5t=s(W2e);snr=r(I5t,"xlm-roberta-xl"),I5t.forEach(t),lnr=r(UIe," \u2014 "),mW=n(UIe,"A",{href:!0});var N5t=s(mW);inr=r(N5t,"XLMRobertaXLForQuestionAnswering"),N5t.forEach(t),dnr=r(UIe," (XLM-RoBERTa-XL model)"),UIe.forEach(t),cnr=i(X),i6=n(X,"LI",{});var JIe=s(i6);H2e=n(JIe,"STRONG",{});var q5t=s(H2e);fnr=r(q5t,"xlnet"),q5t.forEach(t),mnr=r(JIe," \u2014 "),gW=n(JIe,"A",{href:!0});var j5t=s(gW);gnr=r(j5t,"XLNetForQuestionAnsweringSimple"),j5t.forEach(t),hnr=r(JIe," (XLNet model)"),JIe.forEach(t),pnr=i(X),d6=n(X,"LI",{});var YIe=s(d6);U2e=n(YIe,"STRONG",{});var D5t=s(U2e);_nr=r(D5t,"yoso"),D5t.forEach(t),unr=r(YIe," \u2014 "),hW=n(YIe,"A",{href:!0});var G5t=s(hW);bnr=r(G5t,"YosoForQuestionAnswering"),G5t.forEach(t),vnr=r(YIe," (YOSO model)"),YIe.forEach(t),X.forEach(t),Fnr=i(ua),c6=n(ua,"P",{});var KIe=s(c6);Tnr=r(KIe,"The model is set in evaluation mode by default using "),J2e=n(KIe,"CODE",{});var O5t=s(J2e);Mnr=r(O5t,"model.eval()"),O5t.forEach(t),Enr=r(KIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=n(KIe,"CODE",{});var V5t=s(Y2e);Cnr=r(V5t,"model.train()"),V5t.forEach(t),KIe.forEach(t),wnr=i(ua),T(f6.$$.fragment,ua),ua.forEach(t),fl.forEach(t),UXe=i(f),ud=n(f,"H2",{class:!0});var oWe=s(ud);m6=n(oWe,"A",{id:!0,class:!0,href:!0});var X5t=s(m6);K2e=n(X5t,"SPAN",{});var z5t=s(K2e);T(Sy.$$.fragment,z5t),z5t.forEach(t),X5t.forEach(t),Anr=i(oWe),Z2e=n(oWe,"SPAN",{});var Q5t=s(Z2e);Lnr=r(Q5t,"AutoModelForTableQuestionAnswering"),Q5t.forEach(t),oWe.forEach(t),JXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T(Ry.$$.fragment,ml),ynr=i(ml),bd=n(ml,"P",{});var ste=s(bd);xnr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pW=n(ste,"A",{href:!0});var W5t=s(pW);$nr=r(W5t,"from_pretrained()"),W5t.forEach(t),knr=r(ste," class method or the "),_W=n(ste,"A",{href:!0});var H5t=s(_W);Snr=r(H5t,"from_config()"),H5t.forEach(t),Rnr=r(ste,` class
method.`),ste.forEach(t),Pnr=i(ml),Py=n(ml,"P",{});var rWe=s(Py);Bnr=r(rWe,"This class cannot be instantiated directly using "),e4e=n(rWe,"CODE",{});var U5t=s(e4e);Inr=r(U5t,"__init__()"),U5t.forEach(t),Nnr=r(rWe," (throws an error)."),rWe.forEach(t),qnr=i(ml),bt=n(ml,"DIV",{class:!0});var Rw=s(bt);T(By.$$.fragment,Rw),jnr=i(Rw),o4e=n(Rw,"P",{});var J5t=s(o4e);Dnr=r(J5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),J5t.forEach(t),Gnr=i(Rw),vd=n(Rw,"P",{});var lte=s(vd);Onr=r(lte,`Note:
Loading a model from its configuration file does `),r4e=n(lte,"STRONG",{});var Y5t=s(r4e);Vnr=r(Y5t,"not"),Y5t.forEach(t),Xnr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(lte,"A",{href:!0});var K5t=s(uW);znr=r(K5t,"from_pretrained()"),K5t.forEach(t),Qnr=r(lte," to load the model weights."),lte.forEach(t),Wnr=i(Rw),T(g6.$$.fragment,Rw),Rw.forEach(t),Hnr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(Iy.$$.fragment,ba),Unr=i(ba),t4e=n(ba,"P",{});var Z5t=s(t4e);Jnr=r(Z5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Z5t.forEach(t),Ynr=i(ba),Qa=n(ba,"P",{});var Pw=s(Qa);Knr=r(Pw,"The model class to instantiate is selected based on the "),a4e=n(Pw,"CODE",{});var e0t=s(a4e);Znr=r(e0t,"model_type"),e0t.forEach(t),esr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),n4e=n(Pw,"CODE",{});var o0t=s(n4e);osr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),rsr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(Pw,"CODE",{});var r0t=s(s4e);tsr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),asr=r(Pw,":"),Pw.forEach(t),nsr=i(ba),l4e=n(ba,"UL",{});var t0t=s(l4e);h6=n(t0t,"LI",{});var ZIe=s(h6);i4e=n(ZIe,"STRONG",{});var a0t=s(i4e);ssr=r(a0t,"tapas"),a0t.forEach(t),lsr=r(ZIe," \u2014 "),bW=n(ZIe,"A",{href:!0});var n0t=s(bW);isr=r(n0t,"TapasForQuestionAnswering"),n0t.forEach(t),dsr=r(ZIe," (TAPAS model)"),ZIe.forEach(t),t0t.forEach(t),csr=i(ba),p6=n(ba,"P",{});var eNe=s(p6);fsr=r(eNe,"The model is set in evaluation mode by default using "),d4e=n(eNe,"CODE",{});var s0t=s(d4e);msr=r(s0t,"model.eval()"),s0t.forEach(t),gsr=r(eNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c4e=n(eNe,"CODE",{});var l0t=s(c4e);hsr=r(l0t,"model.train()"),l0t.forEach(t),eNe.forEach(t),psr=i(ba),T(_6.$$.fragment,ba),ba.forEach(t),ml.forEach(t),YXe=i(f),Fd=n(f,"H2",{class:!0});var tWe=s(Fd);u6=n(tWe,"A",{id:!0,class:!0,href:!0});var i0t=s(u6);f4e=n(i0t,"SPAN",{});var d0t=s(f4e);T(Ny.$$.fragment,d0t),d0t.forEach(t),i0t.forEach(t),_sr=i(tWe),m4e=n(tWe,"SPAN",{});var c0t=s(m4e);usr=r(c0t,"AutoModelForImageClassification"),c0t.forEach(t),tWe.forEach(t),KXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(qy.$$.fragment,gl),bsr=i(gl),Td=n(gl,"P",{});var ite=s(Td);vsr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vW=n(ite,"A",{href:!0});var f0t=s(vW);Fsr=r(f0t,"from_pretrained()"),f0t.forEach(t),Tsr=r(ite," class method or the "),FW=n(ite,"A",{href:!0});var m0t=s(FW);Msr=r(m0t,"from_config()"),m0t.forEach(t),Esr=r(ite,` class
method.`),ite.forEach(t),Csr=i(gl),jy=n(gl,"P",{});var aWe=s(jy);wsr=r(aWe,"This class cannot be instantiated directly using "),g4e=n(aWe,"CODE",{});var g0t=s(g4e);Asr=r(g0t,"__init__()"),g0t.forEach(t),Lsr=r(aWe," (throws an error)."),aWe.forEach(t),ysr=i(gl),vt=n(gl,"DIV",{class:!0});var Bw=s(vt);T(Dy.$$.fragment,Bw),xsr=i(Bw),h4e=n(Bw,"P",{});var h0t=s(h4e);$sr=r(h0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),h0t.forEach(t),ksr=i(Bw),Md=n(Bw,"P",{});var dte=s(Md);Ssr=r(dte,`Note:
Loading a model from its configuration file does `),p4e=n(dte,"STRONG",{});var p0t=s(p4e);Rsr=r(p0t,"not"),p0t.forEach(t),Psr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(dte,"A",{href:!0});var _0t=s(TW);Bsr=r(_0t,"from_pretrained()"),_0t.forEach(t),Isr=r(dte," to load the model weights."),dte.forEach(t),Nsr=i(Bw),T(b6.$$.fragment,Bw),Bw.forEach(t),qsr=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(Gy.$$.fragment,va),jsr=i(va),_4e=n(va,"P",{});var u0t=s(_4e);Dsr=r(u0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),u0t.forEach(t),Gsr=i(va),Wa=n(va,"P",{});var Iw=s(Wa);Osr=r(Iw,"The model class to instantiate is selected based on the "),u4e=n(Iw,"CODE",{});var b0t=s(u4e);Vsr=r(b0t,"model_type"),b0t.forEach(t),Xsr=r(Iw,` property of the config object (either
passed as an argument or loaded from `),b4e=n(Iw,"CODE",{});var v0t=s(b4e);zsr=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),Qsr=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(Iw,"CODE",{});var F0t=s(v4e);Wsr=r(F0t,"pretrained_model_name_or_path"),F0t.forEach(t),Hsr=r(Iw,":"),Iw.forEach(t),Usr=i(va),_e=n(va,"UL",{});var Fe=s(_e);v6=n(Fe,"LI",{});var oNe=s(v6);F4e=n(oNe,"STRONG",{});var T0t=s(F4e);Jsr=r(T0t,"beit"),T0t.forEach(t),Ysr=r(oNe," \u2014 "),MW=n(oNe,"A",{href:!0});var M0t=s(MW);Ksr=r(M0t,"BeitForImageClassification"),M0t.forEach(t),Zsr=r(oNe," (BEiT model)"),oNe.forEach(t),elr=i(Fe),F6=n(Fe,"LI",{});var rNe=s(F6);T4e=n(rNe,"STRONG",{});var E0t=s(T4e);olr=r(E0t,"convnext"),E0t.forEach(t),rlr=r(rNe," \u2014 "),EW=n(rNe,"A",{href:!0});var C0t=s(EW);tlr=r(C0t,"ConvNextForImageClassification"),C0t.forEach(t),alr=r(rNe," (ConvNeXT model)"),rNe.forEach(t),nlr=i(Fe),T6=n(Fe,"LI",{});var tNe=s(T6);M4e=n(tNe,"STRONG",{});var w0t=s(M4e);slr=r(w0t,"cvt"),w0t.forEach(t),llr=r(tNe," \u2014 "),CW=n(tNe,"A",{href:!0});var A0t=s(CW);ilr=r(A0t,"CvtForImageClassification"),A0t.forEach(t),dlr=r(tNe," (CvT model)"),tNe.forEach(t),clr=i(Fe),M6=n(Fe,"LI",{});var aNe=s(M6);E4e=n(aNe,"STRONG",{});var L0t=s(E4e);flr=r(L0t,"data2vec-vision"),L0t.forEach(t),mlr=r(aNe," \u2014 "),wW=n(aNe,"A",{href:!0});var y0t=s(wW);glr=r(y0t,"Data2VecVisionForImageClassification"),y0t.forEach(t),hlr=r(aNe," (Data2VecVision model)"),aNe.forEach(t),plr=i(Fe),Us=n(Fe,"LI",{});var NS=s(Us);C4e=n(NS,"STRONG",{});var x0t=s(C4e);_lr=r(x0t,"deit"),x0t.forEach(t),ulr=r(NS," \u2014 "),AW=n(NS,"A",{href:!0});var $0t=s(AW);blr=r($0t,"DeiTForImageClassification"),$0t.forEach(t),vlr=r(NS," or "),LW=n(NS,"A",{href:!0});var k0t=s(LW);Flr=r(k0t,"DeiTForImageClassificationWithTeacher"),k0t.forEach(t),Tlr=r(NS," (DeiT model)"),NS.forEach(t),Mlr=i(Fe),E6=n(Fe,"LI",{});var nNe=s(E6);w4e=n(nNe,"STRONG",{});var S0t=s(w4e);Elr=r(S0t,"imagegpt"),S0t.forEach(t),Clr=r(nNe," \u2014 "),yW=n(nNe,"A",{href:!0});var R0t=s(yW);wlr=r(R0t,"ImageGPTForImageClassification"),R0t.forEach(t),Alr=r(nNe," (ImageGPT model)"),nNe.forEach(t),Llr=i(Fe),Js=n(Fe,"LI",{});var qS=s(Js);A4e=n(qS,"STRONG",{});var P0t=s(A4e);ylr=r(P0t,"levit"),P0t.forEach(t),xlr=r(qS," \u2014 "),xW=n(qS,"A",{href:!0});var B0t=s(xW);$lr=r(B0t,"LevitForImageClassification"),B0t.forEach(t),klr=r(qS," or "),$W=n(qS,"A",{href:!0});var I0t=s($W);Slr=r(I0t,"LevitForImageClassificationWithTeacher"),I0t.forEach(t),Rlr=r(qS," (LeViT model)"),qS.forEach(t),Plr=i(Fe),C6=n(Fe,"LI",{});var sNe=s(C6);L4e=n(sNe,"STRONG",{});var N0t=s(L4e);Blr=r(N0t,"mobilevit"),N0t.forEach(t),Ilr=r(sNe," \u2014 "),kW=n(sNe,"A",{href:!0});var q0t=s(kW);Nlr=r(q0t,"MobileViTForImageClassification"),q0t.forEach(t),qlr=r(sNe," (MobileViT model)"),sNe.forEach(t),jlr=i(Fe),Ft=n(Fe,"LI",{});var Sf=s(Ft);y4e=n(Sf,"STRONG",{});var j0t=s(y4e);Dlr=r(j0t,"perceiver"),j0t.forEach(t),Glr=r(Sf," \u2014 "),SW=n(Sf,"A",{href:!0});var D0t=s(SW);Olr=r(D0t,"PerceiverForImageClassificationLearned"),D0t.forEach(t),Vlr=r(Sf," or "),RW=n(Sf,"A",{href:!0});var G0t=s(RW);Xlr=r(G0t,"PerceiverForImageClassificationFourier"),G0t.forEach(t),zlr=r(Sf," or "),PW=n(Sf,"A",{href:!0});var O0t=s(PW);Qlr=r(O0t,"PerceiverForImageClassificationConvProcessing"),O0t.forEach(t),Wlr=r(Sf," (Perceiver model)"),Sf.forEach(t),Hlr=i(Fe),w6=n(Fe,"LI",{});var lNe=s(w6);x4e=n(lNe,"STRONG",{});var V0t=s(x4e);Ulr=r(V0t,"poolformer"),V0t.forEach(t),Jlr=r(lNe," \u2014 "),BW=n(lNe,"A",{href:!0});var X0t=s(BW);Ylr=r(X0t,"PoolFormerForImageClassification"),X0t.forEach(t),Klr=r(lNe," (PoolFormer model)"),lNe.forEach(t),Zlr=i(Fe),A6=n(Fe,"LI",{});var iNe=s(A6);$4e=n(iNe,"STRONG",{});var z0t=s($4e);eir=r(z0t,"regnet"),z0t.forEach(t),oir=r(iNe," \u2014 "),IW=n(iNe,"A",{href:!0});var Q0t=s(IW);rir=r(Q0t,"RegNetForImageClassification"),Q0t.forEach(t),tir=r(iNe," (RegNet model)"),iNe.forEach(t),air=i(Fe),L6=n(Fe,"LI",{});var dNe=s(L6);k4e=n(dNe,"STRONG",{});var W0t=s(k4e);nir=r(W0t,"resnet"),W0t.forEach(t),sir=r(dNe," \u2014 "),NW=n(dNe,"A",{href:!0});var H0t=s(NW);lir=r(H0t,"ResNetForImageClassification"),H0t.forEach(t),iir=r(dNe," (ResNet model)"),dNe.forEach(t),dir=i(Fe),y6=n(Fe,"LI",{});var cNe=s(y6);S4e=n(cNe,"STRONG",{});var U0t=s(S4e);cir=r(U0t,"segformer"),U0t.forEach(t),fir=r(cNe," \u2014 "),qW=n(cNe,"A",{href:!0});var J0t=s(qW);mir=r(J0t,"SegformerForImageClassification"),J0t.forEach(t),gir=r(cNe," (SegFormer model)"),cNe.forEach(t),hir=i(Fe),x6=n(Fe,"LI",{});var fNe=s(x6);R4e=n(fNe,"STRONG",{});var Y0t=s(R4e);pir=r(Y0t,"swin"),Y0t.forEach(t),_ir=r(fNe," \u2014 "),jW=n(fNe,"A",{href:!0});var K0t=s(jW);uir=r(K0t,"SwinForImageClassification"),K0t.forEach(t),bir=r(fNe," (Swin Transformer model)"),fNe.forEach(t),vir=i(Fe),$6=n(Fe,"LI",{});var mNe=s($6);P4e=n(mNe,"STRONG",{});var Z0t=s(P4e);Fir=r(Z0t,"swinv2"),Z0t.forEach(t),Tir=r(mNe," \u2014 "),DW=n(mNe,"A",{href:!0});var ewt=s(DW);Mir=r(ewt,"Swinv2ForImageClassification"),ewt.forEach(t),Eir=r(mNe," (Swin Transformer V2 model)"),mNe.forEach(t),Cir=i(Fe),k6=n(Fe,"LI",{});var gNe=s(k6);B4e=n(gNe,"STRONG",{});var owt=s(B4e);wir=r(owt,"van"),owt.forEach(t),Air=r(gNe," \u2014 "),GW=n(gNe,"A",{href:!0});var rwt=s(GW);Lir=r(rwt,"VanForImageClassification"),rwt.forEach(t),yir=r(gNe," (VAN model)"),gNe.forEach(t),xir=i(Fe),S6=n(Fe,"LI",{});var hNe=s(S6);I4e=n(hNe,"STRONG",{});var twt=s(I4e);$ir=r(twt,"vit"),twt.forEach(t),kir=r(hNe," \u2014 "),OW=n(hNe,"A",{href:!0});var awt=s(OW);Sir=r(awt,"ViTForImageClassification"),awt.forEach(t),Rir=r(hNe," (ViT model)"),hNe.forEach(t),Fe.forEach(t),Pir=i(va),R6=n(va,"P",{});var pNe=s(R6);Bir=r(pNe,"The model is set in evaluation mode by default using "),N4e=n(pNe,"CODE",{});var nwt=s(N4e);Iir=r(nwt,"model.eval()"),nwt.forEach(t),Nir=r(pNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q4e=n(pNe,"CODE",{});var swt=s(q4e);qir=r(swt,"model.train()"),swt.forEach(t),pNe.forEach(t),jir=i(va),T(P6.$$.fragment,va),va.forEach(t),gl.forEach(t),ZXe=i(f),Ed=n(f,"H2",{class:!0});var nWe=s(Ed);B6=n(nWe,"A",{id:!0,class:!0,href:!0});var lwt=s(B6);j4e=n(lwt,"SPAN",{});var iwt=s(j4e);T(Oy.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),Dir=i(nWe),D4e=n(nWe,"SPAN",{});var dwt=s(D4e);Gir=r(dwt,"AutoModelForVision2Seq"),dwt.forEach(t),nWe.forEach(t),eze=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(Vy.$$.fragment,hl),Oir=i(hl),Cd=n(hl,"P",{});var cte=s(Cd);Vir=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VW=n(cte,"A",{href:!0});var cwt=s(VW);Xir=r(cwt,"from_pretrained()"),cwt.forEach(t),zir=r(cte," class method or the "),XW=n(cte,"A",{href:!0});var fwt=s(XW);Qir=r(fwt,"from_config()"),fwt.forEach(t),Wir=r(cte,` class
method.`),cte.forEach(t),Hir=i(hl),Xy=n(hl,"P",{});var sWe=s(Xy);Uir=r(sWe,"This class cannot be instantiated directly using "),G4e=n(sWe,"CODE",{});var mwt=s(G4e);Jir=r(mwt,"__init__()"),mwt.forEach(t),Yir=r(sWe," (throws an error)."),sWe.forEach(t),Kir=i(hl),Tt=n(hl,"DIV",{class:!0});var Nw=s(Tt);T(zy.$$.fragment,Nw),Zir=i(Nw),O4e=n(Nw,"P",{});var gwt=s(O4e);edr=r(gwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gwt.forEach(t),odr=i(Nw),wd=n(Nw,"P",{});var fte=s(wd);rdr=r(fte,`Note:
Loading a model from its configuration file does `),V4e=n(fte,"STRONG",{});var hwt=s(V4e);tdr=r(hwt,"not"),hwt.forEach(t),adr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(fte,"A",{href:!0});var pwt=s(zW);ndr=r(pwt,"from_pretrained()"),pwt.forEach(t),sdr=r(fte," to load the model weights."),fte.forEach(t),ldr=i(Nw),T(I6.$$.fragment,Nw),Nw.forEach(t),idr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Qy.$$.fragment,Fa),ddr=i(Fa),X4e=n(Fa,"P",{});var _wt=s(X4e);cdr=r(_wt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_wt.forEach(t),fdr=i(Fa),Ha=n(Fa,"P",{});var qw=s(Ha);mdr=r(qw,"The model class to instantiate is selected based on the "),z4e=n(qw,"CODE",{});var uwt=s(z4e);gdr=r(uwt,"model_type"),uwt.forEach(t),hdr=r(qw,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(qw,"CODE",{});var bwt=s(Q4e);pdr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),_dr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W4e=n(qw,"CODE",{});var vwt=s(W4e);udr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),bdr=r(qw,":"),qw.forEach(t),vdr=i(Fa),H4e=n(Fa,"UL",{});var Fwt=s(H4e);N6=n(Fwt,"LI",{});var _Ne=s(N6);U4e=n(_Ne,"STRONG",{});var Twt=s(U4e);Fdr=r(Twt,"vision-encoder-decoder"),Twt.forEach(t),Tdr=r(_Ne," \u2014 "),QW=n(_Ne,"A",{href:!0});var Mwt=s(QW);Mdr=r(Mwt,"VisionEncoderDecoderModel"),Mwt.forEach(t),Edr=r(_Ne," (Vision Encoder decoder model)"),_Ne.forEach(t),Fwt.forEach(t),Cdr=i(Fa),q6=n(Fa,"P",{});var uNe=s(q6);wdr=r(uNe,"The model is set in evaluation mode by default using "),J4e=n(uNe,"CODE",{});var Ewt=s(J4e);Adr=r(Ewt,"model.eval()"),Ewt.forEach(t),Ldr=r(uNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=n(uNe,"CODE",{});var Cwt=s(Y4e);ydr=r(Cwt,"model.train()"),Cwt.forEach(t),uNe.forEach(t),xdr=i(Fa),T(j6.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),oze=i(f),Ad=n(f,"H2",{class:!0});var lWe=s(Ad);D6=n(lWe,"A",{id:!0,class:!0,href:!0});var wwt=s(D6);K4e=n(wwt,"SPAN",{});var Awt=s(K4e);T(Wy.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),$dr=i(lWe),Z4e=n(lWe,"SPAN",{});var Lwt=s(Z4e);kdr=r(Lwt,"AutoModelForVisualQuestionAnswering"),Lwt.forEach(t),lWe.forEach(t),rze=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(Hy.$$.fragment,pl),Sdr=i(pl),Ld=n(pl,"P",{});var mte=s(Ld);Rdr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),WW=n(mte,"A",{href:!0});var ywt=s(WW);Pdr=r(ywt,"from_pretrained()"),ywt.forEach(t),Bdr=r(mte," class method or the "),HW=n(mte,"A",{href:!0});var xwt=s(HW);Idr=r(xwt,"from_config()"),xwt.forEach(t),Ndr=r(mte,` class
method.`),mte.forEach(t),qdr=i(pl),Uy=n(pl,"P",{});var iWe=s(Uy);jdr=r(iWe,"This class cannot be instantiated directly using "),ebe=n(iWe,"CODE",{});var $wt=s(ebe);Ddr=r($wt,"__init__()"),$wt.forEach(t),Gdr=r(iWe," (throws an error)."),iWe.forEach(t),Odr=i(pl),Mt=n(pl,"DIV",{class:!0});var jw=s(Mt);T(Jy.$$.fragment,jw),Vdr=i(jw),obe=n(jw,"P",{});var kwt=s(obe);Xdr=r(kwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),kwt.forEach(t),zdr=i(jw),yd=n(jw,"P",{});var gte=s(yd);Qdr=r(gte,`Note:
Loading a model from its configuration file does `),rbe=n(gte,"STRONG",{});var Swt=s(rbe);Wdr=r(Swt,"not"),Swt.forEach(t),Hdr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(gte,"A",{href:!0});var Rwt=s(UW);Udr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),Jdr=r(gte," to load the model weights."),gte.forEach(t),Ydr=i(jw),T(G6.$$.fragment,jw),jw.forEach(t),Kdr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Yy.$$.fragment,Ta),Zdr=i(Ta),tbe=n(Ta,"P",{});var Pwt=s(tbe);ecr=r(Pwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Pwt.forEach(t),ocr=i(Ta),Ua=n(Ta,"P",{});var Dw=s(Ua);rcr=r(Dw,"The model class to instantiate is selected based on the "),abe=n(Dw,"CODE",{});var Bwt=s(abe);tcr=r(Bwt,"model_type"),Bwt.forEach(t),acr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),nbe=n(Dw,"CODE",{});var Iwt=s(nbe);ncr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),scr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(Dw,"CODE",{});var Nwt=s(sbe);lcr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),icr=r(Dw,":"),Dw.forEach(t),dcr=i(Ta),lbe=n(Ta,"UL",{});var qwt=s(lbe);O6=n(qwt,"LI",{});var bNe=s(O6);ibe=n(bNe,"STRONG",{});var jwt=s(ibe);ccr=r(jwt,"vilt"),jwt.forEach(t),fcr=r(bNe," \u2014 "),JW=n(bNe,"A",{href:!0});var Dwt=s(JW);mcr=r(Dwt,"ViltForQuestionAnswering"),Dwt.forEach(t),gcr=r(bNe," (ViLT model)"),bNe.forEach(t),qwt.forEach(t),hcr=i(Ta),V6=n(Ta,"P",{});var vNe=s(V6);pcr=r(vNe,"The model is set in evaluation mode by default using "),dbe=n(vNe,"CODE",{});var Gwt=s(dbe);_cr=r(Gwt,"model.eval()"),Gwt.forEach(t),ucr=r(vNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(vNe,"CODE",{});var Owt=s(cbe);bcr=r(Owt,"model.train()"),Owt.forEach(t),vNe.forEach(t),vcr=i(Ta),T(X6.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),tze=i(f),xd=n(f,"H2",{class:!0});var dWe=s(xd);z6=n(dWe,"A",{id:!0,class:!0,href:!0});var Vwt=s(z6);fbe=n(Vwt,"SPAN",{});var Xwt=s(fbe);T(Ky.$$.fragment,Xwt),Xwt.forEach(t),Vwt.forEach(t),Fcr=i(dWe),mbe=n(dWe,"SPAN",{});var zwt=s(mbe);Tcr=r(zwt,"AutoModelForAudioClassification"),zwt.forEach(t),dWe.forEach(t),aze=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Zy.$$.fragment,_l),Mcr=i(_l),$d=n(_l,"P",{});var hte=s($d);Ecr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YW=n(hte,"A",{href:!0});var Qwt=s(YW);Ccr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),wcr=r(hte," class method or the "),KW=n(hte,"A",{href:!0});var Wwt=s(KW);Acr=r(Wwt,"from_config()"),Wwt.forEach(t),Lcr=r(hte,` class
method.`),hte.forEach(t),ycr=i(_l),e8=n(_l,"P",{});var cWe=s(e8);xcr=r(cWe,"This class cannot be instantiated directly using "),gbe=n(cWe,"CODE",{});var Hwt=s(gbe);$cr=r(Hwt,"__init__()"),Hwt.forEach(t),kcr=r(cWe," (throws an error)."),cWe.forEach(t),Scr=i(_l),Et=n(_l,"DIV",{class:!0});var Gw=s(Et);T(o8.$$.fragment,Gw),Rcr=i(Gw),hbe=n(Gw,"P",{});var Uwt=s(hbe);Pcr=r(Uwt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Uwt.forEach(t),Bcr=i(Gw),kd=n(Gw,"P",{});var pte=s(kd);Icr=r(pte,`Note:
Loading a model from its configuration file does `),pbe=n(pte,"STRONG",{});var Jwt=s(pbe);Ncr=r(Jwt,"not"),Jwt.forEach(t),qcr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(pte,"A",{href:!0});var Ywt=s(ZW);jcr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),Dcr=r(pte," to load the model weights."),pte.forEach(t),Gcr=i(Gw),T(Q6.$$.fragment,Gw),Gw.forEach(t),Ocr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(r8.$$.fragment,Ma),Vcr=i(Ma),_be=n(Ma,"P",{});var Kwt=s(_be);Xcr=r(Kwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Kwt.forEach(t),zcr=i(Ma),Ja=n(Ma,"P",{});var Ow=s(Ja);Qcr=r(Ow,"The model class to instantiate is selected based on the "),ube=n(Ow,"CODE",{});var Zwt=s(ube);Wcr=r(Zwt,"model_type"),Zwt.forEach(t),Hcr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),bbe=n(Ow,"CODE",{});var eAt=s(bbe);Ucr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),Jcr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(Ow,"CODE",{});var oAt=s(vbe);Ycr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),Kcr=r(Ow,":"),Ow.forEach(t),Zcr=i(Ma),Pe=n(Ma,"UL",{});var ze=s(Pe);W6=n(ze,"LI",{});var FNe=s(W6);Fbe=n(FNe,"STRONG",{});var rAt=s(Fbe);efr=r(rAt,"data2vec-audio"),rAt.forEach(t),ofr=r(FNe," \u2014 "),eH=n(FNe,"A",{href:!0});var tAt=s(eH);rfr=r(tAt,"Data2VecAudioForSequenceClassification"),tAt.forEach(t),tfr=r(FNe," (Data2VecAudio model)"),FNe.forEach(t),afr=i(ze),H6=n(ze,"LI",{});var TNe=s(H6);Tbe=n(TNe,"STRONG",{});var aAt=s(Tbe);nfr=r(aAt,"hubert"),aAt.forEach(t),sfr=r(TNe," \u2014 "),oH=n(TNe,"A",{href:!0});var nAt=s(oH);lfr=r(nAt,"HubertForSequenceClassification"),nAt.forEach(t),ifr=r(TNe," (Hubert model)"),TNe.forEach(t),dfr=i(ze),U6=n(ze,"LI",{});var MNe=s(U6);Mbe=n(MNe,"STRONG",{});var sAt=s(Mbe);cfr=r(sAt,"sew"),sAt.forEach(t),ffr=r(MNe," \u2014 "),rH=n(MNe,"A",{href:!0});var lAt=s(rH);mfr=r(lAt,"SEWForSequenceClassification"),lAt.forEach(t),gfr=r(MNe," (SEW model)"),MNe.forEach(t),hfr=i(ze),J6=n(ze,"LI",{});var ENe=s(J6);Ebe=n(ENe,"STRONG",{});var iAt=s(Ebe);pfr=r(iAt,"sew-d"),iAt.forEach(t),_fr=r(ENe," \u2014 "),tH=n(ENe,"A",{href:!0});var dAt=s(tH);ufr=r(dAt,"SEWDForSequenceClassification"),dAt.forEach(t),bfr=r(ENe," (SEW-D model)"),ENe.forEach(t),vfr=i(ze),Y6=n(ze,"LI",{});var CNe=s(Y6);Cbe=n(CNe,"STRONG",{});var cAt=s(Cbe);Ffr=r(cAt,"unispeech"),cAt.forEach(t),Tfr=r(CNe," \u2014 "),aH=n(CNe,"A",{href:!0});var fAt=s(aH);Mfr=r(fAt,"UniSpeechForSequenceClassification"),fAt.forEach(t),Efr=r(CNe," (UniSpeech model)"),CNe.forEach(t),Cfr=i(ze),K6=n(ze,"LI",{});var wNe=s(K6);wbe=n(wNe,"STRONG",{});var mAt=s(wbe);wfr=r(mAt,"unispeech-sat"),mAt.forEach(t),Afr=r(wNe," \u2014 "),nH=n(wNe,"A",{href:!0});var gAt=s(nH);Lfr=r(gAt,"UniSpeechSatForSequenceClassification"),gAt.forEach(t),yfr=r(wNe," (UniSpeechSat model)"),wNe.forEach(t),xfr=i(ze),Z6=n(ze,"LI",{});var ANe=s(Z6);Abe=n(ANe,"STRONG",{});var hAt=s(Abe);$fr=r(hAt,"wav2vec2"),hAt.forEach(t),kfr=r(ANe," \u2014 "),sH=n(ANe,"A",{href:!0});var pAt=s(sH);Sfr=r(pAt,"Wav2Vec2ForSequenceClassification"),pAt.forEach(t),Rfr=r(ANe," (Wav2Vec2 model)"),ANe.forEach(t),Pfr=i(ze),eT=n(ze,"LI",{});var LNe=s(eT);Lbe=n(LNe,"STRONG",{});var _At=s(Lbe);Bfr=r(_At,"wav2vec2-conformer"),_At.forEach(t),Ifr=r(LNe," \u2014 "),lH=n(LNe,"A",{href:!0});var uAt=s(lH);Nfr=r(uAt,"Wav2Vec2ConformerForSequenceClassification"),uAt.forEach(t),qfr=r(LNe," (Wav2Vec2-Conformer model)"),LNe.forEach(t),jfr=i(ze),oT=n(ze,"LI",{});var yNe=s(oT);ybe=n(yNe,"STRONG",{});var bAt=s(ybe);Dfr=r(bAt,"wavlm"),bAt.forEach(t),Gfr=r(yNe," \u2014 "),iH=n(yNe,"A",{href:!0});var vAt=s(iH);Ofr=r(vAt,"WavLMForSequenceClassification"),vAt.forEach(t),Vfr=r(yNe," (WavLM model)"),yNe.forEach(t),ze.forEach(t),Xfr=i(Ma),rT=n(Ma,"P",{});var xNe=s(rT);zfr=r(xNe,"The model is set in evaluation mode by default using "),xbe=n(xNe,"CODE",{});var FAt=s(xbe);Qfr=r(FAt,"model.eval()"),FAt.forEach(t),Wfr=r(xNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(xNe,"CODE",{});var TAt=s($be);Hfr=r(TAt,"model.train()"),TAt.forEach(t),xNe.forEach(t),Ufr=i(Ma),T(tT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),nze=i(f),Sd=n(f,"H2",{class:!0});var fWe=s(Sd);aT=n(fWe,"A",{id:!0,class:!0,href:!0});var MAt=s(aT);kbe=n(MAt,"SPAN",{});var EAt=s(kbe);T(t8.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),Jfr=i(fWe),Sbe=n(fWe,"SPAN",{});var CAt=s(Sbe);Yfr=r(CAt,"AutoModelForAudioFrameClassification"),CAt.forEach(t),fWe.forEach(t),sze=i(f),Qo=n(f,"DIV",{class:!0});var ul=s(Qo);T(a8.$$.fragment,ul),Kfr=i(ul),Rd=n(ul,"P",{});var _te=s(Rd);Zfr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dH=n(_te,"A",{href:!0});var wAt=s(dH);emr=r(wAt,"from_pretrained()"),wAt.forEach(t),omr=r(_te," class method or the "),cH=n(_te,"A",{href:!0});var AAt=s(cH);rmr=r(AAt,"from_config()"),AAt.forEach(t),tmr=r(_te,` class
method.`),_te.forEach(t),amr=i(ul),n8=n(ul,"P",{});var mWe=s(n8);nmr=r(mWe,"This class cannot be instantiated directly using "),Rbe=n(mWe,"CODE",{});var LAt=s(Rbe);smr=r(LAt,"__init__()"),LAt.forEach(t),lmr=r(mWe," (throws an error)."),mWe.forEach(t),imr=i(ul),Ct=n(ul,"DIV",{class:!0});var Vw=s(Ct);T(s8.$$.fragment,Vw),dmr=i(Vw),Pbe=n(Vw,"P",{});var yAt=s(Pbe);cmr=r(yAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),yAt.forEach(t),fmr=i(Vw),Pd=n(Vw,"P",{});var ute=s(Pd);mmr=r(ute,`Note:
Loading a model from its configuration file does `),Bbe=n(ute,"STRONG",{});var xAt=s(Bbe);gmr=r(xAt,"not"),xAt.forEach(t),hmr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(ute,"A",{href:!0});var $At=s(fH);pmr=r($At,"from_pretrained()"),$At.forEach(t),_mr=r(ute," to load the model weights."),ute.forEach(t),umr=i(Vw),T(nT.$$.fragment,Vw),Vw.forEach(t),bmr=i(ul),go=n(ul,"DIV",{class:!0});var Ea=s(go);T(l8.$$.fragment,Ea),vmr=i(Ea),Ibe=n(Ea,"P",{});var kAt=s(Ibe);Fmr=r(kAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kAt.forEach(t),Tmr=i(Ea),Ya=n(Ea,"P",{});var Xw=s(Ya);Mmr=r(Xw,"The model class to instantiate is selected based on the "),Nbe=n(Xw,"CODE",{});var SAt=s(Nbe);Emr=r(SAt,"model_type"),SAt.forEach(t),Cmr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),qbe=n(Xw,"CODE",{});var RAt=s(qbe);wmr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),Amr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(Xw,"CODE",{});var PAt=s(jbe);Lmr=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),ymr=r(Xw,":"),Xw.forEach(t),xmr=i(Ea),rt=n(Ea,"UL",{});var bl=s(rt);sT=n(bl,"LI",{});var $Ne=s(sT);Dbe=n($Ne,"STRONG",{});var BAt=s(Dbe);$mr=r(BAt,"data2vec-audio"),BAt.forEach(t),kmr=r($Ne," \u2014 "),mH=n($Ne,"A",{href:!0});var IAt=s(mH);Smr=r(IAt,"Data2VecAudioForAudioFrameClassification"),IAt.forEach(t),Rmr=r($Ne," (Data2VecAudio model)"),$Ne.forEach(t),Pmr=i(bl),lT=n(bl,"LI",{});var kNe=s(lT);Gbe=n(kNe,"STRONG",{});var NAt=s(Gbe);Bmr=r(NAt,"unispeech-sat"),NAt.forEach(t),Imr=r(kNe," \u2014 "),gH=n(kNe,"A",{href:!0});var qAt=s(gH);Nmr=r(qAt,"UniSpeechSatForAudioFrameClassification"),qAt.forEach(t),qmr=r(kNe," (UniSpeechSat model)"),kNe.forEach(t),jmr=i(bl),iT=n(bl,"LI",{});var SNe=s(iT);Obe=n(SNe,"STRONG",{});var jAt=s(Obe);Dmr=r(jAt,"wav2vec2"),jAt.forEach(t),Gmr=r(SNe," \u2014 "),hH=n(SNe,"A",{href:!0});var DAt=s(hH);Omr=r(DAt,"Wav2Vec2ForAudioFrameClassification"),DAt.forEach(t),Vmr=r(SNe," (Wav2Vec2 model)"),SNe.forEach(t),Xmr=i(bl),dT=n(bl,"LI",{});var RNe=s(dT);Vbe=n(RNe,"STRONG",{});var GAt=s(Vbe);zmr=r(GAt,"wav2vec2-conformer"),GAt.forEach(t),Qmr=r(RNe," \u2014 "),pH=n(RNe,"A",{href:!0});var OAt=s(pH);Wmr=r(OAt,"Wav2Vec2ConformerForAudioFrameClassification"),OAt.forEach(t),Hmr=r(RNe," (Wav2Vec2-Conformer model)"),RNe.forEach(t),Umr=i(bl),cT=n(bl,"LI",{});var PNe=s(cT);Xbe=n(PNe,"STRONG",{});var VAt=s(Xbe);Jmr=r(VAt,"wavlm"),VAt.forEach(t),Ymr=r(PNe," \u2014 "),_H=n(PNe,"A",{href:!0});var XAt=s(_H);Kmr=r(XAt,"WavLMForAudioFrameClassification"),XAt.forEach(t),Zmr=r(PNe," (WavLM model)"),PNe.forEach(t),bl.forEach(t),egr=i(Ea),fT=n(Ea,"P",{});var BNe=s(fT);ogr=r(BNe,"The model is set in evaluation mode by default using "),zbe=n(BNe,"CODE",{});var zAt=s(zbe);rgr=r(zAt,"model.eval()"),zAt.forEach(t),tgr=r(BNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(BNe,"CODE",{});var QAt=s(Qbe);agr=r(QAt,"model.train()"),QAt.forEach(t),BNe.forEach(t),ngr=i(Ea),T(mT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),lze=i(f),Bd=n(f,"H2",{class:!0});var gWe=s(Bd);gT=n(gWe,"A",{id:!0,class:!0,href:!0});var WAt=s(gT);Wbe=n(WAt,"SPAN",{});var HAt=s(Wbe);T(i8.$$.fragment,HAt),HAt.forEach(t),WAt.forEach(t),sgr=i(gWe),Hbe=n(gWe,"SPAN",{});var UAt=s(Hbe);lgr=r(UAt,"AutoModelForCTC"),UAt.forEach(t),gWe.forEach(t),ize=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(d8.$$.fragment,vl),igr=i(vl),Id=n(vl,"P",{});var bte=s(Id);dgr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uH=n(bte,"A",{href:!0});var JAt=s(uH);cgr=r(JAt,"from_pretrained()"),JAt.forEach(t),fgr=r(bte," class method or the "),bH=n(bte,"A",{href:!0});var YAt=s(bH);mgr=r(YAt,"from_config()"),YAt.forEach(t),ggr=r(bte,` class
method.`),bte.forEach(t),hgr=i(vl),c8=n(vl,"P",{});var hWe=s(c8);pgr=r(hWe,"This class cannot be instantiated directly using "),Ube=n(hWe,"CODE",{});var KAt=s(Ube);_gr=r(KAt,"__init__()"),KAt.forEach(t),ugr=r(hWe," (throws an error)."),hWe.forEach(t),bgr=i(vl),wt=n(vl,"DIV",{class:!0});var zw=s(wt);T(f8.$$.fragment,zw),vgr=i(zw),Jbe=n(zw,"P",{});var ZAt=s(Jbe);Fgr=r(ZAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZAt.forEach(t),Tgr=i(zw),Nd=n(zw,"P",{});var vte=s(Nd);Mgr=r(vte,`Note:
Loading a model from its configuration file does `),Ybe=n(vte,"STRONG",{});var eLt=s(Ybe);Egr=r(eLt,"not"),eLt.forEach(t),Cgr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(vte,"A",{href:!0});var oLt=s(vH);wgr=r(oLt,"from_pretrained()"),oLt.forEach(t),Agr=r(vte," to load the model weights."),vte.forEach(t),Lgr=i(zw),T(hT.$$.fragment,zw),zw.forEach(t),ygr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(m8.$$.fragment,Ca),xgr=i(Ca),Kbe=n(Ca,"P",{});var rLt=s(Kbe);$gr=r(rLt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),rLt.forEach(t),kgr=i(Ca),Ka=n(Ca,"P",{});var Qw=s(Ka);Sgr=r(Qw,"The model class to instantiate is selected based on the "),Zbe=n(Qw,"CODE",{});var tLt=s(Zbe);Rgr=r(tLt,"model_type"),tLt.forEach(t),Pgr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),eve=n(Qw,"CODE",{});var aLt=s(eve);Bgr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),Igr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(Qw,"CODE",{});var nLt=s(ove);Ngr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),qgr=r(Qw,":"),Qw.forEach(t),jgr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);pT=n(Be,"LI",{});var INe=s(pT);rve=n(INe,"STRONG",{});var sLt=s(rve);Dgr=r(sLt,"data2vec-audio"),sLt.forEach(t),Ggr=r(INe," \u2014 "),FH=n(INe,"A",{href:!0});var lLt=s(FH);Ogr=r(lLt,"Data2VecAudioForCTC"),lLt.forEach(t),Vgr=r(INe," (Data2VecAudio model)"),INe.forEach(t),Xgr=i(Be),_T=n(Be,"LI",{});var NNe=s(_T);tve=n(NNe,"STRONG",{});var iLt=s(tve);zgr=r(iLt,"hubert"),iLt.forEach(t),Qgr=r(NNe," \u2014 "),TH=n(NNe,"A",{href:!0});var dLt=s(TH);Wgr=r(dLt,"HubertForCTC"),dLt.forEach(t),Hgr=r(NNe," (Hubert model)"),NNe.forEach(t),Ugr=i(Be),uT=n(Be,"LI",{});var qNe=s(uT);ave=n(qNe,"STRONG",{});var cLt=s(ave);Jgr=r(cLt,"mctct"),cLt.forEach(t),Ygr=r(qNe," \u2014 "),MH=n(qNe,"A",{href:!0});var fLt=s(MH);Kgr=r(fLt,"MCTCTForCTC"),fLt.forEach(t),Zgr=r(qNe," (M-CTC-T model)"),qNe.forEach(t),ehr=i(Be),bT=n(Be,"LI",{});var jNe=s(bT);nve=n(jNe,"STRONG",{});var mLt=s(nve);ohr=r(mLt,"sew"),mLt.forEach(t),rhr=r(jNe," \u2014 "),EH=n(jNe,"A",{href:!0});var gLt=s(EH);thr=r(gLt,"SEWForCTC"),gLt.forEach(t),ahr=r(jNe," (SEW model)"),jNe.forEach(t),nhr=i(Be),vT=n(Be,"LI",{});var DNe=s(vT);sve=n(DNe,"STRONG",{});var hLt=s(sve);shr=r(hLt,"sew-d"),hLt.forEach(t),lhr=r(DNe," \u2014 "),CH=n(DNe,"A",{href:!0});var pLt=s(CH);ihr=r(pLt,"SEWDForCTC"),pLt.forEach(t),dhr=r(DNe," (SEW-D model)"),DNe.forEach(t),chr=i(Be),FT=n(Be,"LI",{});var GNe=s(FT);lve=n(GNe,"STRONG",{});var _Lt=s(lve);fhr=r(_Lt,"unispeech"),_Lt.forEach(t),mhr=r(GNe," \u2014 "),wH=n(GNe,"A",{href:!0});var uLt=s(wH);ghr=r(uLt,"UniSpeechForCTC"),uLt.forEach(t),hhr=r(GNe," (UniSpeech model)"),GNe.forEach(t),phr=i(Be),TT=n(Be,"LI",{});var ONe=s(TT);ive=n(ONe,"STRONG",{});var bLt=s(ive);_hr=r(bLt,"unispeech-sat"),bLt.forEach(t),uhr=r(ONe," \u2014 "),AH=n(ONe,"A",{href:!0});var vLt=s(AH);bhr=r(vLt,"UniSpeechSatForCTC"),vLt.forEach(t),vhr=r(ONe," (UniSpeechSat model)"),ONe.forEach(t),Fhr=i(Be),MT=n(Be,"LI",{});var VNe=s(MT);dve=n(VNe,"STRONG",{});var FLt=s(dve);Thr=r(FLt,"wav2vec2"),FLt.forEach(t),Mhr=r(VNe," \u2014 "),LH=n(VNe,"A",{href:!0});var TLt=s(LH);Ehr=r(TLt,"Wav2Vec2ForCTC"),TLt.forEach(t),Chr=r(VNe," (Wav2Vec2 model)"),VNe.forEach(t),whr=i(Be),ET=n(Be,"LI",{});var XNe=s(ET);cve=n(XNe,"STRONG",{});var MLt=s(cve);Ahr=r(MLt,"wav2vec2-conformer"),MLt.forEach(t),Lhr=r(XNe," \u2014 "),yH=n(XNe,"A",{href:!0});var ELt=s(yH);yhr=r(ELt,"Wav2Vec2ConformerForCTC"),ELt.forEach(t),xhr=r(XNe," (Wav2Vec2-Conformer model)"),XNe.forEach(t),$hr=i(Be),CT=n(Be,"LI",{});var zNe=s(CT);fve=n(zNe,"STRONG",{});var CLt=s(fve);khr=r(CLt,"wavlm"),CLt.forEach(t),Shr=r(zNe," \u2014 "),xH=n(zNe,"A",{href:!0});var wLt=s(xH);Rhr=r(wLt,"WavLMForCTC"),wLt.forEach(t),Phr=r(zNe," (WavLM model)"),zNe.forEach(t),Be.forEach(t),Bhr=i(Ca),wT=n(Ca,"P",{});var QNe=s(wT);Ihr=r(QNe,"The model is set in evaluation mode by default using "),mve=n(QNe,"CODE",{});var ALt=s(mve);Nhr=r(ALt,"model.eval()"),ALt.forEach(t),qhr=r(QNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gve=n(QNe,"CODE",{});var LLt=s(gve);jhr=r(LLt,"model.train()"),LLt.forEach(t),QNe.forEach(t),Dhr=i(Ca),T(AT.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),dze=i(f),qd=n(f,"H2",{class:!0});var pWe=s(qd);LT=n(pWe,"A",{id:!0,class:!0,href:!0});var yLt=s(LT);hve=n(yLt,"SPAN",{});var xLt=s(hve);T(g8.$$.fragment,xLt),xLt.forEach(t),yLt.forEach(t),Ghr=i(pWe),pve=n(pWe,"SPAN",{});var $Lt=s(pve);Ohr=r($Lt,"AutoModelForSpeechSeq2Seq"),$Lt.forEach(t),pWe.forEach(t),cze=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(h8.$$.fragment,Fl),Vhr=i(Fl),jd=n(Fl,"P",{});var Fte=s(jd);Xhr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$H=n(Fte,"A",{href:!0});var kLt=s($H);zhr=r(kLt,"from_pretrained()"),kLt.forEach(t),Qhr=r(Fte," class method or the "),kH=n(Fte,"A",{href:!0});var SLt=s(kH);Whr=r(SLt,"from_config()"),SLt.forEach(t),Hhr=r(Fte,` class
method.`),Fte.forEach(t),Uhr=i(Fl),p8=n(Fl,"P",{});var _We=s(p8);Jhr=r(_We,"This class cannot be instantiated directly using "),_ve=n(_We,"CODE",{});var RLt=s(_ve);Yhr=r(RLt,"__init__()"),RLt.forEach(t),Khr=r(_We," (throws an error)."),_We.forEach(t),Zhr=i(Fl),At=n(Fl,"DIV",{class:!0});var Ww=s(At);T(_8.$$.fragment,Ww),epr=i(Ww),uve=n(Ww,"P",{});var PLt=s(uve);opr=r(PLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),PLt.forEach(t),rpr=i(Ww),Dd=n(Ww,"P",{});var Tte=s(Dd);tpr=r(Tte,`Note:
Loading a model from its configuration file does `),bve=n(Tte,"STRONG",{});var BLt=s(bve);apr=r(BLt,"not"),BLt.forEach(t),npr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(Tte,"A",{href:!0});var ILt=s(SH);spr=r(ILt,"from_pretrained()"),ILt.forEach(t),lpr=r(Tte," to load the model weights."),Tte.forEach(t),ipr=i(Ww),T(yT.$$.fragment,Ww),Ww.forEach(t),dpr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(u8.$$.fragment,wa),cpr=i(wa),vve=n(wa,"P",{});var NLt=s(vve);fpr=r(NLt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NLt.forEach(t),mpr=i(wa),Za=n(wa,"P",{});var Hw=s(Za);gpr=r(Hw,"The model class to instantiate is selected based on the "),Fve=n(Hw,"CODE",{});var qLt=s(Fve);hpr=r(qLt,"model_type"),qLt.forEach(t),ppr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Tve=n(Hw,"CODE",{});var jLt=s(Tve);_pr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),upr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(Hw,"CODE",{});var DLt=s(Mve);bpr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),vpr=r(Hw,":"),Hw.forEach(t),Fpr=i(wa),b8=n(wa,"UL",{});var uWe=s(b8);xT=n(uWe,"LI",{});var WNe=s(xT);Eve=n(WNe,"STRONG",{});var GLt=s(Eve);Tpr=r(GLt,"speech-encoder-decoder"),GLt.forEach(t),Mpr=r(WNe," \u2014 "),RH=n(WNe,"A",{href:!0});var OLt=s(RH);Epr=r(OLt,"SpeechEncoderDecoderModel"),OLt.forEach(t),Cpr=r(WNe," (Speech Encoder decoder model)"),WNe.forEach(t),wpr=i(uWe),$T=n(uWe,"LI",{});var HNe=s($T);Cve=n(HNe,"STRONG",{});var VLt=s(Cve);Apr=r(VLt,"speech_to_text"),VLt.forEach(t),Lpr=r(HNe," \u2014 "),PH=n(HNe,"A",{href:!0});var XLt=s(PH);ypr=r(XLt,"Speech2TextForConditionalGeneration"),XLt.forEach(t),xpr=r(HNe," (Speech2Text model)"),HNe.forEach(t),uWe.forEach(t),$pr=i(wa),kT=n(wa,"P",{});var UNe=s(kT);kpr=r(UNe,"The model is set in evaluation mode by default using "),wve=n(UNe,"CODE",{});var zLt=s(wve);Spr=r(zLt,"model.eval()"),zLt.forEach(t),Rpr=r(UNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=n(UNe,"CODE",{});var QLt=s(Ave);Ppr=r(QLt,"model.train()"),QLt.forEach(t),UNe.forEach(t),Bpr=i(wa),T(ST.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),fze=i(f),Gd=n(f,"H2",{class:!0});var bWe=s(Gd);RT=n(bWe,"A",{id:!0,class:!0,href:!0});var WLt=s(RT);Lve=n(WLt,"SPAN",{});var HLt=s(Lve);T(v8.$$.fragment,HLt),HLt.forEach(t),WLt.forEach(t),Ipr=i(bWe),yve=n(bWe,"SPAN",{});var ULt=s(yve);Npr=r(ULt,"AutoModelForAudioXVector"),ULt.forEach(t),bWe.forEach(t),mze=i(f),Uo=n(f,"DIV",{class:!0});var Tl=s(Uo);T(F8.$$.fragment,Tl),qpr=i(Tl),Od=n(Tl,"P",{});var Mte=s(Od);jpr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),BH=n(Mte,"A",{href:!0});var JLt=s(BH);Dpr=r(JLt,"from_pretrained()"),JLt.forEach(t),Gpr=r(Mte," class method or the "),IH=n(Mte,"A",{href:!0});var YLt=s(IH);Opr=r(YLt,"from_config()"),YLt.forEach(t),Vpr=r(Mte,` class
method.`),Mte.forEach(t),Xpr=i(Tl),T8=n(Tl,"P",{});var vWe=s(T8);zpr=r(vWe,"This class cannot be instantiated directly using "),xve=n(vWe,"CODE",{});var KLt=s(xve);Qpr=r(KLt,"__init__()"),KLt.forEach(t),Wpr=r(vWe," (throws an error)."),vWe.forEach(t),Hpr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var Uw=s(Lt);T(M8.$$.fragment,Uw),Upr=i(Uw),$ve=n(Uw,"P",{});var ZLt=s($ve);Jpr=r(ZLt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ZLt.forEach(t),Ypr=i(Uw),Vd=n(Uw,"P",{});var Ete=s(Vd);Kpr=r(Ete,`Note:
Loading a model from its configuration file does `),kve=n(Ete,"STRONG",{});var eyt=s(kve);Zpr=r(eyt,"not"),eyt.forEach(t),e_r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Ete,"A",{href:!0});var oyt=s(NH);o_r=r(oyt,"from_pretrained()"),oyt.forEach(t),r_r=r(Ete," to load the model weights."),Ete.forEach(t),t_r=i(Uw),T(PT.$$.fragment,Uw),Uw.forEach(t),a_r=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(E8.$$.fragment,Aa),n_r=i(Aa),Sve=n(Aa,"P",{});var ryt=s(Sve);s_r=r(ryt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ryt.forEach(t),l_r=i(Aa),en=n(Aa,"P",{});var Jw=s(en);i_r=r(Jw,"The model class to instantiate is selected based on the "),Rve=n(Jw,"CODE",{});var tyt=s(Rve);d_r=r(tyt,"model_type"),tyt.forEach(t),c_r=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Pve=n(Jw,"CODE",{});var ayt=s(Pve);f_r=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),m_r=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(Jw,"CODE",{});var nyt=s(Bve);g_r=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),h_r=r(Jw,":"),Jw.forEach(t),p_r=i(Aa),tt=n(Aa,"UL",{});var Ml=s(tt);BT=n(Ml,"LI",{});var JNe=s(BT);Ive=n(JNe,"STRONG",{});var syt=s(Ive);__r=r(syt,"data2vec-audio"),syt.forEach(t),u_r=r(JNe," \u2014 "),qH=n(JNe,"A",{href:!0});var lyt=s(qH);b_r=r(lyt,"Data2VecAudioForXVector"),lyt.forEach(t),v_r=r(JNe," (Data2VecAudio model)"),JNe.forEach(t),F_r=i(Ml),IT=n(Ml,"LI",{});var YNe=s(IT);Nve=n(YNe,"STRONG",{});var iyt=s(Nve);T_r=r(iyt,"unispeech-sat"),iyt.forEach(t),M_r=r(YNe," \u2014 "),jH=n(YNe,"A",{href:!0});var dyt=s(jH);E_r=r(dyt,"UniSpeechSatForXVector"),dyt.forEach(t),C_r=r(YNe," (UniSpeechSat model)"),YNe.forEach(t),w_r=i(Ml),NT=n(Ml,"LI",{});var KNe=s(NT);qve=n(KNe,"STRONG",{});var cyt=s(qve);A_r=r(cyt,"wav2vec2"),cyt.forEach(t),L_r=r(KNe," \u2014 "),DH=n(KNe,"A",{href:!0});var fyt=s(DH);y_r=r(fyt,"Wav2Vec2ForXVector"),fyt.forEach(t),x_r=r(KNe," (Wav2Vec2 model)"),KNe.forEach(t),$_r=i(Ml),qT=n(Ml,"LI",{});var ZNe=s(qT);jve=n(ZNe,"STRONG",{});var myt=s(jve);k_r=r(myt,"wav2vec2-conformer"),myt.forEach(t),S_r=r(ZNe," \u2014 "),GH=n(ZNe,"A",{href:!0});var gyt=s(GH);R_r=r(gyt,"Wav2Vec2ConformerForXVector"),gyt.forEach(t),P_r=r(ZNe," (Wav2Vec2-Conformer model)"),ZNe.forEach(t),B_r=i(Ml),jT=n(Ml,"LI",{});var eqe=s(jT);Dve=n(eqe,"STRONG",{});var hyt=s(Dve);I_r=r(hyt,"wavlm"),hyt.forEach(t),N_r=r(eqe," \u2014 "),OH=n(eqe,"A",{href:!0});var pyt=s(OH);q_r=r(pyt,"WavLMForXVector"),pyt.forEach(t),j_r=r(eqe," (WavLM model)"),eqe.forEach(t),Ml.forEach(t),D_r=i(Aa),DT=n(Aa,"P",{});var oqe=s(DT);G_r=r(oqe,"The model is set in evaluation mode by default using "),Gve=n(oqe,"CODE",{});var _yt=s(Gve);O_r=r(_yt,"model.eval()"),_yt.forEach(t),V_r=r(oqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ove=n(oqe,"CODE",{});var uyt=s(Ove);X_r=r(uyt,"model.train()"),uyt.forEach(t),oqe.forEach(t),z_r=i(Aa),T(GT.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),gze=i(f),Xd=n(f,"H2",{class:!0});var FWe=s(Xd);OT=n(FWe,"A",{id:!0,class:!0,href:!0});var byt=s(OT);Vve=n(byt,"SPAN",{});var vyt=s(Vve);T(C8.$$.fragment,vyt),vyt.forEach(t),byt.forEach(t),Q_r=i(FWe),Xve=n(FWe,"SPAN",{});var Fyt=s(Xve);W_r=r(Fyt,"AutoModelForMaskedImageModeling"),Fyt.forEach(t),FWe.forEach(t),hze=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(w8.$$.fragment,El),H_r=i(El),zd=n(El,"P",{});var Cte=s(zd);U_r=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VH=n(Cte,"A",{href:!0});var Tyt=s(VH);J_r=r(Tyt,"from_pretrained()"),Tyt.forEach(t),Y_r=r(Cte," class method or the "),XH=n(Cte,"A",{href:!0});var Myt=s(XH);K_r=r(Myt,"from_config()"),Myt.forEach(t),Z_r=r(Cte,` class
method.`),Cte.forEach(t),eur=i(El),A8=n(El,"P",{});var TWe=s(A8);our=r(TWe,"This class cannot be instantiated directly using "),zve=n(TWe,"CODE",{});var Eyt=s(zve);rur=r(Eyt,"__init__()"),Eyt.forEach(t),tur=r(TWe," (throws an error)."),TWe.forEach(t),aur=i(El),yt=n(El,"DIV",{class:!0});var Yw=s(yt);T(L8.$$.fragment,Yw),nur=i(Yw),Qve=n(Yw,"P",{});var Cyt=s(Qve);sur=r(Cyt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Cyt.forEach(t),lur=i(Yw),Qd=n(Yw,"P",{});var wte=s(Qd);iur=r(wte,`Note:
Loading a model from its configuration file does `),Wve=n(wte,"STRONG",{});var wyt=s(Wve);dur=r(wyt,"not"),wyt.forEach(t),cur=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(wte,"A",{href:!0});var Ayt=s(zH);fur=r(Ayt,"from_pretrained()"),Ayt.forEach(t),mur=r(wte," to load the model weights."),wte.forEach(t),gur=i(Yw),T(VT.$$.fragment,Yw),Yw.forEach(t),hur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(y8.$$.fragment,La),pur=i(La),Hve=n(La,"P",{});var Lyt=s(Hve);_ur=r(Lyt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Lyt.forEach(t),uur=i(La),on=n(La,"P",{});var Kw=s(on);bur=r(Kw,"The model class to instantiate is selected based on the "),Uve=n(Kw,"CODE",{});var yyt=s(Uve);vur=r(yyt,"model_type"),yyt.forEach(t),Fur=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Kw,"CODE",{});var xyt=s(Jve);Tur=r(xyt,"pretrained_model_name_or_path"),xyt.forEach(t),Mur=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Kw,"CODE",{});var $yt=s(Yve);Eur=r($yt,"pretrained_model_name_or_path"),$yt.forEach(t),Cur=r(Kw,":"),Kw.forEach(t),wur=i(La),rn=n(La,"UL",{});var Zw=s(rn);XT=n(Zw,"LI",{});var rqe=s(XT);Kve=n(rqe,"STRONG",{});var kyt=s(Kve);Aur=r(kyt,"deit"),kyt.forEach(t),Lur=r(rqe," \u2014 "),QH=n(rqe,"A",{href:!0});var Syt=s(QH);yur=r(Syt,"DeiTForMaskedImageModeling"),Syt.forEach(t),xur=r(rqe," (DeiT model)"),rqe.forEach(t),$ur=i(Zw),zT=n(Zw,"LI",{});var tqe=s(zT);Zve=n(tqe,"STRONG",{});var Ryt=s(Zve);kur=r(Ryt,"swin"),Ryt.forEach(t),Sur=r(tqe," \u2014 "),WH=n(tqe,"A",{href:!0});var Pyt=s(WH);Rur=r(Pyt,"SwinForMaskedImageModeling"),Pyt.forEach(t),Pur=r(tqe," (Swin Transformer model)"),tqe.forEach(t),Bur=i(Zw),QT=n(Zw,"LI",{});var aqe=s(QT);eFe=n(aqe,"STRONG",{});var Byt=s(eFe);Iur=r(Byt,"swinv2"),Byt.forEach(t),Nur=r(aqe," \u2014 "),HH=n(aqe,"A",{href:!0});var Iyt=s(HH);qur=r(Iyt,"Swinv2ForMaskedImageModeling"),Iyt.forEach(t),jur=r(aqe," (Swin Transformer V2 model)"),aqe.forEach(t),Dur=i(Zw),WT=n(Zw,"LI",{});var nqe=s(WT);oFe=n(nqe,"STRONG",{});var Nyt=s(oFe);Gur=r(Nyt,"vit"),Nyt.forEach(t),Our=r(nqe," \u2014 "),UH=n(nqe,"A",{href:!0});var qyt=s(UH);Vur=r(qyt,"ViTForMaskedImageModeling"),qyt.forEach(t),Xur=r(nqe," (ViT model)"),nqe.forEach(t),Zw.forEach(t),zur=i(La),HT=n(La,"P",{});var sqe=s(HT);Qur=r(sqe,"The model is set in evaluation mode by default using "),rFe=n(sqe,"CODE",{});var jyt=s(rFe);Wur=r(jyt,"model.eval()"),jyt.forEach(t),Hur=r(sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tFe=n(sqe,"CODE",{});var Dyt=s(tFe);Uur=r(Dyt,"model.train()"),Dyt.forEach(t),sqe.forEach(t),Jur=i(La),T(UT.$$.fragment,La),La.forEach(t),El.forEach(t),pze=i(f),Wd=n(f,"H2",{class:!0});var MWe=s(Wd);JT=n(MWe,"A",{id:!0,class:!0,href:!0});var Gyt=s(JT);aFe=n(Gyt,"SPAN",{});var Oyt=s(aFe);T(x8.$$.fragment,Oyt),Oyt.forEach(t),Gyt.forEach(t),Yur=i(MWe),nFe=n(MWe,"SPAN",{});var Vyt=s(nFe);Kur=r(Vyt,"AutoModelForObjectDetection"),Vyt.forEach(t),MWe.forEach(t),_ze=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T($8.$$.fragment,Cl),Zur=i(Cl),Hd=n(Cl,"P",{});var Ate=s(Hd);e1r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JH=n(Ate,"A",{href:!0});var Xyt=s(JH);o1r=r(Xyt,"from_pretrained()"),Xyt.forEach(t),r1r=r(Ate," class method or the "),YH=n(Ate,"A",{href:!0});var zyt=s(YH);t1r=r(zyt,"from_config()"),zyt.forEach(t),a1r=r(Ate,` class
method.`),Ate.forEach(t),n1r=i(Cl),k8=n(Cl,"P",{});var EWe=s(k8);s1r=r(EWe,"This class cannot be instantiated directly using "),sFe=n(EWe,"CODE",{});var Qyt=s(sFe);l1r=r(Qyt,"__init__()"),Qyt.forEach(t),i1r=r(EWe," (throws an error)."),EWe.forEach(t),d1r=i(Cl),xt=n(Cl,"DIV",{class:!0});var eA=s(xt);T(S8.$$.fragment,eA),c1r=i(eA),lFe=n(eA,"P",{});var Wyt=s(lFe);f1r=r(Wyt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wyt.forEach(t),m1r=i(eA),Ud=n(eA,"P",{});var Lte=s(Ud);g1r=r(Lte,`Note:
Loading a model from its configuration file does `),iFe=n(Lte,"STRONG",{});var Hyt=s(iFe);h1r=r(Hyt,"not"),Hyt.forEach(t),p1r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(Lte,"A",{href:!0});var Uyt=s(KH);_1r=r(Uyt,"from_pretrained()"),Uyt.forEach(t),u1r=r(Lte," to load the model weights."),Lte.forEach(t),b1r=i(eA),T(YT.$$.fragment,eA),eA.forEach(t),v1r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(R8.$$.fragment,ya),F1r=i(ya),dFe=n(ya,"P",{});var Jyt=s(dFe);T1r=r(Jyt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jyt.forEach(t),M1r=i(ya),tn=n(ya,"P",{});var oA=s(tn);E1r=r(oA,"The model class to instantiate is selected based on the "),cFe=n(oA,"CODE",{});var Yyt=s(cFe);C1r=r(Yyt,"model_type"),Yyt.forEach(t),w1r=r(oA,` property of the config object (either
passed as an argument or loaded from `),fFe=n(oA,"CODE",{});var Kyt=s(fFe);A1r=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),L1r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mFe=n(oA,"CODE",{});var Zyt=s(mFe);y1r=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),x1r=r(oA,":"),oA.forEach(t),$1r=i(ya),P8=n(ya,"UL",{});var CWe=s(P8);KT=n(CWe,"LI",{});var lqe=s(KT);gFe=n(lqe,"STRONG",{});var e8t=s(gFe);k1r=r(e8t,"detr"),e8t.forEach(t),S1r=r(lqe," \u2014 "),ZH=n(lqe,"A",{href:!0});var o8t=s(ZH);R1r=r(o8t,"DetrForObjectDetection"),o8t.forEach(t),P1r=r(lqe," (DETR model)"),lqe.forEach(t),B1r=i(CWe),ZT=n(CWe,"LI",{});var iqe=s(ZT);hFe=n(iqe,"STRONG",{});var r8t=s(hFe);I1r=r(r8t,"yolos"),r8t.forEach(t),N1r=r(iqe," \u2014 "),eU=n(iqe,"A",{href:!0});var t8t=s(eU);q1r=r(t8t,"YolosForObjectDetection"),t8t.forEach(t),j1r=r(iqe," (YOLOS model)"),iqe.forEach(t),CWe.forEach(t),D1r=i(ya),e7=n(ya,"P",{});var dqe=s(e7);G1r=r(dqe,"The model is set in evaluation mode by default using "),pFe=n(dqe,"CODE",{});var a8t=s(pFe);O1r=r(a8t,"model.eval()"),a8t.forEach(t),V1r=r(dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=n(dqe,"CODE",{});var n8t=s(_Fe);X1r=r(n8t,"model.train()"),n8t.forEach(t),dqe.forEach(t),z1r=i(ya),T(o7.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),uze=i(f),Jd=n(f,"H2",{class:!0});var wWe=s(Jd);r7=n(wWe,"A",{id:!0,class:!0,href:!0});var s8t=s(r7);uFe=n(s8t,"SPAN",{});var l8t=s(uFe);T(B8.$$.fragment,l8t),l8t.forEach(t),s8t.forEach(t),Q1r=i(wWe),bFe=n(wWe,"SPAN",{});var i8t=s(bFe);W1r=r(i8t,"AutoModelForImageSegmentation"),i8t.forEach(t),wWe.forEach(t),bze=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(I8.$$.fragment,wl),H1r=i(wl),Yd=n(wl,"P",{});var yte=s(Yd);U1r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),oU=n(yte,"A",{href:!0});var d8t=s(oU);J1r=r(d8t,"from_pretrained()"),d8t.forEach(t),Y1r=r(yte," class method or the "),rU=n(yte,"A",{href:!0});var c8t=s(rU);K1r=r(c8t,"from_config()"),c8t.forEach(t),Z1r=r(yte,` class
method.`),yte.forEach(t),e2r=i(wl),N8=n(wl,"P",{});var AWe=s(N8);o2r=r(AWe,"This class cannot be instantiated directly using "),vFe=n(AWe,"CODE",{});var f8t=s(vFe);r2r=r(f8t,"__init__()"),f8t.forEach(t),t2r=r(AWe," (throws an error)."),AWe.forEach(t),a2r=i(wl),$t=n(wl,"DIV",{class:!0});var rA=s($t);T(q8.$$.fragment,rA),n2r=i(rA),FFe=n(rA,"P",{});var m8t=s(FFe);s2r=r(m8t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),m8t.forEach(t),l2r=i(rA),Kd=n(rA,"P",{});var xte=s(Kd);i2r=r(xte,`Note:
Loading a model from its configuration file does `),TFe=n(xte,"STRONG",{});var g8t=s(TFe);d2r=r(g8t,"not"),g8t.forEach(t),c2r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(xte,"A",{href:!0});var h8t=s(tU);f2r=r(h8t,"from_pretrained()"),h8t.forEach(t),m2r=r(xte," to load the model weights."),xte.forEach(t),g2r=i(rA),T(t7.$$.fragment,rA),rA.forEach(t),h2r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(j8.$$.fragment,xa),p2r=i(xa),MFe=n(xa,"P",{});var p8t=s(MFe);_2r=r(p8t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),p8t.forEach(t),u2r=i(xa),an=n(xa,"P",{});var tA=s(an);b2r=r(tA,"The model class to instantiate is selected based on the "),EFe=n(tA,"CODE",{});var _8t=s(EFe);v2r=r(_8t,"model_type"),_8t.forEach(t),F2r=r(tA,` property of the config object (either
passed as an argument or loaded from `),CFe=n(tA,"CODE",{});var u8t=s(CFe);T2r=r(u8t,"pretrained_model_name_or_path"),u8t.forEach(t),M2r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(tA,"CODE",{});var b8t=s(wFe);E2r=r(b8t,"pretrained_model_name_or_path"),b8t.forEach(t),C2r=r(tA,":"),tA.forEach(t),w2r=i(xa),AFe=n(xa,"UL",{});var v8t=s(AFe);a7=n(v8t,"LI",{});var cqe=s(a7);LFe=n(cqe,"STRONG",{});var F8t=s(LFe);A2r=r(F8t,"detr"),F8t.forEach(t),L2r=r(cqe," \u2014 "),aU=n(cqe,"A",{href:!0});var T8t=s(aU);y2r=r(T8t,"DetrForSegmentation"),T8t.forEach(t),x2r=r(cqe," (DETR model)"),cqe.forEach(t),v8t.forEach(t),$2r=i(xa),n7=n(xa,"P",{});var fqe=s(n7);k2r=r(fqe,"The model is set in evaluation mode by default using "),yFe=n(fqe,"CODE",{});var M8t=s(yFe);S2r=r(M8t,"model.eval()"),M8t.forEach(t),R2r=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=n(fqe,"CODE",{});var E8t=s(xFe);P2r=r(E8t,"model.train()"),E8t.forEach(t),fqe.forEach(t),B2r=i(xa),T(s7.$$.fragment,xa),xa.forEach(t),wl.forEach(t),vze=i(f),Zd=n(f,"H2",{class:!0});var LWe=s(Zd);l7=n(LWe,"A",{id:!0,class:!0,href:!0});var C8t=s(l7);$Fe=n(C8t,"SPAN",{});var w8t=s($Fe);T(D8.$$.fragment,w8t),w8t.forEach(t),C8t.forEach(t),I2r=i(LWe),kFe=n(LWe,"SPAN",{});var A8t=s(kFe);N2r=r(A8t,"AutoModelForSemanticSegmentation"),A8t.forEach(t),LWe.forEach(t),Fze=i(f),Zo=n(f,"DIV",{class:!0});var Al=s(Zo);T(G8.$$.fragment,Al),q2r=i(Al),ec=n(Al,"P",{});var $te=s(ec);j2r=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nU=n($te,"A",{href:!0});var L8t=s(nU);D2r=r(L8t,"from_pretrained()"),L8t.forEach(t),G2r=r($te," class method or the "),sU=n($te,"A",{href:!0});var y8t=s(sU);O2r=r(y8t,"from_config()"),y8t.forEach(t),V2r=r($te,` class
method.`),$te.forEach(t),X2r=i(Al),O8=n(Al,"P",{});var yWe=s(O8);z2r=r(yWe,"This class cannot be instantiated directly using "),SFe=n(yWe,"CODE",{});var x8t=s(SFe);Q2r=r(x8t,"__init__()"),x8t.forEach(t),W2r=r(yWe," (throws an error)."),yWe.forEach(t),H2r=i(Al),kt=n(Al,"DIV",{class:!0});var aA=s(kt);T(V8.$$.fragment,aA),U2r=i(aA),RFe=n(aA,"P",{});var $8t=s(RFe);J2r=r($8t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$8t.forEach(t),Y2r=i(aA),oc=n(aA,"P",{});var kte=s(oc);K2r=r(kte,`Note:
Loading a model from its configuration file does `),PFe=n(kte,"STRONG",{});var k8t=s(PFe);Z2r=r(k8t,"not"),k8t.forEach(t),e4r=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(kte,"A",{href:!0});var S8t=s(lU);o4r=r(S8t,"from_pretrained()"),S8t.forEach(t),r4r=r(kte," to load the model weights."),kte.forEach(t),t4r=i(aA),T(i7.$$.fragment,aA),aA.forEach(t),a4r=i(Al),Fo=n(Al,"DIV",{class:!0});var $a=s(Fo);T(X8.$$.fragment,$a),n4r=i($a),BFe=n($a,"P",{});var R8t=s(BFe);s4r=r(R8t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),R8t.forEach(t),l4r=i($a),nn=n($a,"P",{});var nA=s(nn);i4r=r(nA,"The model class to instantiate is selected based on the "),IFe=n(nA,"CODE",{});var P8t=s(IFe);d4r=r(P8t,"model_type"),P8t.forEach(t),c4r=r(nA,` property of the config object (either
passed as an argument or loaded from `),NFe=n(nA,"CODE",{});var B8t=s(NFe);f4r=r(B8t,"pretrained_model_name_or_path"),B8t.forEach(t),m4r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(nA,"CODE",{});var I8t=s(qFe);g4r=r(I8t,"pretrained_model_name_or_path"),I8t.forEach(t),h4r=r(nA,":"),nA.forEach(t),p4r=i($a),at=n($a,"UL",{});var Ll=s(at);d7=n(Ll,"LI",{});var mqe=s(d7);jFe=n(mqe,"STRONG",{});var N8t=s(jFe);_4r=r(N8t,"beit"),N8t.forEach(t),u4r=r(mqe," \u2014 "),iU=n(mqe,"A",{href:!0});var q8t=s(iU);b4r=r(q8t,"BeitForSemanticSegmentation"),q8t.forEach(t),v4r=r(mqe," (BEiT model)"),mqe.forEach(t),F4r=i(Ll),c7=n(Ll,"LI",{});var gqe=s(c7);DFe=n(gqe,"STRONG",{});var j8t=s(DFe);T4r=r(j8t,"data2vec-vision"),j8t.forEach(t),M4r=r(gqe," \u2014 "),dU=n(gqe,"A",{href:!0});var D8t=s(dU);E4r=r(D8t,"Data2VecVisionForSemanticSegmentation"),D8t.forEach(t),C4r=r(gqe," (Data2VecVision model)"),gqe.forEach(t),w4r=i(Ll),f7=n(Ll,"LI",{});var hqe=s(f7);GFe=n(hqe,"STRONG",{});var G8t=s(GFe);A4r=r(G8t,"dpt"),G8t.forEach(t),L4r=r(hqe," \u2014 "),cU=n(hqe,"A",{href:!0});var O8t=s(cU);y4r=r(O8t,"DPTForSemanticSegmentation"),O8t.forEach(t),x4r=r(hqe," (DPT model)"),hqe.forEach(t),$4r=i(Ll),m7=n(Ll,"LI",{});var pqe=s(m7);OFe=n(pqe,"STRONG",{});var V8t=s(OFe);k4r=r(V8t,"mobilevit"),V8t.forEach(t),S4r=r(pqe," \u2014 "),fU=n(pqe,"A",{href:!0});var X8t=s(fU);R4r=r(X8t,"MobileViTForSemanticSegmentation"),X8t.forEach(t),P4r=r(pqe," (MobileViT model)"),pqe.forEach(t),B4r=i(Ll),g7=n(Ll,"LI",{});var _qe=s(g7);VFe=n(_qe,"STRONG",{});var z8t=s(VFe);I4r=r(z8t,"segformer"),z8t.forEach(t),N4r=r(_qe," \u2014 "),mU=n(_qe,"A",{href:!0});var Q8t=s(mU);q4r=r(Q8t,"SegformerForSemanticSegmentation"),Q8t.forEach(t),j4r=r(_qe," (SegFormer model)"),_qe.forEach(t),Ll.forEach(t),D4r=i($a),h7=n($a,"P",{});var uqe=s(h7);G4r=r(uqe,"The model is set in evaluation mode by default using "),XFe=n(uqe,"CODE",{});var W8t=s(XFe);O4r=r(W8t,"model.eval()"),W8t.forEach(t),V4r=r(uqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=n(uqe,"CODE",{});var H8t=s(zFe);X4r=r(H8t,"model.train()"),H8t.forEach(t),uqe.forEach(t),z4r=i($a),T(p7.$$.fragment,$a),$a.forEach(t),Al.forEach(t),Tze=i(f),rc=n(f,"H2",{class:!0});var xWe=s(rc);_7=n(xWe,"A",{id:!0,class:!0,href:!0});var U8t=s(_7);QFe=n(U8t,"SPAN",{});var J8t=s(QFe);T(z8.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),Q4r=i(xWe),WFe=n(xWe,"SPAN",{});var Y8t=s(WFe);W4r=r(Y8t,"AutoModelForInstanceSegmentation"),Y8t.forEach(t),xWe.forEach(t),Mze=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(Q8.$$.fragment,yl),H4r=i(yl),tc=n(yl,"P",{});var Ste=s(tc);U4r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gU=n(Ste,"A",{href:!0});var K8t=s(gU);J4r=r(K8t,"from_pretrained()"),K8t.forEach(t),Y4r=r(Ste," class method or the "),hU=n(Ste,"A",{href:!0});var Z8t=s(hU);K4r=r(Z8t,"from_config()"),Z8t.forEach(t),Z4r=r(Ste,` class
method.`),Ste.forEach(t),ebr=i(yl),W8=n(yl,"P",{});var $We=s(W8);obr=r($We,"This class cannot be instantiated directly using "),HFe=n($We,"CODE",{});var ext=s(HFe);rbr=r(ext,"__init__()"),ext.forEach(t),tbr=r($We," (throws an error)."),$We.forEach(t),abr=i(yl),St=n(yl,"DIV",{class:!0});var sA=s(St);T(H8.$$.fragment,sA),nbr=i(sA),UFe=n(sA,"P",{});var oxt=s(UFe);sbr=r(oxt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),oxt.forEach(t),lbr=i(sA),ac=n(sA,"P",{});var Rte=s(ac);ibr=r(Rte,`Note:
Loading a model from its configuration file does `),JFe=n(Rte,"STRONG",{});var rxt=s(JFe);dbr=r(rxt,"not"),rxt.forEach(t),cbr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(Rte,"A",{href:!0});var txt=s(pU);fbr=r(txt,"from_pretrained()"),txt.forEach(t),mbr=r(Rte," to load the model weights."),Rte.forEach(t),gbr=i(sA),T(u7.$$.fragment,sA),sA.forEach(t),hbr=i(yl),To=n(yl,"DIV",{class:!0});var ka=s(To);T(U8.$$.fragment,ka),pbr=i(ka),YFe=n(ka,"P",{});var axt=s(YFe);_br=r(axt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),axt.forEach(t),ubr=i(ka),sn=n(ka,"P",{});var lA=s(sn);bbr=r(lA,"The model class to instantiate is selected based on the "),KFe=n(lA,"CODE",{});var nxt=s(KFe);vbr=r(nxt,"model_type"),nxt.forEach(t),Fbr=r(lA,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(lA,"CODE",{});var sxt=s(ZFe);Tbr=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),Mbr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(lA,"CODE",{});var lxt=s(e6e);Ebr=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),Cbr=r(lA,":"),lA.forEach(t),wbr=i(ka),o6e=n(ka,"UL",{});var ixt=s(o6e);b7=n(ixt,"LI",{});var bqe=s(b7);r6e=n(bqe,"STRONG",{});var dxt=s(r6e);Abr=r(dxt,"maskformer"),dxt.forEach(t),Lbr=r(bqe," \u2014 "),_U=n(bqe,"A",{href:!0});var cxt=s(_U);ybr=r(cxt,"MaskFormerForInstanceSegmentation"),cxt.forEach(t),xbr=r(bqe," (MaskFormer model)"),bqe.forEach(t),ixt.forEach(t),$br=i(ka),v7=n(ka,"P",{});var vqe=s(v7);kbr=r(vqe,"The model is set in evaluation mode by default using "),t6e=n(vqe,"CODE",{});var fxt=s(t6e);Sbr=r(fxt,"model.eval()"),fxt.forEach(t),Rbr=r(vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a6e=n(vqe,"CODE",{});var mxt=s(a6e);Pbr=r(mxt,"model.train()"),mxt.forEach(t),vqe.forEach(t),Bbr=i(ka),T(F7.$$.fragment,ka),ka.forEach(t),yl.forEach(t),Eze=i(f),nc=n(f,"H2",{class:!0});var kWe=s(nc);T7=n(kWe,"A",{id:!0,class:!0,href:!0});var gxt=s(T7);n6e=n(gxt,"SPAN",{});var hxt=s(n6e);T(J8.$$.fragment,hxt),hxt.forEach(t),gxt.forEach(t),Ibr=i(kWe),s6e=n(kWe,"SPAN",{});var pxt=s(s6e);Nbr=r(pxt,"TFAutoModel"),pxt.forEach(t),kWe.forEach(t),Cze=i(f),or=n(f,"DIV",{class:!0});var xl=s(or);T(Y8.$$.fragment,xl),qbr=i(xl),sc=n(xl,"P",{});var Pte=s(sc);jbr=r(Pte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uU=n(Pte,"A",{href:!0});var _xt=s(uU);Dbr=r(_xt,"from_pretrained()"),_xt.forEach(t),Gbr=r(Pte," class method or the "),bU=n(Pte,"A",{href:!0});var uxt=s(bU);Obr=r(uxt,"from_config()"),uxt.forEach(t),Vbr=r(Pte,` class
method.`),Pte.forEach(t),Xbr=i(xl),K8=n(xl,"P",{});var SWe=s(K8);zbr=r(SWe,"This class cannot be instantiated directly using "),l6e=n(SWe,"CODE",{});var bxt=s(l6e);Qbr=r(bxt,"__init__()"),bxt.forEach(t),Wbr=r(SWe," (throws an error)."),SWe.forEach(t),Hbr=i(xl),Rt=n(xl,"DIV",{class:!0});var iA=s(Rt);T(Z8.$$.fragment,iA),Ubr=i(iA),i6e=n(iA,"P",{});var vxt=s(i6e);Jbr=r(vxt,"Instantiates one of the base model classes of the library from a configuration."),vxt.forEach(t),Ybr=i(iA),lc=n(iA,"P",{});var Bte=s(lc);Kbr=r(Bte,`Note:
Loading a model from its configuration file does `),d6e=n(Bte,"STRONG",{});var Fxt=s(d6e);Zbr=r(Fxt,"not"),Fxt.forEach(t),evr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(Bte,"A",{href:!0});var Txt=s(vU);ovr=r(Txt,"from_pretrained()"),Txt.forEach(t),rvr=r(Bte," to load the model weights."),Bte.forEach(t),tvr=i(iA),T(M7.$$.fragment,iA),iA.forEach(t),avr=i(xl),xr=n(xl,"DIV",{class:!0});var $l=s(xr);T(ex.$$.fragment,$l),nvr=i($l),c6e=n($l,"P",{});var Mxt=s(c6e);svr=r(Mxt,"Instantiate one of the base model classes of the library from a pretrained model."),Mxt.forEach(t),lvr=i($l),ln=n($l,"P",{});var dA=s(ln);ivr=r(dA,"The model class to instantiate is selected based on the "),f6e=n(dA,"CODE",{});var Ext=s(f6e);dvr=r(Ext,"model_type"),Ext.forEach(t),cvr=r(dA,` property of the config object (either
passed as an argument or loaded from `),m6e=n(dA,"CODE",{});var Cxt=s(m6e);fvr=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),mvr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(dA,"CODE",{});var wxt=s(g6e);gvr=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),hvr=r(dA,":"),dA.forEach(t),pvr=i($l),q=n($l,"UL",{});var D=s(q);E7=n(D,"LI",{});var Fqe=s(E7);h6e=n(Fqe,"STRONG",{});var Axt=s(h6e);_vr=r(Axt,"albert"),Axt.forEach(t),uvr=r(Fqe," \u2014 "),FU=n(Fqe,"A",{href:!0});var Lxt=s(FU);bvr=r(Lxt,"TFAlbertModel"),Lxt.forEach(t),vvr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),Fvr=i(D),C7=n(D,"LI",{});var Tqe=s(C7);p6e=n(Tqe,"STRONG",{});var yxt=s(p6e);Tvr=r(yxt,"bart"),yxt.forEach(t),Mvr=r(Tqe," \u2014 "),TU=n(Tqe,"A",{href:!0});var xxt=s(TU);Evr=r(xxt,"TFBartModel"),xxt.forEach(t),Cvr=r(Tqe," (BART model)"),Tqe.forEach(t),wvr=i(D),w7=n(D,"LI",{});var Mqe=s(w7);_6e=n(Mqe,"STRONG",{});var $xt=s(_6e);Avr=r($xt,"bert"),$xt.forEach(t),Lvr=r(Mqe," \u2014 "),MU=n(Mqe,"A",{href:!0});var kxt=s(MU);yvr=r(kxt,"TFBertModel"),kxt.forEach(t),xvr=r(Mqe," (BERT model)"),Mqe.forEach(t),$vr=i(D),A7=n(D,"LI",{});var Eqe=s(A7);u6e=n(Eqe,"STRONG",{});var Sxt=s(u6e);kvr=r(Sxt,"blenderbot"),Sxt.forEach(t),Svr=r(Eqe," \u2014 "),EU=n(Eqe,"A",{href:!0});var Rxt=s(EU);Rvr=r(Rxt,"TFBlenderbotModel"),Rxt.forEach(t),Pvr=r(Eqe," (Blenderbot model)"),Eqe.forEach(t),Bvr=i(D),L7=n(D,"LI",{});var Cqe=s(L7);b6e=n(Cqe,"STRONG",{});var Pxt=s(b6e);Ivr=r(Pxt,"blenderbot-small"),Pxt.forEach(t),Nvr=r(Cqe," \u2014 "),CU=n(Cqe,"A",{href:!0});var Bxt=s(CU);qvr=r(Bxt,"TFBlenderbotSmallModel"),Bxt.forEach(t),jvr=r(Cqe," (BlenderbotSmall model)"),Cqe.forEach(t),Dvr=i(D),y7=n(D,"LI",{});var wqe=s(y7);v6e=n(wqe,"STRONG",{});var Ixt=s(v6e);Gvr=r(Ixt,"camembert"),Ixt.forEach(t),Ovr=r(wqe," \u2014 "),wU=n(wqe,"A",{href:!0});var Nxt=s(wU);Vvr=r(Nxt,"TFCamembertModel"),Nxt.forEach(t),Xvr=r(wqe," (CamemBERT model)"),wqe.forEach(t),zvr=i(D),x7=n(D,"LI",{});var Aqe=s(x7);F6e=n(Aqe,"STRONG",{});var qxt=s(F6e);Qvr=r(qxt,"clip"),qxt.forEach(t),Wvr=r(Aqe," \u2014 "),AU=n(Aqe,"A",{href:!0});var jxt=s(AU);Hvr=r(jxt,"TFCLIPModel"),jxt.forEach(t),Uvr=r(Aqe," (CLIP model)"),Aqe.forEach(t),Jvr=i(D),$7=n(D,"LI",{});var Lqe=s($7);T6e=n(Lqe,"STRONG",{});var Dxt=s(T6e);Yvr=r(Dxt,"convbert"),Dxt.forEach(t),Kvr=r(Lqe," \u2014 "),LU=n(Lqe,"A",{href:!0});var Gxt=s(LU);Zvr=r(Gxt,"TFConvBertModel"),Gxt.forEach(t),eFr=r(Lqe," (ConvBERT model)"),Lqe.forEach(t),oFr=i(D),k7=n(D,"LI",{});var yqe=s(k7);M6e=n(yqe,"STRONG",{});var Oxt=s(M6e);rFr=r(Oxt,"convnext"),Oxt.forEach(t),tFr=r(yqe," \u2014 "),yU=n(yqe,"A",{href:!0});var Vxt=s(yU);aFr=r(Vxt,"TFConvNextModel"),Vxt.forEach(t),nFr=r(yqe," (ConvNeXT model)"),yqe.forEach(t),sFr=i(D),S7=n(D,"LI",{});var xqe=s(S7);E6e=n(xqe,"STRONG",{});var Xxt=s(E6e);lFr=r(Xxt,"ctrl"),Xxt.forEach(t),iFr=r(xqe," \u2014 "),xU=n(xqe,"A",{href:!0});var zxt=s(xU);dFr=r(zxt,"TFCTRLModel"),zxt.forEach(t),cFr=r(xqe," (CTRL model)"),xqe.forEach(t),fFr=i(D),R7=n(D,"LI",{});var $qe=s(R7);C6e=n($qe,"STRONG",{});var Qxt=s(C6e);mFr=r(Qxt,"data2vec-vision"),Qxt.forEach(t),gFr=r($qe," \u2014 "),$U=n($qe,"A",{href:!0});var Wxt=s($U);hFr=r(Wxt,"TFData2VecVisionModel"),Wxt.forEach(t),pFr=r($qe," (Data2VecVision model)"),$qe.forEach(t),_Fr=i(D),P7=n(D,"LI",{});var kqe=s(P7);w6e=n(kqe,"STRONG",{});var Hxt=s(w6e);uFr=r(Hxt,"deberta"),Hxt.forEach(t),bFr=r(kqe," \u2014 "),kU=n(kqe,"A",{href:!0});var Uxt=s(kU);vFr=r(Uxt,"TFDebertaModel"),Uxt.forEach(t),FFr=r(kqe," (DeBERTa model)"),kqe.forEach(t),TFr=i(D),B7=n(D,"LI",{});var Sqe=s(B7);A6e=n(Sqe,"STRONG",{});var Jxt=s(A6e);MFr=r(Jxt,"deberta-v2"),Jxt.forEach(t),EFr=r(Sqe," \u2014 "),SU=n(Sqe,"A",{href:!0});var Yxt=s(SU);CFr=r(Yxt,"TFDebertaV2Model"),Yxt.forEach(t),wFr=r(Sqe," (DeBERTa-v2 model)"),Sqe.forEach(t),AFr=i(D),I7=n(D,"LI",{});var Rqe=s(I7);L6e=n(Rqe,"STRONG",{});var Kxt=s(L6e);LFr=r(Kxt,"distilbert"),Kxt.forEach(t),yFr=r(Rqe," \u2014 "),RU=n(Rqe,"A",{href:!0});var Zxt=s(RU);xFr=r(Zxt,"TFDistilBertModel"),Zxt.forEach(t),$Fr=r(Rqe," (DistilBERT model)"),Rqe.forEach(t),kFr=i(D),N7=n(D,"LI",{});var Pqe=s(N7);y6e=n(Pqe,"STRONG",{});var e$t=s(y6e);SFr=r(e$t,"dpr"),e$t.forEach(t),RFr=r(Pqe," \u2014 "),PU=n(Pqe,"A",{href:!0});var o$t=s(PU);PFr=r(o$t,"TFDPRQuestionEncoder"),o$t.forEach(t),BFr=r(Pqe," (DPR model)"),Pqe.forEach(t),IFr=i(D),q7=n(D,"LI",{});var Bqe=s(q7);x6e=n(Bqe,"STRONG",{});var r$t=s(x6e);NFr=r(r$t,"electra"),r$t.forEach(t),qFr=r(Bqe," \u2014 "),BU=n(Bqe,"A",{href:!0});var t$t=s(BU);jFr=r(t$t,"TFElectraModel"),t$t.forEach(t),DFr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),GFr=i(D),j7=n(D,"LI",{});var Iqe=s(j7);$6e=n(Iqe,"STRONG",{});var a$t=s($6e);OFr=r(a$t,"flaubert"),a$t.forEach(t),VFr=r(Iqe," \u2014 "),IU=n(Iqe,"A",{href:!0});var n$t=s(IU);XFr=r(n$t,"TFFlaubertModel"),n$t.forEach(t),zFr=r(Iqe," (FlauBERT model)"),Iqe.forEach(t),QFr=i(D),Ys=n(D,"LI",{});var jS=s(Ys);k6e=n(jS,"STRONG",{});var s$t=s(k6e);WFr=r(s$t,"funnel"),s$t.forEach(t),HFr=r(jS," \u2014 "),NU=n(jS,"A",{href:!0});var l$t=s(NU);UFr=r(l$t,"TFFunnelModel"),l$t.forEach(t),JFr=r(jS," or "),qU=n(jS,"A",{href:!0});var i$t=s(qU);YFr=r(i$t,"TFFunnelBaseModel"),i$t.forEach(t),KFr=r(jS," (Funnel Transformer model)"),jS.forEach(t),ZFr=i(D),D7=n(D,"LI",{});var Nqe=s(D7);S6e=n(Nqe,"STRONG",{});var d$t=s(S6e);e6r=r(d$t,"gpt2"),d$t.forEach(t),o6r=r(Nqe," \u2014 "),jU=n(Nqe,"A",{href:!0});var c$t=s(jU);r6r=r(c$t,"TFGPT2Model"),c$t.forEach(t),t6r=r(Nqe," (OpenAI GPT-2 model)"),Nqe.forEach(t),a6r=i(D),G7=n(D,"LI",{});var qqe=s(G7);R6e=n(qqe,"STRONG",{});var f$t=s(R6e);n6r=r(f$t,"gptj"),f$t.forEach(t),s6r=r(qqe," \u2014 "),DU=n(qqe,"A",{href:!0});var m$t=s(DU);l6r=r(m$t,"TFGPTJModel"),m$t.forEach(t),i6r=r(qqe," (GPT-J model)"),qqe.forEach(t),d6r=i(D),O7=n(D,"LI",{});var jqe=s(O7);P6e=n(jqe,"STRONG",{});var g$t=s(P6e);c6r=r(g$t,"hubert"),g$t.forEach(t),f6r=r(jqe," \u2014 "),GU=n(jqe,"A",{href:!0});var h$t=s(GU);m6r=r(h$t,"TFHubertModel"),h$t.forEach(t),g6r=r(jqe," (Hubert model)"),jqe.forEach(t),h6r=i(D),V7=n(D,"LI",{});var Dqe=s(V7);B6e=n(Dqe,"STRONG",{});var p$t=s(B6e);p6r=r(p$t,"layoutlm"),p$t.forEach(t),_6r=r(Dqe," \u2014 "),OU=n(Dqe,"A",{href:!0});var _$t=s(OU);u6r=r(_$t,"TFLayoutLMModel"),_$t.forEach(t),b6r=r(Dqe," (LayoutLM model)"),Dqe.forEach(t),v6r=i(D),X7=n(D,"LI",{});var Gqe=s(X7);I6e=n(Gqe,"STRONG",{});var u$t=s(I6e);F6r=r(u$t,"led"),u$t.forEach(t),T6r=r(Gqe," \u2014 "),VU=n(Gqe,"A",{href:!0});var b$t=s(VU);M6r=r(b$t,"TFLEDModel"),b$t.forEach(t),E6r=r(Gqe," (LED model)"),Gqe.forEach(t),C6r=i(D),z7=n(D,"LI",{});var Oqe=s(z7);N6e=n(Oqe,"STRONG",{});var v$t=s(N6e);w6r=r(v$t,"longformer"),v$t.forEach(t),A6r=r(Oqe," \u2014 "),XU=n(Oqe,"A",{href:!0});var F$t=s(XU);L6r=r(F$t,"TFLongformerModel"),F$t.forEach(t),y6r=r(Oqe," (Longformer model)"),Oqe.forEach(t),x6r=i(D),Q7=n(D,"LI",{});var Vqe=s(Q7);q6e=n(Vqe,"STRONG",{});var T$t=s(q6e);$6r=r(T$t,"lxmert"),T$t.forEach(t),k6r=r(Vqe," \u2014 "),zU=n(Vqe,"A",{href:!0});var M$t=s(zU);S6r=r(M$t,"TFLxmertModel"),M$t.forEach(t),R6r=r(Vqe," (LXMERT model)"),Vqe.forEach(t),P6r=i(D),W7=n(D,"LI",{});var Xqe=s(W7);j6e=n(Xqe,"STRONG",{});var E$t=s(j6e);B6r=r(E$t,"marian"),E$t.forEach(t),I6r=r(Xqe," \u2014 "),QU=n(Xqe,"A",{href:!0});var C$t=s(QU);N6r=r(C$t,"TFMarianModel"),C$t.forEach(t),q6r=r(Xqe," (Marian model)"),Xqe.forEach(t),j6r=i(D),H7=n(D,"LI",{});var zqe=s(H7);D6e=n(zqe,"STRONG",{});var w$t=s(D6e);D6r=r(w$t,"mbart"),w$t.forEach(t),G6r=r(zqe," \u2014 "),WU=n(zqe,"A",{href:!0});var A$t=s(WU);O6r=r(A$t,"TFMBartModel"),A$t.forEach(t),V6r=r(zqe," (mBART model)"),zqe.forEach(t),X6r=i(D),U7=n(D,"LI",{});var Qqe=s(U7);G6e=n(Qqe,"STRONG",{});var L$t=s(G6e);z6r=r(L$t,"mobilebert"),L$t.forEach(t),Q6r=r(Qqe," \u2014 "),HU=n(Qqe,"A",{href:!0});var y$t=s(HU);W6r=r(y$t,"TFMobileBertModel"),y$t.forEach(t),H6r=r(Qqe," (MobileBERT model)"),Qqe.forEach(t),U6r=i(D),J7=n(D,"LI",{});var Wqe=s(J7);O6e=n(Wqe,"STRONG",{});var x$t=s(O6e);J6r=r(x$t,"mpnet"),x$t.forEach(t),Y6r=r(Wqe," \u2014 "),UU=n(Wqe,"A",{href:!0});var $$t=s(UU);K6r=r($$t,"TFMPNetModel"),$$t.forEach(t),Z6r=r(Wqe," (MPNet model)"),Wqe.forEach(t),eTr=i(D),Y7=n(D,"LI",{});var Hqe=s(Y7);V6e=n(Hqe,"STRONG",{});var k$t=s(V6e);oTr=r(k$t,"mt5"),k$t.forEach(t),rTr=r(Hqe," \u2014 "),JU=n(Hqe,"A",{href:!0});var S$t=s(JU);tTr=r(S$t,"TFMT5Model"),S$t.forEach(t),aTr=r(Hqe," (MT5 model)"),Hqe.forEach(t),nTr=i(D),K7=n(D,"LI",{});var Uqe=s(K7);X6e=n(Uqe,"STRONG",{});var R$t=s(X6e);sTr=r(R$t,"openai-gpt"),R$t.forEach(t),lTr=r(Uqe," \u2014 "),YU=n(Uqe,"A",{href:!0});var P$t=s(YU);iTr=r(P$t,"TFOpenAIGPTModel"),P$t.forEach(t),dTr=r(Uqe," (OpenAI GPT model)"),Uqe.forEach(t),cTr=i(D),Z7=n(D,"LI",{});var Jqe=s(Z7);z6e=n(Jqe,"STRONG",{});var B$t=s(z6e);fTr=r(B$t,"opt"),B$t.forEach(t),mTr=r(Jqe," \u2014 "),KU=n(Jqe,"A",{href:!0});var I$t=s(KU);gTr=r(I$t,"TFOPTModel"),I$t.forEach(t),hTr=r(Jqe," (OPT model)"),Jqe.forEach(t),pTr=i(D),e9=n(D,"LI",{});var Yqe=s(e9);Q6e=n(Yqe,"STRONG",{});var N$t=s(Q6e);_Tr=r(N$t,"pegasus"),N$t.forEach(t),uTr=r(Yqe," \u2014 "),ZU=n(Yqe,"A",{href:!0});var q$t=s(ZU);bTr=r(q$t,"TFPegasusModel"),q$t.forEach(t),vTr=r(Yqe," (Pegasus model)"),Yqe.forEach(t),FTr=i(D),o9=n(D,"LI",{});var Kqe=s(o9);W6e=n(Kqe,"STRONG",{});var j$t=s(W6e);TTr=r(j$t,"regnet"),j$t.forEach(t),MTr=r(Kqe," \u2014 "),eJ=n(Kqe,"A",{href:!0});var D$t=s(eJ);ETr=r(D$t,"TFRegNetModel"),D$t.forEach(t),CTr=r(Kqe," (RegNet model)"),Kqe.forEach(t),wTr=i(D),r9=n(D,"LI",{});var Zqe=s(r9);H6e=n(Zqe,"STRONG",{});var G$t=s(H6e);ATr=r(G$t,"rembert"),G$t.forEach(t),LTr=r(Zqe," \u2014 "),oJ=n(Zqe,"A",{href:!0});var O$t=s(oJ);yTr=r(O$t,"TFRemBertModel"),O$t.forEach(t),xTr=r(Zqe," (RemBERT model)"),Zqe.forEach(t),$Tr=i(D),t9=n(D,"LI",{});var eje=s(t9);U6e=n(eje,"STRONG",{});var V$t=s(U6e);kTr=r(V$t,"resnet"),V$t.forEach(t),STr=r(eje," \u2014 "),rJ=n(eje,"A",{href:!0});var X$t=s(rJ);RTr=r(X$t,"TFResNetModel"),X$t.forEach(t),PTr=r(eje," (ResNet model)"),eje.forEach(t),BTr=i(D),a9=n(D,"LI",{});var oje=s(a9);J6e=n(oje,"STRONG",{});var z$t=s(J6e);ITr=r(z$t,"roberta"),z$t.forEach(t),NTr=r(oje," \u2014 "),tJ=n(oje,"A",{href:!0});var Q$t=s(tJ);qTr=r(Q$t,"TFRobertaModel"),Q$t.forEach(t),jTr=r(oje," (RoBERTa model)"),oje.forEach(t),DTr=i(D),n9=n(D,"LI",{});var rje=s(n9);Y6e=n(rje,"STRONG",{});var W$t=s(Y6e);GTr=r(W$t,"roformer"),W$t.forEach(t),OTr=r(rje," \u2014 "),aJ=n(rje,"A",{href:!0});var H$t=s(aJ);VTr=r(H$t,"TFRoFormerModel"),H$t.forEach(t),XTr=r(rje," (RoFormer model)"),rje.forEach(t),zTr=i(D),s9=n(D,"LI",{});var tje=s(s9);K6e=n(tje,"STRONG",{});var U$t=s(K6e);QTr=r(U$t,"speech_to_text"),U$t.forEach(t),WTr=r(tje," \u2014 "),nJ=n(tje,"A",{href:!0});var J$t=s(nJ);HTr=r(J$t,"TFSpeech2TextModel"),J$t.forEach(t),UTr=r(tje," (Speech2Text model)"),tje.forEach(t),JTr=i(D),l9=n(D,"LI",{});var aje=s(l9);Z6e=n(aje,"STRONG",{});var Y$t=s(Z6e);YTr=r(Y$t,"swin"),Y$t.forEach(t),KTr=r(aje," \u2014 "),sJ=n(aje,"A",{href:!0});var K$t=s(sJ);ZTr=r(K$t,"TFSwinModel"),K$t.forEach(t),e7r=r(aje," (Swin Transformer model)"),aje.forEach(t),o7r=i(D),i9=n(D,"LI",{});var nje=s(i9);eTe=n(nje,"STRONG",{});var Z$t=s(eTe);r7r=r(Z$t,"swinv2"),Z$t.forEach(t),t7r=r(nje," \u2014 "),lJ=n(nje,"A",{href:!0});var ekt=s(lJ);a7r=r(ekt,"TFSwinv2Model"),ekt.forEach(t),n7r=r(nje," (Swin Transformer V2 model)"),nje.forEach(t),s7r=i(D),d9=n(D,"LI",{});var sje=s(d9);oTe=n(sje,"STRONG",{});var okt=s(oTe);l7r=r(okt,"t5"),okt.forEach(t),i7r=r(sje," \u2014 "),iJ=n(sje,"A",{href:!0});var rkt=s(iJ);d7r=r(rkt,"TFT5Model"),rkt.forEach(t),c7r=r(sje," (T5 model)"),sje.forEach(t),f7r=i(D),c9=n(D,"LI",{});var lje=s(c9);rTe=n(lje,"STRONG",{});var tkt=s(rTe);m7r=r(tkt,"tapas"),tkt.forEach(t),g7r=r(lje," \u2014 "),dJ=n(lje,"A",{href:!0});var akt=s(dJ);h7r=r(akt,"TFTapasModel"),akt.forEach(t),p7r=r(lje," (TAPAS model)"),lje.forEach(t),_7r=i(D),f9=n(D,"LI",{});var ije=s(f9);tTe=n(ije,"STRONG",{});var nkt=s(tTe);u7r=r(nkt,"transfo-xl"),nkt.forEach(t),b7r=r(ije," \u2014 "),cJ=n(ije,"A",{href:!0});var skt=s(cJ);v7r=r(skt,"TFTransfoXLModel"),skt.forEach(t),F7r=r(ije," (Transformer-XL model)"),ije.forEach(t),T7r=i(D),m9=n(D,"LI",{});var dje=s(m9);aTe=n(dje,"STRONG",{});var lkt=s(aTe);M7r=r(lkt,"vit"),lkt.forEach(t),E7r=r(dje," \u2014 "),fJ=n(dje,"A",{href:!0});var ikt=s(fJ);C7r=r(ikt,"TFViTModel"),ikt.forEach(t),w7r=r(dje," (ViT model)"),dje.forEach(t),A7r=i(D),g9=n(D,"LI",{});var cje=s(g9);nTe=n(cje,"STRONG",{});var dkt=s(nTe);L7r=r(dkt,"vit_mae"),dkt.forEach(t),y7r=r(cje," \u2014 "),mJ=n(cje,"A",{href:!0});var ckt=s(mJ);x7r=r(ckt,"TFViTMAEModel"),ckt.forEach(t),$7r=r(cje," (ViTMAE model)"),cje.forEach(t),k7r=i(D),h9=n(D,"LI",{});var fje=s(h9);sTe=n(fje,"STRONG",{});var fkt=s(sTe);S7r=r(fkt,"wav2vec2"),fkt.forEach(t),R7r=r(fje," \u2014 "),gJ=n(fje,"A",{href:!0});var mkt=s(gJ);P7r=r(mkt,"TFWav2Vec2Model"),mkt.forEach(t),B7r=r(fje," (Wav2Vec2 model)"),fje.forEach(t),I7r=i(D),p9=n(D,"LI",{});var mje=s(p9);lTe=n(mje,"STRONG",{});var gkt=s(lTe);N7r=r(gkt,"xlm"),gkt.forEach(t),q7r=r(mje," \u2014 "),hJ=n(mje,"A",{href:!0});var hkt=s(hJ);j7r=r(hkt,"TFXLMModel"),hkt.forEach(t),D7r=r(mje," (XLM model)"),mje.forEach(t),G7r=i(D),_9=n(D,"LI",{});var gje=s(_9);iTe=n(gje,"STRONG",{});var pkt=s(iTe);O7r=r(pkt,"xlm-roberta"),pkt.forEach(t),V7r=r(gje," \u2014 "),pJ=n(gje,"A",{href:!0});var _kt=s(pJ);X7r=r(_kt,"TFXLMRobertaModel"),_kt.forEach(t),z7r=r(gje," (XLM-RoBERTa model)"),gje.forEach(t),Q7r=i(D),u9=n(D,"LI",{});var hje=s(u9);dTe=n(hje,"STRONG",{});var ukt=s(dTe);W7r=r(ukt,"xlnet"),ukt.forEach(t),H7r=r(hje," \u2014 "),_J=n(hje,"A",{href:!0});var bkt=s(_J);U7r=r(bkt,"TFXLNetModel"),bkt.forEach(t),J7r=r(hje," (XLNet model)"),hje.forEach(t),D.forEach(t),Y7r=i($l),T(b9.$$.fragment,$l),$l.forEach(t),xl.forEach(t),wze=i(f),ic=n(f,"H2",{class:!0});var RWe=s(ic);v9=n(RWe,"A",{id:!0,class:!0,href:!0});var vkt=s(v9);cTe=n(vkt,"SPAN",{});var Fkt=s(cTe);T(ox.$$.fragment,Fkt),Fkt.forEach(t),vkt.forEach(t),K7r=i(RWe),fTe=n(RWe,"SPAN",{});var Tkt=s(fTe);Z7r=r(Tkt,"TFAutoModelForPreTraining"),Tkt.forEach(t),RWe.forEach(t),Aze=i(f),rr=n(f,"DIV",{class:!0});var kl=s(rr);T(rx.$$.fragment,kl),e9r=i(kl),dc=n(kl,"P",{});var Ite=s(dc);o9r=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uJ=n(Ite,"A",{href:!0});var Mkt=s(uJ);r9r=r(Mkt,"from_pretrained()"),Mkt.forEach(t),t9r=r(Ite," class method or the "),bJ=n(Ite,"A",{href:!0});var Ekt=s(bJ);a9r=r(Ekt,"from_config()"),Ekt.forEach(t),n9r=r(Ite,` class
method.`),Ite.forEach(t),s9r=i(kl),tx=n(kl,"P",{});var PWe=s(tx);l9r=r(PWe,"This class cannot be instantiated directly using "),mTe=n(PWe,"CODE",{});var Ckt=s(mTe);i9r=r(Ckt,"__init__()"),Ckt.forEach(t),d9r=r(PWe," (throws an error)."),PWe.forEach(t),c9r=i(kl),Pt=n(kl,"DIV",{class:!0});var cA=s(Pt);T(ax.$$.fragment,cA),f9r=i(cA),gTe=n(cA,"P",{});var wkt=s(gTe);m9r=r(wkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wkt.forEach(t),g9r=i(cA),cc=n(cA,"P",{});var Nte=s(cc);h9r=r(Nte,`Note:
Loading a model from its configuration file does `),hTe=n(Nte,"STRONG",{});var Akt=s(hTe);p9r=r(Akt,"not"),Akt.forEach(t),_9r=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(Nte,"A",{href:!0});var Lkt=s(vJ);u9r=r(Lkt,"from_pretrained()"),Lkt.forEach(t),b9r=r(Nte," to load the model weights."),Nte.forEach(t),v9r=i(cA),T(F9.$$.fragment,cA),cA.forEach(t),F9r=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(nx.$$.fragment,Sl),T9r=i(Sl),pTe=n(Sl,"P",{});var ykt=s(pTe);M9r=r(ykt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ykt.forEach(t),E9r=i(Sl),dn=n(Sl,"P",{});var fA=s(dn);C9r=r(fA,"The model class to instantiate is selected based on the "),_Te=n(fA,"CODE",{});var xkt=s(_Te);w9r=r(xkt,"model_type"),xkt.forEach(t),A9r=r(fA,` property of the config object (either
passed as an argument or loaded from `),uTe=n(fA,"CODE",{});var $kt=s(uTe);L9r=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),y9r=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(fA,"CODE",{});var kkt=s(bTe);x9r=r(kkt,"pretrained_model_name_or_path"),kkt.forEach(t),$9r=r(fA,":"),fA.forEach(t),k9r=i(Sl),se=n(Sl,"UL",{});var le=s(se);T9=n(le,"LI",{});var pje=s(T9);vTe=n(pje,"STRONG",{});var Skt=s(vTe);S9r=r(Skt,"albert"),Skt.forEach(t),R9r=r(pje," \u2014 "),FJ=n(pje,"A",{href:!0});var Rkt=s(FJ);P9r=r(Rkt,"TFAlbertForPreTraining"),Rkt.forEach(t),B9r=r(pje," (ALBERT model)"),pje.forEach(t),I9r=i(le),M9=n(le,"LI",{});var _je=s(M9);FTe=n(_je,"STRONG",{});var Pkt=s(FTe);N9r=r(Pkt,"bart"),Pkt.forEach(t),q9r=r(_je," \u2014 "),TJ=n(_je,"A",{href:!0});var Bkt=s(TJ);j9r=r(Bkt,"TFBartForConditionalGeneration"),Bkt.forEach(t),D9r=r(_je," (BART model)"),_je.forEach(t),G9r=i(le),E9=n(le,"LI",{});var uje=s(E9);TTe=n(uje,"STRONG",{});var Ikt=s(TTe);O9r=r(Ikt,"bert"),Ikt.forEach(t),V9r=r(uje," \u2014 "),MJ=n(uje,"A",{href:!0});var Nkt=s(MJ);X9r=r(Nkt,"TFBertForPreTraining"),Nkt.forEach(t),z9r=r(uje," (BERT model)"),uje.forEach(t),Q9r=i(le),C9=n(le,"LI",{});var bje=s(C9);MTe=n(bje,"STRONG",{});var qkt=s(MTe);W9r=r(qkt,"camembert"),qkt.forEach(t),H9r=r(bje," \u2014 "),EJ=n(bje,"A",{href:!0});var jkt=s(EJ);U9r=r(jkt,"TFCamembertForMaskedLM"),jkt.forEach(t),J9r=r(bje," (CamemBERT model)"),bje.forEach(t),Y9r=i(le),w9=n(le,"LI",{});var vje=s(w9);ETe=n(vje,"STRONG",{});var Dkt=s(ETe);K9r=r(Dkt,"ctrl"),Dkt.forEach(t),Z9r=r(vje," \u2014 "),CJ=n(vje,"A",{href:!0});var Gkt=s(CJ);eMr=r(Gkt,"TFCTRLLMHeadModel"),Gkt.forEach(t),oMr=r(vje," (CTRL model)"),vje.forEach(t),rMr=i(le),A9=n(le,"LI",{});var Fje=s(A9);CTe=n(Fje,"STRONG",{});var Okt=s(CTe);tMr=r(Okt,"distilbert"),Okt.forEach(t),aMr=r(Fje," \u2014 "),wJ=n(Fje,"A",{href:!0});var Vkt=s(wJ);nMr=r(Vkt,"TFDistilBertForMaskedLM"),Vkt.forEach(t),sMr=r(Fje," (DistilBERT model)"),Fje.forEach(t),lMr=i(le),L9=n(le,"LI",{});var Tje=s(L9);wTe=n(Tje,"STRONG",{});var Xkt=s(wTe);iMr=r(Xkt,"electra"),Xkt.forEach(t),dMr=r(Tje," \u2014 "),AJ=n(Tje,"A",{href:!0});var zkt=s(AJ);cMr=r(zkt,"TFElectraForPreTraining"),zkt.forEach(t),fMr=r(Tje," (ELECTRA model)"),Tje.forEach(t),mMr=i(le),y9=n(le,"LI",{});var Mje=s(y9);ATe=n(Mje,"STRONG",{});var Qkt=s(ATe);gMr=r(Qkt,"flaubert"),Qkt.forEach(t),hMr=r(Mje," \u2014 "),LJ=n(Mje,"A",{href:!0});var Wkt=s(LJ);pMr=r(Wkt,"TFFlaubertWithLMHeadModel"),Wkt.forEach(t),_Mr=r(Mje," (FlauBERT model)"),Mje.forEach(t),uMr=i(le),x9=n(le,"LI",{});var Eje=s(x9);LTe=n(Eje,"STRONG",{});var Hkt=s(LTe);bMr=r(Hkt,"funnel"),Hkt.forEach(t),vMr=r(Eje," \u2014 "),yJ=n(Eje,"A",{href:!0});var Ukt=s(yJ);FMr=r(Ukt,"TFFunnelForPreTraining"),Ukt.forEach(t),TMr=r(Eje," (Funnel Transformer model)"),Eje.forEach(t),MMr=i(le),$9=n(le,"LI",{});var Cje=s($9);yTe=n(Cje,"STRONG",{});var Jkt=s(yTe);EMr=r(Jkt,"gpt2"),Jkt.forEach(t),CMr=r(Cje," \u2014 "),xJ=n(Cje,"A",{href:!0});var Ykt=s(xJ);wMr=r(Ykt,"TFGPT2LMHeadModel"),Ykt.forEach(t),AMr=r(Cje," (OpenAI GPT-2 model)"),Cje.forEach(t),LMr=i(le),k9=n(le,"LI",{});var wje=s(k9);xTe=n(wje,"STRONG",{});var Kkt=s(xTe);yMr=r(Kkt,"layoutlm"),Kkt.forEach(t),xMr=r(wje," \u2014 "),$J=n(wje,"A",{href:!0});var Zkt=s($J);$Mr=r(Zkt,"TFLayoutLMForMaskedLM"),Zkt.forEach(t),kMr=r(wje," (LayoutLM model)"),wje.forEach(t),SMr=i(le),S9=n(le,"LI",{});var Aje=s(S9);$Te=n(Aje,"STRONG",{});var eSt=s($Te);RMr=r(eSt,"lxmert"),eSt.forEach(t),PMr=r(Aje," \u2014 "),kJ=n(Aje,"A",{href:!0});var oSt=s(kJ);BMr=r(oSt,"TFLxmertForPreTraining"),oSt.forEach(t),IMr=r(Aje," (LXMERT model)"),Aje.forEach(t),NMr=i(le),R9=n(le,"LI",{});var Lje=s(R9);kTe=n(Lje,"STRONG",{});var rSt=s(kTe);qMr=r(rSt,"mobilebert"),rSt.forEach(t),jMr=r(Lje," \u2014 "),SJ=n(Lje,"A",{href:!0});var tSt=s(SJ);DMr=r(tSt,"TFMobileBertForPreTraining"),tSt.forEach(t),GMr=r(Lje," (MobileBERT model)"),Lje.forEach(t),OMr=i(le),P9=n(le,"LI",{});var yje=s(P9);STe=n(yje,"STRONG",{});var aSt=s(STe);VMr=r(aSt,"mpnet"),aSt.forEach(t),XMr=r(yje," \u2014 "),RJ=n(yje,"A",{href:!0});var nSt=s(RJ);zMr=r(nSt,"TFMPNetForMaskedLM"),nSt.forEach(t),QMr=r(yje," (MPNet model)"),yje.forEach(t),WMr=i(le),B9=n(le,"LI",{});var xje=s(B9);RTe=n(xje,"STRONG",{});var sSt=s(RTe);HMr=r(sSt,"openai-gpt"),sSt.forEach(t),UMr=r(xje," \u2014 "),PJ=n(xje,"A",{href:!0});var lSt=s(PJ);JMr=r(lSt,"TFOpenAIGPTLMHeadModel"),lSt.forEach(t),YMr=r(xje," (OpenAI GPT model)"),xje.forEach(t),KMr=i(le),I9=n(le,"LI",{});var $je=s(I9);PTe=n($je,"STRONG",{});var iSt=s(PTe);ZMr=r(iSt,"roberta"),iSt.forEach(t),eEr=r($je," \u2014 "),BJ=n($je,"A",{href:!0});var dSt=s(BJ);oEr=r(dSt,"TFRobertaForMaskedLM"),dSt.forEach(t),rEr=r($je," (RoBERTa model)"),$je.forEach(t),tEr=i(le),N9=n(le,"LI",{});var kje=s(N9);BTe=n(kje,"STRONG",{});var cSt=s(BTe);aEr=r(cSt,"t5"),cSt.forEach(t),nEr=r(kje," \u2014 "),IJ=n(kje,"A",{href:!0});var fSt=s(IJ);sEr=r(fSt,"TFT5ForConditionalGeneration"),fSt.forEach(t),lEr=r(kje," (T5 model)"),kje.forEach(t),iEr=i(le),q9=n(le,"LI",{});var Sje=s(q9);ITe=n(Sje,"STRONG",{});var mSt=s(ITe);dEr=r(mSt,"tapas"),mSt.forEach(t),cEr=r(Sje," \u2014 "),NJ=n(Sje,"A",{href:!0});var gSt=s(NJ);fEr=r(gSt,"TFTapasForMaskedLM"),gSt.forEach(t),mEr=r(Sje," (TAPAS model)"),Sje.forEach(t),gEr=i(le),j9=n(le,"LI",{});var Rje=s(j9);NTe=n(Rje,"STRONG",{});var hSt=s(NTe);hEr=r(hSt,"transfo-xl"),hSt.forEach(t),pEr=r(Rje," \u2014 "),qJ=n(Rje,"A",{href:!0});var pSt=s(qJ);_Er=r(pSt,"TFTransfoXLLMHeadModel"),pSt.forEach(t),uEr=r(Rje," (Transformer-XL model)"),Rje.forEach(t),bEr=i(le),D9=n(le,"LI",{});var Pje=s(D9);qTe=n(Pje,"STRONG",{});var _St=s(qTe);vEr=r(_St,"vit_mae"),_St.forEach(t),FEr=r(Pje," \u2014 "),jJ=n(Pje,"A",{href:!0});var uSt=s(jJ);TEr=r(uSt,"TFViTMAEForPreTraining"),uSt.forEach(t),MEr=r(Pje," (ViTMAE model)"),Pje.forEach(t),EEr=i(le),G9=n(le,"LI",{});var Bje=s(G9);jTe=n(Bje,"STRONG",{});var bSt=s(jTe);CEr=r(bSt,"xlm"),bSt.forEach(t),wEr=r(Bje," \u2014 "),DJ=n(Bje,"A",{href:!0});var vSt=s(DJ);AEr=r(vSt,"TFXLMWithLMHeadModel"),vSt.forEach(t),LEr=r(Bje," (XLM model)"),Bje.forEach(t),yEr=i(le),O9=n(le,"LI",{});var Ije=s(O9);DTe=n(Ije,"STRONG",{});var FSt=s(DTe);xEr=r(FSt,"xlm-roberta"),FSt.forEach(t),$Er=r(Ije," \u2014 "),GJ=n(Ije,"A",{href:!0});var TSt=s(GJ);kEr=r(TSt,"TFXLMRobertaForMaskedLM"),TSt.forEach(t),SEr=r(Ije," (XLM-RoBERTa model)"),Ije.forEach(t),REr=i(le),V9=n(le,"LI",{});var Nje=s(V9);GTe=n(Nje,"STRONG",{});var MSt=s(GTe);PEr=r(MSt,"xlnet"),MSt.forEach(t),BEr=r(Nje," \u2014 "),OJ=n(Nje,"A",{href:!0});var ESt=s(OJ);IEr=r(ESt,"TFXLNetLMHeadModel"),ESt.forEach(t),NEr=r(Nje," (XLNet model)"),Nje.forEach(t),le.forEach(t),qEr=i(Sl),T(X9.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Lze=i(f),fc=n(f,"H2",{class:!0});var BWe=s(fc);z9=n(BWe,"A",{id:!0,class:!0,href:!0});var CSt=s(z9);OTe=n(CSt,"SPAN",{});var wSt=s(OTe);T(sx.$$.fragment,wSt),wSt.forEach(t),CSt.forEach(t),jEr=i(BWe),VTe=n(BWe,"SPAN",{});var ASt=s(VTe);DEr=r(ASt,"TFAutoModelForCausalLM"),ASt.forEach(t),BWe.forEach(t),yze=i(f),tr=n(f,"DIV",{class:!0});var Rl=s(tr);T(lx.$$.fragment,Rl),GEr=i(Rl),mc=n(Rl,"P",{});var qte=s(mc);OEr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VJ=n(qte,"A",{href:!0});var LSt=s(VJ);VEr=r(LSt,"from_pretrained()"),LSt.forEach(t),XEr=r(qte," class method or the "),XJ=n(qte,"A",{href:!0});var ySt=s(XJ);zEr=r(ySt,"from_config()"),ySt.forEach(t),QEr=r(qte,` class
method.`),qte.forEach(t),WEr=i(Rl),ix=n(Rl,"P",{});var IWe=s(ix);HEr=r(IWe,"This class cannot be instantiated directly using "),XTe=n(IWe,"CODE",{});var xSt=s(XTe);UEr=r(xSt,"__init__()"),xSt.forEach(t),JEr=r(IWe," (throws an error)."),IWe.forEach(t),YEr=i(Rl),Bt=n(Rl,"DIV",{class:!0});var mA=s(Bt);T(dx.$$.fragment,mA),KEr=i(mA),zTe=n(mA,"P",{});var $St=s(zTe);ZEr=r($St,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$St.forEach(t),eCr=i(mA),gc=n(mA,"P",{});var jte=s(gc);oCr=r(jte,`Note:
Loading a model from its configuration file does `),QTe=n(jte,"STRONG",{});var kSt=s(QTe);rCr=r(kSt,"not"),kSt.forEach(t),tCr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(jte,"A",{href:!0});var SSt=s(zJ);aCr=r(SSt,"from_pretrained()"),SSt.forEach(t),nCr=r(jte," to load the model weights."),jte.forEach(t),sCr=i(mA),T(Q9.$$.fragment,mA),mA.forEach(t),lCr=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(cx.$$.fragment,Pl),iCr=i(Pl),WTe=n(Pl,"P",{});var RSt=s(WTe);dCr=r(RSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RSt.forEach(t),cCr=i(Pl),cn=n(Pl,"P",{});var gA=s(cn);fCr=r(gA,"The model class to instantiate is selected based on the "),HTe=n(gA,"CODE",{});var PSt=s(HTe);mCr=r(PSt,"model_type"),PSt.forEach(t),gCr=r(gA,` property of the config object (either
passed as an argument or loaded from `),UTe=n(gA,"CODE",{});var BSt=s(UTe);hCr=r(BSt,"pretrained_model_name_or_path"),BSt.forEach(t),pCr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(gA,"CODE",{});var ISt=s(JTe);_Cr=r(ISt,"pretrained_model_name_or_path"),ISt.forEach(t),uCr=r(gA,":"),gA.forEach(t),bCr=i(Pl),Me=n(Pl,"UL",{});var Ce=s(Me);W9=n(Ce,"LI",{});var qje=s(W9);YTe=n(qje,"STRONG",{});var NSt=s(YTe);vCr=r(NSt,"bert"),NSt.forEach(t),FCr=r(qje," \u2014 "),QJ=n(qje,"A",{href:!0});var qSt=s(QJ);TCr=r(qSt,"TFBertLMHeadModel"),qSt.forEach(t),MCr=r(qje," (BERT model)"),qje.forEach(t),ECr=i(Ce),H9=n(Ce,"LI",{});var jje=s(H9);KTe=n(jje,"STRONG",{});var jSt=s(KTe);CCr=r(jSt,"camembert"),jSt.forEach(t),wCr=r(jje," \u2014 "),WJ=n(jje,"A",{href:!0});var DSt=s(WJ);ACr=r(DSt,"TFCamembertForCausalLM"),DSt.forEach(t),LCr=r(jje," (CamemBERT model)"),jje.forEach(t),yCr=i(Ce),U9=n(Ce,"LI",{});var Dje=s(U9);ZTe=n(Dje,"STRONG",{});var GSt=s(ZTe);xCr=r(GSt,"ctrl"),GSt.forEach(t),$Cr=r(Dje," \u2014 "),HJ=n(Dje,"A",{href:!0});var OSt=s(HJ);kCr=r(OSt,"TFCTRLLMHeadModel"),OSt.forEach(t),SCr=r(Dje," (CTRL model)"),Dje.forEach(t),RCr=i(Ce),J9=n(Ce,"LI",{});var Gje=s(J9);e7e=n(Gje,"STRONG",{});var VSt=s(e7e);PCr=r(VSt,"gpt2"),VSt.forEach(t),BCr=r(Gje," \u2014 "),UJ=n(Gje,"A",{href:!0});var XSt=s(UJ);ICr=r(XSt,"TFGPT2LMHeadModel"),XSt.forEach(t),NCr=r(Gje," (OpenAI GPT-2 model)"),Gje.forEach(t),qCr=i(Ce),Y9=n(Ce,"LI",{});var Oje=s(Y9);o7e=n(Oje,"STRONG",{});var zSt=s(o7e);jCr=r(zSt,"gptj"),zSt.forEach(t),DCr=r(Oje," \u2014 "),JJ=n(Oje,"A",{href:!0});var QSt=s(JJ);GCr=r(QSt,"TFGPTJForCausalLM"),QSt.forEach(t),OCr=r(Oje," (GPT-J model)"),Oje.forEach(t),VCr=i(Ce),K9=n(Ce,"LI",{});var Vje=s(K9);r7e=n(Vje,"STRONG",{});var WSt=s(r7e);XCr=r(WSt,"openai-gpt"),WSt.forEach(t),zCr=r(Vje," \u2014 "),YJ=n(Vje,"A",{href:!0});var HSt=s(YJ);QCr=r(HSt,"TFOpenAIGPTLMHeadModel"),HSt.forEach(t),WCr=r(Vje," (OpenAI GPT model)"),Vje.forEach(t),HCr=i(Ce),Z9=n(Ce,"LI",{});var Xje=s(Z9);t7e=n(Xje,"STRONG",{});var USt=s(t7e);UCr=r(USt,"opt"),USt.forEach(t),JCr=r(Xje," \u2014 "),KJ=n(Xje,"A",{href:!0});var JSt=s(KJ);YCr=r(JSt,"TFOPTForCausalLM"),JSt.forEach(t),KCr=r(Xje," (OPT model)"),Xje.forEach(t),ZCr=i(Ce),eM=n(Ce,"LI",{});var zje=s(eM);a7e=n(zje,"STRONG",{});var YSt=s(a7e);e3r=r(YSt,"rembert"),YSt.forEach(t),o3r=r(zje," \u2014 "),ZJ=n(zje,"A",{href:!0});var KSt=s(ZJ);r3r=r(KSt,"TFRemBertForCausalLM"),KSt.forEach(t),t3r=r(zje," (RemBERT model)"),zje.forEach(t),a3r=i(Ce),oM=n(Ce,"LI",{});var Qje=s(oM);n7e=n(Qje,"STRONG",{});var ZSt=s(n7e);n3r=r(ZSt,"roberta"),ZSt.forEach(t),s3r=r(Qje," \u2014 "),eY=n(Qje,"A",{href:!0});var eRt=s(eY);l3r=r(eRt,"TFRobertaForCausalLM"),eRt.forEach(t),i3r=r(Qje," (RoBERTa model)"),Qje.forEach(t),d3r=i(Ce),rM=n(Ce,"LI",{});var Wje=s(rM);s7e=n(Wje,"STRONG",{});var oRt=s(s7e);c3r=r(oRt,"roformer"),oRt.forEach(t),f3r=r(Wje," \u2014 "),oY=n(Wje,"A",{href:!0});var rRt=s(oY);m3r=r(rRt,"TFRoFormerForCausalLM"),rRt.forEach(t),g3r=r(Wje," (RoFormer model)"),Wje.forEach(t),h3r=i(Ce),tM=n(Ce,"LI",{});var Hje=s(tM);l7e=n(Hje,"STRONG",{});var tRt=s(l7e);p3r=r(tRt,"transfo-xl"),tRt.forEach(t),_3r=r(Hje," \u2014 "),rY=n(Hje,"A",{href:!0});var aRt=s(rY);u3r=r(aRt,"TFTransfoXLLMHeadModel"),aRt.forEach(t),b3r=r(Hje," (Transformer-XL model)"),Hje.forEach(t),v3r=i(Ce),aM=n(Ce,"LI",{});var Uje=s(aM);i7e=n(Uje,"STRONG",{});var nRt=s(i7e);F3r=r(nRt,"xlm"),nRt.forEach(t),T3r=r(Uje," \u2014 "),tY=n(Uje,"A",{href:!0});var sRt=s(tY);M3r=r(sRt,"TFXLMWithLMHeadModel"),sRt.forEach(t),E3r=r(Uje," (XLM model)"),Uje.forEach(t),C3r=i(Ce),nM=n(Ce,"LI",{});var Jje=s(nM);d7e=n(Jje,"STRONG",{});var lRt=s(d7e);w3r=r(lRt,"xlnet"),lRt.forEach(t),A3r=r(Jje," \u2014 "),aY=n(Jje,"A",{href:!0});var iRt=s(aY);L3r=r(iRt,"TFXLNetLMHeadModel"),iRt.forEach(t),y3r=r(Jje," (XLNet model)"),Jje.forEach(t),Ce.forEach(t),x3r=i(Pl),T(sM.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),xze=i(f),hc=n(f,"H2",{class:!0});var NWe=s(hc);lM=n(NWe,"A",{id:!0,class:!0,href:!0});var dRt=s(lM);c7e=n(dRt,"SPAN",{});var cRt=s(c7e);T(fx.$$.fragment,cRt),cRt.forEach(t),dRt.forEach(t),$3r=i(NWe),f7e=n(NWe,"SPAN",{});var fRt=s(f7e);k3r=r(fRt,"TFAutoModelForImageClassification"),fRt.forEach(t),NWe.forEach(t),$ze=i(f),ar=n(f,"DIV",{class:!0});var Bl=s(ar);T(mx.$$.fragment,Bl),S3r=i(Bl),pc=n(Bl,"P",{});var Dte=s(pc);R3r=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nY=n(Dte,"A",{href:!0});var mRt=s(nY);P3r=r(mRt,"from_pretrained()"),mRt.forEach(t),B3r=r(Dte," class method or the "),sY=n(Dte,"A",{href:!0});var gRt=s(sY);I3r=r(gRt,"from_config()"),gRt.forEach(t),N3r=r(Dte,` class
method.`),Dte.forEach(t),q3r=i(Bl),gx=n(Bl,"P",{});var qWe=s(gx);j3r=r(qWe,"This class cannot be instantiated directly using "),m7e=n(qWe,"CODE",{});var hRt=s(m7e);D3r=r(hRt,"__init__()"),hRt.forEach(t),G3r=r(qWe," (throws an error)."),qWe.forEach(t),O3r=i(Bl),It=n(Bl,"DIV",{class:!0});var hA=s(It);T(hx.$$.fragment,hA),V3r=i(hA),g7e=n(hA,"P",{});var pRt=s(g7e);X3r=r(pRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pRt.forEach(t),z3r=i(hA),_c=n(hA,"P",{});var Gte=s(_c);Q3r=r(Gte,`Note:
Loading a model from its configuration file does `),h7e=n(Gte,"STRONG",{});var _Rt=s(h7e);W3r=r(_Rt,"not"),_Rt.forEach(t),H3r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(Gte,"A",{href:!0});var uRt=s(lY);U3r=r(uRt,"from_pretrained()"),uRt.forEach(t),J3r=r(Gte," to load the model weights."),Gte.forEach(t),Y3r=i(hA),T(iM.$$.fragment,hA),hA.forEach(t),K3r=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(px.$$.fragment,Il),Z3r=i(Il),p7e=n(Il,"P",{});var bRt=s(p7e);e5r=r(bRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bRt.forEach(t),o5r=i(Il),fn=n(Il,"P",{});var pA=s(fn);r5r=r(pA,"The model class to instantiate is selected based on the "),_7e=n(pA,"CODE",{});var vRt=s(_7e);t5r=r(vRt,"model_type"),vRt.forEach(t),a5r=r(pA,` property of the config object (either
passed as an argument or loaded from `),u7e=n(pA,"CODE",{});var FRt=s(u7e);n5r=r(FRt,"pretrained_model_name_or_path"),FRt.forEach(t),s5r=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(pA,"CODE",{});var TRt=s(b7e);l5r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),i5r=r(pA,":"),pA.forEach(t),d5r=i(Il),Qe=n(Il,"UL",{});var ot=s(Qe);dM=n(ot,"LI",{});var Yje=s(dM);v7e=n(Yje,"STRONG",{});var MRt=s(v7e);c5r=r(MRt,"convnext"),MRt.forEach(t),f5r=r(Yje," \u2014 "),iY=n(Yje,"A",{href:!0});var ERt=s(iY);m5r=r(ERt,"TFConvNextForImageClassification"),ERt.forEach(t),g5r=r(Yje," (ConvNeXT model)"),Yje.forEach(t),h5r=i(ot),cM=n(ot,"LI",{});var Kje=s(cM);F7e=n(Kje,"STRONG",{});var CRt=s(F7e);p5r=r(CRt,"data2vec-vision"),CRt.forEach(t),_5r=r(Kje," \u2014 "),dY=n(Kje,"A",{href:!0});var wRt=s(dY);u5r=r(wRt,"TFData2VecVisionForImageClassification"),wRt.forEach(t),b5r=r(Kje," (Data2VecVision model)"),Kje.forEach(t),v5r=i(ot),fM=n(ot,"LI",{});var Zje=s(fM);T7e=n(Zje,"STRONG",{});var ARt=s(T7e);F5r=r(ARt,"regnet"),ARt.forEach(t),T5r=r(Zje," \u2014 "),cY=n(Zje,"A",{href:!0});var LRt=s(cY);M5r=r(LRt,"TFRegNetForImageClassification"),LRt.forEach(t),E5r=r(Zje," (RegNet model)"),Zje.forEach(t),C5r=i(ot),mM=n(ot,"LI",{});var eDe=s(mM);M7e=n(eDe,"STRONG",{});var yRt=s(M7e);w5r=r(yRt,"resnet"),yRt.forEach(t),A5r=r(eDe," \u2014 "),fY=n(eDe,"A",{href:!0});var xRt=s(fY);L5r=r(xRt,"TFResNetForImageClassification"),xRt.forEach(t),y5r=r(eDe," (ResNet model)"),eDe.forEach(t),x5r=i(ot),gM=n(ot,"LI",{});var oDe=s(gM);E7e=n(oDe,"STRONG",{});var $Rt=s(E7e);$5r=r($Rt,"swin"),$Rt.forEach(t),k5r=r(oDe," \u2014 "),mY=n(oDe,"A",{href:!0});var kRt=s(mY);S5r=r(kRt,"TFSwinForImageClassification"),kRt.forEach(t),R5r=r(oDe," (Swin Transformer model)"),oDe.forEach(t),P5r=i(ot),hM=n(ot,"LI",{});var rDe=s(hM);C7e=n(rDe,"STRONG",{});var SRt=s(C7e);B5r=r(SRt,"swinv2"),SRt.forEach(t),I5r=r(rDe," \u2014 "),gY=n(rDe,"A",{href:!0});var RRt=s(gY);N5r=r(RRt,"TFSwinv2ForImageClassification"),RRt.forEach(t),q5r=r(rDe," (Swin Transformer V2 model)"),rDe.forEach(t),j5r=i(ot),pM=n(ot,"LI",{});var tDe=s(pM);w7e=n(tDe,"STRONG",{});var PRt=s(w7e);D5r=r(PRt,"vit"),PRt.forEach(t),G5r=r(tDe," \u2014 "),hY=n(tDe,"A",{href:!0});var BRt=s(hY);O5r=r(BRt,"TFViTForImageClassification"),BRt.forEach(t),V5r=r(tDe," (ViT model)"),tDe.forEach(t),ot.forEach(t),X5r=i(Il),T(_M.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),kze=i(f),uc=n(f,"H2",{class:!0});var jWe=s(uc);uM=n(jWe,"A",{id:!0,class:!0,href:!0});var IRt=s(uM);A7e=n(IRt,"SPAN",{});var NRt=s(A7e);T(_x.$$.fragment,NRt),NRt.forEach(t),IRt.forEach(t),z5r=i(jWe),L7e=n(jWe,"SPAN",{});var qRt=s(L7e);Q5r=r(qRt,"TFAutoModelForMaskedLM"),qRt.forEach(t),jWe.forEach(t),Sze=i(f),nr=n(f,"DIV",{class:!0});var Nl=s(nr);T(ux.$$.fragment,Nl),W5r=i(Nl),bc=n(Nl,"P",{});var Ote=s(bc);H5r=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pY=n(Ote,"A",{href:!0});var jRt=s(pY);U5r=r(jRt,"from_pretrained()"),jRt.forEach(t),J5r=r(Ote," class method or the "),_Y=n(Ote,"A",{href:!0});var DRt=s(_Y);Y5r=r(DRt,"from_config()"),DRt.forEach(t),K5r=r(Ote,` class
method.`),Ote.forEach(t),Z5r=i(Nl),bx=n(Nl,"P",{});var DWe=s(bx);e0r=r(DWe,"This class cannot be instantiated directly using "),y7e=n(DWe,"CODE",{});var GRt=s(y7e);o0r=r(GRt,"__init__()"),GRt.forEach(t),r0r=r(DWe," (throws an error)."),DWe.forEach(t),t0r=i(Nl),Nt=n(Nl,"DIV",{class:!0});var _A=s(Nt);T(vx.$$.fragment,_A),a0r=i(_A),x7e=n(_A,"P",{});var ORt=s(x7e);n0r=r(ORt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ORt.forEach(t),s0r=i(_A),vc=n(_A,"P",{});var Vte=s(vc);l0r=r(Vte,`Note:
Loading a model from its configuration file does `),$7e=n(Vte,"STRONG",{});var VRt=s($7e);i0r=r(VRt,"not"),VRt.forEach(t),d0r=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(Vte,"A",{href:!0});var XRt=s(uY);c0r=r(XRt,"from_pretrained()"),XRt.forEach(t),f0r=r(Vte," to load the model weights."),Vte.forEach(t),m0r=i(_A),T(bM.$$.fragment,_A),_A.forEach(t),g0r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(Fx.$$.fragment,ql),h0r=i(ql),k7e=n(ql,"P",{});var zRt=s(k7e);p0r=r(zRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zRt.forEach(t),_0r=i(ql),mn=n(ql,"P",{});var uA=s(mn);u0r=r(uA,"The model class to instantiate is selected based on the "),S7e=n(uA,"CODE",{});var QRt=s(S7e);b0r=r(QRt,"model_type"),QRt.forEach(t),v0r=r(uA,` property of the config object (either
passed as an argument or loaded from `),R7e=n(uA,"CODE",{});var WRt=s(R7e);F0r=r(WRt,"pretrained_model_name_or_path"),WRt.forEach(t),T0r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(uA,"CODE",{});var HRt=s(P7e);M0r=r(HRt,"pretrained_model_name_or_path"),HRt.forEach(t),E0r=r(uA,":"),uA.forEach(t),C0r=i(ql),ie=n(ql,"UL",{});var fe=s(ie);vM=n(fe,"LI",{});var aDe=s(vM);B7e=n(aDe,"STRONG",{});var URt=s(B7e);w0r=r(URt,"albert"),URt.forEach(t),A0r=r(aDe," \u2014 "),bY=n(aDe,"A",{href:!0});var JRt=s(bY);L0r=r(JRt,"TFAlbertForMaskedLM"),JRt.forEach(t),y0r=r(aDe," (ALBERT model)"),aDe.forEach(t),x0r=i(fe),FM=n(fe,"LI",{});var nDe=s(FM);I7e=n(nDe,"STRONG",{});var YRt=s(I7e);$0r=r(YRt,"bert"),YRt.forEach(t),k0r=r(nDe," \u2014 "),vY=n(nDe,"A",{href:!0});var KRt=s(vY);S0r=r(KRt,"TFBertForMaskedLM"),KRt.forEach(t),R0r=r(nDe," (BERT model)"),nDe.forEach(t),P0r=i(fe),TM=n(fe,"LI",{});var sDe=s(TM);N7e=n(sDe,"STRONG",{});var ZRt=s(N7e);B0r=r(ZRt,"camembert"),ZRt.forEach(t),I0r=r(sDe," \u2014 "),FY=n(sDe,"A",{href:!0});var ePt=s(FY);N0r=r(ePt,"TFCamembertForMaskedLM"),ePt.forEach(t),q0r=r(sDe," (CamemBERT model)"),sDe.forEach(t),j0r=i(fe),MM=n(fe,"LI",{});var lDe=s(MM);q7e=n(lDe,"STRONG",{});var oPt=s(q7e);D0r=r(oPt,"convbert"),oPt.forEach(t),G0r=r(lDe," \u2014 "),TY=n(lDe,"A",{href:!0});var rPt=s(TY);O0r=r(rPt,"TFConvBertForMaskedLM"),rPt.forEach(t),V0r=r(lDe," (ConvBERT model)"),lDe.forEach(t),X0r=i(fe),EM=n(fe,"LI",{});var iDe=s(EM);j7e=n(iDe,"STRONG",{});var tPt=s(j7e);z0r=r(tPt,"deberta"),tPt.forEach(t),Q0r=r(iDe," \u2014 "),MY=n(iDe,"A",{href:!0});var aPt=s(MY);W0r=r(aPt,"TFDebertaForMaskedLM"),aPt.forEach(t),H0r=r(iDe," (DeBERTa model)"),iDe.forEach(t),U0r=i(fe),CM=n(fe,"LI",{});var dDe=s(CM);D7e=n(dDe,"STRONG",{});var nPt=s(D7e);J0r=r(nPt,"deberta-v2"),nPt.forEach(t),Y0r=r(dDe," \u2014 "),EY=n(dDe,"A",{href:!0});var sPt=s(EY);K0r=r(sPt,"TFDebertaV2ForMaskedLM"),sPt.forEach(t),Z0r=r(dDe," (DeBERTa-v2 model)"),dDe.forEach(t),ewr=i(fe),wM=n(fe,"LI",{});var cDe=s(wM);G7e=n(cDe,"STRONG",{});var lPt=s(G7e);owr=r(lPt,"distilbert"),lPt.forEach(t),rwr=r(cDe," \u2014 "),CY=n(cDe,"A",{href:!0});var iPt=s(CY);twr=r(iPt,"TFDistilBertForMaskedLM"),iPt.forEach(t),awr=r(cDe," (DistilBERT model)"),cDe.forEach(t),nwr=i(fe),AM=n(fe,"LI",{});var fDe=s(AM);O7e=n(fDe,"STRONG",{});var dPt=s(O7e);swr=r(dPt,"electra"),dPt.forEach(t),lwr=r(fDe," \u2014 "),wY=n(fDe,"A",{href:!0});var cPt=s(wY);iwr=r(cPt,"TFElectraForMaskedLM"),cPt.forEach(t),dwr=r(fDe," (ELECTRA model)"),fDe.forEach(t),cwr=i(fe),LM=n(fe,"LI",{});var mDe=s(LM);V7e=n(mDe,"STRONG",{});var fPt=s(V7e);fwr=r(fPt,"flaubert"),fPt.forEach(t),mwr=r(mDe," \u2014 "),AY=n(mDe,"A",{href:!0});var mPt=s(AY);gwr=r(mPt,"TFFlaubertWithLMHeadModel"),mPt.forEach(t),hwr=r(mDe," (FlauBERT model)"),mDe.forEach(t),pwr=i(fe),yM=n(fe,"LI",{});var gDe=s(yM);X7e=n(gDe,"STRONG",{});var gPt=s(X7e);_wr=r(gPt,"funnel"),gPt.forEach(t),uwr=r(gDe," \u2014 "),LY=n(gDe,"A",{href:!0});var hPt=s(LY);bwr=r(hPt,"TFFunnelForMaskedLM"),hPt.forEach(t),vwr=r(gDe," (Funnel Transformer model)"),gDe.forEach(t),Fwr=i(fe),xM=n(fe,"LI",{});var hDe=s(xM);z7e=n(hDe,"STRONG",{});var pPt=s(z7e);Twr=r(pPt,"layoutlm"),pPt.forEach(t),Mwr=r(hDe," \u2014 "),yY=n(hDe,"A",{href:!0});var _Pt=s(yY);Ewr=r(_Pt,"TFLayoutLMForMaskedLM"),_Pt.forEach(t),Cwr=r(hDe," (LayoutLM model)"),hDe.forEach(t),wwr=i(fe),$M=n(fe,"LI",{});var pDe=s($M);Q7e=n(pDe,"STRONG",{});var uPt=s(Q7e);Awr=r(uPt,"longformer"),uPt.forEach(t),Lwr=r(pDe," \u2014 "),xY=n(pDe,"A",{href:!0});var bPt=s(xY);ywr=r(bPt,"TFLongformerForMaskedLM"),bPt.forEach(t),xwr=r(pDe," (Longformer model)"),pDe.forEach(t),$wr=i(fe),kM=n(fe,"LI",{});var _De=s(kM);W7e=n(_De,"STRONG",{});var vPt=s(W7e);kwr=r(vPt,"mobilebert"),vPt.forEach(t),Swr=r(_De," \u2014 "),$Y=n(_De,"A",{href:!0});var FPt=s($Y);Rwr=r(FPt,"TFMobileBertForMaskedLM"),FPt.forEach(t),Pwr=r(_De," (MobileBERT model)"),_De.forEach(t),Bwr=i(fe),SM=n(fe,"LI",{});var uDe=s(SM);H7e=n(uDe,"STRONG",{});var TPt=s(H7e);Iwr=r(TPt,"mpnet"),TPt.forEach(t),Nwr=r(uDe," \u2014 "),kY=n(uDe,"A",{href:!0});var MPt=s(kY);qwr=r(MPt,"TFMPNetForMaskedLM"),MPt.forEach(t),jwr=r(uDe," (MPNet model)"),uDe.forEach(t),Dwr=i(fe),RM=n(fe,"LI",{});var bDe=s(RM);U7e=n(bDe,"STRONG",{});var EPt=s(U7e);Gwr=r(EPt,"rembert"),EPt.forEach(t),Owr=r(bDe," \u2014 "),SY=n(bDe,"A",{href:!0});var CPt=s(SY);Vwr=r(CPt,"TFRemBertForMaskedLM"),CPt.forEach(t),Xwr=r(bDe," (RemBERT model)"),bDe.forEach(t),zwr=i(fe),PM=n(fe,"LI",{});var vDe=s(PM);J7e=n(vDe,"STRONG",{});var wPt=s(J7e);Qwr=r(wPt,"roberta"),wPt.forEach(t),Wwr=r(vDe," \u2014 "),RY=n(vDe,"A",{href:!0});var APt=s(RY);Hwr=r(APt,"TFRobertaForMaskedLM"),APt.forEach(t),Uwr=r(vDe," (RoBERTa model)"),vDe.forEach(t),Jwr=i(fe),BM=n(fe,"LI",{});var FDe=s(BM);Y7e=n(FDe,"STRONG",{});var LPt=s(Y7e);Ywr=r(LPt,"roformer"),LPt.forEach(t),Kwr=r(FDe," \u2014 "),PY=n(FDe,"A",{href:!0});var yPt=s(PY);Zwr=r(yPt,"TFRoFormerForMaskedLM"),yPt.forEach(t),eAr=r(FDe," (RoFormer model)"),FDe.forEach(t),oAr=i(fe),IM=n(fe,"LI",{});var TDe=s(IM);K7e=n(TDe,"STRONG",{});var xPt=s(K7e);rAr=r(xPt,"tapas"),xPt.forEach(t),tAr=r(TDe," \u2014 "),BY=n(TDe,"A",{href:!0});var $Pt=s(BY);aAr=r($Pt,"TFTapasForMaskedLM"),$Pt.forEach(t),nAr=r(TDe," (TAPAS model)"),TDe.forEach(t),sAr=i(fe),NM=n(fe,"LI",{});var MDe=s(NM);Z7e=n(MDe,"STRONG",{});var kPt=s(Z7e);lAr=r(kPt,"xlm"),kPt.forEach(t),iAr=r(MDe," \u2014 "),IY=n(MDe,"A",{href:!0});var SPt=s(IY);dAr=r(SPt,"TFXLMWithLMHeadModel"),SPt.forEach(t),cAr=r(MDe," (XLM model)"),MDe.forEach(t),fAr=i(fe),qM=n(fe,"LI",{});var EDe=s(qM);e9e=n(EDe,"STRONG",{});var RPt=s(e9e);mAr=r(RPt,"xlm-roberta"),RPt.forEach(t),gAr=r(EDe," \u2014 "),NY=n(EDe,"A",{href:!0});var PPt=s(NY);hAr=r(PPt,"TFXLMRobertaForMaskedLM"),PPt.forEach(t),pAr=r(EDe," (XLM-RoBERTa model)"),EDe.forEach(t),fe.forEach(t),_Ar=i(ql),T(jM.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Rze=i(f),Fc=n(f,"H2",{class:!0});var GWe=s(Fc);DM=n(GWe,"A",{id:!0,class:!0,href:!0});var BPt=s(DM);o9e=n(BPt,"SPAN",{});var IPt=s(o9e);T(Tx.$$.fragment,IPt),IPt.forEach(t),BPt.forEach(t),uAr=i(GWe),r9e=n(GWe,"SPAN",{});var NPt=s(r9e);bAr=r(NPt,"TFAutoModelForSeq2SeqLM"),NPt.forEach(t),GWe.forEach(t),Pze=i(f),sr=n(f,"DIV",{class:!0});var jl=s(sr);T(Mx.$$.fragment,jl),vAr=i(jl),Tc=n(jl,"P",{});var Xte=s(Tc);FAr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qY=n(Xte,"A",{href:!0});var qPt=s(qY);TAr=r(qPt,"from_pretrained()"),qPt.forEach(t),MAr=r(Xte," class method or the "),jY=n(Xte,"A",{href:!0});var jPt=s(jY);EAr=r(jPt,"from_config()"),jPt.forEach(t),CAr=r(Xte,` class
method.`),Xte.forEach(t),wAr=i(jl),Ex=n(jl,"P",{});var OWe=s(Ex);AAr=r(OWe,"This class cannot be instantiated directly using "),t9e=n(OWe,"CODE",{});var DPt=s(t9e);LAr=r(DPt,"__init__()"),DPt.forEach(t),yAr=r(OWe," (throws an error)."),OWe.forEach(t),xAr=i(jl),qt=n(jl,"DIV",{class:!0});var bA=s(qt);T(Cx.$$.fragment,bA),$Ar=i(bA),a9e=n(bA,"P",{});var GPt=s(a9e);kAr=r(GPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GPt.forEach(t),SAr=i(bA),Mc=n(bA,"P",{});var zte=s(Mc);RAr=r(zte,`Note:
Loading a model from its configuration file does `),n9e=n(zte,"STRONG",{});var OPt=s(n9e);PAr=r(OPt,"not"),OPt.forEach(t),BAr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(zte,"A",{href:!0});var VPt=s(DY);IAr=r(VPt,"from_pretrained()"),VPt.forEach(t),NAr=r(zte," to load the model weights."),zte.forEach(t),qAr=i(bA),T(GM.$$.fragment,bA),bA.forEach(t),jAr=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(wx.$$.fragment,Dl),DAr=i(Dl),s9e=n(Dl,"P",{});var XPt=s(s9e);GAr=r(XPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XPt.forEach(t),OAr=i(Dl),gn=n(Dl,"P",{});var vA=s(gn);VAr=r(vA,"The model class to instantiate is selected based on the "),l9e=n(vA,"CODE",{});var zPt=s(l9e);XAr=r(zPt,"model_type"),zPt.forEach(t),zAr=r(vA,` property of the config object (either
passed as an argument or loaded from `),i9e=n(vA,"CODE",{});var QPt=s(i9e);QAr=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),WAr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=n(vA,"CODE",{});var WPt=s(d9e);HAr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),UAr=r(vA,":"),vA.forEach(t),JAr=i(Dl),ye=n(Dl,"UL",{});var Ie=s(ye);OM=n(Ie,"LI",{});var CDe=s(OM);c9e=n(CDe,"STRONG",{});var HPt=s(c9e);YAr=r(HPt,"bart"),HPt.forEach(t),KAr=r(CDe," \u2014 "),GY=n(CDe,"A",{href:!0});var UPt=s(GY);ZAr=r(UPt,"TFBartForConditionalGeneration"),UPt.forEach(t),eLr=r(CDe," (BART model)"),CDe.forEach(t),oLr=i(Ie),VM=n(Ie,"LI",{});var wDe=s(VM);f9e=n(wDe,"STRONG",{});var JPt=s(f9e);rLr=r(JPt,"blenderbot"),JPt.forEach(t),tLr=r(wDe," \u2014 "),OY=n(wDe,"A",{href:!0});var YPt=s(OY);aLr=r(YPt,"TFBlenderbotForConditionalGeneration"),YPt.forEach(t),nLr=r(wDe," (Blenderbot model)"),wDe.forEach(t),sLr=i(Ie),XM=n(Ie,"LI",{});var ADe=s(XM);m9e=n(ADe,"STRONG",{});var KPt=s(m9e);lLr=r(KPt,"blenderbot-small"),KPt.forEach(t),iLr=r(ADe," \u2014 "),VY=n(ADe,"A",{href:!0});var ZPt=s(VY);dLr=r(ZPt,"TFBlenderbotSmallForConditionalGeneration"),ZPt.forEach(t),cLr=r(ADe," (BlenderbotSmall model)"),ADe.forEach(t),fLr=i(Ie),zM=n(Ie,"LI",{});var LDe=s(zM);g9e=n(LDe,"STRONG",{});var eBt=s(g9e);mLr=r(eBt,"encoder-decoder"),eBt.forEach(t),gLr=r(LDe," \u2014 "),XY=n(LDe,"A",{href:!0});var oBt=s(XY);hLr=r(oBt,"TFEncoderDecoderModel"),oBt.forEach(t),pLr=r(LDe," (Encoder decoder model)"),LDe.forEach(t),_Lr=i(Ie),QM=n(Ie,"LI",{});var yDe=s(QM);h9e=n(yDe,"STRONG",{});var rBt=s(h9e);uLr=r(rBt,"led"),rBt.forEach(t),bLr=r(yDe," \u2014 "),zY=n(yDe,"A",{href:!0});var tBt=s(zY);vLr=r(tBt,"TFLEDForConditionalGeneration"),tBt.forEach(t),FLr=r(yDe," (LED model)"),yDe.forEach(t),TLr=i(Ie),WM=n(Ie,"LI",{});var xDe=s(WM);p9e=n(xDe,"STRONG",{});var aBt=s(p9e);MLr=r(aBt,"marian"),aBt.forEach(t),ELr=r(xDe," \u2014 "),QY=n(xDe,"A",{href:!0});var nBt=s(QY);CLr=r(nBt,"TFMarianMTModel"),nBt.forEach(t),wLr=r(xDe," (Marian model)"),xDe.forEach(t),ALr=i(Ie),HM=n(Ie,"LI",{});var $De=s(HM);_9e=n($De,"STRONG",{});var sBt=s(_9e);LLr=r(sBt,"mbart"),sBt.forEach(t),yLr=r($De," \u2014 "),WY=n($De,"A",{href:!0});var lBt=s(WY);xLr=r(lBt,"TFMBartForConditionalGeneration"),lBt.forEach(t),$Lr=r($De," (mBART model)"),$De.forEach(t),kLr=i(Ie),UM=n(Ie,"LI",{});var kDe=s(UM);u9e=n(kDe,"STRONG",{});var iBt=s(u9e);SLr=r(iBt,"mt5"),iBt.forEach(t),RLr=r(kDe," \u2014 "),HY=n(kDe,"A",{href:!0});var dBt=s(HY);PLr=r(dBt,"TFMT5ForConditionalGeneration"),dBt.forEach(t),BLr=r(kDe," (MT5 model)"),kDe.forEach(t),ILr=i(Ie),JM=n(Ie,"LI",{});var SDe=s(JM);b9e=n(SDe,"STRONG",{});var cBt=s(b9e);NLr=r(cBt,"pegasus"),cBt.forEach(t),qLr=r(SDe," \u2014 "),UY=n(SDe,"A",{href:!0});var fBt=s(UY);jLr=r(fBt,"TFPegasusForConditionalGeneration"),fBt.forEach(t),DLr=r(SDe," (Pegasus model)"),SDe.forEach(t),GLr=i(Ie),YM=n(Ie,"LI",{});var RDe=s(YM);v9e=n(RDe,"STRONG",{});var mBt=s(v9e);OLr=r(mBt,"t5"),mBt.forEach(t),VLr=r(RDe," \u2014 "),JY=n(RDe,"A",{href:!0});var gBt=s(JY);XLr=r(gBt,"TFT5ForConditionalGeneration"),gBt.forEach(t),zLr=r(RDe," (T5 model)"),RDe.forEach(t),Ie.forEach(t),QLr=i(Dl),T(KM.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Bze=i(f),Ec=n(f,"H2",{class:!0});var VWe=s(Ec);ZM=n(VWe,"A",{id:!0,class:!0,href:!0});var hBt=s(ZM);F9e=n(hBt,"SPAN",{});var pBt=s(F9e);T(Ax.$$.fragment,pBt),pBt.forEach(t),hBt.forEach(t),WLr=i(VWe),T9e=n(VWe,"SPAN",{});var _Bt=s(T9e);HLr=r(_Bt,"TFAutoModelForSequenceClassification"),_Bt.forEach(t),VWe.forEach(t),Ize=i(f),lr=n(f,"DIV",{class:!0});var Gl=s(lr);T(Lx.$$.fragment,Gl),ULr=i(Gl),Cc=n(Gl,"P",{});var Qte=s(Cc);JLr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=n(Qte,"A",{href:!0});var uBt=s(YY);YLr=r(uBt,"from_pretrained()"),uBt.forEach(t),KLr=r(Qte," class method or the "),KY=n(Qte,"A",{href:!0});var bBt=s(KY);ZLr=r(bBt,"from_config()"),bBt.forEach(t),eyr=r(Qte,` class
method.`),Qte.forEach(t),oyr=i(Gl),yx=n(Gl,"P",{});var XWe=s(yx);ryr=r(XWe,"This class cannot be instantiated directly using "),M9e=n(XWe,"CODE",{});var vBt=s(M9e);tyr=r(vBt,"__init__()"),vBt.forEach(t),ayr=r(XWe," (throws an error)."),XWe.forEach(t),nyr=i(Gl),jt=n(Gl,"DIV",{class:!0});var FA=s(jt);T(xx.$$.fragment,FA),syr=i(FA),E9e=n(FA,"P",{});var FBt=s(E9e);lyr=r(FBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FBt.forEach(t),iyr=i(FA),wc=n(FA,"P",{});var Wte=s(wc);dyr=r(Wte,`Note:
Loading a model from its configuration file does `),C9e=n(Wte,"STRONG",{});var TBt=s(C9e);cyr=r(TBt,"not"),TBt.forEach(t),fyr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(Wte,"A",{href:!0});var MBt=s(ZY);myr=r(MBt,"from_pretrained()"),MBt.forEach(t),gyr=r(Wte," to load the model weights."),Wte.forEach(t),hyr=i(FA),T(eE.$$.fragment,FA),FA.forEach(t),pyr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T($x.$$.fragment,Ol),_yr=i(Ol),w9e=n(Ol,"P",{});var EBt=s(w9e);uyr=r(EBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EBt.forEach(t),byr=i(Ol),hn=n(Ol,"P",{});var TA=s(hn);vyr=r(TA,"The model class to instantiate is selected based on the "),A9e=n(TA,"CODE",{});var CBt=s(A9e);Fyr=r(CBt,"model_type"),CBt.forEach(t),Tyr=r(TA,` property of the config object (either
passed as an argument or loaded from `),L9e=n(TA,"CODE",{});var wBt=s(L9e);Myr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),Eyr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y9e=n(TA,"CODE",{});var ABt=s(y9e);Cyr=r(ABt,"pretrained_model_name_or_path"),ABt.forEach(t),wyr=r(TA,":"),TA.forEach(t),Ayr=i(Ol),te=n(Ol,"UL",{});var ne=s(te);oE=n(ne,"LI",{});var PDe=s(oE);x9e=n(PDe,"STRONG",{});var LBt=s(x9e);Lyr=r(LBt,"albert"),LBt.forEach(t),yyr=r(PDe," \u2014 "),eK=n(PDe,"A",{href:!0});var yBt=s(eK);xyr=r(yBt,"TFAlbertForSequenceClassification"),yBt.forEach(t),$yr=r(PDe," (ALBERT model)"),PDe.forEach(t),kyr=i(ne),rE=n(ne,"LI",{});var BDe=s(rE);$9e=n(BDe,"STRONG",{});var xBt=s($9e);Syr=r(xBt,"bert"),xBt.forEach(t),Ryr=r(BDe," \u2014 "),oK=n(BDe,"A",{href:!0});var $Bt=s(oK);Pyr=r($Bt,"TFBertForSequenceClassification"),$Bt.forEach(t),Byr=r(BDe," (BERT model)"),BDe.forEach(t),Iyr=i(ne),tE=n(ne,"LI",{});var IDe=s(tE);k9e=n(IDe,"STRONG",{});var kBt=s(k9e);Nyr=r(kBt,"camembert"),kBt.forEach(t),qyr=r(IDe," \u2014 "),rK=n(IDe,"A",{href:!0});var SBt=s(rK);jyr=r(SBt,"TFCamembertForSequenceClassification"),SBt.forEach(t),Dyr=r(IDe," (CamemBERT model)"),IDe.forEach(t),Gyr=i(ne),aE=n(ne,"LI",{});var NDe=s(aE);S9e=n(NDe,"STRONG",{});var RBt=s(S9e);Oyr=r(RBt,"convbert"),RBt.forEach(t),Vyr=r(NDe," \u2014 "),tK=n(NDe,"A",{href:!0});var PBt=s(tK);Xyr=r(PBt,"TFConvBertForSequenceClassification"),PBt.forEach(t),zyr=r(NDe," (ConvBERT model)"),NDe.forEach(t),Qyr=i(ne),nE=n(ne,"LI",{});var qDe=s(nE);R9e=n(qDe,"STRONG",{});var BBt=s(R9e);Wyr=r(BBt,"ctrl"),BBt.forEach(t),Hyr=r(qDe," \u2014 "),aK=n(qDe,"A",{href:!0});var IBt=s(aK);Uyr=r(IBt,"TFCTRLForSequenceClassification"),IBt.forEach(t),Jyr=r(qDe," (CTRL model)"),qDe.forEach(t),Yyr=i(ne),sE=n(ne,"LI",{});var jDe=s(sE);P9e=n(jDe,"STRONG",{});var NBt=s(P9e);Kyr=r(NBt,"deberta"),NBt.forEach(t),Zyr=r(jDe," \u2014 "),nK=n(jDe,"A",{href:!0});var qBt=s(nK);e8r=r(qBt,"TFDebertaForSequenceClassification"),qBt.forEach(t),o8r=r(jDe," (DeBERTa model)"),jDe.forEach(t),r8r=i(ne),lE=n(ne,"LI",{});var DDe=s(lE);B9e=n(DDe,"STRONG",{});var jBt=s(B9e);t8r=r(jBt,"deberta-v2"),jBt.forEach(t),a8r=r(DDe," \u2014 "),sK=n(DDe,"A",{href:!0});var DBt=s(sK);n8r=r(DBt,"TFDebertaV2ForSequenceClassification"),DBt.forEach(t),s8r=r(DDe," (DeBERTa-v2 model)"),DDe.forEach(t),l8r=i(ne),iE=n(ne,"LI",{});var GDe=s(iE);I9e=n(GDe,"STRONG",{});var GBt=s(I9e);i8r=r(GBt,"distilbert"),GBt.forEach(t),d8r=r(GDe," \u2014 "),lK=n(GDe,"A",{href:!0});var OBt=s(lK);c8r=r(OBt,"TFDistilBertForSequenceClassification"),OBt.forEach(t),f8r=r(GDe," (DistilBERT model)"),GDe.forEach(t),m8r=i(ne),dE=n(ne,"LI",{});var ODe=s(dE);N9e=n(ODe,"STRONG",{});var VBt=s(N9e);g8r=r(VBt,"electra"),VBt.forEach(t),h8r=r(ODe," \u2014 "),iK=n(ODe,"A",{href:!0});var XBt=s(iK);p8r=r(XBt,"TFElectraForSequenceClassification"),XBt.forEach(t),_8r=r(ODe," (ELECTRA model)"),ODe.forEach(t),u8r=i(ne),cE=n(ne,"LI",{});var VDe=s(cE);q9e=n(VDe,"STRONG",{});var zBt=s(q9e);b8r=r(zBt,"flaubert"),zBt.forEach(t),v8r=r(VDe," \u2014 "),dK=n(VDe,"A",{href:!0});var QBt=s(dK);F8r=r(QBt,"TFFlaubertForSequenceClassification"),QBt.forEach(t),T8r=r(VDe," (FlauBERT model)"),VDe.forEach(t),M8r=i(ne),fE=n(ne,"LI",{});var XDe=s(fE);j9e=n(XDe,"STRONG",{});var WBt=s(j9e);E8r=r(WBt,"funnel"),WBt.forEach(t),C8r=r(XDe," \u2014 "),cK=n(XDe,"A",{href:!0});var HBt=s(cK);w8r=r(HBt,"TFFunnelForSequenceClassification"),HBt.forEach(t),A8r=r(XDe," (Funnel Transformer model)"),XDe.forEach(t),L8r=i(ne),mE=n(ne,"LI",{});var zDe=s(mE);D9e=n(zDe,"STRONG",{});var UBt=s(D9e);y8r=r(UBt,"gpt2"),UBt.forEach(t),x8r=r(zDe," \u2014 "),fK=n(zDe,"A",{href:!0});var JBt=s(fK);$8r=r(JBt,"TFGPT2ForSequenceClassification"),JBt.forEach(t),k8r=r(zDe," (OpenAI GPT-2 model)"),zDe.forEach(t),S8r=i(ne),gE=n(ne,"LI",{});var QDe=s(gE);G9e=n(QDe,"STRONG",{});var YBt=s(G9e);R8r=r(YBt,"gptj"),YBt.forEach(t),P8r=r(QDe," \u2014 "),mK=n(QDe,"A",{href:!0});var KBt=s(mK);B8r=r(KBt,"TFGPTJForSequenceClassification"),KBt.forEach(t),I8r=r(QDe," (GPT-J model)"),QDe.forEach(t),N8r=i(ne),hE=n(ne,"LI",{});var WDe=s(hE);O9e=n(WDe,"STRONG",{});var ZBt=s(O9e);q8r=r(ZBt,"layoutlm"),ZBt.forEach(t),j8r=r(WDe," \u2014 "),gK=n(WDe,"A",{href:!0});var eIt=s(gK);D8r=r(eIt,"TFLayoutLMForSequenceClassification"),eIt.forEach(t),G8r=r(WDe," (LayoutLM model)"),WDe.forEach(t),O8r=i(ne),pE=n(ne,"LI",{});var HDe=s(pE);V9e=n(HDe,"STRONG",{});var oIt=s(V9e);V8r=r(oIt,"longformer"),oIt.forEach(t),X8r=r(HDe," \u2014 "),hK=n(HDe,"A",{href:!0});var rIt=s(hK);z8r=r(rIt,"TFLongformerForSequenceClassification"),rIt.forEach(t),Q8r=r(HDe," (Longformer model)"),HDe.forEach(t),W8r=i(ne),_E=n(ne,"LI",{});var UDe=s(_E);X9e=n(UDe,"STRONG",{});var tIt=s(X9e);H8r=r(tIt,"mobilebert"),tIt.forEach(t),U8r=r(UDe," \u2014 "),pK=n(UDe,"A",{href:!0});var aIt=s(pK);J8r=r(aIt,"TFMobileBertForSequenceClassification"),aIt.forEach(t),Y8r=r(UDe," (MobileBERT model)"),UDe.forEach(t),K8r=i(ne),uE=n(ne,"LI",{});var JDe=s(uE);z9e=n(JDe,"STRONG",{});var nIt=s(z9e);Z8r=r(nIt,"mpnet"),nIt.forEach(t),exr=r(JDe," \u2014 "),_K=n(JDe,"A",{href:!0});var sIt=s(_K);oxr=r(sIt,"TFMPNetForSequenceClassification"),sIt.forEach(t),rxr=r(JDe," (MPNet model)"),JDe.forEach(t),txr=i(ne),bE=n(ne,"LI",{});var YDe=s(bE);Q9e=n(YDe,"STRONG",{});var lIt=s(Q9e);axr=r(lIt,"openai-gpt"),lIt.forEach(t),nxr=r(YDe," \u2014 "),uK=n(YDe,"A",{href:!0});var iIt=s(uK);sxr=r(iIt,"TFOpenAIGPTForSequenceClassification"),iIt.forEach(t),lxr=r(YDe," (OpenAI GPT model)"),YDe.forEach(t),ixr=i(ne),vE=n(ne,"LI",{});var KDe=s(vE);W9e=n(KDe,"STRONG",{});var dIt=s(W9e);dxr=r(dIt,"rembert"),dIt.forEach(t),cxr=r(KDe," \u2014 "),bK=n(KDe,"A",{href:!0});var cIt=s(bK);fxr=r(cIt,"TFRemBertForSequenceClassification"),cIt.forEach(t),mxr=r(KDe," (RemBERT model)"),KDe.forEach(t),gxr=i(ne),FE=n(ne,"LI",{});var ZDe=s(FE);H9e=n(ZDe,"STRONG",{});var fIt=s(H9e);hxr=r(fIt,"roberta"),fIt.forEach(t),pxr=r(ZDe," \u2014 "),vK=n(ZDe,"A",{href:!0});var mIt=s(vK);_xr=r(mIt,"TFRobertaForSequenceClassification"),mIt.forEach(t),uxr=r(ZDe," (RoBERTa model)"),ZDe.forEach(t),bxr=i(ne),TE=n(ne,"LI",{});var eGe=s(TE);U9e=n(eGe,"STRONG",{});var gIt=s(U9e);vxr=r(gIt,"roformer"),gIt.forEach(t),Fxr=r(eGe," \u2014 "),FK=n(eGe,"A",{href:!0});var hIt=s(FK);Txr=r(hIt,"TFRoFormerForSequenceClassification"),hIt.forEach(t),Mxr=r(eGe," (RoFormer model)"),eGe.forEach(t),Exr=i(ne),ME=n(ne,"LI",{});var oGe=s(ME);J9e=n(oGe,"STRONG",{});var pIt=s(J9e);Cxr=r(pIt,"tapas"),pIt.forEach(t),wxr=r(oGe," \u2014 "),TK=n(oGe,"A",{href:!0});var _It=s(TK);Axr=r(_It,"TFTapasForSequenceClassification"),_It.forEach(t),Lxr=r(oGe," (TAPAS model)"),oGe.forEach(t),yxr=i(ne),EE=n(ne,"LI",{});var rGe=s(EE);Y9e=n(rGe,"STRONG",{});var uIt=s(Y9e);xxr=r(uIt,"transfo-xl"),uIt.forEach(t),$xr=r(rGe," \u2014 "),MK=n(rGe,"A",{href:!0});var bIt=s(MK);kxr=r(bIt,"TFTransfoXLForSequenceClassification"),bIt.forEach(t),Sxr=r(rGe," (Transformer-XL model)"),rGe.forEach(t),Rxr=i(ne),CE=n(ne,"LI",{});var tGe=s(CE);K9e=n(tGe,"STRONG",{});var vIt=s(K9e);Pxr=r(vIt,"xlm"),vIt.forEach(t),Bxr=r(tGe," \u2014 "),EK=n(tGe,"A",{href:!0});var FIt=s(EK);Ixr=r(FIt,"TFXLMForSequenceClassification"),FIt.forEach(t),Nxr=r(tGe," (XLM model)"),tGe.forEach(t),qxr=i(ne),wE=n(ne,"LI",{});var aGe=s(wE);Z9e=n(aGe,"STRONG",{});var TIt=s(Z9e);jxr=r(TIt,"xlm-roberta"),TIt.forEach(t),Dxr=r(aGe," \u2014 "),CK=n(aGe,"A",{href:!0});var MIt=s(CK);Gxr=r(MIt,"TFXLMRobertaForSequenceClassification"),MIt.forEach(t),Oxr=r(aGe," (XLM-RoBERTa model)"),aGe.forEach(t),Vxr=i(ne),AE=n(ne,"LI",{});var nGe=s(AE);eMe=n(nGe,"STRONG",{});var EIt=s(eMe);Xxr=r(EIt,"xlnet"),EIt.forEach(t),zxr=r(nGe," \u2014 "),wK=n(nGe,"A",{href:!0});var CIt=s(wK);Qxr=r(CIt,"TFXLNetForSequenceClassification"),CIt.forEach(t),Wxr=r(nGe," (XLNet model)"),nGe.forEach(t),ne.forEach(t),Hxr=i(Ol),T(LE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Nze=i(f),Ac=n(f,"H2",{class:!0});var zWe=s(Ac);yE=n(zWe,"A",{id:!0,class:!0,href:!0});var wIt=s(yE);oMe=n(wIt,"SPAN",{});var AIt=s(oMe);T(kx.$$.fragment,AIt),AIt.forEach(t),wIt.forEach(t),Uxr=i(zWe),rMe=n(zWe,"SPAN",{});var LIt=s(rMe);Jxr=r(LIt,"TFAutoModelForMultipleChoice"),LIt.forEach(t),zWe.forEach(t),qze=i(f),ir=n(f,"DIV",{class:!0});var Vl=s(ir);T(Sx.$$.fragment,Vl),Yxr=i(Vl),Lc=n(Vl,"P",{});var Hte=s(Lc);Kxr=r(Hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=n(Hte,"A",{href:!0});var yIt=s(AK);Zxr=r(yIt,"from_pretrained()"),yIt.forEach(t),e$r=r(Hte," class method or the "),LK=n(Hte,"A",{href:!0});var xIt=s(LK);o$r=r(xIt,"from_config()"),xIt.forEach(t),r$r=r(Hte,` class
method.`),Hte.forEach(t),t$r=i(Vl),Rx=n(Vl,"P",{});var QWe=s(Rx);a$r=r(QWe,"This class cannot be instantiated directly using "),tMe=n(QWe,"CODE",{});var $It=s(tMe);n$r=r($It,"__init__()"),$It.forEach(t),s$r=r(QWe," (throws an error)."),QWe.forEach(t),l$r=i(Vl),Dt=n(Vl,"DIV",{class:!0});var MA=s(Dt);T(Px.$$.fragment,MA),i$r=i(MA),aMe=n(MA,"P",{});var kIt=s(aMe);d$r=r(kIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kIt.forEach(t),c$r=i(MA),yc=n(MA,"P",{});var Ute=s(yc);f$r=r(Ute,`Note:
Loading a model from its configuration file does `),nMe=n(Ute,"STRONG",{});var SIt=s(nMe);m$r=r(SIt,"not"),SIt.forEach(t),g$r=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Ute,"A",{href:!0});var RIt=s(yK);h$r=r(RIt,"from_pretrained()"),RIt.forEach(t),p$r=r(Ute," to load the model weights."),Ute.forEach(t),_$r=i(MA),T(xE.$$.fragment,MA),MA.forEach(t),u$r=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(Bx.$$.fragment,Xl),b$r=i(Xl),sMe=n(Xl,"P",{});var PIt=s(sMe);v$r=r(PIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PIt.forEach(t),F$r=i(Xl),pn=n(Xl,"P",{});var EA=s(pn);T$r=r(EA,"The model class to instantiate is selected based on the "),lMe=n(EA,"CODE",{});var BIt=s(lMe);M$r=r(BIt,"model_type"),BIt.forEach(t),E$r=r(EA,` property of the config object (either
passed as an argument or loaded from `),iMe=n(EA,"CODE",{});var IIt=s(iMe);C$r=r(IIt,"pretrained_model_name_or_path"),IIt.forEach(t),w$r=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(EA,"CODE",{});var NIt=s(dMe);A$r=r(NIt,"pretrained_model_name_or_path"),NIt.forEach(t),L$r=r(EA,":"),EA.forEach(t),y$r=i(Xl),ue=n(Xl,"UL",{});var Te=s(ue);$E=n(Te,"LI",{});var sGe=s($E);cMe=n(sGe,"STRONG",{});var qIt=s(cMe);x$r=r(qIt,"albert"),qIt.forEach(t),$$r=r(sGe," \u2014 "),xK=n(sGe,"A",{href:!0});var jIt=s(xK);k$r=r(jIt,"TFAlbertForMultipleChoice"),jIt.forEach(t),S$r=r(sGe," (ALBERT model)"),sGe.forEach(t),R$r=i(Te),kE=n(Te,"LI",{});var lGe=s(kE);fMe=n(lGe,"STRONG",{});var DIt=s(fMe);P$r=r(DIt,"bert"),DIt.forEach(t),B$r=r(lGe," \u2014 "),$K=n(lGe,"A",{href:!0});var GIt=s($K);I$r=r(GIt,"TFBertForMultipleChoice"),GIt.forEach(t),N$r=r(lGe," (BERT model)"),lGe.forEach(t),q$r=i(Te),SE=n(Te,"LI",{});var iGe=s(SE);mMe=n(iGe,"STRONG",{});var OIt=s(mMe);j$r=r(OIt,"camembert"),OIt.forEach(t),D$r=r(iGe," \u2014 "),kK=n(iGe,"A",{href:!0});var VIt=s(kK);G$r=r(VIt,"TFCamembertForMultipleChoice"),VIt.forEach(t),O$r=r(iGe," (CamemBERT model)"),iGe.forEach(t),V$r=i(Te),RE=n(Te,"LI",{});var dGe=s(RE);gMe=n(dGe,"STRONG",{});var XIt=s(gMe);X$r=r(XIt,"convbert"),XIt.forEach(t),z$r=r(dGe," \u2014 "),SK=n(dGe,"A",{href:!0});var zIt=s(SK);Q$r=r(zIt,"TFConvBertForMultipleChoice"),zIt.forEach(t),W$r=r(dGe," (ConvBERT model)"),dGe.forEach(t),H$r=i(Te),PE=n(Te,"LI",{});var cGe=s(PE);hMe=n(cGe,"STRONG",{});var QIt=s(hMe);U$r=r(QIt,"distilbert"),QIt.forEach(t),J$r=r(cGe," \u2014 "),RK=n(cGe,"A",{href:!0});var WIt=s(RK);Y$r=r(WIt,"TFDistilBertForMultipleChoice"),WIt.forEach(t),K$r=r(cGe," (DistilBERT model)"),cGe.forEach(t),Z$r=i(Te),BE=n(Te,"LI",{});var fGe=s(BE);pMe=n(fGe,"STRONG",{});var HIt=s(pMe);ekr=r(HIt,"electra"),HIt.forEach(t),okr=r(fGe," \u2014 "),PK=n(fGe,"A",{href:!0});var UIt=s(PK);rkr=r(UIt,"TFElectraForMultipleChoice"),UIt.forEach(t),tkr=r(fGe," (ELECTRA model)"),fGe.forEach(t),akr=i(Te),IE=n(Te,"LI",{});var mGe=s(IE);_Me=n(mGe,"STRONG",{});var JIt=s(_Me);nkr=r(JIt,"flaubert"),JIt.forEach(t),skr=r(mGe," \u2014 "),BK=n(mGe,"A",{href:!0});var YIt=s(BK);lkr=r(YIt,"TFFlaubertForMultipleChoice"),YIt.forEach(t),ikr=r(mGe," (FlauBERT model)"),mGe.forEach(t),dkr=i(Te),NE=n(Te,"LI",{});var gGe=s(NE);uMe=n(gGe,"STRONG",{});var KIt=s(uMe);ckr=r(KIt,"funnel"),KIt.forEach(t),fkr=r(gGe," \u2014 "),IK=n(gGe,"A",{href:!0});var ZIt=s(IK);mkr=r(ZIt,"TFFunnelForMultipleChoice"),ZIt.forEach(t),gkr=r(gGe," (Funnel Transformer model)"),gGe.forEach(t),hkr=i(Te),qE=n(Te,"LI",{});var hGe=s(qE);bMe=n(hGe,"STRONG",{});var eNt=s(bMe);pkr=r(eNt,"longformer"),eNt.forEach(t),_kr=r(hGe," \u2014 "),NK=n(hGe,"A",{href:!0});var oNt=s(NK);ukr=r(oNt,"TFLongformerForMultipleChoice"),oNt.forEach(t),bkr=r(hGe," (Longformer model)"),hGe.forEach(t),vkr=i(Te),jE=n(Te,"LI",{});var pGe=s(jE);vMe=n(pGe,"STRONG",{});var rNt=s(vMe);Fkr=r(rNt,"mobilebert"),rNt.forEach(t),Tkr=r(pGe," \u2014 "),qK=n(pGe,"A",{href:!0});var tNt=s(qK);Mkr=r(tNt,"TFMobileBertForMultipleChoice"),tNt.forEach(t),Ekr=r(pGe," (MobileBERT model)"),pGe.forEach(t),Ckr=i(Te),DE=n(Te,"LI",{});var _Ge=s(DE);FMe=n(_Ge,"STRONG",{});var aNt=s(FMe);wkr=r(aNt,"mpnet"),aNt.forEach(t),Akr=r(_Ge," \u2014 "),jK=n(_Ge,"A",{href:!0});var nNt=s(jK);Lkr=r(nNt,"TFMPNetForMultipleChoice"),nNt.forEach(t),ykr=r(_Ge," (MPNet model)"),_Ge.forEach(t),xkr=i(Te),GE=n(Te,"LI",{});var uGe=s(GE);TMe=n(uGe,"STRONG",{});var sNt=s(TMe);$kr=r(sNt,"rembert"),sNt.forEach(t),kkr=r(uGe," \u2014 "),DK=n(uGe,"A",{href:!0});var lNt=s(DK);Skr=r(lNt,"TFRemBertForMultipleChoice"),lNt.forEach(t),Rkr=r(uGe," (RemBERT model)"),uGe.forEach(t),Pkr=i(Te),OE=n(Te,"LI",{});var bGe=s(OE);MMe=n(bGe,"STRONG",{});var iNt=s(MMe);Bkr=r(iNt,"roberta"),iNt.forEach(t),Ikr=r(bGe," \u2014 "),GK=n(bGe,"A",{href:!0});var dNt=s(GK);Nkr=r(dNt,"TFRobertaForMultipleChoice"),dNt.forEach(t),qkr=r(bGe," (RoBERTa model)"),bGe.forEach(t),jkr=i(Te),VE=n(Te,"LI",{});var vGe=s(VE);EMe=n(vGe,"STRONG",{});var cNt=s(EMe);Dkr=r(cNt,"roformer"),cNt.forEach(t),Gkr=r(vGe," \u2014 "),OK=n(vGe,"A",{href:!0});var fNt=s(OK);Okr=r(fNt,"TFRoFormerForMultipleChoice"),fNt.forEach(t),Vkr=r(vGe," (RoFormer model)"),vGe.forEach(t),Xkr=i(Te),XE=n(Te,"LI",{});var FGe=s(XE);CMe=n(FGe,"STRONG",{});var mNt=s(CMe);zkr=r(mNt,"xlm"),mNt.forEach(t),Qkr=r(FGe," \u2014 "),VK=n(FGe,"A",{href:!0});var gNt=s(VK);Wkr=r(gNt,"TFXLMForMultipleChoice"),gNt.forEach(t),Hkr=r(FGe," (XLM model)"),FGe.forEach(t),Ukr=i(Te),zE=n(Te,"LI",{});var TGe=s(zE);wMe=n(TGe,"STRONG",{});var hNt=s(wMe);Jkr=r(hNt,"xlm-roberta"),hNt.forEach(t),Ykr=r(TGe," \u2014 "),XK=n(TGe,"A",{href:!0});var pNt=s(XK);Kkr=r(pNt,"TFXLMRobertaForMultipleChoice"),pNt.forEach(t),Zkr=r(TGe," (XLM-RoBERTa model)"),TGe.forEach(t),eSr=i(Te),QE=n(Te,"LI",{});var MGe=s(QE);AMe=n(MGe,"STRONG",{});var _Nt=s(AMe);oSr=r(_Nt,"xlnet"),_Nt.forEach(t),rSr=r(MGe," \u2014 "),zK=n(MGe,"A",{href:!0});var uNt=s(zK);tSr=r(uNt,"TFXLNetForMultipleChoice"),uNt.forEach(t),aSr=r(MGe," (XLNet model)"),MGe.forEach(t),Te.forEach(t),nSr=i(Xl),T(WE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),jze=i(f),xc=n(f,"H2",{class:!0});var WWe=s(xc);HE=n(WWe,"A",{id:!0,class:!0,href:!0});var bNt=s(HE);LMe=n(bNt,"SPAN",{});var vNt=s(LMe);T(Ix.$$.fragment,vNt),vNt.forEach(t),bNt.forEach(t),sSr=i(WWe),yMe=n(WWe,"SPAN",{});var FNt=s(yMe);lSr=r(FNt,"TFAutoModelForNextSentencePrediction"),FNt.forEach(t),WWe.forEach(t),Dze=i(f),dr=n(f,"DIV",{class:!0});var zl=s(dr);T(Nx.$$.fragment,zl),iSr=i(zl),$c=n(zl,"P",{});var Jte=s($c);dSr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QK=n(Jte,"A",{href:!0});var TNt=s(QK);cSr=r(TNt,"from_pretrained()"),TNt.forEach(t),fSr=r(Jte," class method or the "),WK=n(Jte,"A",{href:!0});var MNt=s(WK);mSr=r(MNt,"from_config()"),MNt.forEach(t),gSr=r(Jte,` class
method.`),Jte.forEach(t),hSr=i(zl),qx=n(zl,"P",{});var HWe=s(qx);pSr=r(HWe,"This class cannot be instantiated directly using "),xMe=n(HWe,"CODE",{});var ENt=s(xMe);_Sr=r(ENt,"__init__()"),ENt.forEach(t),uSr=r(HWe," (throws an error)."),HWe.forEach(t),bSr=i(zl),Gt=n(zl,"DIV",{class:!0});var CA=s(Gt);T(jx.$$.fragment,CA),vSr=i(CA),$Me=n(CA,"P",{});var CNt=s($Me);FSr=r(CNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CNt.forEach(t),TSr=i(CA),kc=n(CA,"P",{});var Yte=s(kc);MSr=r(Yte,`Note:
Loading a model from its configuration file does `),kMe=n(Yte,"STRONG",{});var wNt=s(kMe);ESr=r(wNt,"not"),wNt.forEach(t),CSr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Yte,"A",{href:!0});var ANt=s(HK);wSr=r(ANt,"from_pretrained()"),ANt.forEach(t),ASr=r(Yte," to load the model weights."),Yte.forEach(t),LSr=i(CA),T(UE.$$.fragment,CA),CA.forEach(t),ySr=i(zl),Nr=n(zl,"DIV",{class:!0});var Ql=s(Nr);T(Dx.$$.fragment,Ql),xSr=i(Ql),SMe=n(Ql,"P",{});var LNt=s(SMe);$Sr=r(LNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LNt.forEach(t),kSr=i(Ql),_n=n(Ql,"P",{});var wA=s(_n);SSr=r(wA,"The model class to instantiate is selected based on the "),RMe=n(wA,"CODE",{});var yNt=s(RMe);RSr=r(yNt,"model_type"),yNt.forEach(t),PSr=r(wA,` property of the config object (either
passed as an argument or loaded from `),PMe=n(wA,"CODE",{});var xNt=s(PMe);BSr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),ISr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(wA,"CODE",{});var $Nt=s(BMe);NSr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),qSr=r(wA,":"),wA.forEach(t),jSr=i(Ql),Gx=n(Ql,"UL",{});var UWe=s(Gx);JE=n(UWe,"LI",{});var EGe=s(JE);IMe=n(EGe,"STRONG",{});var kNt=s(IMe);DSr=r(kNt,"bert"),kNt.forEach(t),GSr=r(EGe," \u2014 "),UK=n(EGe,"A",{href:!0});var SNt=s(UK);OSr=r(SNt,"TFBertForNextSentencePrediction"),SNt.forEach(t),VSr=r(EGe," (BERT model)"),EGe.forEach(t),XSr=i(UWe),YE=n(UWe,"LI",{});var CGe=s(YE);NMe=n(CGe,"STRONG",{});var RNt=s(NMe);zSr=r(RNt,"mobilebert"),RNt.forEach(t),QSr=r(CGe," \u2014 "),JK=n(CGe,"A",{href:!0});var PNt=s(JK);WSr=r(PNt,"TFMobileBertForNextSentencePrediction"),PNt.forEach(t),HSr=r(CGe," (MobileBERT model)"),CGe.forEach(t),UWe.forEach(t),USr=i(Ql),T(KE.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Gze=i(f),Sc=n(f,"H2",{class:!0});var JWe=s(Sc);ZE=n(JWe,"A",{id:!0,class:!0,href:!0});var BNt=s(ZE);qMe=n(BNt,"SPAN",{});var INt=s(qMe);T(Ox.$$.fragment,INt),INt.forEach(t),BNt.forEach(t),JSr=i(JWe),jMe=n(JWe,"SPAN",{});var NNt=s(jMe);YSr=r(NNt,"TFAutoModelForTableQuestionAnswering"),NNt.forEach(t),JWe.forEach(t),Oze=i(f),cr=n(f,"DIV",{class:!0});var Wl=s(cr);T(Vx.$$.fragment,Wl),KSr=i(Wl),Rc=n(Wl,"P",{});var Kte=s(Rc);ZSr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YK=n(Kte,"A",{href:!0});var qNt=s(YK);eRr=r(qNt,"from_pretrained()"),qNt.forEach(t),oRr=r(Kte," class method or the "),KK=n(Kte,"A",{href:!0});var jNt=s(KK);rRr=r(jNt,"from_config()"),jNt.forEach(t),tRr=r(Kte,` class
method.`),Kte.forEach(t),aRr=i(Wl),Xx=n(Wl,"P",{});var YWe=s(Xx);nRr=r(YWe,"This class cannot be instantiated directly using "),DMe=n(YWe,"CODE",{});var DNt=s(DMe);sRr=r(DNt,"__init__()"),DNt.forEach(t),lRr=r(YWe," (throws an error)."),YWe.forEach(t),iRr=i(Wl),Ot=n(Wl,"DIV",{class:!0});var AA=s(Ot);T(zx.$$.fragment,AA),dRr=i(AA),GMe=n(AA,"P",{});var GNt=s(GMe);cRr=r(GNt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GNt.forEach(t),fRr=i(AA),Pc=n(AA,"P",{});var Zte=s(Pc);mRr=r(Zte,`Note:
Loading a model from its configuration file does `),OMe=n(Zte,"STRONG",{});var ONt=s(OMe);gRr=r(ONt,"not"),ONt.forEach(t),hRr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(Zte,"A",{href:!0});var VNt=s(ZK);pRr=r(VNt,"from_pretrained()"),VNt.forEach(t),_Rr=r(Zte," to load the model weights."),Zte.forEach(t),uRr=i(AA),T(eC.$$.fragment,AA),AA.forEach(t),bRr=i(Wl),qr=n(Wl,"DIV",{class:!0});var Hl=s(qr);T(Qx.$$.fragment,Hl),vRr=i(Hl),VMe=n(Hl,"P",{});var XNt=s(VMe);FRr=r(XNt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),XNt.forEach(t),TRr=i(Hl),un=n(Hl,"P",{});var LA=s(un);MRr=r(LA,"The model class to instantiate is selected based on the "),XMe=n(LA,"CODE",{});var zNt=s(XMe);ERr=r(zNt,"model_type"),zNt.forEach(t),CRr=r(LA,` property of the config object (either
passed as an argument or loaded from `),zMe=n(LA,"CODE",{});var QNt=s(zMe);wRr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),ARr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(LA,"CODE",{});var WNt=s(QMe);LRr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),yRr=r(LA,":"),LA.forEach(t),xRr=i(Hl),WMe=n(Hl,"UL",{});var HNt=s(WMe);oC=n(HNt,"LI",{});var wGe=s(oC);HMe=n(wGe,"STRONG",{});var UNt=s(HMe);$Rr=r(UNt,"tapas"),UNt.forEach(t),kRr=r(wGe," \u2014 "),eZ=n(wGe,"A",{href:!0});var JNt=s(eZ);SRr=r(JNt,"TFTapasForQuestionAnswering"),JNt.forEach(t),RRr=r(wGe," (TAPAS model)"),wGe.forEach(t),HNt.forEach(t),PRr=i(Hl),T(rC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Vze=i(f),Bc=n(f,"H2",{class:!0});var KWe=s(Bc);tC=n(KWe,"A",{id:!0,class:!0,href:!0});var YNt=s(tC);UMe=n(YNt,"SPAN",{});var KNt=s(UMe);T(Wx.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),BRr=i(KWe),JMe=n(KWe,"SPAN",{});var ZNt=s(JMe);IRr=r(ZNt,"TFAutoModelForTokenClassification"),ZNt.forEach(t),KWe.forEach(t),Xze=i(f),fr=n(f,"DIV",{class:!0});var Ul=s(fr);T(Hx.$$.fragment,Ul),NRr=i(Ul),Ic=n(Ul,"P",{});var eae=s(Ic);qRr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oZ=n(eae,"A",{href:!0});var eqt=s(oZ);jRr=r(eqt,"from_pretrained()"),eqt.forEach(t),DRr=r(eae," class method or the "),rZ=n(eae,"A",{href:!0});var oqt=s(rZ);GRr=r(oqt,"from_config()"),oqt.forEach(t),ORr=r(eae,` class
method.`),eae.forEach(t),VRr=i(Ul),Ux=n(Ul,"P",{});var ZWe=s(Ux);XRr=r(ZWe,"This class cannot be instantiated directly using "),YMe=n(ZWe,"CODE",{});var rqt=s(YMe);zRr=r(rqt,"__init__()"),rqt.forEach(t),QRr=r(ZWe," (throws an error)."),ZWe.forEach(t),WRr=i(Ul),Vt=n(Ul,"DIV",{class:!0});var yA=s(Vt);T(Jx.$$.fragment,yA),HRr=i(yA),KMe=n(yA,"P",{});var tqt=s(KMe);URr=r(tqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tqt.forEach(t),JRr=i(yA),Nc=n(yA,"P",{});var oae=s(Nc);YRr=r(oae,`Note:
Loading a model from its configuration file does `),ZMe=n(oae,"STRONG",{});var aqt=s(ZMe);KRr=r(aqt,"not"),aqt.forEach(t),ZRr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(oae,"A",{href:!0});var nqt=s(tZ);ePr=r(nqt,"from_pretrained()"),nqt.forEach(t),oPr=r(oae," to load the model weights."),oae.forEach(t),rPr=i(yA),T(aC.$$.fragment,yA),yA.forEach(t),tPr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Yx.$$.fragment,Jl),aPr=i(Jl),eEe=n(Jl,"P",{});var sqt=s(eEe);nPr=r(sqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sqt.forEach(t),sPr=i(Jl),bn=n(Jl,"P",{});var xA=s(bn);lPr=r(xA,"The model class to instantiate is selected based on the "),oEe=n(xA,"CODE",{});var lqt=s(oEe);iPr=r(lqt,"model_type"),lqt.forEach(t),dPr=r(xA,` property of the config object (either
passed as an argument or loaded from `),rEe=n(xA,"CODE",{});var iqt=s(rEe);cPr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),fPr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(xA,"CODE",{});var dqt=s(tEe);mPr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),gPr=r(xA,":"),xA.forEach(t),hPr=i(Jl),de=n(Jl,"UL",{});var me=s(de);nC=n(me,"LI",{});var AGe=s(nC);aEe=n(AGe,"STRONG",{});var cqt=s(aEe);pPr=r(cqt,"albert"),cqt.forEach(t),_Pr=r(AGe," \u2014 "),aZ=n(AGe,"A",{href:!0});var fqt=s(aZ);uPr=r(fqt,"TFAlbertForTokenClassification"),fqt.forEach(t),bPr=r(AGe," (ALBERT model)"),AGe.forEach(t),vPr=i(me),sC=n(me,"LI",{});var LGe=s(sC);nEe=n(LGe,"STRONG",{});var mqt=s(nEe);FPr=r(mqt,"bert"),mqt.forEach(t),TPr=r(LGe," \u2014 "),nZ=n(LGe,"A",{href:!0});var gqt=s(nZ);MPr=r(gqt,"TFBertForTokenClassification"),gqt.forEach(t),EPr=r(LGe," (BERT model)"),LGe.forEach(t),CPr=i(me),lC=n(me,"LI",{});var yGe=s(lC);sEe=n(yGe,"STRONG",{});var hqt=s(sEe);wPr=r(hqt,"camembert"),hqt.forEach(t),APr=r(yGe," \u2014 "),sZ=n(yGe,"A",{href:!0});var pqt=s(sZ);LPr=r(pqt,"TFCamembertForTokenClassification"),pqt.forEach(t),yPr=r(yGe," (CamemBERT model)"),yGe.forEach(t),xPr=i(me),iC=n(me,"LI",{});var xGe=s(iC);lEe=n(xGe,"STRONG",{});var _qt=s(lEe);$Pr=r(_qt,"convbert"),_qt.forEach(t),kPr=r(xGe," \u2014 "),lZ=n(xGe,"A",{href:!0});var uqt=s(lZ);SPr=r(uqt,"TFConvBertForTokenClassification"),uqt.forEach(t),RPr=r(xGe," (ConvBERT model)"),xGe.forEach(t),PPr=i(me),dC=n(me,"LI",{});var $Ge=s(dC);iEe=n($Ge,"STRONG",{});var bqt=s(iEe);BPr=r(bqt,"deberta"),bqt.forEach(t),IPr=r($Ge," \u2014 "),iZ=n($Ge,"A",{href:!0});var vqt=s(iZ);NPr=r(vqt,"TFDebertaForTokenClassification"),vqt.forEach(t),qPr=r($Ge," (DeBERTa model)"),$Ge.forEach(t),jPr=i(me),cC=n(me,"LI",{});var kGe=s(cC);dEe=n(kGe,"STRONG",{});var Fqt=s(dEe);DPr=r(Fqt,"deberta-v2"),Fqt.forEach(t),GPr=r(kGe," \u2014 "),dZ=n(kGe,"A",{href:!0});var Tqt=s(dZ);OPr=r(Tqt,"TFDebertaV2ForTokenClassification"),Tqt.forEach(t),VPr=r(kGe," (DeBERTa-v2 model)"),kGe.forEach(t),XPr=i(me),fC=n(me,"LI",{});var SGe=s(fC);cEe=n(SGe,"STRONG",{});var Mqt=s(cEe);zPr=r(Mqt,"distilbert"),Mqt.forEach(t),QPr=r(SGe," \u2014 "),cZ=n(SGe,"A",{href:!0});var Eqt=s(cZ);WPr=r(Eqt,"TFDistilBertForTokenClassification"),Eqt.forEach(t),HPr=r(SGe," (DistilBERT model)"),SGe.forEach(t),UPr=i(me),mC=n(me,"LI",{});var RGe=s(mC);fEe=n(RGe,"STRONG",{});var Cqt=s(fEe);JPr=r(Cqt,"electra"),Cqt.forEach(t),YPr=r(RGe," \u2014 "),fZ=n(RGe,"A",{href:!0});var wqt=s(fZ);KPr=r(wqt,"TFElectraForTokenClassification"),wqt.forEach(t),ZPr=r(RGe," (ELECTRA model)"),RGe.forEach(t),eBr=i(me),gC=n(me,"LI",{});var PGe=s(gC);mEe=n(PGe,"STRONG",{});var Aqt=s(mEe);oBr=r(Aqt,"flaubert"),Aqt.forEach(t),rBr=r(PGe," \u2014 "),mZ=n(PGe,"A",{href:!0});var Lqt=s(mZ);tBr=r(Lqt,"TFFlaubertForTokenClassification"),Lqt.forEach(t),aBr=r(PGe," (FlauBERT model)"),PGe.forEach(t),nBr=i(me),hC=n(me,"LI",{});var BGe=s(hC);gEe=n(BGe,"STRONG",{});var yqt=s(gEe);sBr=r(yqt,"funnel"),yqt.forEach(t),lBr=r(BGe," \u2014 "),gZ=n(BGe,"A",{href:!0});var xqt=s(gZ);iBr=r(xqt,"TFFunnelForTokenClassification"),xqt.forEach(t),dBr=r(BGe," (Funnel Transformer model)"),BGe.forEach(t),cBr=i(me),pC=n(me,"LI",{});var IGe=s(pC);hEe=n(IGe,"STRONG",{});var $qt=s(hEe);fBr=r($qt,"layoutlm"),$qt.forEach(t),mBr=r(IGe," \u2014 "),hZ=n(IGe,"A",{href:!0});var kqt=s(hZ);gBr=r(kqt,"TFLayoutLMForTokenClassification"),kqt.forEach(t),hBr=r(IGe," (LayoutLM model)"),IGe.forEach(t),pBr=i(me),_C=n(me,"LI",{});var NGe=s(_C);pEe=n(NGe,"STRONG",{});var Sqt=s(pEe);_Br=r(Sqt,"longformer"),Sqt.forEach(t),uBr=r(NGe," \u2014 "),pZ=n(NGe,"A",{href:!0});var Rqt=s(pZ);bBr=r(Rqt,"TFLongformerForTokenClassification"),Rqt.forEach(t),vBr=r(NGe," (Longformer model)"),NGe.forEach(t),FBr=i(me),uC=n(me,"LI",{});var qGe=s(uC);_Ee=n(qGe,"STRONG",{});var Pqt=s(_Ee);TBr=r(Pqt,"mobilebert"),Pqt.forEach(t),MBr=r(qGe," \u2014 "),_Z=n(qGe,"A",{href:!0});var Bqt=s(_Z);EBr=r(Bqt,"TFMobileBertForTokenClassification"),Bqt.forEach(t),CBr=r(qGe," (MobileBERT model)"),qGe.forEach(t),wBr=i(me),bC=n(me,"LI",{});var jGe=s(bC);uEe=n(jGe,"STRONG",{});var Iqt=s(uEe);ABr=r(Iqt,"mpnet"),Iqt.forEach(t),LBr=r(jGe," \u2014 "),uZ=n(jGe,"A",{href:!0});var Nqt=s(uZ);yBr=r(Nqt,"TFMPNetForTokenClassification"),Nqt.forEach(t),xBr=r(jGe," (MPNet model)"),jGe.forEach(t),$Br=i(me),vC=n(me,"LI",{});var DGe=s(vC);bEe=n(DGe,"STRONG",{});var qqt=s(bEe);kBr=r(qqt,"rembert"),qqt.forEach(t),SBr=r(DGe," \u2014 "),bZ=n(DGe,"A",{href:!0});var jqt=s(bZ);RBr=r(jqt,"TFRemBertForTokenClassification"),jqt.forEach(t),PBr=r(DGe," (RemBERT model)"),DGe.forEach(t),BBr=i(me),FC=n(me,"LI",{});var GGe=s(FC);vEe=n(GGe,"STRONG",{});var Dqt=s(vEe);IBr=r(Dqt,"roberta"),Dqt.forEach(t),NBr=r(GGe," \u2014 "),vZ=n(GGe,"A",{href:!0});var Gqt=s(vZ);qBr=r(Gqt,"TFRobertaForTokenClassification"),Gqt.forEach(t),jBr=r(GGe," (RoBERTa model)"),GGe.forEach(t),DBr=i(me),TC=n(me,"LI",{});var OGe=s(TC);FEe=n(OGe,"STRONG",{});var Oqt=s(FEe);GBr=r(Oqt,"roformer"),Oqt.forEach(t),OBr=r(OGe," \u2014 "),FZ=n(OGe,"A",{href:!0});var Vqt=s(FZ);VBr=r(Vqt,"TFRoFormerForTokenClassification"),Vqt.forEach(t),XBr=r(OGe," (RoFormer model)"),OGe.forEach(t),zBr=i(me),MC=n(me,"LI",{});var VGe=s(MC);TEe=n(VGe,"STRONG",{});var Xqt=s(TEe);QBr=r(Xqt,"xlm"),Xqt.forEach(t),WBr=r(VGe," \u2014 "),TZ=n(VGe,"A",{href:!0});var zqt=s(TZ);HBr=r(zqt,"TFXLMForTokenClassification"),zqt.forEach(t),UBr=r(VGe," (XLM model)"),VGe.forEach(t),JBr=i(me),EC=n(me,"LI",{});var XGe=s(EC);MEe=n(XGe,"STRONG",{});var Qqt=s(MEe);YBr=r(Qqt,"xlm-roberta"),Qqt.forEach(t),KBr=r(XGe," \u2014 "),MZ=n(XGe,"A",{href:!0});var Wqt=s(MZ);ZBr=r(Wqt,"TFXLMRobertaForTokenClassification"),Wqt.forEach(t),eIr=r(XGe," (XLM-RoBERTa model)"),XGe.forEach(t),oIr=i(me),CC=n(me,"LI",{});var zGe=s(CC);EEe=n(zGe,"STRONG",{});var Hqt=s(EEe);rIr=r(Hqt,"xlnet"),Hqt.forEach(t),tIr=r(zGe," \u2014 "),EZ=n(zGe,"A",{href:!0});var Uqt=s(EZ);aIr=r(Uqt,"TFXLNetForTokenClassification"),Uqt.forEach(t),nIr=r(zGe," (XLNet model)"),zGe.forEach(t),me.forEach(t),sIr=i(Jl),T(wC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),zze=i(f),qc=n(f,"H2",{class:!0});var eHe=s(qc);AC=n(eHe,"A",{id:!0,class:!0,href:!0});var Jqt=s(AC);CEe=n(Jqt,"SPAN",{});var Yqt=s(CEe);T(Kx.$$.fragment,Yqt),Yqt.forEach(t),Jqt.forEach(t),lIr=i(eHe),wEe=n(eHe,"SPAN",{});var Kqt=s(wEe);iIr=r(Kqt,"TFAutoModelForQuestionAnswering"),Kqt.forEach(t),eHe.forEach(t),Qze=i(f),mr=n(f,"DIV",{class:!0});var Yl=s(mr);T(Zx.$$.fragment,Yl),dIr=i(Yl),jc=n(Yl,"P",{});var rae=s(jc);cIr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CZ=n(rae,"A",{href:!0});var Zqt=s(CZ);fIr=r(Zqt,"from_pretrained()"),Zqt.forEach(t),mIr=r(rae," class method or the "),wZ=n(rae,"A",{href:!0});var ejt=s(wZ);gIr=r(ejt,"from_config()"),ejt.forEach(t),hIr=r(rae,` class
method.`),rae.forEach(t),pIr=i(Yl),e$=n(Yl,"P",{});var oHe=s(e$);_Ir=r(oHe,"This class cannot be instantiated directly using "),AEe=n(oHe,"CODE",{});var ojt=s(AEe);uIr=r(ojt,"__init__()"),ojt.forEach(t),bIr=r(oHe," (throws an error)."),oHe.forEach(t),vIr=i(Yl),Xt=n(Yl,"DIV",{class:!0});var $A=s(Xt);T(o$.$$.fragment,$A),FIr=i($A),LEe=n($A,"P",{});var rjt=s(LEe);TIr=r(rjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rjt.forEach(t),MIr=i($A),Dc=n($A,"P",{});var tae=s(Dc);EIr=r(tae,`Note:
Loading a model from its configuration file does `),yEe=n(tae,"STRONG",{});var tjt=s(yEe);CIr=r(tjt,"not"),tjt.forEach(t),wIr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(tae,"A",{href:!0});var ajt=s(AZ);AIr=r(ajt,"from_pretrained()"),ajt.forEach(t),LIr=r(tae," to load the model weights."),tae.forEach(t),yIr=i($A),T(LC.$$.fragment,$A),$A.forEach(t),xIr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(r$.$$.fragment,Kl),$Ir=i(Kl),xEe=n(Kl,"P",{});var njt=s(xEe);kIr=r(njt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),njt.forEach(t),SIr=i(Kl),vn=n(Kl,"P",{});var kA=s(vn);RIr=r(kA,"The model class to instantiate is selected based on the "),$Ee=n(kA,"CODE",{});var sjt=s($Ee);PIr=r(sjt,"model_type"),sjt.forEach(t),BIr=r(kA,` property of the config object (either
passed as an argument or loaded from `),kEe=n(kA,"CODE",{});var ljt=s(kEe);IIr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),NIr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=n(kA,"CODE",{});var ijt=s(SEe);qIr=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),jIr=r(kA,":"),kA.forEach(t),DIr=i(Kl),ce=n(Kl,"UL",{});var ge=s(ce);yC=n(ge,"LI",{});var QGe=s(yC);REe=n(QGe,"STRONG",{});var djt=s(REe);GIr=r(djt,"albert"),djt.forEach(t),OIr=r(QGe," \u2014 "),LZ=n(QGe,"A",{href:!0});var cjt=s(LZ);VIr=r(cjt,"TFAlbertForQuestionAnswering"),cjt.forEach(t),XIr=r(QGe," (ALBERT model)"),QGe.forEach(t),zIr=i(ge),xC=n(ge,"LI",{});var WGe=s(xC);PEe=n(WGe,"STRONG",{});var fjt=s(PEe);QIr=r(fjt,"bert"),fjt.forEach(t),WIr=r(WGe," \u2014 "),yZ=n(WGe,"A",{href:!0});var mjt=s(yZ);HIr=r(mjt,"TFBertForQuestionAnswering"),mjt.forEach(t),UIr=r(WGe," (BERT model)"),WGe.forEach(t),JIr=i(ge),$C=n(ge,"LI",{});var HGe=s($C);BEe=n(HGe,"STRONG",{});var gjt=s(BEe);YIr=r(gjt,"camembert"),gjt.forEach(t),KIr=r(HGe," \u2014 "),xZ=n(HGe,"A",{href:!0});var hjt=s(xZ);ZIr=r(hjt,"TFCamembertForQuestionAnswering"),hjt.forEach(t),eNr=r(HGe," (CamemBERT model)"),HGe.forEach(t),oNr=i(ge),kC=n(ge,"LI",{});var UGe=s(kC);IEe=n(UGe,"STRONG",{});var pjt=s(IEe);rNr=r(pjt,"convbert"),pjt.forEach(t),tNr=r(UGe," \u2014 "),$Z=n(UGe,"A",{href:!0});var _jt=s($Z);aNr=r(_jt,"TFConvBertForQuestionAnswering"),_jt.forEach(t),nNr=r(UGe," (ConvBERT model)"),UGe.forEach(t),sNr=i(ge),SC=n(ge,"LI",{});var JGe=s(SC);NEe=n(JGe,"STRONG",{});var ujt=s(NEe);lNr=r(ujt,"deberta"),ujt.forEach(t),iNr=r(JGe," \u2014 "),kZ=n(JGe,"A",{href:!0});var bjt=s(kZ);dNr=r(bjt,"TFDebertaForQuestionAnswering"),bjt.forEach(t),cNr=r(JGe," (DeBERTa model)"),JGe.forEach(t),fNr=i(ge),RC=n(ge,"LI",{});var YGe=s(RC);qEe=n(YGe,"STRONG",{});var vjt=s(qEe);mNr=r(vjt,"deberta-v2"),vjt.forEach(t),gNr=r(YGe," \u2014 "),SZ=n(YGe,"A",{href:!0});var Fjt=s(SZ);hNr=r(Fjt,"TFDebertaV2ForQuestionAnswering"),Fjt.forEach(t),pNr=r(YGe," (DeBERTa-v2 model)"),YGe.forEach(t),_Nr=i(ge),PC=n(ge,"LI",{});var KGe=s(PC);jEe=n(KGe,"STRONG",{});var Tjt=s(jEe);uNr=r(Tjt,"distilbert"),Tjt.forEach(t),bNr=r(KGe," \u2014 "),RZ=n(KGe,"A",{href:!0});var Mjt=s(RZ);vNr=r(Mjt,"TFDistilBertForQuestionAnswering"),Mjt.forEach(t),FNr=r(KGe," (DistilBERT model)"),KGe.forEach(t),TNr=i(ge),BC=n(ge,"LI",{});var ZGe=s(BC);DEe=n(ZGe,"STRONG",{});var Ejt=s(DEe);MNr=r(Ejt,"electra"),Ejt.forEach(t),ENr=r(ZGe," \u2014 "),PZ=n(ZGe,"A",{href:!0});var Cjt=s(PZ);CNr=r(Cjt,"TFElectraForQuestionAnswering"),Cjt.forEach(t),wNr=r(ZGe," (ELECTRA model)"),ZGe.forEach(t),ANr=i(ge),IC=n(ge,"LI",{});var eOe=s(IC);GEe=n(eOe,"STRONG",{});var wjt=s(GEe);LNr=r(wjt,"flaubert"),wjt.forEach(t),yNr=r(eOe," \u2014 "),BZ=n(eOe,"A",{href:!0});var Ajt=s(BZ);xNr=r(Ajt,"TFFlaubertForQuestionAnsweringSimple"),Ajt.forEach(t),$Nr=r(eOe," (FlauBERT model)"),eOe.forEach(t),kNr=i(ge),NC=n(ge,"LI",{});var oOe=s(NC);OEe=n(oOe,"STRONG",{});var Ljt=s(OEe);SNr=r(Ljt,"funnel"),Ljt.forEach(t),RNr=r(oOe," \u2014 "),IZ=n(oOe,"A",{href:!0});var yjt=s(IZ);PNr=r(yjt,"TFFunnelForQuestionAnswering"),yjt.forEach(t),BNr=r(oOe," (Funnel Transformer model)"),oOe.forEach(t),INr=i(ge),qC=n(ge,"LI",{});var rOe=s(qC);VEe=n(rOe,"STRONG",{});var xjt=s(VEe);NNr=r(xjt,"gptj"),xjt.forEach(t),qNr=r(rOe," \u2014 "),NZ=n(rOe,"A",{href:!0});var $jt=s(NZ);jNr=r($jt,"TFGPTJForQuestionAnswering"),$jt.forEach(t),DNr=r(rOe," (GPT-J model)"),rOe.forEach(t),GNr=i(ge),jC=n(ge,"LI",{});var tOe=s(jC);XEe=n(tOe,"STRONG",{});var kjt=s(XEe);ONr=r(kjt,"longformer"),kjt.forEach(t),VNr=r(tOe," \u2014 "),qZ=n(tOe,"A",{href:!0});var Sjt=s(qZ);XNr=r(Sjt,"TFLongformerForQuestionAnswering"),Sjt.forEach(t),zNr=r(tOe," (Longformer model)"),tOe.forEach(t),QNr=i(ge),DC=n(ge,"LI",{});var aOe=s(DC);zEe=n(aOe,"STRONG",{});var Rjt=s(zEe);WNr=r(Rjt,"mobilebert"),Rjt.forEach(t),HNr=r(aOe," \u2014 "),jZ=n(aOe,"A",{href:!0});var Pjt=s(jZ);UNr=r(Pjt,"TFMobileBertForQuestionAnswering"),Pjt.forEach(t),JNr=r(aOe," (MobileBERT model)"),aOe.forEach(t),YNr=i(ge),GC=n(ge,"LI",{});var nOe=s(GC);QEe=n(nOe,"STRONG",{});var Bjt=s(QEe);KNr=r(Bjt,"mpnet"),Bjt.forEach(t),ZNr=r(nOe," \u2014 "),DZ=n(nOe,"A",{href:!0});var Ijt=s(DZ);eqr=r(Ijt,"TFMPNetForQuestionAnswering"),Ijt.forEach(t),oqr=r(nOe," (MPNet model)"),nOe.forEach(t),rqr=i(ge),OC=n(ge,"LI",{});var sOe=s(OC);WEe=n(sOe,"STRONG",{});var Njt=s(WEe);tqr=r(Njt,"rembert"),Njt.forEach(t),aqr=r(sOe," \u2014 "),GZ=n(sOe,"A",{href:!0});var qjt=s(GZ);nqr=r(qjt,"TFRemBertForQuestionAnswering"),qjt.forEach(t),sqr=r(sOe," (RemBERT model)"),sOe.forEach(t),lqr=i(ge),VC=n(ge,"LI",{});var lOe=s(VC);HEe=n(lOe,"STRONG",{});var jjt=s(HEe);iqr=r(jjt,"roberta"),jjt.forEach(t),dqr=r(lOe," \u2014 "),OZ=n(lOe,"A",{href:!0});var Djt=s(OZ);cqr=r(Djt,"TFRobertaForQuestionAnswering"),Djt.forEach(t),fqr=r(lOe," (RoBERTa model)"),lOe.forEach(t),mqr=i(ge),XC=n(ge,"LI",{});var iOe=s(XC);UEe=n(iOe,"STRONG",{});var Gjt=s(UEe);gqr=r(Gjt,"roformer"),Gjt.forEach(t),hqr=r(iOe," \u2014 "),VZ=n(iOe,"A",{href:!0});var Ojt=s(VZ);pqr=r(Ojt,"TFRoFormerForQuestionAnswering"),Ojt.forEach(t),_qr=r(iOe," (RoFormer model)"),iOe.forEach(t),uqr=i(ge),zC=n(ge,"LI",{});var dOe=s(zC);JEe=n(dOe,"STRONG",{});var Vjt=s(JEe);bqr=r(Vjt,"xlm"),Vjt.forEach(t),vqr=r(dOe," \u2014 "),XZ=n(dOe,"A",{href:!0});var Xjt=s(XZ);Fqr=r(Xjt,"TFXLMForQuestionAnsweringSimple"),Xjt.forEach(t),Tqr=r(dOe," (XLM model)"),dOe.forEach(t),Mqr=i(ge),QC=n(ge,"LI",{});var cOe=s(QC);YEe=n(cOe,"STRONG",{});var zjt=s(YEe);Eqr=r(zjt,"xlm-roberta"),zjt.forEach(t),Cqr=r(cOe," \u2014 "),zZ=n(cOe,"A",{href:!0});var Qjt=s(zZ);wqr=r(Qjt,"TFXLMRobertaForQuestionAnswering"),Qjt.forEach(t),Aqr=r(cOe," (XLM-RoBERTa model)"),cOe.forEach(t),Lqr=i(ge),WC=n(ge,"LI",{});var fOe=s(WC);KEe=n(fOe,"STRONG",{});var Wjt=s(KEe);yqr=r(Wjt,"xlnet"),Wjt.forEach(t),xqr=r(fOe," \u2014 "),QZ=n(fOe,"A",{href:!0});var Hjt=s(QZ);$qr=r(Hjt,"TFXLNetForQuestionAnsweringSimple"),Hjt.forEach(t),kqr=r(fOe," (XLNet model)"),fOe.forEach(t),ge.forEach(t),Sqr=i(Kl),T(HC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Wze=i(f),Gc=n(f,"H2",{class:!0});var rHe=s(Gc);UC=n(rHe,"A",{id:!0,class:!0,href:!0});var Ujt=s(UC);ZEe=n(Ujt,"SPAN",{});var Jjt=s(ZEe);T(t$.$$.fragment,Jjt),Jjt.forEach(t),Ujt.forEach(t),Rqr=i(rHe),eCe=n(rHe,"SPAN",{});var Yjt=s(eCe);Pqr=r(Yjt,"TFAutoModelForVision2Seq"),Yjt.forEach(t),rHe.forEach(t),Hze=i(f),gr=n(f,"DIV",{class:!0});var Zl=s(gr);T(a$.$$.fragment,Zl),Bqr=i(Zl),Oc=n(Zl,"P",{});var aae=s(Oc);Iqr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WZ=n(aae,"A",{href:!0});var Kjt=s(WZ);Nqr=r(Kjt,"from_pretrained()"),Kjt.forEach(t),qqr=r(aae," class method or the "),HZ=n(aae,"A",{href:!0});var Zjt=s(HZ);jqr=r(Zjt,"from_config()"),Zjt.forEach(t),Dqr=r(aae,` class
method.`),aae.forEach(t),Gqr=i(Zl),n$=n(Zl,"P",{});var tHe=s(n$);Oqr=r(tHe,"This class cannot be instantiated directly using "),oCe=n(tHe,"CODE",{});var eDt=s(oCe);Vqr=r(eDt,"__init__()"),eDt.forEach(t),Xqr=r(tHe," (throws an error)."),tHe.forEach(t),zqr=i(Zl),zt=n(Zl,"DIV",{class:!0});var SA=s(zt);T(s$.$$.fragment,SA),Qqr=i(SA),rCe=n(SA,"P",{});var oDt=s(rCe);Wqr=r(oDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oDt.forEach(t),Hqr=i(SA),Vc=n(SA,"P",{});var nae=s(Vc);Uqr=r(nae,`Note:
Loading a model from its configuration file does `),tCe=n(nae,"STRONG",{});var rDt=s(tCe);Jqr=r(rDt,"not"),rDt.forEach(t),Yqr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(nae,"A",{href:!0});var tDt=s(UZ);Kqr=r(tDt,"from_pretrained()"),tDt.forEach(t),Zqr=r(nae," to load the model weights."),nae.forEach(t),ejr=i(SA),T(JC.$$.fragment,SA),SA.forEach(t),ojr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(l$.$$.fragment,ei),rjr=i(ei),aCe=n(ei,"P",{});var aDt=s(aCe);tjr=r(aDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aDt.forEach(t),ajr=i(ei),Fn=n(ei,"P",{});var RA=s(Fn);njr=r(RA,"The model class to instantiate is selected based on the "),nCe=n(RA,"CODE",{});var nDt=s(nCe);sjr=r(nDt,"model_type"),nDt.forEach(t),ljr=r(RA,` property of the config object (either
passed as an argument or loaded from `),sCe=n(RA,"CODE",{});var sDt=s(sCe);ijr=r(sDt,"pretrained_model_name_or_path"),sDt.forEach(t),djr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(RA,"CODE",{});var lDt=s(lCe);cjr=r(lDt,"pretrained_model_name_or_path"),lDt.forEach(t),fjr=r(RA,":"),RA.forEach(t),mjr=i(ei),iCe=n(ei,"UL",{});var iDt=s(iCe);YC=n(iDt,"LI",{});var mOe=s(YC);dCe=n(mOe,"STRONG",{});var dDt=s(dCe);gjr=r(dDt,"vision-encoder-decoder"),dDt.forEach(t),hjr=r(mOe," \u2014 "),JZ=n(mOe,"A",{href:!0});var cDt=s(JZ);pjr=r(cDt,"TFVisionEncoderDecoderModel"),cDt.forEach(t),_jr=r(mOe," (Vision Encoder decoder model)"),mOe.forEach(t),iDt.forEach(t),ujr=i(ei),T(KC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Uze=i(f),Xc=n(f,"H2",{class:!0});var aHe=s(Xc);ZC=n(aHe,"A",{id:!0,class:!0,href:!0});var fDt=s(ZC);cCe=n(fDt,"SPAN",{});var mDt=s(cCe);T(i$.$$.fragment,mDt),mDt.forEach(t),fDt.forEach(t),bjr=i(aHe),fCe=n(aHe,"SPAN",{});var gDt=s(fCe);vjr=r(gDt,"TFAutoModelForSpeechSeq2Seq"),gDt.forEach(t),aHe.forEach(t),Jze=i(f),hr=n(f,"DIV",{class:!0});var oi=s(hr);T(d$.$$.fragment,oi),Fjr=i(oi),zc=n(oi,"P",{});var sae=s(zc);Tjr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YZ=n(sae,"A",{href:!0});var hDt=s(YZ);Mjr=r(hDt,"from_pretrained()"),hDt.forEach(t),Ejr=r(sae," class method or the "),KZ=n(sae,"A",{href:!0});var pDt=s(KZ);Cjr=r(pDt,"from_config()"),pDt.forEach(t),wjr=r(sae,` class
method.`),sae.forEach(t),Ajr=i(oi),c$=n(oi,"P",{});var nHe=s(c$);Ljr=r(nHe,"This class cannot be instantiated directly using "),mCe=n(nHe,"CODE",{});var _Dt=s(mCe);yjr=r(_Dt,"__init__()"),_Dt.forEach(t),xjr=r(nHe," (throws an error)."),nHe.forEach(t),$jr=i(oi),Qt=n(oi,"DIV",{class:!0});var PA=s(Qt);T(f$.$$.fragment,PA),kjr=i(PA),gCe=n(PA,"P",{});var uDt=s(gCe);Sjr=r(uDt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uDt.forEach(t),Rjr=i(PA),Qc=n(PA,"P",{});var lae=s(Qc);Pjr=r(lae,`Note:
Loading a model from its configuration file does `),hCe=n(lae,"STRONG",{});var bDt=s(hCe);Bjr=r(bDt,"not"),bDt.forEach(t),Ijr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(lae,"A",{href:!0});var vDt=s(ZZ);Njr=r(vDt,"from_pretrained()"),vDt.forEach(t),qjr=r(lae," to load the model weights."),lae.forEach(t),jjr=i(PA),T(e3.$$.fragment,PA),PA.forEach(t),Djr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(m$.$$.fragment,ri),Gjr=i(ri),pCe=n(ri,"P",{});var FDt=s(pCe);Ojr=r(FDt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FDt.forEach(t),Vjr=i(ri),Tn=n(ri,"P",{});var BA=s(Tn);Xjr=r(BA,"The model class to instantiate is selected based on the "),_Ce=n(BA,"CODE",{});var TDt=s(_Ce);zjr=r(TDt,"model_type"),TDt.forEach(t),Qjr=r(BA,` property of the config object (either
passed as an argument or loaded from `),uCe=n(BA,"CODE",{});var MDt=s(uCe);Wjr=r(MDt,"pretrained_model_name_or_path"),MDt.forEach(t),Hjr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(BA,"CODE",{});var EDt=s(bCe);Ujr=r(EDt,"pretrained_model_name_or_path"),EDt.forEach(t),Jjr=r(BA,":"),BA.forEach(t),Yjr=i(ri),vCe=n(ri,"UL",{});var CDt=s(vCe);o3=n(CDt,"LI",{});var gOe=s(o3);FCe=n(gOe,"STRONG",{});var wDt=s(FCe);Kjr=r(wDt,"speech_to_text"),wDt.forEach(t),Zjr=r(gOe," \u2014 "),eee=n(gOe,"A",{href:!0});var ADt=s(eee);eDr=r(ADt,"TFSpeech2TextForConditionalGeneration"),ADt.forEach(t),oDr=r(gOe," (Speech2Text model)"),gOe.forEach(t),CDt.forEach(t),rDr=i(ri),T(r3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Yze=i(f),Wc=n(f,"H2",{class:!0});var sHe=s(Wc);t3=n(sHe,"A",{id:!0,class:!0,href:!0});var LDt=s(t3);TCe=n(LDt,"SPAN",{});var yDt=s(TCe);T(g$.$$.fragment,yDt),yDt.forEach(t),LDt.forEach(t),tDr=i(sHe),MCe=n(sHe,"SPAN",{});var xDt=s(MCe);aDr=r(xDt,"FlaxAutoModel"),xDt.forEach(t),sHe.forEach(t),Kze=i(f),pr=n(f,"DIV",{class:!0});var ti=s(pr);T(h$.$$.fragment,ti),nDr=i(ti),Hc=n(ti,"P",{});var iae=s(Hc);sDr=r(iae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oee=n(iae,"A",{href:!0});var $Dt=s(oee);lDr=r($Dt,"from_pretrained()"),$Dt.forEach(t),iDr=r(iae," class method or the "),ree=n(iae,"A",{href:!0});var kDt=s(ree);dDr=r(kDt,"from_config()"),kDt.forEach(t),cDr=r(iae,` class
method.`),iae.forEach(t),fDr=i(ti),p$=n(ti,"P",{});var lHe=s(p$);mDr=r(lHe,"This class cannot be instantiated directly using "),ECe=n(lHe,"CODE",{});var SDt=s(ECe);gDr=r(SDt,"__init__()"),SDt.forEach(t),hDr=r(lHe," (throws an error)."),lHe.forEach(t),pDr=i(ti),Wt=n(ti,"DIV",{class:!0});var IA=s(Wt);T(_$.$$.fragment,IA),_Dr=i(IA),CCe=n(IA,"P",{});var RDt=s(CCe);uDr=r(RDt,"Instantiates one of the base model classes of the library from a configuration."),RDt.forEach(t),bDr=i(IA),Uc=n(IA,"P",{});var dae=s(Uc);vDr=r(dae,`Note:
Loading a model from its configuration file does `),wCe=n(dae,"STRONG",{});var PDt=s(wCe);FDr=r(PDt,"not"),PDt.forEach(t),TDr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tee=n(dae,"A",{href:!0});var BDt=s(tee);MDr=r(BDt,"from_pretrained()"),BDt.forEach(t),EDr=r(dae," to load the model weights."),dae.forEach(t),CDr=i(IA),T(a3.$$.fragment,IA),IA.forEach(t),wDr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(u$.$$.fragment,ai),ADr=i(ai),ACe=n(ai,"P",{});var IDt=s(ACe);LDr=r(IDt,"Instantiate one of the base model classes of the library from a pretrained model."),IDt.forEach(t),yDr=i(ai),Mn=n(ai,"P",{});var NA=s(Mn);xDr=r(NA,"The model class to instantiate is selected based on the "),LCe=n(NA,"CODE",{});var NDt=s(LCe);$Dr=r(NDt,"model_type"),NDt.forEach(t),kDr=r(NA,` property of the config object (either
passed as an argument or loaded from `),yCe=n(NA,"CODE",{});var qDt=s(yCe);SDr=r(qDt,"pretrained_model_name_or_path"),qDt.forEach(t),RDr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(NA,"CODE",{});var jDt=s(xCe);PDr=r(jDt,"pretrained_model_name_or_path"),jDt.forEach(t),BDr=r(NA,":"),NA.forEach(t),IDr=i(ai),oe=n(ai,"UL",{});var ae=s(oe);n3=n(ae,"LI",{});var hOe=s(n3);$Ce=n(hOe,"STRONG",{});var DDt=s($Ce);NDr=r(DDt,"albert"),DDt.forEach(t),qDr=r(hOe," \u2014 "),aee=n(hOe,"A",{href:!0});var GDt=s(aee);jDr=r(GDt,"FlaxAlbertModel"),GDt.forEach(t),DDr=r(hOe," (ALBERT model)"),hOe.forEach(t),GDr=i(ae),s3=n(ae,"LI",{});var pOe=s(s3);kCe=n(pOe,"STRONG",{});var ODt=s(kCe);ODr=r(ODt,"bart"),ODt.forEach(t),VDr=r(pOe," \u2014 "),nee=n(pOe,"A",{href:!0});var VDt=s(nee);XDr=r(VDt,"FlaxBartModel"),VDt.forEach(t),zDr=r(pOe," (BART model)"),pOe.forEach(t),QDr=i(ae),l3=n(ae,"LI",{});var _Oe=s(l3);SCe=n(_Oe,"STRONG",{});var XDt=s(SCe);WDr=r(XDt,"beit"),XDt.forEach(t),HDr=r(_Oe," \u2014 "),see=n(_Oe,"A",{href:!0});var zDt=s(see);UDr=r(zDt,"FlaxBeitModel"),zDt.forEach(t),JDr=r(_Oe," (BEiT model)"),_Oe.forEach(t),YDr=i(ae),i3=n(ae,"LI",{});var uOe=s(i3);RCe=n(uOe,"STRONG",{});var QDt=s(RCe);KDr=r(QDt,"bert"),QDt.forEach(t),ZDr=r(uOe," \u2014 "),lee=n(uOe,"A",{href:!0});var WDt=s(lee);eGr=r(WDt,"FlaxBertModel"),WDt.forEach(t),oGr=r(uOe," (BERT model)"),uOe.forEach(t),rGr=i(ae),d3=n(ae,"LI",{});var bOe=s(d3);PCe=n(bOe,"STRONG",{});var HDt=s(PCe);tGr=r(HDt,"big_bird"),HDt.forEach(t),aGr=r(bOe," \u2014 "),iee=n(bOe,"A",{href:!0});var UDt=s(iee);nGr=r(UDt,"FlaxBigBirdModel"),UDt.forEach(t),sGr=r(bOe," (BigBird model)"),bOe.forEach(t),lGr=i(ae),c3=n(ae,"LI",{});var vOe=s(c3);BCe=n(vOe,"STRONG",{});var JDt=s(BCe);iGr=r(JDt,"blenderbot"),JDt.forEach(t),dGr=r(vOe," \u2014 "),dee=n(vOe,"A",{href:!0});var YDt=s(dee);cGr=r(YDt,"FlaxBlenderbotModel"),YDt.forEach(t),fGr=r(vOe," (Blenderbot model)"),vOe.forEach(t),mGr=i(ae),f3=n(ae,"LI",{});var FOe=s(f3);ICe=n(FOe,"STRONG",{});var KDt=s(ICe);gGr=r(KDt,"blenderbot-small"),KDt.forEach(t),hGr=r(FOe," \u2014 "),cee=n(FOe,"A",{href:!0});var ZDt=s(cee);pGr=r(ZDt,"FlaxBlenderbotSmallModel"),ZDt.forEach(t),_Gr=r(FOe," (BlenderbotSmall model)"),FOe.forEach(t),uGr=i(ae),m3=n(ae,"LI",{});var TOe=s(m3);NCe=n(TOe,"STRONG",{});var eGt=s(NCe);bGr=r(eGt,"clip"),eGt.forEach(t),vGr=r(TOe," \u2014 "),fee=n(TOe,"A",{href:!0});var oGt=s(fee);FGr=r(oGt,"FlaxCLIPModel"),oGt.forEach(t),TGr=r(TOe," (CLIP model)"),TOe.forEach(t),MGr=i(ae),g3=n(ae,"LI",{});var MOe=s(g3);qCe=n(MOe,"STRONG",{});var rGt=s(qCe);EGr=r(rGt,"distilbert"),rGt.forEach(t),CGr=r(MOe," \u2014 "),mee=n(MOe,"A",{href:!0});var tGt=s(mee);wGr=r(tGt,"FlaxDistilBertModel"),tGt.forEach(t),AGr=r(MOe," (DistilBERT model)"),MOe.forEach(t),LGr=i(ae),h3=n(ae,"LI",{});var EOe=s(h3);jCe=n(EOe,"STRONG",{});var aGt=s(jCe);yGr=r(aGt,"electra"),aGt.forEach(t),xGr=r(EOe," \u2014 "),gee=n(EOe,"A",{href:!0});var nGt=s(gee);$Gr=r(nGt,"FlaxElectraModel"),nGt.forEach(t),kGr=r(EOe," (ELECTRA model)"),EOe.forEach(t),SGr=i(ae),p3=n(ae,"LI",{});var COe=s(p3);DCe=n(COe,"STRONG",{});var sGt=s(DCe);RGr=r(sGt,"gpt2"),sGt.forEach(t),PGr=r(COe," \u2014 "),hee=n(COe,"A",{href:!0});var lGt=s(hee);BGr=r(lGt,"FlaxGPT2Model"),lGt.forEach(t),IGr=r(COe," (OpenAI GPT-2 model)"),COe.forEach(t),NGr=i(ae),_3=n(ae,"LI",{});var wOe=s(_3);GCe=n(wOe,"STRONG",{});var iGt=s(GCe);qGr=r(iGt,"gpt_neo"),iGt.forEach(t),jGr=r(wOe," \u2014 "),pee=n(wOe,"A",{href:!0});var dGt=s(pee);DGr=r(dGt,"FlaxGPTNeoModel"),dGt.forEach(t),GGr=r(wOe," (GPT Neo model)"),wOe.forEach(t),OGr=i(ae),u3=n(ae,"LI",{});var AOe=s(u3);OCe=n(AOe,"STRONG",{});var cGt=s(OCe);VGr=r(cGt,"gptj"),cGt.forEach(t),XGr=r(AOe," \u2014 "),_ee=n(AOe,"A",{href:!0});var fGt=s(_ee);zGr=r(fGt,"FlaxGPTJModel"),fGt.forEach(t),QGr=r(AOe," (GPT-J model)"),AOe.forEach(t),WGr=i(ae),b3=n(ae,"LI",{});var LOe=s(b3);VCe=n(LOe,"STRONG",{});var mGt=s(VCe);HGr=r(mGt,"longt5"),mGt.forEach(t),UGr=r(LOe," \u2014 "),uee=n(LOe,"A",{href:!0});var gGt=s(uee);JGr=r(gGt,"FlaxLongT5Model"),gGt.forEach(t),YGr=r(LOe," (LongT5 model)"),LOe.forEach(t),KGr=i(ae),v3=n(ae,"LI",{});var yOe=s(v3);XCe=n(yOe,"STRONG",{});var hGt=s(XCe);ZGr=r(hGt,"marian"),hGt.forEach(t),eOr=r(yOe," \u2014 "),bee=n(yOe,"A",{href:!0});var pGt=s(bee);oOr=r(pGt,"FlaxMarianModel"),pGt.forEach(t),rOr=r(yOe," (Marian model)"),yOe.forEach(t),tOr=i(ae),F3=n(ae,"LI",{});var xOe=s(F3);zCe=n(xOe,"STRONG",{});var _Gt=s(zCe);aOr=r(_Gt,"mbart"),_Gt.forEach(t),nOr=r(xOe," \u2014 "),vee=n(xOe,"A",{href:!0});var uGt=s(vee);sOr=r(uGt,"FlaxMBartModel"),uGt.forEach(t),lOr=r(xOe," (mBART model)"),xOe.forEach(t),iOr=i(ae),T3=n(ae,"LI",{});var $Oe=s(T3);QCe=n($Oe,"STRONG",{});var bGt=s(QCe);dOr=r(bGt,"mt5"),bGt.forEach(t),cOr=r($Oe," \u2014 "),Fee=n($Oe,"A",{href:!0});var vGt=s(Fee);fOr=r(vGt,"FlaxMT5Model"),vGt.forEach(t),mOr=r($Oe," (MT5 model)"),$Oe.forEach(t),gOr=i(ae),M3=n(ae,"LI",{});var kOe=s(M3);WCe=n(kOe,"STRONG",{});var FGt=s(WCe);hOr=r(FGt,"opt"),FGt.forEach(t),pOr=r(kOe," \u2014 "),Tee=n(kOe,"A",{href:!0});var TGt=s(Tee);_Or=r(TGt,"FlaxOPTModel"),TGt.forEach(t),uOr=r(kOe," (OPT model)"),kOe.forEach(t),bOr=i(ae),E3=n(ae,"LI",{});var SOe=s(E3);HCe=n(SOe,"STRONG",{});var MGt=s(HCe);vOr=r(MGt,"pegasus"),MGt.forEach(t),FOr=r(SOe," \u2014 "),Mee=n(SOe,"A",{href:!0});var EGt=s(Mee);TOr=r(EGt,"FlaxPegasusModel"),EGt.forEach(t),MOr=r(SOe," (Pegasus model)"),SOe.forEach(t),EOr=i(ae),C3=n(ae,"LI",{});var ROe=s(C3);UCe=n(ROe,"STRONG",{});var CGt=s(UCe);COr=r(CGt,"roberta"),CGt.forEach(t),wOr=r(ROe," \u2014 "),Eee=n(ROe,"A",{href:!0});var wGt=s(Eee);AOr=r(wGt,"FlaxRobertaModel"),wGt.forEach(t),LOr=r(ROe," (RoBERTa model)"),ROe.forEach(t),yOr=i(ae),w3=n(ae,"LI",{});var POe=s(w3);JCe=n(POe,"STRONG",{});var AGt=s(JCe);xOr=r(AGt,"roformer"),AGt.forEach(t),$Or=r(POe," \u2014 "),Cee=n(POe,"A",{href:!0});var LGt=s(Cee);kOr=r(LGt,"FlaxRoFormerModel"),LGt.forEach(t),SOr=r(POe," (RoFormer model)"),POe.forEach(t),ROr=i(ae),A3=n(ae,"LI",{});var BOe=s(A3);YCe=n(BOe,"STRONG",{});var yGt=s(YCe);POr=r(yGt,"t5"),yGt.forEach(t),BOr=r(BOe," \u2014 "),wee=n(BOe,"A",{href:!0});var xGt=s(wee);IOr=r(xGt,"FlaxT5Model"),xGt.forEach(t),NOr=r(BOe," (T5 model)"),BOe.forEach(t),qOr=i(ae),L3=n(ae,"LI",{});var IOe=s(L3);KCe=n(IOe,"STRONG",{});var $Gt=s(KCe);jOr=r($Gt,"vision-text-dual-encoder"),$Gt.forEach(t),DOr=r(IOe," \u2014 "),Aee=n(IOe,"A",{href:!0});var kGt=s(Aee);GOr=r(kGt,"FlaxVisionTextDualEncoderModel"),kGt.forEach(t),OOr=r(IOe," (VisionTextDualEncoder model)"),IOe.forEach(t),VOr=i(ae),y3=n(ae,"LI",{});var NOe=s(y3);ZCe=n(NOe,"STRONG",{});var SGt=s(ZCe);XOr=r(SGt,"vit"),SGt.forEach(t),zOr=r(NOe," \u2014 "),Lee=n(NOe,"A",{href:!0});var RGt=s(Lee);QOr=r(RGt,"FlaxViTModel"),RGt.forEach(t),WOr=r(NOe," (ViT model)"),NOe.forEach(t),HOr=i(ae),x3=n(ae,"LI",{});var qOe=s(x3);e3e=n(qOe,"STRONG",{});var PGt=s(e3e);UOr=r(PGt,"wav2vec2"),PGt.forEach(t),JOr=r(qOe," \u2014 "),yee=n(qOe,"A",{href:!0});var BGt=s(yee);YOr=r(BGt,"FlaxWav2Vec2Model"),BGt.forEach(t),KOr=r(qOe," (Wav2Vec2 model)"),qOe.forEach(t),ZOr=i(ae),$3=n(ae,"LI",{});var jOe=s($3);o3e=n(jOe,"STRONG",{});var IGt=s(o3e);eVr=r(IGt,"xglm"),IGt.forEach(t),oVr=r(jOe," \u2014 "),xee=n(jOe,"A",{href:!0});var NGt=s(xee);rVr=r(NGt,"FlaxXGLMModel"),NGt.forEach(t),tVr=r(jOe," (XGLM model)"),jOe.forEach(t),aVr=i(ae),k3=n(ae,"LI",{});var DOe=s(k3);r3e=n(DOe,"STRONG",{});var qGt=s(r3e);nVr=r(qGt,"xlm-roberta"),qGt.forEach(t),sVr=r(DOe," \u2014 "),$ee=n(DOe,"A",{href:!0});var jGt=s($ee);lVr=r(jGt,"FlaxXLMRobertaModel"),jGt.forEach(t),iVr=r(DOe," (XLM-RoBERTa model)"),DOe.forEach(t),ae.forEach(t),dVr=i(ai),T(S3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Zze=i(f),Jc=n(f,"H2",{class:!0});var iHe=s(Jc);R3=n(iHe,"A",{id:!0,class:!0,href:!0});var DGt=s(R3);t3e=n(DGt,"SPAN",{});var GGt=s(t3e);T(b$.$$.fragment,GGt),GGt.forEach(t),DGt.forEach(t),cVr=i(iHe),a3e=n(iHe,"SPAN",{});var OGt=s(a3e);fVr=r(OGt,"FlaxAutoModelForCausalLM"),OGt.forEach(t),iHe.forEach(t),eQe=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(v$.$$.fragment,ni),mVr=i(ni),Yc=n(ni,"P",{});var cae=s(Yc);gVr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kee=n(cae,"A",{href:!0});var VGt=s(kee);hVr=r(VGt,"from_pretrained()"),VGt.forEach(t),pVr=r(cae," class method or the "),See=n(cae,"A",{href:!0});var XGt=s(See);_Vr=r(XGt,"from_config()"),XGt.forEach(t),uVr=r(cae,` class
method.`),cae.forEach(t),bVr=i(ni),F$=n(ni,"P",{});var dHe=s(F$);vVr=r(dHe,"This class cannot be instantiated directly using "),n3e=n(dHe,"CODE",{});var zGt=s(n3e);FVr=r(zGt,"__init__()"),zGt.forEach(t),TVr=r(dHe," (throws an error)."),dHe.forEach(t),MVr=i(ni),Ht=n(ni,"DIV",{class:!0});var qA=s(Ht);T(T$.$$.fragment,qA),EVr=i(qA),s3e=n(qA,"P",{});var QGt=s(s3e);CVr=r(QGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QGt.forEach(t),wVr=i(qA),Kc=n(qA,"P",{});var fae=s(Kc);AVr=r(fae,`Note:
Loading a model from its configuration file does `),l3e=n(fae,"STRONG",{});var WGt=s(l3e);LVr=r(WGt,"not"),WGt.forEach(t),yVr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(fae,"A",{href:!0});var HGt=s(Ree);xVr=r(HGt,"from_pretrained()"),HGt.forEach(t),$Vr=r(fae," to load the model weights."),fae.forEach(t),kVr=i(qA),T(P3.$$.fragment,qA),qA.forEach(t),SVr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(M$.$$.fragment,si),RVr=i(si),i3e=n(si,"P",{});var UGt=s(i3e);PVr=r(UGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UGt.forEach(t),BVr=i(si),En=n(si,"P",{});var jA=s(En);IVr=r(jA,"The model class to instantiate is selected based on the "),d3e=n(jA,"CODE",{});var JGt=s(d3e);NVr=r(JGt,"model_type"),JGt.forEach(t),qVr=r(jA,` property of the config object (either
passed as an argument or loaded from `),c3e=n(jA,"CODE",{});var YGt=s(c3e);jVr=r(YGt,"pretrained_model_name_or_path"),YGt.forEach(t),DVr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(jA,"CODE",{});var KGt=s(f3e);GVr=r(KGt,"pretrained_model_name_or_path"),KGt.forEach(t),OVr=r(jA,":"),jA.forEach(t),VVr=i(si),xe=n(si,"UL",{});var Ne=s(xe);B3=n(Ne,"LI",{});var GOe=s(B3);m3e=n(GOe,"STRONG",{});var ZGt=s(m3e);XVr=r(ZGt,"bart"),ZGt.forEach(t),zVr=r(GOe," \u2014 "),Pee=n(GOe,"A",{href:!0});var eOt=s(Pee);QVr=r(eOt,"FlaxBartForCausalLM"),eOt.forEach(t),WVr=r(GOe," (BART model)"),GOe.forEach(t),HVr=i(Ne),I3=n(Ne,"LI",{});var OOe=s(I3);g3e=n(OOe,"STRONG",{});var oOt=s(g3e);UVr=r(oOt,"bert"),oOt.forEach(t),JVr=r(OOe," \u2014 "),Bee=n(OOe,"A",{href:!0});var rOt=s(Bee);YVr=r(rOt,"FlaxBertForCausalLM"),rOt.forEach(t),KVr=r(OOe," (BERT model)"),OOe.forEach(t),ZVr=i(Ne),N3=n(Ne,"LI",{});var VOe=s(N3);h3e=n(VOe,"STRONG",{});var tOt=s(h3e);eXr=r(tOt,"big_bird"),tOt.forEach(t),oXr=r(VOe," \u2014 "),Iee=n(VOe,"A",{href:!0});var aOt=s(Iee);rXr=r(aOt,"FlaxBigBirdForCausalLM"),aOt.forEach(t),tXr=r(VOe," (BigBird model)"),VOe.forEach(t),aXr=i(Ne),q3=n(Ne,"LI",{});var XOe=s(q3);p3e=n(XOe,"STRONG",{});var nOt=s(p3e);nXr=r(nOt,"electra"),nOt.forEach(t),sXr=r(XOe," \u2014 "),Nee=n(XOe,"A",{href:!0});var sOt=s(Nee);lXr=r(sOt,"FlaxElectraForCausalLM"),sOt.forEach(t),iXr=r(XOe," (ELECTRA model)"),XOe.forEach(t),dXr=i(Ne),j3=n(Ne,"LI",{});var zOe=s(j3);_3e=n(zOe,"STRONG",{});var lOt=s(_3e);cXr=r(lOt,"gpt2"),lOt.forEach(t),fXr=r(zOe," \u2014 "),qee=n(zOe,"A",{href:!0});var iOt=s(qee);mXr=r(iOt,"FlaxGPT2LMHeadModel"),iOt.forEach(t),gXr=r(zOe," (OpenAI GPT-2 model)"),zOe.forEach(t),hXr=i(Ne),D3=n(Ne,"LI",{});var QOe=s(D3);u3e=n(QOe,"STRONG",{});var dOt=s(u3e);pXr=r(dOt,"gpt_neo"),dOt.forEach(t),_Xr=r(QOe," \u2014 "),jee=n(QOe,"A",{href:!0});var cOt=s(jee);uXr=r(cOt,"FlaxGPTNeoForCausalLM"),cOt.forEach(t),bXr=r(QOe," (GPT Neo model)"),QOe.forEach(t),vXr=i(Ne),G3=n(Ne,"LI",{});var WOe=s(G3);b3e=n(WOe,"STRONG",{});var fOt=s(b3e);FXr=r(fOt,"gptj"),fOt.forEach(t),TXr=r(WOe," \u2014 "),Dee=n(WOe,"A",{href:!0});var mOt=s(Dee);MXr=r(mOt,"FlaxGPTJForCausalLM"),mOt.forEach(t),EXr=r(WOe," (GPT-J model)"),WOe.forEach(t),CXr=i(Ne),O3=n(Ne,"LI",{});var HOe=s(O3);v3e=n(HOe,"STRONG",{});var gOt=s(v3e);wXr=r(gOt,"opt"),gOt.forEach(t),AXr=r(HOe," \u2014 "),Gee=n(HOe,"A",{href:!0});var hOt=s(Gee);LXr=r(hOt,"FlaxOPTForCausalLM"),hOt.forEach(t),yXr=r(HOe," (OPT model)"),HOe.forEach(t),xXr=i(Ne),V3=n(Ne,"LI",{});var UOe=s(V3);F3e=n(UOe,"STRONG",{});var pOt=s(F3e);$Xr=r(pOt,"roberta"),pOt.forEach(t),kXr=r(UOe," \u2014 "),Oee=n(UOe,"A",{href:!0});var _Ot=s(Oee);SXr=r(_Ot,"FlaxRobertaForCausalLM"),_Ot.forEach(t),RXr=r(UOe," (RoBERTa model)"),UOe.forEach(t),PXr=i(Ne),X3=n(Ne,"LI",{});var JOe=s(X3);T3e=n(JOe,"STRONG",{});var uOt=s(T3e);BXr=r(uOt,"xglm"),uOt.forEach(t),IXr=r(JOe," \u2014 "),Vee=n(JOe,"A",{href:!0});var bOt=s(Vee);NXr=r(bOt,"FlaxXGLMForCausalLM"),bOt.forEach(t),qXr=r(JOe," (XGLM model)"),JOe.forEach(t),Ne.forEach(t),jXr=i(si),T(z3.$$.fragment,si),si.forEach(t),ni.forEach(t),oQe=i(f),Zc=n(f,"H2",{class:!0});var cHe=s(Zc);Q3=n(cHe,"A",{id:!0,class:!0,href:!0});var vOt=s(Q3);M3e=n(vOt,"SPAN",{});var FOt=s(M3e);T(E$.$$.fragment,FOt),FOt.forEach(t),vOt.forEach(t),DXr=i(cHe),E3e=n(cHe,"SPAN",{});var TOt=s(E3e);GXr=r(TOt,"FlaxAutoModelForPreTraining"),TOt.forEach(t),cHe.forEach(t),rQe=i(f),ur=n(f,"DIV",{class:!0});var li=s(ur);T(C$.$$.fragment,li),OXr=i(li),ef=n(li,"P",{});var mae=s(ef);VXr=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xee=n(mae,"A",{href:!0});var MOt=s(Xee);XXr=r(MOt,"from_pretrained()"),MOt.forEach(t),zXr=r(mae," class method or the "),zee=n(mae,"A",{href:!0});var EOt=s(zee);QXr=r(EOt,"from_config()"),EOt.forEach(t),WXr=r(mae,` class
method.`),mae.forEach(t),HXr=i(li),w$=n(li,"P",{});var fHe=s(w$);UXr=r(fHe,"This class cannot be instantiated directly using "),C3e=n(fHe,"CODE",{});var COt=s(C3e);JXr=r(COt,"__init__()"),COt.forEach(t),YXr=r(fHe," (throws an error)."),fHe.forEach(t),KXr=i(li),Ut=n(li,"DIV",{class:!0});var DA=s(Ut);T(A$.$$.fragment,DA),ZXr=i(DA),w3e=n(DA,"P",{});var wOt=s(w3e);ezr=r(wOt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wOt.forEach(t),ozr=i(DA),of=n(DA,"P",{});var gae=s(of);rzr=r(gae,`Note:
Loading a model from its configuration file does `),A3e=n(gae,"STRONG",{});var AOt=s(A3e);tzr=r(AOt,"not"),AOt.forEach(t),azr=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(gae,"A",{href:!0});var LOt=s(Qee);nzr=r(LOt,"from_pretrained()"),LOt.forEach(t),szr=r(gae," to load the model weights."),gae.forEach(t),lzr=i(DA),T(W3.$$.fragment,DA),DA.forEach(t),izr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(L$.$$.fragment,ii),dzr=i(ii),L3e=n(ii,"P",{});var yOt=s(L3e);czr=r(yOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yOt.forEach(t),fzr=i(ii),Cn=n(ii,"P",{});var GA=s(Cn);mzr=r(GA,"The model class to instantiate is selected based on the "),y3e=n(GA,"CODE",{});var xOt=s(y3e);gzr=r(xOt,"model_type"),xOt.forEach(t),hzr=r(GA,` property of the config object (either
passed as an argument or loaded from `),x3e=n(GA,"CODE",{});var $Ot=s(x3e);pzr=r($Ot,"pretrained_model_name_or_path"),$Ot.forEach(t),_zr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(GA,"CODE",{});var kOt=s($3e);uzr=r(kOt,"pretrained_model_name_or_path"),kOt.forEach(t),bzr=r(GA,":"),GA.forEach(t),vzr=i(ii),Ee=n(ii,"UL",{});var we=s(Ee);H3=n(we,"LI",{});var YOe=s(H3);k3e=n(YOe,"STRONG",{});var SOt=s(k3e);Fzr=r(SOt,"albert"),SOt.forEach(t),Tzr=r(YOe," \u2014 "),Wee=n(YOe,"A",{href:!0});var ROt=s(Wee);Mzr=r(ROt,"FlaxAlbertForPreTraining"),ROt.forEach(t),Ezr=r(YOe," (ALBERT model)"),YOe.forEach(t),Czr=i(we),U3=n(we,"LI",{});var KOe=s(U3);S3e=n(KOe,"STRONG",{});var POt=s(S3e);wzr=r(POt,"bart"),POt.forEach(t),Azr=r(KOe," \u2014 "),Hee=n(KOe,"A",{href:!0});var BOt=s(Hee);Lzr=r(BOt,"FlaxBartForConditionalGeneration"),BOt.forEach(t),yzr=r(KOe," (BART model)"),KOe.forEach(t),xzr=i(we),J3=n(we,"LI",{});var ZOe=s(J3);R3e=n(ZOe,"STRONG",{});var IOt=s(R3e);$zr=r(IOt,"bert"),IOt.forEach(t),kzr=r(ZOe," \u2014 "),Uee=n(ZOe,"A",{href:!0});var NOt=s(Uee);Szr=r(NOt,"FlaxBertForPreTraining"),NOt.forEach(t),Rzr=r(ZOe," (BERT model)"),ZOe.forEach(t),Pzr=i(we),Y3=n(we,"LI",{});var eVe=s(Y3);P3e=n(eVe,"STRONG",{});var qOt=s(P3e);Bzr=r(qOt,"big_bird"),qOt.forEach(t),Izr=r(eVe," \u2014 "),Jee=n(eVe,"A",{href:!0});var jOt=s(Jee);Nzr=r(jOt,"FlaxBigBirdForPreTraining"),jOt.forEach(t),qzr=r(eVe," (BigBird model)"),eVe.forEach(t),jzr=i(we),K3=n(we,"LI",{});var oVe=s(K3);B3e=n(oVe,"STRONG",{});var DOt=s(B3e);Dzr=r(DOt,"electra"),DOt.forEach(t),Gzr=r(oVe," \u2014 "),Yee=n(oVe,"A",{href:!0});var GOt=s(Yee);Ozr=r(GOt,"FlaxElectraForPreTraining"),GOt.forEach(t),Vzr=r(oVe," (ELECTRA model)"),oVe.forEach(t),Xzr=i(we),Z3=n(we,"LI",{});var rVe=s(Z3);I3e=n(rVe,"STRONG",{});var OOt=s(I3e);zzr=r(OOt,"longt5"),OOt.forEach(t),Qzr=r(rVe," \u2014 "),Kee=n(rVe,"A",{href:!0});var VOt=s(Kee);Wzr=r(VOt,"FlaxLongT5ForConditionalGeneration"),VOt.forEach(t),Hzr=r(rVe," (LongT5 model)"),rVe.forEach(t),Uzr=i(we),e5=n(we,"LI",{});var tVe=s(e5);N3e=n(tVe,"STRONG",{});var XOt=s(N3e);Jzr=r(XOt,"mbart"),XOt.forEach(t),Yzr=r(tVe," \u2014 "),Zee=n(tVe,"A",{href:!0});var zOt=s(Zee);Kzr=r(zOt,"FlaxMBartForConditionalGeneration"),zOt.forEach(t),Zzr=r(tVe," (mBART model)"),tVe.forEach(t),eQr=i(we),o5=n(we,"LI",{});var aVe=s(o5);q3e=n(aVe,"STRONG",{});var QOt=s(q3e);oQr=r(QOt,"mt5"),QOt.forEach(t),rQr=r(aVe," \u2014 "),eoe=n(aVe,"A",{href:!0});var WOt=s(eoe);tQr=r(WOt,"FlaxMT5ForConditionalGeneration"),WOt.forEach(t),aQr=r(aVe," (MT5 model)"),aVe.forEach(t),nQr=i(we),r5=n(we,"LI",{});var nVe=s(r5);j3e=n(nVe,"STRONG",{});var HOt=s(j3e);sQr=r(HOt,"roberta"),HOt.forEach(t),lQr=r(nVe," \u2014 "),ooe=n(nVe,"A",{href:!0});var UOt=s(ooe);iQr=r(UOt,"FlaxRobertaForMaskedLM"),UOt.forEach(t),dQr=r(nVe," (RoBERTa model)"),nVe.forEach(t),cQr=i(we),t5=n(we,"LI",{});var sVe=s(t5);D3e=n(sVe,"STRONG",{});var JOt=s(D3e);fQr=r(JOt,"roformer"),JOt.forEach(t),mQr=r(sVe," \u2014 "),roe=n(sVe,"A",{href:!0});var YOt=s(roe);gQr=r(YOt,"FlaxRoFormerForMaskedLM"),YOt.forEach(t),hQr=r(sVe," (RoFormer model)"),sVe.forEach(t),pQr=i(we),a5=n(we,"LI",{});var lVe=s(a5);G3e=n(lVe,"STRONG",{});var KOt=s(G3e);_Qr=r(KOt,"t5"),KOt.forEach(t),uQr=r(lVe," \u2014 "),toe=n(lVe,"A",{href:!0});var ZOt=s(toe);bQr=r(ZOt,"FlaxT5ForConditionalGeneration"),ZOt.forEach(t),vQr=r(lVe," (T5 model)"),lVe.forEach(t),FQr=i(we),n5=n(we,"LI",{});var iVe=s(n5);O3e=n(iVe,"STRONG",{});var eVt=s(O3e);TQr=r(eVt,"wav2vec2"),eVt.forEach(t),MQr=r(iVe," \u2014 "),aoe=n(iVe,"A",{href:!0});var oVt=s(aoe);EQr=r(oVt,"FlaxWav2Vec2ForPreTraining"),oVt.forEach(t),CQr=r(iVe," (Wav2Vec2 model)"),iVe.forEach(t),wQr=i(we),s5=n(we,"LI",{});var dVe=s(s5);V3e=n(dVe,"STRONG",{});var rVt=s(V3e);AQr=r(rVt,"xlm-roberta"),rVt.forEach(t),LQr=r(dVe," \u2014 "),noe=n(dVe,"A",{href:!0});var tVt=s(noe);yQr=r(tVt,"FlaxXLMRobertaForMaskedLM"),tVt.forEach(t),xQr=r(dVe," (XLM-RoBERTa model)"),dVe.forEach(t),we.forEach(t),$Qr=i(ii),T(l5.$$.fragment,ii),ii.forEach(t),li.forEach(t),tQe=i(f),rf=n(f,"H2",{class:!0});var mHe=s(rf);i5=n(mHe,"A",{id:!0,class:!0,href:!0});var aVt=s(i5);X3e=n(aVt,"SPAN",{});var nVt=s(X3e);T(y$.$$.fragment,nVt),nVt.forEach(t),aVt.forEach(t),kQr=i(mHe),z3e=n(mHe,"SPAN",{});var sVt=s(z3e);SQr=r(sVt,"FlaxAutoModelForMaskedLM"),sVt.forEach(t),mHe.forEach(t),aQe=i(f),br=n(f,"DIV",{class:!0});var di=s(br);T(x$.$$.fragment,di),RQr=i(di),tf=n(di,"P",{});var hae=s(tf);PQr=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),soe=n(hae,"A",{href:!0});var lVt=s(soe);BQr=r(lVt,"from_pretrained()"),lVt.forEach(t),IQr=r(hae," class method or the "),loe=n(hae,"A",{href:!0});var iVt=s(loe);NQr=r(iVt,"from_config()"),iVt.forEach(t),qQr=r(hae,` class
method.`),hae.forEach(t),jQr=i(di),$$=n(di,"P",{});var gHe=s($$);DQr=r(gHe,"This class cannot be instantiated directly using "),Q3e=n(gHe,"CODE",{});var dVt=s(Q3e);GQr=r(dVt,"__init__()"),dVt.forEach(t),OQr=r(gHe," (throws an error)."),gHe.forEach(t),VQr=i(di),Jt=n(di,"DIV",{class:!0});var OA=s(Jt);T(k$.$$.fragment,OA),XQr=i(OA),W3e=n(OA,"P",{});var cVt=s(W3e);zQr=r(cVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cVt.forEach(t),QQr=i(OA),af=n(OA,"P",{});var pae=s(af);WQr=r(pae,`Note:
Loading a model from its configuration file does `),H3e=n(pae,"STRONG",{});var fVt=s(H3e);HQr=r(fVt,"not"),fVt.forEach(t),UQr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(pae,"A",{href:!0});var mVt=s(ioe);JQr=r(mVt,"from_pretrained()"),mVt.forEach(t),YQr=r(pae," to load the model weights."),pae.forEach(t),KQr=i(OA),T(d5.$$.fragment,OA),OA.forEach(t),ZQr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(S$.$$.fragment,ci),eWr=i(ci),U3e=n(ci,"P",{});var gVt=s(U3e);oWr=r(gVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gVt.forEach(t),rWr=i(ci),wn=n(ci,"P",{});var VA=s(wn);tWr=r(VA,"The model class to instantiate is selected based on the "),J3e=n(VA,"CODE",{});var hVt=s(J3e);aWr=r(hVt,"model_type"),hVt.forEach(t),nWr=r(VA,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(VA,"CODE",{});var pVt=s(Y3e);sWr=r(pVt,"pretrained_model_name_or_path"),pVt.forEach(t),lWr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(VA,"CODE",{});var _Vt=s(K3e);iWr=r(_Vt,"pretrained_model_name_or_path"),_Vt.forEach(t),dWr=r(VA,":"),VA.forEach(t),cWr=i(ci),$e=n(ci,"UL",{});var qe=s($e);c5=n(qe,"LI",{});var cVe=s(c5);Z3e=n(cVe,"STRONG",{});var uVt=s(Z3e);fWr=r(uVt,"albert"),uVt.forEach(t),mWr=r(cVe," \u2014 "),doe=n(cVe,"A",{href:!0});var bVt=s(doe);gWr=r(bVt,"FlaxAlbertForMaskedLM"),bVt.forEach(t),hWr=r(cVe," (ALBERT model)"),cVe.forEach(t),pWr=i(qe),f5=n(qe,"LI",{});var fVe=s(f5);e5e=n(fVe,"STRONG",{});var vVt=s(e5e);_Wr=r(vVt,"bart"),vVt.forEach(t),uWr=r(fVe," \u2014 "),coe=n(fVe,"A",{href:!0});var FVt=s(coe);bWr=r(FVt,"FlaxBartForConditionalGeneration"),FVt.forEach(t),vWr=r(fVe," (BART model)"),fVe.forEach(t),FWr=i(qe),m5=n(qe,"LI",{});var mVe=s(m5);o5e=n(mVe,"STRONG",{});var TVt=s(o5e);TWr=r(TVt,"bert"),TVt.forEach(t),MWr=r(mVe," \u2014 "),foe=n(mVe,"A",{href:!0});var MVt=s(foe);EWr=r(MVt,"FlaxBertForMaskedLM"),MVt.forEach(t),CWr=r(mVe," (BERT model)"),mVe.forEach(t),wWr=i(qe),g5=n(qe,"LI",{});var gVe=s(g5);r5e=n(gVe,"STRONG",{});var EVt=s(r5e);AWr=r(EVt,"big_bird"),EVt.forEach(t),LWr=r(gVe," \u2014 "),moe=n(gVe,"A",{href:!0});var CVt=s(moe);yWr=r(CVt,"FlaxBigBirdForMaskedLM"),CVt.forEach(t),xWr=r(gVe," (BigBird model)"),gVe.forEach(t),$Wr=i(qe),h5=n(qe,"LI",{});var hVe=s(h5);t5e=n(hVe,"STRONG",{});var wVt=s(t5e);kWr=r(wVt,"distilbert"),wVt.forEach(t),SWr=r(hVe," \u2014 "),goe=n(hVe,"A",{href:!0});var AVt=s(goe);RWr=r(AVt,"FlaxDistilBertForMaskedLM"),AVt.forEach(t),PWr=r(hVe," (DistilBERT model)"),hVe.forEach(t),BWr=i(qe),p5=n(qe,"LI",{});var pVe=s(p5);a5e=n(pVe,"STRONG",{});var LVt=s(a5e);IWr=r(LVt,"electra"),LVt.forEach(t),NWr=r(pVe," \u2014 "),hoe=n(pVe,"A",{href:!0});var yVt=s(hoe);qWr=r(yVt,"FlaxElectraForMaskedLM"),yVt.forEach(t),jWr=r(pVe," (ELECTRA model)"),pVe.forEach(t),DWr=i(qe),_5=n(qe,"LI",{});var _Ve=s(_5);n5e=n(_Ve,"STRONG",{});var xVt=s(n5e);GWr=r(xVt,"mbart"),xVt.forEach(t),OWr=r(_Ve," \u2014 "),poe=n(_Ve,"A",{href:!0});var $Vt=s(poe);VWr=r($Vt,"FlaxMBartForConditionalGeneration"),$Vt.forEach(t),XWr=r(_Ve," (mBART model)"),_Ve.forEach(t),zWr=i(qe),u5=n(qe,"LI",{});var uVe=s(u5);s5e=n(uVe,"STRONG",{});var kVt=s(s5e);QWr=r(kVt,"roberta"),kVt.forEach(t),WWr=r(uVe," \u2014 "),_oe=n(uVe,"A",{href:!0});var SVt=s(_oe);HWr=r(SVt,"FlaxRobertaForMaskedLM"),SVt.forEach(t),UWr=r(uVe," (RoBERTa model)"),uVe.forEach(t),JWr=i(qe),b5=n(qe,"LI",{});var bVe=s(b5);l5e=n(bVe,"STRONG",{});var RVt=s(l5e);YWr=r(RVt,"roformer"),RVt.forEach(t),KWr=r(bVe," \u2014 "),uoe=n(bVe,"A",{href:!0});var PVt=s(uoe);ZWr=r(PVt,"FlaxRoFormerForMaskedLM"),PVt.forEach(t),eHr=r(bVe," (RoFormer model)"),bVe.forEach(t),oHr=i(qe),v5=n(qe,"LI",{});var vVe=s(v5);i5e=n(vVe,"STRONG",{});var BVt=s(i5e);rHr=r(BVt,"xlm-roberta"),BVt.forEach(t),tHr=r(vVe," \u2014 "),boe=n(vVe,"A",{href:!0});var IVt=s(boe);aHr=r(IVt,"FlaxXLMRobertaForMaskedLM"),IVt.forEach(t),nHr=r(vVe," (XLM-RoBERTa model)"),vVe.forEach(t),qe.forEach(t),sHr=i(ci),T(F5.$$.fragment,ci),ci.forEach(t),di.forEach(t),nQe=i(f),nf=n(f,"H2",{class:!0});var hHe=s(nf);T5=n(hHe,"A",{id:!0,class:!0,href:!0});var NVt=s(T5);d5e=n(NVt,"SPAN",{});var qVt=s(d5e);T(R$.$$.fragment,qVt),qVt.forEach(t),NVt.forEach(t),lHr=i(hHe),c5e=n(hHe,"SPAN",{});var jVt=s(c5e);iHr=r(jVt,"FlaxAutoModelForSeq2SeqLM"),jVt.forEach(t),hHe.forEach(t),sQe=i(f),vr=n(f,"DIV",{class:!0});var fi=s(vr);T(P$.$$.fragment,fi),dHr=i(fi),sf=n(fi,"P",{});var _ae=s(sf);cHr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),voe=n(_ae,"A",{href:!0});var DVt=s(voe);fHr=r(DVt,"from_pretrained()"),DVt.forEach(t),mHr=r(_ae," class method or the "),Foe=n(_ae,"A",{href:!0});var GVt=s(Foe);gHr=r(GVt,"from_config()"),GVt.forEach(t),hHr=r(_ae,` class
method.`),_ae.forEach(t),pHr=i(fi),B$=n(fi,"P",{});var pHe=s(B$);_Hr=r(pHe,"This class cannot be instantiated directly using "),f5e=n(pHe,"CODE",{});var OVt=s(f5e);uHr=r(OVt,"__init__()"),OVt.forEach(t),bHr=r(pHe," (throws an error)."),pHe.forEach(t),vHr=i(fi),Yt=n(fi,"DIV",{class:!0});var XA=s(Yt);T(I$.$$.fragment,XA),FHr=i(XA),m5e=n(XA,"P",{});var VVt=s(m5e);THr=r(VVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),VVt.forEach(t),MHr=i(XA),lf=n(XA,"P",{});var uae=s(lf);EHr=r(uae,`Note:
Loading a model from its configuration file does `),g5e=n(uae,"STRONG",{});var XVt=s(g5e);CHr=r(XVt,"not"),XVt.forEach(t),wHr=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(uae,"A",{href:!0});var zVt=s(Toe);AHr=r(zVt,"from_pretrained()"),zVt.forEach(t),LHr=r(uae," to load the model weights."),uae.forEach(t),yHr=i(XA),T(M5.$$.fragment,XA),XA.forEach(t),xHr=i(fi),Wr=n(fi,"DIV",{class:!0});var mi=s(Wr);T(N$.$$.fragment,mi),$Hr=i(mi),h5e=n(mi,"P",{});var QVt=s(h5e);kHr=r(QVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QVt.forEach(t),SHr=i(mi),An=n(mi,"P",{});var zA=s(An);RHr=r(zA,"The model class to instantiate is selected based on the "),p5e=n(zA,"CODE",{});var WVt=s(p5e);PHr=r(WVt,"model_type"),WVt.forEach(t),BHr=r(zA,` property of the config object (either
passed as an argument or loaded from `),_5e=n(zA,"CODE",{});var HVt=s(_5e);IHr=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),NHr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(zA,"CODE",{});var UVt=s(u5e);qHr=r(UVt,"pretrained_model_name_or_path"),UVt.forEach(t),jHr=r(zA,":"),zA.forEach(t),DHr=i(mi),ke=n(mi,"UL",{});var je=s(ke);E5=n(je,"LI",{});var FVe=s(E5);b5e=n(FVe,"STRONG",{});var JVt=s(b5e);GHr=r(JVt,"bart"),JVt.forEach(t),OHr=r(FVe," \u2014 "),Moe=n(FVe,"A",{href:!0});var YVt=s(Moe);VHr=r(YVt,"FlaxBartForConditionalGeneration"),YVt.forEach(t),XHr=r(FVe," (BART model)"),FVe.forEach(t),zHr=i(je),C5=n(je,"LI",{});var TVe=s(C5);v5e=n(TVe,"STRONG",{});var KVt=s(v5e);QHr=r(KVt,"blenderbot"),KVt.forEach(t),WHr=r(TVe," \u2014 "),Eoe=n(TVe,"A",{href:!0});var ZVt=s(Eoe);HHr=r(ZVt,"FlaxBlenderbotForConditionalGeneration"),ZVt.forEach(t),UHr=r(TVe," (Blenderbot model)"),TVe.forEach(t),JHr=i(je),w5=n(je,"LI",{});var MVe=s(w5);F5e=n(MVe,"STRONG",{});var eXt=s(F5e);YHr=r(eXt,"blenderbot-small"),eXt.forEach(t),KHr=r(MVe," \u2014 "),Coe=n(MVe,"A",{href:!0});var oXt=s(Coe);ZHr=r(oXt,"FlaxBlenderbotSmallForConditionalGeneration"),oXt.forEach(t),eUr=r(MVe," (BlenderbotSmall model)"),MVe.forEach(t),oUr=i(je),A5=n(je,"LI",{});var EVe=s(A5);T5e=n(EVe,"STRONG",{});var rXt=s(T5e);rUr=r(rXt,"encoder-decoder"),rXt.forEach(t),tUr=r(EVe," \u2014 "),woe=n(EVe,"A",{href:!0});var tXt=s(woe);aUr=r(tXt,"FlaxEncoderDecoderModel"),tXt.forEach(t),nUr=r(EVe," (Encoder decoder model)"),EVe.forEach(t),sUr=i(je),L5=n(je,"LI",{});var CVe=s(L5);M5e=n(CVe,"STRONG",{});var aXt=s(M5e);lUr=r(aXt,"longt5"),aXt.forEach(t),iUr=r(CVe," \u2014 "),Aoe=n(CVe,"A",{href:!0});var nXt=s(Aoe);dUr=r(nXt,"FlaxLongT5ForConditionalGeneration"),nXt.forEach(t),cUr=r(CVe," (LongT5 model)"),CVe.forEach(t),fUr=i(je),y5=n(je,"LI",{});var wVe=s(y5);E5e=n(wVe,"STRONG",{});var sXt=s(E5e);mUr=r(sXt,"marian"),sXt.forEach(t),gUr=r(wVe," \u2014 "),Loe=n(wVe,"A",{href:!0});var lXt=s(Loe);hUr=r(lXt,"FlaxMarianMTModel"),lXt.forEach(t),pUr=r(wVe," (Marian model)"),wVe.forEach(t),_Ur=i(je),x5=n(je,"LI",{});var AVe=s(x5);C5e=n(AVe,"STRONG",{});var iXt=s(C5e);uUr=r(iXt,"mbart"),iXt.forEach(t),bUr=r(AVe," \u2014 "),yoe=n(AVe,"A",{href:!0});var dXt=s(yoe);vUr=r(dXt,"FlaxMBartForConditionalGeneration"),dXt.forEach(t),FUr=r(AVe," (mBART model)"),AVe.forEach(t),TUr=i(je),$5=n(je,"LI",{});var LVe=s($5);w5e=n(LVe,"STRONG",{});var cXt=s(w5e);MUr=r(cXt,"mt5"),cXt.forEach(t),EUr=r(LVe," \u2014 "),xoe=n(LVe,"A",{href:!0});var fXt=s(xoe);CUr=r(fXt,"FlaxMT5ForConditionalGeneration"),fXt.forEach(t),wUr=r(LVe," (MT5 model)"),LVe.forEach(t),AUr=i(je),k5=n(je,"LI",{});var yVe=s(k5);A5e=n(yVe,"STRONG",{});var mXt=s(A5e);LUr=r(mXt,"pegasus"),mXt.forEach(t),yUr=r(yVe," \u2014 "),$oe=n(yVe,"A",{href:!0});var gXt=s($oe);xUr=r(gXt,"FlaxPegasusForConditionalGeneration"),gXt.forEach(t),$Ur=r(yVe," (Pegasus model)"),yVe.forEach(t),kUr=i(je),S5=n(je,"LI",{});var xVe=s(S5);L5e=n(xVe,"STRONG",{});var hXt=s(L5e);SUr=r(hXt,"t5"),hXt.forEach(t),RUr=r(xVe," \u2014 "),koe=n(xVe,"A",{href:!0});var pXt=s(koe);PUr=r(pXt,"FlaxT5ForConditionalGeneration"),pXt.forEach(t),BUr=r(xVe," (T5 model)"),xVe.forEach(t),je.forEach(t),IUr=i(mi),T(R5.$$.fragment,mi),mi.forEach(t),fi.forEach(t),lQe=i(f),df=n(f,"H2",{class:!0});var _He=s(df);P5=n(_He,"A",{id:!0,class:!0,href:!0});var _Xt=s(P5);y5e=n(_Xt,"SPAN",{});var uXt=s(y5e);T(q$.$$.fragment,uXt),uXt.forEach(t),_Xt.forEach(t),NUr=i(_He),x5e=n(_He,"SPAN",{});var bXt=s(x5e);qUr=r(bXt,"FlaxAutoModelForSequenceClassification"),bXt.forEach(t),_He.forEach(t),iQe=i(f),Fr=n(f,"DIV",{class:!0});var gi=s(Fr);T(j$.$$.fragment,gi),jUr=i(gi),cf=n(gi,"P",{});var bae=s(cf);DUr=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Soe=n(bae,"A",{href:!0});var vXt=s(Soe);GUr=r(vXt,"from_pretrained()"),vXt.forEach(t),OUr=r(bae," class method or the "),Roe=n(bae,"A",{href:!0});var FXt=s(Roe);VUr=r(FXt,"from_config()"),FXt.forEach(t),XUr=r(bae,` class
method.`),bae.forEach(t),zUr=i(gi),D$=n(gi,"P",{});var uHe=s(D$);QUr=r(uHe,"This class cannot be instantiated directly using "),$5e=n(uHe,"CODE",{});var TXt=s($5e);WUr=r(TXt,"__init__()"),TXt.forEach(t),HUr=r(uHe," (throws an error)."),uHe.forEach(t),UUr=i(gi),Kt=n(gi,"DIV",{class:!0});var QA=s(Kt);T(G$.$$.fragment,QA),JUr=i(QA),k5e=n(QA,"P",{});var MXt=s(k5e);YUr=r(MXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MXt.forEach(t),KUr=i(QA),ff=n(QA,"P",{});var vae=s(ff);ZUr=r(vae,`Note:
Loading a model from its configuration file does `),S5e=n(vae,"STRONG",{});var EXt=s(S5e);eJr=r(EXt,"not"),EXt.forEach(t),oJr=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=n(vae,"A",{href:!0});var CXt=s(Poe);rJr=r(CXt,"from_pretrained()"),CXt.forEach(t),tJr=r(vae," to load the model weights."),vae.forEach(t),aJr=i(QA),T(B5.$$.fragment,QA),QA.forEach(t),nJr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(O$.$$.fragment,hi),sJr=i(hi),R5e=n(hi,"P",{});var wXt=s(R5e);lJr=r(wXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wXt.forEach(t),iJr=i(hi),Ln=n(hi,"P",{});var WA=s(Ln);dJr=r(WA,"The model class to instantiate is selected based on the "),P5e=n(WA,"CODE",{});var AXt=s(P5e);cJr=r(AXt,"model_type"),AXt.forEach(t),fJr=r(WA,` property of the config object (either
passed as an argument or loaded from `),B5e=n(WA,"CODE",{});var LXt=s(B5e);mJr=r(LXt,"pretrained_model_name_or_path"),LXt.forEach(t),gJr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(WA,"CODE",{});var yXt=s(I5e);hJr=r(yXt,"pretrained_model_name_or_path"),yXt.forEach(t),pJr=r(WA,":"),WA.forEach(t),_Jr=i(hi),Se=n(hi,"UL",{});var De=s(Se);I5=n(De,"LI",{});var $Ve=s(I5);N5e=n($Ve,"STRONG",{});var xXt=s(N5e);uJr=r(xXt,"albert"),xXt.forEach(t),bJr=r($Ve," \u2014 "),Boe=n($Ve,"A",{href:!0});var $Xt=s(Boe);vJr=r($Xt,"FlaxAlbertForSequenceClassification"),$Xt.forEach(t),FJr=r($Ve," (ALBERT model)"),$Ve.forEach(t),TJr=i(De),N5=n(De,"LI",{});var kVe=s(N5);q5e=n(kVe,"STRONG",{});var kXt=s(q5e);MJr=r(kXt,"bart"),kXt.forEach(t),EJr=r(kVe," \u2014 "),Ioe=n(kVe,"A",{href:!0});var SXt=s(Ioe);CJr=r(SXt,"FlaxBartForSequenceClassification"),SXt.forEach(t),wJr=r(kVe," (BART model)"),kVe.forEach(t),AJr=i(De),q5=n(De,"LI",{});var SVe=s(q5);j5e=n(SVe,"STRONG",{});var RXt=s(j5e);LJr=r(RXt,"bert"),RXt.forEach(t),yJr=r(SVe," \u2014 "),Noe=n(SVe,"A",{href:!0});var PXt=s(Noe);xJr=r(PXt,"FlaxBertForSequenceClassification"),PXt.forEach(t),$Jr=r(SVe," (BERT model)"),SVe.forEach(t),kJr=i(De),j5=n(De,"LI",{});var RVe=s(j5);D5e=n(RVe,"STRONG",{});var BXt=s(D5e);SJr=r(BXt,"big_bird"),BXt.forEach(t),RJr=r(RVe," \u2014 "),qoe=n(RVe,"A",{href:!0});var IXt=s(qoe);PJr=r(IXt,"FlaxBigBirdForSequenceClassification"),IXt.forEach(t),BJr=r(RVe," (BigBird model)"),RVe.forEach(t),IJr=i(De),D5=n(De,"LI",{});var PVe=s(D5);G5e=n(PVe,"STRONG",{});var NXt=s(G5e);NJr=r(NXt,"distilbert"),NXt.forEach(t),qJr=r(PVe," \u2014 "),joe=n(PVe,"A",{href:!0});var qXt=s(joe);jJr=r(qXt,"FlaxDistilBertForSequenceClassification"),qXt.forEach(t),DJr=r(PVe," (DistilBERT model)"),PVe.forEach(t),GJr=i(De),G5=n(De,"LI",{});var BVe=s(G5);O5e=n(BVe,"STRONG",{});var jXt=s(O5e);OJr=r(jXt,"electra"),jXt.forEach(t),VJr=r(BVe," \u2014 "),Doe=n(BVe,"A",{href:!0});var DXt=s(Doe);XJr=r(DXt,"FlaxElectraForSequenceClassification"),DXt.forEach(t),zJr=r(BVe," (ELECTRA model)"),BVe.forEach(t),QJr=i(De),O5=n(De,"LI",{});var IVe=s(O5);V5e=n(IVe,"STRONG",{});var GXt=s(V5e);WJr=r(GXt,"mbart"),GXt.forEach(t),HJr=r(IVe," \u2014 "),Goe=n(IVe,"A",{href:!0});var OXt=s(Goe);UJr=r(OXt,"FlaxMBartForSequenceClassification"),OXt.forEach(t),JJr=r(IVe," (mBART model)"),IVe.forEach(t),YJr=i(De),V5=n(De,"LI",{});var NVe=s(V5);X5e=n(NVe,"STRONG",{});var VXt=s(X5e);KJr=r(VXt,"roberta"),VXt.forEach(t),ZJr=r(NVe," \u2014 "),Ooe=n(NVe,"A",{href:!0});var XXt=s(Ooe);eYr=r(XXt,"FlaxRobertaForSequenceClassification"),XXt.forEach(t),oYr=r(NVe," (RoBERTa model)"),NVe.forEach(t),rYr=i(De),X5=n(De,"LI",{});var qVe=s(X5);z5e=n(qVe,"STRONG",{});var zXt=s(z5e);tYr=r(zXt,"roformer"),zXt.forEach(t),aYr=r(qVe," \u2014 "),Voe=n(qVe,"A",{href:!0});var QXt=s(Voe);nYr=r(QXt,"FlaxRoFormerForSequenceClassification"),QXt.forEach(t),sYr=r(qVe," (RoFormer model)"),qVe.forEach(t),lYr=i(De),z5=n(De,"LI",{});var jVe=s(z5);Q5e=n(jVe,"STRONG",{});var WXt=s(Q5e);iYr=r(WXt,"xlm-roberta"),WXt.forEach(t),dYr=r(jVe," \u2014 "),Xoe=n(jVe,"A",{href:!0});var HXt=s(Xoe);cYr=r(HXt,"FlaxXLMRobertaForSequenceClassification"),HXt.forEach(t),fYr=r(jVe," (XLM-RoBERTa model)"),jVe.forEach(t),De.forEach(t),mYr=i(hi),T(Q5.$$.fragment,hi),hi.forEach(t),gi.forEach(t),dQe=i(f),mf=n(f,"H2",{class:!0});var bHe=s(mf);W5=n(bHe,"A",{id:!0,class:!0,href:!0});var UXt=s(W5);W5e=n(UXt,"SPAN",{});var JXt=s(W5e);T(V$.$$.fragment,JXt),JXt.forEach(t),UXt.forEach(t),gYr=i(bHe),H5e=n(bHe,"SPAN",{});var YXt=s(H5e);hYr=r(YXt,"FlaxAutoModelForQuestionAnswering"),YXt.forEach(t),bHe.forEach(t),cQe=i(f),Tr=n(f,"DIV",{class:!0});var pi=s(Tr);T(X$.$$.fragment,pi),pYr=i(pi),gf=n(pi,"P",{});var Fae=s(gf);_Yr=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zoe=n(Fae,"A",{href:!0});var KXt=s(zoe);uYr=r(KXt,"from_pretrained()"),KXt.forEach(t),bYr=r(Fae," class method or the "),Qoe=n(Fae,"A",{href:!0});var ZXt=s(Qoe);vYr=r(ZXt,"from_config()"),ZXt.forEach(t),FYr=r(Fae,` class
method.`),Fae.forEach(t),TYr=i(pi),z$=n(pi,"P",{});var vHe=s(z$);MYr=r(vHe,"This class cannot be instantiated directly using "),U5e=n(vHe,"CODE",{});var ezt=s(U5e);EYr=r(ezt,"__init__()"),ezt.forEach(t),CYr=r(vHe," (throws an error)."),vHe.forEach(t),wYr=i(pi),Zt=n(pi,"DIV",{class:!0});var HA=s(Zt);T(Q$.$$.fragment,HA),AYr=i(HA),J5e=n(HA,"P",{});var ozt=s(J5e);LYr=r(ozt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ozt.forEach(t),yYr=i(HA),hf=n(HA,"P",{});var Tae=s(hf);xYr=r(Tae,`Note:
Loading a model from its configuration file does `),Y5e=n(Tae,"STRONG",{});var rzt=s(Y5e);$Yr=r(rzt,"not"),rzt.forEach(t),kYr=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=n(Tae,"A",{href:!0});var tzt=s(Woe);SYr=r(tzt,"from_pretrained()"),tzt.forEach(t),RYr=r(Tae," to load the model weights."),Tae.forEach(t),PYr=i(HA),T(H5.$$.fragment,HA),HA.forEach(t),BYr=i(pi),Ur=n(pi,"DIV",{class:!0});var _i=s(Ur);T(W$.$$.fragment,_i),IYr=i(_i),K5e=n(_i,"P",{});var azt=s(K5e);NYr=r(azt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),azt.forEach(t),qYr=i(_i),yn=n(_i,"P",{});var UA=s(yn);jYr=r(UA,"The model class to instantiate is selected based on the "),Z5e=n(UA,"CODE",{});var nzt=s(Z5e);DYr=r(nzt,"model_type"),nzt.forEach(t),GYr=r(UA,` property of the config object (either
passed as an argument or loaded from `),e0e=n(UA,"CODE",{});var szt=s(e0e);OYr=r(szt,"pretrained_model_name_or_path"),szt.forEach(t),VYr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o0e=n(UA,"CODE",{});var lzt=s(o0e);XYr=r(lzt,"pretrained_model_name_or_path"),lzt.forEach(t),zYr=r(UA,":"),UA.forEach(t),QYr=i(_i),Re=n(_i,"UL",{});var Ge=s(Re);U5=n(Ge,"LI",{});var DVe=s(U5);r0e=n(DVe,"STRONG",{});var izt=s(r0e);WYr=r(izt,"albert"),izt.forEach(t),HYr=r(DVe," \u2014 "),Hoe=n(DVe,"A",{href:!0});var dzt=s(Hoe);UYr=r(dzt,"FlaxAlbertForQuestionAnswering"),dzt.forEach(t),JYr=r(DVe," (ALBERT model)"),DVe.forEach(t),YYr=i(Ge),J5=n(Ge,"LI",{});var GVe=s(J5);t0e=n(GVe,"STRONG",{});var czt=s(t0e);KYr=r(czt,"bart"),czt.forEach(t),ZYr=r(GVe," \u2014 "),Uoe=n(GVe,"A",{href:!0});var fzt=s(Uoe);eKr=r(fzt,"FlaxBartForQuestionAnswering"),fzt.forEach(t),oKr=r(GVe," (BART model)"),GVe.forEach(t),rKr=i(Ge),Y5=n(Ge,"LI",{});var OVe=s(Y5);a0e=n(OVe,"STRONG",{});var mzt=s(a0e);tKr=r(mzt,"bert"),mzt.forEach(t),aKr=r(OVe," \u2014 "),Joe=n(OVe,"A",{href:!0});var gzt=s(Joe);nKr=r(gzt,"FlaxBertForQuestionAnswering"),gzt.forEach(t),sKr=r(OVe," (BERT model)"),OVe.forEach(t),lKr=i(Ge),K5=n(Ge,"LI",{});var VVe=s(K5);n0e=n(VVe,"STRONG",{});var hzt=s(n0e);iKr=r(hzt,"big_bird"),hzt.forEach(t),dKr=r(VVe," \u2014 "),Yoe=n(VVe,"A",{href:!0});var pzt=s(Yoe);cKr=r(pzt,"FlaxBigBirdForQuestionAnswering"),pzt.forEach(t),fKr=r(VVe," (BigBird model)"),VVe.forEach(t),mKr=i(Ge),Z5=n(Ge,"LI",{});var XVe=s(Z5);s0e=n(XVe,"STRONG",{});var _zt=s(s0e);gKr=r(_zt,"distilbert"),_zt.forEach(t),hKr=r(XVe," \u2014 "),Koe=n(XVe,"A",{href:!0});var uzt=s(Koe);pKr=r(uzt,"FlaxDistilBertForQuestionAnswering"),uzt.forEach(t),_Kr=r(XVe," (DistilBERT model)"),XVe.forEach(t),uKr=i(Ge),e0=n(Ge,"LI",{});var zVe=s(e0);l0e=n(zVe,"STRONG",{});var bzt=s(l0e);bKr=r(bzt,"electra"),bzt.forEach(t),vKr=r(zVe," \u2014 "),Zoe=n(zVe,"A",{href:!0});var vzt=s(Zoe);FKr=r(vzt,"FlaxElectraForQuestionAnswering"),vzt.forEach(t),TKr=r(zVe," (ELECTRA model)"),zVe.forEach(t),MKr=i(Ge),o0=n(Ge,"LI",{});var QVe=s(o0);i0e=n(QVe,"STRONG",{});var Fzt=s(i0e);EKr=r(Fzt,"mbart"),Fzt.forEach(t),CKr=r(QVe," \u2014 "),ere=n(QVe,"A",{href:!0});var Tzt=s(ere);wKr=r(Tzt,"FlaxMBartForQuestionAnswering"),Tzt.forEach(t),AKr=r(QVe," (mBART model)"),QVe.forEach(t),LKr=i(Ge),r0=n(Ge,"LI",{});var WVe=s(r0);d0e=n(WVe,"STRONG",{});var Mzt=s(d0e);yKr=r(Mzt,"roberta"),Mzt.forEach(t),xKr=r(WVe," \u2014 "),ore=n(WVe,"A",{href:!0});var Ezt=s(ore);$Kr=r(Ezt,"FlaxRobertaForQuestionAnswering"),Ezt.forEach(t),kKr=r(WVe," (RoBERTa model)"),WVe.forEach(t),SKr=i(Ge),t0=n(Ge,"LI",{});var HVe=s(t0);c0e=n(HVe,"STRONG",{});var Czt=s(c0e);RKr=r(Czt,"roformer"),Czt.forEach(t),PKr=r(HVe," \u2014 "),rre=n(HVe,"A",{href:!0});var wzt=s(rre);BKr=r(wzt,"FlaxRoFormerForQuestionAnswering"),wzt.forEach(t),IKr=r(HVe," (RoFormer model)"),HVe.forEach(t),NKr=i(Ge),a0=n(Ge,"LI",{});var UVe=s(a0);f0e=n(UVe,"STRONG",{});var Azt=s(f0e);qKr=r(Azt,"xlm-roberta"),Azt.forEach(t),jKr=r(UVe," \u2014 "),tre=n(UVe,"A",{href:!0});var Lzt=s(tre);DKr=r(Lzt,"FlaxXLMRobertaForQuestionAnswering"),Lzt.forEach(t),GKr=r(UVe," (XLM-RoBERTa model)"),UVe.forEach(t),Ge.forEach(t),OKr=i(_i),T(n0.$$.fragment,_i),_i.forEach(t),pi.forEach(t),fQe=i(f),pf=n(f,"H2",{class:!0});var FHe=s(pf);s0=n(FHe,"A",{id:!0,class:!0,href:!0});var yzt=s(s0);m0e=n(yzt,"SPAN",{});var xzt=s(m0e);T(H$.$$.fragment,xzt),xzt.forEach(t),yzt.forEach(t),VKr=i(FHe),g0e=n(FHe,"SPAN",{});var $zt=s(g0e);XKr=r($zt,"FlaxAutoModelForTokenClassification"),$zt.forEach(t),FHe.forEach(t),mQe=i(f),Mr=n(f,"DIV",{class:!0});var ui=s(Mr);T(U$.$$.fragment,ui),zKr=i(ui),_f=n(ui,"P",{});var Mae=s(_f);QKr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),are=n(Mae,"A",{href:!0});var kzt=s(are);WKr=r(kzt,"from_pretrained()"),kzt.forEach(t),HKr=r(Mae," class method or the "),nre=n(Mae,"A",{href:!0});var Szt=s(nre);UKr=r(Szt,"from_config()"),Szt.forEach(t),JKr=r(Mae,` class
method.`),Mae.forEach(t),YKr=i(ui),J$=n(ui,"P",{});var THe=s(J$);KKr=r(THe,"This class cannot be instantiated directly using "),h0e=n(THe,"CODE",{});var Rzt=s(h0e);ZKr=r(Rzt,"__init__()"),Rzt.forEach(t),eZr=r(THe," (throws an error)."),THe.forEach(t),oZr=i(ui),ea=n(ui,"DIV",{class:!0});var JA=s(ea);T(Y$.$$.fragment,JA),rZr=i(JA),p0e=n(JA,"P",{});var Pzt=s(p0e);tZr=r(Pzt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pzt.forEach(t),aZr=i(JA),uf=n(JA,"P",{});var Eae=s(uf);nZr=r(Eae,`Note:
Loading a model from its configuration file does `),_0e=n(Eae,"STRONG",{});var Bzt=s(_0e);sZr=r(Bzt,"not"),Bzt.forEach(t),lZr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(Eae,"A",{href:!0});var Izt=s(sre);iZr=r(Izt,"from_pretrained()"),Izt.forEach(t),dZr=r(Eae," to load the model weights."),Eae.forEach(t),cZr=i(JA),T(l0.$$.fragment,JA),JA.forEach(t),fZr=i(ui),Jr=n(ui,"DIV",{class:!0});var bi=s(Jr);T(K$.$$.fragment,bi),mZr=i(bi),u0e=n(bi,"P",{});var Nzt=s(u0e);gZr=r(Nzt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nzt.forEach(t),hZr=i(bi),xn=n(bi,"P",{});var YA=s(xn);pZr=r(YA,"The model class to instantiate is selected based on the "),b0e=n(YA,"CODE",{});var qzt=s(b0e);_Zr=r(qzt,"model_type"),qzt.forEach(t),uZr=r(YA,` property of the config object (either
passed as an argument or loaded from `),v0e=n(YA,"CODE",{});var jzt=s(v0e);bZr=r(jzt,"pretrained_model_name_or_path"),jzt.forEach(t),vZr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(YA,"CODE",{});var Dzt=s(F0e);FZr=r(Dzt,"pretrained_model_name_or_path"),Dzt.forEach(t),TZr=r(YA,":"),YA.forEach(t),MZr=i(bi),Ve=n(bi,"UL",{});var Mo=s(Ve);i0=n(Mo,"LI",{});var JVe=s(i0);T0e=n(JVe,"STRONG",{});var Gzt=s(T0e);EZr=r(Gzt,"albert"),Gzt.forEach(t),CZr=r(JVe," \u2014 "),lre=n(JVe,"A",{href:!0});var Ozt=s(lre);wZr=r(Ozt,"FlaxAlbertForTokenClassification"),Ozt.forEach(t),AZr=r(JVe," (ALBERT model)"),JVe.forEach(t),LZr=i(Mo),d0=n(Mo,"LI",{});var YVe=s(d0);M0e=n(YVe,"STRONG",{});var Vzt=s(M0e);yZr=r(Vzt,"bert"),Vzt.forEach(t),xZr=r(YVe," \u2014 "),ire=n(YVe,"A",{href:!0});var Xzt=s(ire);$Zr=r(Xzt,"FlaxBertForTokenClassification"),Xzt.forEach(t),kZr=r(YVe," (BERT model)"),YVe.forEach(t),SZr=i(Mo),c0=n(Mo,"LI",{});var KVe=s(c0);E0e=n(KVe,"STRONG",{});var zzt=s(E0e);RZr=r(zzt,"big_bird"),zzt.forEach(t),PZr=r(KVe," \u2014 "),dre=n(KVe,"A",{href:!0});var Qzt=s(dre);BZr=r(Qzt,"FlaxBigBirdForTokenClassification"),Qzt.forEach(t),IZr=r(KVe," (BigBird model)"),KVe.forEach(t),NZr=i(Mo),f0=n(Mo,"LI",{});var ZVe=s(f0);C0e=n(ZVe,"STRONG",{});var Wzt=s(C0e);qZr=r(Wzt,"distilbert"),Wzt.forEach(t),jZr=r(ZVe," \u2014 "),cre=n(ZVe,"A",{href:!0});var Hzt=s(cre);DZr=r(Hzt,"FlaxDistilBertForTokenClassification"),Hzt.forEach(t),GZr=r(ZVe," (DistilBERT model)"),ZVe.forEach(t),OZr=i(Mo),m0=n(Mo,"LI",{});var eXe=s(m0);w0e=n(eXe,"STRONG",{});var Uzt=s(w0e);VZr=r(Uzt,"electra"),Uzt.forEach(t),XZr=r(eXe," \u2014 "),fre=n(eXe,"A",{href:!0});var Jzt=s(fre);zZr=r(Jzt,"FlaxElectraForTokenClassification"),Jzt.forEach(t),QZr=r(eXe," (ELECTRA model)"),eXe.forEach(t),WZr=i(Mo),g0=n(Mo,"LI",{});var oXe=s(g0);A0e=n(oXe,"STRONG",{});var Yzt=s(A0e);HZr=r(Yzt,"roberta"),Yzt.forEach(t),UZr=r(oXe," \u2014 "),mre=n(oXe,"A",{href:!0});var Kzt=s(mre);JZr=r(Kzt,"FlaxRobertaForTokenClassification"),Kzt.forEach(t),YZr=r(oXe," (RoBERTa model)"),oXe.forEach(t),KZr=i(Mo),h0=n(Mo,"LI",{});var rXe=s(h0);L0e=n(rXe,"STRONG",{});var Zzt=s(L0e);ZZr=r(Zzt,"roformer"),Zzt.forEach(t),eet=r(rXe," \u2014 "),gre=n(rXe,"A",{href:!0});var eQt=s(gre);oet=r(eQt,"FlaxRoFormerForTokenClassification"),eQt.forEach(t),ret=r(rXe," (RoFormer model)"),rXe.forEach(t),tet=i(Mo),p0=n(Mo,"LI",{});var tXe=s(p0);y0e=n(tXe,"STRONG",{});var oQt=s(y0e);aet=r(oQt,"xlm-roberta"),oQt.forEach(t),net=r(tXe," \u2014 "),hre=n(tXe,"A",{href:!0});var rQt=s(hre);set=r(rQt,"FlaxXLMRobertaForTokenClassification"),rQt.forEach(t),iet=r(tXe," (XLM-RoBERTa model)"),tXe.forEach(t),Mo.forEach(t),det=i(bi),T(_0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),gQe=i(f),bf=n(f,"H2",{class:!0});var MHe=s(bf);u0=n(MHe,"A",{id:!0,class:!0,href:!0});var tQt=s(u0);x0e=n(tQt,"SPAN",{});var aQt=s(x0e);T(Z$.$$.fragment,aQt),aQt.forEach(t),tQt.forEach(t),cet=i(MHe),$0e=n(MHe,"SPAN",{});var nQt=s($0e);fet=r(nQt,"FlaxAutoModelForMultipleChoice"),nQt.forEach(t),MHe.forEach(t),hQe=i(f),Er=n(f,"DIV",{class:!0});var vi=s(Er);T(ek.$$.fragment,vi),met=i(vi),vf=n(vi,"P",{});var Cae=s(vf);get=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pre=n(Cae,"A",{href:!0});var sQt=s(pre);het=r(sQt,"from_pretrained()"),sQt.forEach(t),pet=r(Cae," class method or the "),_re=n(Cae,"A",{href:!0});var lQt=s(_re);_et=r(lQt,"from_config()"),lQt.forEach(t),uet=r(Cae,` class
method.`),Cae.forEach(t),bet=i(vi),ok=n(vi,"P",{});var EHe=s(ok);vet=r(EHe,"This class cannot be instantiated directly using "),k0e=n(EHe,"CODE",{});var iQt=s(k0e);Fet=r(iQt,"__init__()"),iQt.forEach(t),Tet=r(EHe," (throws an error)."),EHe.forEach(t),Met=i(vi),oa=n(vi,"DIV",{class:!0});var KA=s(oa);T(rk.$$.fragment,KA),Eet=i(KA),S0e=n(KA,"P",{});var dQt=s(S0e);Cet=r(dQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dQt.forEach(t),wet=i(KA),Ff=n(KA,"P",{});var wae=s(Ff);Aet=r(wae,`Note:
Loading a model from its configuration file does `),R0e=n(wae,"STRONG",{});var cQt=s(R0e);Let=r(cQt,"not"),cQt.forEach(t),yet=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(wae,"A",{href:!0});var fQt=s(ure);xet=r(fQt,"from_pretrained()"),fQt.forEach(t),$et=r(wae," to load the model weights."),wae.forEach(t),ket=i(KA),T(b0.$$.fragment,KA),KA.forEach(t),Set=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(tk.$$.fragment,Fi),Ret=i(Fi),P0e=n(Fi,"P",{});var mQt=s(P0e);Pet=r(mQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mQt.forEach(t),Bet=i(Fi),$n=n(Fi,"P",{});var ZA=s($n);Iet=r(ZA,"The model class to instantiate is selected based on the "),B0e=n(ZA,"CODE",{});var gQt=s(B0e);Net=r(gQt,"model_type"),gQt.forEach(t),qet=r(ZA,` property of the config object (either
passed as an argument or loaded from `),I0e=n(ZA,"CODE",{});var hQt=s(I0e);jet=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),Det=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(ZA,"CODE",{});var pQt=s(N0e);Get=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),Oet=r(ZA,":"),ZA.forEach(t),Vet=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);v0=n(Eo,"LI",{});var aXe=s(v0);q0e=n(aXe,"STRONG",{});var _Qt=s(q0e);Xet=r(_Qt,"albert"),_Qt.forEach(t),zet=r(aXe," \u2014 "),bre=n(aXe,"A",{href:!0});var uQt=s(bre);Qet=r(uQt,"FlaxAlbertForMultipleChoice"),uQt.forEach(t),Wet=r(aXe," (ALBERT model)"),aXe.forEach(t),Het=i(Eo),F0=n(Eo,"LI",{});var nXe=s(F0);j0e=n(nXe,"STRONG",{});var bQt=s(j0e);Uet=r(bQt,"bert"),bQt.forEach(t),Jet=r(nXe," \u2014 "),vre=n(nXe,"A",{href:!0});var vQt=s(vre);Yet=r(vQt,"FlaxBertForMultipleChoice"),vQt.forEach(t),Ket=r(nXe," (BERT model)"),nXe.forEach(t),Zet=i(Eo),T0=n(Eo,"LI",{});var sXe=s(T0);D0e=n(sXe,"STRONG",{});var FQt=s(D0e);eot=r(FQt,"big_bird"),FQt.forEach(t),oot=r(sXe," \u2014 "),Fre=n(sXe,"A",{href:!0});var TQt=s(Fre);rot=r(TQt,"FlaxBigBirdForMultipleChoice"),TQt.forEach(t),tot=r(sXe," (BigBird model)"),sXe.forEach(t),aot=i(Eo),M0=n(Eo,"LI",{});var lXe=s(M0);G0e=n(lXe,"STRONG",{});var MQt=s(G0e);not=r(MQt,"distilbert"),MQt.forEach(t),sot=r(lXe," \u2014 "),Tre=n(lXe,"A",{href:!0});var EQt=s(Tre);lot=r(EQt,"FlaxDistilBertForMultipleChoice"),EQt.forEach(t),iot=r(lXe," (DistilBERT model)"),lXe.forEach(t),dot=i(Eo),E0=n(Eo,"LI",{});var iXe=s(E0);O0e=n(iXe,"STRONG",{});var CQt=s(O0e);cot=r(CQt,"electra"),CQt.forEach(t),fot=r(iXe," \u2014 "),Mre=n(iXe,"A",{href:!0});var wQt=s(Mre);mot=r(wQt,"FlaxElectraForMultipleChoice"),wQt.forEach(t),got=r(iXe," (ELECTRA model)"),iXe.forEach(t),hot=i(Eo),C0=n(Eo,"LI",{});var dXe=s(C0);V0e=n(dXe,"STRONG",{});var AQt=s(V0e);pot=r(AQt,"roberta"),AQt.forEach(t),_ot=r(dXe," \u2014 "),Ere=n(dXe,"A",{href:!0});var LQt=s(Ere);uot=r(LQt,"FlaxRobertaForMultipleChoice"),LQt.forEach(t),bot=r(dXe," (RoBERTa model)"),dXe.forEach(t),vot=i(Eo),w0=n(Eo,"LI",{});var cXe=s(w0);X0e=n(cXe,"STRONG",{});var yQt=s(X0e);Fot=r(yQt,"roformer"),yQt.forEach(t),Tot=r(cXe," \u2014 "),Cre=n(cXe,"A",{href:!0});var xQt=s(Cre);Mot=r(xQt,"FlaxRoFormerForMultipleChoice"),xQt.forEach(t),Eot=r(cXe," (RoFormer model)"),cXe.forEach(t),Cot=i(Eo),A0=n(Eo,"LI",{});var fXe=s(A0);z0e=n(fXe,"STRONG",{});var $Qt=s(z0e);wot=r($Qt,"xlm-roberta"),$Qt.forEach(t),Aot=r(fXe," \u2014 "),wre=n(fXe,"A",{href:!0});var kQt=s(wre);Lot=r(kQt,"FlaxXLMRobertaForMultipleChoice"),kQt.forEach(t),yot=r(fXe," (XLM-RoBERTa model)"),fXe.forEach(t),Eo.forEach(t),xot=i(Fi),T(L0.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),pQe=i(f),Tf=n(f,"H2",{class:!0});var CHe=s(Tf);y0=n(CHe,"A",{id:!0,class:!0,href:!0});var SQt=s(y0);Q0e=n(SQt,"SPAN",{});var RQt=s(Q0e);T(ak.$$.fragment,RQt),RQt.forEach(t),SQt.forEach(t),$ot=i(CHe),W0e=n(CHe,"SPAN",{});var PQt=s(W0e);kot=r(PQt,"FlaxAutoModelForNextSentencePrediction"),PQt.forEach(t),CHe.forEach(t),_Qe=i(f),Cr=n(f,"DIV",{class:!0});var Ti=s(Cr);T(nk.$$.fragment,Ti),Sot=i(Ti),Mf=n(Ti,"P",{});var Aae=s(Mf);Rot=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Are=n(Aae,"A",{href:!0});var BQt=s(Are);Pot=r(BQt,"from_pretrained()"),BQt.forEach(t),Bot=r(Aae," class method or the "),Lre=n(Aae,"A",{href:!0});var IQt=s(Lre);Iot=r(IQt,"from_config()"),IQt.forEach(t),Not=r(Aae,` class
method.`),Aae.forEach(t),qot=i(Ti),sk=n(Ti,"P",{});var wHe=s(sk);jot=r(wHe,"This class cannot be instantiated directly using "),H0e=n(wHe,"CODE",{});var NQt=s(H0e);Dot=r(NQt,"__init__()"),NQt.forEach(t),Got=r(wHe," (throws an error)."),wHe.forEach(t),Oot=i(Ti),ra=n(Ti,"DIV",{class:!0});var eL=s(ra);T(lk.$$.fragment,eL),Vot=i(eL),U0e=n(eL,"P",{});var qQt=s(U0e);Xot=r(qQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qQt.forEach(t),zot=i(eL),Ef=n(eL,"P",{});var Lae=s(Ef);Qot=r(Lae,`Note:
Loading a model from its configuration file does `),J0e=n(Lae,"STRONG",{});var jQt=s(J0e);Wot=r(jQt,"not"),jQt.forEach(t),Hot=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yre=n(Lae,"A",{href:!0});var DQt=s(yre);Uot=r(DQt,"from_pretrained()"),DQt.forEach(t),Jot=r(Lae," to load the model weights."),Lae.forEach(t),Yot=i(eL),T(x0.$$.fragment,eL),eL.forEach(t),Kot=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(ik.$$.fragment,Mi),Zot=i(Mi),Y0e=n(Mi,"P",{});var GQt=s(Y0e);ert=r(GQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GQt.forEach(t),ort=i(Mi),kn=n(Mi,"P",{});var oL=s(kn);rrt=r(oL,"The model class to instantiate is selected based on the "),K0e=n(oL,"CODE",{});var OQt=s(K0e);trt=r(OQt,"model_type"),OQt.forEach(t),art=r(oL,` property of the config object (either
passed as an argument or loaded from `),Z0e=n(oL,"CODE",{});var VQt=s(Z0e);nrt=r(VQt,"pretrained_model_name_or_path"),VQt.forEach(t),srt=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=n(oL,"CODE",{});var XQt=s(ewe);lrt=r(XQt,"pretrained_model_name_or_path"),XQt.forEach(t),irt=r(oL,":"),oL.forEach(t),drt=i(Mi),owe=n(Mi,"UL",{});var zQt=s(owe);$0=n(zQt,"LI",{});var mXe=s($0);rwe=n(mXe,"STRONG",{});var QQt=s(rwe);crt=r(QQt,"bert"),QQt.forEach(t),frt=r(mXe," \u2014 "),xre=n(mXe,"A",{href:!0});var WQt=s(xre);mrt=r(WQt,"FlaxBertForNextSentencePrediction"),WQt.forEach(t),grt=r(mXe," (BERT model)"),mXe.forEach(t),zQt.forEach(t),hrt=i(Mi),T(k0.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),uQe=i(f),Cf=n(f,"H2",{class:!0});var AHe=s(Cf);S0=n(AHe,"A",{id:!0,class:!0,href:!0});var HQt=s(S0);twe=n(HQt,"SPAN",{});var UQt=s(twe);T(dk.$$.fragment,UQt),UQt.forEach(t),HQt.forEach(t),prt=i(AHe),awe=n(AHe,"SPAN",{});var JQt=s(awe);_rt=r(JQt,"FlaxAutoModelForImageClassification"),JQt.forEach(t),AHe.forEach(t),bQe=i(f),wr=n(f,"DIV",{class:!0});var Ei=s(wr);T(ck.$$.fragment,Ei),urt=i(Ei),wf=n(Ei,"P",{});var yae=s(wf);brt=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$re=n(yae,"A",{href:!0});var YQt=s($re);vrt=r(YQt,"from_pretrained()"),YQt.forEach(t),Frt=r(yae," class method or the "),kre=n(yae,"A",{href:!0});var KQt=s(kre);Trt=r(KQt,"from_config()"),KQt.forEach(t),Mrt=r(yae,` class
method.`),yae.forEach(t),Ert=i(Ei),fk=n(Ei,"P",{});var LHe=s(fk);Crt=r(LHe,"This class cannot be instantiated directly using "),nwe=n(LHe,"CODE",{});var ZQt=s(nwe);wrt=r(ZQt,"__init__()"),ZQt.forEach(t),Art=r(LHe," (throws an error)."),LHe.forEach(t),Lrt=i(Ei),ta=n(Ei,"DIV",{class:!0});var rL=s(ta);T(mk.$$.fragment,rL),yrt=i(rL),swe=n(rL,"P",{});var eWt=s(swe);xrt=r(eWt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eWt.forEach(t),$rt=i(rL),Af=n(rL,"P",{});var xae=s(Af);krt=r(xae,`Note:
Loading a model from its configuration file does `),lwe=n(xae,"STRONG",{});var oWt=s(lwe);Srt=r(oWt,"not"),oWt.forEach(t),Rrt=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(xae,"A",{href:!0});var rWt=s(Sre);Prt=r(rWt,"from_pretrained()"),rWt.forEach(t),Brt=r(xae," to load the model weights."),xae.forEach(t),Irt=i(rL),T(R0.$$.fragment,rL),rL.forEach(t),Nrt=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(gk.$$.fragment,Ci),qrt=i(Ci),iwe=n(Ci,"P",{});var tWt=s(iwe);jrt=r(tWt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tWt.forEach(t),Drt=i(Ci),Sn=n(Ci,"P",{});var tL=s(Sn);Grt=r(tL,"The model class to instantiate is selected based on the "),dwe=n(tL,"CODE",{});var aWt=s(dwe);Ort=r(aWt,"model_type"),aWt.forEach(t),Vrt=r(tL,` property of the config object (either
passed as an argument or loaded from `),cwe=n(tL,"CODE",{});var nWt=s(cwe);Xrt=r(nWt,"pretrained_model_name_or_path"),nWt.forEach(t),zrt=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=n(tL,"CODE",{});var sWt=s(fwe);Qrt=r(sWt,"pretrained_model_name_or_path"),sWt.forEach(t),Wrt=r(tL,":"),tL.forEach(t),Hrt=i(Ci),hk=n(Ci,"UL",{});var yHe=s(hk);P0=n(yHe,"LI",{});var gXe=s(P0);mwe=n(gXe,"STRONG",{});var lWt=s(mwe);Urt=r(lWt,"beit"),lWt.forEach(t),Jrt=r(gXe," \u2014 "),Rre=n(gXe,"A",{href:!0});var iWt=s(Rre);Yrt=r(iWt,"FlaxBeitForImageClassification"),iWt.forEach(t),Krt=r(gXe," (BEiT model)"),gXe.forEach(t),Zrt=i(yHe),B0=n(yHe,"LI",{});var hXe=s(B0);gwe=n(hXe,"STRONG",{});var dWt=s(gwe);ett=r(dWt,"vit"),dWt.forEach(t),ott=r(hXe," \u2014 "),Pre=n(hXe,"A",{href:!0});var cWt=s(Pre);rtt=r(cWt,"FlaxViTForImageClassification"),cWt.forEach(t),ttt=r(hXe," (ViT model)"),hXe.forEach(t),yHe.forEach(t),att=i(Ci),T(I0.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),vQe=i(f),Lf=n(f,"H2",{class:!0});var xHe=s(Lf);N0=n(xHe,"A",{id:!0,class:!0,href:!0});var fWt=s(N0);hwe=n(fWt,"SPAN",{});var mWt=s(hwe);T(pk.$$.fragment,mWt),mWt.forEach(t),fWt.forEach(t),ntt=i(xHe),pwe=n(xHe,"SPAN",{});var gWt=s(pwe);stt=r(gWt,"FlaxAutoModelForVision2Seq"),gWt.forEach(t),xHe.forEach(t),FQe=i(f),Ar=n(f,"DIV",{class:!0});var wi=s(Ar);T(_k.$$.fragment,wi),ltt=i(wi),yf=n(wi,"P",{});var $ae=s(yf);itt=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Bre=n($ae,"A",{href:!0});var hWt=s(Bre);dtt=r(hWt,"from_pretrained()"),hWt.forEach(t),ctt=r($ae," class method or the "),Ire=n($ae,"A",{href:!0});var pWt=s(Ire);ftt=r(pWt,"from_config()"),pWt.forEach(t),mtt=r($ae,` class
method.`),$ae.forEach(t),gtt=i(wi),uk=n(wi,"P",{});var $He=s(uk);htt=r($He,"This class cannot be instantiated directly using "),_we=n($He,"CODE",{});var _Wt=s(_we);ptt=r(_Wt,"__init__()"),_Wt.forEach(t),_tt=r($He," (throws an error)."),$He.forEach(t),utt=i(wi),aa=n(wi,"DIV",{class:!0});var aL=s(aa);T(bk.$$.fragment,aL),btt=i(aL),uwe=n(aL,"P",{});var uWt=s(uwe);vtt=r(uWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uWt.forEach(t),Ftt=i(aL),xf=n(aL,"P",{});var kae=s(xf);Ttt=r(kae,`Note:
Loading a model from its configuration file does `),bwe=n(kae,"STRONG",{});var bWt=s(bwe);Mtt=r(bWt,"not"),bWt.forEach(t),Ett=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nre=n(kae,"A",{href:!0});var vWt=s(Nre);Ctt=r(vWt,"from_pretrained()"),vWt.forEach(t),wtt=r(kae," to load the model weights."),kae.forEach(t),Att=i(aL),T(q0.$$.fragment,aL),aL.forEach(t),Ltt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(vk.$$.fragment,Ai),ytt=i(Ai),vwe=n(Ai,"P",{});var FWt=s(vwe);xtt=r(FWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FWt.forEach(t),$tt=i(Ai),Rn=n(Ai,"P",{});var nL=s(Rn);ktt=r(nL,"The model class to instantiate is selected based on the "),Fwe=n(nL,"CODE",{});var TWt=s(Fwe);Stt=r(TWt,"model_type"),TWt.forEach(t),Rtt=r(nL,` property of the config object (either
passed as an argument or loaded from `),Twe=n(nL,"CODE",{});var MWt=s(Twe);Ptt=r(MWt,"pretrained_model_name_or_path"),MWt.forEach(t),Btt=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mwe=n(nL,"CODE",{});var EWt=s(Mwe);Itt=r(EWt,"pretrained_model_name_or_path"),EWt.forEach(t),Ntt=r(nL,":"),nL.forEach(t),qtt=i(Ai),Ewe=n(Ai,"UL",{});var CWt=s(Ewe);j0=n(CWt,"LI",{});var pXe=s(j0);Cwe=n(pXe,"STRONG",{});var wWt=s(Cwe);jtt=r(wWt,"vision-encoder-decoder"),wWt.forEach(t),Dtt=r(pXe," \u2014 "),qre=n(pXe,"A",{href:!0});var AWt=s(qre);Gtt=r(AWt,"FlaxVisionEncoderDecoderModel"),AWt.forEach(t),Ott=r(pXe," (Vision Encoder decoder model)"),pXe.forEach(t),CWt.forEach(t),Vtt=i(Ai),T(D0.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(SUt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Bn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig"),c(Nn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoModel"),c(qn,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer"),c(Ri,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Bi,"class","relative group"),c(QS,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(WS,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertConfig"),c(HS,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartConfig"),c(US,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitConfig"),c(JS,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertConfig"),c(YS,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(KS,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ZS,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(eR,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(oR,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(rR,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomConfig"),c(tR,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertConfig"),c(aR,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineConfig"),c(nR,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPConfig"),c(sR,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenConfig"),c(lR,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertConfig"),c(iR,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextConfig"),c(dR,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLConfig"),c(cR,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtConfig"),c(fR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(mR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(gR,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(hR,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaConfig"),c(pR,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(_R,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(uR,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTConfig"),c(bR,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrConfig"),c(vR,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertConfig"),c(FR,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRConfig"),c(TR,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTConfig"),c(MR,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraConfig"),c(ER,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(CR,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertConfig"),c(wR,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaConfig"),c(AR,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetConfig"),c(LR,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTConfig"),c(yR,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelConfig"),c(xR,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNConfig"),c($R,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Config"),c(kR,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(SR,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(RR,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJConfig"),c(PR,"href","/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTConfig"),c(BR,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertConfig"),c(IR,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertConfig"),c(NR,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(qR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(jR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(DR,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(GR,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDConfig"),c(OR,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitConfig"),c(VR,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerConfig"),c(XR,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Config"),c(zR,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeConfig"),c(QR,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertConfig"),c(WR,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Config"),c(HR,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianConfig"),c(UR,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(JR,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartConfig"),c(YR,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTConfig"),c(KR,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ZR,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(eP,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(oP,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetConfig"),c(rP,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Config"),c(tP,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpConfig"),c(aP,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaConfig"),c(nP,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sP,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lP,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTConfig"),c(iP,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusConfig"),c(dP,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cP,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartConfig"),c(fP,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(mP,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gP,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hP,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagConfig"),c(pP,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmConfig"),c(_P,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerConfig"),c(uP,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetConfig"),c(bP,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertConfig"),c(vP,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetConfig"),c(FP,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertConfig"),c(TP,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaConfig"),c(MP,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerConfig"),c(EP,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerConfig"),c(CP,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWConfig"),c(wP,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDConfig"),c(AP,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LP,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(yP,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xP,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterConfig"),c($P,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kP,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinConfig"),c(SP,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Config"),c(RP,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Config"),c(PP,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasConfig"),c(BP,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(IP,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(NP,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRConfig"),c(qP,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(jP,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(DP,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanConfig"),c(GP,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltConfig"),c(OP,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(VP,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(XP,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(zP,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTConfig"),c(QP,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(WP,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(HP,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(UP,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMConfig"),c(JP,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMConfig"),c(YP,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMConfig"),c(KP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(ZP,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(eB,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(oB,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetConfig"),c(rB,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosConfig"),c(tB,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoTokenizer"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoTokenizer"),c(Ni,"class","relative group"),c(aB,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(nB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(sB,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizer"),c(iB,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartTokenizerFast"),c(dB,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizer"),c(cB,"href","/docs/transformers/pr_17469/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(fB,"href","/docs/transformers/pr_17469/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(pB,"href","/docs/transformers/pr_17469/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(_B,"href","/docs/transformers/pr_17469/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uB,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(bB,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(vB,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(FB,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(MB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(EB,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(CB,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(wB,"href","/docs/transformers/pr_17469/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(AB,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LB,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineTokenizer"),c(xB,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizer"),c($B,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kB,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(SB,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(RB,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(PB,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(BB,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizer"),c(IB,"href","/docs/transformers/pr_17469/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(NB,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jB,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GB,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OB,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VB,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XB,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zB,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QB,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WB,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HB,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizer"),c(UB,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JB,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YB,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizer"),c(KB,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZB,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eI,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oI,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sI,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(lI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iI,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dI,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizer"),c(cI,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(fI,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizer"),c(mI,"href","/docs/transformers/pr_17469/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(gI,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pI,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_I,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(bI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(vI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(FI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(TI,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(MI,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(EI,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CI,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizer"),c(wI,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDTokenizerFast"),c(AI,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizer"),c(LI,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(yI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Tokenizer"),c(xI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5TokenizerFast"),c($I,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeTokenizer"),c(kI,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(SI,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(RI,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(PI,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianTokenizer"),c(BI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizer"),c(II,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(NI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(qI,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(jI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(DI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(GI,"href","/docs/transformers/pr_17469/en/model_doc/mluke#transformers.MLukeTokenizer"),c(OI,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(VI,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(XI,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(zI,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(QI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Tokenizer"),c(WI,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5TokenizerFast"),c(HI,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpTokenizer"),c(UI,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(JI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(YI,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(KI,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZI,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(eN,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(oN,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(rN,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tN,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aN,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nN,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(sN,"href","/docs/transformers/pr_17469/en/model_doc/phobert#transformers.PhobertTokenizer"),c(lN,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartTokenizer"),c(iN,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(dN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(cN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(fN,"href","/docs/transformers/pr_17469/en/model_doc/rag#transformers.RagTokenizer"),c(mN,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizer"),c(gN,"href","/docs/transformers/pr_17469/en/model_doc/realm#transformers.RealmTokenizerFast"),c(hN,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizer"),c(pN,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(_N,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uN,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(bN,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(vN,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(FN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MN,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(EN,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(CN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(wN,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(AN,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizer"),c(LN,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yN,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(xN,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c($N,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Tokenizer"),c(kN,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5TokenizerFast"),c(SN,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasTokenizer"),c(RN,"href","/docs/transformers/pr_17469/en/model_doc/tapex#transformers.TapexTokenizer"),c(PN,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(IN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(NN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizer"),c(qN,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertTokenizerFast"),c(jN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GN,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(ON,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VN,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XN,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMTokenizer"),c(zN,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(QN,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(WN,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UN,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JN,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YN,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KN,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZN,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoFeatureExtractor"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoFeatureExtractor"),c(qi,"class","relative group"),c(eq,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oq,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(sq,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lq,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(iq,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hq,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_q,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(uq,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wq,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Aq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Lq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xq,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($q,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(kq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Sq,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Rq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Pq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Bq,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fp,"id","transformers.AutoProcessor"),c(Fp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fp,"href","#transformers.AutoProcessor"),c(ji,"class","relative group"),c(Iq,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Nq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPProcessor"),c(qq,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPProcessor"),c(jq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(Dq,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Gq,"href","/docs/transformers/pr_17469/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Oq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zq,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Qq,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Wq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uq,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltProcessor"),c(Jq,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Yq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zq,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(ej,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oj,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rj,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tj,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertModel"),c(aj,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartModel"),c(nj,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitModel"),c(sj,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertModel"),c(lj,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ij,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdModel"),c(dj,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cj,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fj,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mj,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomModel"),c(gj,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertModel"),c(hj,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineModel"),c(pj,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.CLIPModel"),c(_j,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenModel"),c(uj,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertModel"),c(bj,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextModel"),c(vj,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLModel"),c(Fj,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtModel"),c(Tj,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Mj,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Ej,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Cj,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaModel"),c(wj,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Aj,"href","/docs/transformers/pr_17469/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Lj,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTModel"),c(yj,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrModel"),c(xj,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertModel"),c($j,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(kj,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTModel"),c(Sj,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraModel"),c(Rj,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertModel"),c(Pj,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaModel"),c(Bj,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetModel"),c(Ij,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTModel"),c(Nj,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelModel"),c(qj,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelBaseModel"),c(jj,"href","/docs/transformers/pr_17469/en/model_doc/glpn#transformers.GLPNModel"),c(Dj,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2Model"),c(Gj,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Oj,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Vj,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJModel"),c(Xj,"href","/docs/transformers/pr_17469/en/model_doc/groupvit#transformers.GroupViTModel"),c(zj,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertModel"),c(Qj,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertModel"),c(Wj,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Hj,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Uj,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Jj,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Yj,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDModel"),c(Kj,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitModel"),c(Zj,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerModel"),c(eD,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5Model"),c(oD,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeModel"),c(rD,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertModel"),c(tD,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100Model"),c(aD,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianModel"),c(nD,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerModel"),c(sD,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartModel"),c(lD,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTModel"),c(iD,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(dD,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertModel"),c(cD,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTModel"),c(fD,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetModel"),c(mD,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5Model"),c(gD,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpModel"),c(hD,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaModel"),c(pD,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_D,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uD,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTModel"),c(bD,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusModel"),c(vD,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverModel"),c(FD,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartModel"),c(TD,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerModel"),c(MD,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(ED,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertModel"),c(CD,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModel"),c(wD,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetModel"),c(AD,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertModel"),c(LD,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetModel"),c(yD,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c(xD,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaModel"),c($D,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerModel"),c(kD,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerModel"),c(SD,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWModel"),c(RD,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDModel"),c(PD,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(BD,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterModel"),c(ID,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(ND,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinModel"),c(qD,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2Model"),c(jD,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5Model"),c(DD,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasModel"),c(GD,"href","/docs/transformers/pr_17469/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(OD,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(VD,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechModel"),c(XD,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(zD,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanModel"),c(QD,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltModel"),c(WD,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(HD,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertModel"),c(UD,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTModel"),c(JD,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(YD,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(KD,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(ZD,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMModel"),c(eG,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMModel"),c(oG,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMModel"),c(rG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(tG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(aG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(nG,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetModel"),c(sG,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosModel"),c(lG,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uu,"id","transformers.AutoModelForPreTraining"),c(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uu,"href","#transformers.AutoModelForPreTraining"),c(Xi,"class","relative group"),c(iG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForPreTraining"),c(mG,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForPreTraining"),c(hG,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(pG,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(_G,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(uG,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bG,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vG,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(FG,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(TG,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(MG,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForPreTraining"),c(EG,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(CG,"href","/docs/transformers/pr_17469/en/model_doc/flava#transformers.FlavaForPreTraining"),c(wG,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForPreTraining"),c(AG,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(yG,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(xG,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($G,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kG,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SG,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(RG,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(PG,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(BG,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(IG,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(NG,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(qG,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(jG,"href","/docs/transformers/pr_17469/en/model_doc/retribert#transformers.RetriBertModel"),c(DG,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GG,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(OG,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zG,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(QG,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(WG,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(HG,"href","/docs/transformers/pr_17469/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(UG,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(JG,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(YG,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(KG,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ZG,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(eO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(oO,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X1,"id","transformers.AutoModelForCausalLM"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForCausalLM"),c(Wi,"class","relative group"),c(rO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForCausalLM"),c(sO,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertLMHeadModel"),c(lO,"href","/docs/transformers/pr_17469/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(iO,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(dO,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(cO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(fO,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(mO,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForCausalLM"),c(gO,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(hO,"href","/docs/transformers/pr_17469/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(pO,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(_O,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(uO,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForCausalLM"),c(bO,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vO,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(FO,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(TO,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(MO,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianForCausalLM"),c(EO,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForCausalLM"),c(CO,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(wO,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForCausalLM"),c(AO,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(LO,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.OPTForCausalLM"),c(yO,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(xO,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForCausalLM"),c($O,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(kO,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(SO,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(RO,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(PO,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(BO,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(IO,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(NO,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(qO,"href","/docs/transformers/pr_17469/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(jO,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(DO,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(OO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(VO,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(XO,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P2,"id","transformers.AutoModelForMaskedLM"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(zO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(UO,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMaskedLM"),c(YO,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(KO,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(eV,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(oV,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rV,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tV,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(nV,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sV,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(lV,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(iV,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cV,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fV,"href","/docs/transformers/pr_17469/en/model_doc/luke#transformers.LukeForMaskedLM"),c(mV,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(hV,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(_V,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(bV,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vV,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(FV,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(TV,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(MV,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(EV,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wV,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AV,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(LV,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(yV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($V,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.AutoModelForSeq2SeqLM"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(kV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jV,"href","/docs/transformers/pr_17469/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(GV,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(OV,"href","/docs/transformers/pr_17469/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.MarianMTModel"),c(XV,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(zV,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(QV,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(WV,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(HV,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(UV,"href","/docs/transformers/pr_17469/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YV,"href","/docs/transformers/pr_17469/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForSequenceClassification"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(KV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c($X,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17469/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DX,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GX,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OX,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VX,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XX,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zX,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QX,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WX,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForMultipleChoice"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(az,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(vz,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Tz,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Mz,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Ez,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(Cz,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wz,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Az,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Lz,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yz,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xz,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForNextSentencePrediction"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c($z,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Pz,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Bz,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Iz,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Nz,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(qz,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForTokenClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(jz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(zz,"href","/docs/transformers/pr_17469/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(gQ,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(hQ,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(pQ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_Q,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(uQ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(bQ,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(vQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(FQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(TQ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(MQ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(EQ,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForQuestionAnswering"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(CQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.BertForQuestionAnswering"),c($Q,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17469/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17469/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(GQ,"href","/docs/transformers/pr_17469/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17469/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17469/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eW,"href","/docs/transformers/pr_17469/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17469/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17469/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(tW,"href","/docs/transformers/pr_17469/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(aW,"href","/docs/transformers/pr_17469/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(nW,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(sW,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(lW,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(iW,"href","/docs/transformers/pr_17469/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(dW,"href","/docs/transformers/pr_17469/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(cW,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(fW,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mW,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(gW,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(hW,"href","/docs/transformers/pr_17469/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.AutoModelForTableQuestionAnswering"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(pW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.AutoModelForImageClassification"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.AutoModelForImageClassification"),c(Fd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForImageClassification"),c(EW,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(CW,"href","/docs/transformers/pr_17469/en/model_doc/cvt#transformers.CvtForImageClassification"),c(wW,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(AW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LW,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yW,"href","/docs/transformers/pr_17469/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(xW,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassification"),c($W,"href","/docs/transformers/pr_17469/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(kW,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(SW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PW,"href","/docs/transformers/pr_17469/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BW,"href","/docs/transformers/pr_17469/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IW,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NW,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qW,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jW,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForImageClassification"),c(DW,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(GW,"href","/docs/transformers/pr_17469/en/model_doc/van#transformers.VanForImageClassification"),c(OW,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.AutoModelForVision2Seq"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.AutoModelForVision2Seq"),c(Ed,"class","relative group"),c(VW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ad,"class","relative group"),c(WW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17469/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.AutoModelForAudioClassification"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.AutoModelForAudioClassification"),c(xd,"class","relative group"),c(YW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForAudioFrameClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Sd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(gH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(hH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(_H,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForCTC"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForCTC"),c(Bd,"class","relative group"),c(uH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(TH,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.HubertForCTC"),c(MH,"href","/docs/transformers/pr_17469/en/model_doc/mctct#transformers.MCTCTForCTC"),c(EH,"href","/docs/transformers/pr_17469/en/model_doc/sew#transformers.SEWForCTC"),c(CH,"href","/docs/transformers/pr_17469/en/model_doc/sew-d#transformers.SEWDForCTC"),c(wH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(AH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(LH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(yH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(xH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForCTC"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(qd,"class","relative group"),c($H,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17469/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(PH,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForAudioXVector"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForAudioXVector"),c(Gd,"class","relative group"),c(BH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(jH,"href","/docs/transformers/pr_17469/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(DH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(GH,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(OH,"href","/docs/transformers/pr_17469/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForMaskedImageModeling"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(VH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_17469/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(WH,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(HH,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(UH,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForObjectDetection"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(JH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForObjectDetection"),c(eU,"href","/docs/transformers/pr_17469/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r7,"id","transformers.AutoModelForImageSegmentation"),c(r7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r7,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(oU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_17469/en/model_doc/detr#transformers.DetrForSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.AutoModelForSemanticSegmentation"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(nU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(dU,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(cU,"href","/docs/transformers/pr_17469/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fU,"href","/docs/transformers/pr_17469/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(mU,"href","/docs/transformers/pr_17469/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.AutoModelForInstanceSegmentation"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17469/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModel"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(uU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertModel"),c(TU,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartModel"),c(MU,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertModel"),c(EU,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(CU,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wU,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertModel"),c(AU,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.TFCLIPModel"),c(LU,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertModel"),c(yU,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextModel"),c(xU,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLModel"),c($U,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kU,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaModel"),c(SU,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(RU,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(PU,"href","/docs/transformers/pr_17469/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(BU,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraModel"),c(IU,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(NU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelModel"),c(qU,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(jU,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2Model"),c(DU,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJModel"),c(GU,"href","/docs/transformers/pr_17469/en/model_doc/hubert#transformers.TFHubertModel"),c(OU,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(VU,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDModel"),c(XU,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerModel"),c(zU,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertModel"),c(QU,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianModel"),c(WU,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartModel"),c(HU,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(UU,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetModel"),c(JU,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5Model"),c(YU,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(KU,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTModel"),c(ZU,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusModel"),c(eJ,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetModel"),c(oJ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertModel"),c(rJ,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetModel"),c(tJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaModel"),c(aJ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nJ,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sJ,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinModel"),c(lJ,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2Model"),c(iJ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5Model"),c(dJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasModel"),c(cJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(fJ,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTModel"),c(mJ,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(gJ,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(hJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMModel"),c(pJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(_J,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v9,"id","transformers.TFAutoModelForPreTraining"),c(v9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v9,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(TJ,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForPreTraining"),c(EJ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wJ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AJ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(LJ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yJ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(xJ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($J,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kJ,"href","/docs/transformers/pr_17469/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(SJ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(RJ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BJ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jJ,"href","/docs/transformers/pr_17469/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(DJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GJ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(OJ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z9,"id","transformers.TFAutoModelForCausalLM"),c(z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z9,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WJ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HJ,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UJ,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JJ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(YJ,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KJ,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(ZJ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(eY,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(oY,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(rY,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aY,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForImageClassification"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(nY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_17469/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(dY,"href","/docs/transformers/pr_17469/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(cY,"href","/docs/transformers/pr_17469/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(fY,"href","/docs/transformers/pr_17469/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(mY,"href","/docs/transformers/pr_17469/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(gY,"href","/docs/transformers/pr_17469/en/model_doc/swinv2#transformers.TFSwinv2ForImageClassification"),c(hY,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForMaskedLM"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(vY,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(FY,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TY,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(EY,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(CY,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wY,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(AY,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(LY,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(yY,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xY,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($Y,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(kY,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SY,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(RY,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PY,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(BY,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IY,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NY,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(qY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VY,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zY,"href","/docs/transformers/pr_17469/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(QY,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.TFMarianMTModel"),c(WY,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForSequenceClassification"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(YY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17469/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fK,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mK,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(gK,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(hK,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17469/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17469/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForMultipleChoice"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(AK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(NK,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(qK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(jK,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(DK,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(GK,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(OK,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(VK,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(XK,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(zK,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(QK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(JK,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(YK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/pr_17469/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForTokenClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(hZ,"href","/docs/transformers/pr_17469/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(pZ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(_Z,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(uZ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(bZ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(vZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(FZ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(TZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(MZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(EZ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForQuestionAnswering"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(CZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17469/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c($Z,"href","/docs/transformers/pr_17469/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(SZ,"href","/docs/transformers/pr_17469/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(RZ,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(PZ,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(BZ,"href","/docs/transformers/pr_17469/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(IZ,"href","/docs/transformers/pr_17469/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(NZ,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(qZ,"href","/docs/transformers/pr_17469/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(jZ,"href","/docs/transformers/pr_17469/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(DZ,"href","/docs/transformers/pr_17469/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(GZ,"href","/docs/transformers/pr_17469/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(OZ,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(VZ,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(zZ,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_17469/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModelForVision2Seq"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(WZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(YZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/pr_17469/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModel"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(oee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ree,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertModel"),c(nee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartModel"),c(see,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitModel"),c(lee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertModel"),c(iee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(dee,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(cee,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fee,"href","/docs/transformers/pr_17469/en/model_doc/clip#transformers.FlaxCLIPModel"),c(mee,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(gee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraModel"),c(hee,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pee,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_ee,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(uee,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(bee,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianModel"),c(vee,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Fee,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Tee,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTModel"),c(Mee,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Eee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Cee,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(wee,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5Model"),c(Aee,"href","/docs/transformers/pr_17469/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Lee,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTModel"),c(yee,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(xee,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMModel"),c($ee,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.FlaxAutoModelForCausalLM"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(kee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(See,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ree,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Bee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Iee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Nee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(qee,"href","/docs/transformers/pr_17469/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(jee,"href","/docs/transformers/pr_17469/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Dee,"href","/docs/transformers/pr_17469/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Gee,"href","/docs/transformers/pr_17469/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Oee,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Vee,"href","/docs/transformers/pr_17469/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.FlaxAutoModelForPreTraining"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(Xee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Hee,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Uee,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Jee,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Yee,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Kee,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Zee,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eoe,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(roe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(toe,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(aoe,"href","/docs/transformers/pr_17469/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(noe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.FlaxAutoModelForMaskedLM"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(soe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(loe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ioe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(doe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(coe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(foe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(moe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(goe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(hoe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(poe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(uoe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(boe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(voe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Eoe,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Coe,"href","/docs/transformers/pr_17469/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(woe,"href","/docs/transformers/pr_17469/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Aoe,"href","/docs/transformers/pr_17469/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Loe,"href","/docs/transformers/pr_17469/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(yoe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xoe,"href","/docs/transformers/pr_17469/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($oe,"href","/docs/transformers/pr_17469/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(koe,"href","/docs/transformers/pr_17469/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(Soe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Roe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Poe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Boe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ioe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Noe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(qoe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(joe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Doe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Goe,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ooe,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Voe,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Xoe,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c(zoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qoe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Woe,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hoe,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_17469/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Yoe,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Zoe,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ere,"href","/docs/transformers/pr_17469/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(ore,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(rre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(tre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.FlaxAutoModelForTokenClassification"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(are,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lre,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ire,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(dre,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(cre,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(fre,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(mre,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(gre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(hre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(u0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(pre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_17469/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(vre,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Fre,"href","/docs/transformers/pr_17469/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Tre,"href","/docs/transformers/pr_17469/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Mre,"href","/docs/transformers/pr_17469/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Ere,"href","/docs/transformers/pr_17469/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Cre,"href","/docs/transformers/pr_17469/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(wre,"href","/docs/transformers/pr_17469/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(Are,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xre,"href","/docs/transformers/pr_17469/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S0,"id","transformers.FlaxAutoModelForImageClassification"),c(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S0,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c($re,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rre,"href","/docs/transformers/pr_17469/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Pre,"href","/docs/transformers/pr_17469/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.FlaxAutoModelForVision2Seq"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Bre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ire,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nre,"href","/docs/transformers/pr_17469/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qre,"href","/docs/transformers/pr_17469/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Co),e(Co,Li),b(f,Rf,u),b(f,lt,u),e(lt,yi),e(lt,xi),e(xi,sL),e(lt,Pf),b(f,Oe,u),b(f,We,u),e(We,$i),e(We,Bn),e(Bn,lL),e(We,In),e(We,Nn),e(Nn,iL),e(We,ki),e(We,qn),e(qn,dL),e(We,Si),b(f,Bf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,DS),e(Ae,Ri),e(Ri,GS),e(Ae,OS),b(f,wo,u),b(f,Ra,u),e(Ra,VS),e(Ra,If),e(If,XS),e(Ra,kHe),b(f,_Xe,u),b(f,Pi,u),e(Pi,Nf),e(Nf,Sae),M(cL,Sae,null),e(Pi,SHe),e(Pi,Rae),e(Rae,RHe),b(f,uXe,u),b(f,jn,u),e(jn,PHe),e(jn,Pae),e(Pae,BHe),e(jn,IHe),e(jn,Bae),e(Bae,NHe),e(jn,qHe),b(f,bXe,u),M(fL,f,u),b(f,vXe,u),b(f,zS,u),e(zS,jHe),b(f,FXe,u),M(qf,f,u),b(f,TXe,u),b(f,Bi,u),e(Bi,jf),e(jf,Iae),M(mL,Iae,null),e(Bi,DHe),e(Bi,Nae),e(Nae,GHe),b(f,MXe,u),b(f,Ao,u),M(gL,Ao,null),e(Ao,OHe),e(Ao,hL),e(hL,VHe),e(hL,QS),e(QS,XHe),e(hL,zHe),e(Ao,QHe),e(Ao,pL),e(pL,WHe),e(pL,qae),e(qae,HHe),e(pL,UHe),e(Ao,JHe),e(Ao,Lr),M(_L,Lr,null),e(Lr,YHe),e(Lr,jae),e(jae,KHe),e(Lr,ZHe),e(Lr,Ii),e(Ii,eUe),e(Ii,Dae),e(Dae,oUe),e(Ii,rUe),e(Ii,Gae),e(Gae,tUe),e(Ii,aUe),e(Lr,nUe),e(Lr,A),e(A,Df),e(Df,Oae),e(Oae,sUe),e(Df,lUe),e(Df,WS),e(WS,iUe),e(Df,dUe),e(A,cUe),e(A,Gf),e(Gf,Vae),e(Vae,fUe),e(Gf,mUe),e(Gf,HS),e(HS,gUe),e(Gf,hUe),e(A,pUe),e(A,Of),e(Of,Xae),e(Xae,_Ue),e(Of,uUe),e(Of,US),e(US,bUe),e(Of,vUe),e(A,FUe),e(A,Vf),e(Vf,zae),e(zae,TUe),e(Vf,MUe),e(Vf,JS),e(JS,EUe),e(Vf,CUe),e(A,wUe),e(A,Xf),e(Xf,Qae),e(Qae,AUe),e(Xf,LUe),e(Xf,YS),e(YS,yUe),e(Xf,xUe),e(A,$Ue),e(A,zf),e(zf,Wae),e(Wae,kUe),e(zf,SUe),e(zf,KS),e(KS,RUe),e(zf,PUe),e(A,BUe),e(A,Qf),e(Qf,Hae),e(Hae,IUe),e(Qf,NUe),e(Qf,ZS),e(ZS,qUe),e(Qf,jUe),e(A,DUe),e(A,Wf),e(Wf,Uae),e(Uae,GUe),e(Wf,OUe),e(Wf,eR),e(eR,VUe),e(Wf,XUe),e(A,zUe),e(A,Hf),e(Hf,Jae),e(Jae,QUe),e(Hf,WUe),e(Hf,oR),e(oR,HUe),e(Hf,UUe),e(A,JUe),e(A,Uf),e(Uf,Yae),e(Yae,YUe),e(Uf,KUe),e(Uf,rR),e(rR,ZUe),e(Uf,eJe),e(A,oJe),e(A,Jf),e(Jf,Kae),e(Kae,rJe),e(Jf,tJe),e(Jf,tR),e(tR,aJe),e(Jf,nJe),e(A,sJe),e(A,Yf),e(Yf,Zae),e(Zae,lJe),e(Yf,iJe),e(Yf,aR),e(aR,dJe),e(Yf,cJe),e(A,fJe),e(A,Kf),e(Kf,ene),e(ene,mJe),e(Kf,gJe),e(Kf,nR),e(nR,hJe),e(Kf,pJe),e(A,_Je),e(A,Zf),e(Zf,one),e(one,uJe),e(Zf,bJe),e(Zf,sR),e(sR,vJe),e(Zf,FJe),e(A,TJe),e(A,em),e(em,rne),e(rne,MJe),e(em,EJe),e(em,lR),e(lR,CJe),e(em,wJe),e(A,AJe),e(A,om),e(om,tne),e(tne,LJe),e(om,yJe),e(om,iR),e(iR,xJe),e(om,$Je),e(A,kJe),e(A,rm),e(rm,ane),e(ane,SJe),e(rm,RJe),e(rm,dR),e(dR,PJe),e(rm,BJe),e(A,IJe),e(A,tm),e(tm,nne),e(nne,NJe),e(tm,qJe),e(tm,cR),e(cR,jJe),e(tm,DJe),e(A,GJe),e(A,am),e(am,sne),e(sne,OJe),e(am,VJe),e(am,fR),e(fR,XJe),e(am,zJe),e(A,QJe),e(A,nm),e(nm,lne),e(lne,WJe),e(nm,HJe),e(nm,mR),e(mR,UJe),e(nm,JJe),e(A,YJe),e(A,sm),e(sm,ine),e(ine,KJe),e(sm,ZJe),e(sm,gR),e(gR,eYe),e(sm,oYe),e(A,rYe),e(A,lm),e(lm,dne),e(dne,tYe),e(lm,aYe),e(lm,hR),e(hR,nYe),e(lm,sYe),e(A,lYe),e(A,im),e(im,cne),e(cne,iYe),e(im,dYe),e(im,pR),e(pR,cYe),e(im,fYe),e(A,mYe),e(A,dm),e(dm,fne),e(fne,gYe),e(dm,hYe),e(dm,_R),e(_R,pYe),e(dm,_Ye),e(A,uYe),e(A,cm),e(cm,mne),e(mne,bYe),e(cm,vYe),e(cm,uR),e(uR,FYe),e(cm,TYe),e(A,MYe),e(A,fm),e(fm,gne),e(gne,EYe),e(fm,CYe),e(fm,bR),e(bR,wYe),e(fm,AYe),e(A,LYe),e(A,mm),e(mm,hne),e(hne,yYe),e(mm,xYe),e(mm,vR),e(vR,$Ye),e(mm,kYe),e(A,SYe),e(A,gm),e(gm,pne),e(pne,RYe),e(gm,PYe),e(gm,FR),e(FR,BYe),e(gm,IYe),e(A,NYe),e(A,hm),e(hm,_ne),e(_ne,qYe),e(hm,jYe),e(hm,TR),e(TR,DYe),e(hm,GYe),e(A,OYe),e(A,pm),e(pm,une),e(une,VYe),e(pm,XYe),e(pm,MR),e(MR,zYe),e(pm,QYe),e(A,WYe),e(A,_m),e(_m,bne),e(bne,HYe),e(_m,UYe),e(_m,ER),e(ER,JYe),e(_m,YYe),e(A,KYe),e(A,um),e(um,vne),e(vne,ZYe),e(um,eKe),e(um,CR),e(CR,oKe),e(um,rKe),e(A,tKe),e(A,bm),e(bm,Fne),e(Fne,aKe),e(bm,nKe),e(bm,wR),e(wR,sKe),e(bm,lKe),e(A,iKe),e(A,vm),e(vm,Tne),e(Tne,dKe),e(vm,cKe),e(vm,AR),e(AR,fKe),e(vm,mKe),e(A,gKe),e(A,Fm),e(Fm,Mne),e(Mne,hKe),e(Fm,pKe),e(Fm,LR),e(LR,_Ke),e(Fm,uKe),e(A,bKe),e(A,Tm),e(Tm,Ene),e(Ene,vKe),e(Tm,FKe),e(Tm,yR),e(yR,TKe),e(Tm,MKe),e(A,EKe),e(A,Mm),e(Mm,Cne),e(Cne,CKe),e(Mm,wKe),e(Mm,xR),e(xR,AKe),e(Mm,LKe),e(A,yKe),e(A,Em),e(Em,wne),e(wne,xKe),e(Em,$Ke),e(Em,$R),e($R,kKe),e(Em,SKe),e(A,RKe),e(A,Cm),e(Cm,Ane),e(Ane,PKe),e(Cm,BKe),e(Cm,kR),e(kR,IKe),e(Cm,NKe),e(A,qKe),e(A,wm),e(wm,Lne),e(Lne,jKe),e(wm,DKe),e(wm,SR),e(SR,GKe),e(wm,OKe),e(A,VKe),e(A,Am),e(Am,yne),e(yne,XKe),e(Am,zKe),e(Am,RR),e(RR,QKe),e(Am,WKe),e(A,HKe),e(A,Lm),e(Lm,xne),e(xne,UKe),e(Lm,JKe),e(Lm,PR),e(PR,YKe),e(Lm,KKe),e(A,ZKe),e(A,ym),e(ym,$ne),e($ne,eZe),e(ym,oZe),e(ym,BR),e(BR,rZe),e(ym,tZe),e(A,aZe),e(A,xm),e(xm,kne),e(kne,nZe),e(xm,sZe),e(xm,IR),e(IR,lZe),e(xm,iZe),e(A,dZe),e(A,$m),e($m,Sne),e(Sne,cZe),e($m,fZe),e($m,NR),e(NR,mZe),e($m,gZe),e(A,hZe),e(A,km),e(km,Rne),e(Rne,pZe),e(km,_Ze),e(km,qR),e(qR,uZe),e(km,bZe),e(A,vZe),e(A,Sm),e(Sm,Pne),e(Pne,FZe),e(Sm,TZe),e(Sm,jR),e(jR,MZe),e(Sm,EZe),e(A,CZe),e(A,Rm),e(Rm,Bne),e(Bne,wZe),e(Rm,AZe),e(Rm,DR),e(DR,LZe),e(Rm,yZe),e(A,xZe),e(A,Pm),e(Pm,Ine),e(Ine,$Ze),e(Pm,kZe),e(Pm,GR),e(GR,SZe),e(Pm,RZe),e(A,PZe),e(A,Bm),e(Bm,Nne),e(Nne,BZe),e(Bm,IZe),e(Bm,OR),e(OR,NZe),e(Bm,qZe),e(A,jZe),e(A,Im),e(Im,qne),e(qne,DZe),e(Im,GZe),e(Im,VR),e(VR,OZe),e(Im,VZe),e(A,XZe),e(A,Nm),e(Nm,jne),e(jne,zZe),e(Nm,QZe),e(Nm,XR),e(XR,WZe),e(Nm,HZe),e(A,UZe),e(A,qm),e(qm,Dne),e(Dne,JZe),e(qm,YZe),e(qm,zR),e(zR,KZe),e(qm,ZZe),e(A,eeo),e(A,jm),e(jm,Gne),e(Gne,oeo),e(jm,reo),e(jm,QR),e(QR,teo),e(jm,aeo),e(A,neo),e(A,Dm),e(Dm,One),e(One,seo),e(Dm,leo),e(Dm,WR),e(WR,ieo),e(Dm,deo),e(A,ceo),e(A,Gm),e(Gm,Vne),e(Vne,feo),e(Gm,meo),e(Gm,HR),e(HR,geo),e(Gm,heo),e(A,peo),e(A,Om),e(Om,Xne),e(Xne,_eo),e(Om,ueo),e(Om,UR),e(UR,beo),e(Om,veo),e(A,Feo),e(A,Vm),e(Vm,zne),e(zne,Teo),e(Vm,Meo),e(Vm,JR),e(JR,Eeo),e(Vm,Ceo),e(A,weo),e(A,Xm),e(Xm,Qne),e(Qne,Aeo),e(Xm,Leo),e(Xm,YR),e(YR,yeo),e(Xm,xeo),e(A,$eo),e(A,zm),e(zm,Wne),e(Wne,keo),e(zm,Seo),e(zm,KR),e(KR,Reo),e(zm,Peo),e(A,Beo),e(A,Qm),e(Qm,Hne),e(Hne,Ieo),e(Qm,Neo),e(Qm,ZR),e(ZR,qeo),e(Qm,jeo),e(A,Deo),e(A,Wm),e(Wm,Une),e(Une,Geo),e(Wm,Oeo),e(Wm,eP),e(eP,Veo),e(Wm,Xeo),e(A,zeo),e(A,Hm),e(Hm,Jne),e(Jne,Qeo),e(Hm,Weo),e(Hm,oP),e(oP,Heo),e(Hm,Ueo),e(A,Jeo),e(A,Um),e(Um,Yne),e(Yne,Yeo),e(Um,Keo),e(Um,rP),e(rP,Zeo),e(Um,eoo),e(A,ooo),e(A,Jm),e(Jm,Kne),e(Kne,roo),e(Jm,too),e(Jm,tP),e(tP,aoo),e(Jm,noo),e(A,soo),e(A,Ym),e(Ym,Zne),e(Zne,loo),e(Ym,ioo),e(Ym,aP),e(aP,doo),e(Ym,coo),e(A,foo),e(A,Km),e(Km,ese),e(ese,moo),e(Km,goo),e(Km,nP),e(nP,hoo),e(Km,poo),e(A,_oo),e(A,Zm),e(Zm,ose),e(ose,uoo),e(Zm,boo),e(Zm,sP),e(sP,voo),e(Zm,Foo),e(A,Too),e(A,eg),e(eg,rse),e(rse,Moo),e(eg,Eoo),e(eg,lP),e(lP,Coo),e(eg,woo),e(A,Aoo),e(A,og),e(og,tse),e(tse,Loo),e(og,yoo),e(og,iP),e(iP,xoo),e(og,$oo),e(A,koo),e(A,rg),e(rg,ase),e(ase,Soo),e(rg,Roo),e(rg,dP),e(dP,Poo),e(rg,Boo),e(A,Ioo),e(A,tg),e(tg,nse),e(nse,Noo),e(tg,qoo),e(tg,cP),e(cP,joo),e(tg,Doo),e(A,Goo),e(A,ag),e(ag,sse),e(sse,Ooo),e(ag,Voo),e(ag,fP),e(fP,Xoo),e(ag,zoo),e(A,Qoo),e(A,ng),e(ng,lse),e(lse,Woo),e(ng,Hoo),e(ng,mP),e(mP,Uoo),e(ng,Joo),e(A,Yoo),e(A,sg),e(sg,ise),e(ise,Koo),e(sg,Zoo),e(sg,gP),e(gP,ero),e(sg,oro),e(A,rro),e(A,lg),e(lg,dse),e(dse,tro),e(lg,aro),e(lg,hP),e(hP,nro),e(lg,sro),e(A,lro),e(A,ig),e(ig,cse),e(cse,iro),e(ig,dro),e(ig,pP),e(pP,cro),e(ig,fro),e(A,mro),e(A,dg),e(dg,fse),e(fse,gro),e(dg,hro),e(dg,_P),e(_P,pro),e(dg,_ro),e(A,uro),e(A,cg),e(cg,mse),e(mse,bro),e(cg,vro),e(cg,uP),e(uP,Fro),e(cg,Tro),e(A,Mro),e(A,fg),e(fg,gse),e(gse,Ero),e(fg,Cro),e(fg,bP),e(bP,wro),e(fg,Aro),e(A,Lro),e(A,mg),e(mg,hse),e(hse,yro),e(mg,xro),e(mg,vP),e(vP,$ro),e(mg,kro),e(A,Sro),e(A,gg),e(gg,pse),e(pse,Rro),e(gg,Pro),e(gg,FP),e(FP,Bro),e(gg,Iro),e(A,Nro),e(A,hg),e(hg,_se),e(_se,qro),e(hg,jro),e(hg,TP),e(TP,Dro),e(hg,Gro),e(A,Oro),e(A,pg),e(pg,use),e(use,Vro),e(pg,Xro),e(pg,MP),e(MP,zro),e(pg,Qro),e(A,Wro),e(A,_g),e(_g,bse),e(bse,Hro),e(_g,Uro),e(_g,EP),e(EP,Jro),e(_g,Yro),e(A,Kro),e(A,ug),e(ug,vse),e(vse,Zro),e(ug,eto),e(ug,CP),e(CP,oto),e(ug,rto),e(A,tto),e(A,bg),e(bg,Fse),e(Fse,ato),e(bg,nto),e(bg,wP),e(wP,sto),e(bg,lto),e(A,ito),e(A,vg),e(vg,Tse),e(Tse,dto),e(vg,cto),e(vg,AP),e(AP,fto),e(vg,mto),e(A,gto),e(A,Fg),e(Fg,Mse),e(Mse,hto),e(Fg,pto),e(Fg,LP),e(LP,_to),e(Fg,uto),e(A,bto),e(A,Tg),e(Tg,Ese),e(Ese,vto),e(Tg,Fto),e(Tg,yP),e(yP,Tto),e(Tg,Mto),e(A,Eto),e(A,Mg),e(Mg,Cse),e(Cse,Cto),e(Mg,wto),e(Mg,xP),e(xP,Ato),e(Mg,Lto),e(A,yto),e(A,Eg),e(Eg,wse),e(wse,xto),e(Eg,$to),e(Eg,$P),e($P,kto),e(Eg,Sto),e(A,Rto),e(A,Cg),e(Cg,Ase),e(Ase,Pto),e(Cg,Bto),e(Cg,kP),e(kP,Ito),e(Cg,Nto),e(A,qto),e(A,wg),e(wg,Lse),e(Lse,jto),e(wg,Dto),e(wg,SP),e(SP,Gto),e(wg,Oto),e(A,Vto),e(A,Ag),e(Ag,yse),e(yse,Xto),e(Ag,zto),e(Ag,RP),e(RP,Qto),e(Ag,Wto),e(A,Hto),e(A,Lg),e(Lg,xse),e(xse,Uto),e(Lg,Jto),e(Lg,PP),e(PP,Yto),e(Lg,Kto),e(A,Zto),e(A,yg),e(yg,$se),e($se,eao),e(yg,oao),e(yg,BP),e(BP,rao),e(yg,tao),e(A,aao),e(A,xg),e(xg,kse),e(kse,nao),e(xg,sao),e(xg,IP),e(IP,lao),e(xg,iao),e(A,dao),e(A,$g),e($g,Sse),e(Sse,cao),e($g,fao),e($g,NP),e(NP,mao),e($g,gao),e(A,hao),e(A,kg),e(kg,Rse),e(Rse,pao),e(kg,_ao),e(kg,qP),e(qP,uao),e(kg,bao),e(A,vao),e(A,Sg),e(Sg,Pse),e(Pse,Fao),e(Sg,Tao),e(Sg,jP),e(jP,Mao),e(Sg,Eao),e(A,Cao),e(A,Rg),e(Rg,Bse),e(Bse,wao),e(Rg,Aao),e(Rg,DP),e(DP,Lao),e(Rg,yao),e(A,xao),e(A,Pg),e(Pg,Ise),e(Ise,$ao),e(Pg,kao),e(Pg,GP),e(GP,Sao),e(Pg,Rao),e(A,Pao),e(A,Bg),e(Bg,Nse),e(Nse,Bao),e(Bg,Iao),e(Bg,OP),e(OP,Nao),e(Bg,qao),e(A,jao),e(A,Ig),e(Ig,qse),e(qse,Dao),e(Ig,Gao),e(Ig,VP),e(VP,Oao),e(Ig,Vao),e(A,Xao),e(A,Ng),e(Ng,jse),e(jse,zao),e(Ng,Qao),e(Ng,XP),e(XP,Wao),e(Ng,Hao),e(A,Uao),e(A,qg),e(qg,Dse),e(Dse,Jao),e(qg,Yao),e(qg,zP),e(zP,Kao),e(qg,Zao),e(A,eno),e(A,jg),e(jg,Gse),e(Gse,ono),e(jg,rno),e(jg,QP),e(QP,tno),e(jg,ano),e(A,nno),e(A,Dg),e(Dg,Ose),e(Ose,sno),e(Dg,lno),e(Dg,WP),e(WP,ino),e(Dg,dno),e(A,cno),e(A,Gg),e(Gg,Vse),e(Vse,fno),e(Gg,mno),e(Gg,HP),e(HP,gno),e(Gg,hno),e(A,pno),e(A,Og),e(Og,Xse),e(Xse,_no),e(Og,uno),e(Og,UP),e(UP,bno),e(Og,vno),e(A,Fno),e(A,Vg),e(Vg,zse),e(zse,Tno),e(Vg,Mno),e(Vg,JP),e(JP,Eno),e(Vg,Cno),e(A,wno),e(A,Xg),e(Xg,Qse),e(Qse,Ano),e(Xg,Lno),e(Xg,YP),e(YP,yno),e(Xg,xno),e(A,$no),e(A,zg),e(zg,Wse),e(Wse,kno),e(zg,Sno),e(zg,KP),e(KP,Rno),e(zg,Pno),e(A,Bno),e(A,Qg),e(Qg,Hse),e(Hse,Ino),e(Qg,Nno),e(Qg,ZP),e(ZP,qno),e(Qg,jno),e(A,Dno),e(A,Wg),e(Wg,Use),e(Use,Gno),e(Wg,Ono),e(Wg,eB),e(eB,Vno),e(Wg,Xno),e(A,zno),e(A,Hg),e(Hg,Jse),e(Jse,Qno),e(Hg,Wno),e(Hg,oB),e(oB,Hno),e(Hg,Uno),e(A,Jno),e(A,Ug),e(Ug,Yse),e(Yse,Yno),e(Ug,Kno),e(Ug,rB),e(rB,Zno),e(Ug,eso),e(A,oso),e(A,Jg),e(Jg,Kse),e(Kse,rso),e(Jg,tso),e(Jg,tB),e(tB,aso),e(Jg,nso),e(Lr,sso),M(Yg,Lr,null),e(Ao,lso),e(Ao,Kg),M(uL,Kg,null),e(Kg,iso),e(Kg,Zse),e(Zse,dso),b(f,EXe,u),b(f,Ni,u),e(Ni,Zg),e(Zg,ele),M(bL,ele,null),e(Ni,cso),e(Ni,ole),e(ole,fso),b(f,CXe,u),b(f,Lo,u),M(vL,Lo,null),e(Lo,mso),e(Lo,FL),e(FL,gso),e(FL,aB),e(aB,hso),e(FL,pso),e(Lo,_so),e(Lo,TL),e(TL,uso),e(TL,rle),e(rle,bso),e(TL,vso),e(Lo,Fso),e(Lo,yr),M(ML,yr,null),e(yr,Tso),e(yr,tle),e(tle,Mso),e(yr,Eso),e(yr,Pa),e(Pa,Cso),e(Pa,ale),e(ale,wso),e(Pa,Aso),e(Pa,nle),e(nle,Lso),e(Pa,yso),e(Pa,sle),e(sle,xso),e(Pa,$so),e(yr,kso),e(yr,k),e(k,Dn),e(Dn,lle),e(lle,Sso),e(Dn,Rso),e(Dn,nB),e(nB,Pso),e(Dn,Bso),e(Dn,sB),e(sB,Iso),e(Dn,Nso),e(k,qso),e(k,Gn),e(Gn,ile),e(ile,jso),e(Gn,Dso),e(Gn,lB),e(lB,Gso),e(Gn,Oso),e(Gn,iB),e(iB,Vso),e(Gn,Xso),e(k,zso),e(k,On),e(On,dle),e(dle,Qso),e(On,Wso),e(On,dB),e(dB,Hso),e(On,Uso),e(On,cB),e(cB,Jso),e(On,Yso),e(k,Kso),e(k,eh),e(eh,cle),e(cle,Zso),e(eh,elo),e(eh,fB),e(fB,olo),e(eh,rlo),e(k,tlo),e(k,Vn),e(Vn,fle),e(fle,alo),e(Vn,nlo),e(Vn,mB),e(mB,slo),e(Vn,llo),e(Vn,gB),e(gB,ilo),e(Vn,dlo),e(k,clo),e(k,oh),e(oh,mle),e(mle,flo),e(oh,mlo),e(oh,hB),e(hB,glo),e(oh,hlo),e(k,plo),e(k,rh),e(rh,gle),e(gle,_lo),e(rh,ulo),e(rh,pB),e(pB,blo),e(rh,vlo),e(k,Flo),e(k,th),e(th,hle),e(hle,Tlo),e(th,Mlo),e(th,_B),e(_B,Elo),e(th,Clo),e(k,wlo),e(k,Xn),e(Xn,ple),e(ple,Alo),e(Xn,Llo),e(Xn,uB),e(uB,ylo),e(Xn,xlo),e(Xn,bB),e(bB,$lo),e(Xn,klo),e(k,Slo),e(k,zn),e(zn,_le),e(_le,Rlo),e(zn,Plo),e(zn,vB),e(vB,Blo),e(zn,Ilo),e(zn,FB),e(FB,Nlo),e(zn,qlo),e(k,jlo),e(k,Qn),e(Qn,ule),e(ule,Dlo),e(Qn,Glo),e(Qn,TB),e(TB,Olo),e(Qn,Vlo),e(Qn,MB),e(MB,Xlo),e(Qn,zlo),e(k,Qlo),e(k,ah),e(ah,ble),e(ble,Wlo),e(ah,Hlo),e(ah,EB),e(EB,Ulo),e(ah,Jlo),e(k,Ylo),e(k,nh),e(nh,vle),e(vle,Klo),e(nh,Zlo),e(nh,CB),e(CB,eio),e(nh,oio),e(k,rio),e(k,sh),e(sh,Fle),e(Fle,tio),e(sh,aio),e(sh,wB),e(wB,nio),e(sh,sio),e(k,lio),e(k,Wn),e(Wn,Tle),e(Tle,iio),e(Wn,dio),e(Wn,AB),e(AB,cio),e(Wn,fio),e(Wn,LB),e(LB,mio),e(Wn,gio),e(k,hio),e(k,lh),e(lh,Mle),e(Mle,pio),e(lh,_io),e(lh,yB),e(yB,uio),e(lh,bio),e(k,vio),e(k,Hn),e(Hn,Ele),e(Ele,Fio),e(Hn,Tio),e(Hn,xB),e(xB,Mio),e(Hn,Eio),e(Hn,$B),e($B,Cio),e(Hn,wio),e(k,Aio),e(k,Un),e(Un,Cle),e(Cle,Lio),e(Un,yio),e(Un,kB),e(kB,xio),e(Un,$io),e(Un,SB),e(SB,kio),e(Un,Sio),e(k,Rio),e(k,Jn),e(Jn,wle),e(wle,Pio),e(Jn,Bio),e(Jn,RB),e(RB,Iio),e(Jn,Nio),e(Jn,PB),e(PB,qio),e(Jn,jio),e(k,Dio),e(k,Yn),e(Yn,Ale),e(Ale,Gio),e(Yn,Oio),e(Yn,BB),e(BB,Vio),e(Yn,Xio),e(Yn,IB),e(IB,zio),e(Yn,Qio),e(k,Wio),e(k,ih),e(ih,Lle),e(Lle,Hio),e(ih,Uio),e(ih,NB),e(NB,Jio),e(ih,Yio),e(k,Kio),e(k,Kn),e(Kn,yle),e(yle,Zio),e(Kn,edo),e(Kn,qB),e(qB,odo),e(Kn,rdo),e(Kn,jB),e(jB,tdo),e(Kn,ado),e(k,ndo),e(k,Zn),e(Zn,xle),e(xle,sdo),e(Zn,ldo),e(Zn,DB),e(DB,ido),e(Zn,ddo),e(Zn,GB),e(GB,cdo),e(Zn,fdo),e(k,mdo),e(k,es),e(es,$le),e($le,gdo),e(es,hdo),e(es,OB),e(OB,pdo),e(es,_do),e(es,VB),e(VB,udo),e(es,bdo),e(k,vdo),e(k,os),e(os,kle),e(kle,Fdo),e(os,Tdo),e(os,XB),e(XB,Mdo),e(os,Edo),e(os,zB),e(zB,Cdo),e(os,wdo),e(k,Ado),e(k,rs),e(rs,Sle),e(Sle,Ldo),e(rs,ydo),e(rs,QB),e(QB,xdo),e(rs,$do),e(rs,WB),e(WB,kdo),e(rs,Sdo),e(k,Rdo),e(k,ts),e(ts,Rle),e(Rle,Pdo),e(ts,Bdo),e(ts,HB),e(HB,Ido),e(ts,Ndo),e(ts,UB),e(UB,qdo),e(ts,jdo),e(k,Ddo),e(k,dh),e(dh,Ple),e(Ple,Gdo),e(dh,Odo),e(dh,JB),e(JB,Vdo),e(dh,Xdo),e(k,zdo),e(k,as),e(as,Ble),e(Ble,Qdo),e(as,Wdo),e(as,YB),e(YB,Hdo),e(as,Udo),e(as,KB),e(KB,Jdo),e(as,Ydo),e(k,Kdo),e(k,ch),e(ch,Ile),e(Ile,Zdo),e(ch,eco),e(ch,ZB),e(ZB,oco),e(ch,rco),e(k,tco),e(k,ns),e(ns,Nle),e(Nle,aco),e(ns,nco),e(ns,eI),e(eI,sco),e(ns,lco),e(ns,oI),e(oI,ico),e(ns,dco),e(k,cco),e(k,ss),e(ss,qle),e(qle,fco),e(ss,mco),e(ss,rI),e(rI,gco),e(ss,hco),e(ss,tI),e(tI,pco),e(ss,_co),e(k,uco),e(k,ls),e(ls,jle),e(jle,bco),e(ls,vco),e(ls,aI),e(aI,Fco),e(ls,Tco),e(ls,nI),e(nI,Mco),e(ls,Eco),e(k,Cco),e(k,fh),e(fh,Dle),e(Dle,wco),e(fh,Aco),e(fh,sI),e(sI,Lco),e(fh,yco),e(k,xco),e(k,is),e(is,Gle),e(Gle,$co),e(is,kco),e(is,lI),e(lI,Sco),e(is,Rco),e(is,iI),e(iI,Pco),e(is,Bco),e(k,Ico),e(k,ds),e(ds,Ole),e(Ole,Nco),e(ds,qco),e(ds,dI),e(dI,jco),e(ds,Dco),e(ds,cI),e(cI,Gco),e(ds,Oco),e(k,Vco),e(k,cs),e(cs,Vle),e(Vle,Xco),e(cs,zco),e(cs,fI),e(fI,Qco),e(cs,Wco),e(cs,mI),e(mI,Hco),e(cs,Uco),e(k,Jco),e(k,mh),e(mh,Xle),e(Xle,Yco),e(mh,Kco),e(mh,gI),e(gI,Zco),e(mh,efo),e(k,ofo),e(k,fs),e(fs,zle),e(zle,rfo),e(fs,tfo),e(fs,hI),e(hI,afo),e(fs,nfo),e(fs,pI),e(pI,sfo),e(fs,lfo),e(k,ifo),e(k,ms),e(ms,Qle),e(Qle,dfo),e(ms,cfo),e(ms,_I),e(_I,ffo),e(ms,mfo),e(ms,uI),e(uI,gfo),e(ms,hfo),e(k,pfo),e(k,gs),e(gs,Wle),e(Wle,_fo),e(gs,ufo),e(gs,bI),e(bI,bfo),e(gs,vfo),e(gs,vI),e(vI,Ffo),e(gs,Tfo),e(k,Mfo),e(k,hs),e(hs,Hle),e(Hle,Efo),e(hs,Cfo),e(hs,FI),e(FI,wfo),e(hs,Afo),e(hs,TI),e(TI,Lfo),e(hs,yfo),e(k,xfo),e(k,ps),e(ps,Ule),e(Ule,$fo),e(ps,kfo),e(ps,MI),e(MI,Sfo),e(ps,Rfo),e(ps,EI),e(EI,Pfo),e(ps,Bfo),e(k,Ifo),e(k,_s),e(_s,Jle),e(Jle,Nfo),e(_s,qfo),e(_s,CI),e(CI,jfo),e(_s,Dfo),e(_s,wI),e(wI,Gfo),e(_s,Ofo),e(k,Vfo),e(k,us),e(us,Yle),e(Yle,Xfo),e(us,zfo),e(us,AI),e(AI,Qfo),e(us,Wfo),e(us,LI),e(LI,Hfo),e(us,Ufo),e(k,Jfo),e(k,bs),e(bs,Kle),e(Kle,Yfo),e(bs,Kfo),e(bs,yI),e(yI,Zfo),e(bs,emo),e(bs,xI),e(xI,omo),e(bs,rmo),e(k,tmo),e(k,gh),e(gh,Zle),e(Zle,amo),e(gh,nmo),e(gh,$I),e($I,smo),e(gh,lmo),e(k,imo),e(k,vs),e(vs,eie),e(eie,dmo),e(vs,cmo),e(vs,kI),e(kI,fmo),e(vs,mmo),e(vs,SI),e(SI,gmo),e(vs,hmo),e(k,pmo),e(k,hh),e(hh,oie),e(oie,_mo),e(hh,umo),e(hh,RI),e(RI,bmo),e(hh,vmo),e(k,Fmo),e(k,ph),e(ph,rie),e(rie,Tmo),e(ph,Mmo),e(ph,PI),e(PI,Emo),e(ph,Cmo),e(k,wmo),e(k,Fs),e(Fs,tie),e(tie,Amo),e(Fs,Lmo),e(Fs,BI),e(BI,ymo),e(Fs,xmo),e(Fs,II),e(II,$mo),e(Fs,kmo),e(k,Smo),e(k,Ts),e(Ts,aie),e(aie,Rmo),e(Ts,Pmo),e(Ts,NI),e(NI,Bmo),e(Ts,Imo),e(Ts,qI),e(qI,Nmo),e(Ts,qmo),e(k,jmo),e(k,Ms),e(Ms,nie),e(nie,Dmo),e(Ms,Gmo),e(Ms,jI),e(jI,Omo),e(Ms,Vmo),e(Ms,DI),e(DI,Xmo),e(Ms,zmo),e(k,Qmo),e(k,_h),e(_h,sie),e(sie,Wmo),e(_h,Hmo),e(_h,GI),e(GI,Umo),e(_h,Jmo),e(k,Ymo),e(k,Es),e(Es,lie),e(lie,Kmo),e(Es,Zmo),e(Es,OI),e(OI,ego),e(Es,ogo),e(Es,VI),e(VI,rgo),e(Es,tgo),e(k,ago),e(k,Cs),e(Cs,iie),e(iie,ngo),e(Cs,sgo),e(Cs,XI),e(XI,lgo),e(Cs,igo),e(Cs,zI),e(zI,dgo),e(Cs,cgo),e(k,fgo),e(k,ws),e(ws,die),e(die,mgo),e(ws,ggo),e(ws,QI),e(QI,hgo),e(ws,pgo),e(ws,WI),e(WI,_go),e(ws,ugo),e(k,bgo),e(k,As),e(As,cie),e(cie,vgo),e(As,Fgo),e(As,HI),e(HI,Tgo),e(As,Mgo),e(As,UI),e(UI,Ego),e(As,Cgo),e(k,wgo),e(k,Ls),e(Ls,fie),e(fie,Ago),e(Ls,Lgo),e(Ls,JI),e(JI,ygo),e(Ls,xgo),e(Ls,YI),e(YI,$go),e(Ls,kgo),e(k,Sgo),e(k,ys),e(ys,mie),e(mie,Rgo),e(ys,Pgo),e(ys,KI),e(KI,Bgo),e(ys,Igo),e(ys,ZI),e(ZI,Ngo),e(ys,qgo),e(k,jgo),e(k,xs),e(xs,gie),e(gie,Dgo),e(xs,Ggo),e(xs,eN),e(eN,Ogo),e(xs,Vgo),e(xs,oN),e(oN,Xgo),e(xs,zgo),e(k,Qgo),e(k,uh),e(uh,hie),e(hie,Wgo),e(uh,Hgo),e(uh,rN),e(rN,Ugo),e(uh,Jgo),e(k,Ygo),e(k,$s),e($s,pie),e(pie,Kgo),e($s,Zgo),e($s,tN),e(tN,eho),e($s,oho),e($s,aN),e(aN,rho),e($s,tho),e(k,aho),e(k,bh),e(bh,_ie),e(_ie,nho),e(bh,sho),e(bh,nN),e(nN,lho),e(bh,iho),e(k,dho),e(k,vh),e(vh,uie),e(uie,cho),e(vh,fho),e(vh,sN),e(sN,mho),e(vh,gho),e(k,hho),e(k,Fh),e(Fh,bie),e(bie,pho),e(Fh,_ho),e(Fh,lN),e(lN,uho),e(Fh,bho),e(k,vho),e(k,Th),e(Th,vie),e(vie,Fho),e(Th,Tho),e(Th,iN),e(iN,Mho),e(Th,Eho),e(k,Cho),e(k,ks),e(ks,Fie),e(Fie,who),e(ks,Aho),e(ks,dN),e(dN,Lho),e(ks,yho),e(ks,cN),e(cN,xho),e(ks,$ho),e(k,kho),e(k,Mh),e(Mh,Tie),e(Tie,Sho),e(Mh,Rho),e(Mh,fN),e(fN,Pho),e(Mh,Bho),e(k,Iho),e(k,Ss),e(Ss,Mie),e(Mie,Nho),e(Ss,qho),e(Ss,mN),e(mN,jho),e(Ss,Dho),e(Ss,gN),e(gN,Gho),e(Ss,Oho),e(k,Vho),e(k,Rs),e(Rs,Eie),e(Eie,Xho),e(Rs,zho),e(Rs,hN),e(hN,Qho),e(Rs,Who),e(Rs,pN),e(pN,Hho),e(Rs,Uho),e(k,Jho),e(k,Ps),e(Ps,Cie),e(Cie,Yho),e(Ps,Kho),e(Ps,_N),e(_N,Zho),e(Ps,epo),e(Ps,uN),e(uN,opo),e(Ps,rpo),e(k,tpo),e(k,Bs),e(Bs,wie),e(wie,apo),e(Bs,npo),e(Bs,bN),e(bN,spo),e(Bs,lpo),e(Bs,vN),e(vN,ipo),e(Bs,dpo),e(k,cpo),e(k,Is),e(Is,Aie),e(Aie,fpo),e(Is,mpo),e(Is,FN),e(FN,gpo),e(Is,hpo),e(Is,TN),e(TN,ppo),e(Is,_po),e(k,upo),e(k,Ns),e(Ns,Lie),e(Lie,bpo),e(Ns,vpo),e(Ns,MN),e(MN,Fpo),e(Ns,Tpo),e(Ns,EN),e(EN,Mpo),e(Ns,Epo),e(k,Cpo),e(k,Eh),e(Eh,yie),e(yie,wpo),e(Eh,Apo),e(Eh,CN),e(CN,Lpo),e(Eh,ypo),e(k,xpo),e(k,Ch),e(Ch,xie),e(xie,$po),e(Ch,kpo),e(Ch,wN),e(wN,Spo),e(Ch,Rpo),e(k,Ppo),e(k,qs),e(qs,$ie),e($ie,Bpo),e(qs,Ipo),e(qs,AN),e(AN,Npo),e(qs,qpo),e(qs,LN),e(LN,jpo),e(qs,Dpo),e(k,Gpo),e(k,js),e(js,kie),e(kie,Opo),e(js,Vpo),e(js,yN),e(yN,Xpo),e(js,zpo),e(js,xN),e(xN,Qpo),e(js,Wpo),e(k,Hpo),e(k,Ds),e(Ds,Sie),e(Sie,Upo),e(Ds,Jpo),e(Ds,$N),e($N,Ypo),e(Ds,Kpo),e(Ds,kN),e(kN,Zpo),e(Ds,e_o),e(k,o_o),e(k,wh),e(wh,Rie),e(Rie,r_o),e(wh,t_o),e(wh,SN),e(SN,a_o),e(wh,n_o),e(k,s_o),e(k,Ah),e(Ah,Pie),e(Pie,l_o),e(Ah,i_o),e(Ah,RN),e(RN,d_o),e(Ah,c_o),e(k,f_o),e(k,Lh),e(Lh,Bie),e(Bie,m_o),e(Lh,g_o),e(Lh,PN),e(PN,h_o),e(Lh,p_o),e(k,__o),e(k,Gs),e(Gs,Iie),e(Iie,u_o),e(Gs,b_o),e(Gs,BN),e(BN,v_o),e(Gs,F_o),e(Gs,IN),e(IN,T_o),e(Gs,M_o),e(k,E_o),e(k,Os),e(Os,Nie),e(Nie,C_o),e(Os,w_o),e(Os,NN),e(NN,A_o),e(Os,L_o),e(Os,qN),e(qN,y_o),e(Os,x_o),e(k,$_o),e(k,yh),e(yh,qie),e(qie,k_o),e(yh,S_o),e(yh,jN),e(jN,R_o),e(yh,P_o),e(k,B_o),e(k,xh),e(xh,jie),e(jie,I_o),e(xh,N_o),e(xh,DN),e(DN,q_o),e(xh,j_o),e(k,D_o),e(k,$h),e($h,Die),e(Die,G_o),e($h,O_o),e($h,GN),e(GN,V_o),e($h,X_o),e(k,z_o),e(k,Vs),e(Vs,Gie),e(Gie,Q_o),e(Vs,W_o),e(Vs,ON),e(ON,H_o),e(Vs,U_o),e(Vs,VN),e(VN,J_o),e(Vs,Y_o),e(k,K_o),e(k,kh),e(kh,Oie),e(Oie,Z_o),e(kh,euo),e(kh,XN),e(XN,ouo),e(kh,ruo),e(k,tuo),e(k,Sh),e(Sh,Vie),e(Vie,auo),e(Sh,nuo),e(Sh,zN),e(zN,suo),e(Sh,luo),e(k,iuo),e(k,Xs),e(Xs,Xie),e(Xie,duo),e(Xs,cuo),e(Xs,QN),e(QN,fuo),e(Xs,muo),e(Xs,WN),e(WN,guo),e(Xs,huo),e(k,puo),e(k,zs),e(zs,zie),e(zie,_uo),e(zs,uuo),e(zs,HN),e(HN,buo),e(zs,vuo),e(zs,UN),e(UN,Fuo),e(zs,Tuo),e(k,Muo),e(k,Qs),e(Qs,Qie),e(Qie,Euo),e(Qs,Cuo),e(Qs,JN),e(JN,wuo),e(Qs,Auo),e(Qs,YN),e(YN,Luo),e(Qs,yuo),e(k,xuo),e(k,Ws),e(Ws,Wie),e(Wie,$uo),e(Ws,kuo),e(Ws,KN),e(KN,Suo),e(Ws,Ruo),e(Ws,ZN),e(ZN,Puo),e(Ws,Buo),e(yr,Iuo),M(Rh,yr,null),e(Lo,Nuo),e(Lo,Ph),M(EL,Ph,null),e(Ph,quo),e(Ph,Hie),e(Hie,juo),b(f,wXe,u),b(f,qi,u),e(qi,Bh),e(Bh,Uie),M(CL,Uie,null),e(qi,Duo),e(qi,Jie),e(Jie,Guo),b(f,AXe,u),b(f,yo,u),M(wL,yo,null),e(yo,Ouo),e(yo,AL),e(AL,Vuo),e(AL,eq),e(eq,Xuo),e(AL,zuo),e(yo,Quo),e(yo,LL),e(LL,Wuo),e(LL,Yie),e(Yie,Huo),e(LL,Uuo),e(yo,Juo),e(yo,Ue),M(yL,Ue,null),e(Ue,Yuo),e(Ue,Kie),e(Kie,Kuo),e(Ue,Zuo),e(Ue,Ba),e(Ba,e1o),e(Ba,Zie),e(Zie,o1o),e(Ba,r1o),e(Ba,ede),e(ede,t1o),e(Ba,a1o),e(Ba,ode),e(ode,n1o),e(Ba,s1o),e(Ue,l1o),e(Ue,J),e(J,Ih),e(Ih,rde),e(rde,i1o),e(Ih,d1o),e(Ih,oq),e(oq,c1o),e(Ih,f1o),e(J,m1o),e(J,Nh),e(Nh,tde),e(tde,g1o),e(Nh,h1o),e(Nh,rq),e(rq,p1o),e(Nh,_1o),e(J,u1o),e(J,qh),e(qh,ade),e(ade,b1o),e(qh,v1o),e(qh,tq),e(tq,F1o),e(qh,T1o),e(J,M1o),e(J,jh),e(jh,nde),e(nde,E1o),e(jh,C1o),e(jh,aq),e(aq,w1o),e(jh,A1o),e(J,L1o),e(J,Dh),e(Dh,sde),e(sde,y1o),e(Dh,x1o),e(Dh,nq),e(nq,$1o),e(Dh,k1o),e(J,S1o),e(J,Gh),e(Gh,lde),e(lde,R1o),e(Gh,P1o),e(Gh,sq),e(sq,B1o),e(Gh,I1o),e(J,N1o),e(J,Oh),e(Oh,ide),e(ide,q1o),e(Oh,j1o),e(Oh,lq),e(lq,D1o),e(Oh,G1o),e(J,O1o),e(J,Vh),e(Vh,dde),e(dde,V1o),e(Vh,X1o),e(Vh,iq),e(iq,z1o),e(Vh,Q1o),e(J,W1o),e(J,Xh),e(Xh,cde),e(cde,H1o),e(Xh,U1o),e(Xh,dq),e(dq,J1o),e(Xh,Y1o),e(J,K1o),e(J,zh),e(zh,fde),e(fde,Z1o),e(zh,e2o),e(zh,cq),e(cq,o2o),e(zh,r2o),e(J,t2o),e(J,Qh),e(Qh,mde),e(mde,a2o),e(Qh,n2o),e(Qh,fq),e(fq,s2o),e(Qh,l2o),e(J,i2o),e(J,Wh),e(Wh,gde),e(gde,d2o),e(Wh,c2o),e(Wh,mq),e(mq,f2o),e(Wh,m2o),e(J,g2o),e(J,Hh),e(Hh,hde),e(hde,h2o),e(Hh,p2o),e(Hh,gq),e(gq,_2o),e(Hh,u2o),e(J,b2o),e(J,Uh),e(Uh,pde),e(pde,v2o),e(Uh,F2o),e(Uh,hq),e(hq,T2o),e(Uh,M2o),e(J,E2o),e(J,Jh),e(Jh,_de),e(_de,C2o),e(Jh,w2o),e(Jh,pq),e(pq,A2o),e(Jh,L2o),e(J,y2o),e(J,Yh),e(Yh,ude),e(ude,x2o),e(Yh,$2o),e(Yh,_q),e(_q,k2o),e(Yh,S2o),e(J,R2o),e(J,Kh),e(Kh,bde),e(bde,P2o),e(Kh,B2o),e(Kh,uq),e(uq,I2o),e(Kh,N2o),e(J,q2o),e(J,Zh),e(Zh,vde),e(vde,j2o),e(Zh,D2o),e(Zh,bq),e(bq,G2o),e(Zh,O2o),e(J,V2o),e(J,ep),e(ep,Fde),e(Fde,X2o),e(ep,z2o),e(ep,vq),e(vq,Q2o),e(ep,W2o),e(J,H2o),e(J,op),e(op,Tde),e(Tde,U2o),e(op,J2o),e(op,Fq),e(Fq,Y2o),e(op,K2o),e(J,Z2o),e(J,rp),e(rp,Mde),e(Mde,e4o),e(rp,o4o),e(rp,Tq),e(Tq,r4o),e(rp,t4o),e(J,a4o),e(J,tp),e(tp,Ede),e(Ede,n4o),e(tp,s4o),e(tp,Mq),e(Mq,l4o),e(tp,i4o),e(J,d4o),e(J,ap),e(ap,Cde),e(Cde,c4o),e(ap,f4o),e(ap,Eq),e(Eq,m4o),e(ap,g4o),e(J,h4o),e(J,np),e(np,wde),e(wde,p4o),e(np,_4o),e(np,Cq),e(Cq,u4o),e(np,b4o),e(J,v4o),e(J,sp),e(sp,Ade),e(Ade,F4o),e(sp,T4o),e(sp,wq),e(wq,M4o),e(sp,E4o),e(J,C4o),e(J,lp),e(lp,Lde),e(Lde,w4o),e(lp,A4o),e(lp,Aq),e(Aq,L4o),e(lp,y4o),e(J,x4o),e(J,ip),e(ip,yde),e(yde,$4o),e(ip,k4o),e(ip,Lq),e(Lq,S4o),e(ip,R4o),e(J,P4o),e(J,dp),e(dp,xde),e(xde,B4o),e(dp,I4o),e(dp,yq),e(yq,N4o),e(dp,q4o),e(J,j4o),e(J,cp),e(cp,$de),e($de,D4o),e(cp,G4o),e(cp,xq),e(xq,O4o),e(cp,V4o),e(J,X4o),e(J,fp),e(fp,kde),e(kde,z4o),e(fp,Q4o),e(fp,$q),e($q,W4o),e(fp,H4o),e(J,U4o),e(J,mp),e(mp,Sde),e(Sde,J4o),e(mp,Y4o),e(mp,kq),e(kq,K4o),e(mp,Z4o),e(J,ebo),e(J,gp),e(gp,Rde),e(Rde,obo),e(gp,rbo),e(gp,Sq),e(Sq,tbo),e(gp,abo),e(J,nbo),e(J,hp),e(hp,Pde),e(Pde,sbo),e(hp,lbo),e(hp,Rq),e(Rq,ibo),e(hp,dbo),e(J,cbo),e(J,pp),e(pp,Bde),e(Bde,fbo),e(pp,mbo),e(pp,Pq),e(Pq,gbo),e(pp,hbo),e(J,pbo),e(J,_p),e(_p,Ide),e(Ide,_bo),e(_p,ubo),e(_p,Bq),e(Bq,bbo),e(_p,vbo),e(Ue,Fbo),M(up,Ue,null),e(Ue,Tbo),M(bp,Ue,null),e(yo,Mbo),e(yo,vp),M(xL,vp,null),e(vp,Ebo),e(vp,Nde),e(Nde,Cbo),b(f,LXe,u),b(f,ji,u),e(ji,Fp),e(Fp,qde),M($L,qde,null),e(ji,wbo),e(ji,jde),e(jde,Abo),b(f,yXe,u),b(f,xo,u),M(kL,xo,null),e(xo,Lbo),e(xo,SL),e(SL,ybo),e(SL,Iq),e(Iq,xbo),e(SL,$bo),e(xo,kbo),e(xo,RL),e(RL,Sbo),e(RL,Dde),e(Dde,Rbo),e(RL,Pbo),e(xo,Bbo),e(xo,Je),M(PL,Je,null),e(Je,Ibo),e(Je,Gde),e(Gde,Nbo),e(Je,qbo),e(Je,Di),e(Di,jbo),e(Di,Ode),e(Ode,Dbo),e(Di,Gbo),e(Di,Vde),e(Vde,Obo),e(Di,Vbo),e(Je,Xbo),e(Je,he),e(he,Tp),e(Tp,Xde),e(Xde,zbo),e(Tp,Qbo),e(Tp,Nq),e(Nq,Wbo),e(Tp,Hbo),e(he,Ubo),e(he,Mp),e(Mp,zde),e(zde,Jbo),e(Mp,Ybo),e(Mp,Qde),e(Qde,Kbo),e(Mp,Zbo),e(he,evo),e(he,Ep),e(Ep,Wde),e(Wde,ovo),e(Ep,rvo),e(Ep,qq),e(qq,tvo),e(Ep,avo),e(he,nvo),e(he,Cp),e(Cp,Hde),e(Hde,svo),e(Cp,lvo),e(Cp,jq),e(jq,ivo),e(Cp,dvo),e(he,cvo),e(he,wp),e(wp,Ude),e(Ude,fvo),e(wp,mvo),e(wp,Dq),e(Dq,gvo),e(wp,hvo),e(he,pvo),e(he,Ap),e(Ap,Jde),e(Jde,_vo),e(Ap,uvo),e(Ap,Gq),e(Gq,bvo),e(Ap,vvo),e(he,Fvo),e(he,Lp),e(Lp,Yde),e(Yde,Tvo),e(Lp,Mvo),e(Lp,Oq),e(Oq,Evo),e(Lp,Cvo),e(he,wvo),e(he,yp),e(yp,Kde),e(Kde,Avo),e(yp,Lvo),e(yp,Vq),e(Vq,yvo),e(yp,xvo),e(he,$vo),e(he,xp),e(xp,Zde),e(Zde,kvo),e(xp,Svo),e(xp,Xq),e(Xq,Rvo),e(xp,Pvo),e(he,Bvo),e(he,$p),e($p,ece),e(ece,Ivo),e($p,Nvo),e($p,zq),e(zq,qvo),e($p,jvo),e(he,Dvo),e(he,kp),e(kp,oce),e(oce,Gvo),e(kp,Ovo),e(kp,Qq),e(Qq,Vvo),e(kp,Xvo),e(he,zvo),e(he,Sp),e(Sp,rce),e(rce,Qvo),e(Sp,Wvo),e(Sp,Wq),e(Wq,Hvo),e(Sp,Uvo),e(he,Jvo),e(he,Rp),e(Rp,tce),e(tce,Yvo),e(Rp,Kvo),e(Rp,Hq),e(Hq,Zvo),e(Rp,eFo),e(he,oFo),e(he,Pp),e(Pp,ace),e(ace,rFo),e(Pp,tFo),e(Pp,Uq),e(Uq,aFo),e(Pp,nFo),e(he,sFo),e(he,Bp),e(Bp,nce),e(nce,lFo),e(Bp,iFo),e(Bp,Jq),e(Jq,dFo),e(Bp,cFo),e(he,fFo),e(he,Ip),e(Ip,sce),e(sce,mFo),e(Ip,gFo),e(Ip,Yq),e(Yq,hFo),e(Ip,pFo),e(he,_Fo),e(he,Np),e(Np,lce),e(lce,uFo),e(Np,bFo),e(Np,Kq),e(Kq,vFo),e(Np,FFo),e(he,TFo),e(he,qp),e(qp,ice),e(ice,MFo),e(qp,EFo),e(qp,Zq),e(Zq,CFo),e(qp,wFo),e(Je,AFo),M(jp,Je,null),e(Je,LFo),M(Dp,Je,null),e(xo,yFo),e(xo,Gp),M(BL,Gp,null),e(Gp,xFo),e(Gp,dce),e(dce,$Fo),b(f,xXe,u),b(f,Gi,u),e(Gi,Op),e(Op,cce),M(IL,cce,null),e(Gi,kFo),e(Gi,fce),e(fce,SFo),b(f,$Xe,u),b(f,$o,u),M(NL,$o,null),e($o,RFo),e($o,Oi),e(Oi,PFo),e(Oi,ej),e(ej,BFo),e(Oi,IFo),e(Oi,oj),e(oj,NFo),e(Oi,qFo),e($o,jFo),e($o,qL),e(qL,DFo),e(qL,mce),e(mce,GFo),e(qL,OFo),e($o,VFo),e($o,it),M(jL,it,null),e(it,XFo),e(it,gce),e(gce,zFo),e(it,QFo),e(it,Vi),e(Vi,WFo),e(Vi,hce),e(hce,HFo),e(Vi,UFo),e(Vi,rj),e(rj,JFo),e(Vi,YFo),e(it,KFo),M(Vp,it,null),e($o,ZFo),e($o,Ye),M(DL,Ye,null),e(Ye,e6o),e(Ye,pce),e(pce,o6o),e(Ye,r6o),e(Ye,Ia),e(Ia,t6o),e(Ia,_ce),e(_ce,a6o),e(Ia,n6o),e(Ia,uce),e(uce,s6o),e(Ia,l6o),e(Ia,bce),e(bce,i6o),e(Ia,d6o),e(Ye,c6o),e(Ye,y),e(y,Xp),e(Xp,vce),e(vce,f6o),e(Xp,m6o),e(Xp,tj),e(tj,g6o),e(Xp,h6o),e(y,p6o),e(y,zp),e(zp,Fce),e(Fce,_6o),e(zp,u6o),e(zp,aj),e(aj,b6o),e(zp,v6o),e(y,F6o),e(y,Qp),e(Qp,Tce),e(Tce,T6o),e(Qp,M6o),e(Qp,nj),e(nj,E6o),e(Qp,C6o),e(y,w6o),e(y,Wp),e(Wp,Mce),e(Mce,A6o),e(Wp,L6o),e(Wp,sj),e(sj,y6o),e(Wp,x6o),e(y,$6o),e(y,Hp),e(Hp,Ece),e(Ece,k6o),e(Hp,S6o),e(Hp,lj),e(lj,R6o),e(Hp,P6o),e(y,B6o),e(y,Up),e(Up,Cce),e(Cce,I6o),e(Up,N6o),e(Up,ij),e(ij,q6o),e(Up,j6o),e(y,D6o),e(y,Jp),e(Jp,wce),e(wce,G6o),e(Jp,O6o),e(Jp,dj),e(dj,V6o),e(Jp,X6o),e(y,z6o),e(y,Yp),e(Yp,Ace),e(Ace,Q6o),e(Yp,W6o),e(Yp,cj),e(cj,H6o),e(Yp,U6o),e(y,J6o),e(y,Kp),e(Kp,Lce),e(Lce,Y6o),e(Kp,K6o),e(Kp,fj),e(fj,Z6o),e(Kp,eTo),e(y,oTo),e(y,Zp),e(Zp,yce),e(yce,rTo),e(Zp,tTo),e(Zp,mj),e(mj,aTo),e(Zp,nTo),e(y,sTo),e(y,e_),e(e_,xce),e(xce,lTo),e(e_,iTo),e(e_,gj),e(gj,dTo),e(e_,cTo),e(y,fTo),e(y,o_),e(o_,$ce),e($ce,mTo),e(o_,gTo),e(o_,hj),e(hj,hTo),e(o_,pTo),e(y,_To),e(y,r_),e(r_,kce),e(kce,uTo),e(r_,bTo),e(r_,pj),e(pj,vTo),e(r_,FTo),e(y,TTo),e(y,t_),e(t_,Sce),e(Sce,MTo),e(t_,ETo),e(t_,_j),e(_j,CTo),e(t_,wTo),e(y,ATo),e(y,a_),e(a_,Rce),e(Rce,LTo),e(a_,yTo),e(a_,uj),e(uj,xTo),e(a_,$To),e(y,kTo),e(y,n_),e(n_,Pce),e(Pce,STo),e(n_,RTo),e(n_,bj),e(bj,PTo),e(n_,BTo),e(y,ITo),e(y,s_),e(s_,Bce),e(Bce,NTo),e(s_,qTo),e(s_,vj),e(vj,jTo),e(s_,DTo),e(y,GTo),e(y,l_),e(l_,Ice),e(Ice,OTo),e(l_,VTo),e(l_,Fj),e(Fj,XTo),e(l_,zTo),e(y,QTo),e(y,i_),e(i_,Nce),e(Nce,WTo),e(i_,HTo),e(i_,Tj),e(Tj,UTo),e(i_,JTo),e(y,YTo),e(y,d_),e(d_,qce),e(qce,KTo),e(d_,ZTo),e(d_,Mj),e(Mj,e7o),e(d_,o7o),e(y,r7o),e(y,c_),e(c_,jce),e(jce,t7o),e(c_,a7o),e(c_,Ej),e(Ej,n7o),e(c_,s7o),e(y,l7o),e(y,f_),e(f_,Dce),e(Dce,i7o),e(f_,d7o),e(f_,Cj),e(Cj,c7o),e(f_,f7o),e(y,m7o),e(y,m_),e(m_,Gce),e(Gce,g7o),e(m_,h7o),e(m_,wj),e(wj,p7o),e(m_,_7o),e(y,u7o),e(y,g_),e(g_,Oce),e(Oce,b7o),e(g_,v7o),e(g_,Aj),e(Aj,F7o),e(g_,T7o),e(y,M7o),e(y,h_),e(h_,Vce),e(Vce,E7o),e(h_,C7o),e(h_,Lj),e(Lj,w7o),e(h_,A7o),e(y,L7o),e(y,p_),e(p_,Xce),e(Xce,y7o),e(p_,x7o),e(p_,yj),e(yj,$7o),e(p_,k7o),e(y,S7o),e(y,__),e(__,zce),e(zce,R7o),e(__,P7o),e(__,xj),e(xj,B7o),e(__,I7o),e(y,N7o),e(y,u_),e(u_,Qce),e(Qce,q7o),e(u_,j7o),e(u_,$j),e($j,D7o),e(u_,G7o),e(y,O7o),e(y,b_),e(b_,Wce),e(Wce,V7o),e(b_,X7o),e(b_,kj),e(kj,z7o),e(b_,Q7o),e(y,W7o),e(y,v_),e(v_,Hce),e(Hce,H7o),e(v_,U7o),e(v_,Sj),e(Sj,J7o),e(v_,Y7o),e(y,K7o),e(y,F_),e(F_,Uce),e(Uce,Z7o),e(F_,e9o),e(F_,Rj),e(Rj,o9o),e(F_,r9o),e(y,t9o),e(y,T_),e(T_,Jce),e(Jce,a9o),e(T_,n9o),e(T_,Pj),e(Pj,s9o),e(T_,l9o),e(y,i9o),e(y,M_),e(M_,Yce),e(Yce,d9o),e(M_,c9o),e(M_,Bj),e(Bj,f9o),e(M_,m9o),e(y,g9o),e(y,E_),e(E_,Kce),e(Kce,h9o),e(E_,p9o),e(E_,Ij),e(Ij,_9o),e(E_,u9o),e(y,b9o),e(y,Hs),e(Hs,Zce),e(Zce,v9o),e(Hs,F9o),e(Hs,Nj),e(Nj,T9o),e(Hs,M9o),e(Hs,qj),e(qj,E9o),e(Hs,C9o),e(y,w9o),e(y,C_),e(C_,efe),e(efe,A9o),e(C_,L9o),e(C_,jj),e(jj,y9o),e(C_,x9o),e(y,$9o),e(y,w_),e(w_,ofe),e(ofe,k9o),e(w_,S9o),e(w_,Dj),e(Dj,R9o),e(w_,P9o),e(y,B9o),e(y,A_),e(A_,rfe),e(rfe,I9o),e(A_,N9o),e(A_,Gj),e(Gj,q9o),e(A_,j9o),e(y,D9o),e(y,L_),e(L_,tfe),e(tfe,G9o),e(L_,O9o),e(L_,Oj),e(Oj,V9o),e(L_,X9o),e(y,z9o),e(y,y_),e(y_,afe),e(afe,Q9o),e(y_,W9o),e(y_,Vj),e(Vj,H9o),e(y_,U9o),e(y,J9o),e(y,x_),e(x_,nfe),e(nfe,Y9o),e(x_,K9o),e(x_,Xj),e(Xj,Z9o),e(x_,eMo),e(y,oMo),e(y,$_),e($_,sfe),e(sfe,rMo),e($_,tMo),e($_,zj),e(zj,aMo),e($_,nMo),e(y,sMo),e(y,k_),e(k_,lfe),e(lfe,lMo),e(k_,iMo),e(k_,Qj),e(Qj,dMo),e(k_,cMo),e(y,fMo),e(y,S_),e(S_,ife),e(ife,mMo),e(S_,gMo),e(S_,Wj),e(Wj,hMo),e(S_,pMo),e(y,_Mo),e(y,R_),e(R_,dfe),e(dfe,uMo),e(R_,bMo),e(R_,Hj),e(Hj,vMo),e(R_,FMo),e(y,TMo),e(y,P_),e(P_,cfe),e(cfe,MMo),e(P_,EMo),e(P_,Uj),e(Uj,CMo),e(P_,wMo),e(y,AMo),e(y,B_),e(B_,ffe),e(ffe,LMo),e(B_,yMo),e(B_,Jj),e(Jj,xMo),e(B_,$Mo),e(y,kMo),e(y,I_),e(I_,mfe),e(mfe,SMo),e(I_,RMo),e(I_,Yj),e(Yj,PMo),e(I_,BMo),e(y,IMo),e(y,N_),e(N_,gfe),e(gfe,NMo),e(N_,qMo),e(N_,Kj),e(Kj,jMo),e(N_,DMo),e(y,GMo),e(y,q_),e(q_,hfe),e(hfe,OMo),e(q_,VMo),e(q_,Zj),e(Zj,XMo),e(q_,zMo),e(y,QMo),e(y,j_),e(j_,pfe),e(pfe,WMo),e(j_,HMo),e(j_,eD),e(eD,UMo),e(j_,JMo),e(y,YMo),e(y,D_),e(D_,_fe),e(_fe,KMo),e(D_,ZMo),e(D_,oD),e(oD,eEo),e(D_,oEo),e(y,rEo),e(y,G_),e(G_,ufe),e(ufe,tEo),e(G_,aEo),e(G_,rD),e(rD,nEo),e(G_,sEo),e(y,lEo),e(y,O_),e(O_,bfe),e(bfe,iEo),e(O_,dEo),e(O_,tD),e(tD,cEo),e(O_,fEo),e(y,mEo),e(y,V_),e(V_,vfe),e(vfe,gEo),e(V_,hEo),e(V_,aD),e(aD,pEo),e(V_,_Eo),e(y,uEo),e(y,X_),e(X_,Ffe),e(Ffe,bEo),e(X_,vEo),e(X_,nD),e(nD,FEo),e(X_,TEo),e(y,MEo),e(y,z_),e(z_,Tfe),e(Tfe,EEo),e(z_,CEo),e(z_,sD),e(sD,wEo),e(z_,AEo),e(y,LEo),e(y,Q_),e(Q_,Mfe),e(Mfe,yEo),e(Q_,xEo),e(Q_,lD),e(lD,$Eo),e(Q_,kEo),e(y,SEo),e(y,W_),e(W_,Efe),e(Efe,REo),e(W_,PEo),e(W_,iD),e(iD,BEo),e(W_,IEo),e(y,NEo),e(y,H_),e(H_,Cfe),e(Cfe,qEo),e(H_,jEo),e(H_,dD),e(dD,DEo),e(H_,GEo),e(y,OEo),e(y,U_),e(U_,wfe),e(wfe,VEo),e(U_,XEo),e(U_,cD),e(cD,zEo),e(U_,QEo),e(y,WEo),e(y,J_),e(J_,Afe),e(Afe,HEo),e(J_,UEo),e(J_,fD),e(fD,JEo),e(J_,YEo),e(y,KEo),e(y,Y_),e(Y_,Lfe),e(Lfe,ZEo),e(Y_,eCo),e(Y_,mD),e(mD,oCo),e(Y_,rCo),e(y,tCo),e(y,K_),e(K_,yfe),e(yfe,aCo),e(K_,nCo),e(K_,gD),e(gD,sCo),e(K_,lCo),e(y,iCo),e(y,Z_),e(Z_,xfe),e(xfe,dCo),e(Z_,cCo),e(Z_,hD),e(hD,fCo),e(Z_,mCo),e(y,gCo),e(y,eu),e(eu,$fe),e($fe,hCo),e(eu,pCo),e(eu,pD),e(pD,_Co),e(eu,uCo),e(y,bCo),e(y,ou),e(ou,kfe),e(kfe,vCo),e(ou,FCo),e(ou,_D),e(_D,TCo),e(ou,MCo),e(y,ECo),e(y,ru),e(ru,Sfe),e(Sfe,CCo),e(ru,wCo),e(ru,uD),e(uD,ACo),e(ru,LCo),e(y,yCo),e(y,tu),e(tu,Rfe),e(Rfe,xCo),e(tu,$Co),e(tu,bD),e(bD,kCo),e(tu,SCo),e(y,RCo),e(y,au),e(au,Pfe),e(Pfe,PCo),e(au,BCo),e(au,vD),e(vD,ICo),e(au,NCo),e(y,qCo),e(y,nu),e(nu,Bfe),e(Bfe,jCo),e(nu,DCo),e(nu,FD),e(FD,GCo),e(nu,OCo),e(y,VCo),e(y,su),e(su,Ife),e(Ife,XCo),e(su,zCo),e(su,TD),e(TD,QCo),e(su,WCo),e(y,HCo),e(y,lu),e(lu,Nfe),e(Nfe,UCo),e(lu,JCo),e(lu,MD),e(MD,YCo),e(lu,KCo),e(y,ZCo),e(y,iu),e(iu,qfe),e(qfe,e3o),e(iu,o3o),e(iu,ED),e(ED,r3o),e(iu,t3o),e(y,a3o),e(y,du),e(du,jfe),e(jfe,n3o),e(du,s3o),e(du,CD),e(CD,l3o),e(du,i3o),e(y,d3o),e(y,cu),e(cu,Dfe),e(Dfe,c3o),e(cu,f3o),e(cu,wD),e(wD,m3o),e(cu,g3o),e(y,h3o),e(y,fu),e(fu,Gfe),e(Gfe,p3o),e(fu,_3o),e(fu,AD),e(AD,u3o),e(fu,b3o),e(y,v3o),e(y,mu),e(mu,Ofe),e(Ofe,F3o),e(mu,T3o),e(mu,LD),e(LD,M3o),e(mu,E3o),e(y,C3o),e(y,gu),e(gu,Vfe),e(Vfe,w3o),e(gu,A3o),e(gu,yD),e(yD,L3o),e(gu,y3o),e(y,x3o),e(y,hu),e(hu,Xfe),e(Xfe,$3o),e(hu,k3o),e(hu,xD),e(xD,S3o),e(hu,R3o),e(y,P3o),e(y,pu),e(pu,zfe),e(zfe,B3o),e(pu,I3o),e(pu,$D),e($D,N3o),e(pu,q3o),e(y,j3o),e(y,_u),e(_u,Qfe),e(Qfe,D3o),e(_u,G3o),e(_u,kD),e(kD,O3o),e(_u,V3o),e(y,X3o),e(y,uu),e(uu,Wfe),e(Wfe,z3o),e(uu,Q3o),e(uu,SD),e(SD,W3o),e(uu,H3o),e(y,U3o),e(y,bu),e(bu,Hfe),e(Hfe,J3o),e(bu,Y3o),e(bu,RD),e(RD,K3o),e(bu,Z3o),e(y,e5o),e(y,vu),e(vu,Ufe),e(Ufe,o5o),e(vu,r5o),e(vu,PD),e(PD,t5o),e(vu,a5o),e(y,n5o),e(y,Fu),e(Fu,Jfe),e(Jfe,s5o),e(Fu,l5o),e(Fu,BD),e(BD,i5o),e(Fu,d5o),e(y,c5o),e(y,Tu),e(Tu,Yfe),e(Yfe,f5o),e(Tu,m5o),e(Tu,ID),e(ID,g5o),e(Tu,h5o),e(y,p5o),e(y,Mu),e(Mu,Kfe),e(Kfe,_5o),e(Mu,u5o),e(Mu,ND),e(ND,b5o),e(Mu,v5o),e(y,F5o),e(y,Eu),e(Eu,Zfe),e(Zfe,T5o),e(Eu,M5o),e(Eu,qD),e(qD,E5o),e(Eu,C5o),e(y,w5o),e(y,Cu),e(Cu,eme),e(eme,A5o),e(Cu,L5o),e(Cu,jD),e(jD,y5o),e(Cu,x5o),e(y,$5o),e(y,wu),e(wu,ome),e(ome,k5o),e(wu,S5o),e(wu,DD),e(DD,R5o),e(wu,P5o),e(y,B5o),e(y,Au),e(Au,rme),e(rme,I5o),e(Au,N5o),e(Au,GD),e(GD,q5o),e(Au,j5o),e(y,D5o),e(y,Lu),e(Lu,tme),e(tme,G5o),e(Lu,O5o),e(Lu,OD),e(OD,V5o),e(Lu,X5o),e(y,z5o),e(y,yu),e(yu,ame),e(ame,Q5o),e(yu,W5o),e(yu,VD),e(VD,H5o),e(yu,U5o),e(y,J5o),e(y,xu),e(xu,nme),e(nme,Y5o),e(xu,K5o),e(xu,XD),e(XD,Z5o),e(xu,e0o),e(y,o0o),e(y,$u),e($u,sme),e(sme,r0o),e($u,t0o),e($u,zD),e(zD,a0o),e($u,n0o),e(y,s0o),e(y,ku),e(ku,lme),e(lme,l0o),e(ku,i0o),e(ku,QD),e(QD,d0o),e(ku,c0o),e(y,f0o),e(y,Su),e(Su,ime),e(ime,m0o),e(Su,g0o),e(Su,WD),e(WD,h0o),e(Su,p0o),e(y,_0o),e(y,Ru),e(Ru,dme),e(dme,u0o),e(Ru,b0o),e(Ru,HD),e(HD,v0o),e(Ru,F0o),e(y,T0o),e(y,Pu),e(Pu,cme),e(cme,M0o),e(Pu,E0o),e(Pu,UD),e(UD,C0o),e(Pu,w0o),e(y,A0o),e(y,Bu),e(Bu,fme),e(fme,L0o),e(Bu,y0o),e(Bu,JD),e(JD,x0o),e(Bu,$0o),e(y,k0o),e(y,Iu),e(Iu,mme),e(mme,S0o),e(Iu,R0o),e(Iu,YD),e(YD,P0o),e(Iu,B0o),e(y,I0o),e(y,Nu),e(Nu,gme),e(gme,N0o),e(Nu,q0o),e(Nu,KD),e(KD,j0o),e(Nu,D0o),e(y,G0o),e(y,qu),e(qu,hme),e(hme,O0o),e(qu,V0o),e(qu,ZD),e(ZD,X0o),e(qu,z0o),e(y,Q0o),e(y,ju),e(ju,pme),e(pme,W0o),e(ju,H0o),e(ju,eG),e(eG,U0o),e(ju,J0o),e(y,Y0o),e(y,Du),e(Du,_me),e(_me,K0o),e(Du,Z0o),e(Du,oG),e(oG,ewo),e(Du,owo),e(y,rwo),e(y,Gu),e(Gu,ume),e(ume,two),e(Gu,awo),e(Gu,rG),e(rG,nwo),e(Gu,swo),e(y,lwo),e(y,Ou),e(Ou,bme),e(bme,iwo),e(Ou,dwo),e(Ou,tG),e(tG,cwo),e(Ou,fwo),e(y,mwo),e(y,Vu),e(Vu,vme),e(vme,gwo),e(Vu,hwo),e(Vu,aG),e(aG,pwo),e(Vu,_wo),e(y,uwo),e(y,Xu),e(Xu,Fme),e(Fme,bwo),e(Xu,vwo),e(Xu,nG),e(nG,Fwo),e(Xu,Two),e(y,Mwo),e(y,zu),e(zu,Tme),e(Tme,Ewo),e(zu,Cwo),e(zu,sG),e(sG,wwo),e(zu,Awo),e(y,Lwo),e(y,Qu),e(Qu,Mme),e(Mme,ywo),e(Qu,xwo),e(Qu,lG),e(lG,$wo),e(Qu,kwo),e(Ye,Swo),e(Ye,Wu),e(Wu,Rwo),e(Wu,Eme),e(Eme,Pwo),e(Wu,Bwo),e(Wu,Cme),e(Cme,Iwo),e(Ye,Nwo),M(Hu,Ye,null),b(f,kXe,u),b(f,Xi,u),e(Xi,Uu),e(Uu,wme),M(GL,wme,null),e(Xi,qwo),e(Xi,Ame),e(Ame,jwo),b(f,SXe,u),b(f,ko,u),M(OL,ko,null),e(ko,Dwo),e(ko,zi),e(zi,Gwo),e(zi,iG),e(iG,Owo),e(zi,Vwo),e(zi,dG),e(dG,Xwo),e(zi,zwo),e(ko,Qwo),e(ko,VL),e(VL,Wwo),e(VL,Lme),e(Lme,Hwo),e(VL,Uwo),e(ko,Jwo),e(ko,dt),M(XL,dt,null),e(dt,Ywo),e(dt,yme),e(yme,Kwo),e(dt,Zwo),e(dt,Qi),e(Qi,eAo),e(Qi,xme),e(xme,oAo),e(Qi,rAo),e(Qi,cG),e(cG,tAo),e(Qi,aAo),e(dt,nAo),M(Ju,dt,null),e(ko,sAo),e(ko,Ke),M(zL,Ke,null),e(Ke,lAo),e(Ke,$me),e($me,iAo),e(Ke,dAo),e(Ke,Na),e(Na,cAo),e(Na,kme),e(kme,fAo),e(Na,mAo),e(Na,Sme),e(Sme,gAo),e(Na,hAo),e(Na,Rme),e(Rme,pAo),e(Na,_Ao),e(Ke,uAo),e(Ke,G),e(G,Yu),e(Yu,Pme),e(Pme,bAo),e(Yu,vAo),e(Yu,fG),e(fG,FAo),e(Yu,TAo),e(G,MAo),e(G,Ku),e(Ku,Bme),e(Bme,EAo),e(Ku,CAo),e(Ku,mG),e(mG,wAo),e(Ku,AAo),e(G,LAo),e(G,Zu),e(Zu,Ime),e(Ime,yAo),e(Zu,xAo),e(Zu,gG),e(gG,$Ao),e(Zu,kAo),e(G,SAo),e(G,e1),e(e1,Nme),e(Nme,RAo),e(e1,PAo),e(e1,hG),e(hG,BAo),e(e1,IAo),e(G,NAo),e(G,o1),e(o1,qme),e(qme,qAo),e(o1,jAo),e(o1,pG),e(pG,DAo),e(o1,GAo),e(G,OAo),e(G,r1),e(r1,jme),e(jme,VAo),e(r1,XAo),e(r1,_G),e(_G,zAo),e(r1,QAo),e(G,WAo),e(G,t1),e(t1,Dme),e(Dme,HAo),e(t1,UAo),e(t1,uG),e(uG,JAo),e(t1,YAo),e(G,KAo),e(G,a1),e(a1,Gme),e(Gme,ZAo),e(a1,eLo),e(a1,bG),e(bG,oLo),e(a1,rLo),e(G,tLo),e(G,n1),e(n1,Ome),e(Ome,aLo),e(n1,nLo),e(n1,vG),e(vG,sLo),e(n1,lLo),e(G,iLo),e(G,s1),e(s1,Vme),e(Vme,dLo),e(s1,cLo),e(s1,FG),e(FG,fLo),e(s1,mLo),e(G,gLo),e(G,l1),e(l1,Xme),e(Xme,hLo),e(l1,pLo),e(l1,TG),e(TG,_Lo),e(l1,uLo),e(G,bLo),e(G,i1),e(i1,zme),e(zme,vLo),e(i1,FLo),e(i1,MG),e(MG,TLo),e(i1,MLo),e(G,ELo),e(G,d1),e(d1,Qme),e(Qme,CLo),e(d1,wLo),e(d1,EG),e(EG,ALo),e(d1,LLo),e(G,yLo),e(G,c1),e(c1,Wme),e(Wme,xLo),e(c1,$Lo),e(c1,CG),e(CG,kLo),e(c1,SLo),e(G,RLo),e(G,f1),e(f1,Hme),e(Hme,PLo),e(f1,BLo),e(f1,wG),e(wG,ILo),e(f1,NLo),e(G,qLo),e(G,m1),e(m1,Ume),e(Ume,jLo),e(m1,DLo),e(m1,AG),e(AG,GLo),e(m1,OLo),e(G,VLo),e(G,g1),e(g1,Jme),e(Jme,XLo),e(g1,zLo),e(g1,LG),e(LG,QLo),e(g1,WLo),e(G,HLo),e(G,h1),e(h1,Yme),e(Yme,ULo),e(h1,JLo),e(h1,yG),e(yG,YLo),e(h1,KLo),e(G,ZLo),e(G,p1),e(p1,Kme),e(Kme,eyo),e(p1,oyo),e(p1,xG),e(xG,ryo),e(p1,tyo),e(G,ayo),e(G,_1),e(_1,Zme),e(Zme,nyo),e(_1,syo),e(_1,$G),e($G,lyo),e(_1,iyo),e(G,dyo),e(G,u1),e(u1,ege),e(ege,cyo),e(u1,fyo),e(u1,kG),e(kG,myo),e(u1,gyo),e(G,hyo),e(G,b1),e(b1,oge),e(oge,pyo),e(b1,_yo),e(b1,SG),e(SG,uyo),e(b1,byo),e(G,vyo),e(G,v1),e(v1,rge),e(rge,Fyo),e(v1,Tyo),e(v1,RG),e(RG,Myo),e(v1,Eyo),e(G,Cyo),e(G,F1),e(F1,tge),e(tge,wyo),e(F1,Ayo),e(F1,PG),e(PG,Lyo),e(F1,yyo),e(G,xyo),e(G,T1),e(T1,age),e(age,$yo),e(T1,kyo),e(T1,BG),e(BG,Syo),e(T1,Ryo),e(G,Pyo),e(G,M1),e(M1,nge),e(nge,Byo),e(M1,Iyo),e(M1,IG),e(IG,Nyo),e(M1,qyo),e(G,jyo),e(G,E1),e(E1,sge),e(sge,Dyo),e(E1,Gyo),e(E1,NG),e(NG,Oyo),e(E1,Vyo),e(G,Xyo),e(G,C1),e(C1,lge),e(lge,zyo),e(C1,Qyo),e(C1,qG),e(qG,Wyo),e(C1,Hyo),e(G,Uyo),e(G,w1),e(w1,ige),e(ige,Jyo),e(w1,Yyo),e(w1,jG),e(jG,Kyo),e(w1,Zyo),e(G,e8o),e(G,A1),e(A1,dge),e(dge,o8o),e(A1,r8o),e(A1,DG),e(DG,t8o),e(A1,a8o),e(G,n8o),e(G,L1),e(L1,cge),e(cge,s8o),e(L1,l8o),e(L1,GG),e(GG,i8o),e(L1,d8o),e(G,c8o),e(G,y1),e(y1,fge),e(fge,f8o),e(y1,m8o),e(y1,OG),e(OG,g8o),e(y1,h8o),e(G,p8o),e(G,x1),e(x1,mge),e(mge,_8o),e(x1,u8o),e(x1,VG),e(VG,b8o),e(x1,v8o),e(G,F8o),e(G,$1),e($1,gge),e(gge,T8o),e($1,M8o),e($1,XG),e(XG,E8o),e($1,C8o),e(G,w8o),e(G,k1),e(k1,hge),e(hge,A8o),e(k1,L8o),e(k1,zG),e(zG,y8o),e(k1,x8o),e(G,$8o),e(G,S1),e(S1,pge),e(pge,k8o),e(S1,S8o),e(S1,QG),e(QG,R8o),e(S1,P8o),e(G,B8o),e(G,R1),e(R1,_ge),e(_ge,I8o),e(R1,N8o),e(R1,WG),e(WG,q8o),e(R1,j8o),e(G,D8o),e(G,P1),e(P1,uge),e(uge,G8o),e(P1,O8o),e(P1,HG),e(HG,V8o),e(P1,X8o),e(G,z8o),e(G,B1),e(B1,bge),e(bge,Q8o),e(B1,W8o),e(B1,UG),e(UG,H8o),e(B1,U8o),e(G,J8o),e(G,I1),e(I1,vge),e(vge,Y8o),e(I1,K8o),e(I1,JG),e(JG,Z8o),e(I1,exo),e(G,oxo),e(G,N1),e(N1,Fge),e(Fge,rxo),e(N1,txo),e(N1,YG),e(YG,axo),e(N1,nxo),e(G,sxo),e(G,q1),e(q1,Tge),e(Tge,lxo),e(q1,ixo),e(q1,KG),e(KG,dxo),e(q1,cxo),e(G,fxo),e(G,j1),e(j1,Mge),e(Mge,mxo),e(j1,gxo),e(j1,ZG),e(ZG,hxo),e(j1,pxo),e(G,_xo),e(G,D1),e(D1,Ege),e(Ege,uxo),e(D1,bxo),e(D1,eO),e(eO,vxo),e(D1,Fxo),e(G,Txo),e(G,G1),e(G1,Cge),e(Cge,Mxo),e(G1,Exo),e(G1,oO),e(oO,Cxo),e(G1,wxo),e(Ke,Axo),e(Ke,O1),e(O1,Lxo),e(O1,wge),e(wge,yxo),e(O1,xxo),e(O1,Age),e(Age,$xo),e(Ke,kxo),M(V1,Ke,null),b(f,RXe,u),b(f,Wi,u),e(Wi,X1),e(X1,Lge),M(QL,Lge,null),e(Wi,Sxo),e(Wi,yge),e(yge,Rxo),b(f,PXe,u),b(f,So,u),M(WL,So,null),e(So,Pxo),e(So,Hi),e(Hi,Bxo),e(Hi,rO),e(rO,Ixo),e(Hi,Nxo),e(Hi,tO),e(tO,qxo),e(Hi,jxo),e(So,Dxo),e(So,HL),e(HL,Gxo),e(HL,xge),e(xge,Oxo),e(HL,Vxo),e(So,Xxo),e(So,ct),M(UL,ct,null),e(ct,zxo),e(ct,$ge),e($ge,Qxo),e(ct,Wxo),e(ct,Ui),e(Ui,Hxo),e(Ui,kge),e(kge,Uxo),e(Ui,Jxo),e(Ui,aO),e(aO,Yxo),e(Ui,Kxo),e(ct,Zxo),M(z1,ct,null),e(So,e$o),e(So,Ze),M(JL,Ze,null),e(Ze,o$o),e(Ze,Sge),e(Sge,r$o),e(Ze,t$o),e(Ze,qa),e(qa,a$o),e(qa,Rge),e(Rge,n$o),e(qa,s$o),e(qa,Pge),e(Pge,l$o),e(qa,i$o),e(qa,Bge),e(Bge,d$o),e(qa,c$o),e(Ze,f$o),e(Ze,z),e(z,Q1),e(Q1,Ige),e(Ige,m$o),e(Q1,g$o),e(Q1,nO),e(nO,h$o),e(Q1,p$o),e(z,_$o),e(z,W1),e(W1,Nge),e(Nge,u$o),e(W1,b$o),e(W1,sO),e(sO,v$o),e(W1,F$o),e(z,T$o),e(z,H1),e(H1,qge),e(qge,M$o),e(H1,E$o),e(H1,lO),e(lO,C$o),e(H1,w$o),e(z,A$o),e(z,U1),e(U1,jge),e(jge,L$o),e(U1,y$o),e(U1,iO),e(iO,x$o),e(U1,$$o),e(z,k$o),e(z,J1),e(J1,Dge),e(Dge,S$o),e(J1,R$o),e(J1,dO),e(dO,P$o),e(J1,B$o),e(z,I$o),e(z,Y1),e(Y1,Gge),e(Gge,N$o),e(Y1,q$o),e(Y1,cO),e(cO,j$o),e(Y1,D$o),e(z,G$o),e(z,K1),e(K1,Oge),e(Oge,O$o),e(K1,V$o),e(K1,fO),e(fO,X$o),e(K1,z$o),e(z,Q$o),e(z,Z1),e(Z1,Vge),e(Vge,W$o),e(Z1,H$o),e(Z1,mO),e(mO,U$o),e(Z1,J$o),e(z,Y$o),e(z,e2),e(e2,Xge),e(Xge,K$o),e(e2,Z$o),e(e2,gO),e(gO,eko),e(e2,oko),e(z,rko),e(z,o2),e(o2,zge),e(zge,tko),e(o2,ako),e(o2,hO),e(hO,nko),e(o2,sko),e(z,lko),e(z,r2),e(r2,Qge),e(Qge,iko),e(r2,dko),e(r2,pO),e(pO,cko),e(r2,fko),e(z,mko),e(z,t2),e(t2,Wge),e(Wge,gko),e(t2,hko),e(t2,_O),e(_O,pko),e(t2,_ko),e(z,uko),e(z,a2),e(a2,Hge),e(Hge,bko),e(a2,vko),e(a2,uO),e(uO,Fko),e(a2,Tko),e(z,Mko),e(z,n2),e(n2,Uge),e(Uge,Eko),e(n2,Cko),e(n2,bO),e(bO,wko),e(n2,Ako),e(z,Lko),e(z,s2),e(s2,Jge),e(Jge,yko),e(s2,xko),e(s2,vO),e(vO,$ko),e(s2,kko),e(z,Sko),e(z,l2),e(l2,Yge),e(Yge,Rko),e(l2,Pko),e(l2,FO),e(FO,Bko),e(l2,Iko),e(z,Nko),e(z,i2),e(i2,Kge),e(Kge,qko),e(i2,jko),e(i2,TO),e(TO,Dko),e(i2,Gko),e(z,Oko),e(z,d2),e(d2,Zge),e(Zge,Vko),e(d2,Xko),e(d2,MO),e(MO,zko),e(d2,Qko),e(z,Wko),e(z,c2),e(c2,ehe),e(ehe,Hko),e(c2,Uko),e(c2,EO),e(EO,Jko),e(c2,Yko),e(z,Kko),e(z,f2),e(f2,ohe),e(ohe,Zko),e(f2,eSo),e(f2,CO),e(CO,oSo),e(f2,rSo),e(z,tSo),e(z,m2),e(m2,rhe),e(rhe,aSo),e(m2,nSo),e(m2,wO),e(wO,sSo),e(m2,lSo),e(z,iSo),e(z,g2),e(g2,the),e(the,dSo),e(g2,cSo),e(g2,AO),e(AO,fSo),e(g2,mSo),e(z,gSo),e(z,h2),e(h2,ahe),e(ahe,hSo),e(h2,pSo),e(h2,LO),e(LO,_So),e(h2,uSo),e(z,bSo),e(z,p2),e(p2,nhe),e(nhe,vSo),e(p2,FSo),e(p2,yO),e(yO,TSo),e(p2,MSo),e(z,ESo),e(z,_2),e(_2,she),e(she,CSo),e(_2,wSo),e(_2,xO),e(xO,ASo),e(_2,LSo),e(z,ySo),e(z,u2),e(u2,lhe),e(lhe,xSo),e(u2,$So),e(u2,$O),e($O,kSo),e(u2,SSo),e(z,RSo),e(z,b2),e(b2,ihe),e(ihe,PSo),e(b2,BSo),e(b2,kO),e(kO,ISo),e(b2,NSo),e(z,qSo),e(z,v2),e(v2,dhe),e(dhe,jSo),e(v2,DSo),e(v2,SO),e(SO,GSo),e(v2,OSo),e(z,VSo),e(z,F2),e(F2,che),e(che,XSo),e(F2,zSo),e(F2,RO),e(RO,QSo),e(F2,WSo),e(z,HSo),e(z,T2),e(T2,fhe),e(fhe,USo),e(T2,JSo),e(T2,PO),e(PO,YSo),e(T2,KSo),e(z,ZSo),e(z,M2),e(M2,mhe),e(mhe,eRo),e(M2,oRo),e(M2,BO),e(BO,rRo),e(M2,tRo),e(z,aRo),e(z,E2),e(E2,ghe),e(ghe,nRo),e(E2,sRo),e(E2,IO),e(IO,lRo),e(E2,iRo),e(z,dRo),e(z,C2),e(C2,hhe),e(hhe,cRo),e(C2,fRo),e(C2,NO),e(NO,mRo),e(C2,gRo),e(z,hRo),e(z,w2),e(w2,phe),e(phe,pRo),e(w2,_Ro),e(w2,qO),e(qO,uRo),e(w2,bRo),e(z,vRo),e(z,A2),e(A2,_he),e(_he,FRo),e(A2,TRo),e(A2,jO),e(jO,MRo),e(A2,ERo),e(z,CRo),e(z,L2),e(L2,uhe),e(uhe,wRo),e(L2,ARo),e(L2,DO),e(DO,LRo),e(L2,yRo),e(z,xRo),e(z,y2),e(y2,bhe),e(bhe,$Ro),e(y2,kRo),e(y2,GO),e(GO,SRo),e(y2,RRo),e(z,PRo),e(z,x2),e(x2,vhe),e(vhe,BRo),e(x2,IRo),e(x2,OO),e(OO,NRo),e(x2,qRo),e(z,jRo),e(z,$2),e($2,Fhe),e(Fhe,DRo),e($2,GRo),e($2,VO),e(VO,ORo),e($2,VRo),e(z,XRo),e(z,k2),e(k2,The),e(The,zRo),e(k2,QRo),e(k2,XO),e(XO,WRo),e(k2,HRo),e(Ze,URo),e(Ze,S2),e(S2,JRo),e(S2,Mhe),e(Mhe,YRo),e(S2,KRo),e(S2,Ehe),e(Ehe,ZRo),e(Ze,ePo),M(R2,Ze,null),b(f,BXe,u),b(f,Ji,u),e(Ji,P2),e(P2,Che),M(YL,Che,null),e(Ji,oPo),e(Ji,whe),e(whe,rPo),b(f,IXe,u),b(f,Ro,u),M(KL,Ro,null),e(Ro,tPo),e(Ro,Yi),e(Yi,aPo),e(Yi,zO),e(zO,nPo),e(Yi,sPo),e(Yi,QO),e(QO,lPo),e(Yi,iPo),e(Ro,dPo),e(Ro,ZL),e(ZL,cPo),e(ZL,Ahe),e(Ahe,fPo),e(ZL,mPo),e(Ro,gPo),e(Ro,ft),M(ey,ft,null),e(ft,hPo),e(ft,Lhe),e(Lhe,pPo),e(ft,_Po),e(ft,Ki),e(Ki,uPo),e(Ki,yhe),e(yhe,bPo),e(Ki,vPo),e(Ki,WO),e(WO,FPo),e(Ki,TPo),e(ft,MPo),M(B2,ft,null),e(Ro,EPo),e(Ro,eo),M(oy,eo,null),e(eo,CPo),e(eo,xhe),e(xhe,wPo),e(eo,APo),e(eo,ja),e(ja,LPo),e(ja,$he),e($he,yPo),e(ja,xPo),e(ja,khe),e(khe,$Po),e(ja,kPo),e(ja,She),e(She,SPo),e(ja,RPo),e(eo,PPo),e(eo,W),e(W,I2),e(I2,Rhe),e(Rhe,BPo),e(I2,IPo),e(I2,HO),e(HO,NPo),e(I2,qPo),e(W,jPo),e(W,N2),e(N2,Phe),e(Phe,DPo),e(N2,GPo),e(N2,UO),e(UO,OPo),e(N2,VPo),e(W,XPo),e(W,q2),e(q2,Bhe),e(Bhe,zPo),e(q2,QPo),e(q2,JO),e(JO,WPo),e(q2,HPo),e(W,UPo),e(W,j2),e(j2,Ihe),e(Ihe,JPo),e(j2,YPo),e(j2,YO),e(YO,KPo),e(j2,ZPo),e(W,eBo),e(W,D2),e(D2,Nhe),e(Nhe,oBo),e(D2,rBo),e(D2,KO),e(KO,tBo),e(D2,aBo),e(W,nBo),e(W,G2),e(G2,qhe),e(qhe,sBo),e(G2,lBo),e(G2,ZO),e(ZO,iBo),e(G2,dBo),e(W,cBo),e(W,O2),e(O2,jhe),e(jhe,fBo),e(O2,mBo),e(O2,eV),e(eV,gBo),e(O2,hBo),e(W,pBo),e(W,V2),e(V2,Dhe),e(Dhe,_Bo),e(V2,uBo),e(V2,oV),e(oV,bBo),e(V2,vBo),e(W,FBo),e(W,X2),e(X2,Ghe),e(Ghe,TBo),e(X2,MBo),e(X2,rV),e(rV,EBo),e(X2,CBo),e(W,wBo),e(W,z2),e(z2,Ohe),e(Ohe,ABo),e(z2,LBo),e(z2,tV),e(tV,yBo),e(z2,xBo),e(W,$Bo),e(W,Q2),e(Q2,Vhe),e(Vhe,kBo),e(Q2,SBo),e(Q2,aV),e(aV,RBo),e(Q2,PBo),e(W,BBo),e(W,W2),e(W2,Xhe),e(Xhe,IBo),e(W2,NBo),e(W2,nV),e(nV,qBo),e(W2,jBo),e(W,DBo),e(W,H2),e(H2,zhe),e(zhe,GBo),e(H2,OBo),e(H2,sV),e(sV,VBo),e(H2,XBo),e(W,zBo),e(W,U2),e(U2,Qhe),e(Qhe,QBo),e(U2,WBo),e(U2,lV),e(lV,HBo),e(U2,UBo),e(W,JBo),e(W,J2),e(J2,Whe),e(Whe,YBo),e(J2,KBo),e(J2,iV),e(iV,ZBo),e(J2,eIo),e(W,oIo),e(W,Y2),e(Y2,Hhe),e(Hhe,rIo),e(Y2,tIo),e(Y2,dV),e(dV,aIo),e(Y2,nIo),e(W,sIo),e(W,K2),e(K2,Uhe),e(Uhe,lIo),e(K2,iIo),e(K2,cV),e(cV,dIo),e(K2,cIo),e(W,fIo),e(W,Z2),e(Z2,Jhe),e(Jhe,mIo),e(Z2,gIo),e(Z2,fV),e(fV,hIo),e(Z2,pIo),e(W,_Io),e(W,e4),e(e4,Yhe),e(Yhe,uIo),e(e4,bIo),e(e4,mV),e(mV,vIo),e(e4,FIo),e(W,TIo),e(W,o4),e(o4,Khe),e(Khe,MIo),e(o4,EIo),e(o4,gV),e(gV,CIo),e(o4,wIo),e(W,AIo),e(W,r4),e(r4,Zhe),e(Zhe,LIo),e(r4,yIo),e(r4,hV),e(hV,xIo),e(r4,$Io),e(W,kIo),e(W,t4),e(t4,epe),e(epe,SIo),e(t4,RIo),e(t4,pV),e(pV,PIo),e(t4,BIo),e(W,IIo),e(W,a4),e(a4,ope),e(ope,NIo),e(a4,qIo),e(a4,_V),e(_V,jIo),e(a4,DIo),e(W,GIo),e(W,n4),e(n4,rpe),e(rpe,OIo),e(n4,VIo),e(n4,uV),e(uV,XIo),e(n4,zIo),e(W,QIo),e(W,s4),e(s4,tpe),e(tpe,WIo),e(s4,HIo),e(s4,bV),e(bV,UIo),e(s4,JIo),e(W,YIo),e(W,l4),e(l4,ape),e(ape,KIo),e(l4,ZIo),e(l4,vV),e(vV,eNo),e(l4,oNo),e(W,rNo),e(W,i4),e(i4,npe),e(npe,tNo),e(i4,aNo),e(i4,FV),e(FV,nNo),e(i4,sNo),e(W,lNo),e(W,d4),e(d4,spe),e(spe,iNo),e(d4,dNo),e(d4,TV),e(TV,cNo),e(d4,fNo),e(W,mNo),e(W,c4),e(c4,lpe),e(lpe,gNo),e(c4,hNo),e(c4,MV),e(MV,pNo),e(c4,_No),e(W,uNo),e(W,f4),e(f4,ipe),e(ipe,bNo),e(f4,vNo),e(f4,EV),e(EV,FNo),e(f4,TNo),e(W,MNo),e(W,m4),e(m4,dpe),e(dpe,ENo),e(m4,CNo),e(m4,CV),e(CV,wNo),e(m4,ANo),e(W,LNo),e(W,g4),e(g4,cpe),e(cpe,yNo),e(g4,xNo),e(g4,wV),e(wV,$No),e(g4,kNo),e(W,SNo),e(W,h4),e(h4,fpe),e(fpe,RNo),e(h4,PNo),e(h4,AV),e(AV,BNo),e(h4,INo),e(W,NNo),e(W,p4),e(p4,mpe),e(mpe,qNo),e(p4,jNo),e(p4,gpe),e(gpe,DNo),e(p4,GNo),e(W,ONo),e(W,_4),e(_4,hpe),e(hpe,VNo),e(_4,XNo),e(_4,LV),e(LV,zNo),e(_4,QNo),e(W,WNo),e(W,u4),e(u4,ppe),e(ppe,HNo),e(u4,UNo),e(u4,yV),e(yV,JNo),e(u4,YNo),e(W,KNo),e(W,b4),e(b4,_pe),e(_pe,ZNo),e(b4,eqo),e(b4,xV),e(xV,oqo),e(b4,rqo),e(W,tqo),e(W,v4),e(v4,upe),e(upe,aqo),e(v4,nqo),e(v4,$V),e($V,sqo),e(v4,lqo),e(eo,iqo),e(eo,F4),e(F4,dqo),e(F4,bpe),e(bpe,cqo),e(F4,fqo),e(F4,vpe),e(vpe,mqo),e(eo,gqo),M(T4,eo,null),b(f,NXe,u),b(f,Zi,u),e(Zi,M4),e(M4,Fpe),M(ry,Fpe,null),e(Zi,hqo),e(Zi,Tpe),e(Tpe,pqo),b(f,qXe,u),b(f,Po,u),M(ty,Po,null),e(Po,_qo),e(Po,ed),e(ed,uqo),e(ed,kV),e(kV,bqo),e(ed,vqo),e(ed,SV),e(SV,Fqo),e(ed,Tqo),e(Po,Mqo),e(Po,ay),e(ay,Eqo),e(ay,Mpe),e(Mpe,Cqo),e(ay,wqo),e(Po,Aqo),e(Po,mt),M(ny,mt,null),e(mt,Lqo),e(mt,Epe),e(Epe,yqo),e(mt,xqo),e(mt,od),e(od,$qo),e(od,Cpe),e(Cpe,kqo),e(od,Sqo),e(od,RV),e(RV,Rqo),e(od,Pqo),e(mt,Bqo),M(E4,mt,null),e(Po,Iqo),e(Po,oo),M(sy,oo,null),e(oo,Nqo),e(oo,wpe),e(wpe,qqo),e(oo,jqo),e(oo,Da),e(Da,Dqo),e(Da,Ape),e(Ape,Gqo),e(Da,Oqo),e(Da,Lpe),e(Lpe,Vqo),e(Da,Xqo),e(Da,ype),e(ype,zqo),e(Da,Qqo),e(oo,Wqo),e(oo,pe),e(pe,C4),e(C4,xpe),e(xpe,Hqo),e(C4,Uqo),e(C4,PV),e(PV,Jqo),e(C4,Yqo),e(pe,Kqo),e(pe,w4),e(w4,$pe),e($pe,Zqo),e(w4,ejo),e(w4,BV),e(BV,ojo),e(w4,rjo),e(pe,tjo),e(pe,A4),e(A4,kpe),e(kpe,ajo),e(A4,njo),e(A4,IV),e(IV,sjo),e(A4,ljo),e(pe,ijo),e(pe,L4),e(L4,Spe),e(Spe,djo),e(L4,cjo),e(L4,NV),e(NV,fjo),e(L4,mjo),e(pe,gjo),e(pe,y4),e(y4,Rpe),e(Rpe,hjo),e(y4,pjo),e(y4,qV),e(qV,_jo),e(y4,ujo),e(pe,bjo),e(pe,x4),e(x4,Ppe),e(Ppe,vjo),e(x4,Fjo),e(x4,jV),e(jV,Tjo),e(x4,Mjo),e(pe,Ejo),e(pe,$4),e($4,Bpe),e(Bpe,Cjo),e($4,wjo),e($4,DV),e(DV,Ajo),e($4,Ljo),e(pe,yjo),e(pe,k4),e(k4,Ipe),e(Ipe,xjo),e(k4,$jo),e(k4,GV),e(GV,kjo),e(k4,Sjo),e(pe,Rjo),e(pe,S4),e(S4,Npe),e(Npe,Pjo),e(S4,Bjo),e(S4,OV),e(OV,Ijo),e(S4,Njo),e(pe,qjo),e(pe,R4),e(R4,qpe),e(qpe,jjo),e(R4,Djo),e(R4,VV),e(VV,Gjo),e(R4,Ojo),e(pe,Vjo),e(pe,P4),e(P4,jpe),e(jpe,Xjo),e(P4,zjo),e(P4,XV),e(XV,Qjo),e(P4,Wjo),e(pe,Hjo),e(pe,B4),e(B4,Dpe),e(Dpe,Ujo),e(B4,Jjo),e(B4,zV),e(zV,Yjo),e(B4,Kjo),e(pe,Zjo),e(pe,I4),e(I4,Gpe),e(Gpe,eDo),e(I4,oDo),e(I4,QV),e(QV,rDo),e(I4,tDo),e(pe,aDo),e(pe,N4),e(N4,Ope),e(Ope,nDo),e(N4,sDo),e(N4,WV),e(WV,lDo),e(N4,iDo),e(pe,dDo),e(pe,q4),e(q4,Vpe),e(Vpe,cDo),e(q4,fDo),e(q4,HV),e(HV,mDo),e(q4,gDo),e(pe,hDo),e(pe,j4),e(j4,Xpe),e(Xpe,pDo),e(j4,_Do),e(j4,UV),e(UV,uDo),e(j4,bDo),e(pe,vDo),e(pe,D4),e(D4,zpe),e(zpe,FDo),e(D4,TDo),e(D4,JV),e(JV,MDo),e(D4,EDo),e(pe,CDo),e(pe,G4),e(G4,Qpe),e(Qpe,wDo),e(G4,ADo),e(G4,YV),e(YV,LDo),e(G4,yDo),e(oo,xDo),e(oo,O4),e(O4,$Do),e(O4,Wpe),e(Wpe,kDo),e(O4,SDo),e(O4,Hpe),e(Hpe,RDo),e(oo,PDo),M(V4,oo,null),b(f,jXe,u),b(f,rd,u),e(rd,X4),e(X4,Upe),M(ly,Upe,null),e(rd,BDo),e(rd,Jpe),e(Jpe,IDo),b(f,DXe,u),b(f,Bo,u),M(iy,Bo,null),e(Bo,NDo),e(Bo,td),e(td,qDo),e(td,KV),e(KV,jDo),e(td,DDo),e(td,ZV),e(ZV,GDo),e(td,ODo),e(Bo,VDo),e(Bo,dy),e(dy,XDo),e(dy,Ype),e(Ype,zDo),e(dy,QDo),e(Bo,WDo),e(Bo,gt),M(cy,gt,null),e(gt,HDo),e(gt,Kpe),e(Kpe,UDo),e(gt,JDo),e(gt,ad),e(ad,YDo),e(ad,Zpe),e(Zpe,KDo),e(ad,ZDo),e(ad,eX),e(eX,eGo),e(ad,oGo),e(gt,rGo),M(z4,gt,null),e(Bo,tGo),e(Bo,ro),M(fy,ro,null),e(ro,aGo),e(ro,e_e),e(e_e,nGo),e(ro,sGo),e(ro,Ga),e(Ga,lGo),e(Ga,o_e),e(o_e,iGo),e(Ga,dGo),e(Ga,r_e),e(r_e,cGo),e(Ga,fGo),e(Ga,t_e),e(t_e,mGo),e(Ga,gGo),e(ro,hGo),e(ro,N),e(N,Q4),e(Q4,a_e),e(a_e,pGo),e(Q4,_Go),e(Q4,oX),e(oX,uGo),e(Q4,bGo),e(N,vGo),e(N,W4),e(W4,n_e),e(n_e,FGo),e(W4,TGo),e(W4,rX),e(rX,MGo),e(W4,EGo),e(N,CGo),e(N,H4),e(H4,s_e),e(s_e,wGo),e(H4,AGo),e(H4,tX),e(tX,LGo),e(H4,yGo),e(N,xGo),e(N,U4),e(U4,l_e),e(l_e,$Go),e(U4,kGo),e(U4,aX),e(aX,SGo),e(U4,RGo),e(N,PGo),e(N,J4),e(J4,i_e),e(i_e,BGo),e(J4,IGo),e(J4,nX),e(nX,NGo),e(J4,qGo),e(N,jGo),e(N,Y4),e(Y4,d_e),e(d_e,DGo),e(Y4,GGo),e(Y4,sX),e(sX,OGo),e(Y4,VGo),e(N,XGo),e(N,K4),e(K4,c_e),e(c_e,zGo),e(K4,QGo),e(K4,lX),e(lX,WGo),e(K4,HGo),e(N,UGo),e(N,Z4),e(Z4,f_e),e(f_e,JGo),e(Z4,YGo),e(Z4,iX),e(iX,KGo),e(Z4,ZGo),e(N,eOo),e(N,eb),e(eb,m_e),e(m_e,oOo),e(eb,rOo),e(eb,dX),e(dX,tOo),e(eb,aOo),e(N,nOo),e(N,ob),e(ob,g_e),e(g_e,sOo),e(ob,lOo),e(ob,cX),e(cX,iOo),e(ob,dOo),e(N,cOo),e(N,rb),e(rb,h_e),e(h_e,fOo),e(rb,mOo),e(rb,fX),e(fX,gOo),e(rb,hOo),e(N,pOo),e(N,tb),e(tb,p_e),e(p_e,_Oo),e(tb,uOo),e(tb,mX),e(mX,bOo),e(tb,vOo),e(N,FOo),e(N,ab),e(ab,__e),e(__e,TOo),e(ab,MOo),e(ab,gX),e(gX,EOo),e(ab,COo),e(N,wOo),e(N,nb),e(nb,u_e),e(u_e,AOo),e(nb,LOo),e(nb,hX),e(hX,yOo),e(nb,xOo),e(N,$Oo),e(N,sb),e(sb,b_e),e(b_e,kOo),e(sb,SOo),e(sb,pX),e(pX,ROo),e(sb,POo),e(N,BOo),e(N,lb),e(lb,v_e),e(v_e,IOo),e(lb,NOo),e(lb,_X),e(_X,qOo),e(lb,jOo),e(N,DOo),e(N,ib),e(ib,F_e),e(F_e,GOo),e(ib,OOo),e(ib,uX),e(uX,VOo),e(ib,XOo),e(N,zOo),e(N,db),e(db,T_e),e(T_e,QOo),e(db,WOo),e(db,bX),e(bX,HOo),e(db,UOo),e(N,JOo),e(N,cb),e(cb,M_e),e(M_e,YOo),e(cb,KOo),e(cb,vX),e(vX,ZOo),e(cb,eVo),e(N,oVo),e(N,fb),e(fb,E_e),e(E_e,rVo),e(fb,tVo),e(fb,FX),e(FX,aVo),e(fb,nVo),e(N,sVo),e(N,mb),e(mb,C_e),e(C_e,lVo),e(mb,iVo),e(mb,TX),e(TX,dVo),e(mb,cVo),e(N,fVo),e(N,gb),e(gb,w_e),e(w_e,mVo),e(gb,gVo),e(gb,MX),e(MX,hVo),e(gb,pVo),e(N,_Vo),e(N,hb),e(hb,A_e),e(A_e,uVo),e(hb,bVo),e(hb,EX),e(EX,vVo),e(hb,FVo),e(N,TVo),e(N,pb),e(pb,L_e),e(L_e,MVo),e(pb,EVo),e(pb,CX),e(CX,CVo),e(pb,wVo),e(N,AVo),e(N,_b),e(_b,y_e),e(y_e,LVo),e(_b,yVo),e(_b,wX),e(wX,xVo),e(_b,$Vo),e(N,kVo),e(N,ub),e(ub,x_e),e(x_e,SVo),e(ub,RVo),e(ub,AX),e(AX,PVo),e(ub,BVo),e(N,IVo),e(N,bb),e(bb,$_e),e($_e,NVo),e(bb,qVo),e(bb,LX),e(LX,jVo),e(bb,DVo),e(N,GVo),e(N,vb),e(vb,k_e),e(k_e,OVo),e(vb,VVo),e(vb,yX),e(yX,XVo),e(vb,zVo),e(N,QVo),e(N,Fb),e(Fb,S_e),e(S_e,WVo),e(Fb,HVo),e(Fb,xX),e(xX,UVo),e(Fb,JVo),e(N,YVo),e(N,Tb),e(Tb,R_e),e(R_e,KVo),e(Tb,ZVo),e(Tb,$X),e($X,eXo),e(Tb,oXo),e(N,rXo),e(N,Mb),e(Mb,P_e),e(P_e,tXo),e(Mb,aXo),e(Mb,kX),e(kX,nXo),e(Mb,sXo),e(N,lXo),e(N,Eb),e(Eb,B_e),e(B_e,iXo),e(Eb,dXo),e(Eb,SX),e(SX,cXo),e(Eb,fXo),e(N,mXo),e(N,Cb),e(Cb,I_e),e(I_e,gXo),e(Cb,hXo),e(Cb,RX),e(RX,pXo),e(Cb,_Xo),e(N,uXo),e(N,wb),e(wb,N_e),e(N_e,bXo),e(wb,vXo),e(wb,PX),e(PX,FXo),e(wb,TXo),e(N,MXo),e(N,Ab),e(Ab,q_e),e(q_e,EXo),e(Ab,CXo),e(Ab,BX),e(BX,wXo),e(Ab,AXo),e(N,LXo),e(N,Lb),e(Lb,j_e),e(j_e,yXo),e(Lb,xXo),e(Lb,IX),e(IX,$Xo),e(Lb,kXo),e(N,SXo),e(N,yb),e(yb,D_e),e(D_e,RXo),e(yb,PXo),e(yb,NX),e(NX,BXo),e(yb,IXo),e(N,NXo),e(N,xb),e(xb,G_e),e(G_e,qXo),e(xb,jXo),e(xb,qX),e(qX,DXo),e(xb,GXo),e(N,OXo),e(N,$b),e($b,O_e),e(O_e,VXo),e($b,XXo),e($b,jX),e(jX,zXo),e($b,QXo),e(N,WXo),e(N,kb),e(kb,V_e),e(V_e,HXo),e(kb,UXo),e(kb,DX),e(DX,JXo),e(kb,YXo),e(N,KXo),e(N,Sb),e(Sb,X_e),e(X_e,ZXo),e(Sb,ezo),e(Sb,GX),e(GX,ozo),e(Sb,rzo),e(N,tzo),e(N,Rb),e(Rb,z_e),e(z_e,azo),e(Rb,nzo),e(Rb,OX),e(OX,szo),e(Rb,lzo),e(N,izo),e(N,Pb),e(Pb,Q_e),e(Q_e,dzo),e(Pb,czo),e(Pb,VX),e(VX,fzo),e(Pb,mzo),e(N,gzo),e(N,Bb),e(Bb,W_e),e(W_e,hzo),e(Bb,pzo),e(Bb,XX),e(XX,_zo),e(Bb,uzo),e(N,bzo),e(N,Ib),e(Ib,H_e),e(H_e,vzo),e(Ib,Fzo),e(Ib,zX),e(zX,Tzo),e(Ib,Mzo),e(N,Ezo),e(N,Nb),e(Nb,U_e),e(U_e,Czo),e(Nb,wzo),e(Nb,QX),e(QX,Azo),e(Nb,Lzo),e(N,yzo),e(N,qb),e(qb,J_e),e(J_e,xzo),e(qb,$zo),e(qb,WX),e(WX,kzo),e(qb,Szo),e(N,Rzo),e(N,jb),e(jb,Y_e),e(Y_e,Pzo),e(jb,Bzo),e(jb,HX),e(HX,Izo),e(jb,Nzo),e(N,qzo),e(N,Db),e(Db,K_e),e(K_e,jzo),e(Db,Dzo),e(Db,UX),e(UX,Gzo),e(Db,Ozo),e(N,Vzo),e(N,Gb),e(Gb,Z_e),e(Z_e,Xzo),e(Gb,zzo),e(Gb,JX),e(JX,Qzo),e(Gb,Wzo),e(ro,Hzo),e(ro,Ob),e(Ob,Uzo),e(Ob,eue),e(eue,Jzo),e(Ob,Yzo),e(Ob,oue),e(oue,Kzo),e(ro,Zzo),M(Vb,ro,null),b(f,GXe,u),b(f,nd,u),e(nd,Xb),e(Xb,rue),M(my,rue,null),e(nd,eQo),e(nd,tue),e(tue,oQo),b(f,OXe,u),b(f,Io,u),M(gy,Io,null),e(Io,rQo),e(Io,sd),e(sd,tQo),e(sd,YX),e(YX,aQo),e(sd,nQo),e(sd,KX),e(KX,sQo),e(sd,lQo),e(Io,iQo),e(Io,hy),e(hy,dQo),e(hy,aue),e(aue,cQo),e(hy,fQo),e(Io,mQo),e(Io,ht),M(py,ht,null),e(ht,gQo),e(ht,nue),e(nue,hQo),e(ht,pQo),e(ht,ld),e(ld,_Qo),e(ld,sue),e(sue,uQo),e(ld,bQo),e(ld,ZX),e(ZX,vQo),e(ld,FQo),e(ht,TQo),M(zb,ht,null),e(Io,MQo),e(Io,to),M(_y,to,null),e(to,EQo),e(to,lue),e(lue,CQo),e(to,wQo),e(to,Oa),e(Oa,AQo),e(Oa,iue),e(iue,LQo),e(Oa,yQo),e(Oa,due),e(due,xQo),e(Oa,$Qo),e(Oa,cue),e(cue,kQo),e(Oa,SQo),e(to,RQo),e(to,Z),e(Z,Qb),e(Qb,fue),e(fue,PQo),e(Qb,BQo),e(Qb,ez),e(ez,IQo),e(Qb,NQo),e(Z,qQo),e(Z,Wb),e(Wb,mue),e(mue,jQo),e(Wb,DQo),e(Wb,oz),e(oz,GQo),e(Wb,OQo),e(Z,VQo),e(Z,Hb),e(Hb,gue),e(gue,XQo),e(Hb,zQo),e(Hb,rz),e(rz,QQo),e(Hb,WQo),e(Z,HQo),e(Z,Ub),e(Ub,hue),e(hue,UQo),e(Ub,JQo),e(Ub,tz),e(tz,YQo),e(Ub,KQo),e(Z,ZQo),e(Z,Jb),e(Jb,pue),e(pue,eWo),e(Jb,oWo),e(Jb,az),e(az,rWo),e(Jb,tWo),e(Z,aWo),e(Z,Yb),e(Yb,_ue),e(_ue,nWo),e(Yb,sWo),e(Yb,nz),e(nz,lWo),e(Yb,iWo),e(Z,dWo),e(Z,Kb),e(Kb,uue),e(uue,cWo),e(Kb,fWo),e(Kb,sz),e(sz,mWo),e(Kb,gWo),e(Z,hWo),e(Z,Zb),e(Zb,bue),e(bue,pWo),e(Zb,_Wo),e(Zb,lz),e(lz,uWo),e(Zb,bWo),e(Z,vWo),e(Z,ev),e(ev,vue),e(vue,FWo),e(ev,TWo),e(ev,iz),e(iz,MWo),e(ev,EWo),e(Z,CWo),e(Z,ov),e(ov,Fue),e(Fue,wWo),e(ov,AWo),e(ov,dz),e(dz,LWo),e(ov,yWo),e(Z,xWo),e(Z,rv),e(rv,Tue),e(Tue,$Wo),e(rv,kWo),e(rv,cz),e(cz,SWo),e(rv,RWo),e(Z,PWo),e(Z,tv),e(tv,Mue),e(Mue,BWo),e(tv,IWo),e(tv,fz),e(fz,NWo),e(tv,qWo),e(Z,jWo),e(Z,av),e(av,Eue),e(Eue,DWo),e(av,GWo),e(av,mz),e(mz,OWo),e(av,VWo),e(Z,XWo),e(Z,nv),e(nv,Cue),e(Cue,zWo),e(nv,QWo),e(nv,gz),e(gz,WWo),e(nv,HWo),e(Z,UWo),e(Z,sv),e(sv,wue),e(wue,JWo),e(sv,YWo),e(sv,hz),e(hz,KWo),e(sv,ZWo),e(Z,eHo),e(Z,lv),e(lv,Aue),e(Aue,oHo),e(lv,rHo),e(lv,pz),e(pz,tHo),e(lv,aHo),e(Z,nHo),e(Z,iv),e(iv,Lue),e(Lue,sHo),e(iv,lHo),e(iv,_z),e(_z,iHo),e(iv,dHo),e(Z,cHo),e(Z,dv),e(dv,yue),e(yue,fHo),e(dv,mHo),e(dv,uz),e(uz,gHo),e(dv,hHo),e(Z,pHo),e(Z,cv),e(cv,xue),e(xue,_Ho),e(cv,uHo),e(cv,bz),e(bz,bHo),e(cv,vHo),e(Z,FHo),e(Z,fv),e(fv,$ue),e($ue,THo),e(fv,MHo),e(fv,vz),e(vz,EHo),e(fv,CHo),e(Z,wHo),e(Z,mv),e(mv,kue),e(kue,AHo),e(mv,LHo),e(mv,Fz),e(Fz,yHo),e(mv,xHo),e(Z,$Ho),e(Z,gv),e(gv,Sue),e(Sue,kHo),e(gv,SHo),e(gv,Tz),e(Tz,RHo),e(gv,PHo),e(Z,BHo),e(Z,hv),e(hv,Rue),e(Rue,IHo),e(hv,NHo),e(hv,Mz),e(Mz,qHo),e(hv,jHo),e(Z,DHo),e(Z,pv),e(pv,Pue),e(Pue,GHo),e(pv,OHo),e(pv,Ez),e(Ez,VHo),e(pv,XHo),e(Z,zHo),e(Z,_v),e(_v,Bue),e(Bue,QHo),e(_v,WHo),e(_v,Cz),e(Cz,HHo),e(_v,UHo),e(Z,JHo),e(Z,uv),e(uv,Iue),e(Iue,YHo),e(uv,KHo),e(uv,wz),e(wz,ZHo),e(uv,eUo),e(Z,oUo),e(Z,bv),e(bv,Nue),e(Nue,rUo),e(bv,tUo),e(bv,Az),e(Az,aUo),e(bv,nUo),e(Z,sUo),e(Z,vv),e(vv,que),e(que,lUo),e(vv,iUo),e(vv,Lz),e(Lz,dUo),e(vv,cUo),e(Z,fUo),e(Z,Fv),e(Fv,jue),e(jue,mUo),e(Fv,gUo),e(Fv,yz),e(yz,hUo),e(Fv,pUo),e(Z,_Uo),e(Z,Tv),e(Tv,Due),e(Due,uUo),e(Tv,bUo),e(Tv,xz),e(xz,vUo),e(Tv,FUo),e(to,TUo),e(to,Mv),e(Mv,MUo),e(Mv,Gue),e(Gue,EUo),e(Mv,CUo),e(Mv,Oue),e(Oue,wUo),e(to,AUo),M(Ev,to,null),b(f,VXe,u),b(f,id,u),e(id,Cv),e(Cv,Vue),M(uy,Vue,null),e(id,LUo),e(id,Xue),e(Xue,yUo),b(f,XXe,u),b(f,No,u),M(by,No,null),e(No,xUo),e(No,dd),e(dd,$Uo),e(dd,$z),e($z,kUo),e(dd,SUo),e(dd,kz),e(kz,RUo),e(dd,PUo),e(No,BUo),e(No,vy),e(vy,IUo),e(vy,zue),e(zue,NUo),e(vy,qUo),e(No,jUo),e(No,pt),M(Fy,pt,null),e(pt,DUo),e(pt,Que),e(Que,GUo),e(pt,OUo),e(pt,cd),e(cd,VUo),e(cd,Wue),e(Wue,XUo),e(cd,zUo),e(cd,Sz),e(Sz,QUo),e(cd,WUo),e(pt,HUo),M(wv,pt,null),e(No,UUo),e(No,ao),M(Ty,ao,null),e(ao,JUo),e(ao,Hue),e(Hue,YUo),e(ao,KUo),e(ao,Va),e(Va,ZUo),e(Va,Uue),e(Uue,eJo),e(Va,oJo),e(Va,Jue),e(Jue,rJo),e(Va,tJo),e(Va,Yue),e(Yue,aJo),e(Va,nJo),e(ao,sJo),e(ao,qo),e(qo,Av),e(Av,Kue),e(Kue,lJo),e(Av,iJo),e(Av,Rz),e(Rz,dJo),e(Av,cJo),e(qo,fJo),e(qo,Lv),e(Lv,Zue),e(Zue,mJo),e(Lv,gJo),e(Lv,Pz),e(Pz,hJo),e(Lv,pJo),e(qo,_Jo),e(qo,yv),e(yv,e1e),e(e1e,uJo),e(yv,bJo),e(yv,Bz),e(Bz,vJo),e(yv,FJo),e(qo,TJo),e(qo,xv),e(xv,o1e),e(o1e,MJo),e(xv,EJo),e(xv,Iz),e(Iz,CJo),e(xv,wJo),e(qo,AJo),e(qo,$v),e($v,r1e),e(r1e,LJo),e($v,yJo),e($v,Nz),e(Nz,xJo),e($v,$Jo),e(qo,kJo),e(qo,kv),e(kv,t1e),e(t1e,SJo),e(kv,RJo),e(kv,qz),e(qz,PJo),e(kv,BJo),e(ao,IJo),e(ao,Sv),e(Sv,NJo),e(Sv,a1e),e(a1e,qJo),e(Sv,jJo),e(Sv,n1e),e(n1e,DJo),e(ao,GJo),M(Rv,ao,null),b(f,zXe,u),b(f,fd,u),e(fd,Pv),e(Pv,s1e),M(My,s1e,null),e(fd,OJo),e(fd,l1e),e(l1e,VJo),b(f,QXe,u),b(f,jo,u),M(Ey,jo,null),e(jo,XJo),e(jo,md),e(md,zJo),e(md,jz),e(jz,QJo),e(md,WJo),e(md,Dz),e(Dz,HJo),e(md,UJo),e(jo,JJo),e(jo,Cy),e(Cy,YJo),e(Cy,i1e),e(i1e,KJo),e(Cy,ZJo),e(jo,eYo),e(jo,_t),M(wy,_t,null),e(_t,oYo),e(_t,d1e),e(d1e,rYo),e(_t,tYo),e(_t,gd),e(gd,aYo),e(gd,c1e),e(c1e,nYo),e(gd,sYo),e(gd,Gz),e(Gz,lYo),e(gd,iYo),e(_t,dYo),M(Bv,_t,null),e(jo,cYo),e(jo,no),M(Ay,no,null),e(no,fYo),e(no,f1e),e(f1e,mYo),e(no,gYo),e(no,Xa),e(Xa,hYo),e(Xa,m1e),e(m1e,pYo),e(Xa,_Yo),e(Xa,g1e),e(g1e,uYo),e(Xa,bYo),e(Xa,h1e),e(h1e,vYo),e(Xa,FYo),e(no,TYo),e(no,U),e(U,Iv),e(Iv,p1e),e(p1e,MYo),e(Iv,EYo),e(Iv,Oz),e(Oz,CYo),e(Iv,wYo),e(U,AYo),e(U,Nv),e(Nv,_1e),e(_1e,LYo),e(Nv,yYo),e(Nv,Vz),e(Vz,xYo),e(Nv,$Yo),e(U,kYo),e(U,qv),e(qv,u1e),e(u1e,SYo),e(qv,RYo),e(qv,Xz),e(Xz,PYo),e(qv,BYo),e(U,IYo),e(U,jv),e(jv,b1e),e(b1e,NYo),e(jv,qYo),e(jv,zz),e(zz,jYo),e(jv,DYo),e(U,GYo),e(U,Dv),e(Dv,v1e),e(v1e,OYo),e(Dv,VYo),e(Dv,Qz),e(Qz,XYo),e(Dv,zYo),e(U,QYo),e(U,Gv),e(Gv,F1e),e(F1e,WYo),e(Gv,HYo),e(Gv,Wz),e(Wz,UYo),e(Gv,JYo),e(U,YYo),e(U,Ov),e(Ov,T1e),e(T1e,KYo),e(Ov,ZYo),e(Ov,Hz),e(Hz,eKo),e(Ov,oKo),e(U,rKo),e(U,Vv),e(Vv,M1e),e(M1e,tKo),e(Vv,aKo),e(Vv,Uz),e(Uz,nKo),e(Vv,sKo),e(U,lKo),e(U,Xv),e(Xv,E1e),e(E1e,iKo),e(Xv,dKo),e(Xv,Jz),e(Jz,cKo),e(Xv,fKo),e(U,mKo),e(U,zv),e(zv,C1e),e(C1e,gKo),e(zv,hKo),e(zv,Yz),e(Yz,pKo),e(zv,_Ko),e(U,uKo),e(U,Qv),e(Qv,w1e),e(w1e,bKo),e(Qv,vKo),e(Qv,Kz),e(Kz,FKo),e(Qv,TKo),e(U,MKo),e(U,Wv),e(Wv,A1e),e(A1e,EKo),e(Wv,CKo),e(Wv,Zz),e(Zz,wKo),e(Wv,AKo),e(U,LKo),e(U,Hv),e(Hv,L1e),e(L1e,yKo),e(Hv,xKo),e(Hv,eQ),e(eQ,$Ko),e(Hv,kKo),e(U,SKo),e(U,Uv),e(Uv,y1e),e(y1e,RKo),e(Uv,PKo),e(Uv,oQ),e(oQ,BKo),e(Uv,IKo),e(U,NKo),e(U,Jv),e(Jv,x1e),e(x1e,qKo),e(Jv,jKo),e(Jv,rQ),e(rQ,DKo),e(Jv,GKo),e(U,OKo),e(U,Yv),e(Yv,$1e),e($1e,VKo),e(Yv,XKo),e(Yv,tQ),e(tQ,zKo),e(Yv,QKo),e(U,WKo),e(U,Kv),e(Kv,k1e),e(k1e,HKo),e(Kv,UKo),e(Kv,aQ),e(aQ,JKo),e(Kv,YKo),e(U,KKo),e(U,Zv),e(Zv,S1e),e(S1e,ZKo),e(Zv,eZo),e(Zv,nQ),e(nQ,oZo),e(Zv,rZo),e(U,tZo),e(U,eF),e(eF,R1e),e(R1e,aZo),e(eF,nZo),e(eF,sQ),e(sQ,sZo),e(eF,lZo),e(U,iZo),e(U,oF),e(oF,P1e),e(P1e,dZo),e(oF,cZo),e(oF,lQ),e(lQ,fZo),e(oF,mZo),e(U,gZo),e(U,rF),e(rF,B1e),e(B1e,hZo),e(rF,pZo),e(rF,iQ),e(iQ,_Zo),e(rF,uZo),e(U,bZo),e(U,tF),e(tF,I1e),e(I1e,vZo),e(tF,FZo),e(tF,dQ),e(dQ,TZo),e(tF,MZo),e(U,EZo),e(U,aF),e(aF,N1e),e(N1e,CZo),e(aF,wZo),e(aF,cQ),e(cQ,AZo),e(aF,LZo),e(U,yZo),e(U,nF),e(nF,q1e),e(q1e,xZo),e(nF,$Zo),e(nF,fQ),e(fQ,kZo),e(nF,SZo),e(U,RZo),e(U,sF),e(sF,j1e),e(j1e,PZo),e(sF,BZo),e(sF,mQ),e(mQ,IZo),e(sF,NZo),e(U,qZo),e(U,lF),e(lF,D1e),e(D1e,jZo),e(lF,DZo),e(lF,gQ),e(gQ,GZo),e(lF,OZo),e(U,VZo),e(U,iF),e(iF,G1e),e(G1e,XZo),e(iF,zZo),e(iF,hQ),e(hQ,QZo),e(iF,WZo),e(U,HZo),e(U,dF),e(dF,O1e),e(O1e,UZo),e(dF,JZo),e(dF,pQ),e(pQ,YZo),e(dF,KZo),e(U,ZZo),e(U,cF),e(cF,V1e),e(V1e,eer),e(cF,oer),e(cF,_Q),e(_Q,rer),e(cF,ter),e(U,aer),e(U,fF),e(fF,X1e),e(X1e,ner),e(fF,ser),e(fF,uQ),e(uQ,ler),e(fF,ier),e(U,der),e(U,mF),e(mF,z1e),e(z1e,cer),e(mF,fer),e(mF,bQ),e(bQ,mer),e(mF,ger),e(U,her),e(U,gF),e(gF,Q1e),e(Q1e,per),e(gF,_er),e(gF,vQ),e(vQ,uer),e(gF,ber),e(U,ver),e(U,hF),e(hF,W1e),e(W1e,Fer),e(hF,Ter),e(hF,FQ),e(FQ,Mer),e(hF,Eer),e(U,Cer),e(U,pF),e(pF,H1e),e(H1e,wer),e(pF,Aer),e(pF,TQ),e(TQ,Ler),e(pF,yer),e(U,xer),e(U,_F),e(_F,U1e),e(U1e,$er),e(_F,ker),e(_F,MQ),e(MQ,Ser),e(_F,Rer),e(U,Per),e(U,uF),e(uF,J1e),e(J1e,Ber),e(uF,Ier),e(uF,EQ),e(EQ,Ner),e(uF,qer),e(no,jer),e(no,bF),e(bF,Der),e(bF,Y1e),e(Y1e,Ger),e(bF,Oer),e(bF,K1e),e(K1e,Ver),e(no,Xer),M(vF,no,null),b(f,WXe,u),b(f,hd,u),e(hd,FF),e(FF,Z1e),M(Ly,Z1e,null),e(hd,zer),e(hd,e2e),e(e2e,Qer),b(f,HXe,u),b(f,Do,u),M(yy,Do,null),e(Do,Wer),e(Do,pd),e(pd,Her),e(pd,CQ),e(CQ,Uer),e(pd,Jer),e(pd,wQ),e(wQ,Yer),e(pd,Ker),e(Do,Zer),e(Do,xy),e(xy,eor),e(xy,o2e),e(o2e,oor),e(xy,ror),e(Do,tor),e(Do,ut),M($y,ut,null),e(ut,aor),e(ut,r2e),e(r2e,nor),e(ut,sor),e(ut,_d),e(_d,lor),e(_d,t2e),e(t2e,ior),e(_d,dor),e(_d,AQ),e(AQ,cor),e(_d,mor),e(ut,gor),M(TF,ut,null),e(Do,hor),e(Do,so),M(ky,so,null),e(so,por),e(so,a2e),e(a2e,_or),e(so,uor),e(so,za),e(za,bor),e(za,n2e),e(n2e,vor),e(za,For),e(za,s2e),e(s2e,Tor),e(za,Mor),e(za,l2e),e(l2e,Eor),e(za,Cor),e(so,wor),e(so,V),e(V,MF),e(MF,i2e),e(i2e,Aor),e(MF,Lor),e(MF,LQ),e(LQ,yor),e(MF,xor),e(V,$or),e(V,EF),e(EF,d2e),e(d2e,kor),e(EF,Sor),e(EF,yQ),e(yQ,Ror),e(EF,Por),e(V,Bor),e(V,CF),e(CF,c2e),e(c2e,Ior),e(CF,Nor),e(CF,xQ),e(xQ,qor),e(CF,jor),e(V,Dor),e(V,wF),e(wF,f2e),e(f2e,Gor),e(wF,Oor),e(wF,$Q),e($Q,Vor),e(wF,Xor),e(V,zor),e(V,AF),e(AF,m2e),e(m2e,Qor),e(AF,Wor),e(AF,kQ),e(kQ,Hor),e(AF,Uor),e(V,Jor),e(V,LF),e(LF,g2e),e(g2e,Yor),e(LF,Kor),e(LF,SQ),e(SQ,Zor),e(LF,err),e(V,orr),e(V,yF),e(yF,h2e),e(h2e,rrr),e(yF,trr),e(yF,RQ),e(RQ,arr),e(yF,nrr),e(V,srr),e(V,xF),e(xF,p2e),e(p2e,lrr),e(xF,irr),e(xF,PQ),e(PQ,drr),e(xF,crr),e(V,frr),e(V,$F),e($F,_2e),e(_2e,mrr),e($F,grr),e($F,BQ),e(BQ,hrr),e($F,prr),e(V,_rr),e(V,kF),e(kF,u2e),e(u2e,urr),e(kF,brr),e(kF,IQ),e(IQ,vrr),e(kF,Frr),e(V,Trr),e(V,SF),e(SF,b2e),e(b2e,Mrr),e(SF,Err),e(SF,NQ),e(NQ,Crr),e(SF,wrr),e(V,Arr),e(V,RF),e(RF,v2e),e(v2e,Lrr),e(RF,yrr),e(RF,qQ),e(qQ,xrr),e(RF,$rr),e(V,krr),e(V,PF),e(PF,F2e),e(F2e,Srr),e(PF,Rrr),e(PF,jQ),e(jQ,Prr),e(PF,Brr),e(V,Irr),e(V,BF),e(BF,T2e),e(T2e,Nrr),e(BF,qrr),e(BF,DQ),e(DQ,jrr),e(BF,Drr),e(V,Grr),e(V,IF),e(IF,M2e),e(M2e,Orr),e(IF,Vrr),e(IF,GQ),e(GQ,Xrr),e(IF,zrr),e(V,Qrr),e(V,NF),e(NF,E2e),e(E2e,Wrr),e(NF,Hrr),e(NF,OQ),e(OQ,Urr),e(NF,Jrr),e(V,Yrr),e(V,qF),e(qF,C2e),e(C2e,Krr),e(qF,Zrr),e(qF,VQ),e(VQ,etr),e(qF,otr),e(V,rtr),e(V,jF),e(jF,w2e),e(w2e,ttr),e(jF,atr),e(jF,XQ),e(XQ,ntr),e(jF,str),e(V,ltr),e(V,DF),e(DF,A2e),e(A2e,itr),e(DF,dtr),e(DF,zQ),e(zQ,ctr),e(DF,ftr),e(V,mtr),e(V,GF),e(GF,L2e),e(L2e,gtr),e(GF,htr),e(GF,QQ),e(QQ,ptr),e(GF,_tr),e(V,utr),e(V,OF),e(OF,y2e),e(y2e,btr),e(OF,vtr),e(OF,WQ),e(WQ,Ftr),e(OF,Ttr),e(V,Mtr),e(V,VF),e(VF,x2e),e(x2e,Etr),e(VF,Ctr),e(VF,HQ),e(HQ,wtr),e(VF,Atr),e(V,Ltr),e(V,XF),e(XF,$2e),e($2e,ytr),e(XF,xtr),e(XF,UQ),e(UQ,$tr),e(XF,ktr),e(V,Str),e(V,zF),e(zF,k2e),e(k2e,Rtr),e(zF,Ptr),e(zF,JQ),e(JQ,Btr),e(zF,Itr),e(V,Ntr),e(V,QF),e(QF,S2e),e(S2e,qtr),e(QF,jtr),e(QF,YQ),e(YQ,Dtr),e(QF,Gtr),e(V,Otr),e(V,WF),e(WF,R2e),e(R2e,Vtr),e(WF,Xtr),e(WF,KQ),e(KQ,ztr),e(WF,Qtr),e(V,Wtr),e(V,HF),e(HF,P2e),e(P2e,Htr),e(HF,Utr),e(HF,ZQ),e(ZQ,Jtr),e(HF,Ytr),e(V,Ktr),e(V,UF),e(UF,B2e),e(B2e,Ztr),e(UF,ear),e(UF,eW),e(eW,oar),e(UF,rar),e(V,tar),e(V,JF),e(JF,I2e),e(I2e,aar),e(JF,nar),e(JF,oW),e(oW,sar),e(JF,lar),e(V,iar),e(V,YF),e(YF,N2e),e(N2e,dar),e(YF,car),e(YF,rW),e(rW,far),e(YF,mar),e(V,gar),e(V,KF),e(KF,q2e),e(q2e,har),e(KF,par),e(KF,tW),e(tW,_ar),e(KF,uar),e(V,bar),e(V,ZF),e(ZF,j2e),e(j2e,Far),e(ZF,Tar),e(ZF,aW),e(aW,Mar),e(ZF,Ear),e(V,Car),e(V,e6),e(e6,D2e),e(D2e,war),e(e6,Aar),e(e6,nW),e(nW,Lar),e(e6,yar),e(V,xar),e(V,o6),e(o6,G2e),e(G2e,$ar),e(o6,kar),e(o6,sW),e(sW,Sar),e(o6,Rar),e(V,Par),e(V,r6),e(r6,O2e),e(O2e,Bar),e(r6,Iar),e(r6,lW),e(lW,Nar),e(r6,qar),e(V,jar),e(V,t6),e(t6,V2e),e(V2e,Dar),e(t6,Gar),e(t6,iW),e(iW,Oar),e(t6,Var),e(V,Xar),e(V,a6),e(a6,X2e),e(X2e,zar),e(a6,Qar),e(a6,dW),e(dW,War),e(a6,Har),e(V,Uar),e(V,n6),e(n6,z2e),e(z2e,Jar),e(n6,Yar),e(n6,cW),e(cW,Kar),e(n6,Zar),e(V,enr),e(V,s6),e(s6,Q2e),e(Q2e,onr),e(s6,rnr),e(s6,fW),e(fW,tnr),e(s6,anr),e(V,nnr),e(V,l6),e(l6,W2e),e(W2e,snr),e(l6,lnr),e(l6,mW),e(mW,inr),e(l6,dnr),e(V,cnr),e(V,i6),e(i6,H2e),e(H2e,fnr),e(i6,mnr),e(i6,gW),e(gW,gnr),e(i6,hnr),e(V,pnr),e(V,d6),e(d6,U2e),e(U2e,_nr),e(d6,unr),e(d6,hW),e(hW,bnr),e(d6,vnr),e(so,Fnr),e(so,c6),e(c6,Tnr),e(c6,J2e),e(J2e,Mnr),e(c6,Enr),e(c6,Y2e),e(Y2e,Cnr),e(so,wnr),M(f6,so,null),b(f,UXe,u),b(f,ud,u),e(ud,m6),e(m6,K2e),M(Sy,K2e,null),e(ud,Anr),e(ud,Z2e),e(Z2e,Lnr),b(f,JXe,u),b(f,Go,u),M(Ry,Go,null),e(Go,ynr),e(Go,bd),e(bd,xnr),e(bd,pW),e(pW,$nr),e(bd,knr),e(bd,_W),e(_W,Snr),e(bd,Rnr),e(Go,Pnr),e(Go,Py),e(Py,Bnr),e(Py,e4e),e(e4e,Inr),e(Py,Nnr),e(Go,qnr),e(Go,bt),M(By,bt,null),e(bt,jnr),e(bt,o4e),e(o4e,Dnr),e(bt,Gnr),e(bt,vd),e(vd,Onr),e(vd,r4e),e(r4e,Vnr),e(vd,Xnr),e(vd,uW),e(uW,znr),e(vd,Qnr),e(bt,Wnr),M(g6,bt,null),e(Go,Hnr),e(Go,lo),M(Iy,lo,null),e(lo,Unr),e(lo,t4e),e(t4e,Jnr),e(lo,Ynr),e(lo,Qa),e(Qa,Knr),e(Qa,a4e),e(a4e,Znr),e(Qa,esr),e(Qa,n4e),e(n4e,osr),e(Qa,rsr),e(Qa,s4e),e(s4e,tsr),e(Qa,asr),e(lo,nsr),e(lo,l4e),e(l4e,h6),e(h6,i4e),e(i4e,ssr),e(h6,lsr),e(h6,bW),e(bW,isr),e(h6,dsr),e(lo,csr),e(lo,p6),e(p6,fsr),e(p6,d4e),e(d4e,msr),e(p6,gsr),e(p6,c4e),e(c4e,hsr),e(lo,psr),M(_6,lo,null),b(f,YXe,u),b(f,Fd,u),e(Fd,u6),e(u6,f4e),M(Ny,f4e,null),e(Fd,_sr),e(Fd,m4e),e(m4e,usr),b(f,KXe,u),b(f,Oo,u),M(qy,Oo,null),e(Oo,bsr),e(Oo,Td),e(Td,vsr),e(Td,vW),e(vW,Fsr),e(Td,Tsr),e(Td,FW),e(FW,Msr),e(Td,Esr),e(Oo,Csr),e(Oo,jy),e(jy,wsr),e(jy,g4e),e(g4e,Asr),e(jy,Lsr),e(Oo,ysr),e(Oo,vt),M(Dy,vt,null),e(vt,xsr),e(vt,h4e),e(h4e,$sr),e(vt,ksr),e(vt,Md),e(Md,Ssr),e(Md,p4e),e(p4e,Rsr),e(Md,Psr),e(Md,TW),e(TW,Bsr),e(Md,Isr),e(vt,Nsr),M(b6,vt,null),e(Oo,qsr),e(Oo,io),M(Gy,io,null),e(io,jsr),e(io,_4e),e(_4e,Dsr),e(io,Gsr),e(io,Wa),e(Wa,Osr),e(Wa,u4e),e(u4e,Vsr),e(Wa,Xsr),e(Wa,b4e),e(b4e,zsr),e(Wa,Qsr),e(Wa,v4e),e(v4e,Wsr),e(Wa,Hsr),e(io,Usr),e(io,_e),e(_e,v6),e(v6,F4e),e(F4e,Jsr),e(v6,Ysr),e(v6,MW),e(MW,Ksr),e(v6,Zsr),e(_e,elr),e(_e,F6),e(F6,T4e),e(T4e,olr),e(F6,rlr),e(F6,EW),e(EW,tlr),e(F6,alr),e(_e,nlr),e(_e,T6),e(T6,M4e),e(M4e,slr),e(T6,llr),e(T6,CW),e(CW,ilr),e(T6,dlr),e(_e,clr),e(_e,M6),e(M6,E4e),e(E4e,flr),e(M6,mlr),e(M6,wW),e(wW,glr),e(M6,hlr),e(_e,plr),e(_e,Us),e(Us,C4e),e(C4e,_lr),e(Us,ulr),e(Us,AW),e(AW,blr),e(Us,vlr),e(Us,LW),e(LW,Flr),e(Us,Tlr),e(_e,Mlr),e(_e,E6),e(E6,w4e),e(w4e,Elr),e(E6,Clr),e(E6,yW),e(yW,wlr),e(E6,Alr),e(_e,Llr),e(_e,Js),e(Js,A4e),e(A4e,ylr),e(Js,xlr),e(Js,xW),e(xW,$lr),e(Js,klr),e(Js,$W),e($W,Slr),e(Js,Rlr),e(_e,Plr),e(_e,C6),e(C6,L4e),e(L4e,Blr),e(C6,Ilr),e(C6,kW),e(kW,Nlr),e(C6,qlr),e(_e,jlr),e(_e,Ft),e(Ft,y4e),e(y4e,Dlr),e(Ft,Glr),e(Ft,SW),e(SW,Olr),e(Ft,Vlr),e(Ft,RW),e(RW,Xlr),e(Ft,zlr),e(Ft,PW),e(PW,Qlr),e(Ft,Wlr),e(_e,Hlr),e(_e,w6),e(w6,x4e),e(x4e,Ulr),e(w6,Jlr),e(w6,BW),e(BW,Ylr),e(w6,Klr),e(_e,Zlr),e(_e,A6),e(A6,$4e),e($4e,eir),e(A6,oir),e(A6,IW),e(IW,rir),e(A6,tir),e(_e,air),e(_e,L6),e(L6,k4e),e(k4e,nir),e(L6,sir),e(L6,NW),e(NW,lir),e(L6,iir),e(_e,dir),e(_e,y6),e(y6,S4e),e(S4e,cir),e(y6,fir),e(y6,qW),e(qW,mir),e(y6,gir),e(_e,hir),e(_e,x6),e(x6,R4e),e(R4e,pir),e(x6,_ir),e(x6,jW),e(jW,uir),e(x6,bir),e(_e,vir),e(_e,$6),e($6,P4e),e(P4e,Fir),e($6,Tir),e($6,DW),e(DW,Mir),e($6,Eir),e(_e,Cir),e(_e,k6),e(k6,B4e),e(B4e,wir),e(k6,Air),e(k6,GW),e(GW,Lir),e(k6,yir),e(_e,xir),e(_e,S6),e(S6,I4e),e(I4e,$ir),e(S6,kir),e(S6,OW),e(OW,Sir),e(S6,Rir),e(io,Pir),e(io,R6),e(R6,Bir),e(R6,N4e),e(N4e,Iir),e(R6,Nir),e(R6,q4e),e(q4e,qir),e(io,jir),M(P6,io,null),b(f,ZXe,u),b(f,Ed,u),e(Ed,B6),e(B6,j4e),M(Oy,j4e,null),e(Ed,Dir),e(Ed,D4e),e(D4e,Gir),b(f,eze,u),b(f,Vo,u),M(Vy,Vo,null),e(Vo,Oir),e(Vo,Cd),e(Cd,Vir),e(Cd,VW),e(VW,Xir),e(Cd,zir),e(Cd,XW),e(XW,Qir),e(Cd,Wir),e(Vo,Hir),e(Vo,Xy),e(Xy,Uir),e(Xy,G4e),e(G4e,Jir),e(Xy,Yir),e(Vo,Kir),e(Vo,Tt),M(zy,Tt,null),e(Tt,Zir),e(Tt,O4e),e(O4e,edr),e(Tt,odr),e(Tt,wd),e(wd,rdr),e(wd,V4e),e(V4e,tdr),e(wd,adr),e(wd,zW),e(zW,ndr),e(wd,sdr),e(Tt,ldr),M(I6,Tt,null),e(Vo,idr),e(Vo,co),M(Qy,co,null),e(co,ddr),e(co,X4e),e(X4e,cdr),e(co,fdr),e(co,Ha),e(Ha,mdr),e(Ha,z4e),e(z4e,gdr),e(Ha,hdr),e(Ha,Q4e),e(Q4e,pdr),e(Ha,_dr),e(Ha,W4e),e(W4e,udr),e(Ha,bdr),e(co,vdr),e(co,H4e),e(H4e,N6),e(N6,U4e),e(U4e,Fdr),e(N6,Tdr),e(N6,QW),e(QW,Mdr),e(N6,Edr),e(co,Cdr),e(co,q6),e(q6,wdr),e(q6,J4e),e(J4e,Adr),e(q6,Ldr),e(q6,Y4e),e(Y4e,ydr),e(co,xdr),M(j6,co,null),b(f,oze,u),b(f,Ad,u),e(Ad,D6),e(D6,K4e),M(Wy,K4e,null),e(Ad,$dr),e(Ad,Z4e),e(Z4e,kdr),b(f,rze,u),b(f,Xo,u),M(Hy,Xo,null),e(Xo,Sdr),e(Xo,Ld),e(Ld,Rdr),e(Ld,WW),e(WW,Pdr),e(Ld,Bdr),e(Ld,HW),e(HW,Idr),e(Ld,Ndr),e(Xo,qdr),e(Xo,Uy),e(Uy,jdr),e(Uy,ebe),e(ebe,Ddr),e(Uy,Gdr),e(Xo,Odr),e(Xo,Mt),M(Jy,Mt,null),e(Mt,Vdr),e(Mt,obe),e(obe,Xdr),e(Mt,zdr),e(Mt,yd),e(yd,Qdr),e(yd,rbe),e(rbe,Wdr),e(yd,Hdr),e(yd,UW),e(UW,Udr),e(yd,Jdr),e(Mt,Ydr),M(G6,Mt,null),e(Xo,Kdr),e(Xo,fo),M(Yy,fo,null),e(fo,Zdr),e(fo,tbe),e(tbe,ecr),e(fo,ocr),e(fo,Ua),e(Ua,rcr),e(Ua,abe),e(abe,tcr),e(Ua,acr),e(Ua,nbe),e(nbe,ncr),e(Ua,scr),e(Ua,sbe),e(sbe,lcr),e(Ua,icr),e(fo,dcr),e(fo,lbe),e(lbe,O6),e(O6,ibe),e(ibe,ccr),e(O6,fcr),e(O6,JW),e(JW,mcr),e(O6,gcr),e(fo,hcr),e(fo,V6),e(V6,pcr),e(V6,dbe),e(dbe,_cr),e(V6,ucr),e(V6,cbe),e(cbe,bcr),e(fo,vcr),M(X6,fo,null),b(f,tze,u),b(f,xd,u),e(xd,z6),e(z6,fbe),M(Ky,fbe,null),e(xd,Fcr),e(xd,mbe),e(mbe,Tcr),b(f,aze,u),b(f,zo,u),M(Zy,zo,null),e(zo,Mcr),e(zo,$d),e($d,Ecr),e($d,YW),e(YW,Ccr),e($d,wcr),e($d,KW),e(KW,Acr),e($d,Lcr),e(zo,ycr),e(zo,e8),e(e8,xcr),e(e8,gbe),e(gbe,$cr),e(e8,kcr),e(zo,Scr),e(zo,Et),M(o8,Et,null),e(Et,Rcr),e(Et,hbe),e(hbe,Pcr),e(Et,Bcr),e(Et,kd),e(kd,Icr),e(kd,pbe),e(pbe,Ncr),e(kd,qcr),e(kd,ZW),e(ZW,jcr),e(kd,Dcr),e(Et,Gcr),M(Q6,Et,null),e(zo,Ocr),e(zo,mo),M(r8,mo,null),e(mo,Vcr),e(mo,_be),e(_be,Xcr),e(mo,zcr),e(mo,Ja),e(Ja,Qcr),e(Ja,ube),e(ube,Wcr),e(Ja,Hcr),e(Ja,bbe),e(bbe,Ucr),e(Ja,Jcr),e(Ja,vbe),e(vbe,Ycr),e(Ja,Kcr),e(mo,Zcr),e(mo,Pe),e(Pe,W6),e(W6,Fbe),e(Fbe,efr),e(W6,ofr),e(W6,eH),e(eH,rfr),e(W6,tfr),e(Pe,afr),e(Pe,H6),e(H6,Tbe),e(Tbe,nfr),e(H6,sfr),e(H6,oH),e(oH,lfr),e(H6,ifr),e(Pe,dfr),e(Pe,U6),e(U6,Mbe),e(Mbe,cfr),e(U6,ffr),e(U6,rH),e(rH,mfr),e(U6,gfr),e(Pe,hfr),e(Pe,J6),e(J6,Ebe),e(Ebe,pfr),e(J6,_fr),e(J6,tH),e(tH,ufr),e(J6,bfr),e(Pe,vfr),e(Pe,Y6),e(Y6,Cbe),e(Cbe,Ffr),e(Y6,Tfr),e(Y6,aH),e(aH,Mfr),e(Y6,Efr),e(Pe,Cfr),e(Pe,K6),e(K6,wbe),e(wbe,wfr),e(K6,Afr),e(K6,nH),e(nH,Lfr),e(K6,yfr),e(Pe,xfr),e(Pe,Z6),e(Z6,Abe),e(Abe,$fr),e(Z6,kfr),e(Z6,sH),e(sH,Sfr),e(Z6,Rfr),e(Pe,Pfr),e(Pe,eT),e(eT,Lbe),e(Lbe,Bfr),e(eT,Ifr),e(eT,lH),e(lH,Nfr),e(eT,qfr),e(Pe,jfr),e(Pe,oT),e(oT,ybe),e(ybe,Dfr),e(oT,Gfr),e(oT,iH),e(iH,Ofr),e(oT,Vfr),e(mo,Xfr),e(mo,rT),e(rT,zfr),e(rT,xbe),e(xbe,Qfr),e(rT,Wfr),e(rT,$be),e($be,Hfr),e(mo,Ufr),M(tT,mo,null),b(f,nze,u),b(f,Sd,u),e(Sd,aT),e(aT,kbe),M(t8,kbe,null),e(Sd,Jfr),e(Sd,Sbe),e(Sbe,Yfr),b(f,sze,u),b(f,Qo,u),M(a8,Qo,null),e(Qo,Kfr),e(Qo,Rd),e(Rd,Zfr),e(Rd,dH),e(dH,emr),e(Rd,omr),e(Rd,cH),e(cH,rmr),e(Rd,tmr),e(Qo,amr),e(Qo,n8),e(n8,nmr),e(n8,Rbe),e(Rbe,smr),e(n8,lmr),e(Qo,imr),e(Qo,Ct),M(s8,Ct,null),e(Ct,dmr),e(Ct,Pbe),e(Pbe,cmr),e(Ct,fmr),e(Ct,Pd),e(Pd,mmr),e(Pd,Bbe),e(Bbe,gmr),e(Pd,hmr),e(Pd,fH),e(fH,pmr),e(Pd,_mr),e(Ct,umr),M(nT,Ct,null),e(Qo,bmr),e(Qo,go),M(l8,go,null),e(go,vmr),e(go,Ibe),e(Ibe,Fmr),e(go,Tmr),e(go,Ya),e(Ya,Mmr),e(Ya,Nbe),e(Nbe,Emr),e(Ya,Cmr),e(Ya,qbe),e(qbe,wmr),e(Ya,Amr),e(Ya,jbe),e(jbe,Lmr),e(Ya,ymr),e(go,xmr),e(go,rt),e(rt,sT),e(sT,Dbe),e(Dbe,$mr),e(sT,kmr),e(sT,mH),e(mH,Smr),e(sT,Rmr),e(rt,Pmr),e(rt,lT),e(lT,Gbe),e(Gbe,Bmr),e(lT,Imr),e(lT,gH),e(gH,Nmr),e(lT,qmr),e(rt,jmr),e(rt,iT),e(iT,Obe),e(Obe,Dmr),e(iT,Gmr),e(iT,hH),e(hH,Omr),e(iT,Vmr),e(rt,Xmr),e(rt,dT),e(dT,Vbe),e(Vbe,zmr),e(dT,Qmr),e(dT,pH),e(pH,Wmr),e(dT,Hmr),e(rt,Umr),e(rt,cT),e(cT,Xbe),e(Xbe,Jmr),e(cT,Ymr),e(cT,_H),e(_H,Kmr),e(cT,Zmr),e(go,egr),e(go,fT),e(fT,ogr),e(fT,zbe),e(zbe,rgr),e(fT,tgr),e(fT,Qbe),e(Qbe,agr),e(go,ngr),M(mT,go,null),b(f,lze,u),b(f,Bd,u),e(Bd,gT),e(gT,Wbe),M(i8,Wbe,null),e(Bd,sgr),e(Bd,Hbe),e(Hbe,lgr),b(f,ize,u),b(f,Wo,u),M(d8,Wo,null),e(Wo,igr),e(Wo,Id),e(Id,dgr),e(Id,uH),e(uH,cgr),e(Id,fgr),e(Id,bH),e(bH,mgr),e(Id,ggr),e(Wo,hgr),e(Wo,c8),e(c8,pgr),e(c8,Ube),e(Ube,_gr),e(c8,ugr),e(Wo,bgr),e(Wo,wt),M(f8,wt,null),e(wt,vgr),e(wt,Jbe),e(Jbe,Fgr),e(wt,Tgr),e(wt,Nd),e(Nd,Mgr),e(Nd,Ybe),e(Ybe,Egr),e(Nd,Cgr),e(Nd,vH),e(vH,wgr),e(Nd,Agr),e(wt,Lgr),M(hT,wt,null),e(Wo,ygr),e(Wo,ho),M(m8,ho,null),e(ho,xgr),e(ho,Kbe),e(Kbe,$gr),e(ho,kgr),e(ho,Ka),e(Ka,Sgr),e(Ka,Zbe),e(Zbe,Rgr),e(Ka,Pgr),e(Ka,eve),e(eve,Bgr),e(Ka,Igr),e(Ka,ove),e(ove,Ngr),e(Ka,qgr),e(ho,jgr),e(ho,Le),e(Le,pT),e(pT,rve),e(rve,Dgr),e(pT,Ggr),e(pT,FH),e(FH,Ogr),e(pT,Vgr),e(Le,Xgr),e(Le,_T),e(_T,tve),e(tve,zgr),e(_T,Qgr),e(_T,TH),e(TH,Wgr),e(_T,Hgr),e(Le,Ugr),e(Le,uT),e(uT,ave),e(ave,Jgr),e(uT,Ygr),e(uT,MH),e(MH,Kgr),e(uT,Zgr),e(Le,ehr),e(Le,bT),e(bT,nve),e(nve,ohr),e(bT,rhr),e(bT,EH),e(EH,thr),e(bT,ahr),e(Le,nhr),e(Le,vT),e(vT,sve),e(sve,shr),e(vT,lhr),e(vT,CH),e(CH,ihr),e(vT,dhr),e(Le,chr),e(Le,FT),e(FT,lve),e(lve,fhr),e(FT,mhr),e(FT,wH),e(wH,ghr),e(FT,hhr),e(Le,phr),e(Le,TT),e(TT,ive),e(ive,_hr),e(TT,uhr),e(TT,AH),e(AH,bhr),e(TT,vhr),e(Le,Fhr),e(Le,MT),e(MT,dve),e(dve,Thr),e(MT,Mhr),e(MT,LH),e(LH,Ehr),e(MT,Chr),e(Le,whr),e(Le,ET),e(ET,cve),e(cve,Ahr),e(ET,Lhr),e(ET,yH),e(yH,yhr),e(ET,xhr),e(Le,$hr),e(Le,CT),e(CT,fve),e(fve,khr),e(CT,Shr),e(CT,xH),e(xH,Rhr),e(CT,Phr),e(ho,Bhr),e(ho,wT),e(wT,Ihr),e(wT,mve),e(mve,Nhr),e(wT,qhr),e(wT,gve),e(gve,jhr),e(ho,Dhr),M(AT,ho,null),b(f,dze,u),b(f,qd,u),e(qd,LT),e(LT,hve),M(g8,hve,null),e(qd,Ghr),e(qd,pve),e(pve,Ohr),b(f,cze,u),b(f,Ho,u),M(h8,Ho,null),e(Ho,Vhr),e(Ho,jd),e(jd,Xhr),e(jd,$H),e($H,zhr),e(jd,Qhr),e(jd,kH),e(kH,Whr),e(jd,Hhr),e(Ho,Uhr),e(Ho,p8),e(p8,Jhr),e(p8,_ve),e(_ve,Yhr),e(p8,Khr),e(Ho,Zhr),e(Ho,At),M(_8,At,null),e(At,epr),e(At,uve),e(uve,opr),e(At,rpr),e(At,Dd),e(Dd,tpr),e(Dd,bve),e(bve,apr),e(Dd,npr),e(Dd,SH),e(SH,spr),e(Dd,lpr),e(At,ipr),M(yT,At,null),e(Ho,dpr),e(Ho,po),M(u8,po,null),e(po,cpr),e(po,vve),e(vve,fpr),e(po,mpr),e(po,Za),e(Za,gpr),e(Za,Fve),e(Fve,hpr),e(Za,ppr),e(Za,Tve),e(Tve,_pr),e(Za,upr),e(Za,Mve),e(Mve,bpr),e(Za,vpr),e(po,Fpr),e(po,b8),e(b8,xT),e(xT,Eve),e(Eve,Tpr),e(xT,Mpr),e(xT,RH),e(RH,Epr),e(xT,Cpr),e(b8,wpr),e(b8,$T),e($T,Cve),e(Cve,Apr),e($T,Lpr),e($T,PH),e(PH,ypr),e($T,xpr),e(po,$pr),e(po,kT),e(kT,kpr),e(kT,wve),e(wve,Spr),e(kT,Rpr),e(kT,Ave),e(Ave,Ppr),e(po,Bpr),M(ST,po,null),b(f,fze,u),b(f,Gd,u),e(Gd,RT),e(RT,Lve),M(v8,Lve,null),e(Gd,Ipr),e(Gd,yve),e(yve,Npr),b(f,mze,u),b(f,Uo,u),M(F8,Uo,null),e(Uo,qpr),e(Uo,Od),e(Od,jpr),e(Od,BH),e(BH,Dpr),e(Od,Gpr),e(Od,IH),e(IH,Opr),e(Od,Vpr),e(Uo,Xpr),e(Uo,T8),e(T8,zpr),e(T8,xve),e(xve,Qpr),e(T8,Wpr),e(Uo,Hpr),e(Uo,Lt),M(M8,Lt,null),e(Lt,Upr),e(Lt,$ve),e($ve,Jpr),e(Lt,Ypr),e(Lt,Vd),e(Vd,Kpr),e(Vd,kve),e(kve,Zpr),e(Vd,e_r),e(Vd,NH),e(NH,o_r),e(Vd,r_r),e(Lt,t_r),M(PT,Lt,null),e(Uo,a_r),e(Uo,_o),M(E8,_o,null),e(_o,n_r),e(_o,Sve),e(Sve,s_r),e(_o,l_r),e(_o,en),e(en,i_r),e(en,Rve),e(Rve,d_r),e(en,c_r),e(en,Pve),e(Pve,f_r),e(en,m_r),e(en,Bve),e(Bve,g_r),e(en,h_r),e(_o,p_r),e(_o,tt),e(tt,BT),e(BT,Ive),e(Ive,__r),e(BT,u_r),e(BT,qH),e(qH,b_r),e(BT,v_r),e(tt,F_r),e(tt,IT),e(IT,Nve),e(Nve,T_r),e(IT,M_r),e(IT,jH),e(jH,E_r),e(IT,C_r),e(tt,w_r),e(tt,NT),e(NT,qve),e(qve,A_r),e(NT,L_r),e(NT,DH),e(DH,y_r),e(NT,x_r),e(tt,$_r),e(tt,qT),e(qT,jve),e(jve,k_r),e(qT,S_r),e(qT,GH),e(GH,R_r),e(qT,P_r),e(tt,B_r),e(tt,jT),e(jT,Dve),e(Dve,I_r),e(jT,N_r),e(jT,OH),e(OH,q_r),e(jT,j_r),e(_o,D_r),e(_o,DT),e(DT,G_r),e(DT,Gve),e(Gve,O_r),e(DT,V_r),e(DT,Ove),e(Ove,X_r),e(_o,z_r),M(GT,_o,null),b(f,gze,u),b(f,Xd,u),e(Xd,OT),e(OT,Vve),M(C8,Vve,null),e(Xd,Q_r),e(Xd,Xve),e(Xve,W_r),b(f,hze,u),b(f,Jo,u),M(w8,Jo,null),e(Jo,H_r),e(Jo,zd),e(zd,U_r),e(zd,VH),e(VH,J_r),e(zd,Y_r),e(zd,XH),e(XH,K_r),e(zd,Z_r),e(Jo,eur),e(Jo,A8),e(A8,our),e(A8,zve),e(zve,rur),e(A8,tur),e(Jo,aur),e(Jo,yt),M(L8,yt,null),e(yt,nur),e(yt,Qve),e(Qve,sur),e(yt,lur),e(yt,Qd),e(Qd,iur),e(Qd,Wve),e(Wve,dur),e(Qd,cur),e(Qd,zH),e(zH,fur),e(Qd,mur),e(yt,gur),M(VT,yt,null),e(Jo,hur),e(Jo,uo),M(y8,uo,null),e(uo,pur),e(uo,Hve),e(Hve,_ur),e(uo,uur),e(uo,on),e(on,bur),e(on,Uve),e(Uve,vur),e(on,Fur),e(on,Jve),e(Jve,Tur),e(on,Mur),e(on,Yve),e(Yve,Eur),e(on,Cur),e(uo,wur),e(uo,rn),e(rn,XT),e(XT,Kve),e(Kve,Aur),e(XT,Lur),e(XT,QH),e(QH,yur),e(XT,xur),e(rn,$ur),e(rn,zT),e(zT,Zve),e(Zve,kur),e(zT,Sur),e(zT,WH),e(WH,Rur),e(zT,Pur),e(rn,Bur),e(rn,QT),e(QT,eFe),e(eFe,Iur),e(QT,Nur),e(QT,HH),e(HH,qur),e(QT,jur),e(rn,Dur),e(rn,WT),e(WT,oFe),e(oFe,Gur),e(WT,Our),e(WT,UH),e(UH,Vur),e(WT,Xur),e(uo,zur),e(uo,HT),e(HT,Qur),e(HT,rFe),e(rFe,Wur),e(HT,Hur),e(HT,tFe),e(tFe,Uur),e(uo,Jur),M(UT,uo,null),b(f,pze,u),b(f,Wd,u),e(Wd,JT),e(JT,aFe),M(x8,aFe,null),e(Wd,Yur),e(Wd,nFe),e(nFe,Kur),b(f,_ze,u),b(f,Yo,u),M($8,Yo,null),e(Yo,Zur),e(Yo,Hd),e(Hd,e1r),e(Hd,JH),e(JH,o1r),e(Hd,r1r),e(Hd,YH),e(YH,t1r),e(Hd,a1r),e(Yo,n1r),e(Yo,k8),e(k8,s1r),e(k8,sFe),e(sFe,l1r),e(k8,i1r),e(Yo,d1r),e(Yo,xt),M(S8,xt,null),e(xt,c1r),e(xt,lFe),e(lFe,f1r),e(xt,m1r),e(xt,Ud),e(Ud,g1r),e(Ud,iFe),e(iFe,h1r),e(Ud,p1r),e(Ud,KH),e(KH,_1r),e(Ud,u1r),e(xt,b1r),M(YT,xt,null),e(Yo,v1r),e(Yo,bo),M(R8,bo,null),e(bo,F1r),e(bo,dFe),e(dFe,T1r),e(bo,M1r),e(bo,tn),e(tn,E1r),e(tn,cFe),e(cFe,C1r),e(tn,w1r),e(tn,fFe),e(fFe,A1r),e(tn,L1r),e(tn,mFe),e(mFe,y1r),e(tn,x1r),e(bo,$1r),e(bo,P8),e(P8,KT),e(KT,gFe),e(gFe,k1r),e(KT,S1r),e(KT,ZH),e(ZH,R1r),e(KT,P1r),e(P8,B1r),e(P8,ZT),e(ZT,hFe),e(hFe,I1r),e(ZT,N1r),e(ZT,eU),e(eU,q1r),e(ZT,j1r),e(bo,D1r),e(bo,e7),e(e7,G1r),e(e7,pFe),e(pFe,O1r),e(e7,V1r),e(e7,_Fe),e(_Fe,X1r),e(bo,z1r),M(o7,bo,null),b(f,uze,u),b(f,Jd,u),e(Jd,r7),e(r7,uFe),M(B8,uFe,null),e(Jd,Q1r),e(Jd,bFe),e(bFe,W1r),b(f,bze,u),b(f,Ko,u),M(I8,Ko,null),e(Ko,H1r),e(Ko,Yd),e(Yd,U1r),e(Yd,oU),e(oU,J1r),e(Yd,Y1r),e(Yd,rU),e(rU,K1r),e(Yd,Z1r),e(Ko,e2r),e(Ko,N8),e(N8,o2r),e(N8,vFe),e(vFe,r2r),e(N8,t2r),e(Ko,a2r),e(Ko,$t),M(q8,$t,null),e($t,n2r),e($t,FFe),e(FFe,s2r),e($t,l2r),e($t,Kd),e(Kd,i2r),e(Kd,TFe),e(TFe,d2r),e(Kd,c2r),e(Kd,tU),e(tU,f2r),e(Kd,m2r),e($t,g2r),M(t7,$t,null),e(Ko,h2r),e(Ko,vo),M(j8,vo,null),e(vo,p2r),e(vo,MFe),e(MFe,_2r),e(vo,u2r),e(vo,an),e(an,b2r),e(an,EFe),e(EFe,v2r),e(an,F2r),e(an,CFe),e(CFe,T2r),e(an,M2r),e(an,wFe),e(wFe,E2r),e(an,C2r),e(vo,w2r),e(vo,AFe),e(AFe,a7),e(a7,LFe),e(LFe,A2r),e(a7,L2r),e(a7,aU),e(aU,y2r),e(a7,x2r),e(vo,$2r),e(vo,n7),e(n7,k2r),e(n7,yFe),e(yFe,S2r),e(n7,R2r),e(n7,xFe),e(xFe,P2r),e(vo,B2r),M(s7,vo,null),b(f,vze,u),b(f,Zd,u),e(Zd,l7),e(l7,$Fe),M(D8,$Fe,null),e(Zd,I2r),e(Zd,kFe),e(kFe,N2r),b(f,Fze,u),b(f,Zo,u),M(G8,Zo,null),e(Zo,q2r),e(Zo,ec),e(ec,j2r),e(ec,nU),e(nU,D2r),e(ec,G2r),e(ec,sU),e(sU,O2r),e(ec,V2r),e(Zo,X2r),e(Zo,O8),e(O8,z2r),e(O8,SFe),e(SFe,Q2r),e(O8,W2r),e(Zo,H2r),e(Zo,kt),M(V8,kt,null),e(kt,U2r),e(kt,RFe),e(RFe,J2r),e(kt,Y2r),e(kt,oc),e(oc,K2r),e(oc,PFe),e(PFe,Z2r),e(oc,e4r),e(oc,lU),e(lU,o4r),e(oc,r4r),e(kt,t4r),M(i7,kt,null),e(Zo,a4r),e(Zo,Fo),M(X8,Fo,null),e(Fo,n4r),e(Fo,BFe),e(BFe,s4r),e(Fo,l4r),e(Fo,nn),e(nn,i4r),e(nn,IFe),e(IFe,d4r),e(nn,c4r),e(nn,NFe),e(NFe,f4r),e(nn,m4r),e(nn,qFe),e(qFe,g4r),e(nn,h4r),e(Fo,p4r),e(Fo,at),e(at,d7),e(d7,jFe),e(jFe,_4r),e(d7,u4r),e(d7,iU),e(iU,b4r),e(d7,v4r),e(at,F4r),e(at,c7),e(c7,DFe),e(DFe,T4r),e(c7,M4r),e(c7,dU),e(dU,E4r),e(c7,C4r),e(at,w4r),e(at,f7),e(f7,GFe),e(GFe,A4r),e(f7,L4r),e(f7,cU),e(cU,y4r),e(f7,x4r),e(at,$4r),e(at,m7),e(m7,OFe),e(OFe,k4r),e(m7,S4r),e(m7,fU),e(fU,R4r),e(m7,P4r),e(at,B4r),e(at,g7),e(g7,VFe),e(VFe,I4r),e(g7,N4r),e(g7,mU),e(mU,q4r),e(g7,j4r),e(Fo,D4r),e(Fo,h7),e(h7,G4r),e(h7,XFe),e(XFe,O4r),e(h7,V4r),e(h7,zFe),e(zFe,X4r),e(Fo,z4r),M(p7,Fo,null),b(f,Tze,u),b(f,rc,u),e(rc,_7),e(_7,QFe),M(z8,QFe,null),e(rc,Q4r),e(rc,WFe),e(WFe,W4r),b(f,Mze,u),b(f,er,u),M(Q8,er,null),e(er,H4r),e(er,tc),e(tc,U4r),e(tc,gU),e(gU,J4r),e(tc,Y4r),e(tc,hU),e(hU,K4r),e(tc,Z4r),e(er,ebr),e(er,W8),e(W8,obr),e(W8,HFe),e(HFe,rbr),e(W8,tbr),e(er,abr),e(er,St),M(H8,St,null),e(St,nbr),e(St,UFe),e(UFe,sbr),e(St,lbr),e(St,ac),e(ac,ibr),e(ac,JFe),e(JFe,dbr),e(ac,cbr),e(ac,pU),e(pU,fbr),e(ac,mbr),e(St,gbr),M(u7,St,null),e(er,hbr),e(er,To),M(U8,To,null),e(To,pbr),e(To,YFe),e(YFe,_br),e(To,ubr),e(To,sn),e(sn,bbr),e(sn,KFe),e(KFe,vbr),e(sn,Fbr),e(sn,ZFe),e(ZFe,Tbr),e(sn,Mbr),e(sn,e6e),e(e6e,Ebr),e(sn,Cbr),e(To,wbr),e(To,o6e),e(o6e,b7),e(b7,r6e),e(r6e,Abr),e(b7,Lbr),e(b7,_U),e(_U,ybr),e(b7,xbr),e(To,$br),e(To,v7),e(v7,kbr),e(v7,t6e),e(t6e,Sbr),e(v7,Rbr),e(v7,a6e),e(a6e,Pbr),e(To,Bbr),M(F7,To,null),b(f,Eze,u),b(f,nc,u),e(nc,T7),e(T7,n6e),M(J8,n6e,null),e(nc,Ibr),e(nc,s6e),e(s6e,Nbr),b(f,Cze,u),b(f,or,u),M(Y8,or,null),e(or,qbr),e(or,sc),e(sc,jbr),e(sc,uU),e(uU,Dbr),e(sc,Gbr),e(sc,bU),e(bU,Obr),e(sc,Vbr),e(or,Xbr),e(or,K8),e(K8,zbr),e(K8,l6e),e(l6e,Qbr),e(K8,Wbr),e(or,Hbr),e(or,Rt),M(Z8,Rt,null),e(Rt,Ubr),e(Rt,i6e),e(i6e,Jbr),e(Rt,Ybr),e(Rt,lc),e(lc,Kbr),e(lc,d6e),e(d6e,Zbr),e(lc,evr),e(lc,vU),e(vU,ovr),e(lc,rvr),e(Rt,tvr),M(M7,Rt,null),e(or,avr),e(or,xr),M(ex,xr,null),e(xr,nvr),e(xr,c6e),e(c6e,svr),e(xr,lvr),e(xr,ln),e(ln,ivr),e(ln,f6e),e(f6e,dvr),e(ln,cvr),e(ln,m6e),e(m6e,fvr),e(ln,mvr),e(ln,g6e),e(g6e,gvr),e(ln,hvr),e(xr,pvr),e(xr,q),e(q,E7),e(E7,h6e),e(h6e,_vr),e(E7,uvr),e(E7,FU),e(FU,bvr),e(E7,vvr),e(q,Fvr),e(q,C7),e(C7,p6e),e(p6e,Tvr),e(C7,Mvr),e(C7,TU),e(TU,Evr),e(C7,Cvr),e(q,wvr),e(q,w7),e(w7,_6e),e(_6e,Avr),e(w7,Lvr),e(w7,MU),e(MU,yvr),e(w7,xvr),e(q,$vr),e(q,A7),e(A7,u6e),e(u6e,kvr),e(A7,Svr),e(A7,EU),e(EU,Rvr),e(A7,Pvr),e(q,Bvr),e(q,L7),e(L7,b6e),e(b6e,Ivr),e(L7,Nvr),e(L7,CU),e(CU,qvr),e(L7,jvr),e(q,Dvr),e(q,y7),e(y7,v6e),e(v6e,Gvr),e(y7,Ovr),e(y7,wU),e(wU,Vvr),e(y7,Xvr),e(q,zvr),e(q,x7),e(x7,F6e),e(F6e,Qvr),e(x7,Wvr),e(x7,AU),e(AU,Hvr),e(x7,Uvr),e(q,Jvr),e(q,$7),e($7,T6e),e(T6e,Yvr),e($7,Kvr),e($7,LU),e(LU,Zvr),e($7,eFr),e(q,oFr),e(q,k7),e(k7,M6e),e(M6e,rFr),e(k7,tFr),e(k7,yU),e(yU,aFr),e(k7,nFr),e(q,sFr),e(q,S7),e(S7,E6e),e(E6e,lFr),e(S7,iFr),e(S7,xU),e(xU,dFr),e(S7,cFr),e(q,fFr),e(q,R7),e(R7,C6e),e(C6e,mFr),e(R7,gFr),e(R7,$U),e($U,hFr),e(R7,pFr),e(q,_Fr),e(q,P7),e(P7,w6e),e(w6e,uFr),e(P7,bFr),e(P7,kU),e(kU,vFr),e(P7,FFr),e(q,TFr),e(q,B7),e(B7,A6e),e(A6e,MFr),e(B7,EFr),e(B7,SU),e(SU,CFr),e(B7,wFr),e(q,AFr),e(q,I7),e(I7,L6e),e(L6e,LFr),e(I7,yFr),e(I7,RU),e(RU,xFr),e(I7,$Fr),e(q,kFr),e(q,N7),e(N7,y6e),e(y6e,SFr),e(N7,RFr),e(N7,PU),e(PU,PFr),e(N7,BFr),e(q,IFr),e(q,q7),e(q7,x6e),e(x6e,NFr),e(q7,qFr),e(q7,BU),e(BU,jFr),e(q7,DFr),e(q,GFr),e(q,j7),e(j7,$6e),e($6e,OFr),e(j7,VFr),e(j7,IU),e(IU,XFr),e(j7,zFr),e(q,QFr),e(q,Ys),e(Ys,k6e),e(k6e,WFr),e(Ys,HFr),e(Ys,NU),e(NU,UFr),e(Ys,JFr),e(Ys,qU),e(qU,YFr),e(Ys,KFr),e(q,ZFr),e(q,D7),e(D7,S6e),e(S6e,e6r),e(D7,o6r),e(D7,jU),e(jU,r6r),e(D7,t6r),e(q,a6r),e(q,G7),e(G7,R6e),e(R6e,n6r),e(G7,s6r),e(G7,DU),e(DU,l6r),e(G7,i6r),e(q,d6r),e(q,O7),e(O7,P6e),e(P6e,c6r),e(O7,f6r),e(O7,GU),e(GU,m6r),e(O7,g6r),e(q,h6r),e(q,V7),e(V7,B6e),e(B6e,p6r),e(V7,_6r),e(V7,OU),e(OU,u6r),e(V7,b6r),e(q,v6r),e(q,X7),e(X7,I6e),e(I6e,F6r),e(X7,T6r),e(X7,VU),e(VU,M6r),e(X7,E6r),e(q,C6r),e(q,z7),e(z7,N6e),e(N6e,w6r),e(z7,A6r),e(z7,XU),e(XU,L6r),e(z7,y6r),e(q,x6r),e(q,Q7),e(Q7,q6e),e(q6e,$6r),e(Q7,k6r),e(Q7,zU),e(zU,S6r),e(Q7,R6r),e(q,P6r),e(q,W7),e(W7,j6e),e(j6e,B6r),e(W7,I6r),e(W7,QU),e(QU,N6r),e(W7,q6r),e(q,j6r),e(q,H7),e(H7,D6e),e(D6e,D6r),e(H7,G6r),e(H7,WU),e(WU,O6r),e(H7,V6r),e(q,X6r),e(q,U7),e(U7,G6e),e(G6e,z6r),e(U7,Q6r),e(U7,HU),e(HU,W6r),e(U7,H6r),e(q,U6r),e(q,J7),e(J7,O6e),e(O6e,J6r),e(J7,Y6r),e(J7,UU),e(UU,K6r),e(J7,Z6r),e(q,eTr),e(q,Y7),e(Y7,V6e),e(V6e,oTr),e(Y7,rTr),e(Y7,JU),e(JU,tTr),e(Y7,aTr),e(q,nTr),e(q,K7),e(K7,X6e),e(X6e,sTr),e(K7,lTr),e(K7,YU),e(YU,iTr),e(K7,dTr),e(q,cTr),e(q,Z7),e(Z7,z6e),e(z6e,fTr),e(Z7,mTr),e(Z7,KU),e(KU,gTr),e(Z7,hTr),e(q,pTr),e(q,e9),e(e9,Q6e),e(Q6e,_Tr),e(e9,uTr),e(e9,ZU),e(ZU,bTr),e(e9,vTr),e(q,FTr),e(q,o9),e(o9,W6e),e(W6e,TTr),e(o9,MTr),e(o9,eJ),e(eJ,ETr),e(o9,CTr),e(q,wTr),e(q,r9),e(r9,H6e),e(H6e,ATr),e(r9,LTr),e(r9,oJ),e(oJ,yTr),e(r9,xTr),e(q,$Tr),e(q,t9),e(t9,U6e),e(U6e,kTr),e(t9,STr),e(t9,rJ),e(rJ,RTr),e(t9,PTr),e(q,BTr),e(q,a9),e(a9,J6e),e(J6e,ITr),e(a9,NTr),e(a9,tJ),e(tJ,qTr),e(a9,jTr),e(q,DTr),e(q,n9),e(n9,Y6e),e(Y6e,GTr),e(n9,OTr),e(n9,aJ),e(aJ,VTr),e(n9,XTr),e(q,zTr),e(q,s9),e(s9,K6e),e(K6e,QTr),e(s9,WTr),e(s9,nJ),e(nJ,HTr),e(s9,UTr),e(q,JTr),e(q,l9),e(l9,Z6e),e(Z6e,YTr),e(l9,KTr),e(l9,sJ),e(sJ,ZTr),e(l9,e7r),e(q,o7r),e(q,i9),e(i9,eTe),e(eTe,r7r),e(i9,t7r),e(i9,lJ),e(lJ,a7r),e(i9,n7r),e(q,s7r),e(q,d9),e(d9,oTe),e(oTe,l7r),e(d9,i7r),e(d9,iJ),e(iJ,d7r),e(d9,c7r),e(q,f7r),e(q,c9),e(c9,rTe),e(rTe,m7r),e(c9,g7r),e(c9,dJ),e(dJ,h7r),e(c9,p7r),e(q,_7r),e(q,f9),e(f9,tTe),e(tTe,u7r),e(f9,b7r),e(f9,cJ),e(cJ,v7r),e(f9,F7r),e(q,T7r),e(q,m9),e(m9,aTe),e(aTe,M7r),e(m9,E7r),e(m9,fJ),e(fJ,C7r),e(m9,w7r),e(q,A7r),e(q,g9),e(g9,nTe),e(nTe,L7r),e(g9,y7r),e(g9,mJ),e(mJ,x7r),e(g9,$7r),e(q,k7r),e(q,h9),e(h9,sTe),e(sTe,S7r),e(h9,R7r),e(h9,gJ),e(gJ,P7r),e(h9,B7r),e(q,I7r),e(q,p9),e(p9,lTe),e(lTe,N7r),e(p9,q7r),e(p9,hJ),e(hJ,j7r),e(p9,D7r),e(q,G7r),e(q,_9),e(_9,iTe),e(iTe,O7r),e(_9,V7r),e(_9,pJ),e(pJ,X7r),e(_9,z7r),e(q,Q7r),e(q,u9),e(u9,dTe),e(dTe,W7r),e(u9,H7r),e(u9,_J),e(_J,U7r),e(u9,J7r),e(xr,Y7r),M(b9,xr,null),b(f,wze,u),b(f,ic,u),e(ic,v9),e(v9,cTe),M(ox,cTe,null),e(ic,K7r),e(ic,fTe),e(fTe,Z7r),b(f,Aze,u),b(f,rr,u),M(rx,rr,null),e(rr,e9r),e(rr,dc),e(dc,o9r),e(dc,uJ),e(uJ,r9r),e(dc,t9r),e(dc,bJ),e(bJ,a9r),e(dc,n9r),e(rr,s9r),e(rr,tx),e(tx,l9r),e(tx,mTe),e(mTe,i9r),e(tx,d9r),e(rr,c9r),e(rr,Pt),M(ax,Pt,null),e(Pt,f9r),e(Pt,gTe),e(gTe,m9r),e(Pt,g9r),e(Pt,cc),e(cc,h9r),e(cc,hTe),e(hTe,p9r),e(cc,_9r),e(cc,vJ),e(vJ,u9r),e(cc,b9r),e(Pt,v9r),M(F9,Pt,null),e(rr,F9r),e(rr,$r),M(nx,$r,null),e($r,T9r),e($r,pTe),e(pTe,M9r),e($r,E9r),e($r,dn),e(dn,C9r),e(dn,_Te),e(_Te,w9r),e(dn,A9r),e(dn,uTe),e(uTe,L9r),e(dn,y9r),e(dn,bTe),e(bTe,x9r),e(dn,$9r),e($r,k9r),e($r,se),e(se,T9),e(T9,vTe),e(vTe,S9r),e(T9,R9r),e(T9,FJ),e(FJ,P9r),e(T9,B9r),e(se,I9r),e(se,M9),e(M9,FTe),e(FTe,N9r),e(M9,q9r),e(M9,TJ),e(TJ,j9r),e(M9,D9r),e(se,G9r),e(se,E9),e(E9,TTe),e(TTe,O9r),e(E9,V9r),e(E9,MJ),e(MJ,X9r),e(E9,z9r),e(se,Q9r),e(se,C9),e(C9,MTe),e(MTe,W9r),e(C9,H9r),e(C9,EJ),e(EJ,U9r),e(C9,J9r),e(se,Y9r),e(se,w9),e(w9,ETe),e(ETe,K9r),e(w9,Z9r),e(w9,CJ),e(CJ,eMr),e(w9,oMr),e(se,rMr),e(se,A9),e(A9,CTe),e(CTe,tMr),e(A9,aMr),e(A9,wJ),e(wJ,nMr),e(A9,sMr),e(se,lMr),e(se,L9),e(L9,wTe),e(wTe,iMr),e(L9,dMr),e(L9,AJ),e(AJ,cMr),e(L9,fMr),e(se,mMr),e(se,y9),e(y9,ATe),e(ATe,gMr),e(y9,hMr),e(y9,LJ),e(LJ,pMr),e(y9,_Mr),e(se,uMr),e(se,x9),e(x9,LTe),e(LTe,bMr),e(x9,vMr),e(x9,yJ),e(yJ,FMr),e(x9,TMr),e(se,MMr),e(se,$9),e($9,yTe),e(yTe,EMr),e($9,CMr),e($9,xJ),e(xJ,wMr),e($9,AMr),e(se,LMr),e(se,k9),e(k9,xTe),e(xTe,yMr),e(k9,xMr),e(k9,$J),e($J,$Mr),e(k9,kMr),e(se,SMr),e(se,S9),e(S9,$Te),e($Te,RMr),e(S9,PMr),e(S9,kJ),e(kJ,BMr),e(S9,IMr),e(se,NMr),e(se,R9),e(R9,kTe),e(kTe,qMr),e(R9,jMr),e(R9,SJ),e(SJ,DMr),e(R9,GMr),e(se,OMr),e(se,P9),e(P9,STe),e(STe,VMr),e(P9,XMr),e(P9,RJ),e(RJ,zMr),e(P9,QMr),e(se,WMr),e(se,B9),e(B9,RTe),e(RTe,HMr),e(B9,UMr),e(B9,PJ),e(PJ,JMr),e(B9,YMr),e(se,KMr),e(se,I9),e(I9,PTe),e(PTe,ZMr),e(I9,eEr),e(I9,BJ),e(BJ,oEr),e(I9,rEr),e(se,tEr),e(se,N9),e(N9,BTe),e(BTe,aEr),e(N9,nEr),e(N9,IJ),e(IJ,sEr),e(N9,lEr),e(se,iEr),e(se,q9),e(q9,ITe),e(ITe,dEr),e(q9,cEr),e(q9,NJ),e(NJ,fEr),e(q9,mEr),e(se,gEr),e(se,j9),e(j9,NTe),e(NTe,hEr),e(j9,pEr),e(j9,qJ),e(qJ,_Er),e(j9,uEr),e(se,bEr),e(se,D9),e(D9,qTe),e(qTe,vEr),e(D9,FEr),e(D9,jJ),e(jJ,TEr),e(D9,MEr),e(se,EEr),e(se,G9),e(G9,jTe),e(jTe,CEr),e(G9,wEr),e(G9,DJ),e(DJ,AEr),e(G9,LEr),e(se,yEr),e(se,O9),e(O9,DTe),e(DTe,xEr),e(O9,$Er),e(O9,GJ),e(GJ,kEr),e(O9,SEr),e(se,REr),e(se,V9),e(V9,GTe),e(GTe,PEr),e(V9,BEr),e(V9,OJ),e(OJ,IEr),e(V9,NEr),e($r,qEr),M(X9,$r,null),b(f,Lze,u),b(f,fc,u),e(fc,z9),e(z9,OTe),M(sx,OTe,null),e(fc,jEr),e(fc,VTe),e(VTe,DEr),b(f,yze,u),b(f,tr,u),M(lx,tr,null),e(tr,GEr),e(tr,mc),e(mc,OEr),e(mc,VJ),e(VJ,VEr),e(mc,XEr),e(mc,XJ),e(XJ,zEr),e(mc,QEr),e(tr,WEr),e(tr,ix),e(ix,HEr),e(ix,XTe),e(XTe,UEr),e(ix,JEr),e(tr,YEr),e(tr,Bt),M(dx,Bt,null),e(Bt,KEr),e(Bt,zTe),e(zTe,ZEr),e(Bt,eCr),e(Bt,gc),e(gc,oCr),e(gc,QTe),e(QTe,rCr),e(gc,tCr),e(gc,zJ),e(zJ,aCr),e(gc,nCr),e(Bt,sCr),M(Q9,Bt,null),e(tr,lCr),e(tr,kr),M(cx,kr,null),e(kr,iCr),e(kr,WTe),e(WTe,dCr),e(kr,cCr),e(kr,cn),e(cn,fCr),e(cn,HTe),e(HTe,mCr),e(cn,gCr),e(cn,UTe),e(UTe,hCr),e(cn,pCr),e(cn,JTe),e(JTe,_Cr),e(cn,uCr),e(kr,bCr),e(kr,Me),e(Me,W9),e(W9,YTe),e(YTe,vCr),e(W9,FCr),e(W9,QJ),e(QJ,TCr),e(W9,MCr),e(Me,ECr),e(Me,H9),e(H9,KTe),e(KTe,CCr),e(H9,wCr),e(H9,WJ),e(WJ,ACr),e(H9,LCr),e(Me,yCr),e(Me,U9),e(U9,ZTe),e(ZTe,xCr),e(U9,$Cr),e(U9,HJ),e(HJ,kCr),e(U9,SCr),e(Me,RCr),e(Me,J9),e(J9,e7e),e(e7e,PCr),e(J9,BCr),e(J9,UJ),e(UJ,ICr),e(J9,NCr),e(Me,qCr),e(Me,Y9),e(Y9,o7e),e(o7e,jCr),e(Y9,DCr),e(Y9,JJ),e(JJ,GCr),e(Y9,OCr),e(Me,VCr),e(Me,K9),e(K9,r7e),e(r7e,XCr),e(K9,zCr),e(K9,YJ),e(YJ,QCr),e(K9,WCr),e(Me,HCr),e(Me,Z9),e(Z9,t7e),e(t7e,UCr),e(Z9,JCr),e(Z9,KJ),e(KJ,YCr),e(Z9,KCr),e(Me,ZCr),e(Me,eM),e(eM,a7e),e(a7e,e3r),e(eM,o3r),e(eM,ZJ),e(ZJ,r3r),e(eM,t3r),e(Me,a3r),e(Me,oM),e(oM,n7e),e(n7e,n3r),e(oM,s3r),e(oM,eY),e(eY,l3r),e(oM,i3r),e(Me,d3r),e(Me,rM),e(rM,s7e),e(s7e,c3r),e(rM,f3r),e(rM,oY),e(oY,m3r),e(rM,g3r),e(Me,h3r),e(Me,tM),e(tM,l7e),e(l7e,p3r),e(tM,_3r),e(tM,rY),e(rY,u3r),e(tM,b3r),e(Me,v3r),e(Me,aM),e(aM,i7e),e(i7e,F3r),e(aM,T3r),e(aM,tY),e(tY,M3r),e(aM,E3r),e(Me,C3r),e(Me,nM),e(nM,d7e),e(d7e,w3r),e(nM,A3r),e(nM,aY),e(aY,L3r),e(nM,y3r),e(kr,x3r),M(sM,kr,null),b(f,xze,u),b(f,hc,u),e(hc,lM),e(lM,c7e),M(fx,c7e,null),e(hc,$3r),e(hc,f7e),e(f7e,k3r),b(f,$ze,u),b(f,ar,u),M(mx,ar,null),e(ar,S3r),e(ar,pc),e(pc,R3r),e(pc,nY),e(nY,P3r),e(pc,B3r),e(pc,sY),e(sY,I3r),e(pc,N3r),e(ar,q3r),e(ar,gx),e(gx,j3r),e(gx,m7e),e(m7e,D3r),e(gx,G3r),e(ar,O3r),e(ar,It),M(hx,It,null),e(It,V3r),e(It,g7e),e(g7e,X3r),e(It,z3r),e(It,_c),e(_c,Q3r),e(_c,h7e),e(h7e,W3r),e(_c,H3r),e(_c,lY),e(lY,U3r),e(_c,J3r),e(It,Y3r),M(iM,It,null),e(ar,K3r),e(ar,Sr),M(px,Sr,null),e(Sr,Z3r),e(Sr,p7e),e(p7e,e5r),e(Sr,o5r),e(Sr,fn),e(fn,r5r),e(fn,_7e),e(_7e,t5r),e(fn,a5r),e(fn,u7e),e(u7e,n5r),e(fn,s5r),e(fn,b7e),e(b7e,l5r),e(fn,i5r),e(Sr,d5r),e(Sr,Qe),e(Qe,dM),e(dM,v7e),e(v7e,c5r),e(dM,f5r),e(dM,iY),e(iY,m5r),e(dM,g5r),e(Qe,h5r),e(Qe,cM),e(cM,F7e),e(F7e,p5r),e(cM,_5r),e(cM,dY),e(dY,u5r),e(cM,b5r),e(Qe,v5r),e(Qe,fM),e(fM,T7e),e(T7e,F5r),e(fM,T5r),e(fM,cY),e(cY,M5r),e(fM,E5r),e(Qe,C5r),e(Qe,mM),e(mM,M7e),e(M7e,w5r),e(mM,A5r),e(mM,fY),e(fY,L5r),e(mM,y5r),e(Qe,x5r),e(Qe,gM),e(gM,E7e),e(E7e,$5r),e(gM,k5r),e(gM,mY),e(mY,S5r),e(gM,R5r),e(Qe,P5r),e(Qe,hM),e(hM,C7e),e(C7e,B5r),e(hM,I5r),e(hM,gY),e(gY,N5r),e(hM,q5r),e(Qe,j5r),e(Qe,pM),e(pM,w7e),e(w7e,D5r),e(pM,G5r),e(pM,hY),e(hY,O5r),e(pM,V5r),e(Sr,X5r),M(_M,Sr,null),b(f,kze,u),b(f,uc,u),e(uc,uM),e(uM,A7e),M(_x,A7e,null),e(uc,z5r),e(uc,L7e),e(L7e,Q5r),b(f,Sze,u),b(f,nr,u),M(ux,nr,null),e(nr,W5r),e(nr,bc),e(bc,H5r),e(bc,pY),e(pY,U5r),e(bc,J5r),e(bc,_Y),e(_Y,Y5r),e(bc,K5r),e(nr,Z5r),e(nr,bx),e(bx,e0r),e(bx,y7e),e(y7e,o0r),e(bx,r0r),e(nr,t0r),e(nr,Nt),M(vx,Nt,null),e(Nt,a0r),e(Nt,x7e),e(x7e,n0r),e(Nt,s0r),e(Nt,vc),e(vc,l0r),e(vc,$7e),e($7e,i0r),e(vc,d0r),e(vc,uY),e(uY,c0r),e(vc,f0r),e(Nt,m0r),M(bM,Nt,null),e(nr,g0r),e(nr,Rr),M(Fx,Rr,null),e(Rr,h0r),e(Rr,k7e),e(k7e,p0r),e(Rr,_0r),e(Rr,mn),e(mn,u0r),e(mn,S7e),e(S7e,b0r),e(mn,v0r),e(mn,R7e),e(R7e,F0r),e(mn,T0r),e(mn,P7e),e(P7e,M0r),e(mn,E0r),e(Rr,C0r),e(Rr,ie),e(ie,vM),e(vM,B7e),e(B7e,w0r),e(vM,A0r),e(vM,bY),e(bY,L0r),e(vM,y0r),e(ie,x0r),e(ie,FM),e(FM,I7e),e(I7e,$0r),e(FM,k0r),e(FM,vY),e(vY,S0r),e(FM,R0r),e(ie,P0r),e(ie,TM),e(TM,N7e),e(N7e,B0r),e(TM,I0r),e(TM,FY),e(FY,N0r),e(TM,q0r),e(ie,j0r),e(ie,MM),e(MM,q7e),e(q7e,D0r),e(MM,G0r),e(MM,TY),e(TY,O0r),e(MM,V0r),e(ie,X0r),e(ie,EM),e(EM,j7e),e(j7e,z0r),e(EM,Q0r),e(EM,MY),e(MY,W0r),e(EM,H0r),e(ie,U0r),e(ie,CM),e(CM,D7e),e(D7e,J0r),e(CM,Y0r),e(CM,EY),e(EY,K0r),e(CM,Z0r),e(ie,ewr),e(ie,wM),e(wM,G7e),e(G7e,owr),e(wM,rwr),e(wM,CY),e(CY,twr),e(wM,awr),e(ie,nwr),e(ie,AM),e(AM,O7e),e(O7e,swr),e(AM,lwr),e(AM,wY),e(wY,iwr),e(AM,dwr),e(ie,cwr),e(ie,LM),e(LM,V7e),e(V7e,fwr),e(LM,mwr),e(LM,AY),e(AY,gwr),e(LM,hwr),e(ie,pwr),e(ie,yM),e(yM,X7e),e(X7e,_wr),e(yM,uwr),e(yM,LY),e(LY,bwr),e(yM,vwr),e(ie,Fwr),e(ie,xM),e(xM,z7e),e(z7e,Twr),e(xM,Mwr),e(xM,yY),e(yY,Ewr),e(xM,Cwr),e(ie,wwr),e(ie,$M),e($M,Q7e),e(Q7e,Awr),e($M,Lwr),e($M,xY),e(xY,ywr),e($M,xwr),e(ie,$wr),e(ie,kM),e(kM,W7e),e(W7e,kwr),e(kM,Swr),e(kM,$Y),e($Y,Rwr),e(kM,Pwr),e(ie,Bwr),e(ie,SM),e(SM,H7e),e(H7e,Iwr),e(SM,Nwr),e(SM,kY),e(kY,qwr),e(SM,jwr),e(ie,Dwr),e(ie,RM),e(RM,U7e),e(U7e,Gwr),e(RM,Owr),e(RM,SY),e(SY,Vwr),e(RM,Xwr),e(ie,zwr),e(ie,PM),e(PM,J7e),e(J7e,Qwr),e(PM,Wwr),e(PM,RY),e(RY,Hwr),e(PM,Uwr),e(ie,Jwr),e(ie,BM),e(BM,Y7e),e(Y7e,Ywr),e(BM,Kwr),e(BM,PY),e(PY,Zwr),e(BM,eAr),e(ie,oAr),e(ie,IM),e(IM,K7e),e(K7e,rAr),e(IM,tAr),e(IM,BY),e(BY,aAr),e(IM,nAr),e(ie,sAr),e(ie,NM),e(NM,Z7e),e(Z7e,lAr),e(NM,iAr),e(NM,IY),e(IY,dAr),e(NM,cAr),e(ie,fAr),e(ie,qM),e(qM,e9e),e(e9e,mAr),e(qM,gAr),e(qM,NY),e(NY,hAr),e(qM,pAr),e(Rr,_Ar),M(jM,Rr,null),b(f,Rze,u),b(f,Fc,u),e(Fc,DM),e(DM,o9e),M(Tx,o9e,null),e(Fc,uAr),e(Fc,r9e),e(r9e,bAr),b(f,Pze,u),b(f,sr,u),M(Mx,sr,null),e(sr,vAr),e(sr,Tc),e(Tc,FAr),e(Tc,qY),e(qY,TAr),e(Tc,MAr),e(Tc,jY),e(jY,EAr),e(Tc,CAr),e(sr,wAr),e(sr,Ex),e(Ex,AAr),e(Ex,t9e),e(t9e,LAr),e(Ex,yAr),e(sr,xAr),e(sr,qt),M(Cx,qt,null),e(qt,$Ar),e(qt,a9e),e(a9e,kAr),e(qt,SAr),e(qt,Mc),e(Mc,RAr),e(Mc,n9e),e(n9e,PAr),e(Mc,BAr),e(Mc,DY),e(DY,IAr),e(Mc,NAr),e(qt,qAr),M(GM,qt,null),e(sr,jAr),e(sr,Pr),M(wx,Pr,null),e(Pr,DAr),e(Pr,s9e),e(s9e,GAr),e(Pr,OAr),e(Pr,gn),e(gn,VAr),e(gn,l9e),e(l9e,XAr),e(gn,zAr),e(gn,i9e),e(i9e,QAr),e(gn,WAr),e(gn,d9e),e(d9e,HAr),e(gn,UAr),e(Pr,JAr),e(Pr,ye),e(ye,OM),e(OM,c9e),e(c9e,YAr),e(OM,KAr),e(OM,GY),e(GY,ZAr),e(OM,eLr),e(ye,oLr),e(ye,VM),e(VM,f9e),e(f9e,rLr),e(VM,tLr),e(VM,OY),e(OY,aLr),e(VM,nLr),e(ye,sLr),e(ye,XM),e(XM,m9e),e(m9e,lLr),e(XM,iLr),e(XM,VY),e(VY,dLr),e(XM,cLr),e(ye,fLr),e(ye,zM),e(zM,g9e),e(g9e,mLr),e(zM,gLr),e(zM,XY),e(XY,hLr),e(zM,pLr),e(ye,_Lr),e(ye,QM),e(QM,h9e),e(h9e,uLr),e(QM,bLr),e(QM,zY),e(zY,vLr),e(QM,FLr),e(ye,TLr),e(ye,WM),e(WM,p9e),e(p9e,MLr),e(WM,ELr),e(WM,QY),e(QY,CLr),e(WM,wLr),e(ye,ALr),e(ye,HM),e(HM,_9e),e(_9e,LLr),e(HM,yLr),e(HM,WY),e(WY,xLr),e(HM,$Lr),e(ye,kLr),e(ye,UM),e(UM,u9e),e(u9e,SLr),e(UM,RLr),e(UM,HY),e(HY,PLr),e(UM,BLr),e(ye,ILr),e(ye,JM),e(JM,b9e),e(b9e,NLr),e(JM,qLr),e(JM,UY),e(UY,jLr),e(JM,DLr),e(ye,GLr),e(ye,YM),e(YM,v9e),e(v9e,OLr),e(YM,VLr),e(YM,JY),e(JY,XLr),e(YM,zLr),e(Pr,QLr),M(KM,Pr,null),b(f,Bze,u),b(f,Ec,u),e(Ec,ZM),e(ZM,F9e),M(Ax,F9e,null),e(Ec,WLr),e(Ec,T9e),e(T9e,HLr),b(f,Ize,u),b(f,lr,u),M(Lx,lr,null),e(lr,ULr),e(lr,Cc),e(Cc,JLr),e(Cc,YY),e(YY,YLr),e(Cc,KLr),e(Cc,KY),e(KY,ZLr),e(Cc,eyr),e(lr,oyr),e(lr,yx),e(yx,ryr),e(yx,M9e),e(M9e,tyr),e(yx,ayr),e(lr,nyr),e(lr,jt),M(xx,jt,null),e(jt,syr),e(jt,E9e),e(E9e,lyr),e(jt,iyr),e(jt,wc),e(wc,dyr),e(wc,C9e),e(C9e,cyr),e(wc,fyr),e(wc,ZY),e(ZY,myr),e(wc,gyr),e(jt,hyr),M(eE,jt,null),e(lr,pyr),e(lr,Br),M($x,Br,null),e(Br,_yr),e(Br,w9e),e(w9e,uyr),e(Br,byr),e(Br,hn),e(hn,vyr),e(hn,A9e),e(A9e,Fyr),e(hn,Tyr),e(hn,L9e),e(L9e,Myr),e(hn,Eyr),e(hn,y9e),e(y9e,Cyr),e(hn,wyr),e(Br,Ayr),e(Br,te),e(te,oE),e(oE,x9e),e(x9e,Lyr),e(oE,yyr),e(oE,eK),e(eK,xyr),e(oE,$yr),e(te,kyr),e(te,rE),e(rE,$9e),e($9e,Syr),e(rE,Ryr),e(rE,oK),e(oK,Pyr),e(rE,Byr),e(te,Iyr),e(te,tE),e(tE,k9e),e(k9e,Nyr),e(tE,qyr),e(tE,rK),e(rK,jyr),e(tE,Dyr),e(te,Gyr),e(te,aE),e(aE,S9e),e(S9e,Oyr),e(aE,Vyr),e(aE,tK),e(tK,Xyr),e(aE,zyr),e(te,Qyr),e(te,nE),e(nE,R9e),e(R9e,Wyr),e(nE,Hyr),e(nE,aK),e(aK,Uyr),e(nE,Jyr),e(te,Yyr),e(te,sE),e(sE,P9e),e(P9e,Kyr),e(sE,Zyr),e(sE,nK),e(nK,e8r),e(sE,o8r),e(te,r8r),e(te,lE),e(lE,B9e),e(B9e,t8r),e(lE,a8r),e(lE,sK),e(sK,n8r),e(lE,s8r),e(te,l8r),e(te,iE),e(iE,I9e),e(I9e,i8r),e(iE,d8r),e(iE,lK),e(lK,c8r),e(iE,f8r),e(te,m8r),e(te,dE),e(dE,N9e),e(N9e,g8r),e(dE,h8r),e(dE,iK),e(iK,p8r),e(dE,_8r),e(te,u8r),e(te,cE),e(cE,q9e),e(q9e,b8r),e(cE,v8r),e(cE,dK),e(dK,F8r),e(cE,T8r),e(te,M8r),e(te,fE),e(fE,j9e),e(j9e,E8r),e(fE,C8r),e(fE,cK),e(cK,w8r),e(fE,A8r),e(te,L8r),e(te,mE),e(mE,D9e),e(D9e,y8r),e(mE,x8r),e(mE,fK),e(fK,$8r),e(mE,k8r),e(te,S8r),e(te,gE),e(gE,G9e),e(G9e,R8r),e(gE,P8r),e(gE,mK),e(mK,B8r),e(gE,I8r),e(te,N8r),e(te,hE),e(hE,O9e),e(O9e,q8r),e(hE,j8r),e(hE,gK),e(gK,D8r),e(hE,G8r),e(te,O8r),e(te,pE),e(pE,V9e),e(V9e,V8r),e(pE,X8r),e(pE,hK),e(hK,z8r),e(pE,Q8r),e(te,W8r),e(te,_E),e(_E,X9e),e(X9e,H8r),e(_E,U8r),e(_E,pK),e(pK,J8r),e(_E,Y8r),e(te,K8r),e(te,uE),e(uE,z9e),e(z9e,Z8r),e(uE,exr),e(uE,_K),e(_K,oxr),e(uE,rxr),e(te,txr),e(te,bE),e(bE,Q9e),e(Q9e,axr),e(bE,nxr),e(bE,uK),e(uK,sxr),e(bE,lxr),e(te,ixr),e(te,vE),e(vE,W9e),e(W9e,dxr),e(vE,cxr),e(vE,bK),e(bK,fxr),e(vE,mxr),e(te,gxr),e(te,FE),e(FE,H9e),e(H9e,hxr),e(FE,pxr),e(FE,vK),e(vK,_xr),e(FE,uxr),e(te,bxr),e(te,TE),e(TE,U9e),e(U9e,vxr),e(TE,Fxr),e(TE,FK),e(FK,Txr),e(TE,Mxr),e(te,Exr),e(te,ME),e(ME,J9e),e(J9e,Cxr),e(ME,wxr),e(ME,TK),e(TK,Axr),e(ME,Lxr),e(te,yxr),e(te,EE),e(EE,Y9e),e(Y9e,xxr),e(EE,$xr),e(EE,MK),e(MK,kxr),e(EE,Sxr),e(te,Rxr),e(te,CE),e(CE,K9e),e(K9e,Pxr),e(CE,Bxr),e(CE,EK),e(EK,Ixr),e(CE,Nxr),e(te,qxr),e(te,wE),e(wE,Z9e),e(Z9e,jxr),e(wE,Dxr),e(wE,CK),e(CK,Gxr),e(wE,Oxr),e(te,Vxr),e(te,AE),e(AE,eMe),e(eMe,Xxr),e(AE,zxr),e(AE,wK),e(wK,Qxr),e(AE,Wxr),e(Br,Hxr),M(LE,Br,null),b(f,Nze,u),b(f,Ac,u),e(Ac,yE),e(yE,oMe),M(kx,oMe,null),e(Ac,Uxr),e(Ac,rMe),e(rMe,Jxr),b(f,qze,u),b(f,ir,u),M(Sx,ir,null),e(ir,Yxr),e(ir,Lc),e(Lc,Kxr),e(Lc,AK),e(AK,Zxr),e(Lc,e$r),e(Lc,LK),e(LK,o$r),e(Lc,r$r),e(ir,t$r),e(ir,Rx),e(Rx,a$r),e(Rx,tMe),e(tMe,n$r),e(Rx,s$r),e(ir,l$r),e(ir,Dt),M(Px,Dt,null),e(Dt,i$r),e(Dt,aMe),e(aMe,d$r),e(Dt,c$r),e(Dt,yc),e(yc,f$r),e(yc,nMe),e(nMe,m$r),e(yc,g$r),e(yc,yK),e(yK,h$r),e(yc,p$r),e(Dt,_$r),M(xE,Dt,null),e(ir,u$r),e(ir,Ir),M(Bx,Ir,null),e(Ir,b$r),e(Ir,sMe),e(sMe,v$r),e(Ir,F$r),e(Ir,pn),e(pn,T$r),e(pn,lMe),e(lMe,M$r),e(pn,E$r),e(pn,iMe),e(iMe,C$r),e(pn,w$r),e(pn,dMe),e(dMe,A$r),e(pn,L$r),e(Ir,y$r),e(Ir,ue),e(ue,$E),e($E,cMe),e(cMe,x$r),e($E,$$r),e($E,xK),e(xK,k$r),e($E,S$r),e(ue,R$r),e(ue,kE),e(kE,fMe),e(fMe,P$r),e(kE,B$r),e(kE,$K),e($K,I$r),e(kE,N$r),e(ue,q$r),e(ue,SE),e(SE,mMe),e(mMe,j$r),e(SE,D$r),e(SE,kK),e(kK,G$r),e(SE,O$r),e(ue,V$r),e(ue,RE),e(RE,gMe),e(gMe,X$r),e(RE,z$r),e(RE,SK),e(SK,Q$r),e(RE,W$r),e(ue,H$r),e(ue,PE),e(PE,hMe),e(hMe,U$r),e(PE,J$r),e(PE,RK),e(RK,Y$r),e(PE,K$r),e(ue,Z$r),e(ue,BE),e(BE,pMe),e(pMe,ekr),e(BE,okr),e(BE,PK),e(PK,rkr),e(BE,tkr),e(ue,akr),e(ue,IE),e(IE,_Me),e(_Me,nkr),e(IE,skr),e(IE,BK),e(BK,lkr),e(IE,ikr),e(ue,dkr),e(ue,NE),e(NE,uMe),e(uMe,ckr),e(NE,fkr),e(NE,IK),e(IK,mkr),e(NE,gkr),e(ue,hkr),e(ue,qE),e(qE,bMe),e(bMe,pkr),e(qE,_kr),e(qE,NK),e(NK,ukr),e(qE,bkr),e(ue,vkr),e(ue,jE),e(jE,vMe),e(vMe,Fkr),e(jE,Tkr),e(jE,qK),e(qK,Mkr),e(jE,Ekr),e(ue,Ckr),e(ue,DE),e(DE,FMe),e(FMe,wkr),e(DE,Akr),e(DE,jK),e(jK,Lkr),e(DE,ykr),e(ue,xkr),e(ue,GE),e(GE,TMe),e(TMe,$kr),e(GE,kkr),e(GE,DK),e(DK,Skr),e(GE,Rkr),e(ue,Pkr),e(ue,OE),e(OE,MMe),e(MMe,Bkr),e(OE,Ikr),e(OE,GK),e(GK,Nkr),e(OE,qkr),e(ue,jkr),e(ue,VE),e(VE,EMe),e(EMe,Dkr),e(VE,Gkr),e(VE,OK),e(OK,Okr),e(VE,Vkr),e(ue,Xkr),e(ue,XE),e(XE,CMe),e(CMe,zkr),e(XE,Qkr),e(XE,VK),e(VK,Wkr),e(XE,Hkr),e(ue,Ukr),e(ue,zE),e(zE,wMe),e(wMe,Jkr),e(zE,Ykr),e(zE,XK),e(XK,Kkr),e(zE,Zkr),e(ue,eSr),e(ue,QE),e(QE,AMe),e(AMe,oSr),e(QE,rSr),e(QE,zK),e(zK,tSr),e(QE,aSr),e(Ir,nSr),M(WE,Ir,null),b(f,jze,u),b(f,xc,u),e(xc,HE),e(HE,LMe),M(Ix,LMe,null),e(xc,sSr),e(xc,yMe),e(yMe,lSr),b(f,Dze,u),b(f,dr,u),M(Nx,dr,null),e(dr,iSr),e(dr,$c),e($c,dSr),e($c,QK),e(QK,cSr),e($c,fSr),e($c,WK),e(WK,mSr),e($c,gSr),e(dr,hSr),e(dr,qx),e(qx,pSr),e(qx,xMe),e(xMe,_Sr),e(qx,uSr),e(dr,bSr),e(dr,Gt),M(jx,Gt,null),e(Gt,vSr),e(Gt,$Me),e($Me,FSr),e(Gt,TSr),e(Gt,kc),e(kc,MSr),e(kc,kMe),e(kMe,ESr),e(kc,CSr),e(kc,HK),e(HK,wSr),e(kc,ASr),e(Gt,LSr),M(UE,Gt,null),e(dr,ySr),e(dr,Nr),M(Dx,Nr,null),e(Nr,xSr),e(Nr,SMe),e(SMe,$Sr),e(Nr,kSr),e(Nr,_n),e(_n,SSr),e(_n,RMe),e(RMe,RSr),e(_n,PSr),e(_n,PMe),e(PMe,BSr),e(_n,ISr),e(_n,BMe),e(BMe,NSr),e(_n,qSr),e(Nr,jSr),e(Nr,Gx),e(Gx,JE),e(JE,IMe),e(IMe,DSr),e(JE,GSr),e(JE,UK),e(UK,OSr),e(JE,VSr),e(Gx,XSr),e(Gx,YE),e(YE,NMe),e(NMe,zSr),e(YE,QSr),e(YE,JK),e(JK,WSr),e(YE,HSr),e(Nr,USr),M(KE,Nr,null),b(f,Gze,u),b(f,Sc,u),e(Sc,ZE),e(ZE,qMe),M(Ox,qMe,null),e(Sc,JSr),e(Sc,jMe),e(jMe,YSr),b(f,Oze,u),b(f,cr,u),M(Vx,cr,null),e(cr,KSr),e(cr,Rc),e(Rc,ZSr),e(Rc,YK),e(YK,eRr),e(Rc,oRr),e(Rc,KK),e(KK,rRr),e(Rc,tRr),e(cr,aRr),e(cr,Xx),e(Xx,nRr),e(Xx,DMe),e(DMe,sRr),e(Xx,lRr),e(cr,iRr),e(cr,Ot),M(zx,Ot,null),e(Ot,dRr),e(Ot,GMe),e(GMe,cRr),e(Ot,fRr),e(Ot,Pc),e(Pc,mRr),e(Pc,OMe),e(OMe,gRr),e(Pc,hRr),e(Pc,ZK),e(ZK,pRr),e(Pc,_Rr),e(Ot,uRr),M(eC,Ot,null),e(cr,bRr),e(cr,qr),M(Qx,qr,null),e(qr,vRr),e(qr,VMe),e(VMe,FRr),e(qr,TRr),e(qr,un),e(un,MRr),e(un,XMe),e(XMe,ERr),e(un,CRr),e(un,zMe),e(zMe,wRr),e(un,ARr),e(un,QMe),e(QMe,LRr),e(un,yRr),e(qr,xRr),e(qr,WMe),e(WMe,oC),e(oC,HMe),e(HMe,$Rr),e(oC,kRr),e(oC,eZ),e(eZ,SRr),e(oC,RRr),e(qr,PRr),M(rC,qr,null),b(f,Vze,u),b(f,Bc,u),e(Bc,tC),e(tC,UMe),M(Wx,UMe,null),e(Bc,BRr),e(Bc,JMe),e(JMe,IRr),b(f,Xze,u),b(f,fr,u),M(Hx,fr,null),e(fr,NRr),e(fr,Ic),e(Ic,qRr),e(Ic,oZ),e(oZ,jRr),e(Ic,DRr),e(Ic,rZ),e(rZ,GRr),e(Ic,ORr),e(fr,VRr),e(fr,Ux),e(Ux,XRr),e(Ux,YMe),e(YMe,zRr),e(Ux,QRr),e(fr,WRr),e(fr,Vt),M(Jx,Vt,null),e(Vt,HRr),e(Vt,KMe),e(KMe,URr),e(Vt,JRr),e(Vt,Nc),e(Nc,YRr),e(Nc,ZMe),e(ZMe,KRr),e(Nc,ZRr),e(Nc,tZ),e(tZ,ePr),e(Nc,oPr),e(Vt,rPr),M(aC,Vt,null),e(fr,tPr),e(fr,jr),M(Yx,jr,null),e(jr,aPr),e(jr,eEe),e(eEe,nPr),e(jr,sPr),e(jr,bn),e(bn,lPr),e(bn,oEe),e(oEe,iPr),e(bn,dPr),e(bn,rEe),e(rEe,cPr),e(bn,fPr),e(bn,tEe),e(tEe,mPr),e(bn,gPr),e(jr,hPr),e(jr,de),e(de,nC),e(nC,aEe),e(aEe,pPr),e(nC,_Pr),e(nC,aZ),e(aZ,uPr),e(nC,bPr),e(de,vPr),e(de,sC),e(sC,nEe),e(nEe,FPr),e(sC,TPr),e(sC,nZ),e(nZ,MPr),e(sC,EPr),e(de,CPr),e(de,lC),e(lC,sEe),e(sEe,wPr),e(lC,APr),e(lC,sZ),e(sZ,LPr),e(lC,yPr),e(de,xPr),e(de,iC),e(iC,lEe),e(lEe,$Pr),e(iC,kPr),e(iC,lZ),e(lZ,SPr),e(iC,RPr),e(de,PPr),e(de,dC),e(dC,iEe),e(iEe,BPr),e(dC,IPr),e(dC,iZ),e(iZ,NPr),e(dC,qPr),e(de,jPr),e(de,cC),e(cC,dEe),e(dEe,DPr),e(cC,GPr),e(cC,dZ),e(dZ,OPr),e(cC,VPr),e(de,XPr),e(de,fC),e(fC,cEe),e(cEe,zPr),e(fC,QPr),e(fC,cZ),e(cZ,WPr),e(fC,HPr),e(de,UPr),e(de,mC),e(mC,fEe),e(fEe,JPr),e(mC,YPr),e(mC,fZ),e(fZ,KPr),e(mC,ZPr),e(de,eBr),e(de,gC),e(gC,mEe),e(mEe,oBr),e(gC,rBr),e(gC,mZ),e(mZ,tBr),e(gC,aBr),e(de,nBr),e(de,hC),e(hC,gEe),e(gEe,sBr),e(hC,lBr),e(hC,gZ),e(gZ,iBr),e(hC,dBr),e(de,cBr),e(de,pC),e(pC,hEe),e(hEe,fBr),e(pC,mBr),e(pC,hZ),e(hZ,gBr),e(pC,hBr),e(de,pBr),e(de,_C),e(_C,pEe),e(pEe,_Br),e(_C,uBr),e(_C,pZ),e(pZ,bBr),e(_C,vBr),e(de,FBr),e(de,uC),e(uC,_Ee),e(_Ee,TBr),e(uC,MBr),e(uC,_Z),e(_Z,EBr),e(uC,CBr),e(de,wBr),e(de,bC),e(bC,uEe),e(uEe,ABr),e(bC,LBr),e(bC,uZ),e(uZ,yBr),e(bC,xBr),e(de,$Br),e(de,vC),e(vC,bEe),e(bEe,kBr),e(vC,SBr),e(vC,bZ),e(bZ,RBr),e(vC,PBr),e(de,BBr),e(de,FC),e(FC,vEe),e(vEe,IBr),e(FC,NBr),e(FC,vZ),e(vZ,qBr),e(FC,jBr),e(de,DBr),e(de,TC),e(TC,FEe),e(FEe,GBr),e(TC,OBr),e(TC,FZ),e(FZ,VBr),e(TC,XBr),e(de,zBr),e(de,MC),e(MC,TEe),e(TEe,QBr),e(MC,WBr),e(MC,TZ),e(TZ,HBr),e(MC,UBr),e(de,JBr),e(de,EC),e(EC,MEe),e(MEe,YBr),e(EC,KBr),e(EC,MZ),e(MZ,ZBr),e(EC,eIr),e(de,oIr),e(de,CC),e(CC,EEe),e(EEe,rIr),e(CC,tIr),e(CC,EZ),e(EZ,aIr),e(CC,nIr),e(jr,sIr),M(wC,jr,null),b(f,zze,u),b(f,qc,u),e(qc,AC),e(AC,CEe),M(Kx,CEe,null),e(qc,lIr),e(qc,wEe),e(wEe,iIr),b(f,Qze,u),b(f,mr,u),M(Zx,mr,null),e(mr,dIr),e(mr,jc),e(jc,cIr),e(jc,CZ),e(CZ,fIr),e(jc,mIr),e(jc,wZ),e(wZ,gIr),e(jc,hIr),e(mr,pIr),e(mr,e$),e(e$,_Ir),e(e$,AEe),e(AEe,uIr),e(e$,bIr),e(mr,vIr),e(mr,Xt),M(o$,Xt,null),e(Xt,FIr),e(Xt,LEe),e(LEe,TIr),e(Xt,MIr),e(Xt,Dc),e(Dc,EIr),e(Dc,yEe),e(yEe,CIr),e(Dc,wIr),e(Dc,AZ),e(AZ,AIr),e(Dc,LIr),e(Xt,yIr),M(LC,Xt,null),e(mr,xIr),e(mr,Dr),M(r$,Dr,null),e(Dr,$Ir),e(Dr,xEe),e(xEe,kIr),e(Dr,SIr),e(Dr,vn),e(vn,RIr),e(vn,$Ee),e($Ee,PIr),e(vn,BIr),e(vn,kEe),e(kEe,IIr),e(vn,NIr),e(vn,SEe),e(SEe,qIr),e(vn,jIr),e(Dr,DIr),e(Dr,ce),e(ce,yC),e(yC,REe),e(REe,GIr),e(yC,OIr),e(yC,LZ),e(LZ,VIr),e(yC,XIr),e(ce,zIr),e(ce,xC),e(xC,PEe),e(PEe,QIr),e(xC,WIr),e(xC,yZ),e(yZ,HIr),e(xC,UIr),e(ce,JIr),e(ce,$C),e($C,BEe),e(BEe,YIr),e($C,KIr),e($C,xZ),e(xZ,ZIr),e($C,eNr),e(ce,oNr),e(ce,kC),e(kC,IEe),e(IEe,rNr),e(kC,tNr),e(kC,$Z),e($Z,aNr),e(kC,nNr),e(ce,sNr),e(ce,SC),e(SC,NEe),e(NEe,lNr),e(SC,iNr),e(SC,kZ),e(kZ,dNr),e(SC,cNr),e(ce,fNr),e(ce,RC),e(RC,qEe),e(qEe,mNr),e(RC,gNr),e(RC,SZ),e(SZ,hNr),e(RC,pNr),e(ce,_Nr),e(ce,PC),e(PC,jEe),e(jEe,uNr),e(PC,bNr),e(PC,RZ),e(RZ,vNr),e(PC,FNr),e(ce,TNr),e(ce,BC),e(BC,DEe),e(DEe,MNr),e(BC,ENr),e(BC,PZ),e(PZ,CNr),e(BC,wNr),e(ce,ANr),e(ce,IC),e(IC,GEe),e(GEe,LNr),e(IC,yNr),e(IC,BZ),e(BZ,xNr),e(IC,$Nr),e(ce,kNr),e(ce,NC),e(NC,OEe),e(OEe,SNr),e(NC,RNr),e(NC,IZ),e(IZ,PNr),e(NC,BNr),e(ce,INr),e(ce,qC),e(qC,VEe),e(VEe,NNr),e(qC,qNr),e(qC,NZ),e(NZ,jNr),e(qC,DNr),e(ce,GNr),e(ce,jC),e(jC,XEe),e(XEe,ONr),e(jC,VNr),e(jC,qZ),e(qZ,XNr),e(jC,zNr),e(ce,QNr),e(ce,DC),e(DC,zEe),e(zEe,WNr),e(DC,HNr),e(DC,jZ),e(jZ,UNr),e(DC,JNr),e(ce,YNr),e(ce,GC),e(GC,QEe),e(QEe,KNr),e(GC,ZNr),e(GC,DZ),e(DZ,eqr),e(GC,oqr),e(ce,rqr),e(ce,OC),e(OC,WEe),e(WEe,tqr),e(OC,aqr),e(OC,GZ),e(GZ,nqr),e(OC,sqr),e(ce,lqr),e(ce,VC),e(VC,HEe),e(HEe,iqr),e(VC,dqr),e(VC,OZ),e(OZ,cqr),e(VC,fqr),e(ce,mqr),e(ce,XC),e(XC,UEe),e(UEe,gqr),e(XC,hqr),e(XC,VZ),e(VZ,pqr),e(XC,_qr),e(ce,uqr),e(ce,zC),e(zC,JEe),e(JEe,bqr),e(zC,vqr),e(zC,XZ),e(XZ,Fqr),e(zC,Tqr),e(ce,Mqr),e(ce,QC),e(QC,YEe),e(YEe,Eqr),e(QC,Cqr),e(QC,zZ),e(zZ,wqr),e(QC,Aqr),e(ce,Lqr),e(ce,WC),e(WC,KEe),e(KEe,yqr),e(WC,xqr),e(WC,QZ),e(QZ,$qr),e(WC,kqr),e(Dr,Sqr),M(HC,Dr,null),b(f,Wze,u),b(f,Gc,u),e(Gc,UC),e(UC,ZEe),M(t$,ZEe,null),e(Gc,Rqr),e(Gc,eCe),e(eCe,Pqr),b(f,Hze,u),b(f,gr,u),M(a$,gr,null),e(gr,Bqr),e(gr,Oc),e(Oc,Iqr),e(Oc,WZ),e(WZ,Nqr),e(Oc,qqr),e(Oc,HZ),e(HZ,jqr),e(Oc,Dqr),e(gr,Gqr),e(gr,n$),e(n$,Oqr),e(n$,oCe),e(oCe,Vqr),e(n$,Xqr),e(gr,zqr),e(gr,zt),M(s$,zt,null),e(zt,Qqr),e(zt,rCe),e(rCe,Wqr),e(zt,Hqr),e(zt,Vc),e(Vc,Uqr),e(Vc,tCe),e(tCe,Jqr),e(Vc,Yqr),e(Vc,UZ),e(UZ,Kqr),e(Vc,Zqr),e(zt,ejr),M(JC,zt,null),e(gr,ojr),e(gr,Gr),M(l$,Gr,null),e(Gr,rjr),e(Gr,aCe),e(aCe,tjr),e(Gr,ajr),e(Gr,Fn),e(Fn,njr),e(Fn,nCe),e(nCe,sjr),e(Fn,ljr),e(Fn,sCe),e(sCe,ijr),e(Fn,djr),e(Fn,lCe),e(lCe,cjr),e(Fn,fjr),e(Gr,mjr),e(Gr,iCe),e(iCe,YC),e(YC,dCe),e(dCe,gjr),e(YC,hjr),e(YC,JZ),e(JZ,pjr),e(YC,_jr),e(Gr,ujr),M(KC,Gr,null),b(f,Uze,u),b(f,Xc,u),e(Xc,ZC),e(ZC,cCe),M(i$,cCe,null),e(Xc,bjr),e(Xc,fCe),e(fCe,vjr),b(f,Jze,u),b(f,hr,u),M(d$,hr,null),e(hr,Fjr),e(hr,zc),e(zc,Tjr),e(zc,YZ),e(YZ,Mjr),e(zc,Ejr),e(zc,KZ),e(KZ,Cjr),e(zc,wjr),e(hr,Ajr),e(hr,c$),e(c$,Ljr),e(c$,mCe),e(mCe,yjr),e(c$,xjr),e(hr,$jr),e(hr,Qt),M(f$,Qt,null),e(Qt,kjr),e(Qt,gCe),e(gCe,Sjr),e(Qt,Rjr),e(Qt,Qc),e(Qc,Pjr),e(Qc,hCe),e(hCe,Bjr),e(Qc,Ijr),e(Qc,ZZ),e(ZZ,Njr),e(Qc,qjr),e(Qt,jjr),M(e3,Qt,null),e(hr,Djr),e(hr,Or),M(m$,Or,null),e(Or,Gjr),e(Or,pCe),e(pCe,Ojr),e(Or,Vjr),e(Or,Tn),e(Tn,Xjr),e(Tn,_Ce),e(_Ce,zjr),e(Tn,Qjr),e(Tn,uCe),e(uCe,Wjr),e(Tn,Hjr),e(Tn,bCe),e(bCe,Ujr),e(Tn,Jjr),e(Or,Yjr),e(Or,vCe),e(vCe,o3),e(o3,FCe),e(FCe,Kjr),e(o3,Zjr),e(o3,eee),e(eee,eDr),e(o3,oDr),e(Or,rDr),M(r3,Or,null),b(f,Yze,u),b(f,Wc,u),e(Wc,t3),e(t3,TCe),M(g$,TCe,null),e(Wc,tDr),e(Wc,MCe),e(MCe,aDr),b(f,Kze,u),b(f,pr,u),M(h$,pr,null),e(pr,nDr),e(pr,Hc),e(Hc,sDr),e(Hc,oee),e(oee,lDr),e(Hc,iDr),e(Hc,ree),e(ree,dDr),e(Hc,cDr),e(pr,fDr),e(pr,p$),e(p$,mDr),e(p$,ECe),e(ECe,gDr),e(p$,hDr),e(pr,pDr),e(pr,Wt),M(_$,Wt,null),e(Wt,_Dr),e(Wt,CCe),e(CCe,uDr),e(Wt,bDr),e(Wt,Uc),e(Uc,vDr),e(Uc,wCe),e(wCe,FDr),e(Uc,TDr),e(Uc,tee),e(tee,MDr),e(Uc,EDr),e(Wt,CDr),M(a3,Wt,null),e(pr,wDr),e(pr,Vr),M(u$,Vr,null),e(Vr,ADr),e(Vr,ACe),e(ACe,LDr),e(Vr,yDr),e(Vr,Mn),e(Mn,xDr),e(Mn,LCe),e(LCe,$Dr),e(Mn,kDr),e(Mn,yCe),e(yCe,SDr),e(Mn,RDr),e(Mn,xCe),e(xCe,PDr),e(Mn,BDr),e(Vr,IDr),e(Vr,oe),e(oe,n3),e(n3,$Ce),e($Ce,NDr),e(n3,qDr),e(n3,aee),e(aee,jDr),e(n3,DDr),e(oe,GDr),e(oe,s3),e(s3,kCe),e(kCe,ODr),e(s3,VDr),e(s3,nee),e(nee,XDr),e(s3,zDr),e(oe,QDr),e(oe,l3),e(l3,SCe),e(SCe,WDr),e(l3,HDr),e(l3,see),e(see,UDr),e(l3,JDr),e(oe,YDr),e(oe,i3),e(i3,RCe),e(RCe,KDr),e(i3,ZDr),e(i3,lee),e(lee,eGr),e(i3,oGr),e(oe,rGr),e(oe,d3),e(d3,PCe),e(PCe,tGr),e(d3,aGr),e(d3,iee),e(iee,nGr),e(d3,sGr),e(oe,lGr),e(oe,c3),e(c3,BCe),e(BCe,iGr),e(c3,dGr),e(c3,dee),e(dee,cGr),e(c3,fGr),e(oe,mGr),e(oe,f3),e(f3,ICe),e(ICe,gGr),e(f3,hGr),e(f3,cee),e(cee,pGr),e(f3,_Gr),e(oe,uGr),e(oe,m3),e(m3,NCe),e(NCe,bGr),e(m3,vGr),e(m3,fee),e(fee,FGr),e(m3,TGr),e(oe,MGr),e(oe,g3),e(g3,qCe),e(qCe,EGr),e(g3,CGr),e(g3,mee),e(mee,wGr),e(g3,AGr),e(oe,LGr),e(oe,h3),e(h3,jCe),e(jCe,yGr),e(h3,xGr),e(h3,gee),e(gee,$Gr),e(h3,kGr),e(oe,SGr),e(oe,p3),e(p3,DCe),e(DCe,RGr),e(p3,PGr),e(p3,hee),e(hee,BGr),e(p3,IGr),e(oe,NGr),e(oe,_3),e(_3,GCe),e(GCe,qGr),e(_3,jGr),e(_3,pee),e(pee,DGr),e(_3,GGr),e(oe,OGr),e(oe,u3),e(u3,OCe),e(OCe,VGr),e(u3,XGr),e(u3,_ee),e(_ee,zGr),e(u3,QGr),e(oe,WGr),e(oe,b3),e(b3,VCe),e(VCe,HGr),e(b3,UGr),e(b3,uee),e(uee,JGr),e(b3,YGr),e(oe,KGr),e(oe,v3),e(v3,XCe),e(XCe,ZGr),e(v3,eOr),e(v3,bee),e(bee,oOr),e(v3,rOr),e(oe,tOr),e(oe,F3),e(F3,zCe),e(zCe,aOr),e(F3,nOr),e(F3,vee),e(vee,sOr),e(F3,lOr),e(oe,iOr),e(oe,T3),e(T3,QCe),e(QCe,dOr),e(T3,cOr),e(T3,Fee),e(Fee,fOr),e(T3,mOr),e(oe,gOr),e(oe,M3),e(M3,WCe),e(WCe,hOr),e(M3,pOr),e(M3,Tee),e(Tee,_Or),e(M3,uOr),e(oe,bOr),e(oe,E3),e(E3,HCe),e(HCe,vOr),e(E3,FOr),e(E3,Mee),e(Mee,TOr),e(E3,MOr),e(oe,EOr),e(oe,C3),e(C3,UCe),e(UCe,COr),e(C3,wOr),e(C3,Eee),e(Eee,AOr),e(C3,LOr),e(oe,yOr),e(oe,w3),e(w3,JCe),e(JCe,xOr),e(w3,$Or),e(w3,Cee),e(Cee,kOr),e(w3,SOr),e(oe,ROr),e(oe,A3),e(A3,YCe),e(YCe,POr),e(A3,BOr),e(A3,wee),e(wee,IOr),e(A3,NOr),e(oe,qOr),e(oe,L3),e(L3,KCe),e(KCe,jOr),e(L3,DOr),e(L3,Aee),e(Aee,GOr),e(L3,OOr),e(oe,VOr),e(oe,y3),e(y3,ZCe),e(ZCe,XOr),e(y3,zOr),e(y3,Lee),e(Lee,QOr),e(y3,WOr),e(oe,HOr),e(oe,x3),e(x3,e3e),e(e3e,UOr),e(x3,JOr),e(x3,yee),e(yee,YOr),e(x3,KOr),e(oe,ZOr),e(oe,$3),e($3,o3e),e(o3e,eVr),e($3,oVr),e($3,xee),e(xee,rVr),e($3,tVr),e(oe,aVr),e(oe,k3),e(k3,r3e),e(r3e,nVr),e(k3,sVr),e(k3,$ee),e($ee,lVr),e(k3,iVr),e(Vr,dVr),M(S3,Vr,null),b(f,Zze,u),b(f,Jc,u),e(Jc,R3),e(R3,t3e),M(b$,t3e,null),e(Jc,cVr),e(Jc,a3e),e(a3e,fVr),b(f,eQe,u),b(f,_r,u),M(v$,_r,null),e(_r,mVr),e(_r,Yc),e(Yc,gVr),e(Yc,kee),e(kee,hVr),e(Yc,pVr),e(Yc,See),e(See,_Vr),e(Yc,uVr),e(_r,bVr),e(_r,F$),e(F$,vVr),e(F$,n3e),e(n3e,FVr),e(F$,TVr),e(_r,MVr),e(_r,Ht),M(T$,Ht,null),e(Ht,EVr),e(Ht,s3e),e(s3e,CVr),e(Ht,wVr),e(Ht,Kc),e(Kc,AVr),e(Kc,l3e),e(l3e,LVr),e(Kc,yVr),e(Kc,Ree),e(Ree,xVr),e(Kc,$Vr),e(Ht,kVr),M(P3,Ht,null),e(_r,SVr),e(_r,Xr),M(M$,Xr,null),e(Xr,RVr),e(Xr,i3e),e(i3e,PVr),e(Xr,BVr),e(Xr,En),e(En,IVr),e(En,d3e),e(d3e,NVr),e(En,qVr),e(En,c3e),e(c3e,jVr),e(En,DVr),e(En,f3e),e(f3e,GVr),e(En,OVr),e(Xr,VVr),e(Xr,xe),e(xe,B3),e(B3,m3e),e(m3e,XVr),e(B3,zVr),e(B3,Pee),e(Pee,QVr),e(B3,WVr),e(xe,HVr),e(xe,I3),e(I3,g3e),e(g3e,UVr),e(I3,JVr),e(I3,Bee),e(Bee,YVr),e(I3,KVr),e(xe,ZVr),e(xe,N3),e(N3,h3e),e(h3e,eXr),e(N3,oXr),e(N3,Iee),e(Iee,rXr),e(N3,tXr),e(xe,aXr),e(xe,q3),e(q3,p3e),e(p3e,nXr),e(q3,sXr),e(q3,Nee),e(Nee,lXr),e(q3,iXr),e(xe,dXr),e(xe,j3),e(j3,_3e),e(_3e,cXr),e(j3,fXr),e(j3,qee),e(qee,mXr),e(j3,gXr),e(xe,hXr),e(xe,D3),e(D3,u3e),e(u3e,pXr),e(D3,_Xr),e(D3,jee),e(jee,uXr),e(D3,bXr),e(xe,vXr),e(xe,G3),e(G3,b3e),e(b3e,FXr),e(G3,TXr),e(G3,Dee),e(Dee,MXr),e(G3,EXr),e(xe,CXr),e(xe,O3),e(O3,v3e),e(v3e,wXr),e(O3,AXr),e(O3,Gee),e(Gee,LXr),e(O3,yXr),e(xe,xXr),e(xe,V3),e(V3,F3e),e(F3e,$Xr),e(V3,kXr),e(V3,Oee),e(Oee,SXr),e(V3,RXr),e(xe,PXr),e(xe,X3),e(X3,T3e),e(T3e,BXr),e(X3,IXr),e(X3,Vee),e(Vee,NXr),e(X3,qXr),e(Xr,jXr),M(z3,Xr,null),b(f,oQe,u),b(f,Zc,u),e(Zc,Q3),e(Q3,M3e),M(E$,M3e,null),e(Zc,DXr),e(Zc,E3e),e(E3e,GXr),b(f,rQe,u),b(f,ur,u),M(C$,ur,null),e(ur,OXr),e(ur,ef),e(ef,VXr),e(ef,Xee),e(Xee,XXr),e(ef,zXr),e(ef,zee),e(zee,QXr),e(ef,WXr),e(ur,HXr),e(ur,w$),e(w$,UXr),e(w$,C3e),e(C3e,JXr),e(w$,YXr),e(ur,KXr),e(ur,Ut),M(A$,Ut,null),e(Ut,ZXr),e(Ut,w3e),e(w3e,ezr),e(Ut,ozr),e(Ut,of),e(of,rzr),e(of,A3e),e(A3e,tzr),e(of,azr),e(of,Qee),e(Qee,nzr),e(of,szr),e(Ut,lzr),M(W3,Ut,null),e(ur,izr),e(ur,zr),M(L$,zr,null),e(zr,dzr),e(zr,L3e),e(L3e,czr),e(zr,fzr),e(zr,Cn),e(Cn,mzr),e(Cn,y3e),e(y3e,gzr),e(Cn,hzr),e(Cn,x3e),e(x3e,pzr),e(Cn,_zr),e(Cn,$3e),e($3e,uzr),e(Cn,bzr),e(zr,vzr),e(zr,Ee),e(Ee,H3),e(H3,k3e),e(k3e,Fzr),e(H3,Tzr),e(H3,Wee),e(Wee,Mzr),e(H3,Ezr),e(Ee,Czr),e(Ee,U3),e(U3,S3e),e(S3e,wzr),e(U3,Azr),e(U3,Hee),e(Hee,Lzr),e(U3,yzr),e(Ee,xzr),e(Ee,J3),e(J3,R3e),e(R3e,$zr),e(J3,kzr),e(J3,Uee),e(Uee,Szr),e(J3,Rzr),e(Ee,Pzr),e(Ee,Y3),e(Y3,P3e),e(P3e,Bzr),e(Y3,Izr),e(Y3,Jee),e(Jee,Nzr),e(Y3,qzr),e(Ee,jzr),e(Ee,K3),e(K3,B3e),e(B3e,Dzr),e(K3,Gzr),e(K3,Yee),e(Yee,Ozr),e(K3,Vzr),e(Ee,Xzr),e(Ee,Z3),e(Z3,I3e),e(I3e,zzr),e(Z3,Qzr),e(Z3,Kee),e(Kee,Wzr),e(Z3,Hzr),e(Ee,Uzr),e(Ee,e5),e(e5,N3e),e(N3e,Jzr),e(e5,Yzr),e(e5,Zee),e(Zee,Kzr),e(e5,Zzr),e(Ee,eQr),e(Ee,o5),e(o5,q3e),e(q3e,oQr),e(o5,rQr),e(o5,eoe),e(eoe,tQr),e(o5,aQr),e(Ee,nQr),e(Ee,r5),e(r5,j3e),e(j3e,sQr),e(r5,lQr),e(r5,ooe),e(ooe,iQr),e(r5,dQr),e(Ee,cQr),e(Ee,t5),e(t5,D3e),e(D3e,fQr),e(t5,mQr),e(t5,roe),e(roe,gQr),e(t5,hQr),e(Ee,pQr),e(Ee,a5),e(a5,G3e),e(G3e,_Qr),e(a5,uQr),e(a5,toe),e(toe,bQr),e(a5,vQr),e(Ee,FQr),e(Ee,n5),e(n5,O3e),e(O3e,TQr),e(n5,MQr),e(n5,aoe),e(aoe,EQr),e(n5,CQr),e(Ee,wQr),e(Ee,s5),e(s5,V3e),e(V3e,AQr),e(s5,LQr),e(s5,noe),e(noe,yQr),e(s5,xQr),e(zr,$Qr),M(l5,zr,null),b(f,tQe,u),b(f,rf,u),e(rf,i5),e(i5,X3e),M(y$,X3e,null),e(rf,kQr),e(rf,z3e),e(z3e,SQr),b(f,aQe,u),b(f,br,u),M(x$,br,null),e(br,RQr),e(br,tf),e(tf,PQr),e(tf,soe),e(soe,BQr),e(tf,IQr),e(tf,loe),e(loe,NQr),e(tf,qQr),e(br,jQr),e(br,$$),e($$,DQr),e($$,Q3e),e(Q3e,GQr),e($$,OQr),e(br,VQr),e(br,Jt),M(k$,Jt,null),e(Jt,XQr),e(Jt,W3e),e(W3e,zQr),e(Jt,QQr),e(Jt,af),e(af,WQr),e(af,H3e),e(H3e,HQr),e(af,UQr),e(af,ioe),e(ioe,JQr),e(af,YQr),e(Jt,KQr),M(d5,Jt,null),e(br,ZQr),e(br,Qr),M(S$,Qr,null),e(Qr,eWr),e(Qr,U3e),e(U3e,oWr),e(Qr,rWr),e(Qr,wn),e(wn,tWr),e(wn,J3e),e(J3e,aWr),e(wn,nWr),e(wn,Y3e),e(Y3e,sWr),e(wn,lWr),e(wn,K3e),e(K3e,iWr),e(wn,dWr),e(Qr,cWr),e(Qr,$e),e($e,c5),e(c5,Z3e),e(Z3e,fWr),e(c5,mWr),e(c5,doe),e(doe,gWr),e(c5,hWr),e($e,pWr),e($e,f5),e(f5,e5e),e(e5e,_Wr),e(f5,uWr),e(f5,coe),e(coe,bWr),e(f5,vWr),e($e,FWr),e($e,m5),e(m5,o5e),e(o5e,TWr),e(m5,MWr),e(m5,foe),e(foe,EWr),e(m5,CWr),e($e,wWr),e($e,g5),e(g5,r5e),e(r5e,AWr),e(g5,LWr),e(g5,moe),e(moe,yWr),e(g5,xWr),e($e,$Wr),e($e,h5),e(h5,t5e),e(t5e,kWr),e(h5,SWr),e(h5,goe),e(goe,RWr),e(h5,PWr),e($e,BWr),e($e,p5),e(p5,a5e),e(a5e,IWr),e(p5,NWr),e(p5,hoe),e(hoe,qWr),e(p5,jWr),e($e,DWr),e($e,_5),e(_5,n5e),e(n5e,GWr),e(_5,OWr),e(_5,poe),e(poe,VWr),e(_5,XWr),e($e,zWr),e($e,u5),e(u5,s5e),e(s5e,QWr),e(u5,WWr),e(u5,_oe),e(_oe,HWr),e(u5,UWr),e($e,JWr),e($e,b5),e(b5,l5e),e(l5e,YWr),e(b5,KWr),e(b5,uoe),e(uoe,ZWr),e(b5,eHr),e($e,oHr),e($e,v5),e(v5,i5e),e(i5e,rHr),e(v5,tHr),e(v5,boe),e(boe,aHr),e(v5,nHr),e(Qr,sHr),M(F5,Qr,null),b(f,nQe,u),b(f,nf,u),e(nf,T5),e(T5,d5e),M(R$,d5e,null),e(nf,lHr),e(nf,c5e),e(c5e,iHr),b(f,sQe,u),b(f,vr,u),M(P$,vr,null),e(vr,dHr),e(vr,sf),e(sf,cHr),e(sf,voe),e(voe,fHr),e(sf,mHr),e(sf,Foe),e(Foe,gHr),e(sf,hHr),e(vr,pHr),e(vr,B$),e(B$,_Hr),e(B$,f5e),e(f5e,uHr),e(B$,bHr),e(vr,vHr),e(vr,Yt),M(I$,Yt,null),e(Yt,FHr),e(Yt,m5e),e(m5e,THr),e(Yt,MHr),e(Yt,lf),e(lf,EHr),e(lf,g5e),e(g5e,CHr),e(lf,wHr),e(lf,Toe),e(Toe,AHr),e(lf,LHr),e(Yt,yHr),M(M5,Yt,null),e(vr,xHr),e(vr,Wr),M(N$,Wr,null),e(Wr,$Hr),e(Wr,h5e),e(h5e,kHr),e(Wr,SHr),e(Wr,An),e(An,RHr),e(An,p5e),e(p5e,PHr),e(An,BHr),e(An,_5e),e(_5e,IHr),e(An,NHr),e(An,u5e),e(u5e,qHr),e(An,jHr),e(Wr,DHr),e(Wr,ke),e(ke,E5),e(E5,b5e),e(b5e,GHr),e(E5,OHr),e(E5,Moe),e(Moe,VHr),e(E5,XHr),e(ke,zHr),e(ke,C5),e(C5,v5e),e(v5e,QHr),e(C5,WHr),e(C5,Eoe),e(Eoe,HHr),e(C5,UHr),e(ke,JHr),e(ke,w5),e(w5,F5e),e(F5e,YHr),e(w5,KHr),e(w5,Coe),e(Coe,ZHr),e(w5,eUr),e(ke,oUr),e(ke,A5),e(A5,T5e),e(T5e,rUr),e(A5,tUr),e(A5,woe),e(woe,aUr),e(A5,nUr),e(ke,sUr),e(ke,L5),e(L5,M5e),e(M5e,lUr),e(L5,iUr),e(L5,Aoe),e(Aoe,dUr),e(L5,cUr),e(ke,fUr),e(ke,y5),e(y5,E5e),e(E5e,mUr),e(y5,gUr),e(y5,Loe),e(Loe,hUr),e(y5,pUr),e(ke,_Ur),e(ke,x5),e(x5,C5e),e(C5e,uUr),e(x5,bUr),e(x5,yoe),e(yoe,vUr),e(x5,FUr),e(ke,TUr),e(ke,$5),e($5,w5e),e(w5e,MUr),e($5,EUr),e($5,xoe),e(xoe,CUr),e($5,wUr),e(ke,AUr),e(ke,k5),e(k5,A5e),e(A5e,LUr),e(k5,yUr),e(k5,$oe),e($oe,xUr),e(k5,$Ur),e(ke,kUr),e(ke,S5),e(S5,L5e),e(L5e,SUr),e(S5,RUr),e(S5,koe),e(koe,PUr),e(S5,BUr),e(Wr,IUr),M(R5,Wr,null),b(f,lQe,u),b(f,df,u),e(df,P5),e(P5,y5e),M(q$,y5e,null),e(df,NUr),e(df,x5e),e(x5e,qUr),b(f,iQe,u),b(f,Fr,u),M(j$,Fr,null),e(Fr,jUr),e(Fr,cf),e(cf,DUr),e(cf,Soe),e(Soe,GUr),e(cf,OUr),e(cf,Roe),e(Roe,VUr),e(cf,XUr),e(Fr,zUr),e(Fr,D$),e(D$,QUr),e(D$,$5e),e($5e,WUr),e(D$,HUr),e(Fr,UUr),e(Fr,Kt),M(G$,Kt,null),e(Kt,JUr),e(Kt,k5e),e(k5e,YUr),e(Kt,KUr),e(Kt,ff),e(ff,ZUr),e(ff,S5e),e(S5e,eJr),e(ff,oJr),e(ff,Poe),e(Poe,rJr),e(ff,tJr),e(Kt,aJr),M(B5,Kt,null),e(Fr,nJr),e(Fr,Hr),M(O$,Hr,null),e(Hr,sJr),e(Hr,R5e),e(R5e,lJr),e(Hr,iJr),e(Hr,Ln),e(Ln,dJr),e(Ln,P5e),e(P5e,cJr),e(Ln,fJr),e(Ln,B5e),e(B5e,mJr),e(Ln,gJr),e(Ln,I5e),e(I5e,hJr),e(Ln,pJr),e(Hr,_Jr),e(Hr,Se),e(Se,I5),e(I5,N5e),e(N5e,uJr),e(I5,bJr),e(I5,Boe),e(Boe,vJr),e(I5,FJr),e(Se,TJr),e(Se,N5),e(N5,q5e),e(q5e,MJr),e(N5,EJr),e(N5,Ioe),e(Ioe,CJr),e(N5,wJr),e(Se,AJr),e(Se,q5),e(q5,j5e),e(j5e,LJr),e(q5,yJr),e(q5,Noe),e(Noe,xJr),e(q5,$Jr),e(Se,kJr),e(Se,j5),e(j5,D5e),e(D5e,SJr),e(j5,RJr),e(j5,qoe),e(qoe,PJr),e(j5,BJr),e(Se,IJr),e(Se,D5),e(D5,G5e),e(G5e,NJr),e(D5,qJr),e(D5,joe),e(joe,jJr),e(D5,DJr),e(Se,GJr),e(Se,G5),e(G5,O5e),e(O5e,OJr),e(G5,VJr),e(G5,Doe),e(Doe,XJr),e(G5,zJr),e(Se,QJr),e(Se,O5),e(O5,V5e),e(V5e,WJr),e(O5,HJr),e(O5,Goe),e(Goe,UJr),e(O5,JJr),e(Se,YJr),e(Se,V5),e(V5,X5e),e(X5e,KJr),e(V5,ZJr),e(V5,Ooe),e(Ooe,eYr),e(V5,oYr),e(Se,rYr),e(Se,X5),e(X5,z5e),e(z5e,tYr),e(X5,aYr),e(X5,Voe),e(Voe,nYr),e(X5,sYr),e(Se,lYr),e(Se,z5),e(z5,Q5e),e(Q5e,iYr),e(z5,dYr),e(z5,Xoe),e(Xoe,cYr),e(z5,fYr),e(Hr,mYr),M(Q5,Hr,null),b(f,dQe,u),b(f,mf,u),e(mf,W5),e(W5,W5e),M(V$,W5e,null),e(mf,gYr),e(mf,H5e),e(H5e,hYr),b(f,cQe,u),b(f,Tr,u),M(X$,Tr,null),e(Tr,pYr),e(Tr,gf),e(gf,_Yr),e(gf,zoe),e(zoe,uYr),e(gf,bYr),e(gf,Qoe),e(Qoe,vYr),e(gf,FYr),e(Tr,TYr),e(Tr,z$),e(z$,MYr),e(z$,U5e),e(U5e,EYr),e(z$,CYr),e(Tr,wYr),e(Tr,Zt),M(Q$,Zt,null),e(Zt,AYr),e(Zt,J5e),e(J5e,LYr),e(Zt,yYr),e(Zt,hf),e(hf,xYr),e(hf,Y5e),e(Y5e,$Yr),e(hf,kYr),e(hf,Woe),e(Woe,SYr),e(hf,RYr),e(Zt,PYr),M(H5,Zt,null),e(Tr,BYr),e(Tr,Ur),M(W$,Ur,null),e(Ur,IYr),e(Ur,K5e),e(K5e,NYr),e(Ur,qYr),e(Ur,yn),e(yn,jYr),e(yn,Z5e),e(Z5e,DYr),e(yn,GYr),e(yn,e0e),e(e0e,OYr),e(yn,VYr),e(yn,o0e),e(o0e,XYr),e(yn,zYr),e(Ur,QYr),e(Ur,Re),e(Re,U5),e(U5,r0e),e(r0e,WYr),e(U5,HYr),e(U5,Hoe),e(Hoe,UYr),e(U5,JYr),e(Re,YYr),e(Re,J5),e(J5,t0e),e(t0e,KYr),e(J5,ZYr),e(J5,Uoe),e(Uoe,eKr),e(J5,oKr),e(Re,rKr),e(Re,Y5),e(Y5,a0e),e(a0e,tKr),e(Y5,aKr),e(Y5,Joe),e(Joe,nKr),e(Y5,sKr),e(Re,lKr),e(Re,K5),e(K5,n0e),e(n0e,iKr),e(K5,dKr),e(K5,Yoe),e(Yoe,cKr),e(K5,fKr),e(Re,mKr),e(Re,Z5),e(Z5,s0e),e(s0e,gKr),e(Z5,hKr),e(Z5,Koe),e(Koe,pKr),e(Z5,_Kr),e(Re,uKr),e(Re,e0),e(e0,l0e),e(l0e,bKr),e(e0,vKr),e(e0,Zoe),e(Zoe,FKr),e(e0,TKr),e(Re,MKr),e(Re,o0),e(o0,i0e),e(i0e,EKr),e(o0,CKr),e(o0,ere),e(ere,wKr),e(o0,AKr),e(Re,LKr),e(Re,r0),e(r0,d0e),e(d0e,yKr),e(r0,xKr),e(r0,ore),e(ore,$Kr),e(r0,kKr),e(Re,SKr),e(Re,t0),e(t0,c0e),e(c0e,RKr),e(t0,PKr),e(t0,rre),e(rre,BKr),e(t0,IKr),e(Re,NKr),e(Re,a0),e(a0,f0e),e(f0e,qKr),e(a0,jKr),e(a0,tre),e(tre,DKr),e(a0,GKr),e(Ur,OKr),M(n0,Ur,null),b(f,fQe,u),b(f,pf,u),e(pf,s0),e(s0,m0e),M(H$,m0e,null),e(pf,VKr),e(pf,g0e),e(g0e,XKr),b(f,mQe,u),b(f,Mr,u),M(U$,Mr,null),e(Mr,zKr),e(Mr,_f),e(_f,QKr),e(_f,are),e(are,WKr),e(_f,HKr),e(_f,nre),e(nre,UKr),e(_f,JKr),e(Mr,YKr),e(Mr,J$),e(J$,KKr),e(J$,h0e),e(h0e,ZKr),e(J$,eZr),e(Mr,oZr),e(Mr,ea),M(Y$,ea,null),e(ea,rZr),e(ea,p0e),e(p0e,tZr),e(ea,aZr),e(ea,uf),e(uf,nZr),e(uf,_0e),e(_0e,sZr),e(uf,lZr),e(uf,sre),e(sre,iZr),e(uf,dZr),e(ea,cZr),M(l0,ea,null),e(Mr,fZr),e(Mr,Jr),M(K$,Jr,null),e(Jr,mZr),e(Jr,u0e),e(u0e,gZr),e(Jr,hZr),e(Jr,xn),e(xn,pZr),e(xn,b0e),e(b0e,_Zr),e(xn,uZr),e(xn,v0e),e(v0e,bZr),e(xn,vZr),e(xn,F0e),e(F0e,FZr),e(xn,TZr),e(Jr,MZr),e(Jr,Ve),e(Ve,i0),e(i0,T0e),e(T0e,EZr),e(i0,CZr),e(i0,lre),e(lre,wZr),e(i0,AZr),e(Ve,LZr),e(Ve,d0),e(d0,M0e),e(M0e,yZr),e(d0,xZr),e(d0,ire),e(ire,$Zr),e(d0,kZr),e(Ve,SZr),e(Ve,c0),e(c0,E0e),e(E0e,RZr),e(c0,PZr),e(c0,dre),e(dre,BZr),e(c0,IZr),e(Ve,NZr),e(Ve,f0),e(f0,C0e),e(C0e,qZr),e(f0,jZr),e(f0,cre),e(cre,DZr),e(f0,GZr),e(Ve,OZr),e(Ve,m0),e(m0,w0e),e(w0e,VZr),e(m0,XZr),e(m0,fre),e(fre,zZr),e(m0,QZr),e(Ve,WZr),e(Ve,g0),e(g0,A0e),e(A0e,HZr),e(g0,UZr),e(g0,mre),e(mre,JZr),e(g0,YZr),e(Ve,KZr),e(Ve,h0),e(h0,L0e),e(L0e,ZZr),e(h0,eet),e(h0,gre),e(gre,oet),e(h0,ret),e(Ve,tet),e(Ve,p0),e(p0,y0e),e(y0e,aet),e(p0,net),e(p0,hre),e(hre,set),e(p0,iet),e(Jr,det),M(_0,Jr,null),b(f,gQe,u),b(f,bf,u),e(bf,u0),e(u0,x0e),M(Z$,x0e,null),e(bf,cet),e(bf,$0e),e($0e,fet),b(f,hQe,u),b(f,Er,u),M(ek,Er,null),e(Er,met),e(Er,vf),e(vf,get),e(vf,pre),e(pre,het),e(vf,pet),e(vf,_re),e(_re,_et),e(vf,uet),e(Er,bet),e(Er,ok),e(ok,vet),e(ok,k0e),e(k0e,Fet),e(ok,Tet),e(Er,Met),e(Er,oa),M(rk,oa,null),e(oa,Eet),e(oa,S0e),e(S0e,Cet),e(oa,wet),e(oa,Ff),e(Ff,Aet),e(Ff,R0e),e(R0e,Let),e(Ff,yet),e(Ff,ure),e(ure,xet),e(Ff,$et),e(oa,ket),M(b0,oa,null),e(Er,Set),e(Er,Yr),M(tk,Yr,null),e(Yr,Ret),e(Yr,P0e),e(P0e,Pet),e(Yr,Bet),e(Yr,$n),e($n,Iet),e($n,B0e),e(B0e,Net),e($n,qet),e($n,I0e),e(I0e,jet),e($n,Det),e($n,N0e),e(N0e,Get),e($n,Oet),e(Yr,Vet),e(Yr,Xe),e(Xe,v0),e(v0,q0e),e(q0e,Xet),e(v0,zet),e(v0,bre),e(bre,Qet),e(v0,Wet),e(Xe,Het),e(Xe,F0),e(F0,j0e),e(j0e,Uet),e(F0,Jet),e(F0,vre),e(vre,Yet),e(F0,Ket),e(Xe,Zet),e(Xe,T0),e(T0,D0e),e(D0e,eot),e(T0,oot),e(T0,Fre),e(Fre,rot),e(T0,tot),e(Xe,aot),e(Xe,M0),e(M0,G0e),e(G0e,not),e(M0,sot),e(M0,Tre),e(Tre,lot),e(M0,iot),e(Xe,dot),e(Xe,E0),e(E0,O0e),e(O0e,cot),e(E0,fot),e(E0,Mre),e(Mre,mot),e(E0,got),e(Xe,hot),e(Xe,C0),e(C0,V0e),e(V0e,pot),e(C0,_ot),e(C0,Ere),e(Ere,uot),e(C0,bot),e(Xe,vot),e(Xe,w0),e(w0,X0e),e(X0e,Fot),e(w0,Tot),e(w0,Cre),e(Cre,Mot),e(w0,Eot),e(Xe,Cot),e(Xe,A0),e(A0,z0e),e(z0e,wot),e(A0,Aot),e(A0,wre),e(wre,Lot),e(A0,yot),e(Yr,xot),M(L0,Yr,null),b(f,pQe,u),b(f,Tf,u),e(Tf,y0),e(y0,Q0e),M(ak,Q0e,null),e(Tf,$ot),e(Tf,W0e),e(W0e,kot),b(f,_Qe,u),b(f,Cr,u),M(nk,Cr,null),e(Cr,Sot),e(Cr,Mf),e(Mf,Rot),e(Mf,Are),e(Are,Pot),e(Mf,Bot),e(Mf,Lre),e(Lre,Iot),e(Mf,Not),e(Cr,qot),e(Cr,sk),e(sk,jot),e(sk,H0e),e(H0e,Dot),e(sk,Got),e(Cr,Oot),e(Cr,ra),M(lk,ra,null),e(ra,Vot),e(ra,U0e),e(U0e,Xot),e(ra,zot),e(ra,Ef),e(Ef,Qot),e(Ef,J0e),e(J0e,Wot),e(Ef,Hot),e(Ef,yre),e(yre,Uot),e(Ef,Jot),e(ra,Yot),M(x0,ra,null),e(Cr,Kot),e(Cr,Kr),M(ik,Kr,null),e(Kr,Zot),e(Kr,Y0e),e(Y0e,ert),e(Kr,ort),e(Kr,kn),e(kn,rrt),e(kn,K0e),e(K0e,trt),e(kn,art),e(kn,Z0e),e(Z0e,nrt),e(kn,srt),e(kn,ewe),e(ewe,lrt),e(kn,irt),e(Kr,drt),e(Kr,owe),e(owe,$0),e($0,rwe),e(rwe,crt),e($0,frt),e($0,xre),e(xre,mrt),e($0,grt),e(Kr,hrt),M(k0,Kr,null),b(f,uQe,u),b(f,Cf,u),e(Cf,S0),e(S0,twe),M(dk,twe,null),e(Cf,prt),e(Cf,awe),e(awe,_rt),b(f,bQe,u),b(f,wr,u),M(ck,wr,null),e(wr,urt),e(wr,wf),e(wf,brt),e(wf,$re),e($re,vrt),e(wf,Frt),e(wf,kre),e(kre,Trt),e(wf,Mrt),e(wr,Ert),e(wr,fk),e(fk,Crt),e(fk,nwe),e(nwe,wrt),e(fk,Art),e(wr,Lrt),e(wr,ta),M(mk,ta,null),e(ta,yrt),e(ta,swe),e(swe,xrt),e(ta,$rt),e(ta,Af),e(Af,krt),e(Af,lwe),e(lwe,Srt),e(Af,Rrt),e(Af,Sre),e(Sre,Prt),e(Af,Brt),e(ta,Irt),M(R0,ta,null),e(wr,Nrt),e(wr,Zr),M(gk,Zr,null),e(Zr,qrt),e(Zr,iwe),e(iwe,jrt),e(Zr,Drt),e(Zr,Sn),e(Sn,Grt),e(Sn,dwe),e(dwe,Ort),e(Sn,Vrt),e(Sn,cwe),e(cwe,Xrt),e(Sn,zrt),e(Sn,fwe),e(fwe,Qrt),e(Sn,Wrt),e(Zr,Hrt),e(Zr,hk),e(hk,P0),e(P0,mwe),e(mwe,Urt),e(P0,Jrt),e(P0,Rre),e(Rre,Yrt),e(P0,Krt),e(hk,Zrt),e(hk,B0),e(B0,gwe),e(gwe,ett),e(B0,ott),e(B0,Pre),e(Pre,rtt),e(B0,ttt),e(Zr,att),M(I0,Zr,null),b(f,vQe,u),b(f,Lf,u),e(Lf,N0),e(N0,hwe),M(pk,hwe,null),e(Lf,ntt),e(Lf,pwe),e(pwe,stt),b(f,FQe,u),b(f,Ar,u),M(_k,Ar,null),e(Ar,ltt),e(Ar,yf),e(yf,itt),e(yf,Bre),e(Bre,dtt),e(yf,ctt),e(yf,Ire),e(Ire,ftt),e(yf,mtt),e(Ar,gtt),e(Ar,uk),e(uk,htt),e(uk,_we),e(_we,ptt),e(uk,_tt),e(Ar,utt),e(Ar,aa),M(bk,aa,null),e(aa,btt),e(aa,uwe),e(uwe,vtt),e(aa,Ftt),e(aa,xf),e(xf,Ttt),e(xf,bwe),e(bwe,Mtt),e(xf,Ett),e(xf,Nre),e(Nre,Ctt),e(xf,wtt),e(aa,Att),M(q0,aa,null),e(Ar,Ltt),e(Ar,et),M(vk,et,null),e(et,ytt),e(et,vwe),e(vwe,xtt),e(et,$tt),e(et,Rn),e(Rn,ktt),e(Rn,Fwe),e(Fwe,Stt),e(Rn,Rtt),e(Rn,Twe),e(Twe,Ptt),e(Rn,Btt),e(Rn,Mwe),e(Mwe,Itt),e(Rn,Ntt),e(et,qtt),e(et,Ewe),e(Ewe,j0),e(j0,Cwe),e(Cwe,jtt),e(j0,Dtt),e(j0,qre),e(qre,Gtt),e(j0,Ott),e(et,Vtt),M(D0,et,null),TQe=!0},p(f,[u]){const Fk={};u&2&&(Fk.$$scope={dirty:u,ctx:f}),qf.$set(Fk);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),Yg.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),Rh.$set(Awe);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),up.$set(Lwe);const Tk={};u&2&&(Tk.$$scope={dirty:u,ctx:f}),bp.$set(Tk);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),jp.$set(ywe);const Pn={};u&2&&(Pn.$$scope={dirty:u,ctx:f}),Dp.$set(Pn);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),Vp.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),Hu.$set($we);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),Ju.$set(kwe);const Mk={};u&2&&(Mk.$$scope={dirty:u,ctx:f}),V1.$set(Mk);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),z1.$set(Swe);const Ek={};u&2&&(Ek.$$scope={dirty:u,ctx:f}),R2.$set(Ek);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),B2.$set(Rwe);const Ck={};u&2&&(Ck.$$scope={dirty:u,ctx:f}),T4.$set(Ck);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),E4.$set(Pwe);const Bwe={};u&2&&(Bwe.$$scope={dirty:u,ctx:f}),V4.$set(Bwe);const Iwe={};u&2&&(Iwe.$$scope={dirty:u,ctx:f}),z4.$set(Iwe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Vb.$set($f);const Nwe={};u&2&&(Nwe.$$scope={dirty:u,ctx:f}),zb.$set(Nwe);const qwe={};u&2&&(qwe.$$scope={dirty:u,ctx:f}),Ev.$set(qwe);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),wv.$set(jwe);const wk={};u&2&&(wk.$$scope={dirty:u,ctx:f}),Rv.$set(wk);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),Bv.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),vF.$set(Gwe);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),TF.$set(Owe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),f6.$set(nt);const Ak={};u&2&&(Ak.$$scope={dirty:u,ctx:f}),g6.$set(Ak);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),_6.$set(Vwe);const Lk={};u&2&&(Lk.$$scope={dirty:u,ctx:f}),b6.$set(Lk);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),P6.$set(Xwe);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),I6.$set(st);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),j6.$set(zwe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),G6.$set(kf);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),X6.$set(Qwe);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),Q6.$set(Wwe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),tT.$set(L);const G0={};u&2&&(G0.$$scope={dirty:u,ctx:f}),nT.$set(G0);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),mT.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),hT.$set(Uwe);const O0={};u&2&&(O0.$$scope={dirty:u,ctx:f}),AT.$set(O0);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),yT.$set(Jwe);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),ST.$set(Ywe);const V0={};u&2&&(V0.$$scope={dirty:u,ctx:f}),PT.$set(V0);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),GT.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),VT.$set(Zwe);const X0={};u&2&&(X0.$$scope={dirty:u,ctx:f}),UT.$set(X0);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),YT.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),o7.$set(oAe);const z0={};u&2&&(z0.$$scope={dirty:u,ctx:f}),t7.$set(z0);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),s7.$set(rAe);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),i7.$set(tAe);const Q0={};u&2&&(Q0.$$scope={dirty:u,ctx:f}),p7.$set(Q0);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),u7.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),F7.$set(nAe);const W0={};u&2&&(W0.$$scope={dirty:u,ctx:f}),M7.$set(W0);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),b9.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),F9.$set(lAe);const H0={};u&2&&(H0.$$scope={dirty:u,ctx:f}),X9.$set(H0);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),Q9.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),sM.$set(dAe);const U0={};u&2&&(U0.$$scope={dirty:u,ctx:f}),iM.$set(U0);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),_M.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),bM.$set(fAe);const J0={};u&2&&(J0.$$scope={dirty:u,ctx:f}),jM.$set(J0);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),GM.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),KM.$set(gAe);const Y0={};u&2&&(Y0.$$scope={dirty:u,ctx:f}),eE.$set(Y0);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),LE.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),xE.$set(pAe);const K0={};u&2&&(K0.$$scope={dirty:u,ctx:f}),WE.$set(K0);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),UE.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),KE.$set(uAe);const Z0={};u&2&&(Z0.$$scope={dirty:u,ctx:f}),eC.$set(Z0);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),rC.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),aC.$set(vAe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),wC.$set(ew);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),LC.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),HC.$set(TAe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),JC.$set(ow);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),KC.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),e3.$set(EAe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),r3.$set(rw);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),a3.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),S3.$set(wAe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),P3.$set(tw);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),z3.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),W3.$set(LAe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),l5.$set(aw);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),d5.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),F5.$set(xAe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),M5.$set(nw);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),R5.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),B5.$set(kAe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),Q5.$set(sw);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),H5.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),n0.$set(RAe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),l0.$set(lw);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),_0.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),b0.$set(BAe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),L0.$set(iw);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),x0.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),k0.$set(NAe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),R0.$set(dw);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),I0.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),q0.$set(jAe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),D0.$set(cw)},i(f){TQe||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(qf.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(_L.$$.fragment,f),E(Yg.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(ML.$$.fragment,f),E(Rh.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(up.$$.fragment,f),E(bp.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(PL.$$.fragment,f),E(jp.$$.fragment,f),E(Dp.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(Vp.$$.fragment,f),E(DL.$$.fragment,f),E(Hu.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(Ju.$$.fragment,f),E(zL.$$.fragment,f),E(V1.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(z1.$$.fragment,f),E(JL.$$.fragment,f),E(R2.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(B2.$$.fragment,f),E(oy.$$.fragment,f),E(T4.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(E4.$$.fragment,f),E(sy.$$.fragment,f),E(V4.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(z4.$$.fragment,f),E(fy.$$.fragment,f),E(Vb.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(zb.$$.fragment,f),E(_y.$$.fragment,f),E(Ev.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(wv.$$.fragment,f),E(Ty.$$.fragment,f),E(Rv.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(Bv.$$.fragment,f),E(Ay.$$.fragment,f),E(vF.$$.fragment,f),E(Ly.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(TF.$$.fragment,f),E(ky.$$.fragment,f),E(f6.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(g6.$$.fragment,f),E(Iy.$$.fragment,f),E(_6.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(Dy.$$.fragment,f),E(b6.$$.fragment,f),E(Gy.$$.fragment,f),E(P6.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(I6.$$.fragment,f),E(Qy.$$.fragment,f),E(j6.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(G6.$$.fragment,f),E(Yy.$$.fragment,f),E(X6.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o8.$$.fragment,f),E(Q6.$$.fragment,f),E(r8.$$.fragment,f),E(tT.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(nT.$$.fragment,f),E(l8.$$.fragment,f),E(mT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(hT.$$.fragment,f),E(m8.$$.fragment,f),E(AT.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(yT.$$.fragment,f),E(u8.$$.fragment,f),E(ST.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(PT.$$.fragment,f),E(E8.$$.fragment,f),E(GT.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(L8.$$.fragment,f),E(VT.$$.fragment,f),E(y8.$$.fragment,f),E(UT.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(YT.$$.fragment,f),E(R8.$$.fragment,f),E(o7.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(t7.$$.fragment,f),E(j8.$$.fragment,f),E(s7.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(i7.$$.fragment,f),E(X8.$$.fragment,f),E(p7.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(u7.$$.fragment,f),E(U8.$$.fragment,f),E(F7.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(M7.$$.fragment,f),E(ex.$$.fragment,f),E(b9.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(F9.$$.fragment,f),E(nx.$$.fragment,f),E(X9.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(Q9.$$.fragment,f),E(cx.$$.fragment,f),E(sM.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(iM.$$.fragment,f),E(px.$$.fragment,f),E(_M.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(bM.$$.fragment,f),E(Fx.$$.fragment,f),E(jM.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(GM.$$.fragment,f),E(wx.$$.fragment,f),E(KM.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(eE.$$.fragment,f),E($x.$$.fragment,f),E(LE.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(xE.$$.fragment,f),E(Bx.$$.fragment,f),E(WE.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(UE.$$.fragment,f),E(Dx.$$.fragment,f),E(KE.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(eC.$$.fragment,f),E(Qx.$$.fragment,f),E(rC.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(aC.$$.fragment,f),E(Yx.$$.fragment,f),E(wC.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(LC.$$.fragment,f),E(r$.$$.fragment,f),E(HC.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(JC.$$.fragment,f),E(l$.$$.fragment,f),E(KC.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(e3.$$.fragment,f),E(m$.$$.fragment,f),E(r3.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(a3.$$.fragment,f),E(u$.$$.fragment,f),E(S3.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(P3.$$.fragment,f),E(M$.$$.fragment,f),E(z3.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(W3.$$.fragment,f),E(L$.$$.fragment,f),E(l5.$$.fragment,f),E(y$.$$.fragment,f),E(x$.$$.fragment,f),E(k$.$$.fragment,f),E(d5.$$.fragment,f),E(S$.$$.fragment,f),E(F5.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(M5.$$.fragment,f),E(N$.$$.fragment,f),E(R5.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(B5.$$.fragment,f),E(O$.$$.fragment,f),E(Q5.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(Q$.$$.fragment,f),E(H5.$$.fragment,f),E(W$.$$.fragment,f),E(n0.$$.fragment,f),E(H$.$$.fragment,f),E(U$.$$.fragment,f),E(Y$.$$.fragment,f),E(l0.$$.fragment,f),E(K$.$$.fragment,f),E(_0.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(b0.$$.fragment,f),E(tk.$$.fragment,f),E(L0.$$.fragment,f),E(ak.$$.fragment,f),E(nk.$$.fragment,f),E(lk.$$.fragment,f),E(x0.$$.fragment,f),E(ik.$$.fragment,f),E(k0.$$.fragment,f),E(dk.$$.fragment,f),E(ck.$$.fragment,f),E(mk.$$.fragment,f),E(R0.$$.fragment,f),E(gk.$$.fragment,f),E(I0.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(q0.$$.fragment,f),E(vk.$$.fragment,f),E(D0.$$.fragment,f),TQe=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(qf.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(_L.$$.fragment,f),C(Yg.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(ML.$$.fragment,f),C(Rh.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(up.$$.fragment,f),C(bp.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(PL.$$.fragment,f),C(jp.$$.fragment,f),C(Dp.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(Vp.$$.fragment,f),C(DL.$$.fragment,f),C(Hu.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(Ju.$$.fragment,f),C(zL.$$.fragment,f),C(V1.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(z1.$$.fragment,f),C(JL.$$.fragment,f),C(R2.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(B2.$$.fragment,f),C(oy.$$.fragment,f),C(T4.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(E4.$$.fragment,f),C(sy.$$.fragment,f),C(V4.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(z4.$$.fragment,f),C(fy.$$.fragment,f),C(Vb.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(zb.$$.fragment,f),C(_y.$$.fragment,f),C(Ev.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(wv.$$.fragment,f),C(Ty.$$.fragment,f),C(Rv.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(Bv.$$.fragment,f),C(Ay.$$.fragment,f),C(vF.$$.fragment,f),C(Ly.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(TF.$$.fragment,f),C(ky.$$.fragment,f),C(f6.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(g6.$$.fragment,f),C(Iy.$$.fragment,f),C(_6.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(Dy.$$.fragment,f),C(b6.$$.fragment,f),C(Gy.$$.fragment,f),C(P6.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(I6.$$.fragment,f),C(Qy.$$.fragment,f),C(j6.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(G6.$$.fragment,f),C(Yy.$$.fragment,f),C(X6.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o8.$$.fragment,f),C(Q6.$$.fragment,f),C(r8.$$.fragment,f),C(tT.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(nT.$$.fragment,f),C(l8.$$.fragment,f),C(mT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(hT.$$.fragment,f),C(m8.$$.fragment,f),C(AT.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(yT.$$.fragment,f),C(u8.$$.fragment,f),C(ST.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(PT.$$.fragment,f),C(E8.$$.fragment,f),C(GT.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(L8.$$.fragment,f),C(VT.$$.fragment,f),C(y8.$$.fragment,f),C(UT.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(YT.$$.fragment,f),C(R8.$$.fragment,f),C(o7.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(t7.$$.fragment,f),C(j8.$$.fragment,f),C(s7.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(i7.$$.fragment,f),C(X8.$$.fragment,f),C(p7.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(u7.$$.fragment,f),C(U8.$$.fragment,f),C(F7.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(M7.$$.fragment,f),C(ex.$$.fragment,f),C(b9.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(F9.$$.fragment,f),C(nx.$$.fragment,f),C(X9.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(Q9.$$.fragment,f),C(cx.$$.fragment,f),C(sM.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(iM.$$.fragment,f),C(px.$$.fragment,f),C(_M.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(bM.$$.fragment,f),C(Fx.$$.fragment,f),C(jM.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(GM.$$.fragment,f),C(wx.$$.fragment,f),C(KM.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(eE.$$.fragment,f),C($x.$$.fragment,f),C(LE.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(xE.$$.fragment,f),C(Bx.$$.fragment,f),C(WE.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(UE.$$.fragment,f),C(Dx.$$.fragment,f),C(KE.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(eC.$$.fragment,f),C(Qx.$$.fragment,f),C(rC.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(aC.$$.fragment,f),C(Yx.$$.fragment,f),C(wC.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(LC.$$.fragment,f),C(r$.$$.fragment,f),C(HC.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(JC.$$.fragment,f),C(l$.$$.fragment,f),C(KC.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(e3.$$.fragment,f),C(m$.$$.fragment,f),C(r3.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(a3.$$.fragment,f),C(u$.$$.fragment,f),C(S3.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(P3.$$.fragment,f),C(M$.$$.fragment,f),C(z3.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(W3.$$.fragment,f),C(L$.$$.fragment,f),C(l5.$$.fragment,f),C(y$.$$.fragment,f),C(x$.$$.fragment,f),C(k$.$$.fragment,f),C(d5.$$.fragment,f),C(S$.$$.fragment,f),C(F5.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(M5.$$.fragment,f),C(N$.$$.fragment,f),C(R5.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(B5.$$.fragment,f),C(O$.$$.fragment,f),C(Q5.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(Q$.$$.fragment,f),C(H5.$$.fragment,f),C(W$.$$.fragment,f),C(n0.$$.fragment,f),C(H$.$$.fragment,f),C(U$.$$.fragment,f),C(Y$.$$.fragment,f),C(l0.$$.fragment,f),C(K$.$$.fragment,f),C(_0.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(b0.$$.fragment,f),C(tk.$$.fragment,f),C(L0.$$.fragment,f),C(ak.$$.fragment,f),C(nk.$$.fragment,f),C(lk.$$.fragment,f),C(x0.$$.fragment,f),C(ik.$$.fragment,f),C(k0.$$.fragment,f),C(dk.$$.fragment,f),C(ck.$$.fragment,f),C(mk.$$.fragment,f),C(R0.$$.fragment,f),C(gk.$$.fragment,f),C(I0.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(q0.$$.fragment,f),C(vk.$$.fragment,f),C(D0.$$.fragment,f),TQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(lt),f&&t(Oe),f&&t(We),f&&t(Bf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(wo),f&&t(Ra),f&&t(_Xe),f&&t(Pi),w(cL),f&&t(uXe),f&&t(jn),f&&t(bXe),w(fL,f),f&&t(vXe),f&&t(zS),f&&t(FXe),w(qf,f),f&&t(TXe),f&&t(Bi),w(mL),f&&t(MXe),f&&t(Ao),w(gL),w(_L),w(Yg),w(uL),f&&t(EXe),f&&t(Ni),w(bL),f&&t(CXe),f&&t(Lo),w(vL),w(ML),w(Rh),w(EL),f&&t(wXe),f&&t(qi),w(CL),f&&t(AXe),f&&t(yo),w(wL),w(yL),w(up),w(bp),w(xL),f&&t(LXe),f&&t(ji),w($L),f&&t(yXe),f&&t(xo),w(kL),w(PL),w(jp),w(Dp),w(BL),f&&t(xXe),f&&t(Gi),w(IL),f&&t($Xe),f&&t($o),w(NL),w(jL),w(Vp),w(DL),w(Hu),f&&t(kXe),f&&t(Xi),w(GL),f&&t(SXe),f&&t(ko),w(OL),w(XL),w(Ju),w(zL),w(V1),f&&t(RXe),f&&t(Wi),w(QL),f&&t(PXe),f&&t(So),w(WL),w(UL),w(z1),w(JL),w(R2),f&&t(BXe),f&&t(Ji),w(YL),f&&t(IXe),f&&t(Ro),w(KL),w(ey),w(B2),w(oy),w(T4),f&&t(NXe),f&&t(Zi),w(ry),f&&t(qXe),f&&t(Po),w(ty),w(ny),w(E4),w(sy),w(V4),f&&t(jXe),f&&t(rd),w(ly),f&&t(DXe),f&&t(Bo),w(iy),w(cy),w(z4),w(fy),w(Vb),f&&t(GXe),f&&t(nd),w(my),f&&t(OXe),f&&t(Io),w(gy),w(py),w(zb),w(_y),w(Ev),f&&t(VXe),f&&t(id),w(uy),f&&t(XXe),f&&t(No),w(by),w(Fy),w(wv),w(Ty),w(Rv),f&&t(zXe),f&&t(fd),w(My),f&&t(QXe),f&&t(jo),w(Ey),w(wy),w(Bv),w(Ay),w(vF),f&&t(WXe),f&&t(hd),w(Ly),f&&t(HXe),f&&t(Do),w(yy),w($y),w(TF),w(ky),w(f6),f&&t(UXe),f&&t(ud),w(Sy),f&&t(JXe),f&&t(Go),w(Ry),w(By),w(g6),w(Iy),w(_6),f&&t(YXe),f&&t(Fd),w(Ny),f&&t(KXe),f&&t(Oo),w(qy),w(Dy),w(b6),w(Gy),w(P6),f&&t(ZXe),f&&t(Ed),w(Oy),f&&t(eze),f&&t(Vo),w(Vy),w(zy),w(I6),w(Qy),w(j6),f&&t(oze),f&&t(Ad),w(Wy),f&&t(rze),f&&t(Xo),w(Hy),w(Jy),w(G6),w(Yy),w(X6),f&&t(tze),f&&t(xd),w(Ky),f&&t(aze),f&&t(zo),w(Zy),w(o8),w(Q6),w(r8),w(tT),f&&t(nze),f&&t(Sd),w(t8),f&&t(sze),f&&t(Qo),w(a8),w(s8),w(nT),w(l8),w(mT),f&&t(lze),f&&t(Bd),w(i8),f&&t(ize),f&&t(Wo),w(d8),w(f8),w(hT),w(m8),w(AT),f&&t(dze),f&&t(qd),w(g8),f&&t(cze),f&&t(Ho),w(h8),w(_8),w(yT),w(u8),w(ST),f&&t(fze),f&&t(Gd),w(v8),f&&t(mze),f&&t(Uo),w(F8),w(M8),w(PT),w(E8),w(GT),f&&t(gze),f&&t(Xd),w(C8),f&&t(hze),f&&t(Jo),w(w8),w(L8),w(VT),w(y8),w(UT),f&&t(pze),f&&t(Wd),w(x8),f&&t(_ze),f&&t(Yo),w($8),w(S8),w(YT),w(R8),w(o7),f&&t(uze),f&&t(Jd),w(B8),f&&t(bze),f&&t(Ko),w(I8),w(q8),w(t7),w(j8),w(s7),f&&t(vze),f&&t(Zd),w(D8),f&&t(Fze),f&&t(Zo),w(G8),w(V8),w(i7),w(X8),w(p7),f&&t(Tze),f&&t(rc),w(z8),f&&t(Mze),f&&t(er),w(Q8),w(H8),w(u7),w(U8),w(F7),f&&t(Eze),f&&t(nc),w(J8),f&&t(Cze),f&&t(or),w(Y8),w(Z8),w(M7),w(ex),w(b9),f&&t(wze),f&&t(ic),w(ox),f&&t(Aze),f&&t(rr),w(rx),w(ax),w(F9),w(nx),w(X9),f&&t(Lze),f&&t(fc),w(sx),f&&t(yze),f&&t(tr),w(lx),w(dx),w(Q9),w(cx),w(sM),f&&t(xze),f&&t(hc),w(fx),f&&t($ze),f&&t(ar),w(mx),w(hx),w(iM),w(px),w(_M),f&&t(kze),f&&t(uc),w(_x),f&&t(Sze),f&&t(nr),w(ux),w(vx),w(bM),w(Fx),w(jM),f&&t(Rze),f&&t(Fc),w(Tx),f&&t(Pze),f&&t(sr),w(Mx),w(Cx),w(GM),w(wx),w(KM),f&&t(Bze),f&&t(Ec),w(Ax),f&&t(Ize),f&&t(lr),w(Lx),w(xx),w(eE),w($x),w(LE),f&&t(Nze),f&&t(Ac),w(kx),f&&t(qze),f&&t(ir),w(Sx),w(Px),w(xE),w(Bx),w(WE),f&&t(jze),f&&t(xc),w(Ix),f&&t(Dze),f&&t(dr),w(Nx),w(jx),w(UE),w(Dx),w(KE),f&&t(Gze),f&&t(Sc),w(Ox),f&&t(Oze),f&&t(cr),w(Vx),w(zx),w(eC),w(Qx),w(rC),f&&t(Vze),f&&t(Bc),w(Wx),f&&t(Xze),f&&t(fr),w(Hx),w(Jx),w(aC),w(Yx),w(wC),f&&t(zze),f&&t(qc),w(Kx),f&&t(Qze),f&&t(mr),w(Zx),w(o$),w(LC),w(r$),w(HC),f&&t(Wze),f&&t(Gc),w(t$),f&&t(Hze),f&&t(gr),w(a$),w(s$),w(JC),w(l$),w(KC),f&&t(Uze),f&&t(Xc),w(i$),f&&t(Jze),f&&t(hr),w(d$),w(f$),w(e3),w(m$),w(r3),f&&t(Yze),f&&t(Wc),w(g$),f&&t(Kze),f&&t(pr),w(h$),w(_$),w(a3),w(u$),w(S3),f&&t(Zze),f&&t(Jc),w(b$),f&&t(eQe),f&&t(_r),w(v$),w(T$),w(P3),w(M$),w(z3),f&&t(oQe),f&&t(Zc),w(E$),f&&t(rQe),f&&t(ur),w(C$),w(A$),w(W3),w(L$),w(l5),f&&t(tQe),f&&t(rf),w(y$),f&&t(aQe),f&&t(br),w(x$),w(k$),w(d5),w(S$),w(F5),f&&t(nQe),f&&t(nf),w(R$),f&&t(sQe),f&&t(vr),w(P$),w(I$),w(M5),w(N$),w(R5),f&&t(lQe),f&&t(df),w(q$),f&&t(iQe),f&&t(Fr),w(j$),w(G$),w(B5),w(O$),w(Q5),f&&t(dQe),f&&t(mf),w(V$),f&&t(cQe),f&&t(Tr),w(X$),w(Q$),w(H5),w(W$),w(n0),f&&t(fQe),f&&t(pf),w(H$),f&&t(mQe),f&&t(Mr),w(U$),w(Y$),w(l0),w(K$),w(_0),f&&t(gQe),f&&t(bf),w(Z$),f&&t(hQe),f&&t(Er),w(ek),w(rk),w(b0),w(tk),w(L0),f&&t(pQe),f&&t(Tf),w(ak),f&&t(_Qe),f&&t(Cr),w(nk),w(lk),w(x0),w(ik),w(k0),f&&t(uQe),f&&t(Cf),w(dk),f&&t(bQe),f&&t(wr),w(ck),w(mk),w(R0),w(gk),w(I0),f&&t(vQe),f&&t(Lf),w(pk),f&&t(FQe),f&&t(Ar),w(_k),w(bk),w(q0),w(vk),w(D0)}}}const SUt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function RUt($){return kWt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class DUt extends LWt{constructor(g){super();yWt(this,g,RUt,kUt,xWt,{})}}export{DUt as default,SUt as metadata};
